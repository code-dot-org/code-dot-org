#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
# A daemonized version of 'process_queues'
# process_queues_daemon -r [start|stop|restart|reload|status] -c <config file to use>

require 'daemons'
require 'pathname'

pwd = File.dirname(File.expand_path(__FILE__))
log_dir = Pathname.new(File.join(pwd, '../../log/')).cleanpath
config_dir = Pathname.new(File.join(pwd, '../../config/')).cleanpath

command = nil
config_file = "#{config_dir}/queue_config.json.erb"

OptionParser.new do |opts|
  opts.on('-r', '--run COMMAND', 'The command to run - either start, stop, restart, reload, status') do |run_command|
    command = run_command
  end

  opts.on('-c', '--config CONFIG', 'Path to the config file to use') do |config|
    config_file = Pathname.new(config).cleanpath
  end

  opts.on('-h', '--help', 'Print this usage') do
    puts opts
    exit
  end
end.parse!

command = ARGV.shift if command.nil?

if command.nil? || !(%w(start stop restart reload status).include?(command))
  raise OptionParser::MissingArgument, 'Need a command to run - start, stop, restart, reload, status'
end

argv = [command, '--', config_file]

options = {
  dir_mode: :normal, # Use absolute directory paths.
  dir: config_dir, # directory where pid file will be stored
  log_dir: log_dir,
  backtrace: true,   # Log uncaught exceptions to ‘[app_name].log’ in the pid-file directory.
  monitor: true,     # Monitor the program and restart crashed instances.
  log_output: true,  # Log the output to process_queues.output in the config directory.
  multiple: true,    # Allow multiple instances of the queue processor on one machine.
  ARGV: argv
}

if command == 'start'
  # Make sure the config file exists.
  raise "#{config_file} does not exist" unless File.exist?(config_file)
  raise "#{config_file} is not readable" unless File.readable?(config_file)

  puts " * Using config #{config_file}"
  puts " * Logging to #{log_dir}/process_queues.output"
end

Daemons.run("#{pwd}/process_queues", options)
