#!/usr/bin/env ruby
# A script for processing a set of SQS queues defined by a config file.
# Usage ./process_queues QUEUE_CONFIG.JSON

require 'logger'

puts "Booting..."
require 'aws-sdk'
Aws.eager_autoload!

require_relative '../../config/environment'
require 'json'
require 'pp'

require 'sqs/queue_processor_config'
require 'sqs/queue_processor'

# A manager for starting and stopping a set of queue processors based
# on a JSON config file.
class QueueProcessorManager
  attr_accessor :logger, :argv

  def initialize(argv, logger = Logger.new(STDOUT))
    @argv = argv
    @logger = logger
    @processors = []
  end

  # Starts as set of queue processors based on a config hash.
  # @return [Hash<String, SQS::Metric] A map from name to metrics for each queue.
  def start_queue_processors(json)
    metrics_map = {}
    configs = SQS::QueueProcessorConfig.create_configs_from_json(json)
    configs.each do |config|
      if config.queue_url.blank?
        logger.warn "Ignoring #{config.name} since it has no queue url."
        next
      end

      logger.info "Starting queue processor for #{config.name}"
      sqs_metrics = SQS::Metrics.new
      metrics_map[config.name] = sqs_metrics
      processor = SQS::QueueProcessor.new(config, sqs_metrics)
      processor.start
      @processors << processor
    end
    metrics_map
  end

  # Stop all of the queue processors in parallel.
  # Blocks until they all have stopped.
  def stop_queue_processors
    threads = []
    @processors.each do |processor|
      threads << Thread.new {
        processor.stop
      }
    end
    threads.each(&:join)
  end

  def run
    if argv.size < 1
      puts "Usage: #{$0} CONFIG_FILE.json.erb [UPDATE-INTERVAL]"
      exit 0
    end
    config_file = argv[0]
    logger.info "Reading config file #{config_file}"
    erb = ERB.new(File.open(config_file).read)
    erb.filename = config_file
    json = erb.result
    puts json

    update_interval = (argv.size >= 2) ? argv[1].to_i : 10
    update_interval = 1 if update_interval < 1  # Don't update too quickly.

    metrics_map = start_queue_processors(json)

    # Run until SIGINT is received.
    stopping = false
    exit_proc = Proc.new {
      puts "Shutting down, please wait..."
      stop_queue_processors unless stopping
      stopping = true
      exit
    }
    Signal.trap('SIGINT') {
      exit_proc.call
    }
    Signal.trap('SIGTERM') {
      exit_proc.call
    }

    start_time = Time.now.to_i

    last_changed = false
    old_metrics_json = ""
    loop do
      # Only display the metrics map if something changed.
      if metrics_map.to_json == old_metrics_json
        print "."
        last_changed = false
      else
        puts if !last_changed
        last_changed = true
        metrics_map.each do |k,v|
          logger.info "#{k}: #{v}  time=#{Time.now.to_i - start_time}"
        end
        old_metrics_json = metrics_map.to_json
      end
      sleep update_interval
    end # loop
  end

end

QueueProcessorManager.new(ARGV).run
