# == Schema Information
#
# Table name: lesson_groups
#
#  id          :integer          not null, primary key
#  name        :string(255)
#  unit_id     :integer
#  user_facing :boolean
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#
# Indexes
#
#  index_lesson_groups_on_unit_id  (unit_id)
#

class LessonGroup < ApplicationRecord
  belongs_to :script, foreign_key: 'unit_id'
  has_many :stages

  def localized_name
    I18n.t "data.lesson_group.name.#{name}"
  end

  # This method updates lesson_groups.en.yml with i18n data from the lesson_groups.
  # There is currently only 1 type of i18n data
  # 1. Lesson Group names, which we get from the script DSL, and is passed in as stages_i18n here
  def self.merge_and_write_i18n(lesson_groups_i18n)
    lesson_groups_yml = File.expand_path('config/locales/lesson_groups.en.yml')
    i18n = File.exist?(lesson_groups_yml) ? YAML.load_file(lesson_groups_yml) : {}

    updated_i18n = update_i18n(i18n, lesson_groups_i18n)
    File.write(lesson_groups_yml, "# Autogenerated lesson groups locale file.\n" + updated_i18n.to_yaml(line_width: -1))
  end

  def self.update_i18n(existing_i18n, new_i18n)
    lesson_groups_i18n = {'en' => {'data' => {'lesson_group' => {'name' => new_i18n}}}}
    existing_i18n.deep_merge(lesson_groups_i18n)
  end

  # Creates an object representing all translations associated with this lesson group
  # in a format that can be deep-merged with the contents of lesson_groups.en.yml.
  def summarize_i18n_for_copy(new_name)
    {'en' => {'data' => {'lesson_group' => {'name' => new_name}}}}
  end
end
