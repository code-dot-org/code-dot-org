require 'cdo/aws/s3'
require 'image_lib'
require 'digest/md5'

# A bitmap image generated by a specific LevelSource
class LevelSourceImage < ActiveRecord::Base
  belongs_to :level_source
  
#   MIN_GOOD_IMAGE_SIZE = 1000 # I just kind of arbitrarily picked this because all the empty images I saw were < 1000 bytes
  
  # def better?(new_image)
  #   image.size < MIN_GOOD_IMAGE_SIZE &&
  #     new_image.size > image.size
  # end
  
  # def replace_image_if_better(new_image)
  #   if image.blank? || better?(new_image)
  #     self.image = new_image
  #     save
  #   end
  # end

  def save_to_s3(image)
    AWS::S3.upload_to_bucket('cdo-art', s3_filename, image, no_random: true)

    if level_source.level.skin == 'anna' || level_source.level.skin == 'elsa'
      image_filename = "app/assets/images/blank_sharing_drawing_#{skin}.png"
    else
      image_filename = "app/assets/images/blank_sharing_drawing.png"
    end

    framed_image =  ImageLib::overlay_image(:background_url => Rails.root.join(image_filename),
                                            :foreground_blob => image).to_blob
    AWS::S3.upload_to_bucket('cdo-art', s3_framed_filename, framed_image, no_random: true)
  end

  def s3?
    # if we don't have the image, it must be in s3
    image == 'S3'
  end

  def LevelSourceImage.hashify_filename(plain)
    [Digest::MD5.hexdigest(plain), plain].join('=')
  end

  def s3_filename
    LevelSourceImage.hashify_filename "#{Rails.env}/#{id}.png"
  end

  def s3_framed_filename
    LevelSourceImage.hashify_filename "#{Rails.env}/#{id}_framed.png"
  end

  # TODO: make this url work for https
  S3_URL = "http://cdo-art.s3-website-us-east-1.amazonaws.com/"

  def s3_url
    S3_URL + s3_filename
  end

  def s3_framed_url
    S3_URL + s3_framed_filename
  end

end
