/**
 * Dynamic header generation and event bindings for header actions.
 */

// TODO: Enable the 'destroyed' method?   No need if we're just going to switch to React later.
// (function($){ $.event.special.destroyed = { remove: function(o) { if (o.handler) { o.handler() } } } })(jQuery);


// ****************
//  IMPORTANT NOTE
// ****************
//
// This file contains proof-of-concept code (though it's safe for production)
// - UIComponent is an example React implementation
// - UIStore is an example Flux implementation
// - UIRouter is a really simple router
//
// These classes (and the derived ones) look pretty 'bulky' as they are written today.
// If we begin using React, this file will shrink to less than half of its current size.
// With CoffeeScript it'll shrink at least another half.
// There's really not that much "logic" here, it's just boilerplate that can be eliminated!


// New private scope -- a lot of this is boilerplate for class structures, taken from coffeescript
(function() {
  var
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  // class UIComponent: this is a lightweight inheritable class modeled after React
  UIComponent = (function() {

    function UIComponent($el, props) {
      this.onClick = __bind(this.onClick, this);
      this.onUpdate = __bind(this.onUpdate, this);
      this.onDestroy = __bind(this.onDestroy, this);

      this.$el = $el;
      this.$el.on('click', this.onClick);
      this.$el.on('destroyed', this.onDestroy);

      this.props = props || $el.data();
      this.isMounting = true;

      // Set the initial state
      this.replaceState( this.getInitialState() || {} );
    }

    // Destroy a UI component
    UIComponent.prototype.onDestroy = function() {
      // Don't do anything if already not mounted
      if (!this.isMounted())
        return;

      this.componentWillUnmount();

      // Remove any event handlers
      var $el = this.$el;
      this.$el = null;
      $el.off('click', this.onClick);
      $el.on('destroyed', this.onDestroy);

      this.componentDidUnmount();
    }

    // Return a default state for this component
    UIComponent.prototype.getInitialState = function() { }

    // Extend/merge my state and possibly re-render
    UIComponent.prototype.setState = function(state) {
      if (!this.isUpdating) {
        // Allow things to settle - no need to call more than once per execution
        this.isUpdating = setTimeout( this.onUpdate, 1 );
      }

      // Merge this into our state
      for (var key in state) {
        if (__hasProp.call(state, key))
          this.state[key] = state[key];
      }
    }

    // Replace my state and possibly re-render
    UIComponent.prototype.replaceState = function(state) {
      if (!this.isUpdating) {
        // Allow things to settle - no need to call more than once per execution
        this.isUpdating = setTimeout( this.onUpdate, 1 );
      }

      this.state = state || {};
    }

    // My state has been changed, and we've let all other processes yield, so we know
    // there are no more changes coming.  Time to update the DOM.
    UIComponent.prototype.onUpdate = function(ev) {
      // Don't do anything if no longer mounted
      if (!this.isMounted())
        return;

      this.isMounting ? this.componentWillMount() : this.componentWillUpdate();

      this.render();
      delete this.isUpdating;

      this.isMounting ? this.componentDidMount() : this.componentDidUpdate();
      delete this.isMounting;
    }

    // Render into this element, given some state
    // There is no default rendering
    UIComponent.prototype.render = function() { }

    // Handle a click
    // There is no default click behavior
    UIComponent.prototype.onClick = function(ev) { }

    // Mount/unmount notifications
    UIComponent.prototype.componentWillMount = function() { }
    UIComponent.prototype.componentDidMount = function() { }
    UIComponent.prototype.componentWillUnmount = function() { }
    UIComponent.prototype.componentDidUnmount = function() { }
    UIComponent.prototype.componentWillUpdate = function() { }
    UIComponent.prototype.componentDidUpdate = function() { }
    UIComponent.prototype.isMounted = function() {
      return this.$el !== null;
    }

    return UIComponent;
  })();





  // class UIRouter: this is an incredibly simple router with our routes baked into it.
  // This will be completely replaced when we choose a router.
  UIRouter = (function() {

    function UIRouter() { }

    UIRouter.prototype.route = function() {
      var re, parts,
        url = window.location.pathname;

      // s/:script_id/level/:level_id
      // (only applies to the 20-hour course)
      re = /\/s\/\d+\/level\/(\d+)$/i;
      parts = url.match(re);
      if (parts) {
        window.headerProgress = new HeaderProgress( $('.header-wrapper'), {
          script_name: '20-hour',
          level_id: parts[1]
        });
        return;
      }

      // s/:script_name/stage/:stage_id/level/:level_id
      re = /\/s\/(.+)\/stage\/(\d+)\/puzzle\/(\d+)$/i;
      parts = url.match(re);
      if (parts) {
        window.headerProgress = new HeaderProgress( $('.header-wrapper'), {
          script_name: parts[1],
          stage_id: parts[2],
          level_id: parts[3]
        });
        return;
      }

      // Unknown route
      return null;
    }


    return UIRouter;
  })();




  // class UIStore: this is a lightweight inheritable *ABSTRACT* class modeled after Flux
  // UIStore is "offline-aware", meaning that it will load assets in a different way when
  // it knows that there is no network connection.
  UIStore = (function() {

    function UIStore() {
      this.save = __bind(this.save, this);
      this.onAjaxFailure = __bind(this.onAjaxFailure, this);

      this.value = null; // Empty store
    }

    // Get the value of this store
    UIStore.prototype.value = function() { return this.value; }

    // When this store changes, notify via callback(data)
    // TODO: Maintain a list of callbacks
    UIStore.prototype.notify = function(callback) {
      this.notificationCallback = callback;
    }

    // Internal call to process any data that's being saved
    UIStore.prototype.process = function(data) { return data; }

    // Set the value of this store and notify the dependent
    UIStore.prototype.save = function(data) {
      this.value = this.process(data);

      // Note: Flux uses emitters...
      if (this.notificationCallback)
        this.notificationCallback(this.value);
    }

    // Resolve a dynamic asset by combining the base asset filename + a serialized version of the args
    // MUST override this.  It's okay to use args and dataType to determine the URL.
    UIStore.prototype.resolveUrl = function(args, dataType) {
      throw new Error("This store has not specified its URL.");
    }

    // Resolve a static asset by combining the base asset filename + a serialized version of the args
    // MUST override this if you want to support offline access.
    // Example: return "/data/file_" + args.id + "." + dataType;
    UIStore.prototype.resolveFilename = function(args, dataType) {
      throw new Error("This store does not support offline mode.");
    }

    // Resolve the AJAX parameters for a dynamic request
    // Okay to override this to, for instance, move some of the args into the URL, etc.
    UIStore.prototype.resolve = function(args, dataType) {
      return {
        url: this.resolveUrl(args, dataType),
        data: args
      };
    }

    // What are the AJAX parameters for this callback?
    // If you override this, the override should be offline-aware.
    UIStore.prototype.resolveAjax = function(args, dataType) {
      var ajax;

      if (!this.offline)
        return this.resolve(args);

      // Offline case
      return {
        url: this.resolveFilename(args, dataType)
      };
    }

    UIStore.prototype.onAjaxFailure = function(xhr, status, message) {
      // TODO
    }

    // Load data into this store
    UIStore.prototype.$load = function(args, dataType, fnSave) {
      dataType = dataType || "json";

      // Set up the AJAX call to request the asset and then store the data, or raise an error.
      var ajax = this.resolveAjax(args, dataType);
      ajax.dataType = dataType;
      ajax.success = fnSave || this.save;
      ajax.error = this.onAjaxError;

      return $.ajax(ajax);
    }

    // Load JSON data into this store.
    UIStore.prototype.load = function(args) {
      return this.$load(args, "json");
    }

    // Helper: Load XML and return it as a JSON structure
    UIStore.prototype.loadXML = function(args) {
      return this.$load(args, "xml");
    }

    // Helper: Load HTML into this store, as a string
    UIStore.prototype.loadHTML = function(args) {
      return this.$load(args, "html");
    }

    return UIStore;
  })();




  // class HeaderStore extends UIStore
      /**
     * @param data {{
     *   title: string,
     *   finishLink: string,
     *   statsPath: string,
     *   showStageLinks: boolean,
     *   trophies: Object,
     *   scriptId: number,
     *   scriptLevelId: number,
     *   currentLevelIndex: number,
     *   levels: Array.<{
     *     displayText: string,
     *     status: string,
     *     unplugged: boolean,
     *     assessment: boolean
     *   }>
     * }}
     */
  HeaderStore = (function(_super) {
    __extends(HeaderStore, _super);

    // Must have a constructor
    function HeaderStore() {
      return HeaderStore.__super__.constructor.apply(this, arguments);
    }

    HeaderStore.prototype.resolveUrl = function(args, dataType) {
      return "/popup/progress";
    }

    HeaderStore.prototype.resolveFilename = function(args, dataType) {
      return "/progress_" + args.script_name + "_" + args.stage_id + "_" + args.level_id + "." + dataType;
    }

    return HeaderStore;
  })(UIStore);



  // ScriptStore: load the script progress (used in the header dropdown)
  ScriptStore = (function(_super) {
    __extends(ScriptStore, _super);

    // Must have a constructor
    function ScriptStore() {
      return ScriptStore.__super__.constructor.apply(this, arguments);
    }

    ScriptStore.prototype.resolveUrl = function(args, dataType) {
      return "/popup/stats";
    }

    ScriptStore.prototype.resolveFilename = function(args, dataType) {
      return "/script_" + args.script_id + "." + dataType;
    }

    return ScriptStore;
  })(UIStore);



  // class HeaderProgress extends UIComponent
  HeaderProgress = (function(_super) {
    __extends(HeaderProgress, _super);

    // Must have a constructor
    function HeaderProgress($el, props) {
      HeaderProgress.__super__.constructor.apply(this, arguments);

      this.onModalClick = __bind(this.onModalClick, this);

      return this;
    }

    HeaderProgress.prototype.componentDidMount = function() {
      var _this = this;

      // Create a new HeaderStore and bind it to my state.
      // TODO: Is this the right place to put this?
      // It guarantees there will be at least one render cycle before we try to load the header.
      this.headerStore = new HeaderStore();
      this.headerStore.notify( __bind(this.replaceState, this) );

      this.scriptStore = new ScriptStore();
      this.scriptStore.notify(function(html) {
        _this.setState({
          stageHtml: html
        });
      });

      // TODO: Handle props changing.
      if (this.props.script_name)
        this.headerStore.load( this.props );

      // Create tooltips for the free-play icons
      // TODO: Might be better to initialize this component elsewhere
      $('.level_free_play').qtip({
        content: {
          attr: 'title'
        },
        position: {
          my: 'top center',
          at: 'bottom center'
        }
      });
    }


    HeaderProgress.prototype.render = function() {
      var cl, el;
      var _this = this;
      var state = this.state || {};

      // Don't render unless we are initialized with a script
      if (!this.props.script_name)
        return;

      // NOTE: All this DOM manipulation would be better done via a template - but we're in the process
      // of picking a template language vs JSX

      var $middle = _this.$el.find('.header_middle');
      $middle.children().remove();
      el = $('<div>').addClass('header_level').appendTo($middle);
      var $container = $('<div>').addClass('header_level_container').appendTo(el);

      // Title
      if (state.title) {
        $('<div>').addClass('header_text header_level_text').text(state.title).appendTo($container);
      }

      // Progress: Render the array of levels
      var levels = state.levels || [];
      if (levels.length) {
        var els = $.map(levels, function(level, index) {
          cl = 'level_link ' + level.status;
          if (level.unplugged)
            cl += ' unplugged_level';
          var link = $('<a>').addClass(cl).attr('href', level.link).text(level.displayText);

          cl = level.assessment ? 'puzzle_outer_assessment' : 'puzzle_outer_level';
          if (index === state.currentLevelIndex)
            cl += ' puzzle_outer_current';
          if (index === levels.length - 1)
            cl += ' last';
          return $('<div>').addClass(cl).append(link);
        });

        $('<div>').addClass('progress_container').append(els).appendTo($container);
      }

      // Finished link
      if (state.finishLink) {
        el = $('<div>').addClass('header_finished_link');
        $('<a>').attr('href', state.finishLink.href).text(state.finishLink.text).appendTo(el);
        el.appendTo($container);
      }

      // Trophies
      if (state.trophies) {
        el = $('<span>').addClass('header_trophy_link');
        $('<div>').addClass('header_text').text('<%= I18n.t(:trophies) %>').appendTo(el);
        $('<div>').addClass('header_status_bar current_trophies').text(state.trophies.current).appendTo(el);
        $('<div>').addClass('header_text max_trophies').text(state.trophies.of + ' ' + state.trophies.max).appendTo(el);
        el.appendTo($container);
      }

      // Stage popup
      if (state.showStageLinks) {
        el = $('<span>').addClass('header_popup_link');

        if (state.popped) {
          $('<div>').addClass('header_popup_link_glyph').html("&#x25B2;").appendTo(el);
          $('<div>').addClass('header_popup_link_text').text('<%= I18n.t(:less) %>').appendTo(el);
        } else {
          $('<div>').addClass('header_popup_link_glyph').html("&#x25BC;").appendTo(el);
          $('<div>').addClass('header_popup_link_text').text('<%= I18n.t(:more) %>').appendTo(el);
        }
        el.appendTo($container);

        $('.freeplay_links').show();
      } else {
        $('.freeplay_links').hide();
      }

      // Popup stage navigation
      if (state.popped) {
        var header_popup = $('<div>').addClass('header_popup').appendTo($middle);

        el = $('<div>').addClass('header_popup_header').appendTo(header_popup);
        $('<span>').text('<%= I18n.t("nav.popup.progress") %>').appendTo(el);
        if (state.linesOfCodeText)
          $('<div>').addClass('header_text').css('float','right').text(state.linesOfCodeText).appendTo(el);

        el = $('<div>').addClass('header_popup_body').appendTo(header_popup);
        el.html(state.stageHtml || '<div class="loading"></div>');

        el = $('<div>').addClass('header_popup_footer').appendTo(header_popup);
        $('<div>').addClass('header_popup_close').text('<%= I18n.t("nav.popup.close") %>').appendTo(el);

        // Catch clicks anywhere else and close the popup
        $(document).on('click', this.onModalClick);
      } else {
        $(document).off('click', this.onModalClick);
      }
    }

    HeaderProgress.prototype.componentDidUpdate = function() {
      // This is totally cheating by React rules.  But it's intentional: we don't want to force another
      // update so we just edit the state directly.  (React would notice that the change had no DOM effect,
      // but we don't have that optimization.)
      if (this.state.stageHtml && this.state.jumpToTrophies) {
        var off = $('#trophies').offset();
        if (off)
          window.scrollTo(0, +off.top);
        delete this.state.jumpToTrophies;
      }
    }

    // Three possible arguments: true, false, or "trophies" (the last one autoscrolls the page to the bottom of the popup)
    HeaderProgress.prototype.showPopup = function(show) {
      this.setState({
        popped: !!show,
        jumpToTrophies: show == 'trophies'
      });

      // Have we loaded the stage HTML already?  If not, load it now.
      if (this.state.popped && (this.state.stageHtml === undefined)) {
        this.state.stageHtml = false; // prevent multiple loads

        // Ask the script store to load a particular script.
        this.scriptStore.loadHTML({
          script_id: this.state.scriptId,
          script_level_id: this.state.scriptLevelId
        });

      }
    }

    HeaderProgress.prototype.onClick = function(ev) {
      var el;

      // Toggle more/less button
      el = $(ev.target).closest('.header_trophy_link');
      if (el.length) {
        ev.stopPropagation(); // Otherwise it will count as a click outside the modal.
        this.showPopup("trophies");
        return;
      }

      // Toggle more/less button
      el = $(ev.target).closest('.header_popup_link');
      if (el.length) {
        ev.stopPropagation();
        this.showPopup(!this.state.popped);
        return;
      }

      // Close button
      el = $(ev.target).closest('.header_popup_close');
      if (el.length) {
        this.showPopup(false);
        return;
      }
    }

    HeaderProgress.prototype.onModalClick = function(ev) {
      var el;

      // Clicks outside the popup close it
      el = $(ev.target).closest('.header_popup');
      if (!el.length) {
        this.showPopup(false);
        return;
      }
    }

    return HeaderProgress;
  })(UIComponent);


  // For now, create a global.  Later, this should be in module.exports
  // (Note these are already global since they're not declared via 'var'.
  window.HeaderProgress = HeaderProgress;
  window.HeaderStore = HeaderStore;
  window.UIRouter = UIRouter;

}).call(this);

// TODO: All of this needs to be converted
/*
dashboard.showProjectHeader = function () {
  function projectNameShow() {
    $('.project_name').replaceWith($('<div class="project_name header_text">').text(dashboard.currentApp.name));
    $('.project_updated_at').text(dashboard.projectUpdatedAtString()).show();
    $('.project_save').replaceWith($('<div class="project_edit header_button">').text('<%= I18n.t('project.rename') %>'));
  }

  function projectNameEdit() {
    $('.project_updated_at').hide();
    $('.project_name').replaceWith($('<input type="text" class="project_name header_input">').val(dashboard.currentApp.name));
    $('.project_edit').replaceWith($('<div class="project_save header_button">').text('<%= I18n.t('project.save') %>'));
  }

  dashboard.projectUpdatedAtString = function () {
    if (dashboard.currentApp.updatedAt) {
      return '<%= I18n.t("project.saved") %> ' +
          DateHelper.time_ago_in_words_with_parsing(dashboard.currentApp.updatedAt);
    } else {
      return '<%= I18n.t("project.not_saved") %>';
    }
  }

  var moreButton = '<%= I18n.t('project.more') %> '
      + '<span class="project_more_glyph">&#x25BC;</span>'
      + '<div class="project_more_popup" style="position: absolute;">'
      + '<a href="#" class="project_delete"><%= I18n.t('project.delete') %></a><br>'
      + '<a href="#" class="project_new"><%= I18n.t('project.new') %></a></div>';

  var nameAndUpdated = $('<div class="project_name_wrapper header_text">')
      .append($('<div class="project_name header_text">').text(dashboard.currentApp.name))
      .append($('<div class="project_updated_at header_text">').text(dashboard.projectUpdatedAtString()));

  $('.project_info').append(nameAndUpdated)
      .append($('<div class="project_edit header_button">').text('<%= I18n.t('project.rename') %>'))
      .append($('<div class="project_share header_button">').text('<%= I18n.t('project.share') %>'))
      .append($('<div class="project_more header_button" style="position: relative;">').html(moreButton));

  projectNameShow();
  $('.freeplay_links').empty().before($('<div class="project_list header_button">').text('<%= I18n.t('project.my_projects') %>'));

  $(document).on('click', '.project_edit', projectNameEdit);

  $(document).on('click', '.project_save', function () {
    $(this).attr('disabled', true);
    dashboard.currentApp.name = $('.project_name').val();
    dashboard.saveProject(function () {
      projectNameShow();
    });
  });

  $('.project_share').click(function () {
    dashboard.saveProject(function () {
      var dialog = new Dialog({body: '<div id="project-share" class="modal-content">'
          + '<p class="dialog-title"><%= I18n.t('project.share_title') %></p>'
          + '<p><%= I18n.t('project.share_copy_link') %></p>'
          + '<div><input type="text" id="sharing-input" value="' + location.href.split(/\/edit$/)[0] + '" style="cursor: copy; width: 400px;" readonly></div>'
          + '<button id="continue-button"><%= I18n.t('project.ok') %></button></div>'
      });
      $('#sharing-input').click(function () {
        this.select();
      })
      dialog.show();
      $('#project-share #continue-button').click(function() {
        dialog.hide();
      });
    });
  });

  var $projectMorePopup = $('.project_more_popup');
  function hideProjectMore() {
    $projectMorePopup.hide();
    $('.project_more_glyph').html('&#x25BC;');
    $(document).off('click', hideProjectMore);
  }
  $('.project_more').click(function (e) {
    if ($projectMorePopup.is(':hidden')) {
      e.stopPropagation();
      $projectMorePopup.show();
      $('.project_more_glyph').html('&#x25B2;');
      $(document).on('click', hideProjectMore);
    }
  });
  $projectMorePopup.click(function (e) {
    e.stopPropagation(); // Clicks inside the popup shouldn't close it.
  });

  $('.project_delete').click(function (e) {
    e.preventDefault(); // Don't change the hash.
    var dialog = new Dialog({body: '<div id="confirm-delete" class="modal-content">'
        + '<p class="dialog-title"><%= I18n.t('project.delete_confirm_title') %></p>'
        + "<p><%= I18n.t('project.delete_confirm_text') %></p>"
        + '<button id="again-button"><%= I18n.t('project.cancel') %></button><button id="continue-button" style="float: right"><%= I18n.t('project.delete') %></button></div>'
    });
    dialog.show();
    $('#confirm-delete #continue-button').click(function () {
      dashboard.deleteProject(function () {
        location.href = location.pathname;
      });
    });
    $('#confirm-delete #again-button').click(function () {
      dialog.hide();
    });
  });

  $('.project_new').click(function (e) {
    e.preventDefault(); // Don't change the hash.
    // Save the project if one exists (i.e. isn't just the default one) then navigate.
    if (dashboard.currentApp.id) {
      dashboard.saveProject(function () {
        location.href = location.pathname;
      });
    } else {
      location.href = location.pathname;
    }
  });

  $(document).on('click', '.project_list', function () {
    location.href = '/p'; <%# TODO: Can't call project_list_path because it's not in scope %>
  });
};
*/
