:css
  .video-page p,li {
    font-size: 16px;
    line-height: 20px;
  }
  .video-page .smaller-text {
    font-size: 14px;
  }

%div.video-page
  %h1 Video Test Page

  %p.smaller-text
    We've had intermittent reports from schools having trouble viewing tutorial videos on Code.org.
    To ensure that every student has the best experience, please try our new video player and complete the below survey
    %strong from a student computer
    at your school.
    This will help us optimize our player for your school.

  %h3 1. Try playing this video

  %p This is our new video player. If YouTube is blocked, it will try to use a different source.

  #video-container{width: 600, height:400, style: 'margin-bottom: 10px; margin-top: 10px;'}

  %ul
    %li Can you see the video?
    %li Can you play the video?

  %h3
    2.
    %a#survey-link{} Submit our quick survey

  %h3 Thanks!

  %hr

%div
  %h4 More information (pre-filled in survey)

  %h4 Your browser info

  %p= request.env['HTTP_USER_AGENT']

  %p#flash-installed

  %p= params.has_key?(:force_youtube_fallback) ? 'Faking YouTube blocked' : ''

  %h4 YouTube block detection

  %p.blockedStatus{style: "font-family: 'Gotham 7r', sans-serif; font-weight: normal;"} Detection succeeded. Assuming YouTube is not blocked.

  %h4 Test options

  %span
    Fake YouTube being blocked:
    %a{href: '?force_youtube_fallback'} on
    \/
    %a{href: '?'} off

:javascript
  var formLink = {
    template: "https://docs.google.com/forms/d/1yIdim-dyUWcmDQWTV-YeimE9tBUvWK-H7ZULItQ9rR8/viewform?entry.1520933088=browser&entry.515663950=youtubeReachable&entry.1331880569=flashInstalled",
    prefills: {
      browser: 'no info',
      youtubeReachable: 'no info',
      flashInstalled: 'Yes' // Yes / No
    },
    fillTemplate: function() {
      var filledOut = this.template;
      for (var k in this.prefills){
        if (this.prefills.hasOwnProperty(k)) {
          filledOut = filledOut.replace(k, this.prefills[k]);
        }
      }
      return filledOut;
    },
    fillFieldEncoded: function(key, contents) {
      this.prefills[key] = encodeURIComponent(contents);
      $('#survey-link').attr('href', this.fillTemplate());
    }
  };
  var userAgent = '#{request.env['HTTP_USER_AGENT']}';
  formLink.fillFieldEncoded('browser', userAgent);

  var videoInfo = #{video_info(Video.first).to_json};
  videoInfo['enable_fallback'] = true;
  videoInfo['src'] = videoInfo['src'].replace('#{youtube_base_url}', 'https://www.youtube.com');

  $('#video-container').append(createVideoWithFallback(videoInfo, 600, 400));

  var fakingYouTubeBlocked = "#{params.has_key?(:force_youtube_fallback) ? 'Faking YouTube blocked' : ''}";
  $('.blockedStatus').css('color', 'green');
  formLink.fillFieldEncoded('youtubeReachable', 'Yes, reached');
  onYouTubeBlocked(function() {
    $('.blockedStatus').html('YouTube could not be reached. Assuming YouTube is blocked. Using fallback.').css('color', 'red');
    formLink.fillFieldEncoded('youtubeReachable', fakingYouTubeBlocked || 'No, not reached');
  });

  function hasFlashInstalled(){
    // via http://www.blangdon.com/writing/about/detect-flash-with-javascript/
    if (navigator.plugins != null && navigator.plugins.length > 0){
      return navigator.plugins["Shockwave Flash"] && true;
    }
    if (~navigator.userAgent.toLowerCase().indexOf("webtv")){
      return true;
    }
    if (~navigator.appVersion.indexOf("MSIE") && !~navigator.userAgent.indexOf("Opera")){
      try{
        return new ActiveXObject("ShockwaveFlash.ShockwaveFlash") && true;
      } catch(e){}
    }
    return false;
  }

  var flashStatus = hasFlashInstalled() ? 'Flash is installed' : 'Flash is not installed';
  $('#flash-installed').html(flashStatus);
  formLink.fillFieldEncoded('flashInstalled', hasFlashInstalled() ? 'Yes' : 'No');
