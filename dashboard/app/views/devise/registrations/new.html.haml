- require 'country_codes'
- resource.user_type ||= params[:user].try(:fetch, :user_type) || User::TYPE_STUDENT

-#
  Retrieve the return_to value from the session, which will also delete it.
  It means that a failed attempted to sign up here will no longer take the
  user to the recorded return_to URL upon a future attempt at sign-in/up, but
  that should be alright because it's really only a best-attempt, and not
  crucial, and should probably only be done immediately after the user attempted
  to go that that URL anyway, not a long time afterwards which is confusing.

- return_to_url = get_and_clear_session_return_to

:css
  .form-group {
    margin-top: 0px !important
  }

#signup
  .row
    .span9
      %h1= t('signup_form.signup_title')
      %p= t('signup_form.overview_student').html_safe
      %p= sanitize(t('signup_form.no_signup_message').html_safe, tags: %w(a), attributes: %w(href target))

  .row
    .span8.signupblock{style: "background-color:white"}

      = form_for(resource, as: resource_name, url: registration_path(resource_name), html: {class: 'signupform', onsubmit: "return submitForm();"}) do |f|

        #usertype-block.itemblock
          .labelblock= t('signup_form.user_type_label')
          - type_options = [[t('signup_form.user_type_student'), User::TYPE_STUDENT], [t('signup_form.user_type_teacher'), User::TYPE_TEACHER]]
          = f.select :user_type, type_options, {}, {class: "fieldblock", onchange: "changeRole($(this).val());", style: "width: 234px"}

        = signup_error_messages!

        = f.hidden_field :locale, value: locale
        = f.hidden_field :hashed_email

        #name-block.itemblock
          .labelblock= t('activerecord.attributes.user.name')
          = f.text_field :name, class: 'input-xlarge fieldblock', autofocus: true, maxlength: 255
          .error_in_field

        #email-block.itemblock
          .labelblock= t('activerecord.attributes.user.email')
          = f.email_field :email, class: 'input-xlarge fieldblock', maxlength: 255
          .error_in_field

        - if f.object.password_required?
          #password-block.itemblock
            .labelblock= t('activerecord.attributes.user.password')
            = f.password_field :password, class: 'input-xlarge fieldblock', maxlength: 255
            .error_in_field

          #password_confirmation-block.itemblock
            .labelblock= t('activerecord.attributes.user.password_confirmation')
            = f.password_field :password_confirmation, class: 'input-xlarge fieldblock', maxlength: 255
            .error_in_field

        #schoolname-block.itemblock{style: "display: none"}
          .labelblock= t('signup_form.school_name')
          = f.text_field :school, class: 'input-xlarge fieldblock', maxlength: 255
          .error_in_field

        #age-block.itemblock
          .labelblock= t('signup_form.age')
          %select#user_user_age.fieldblock{name: "user[age]", type: "select", style: "width: 234px"}
            %option{value: "", selected: true, disabled: true}
            - User::AGE_DROPDOWN_OPTIONS.each do |age_option|
              %option{value: age_option}= age_option
          .error_in_field

        #gender-block.itemblock
          .labelblock= t('signup_form.gender')
          = f.select :gender, gender_options, {disabled: '', selected: '' }, { class: 'fieldblock', style: "width: 234px"}
          .error_in_field

        -# TODO (brendan): implement additional school info fields
        -# schoolcountry-block.itemblock{style: "display: none"}
          .labelblock= "Country"
          %select#schoolcountry.form-control.fieldblock{name: "user[school_country]", type: "select"}
            %option{value: "", selected: true, disabled: true}
            - get_all_countries.each do |country_abbr, country_name|
              %option{value: country_abbr}= country_name
            %option{value: "other"} Other
          .error_in_field

        #district-block.itemblock{style: "display: none"}
          .labelblock{style: "vertical-align: top"}= "District"
          .district-dropdown{style: "display: inline-block; background-color: rgba(0,0,0,0.1); padding: 10px; border-radius: 5px; width: 400px"}
            = render partial: 'shared/district_dropdown', locals: {form_name: "user"}
          .error_in_field

        %br/
        = f.submit t('signup_form.submit'), class: "btn btn-primary btn-large"
        %br/
        %br/
        %br/
        #student-terms!= t('signup_form.student_terms')
        #teacher-terms{style: "display: none"}!= t('signup_form.teacher_terms')

    .span4
      %div{ style: 'padding-left: 20px; margin-top: 20px; border-left: 1px solid black;' }
        = render "devise/shared/links"

    %div{style: "clear:both"}
    %br/
    %br/
    %br/

:javascript

  $(document).ready(function() {
    // Check for URL having: /users/sign_up?user%5Buser_type%5D=teacher
    if ("#{resource.teacher?}" == "true") {
      showTeacher();
    }
  });

  function formSuccess(success) {
    var url;
    if ("#{return_to_url}" !== "") {
      url = "#{return_to_url}";
    } else if (isTeacherSelected()) {
      url = "#{teacher_dashboard_url}";
    } else {
      url = "/";
    }
    window.location.href = url;
  }

  function formError(err) {
    // Define the fields that can have specific errors attached to them.
    var fields = ["name", "email", "password", "password_confirmation", "schoolname", "age", "gender"];

    for (var i = 0; i < fields.length; i++) {
      var field = fields[i];
      if (err.responseJSON.errors[field]) {
        var errorField = $("#" + field + "-block .error_in_field");
        errorField.text(err.responseJSON.errors[field]);
        errorField.fadeTo("normal", 1);
      }
    }
  }

  function changeRole(value) {
    if (value == "student") {
      showStudent();
    } else if (value == "teacher") {
      showTeacher();
    }
  }

  function showStudent() {
    // Show correct form elements.
    $("#age-block").fadeIn();
    $("#gender-block").fadeIn();
    $("#schoolname-block").hide();
    $("#schoolcountry-block").hide();
    $("#district-block").hide();

    // Clear country.  It can be reentered again to make district dropdown appear.
    $("#schoolcountry").val("");

    // Show correct terms below form.
    $("#teacher-terms").hide();
    $("#student-terms").fadeIn();
  }

  function showTeacher() {
    // Show correct form elements.
    $("#age-block").hide();
    $("#gender-block").hide();
    $("#schoolname-block").fadeIn();
    $("#schoolcountry-block").fadeIn();

    // Show correct terms below form.
    $("#student-terms").hide();
    $("#teacher-terms").fadeIn();
  }

  function isTeacherSelected() {
    var formData = $('#new_user').serializeArray();
    var userType = $.grep(formData, function(e) { return e.name == "user[user_type]"; });
    if (userType.length == 1 && userType[0].value == "teacher") {
      return true;
    }
    return false;
  }

  function submitForm() {
    var formData = $('#new_user').serializeArray();

    // Teachers get age 21.
    if (isTeacherSelected()) {
      formData.push({name: 'user[age]', value: 21});
    }

    // Hide all errors that might be showing from a previous attempt.
    $(".error_in_field").css("opacity", 0);

    // Hide any other hint messages that might be showing based on input.
    $('#password_message').text("");
    $('#password_message_confirmation').text("");

    $.ajax({
      url: "/users.json",
      type: "post",
      dataType: "json",
      data: formData
    }).done(formSuccess).fail(formError);

    return false;
  }

  $( "#user_password" ).on('input',function(e){
    var password = $(this).val();
    var password_message = $("#password-block .error_in_field");
    var password_message_confirmation = $("#password_confirmation-block .error_in_field")
    if (!password || password.length < 6) {
      password_message.text("#{t('signup_form.invalid_password')}");
    } else {
      password_message.text("");
    }
    password_message_confirmation.text("");
  });

  $( "#user_password_confirmation" ).on('input',function(e){
    var conf_password = $(this).val();
    var origin_password = $('#user_password').val();
    var password_message = $("#password-block .error_in_field")
    var password_message_confirmation = $("#password_confirmation-block .error_in_field")
    if (conf_password !== origin_password) {
      password_message_confirmation.text("#{t('signup_form.mismatch_password')}");
    } else {
      password_message_confirmation.text("");
    }
    password_message.text("");
  });

  $('#schoolcountry').change(function () {
    if ($(this).val() == 'US') {
      $("#district-block").fadeIn();
    } else {
      $("#district-block").fadeOut();
    }
  });

  $( "#user_name" ).placeholder();
  $( "#user_email" ).placeholder();
  $( "#user_school" ).placeholder();

  $( ".signupform" ).on("submit", function(e){
    window.dashboard.hashEmail({ email_selector: '#user_email',
      hashed_email_selector: '#user_hashed_email',
      age_selector: '#user_age'});
  });
