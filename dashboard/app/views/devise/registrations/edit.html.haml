- @page_title = t('activerecord.attributes.user.edit_header')
- no_email = current_user.no_personal_email? || params[:noEmail] == 'true'

= link_to :back do
  %i.fa.fa-chevron-left
  %span= t('crud.back')

%h2= @page_title

- unless current_user.migrated?
  -# Mount point for React MigrateToMultiAuth component.
  %div#migrate-multi-auth

= form_for(resource, :as => resource_name, :url => registration_path(resource_name), :html => { :method => :put }) do |f|
  - email_mismatch = current_user.errors.delete(:email_mismatch)
  - current_user.reload if email_mismatch.present?
  = devise_error_messages!
  %div
  .field
    = f.label :name, class: "label-bold"
    - if f.object.secret_picture_account_only?
      = f.object.name
    - else # most users are allowed to edit username
      = f.text_field :name, autofocus: true, maxlength: 255
  - if !f.object.teacher_managed_account?
    -# Temporary: Allow single-auth students with no email to add a parent email
    - if current_user.parent_managed_account? || current_user.can_add_parent_email?
      .field
        = f.label t('user.parent_email_label'), class: "label-bold"
        %em= t('user.parent_email_hint')
        %br/
        = f.email_field :parent_email, autocomplete: 'off', maxlength: 255
    - if !current_user.parent_managed_account?
      .field
        = f.label :email, class: "label-bold"
        - if current_user.migrated? && !current_user.student?
          %em= t('user.new_email_hint')
          %br/
        %span#displayed-user-email= f.object.email.present? ? f.object.email : '***encrypted***'
        - if current_user.should_see_edit_email_link?
          (
          %a#edit-email-link{href: '#'}= t('user.update_email')
          )
  - if resource.username.present?
    .field
      = f.label :username, class: "label-bold"
      = f.object.username
  - if f.object.can_edit_password? && f.object.encrypted_password.present?
    %div
      = f.label :password, maxlength: 255, class: "label-bold"
      %em= t('user.new_password_hint')
      %br/
      = f.password_field :password, autocomplete: 'off', maxlength: 255
    %div
      = f.label :password_confirmation, class: "label-bold"
      = f.password_field :password_confirmation, autocomplete: 'off', maxlength: 255
  - if f.object.sponsored?
    .field
      = f.label :password, class: "label-bold"
      = t('user.no_password_because_sponsored')
  - if f.object.encrypted_password.present?
    %div
      = f.label :current_password, class: "label-bold"
      %em= t('user.current_password_hint')
      %br/
      = f.password_field :current_password, maxlength: 255
  - if !resource.teacher?
    .field
      = f.label t('signup_form.gender'), class: "label-bold"
      = f.select :gender, gender_options
    .field
      = f.label t('signup_form.age'), class: "label-bold"
      = f.select :age, User::AGE_DROPDOWN_OPTIONS
  - if resource.teacher?
    .field
      = f.label :school, class: "label-bold"
      = f.text_field :school, class: 'input-xlarge', maxlength: 255
    .field
      = f.label :full_address, class: "label-bold"
      = f.text_area :full_address, class: 'input-xxlarge', rows: 4, maxlength: 255
    = f.hidden_field :age, value: "21"

  %div#submit-update= f.submit t('user.update'), class: 'btn btn-primary'

- if current_user.should_see_add_password_form?
  -# Mount point for React AddPasswordForm component.
  %div#add-password-fields

  -# Hidden form used to asynchronously submit a new password to Rails with the
  -# appropriate authenticity tokens.  See AddPasswordForm.jsx for more details.
  -# Currently hidden behind .migrated? flag until all users have been migrated.
  = form_for(resource,
      as: resource_name,
      url: '/users',
      remote: true,
      html: { id: 'add-password-form' },
      namespace: 'add-password',
    ) do |f|
    = f.hidden_field :password
    = f.hidden_field :password_confirmation

- if current_user.migrated?
  -# Mount point for React ManageLinkedAccounts component.
  %div#manage-linked-accounts

- if current_user.can_create_personal_login?
  %hr
  %h2= t('user.create_personal_login')
  %p
    = no_email ? t('user.create_personal_login_under_13_info') : t('user.create_personal_login_info')
    = t('user.create_personal_login_link_account') if current_user.migrated?
  = form_for(current_user, url: '/users/upgrade', html: {id: 'edit_user_create_personal_account'}, namespace: 'create_personal') do |form|
    = form.hidden_field :hashed_email
    %h3= t('user.enter_new_login_info')
    - if no_email
      = hidden_field_tag :noEmail, true
      .field
        = form.label t('user.create_personal_login_under_13_username'), class: "label-bold"
        = form.text_field :username, maxlength: 255
    - else
      .field
        = form.label :personal_email, class: "label-bold" do
          %span
            = t('activerecord.attributes.user.personal_email_markdown', url: CDO.studio_url('users/edit/?noEmail=true'), markdown: :inline).html_safe
        = form.email_field :email, placeholder: '', autocomplete: 'off', maxlength: 255
    .field
      = form.label :password, maxlength: 255, class: "label-bold"
      = form.password_field :password, autocomplete: 'off', maxlength: 255
    .field
      = form.label :password_confirmation, class: "label-bold"
      = form.password_field :password_confirmation, autocomplete: 'off', maxlength: 255
    - if current_user.secret_word_account?
      %h3= t('user.confirm_secret_words')
      .field
        = form.label :secret_words, class: "label-bold"
        = form.text_field :secret_words, autocomplete: 'off', value: '', maxlength: 255
    - if no_email
      %h3= t('user.enter_parent_email')
      .field
        = form.label t('user.create_personal_login_under_13_parent_email'), class: "label-bold"
        = form.text_field :parent_email, maxlength: 255
    = t('user.create_personal_login_terms_markdown', terms_of_service_url: CDO.code_org_url('/tos'), markdown: true).html_safe
    - unless no_email
      = t('user.create_personal_login_email_note_markdown', privacy_policy_url: CDO.code_org_url('/privacy'), markdown: true).html_safe
    %div= form.submit t('crud.submit'), id: 'create-personal-login', class: 'btn btn-warning'

-# Separately-submittable form section allowing the user to edit their own
-# account type.  We keep this separate because it's sometimes a multi-step
-# process (for example, confirming one's email when upgrading from a student
-# account to a teacher account)
- if resource.can_change_own_user_type?
  = form_for(resource,
      as: resource_name,
      url: '/users/user_type',
      remote: true,
      html: { id: 'change-user-type-modal-form' },
      namespace: 'change-user-type',
    ) do |f|
    = f.hidden_field :email
    = f.hidden_field :email_preference_opt_in
    %hr.account-page-section-break
    %h2= t('signup_form.user_type_label')
    .field
      = f.label t('signup_form.user_type'), class: "label-bold"
      = f.select :user_type, user_type_options
    .farSide
      %span#change-user-type-status
      %button.btn#change-user-type-button{disabled: true}= t('signup_form.user_type_button')

- if current_user.can_delete_own_account?
  -# Mount point for React DeleteAccount component.
  %div#delete-account
- else
  %hr.danger.account-page-section-break
  %h2.danger= t('user.delete')
  %p= t('user.delete_text_teacher_managed_note')

-# Hidden form used to asynchronously submit an email change to Rails with the
-# appropriate authenticity tokens.  See ChangeEmailModal.jsx for more details.
- if resource.can_edit_email?
  = form_for(resource,
      as: resource_name,
      url: '/users/email',
      remote: true,
      html: { id: 'change-email-modal-form' },
      namespace: 'change-email-modal',
    ) do |f|
    = f.hidden_field :email
    = f.hidden_field :hashed_email
    = f.hidden_field :email_preference_opt_in
    = f.hidden_field :current_password

:ruby
  script_data = {
    edit: {
      userAge: current_user.age,
      userType: current_user.user_type,
      isOauth: current_user.oauth?,
      isPasswordRequired: current_user.encrypted_password.present?,
      authenticationOptions: current_user.authentication_options.map(&:summarize),
      isGoogleClassroomStudent: current_user.google_classroom_student?,
      isCleverStudent: current_user.clever_student?,
      dependentStudents: current_user.dependent_students,
      studentCount: current_user.students.count,
    }.to_json
  }
%script{src: webpack_asset_path('js/devise/registrations/edit.js'), data: script_data}
