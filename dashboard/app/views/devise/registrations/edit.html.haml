- @page_title = t('activerecord.attributes.user.edit_header')
- no_email = current_user.no_personal_email? || params[:noEmail] == 'true'

%h2= @page_title

= form_for(resource, :as => resource_name, :url => registration_path(resource_name), :html => { :method => :put }) do |f|
  - email_mismatch = current_user.errors.delete(:email_mismatch)
  - current_user.reload if email_mismatch.present?
  = devise_error_messages!
  - if f.object.can_edit_email?
    = f.hidden_field :hashed_email
  %div
  .field
    = f.label :name
    - if !f.object.teacher_managed_account?
      = f.text_field :name, autofocus: true, maxlength: 255
    - else
      = f.object.name
  - if !f.object.teacher_managed_account?
    - if current_user.parent_managed_account?
      .field
        = f.label :parent_email
        = f.email_field :parent_email, autocomplete: 'off', maxlength: 255
    - else
      .field
        = f.label :email
        - if current_user.can_edit_email? && !current_user.oauth?
          = f.email_field :email, placeholder: '***encrypted***', autocomplete: 'off', maxlength: 255
        - elsif current_user.can_edit_email? && current_user.oauth?
          = f.hidden_field :email
          = f.object.email.present? ? f.object.email : '***encrypted***'
        - else
          = f.object.email.present? ? f.object.email : '***encrypted***'
  - if resource.username.present?
    .field
      = f.label :username
      = f.object.username
  - if f.object.can_edit_password?
    %div
      = f.label :password, maxlength: 255
      %em= t('user.new_password_hint')
      %br/
      = f.password_field :password, autocomplete: 'off', maxlength: 255
    %div
      = f.label :password_confirmation
      = f.password_field :password_confirmation, autocomplete: 'off', maxlength: 255
  - else
    .field
      = f.label :password
      - if f.object.oauth?
        = t('user.no_password_because_oauth')
      - else
        = t('user.no_password_because_sponsored')
  - if f.object.encrypted_password.present?
    %div
      = f.label :current_password
      %em= t('user.current_password_hint')
      %br/
      = f.password_field :current_password, maxlength: 255
  - if !resource.teacher?
    .field
      = f.label t('signup_form.gender')
      = f.select :gender, gender_options
    .field
      = f.label t('signup_form.age')
      = f.select :age, User::AGE_DROPDOWN_OPTIONS
  - if resource.teacher?
    .field
      = f.label :school
      = f.text_field :school, class: 'input-xlarge', maxlength: 255
    .field
      = f.label :full_address
      = f.text_area :full_address, class: 'input-xxlarge', rows: 4, maxlength: 1024
    = f.hidden_field :age, value: "21"
  -#
    Don't allow editing user type unless we can also edit email, because
    changing from a student (encrypted email) to a teacher (plaintext email)
    requires entering an email address.
    Don't allow editing user type for teachers with sections, as our validations
    require sections to be owned by teachers.
  - if f.object.can_edit_email? && (f.object.student? || Section.where(user_id: f.object.id).empty?)
    .field
      = f.label t('signup_form.user_type')
      = f.select :user_type, user_type_options

  %div#submit-update= f.submit t('crud.update'), class: 'btn btn-default'
- if !current_user.teacher_managed_account?
  %h2= t('user.delete')
  %p
    = t('user.delete_text')
    - if current_user.teacher?
      = t('user.delete_text_teacher_note')
    - data_hash = { confirm: t('user.delete_confirm') }
    = button_to t('user.delete'), registration_path(resource_name), data: data_hash, method: :delete, class: 'btn btn-danger'
- if current_user.can_create_personal_login?
  %h2= t('user.create_personal_login')
  %p= no_email ? t('user.create_personal_login_under_13_info') : t('user.create_personal_login_info')
  = form_for(current_user, url: '/users/upgrade', html: {id: 'edit_user_create_personal_account'}, namespace: 'create_personal') do |form|
    = form.hidden_field :hashed_email
    %h3= t('user.enter_new_login_info')
    - if no_email
      = hidden_field_tag :noEmail, true
      .field
        = form.label t('user.create_personal_login_under_13_username')
        = form.text_field :username, maxlength: 255
    - else
      .field
        = form.label :personal_email do
          = t('activerecord.attributes.user.personal_email', url: CDO.studio_url('users/edit/?noEmail=true')).html_safe
        = form.email_field :email, placeholder: '', autocomplete: 'off', maxlength: 255
    .field
      = form.label :password, maxlength: 255
      = form.password_field :password, autocomplete: 'off', maxlength: 255
    .field
      = form.label :password_confirmation
      = form.password_field :password_confirmation, autocomplete: 'off', maxlength: 255
    - if current_user.secret_word_account?
      %h3= t('user.confirm_secret_words')
      .field
        = form.label :secret_words
        = form.text_field :secret_words, autocomplete: 'off', value: '', maxlength: 255
    - if no_email
      %h3= t('user.enter_parent_email')
      .field
        = form.label t('user.create_personal_login_under_13_parent_email')
        = form.text_field :parent_email, maxlength: 255
    %p= t('user.create_personal_login_terms', terms_of_service_url: CDO.code_org_url('/tos')).html_safe
    - unless no_email
      %p= t('user.create_personal_login_email_note', privacy_policy_url: CDO.code_org_url('/privacy')).html_safe
    %div= form.submit t('crud.submit'), id: 'create-personal-login', class: 'btn btn-warning'

= link_to t('crud.back'), :back

:ruby
  script_data = {
    edit: {
      userType: current_user.reload.user_type,
      isOauth: current_user.oauth?
    }.to_json
  }
%script{src: minifiable_asset_path('js/devise/registrations/edit.js'), data: script_data}

