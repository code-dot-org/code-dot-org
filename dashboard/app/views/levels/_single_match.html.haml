.unplugged.match{id: "level_#{level.id}"}
  = render partial: 'levels/content', locals: {app: 'match', data: level.properties, content_class: level.question_content_class, source_level: level, hide_header: !standalone}

  - if standalone && !(level.properties['options'].try(:[], 'hide_submit'))
    .buttons
      %a.btn.btn-large.btn-primary.next-stage.submitButton
        =t('submit')

  %br/

  .clear

  - giantmark_height = level.height.to_i > 72 ? 72 : 20
  - gap_height = level.height.to_i/2 - giantmark_height/2

  .mainblock
    .column
      %ul.match_questions
        - level.questions.each do |question|
          %li{style: "height: #{level.height}px"}!= match_t(question['text'], level)
    .column.match_answerdest
      %ul.match_slots.draggablecolumn
        - level.answers.each do |_|
          %li.emptyslot{style: "height: #{level.height}px"}
            .giantmark
              .gap{style: "height: #{gap_height}px"}
              .text{style: "font-size: #{giantmark_height}px; line-height: #{giantmark_height}px"}
                ?

    .column.match_correctmarkscolumn
      %ul.match_correctmarks
        - level.questions.each_with_index do |question, index|
          %li.correctmark{style: "height: #{level.height}px"}
            .xmark{style: 'display: none;', id: "xmark_#{level.id}_#{index}"}
              %strong X

    .column
      %ul.match_answers.draggablecolumn
        - level.shuffled_indexed_answers.each do |answer|
          %li.answer.answerlist{style: "height: #{level.height}px", originalIndex: answer['index']}!= match_t(answer['text'], level)

    .clear
  - if standalone
    = render partial: 'levels/dialog', locals: {app: 'match'}
  = render partial: 'levels/match_answer', locals: {level: level}
  = render partial: 'levels/teacher_markdown', locals: {data: level.properties}

  :javascript
    window.dashboard.codeStudioLevels.registerLevel(#{level.id}, new Match(
      #{level.id},
      "level_#{level.id}",
      #{standalone},
    ));
