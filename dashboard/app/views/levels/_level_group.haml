- app = 'level_group'
- data = @level.properties

:javascript
  window.levelData = #{data.to_json};

= render partial: 'levels/common_audio'

- page = params[:puzzle_page] ? (params[:puzzle_page].to_i - 1) : 0

- page_levels = data["pages"][page]["levels"]
- page_levels.each_with_index do |level_name, index|
  - level = Level.find_by_name(level_name)
  - if @last_attempt
    - last_attempt_entry = JSON.parse(@last_attempt).find{|item| item["level_id"]==level.id}
    - last_attempt = last_attempt_entry["result"] if last_attempt_entry
  - else
    - last_attempt = ""
  - level_class = level.class.to_s.underscore

  - if level_class == "multi"
    -# For students (or teachers doing PD), mark all answers incorrect, so we don't give anything away.
    - unless current_user.try(:authorized_teacher?) && !@script.try(:pd?)
      - level.properties['answers'].each { |answer| answer['correct'] = false }
    = render partial: 'levels/single_multi', locals: {page: page, index: index, standalone: false, level: level, last_attempt: last_attempt }
  - elsif level_class = "text_match"
    -# For students (or teachers doing PD), clear out all answers.
    - unless current_user.try(:authorized_teacher?) && !@script.try(:pd?)
      - level.properties['answers'] = nil
    = render partial: 'levels/single_text_match', locals: {page: page, index: index, standalone: false, level: level, last_attempt: last_attempt }

= render partial: 'levels/common_audio'

- if page < data["pages"].length - 1
  %a.btn.btn-large.btn-primary.nextPageButton
    =t('nextPage')
- else
  = render partial: 'levels/dialog', locals: {app: app, data: data}
  %a.btn.btn-large.btn-primary.unsubmitButton{style: "display: none"}
    =t('unsubmit')


:javascript
  #{render template: 'levels/multi.js', formats: [:js]}
  #{render template: 'levels/textMatch.js', formats: [:js]}

  #{render template: 'levels/levelGroup.js', formats: [:js]}

  var levelCount = #{page_levels.length};
  var page = #{page || -1};

  var fallbackResponse = #{@fallback_response.to_json};
  var callback = "#{@callback}";
  var app = "#{app}";
  var level = appOptions.levelPosition;

  var lastAttempt = #{@last_attempt || []};

  $(document).ready(function() {
    initLevelGroup(
      levelCount,
      page,
      fallbackResponse,
      callback,
      app,
      level,
      lastAttempt
    );
  });
