- app = 'level_group'
- data = @level.properties
- parsed_last_attempt = JSON.parse(@last_attempt || '{}')

= render partial: 'levels/common_audio'

-# If we are looking at the level independent of a script, then let's just
-# show all pages of the LevelGroup at once.  Otherwise we'll show the actual
-# page.  The controller takes care of that for us.
- current_page = params[:puzzle_page] || 1

-# Is this a survey where we've already submitted
- user_level = UserLevel.find_by(user: current_user, script: @script_level&.script, level: @level)
- submitted_survey = @script_level.try(:anonymous?) && current_user && user_level.try(:submitted?)

.level-group
  - @pages.each do |page|
    - unless data["title"].blank?
      %h2= t('heading_x_of_y', heading: data["title"], x: page.page_number, y: @level.pages.length)
      %br/

    - if submitted_survey
      #survey-submission-thankyou
        = I18n.t('level_group.survey_submission_thankyou')

    - page.levels_and_texts.each do |level|
      - level_class = level.class.to_s.underscore
      - if level_class == 'external'
        -# Show any text from an external level.
        .level-group-content
          = render partial: 'levels/external', locals: {in_level_group: true, level: level}
      - else
        - level_index = page.levels.find_index(level)
        -# Don't show last attempt for submitted surveys, even for the current user, otherwise teachers
        -# could access student responses
        - sublevel_last_attempt = LevelGroup.get_sublevel_last_attempt(current_user, @user, level, @script) unless submitted_survey

        -# Embed the multi/match/free_response level.
        .level-group-number= "#{page.levels_offset + level_index + 1}. "
        .level-group-content
          - if ['multi', 'evaluation_multi'].include? level_class
            = render partial: 'levels/single_multi', locals: {standalone: false, level: level, last_attempt: sublevel_last_attempt, tight_layout: true}
          - elsif level_class == "text_match"
            -# For students (or teachers doing PD), clear out all answers.
            - unless Policies::InlineAnswer.visible_for_script_level?(current_user, @script_level)
              - level.properties['answers'] = nil
            = render partial: 'levels/single_text_match', locals: {standalone: false, level: level, last_attempt: sublevel_last_attempt }
          - elsif level_class == "free_response"
            = render partial: 'levels/free_response', locals: {in_level_group: true, level: level, last_attempt: sublevel_last_attempt}
          - elsif level_class == "match"
            = render partial: 'levels/single_match', locals: {standalone: false, level: level, last_attempt: sublevel_last_attempt}

    - unless @script_level.nil?
      = render partial: 'levels/dialog', locals: {app: app, previous_button: page.page_number > 1, next_button: page.page_number < @total_page_count}

- content_for(:head) do
  - level_data = data
  - init_data = nil
  - unless @script_level.nil?
    - init_data = { total_level_count: @total_level_count, page: current_page.to_i || -1, last_attempt: parsed_last_attempt}

  %script{src: webpack_asset_path('js/levels/_level_group.js'), data: {levelData: data.to_json, initData: init_data.to_json}}
