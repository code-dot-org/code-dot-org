:ruby
  js_data = {is_instructor: @script.can_be_instructor?(@current_user)}
  level ||= @level
  last_attempt = @last_attempt unless local_assigns.has_key? :last_attempt
  in_level_group ||= false
  left_align = local_assigns[:left_align]
  is_contained_level ||= false

- if level.solution.present? && is_contained_level && Policies::InlineAnswer.visible_for_script_level?(current_user, @script_level)
  %div{id: "containedLevelAnswer0"}
    .free-response{class: "contained"}
      = render partial: 'levels/teacher_markdown', locals: {data: {'teacher_markdown' => level.solution}}

- if in_level_group # The LevelGroup will collect results for each level.
  :javascript
    window.dashboard.codeStudioLevels.registerLevel(#{level.id}, new FreeResponse(#{level.id}, #{!!level.optional}));

- else # Otherwise we need to provide a `getResult` function.
  :javascript
    window.dashboard.codeStudioLevels.registerGetResult(
      function getResult() {
        var forceSubmittable = window.location.search.indexOf("force_submittable") !== -1;

        return {
          response: encodeURIComponent($('.response').val()),
          submitted: appOptions.level.submittable || forceSubmittable,
          result: true,
          testResult: #{level.submittable? ? ActivityConstants::UNREVIEWED_SUBMISSION_RESULT : ActivityConstants::FREE_PLAY_RESULT}
        };
      }
    );

.free-response{:class => ('left-aligned' if left_align)}
  - title = level.get_property(:title)
  - if title.present? && (!in_level_group || is_contained_level)
    %h1= title
  - long_instructions = level.get_property("long_instructions")
  - if long_instructions
    / Markdown will be rendered clientside by _free_response.js
    .markdown-container{data: {markdown: long_instructions}}

  - if level.allow_user_uploads?
    %script{src: webpack_asset_path('js/fileupload/jquery.iframe-transport.js')}
    %script{src: webpack_asset_path('js/fileupload/jquery.fileupload.js')}
    %p#free-response-upload
    :ruby
      js_data[:attachments_props] = {
        readonly: !!@view_options.readonly_workspace
      }

  - height = level.height || '80'
  - placeholder = level.get_property(:placeholder) || I18n.t('free_response.placeholder')
  %textarea.response{id: "level_#{level.id}", placeholder: placeholder, style: "height: #{height}px;", readonly: @view_options.readonly_workspace}= last_attempt

  -# Don't render the dialog partial if we're inside a LevelGroup.
  = render partial: 'levels/dialog', locals: {app: 'free_response'} unless in_level_group
  = render partial: 'levels/teacher_markdown', locals: {data: {'teacher_markdown' => level.solution}} unless is_contained_level

- content_for(:head) do
  %script{src: webpack_asset_path('js/levels/_free_response.js'), data: {freeresponse: js_data.to_json}}
