- data = {}
- data[:script_name] = @script.name
- data[:script_id] = @script.id
- data[:section] = @section&.summarize
- data[:stage_extra] = @stage_extras
- data[:is_verified_teacher] = @current_user.authorized_teacher?

- if @stage_extras
  - data[:teacher_level] = ScriptLevel.summarize_as_bonus_for_teacher_panel(@stage.script, @bonus_level_ids, @current_user)
  - data[:page_type] = 'stage_extras'
- else
  - data[:teacher_level] = @script_level&.summarize_for_teacher_panel(@current_user)
  - data[:page_type] = 'level' if @level.present?

- if @level && @script_level
  - if @level.try(:examples).present? && (@current_user.authorized_teacher? || @script.csf?)# 'solutions' for applab-type levels
    - level_example_links = @level.examples.map do |example|
      // We treat Sprite Lab levels as a sub-set of game lab levels right now which breaks their examples solutions
      // as level.game.app gets "gamelab" which makes the examples for sprite lab try to open in game lab.
      // We treat Dancelab as a sub-set of Sprite Lab levels so have to check and set that before GamelabJr
      // Artist levels have @level.game.app of "turtle" and Playlab levels have @level.game.app of "studio"
      // so need to set those too
      - if @level.is_a?(Dancelab)
        - send("#{"dance"}_project_view_projects_url".to_sym, channel_id: example, host: 'studio.code.org', port: 443, protocol: :https)
      - elsif @level.is_a?(GamelabJr)
        - send("#{"spritelab"}_project_view_projects_url".to_sym, channel_id: example, host: 'studio.code.org', port: 443, protocol: :https)
      - elsif @level.is_a?(Artist)
        - artist_type = ['elsa', 'anna'].include?(@level.skin) ? 'frozen' : 'artist'
        - send("#{artist_type}_project_view_projects_url".to_sym, channel_id: example, host: 'studio.code.org', port: 443, protocol: :https)
      - elsif @level.is_a?(Studio) # playlab
        - send("#{"playlab"}_project_view_projects_url".to_sym, channel_id: example, host: 'studio.code.org', port: 443, protocol: :https)
      - else
        - send("#{@level.game.app}_project_view_projects_url".to_sym, channel_id: example, host: 'studio.code.org', port: 443, protocol: :https)
  - elsif @level.ideal_level_source_id && @script # old style 'solutions' for blockly-type levels
    -level_example_links = []
    -level_example_links.push(build_script_level_url(@script_level, {solution: true}.merge(@section ? {section_id: @section.id} : {})))

- data[:level_examples] = level_example_links

-if @section
  - data[:section_script_levels] = @section.students.order(:name).map do |student|
    - if @stage_extras
      - ScriptLevel.summarize_as_bonus_for_teacher_panel(@stage.script, @bonus_level_ids, student)
    -else
      - @script_level&.summarize_for_teacher_panel(student)

- content_for(:head) do
  %script{src: webpack_asset_path('js/levels/_teacher_panel.js'), data: {teacherpanel: data.to_json }}
