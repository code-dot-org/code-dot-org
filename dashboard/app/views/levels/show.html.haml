- @page_title = level_title

= render partial: 'shared/check_admin'
= render partial: 'shared/sharing_meta_tags'

= stylesheet_link_tag '/blockly/video-js/video-js', media: 'all'

#notes-content{style: 'display: none;'}
  %ul
    %li
      %a{href: '#video'}
        = I18n.t('video.tab')
        %span.video-name
    %li
      %a{href: '#notes-outer'}= I18n.t('video.notes')

-#
  level-body is used for some semi-strange DOM manipulation. When a teacher toggles to viewAs a student,
  in some cases we want to give them an entirely different rendering (i.e. hidden/locked stages). We do
  this by hiding level-body and unhiding the other content.
#level-body{style: params[:viewAs] ? 'visibility: hidden' : nil}
  -# Render the hidden stage partial, but make it hidden so that client can unhide if needed
  = render partial: 'levels/hidden_stage', locals: {hidden: true}

  - if @game.unplugged?
    :javascript
      var appOptions = #{app_options.to_json};
    = render partial: 'levels/unplug', locals: {app: @game.app}
  - elsif (@level.is_a?(Applab) || @level.is_a?(Gamelab) || @level.is_a?(Weblab)) && app_options['readonlyWorkspace'] && !app_options['channel']
    -# A teacher is trying to view a student's progress on a level they have not started.
    = render partial: 'levels/not_started'
  - elsif @level.is_a?(Blockly) && @level.embed == 'true' && !@edit_blocks && !@level.is_a?(Applab) && !@level.is_a?(Gamelab) && !@level.is_a?(Weblab)
    #title
      - if @level.properties['instructions'].present?
        %h4{style: 'margin-left: auto; margin-right: auto; max-width: 800px;'}!= brakeman_no_warn(@level.properties['instructions'])
    -# Pass special parameters to Blockly partial for embedded level type.
    = render partial: 'levels/blockly'
  - elsif @level.is_a?(DSLDefined) || @level.is_a?(Widget) || @level.is_a?(FreeResponse) || @level.is_a?(StandaloneVideo) || @level.is_a?(ExternalLink) || @level.is_a?(CurriculumReference)
    :javascript
      var appOptions = #{app_options.to_json};
      dashboard.createCallouts(appOptions.callouts);
    - if @level.is_a?(Widget)
      = render partial: 'levels/widget'
    - else
      = render partial: "levels/#{@level.class.to_s.underscore}"
    - unless @level.is_a?(StandaloneVideo)
      = render partial: 'levels/reference_area'
  - elsif @level.is_a?(Scratch)
    = render partial: 'levels/scratch', locals: {app: @game.app}
  - else
    = render partial: 'levels/blockly'

  - if @peer_reviews.present?
    = render partial: 'peer_reviews/viewer'

- if tracking_pixel_enabled && @script.try(:hoc?) && (@script_level.try(:chapter) == 1 || @script_level.try(:position) == 1)
  -# special tracking image to make sure a cookie is set when hoc starts (/hoc/1)
  = image_tag(tracking_pixel_url(@script))

= render partial: 'levels/admin'

- if @script && current_user.try(:teacher?) && !@script.professional_learning_course?
  = render partial: 'levels/teacher'
