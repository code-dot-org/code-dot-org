- @page_title = level_title

= render partial: 'shared/check_admin'
= render partial: 'shared/sharing_meta_tags'

= stylesheet_link_tag '/blockly/video-js/video-js', media: 'all'

#notes-content{style: 'display: none;'}
  %ul
    %li
      %a{href: '#videoTabContainer'}
        = I18n.t('video.tab')
        %span.video-name
    %li
      %a{href: '#notes-outer'}= I18n.t('video.notes')

- if @script_level
  - level_data = { redirect_script_url: @redirect_unit_url, script_name: @script_level.script&.name, course_name: @script_level.script&.unit_group&.name, tts_autoplay_enabled: @tts_autoplay_enabled, code_review_enabled: @code_review_enabled_for_level, show_unversioned_redirect_warning: @show_unversioned_redirect_warning}
  %link{href: asset_path('css/levels.css'), rel: 'stylesheet', type: 'text/css'}
  %script{ src: webpack_asset_path('js/levels/show.js'), data: { level: level_data.to_json } }
  -# Mount point for RedirectDialog React component.
  %div#redirect-dialog
  %div#unversioned-redirect-dialog
  - if @script_level.view_as_instructor_in_training?(current_user)
    #instructor_in_training_tag= 'Viewing As Instructor'
    :javascript
      $("#instructor_in_training_tag").click(function() {$("#instructor_in_training_tag").hide();});


-#
  level-body is used for some semi-strange DOM manipulation. When a teacher toggles to viewAs a student,
  in some cases we want to give them an entirely different rendering (i.e. hidden/locked lessons). We do
  this by hiding level-body and unhiding the other content.
#level-body{style: params[:viewAs] ? 'visibility: hidden' : nil}
  -# Render the hidden lesson partial, but make it hidden so that client can unhide if needed
  = render partial: 'levels/hidden_lesson', locals: {hidden: true}

  -#
    If the viewer can't view last_attempt, which would happen when it's a teacher
    looking at a student's attempt at an anonymous survey, then just show explanation
    text.  It's very important that we don't lose or miss this check.
    Check that @script_level exists, because it won't for a /level/ view.
  - if @script_level && @script_level.should_hide_survey(current_user, @user)
    = I18n.t('level_group.hide_survey_last_answer')
  - elsif @script_level && @script_level.lesson.lockable? && (!current_user || @script_level.locked?(current_user))
    -# anonymous users shouldn't ever see lockable lesson, but give them the locked_lesson message if they do
    = render 'levels/locked_lesson'
  - else
    - if @game.unplugged?
      :javascript
        var appOptions = #{app_options.to_json};
      = render partial: 'levels/unplug', locals: {app: @game.app}
    - elsif @level.is_a?(DSLDefined) || @level.is_a?(Widget) || @level.is_a?(FreeResponse) || @level.is_a?(StandaloneVideo) || @level.is_a?(ExternalLink) || @level.is_a?(CurriculumReference)
      :javascript
        var appOptions = #{app_options.to_json};
        dashboard.createCallouts(appOptions.callouts);
      - if @level.is_a?(Widget)
        = render partial: 'levels/widget'
      - else
        = render partial: "levels/#{@level.class.to_s.underscore}"
      - unless @level.is_a?(StandaloneVideo) || @level.properties['hide_reference_area']
        = render partial: 'levels/reference_area'
    - else
      = render partial: 'levels/blockly'

  - if @peer_reviews.present?
    = render partial: 'peer_reviews/viewer'

- if tracking_pixel_enabled && @script.try(:hoc?) && (@script_level.try(:chapter) == 1 || @script_level.try(:position) == 1)
  -# special tracking image to make sure a cookie is set when hoc starts (/hoc/1)
  = image_tag(tracking_pixel_url(@script))

= render partial: 'levels/admin'

- if @script && !@script.old_professional_learning_course? && !@level.is_a?(NetSim)
  = render partial: 'levels/teacher_panel'
