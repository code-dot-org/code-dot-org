/ This partial contains general content-display code applicable across all of our content-based level types.
/ Set 'data' and 'app' to use this partial.
/ Note that content_class, source_level, hide_header, and postcontent are optional.
- app, data, content_class, source_level, hide_header, postcontent = %i(app data content_class source_level hide_header postcontent).map{ |x| local_assigns[x] }

- unless data['title'].blank? || hide_header
  %h1!= string_or_image(app, data['title'], source_level) unless app == 'external'
%div.content-level{class: (content_class unless content_class.blank?)}
  - unless app == 'external'
    - unless data['content1'].blank?
      %p.content.content1!= string_or_image(app, data['content1'], source_level)
    - unless data['content2'].blank?
      %p.content.content2!= string_or_image(app, data['content2'], source_level)
    - unless data['content3'].blank?
      %p.content.content3!= string_or_image(app, data['content3'], source_level)
  / Markdown support using the 'markdown' property.
  - if data['markdown'].present?
    #markdown
      / Render markdown text through the ActionView template engine.
      = ActionView::Base.new.render(inline: data['markdown'], type: :md)
  = postcontent
