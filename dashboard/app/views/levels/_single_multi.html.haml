-# inhibit brakeman warning about unescaped model attribute - comes from static data in database, level.properties does not contain XSS attacks
- data = brakeman_no_warn(level.properties)
- data['answers'] ||= []
- localized_answers = level.localized_property(:answers)
- contained_mode = local_assigns.fetch :contained_mode, false
- in_level_group = !contained_mode && @level.game&.level_group?
- app = 'multi'
- use_tight_layout = data['layout'] == "tight" || tight_layout
- force_wrap_layout = data['layout'] == "wrap"


- multi_answer_characters = ("A".."Z").to_a

- layout_class = use_tight_layout ? "tight" : "default"
- layout_class += " contained" if contained_mode

- if data['height'] == 'auto' || data['height'].blank?
  - height = 'auto'
- else
  - height = "#{data['height']}px"

  -# multi2 gets checkboxes; regular multi gets radio buttons.
- if data['type'] == 'multi2'
  - unchecked_class = 'fa-square-o'
  - checked_class = 'fa-check-square-o'
  - cross_class = 'fa-times'
- else
  - unchecked_class = 'fa-circle-o'
  - checked_class = 'fa-dot-circle-o'
  - cross_class = 'fa-times'

- if contained_mode && (data['answers'].present? || data['teacher_markdown'].present?) && Policies::InlineAnswer.visible_for_script_level?(current_user, @script_level)
  %div{id: "containedLevelAnswer0"}
    .multi.contained{id: "level_#{level.id}", class: layout_class}
      = render partial: 'levels/multi_answer', locals: {data: level.properties, height: height, unchecked_class: unchecked_class, checked_class: checked_class, cross_class: cross_class, level: level, standalone: standalone, contained_mode: contained_mode}
      = render partial: 'levels/teacher_markdown', locals: {data: level.properties}

.multi{id: "level_#{level.id}", class: layout_class}
  - if !in_level_group
    %div#summaryEntryPoint
  - question_content_blank = data['content1'].blank? && data['content2'].blank? && data['content3'].blank? && data['markdown'].blank?
  - if question_content_blank
    - question_content_class = nil
  - else
    - question_content_class = "question"

  = render partial: 'levels/content', locals: {app: app, data: data, content_class: question_content_class, source_level: level, hide_header: !standalone}

  - localized_questions = level.localized_property(:questions)
  - if localized_questions.any?
    .multi-question!= render_multi_or_match_content(localized_questions[0]["text"])

  - answers_class = 'answers ' + (question_content_blank ? 'question-content-blank' : '')

  %div{class: answers_class}

    - if data['options'].try(:[], 'answer_line')
      :css
        .btn {
          display: table;
        }

    %br/
    - unless use_tight_layout
      %br/

    .mainblock
      %form#voteform{onsubmit: 'return false;'}
        - data['answers'].each_with_index do |answer, i|
          -# When LevelGroup-hosted, with students (or teachers doing PD), set all answers false before rendering page.
          - correct = include_multi_answers?(standalone) ? answer['correct'] : false
          - answer_class = "answerbutton " + (use_tight_layout ? "" : "btn")
          %div{class: answer_class, style: "display: inline-block; height: #{height}", correct: "#{correct}", index: "#{i}"}
            .item-mark{id: "unchecked_#{i}"}
              .fa{class: unchecked_class}
            .item-mark{id: "checked_#{i}", style: 'display: none;'}
              .fa{class: checked_class}
            .item-mark{id: "cross_#{i}", style: 'display: none;'}
              .fa{class: cross_class}
            %label.item-label.item-answer-letter{style: "height: #{height}"}
              ="#{multi_answer_characters[i]}. "
              &nbsp;
            %label.item-label{style: "height: #{height}"}
              != render_multi_or_match_content(localized_answers[i]['text'])
          - if use_tight_layout && !force_wrap_layout
            %br/

      .clear

      - if standalone
        - correct_num_answers_selected = last_attempt.present? && (data['type'] == 'multi2' ? last_attempt.split(',').count == 2 : true)
        - answer_locked = !level.allow_multiple_attempts? && correct_num_answers_selected
        = render partial: 'levels/dialog', locals: {app: app, next_level_link: @next_level_link, show_next_page_link: answer_locked}

  .clear
  -unless contained_mode
    = render partial: 'levels/multi_answer', locals: {data: level.properties, height: height, unchecked_class: unchecked_class, checked_class: checked_class, cross_class: cross_class, level: level, standalone: standalone, contained_mode: contained_mode}
    = render partial: 'levels/teacher_markdown', locals: {data: level.properties}

  %br/
  - if standalone
    %br/
    %br/

  .clear

-# Don't operate if we're a LevelGroup with a /level/ URL.
- if standalone || contained_mode || @script_level

  - if data['type'] == 'EvaluationMulti'
    - answers = answers_feedback = []
  - else
    -# When LevelGroup-hosted, with students (or teachers doing PD), dont include answers
    - if contained_mode || include_multi_answers?(standalone)
      - answers = localized_answers.map {|answer| answer['correct'] || false}

    - answers_feedback = localized_answers.map {|answer| answer['feedback']}


  :ruby
    js_data = {
      response_count: @responses&.count || 0,
      is_contained_level: contained_mode,
      question_content_blank: question_content_blank,
    }

  %script{src: webpack_asset_path('js/levels/_single_multi.js'), data: {summaryinfo: js_data.to_json}}

  :javascript
    window.dashboard.codeStudioLevels.registerLevel(#{level.id}, new Multi(
      #{level.id},
      "level_#{level.id}",
      "#{app}",
      #{standalone},
      "#{data['type']}" == "multi2" ? 2 : 1,
      #{answers || "undefined"},
      #{answers_feedback.to_json},
      #{last_attempt.to_json},
      #{contained_mode},
      #{level.allow_multiple_attempts?}
    ));
