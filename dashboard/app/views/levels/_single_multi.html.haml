- data = level.properties
- app = 'multi'
- use_tight_layout = data['layout'] == "tight" || tight_layout
- force_wrap_layout = data['layout'] == "wrap"

- multi_answer_characters = ("A".."Z").to_a

- layout_class = use_tight_layout ? "tight" : "default"

.multi{id: "level_#{level.id}", class: layout_class}
  - question_content_blank = data['content1'].blank? && data['content2'].blank? && data['content3'].blank? && data['markdown'].blank?
  - if question_content_blank
    - question_content_class = nil
  - else
    - question_content_class = "question"

  = render partial: 'levels/content', locals: {app: app, data: data, content_class: question_content_class, source_level: level, hide_header: !standalone}

  - if data['questions']
    - question_text = multi_t(level, data['questions'][0]['text'])
    .multi-question!= question_text

  - answers_class = 'answers ' + (question_content_blank ? 'question-content-blank' : '')

  %div{class: answers_class}

    - if data['options'].try(:[], 'answer_line')
      :css
        .btn {
          display: table;
        }

    %br/
    - unless use_tight_layout
      %br/

    - if standalone && !data['options'].try(:[], 'hide_submit')
      .buttons
        %a.btn.btn-large.btn-primary.next-stage.submitButton
          =t('submit')
        %a.btn.btn-large.btn-primary.unsubmitButton{style: "display: none"}
          =t('unsubmit')

    - if data['height'] == 'auto' || data['height'].blank?
      - height = 'auto'
    - else
      - height = "#{data['height']}px"

    -# multi2 gets checkboxes; regular multi gets radio buttons.
    - if data['type'] == 'multi2'
      - unchecked_class = 'fa-square-o'
      - checked_class = 'fa-check-square-o'
      - cross_class = 'fa-times'
    - else
      - unchecked_class = 'fa-circle-o'
      - checked_class = 'fa-dot-circle-o'
      - cross_class = 'fa-times'

    .mainblock
      %form#voteform{onsubmit: 'return false;'}
        - data['answers'].each_with_index do |answer, i|
          - correct = answer['correct']
          - answer_class = "answerbutton " + (use_tight_layout ? "" : "btn")
          %div{class: answer_class, style: "display: inline-block; height: #{height}", correct: "#{correct}", index: "#{i}"}
            .item-mark{id: "unchecked_#{i}"}
              .fa{class: unchecked_class}
            .item-mark{id: "checked_#{i}", style: 'display: none;'}
              .fa{class: checked_class}
            .item-mark{id: "cross_#{i}", style: 'display: none;'}
              .fa{class: cross_class}
            - unless standalone
              %label.item-label.item-answer-letter{style: "height: #{height}"}
                ="#{multi_answer_characters[i]}. "
                &nbsp;
            %label.item-label{style: "height: #{height}"}
              != multi_t(level, answer['text'])
          - if use_tight_layout && !force_wrap_layout
            %br/

      .clear

      - if standalone
        = render partial: 'levels/dialog', locals: {app: app, data: data}

  .clear
  = render partial: 'levels/multi_answer', locals: {data: level.properties, height: height, unchecked_class: unchecked_class, checked_class: checked_class, cross_class: cross_class, level: level}
  = render partial: 'levels/teacher_markdown', locals: {data: level.properties}

  %br/
  - if standalone
    %br/
    %br/

  .clear

-# Don't operate if we're a LevelGroup with a /level/ URL.
- if standalone || @script_level
  :javascript
    window.levelGroup.levels[#{level.id}] = new Multi(
      "level_#{level.id}",
      #{standalone},
      "#{data['type']}" == "multi2" ? 2 : 1,
      #{data['answers'].map {|answer| answer['correct']}},
      #{last_attempt.to_json}
    );
