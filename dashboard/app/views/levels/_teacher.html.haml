- if current_user.try(:teacher?) && (@script_level || @stage_extras)
  - show_panel = (params[:user_id] || params[:section_id] || params[:solution]) && params[:viewAs] != 'Student'
  .teacher-panel{class: show_panel ? '' : 'hidden'}
    .hide-handle
      %i.fa.fa-chevron-right{onclick: '$(".teacher-panel").toggleClass("hidden"); return false;'}
    .show-handle
      %i.fa.fa-chevron-left{onclick: '$(".teacher-panel").toggleClass("hidden"); return false;'}

    %h3= t('teacher.panel.answer_viewer')
    .content
      .non-scrollable-wrapper
        -# This is rendered into by react
        #teacher-panel-viewas
        - if @user
          .students.hide-as-student
            %h4= t('teacher.panel.student')
            - unless @section.nil? || @user.nil?
              = link_to @user.name, teacher_dashboard_student_progress_url(@section, @user)
        - if @user_level
          .user_level
            .level
              - status = activity_css_class(@user_level)
              - passed = [SharedConstants::LEVEL_STATUS.passed, SharedConstants::LEVEL_STATUS.perfect].include?(status)
              - if @script_level&.bonus
                - flag_image = passed ? 'flag_active.png' : 'flag_inactive.png'
                = image_tag flag_image, style: 'width: 60px;'
              - else
                .level_link{class: status}
                  - if @level.unplugged?
                    %span.puzzle-named
                      Unplugged
                  - elsif passed
                    = check_mark_html
                  - elsif @script_level
                    %span.puzzle-number= @script_level.position
              - if (@user_level.driver_user_levels.present? || @user_level.navigator_user_levels.present?) && @script_level
                #worked_with
                  %h4
                    %i.fa.fa-users
                    = t('teacher.panel.worked_with')
                  - @user_level.driver_user_levels.each do |driver_user_level|
                    %div
                      - driver_user_name = driver_user_level.user ? driver_user_level.user.name : I18n.t('user.deleted_user')
                      = link_to driver_user_name, build_script_level_path(@script_level)
                      %i= t('nav.user.driver')
                  - @user_level.navigator_user_levels.each do |navigator_user_level|
                    %div
                      = navigator_user_level.user ? navigator_user_level.user.name : I18n.t('user.deleted_user')
                      %i= t('nav.user.navigator')
              - if @user_level.submitted?
                #submitted
                  %div= t('teacher.panel.submitted_on')
                  .timestamp{"data-timestamp" => @user_level.updated_at}
                  %button.btn.btn-info#unsubmit{"data-user-level-url" => url_for(@user_level)}
                    = t('teacher.panel.unsubmit')
              - elsif @user_level.attempted?
                #last_updated
                  %div= t('teacher.panel.last_updated')
                  .timestamp{"data-timestamp" => @user_level.updated_at}
        - if @level&.contained_levels&.any?
          - contained_level = @level.contained_levels.first
          -# if we have a student user, show their level. otherwise show teacher's
          - user = @user || current_user
          - if user.last_attempt(contained_level, @script).try(:level_source).try(:data)
            - contained_user_level = user.user_level_for(@script_level, contained_level)
            .level
              %button.btn.btn-info#clear-response{"data-user-level-url" => url_for(contained_user_level)}
                = t('teacher.panel.clear_response')
        - if @level && @script_level
          .level
            - if @level.ideal_level_source_id && @script # 'solutions' for blockly-type levels
              - if @ideal_level_source
                %h4= t('teacher.panel.viewing_solution')
              - else
                = link_to build_script_level_path(@script_level, {solution: true}.merge(@section ? {section_id: @section.id} : {})) do
                  %button.btn.btn-info= t('reference_area.teacher')
            - if @level.try(:examples).present? && current_user.authorized_teacher? # 'solutions' for applab-type levels
              - @level.examples.each_with_index do |example, index|
                - example_link = send("#{@level.game.app}_project_view_projects_url".to_sym, channel_id: example, host: 'studio.code.org', port: 443, protocol: :https)
                = link_to example_link, target: "_blank" do
                  %button.btn.btn-info
                    - if @level.examples.many?
                      = t('teacher.panel.example_with_number', solution_number: index + 1)
                    - else
                      = t('teacher.panel.example')
            -# Get rid of this once we turn on viewAsToggle experiment
            = link_to build_script_level_path(@script_level, @section ? {section_id: @section.id} : {}) do
              %button.btn.btn-info{id: "try-it-yourself"}= t('teacher.panel.try_it_yourself')
        - if @section
          .section
            %h4
              = t('teacher.panel.section')
              = link_to @section.name, teacher_dashboard_section_progress_url(@section)
        - if current_user.sections.many?
          -# This is rendered into by react.
          #teacher-panel-sections
          - if @section && @script_level&.stage&.lockable?
            %div{:style => "margin: 10px"}
              #stage-locked-text
              %div
              = link_to t('teacher.panel.update_lock_settings'), script_path(@script_level.script)
      - if @section
        .scrollable-wrapper
          %table.section-students.hide-as-student
            - @section.students.order(:name).each do |student|
              - active = 'active' if @user && student.id == @user.id
              %tr.section-student{class: active}
                - if @stage_extras
                  %td{style: 'padding: 5px;'}
                    - active = student.user_levels.where(script: @stage.script, level: @bonus_level_ids).length > 0
                    - flag_image = active ? 'flag_active.png' : 'flag_inactive.png'
                    = image_tag flag_image
                  %td.name
                    = link_to script_stage_extras_path(@script.name, @stage.relative_position, section_id: @section.id, user_id: student.id) do
                      = student.name
                - elsif @script_level
                  - contained_levels = @script_level.levels.map {|level| level.contained_levels}.flatten
                  - if contained_levels.any?
                    - user_level = student.last_attempt_for_any(contained_levels)
                  - else
                    - user_level = student.last_attempt_for_any(@script_level.levels)
                  - status = activity_css_class(user_level)
                  - passed = [SharedConstants::LEVEL_STATUS.passed, SharedConstants::LEVEL_STATUS.perfect].include?(status)
                  - if @script_level.bonus
                    - flag_image = passed ? 'flag_active.png' : 'flag_inactive.png'
                    %td= image_tag flag_image
                  - else
                    %td.level_link{class: status}
                      - if (user_level.try(:level) || @script_level.oldest_active_level).unplugged?
                        %span.puzzle-named
                          Unplugged
                      - elsif passed
                        = check_mark_html
                      - else
                        %span.puzzle-number
                          = @script_level.position
                  %td.name{class: user_level && user_level.navigator? && !user_level.driver? ? 'navigator' : ''}
                    = link_to build_script_level_path(@script_level, user_id: student.id, section_id: @section.id) do
                      = student.name
                      - if user_level && (user_level.navigator_user_levels.present? || user_level.driver_user_levels.present?) # I am a driver
                        %i.fa.fa-users.pair-programming-icon

- content_for(:head) do
  :javascript
    $(document).ready(function () {
      window.dashboard.teacher.onReady();
      // For all elements with class timestamp and attribute data-timestamp, set their content to be the timestamp
      // rendered for the current locale.
      $(".timestamp[data-timestamp]").each(function() {
        const date = new Date($(this).attr('data-timestamp'));
        $(this).html(date.toLocaleString());
      });
    });
