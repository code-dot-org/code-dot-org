%legend.control-legend{data: {toggle: "collapse", target: "#dropletPalette"}}
  Starting Block Palette (Droplet)

#dropletPalette.collapse
  = f.label :code_functions, 'Edit Droplet Palette'
  = f.text_area :code_functions, placeholder: 'Droplet Palette', rows: 4, value: @level.code_functions ? JSON.pretty_generate(@level.code_functions) : ''

  .field
    = f.label :palette_category_at_start
    = f.select :palette_category_at_start, options_for_select(@level.class.palette_categories, @level.palette_category_at_start), {include_blank: true}

  .field
    = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :droplet_tooltips_disabled, description: "Hide droplet documentation tooltips"}
  .field
    = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :lock_zero_param_functions, description: "Don't allow parameters to be added to user-defined functions with no parameters"}

%legend.control-legend{data: {toggle: "collapse", target: "#starterCode"}}
  Starter Code

#starterCode.collapse
  = f.label :start_blocks, 'Edit Starting JavaScript Program'
  .row
    .span8
      ~ f.text_area :start_blocks, placeholder: 'Start Blocks', rows: 4, value: @level.uses_droplet? ? @level.start_blocks : @level.pretty_block('start')
    #start-preview.span4

  .field
    = f.label :text_mode_at_start, 'Code View When Level Starts'
    %p What mode the code is presented as when the level loads
    .aligned-input-group
      = f.radio_button :text_mode_at_start, 'false', :checked => true
      = f.label :text_mode_at_start, 'Start with user preferred setting', :value => 'false'
    .aligned-input-group
      = f.radio_button :text_mode_at_start, 'blocks'
      = f.label :text_mode_at_start, 'Always start with blocks', :value => 'blocks'
    .aligned-input-group
      = f.radio_button :text_mode_at_start, 'true'
      = f.label :text_mode_at_start, 'Always start with text', :value => 'true'

:ruby
  script_data = {
    pageOptions: {
      app: @level.game.app,
      solution_blocks: @level.respond_to?(:solution_blocks),
      uses_droplet: @level.uses_droplet?,
      original_palette: JSON.parse(@level.class.try(:palette) || "{}"),
      shared_blocks: @level.shared_blocks,
    }.to_json
  }
%script{src: minifiable_asset_path('js/levels/editors/_droplet.js'),
        data: script_data}
