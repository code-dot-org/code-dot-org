-# Gamelab-only fields for level edit page on levelbuilder
- content_for(:head) do
  :css
    #level-start-animations-validation {
      padding: 0.2em;
      font-weight: bold;
    }
  = javascript_include_tag 'js/levelbuilder_gamelab'
.field
  = f.label :text_mode_at_start, 'Text mode (showing code) at start'
  = boolean_check_box f, :text_mode_at_start

.field
  = f.label :hide_animation_mode, 'Hide the Animation Tab (you can still seed a level with animations)'
  = boolean_check_box f, :hide_animation_mode

.field
  = f.label :show_d_pad
  = boolean_check_box f, :show_d_pad

.field
  = f.label :soft_buttons, 'Controls buttons'
  %p
    Select
    %a.select_all{href: '#'} all
    \/
    %a.select_none{href: '#'} none
    (shift-click or cmd-click to select multiple). Arrow buttons to display below the game canvas.
  = f.collection_select :soft_buttons, soft_button_options, :value, :name, {selected: @level.soft_buttons}, {multiple: true}

.field
  = f.label :submittable, 'Submittable'
  %p
    If checked, students with teachers can "submit" a solution for
    grading. Submitting a solution means that it is marked as
    submitted and they can no longer edit it (unless a teacher returns
    it).
  = boolean_check_box f, :submittable

.field
  = f.label 'Key-Value Data'
  You can copy the data array from the debug view of code.org/v3/edit-csp-properties/
  %pre
    = preserve do
      :escaped
        Example:
        {
          "click_count": 5,
          "button_color": "blue"
        }
  = f.text_area 'data_properties', placeholder: 'Insert JSON Key-Value Data', rows: 4, value: @level.data_properties or ''
  :javascript
    levelbuilder.initializeCodeMirror('level_data_properties', 'javascript');

.field
  = f.label 'Hide View Data Button'
  = boolean_check_box f, :hide_view_data_button

.field
  =f.label 'Disable code debugger (Console is still enabled)'
  = boolean_check_box f, :debugger_disabled

.field
  =f.label 'Animations are paused by default'
  %p
    If checked, the sprite animation will always be paused after a <tt>setAnimation</tt> call.
    Otherwise, it will be playing after a <tt>setAnimation</tt> call.
  = boolean_check_box f, :pause_animations_by_default

.field
  = f.label :start_animations, 'Starting animation list JSON'
  %p
    This should be equivalent to the animation JSON created by the animation tab.
    Here is an example.
  %pre
    :preserve
      {
        "orderedKeys": ["animation1"],
        "propsByKey": {
          "animation1": {
            "name": "asterisk_circle",
            "sourceUrl": "/blockly/media/gamelab/library/asterisk_circle.png",
            "frameSize": {"x":132, "y": 126},
            "frameCount": 9,
            "frameRate": 15
          }
        }
      }
  %p
    Some considerations:
  %ul
    %li <tt>orderedKeys</tt> defines the order the animations are listed in the animation tab, and each key must reference a set of props in <tt>propsByKey</tt>
    %li <tt>name</tt>, <tt>sourceUrl</tt>, <tt>frameSize</tt>, <tt>frameCount</tt> and <tt>frameRate</tt> are all required.
    %li <tt>name</tt> is used to refer to the animation in code; the "animation key" is never visible to the student.
    %li
      <tt>sourceUrl</tt> can take absolute URLs (which will run through our media proxy, so you can refer to almost anything)
      or domain-relative URLs for the limited set of animations in the current library,
      <a href="https://github.com/code-dot-org/code-dot-org/blob/staging/apps/src/gamelab/animationLibrary.js">which you can find here.</a>
      The sourceUrl should point to an image or spritesheet - not an animated gif.
    %li <tt>frameRate</tt> is given in frames per second.
  = f.text_area :start_animations, placeholder: 'Starting animations JSON', rows: 4, value: @level.start_animations
  #level-start-animations-validation
