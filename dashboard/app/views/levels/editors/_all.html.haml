- content_for(:head) do
  = stylesheet_link_tag 'css/levelbuilder', media: 'all'
  = stylesheet_link_tag 'jquery.handsontable.full', media: 'all'
  %script{src: webpack_asset_path('js/levelbuilder.js')}
  = javascript_include_tag 'jquery.handsontable.full'

- content_for :body_scripts do
  - video_infos = {}
  - Video.all.each { |video| video_infos[video.key] = video.summarize(false) }
  - script_data = { editorall: { video_infos: video_infos }.to_json }
  %script{src: webpack_asset_path('js/levels/editors/_all.js'), data: script_data}

.field
  = f.label 'Documentation'
  Find documentation for levelbuilder and its processes
  = link_to 'here', 'https://github.com/code-dot-org/code-dot-org/wiki/%5BLevelbuilder%5D-Welcome-to-Levelbuilder', target: '_blank'

- unless @level.is_a?(DSLDefined) || @level.is_a?(Unplugged)
  .field
    = f.label 'notes'
    %p
      Notes for yourself or other Levelbuilders. Viewable here and here alone.
    = f.text_area :notes, rows: 6, class: "input-block-level"


- if !@level.is_a?(BubbleChoice)
  %legend.control-legend.collapsed{data: {toggle: "collapse", target: "#bubble_choice"}}
    Bubble Choice
  #bubble_choice.in.collapse
    - unless @level.is_a?(DSLDefined) || @level.is_a?(Unplugged)
      .field
        = f.label :display_name
        %p Set the name that will show for this level on the parent bubble choice level. Also will override how this level is displayed on the Course Overview page.
        = f.text_field :display_name, placeholder: '(defaults to Name)'

    .field
      = f.label 'bubble_choice_description'
      %p
        Description of this level and why a student would want to choose it as part of a BubbleChoice progression.
      = f.text_area :bubble_choice_description, rows: 3, class: "input-block-level"

    .field
    = f.label :thumbnail_url, 'Optional thumbnail URL (overrides default thumbnail)'
    = f.text_field :thumbnail_url

.field
  %legend.control-legend.collapsed{data: {toggle: "collapse", target: "#audit_log_info"}}
    Audit Log
  %p A log of the people who most recently edited this level (up to the last 10 people)
  #audit_log_info.collapse
    = render partial: 'levels/editors/fields/audit_log', locals: {f: f}

- if !@level.is_a?(BubbleChoice)
  .field
    = f.label :video_key, 'Level Video'
    %p
      Add new videos by going to
      %a{href:"/videos/new"} the add video page
      - if @level.is_a?(DSLDefined)
        %p Warning: This is a DSL defined level. You can use the dropdown to find the video key that you'd like to use, but selecting in the dropdown will NOT be sufficient to associate the video with the level. If you'd like to add a video to this level you need to add video_key 'video_key' to the DSL box.
    = f.select :video_key, options_for_select(video_key_choices, @level.video_key), {include_blank: true}, {class: 'video-dropdown'}
    .video-preview{style: 'display: block'}

  -# Deprecated for Sprite Lab and Dance
  - if !(@level.is_a?(GamelabJr) || @level.is_a?(Dancelab))
    .field
      = f.label :map_reference, 'Map Reference'
      %p If there is a key resource you want to reference in the instructions, add the link here. It will show up under the 'Help & Tips' tab.
      %p This should be a string representing the URL on studio.code.org/docs you want to embed, i.e. '/docs/csd/maker_leds/index.html'.
      = f.text_field :map_reference, placeholder: 'Map Reference'


    .field
      = f.label :reference_link, 'Reference Links'
      %p Add links to pages on Curriculum Builder below. They will show up in the 'Help & Tips' tab below any videos and the map reference.
      %p These should be strings representing the URL on [docs|curriculum].code.org you want to embed, i.e. '/docs/csd/maker_leds/index.html' or '/curriculum/path/to/file'.
      %p Put each link on a new line
      .row
        .span8
          - @level.reference_links = [''] unless @level.reference_links.try(:present?)
          = text_area_tag 'level[reference_links]', @level.reference_links.join("\r\n"), rows: 6, class: "input-block-level", placeholder: 'Additional Reference Link'

  =render partial: 'levels/editors/fields/callouts', locals: {f: f}
  - if @level.respond_to? :free_play
    .field
      = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :free_play, description: "Free Play"}
      %p Free Play levels are not checked for correctness (any solution is accepted), can be shared, and can be saved to the public and private gallery

      .field
        = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :embed, description: "Embed"}
        %p Embedded levels hide the Blockly workspace, only showing the visualization area (and the 'finish' button, if 'freeplay' is also set).

- if @level.respond_to? :disable_sharing
  .field
    = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :disable_sharing, description: "Disable sharing"}
    %p If set, this level cannot be shared or saved to galleries even if it's free play.

- if @level.respond_to? :coordinate_grid_background
  .field
    = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :coordinate_grid_background, description: "Coordinate grid background"}

-if current_user.levelbuilder?
  .field
    = f.label :editor_experiment, 'Editor Experiment'
    %p If specified, users with this experiment on the levelbuilder machine will be able to edit this level.
    = f.text_field :editor_experiment, placeholder: 'Editor Experiment'

= render partial: 'levels/editors/fields/instructions', locals: {f: f} unless @level.is_a?(DSLDefined) || @level.is_a?(Unplugged)
= render partial: 'levels/editors/droplet', locals: {f: f} if @level.uses_droplet?
= render partial: 'levels/editors/fields/curriculum_specific', locals: {f: f} if (@level.uses_droplet?) || @level.is_a?(Blockly)
= render partial: 'levels/editors/blockly', locals: {f: f} if !(@level.uses_droplet?) && @level.is_a?(Blockly)
