- content_for(:head) do
  = stylesheet_link_tag 'css/levelbuilder', media: 'all'
  = stylesheet_link_tag 'jquery.handsontable.full', media: 'all'
  %script{src: minifiable_asset_path('js/levelbuilder.js')}
  = javascript_include_tag 'jquery.handsontable.full'

- content_for :body_scripts do
  - video_infos = {}
  - Video.all.each { |video| video_infos[video.key] = video.summarize(false) }
  - script_data = { editorall: { video_infos: video_infos }.to_json }
  %script{src: minifiable_asset_path('js/levels/editors/_all.js'), data: script_data}

- unless @level.is_a? DSLDefined
  .field
    = f.label :display_name
    %p Optionally override how this level is displayed on the Course Overview page.
    = f.text_field :display_name, placeholder: '(defaults to Name)'
  .field
    = f.label 'notes'
    %p
      Notes for yourself or other Levelbuilders. Viewable here and here alone.
    = f.text_area :notes, rows: 6, class: "input-block-level"

.field
  = f.label 'concepts'
  %p
    Select
    %a.select_all{href: '#'} all
    \/
    %a.select_none{href: '#'} none
    (shift-click or cmd-click to select multiple).
  = f.collection_select :concept_ids, Concept.cached, :id, :name, { :selected => @level.concept_ids }, { :multiple => true, :name => 'level[concept_ids][]', :size => Concept.cached.length }

-# We can only save a related LevelConceptDifficulty object for a level that's already been created, not for a new level about to be created
- if @level && @level.id
  .field
    = f.label 'concept difficulties'
    %a{href: "https://docs.google.com/spreadsheets/d/1jPVTIqsIH6qLUd_WlKtzE7CEiaQG-hqM9n_A1hY-rL0"} Concept Difficulty Tagging guidelines
    %table{style: 'width: 80%'}
      %thead
        %tr
          %th Concept
          %th Difficulty
      %tbody
        - concept_difficulty = @level.level_concept_difficulty || LevelConceptDifficulty.new(level:@level)
        %input{type: 'hidden', name: "level[level_concept_difficulty_attributes][id]", value: concept_difficulty.id}
        - LevelConceptDifficulty::CONCEPTS.each do |concept|
          - difficulty = concept_difficulty.send(concept)
          %tr
            %td
              = concept
            %td
              = select_tag "level[level_concept_difficulty_attributes][#{concept}]", options_for_select((1..LevelConceptDifficulty::MAXIMUM_CONCEPT_DIFFICULTY).to_a, difficulty), include_blank: true

.field
  = f.label :video_key, 'Level Video'
  %p Ask an engineer to add new videos to the videos.csv and data.en.yml files.
  = f.select :video_key, options_for_select(video_key_choices, @level.video_key), {include_blank: true}, {class: 'video-dropdown'}
  .video-preview{style: 'display: block'}

#callout_editor.field
  .json_editor
    .json_template
      .callout_space
        %label Callout
        %table
          %tr
            %td.required Element ID
            %td.required{colspan: 2} Localization Key
            %td.required{colspan: 5} Callout text
          %tr
            %td
              %input.element_id{type: 'text', placeholder: '#runButton'}
            %td{colspan: 2}
              %input.localization_key{type: 'text', placeholder: 'level_name_callout1', style: 'width: 96%'}
            %td{colspan: 5}
              %input.callout_text{type: 'text', placeholder: 'Text of callout', style: 'width: 97%'}
          %tr
            %td Qtip on callout
            %td Qtip points to
            %td Show when
            %td X dist
            %td Y dist
            %td Classes
            %td Reappear
            %td Palette Category
          %tr
            %td
              %select.my
                %option{value: 'top left'} Top left
                %option{value: 'top center'} Top center
                %option{value: 'top right'} Top right
                %option{value: 'right top'} Right top
                %option{value: 'right center'} Right center
                %option{value: 'right bottom'} Right bottom
                %option{value: 'bottom right'} Bottom right
                %option{value: 'bottom center'} Bottom center
                %option{value: 'bottom left'} Bottom left
                %option{value: 'left bottom'} Left bottom
                %option{value: 'left center'} Left center
                %option{value: 'left top'} Left top
            %td
              %select.at{style: 'width: 140px;'}
                %option{value: 'top left'} Top left
                %option{value: 'top center'} Top center
                %option{value: 'top right'} Top right
                %option{value: 'right top'} Right top
                %option{value: 'right center'} Right center
                %option{value: 'right bottom'} Right bottom
                %option{value: 'bottom right'} Bottom right
                %option{value: 'bottom center'} Bottom center
                %option{value: 'bottom left'} Bottom left
                %option{value: 'left bottom'} Left bottom
                %option{value: 'left center'} Left center
                %option{value: 'left top'} Left top
            %td
              %input.on{type: 'text', style: 'width: 160px;', placeholder: 'function_editor_opened'}
            %td
              %input.x{type: 'number', style: 'width: 40px;'}
            %td
              %input.y{type: 'number', style: 'width: 40px;'}
            %td
              %input.classes{type: 'text', placeholder: 'no-tip', style: 'width: 80px;'}
            %td
              %input.canReappear{type: 'checkbox', placeholder: 'false', style: 'width: 50px;'}
            %td
              %input.dropletPaletteCategory{type: 'text', placeholder: 'math', style: 'width: 100px;'}
          %tr
        %button.remove_callout{type: 'button'}
          %i.icon-trash
        %hr
    #all_callouts_editor
    %button#add_callout{type: 'button'} Add a callout

  .field
    = f.label :callout_json
    %div{style: '-webkit-user-select: text'}
    = f.text_area :callout_json, rows: 4
