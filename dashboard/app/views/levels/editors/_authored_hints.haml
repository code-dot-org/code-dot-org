#authored_hints
  %label Authored Hints
  .json_editor
    .json_template
      .authored_hint_space
        %input.hint_type{type: 'hidden', value: 'general'}
        .row
          .span10
            %input.hint_id{type: 'text', placeholder: 'hint_id'}
            %select.hint_class
              %option{value: 'content'} Content Hint
              %option{value: 'pointer'} Pointer Hint
              %option{value: 'bottom-out'} Bottom-out Hint
        .row
          .span5
            %textarea.hint_markdown
          .span5
            .markdown_preview
        .row
          .span10
            %button.remove_authored_hint{type: 'button'}
              %i.icon-trash
            %button.move_up{type: 'button'}
              %i.icon-chevron-up
            %button.move_down{type: 'button'}
              %i.icon-chevron-down
        %hr
    #all_authored_hints_editor
    %button#add_authored_hint{type: 'button'} Add a Hint

  .field
    = f.label :authored_hints, "Authored Hints JSON"
    %div{style: '-webkit-user-select: text'}
    = f.text_area :authored_hints, rows: 4

- content_for :body_scripts do
  :javascript
    $(document).ready(function () {

      // A markdown parser that supports a subset of rules; specifically,
      // those rules that we feel comfortable entrusting to translators
      var limitedMarked = (function () {

        var renderer = new marked.Renderer();
        renderer.link = function (href, title, text) {
          return text;
        };

        return function (input) {
          return marked(input, {
            renderer: renderer,
            sanitize: true
          });
        };

      })();

      levelbuilder.jsonEditor("#authored_hints", {
        json_textarea: '#level_authored_hints',
        add_button: '#add_authored_hint',
        remove_button: ".remove_authored_hint",
        up_button: ".move_up",
        down_button: ".move_down",
        value_space: ".authored_hint_space",
        template: ".json_template",
        form_container: "#all_authored_hints_editor",
        wrapper: ".json_editor",
        onNewSpace: function (space) {
          var editor = CodeMirror.fromTextArea(space.find(".hint_markdown").get(0), {
            mode: 'markdown',
            viewportMargin: Infinity,
            lineWrapping: true
          });

          // TODO (elijah) move this into code-studio
          inlineAttach.attachToCodeMirror(editor, {
            uploadUrl: '/level_assets/upload',
            uploadFieldName: 'file',
            downloadFieldName: 'newAssetUrl',
            allowedTypes: ['image/jpeg', 'image/png', 'image/jpg', 'image/gif'],
            progressText: '![Uploading file...]()',
            urlText: "![]({filename})", // `{filename}` tag gets replaced with URL
            errorText: "Error uploading file",
            extraHeaders: {
              'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
            }
          });

          editor.on('change', function (editor, change) {
            space.find('.markdown_preview')
              .html(limitedMarked(editor.getValue()))
              .children('details').details();

            space.find(".hint_markdown").val(editor.getValue());
            space.find(".hint_markdown").trigger('change');
          });
        },
        model: {
          hint_class: "",
          hint_markdown: "",
          hint_id: "",
          hint_type: "general"
        }
      });
    });
