.field
  = f.label 'Use default sprites as starting animation JSON'
  = boolean_check_box f, :use_default_sprites
.field
  = f.label :custom_blocks, 'Custom block defintions'
  %p
    Add some custom JSON block definitions
    <a href="#" onClick="toggleBlock('custom_blocks_more'); return false">Read more...</a>
  #custom_blocks_more{style: 'display: none'}
    %p
      Here is an example.
    %pre
      :preserve
        {
          "func": "isDestroyed",
          "args": [
            { "name": "SPRITE" }
          ],
          "blockText": "{SPRITE} is destroyed?",
          "returnType": "Boolean",
        }
    %p
      Some notes:
    %ul
      %li <code>returnType</code> and <code>args[].type</code> can be any of 'String', 'Number', 'Image', 'Boolean', 'Function', 'Colour', or 'Array'. If none of those apply, or you don't want to enforce a type, just use 'None'
      %li <code>blockText</code> must contain a placeholder for every argument in the <code>args</code> list
  ~ f.text_area :custom_blocks, placeholder: 'Custom blocks', rows: 4, value: @level.custom_blocks
  #custom-blocks-validation
.field
  = f.label :hide_custom_blocks, 'Do not automatically add block pool and custom blocks to the toolbox'
  = boolean_check_box f, :hide_custom_blocks

.field
  =f.label 'Custom helper library code'
  %p
    This code will be injected between the official helper library and the student's code
  ~ f.text_area :custom_helper_library, placeholder: 'Add some arbitrary javascript', rows: 4, value: @level.custom_helper_library
