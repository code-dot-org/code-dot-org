%legend.control-legend{data: {toggle: "collapse", target: "#animations"}}
  Animations

#animations.collapse

  - if @level.is_a?(GamelabJr)
    .field
      = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :use_default_sprites, description: "Use default sprites as starting animation JSON"}

  .field
    = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :hide_animation_mode, description: "Hide the Animation Tab (you can still seed a level with animations)"}

  .field
    = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :start_in_animation_tab, description: "Start in the Animation Tab"}

  .field
    = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :all_animations_single_frame, description: "All animations should be a single frame. If it has multiple frames, only show the first frame as a still image."}

  .field
    = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: 'pause_animations_by_default', description: "Animations are paused by default"}

    %p
      If checked, the sprite animation will always be paused after a <tt>setAnimation</tt> call.
      Otherwise, it will be playing after a <tt>setAnimation</tt> call.

  .field
    %p{data: {toggle: "collapse", target: "#animation_json_output"}}
      Starting Animation JSON
    %p
      This should be equivalent to the animation JSON created by the animation tab.
      <a href="#" onClick="toggleBlock('start_animations_more'); return false">Read more...</a>
    %p
      Learn how to preload starting animations
      = link_to 'here', 'https://github.com/code-dot-org/code-dot-org/wiki/%5BLevelbuilder%5D-Adding-Preloaded-Animations-to-a-Level-in-Game-Lab', target: '_blank'
    #start_animations_more{style: 'display: none'}
      %p
        You can generate this by getting the animation tab into the desired state,
        opening the developer console, and running <tt>viewExportableAnimationList()</tt>;
        or, you can compose it by hand.
        Here is an example.
      %pre
        :preserve
          {
            "orderedKeys": ["animation1"],
            "propsByKey": {
              "animation1": {
                "name": "asterisk_circle",
                "sourceUrl": "/blockly/media/gamelab/library/asterisk_circle.png",
                "frameSize": {"x":132, "y": 126},
                "frameCount": 9,
                "frameDelay": 2,
                "looping": true
              }
            }
          }
      %p
        Some considerations:
      %ul
        %li <tt>orderedKeys</tt> defines the order the animations are listed in the animation tab, and each key must reference a set of props in <tt>propsByKey</tt>
        %li <tt>name</tt>, <tt>sourceUrl</tt>, <tt>frameSize</tt>, <tt>frameCount</tt>, <tt>frameDelay</tt>, and <tt>looping</tt> are all required.
        %li <tt>name</tt> is used to refer to the animation in code; the "animation key" is never visible to the student.
        %li
          <tt>sourceUrl</tt> can take absolute URLs (which will run through our media proxy, so you can refer to almost anything)
          or domain-relative URLs for the limited set of animations in the current library,
          <a href="https://github.com/code-dot-org/code-dot-org/blob/staging/apps/src/gamelab/animationLibrary.js">which you can find here.</a>
          The sourceUrl should point to an image or spritesheet - not an animated gif.
        %li <tt>frameDelay</tt> can be from slowest to fastest: 60, 45, 30, 20, 15, 10, 5, 4, 3, 2, 1.
        %li <tt>looping</tt> is true is if the animation plays repeatedly or false if it plays once.
    #animation_json_output.collapse.in
      ~ f.text_area :start_animations, placeholder: 'Starting animations JSON', rows: 4, value: @level.start_animations
      #level-start-animations-validation
