%h1.control-legend{data: {toggle: "collapse", target: "#toolbox"}}
  Toolbox

#toolbox.in.collapse
  = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :droplet_tooltips_disabled, description: "Hide droplet documentation tooltips"}
  = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :lock_zero_param_functions, description: "Don't allow parameters to be added to user-defined functions with no parameters"}

  - if @level.is_a? Applab
    = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :autocomplete_palette_apis_only, description: "Autocomplete palette APIs only"}
    = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :execute_palette_apis_only, description: "Execute palette APIs only"}
    = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :beginner_mode, description: "Beginner mode for loops"}
    .field
      = f.label :makerlab_enabled, 'Select Maker API:'
      -# Old level format - @level.makerlab_enabled = true/false
      -# New level format - @level.makerlab_enabled = 'circuitPlayground', 'microbit', ''
      -# When converting old format to new format, 'true' -> 'circuitPlayground'
      = f.select :makerlab_enabled, options_for_select(@level.class.maker_apis, @level.makerlab_enabled == 'true' ? 'circuitPlayground' : @level.makerlab_enabled), {include_blank: true}

  .field
    = f.label :palette_category_at_start
    = f.select :palette_category_at_start, options_for_select(@level.class.palette_categories, @level.palette_category_at_start), {include_blank: true}

  .field
    = f.label :code_functions, 'Edit Droplet Palette'
    = f.text_area :code_functions, placeholder: 'Droplet Palette', rows: 4, value: @level.code_functions ? JSON.pretty_generate(@level.code_functions) : ''

  %h1.control-legend{data: {toggle: "collapse", target: "#libraries"}}
    Libraries

  #libraries.in.collapse
    = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :libraries_enabled, description: "Enable Libraries"}
    = f.label :start_libraries,'User-Created Toolbox Libraries (make sure that Enable Libraries ^ is checked)'
    = f.text_area :start_libraries, value: @level.start_libraries

  - if @level.is_a? Applab
    %h1.control-legend{data: {toggle: "collapse", target: "#ai"}}
      A.I.

    #ai.in.collapse
      = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :ai_enabled, description: "Enable A.I. tools"}

      = f.label :ai_model_id,'Pre-trained A.I. model id'
      = f.text_area :ai_model_id, value: @level.ai_model_id, rows: 1
      = f.label :ai_model_name,'Pre-trained A.I. model name'
      = f.text_area :ai_model_name, value: @level.ai_model_name, rows: 1

%h1.control-legend{data: {toggle: "collapse", target: "#starter-code"}}
  Starter Code

#starter-code.in.collapse
  = f.label :text_mode_at_start, 'Code View When Level Starts'
  %p What mode the code is presented as when the level loads
  .aligned-input-group
    = f.radio_button :text_mode_at_start, 'false', :checked => true
    = f.label :text_mode_at_start, 'Start with user preferred setting', :value => 'false'
  .aligned-input-group
    = f.radio_button :text_mode_at_start, 'blocks'
    = f.label :text_mode_at_start, 'Always start with blocks', :value => 'blocks'
  .aligned-input-group
    = f.radio_button :text_mode_at_start, 'true'
    = f.label :text_mode_at_start, 'Always start with text', :value => 'true'
  .field
    = f.label :start_blocks, 'Edit Starting JavaScript Program'
    .row
      .span8
        ~ f.text_area :start_blocks, placeholder: 'Start Blocks', rows: 4, value: @level.uses_droplet? ? @level.start_blocks : @level.pretty_block('start')
      #start-preview.span4

:ruby
  script_data = {
    pageOptions: {
      app: @level.game.app,
      solution_blocks: @level.respond_to?(:solution_blocks),
      uses_droplet: @level.uses_droplet?,
      original_palette: JSON.parse(@level.class.try(:palette) || "{}"),
      shared_blocks: @level.shared_blocks,
    }.to_json
  }
%script{src: webpack_asset_path('js/levels/editors/fields/_droplet.js'),
        data: script_data}
