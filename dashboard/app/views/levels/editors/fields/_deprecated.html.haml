%legend.control-legend.collapsed{data: {toggle: "collapse", target: "#deprecated"}}
  Deprecated

#deprecated.collapse

  .field
    = f.label 'concepts'
    %p
      Select
      %a.select_all{href: '#'} all
      \/
      %a.select_none{href: '#'} none
      (shift-click or cmd-click to select multiple).
    = f.collection_select :concept_ids, Concept.cached, :id, :name, { :selected => @level.concept_ids }, { :multiple => true, :name => 'level[concept_ids][]', :size => Concept.cached.length }

  -# We can only save a related LevelConceptDifficulty object for a level that's already been created, not for a new level about to be created
  - if @level && @level.id
    .field
      = f.label 'concept difficulties'
      %a{href: "https://docs.google.com/spreadsheets/d/1jPVTIqsIH6qLUd_WlKtzE7CEiaQG-hqM9n_A1hY-rL0"} Concept Difficulty Tagging guidelines
      %table{style: 'width: 80%'}
        %thead
          %tr
            %th Concept
            %th Difficulty
        %tbody
          - concept_difficulty = @level.level_concept_difficulty || LevelConceptDifficulty.new(level:@level)
          %input{type: 'hidden', name: "level[level_concept_difficulty_attributes][id]", value: concept_difficulty.id}
          - LevelConceptDifficulty::CONCEPTS.each do |concept|
            - difficulty = concept_difficulty.send(concept)
            %tr
              %td
                = concept
              %td
                = select_tag "level[level_concept_difficulty_attributes][#{concept}]", options_for_select((1..LevelConceptDifficulty::MAXIMUM_CONCEPT_DIFFICULTY).to_a, difficulty), include_blank: true

  -# Deprecated for all blockly levels
  - if !(@level.uses_droplet?) && @level.is_a?(Blockly)
    = render partial: 'levels/editors/fields/ani_gif', locals: {f: f}

    .field
      = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :disable_procedure_autopopulate, description: "Disable autopopulation of Functions category with default toolbox blocks"}
      %p
        By default, Functions categories in Blockly will be automatically populated
        with blocks for three default procedure definitions (noreturn, return, and
        ifreturn), as well as the call blocks for any procedures that have already
        been defined. Any XML manually included in the toolbox category will be ignored.
      %p
        With this setting enabled, only the call blocks will be injected into this
        category and NOT the default definition blocks. Any XML manually included in
        the toolbox category will be included, allowing you to specify a subset of
        the definition blocks that you would like to include for this level.

    .field
      = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :top_level_procedure_autopopulate, description: "Autopopulate function call blocks for non-categorized toolboxes"}
      %p
        This adds a call block to the end of the toolbox for each function defined
        in the workspace (including hidden start blocks).

  -# Deprecated only for Sprite Lab and Dance
  - if @level.is_a?(GamelabJr) || @level.is_a?(Dancelab)
    = render partial: 'levels/editors/fields/custom_block', locals: {f: f}

    = render partial: 'levels/editors/fields/custom_helper_library', locals: {f: f}

    .field
      = f.label :map_reference, 'Map Reference'
      %p If there is a key resource you want to reference in the instructions, add the link here. It will show up under the 'Help & Tips' tab.
      %p This should be a string representing the URL on studio.code.org/docs you want to embed, i.e. '/docs/csd/maker_leds/index.html'.
      = f.text_field :map_reference, placeholder: 'Map Reference'


    .field
      = f.label :reference_link, 'Reference Links'
      %p Add links to pages on Curriculum Builder below. They will show up in the 'Help & Tips' tab below any videos and the map reference.
      %p These should be strings representing the URL on [docs|curriculum].code.org you want to embed, i.e. '/docs/csd/maker_leds/index.html' or '/curriculum/path/to/file'.
      %p Put each link on a new line
      .row
        .span8
          - @level.reference_links = [''] unless @level.reference_links.try(:present?)
          = text_area_tag 'level[reference_links]', @level.reference_links.join("\r\n"), rows: 6, class: "input-block-level", placeholder: 'Additional Reference Link'

    .field
      = f.label :failure_message_override, 'Failure Message Override'
      %p If specified this error message will be used to replace ALL error messages in the puzzle. Be certain this is what you want before using.
      = f.text_field :failure_message_override, style: 'width: 600px;', placeholder: 'Type Override Failure Message Here'

    .field
      = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: 'pause_animations_by_default', description: "Animations are paused by default"}

      %p
        If checked, the sprite animation will always be paused after a <tt>setAnimation</tt> call.
        Otherwise, it will be playing after a <tt>setAnimation</tt> call.

    .field
      = link_to 'Edit Required Blocks', edit_blocks_level_path(@level, :required_blocks) unless @level.new_record?
      = render partial: 'levels/editors/fields/collapsible_block_editor', locals: {f: f, xml_id: 'required'}

    .field
      = link_to 'Edit Recommended Blocks', edit_blocks_level_path(@level, :recommended_blocks) unless @level.new_record?
      = render partial: 'levels/editors/fields/collapsible_block_editor', locals: {f: f, xml_id: 'recommended'}

    .field
      = link_to 'Edit Initialization Blocks', edit_blocks_level_path(@level, :initialization_blocks) unless @level.new_record?
      = render partial: 'levels/editors/fields/collapsible_block_editor', locals: {f: f, xml_id: 'initialization'}

    .field
      = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :show_type_hints, description: "Show a small visual hint for what type of block a connection accepts"}

    .field
      = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: :disable_variable_editing, description: "Disable editing of variable names and creation of new variables"}
