= render partial: 'levels/editors/debugger', locals: {f: f}

= render partial: 'levels/editors/control_buttons', locals: {f: f}

= render partial: 'levels/editors/submittable', locals: {f: f}

.field
  = f.label 'Key-Value Data'
  This data can be accessed via the getKeyValue and setKeyValue blocks in Game Lab.
  %pre
    = preserve do
      :escaped
        Example:
        {
          "click_count": 5,
          "button_color": "blue"
        }
  ~ f.text_area 'data_properties', placeholder: 'Insert JSON Key-Value Data', rows: 4, value: @level.data_properties or ''
  :javascript
    levelbuilder.initializeCodeMirror('level_data_properties', 'javascript');

.field.aligned-input-group
  = boolean_check_box f, :hide_view_data_button
  = f.label 'Hide View Data Button'

- if @level.is_a?(GamelabJr)
  .field
    = f.label :block_pools
    %p
      Select
      %a.select_all{href: '#'} all
      \/
      %a.select_none{href: '#'} none
      (shift-click or cmd-click to select multiple).
    = f.select :block_pools, (Block.all_pool_names + (@level.block_pools || [])).uniq.sort, {}, {multiple: true}

.field
  = f.label :helper_libraries
  %p
    Select
    %a.select_all{href: '#'} all
    \/
    %a.select_none{href: '#'} none
    (shift-click or cmd-click to select multiple).
  = f.select :helper_libraries, (Library.distinct.pluck(:name) + (@level.helper_libraries || [])).uniq.sort, {}, {multiple: true}

= render partial: 'levels/editors/validation_code', locals: {f: f}

= render partial: 'levels/editors/animation', locals: {f: f}

:javascript
  window.toggleBlock = function (elementId) {
    var element = document.getElementById(elementId);
    if (element) {
      element.style.display = element.style.display === 'none' ? 'block' : 'none';
    }
  };


%legend.control-legend.levelTypeHeader
  Sprite Lab Options

  = render partial: 'levels/editors/encrypted_examples', locals: {f: f, level_type: 'spritelab'}

.field
  = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :include_shared_functions, description: "Make shared functions and behaviors available"}

.field
  %p{data: {toggle: "collapse", target: "#custom_blocks_output"}}
    Custom block definitions

  %p
    Add some custom JSON block definitions
    <a href="#" onClick="toggleBlock('custom_blocks_more'); return false">Read more...</a>
  #custom_blocks_more{style: 'display: none'}
    %p
      Here is an example.
    %pre
      :preserve
        {
          "func": "isDestroyed",
          "args": [
            { "name": "SPRITE" }
          ],
          "blockText": "{SPRITE} is destroyed?",
          "returnType": "Boolean",
        }
    %p
      Some notes:
    %ul
      %li <code>returnType</code> and <code>args[].type</code> can be any of 'String', 'Number', 'Image', 'Boolean', 'Function', 'Colour', or 'Array'. If none of those apply, or you don't want to enforce a type, just use 'None'
      %li <code>blockText</code> must contain a placeholder for every argument in the <code>args</code> list
  #custom_blocks_output.collapse
    ~ f.text_area :custom_blocks, placeholder: 'Custom blocks', rows: 4, value: @level.custom_blocks
    #custom-blocks-validation
.field
  =f.label 'Custom helper library code'
  %p
    This code will be injected between the official helper library and the student's code
  ~ f.text_area :custom_helper_library, placeholder: 'Add some arbitrary javascript', rows: 4, value: @level.custom_helper_library
