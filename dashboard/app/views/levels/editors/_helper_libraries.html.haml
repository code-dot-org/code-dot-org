%legend.control-legend{data: {toggle: "collapse", target: "#helperLibraries"}}
  Helper Libraries & Block Pools

#helperLibraries.collapse
  = f.label :helper_libraries
  %p
    Select
    %a.select_all{href: '#'} all
    \/
    %a.select_none{href: '#'} none
    (shift-click or cmd-click to select multiple).
  = f.select :helper_libraries, (Library.distinct.pluck(:name) + (@level.helper_libraries || [])).uniq.sort, {}, {multiple: true}

  - if @level.is_a?(GamelabJr)
    .field
      =f.label 'Custom helper library code'
    %p
      This code will be injected between the official helper library and the student's code
    ~ f.text_area :custom_helper_library, placeholder: 'Add some arbitrary javascript', rows: 4, value: @level.custom_helper_library

    - if @level.is_a?(GamelabJr) || @level.is_a?(Dancelab)
      .field
        = render partial: 'levels/editors/checkboxes', locals: {f: f, field_name: :include_shared_functions, description: "Make shared functions and behaviors available"}

      .field
        = f.label :block_pools
        %p
          Select
          %a.select_all{href: '#'} all
          \/
          %a.select_none{href: '#'} none
          (shift-click or cmd-click to select multiple).
        = f.select :block_pools, (Block.all_pool_names + (@level.block_pools || [])).uniq.sort, {}, {multiple: true}

      .field
        = f.label "Custom block definitions"
        %p
          Add some custom JSON block definitions
          <a href="#" onClick="toggleBlock('custom_blocks_more'); return false">Read more...</a>
        #custom_blocks_more{style: 'display: none'}
          %p
            Here is an example.
          %pre
            :preserve
              {
                "func": "isDestroyed",
                "args": [
                  { "name": "SPRITE" }
                ],
                "blockText": "{SPRITE} is destroyed?",
                "returnType": "Boolean",
              }
          %p
            Some notes:
          %ul
            %li <code>returnType</code> and <code>args[].type</code> can be any of 'String', 'Number', 'Image', 'Boolean', 'Function', 'Colour', or 'Array'. If none of those apply, or you don't want to enforce a type, just use 'None'
            %li <code>blockText</code> must contain a placeholder for every argument in the <code>args</code> list
        #custom_blocks_output
          ~ f.text_area :custom_blocks, placeholder: 'Custom blocks', rows: 4, value: @level.custom_blocks
          #custom-blocks-validation
