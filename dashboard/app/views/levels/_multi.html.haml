.multi

  - data = @level.properties
  - app = 'multi'

  - question_content_blank = data['content1'].blank? && data['content2'].blank? && data['content3'].blank? && data['markdown'].blank?
  = render partial: 'levels/content', locals: {app: app, data: data, content_class: question_content_blank ? nil : 'question'}

  .answers{style: question_content_blank ? 'width: 100%' : ''}
    - if data['options'].try(:[], 'answer_line')
      :css
        .btn {
          display: table;
        }

    %span
      %h4.multi-question!= multi_t(data['questions'][0]['text']) if data['questions']

    %br/
    %br/

    - unless data['options'].try(:[], 'hide_submit')
      .buttons
        %a.btn.btn-large.btn-primary.next-stage.submitButton
          =t('submit')

    - if data['height'] == 'auto'
      - height = 'auto'
    - else
      - height = data['height'] || '20'
      - height += 'px'

    -# multi2 gets checkboxes; regular multi gets radio buttons.
    - if data['type'] == 'multi2'
      - unchecked_class = 'fa-square-o'
      - checked_class = 'fa-check-square-o'
      - cross_class = 'fa-times'
    - else
      - unchecked_class = 'fa-circle-o'
      - checked_class = 'fa-dot-circle-o'
      - cross_class = 'fa-times'

    .mainblock
      %form#voteform{onsubmit: 'return false;'}
        - data['answers'].each_with_index do |answer, i|
          - correct = answer['correct']
          %span.answerbutton.btn{style: "height: #{height}", correct: "#{correct}", index: "#{i}"}
            .item-mark{id: "unchecked_#{i}"}
              .fa{class: unchecked_class}
            .item-mark{id: "checked_#{i}", style: 'display: none;'}
              .fa{class: checked_class}
            .item-mark{id: "cross_#{i}", style: 'display: none;'}
              .fa{class: cross_class}
            .item-label
              %label{style: "height: #{height}"}!= multi_t(answer['text'])

      .clear

      = render partial: 'levels/dialog', locals: {app: app, data: data}

  .clear

  %br/
  %br/
  %br/

  .clear

= render partial: 'levels/common_audio'


:javascript

  // The index of the last selection.
  var lastSelectionIndex = -1;

  // How many answers should there be?
  var numAnswers = "#{data['type']}" == 'multi2' ? 2 : 1;

  // A boolean array of the answers.  true is correct.
  var answers = #{data['answers'].map {|answer| answer['correct']}};

  // Tracking which answers are currently selected.
  var selectedAnswers = [];

  // Tracking which answers have been crossed out.
  var crossedAnswers = [];

  function enableButton(enable)
  {
    $('.submitButton').attr('disabled', !enable);
  }

  function choiceClicked(button)
  {
    var index = $(button).attr('index');
    CDOSounds.play('click');

    clickItem(index);
  }

  function clickItem(index)
  {
    // If this button is already crossed, do nothing more.
    if (crossedAnswers.indexOf(index) !== -1)
    {
      return;
    }

    // If single answer, and this button is already selected, do nothing more.
    if (numAnswers == 1 && $.inArray(index, selectedAnswers) !== -1)
    {
      return;
    }

    // If multiple answer, and this button is already selected, deselect it.
    if (numAnswers > 1 && $.inArray(index, selectedAnswers) !== -1)
    {
      unclickItem(index);
      return;
    }

    enableButton(true);

    lastSelectionIndex = index;

    // Unchecked->checked.
    $("#unchecked_" + index).hide();
    $("#checked_" + index).show();

    // Add this answer to the list of selected answers.
    selectedAnswers.unshift(index);

    // Unselect previously selected answer if there are now too many selected.
    if (selectedAnswers.length > numAnswers)
    {
      var unselectIndex = selectedAnswers.pop();

      // Although don't uncheck it if it's already crossed out.
      if (crossedAnswers.indexOf(unselectIndex) === -1 )
      {
        $("#unchecked_" + unselectIndex).show();
        $("#checked_" + unselectIndex).hide();
      }
    }

    return true;
  }

  function unclickItem(index)
  {
    var selectedItemIndex = selectedAnswers.indexOf(index);
    selectedAnswers.splice(selectedItemIndex, 1);

    // Checked->unchecked.
    $("#unchecked_" + index).show();
    $("#checked_" + index).hide();
  }

  $(function()
  {
    $('span.answerbutton').click(function() {
      choiceClicked(this);
    });

    $('#voteform img').on('dragstart', function(e) {
      // Prevent button images from being dragged, click the button instead.
      var button = $(this).parent().parent().parent();
      choiceClicked(button);
      e.preventDefault();
      e.stopPropagation();
    });

    enableButton(false);

    // A string of the last result.  Looks like "1" or "2,3".
    var lastAttemptString = #{@last_attempt.to_json};

    // Pre-select previously submitted response if available.
    if (lastAttemptString)
    {
      var previousResult = lastAttemptString.split(',');

      for (var i = 0; i < previousResult.length; i++)
      {
        clickItem(previousResult[i]);
      }
    }
  });

  function getResult() 
  {
    var answer;
    var errorType = null;

    if (numAnswers > 1 && selectedAnswers.length !== numAnswers)
    {
      errorType = "toofew";
    }

    if (numAnswers == 1)
    {
      answer = lastSelectionIndex;
    }
    else
    {
      answer = selectedAnswers
    }

    return {
      "response": answer,
      "result": validateAnswers(),
      "errorType": errorType
    }
  }

  $('.submitButton').click(function() {
    // If the solution only takes one answer, and it's wrong, and it's not 
    // already crossed out, then mark it as answered wrong.
    if (numAnswers == 1 && 
        crossedAnswers.indexOf(lastSelectionIndex) == -1 && 
        ! validateAnswers())
    {
      $("#checked_" + lastSelectionIndex).hide();
      $("#cross_" + lastSelectionIndex).show();
      crossedAnswers.unshift(lastSelectionIndex);
    }
  });

  function validateAnswers()
  {
    if (selectedAnswers.length == numAnswers)
    {
      for (var i = 0; i < numAnswers; i++)
      {
        if (! answers[selectedAnswers[i]])
        {
          return false
        }
      }
      return true;
    }
  }

