- content_for(:head) do
  %script{src: minifiable_asset_path('js/levels/_match.js')}

.unplugged.match

  - data = @level.properties
  - app = 'match'

  = render partial: 'levels/content', locals: {app: app, data: data}

  - unless !!(data['options'].try(:[], 'hide_submit'))
    .buttons
      %a.btn.btn-large.btn-primary.next-stage.submitButton
        =t('submit')

  %br/

  .clear

  - data['answers'].each_with_index do |answer, i|
    - answer['index'] = i

  -# Shuffle answers until they are different to real answers.
  - if data['answers'].length > 1   # avoid infinite loop
    - begin shuffled_answers = data['answers'].shuffle end until (shuffled_answers && shuffled_answers != data['answers'])
  - else
    - shuffled_answers = data['answers']

  - height = data['height'] || '40'
  - giantmark_height = height.to_i > 72 ? 72 : 20
  - gap_height = height.to_i/2 - giantmark_height/2

  .mainblock
    .column
      %ul#questions
        - data['questions'].each do |question|
          %li{style: "height: #{height}px"}!= match_t(question['text'])
    .column#answerdest
      %ul#slots.draggablecolumn
        - shuffled_answers.each do |answer|
          %li.emptyslot{style: "height: #{height}px"}
            .giantmark
              .gap{style: "height: #{gap_height}px"}
              .text{style: "font-size: #{giantmark_height}px; line-height: #{giantmark_height}px"}
                ?

    .column#correctmarkscolumn
      %ul#correctmarks
        - data['questions'].each_with_index do |question, index|
          %li.correctmark{style: "height: #{height}px"}
            .xmark{style: 'display: none;', id: "xmark_#{index}"}
              %strong X

    .column
      %ul#answers.draggablecolumn
        - shuffled_answers.each do |answer|
          %li.answer.answerlist{style: "height: #{height}px", originalIndex: answer['index']}!= match_t(answer['text'])

    .clear
  = render partial: 'levels/dialog', locals: {app: app, data: data}
  = render partial: 'levels/match_answer', locals: {data: data, height: height}
  = render partial: 'levels/teacher_markdown', locals: {data: data}


= render partial: 'levels/common_audio'
