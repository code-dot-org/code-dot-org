#validation-error.validation-error{style: 'background-color: yellow'}
= form_for [@level], method: @level.new_record? ? :post : :patch, remote: true do |f|
  = f.hidden_field :type, value: @type_class.to_s.presence || @level.type
  .field
    / dsl-defined levels specify a name directly in the DSL text
    - unless @level.is_a? DSLDefined
      = f.label :name
      = f.text_field :name, placeholder: 'Level Name'
  / Only enter name to create new records of certain level types.
  - unless @level.new_record? && @level.is_a?(Blockly)
    = render partial: 'levels/editors/all', locals: {f: f}
    = render partial: 'levels/editors/md_instructions', locals: {f: f} unless @level.is_a? DSLDefined

    = render partial: 'levels/editors/authored_hints', locals: {f: f} unless @level.is_a? DSLDefined

    = render partial: 'levels/editors/blockly', locals: {f: f} if @level.is_a? Blockly
    = render partial: 'levels/editors/studio', locals: {f: f} if @level.is_a? Studio
    = render partial: 'levels/editors/maze', locals: {f: f} if @level.is_a? Maze
    = render partial: 'levels/editors/grid', locals: {f: f} if @level.is_a? Grid
    = render partial: 'levels/editors/craft', locals: {f: f} if @level.is_a? Craft
    = render partial: 'levels/editors/karel', locals: {f: f} if @level.is_a? Karel
    = render partial: 'levels/editors/artist', locals: {f: f} if @level.is_a? Artist
    = render partial: 'levels/editors/applab', locals: {f: f} if @level.is_a? Applab
    = render partial: 'levels/editors/gamelab', locals: {f: f} if @level.is_a? Gamelab
    = render partial: 'levels/editors/dsl', locals: {f: f} if @level.is_a? DSLDefined
    = render partial: 'levels/editors/netsim', locals: {f: f} if @level.is_a? NetSim

    = render partial: 'levels/editors/pixelation', locals: {f: f} if @level.is_a? Pixelation
    = render partial: 'levels/editors/text_compression', locals: {f: f} if @level.is_a? TextCompression
    = render partial: 'levels/editors/odometer', locals: {f: f} if @level.is_a? Odometer
    = render partial: 'levels/editors/vigenere', locals: {f: f} if @level.is_a? Vigenere
    = render partial: 'levels/editors/frequency_analysis', locals: {f: f} if @level.is_a? FrequencyAnalysis
  .field
    = f.hidden_field :published
  .actions
    = f.submit 'Save your progress but do not publish', {:id => 'saveProgress'}
    %br
    %br
    = f.submit 'Save and publish your completed work', {:id => 'publishLevel', :style => "background-color: #f0c14b"}
#validation-error.validation-error{style: 'background-color: yellow'}
:javascript
  #{render partial: 'shared/ajax_submit', formats: [:js],  locals: {form_selector: @level.new_record? ? '#new_level' : '.edit_level'}}
  $(document).ready(function () {
    $('#saveProgress').click(function() {
      $('#level_published').val(false);
    });

    $('#publishLevel').click(function() {
      $('#level_published').val(true);
    });
  });
