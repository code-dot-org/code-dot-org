- content_for(:head) do
  %script{src: minifiable_asset_path('js/levelbuilder.js')}

%pre#validation-error.validation-error{style: 'background-color: yellow; display: none'}
= form_for [@level], method: @level.new_record? ? :post : :patch, remote: true do |f|
  = f.hidden_field :type, value: @type_class.to_s.presence || @level.type
  .field
    / dsl-defined levels specify a name directly in the DSL text
    - unless @level.is_a? DSLDefined
      = f.label :name
      = f.text_field :name, placeholder: 'Level Name'
  / Only enter name to create new records of certain level types.
  - unless @level.new_record? && @level.is_a?(Blockly)
    = render partial: 'levels/editors/all', locals: {f: f} unless @level.is_a? EvaluationMulti
    = render partial: 'levels/editors/md_instructions', locals: {f: f} unless @level.is_a?(DSLDefined) || @level.is_a?(Unplugged)
    = render partial: 'levels/editors/tts', locals: {f: f} unless @level.is_a?(DSLDefined) || @level.is_a?(Unplugged)

    = render partial: 'levels/editors/authored_hints', locals: {f: f} unless @level.is_a?(DSLDefined) || @level.is_a?(Unplugged)

    = render partial: 'levels/editors/flappy', locals: {f: f} if @level.is_a? Flappy
    = render partial: 'levels/editors/bounce', locals: {f: f} if @level.is_a? Bounce
    = render partial: 'levels/editors/unplugged', locals: {f: f} if @level.is_a? Unplugged
    = render partial: 'levels/editors/blockly', locals: {f: f} if @level.is_a? Blockly
    = render partial: 'levels/editors/studio', locals: {f: f} if @level.is_a? Studio
    = render partial: 'levels/editors/maze', locals: {f: f} if @level.is_a? Maze
    = render partial: 'levels/editors/grid', locals: {f: f} if @level.is_a? Grid
    = render partial: 'levels/editors/craft', locals: {f: f} if @level.is_a? Craft
    = render partial: 'levels/editors/karel', locals: {f: f} if @level.is_a? Karel
    = render partial: 'levels/editors/artist', locals: {f: f} if @level.is_a? Artist
    = render partial: 'levels/editors/applab', locals: {f: f} if @level.is_a? Applab
    = render partial: 'levels/editors/gamelab', locals: {f: f} if @level.is_a? Gamelab
    = render partial: 'levels/editors/weblab', locals: {f: f} if @level.is_a? Weblab
    = render partial: 'levels/editors/dsl', locals: {f: f} if (@level.is_a?(DSLDefined) && !(@level.is_a?(EvaluationMulti)))
    = render partial: 'levels/editors/evaluation_multi', locals: {f: f} if @level.is_a? EvaluationMulti
    = render partial: 'levels/editors/netsim', locals: {f: f} if @level.is_a? NetSim
    = render partial: 'levels/editors/free_response', locals: {f: f} if @level.is_a? FreeResponse
    = render partial: 'levels/editors/standalone_video', locals: {f: f} if @level.is_a? StandaloneVideo
    = render partial: 'levels/editors/external_link', locals: {f: f} if @level.is_a? ExternalLink
    = render partial: 'levels/editors/pixelation', locals: {f: f} if @level.is_a? Pixelation
    = render partial: 'levels/editors/text_compression', locals: {f: f} if @level.is_a? TextCompression
    = render partial: 'levels/editors/odometer', locals: {f: f} if @level.is_a? Odometer
    = render partial: 'levels/editors/vigenere', locals: {f: f} if @level.is_a? Vigenere
    = render partial: 'levels/editors/frequency_analysis', locals: {f: f} if @level.is_a? FrequencyAnalysis
    = render partial: 'levels/editors/public_key_cryptography', locals: {f: f} if @level.is_a? PublicKeyCryptography
    = render partial: 'levels/editors/curriculum_reference', locals: {f: f} if @level.is_a? CurriculumReference
  .field
    = f.hidden_field :published
  .actions
    = f.submit 'Save and publish your completed work', {:class => 'publishLevel', :style => "background-color: #f0c14b; margin-bottom: 10px"}
    %p Or, save, publish, and return to:
    %ul
      - @level.script_levels.each do |script_level|
        %li
          = f.submit build_script_level_path(script_level), {:class=> 'publishLevel', :name => "redirect", :style => "font-family: monospace; margin-bottom: 10px"}
%pre#validation-error.validation-error{style: 'background-color: yellow; display: none'}
:javascript
  window.levelbuilder.ajaxSubmit("#{@level.new_record? ? '#new_level' : '.edit_level'}");
  var saving = false;
  $(document).ready(function () {
    $('#saveProgress').click(function() {
      saving = true;
      $('#level_published').val(false);
    });

    $('.publishLevel').click(function() {
      saving = true;
      $('#level_published').val(true);
    });
  });

  var inputs = $('.edit_level *[id]:visible');
  var form_values = {};
  var FORM_VALUES_TO_SKIP = [
    'level_tts_voice',
  ];
  for (var i = 0; i < inputs.length; i++) {
    form_values[inputs[i].id] = inputs[i].value;
  }

  $(window).bind('beforeunload', function () {
    if (saving) {
      return;
    }
    for (var i = 0; i < inputs.length; i++) {
      if (FORM_VALUES_TO_SKIP.indexOf(inputs[i].id) === -1 &&
          inputs[i].value !== form_values[inputs[i].id]) {
        // prompt before navigating away
        return "You have unsaved changes, are you sure you want to leave?";
      }
    }
  });
