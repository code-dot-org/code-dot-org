- video = @level.specified_autoplay_video
- video_data = {videoOptions: video.summarize(false).to_json,
                videoHeight: 480,
                videoWidth: 853,
                videoRoundedCorners: @level.video_rounded_corners ? "true" : "false",
                videoFullWidth: @level.video_full_width ? "true" : "false"}

- content_for(:head) do
  %script{src: webpack_asset_path('js/levels/_standalone_video.js'), data: video_data}

.standalone-video{:class => ('standalone-video-full-width' if @level.video_full_width)}
  - @slides = get_slides_by_video_key(@level.video_key)

  - unless @level.video_full_width
    %h1= "#{t('video.label')}: #{video.localized_name}"
  - long_instructions = @level.localized_long_instructions
  - if long_instructions
    / Markdown will be rendered clientside by _standalone_video.js
    .markdown-container{data: {markdown: long_instructions}}

  .video-content
  - if @slides
    .notes-content{style: "display: none"}
      #notes= render template: 'notes/index'

  %br/

  .below-video-left{style: "float: left; max-width: 80%"}
    .video-link= link_to t('video.download'), video.download

    - if @slides
      .slides-link
        |
        %a.show-notes{href: ''}= t('video.show_notes')
        %a.show-video{href: '', style: "display: none"}= t('video.show_video')

    #fallback-player-caption-dialog-link

  - if @level.video_full_width
    .buttons.below-video-right{style: "float: right; max-width: 20%"}
      = button_tag t('continue'), class: "btn btn-large btn-primary next-lesson submitButton"

  %br/
  %br/

  - unless @level.video_full_width
    .buttons
      = button_tag t('continue'), class: "btn btn-large btn-primary next-lesson submitButton"

  = render partial: 'levels/teacher_markdown', locals: {data: {'teacher_markdown' => @level.localized_teacher_markdown}}
