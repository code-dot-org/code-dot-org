:ruby
  level ||= if @level.contained_levels.empty?
    @level
  else
    @level.contained_levels.first
  end
  in_level_group ||= false
  last_attempt = @last_attempt unless local_assigns.has_key? :last_attempt
  left_align = local_assigns[:left_align]
  responses = @responses&.map do |response|
    {
      user_id: response.user_id,
      text: response.level_source&.data,
    }
  end.filter { |r| !!r[:text] }  # Remove empty responses.

  teacher_markdown = if level.respond_to?(:solution) && level.solution.present? && Policies::InlineAnswer.visible_for_script_level?(current_user, @script_level)
    level.solution
  end

  js_data = {
    level: {
      properties: level.properties,
      height: level.respond_to?(:height) ? level.height : nil,
      type: level.type,
      id: level.id,
      name: level.name
    },
    last_attempt: last_attempt,
    left_align: left_align,
    responses: responses,
    teacher_markdown: teacher_markdown,
    reportingData: {
      lessonName: @script_level.lesson.name,
      lessonId: @script_level.lesson.id,
      unitName: @script.name,
      unitId: @script.id,
      curriculumUmbrella: @script.curriculum_umbrella
    }
  }


#summary-content
  #summary-top-links

  .container#level-question
    - if level.is_a?(FreeResponse)
      .free-response
        - title = level.get_property(:title)
        - if title.present? && !in_level_group
          %h1.no-underline= title
        - long_instructions = level.get_property("long_instructions")
        - if long_instructions
          / Markdown will be rendered clientside by _summary.js
          .markdown-container{data: {markdown: long_instructions}}

        - height = level.height || '80'
        - placeholder = level.get_property(:placeholder) || I18n.t('free_response.placeholder')
        %textarea.response{id: "level_#{level.id}", placeholder: placeholder, style: "height: #{height}px;", readonly: true}= last_attempt

  #summary-responses
  #summary-teacher-instructions

- content_for(:head) do
  %script{src: webpack_asset_path('js/levels/_summary.js'), data: {summary: js_data.to_json}}
