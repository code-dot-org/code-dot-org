= form_for(@script || :script, @script ? {} : {url: scripts_path}) do |f|
  - if @script && @script.errors.any?
    #error_explanation
      %h2
        = pluralize(@script.errors.count, 'error')
        prohibited this script from being saved:
      %ul
        - @script.errors.full_messages.each do |msg|
          %li= msg
  - if @script.nil? || @script.new_record?
    .field
      = f.label :name
      = f.text_field :name
  - else
    = f.hidden_field :name
  .edit_container
  - scriptData = {script: @script ? @script.summarize : {},
                  i18n: @script ? @script.summarize_i18n : {},
                  beta: params[:beta].present?,
                  levelKeyList: Level.key_list}
  %script{src: minifiable_asset_path('js/levelbuilder_edit_script.js'),
          data: {levelBuilderEditScript: scriptData.to_json}}

  - if !params[:beta].present?
    = link_to 'Try the beta Script Editor (will reload the page without saving)', beta: true
    .script_text
      - rows = @script_file ? @script_file.lines.count + 10 : 5
      = text_area_tag('script_text', @script_file || "stage 'new stage'\n", rows: rows, style: 'width: 700px;')

  %button.btn.btn-primary{type: 'submit', style: 'margin: 0'} Save Changes

- if @show_all_instructions
  - @script.stages.each do |stage|
    %br
      %h1= stage.localized_title
      %br
      - stage.script_levels.each do |sl|
        %div(style='padding-left:40px;')
          = link_to edit_level_path(sl.level) do
            %h2= "Puzzle #{sl.position} Instructions (#{sl.level.name}):"
        %br
        %div(style='padding-left:80px;')
          - md = sl.level.properties['markdown'] || sl.level.properties['markdown_instructions']
          - if md.present?
            = ActionView::Base.new.render(inline: md, type: :md)
          - else
            = sl.level.properties['instructions']
        %br
