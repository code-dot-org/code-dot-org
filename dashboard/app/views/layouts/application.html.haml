!!! 5
-require 'cpa'
-require '../shared/middleware/helpers/experiments'
%html{dir: locale_dir}
  %head
    = render partial: 'i18n/crowdin_in_context_tool'
    = render inline: File.read(Rails.root.join('..', 'shared', 'haml', 'onetrust_cookie_scripts.haml')), type: :haml, locals: {dashboard: true, domain: 'code.org'}
    - appname = Rails.env.production? ? t(:appname) : "#{t(:appname)} [#{Rails.env}]"
    - managed_test_server = "#{CDO.running_web_application? && CDO.test_system?}"
    - title = @page_title ? "#{@page_title} - #{appname}" : appname
    %title= title
    - begin
      = ::NewRelic::Agent.browser_timing_header
    - rescue
      = ''
    - if view_options[:responsive_content]
      = tag :meta, name: 'viewport', content: 'width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no'
    - else
      = tag :meta, name: 'viewport', content: 'minimal-ui'
    /[if IE 9]
      %meta{'http-equiv' => 'X-UA-Compatible', content: 'IE=Edge'}
    = stylesheet_link_tag    'css/code-studio', media: 'all'
    = stylesheet_link_tag    'font-awesome', media: 'all'
    = stylesheet_link_tag    'application', media: 'all'
    = render partial: 'layouts/google_analytics'
    -# data needed for dcdo.js. This tag is needed on every page because our translation code is
    -# making use of the dcdo feature.
    %script{data: {'dcdo': DCDO.frontend_config.to_json}}
    -# auth key needed for amplitude analytics.
    %script{data: {'amplitude-api-key': CDO.safe_amplitude_api_key}}
    -# auth key needed for statsig analytics
    %script{data: {'statsig-api-client-key': CDO.safe_statsig_api_client_key}}
    -# for statsig to recognized managed test server
    %script{data: {'managed-test-server': managed_test_server}}
    -# user id and type for analytics logging- may not work for cached pages
    %script{data: {'user-id': current_user&.id}}
    %script{data: {'user-type': current_user&.user_type}}
    -# webpack-runtime.js must appear exactly once on any page containing webpack entries
    %script{src: webpack_asset_path('js/webpack-runtime.js'), 'data-ot-ignore' => ''}
    -# essential.js is ordered above application.js to filter new relic errors
    %script{src: webpack_asset_path('js/essential.js'), 'data-ot-ignore' => ''}
    -# This file is generated by Webpack's SplitChunksPlugin,
    -# which we only use when optimizing our webpack build (ie, non-development environments).
    - if CDO.optimize_webpack_assets
      %script{src: webpack_asset_path('js/vendors.js'), 'data-ot-ignore' => ''}
    = render inline: File.read(Rails.root.join('..', 'shared', 'haml', 'answerdash.haml')), type: :haml if view_options[:answerdash]
    = javascript_include_tag 'application', 'data-ot-ignore' => ''
    %script{src: webpack_asset_path("js/#{js_locale}/common_locale.js"), 'data-ot-ignore' => ''}
    -# This file is generated by Webpack's SplitChunksPlugin,
    -# which we only use when optimizing our webpack build (ie, non-development environments).
    - if CDO.optimize_webpack_assets
      %script{src: webpack_asset_path('js/code-studio-common.js'), 'data-ot-ignore' => ''}
    = csrf_meta_tags
    = yield :head
    - if content_for? :og
      = yield :og
    - else
      = tag 'meta', property: 'og:title', content: title
      = tag 'meta', property: 'og:image', content: CDO.studio_url(CDO.shared_image_url('share/girl_cropped.jpg'), 'https:')
      = tag 'meta', property: 'og:description', content: t('share.description')
  %body{class: @body_classes}
    - if session[:assumed_identity]
      - if Rails.env.production?
        #assumed_identity_tag= 'Assumed identity'
      - else
        #assumed_identity_tag= 'Assumed identity (' + Rails.env + ')'
    - else
      - unless Rails.env.production?
        = render partial: 'layouts/environment_tag'
    - if current_user&.student?
      - forceStudentInterstitial = params[:forceStudentInterstitial]
      - if current_user.age.nil? || lti_user_info_required?(current_user) || cap_user_info_required?(current_user, request.country) || forceStudentInterstitial
        = render partial: 'layouts/student_information_interstitial', locals: {student: current_user, country: request.country, forceStudentInterstitial: forceStudentInterstitial}
    - cookie_key = environment_specific_cookie_name('_user_type')
    - user_type = request.cookies[cookie_key]
    -# The _user_type cookie is set in devise.rb to differentiate under13 students as 'student_y'.
    -# Splitting that single value here into two variables to align with user_type standards of "teacher/student".
    - if user_type == 'student_y'
      - user_type = 'student'
      - under_13 = true
    - else
      - under_13 = false

    - gdpr_data = {}
    - if current_user
      - gdpr_data[:show_gdpr_dialog] = GdprDialogHelper.show?(current_user, request)
      - gdpr_data[:current_user_id] = current_user.id

    #gdpr-dialog

    %script{src: webpack_asset_path('js/code-studio.js'), data: {gdpr: gdpr_data.to_json, usertype: user_type.to_json, under13: under_13.to_json}, 'data-ot-ignore' => ''}

    .wrapper{style: ('background-color: #ffffff' if view_options[:white_background])}
      - unless view_options[:no_header]
        = render partial: 'layouts/header', locals: {script: @script, script_level: @script_level, level: @level, lesson: @lesson, full_width: view_options[:full_width]}
      - if view_options[:code_studio_logo]
        = render partial: 'layouts/logo'
      - if current_user
        = render_parental_permission_modal(current_user, request)

      - page = yield

      - if view_options[:full_width]
        - if view_options[:responsive_content]
          .responsive_full_container{style: ('padding: 0' if view_options[:no_padding_container])}
            = page
        - else
          .full_container{style: ('padding: 0' if view_options[:no_padding_container])}
            = page
      - else
        .container.main
          = show_flashes.html_safe
          = page

      - if view_options[:responsive_content]
        .responsive-content-desktop-footer
          .push
      - else
        - unless view_options[:no_footer] || view_options[:small_footer]
          .push

      - if view_options[:small_footer] && !view_options[:no_footer]
        = render partial: 'layouts/small_footer', locals: {channel: view_options[:channel]}

      - if view_options[:responsive_content]
        .responsive-content-mobile-footer
          = render partial: 'layouts/small_footer', locals: {full_width: true}

    - unless view_options[:no_footer]
      - if content_for? :above_footer_content
        = yield :above_footer_content

      - if view_options[:responsive_content]
        .responsive-content-desktop-footer
          = render partial: 'layouts/footer', locals: {full_width: view_options[:full_width]}
      - elsif !view_options[:small_footer]
        = render partial: 'layouts/footer', locals: {full_width: view_options[:full_width]}
      = render partial: 'shared/maybe_set_hoc_secret'

    = render inline: File.read(Rails.root.join('..', 'shared', 'haml', 'cookie_banner.haml')), type: :haml, locals: {dashboard: true}
    = yield :body_scripts
