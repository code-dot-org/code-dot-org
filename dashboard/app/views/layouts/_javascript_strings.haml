-#
  A set of strings taken from dashboard's I18n that are used by our JS. We can't
  just do this in .erb files in the assets directory, since those get
  precompiled and end up English only. A better longer term solution may be to
  use something like the i18n-js gem.

:ruby
  def escape_t(key)
    escape_javascript(I18n.t(key))
  end

:javascript
  window.dashboard = window.dashboard || {};
  (function () {
    // subset of the string table used in JS. not this only supports strings
    // that don't use params
    var strs = {
      less: "#{escape_t('less')}",
      more: "#{escape_t('more')}",
      beta: "#{escape_t('beta')}",
      submit: "#{escape_t('submit')}",
      stage: "#{escape_t('stage')}",
      view_lesson_plan: "#{escape_t('view_lesson_plan')}",
      activerecord: {
        attributes: {
          user: {
            email: "#{escape_t('activerecord.attributes.user.email')}",
            age: "#{escape_t('activerecord.attributes.user.age')}",
          }
        }
      },
      footer: {
        built_on_code_studio: "#{escape_t('footer.built_on_code_studio')}",
        report_abuse: "#{escape_t('footer.report_abuse')}",
        try_hour_of_code: "#{escape_t('footer.try_hour_of_code')}",
        how_it_works: "#{escape_t('footer.how_it_works')}",
        copyright: "#{escape_t('footer.copyright')}",
        tos: "#{escape_t('footer.tos')}",
        privacy: "#{escape_t('footer.privacy')}"
      },
      errors: {
        messages: {
          too_young: "#{escape_t('errors.messages.too_young')}",
        }
      },
      project: {
        share_title: "#{escape_t('project.share_title')}",
        share_copy_link: "#{escape_t('project.share_copy_link')}",
        share_embed_description: "#{escape_t('project.share_embed_description')}",
        share_u13_warning: "#{escape_t('project.share_u13_warning')}",
        embed: "#{escape_t('project.embed')}",
        advanced_share: "#{escape_t('project.advanced_share')}",
        close: "#{escape_t('project.close')}",
        click_to_remix: "#{escape_t('project.click_to_remix')}",
        remix: "#{escape_t('project.remix')}",
        share: "#{escape_t('project.share')}",
        rename: "#{escape_t('project.rename')}",
        save: "#{escape_t('project.save')}",
        my_projects: "#{escape_t('project.my_projects')}",
        more: "#{escape_t('project.more')}",
        delete: "#{escape_t('project.delete')}",
        import: "#{escape_t('project.import')}",
        share_link_import_bad_link_header: "#{escape_t('project.share_link_import_bad_link_header')}",
        share_link_import_bad_link_body: "#{escape_t('project.share_link_import_bad_link_body')}",
        share_link_import_error_header: "#{escape_t('project.share_link_import_error_header')}",
        share_link_import_error_body: "#{escape_t('project.share_link_import_error_body')}",
        new: "#{escape_t('project.new')}",
        cancel: "#{escape_t('project.cancel')}",
        delete_confirm_title: "#{escape_t('project.delete_confirm_title')}",
        delete_confirm_text: "#{escape_t('project.delete_confirm_text')}",
        edit_project: "#{escape_t('project.edit_project')}",
        sharing_disabled: "#{escape_t('project.sharing_disabled')}",
        abuse: {
          tos: "#{escape_t('project.abuse.tos')}",
          policy_violation: "#{escape_t('project.abuse.policy_violation')}",
          contact_us: "#{escape_t('project.abuse.contact_us')}",
          go_to_code_studio: "#{escape_t('project.abuse.go_to_code_studio')}",
          report_abuse_form: {
            intro: "#{escape_t('project.abuse.report_abuse_form.intro')}",
            validation: {
              email: "#{escape_t('project.abuse.report_abuse_form.validation.email')}",
              age: "#{escape_t('project.abuse.report_abuse_form.validation.age')}",
              abuse_type: "#{escape_t('project.abuse.report_abuse_form.validation.abuse_type')}",
              abuse_detail: "#{escape_t('project.abuse.report_abuse_form.validation.abuse_detail')}",
            },
            abusive_url: "#{escape_t('project.abuse.report_abuse_form.abusive_url')}",
            abuse_type: {
              question: "#{escape_t('project.abuse.report_abuse_form.abuse_type.question')}",
              harassment: "#{escape_t('project.abuse.report_abuse_form.abuse_type.harassment')}",
              offensive: "#{escape_t('project.abuse.report_abuse_form.abuse_type.offensive')}",
              infringement: "#{escape_t('project.abuse.report_abuse_form.abuse_type.infringement')}",
              other: "#{escape_t('project.abuse.report_abuse_form.abuse_type.other')}",
            },
            detail: "#{escape_t('project.abuse.report_abuse_form.detail')}",
            acknowledge: "#{escape_t('project.abuse.report_abuse_form.acknowledge')}",
          }
        }
      },
    };

    window.dashboard.i18n = {
      /**
       * Mimics dashboard's I18n.t, getting a string from the hierarchy
       * @param {string} selector Selector the desired string, i.e. "project.abuse.tos"
       * @param {object} params Set of key/value pairs where instances of %{key} in the
       *   string are replaced with value
       */
      t: function (selector, params) {
        var hierarchy = selector.split('.');
        var current = strs;
        hierarchy.forEach(function(item) {
          current = current[item];
          if (!current) {
            throw new Error('i18n failed to find string: ' + selector);
          }
        });
        if (typeof(current) !== 'string') {
          throw new Error('i18n not a leaf: ' + selector);
        }

        // Do param replacement
        Object.keys(params || {}).forEach(function (key) {
          current = current.replace(new RegExp('%{' + key + '}', 'g'), params[key]);
        });
        return current;
      }
    };
  })();
