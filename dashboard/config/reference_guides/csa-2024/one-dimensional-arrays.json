{
  "key": "one-dimensional-arrays",
  "course_version_key": "2024",
  "course_offering_key": "csa",
  "parent_reference_guide_key": "data-structures",
  "display_name": "One-Dimensional (1D) Arrays",
  "content": "## What is a one-dimensional (1D) array?\n\nIn Java, a one-dimensional (1D) array is used to store a list of elements that are of the same data type. A 1D array is an object and is fixed in size, meaning elements cannot be removed or added after it has been created. Elements in a 1D array can only be accessed or modified.\n\n## How do I create a 1D array?\n\nA 1D array can be created by using the `new`(#e7e8ea) keyword and specifying the type and number of elements to store.\n\n```\ndataType[] foo = new dataType[arrayLength];\n```\n\n::: details [**‚ùìWhat is `foo`(#e7e8ea)??**]\n  \n`foo`(#e7e8ea) is a name often used by software engineers in example code segments as a placeholder for a variable, object, or method name. You can read more about how this word is used and theories about its origins [**here**](https://www.codingem.com/what-is-foo/).\n:::\n&nbsp;\n\nAlternatively, a 1D array can be created using an initializer list by specifying the type and listing the elements to store separated by commas inside curly braces ( `{ }`(#e7e8ea) ).\n\n```\ndataType[] foo = {firstElement, secondElement, thirdElement};\n```\n\n## How do I access an element in a 1D array?\n\nAn index refers to an element's position in an array. The index values of an array start at `0`(#e7e8ea), and the last index value is one less than the length of the array.\n\nIt is important that the index is valid. If you attempt to access an invalid index (a value that is less than `0`(#e7e8ea) or greater than or equal to its length), you will get an `ArrayIndexOutOfBoundsException`(#e7e8ea).\n\n```\nint[] numbers = {1, 2, 3, 4, 5};\nint thirdNumber = numbers[2];\nSystem.out.println(thirdNumber);\n```\n\n**Output:**\n\n```\n####################\n#      CONSOLE     #\n####################\n\n3\n```\n\n## How do I change an element's value?\n\nTo change the value of an element in an array, refer to the element using its index and use the assignment operator ( `=`(#e7e8ea) ) to assign a new value.\n\n```\nint[] numbers = {1, 2, 3, 4, 5};\nSystem.out.println(numbers[1]);\nnumbers[1] = 10;\nSystem.out.println(numbers[1]);\n```\n\n**Output:**\n\n```\n####################\n#      CONSOLE     #\n####################\n\n3\n10\n```",
  "position": 1
}