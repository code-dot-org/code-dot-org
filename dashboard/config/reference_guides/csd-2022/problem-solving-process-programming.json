{
  "key": "problem-solving-process-programming",
  "course_version_key": "2022",
  "course_offering_key": "csd",
  "parent_reference_guide_key": "problem-solving-process",
  "display_name": "The Problem Solving Process with Programming",
  "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nThe **Problem Solving Process** is useful when writing code for a challenging program. This process will help you clarify and break down a problem into manageable steps so you can easily identify the code you need to write for each step.\n\n## Define\n- Read the instructions carefully to make sure you understand the goals and intended outcomes of the program.\n- If there is a sample program, run it to ensure you understand what it does.\n- If there is starter code, read it to understand what it does.\n- Rephrase the problem in your own words.\n- Identify any skills you are being asked to apply.\n- Decide which aspect of the problem you want to complete first.\n\n## Prepare\n- Brainstorm as many ideas for the different ways you could program the problem to solve all of its parts.\n- Write out in plain English or pseudocode your ideas for how to solve the problem so that the program does what it is supposed to do.\n- List what you already know how to do and what you don't yet.\n- Describe your ideas to a classmate\n- Review similar programs that you may have written in the past.\n- Sketch out your idea on paper if needed\n\n## Try\n- Pick one idea from the previous step and document why you chose that idea. \n- Implement your chosen idea and write one small piece of code at a time.\n- Test your program often.\n- Use comments to document and keep track of what your code does.\n- Go back to the previous step to look at your other ideas for solving the problem if you get stuck\n- Apply appropriate debugging strategies\n\n## Reflect\n1. Compare your program to the defined problem … Were you successful in solving all aspects of the problem? How do you know?\n2. Ask a classmate to try your program … Are there places where they struggle or show confusion?\n3. Ask a classmate to read your code … Is your code and documentation clear and accurate?\n4. Try to \"break\" your program … Did you find types of interaction or input that you could handle better?\n5. Are there any changes or improvements you can make to this program or another like it in the future?",
  "position": 3
}