{
  "key": "counter-patterns-with-event",
  "course_version_key": "2022",
  "course_offering_key": "csd",
  "parent_reference_guide_key": "patterns",
  "display_name": "Counter Patterns with Event",
  "content": "## Variable Review\r\n\r\nVariables store information. The variable is defined on the left hand side of the expression, and the value is set on the right side.\r\n\r\n![](https://curriculum.code.org/media/uploads/vardefine.PNG)\r\n\r\nWe would read this expression like so:\r\n\r\n*The variable `score` gets the value 3\r\n\r\n## Counter Pattern with Event\r\n\r\n| Name  | Code (Block) | Code (Text) |\r\n| ------------- | ------------- | ------------- |\r\n| Counter Pattern with Event  | ![](https://images.code.org/fb4f1477d57648cb4bde14c2b710e196-image-1600883760296.png)  | <div>`var myVar = 0;` <br><br> `onEvent(\"id\", \"click\", function() {` <br>&nbsp;&nbsp;&nbsp;&nbsp;`myVar = myVar + 1;` <br> `});`</div> |\r\n\r\nThe model could be read like so:\r\n\r\n*The variable `myVar` gets the value 0. When the onEvent is triggered by a click the variable is updated. `myVar` now gets the current value of `myVar` and adds one to it. The new value is then stored in `myVar`.*\r\n\r\n### How does it work?\r\n\r\nWhen the event is triggered, the variable is updated. The current value of the variable is increased or decreased by a set amount. The new value is stored in the variable.\r\n\r\n### Examples\r\n\r\n![](https://curriculum.code.org/media/uploads/counter_pattern_with_event.gif)\r\n<br>\r\n*The variable `score` gets the value 0. When the onEvent is triggered by a click on the button, the variable is updated. `score` now gets the current value of `score` and adds one to it. The new value is then stored in `score`. The score is then displayed on the screen.*\r\n\r\n![](https://curriculum.code.org/media/uploads/counter_pattern_with_event2.gif)\r\n<br>\r\n*The variable `score` gets the value 50. When the onEvent is triggered by a click on the button, the variable is updated. `score` now gets the current value of `score` and subtracts three from it. The new value is then stored in `score`. The score is then displayed on the screen.*\r\n\r\n\r\n",
  "position": 1
}