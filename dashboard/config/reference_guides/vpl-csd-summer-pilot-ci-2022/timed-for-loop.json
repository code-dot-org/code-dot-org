{
  "key": "timed-for-loop",
  "course_version_key": "2022",
  "course_offering_key": "vpl-csd-summer-pilot-ci",
  "parent_reference_guide_key": "javascript",
  "display_name": "Timed For Loop",
  "content": "The `for loop` is a handy construct with some really useful shortcuts for making counting with a loop much easier. Specifically the syntax of a _for loop_ allows you to easily:\n\n1. Create a counter variable (often called `i`)\n2. Specify the condition that determines whether or not to keep looping\n3. Dictate how the counter should be incremented\n\nWhen using a _timed loop_ in place of a _for loop_ you will need to take care of those three tasks on your own.\n\n### Using a Timed Loop as a For Loop\n\nHere is a comparison of the how you might replicate the behavior of a _for loop_ with a _timed loop_. Both of these examples will repeat four times, print out the following into the console:\n\n```\nloop #0\nloop #1\nloop #2\nloop #3\n```\n\n![For Loop / Timed Loop Comparison](https://cdo-curriculum.s3.amazonaws.com/media/uploads/forLoop_timedLoop.png)\n\n\n[clear]\n\n[/clear]\n\n[diagram_nums]\n\n1. The counter variable. Note that when using a _timed loop_ the variable must be created before the loop.\n2. The exit condition. As soon as this condition is `false` the loop will stop repeating. A key difference here is that the _for loop_ checks its exit condition **before** each repeat of the loop, which the _timed loop_ checks the condition **during** each repeat.\n3. The counter pattern. This moves the counter up each repeat. Another difference here is that the _for loop_ runs its counter pattern **after** each repeat, which the _timed loop_ runs the counter pattern **during** each repeat.\n4. The code to repeat. In the _timed loop_ example we've placed this in an _if/else_ statement so that we can check whether to run the code or not in the same way that the for loop does.\n\n[/diagram_nums]\n\n### Other Approaches\n\nThe example offered above is the closest match to how a _for loop_ works, but you have the freedom to structure your _timed loop_ however you like. Each of the following three examples will run the same four repetitions as the previous, but each one uses a **different exit condition**.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_1.png\" style=\"width: 30%; padding: 10px; float: left;\">\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_2.png\" style=\"width: 30%; padding: 10px; float: left;\">\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_3.png\" style=\"width: 30%; padding: 10px; float: left;\">\n",
  "position": 5
}