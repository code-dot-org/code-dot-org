{
  "key": "analog-sensors",
  "course_version_key": "2022",
  "course_offering_key": "self-paced-pl-csd-2021",
  "parent_reference_guide_key": "maker-toolkit",
  "display_name": "Analog Sensors",
  "content": "The buttons and toggle switch are considered _binary_ inputs, because they can only communicate one of two states (up/down for the buttons, open/closed for the switch). There exists a different class of inputs called _analog inputs_. Unlike the buttons and switch, these _analog inputs_ can communicate a range of values.\n\n## Light, Sound, and Temperature\n\nThe Circuit Playground has three basic analog sensors, each of which takes an analog input and converts it into a value that is usable by the computer.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp_sensors.png\" alt=\"analog sensors\" class=\"center\" style=\"width: 500px;\">\n\n[diagram_nums]\n\n1. The _Light Sensor_ (represented in code as `lightSensor`) is used to measure the amount of ambient light. When it is completely dark, `lightSensor.value` will read as 0, and when it is fully bright it will read 1023.\n2. The _Temperature Sensor_ (represented in code as `tempSensor`) measures the temperature. Instead of providing a raw value (like the other two sensors do), this sensor takes advantage of the fact the we already have commonly understood ways to convert temperature into a computable value. The `tempSensor.F` and `tempSensor.C` provide the temperature reading in either Fahrenheit or Celsius, respectively.\n3. The _Sound Sensor_ (represented in code as `soundSensor`) is used to measure noise. It's important to note that this is _not_ really a microphone; don't expect to record sound with the sound sensor, it's only able to measure the volume of sound it detects. Like the _Light Sensor_, this provides a value ranging from 0 to 1023.\n\n[/diagram_nums]\n\n## Reading Sensor Data\n\nThe sound and light sensors each have a property called _value_ that allows you to read the current input value of a sensor (such as with `soundSensor.value`). If the full input range of 0-1023 doesn't meet the needs of your program, you can change the range of numbers returned using the _setScale()_ method. For example, `soundSensor.setScale(-50, 50)` will change the range of the sound sensor so that the lowest number is -50 and the highest is 50. This doesn't apply to the temperature sensor, which has two properties, _F_ and _C_ that report the temperature in a format that is both computable and human readable.\n\n## Sensor Sensitivity\n\nThe sensors on your boards are relatively blunt instruments. While more expensive and consistent sensors exist for applications that require high fidelity values (such as medical or scientific tools), these sensors just provide a rough approximation.\n\nYou may find that your programs work a bit differently across different boards, because the sensors on each board are giving different readings. One way to account for this is to write code that allows you _calibrate_ your sensors for different boards. If your app has code that should be run if the sensor reading goes above a certain value, consider making that value a variable that can be changed from the user interface. This way the user can modify the variable so that it works best with their board.",
  "position": 3
}