{
  "key": "two-dimensional-arrays",
  "course_version_key": "2023",
  "course_offering_key": "csa",
  "parent_reference_guide_key": "data-structures",
  "display_name": "Two-Dimensional (2D) Arrays",
  "content": "A two-dimensional array is a data structure in Java that is an array of arrays. Each element in the array is an array itself. Generally, a two-dimensional array is referred to be columns and rows\n\n###Initializing a Two-Dimensional Array\n\n- `int[][] myArray = new int [3][4];` - This initializes a 2D array with 3 rows and 4 columns.\n\n- The  `new` keyword is used to allocate memory space for a new 2D array.\n\n- Using an initializer list: `int[][] myArray = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };`\n\nRows are the elements in an array that it can store horizontally. row size equal to 2 will create 2 rows. Columns are the elements in an array that it can store vertically.\n\n## Examples\n### Adding Elements in a 2D Array\nTo add elements to a 2D array, we specify the index values for the row and column where we want to insert the element.\n```\nint[][] sampleArray = new int[2][2];\n\nsampleArray[0][0] = 0;\nsampleArray[0][1] = 1;\n\nsampleArray[1][0] = 2;\nsampleArray[1][1] = 3;\n```\n\n### Modifying Elements in a 2D Array\nTo modify an element in a 2D array, we specify the index values for the row and column we want to modify and assign the new value.\n```\nint[][] sampleArray = new int[2][2];\n\nsampleArray[0][1] = 10;\n```\n\n### Row-Major Traversal of a 2D Array \nRow-major order is one of two common ways to traverse through a 2D array. We access each element in a row before moving on to the next row.\n```\nint[][] numbers = { {0, 1, 2}, {3, 4, 5}, {6, 7, 8} };\n\nfor (int row = 0; row < numbers.length; row++) {\n   for (int col = 0; col < numbers[0].length; col++) {\n      System.out.print(numbers[row][col] + \" \");\n   }\n\n   System.out.println();\n}\n```\n\n**Output:**\n\n0 1 2\n\n3 4 5\n\n6 7 8 \n\n### Column-Major Traversal of a 2D Array \nColumn-major order is one of two common ways to traverse through a 2D array. We access each element in a column before moving on to the next column.\n```\nint[][] numbers = { {0, 1, 2}, {3, 4, 5}, {6, 7, 8} };\n\nfor (int col = 0; col < numbers[0].length; col++) {\n   for (int row = 0; row < numbers.length; row++) {\n      System.out.print(numbers[row][col] + \" \");\n   }\n\n   System.out.println();\n}\n```\n\n**Output:**\n\n0 3 6\n\n1 4 7\n\n2 5 8\n\n### Traversing 2D Arrays with Enhanced for Loops\nWhen traversing a 2D array with enhanced `for` loops, the outer loop refers to each row while the inner loop refers to each element in the current row.\n```\nint[][] numbers = { {0, 1, 2}, {3, 4, 5}, {6, 7, 8} };\n\nfor (int[] currentRow: numbers) {\n   for (int value: currentRow) {\n      System.out.println(value);\n   }\n}\n```\n\n## Syntax\n`int[][] test = new int[4][4];`",
  "position": 2
}