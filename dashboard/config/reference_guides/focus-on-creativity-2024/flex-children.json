{
  "key": "flex-children",
  "course_version_key": "2024",
  "course_offering_key": "focus-on-creativity",
  "parent_reference_guide_key": "css",
  "display_name": "Flexbox Children Properties",
  "content": "# Flexbox Children Properties\n\nTo have even more control over items in a container (\"children\"), you can use \"Children\" properties. \n\n## Children Properties\n\n![](https://images.code.org/f84e76aa47ab1b281c06bb502c72dab5-childProperties.png)\n\n## Things to Keep in Mind\n\n- Don't feel like you _have_ to use _all_ of the children properties. You can use as many or all of the children properties as needed! \n- The `align-self` property will override any alignment set with the main flex `align-items` property.\n- Flex items have a default `order` value of 0. Therefore, items with an integer value greater than 0 will be displayed _after_ any items that have not been given an explicit `order` value.\n   - Likewise, items given an `order` value of -1 will be displayed _before_ any items that have not been given explicit `order` values.\n\n## Additional Child Properties\n\n**Flex-basis**\n\nThis defines the default size of an element before the remaining space is distributed. Think of it as the \"ideal size\" of your item within the container. The default value for `flex-basis` is \"auto,\" which will set the item's size based on its width or height.\n\n**Flex**\n\nThis is the shorthand for `flex-grow`, `flex-shrink`, and `flex-basis` combined. The default is `flex: 0 1 auto;` which will set the `flex-grow` to 0, `flex-shrink` to 1, and `flex-basis` to auto. An easy way to think of this and remember the order is to imagine you are setting the \"max,\" \"min,\" and \"ideal size\".\n\nSome common uses of `flex` are:\n\n- `flex: 0 1 auto;`\n   - This will make the item **inflexible** when there is some free space left in the container.\n   - This will allow the elements to **shrink to their minimum size** when there is not enough space in the container.\n   - This will size the items based on their content.\n- `flex: 1 1 auto;`\n   - This will make the items **absorb** any extra space left in the container (\"grow\").\n   - This will allow the elements to **shrink to their minimum size** when there is not enough space in the container.\n   - This will size the items based on their content.\n- `flex: 0 0 auto;`\n   - This will make the items **inflexible** when there is some free space left in the container.\n   - This will **not allow the elements to shrink** even in an overflow situation.\n   - This will size the items based on their content.\n\nTo learn how to use the Main Flexbox Properties to control the alignment and layout of items in the container, see the Flexbox Parent Properties page. \n\n",
  "position": 7
}