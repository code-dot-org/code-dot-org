{
  "key": "startWebRequest",
  "name": "startWebRequest",
  "category": "Data",
  "category_key": "data",
  "content": "[name]\n\n## startWebRequest(url, callback)\n\n[/name]\n\n[category]\n\nCategory: Data\n\n[/category]\n\n[description]\n\n[short_description]\n\nRequests data from the internet and executes code when the request is complete.\n\n[/short_description]\n\nYour apps are not limited to data they collect and generate. Many web sites make data available for your apps to access. *startWebRequest()* should be used with the URL of web services that are designed to be called in that way.\n\nThe callback function will be passed three parameters:\n\n- The status of the request (completed or failed), using [HTTP status codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Response_codes).\n- The type of data returned by the service (text, image etc.).\n- The data itself in JSON format.\n\n[/description]\n\n### Examples\n____________________________________________________\n\n[example]\n\n**Example: Print the name and population of every country**\n\n```\nstartWebRequest(\"https://restcountries.eu/rest/v2/all?fields=name;population\", function(status, type, content) {\n  var jsonContent = JSON.parse(content);\n  for(var i = 0; i< jsonContent.length; i++){\n    console.log(jsonContent[i]);\n  }  \n});\n\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: This simple example lets users type in a number and returns a random fun fact about the number.**\n\n```\ntextInput(\"numberInput\", \"\");\nsetProperty(\"numberInput\",\"placeholder\",\"Type a number\");\ntextLabel(\"factOutput\", \"\");\nbutton(\"newInput\", \"Get fact!\");\n\nonEvent(\"numberInput\", \"change\", function() {\n  var number = getNumber(\"numberInput\");\n  var url = \"http://numbersapi.com/\" + number;\n  \n\n  startWebRequest(url, function(status, type, content) {\n    if(status == 200) {\n      setText(\"factOutput\", content);\n    }\n  });\n});\n```\n\n[/example]\n\n____________________________________________________\n\n[syntax]\n\n### Syntax\n\n```\nstartWebRequest(url, function(status, type, content) {\n  Code to execute\n});\n```\n\n[/syntax]\n\n[parameters]\n\n### Parameters\n\n| Name  | Type | Required? | Description |\n|-----------------|------|-----------|-------------|\n| url | string | Yes | The web address of a service that returns data.  |\n| callback | function | Yes | A function that is asynchronously called when the call to startWebRequest() is finished. Three paramters are passed to this function.  |\n\n[/parameters]\n\n[returns]\n\n### Returns\nWhen startWebRequest() is finished executing, the callback function is automatically called.\n\n[/returns]\n\n[tips]\n\n### Tips\n- startWebRequest() has a callback because it is accessing an external web service and therefore will not finish immediately.\n- The callback function can be inline, or separately defined in your app and called from startWebRequest().\n- Do not put functions inside a loop that contain asynchronous code, like startWebRequest(). The loop will not wait for the callback function to complete.\n- In order to write code that reads the content of the response returned by the service, we need to know the format of the response. This will often be documented online by the service, in the above case [Yahoo Weather](https://developer.yahoo.com/weather/). \n- You will also need to use the [JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) function, which can be used to transform the string of JSON into an object that we can use in our code.\n\n[/tips]\n\n### Allowed hostnames\nFor security reasons, only URLs with certain hostnames can be accessed using startWebRequest. Currently, the hostname must end in one of the following:\n\n##### Entertainment\n\n - [api.themoviedb.org](https://developers.themoviedb.org/3/getting-started/introduction) - Data on movies, tv shows, and actors\n - [api.spotify.com](https://developer.spotify.com/documentation/web-api/quick-start/) - Retrieve Spotify content such as album data and playlists\n - [swapi.dev](https://swapi.dev/documentation) - Star Wars data from the films\n\n##### Finance \n\n - [api.coinlayer.com](https://coinlayer.com/documentation) - Exchange rate data for more than 385 cryptocurrencies in real-time \n - [api.coinmarketcap.com](https://coinmarketcap.com/api/documentation/v1/) - Market cap rankings, charts, and more \n - [api.exchangeratesapi.io](https://exchangeratesapi.io/documentation/) - Currency exchange rates for 168 world currencies and precious metals \n - [cryptonator.com](https://www.cryptonator.com/api/) - Volume of cryptocurrency exchange rates data covering 300+ cryptocurrencies across 16 exchanges \n - [quandl.com](https://docs.quandl.com/) -  Financial, economic and alternative datasets for investing insights \n\n##### Fun and Games\n\n - [api.blizzard.com](https://develop.battle.net/) - Blizzard gaming data  \n - [api.football-data.org](https://www.football- - data.org/documentation/quickstart) - Provides football data and statistics including scores, fixtures, schedules, league tables, etc. \n - [api.nookipedia.com](https://api.nookipedia.com/) - Animal Crossing data from the Nookipedia wiki  \n - [api.mojang.com](https://c4k3.github.io/wiki.vg/Mojang_API.html) - Minecraft game data  \n - [api.scryfall.com](https://scryfall.com/docs/api) - Magic: The Gathering card data  \n - [opentdb.com](https://opentdb.com/api_config.php) - Trivia question database  \n - [pokeapi.co](https://pokeapi.co/docs/v2) - PokÃ©mon data including moves, abilities, types and more  \n - [roblox.com](https://api.roblox.com/docs?useConsolidatedPage=true) - Roblox game data \n - [runescape.com](https://runescape.wiki/w/Application_programming_interface) - RuneScape game data  \n - [sessionserver.mojang.com](https://wiki.vg/Mojang_API) - Minecraft session data \n - [stats.minecraftservers.org](https://minecraftservers.org/stats) - Minecraft server data  \n - [textures.minecraft.net](https://wiki.vg/Mojang_API) - Minecraft textures data  \n - [thecatapi.com](https://docs.thecatapi.com) - Cat photos  \n - [thedogapi.com](https://docs.thedogapi.com) - Dog photos  \n\n##### Local Government \n\n - [api.energidataservice.dk](https://www.energidataservice.dk/guides/api-guides) - Data about the Danish energy system such as CO2 emissions, consumption and production data  \n - [data.austintexas.gov](https://data.austintexas.gov/) - Austin, Texas city government data on transportation, health, and more \n - [data.cityofchicago.org](https://data.cityofchicago.org/) - Chicago, Illinois city government data on administration, education, and more  \n - [data.gv.at](https://www.data.gv.at/) - Austrian government data  \n - [rejseplanen.dk](https://help.rejseplanen.dk/hc/da/articles/214174465-Rejseplanens-API) - Denmark public transport and traffic data   \n - [theunitedstates.io](https://theunitedstates.io) - United States government data  \n - [Transitchicago.com](https://www.transitchicago.com/developers/) - Chicago transit train tracking, customer alerts, and more  \n\n##### Math\n\n - [numbersapi.com](http://numbersapi.com/) - Interesting facts about numbers and dates  \n - [qrng.anu.edu.au](https://qrng.anu.edu.au/contact/api-documentation/) - Random numbers in many formats  \n - [random.org](https://api.random.org/json-rpc/4/basic) - Random number generation  \n\n##### Places\n\n - [api.foursquare.com](https://developer.foursquare.com/docs/places-api/) - Points of interest data  \n - [api.opencagedata.com](https://opencagedata.com/api) - Convert coordinates to and from places  \n - [api.openrouteservice.org](https://openrouteservice.org/services/) - Directions, points of interest, and more\n - [api.zippopotam.us](http://www.zippopotam.us/) - Postal codes and zip codes for over 60 countries  \n - [distanza.org](https://www.distanza.org/api.xhtml) - Distance, airport, and other geo-related content\n - [restcountries.eu](http://restcountries.eu/) - Country information including language, currency and more \n - [worldclockapi.com](http://worldclockapi.com) - Time zones around the world  \n\n##### Space\n\n - [api.nasa.gov](https://api.nasa.gov/) - NASA content including earth satellite imagery, Mars weather and more  \n - [api.open-notify.org](http://api.open-notify.org/) - Provides the current ISS location and number of people in space \n - [api.spacexdata.com](https://github.com/r-spacex/SpaceX-API/tree/master/docs/v4) - Launch, landpad, crew and other SpaceX data  \n - [data.nasa.gov](https://data.nasa.gov/stories/s/gk8h-th3y) - Open data sets provided by NASA  \n - [hubblesite.org](http://hubblesite.org/api/documentation) - Hubble telescope news and more \n - [images-api.nasa.gov](https://images.nasa.gov/docs/images.nasa.gov_api_docs.pdf) - Images from NASA   \n\n##### Tools and Integrations\n\n - [api.duckduckgo.com](https://api.duckduckgo.com/api) - Instant Answer API gives you free access to many of our search query answers\n - [apex.oracle.com](https://docs.oracle.com/en/database/oracle/application-express/20.2/aeapi/preface.html#GUID-5AE2CC45-D209-4292-AED5-3B7D86D35634) - Allows querying of sql databases using Oracle Application Express \n - [api.github.com](https://docs.github.com/en/rest) - GitHub data  \n - [dweet.io](https://dweet.io/ ) - Messaging and alerts for IOT devices \n - [io.adafruit.com](https://io.adafruit.com/api/docs/#adafruit-io-http-api) - Adafruit IO data \n - [enclout.com](https://www.enclout.com/) - Microsoft Excel and Google Sheets data retrieval \n - [maker.ifttt.com](https://ifttt.com/maker_webhooks ) - Integrations for DIY projects \n - [googleapis.com](https://developers.google.com/apis-explorer) - Allow communication with Google Services  \n - [pastebin.com](https://pastebin.com/doc_api) - Store online text \n - [spreadsheets.google.com](https://developers.google.com/sheets/api) - Read, write, and format data in Sheets   \n - [api.rebrandly.com](https://developers.rebrandly.com/docs/get-started) - Manage short URLs on Rebrandly     \n\n##### Weather and Climate\n\n - [api.weather.gov](https://www.weather.gov/documentation/services-web-api) - Weather forecast and alerts from the US National Weather Service  \n - [api.openweathermap.org](https://openweathermap.org/appid) - Current weather, historical weather, and forecast data \n - [api.pegelalarm.at](https://pegelalarm.at/api_and_data.php) - Current, historical, and forecasted water level data that can be used for flood alerting  \n - [api.waqi.info](https://aqicn.org/api/) - Air quality data  \n - [dataservice.accuweather.com](https://developer.accuweather.com/) - Weather API endpoints  \n - [noaa.gov](https://www.ncdc.noaa.gov/cdo-web/webservices/v2) - Weather and climate data  \n\n##### Words and Texts\n\n - [api.datamuse.com](https://www.datamuse.com/api/) - Word-finding query engine \n - [api.uclassify.com](https://www.uclassify.com/docs/restapi) - Machine learning web service to create and use text classifiers  \n - [bible-api.com](http://bible-api.com/) - Bible verses and passages  \n\n##### Other\n\n - [api.randomuser.me](https://randomuser.me/documentation) - Provides randomly generated users with details such as name, address, and more  \n - [api.si.edu](https://edan.si.edu/openaccess/apidocs/) - Smithsonian Institute Open Access Media  \n - [api.thingspeak.com](https://www.mathworks.com/help/thingspeak/rest-api.html) - Analyze live data streams  \n - [covidtracking.com](https://covidtracking.com/data/api) - Coronavirus statistics \n - [myschoolapp.com](https://docs.blackbaud.com/on-api-docs/docs/basics) - School specific data   \n - [pixabay.com](https://pixabay.com/api/docs/) - Retrieve photos and videos  \n - [wikipedia.org](https://www.mediawiki.org/wiki/Wikimedia_REST_API) - Wikipedia content and data  \n - [vpic.nhtsa.dot.gov](https://vpic.nhtsa.dot.gov/api/ ) - Vehicle manufacturer data, VIN decoding, and more \n\nWant to use a URL that's not currently allowed? Let us know at [support@code.org](mailto:support@code.org)\n\n[bug]\n\nFound a bug in the documentation? Let us know at documentation@code.org\n\n[/bug]",
  "short_description": "\nstartWebRequest(url, callback)\nCategory: Data",
  "syntax": "startWebRequest(url, callback)"
}