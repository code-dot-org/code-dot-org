{
  "key": "setTimeout",
  "name": "setTimeout",
  "category": "Control",
  "category_key": "control",
  "content": "[name]\n\n## setTimeout(callback, ms)\n\n[/name]\n\n[category]\n\nCategory: Control\n\n[/category]\n\n[description]\n\n[short_description]\n\nSets a timer and executes code when that number of milliseconds has elapsed.\n\n[/short_description]\n\nSome apps need code to be executed once after a certain amount of time has elapsed, like a bank logon is disabled if you take to long to enter your password. Other code in your app can be executed while waiting for the timeout interval to end. *setTimeout()* returns a numeric value that can be used with [clearTimeout(timeout)](/docs/applab/clearTimeout) to prevent the execution of the callback function.\n\n[/description]\n\n### Examples\n____________________________________________________\n\n[example]\n\n```\nsetTimeout(function() {\n  console.log(\"1000 milliseconds have elapsed\");\n}, 1000);\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Pause between Moves** Use the timeout function to make the turtle pause between two moves.\n\n```\n// Use the timeout function to make the turtle pause between two moves.\nmoveForward(50);\nsetTimeout(function() {\n  moveForward(100);\n}, 2000);\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Pause between Moves v2** Use the timeout function to make the turtle pause between two moves. Note how the turnRight() does not wait for the timeout.\n\n```\n// Use the timeout function to make the turtle pause between two moves. Note how the turnRight() does not wait for the timeout.\nmoveForward(50);\nsetTimeout(function() {\n  moveForward(100);\n}, 2000);\nturnRight(90);\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Click Speed** Count the number of clicks of a button in 10 seconds.\n\n```\n//  Count the number of clicks of a button in 10 seconds.\ntextLabel(\"instructions\", \"Click the button as many times as possible in 10 seconds\");\nbutton(\"gameButton\", \"Click me!\");\ntextLabel(\"results\", \"\");\nvar counter = 0;\nsetTimeout(function() {\n  hideElement(\"gameButton\");\n  console.log(\"10000 milliseconds have elapsed\");\n}, 10000);\nonEvent(\"gameButton\", \"click\", function(){\n  counter = counter + 1;\n  setText(\"results\", \"You have clicked \" + counter + \" times.\");\n});\n```\n\n[/example]\n\n____________________________________________________\n\n[parameters]\n\n### Parameters\n\n| Name  | Type | Required? | Description |\n|-----------------|------|-----------|-------------|\n| callback | function | Yes | A function to execute when the timeout interval has completed.  |\n| ms | number | Yes | The number of milliseconds to wait before executing the function.  |\n\n[/parameters]\n\n[returns]\n\n### Returns\nA numeric interval timer ID, which can be used to cancel the timer before it executes.\n\n[/returns]\n\n[tips]\n\n### Tips\n- Use the [clearTimeout(timeout)](/docs/applab/clearTimeout) function to cancel the execution of code scheduled using setTimeout().\n- Do not put functions inside a loop that contain timers, like setTimeout(). The loop will not wait for the timer to complete.\n\n[/tips]\n",
  "parameters": [
    "callback",
    "ms"
  ],
  "short_description": "\nsetTimeout(callback, ms)\nCategory: Control",
  "syntax": "setTimeout(callback, ms);"
}