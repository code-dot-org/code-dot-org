{
  "key": "drawChartFromRecords",
  "name": "drawChartFromRecords",
  "category": "Data",
  "category_key": "data",
  "content": "[name]\n\n## drawChartFromRecords(chartId, chartType, tableName, columns, *options*, *callback*)\n\n[/name]\n\n[category]\n\nCategory: Data\n\n[/category]\n\n[description]\n\n[short_description]\n\nUsing App Lab's table data storage, draws a chart of the provided *chartType* in screen element *chartId* using data from *columns* retrieved from the *tableName*.\n\n[/short_description]\n\nData drives the functionality of modern apps, and being able to analyze and learn something from that data is a valuable skill. Basic charts are used to see patterns and relataionships in data that you cannot see by just looking at the data in tables.\n\n**First time using App Lab table data storage?** Read a short overview of what it is and how to use it [here](/docs/concepts/tableDataStorage/).\n\nA chart screen element with the element ID of *chartId* must be added to your app in design mode. The available chart types are \"bar\", \"line\", \"pie\" and \"scatter\". *columns* is an array of strings for the column names from the *tableName* to use in the chart.\n\n**Bar Chart** - The first element in the columns array needs to be the name of a table column containing strings (or unique numbers like years), which specify the names of the bars on the x-axis. The second element (and subsequent elements) in the columns array need to be the name of a table column containing numbers, which determines the height if each bar with a certain color.\n\n**Line Chart** - The first element in the columns array needs to be the name of a table column containing strings (or unique numbers like years), which specify the names of the values on the x-axis. The second element (and subsequent elements) in the columns array need to be the name of a table column containing numbers, which determines the y-axis values for each dot to connect with a certain color.\n\n**Pie Chart** - The first element in the columns array needs to be the name of a table column containing strings, which specify the names of the sections of the pie chart. The second element in the columns array needs to be the name of a table column containing numbers, which determines the percentage amount of the pie chart it gets.\n\n**Scatter Chart** - The first element in the columns array needs to be the name of a table column containing strings (or unique numbers like years), which specify the names of the values on the x-axis. The second element (and subsequent elements) in the columns array need to be the name of a table column containing numbers, which determines the y-axis values for each dot with a certain color.\n\nTo View your app's table data, click 'View data' in App Lab and click the table name you want to view.\n\nThis block makes use of the [Google Charts API](https://developers.google.com/chart/). If you would like to explore more options available for customizing the way your chart looks (primarily by changing inputs in the options parameter, we highly recommend you consult that site.\n\n[/description]\n\n### Examples\n____________________________________________________\n\n[example]\n\n```\ntextLabel(\"foodChoiceLabel\", \"Vote for your favorite food:\");\ndropdown(\"foodChoices\", \"\",\"hotdogs\", \"pasta\", \"pizza\", \"tacos\");\nbutton(\"vote\", \"submit\");\nonEvent(\"vote\", \"click\", function() {\n  var choice=getText(\"foodChoices\");\n  if (choice!==\"\") {\n    readRecords(\"foodVotes\", {name:choice}, function(records) {\n      if (records.length===0) {\n        createRecord(\"foodVotes\", {name:choice, count:1}, function() { \n        });\n      }\n      else {\n        var newCount=records[0].count+1;\n        updateRecord(\"foodVotes\", {id:records[0].id, name:choice, count:newCount}, function() {\n        });\n      }\n    });\n  } \n  setText(\"foodChoices\",\"\");\n});\nbutton(\"drawChart\", \"Draw Chart\");\nonEvent(\"drawChart\", \"click\", function() {\n  drawChartFromRecords(\"chart1\", \"bar\", \"foodVotes\", [\"name\", \"count\"]);\n});\n```\n<img src='https://images.code.org/ac629eef7483c160555767570be6c1b3-image-1453117024100.jpg'>\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Sales and Price** Display both the count sold and price to see if a relationship exists. Includes use of 'options' parameter on chart.\n\n```\n// Display both the count sold and price to see if a relationship exists. Includes use of 'options' parameter on chart.\ntextLabel(\"foodChoiceLabel\", \"Vote for your favorite food:\");\ndropdown(\"foodChoices\", \"\",\"hotdogs $1.50\", \"pasta $2.00\", \"pizza $4.50\", \"tacos $3.00\");\nvar prices = [1.50, 2.00, 4.50, 3.00];\nvar foodPrice=0;\nbutton(\"vote\", \"submit\");\nonEvent(\"vote\", \"click\", function() {\n  var choice=getText(\"foodChoices\");\n  if (choice!==\"\") {\n    if (choice==\"hotdogs $1.50\") foodPrice=prices[0];\n    else if (choice==\"pasta $2.00\") foodPrice=prices[1];\n    else if (choice==\"pizza $4.50\") foodPrice=prices[2];\n    else foodPrice=prices[3];\n\n    readRecords(\"foodVotesPrice\", {name:choice}, function(records) {\n      if (records.length===0) {\n        createRecord(\"foodVotesPrice\", {name:choice, count:1, price:foodPrice}, function() { \n        });\n      }\n      else {\n        var newCount=records[0].count+1;\n        updateRecord(\"foodVotesPrice\", {id:((records[0]).id), name:choice, count:newCount, price:foodPrice}, function() {\n        });\n      }\n    });\n  } \n  setText(\"foodChoices\",\"\");\n});\nbutton(\"drawChart\", \"Draw Chart\");\nonEvent(\"drawChart\", \"click\", function() {\n  var myOptions={};\n  myOptions.bars=\"horizontal\";\n  myOptions.title=\"Sales and Prices\";\n  myOptions.colors=[\"blue\", \"green\"];\n  myOptions.legend={position: \"right\"}; // can be \"none\" to hide the legend\n  drawChartFromRecords(\"chart1\", \"bar\", \"foodVotesPrice\", [\"name\", \"count\", \"price\"], myOptions);\n});\n```\n\n[/example]\n\n____________________________________________________\n\n[syntax]\n\n### Syntax\n\n```\ndrawChartFromRecords(chartId, chartType, tableName, columns, options, callback);\n```\n\n[/syntax]\n\n[parameters]\n\n### Parameters\n\n| Name  | Type | Required? | Description |\n|-----------------|------|-----------|-------------|\n| chartId | string | Yes | The unique identifier for the chart screen element. Must begin with a letter, contain no spaces, and may contain letters, digits, - and _. |\n| chartType | string | Yes | \"bar\" or \"line\" or \"pie\" or \"scatter\" |\n| tableName | string | Yes | The name of the table to retrieve records from. |\n| columns | array of strings | Yes | The name of the columns from the table to retrieve records from and display on the chart. |\n| options | object | No | Display options for the chart. Either a JavaScript object variable or a JavaScript object defined using curly brace and colon notation (see example above). |\n| callback | function | No | The callback function that is asynchronously called when the call to drawChartFromRecords() is finished. |\n\n[/parameters]\n\n[returns]\n\n### Returns\nNo return. Displays chart.\n\n[/returns]\n\n[tips]\n\n### Tips\n- Do not put functions inside a loop that contain asynchronous code, like *drawChartFromRecords()*. The loop will not wait for the callback function to complete.\n\n[/tips]\n",
  "parameters": [
    "chartId",
    "chartType",
    "tableName",
    "columns"
  ],
  "short_description": "\ndrawChartFromRecords(chartId, chartType, tableName, columns, options, callback)\nCategory: Data",
  "syntax": "drawChartFromRecords(chartId, chartType, tableName, columns)"
}