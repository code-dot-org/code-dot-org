{
  "key": "timedLoop",
  "name": "timedLoop()",
  "category": "Control",
  "category_key": "control",
  "content": "Executes the callback function code every time a certain number of milliseconds has elapsed, until stopped using `stopTimedLoop()`.\n\nSome apps need to repeat code using a timed delay, like the mole appearing every 5 seconds or so in \"Whack a Mole\". Other code in your app can be executed while waiting for the next repetition of the loop to start. You can either let the callback function keep running indefinitely until the app is stopped, or use the `stopTimedLoop()` command to stop all running timed loops. For more advance usage, you can assign the return value of `timedLoop()` to a variable, which you can then pass to `stopTimedLoop()` in order to stop only a specific timed loop, ignoring the rest.\n",
  "examples": [
    {
      "name": "Ten Timed Moves",
      "description": "Make 10 random turtle moves in half second intervals.",
      "code": "```\n// Make 10 random turtle moves in half second intervals. \r\nvar count=0;\r\ntimedLoop(500, function(){\r\n  var x = randomNumber(-50, 50);\r\n  var y = randomNumber(-50, 50);\r\n  console.log(\"Move \" + x + \" horizontally and \" + y + \" vertically.\");\r\n  move(x, y);\r\n  count=count+1;\r\n  if (count==10) {\r\n  \tstopTimedLoop();\r\n  }\r\n});\n```",
      "app": "",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    },
    {
      "name": "Seconds Elapsed",
      "description": "Count the number of seconds elapsed since the program started running.",
      "code": "```\nvar seconds = 0;\r\ntimedLoop(1000, function() {\r\n  seconds = seconds + 1;\r\n  console.log(seconds + \" seconds have elapsed\");\r\n});\n```",
      "app": "",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    }
  ],
  "palette_params": [
    {
      "name": "ms",
      "type": "Number",
      "required": true,
      "description": "The number of milliseconds to wait before each repetition of the loop."
    },
    {
      "name": "callback",
      "type": "Function",
      "required": true,
      "description": "A function to execute each time the loop is repeated."
    }
  ],
  "return_value": "Returns a timed loop object which can be passed to `stopTimedLoop()` to stop only a specific loop.",
  "short_description": "Executes the callback function code every time a certain number of milliseconds has elapsed, until stopped using stopTimedLoop().",
  "syntax": "timedLoop(ms, callback)",
  "tips": "- Use the `stopTimedLoop()` function to end the timed loop.\r\n- Do not put functions inside a loop that contain timers, like further calls to `timedLoop()`. The loop will not wait for the timer to complete.\r\n- `timedLoop()` is built on top of the core JavaScript function `setInterval()`"
}