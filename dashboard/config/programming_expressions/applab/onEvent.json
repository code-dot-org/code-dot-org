{
  "key": "onEvent",
  "name": "onEvent",
  "category": "UI controls",
  "category_key": "ui_controls",
  "content": "Interactive apps need both UI elements `button`, `textInput`, `textLabel`, `dropdown`, `checkbox`, `radioButton`, `image`, and event handlers for those UI elements and each type of user interaction needed. The UI element, with unique id, must exist before the onEvent function can be used.\n\n| Event Type  | Description                   |\n|-------|-------------------------------|\n| click | The user clicked on the specified element.  |\n| change | The specified element has been modified and enter has been pressed.  |\n| keyup | The user released a keyboard key while the mouse was over the element.  |\n| keydown | The user pressed a keyboard key while the mouse was over the element.  |\n| keypress | The user pressed a keyboard key that produces a character while the mouse was over the element.  |\n| mousemove | The user moved the mouse cursor while the cursor was over the specified element. |\n| mousedown | The user pressed the mouse cursor over the specified element. |\n| mouseup | The user released the mouse cursor over the specified element. |\n| mouseover | The user moved the mouse cursor over the specified element. |\n| mouseout | The user moved the mouse cursor from over the specified element to away from the specified element. |\n| input | The specified element has been modified.  |",
  "examples": [
    {
      "name": "",
      "description": "",
      "code": "```\n// Move the turtle forward on every click of the button.\r\n\r\nbutton(\"forward\", \"Move Forward\");\r\nonEvent(\"forward\", \"click\", function(event) {\r\n  moveForward();\r\n});\n```",
      "app": "",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    },
    {
      "name": "Shrink and Grow",
      "description": "Grow an image on mouseover, back to normal size on mouseout.",
      "code": "```\n// Grow an image on mouseover,\r\n// back to normal size on mouseout.\r\n\r\nimage(\"logo\", \"https://code.org/images/logo.png\");\r\nsetPosition(\"logo\", 160, 240, 32, 32);\r\n\r\nonEvent(\"logo\", \"mouseover\", function(event){\r\n  setSize(\"logo\", 48, 48);\r\n});\r\n\r\nonEvent(\"logo\", \"mouseout\", function(event){\r\n  setSize(\"logo\", 32, 32);\r\n});\n```",
      "app": "https://studio.code.org/projects/applab/1b8adMcaLlyk1IyeD9jXow/view",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    },
    {
      "name": "Event Details",
      "description": "You can dump all the details of the *event* parameter to the console to see what properties are available to use.",
      "code": "```\n// Show the details of the callback function event parameter.\r\nbutton(\"data\", \"Show Me Event Details\");\r\nonEvent(\"data\", \"click\", function(event) {\r\n  console.log(JSON.stringify(event));\r\n});\n```",
      "app": "",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    },
    {
      "name": "The Event parameter",
      "description": "The *event* object carries many details about the event that occurred.  It is loaded with properties about the mouse for mouse events, and the keyboard for keyboard events.",
      "code": "```\n// Show the x, y coordinates of the mouse as it moves around the screen\r\nonEvent(\"screen1\", \"mousemove\", function(event) {\r\n  console.log(\"x = \"+event.x+\" y=\"+event.y);\r\n});\n```",
      "app": "",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    },
    {
      "name": "Two Different Types",
      "description": "Move the turtle forward on each click or backward on each key press.",
      "code": "```\n// Move the turtle forward on each click or backward on each key press.\r\n\r\nbutton(\"move\", \"Move\");\r\nonEvent(\"move\", \"click\", function(event) {\r\n  moveForward();\r\n});\r\nonEvent(\"move\", \"keypress\", function(event) {\r\n  moveBackward();\r\n});\n```",
      "app": "",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    },
    {
      "name": "Where do you want it?",
      "description": "Move an image to the coordinates specified in a textboxes. Note that we declare one function that we use as callback for two different event handlers.",
      "code": "```\n// Move an image to the coordinates specified in a textboxes.\r\n// Note that we declare one function that we use as callback for two different event handlers.\r\n\r\ntextLabel(\"xLabel\", \"X coordinate:\");\r\ntextInput(\"xCoordinate\", 160);\r\ntextLabel(\"yLabel\", \"Y coordinate:\");\r\ntextInput(\"yCoordinate\", 240);\r\nimage(\"logo\", \"https://code.org/images/logo.png\");\r\nsetPosition(\"logo\", 160, 240, 32, 32);\r\n\r\nonEvent(\"xCoordinate\", \"change\", moveFromText);\r\nonEvent(\"yCoordinate\", \"change\", moveFromText);\r\n\r\n// Define a funtion that moves the image based on the text box values\r\nfunction moveFromText() { \r\n  var x = getText(\"xCoordinate\");\r\n  var y = getText(\"yCoordinate\");\r\n  setPosition(\"logo\", x, y);\r\n}\n```",
      "app": "",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    }
  ],
  "palette_params": [
    {
      "name": "type",
      "type": "String",
      "required": true,
      "description": "The type of event to respond to. There are many events that can be used with an event handler to respond to all kinds of actions that a user can take. In block mode you can choose from a dropdown list of more than 10, but some of the most commonly used are shown above."
    },
    {
      "name": "id",
      "type": "String",
      "required": true,
      "description": "The ID of the UI control to which this event handler applies. Must begin with a letter, contain no spaces, and may contain letters, digits, - and _."
    },
    {
      "name": "callback",
      "type": "Function",
      "required": true,
      "description": "The callback function executed in response to an event for the matching UI element *id* of the matching *type*. The function can be inline, or separately defined in your app and called from onEvent()."
    }
  ],
  "parameters": [
    "id",
    "type",
    "callback"
  ],
  "return_value": "No return value, callback function executed.",
  "short_description": "Interactive apps need both UI elements button, textInput, textLabel, dropdown, checkbox, radioButton, image, and event handlers for those UI elements and each type of user interaction needed. The UI element, with unique id, must exist before the onEvent function can be used.",
  "syntax": "onEvent(id, type, callback)",
  "tips": "- The UI element must be defined in your code before the matching `onEvent()` event handler.\r\n- The callback function receives an event object as its parameter, which can be used to gain more information about the event. You can ignore the App Lab warning *event is defined but not called in your program*.\r\n- The preferred placement in your code is screen elements at the top, event handlers in middle, other code/functions at end."
}