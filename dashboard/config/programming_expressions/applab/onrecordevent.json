{
  "key": "onRecordEvent",
  "name": "onRecordEvent",
  "category": "Data",
  "category_key": "data",
  "content": "Executes the *callback* function code when a create, update, or delete event occurs (remotely, for any reason) inside the specified table. In other words, *onRecordEvent* is a way for any and all instances of an app to be notified in real time if any changes to the underlying table are made.  There are three possible values for *eventType*:\n\n**create**: A record has been added to the specified table.\n\n**update**: A record has been updated in the specified table.\n\n**delete**: A record has been deleted in the specified table.\n\nThe *eventType* is passed to the callback function. By default, the event will only fire if it occurred while the app was running.  If *includeAll* is set to true, however, a create event will also fire for each record that is already in the table.",
  "examples": [
    {
      "name": "Example: Update chart",
      "description": "Updates chart whenever any record is added, updated, or deleted from the data table.  Assumes a table named foodVotes and a chart named votesChart already exists. ",
      "code": "```\n// On any kind of change to the data table redraw the chart\nonRecordEvent(\"foodVotes\", function(record) {\n   drawChartFromRecords(\"votesChart\", \"bar\", \"foodVotes\", [\"name\", \"count\"]);\n});\n```"
    },
    {
      "name": "Example: Log events",
      "description": "Log any kind of event happening to the data table to the console by checking for the *eventType*.  Assumes a table named foodVotes already exists.",
      "code": "```\nonRecordEvent(\"foodVotes\", function(record, eventType) {\n  if (eventType == 'create') {\n    console.log('A record for the food ' + record.name + ' was created');\n  } else if (eventType == 'update') {\n    console.log('The record for the food ' + record.name + ' was updated');\n  } else if (eventType == 'delete') {\n    console.log('The record for the food ' + record.name + ' was deleted');\n  } \n});\n```"
    },
    {
      "name": "Example: Include All",
      "description": "Set the *includeAll* optional parameter to true to fire create events for existing records and print out info for records that have already been created.  Assumes a table named fav_foods already exists.",
      "code": "```\ntextLabel(\"heading\", \"Everyone's favorite foods:\");\nonRecordEvent(\"fav_foods\", function(record, eventType) {\n  if (eventType == 'create') {\n     write(record.name + \"'s favorite food is \" + record.food + \".\");\n  }\n}, true);\n```"
    }
  ],
  "palette_params": [
    {
      "name": "table",
      "type": "string",
      "required": true,
      "description": "The name of the table to which this event handler applies."
    },
    {
      "name": "callback",
      "type": "function",
      "required": true,
      "description": "The callback function executed in response to a create, update, or delete event in the specified table. This function should include two parameters for `record` and `eventType`"
    },
    {
      "name": "includeAll",
      "type": "boolean",
      "description": "Optional parameter that specifies whether a create event should also fire for each record that is already in the table. Defaults to false."
    }
  ],
  "parameters": [
    "table",
    "callback"
  ],
  "return_value": "No return value, callback function executed.",
  "short_description": "Executes the callback function code when a create, update, or delete event occurs",
  "syntax": "onRecordEvent(table, callback, includeAll);",
  "tips": "- Donâ€™t use multiple *onRecordEvent* functions to listen to the same table.  Otherwise you may hit a race condition and run into unexpected behavior."
}