{
  "key": "setScreen",
  "name": "setScreen",
  "category": "UI controls",
  "category_key": "ui_controls",
  "content": "Sets the screen to the given screenId.\n\nMost apps are not constructed with only one screen, but have multiple screens for the user to interact with. Maybe first a logon screen, then the screens for the app itself, ending with \"game over\" or \"thank you\" screen possibly including a \"play again\" option. Each screen has its own UI elements with corresponding event handlers.\n\n\n\n\n\n",
  "examples": [
    {
      "name": "",
      "description": "",
      "code": "```\n// Screen swap. screen2, textLabels and buttons were added in Design mode.\r\nonEvent(\"screen1button\", \"click\", function(event) {\r\n  setScreen(\"screen2\");\r\n});\r\nonEvent(\"screen2button\", \"click\", function(event) {\r\n  setScreen(\"screen1\");\r\n});\n```",
      "app": "https://studio.code.org/projects/applab/jUBYejbm7qG0IxzlZpxllA/embed",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    }
  ],
  "palette_params": [
    {
      "name": "screenId",
      "type": "string",
      "required": true,
      "description": "The unique identifier for the screen. Must begin with a letter, contain no spaces, and may contain letters, digits, - and _. "
    }
  ],
  "parameters": [
    "screenId"
  ],
  "return_value": "No return value. Modifies screen only.",
  "short_description": "Sets the screen to the given screenId.",
  "syntax": "setScreen(screenId)",
  "tips": "- The default screenId is \"screen1\".\n- It is important to use meaningful screen IDs, and meaningful anmd unique UI element IDs, so it is easy to tell which UI elements are on which screen."
}