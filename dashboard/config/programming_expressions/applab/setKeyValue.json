{
  "key": "setKeyValue",
  "name": "setKeyValue",
  "category": "Data",
  "category_key": "data",
  "content": "[name]\n\n## setKeyValue(key, value, callback)\n\n[/name]\n\n[category]\n\nCategory: Data\n\n[/category]\n\n[description]\n\n[short_description]\n\nStores a key/value pair in App Lab's key/value data storage, and calls the callback function when the action is finished.\n\n[/short_description]\n\nApp Lab's remote key/value data storage enables persistent data storage for an app. Consider a variable that is declared in an app such as *var highscore = 10;*. *highscore* will get recreated with a value of 10 every time the app loads. *setKeyValue* can be used to essentially store or update a variable in the cloud that the app can access across app restarts, or multiple people using the app on different devices. You can think of the *key* parameter as similar to the variable name (e.g. \"highscore\") and the *value* parameter as similar to the variable value (e.g. 10). When the key/value pair is saved, the callback function is asynchronously called. Use with [getKeyValue()](/docs/applab/getKeyValue/).\n\nData is only accessible to the app that created the table. To View your app's data, click 'View data' in App Lab and click \"view key/value pairs\".\n\n[/description]\n\n### Examples\n____________________________________________________\n\n[example]\n\n```\nsetKeyValue('highScore', 100, function(){\n  console.log(\"I execute asynchronously when key/value is stored.  Click View Data to see the data.\");\n});\nconsole.log(\"I execute immediately after\");\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n```\nsetKeyValue(\"highScore\", 100 , function () {\n  console.log(\"highScore stored\");\n  getKeyValue(\"highScore\", function (value) {\n    console.log(\"high score is: \" + value);\n  });\n});\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Save the Bigger** Checks whether the random number that was generated is bigger than the value stored in persistent key/value storage. If it is, then it updates the saved value.\n\n```\n// Checks whether the random number that was generated is bigger than the value stored in persistent key/value storage. If it is, then it updates the saved value.\nvar random = randomNumber(1, 100);\ngetKeyValue(\"biggestNum\", function (value) {\n  console.log(\"random: \" + random + \" biggestNumber: \" + value);\n  if ((value === undefined) || (random > value)) {\n    setKeyValue(\"biggestNum\", random, function () {\n      console.log(random + \" is bigger than \" + value + \". Updated biggestNumber\");\n    });\n  }\n});\n```\n\n[/example]\n\n____________________________________________________\n\n[syntax]\n\n### Syntax\n\n```\nsetKeyValue(key, value, function(){\n    //callback function code goes here\n  });\n```\n\n[/syntax]\n\n[parameters]\n\n### Parameters\n\n| Name  | Type | Required? | Description |\n|-----------------|------|-----------|-------------|\n| key | string | Yes | The name of the key to be stored.  |\n| value | string, number, array, or object | Yes | The data to be stored.  |\n| callback | function | No | A function that is asynchronously called when the call to setKeyValue is finished.  |\n\n[/parameters]\n\n[returns]\n\n### Returns\nWhen setKeyValue() is finished executing, the callback function is automatically called.\n\n[/returns]\n\n[tips]\n\n### Tips\n- setKeyValue() has a callback because it is accessing the remote data storage service and therefore will not finish immediately.\n- The callback function can be inline, or separately defined in your app and called from setKeyValue().\n- Do not put functions inside a loop that contain asynchronous code, like setKeyValue(). The loop will not wait for the callback function to complete.\n- Use with [getKeyValue()](/docs/applab/getKeyValue/)\n\n[/tips]\n\n[bug]\n\nFound a bug in the documentation? Let us know at documentation@code.org\n\n[/bug]",
  "parameters": [
    "key",
    "value",
    "callback"
  ],
  "short_description": "\nsetKeyValue(key, value, callback)\nCategory: Data",
  "syntax": "setKeyValue(key, value, callback)"
}