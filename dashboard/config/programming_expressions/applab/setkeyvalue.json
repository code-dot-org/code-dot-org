{
  "key": "setKeyValue",
  "name": "setKeyValue",
  "category": "Data",
  "category_key": "data",
  "content": "App Lab's remote key/value data storage enables persistent data storage for an app. Consider a variable that is declared in an app such as *var highscore = 10;*. *highscore* will get recreated with a value of 10 every time the app loads. *setKeyValue* can be used to essentially store or update a variable in the cloud that the app can access across app restarts, or multiple people using the app on different devices. You can think of the *key* parameter as similar to the variable name (e.g. \"highscore\") and the *value* parameter as similar to the variable value (e.g. 10). When the key/value pair is saved, the callback function is asynchronously called. Use with [getKeyValue()](/docs/applab/getKeyValue/).\n\nData is only accessible to the app that created the table. To View your app's data, click 'View data' in App Lab and click \"view key/value pairs\".",
  "examples": [
    {
      "name": "Example: Set Key Value",
      "code": "```\nsetKeyValue('highScore', 100, function(){\n  console.log(\"I execute asynchronously when key/value is stored.  Click View Data to see the data.\");\n});\nconsole.log(\"I execute immediately after\");\n```"
    },
    {
      "name": "Example: High Score",
      "code": "```\nsetKeyValue(\"highScore\", 100 , function () {\n  console.log(\"highScore stored\");\n  getKeyValue(\"highScore\", function (value) {\n    console.log(\"high score is: \" + value);\n  });\n});\n```"
    },
    {
      "name": "Example: Save the Bigger",
      "description": "Checks whether the random number that was generated is bigger than the value stored in persistent key/value storage. If it is, then it updates the saved value.",
      "code": "```\n// Checks whether the random number that was generated is bigger than the value stored in persistent key/value storage. If it is, then it updates the saved value.\nvar random = randomNumber(1, 100);\ngetKeyValue(\"biggestNum\", function (value) {\n  console.log(\"random: \" + random + \" biggestNumber: \" + value);\n  if ((value === undefined) || (random > value)) {\n    setKeyValue(\"biggestNum\", random, function () {\n      console.log(random + \" is bigger than \" + value + \". Updated biggestNumber\");\n    });\n  }\n});\n```"
    }
  ],
  "palette_params": [
    {
      "name": "key",
      "type": "string",
      "required": true,
      "description": "The name of the key to be stored."
    },
    {
      "name": "value",
      "type": "string, number, array, or object",
      "required": true,
      "description": "The data to be stored."
    },
    {
      "name": "callback",
      "type": "function",
      "description": "A function that is asynchronously called when the call to setKeyValue is finished."
    }
  ],
  "parameters": [
    "key",
    "value",
    "callback"
  ],
  "return_value": "When setKeyValue() is finished executing, the callback function is automatically called.",
  "short_description": "Stores a key/value pair in App Lab's key/value data storage, and calls the callback function when the action is finished.",
  "syntax": "setKeyValue(key, value, callback);",
  "tips": "- setKeyValue() has a callback because it is accessing the remote data storage service and therefore will not finish immediately.\n- The callback function can be inline, or separately defined in your app and called from setKeyValue().\n- Do not put functions inside a loop that contain asynchronous code, like setKeyValue(). The loop will not wait for the callback function to complete.\n- Use with [getKeyValue()](/docs/applab/getKeyValue/)"
}