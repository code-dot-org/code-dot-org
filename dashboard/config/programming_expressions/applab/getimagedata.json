{
  "key": "getImageData",
  "name": "getImageData",
  "category": "Canvas",
  "category_key": "canvas",
  "content": "[name]\n\n## getImageData(x, y, width, height)\n\n[/name]\n\n[category]\n\nCategory: Canvas\n\n[/category]\n\n[description]\n\n[short_description]\n\nGets an object representing the image data captured from the active canvas by the bounding rectangle that starts at *x*, *y*, with size *width*, and *height* pixels.\n\n[/short_description]\n\nOne advantage of using a canvas for apps containing images or drawing is that you can access the image data at the pixel level. This allows your app to process an image just like many image editing programs.\n\nThe object returned contains the following fields:\n\n- data - An array of pixel color values, four values for each pixel (red, green, blue, alpha/opacity).\n- width - The width of the image in pixels.\n- height - The height of the image in pixels.\n\n[/description]\n\n### Examples\n____________________________________________________\n\n[example]\n\n```\n// Output the object of a 5 pixel by 5 pixel image of a rectangle. \ncreateCanvas('canvas1');\nsetStrokeColor('red');\nrect(0,0,5,5);\nvar canvasData=getImageData(0, 0, 5, 5);\nconsole.log(canvasData);\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Duplicate** Copy the canvas image to a second canvas.\n\n```\n// Copy and canvas image to a second canvas. \ncreateCanvas('canvas1', 200, 200);\nsetFillColor(\"red\");\ncircle(100, 100, 50);\nvar canvasData=getImageData(0, 0, 200, 200);\ncreateCanvas('canvas2', 200, 200);\nsetPosition('canvas2', 0, 200);\nsetActiveCanvas('canvas2');\nputImageData(canvasData, 0, 0);\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Squish** Copy and canvas image, alter the image width, and output to a second canvas.\n\n```\n// Copy and canvas image, alter the image width, and output to a second canvas.\ncreateCanvas('canvas1', 200, 200);\nsetFillColor(\"red\");\ncircle(100, 100, 50);\nvar canvasData=getImageData(0, 0, 200, 200);\ncanvasData.width=400;\ncreateCanvas('canvas2', 200, 200);\nsetPosition('canvas2', 0, 200);\nsetActiveCanvas('canvas2');\nputImageData(canvasData, 0, 0);\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Seeing Red** Print the red value of a single pixel.\n\n```\n// Print the red value of a single pixel\ncreateCanvas('canvas1', 200, 200);\nsetFillColor(\"red\");\ncircle(100, 100, 50);\nvar canvasData=getImageData(0, 0, 200, 200);\nvar redValue = getRed(canvasData, 100, 100);\nconsole.log(redValue);\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Center Black** Change the red value of a single pixel to zero.\n\n```\n// Change the red value of a single pixel to zero.\ncreateCanvas('canvas1', 200, 200);\nsetFillColor(\"red\");\ncircle(100, 100, 50);\nvar canvasData=getImageData(0, 0, 200, 200);\nvar redValue = getRed(canvasData, 100, 100);\nconsole.log(redValue);\nsetRed(canvasData, 100, 100, 0);\nputImageData(canvasData, 0, 0);\nconsole.log(getRed(canvasData, 50, 50));\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Red Out** Remove all red from the canvas.\n\n```\n// Remove all red from the canvas.\ncreateCanvas('canvas1', 200, 200);\nsetFillColor(\"red\");\ncircle(100, 100, 50);\nvar canvasData=getImageData(0, 0, 200, 200);\nremoveRed(canvasData);\n\n// Removes red in every pixel from 'thisImageData' argument. Updates the image row by row.\nfunction removeRed(thisImageData){\n    for(var y=0; y < thisImageData.height; y++) {\n        for(var x=0; x < thisImageData.width; x++) {\n            setRed(thisImageData, x, y, 0);\n        }\n        putImageData(thisImageData, 0, 0);\n    }\n}\n```\n\n[/example]\n\n____________________________________________________\n\n[syntax]\n\n### Syntax\n\n```\ngetImageData(startX, startY, endX, endY);\n```\n\n[/syntax]\n\n[parameters]\n\n### Parameters\n\n| Name  | Type | Required? | Description |\n|-----------------|------|-----------|-------------|\n| x | number | Yes | The x position in pixels to start the capture.  |\n| y | number | Yes | The y position in pixels to start the capture.  |\n| width | number | Yes | The width of the bounding rectangle to capture the image data.  |\n| height | number | Yes | The height of the bounding rectangle to capture the image data.  |\n\n[/parameters]\n\n[returns]\n\n### Returns\nReturns an object representing the image data captured from the active canvas within the pixel range specified.\n\n[/returns]\n\n[tips]\n\n### Tips\n- A canvas element must exist before image data can be captured. Create a canvas element in Design mode first, or call [createCanvas()](/docs/applab/createCanvas) before calling getImageData().\n- Use this function with the get color functions: [getRed()](/docs/applab/getRed), [getGreen()](/docs/applab/getGreen), [getBlue()](/docs/applab/getBlue), and [getAlpha()](/docs/applab/getAlpha)\n- Use this function with the set color functions: [setRed()](/docs/applab/setRed), [setGreen()](/docs/applab/setGreen), [setBlue()](/docs/applab/setBlue), and [setAlpha()](/docs/applab/setAlpha)\n- You will have to use [putImageData()](/docs/applab/putImageData) to update the canvas with modified image data.\n\n[/tips]\n",
  "parameters": [
    "x",
    "y",
    "width",
    "height"
  ],
  "short_description": "\ngetImageData(x, y, width, height)\nCategory: Canvas",
  "syntax": "getImageData(x, y, width, height)"
}