{
  "key": "point",
  "name": "point()",
  "category": "Drawing",
  "category_key": "drawing",
  "content": "Draws a point.\r\n\r\nUse `stroke()` to color a point and `strokeWeight()` to change it's diameter. A point cannot be filled, therefore the `fill()` function will not affect the color of a point.\r\n\r\nThe default `stroke()` color is black and the default `strokeWeight()` is 1.",
  "examples": [
    {
      "name": "",
      "description": "",
      "code": "```\npoint(100, 300);\n```",
      "app": "",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    },
    {
      "name": "Jackson Pollock",
      "description": "Use the mouse pointer position to place random lines and points.",
      "code": "```\n// Use the mouse pointer position to place random lines and points.\r\nfunction draw() {\r\n  stroke(rgb(randomNumber(0,255),randomNumber(0,255),randomNumber(0,255)));\r\n  if (randomNumber(0,1)==1) {\r\n    strokeWeight(randomNumber(1,5));\r\n    line(World.mouseX, World.mouseY, World.mouseX+randomNumber(-50,50),World.mouseY+randomNumber(-50,50));\r\n  }\r\n  else {\r\n    strokeWeight(randomNumber(10,30));\r\n    point(World.mouseX, World.mouseY);\r\n  }\r\n}\n```",
      "app": "https://studio.code.org/projects/gamelab/dpz_huDfXGmE6jkX7XHCmQ/",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    },
    {
      "name": "Optical Illusion",
      "description": "Watch the X in the middle very closely. You should start to see a green dot that rotates around the circle - this dot is an illusion; then you should see the pink dots disappear.... but they haven't really gone. It is an after image effect, sometimes called a 'negative retinal afterimage' - move your head slightly, and the dots will reappear... amazing or what?",
      "code": "```\n// Optical Illusion with Dots\r\nvar angle=0;\r\nWorld.frameRate=12;\r\nfunction draw() {\r\n  background(\"white\");\r\n  strokeWeight(5);\r\n  line(200,190,200,210);\r\n  line(190,200,210,200);  \r\n  stroke(rgb(255,0,255,0.5));\r\n  strokeWeight(40);\r\n  for (var i = 0; i <= 330; i=i+30) {\r\n    if (i!=angle) {\r\n      point(200+150*Math.cos(i*Math.PI/180), 200+150*Math.sin(i*Math.PI/180));\r\n    }\r\n  }\r\n  angle=(angle+30)%360;  \r\n}\n```",
      "app": "https://studio.code.org/projects/gamelab/sq_gfSkq4tqyoCP4SDUmJw/",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    },
    {
      "name": "Bullseye",
      "description": "Draw a bullseye.",
      "code": "```\n// Draw a bullseye.\r\nstroke(\"black\");\r\nstrokeWeight(400);\r\npoint(200, 200);\r\nstroke(\"lightgray\");\r\nstrokeWeight(325);\r\npoint(200, 200);\r\nstroke(\"blue\");\r\nstrokeWeight(250);\r\npoint(200, 200);\r\nstroke(\"red\");\r\nstrokeWeight(175);\r\npoint(200, 200);\r\nstroke(\"yellow\");\r\nstrokeWeight(100);\r\npoint(200, 200);\n```",
      "app": "",
      "image": null,
      "app_display_type": "codeFromCodeField",
      "embed_app_with_code_height": 310
    }
  ],
  "palette_params": [
    {
      "name": "x",
      "type": "Number",
      "required": true,
      "description": "The x-location in pixels of the point. Should be a number from 0 to 400, but negative numbers will draw the point to the left of the display and numbers greater than 400 will draw the point to the right of the display (possibly unseen)."
    },
    {
      "name": "y",
      "type": "Number",
      "required": true,
      "description": "The y-location in pixels of the point. Should be a number from 0 to 400, but negative numbers will draw the point above the display and numbers greater than 400 will draw the point below the display (possibly unseen)."
    }
  ],
  "parameters": [
    "x",
    "y"
  ],
  "return_value": "No return value. Outputs to the display only.",
  "short_description": "Draws a point.",
  "syntax": "point(x, y)",
  "tips": "- If you're having trouble getting a point to show up, make sure that `noStroke()` hasn't been called, and where you're trying to draw the point fits within the coordinates of the display (400 x 400).\r\n- Anything you draw will overlap previous things you drew. The sequence of drawing statements is usually important.\r\n- The default stroke is black, the default stroke weight is 1 pixel. Change the width and color of subsequent points using `strokeWeight()` and `stroke()`."
}