{
  "key": "substring",
  "name": "str.substring",
  "category": "Variables",
  "category_key": "variables",
  "content": "[name]\n\n## [string].substring(start, end)\n\n[/name]\n\n[category]\n\nCategory: Variables\n\n[/category]\n\n[description]\n\n[short_description]\n\nReturns a string extracted from the *start* position to one before the *end* position of the original string.\n\n[/short_description]\n\nWhen doing string parsing or manipulation you usually need to find substrings of strings. You need to use a variable containing a string, followed by a dot (\".\"), followed by the function name *substring* with two number arguments. Recall the first letter of a string is at position 0 and the last letter is at position *length-1*.\n\n[/description]\n\n### Examples\n____________________________________________________\n\n[example]\n\n```\nvar word=\"supercalifragilisticexpialidocious\";\nconsole.log(word.substring(0, word.length));\nconsole.log(word.substring(1, word.length-1));\nconsole.log(word.substring(2,3));\nconsole.log(word.substring(3,2));\n```\n\n[/example]\n____________________________________________________\n\n[example]\n\n**Example: First and Last** See if the first letter is the same as the last letter in a word.\n\n```\n// See if the first letter is the same as the last letter in a word.\nvar word=\"racecar\";\nvar first=word.substring(0,1);\nvar last=word.substring(word.length-1,word.length);\nconsole.log(first == last);\n```\n\n[/example]\n____________________________________________________\n[example]\n\n**Example: Palindrome** Check if a word is a palindrome.\n\n```\n// Check if a word is a palindrome.\nvar word=\"racecar\";\nwhile(word.length>1 && word.substring(0,1)==word.substring(word.length-1,word.length)) {\n  word=word.substring(1,word.length-1);\n}\nif(word.length==0 || word.length==1) console.log(\"palindrome\");\nelse console.log(\"not palindrome\");\n```\n\n[/example]\n____________________________________________________\n\n[parameters]\n\n### Parameters\n\n| Name  | Type | Required? | Description |\n|-----------------|------|-----------|-------------|\n| string | string | Yes | The string to find a substring of. |\n| start | number | Yes | The starting position for the substring. |\n| end | number | Yes | (end-1) is the ending position for the substring. |\n\n[/parameters]\n\n[returns]\n\n### Returns\nA substring from start to end-1\n\n[/returns]\n\n[tips]\n\n### Tips\n- *substring()* assumes start <=end, or swaps them if they are not.\n\n[/tips]\n",
  "parameters": [
    "start",
    "end"
  ],
  "short_description": "\n[string].substring(start, end)\nCategory: Variables",
  "syntax": "[string].substring(start, end)"
}