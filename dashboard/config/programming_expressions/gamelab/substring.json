{
  "key": "substring",
  "name": "[string].substring(start, end)",
  "category": "Variables",
  "category_key": "variables",
  "content": "When doing string parsing or manipulation you usually need to find substrings of strings. You need to use a variable containing a string, followed by a dot (\".\"), followed by the function name *substring* with two number arguments. Recall the first letter of a string is at position 0 and the last letter is at position *length-1*.",
  "examples": [
    {
      "name": "Example: chop chop",
      "code": "```\nvar word=\"supercalifragilisticexpialidocious\";\nconsole.log(word.substring(0, word.length));\nconsole.log(word.substring(1, word.length-1));\nconsole.log(word.substring(2,3));\nconsole.log(word.substring(3,2));\n```"
    },
    {
      "name": "Example: first and last",
      "description": "See if the first letter is the same as the last letter in a word.",
      "code": "```\n// See if the first letter is the same as the last letter in a word.\nvar word=\"racecar\";\nvar first=word.substring(0,1);\nvar last=word.substring(word.length-1,word.length);\nconsole.log(first == last);\n```"
    },
    {
      "name": "Example: palindrome",
      "description": "Check if a word is a palindrome.",
      "code": "```\n// Check if a word is a palindrome.\nvar word=\"racecar\";\nwhile(word.length>1 && word.substring(0,1)==word.substring(word.length-1,word.length)) {\n  word=word.substring(1,word.length-1);\n}\nif(word.length==0 || word.length==1) console.log(\"palindrome\");\nelse console.log(\"not palindrome\");\n```"
    }
  ],
  "palette_params": [
    {
      "name": "string",
      "type": "string ",
      "required": true,
      "description": "The string to find a substring of."
    },
    {
      "name": "start",
      "type": "number",
      "required": true,
      "description": "The starting position for the substring."
    },
    {
      "name": "end",
      "type": "number",
      "required": true,
      "description": "(end-1) is the ending position for the substring."
    }
  ],
  "parameters": [
    "start",
    "end"
  ],
  "return_value": "A substring from start to end-1",
  "short_description": "Returns a string extracted from the *start* position to one before the *end* position of the original string.",
  "syntax": "[string].substring(start, end)",
  "tips": "- *substring()* assumes start <=end, or swaps them if they are not."
}