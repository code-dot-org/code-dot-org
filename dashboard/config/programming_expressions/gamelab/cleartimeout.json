{
  "key": "clearTimeout",
  "name": "clearTimeout(timeout)",
  "category": "Control",
  "category_key": "control",
  "content": "Sometimes you need to clear a timeout timer before it executes. clearTimeout() uses the value returned by the [setTimeout(function, milliseconds)](/docs/applab/setTimeout) function.\n",
  "examples": [
    {
      "name": "Example: clear timeout",
      "description": "",
      "code": "```\n// Timeout is cleared immediately.\nvar t = setTimeout(function() {\n  console.log(\"The timeout has completed\");\n}, 10000);\nconsole.log(\"Timer ID: \" + t);\nclearTimeout(t);\n```"
    },
    {
      "name": "Example: Stop the Countdown",
      "description": "**Example: Stop the Countdown** The user controls whether to clear the 3 second timeout timer.\n",
      "code": "```\n// The user controls whether to clear the 3 second timeout timer.\ntextLabel(\"instructions\", \"Click Start to begin a 3 second timeout timer, then Stop to prevent it from completing\");\ntextLabel(\"status\", \"\");\nbutton(\"startButton\", \"Start\");\nbutton(\"cancelButton\", \"Stop\");\nvar t;\nonEvent(\"startButton\", \"click\", function(){\n  t = setTimeout(function() {\n    setText(\"status\", \"The timer completed!\");\n   }, 3000);\n   setText(\"status\", \"Timer started!\");\n   console.log(\"Timer ID: \" + t);\n});\nonEvent(\"cancelButton\", \"click\", function(){\n  if(t) {\n    clearTimeout(t);\n    setText(\"status\", \"The timer has been cancelled.\");\n  } else {\n    setText(\"status\", \"You need to start the timer before you can stop it :)\");\n  }\n});\n```"
    }
  ],
  "palette_params": [
    {
      "name": "timeout",
      "type": "number",
      "required": true,
      "description": "The value returned by the setTimeout function to cancel. "
    }
  ],
  "parameters": [
    "__"
  ],
  "return_value": "No return value.\n",
  "short_description": "Clears an existing timer by passing in the numeric value returned by setTimeout().\n",
  "syntax": "clearTimeout(timeout);",
  "tips": "### Tips\n- If you want to clear a timeout interval you need to save the value returned by setTimeout, var i = setTimeout(callback, ms);\n"
}