{
  "key": "assign_x",
  "name": "Assign x",
  "category": "Variables",
  "category_key": "variables",
  "content": "[name]\n\n## Assign a value to a variable\n\n[/name]\n\n[category]\n\nCategory: Variables\n\n[/category]\n\n[description]\n\n[short_description]\n\nAssigns a value to a previously declared variable.\n\n[/short_description]\n\nTo process data in our apps we need to assign values to memory locations we have previously named using *var* to declare a variable. Programmers read the statement \"area = length * width;\" as \"area gets length times width\". The variable getting the value always goes on the left hand side of the assignment operator =. The right hand side of the assignment operator can be a number or a string, or the number or string returned by a function, or the numeric or string result of the evaluation of an expression.\n\n[/description]\n\n### Examples\n____________________________________________________\n\n[example]\n\n```\n// Declare, assign, and output the value of a variable.\nvar x;\nx = 5;\nconsole.log(\"x has the value \" + x)\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Circumference and Area** Calculate the circumference and area of a circle with radius 10.\n\n```\n// Calculate the circumference and area of a circle with radius 10.\nvar radius, circumference, area;\nradius = 10;\ncircumference = 2 * Math.PI * radius;\narea = Math.PI * radius * radius;\nconsole.log(\"Circle radius 10 has circumference of \" + circumference + \" and area of \" + area);\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Fibonacci** Generate the first nine terms of the Fibonacci series.\n\n```\n// Generate the first 9 terms of the Fibonacci series.\nvar termA, termB, termC;\ntermA = 1;\ntermB = 1;\ntermC = termA + termB;\nconsole.log(termA + \" \" + termB + \" \" + termC);\ntermA = termB + termC;\ntermB = termC + termA;\ntermC = termA + termB;\nconsole.log(termA + \" \" + termB + \" \" + termC);\ntermA = termB + termC;\ntermB = termC + termA;\ntermC = termA + termB;\nconsole.log(termA + \" \" + termB + \" \" + termC);\n```\n\n[/example]\n\n____________________________________________________\n\n[example]\n\n**Example: Message Board** Collect, count and display messages from friends.\n\n```\n// Collect, count and display messages from friends.\ntextLabel(\"myTextLabel\", \"Type a message and press press enter\");\ntextInput(\"myTextInput\", \"\");\nvar count;\ncount=1;\nonEvent(\"myTextInput\", \"change\", function(event) {\n  var myText;\n  myText = getText(\"myTextInput\");\n  write(\"Message #\" + count + \": \" + myText);\n  setText(\"myTextInput\", \"\");\n  count = count + 1;\n});\n```\n\n[/example]\n\n____________________________________________________\n\n[syntax]\n\n### Syntax\n\n```\nx = ___;\n```\n\n[/syntax]\n\n[parameters]\n\n### Parameters\n\n| Name  | Type | Required? | Description |\n|-----------------|------|-----------|-------------|\n| x | variable name | Yes | The name you will use in the program to reference the variable. Must begin with a letter, contain no spaces, and may contain letters, digits, - and _. |\n| ___ | any type | Yes | The right hand side of the assignment operator can be a number or a string, or the number or string returned by a function, or the numeric or string result of the evaluation of an expression. |\n\n[/parameters]\n\n[returns]\n\n### Returns\nNo return value. Variable assigned value in memory.\n\n[/returns]\n\n[tips]\n\n### Tips\n\n- The variable must be declared using *var* before it can be assigned its initial value. \n- You can use the same variable on both the right hand side of the assignment operator = and the left hand side. This is sometimes used for a counter *count = count + 1;*\n- = is the assignment operator. == is the boolean check for equivalency operator.\n\n[/tips]\n\n",
  "return_value": "Does not return a value.  Assigns 2 to `someVal`.  Assumes that `someVal` has already been declared.",
  "short_description": "\nAssign a value to a variable\nCategory: Variables",
  "syntax": "x = __;"
}