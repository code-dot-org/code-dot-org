{
  "key": "setTimeout",
  "name": "setTimeout",
  "category": "Control",
  "category_key": "control",
  "content": "Some apps need code to be executed once after a certain amount of time has elapsed, like a bank logon is disabled if you take too long to enter your password. Other code in your app can be executed while waiting for the timeout interval to end. *setTimeout()* returns a numeric value that can be used with [clearTimeout(timeout)](/docs/applab/clearTimeout) to prevent the execution of the callback function.",
  "examples": [
    {
      "name": "Example: Set Timer",
      "description": "",
      "code": "```\nsetTimeout(function() {\n  console.log(\"1000 milliseconds have elapsed\");\n}, 1000);\n```"
    },
    {
      "name": "Example: Pause between Moves",
      "description": "Use the timeout function to make the turtle pause between two moves.",
      "code": "```\n// Use the timeout function to make the turtle pause between two moves.\nmoveForward(50);\nsetTimeout(function() {\n  moveForward(100);\n}, 2000);\n```"
    },
    {
      "name": "Example: Pause between Moves v2",
      "description": "Use the timeout function to make the turtle pause between two moves. Note how the turnRight() does not wait for the timeout.",
      "code": "```\n// Use the timeout function to make the turtle pause between two moves. Note how the turnRight() does not wait for the timeout.\nmoveForward(50);\nsetTimeout(function() {\n  moveForward(100);\n}, 2000);\nturnRight(90);\n```"
    },
    {
      "name": "Example: Click Speed",
      "description": "Count the number of clicks of a button in 10 seconds.",
      "code": "```\n//  Count the number of clicks of a button in 10 seconds.\ntextLabel(\"instructions\", \"Click the button as many times as possible in 10 seconds\");\nbutton(\"gameButton\", \"Click me!\");\ntextLabel(\"results\", \"\");\nvar counter = 0;\nsetTimeout(function() {\n  hideElement(\"gameButton\");\n  console.log(\"10000 milliseconds have elapsed\");\n}, 10000);\nonEvent(\"gameButton\", \"click\", function(){\n  counter = counter + 1;\n  setText(\"results\", \"You have clicked \" + counter + \" times.\");\n});\n```"
    }
  ],
  "palette_params": [
    {
      "name": "callback",
      "type": "function",
      "required": true,
      "description": "A function to execute when the timeout interval has completed."
    },
    {
      "name": "ms",
      "type": "number",
      "required": true,
      "description": "The number of milliseconds to wait before executing the function."
    }
  ],
  "parameters": [
    "callback",
    "ms"
  ],
  "return_value": "A numeric interval timer ID, which can be used to cancel the timer before it executes.",
  "short_description": "Sets a timer and executes code when that number of milliseconds has elapsed.",
  "syntax": "setTimeout(callback, ms);",
  "tips": "- Use the [clearTimeout(timeout)](/docs/applab/clearTimeout) function to cancel the execution of code scheduled using setTimeout().\n- Do not put functions inside a loop that contain timers, like setTimeout(). The loop will not wait for the timer to complete."
}