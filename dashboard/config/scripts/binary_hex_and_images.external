name 'Binary, Hex, and Images'

markdown <<MARKDOWN
# Binary, Hex, and Images

## The Physical System

In Unit 1, students learned about binary and created protocols for encoding information in two states. While students never explicitly talked about images in unit 1, at this point they likely recognize that all digital information is represented in bits and images are displayed on computers, ergo they can be represented as bits.  While images use different encoding schemes than what students have seen before, this should not be a foreign concept.  As long as everyone communicating agrees upon a set protocol for how the data will be stored and interpreted, an image can be represented as simply as text can.  In this pair of lessons, students will investigate how images are actually stored using bits to represent pixels on the screen.  

## What is Hexadecimal?

Hexadecimal, or Hex,  is a numerical system made up of 16 symbols. In English, there are only 10 symbols that make up the number system.  In order to create a number system with more symbols (that already exist in the english character set and thus appear on the computer keyboard), hexadecimal steals the symbols for the first 6 letters of the alphabet to correspond to the numbers 10-15.  The symbols used for the hexadecimal numbers are:

<div style="margin-left:35%">0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F </div>

<br>
Similar to the Decimal number system, Binary, or students’ invented Circle-Triangle-Square number system, counting in Hexadecimal follows an algorithm based on place value:

1. Counting begins with the rightmost digit
2. Increase the digit in the current place value by one symbol. If the current place value is “F”, set the current place value to “0” 
3. repeat with the next digit to the left

When reading a hexadecimal number, instead of each place value representing a power of 2 (binary) or 10 (decimal), they represent powers of 16 because there are 16 symbols in the number system.  This means that a single digit of hex can represent 16 possible values. **Said another way, one hexadecimal digital equals four bits.** Below, 5D2A is translated from Hex to Decimal:

<img src=
"https://images.code.org/924b63558f55e31b766c80805e70397c-image-1476037081417.png" style="margin-left:15%; width:70%" />

## Representing Colors in Binary and Hex

While monitors typically can represent thousands, if not millions of colors, each individual pixel contains only three tiny lights, one each of red, green, and blue. Every color you see on a screen is created by setting different brightnesses for each of these little lights. 

Typically each of these little lights (red, green, blue) has its brightness dictated by a single byte.  The largest number that can be written using 8 digits of binary (or a byte) is 255, which indicates that a light should be turned to full brightness. 0 indicates that a light should be turned off.
<br><br>
<div style="margin-left:7%; margin-right:7%">
<img src = "https://images.code.org/d27b6128b345e39a452039dcb2a11af1-image-1476036951662.14.39 PM.png" style="float:right; margin-left:5px; width:250px" />

<strong>Example:</strong><em> If we wanted to make the reddest color our pixel could make, we would turn the red light all the way on, and the other two all the way off.  This would be represented as:
<ul>
  <li>red: 11111111 or 255</li>
  <li>green: 00000000 or 0</li>
  <li>blue: 00000000 or 0</li>
</ul>
But since these will usually be read as one 24-bit chunk, we display them below in the order they would be received, first the red byte, then the green byte, then the blue byte. <strong>Reddest Red </strong> = 111111110000000000000000</em></div><br>

While this system makes a lot of sense for a computer to read, it can be tricky for a human to keep track of all those digits. This is where hexadecimal becomes really handy. The numbers 0-255 can be written in hex using two symbols, whereas it takes eight in binary. 

**Example:** *Our reddest red can be written in hexadecimal as “#FF0000”.  To do the conversion from binary to hexadecimal  yourself, just read the bits above 4-bit at a time, and convert each 4-bit chunk into its hex representation.* 

MARKDOWN
