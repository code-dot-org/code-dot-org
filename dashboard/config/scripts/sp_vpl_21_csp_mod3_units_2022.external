name 'SP-VPL-21-CSP-mod3-Units_2022'
title 'title'
description 'description here'

markdown <<MARKDOWN
# Units

##### **The CS Principles curriculum is divided into ten units.** Most units (except units 6 and 8) have an end-of unit, multi-day project along with a multiple-choice assessment. We recommend that you teach the curriculum over the course of a year, with five units per semester. If your students are taking the CS Principles as an AP course, you should plan to cover all 10 units before the AP Exam.

<img src="https://images.code.org/b55e51fe9255810b14d2e5fa0674743b-image-1638564177284.jpg" alt="A group of high schoolers have their arms around each other's shoulders and smile at the camera." style="border-radius:20px; float: right; height: 250px; clear: both; margin: 0 20px 20px 20px;">

## Inclusion in course design

##### While CS Principles does provide students with ample time to learn and practice coding, the curriculum also seeks to provide knowledge and skills to meaningfully participate in our increasingly digital society, economy, and culture. Additionally, Code.org has thoughtfully designed the course to be accessible and non-threatening to students who have never coded before. 

##### Therefore, the first two units of the course are _not_ programming units, but instead focus on digital information and the internet. We highly suggest that you begin with these two units, instead of skipping to Unit 3, to build an inclusive classroom culture from day one.

## Click on the units below to learn about the course content:

### Semester One

<details>
<summary><strong>Unit 1: Digital Information</strong></summary>

<img src="https://images.code.org/66b328a4a57bdd646df1cdd587b903c8-image-1638564738746.51.43 PM.png" alt="Clipart of a magnifying glass inspecting a laptop screen." width="200px" style="border-radius:10px; float:left; margin: 0 0 40px 40px;  padding-right: 30px;">

Students explore the way computers store and represent complex information like numbers, text, images, and sound. The unit begins with students investigating what it means to represent information and challenges students to design their own representation systems. Students then learn the ideas behind real-world systems used to represent complex information. Later lessons focus on the challenges that arise from digitizing information, such as the need to compress it, or questions of intellectual property. The unit project emphasizes the profound impact digital information has on modern life.

</details>

<div style="clear:both"/>

<details><summary><strong>Unit 2: The Internet</strong></summary>

<img src="https://images.code.org/9d5390947e3aa7a51daa086bd30d07e2-image-1638564801944.53.10 PM.png" alt="Clipart showing a network of computers connected together." width="200px" style="border-radius:10px; float:left; margin: 0 0 40px 40px;  padding-right: 30px;">

Students learn how the Internet works and discuss its impacts on politics, culture, and the economy. This unit heavily features the Internet Simulator, a tool designed to let students see, use, and explore the way different layers of the internet work. Through a series of activities that build on one another, students investigate the problems the original designers of the internet had to solve and then "invent” their own solutions. At the conclusion of the unit, students research an "Internet Dilemma," both from the standpoint of its technical background and its impacts on different groups of people.
</details>

<div style="clear:both"/>

<details><summary><strong>Unit 3: Intro to App Design</strong></summary>

<img src="https://images.code.org/5b846ba3fb74a9a33093185000fd08a1-image-1638564948847.55.42 PM.png" alt="Screenshot of AppLab." width="200px" style="border-radius:10px; float:left; margin: 0 0 40px 40px;  padding-right: 30px;">

Students design their first app while learning both fundamental programming concepts and collaborative software development processes. Students work with partners to develop a simple app that teaches classmates about a topic of personal interest. Throughout the unit, they learn how to use Code.org’s programming environment, App Lab, to design user interfaces and write simple event-driven programs. Along the way, students learn practices like debugging, pair programming, and collecting and responding to feedback, which they will be able to use throughout the course as they build increasingly more complex projects. The unit concludes with students sharing the apps they develop with their classmates.
</details>

<div style="clear:both"/>

<details><summary><strong>Unit 4: Variables, Conditionals, and Functions</strong></summary>

<img src="https://images.code.org/f16e6edef66592a9055bf4032745001a-image-1638565335247.02.03 PM.png" alt="Image of a flowchart showing a conditional situation." width="200px" style="border-radius:10px; float:left; margin: 0 0 40px 40px;  padding-right: 30px;">

Students expand the types of apps they can create as they learn how to store information (variables), make decisions (conditionals), and better organize code (functions). Each programming topic is covered in a specific sequence of lessons that ask students to ‘Explore’ ideas through hands-on activities, ‘Investigate’ these ideas through guided code reading, ‘Practice’ with sample problems, and apply their understanding as they ‘Make’ a one-day scoped project. The entire unit concludes with a three-day open-ended project in which students must build an app that makes a recommendation to the user about any topic they wish.
</details>

<div style="clear:both"/>

<details><summary><strong>Unit 5: Lists, Loops and Traversals</strong></summary>

<img src="https://images.code.org/9dc890aa14151806981be11aa58e265b-image-1638565468505.03.43 PM.png" alt="Image showing a flowchart with a loop included." width="200px" style="border-radius:10px; float:left; margin: 0 0 40px 40px;  padding-right: 30px;">

Students learn to build apps that use and process lists of information. Like the previous unit, students learn the core concepts of lists, loops, and traversals through a series of Explore, Investigate, Practice, and Make (EIPM) lesson sequences. Later in the unit, students are introduced to tools that allow them to import tables of real-world data to help further power the types of apps they can make. At the conclusion of the unit, students complete a week-long project in which they must design an app around a goal of their choosing that uses one of these data sets.
</details>

<div style="clear:both"/>

### Semester Two

<details><summary><strong>Unit 6: Algorithms</strong></summary>

<img src="https://images.code.org/0fa910b9b3490d88fbda41948b9f33fe-image-1638565598367.06.21 PM.png" alt="Map of the United States with arrows showing distances between locations." width="200px" style="border-radius:10px; float:left; margin: 0 0 40px 40px;  padding-right: 30px;">

Students learn to design and analyze algorithms to understand how they work and why some algorithms are considered more efficient than others. This short unit is entirely unplugged, and features hands-on activities that help students get an intuitive sense of how quickly different algorithms run and the pros and cons of different algorithms. Later in the unit, students explore concepts like undecidable problems and parallel and distributed computing.

</details>

<div style="clear:both"/>

<details><summary><strong>Unit 7: Parameters, Return, and Libraries</strong></summary>

<img src="https://images.code.org/8241bab31be35836c3cf01158ade65d1-image-1638565770895.09.20 PM.png" alt="Image of a rock, paper, scissors app made on AppLab." width="200px" style="border-radius:10px; float:left; margin: 0 0 40px 40px;  padding-right: 30px;">

Students learn how to design clean and reusable code that can be shared with a single classmate or the entire world. In the beginning of the unit, students are introduced to the concepts of parameters and return, which allow for students to design functions that implement an algorithm. In the second half of the unit, students learn how to design libraries of functions that can be packaged up and shared with others. The unit concludes with students designing their own small library of functions that can be used by a classmate.
</details>

<div style="clear:both"/>

<details><summary><strong>Unit 8: Create Performance Task Prep</strong></summary>

<img src="https://images.code.org/8febf9d9b153284a9f6239cfb5144332-image-1638565885439.jpeg" alt="Image of a screen with coding on it." width="200px" style="float:left; margin: 0 0 40px 40px;  padding-right: 30px;">

In this unit, students practice and complete the Create Performance Task (PT), starting with a series of activities that ensure they understand the College Board requirements of the Create PT, which they have practiced throughout the year. Subsequently, students are given at least 12 class hours in which to complete the Create PT.
</details>

<div style="clear:both"/>

<details><summary><strong>Unit 9: Data</strong></summary>

<img src="https://images.code.org/1c526e3961a964f2b754696ff6840328-image-1638565946070.12.18 PM.png" alt="Cross tab chart showing frequencies." width="200px" style="border-radius:10px; float:left; margin: 0 0 40px 40px;  padding-right: 30px;">

Students explore and visualize datasets from a wide variety of topics as they hunt for patterns and try to learn more about the world around them from the data. Once again, students work with datasets in App Lab but are now asked to make use of a data visualizer tool that assists students in finding data patterns. They learn how different types of visualizations can be used to better understand the patterns contained in datasets and how to use visualizations when investigating hypotheses. At the conclusion of the unit, students learn about the impacts of data analysis on the world around them and complete a final project in which they must uncover and present a data investigation they've completed independently.
</details>

<div style="clear:both"/>

<details><summary><strong>Unit 10: Cybersecurity and Global Impact</strong></summary>

<img src="https://images.code.org/d473bf3b640faaf79123c5b9ece2b73b-image-1638566066717.jpeg" alt="Illustration of a person locking a folder to keep it secure." width="200px" style="float:left; margin: 0 0 40px 40px;  padding-right: 30px;">

Students research and debate current events at the intersection of data, public policy, law, ethics, and societal impact in the final unit of the course. This unit is built around a simulated "future school" conference in which students must take on the persona of a stakeholder in a school setting and propose and debate technological innovations that could improve schools. Throughout the unit, students learn about the privacy and security risks of many computing innovations and learn about the ways some of these risks can be mitigated. Students complete their Explore Curricular Requirement as part of this project as they investigate at least three computing innovations, then discuss and debate many others with their classmates. At the conclusion of the unit, the class holds a conference in which teams present their overall vision for a school of the future and the computing innovations that would power it.
</details>

<div style="clear:both"/>

![]()
MARKDOWN
