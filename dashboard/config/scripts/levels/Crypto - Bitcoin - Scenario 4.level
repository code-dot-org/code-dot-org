<Applab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "skin": "applab",
    "validation_enabled": "false",
    "embed": "true",
    "mini_rubric": "false",
    "submittable": "false",
    "start_blocks": "//INITIAL PEOPLE\r\nvar Aliyah = {\r\n  \"name\": \"Aliyah\",\r\n  \"private\": 134,\r\n  \"public\": 13202\r\n};\r\n\r\nvar Kai = {\r\n  \"name\": \"Kai\",\r\n  \"private\": 5927,\r\n  \"public\": 38625\r\n};\r\n\r\nvar Ximena = {\r\n  \"name\": \"Ximena\",\r\n  \"private\": 1015,\r\n  \"public\": 42863\r\n};\r\n\r\nvar Miguel = {\r\n  \"name\": \"Miguel\",\r\n  \"private\": 6920,\r\n  \"public\": 728\r\n};\r\n\r\nvar Destiny = {\r\n  \"name\": \"Destiny\",\r\n  \"private\": 1056,\r\n  \"public\": 26742\r\n};\r\n\r\n//***********************************\r\n//****DON'T FORGET THIS IS HERE******\r\n//***********************************\r\nvar PEOPLE = [Aliyah, Kai, Ximena, Miguel, Destiny];\r\n\r\nvar messages = [\r\n  {\r\n    \"name\": \"A\",\r\n    \"from\": \"Aliyah\",\r\n    \"to\": \"Kai\",\r\n    \"amount\": \"10\",\r\n    \"signature\": \"b7353e48a2db69e0685b1c2c6c183a8d\"\r\n  },\r\n  {\r\n    \"name\": \"B\",\r\n    \"from\": \"Ximena\",\r\n    \"to\": \"Kai\",\r\n    \"amount\": \"10\",\r\n    \"signature\": \"91bb8899cfa4728c0d8adab576752c55\"\r\n  },\r\n  {\r\n    \"name\": \"C\",\r\n    \"from\": \"Miguel\",\r\n    \"to\": \"Kai\",\r\n    \"amount\": \"10\",\r\n    \"signature\": \"6ba88c18e35d39b168520c9671dcece4\"\r\n  },\r\n  {\r\n    \"name\": \"D\",\r\n    \"from\": \"Destiny\",\r\n    \"to\": \"Kai\",\r\n    \"amount\": \"10\",\r\n    \"signature\": \"0825b0b51c3e0fb221c9690ecfb9aa9f\"\r\n  },\r\n  {\r\n    \"name\": \"E\",\r\n    \"from\": \"Kai\",\r\n    \"to\": \"Aliyah\",\r\n    \"amount\": \"40\",\r\n    \"signature\": \"ca1e5a2fda5c77fdd3a18d15cba7858c\"\r\n  },\r\n  {\r\n    \"name\": \"F\",\r\n    \"from\": \"Aliyah\",\r\n    \"to\": \"Kai\",\r\n    \"amount\": \"20\",\r\n    \"signature\": \"ab33ef97c534f4cc3ab178c518864b69\"\r\n  },\r\n  {\r\n    \"name\": \"G\",\r\n    \"from\": \"Ximena\",\r\n    \"to\": \"Kai\",\r\n    \"amount\": \"20\",\r\n    \"signature\": \"9f971a991de0223ba2f5ab352f13b6f4\"\r\n  },\r\n  {\r\n    \"name\": \"H\",\r\n    \"from\": \"Miguel\",\r\n    \"to\": \"Kai\",\r\n    \"amount\": \"20\",\r\n    \"signature\": \"7d7d067dee2e057000aaf7256dc3f6b7\"\r\n  },\r\n  {\r\n    \"name\": \"I\",\r\n    \"from\": \"Destiny\",\r\n    \"to\": \"Kai\",\r\n    \"amount\": \"20\",\r\n    \"signature\": \"a5bb974b9da0352603667883dbf39d98\"\r\n  },\r\n  {\r\n    \"name\": \"J\",\r\n    \"from\": \"Kai\",\r\n    \"to\": \"Ximena\",\r\n    \"amount\": \"80\",\r\n    \"signature\": \"abfe2ed308b5a4e72c88a2d95f25b33f\"\r\n  }\r\n];\r\n\r\n//SETUP VARIABLES\r\nvar BUTTONSIZE = 30;\r\nvar BUTTONPROPS = {\r\n  \"width\": BUTTONSIZE,\r\n  \"height\": BUTTONSIZE,\r\n  \"x\": 0,\r\n  \"y\": 450 - BUTTONSIZE\r\n};\r\nvar BLOCK = [];\r\nvar NUMZEROES = 2;\r\nvar ZEROSTRING = \"\";\r\nfor(var i = 0; i < NUMZEROES; i++) {\r\n  ZEROSTRING += \"0\";\r\n}\r\nvar CURRENTMSG = null;\r\nvar BLOCKBUTTONS = [];\r\nvar SHAREDPRIME = SHAHashLibrary.sharedPrime();\r\n\r\nfunction initializeMessages() {\r\n  var buttonY = 0;\r\n\r\n  for(var k = 0; k < messages.length; k++) {\r\n    var msg = messages[k];\r\n    var tempBtnId = \"button\" + msg.name;\r\n    button(tempBtnId, msg.name);\r\n    setPosition(tempBtnId, 0, buttonY, 100, BUTTONSIZE);\r\n    buttonY += BUTTONSIZE;\r\n    //Create an event for the button I just created\r\n    onEvent(tempBtnId, \"click\", function(e) {\r\n      //Get the button I just clicked from the event\r\n      //Because sychronizing data with dynamically-created elements is tricky\r\n      var msgName = e.srcElementId.split(\"button\")[1];\r\n      \r\n      for(var i = 0; i < messages.length; i++) {\r\n        if(messages[i].name == msgName) {\r\n          CURRENTMSG = messages[i];\r\n          break;    \r\n        }\r\n      }\r\n      showMessage(CURRENTMSG);\r\n      UI(true);\r\n    });\r\n  }\r\n}\r\n\r\nfunction UI(show) {\r\n  if(show) {\r\n    showElement(\"verifyTitleLabel\");\r\n    showElement(\"publicKeyLabel\");\r\n    showElement(\"publicKeyInput\");\r\n    showElement(\"verifySignatureButton\");\r\n    showElement(\"addBlockButton\");\r\n    setText(\"publicKeyInput\", \"\");\r\n  } else {\r\n    hideElement(\"verifyTitleLabel\");\r\n    hideElement(\"publicKeyLabel\");\r\n    hideElement(\"publicKeyInput\");\r\n    hideElement(\"verifySignatureButton\");\r\n    hideElement(\"verifyLabel\");\r\n    hideElement(\"addBlockButton\");\r\n  }\r\n}\r\n\r\n//HELPER FUNCTIONS\r\nfunction messageFormat(from, to, amount) {\r\n  return \"<From: \" + from + \" | To: \" + to + \" | Amount: \" + amount + \">\";\r\n}\r\n\r\nfunction blockToString(block) {\r\n  //block is an array of messages\r\n  //messages are objects with a \"from\", \"to\", \"amount\", and \"signature\" field\r\n  //messageFormat() is a function that converts the raw from/to/amount fields into a single string\r\n  var tempStrings = [];\r\n  for(var i = 0; i < block.length; i++) {\r\n    var msg = block[i];\r\n    var msgString = \"(\" + messageFormat(msg.from, msg.to, msg.amount);\r\n    msgString += \" - \" + msg.signature + \")\";\r\n    //msgString should have format (<From: _ | To: _ | Amount: _> - _)\r\n    tempStrings.push(msgString);\r\n  }\r\n  return \"[\" + tempStrings.toString() + \"]\";\r\n}\r\n\r\n// Looks for NUMZEROES in the range and doesn't stop\r\n// Will return an array of all possible nonces that satisfy the condition\r\nfunction mineAll(startVal, numVals) {\r\n  //Same as mine, but returns array of possible values in the range rather than first value\r\n  var blockString = blockToString(BLOCK);\r\n  var endVal = startVal + numVals;\r\n  var blockStringWithNonce;\r\n  var blockHash;\r\n  var DEBUG = false;\r\n  var nonces = [];\r\n  for(var nonce = startVal; nonce < endVal; nonce++) {\r\n    blockStringWithNonce = blockString + \",\" + nonce;  \r\n    blockHash = SHAHashLibrary.md5(blockStringWithNonce);\r\n    if(DEBUG) {\r\n      console.log(\"NONCE:\" + nonce + \"; HASH:\" + blockHash);\r\n    }\r\n    var firstPart = blockHash.substr(0, NUMZEROES);\r\n    if(firstPart == ZEROSTRING) {\r\n      console.log(\"SUCCESS! Nonce: \" + nonce);\r\n      nonces.push(nonce);\r\n    }\r\n  }\r\n  console.log(\"Done Mining\");\r\n  return nonces;\r\n}\r\n\r\n//Returns first nonce that satisfies NUMZEROES condition\r\nfunction mine(startVal, numVals) {\r\n  var blockString = blockToString(BLOCK);\r\n  var endVal = startVal + numVals;\r\n  var blockStringWithNonce;\r\n  var blockHash;\r\n  var DEBUG = false;\r\n  for(var nonce = startVal; nonce < endVal; nonce++) {\r\n    blockStringWithNonce = blockString + \",\" + nonce;  \r\n    blockHash = SHAHashLibrary.md5(blockStringWithNonce);\r\n    setText(\"nonceLabel\", nonce);\r\n    setText(\"hashTextBox\", blockHash);\r\n    if(DEBUG) {\r\n      console.log(\"NONCE:\" + nonce + \"; HASH:\" + blockHash);\r\n    }\r\n    var firstPart = blockHash.substr(0, NUMZEROES);\r\n    if(firstPart == ZEROSTRING) {\r\n      //console.log(\"SUCCESS! Nonce: \" + nonce);\r\n      return nonce;\r\n    }\r\n  }\r\n  console.log(\"Done Mining\");\r\n  return -1;\r\n}\r\n\r\n\r\nfunction showMessage(msg) {\r\n  var tempStr = \"\";\r\n  //tempStr += \"<\\n\";\r\n  tempStr += \"From: \" + msg.from + \"\\n\";\r\n  tempStr += \"To: \" + msg.to + \"\\n\";\r\n  tempStr += \"Amount: \" + msg.amount + \"\\n\";\r\n  //tempStr += \">\\n\";\r\n  tempStr += \"Signature: \" + msg.signature;\r\n  setText(\"messageTextBox\", tempStr);\r\n}\r\n\r\nfunction addMsgToBlock(msg) {\r\n  //Add to BLOCK array, which is used for hashes later\r\n  BLOCK.push(msg);\r\n  \r\n  //Add to BLOCKBUTTONS array, which is used for UI management\r\n  BLOCKBUTTONS.push(msg.name);\r\n  \r\n  //Reset the screen\r\n  CURRENTMSG = null;\r\n  setText(\"messageTextBox\", \"\");\r\n  //Hide the button we just clicked\r\n  hideElement(\"button\" + msg.name);\r\n  \r\n  //Create a new button to represent the block\r\n  var tempBtnId = \"block\" + msg.name;\r\n  button(tempBtnId, msg.name);\r\n  \r\n  //I didn't need these - somehow AppLab is naturally managing a visual stack which is GREAT\r\n  //setProperty(tempBtnId,\"width\", BUTTONPROPS.width);\r\n  //setProperty(tempBtnId, \"height\", BUTTONPROPS.height);\r\n  //setProperty(tempBtnId, \"x\", BUTTONPROPS.x);\r\n  //BUTTONPROPS.x += BUTTONSIZE;\r\n  setProperty(tempBtnId, \"y\", 410);\r\n  \r\n  //Create an event for the button I just created\r\n  onEvent(tempBtnId, \"click\", function(e) {\r\n    //Get the button I just clicked from the event\r\n    //Because sychronizing data with dynamically-created elements is tricky\r\n    var msgName = e.srcElementId.split(\"block\")[1];\r\n    \r\n    //Reset the button to view the message\r\n    showElement(\"button\" + msgName);\r\n    //Delete this element from the screen (which somehow automatically shifts all the other buttons visually)\r\n    deleteElement(e.srcElementId);\r\n    \r\n    //Delete msg from BLOCKBUTTONS array as well\r\n    //Requires a mid-array deletion\r\n    var i = 0;\r\n    while(i < BLOCKBUTTONS.length) {\r\n      if(BLOCKBUTTONS[i] == msgName) {\r\n        BLOCKBUTTONS.splice(i, 1);\r\n        BLOCK.splice(i, 1);\r\n        break;\r\n      }\r\n      i++;\r\n    }\r\n  });\r\n}\r\n\r\nfunction decryptSignature(encryptedHash, pubKey) {\r\n  var tempStr = \"\";\r\n  for(var i = 0; i < encryptedHash.length; i += 4) {\r\n    var subStr = encryptedHash.substr(i, 4);\r\n    //console.log(subStr);\r\n    var toDec = SHAHashLibrary.hexStringToDecimal(subStr);\r\n    //console.log(\"toDec: \" + toDec);\r\n    var encrypted = (toDec * pubKey) % SHAREDPRIME;\r\n    //console.log(\"encrypted: \" + encrypted);\r\n    var toHex = SHAHashLibrary.decimalToHexString(encrypted);\r\n    //console.log(\"toHex: \" + toHex);\r\n    \r\n    while(toHex.length < 4) {\r\n      toHex = \"0\" + toHex;\r\n    }\r\n    \r\n    tempStr += toHex;\r\n  }\r\n  return tempStr;\r\n}\r\n\r\n//EVENTS\r\nonEvent(\"addBlockButton\", \"click\", function() {\r\n  if(CURRENTMSG != null) {\r\n    addMsgToBlock(CURRENTMSG);\r\n  }\r\n  UI(false);\r\n});\r\n\r\nonEvent(\"nextButton\",\"click\", function() {\r\n  setScreen(\"screen2\");\r\n  setText(\"goalLabel\", \"Your Goal: Add a number to your block so that the hash starts with \" + NUMZEROES + \" zeroes. This doesn't change the block itself - it only changes the hash\");\r\n  for(var i = 0; i < BLOCKBUTTONS.length; i++) {\r\n    var msgName = BLOCKBUTTONS[i];\r\n    //Create a new button to represent the block\r\n    var tempBtnId = \"screen2block\" + msgName;\r\n    button(tempBtnId, msgName);\r\n  }\r\n});\r\n\r\nonEvent(\"generateHashButton\", \"click\", function() {\r\n  var blockString = blockToString(BLOCK) + \",0\";\r\n  var blockHash = SHAHashLibrary.md5(blockString);\r\n  setText(\"hashTextBox\", blockHash);\r\n  showElement(\"goalLabel\");\r\n  showElement(\"startLabel\");\r\n  showElement(\"startInput\");\r\n  showElement(\"amountLabel\");\r\n  showElement(\"amountInput\");\r\n  showElement(\"generateNonceButton\");\r\n});\r\n\r\nonEvent(\"generateNonceButton\", \"click\", function() {\r\n  setText(\"nonceTextBox\", \"\");\r\n  var start = getNumber(\"startInput\");\r\n  var amount = getNumber(\"amountInput\");\r\n  var result = mine(start, amount);\r\n  showElement(\"nonceTextBox\");\r\n  if(result != -1) {\r\n    var blockString = blockToString(BLOCK) + \",\" + result;\r\n    var blockHash = SHAHashLibrary.md5(blockString);\r\n    setText(\"nonceTextBox\", \"Success! The number \" + result + \" created the hash \" + blockHash + \"\\nThis successully solves the puzzle for mining this block!\");\r\n  } else {\r\n    setText(\"nonceTextBox\", \"No result was found - try different values!\");\r\n  }\r\n});\r\n\r\nonEvent(\"verifySignatureButton\", \"click\", function() {\r\n  if(CURRENTMSG == null) {\r\n    console.log(\"Error! Null CURRENTMSG\");\r\n    return;\r\n  }\r\n  //generate hash\r\n  var from = CURRENTMSG.from;\r\n  var to = CURRENTMSG.to;\r\n  var amount = CURRENTMSG.amount;\r\n  var MESSAGE = messageFormat(from, to, amount);\r\n  //setText(\"messageTextBox\", MESSAGE);\r\n  var hash = SHAHashLibrary.md5(MESSAGE);\r\n  \r\n  //verify signature\r\n  var sig = CURRENTMSG.signature;\r\n  var pubKey = getText(\"publicKeyInput\");\r\n  var decryptedHash = decryptSignature(sig, pubKey);\r\n  if(hash == decryptedHash) {\r\n    setText(\"verifyLabel\", \"SUCCESS - the original hash and the verified hash match!\");\r\n    setProperty(\"verifyLabel\", \"background-color\", \"green\");\r\n  } else {\r\n    setText(\"verifyLabel\", \"ERROR - the original hash and the verified hash do NOT match!\");\r\n    setProperty(\"verifyLabel\", \"background-color\", \"red\");\r\n  }\r\n  showElement(\"verifyLabel\");\r\n});\r\n\r\n\r\nonEvent(\"screen2BackButton\", \"click\", function() {\r\n  setScreen(\"screen1\");\r\n  UI(false);\r\n  //Delete buttons on 2nd screen that may have been created.\r\n  //This is necessary for next and back logic to work.\r\n  for(var i = 0; i < BLOCKBUTTONS.length; i++) {\r\n    var msgName = BLOCKBUTTONS[i];\r\n    var tempBtnId = \"screen2block\" + msgName;\r\n    deleteElement(tempBtnId);\r\n  }\r\n});\r\n//RUNS AT START OF PROGRAM\r\ninitializeMessages();",
    "never_autoplay_video": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "text_mode_at_start": "false",
    "hide_view_data_button": "true",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "debugger_disabled": "false",
    "libraries_enabled": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "start_html": "<div id=\"designModeViz\" class=\"appModern\" tabindex=\"1\" data-radium=\"true\" style=\"display: none; width: 320px; height: 450px;\"><div class=\"screen\" tabindex=\"1\" data-theme=\"default\" id=\"screen1\" style=\"display: block; height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255);\"><div contenteditable=\"true\" class=\"textArea\" id=\"messageTextBox\" style=\"width: 190px; height: 150px; border-style: solid; background-color: rgb(242, 242, 242); color: rgb(77, 87, 95); border-color: rgb(255, 255, 255); border-radius: 2px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 130px; top: 0px; margin: 0px;\"></div><button id=\"addBlockButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 40px; width: 175px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 145px; top: 330px;\" class=\"design-mode-hidden\">Add To Block</button><button id=\"nextButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 25px; width: 130px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 190px; top: 390px;\">Next Screen</button><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 320px; height: 35px; position: absolute; left: 0px; top: 415px;\" id=\"label2\"></label><input id=\"publicKeyInput\" style=\"margin: 0px; width: 175px; height: 30px; border-style: solid; color: rgb(77, 87, 95); background-color: rgb(242, 242, 242); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 145px; top: 210px;\" class=\"design-mode-hidden\"><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 12px; padding: 2px 15px; width: 210px; height: 30px; position: absolute; left: 120px; top: 185px; text-align: right;\" id=\"publicKeyLabel\" class=\"design-mode-hidden\">Enter Public Key of Sender</label><button id=\"verifySignatureButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 25px; width: 175px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 145px; top: 245px;\" class=\"design-mode-hidden\">Verify Signature</button><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 185px; height: 50px; position: absolute; left: 135px; top: 275px;\" id=\"verifyLabel\" class=\"design-mode-hidden\"></label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(181, 215, 255); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 190px; height: 30px; position: absolute; left: 130px; top: 150px; text-align: center;\" id=\"verifyTitleLabel\" class=\"design-mode-hidden\">Verify Signature</label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 11px; padding: 2px 15px; width: 185px; height: 45px; position: absolute; left: -10px; top: 390px;\" id=\"blockTitleLabel\">Click on a block to remove it from the chain</label></div><div class=\"screen\" tabindex=\"1\" data-theme=\"default\" id=\"screen2\" style=\"height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255); display: none;\"><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 320px; height: 40px; position: absolute; left: 0px; top: 0px;\" id=\"label1\"></label><button id=\"generateHashButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 40px; width: 225px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 95px; top: 95px;\">Generate Hash</button><div contenteditable=\"false\" class=\"textArea\" id=\"hashTextBox\" style=\"width: 320px; height: 35px; border-style: solid; background-color: rgb(242, 242, 242); color: rgb(77, 87, 95); border-color: rgb(255, 255, 255); border-radius: 2px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 0px; top: 135px; margin: 0px;\"></div><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 320px; height: 55px; position: absolute; left: 0px; top: 170px;\" id=\"goalLabel\" class=\"design-mode-hidden\">Your Goal: Add a number to your block so that the hash starts with N zeroes</label><input id=\"startInput\" style=\"margin: 0px; width: 140px; height: 30px; border-style: solid; color: rgb(77, 87, 95); background-color: rgb(242, 242, 242); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 175px; top: 230px;\" class=\"design-mode-hidden\"><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 154px; height: 18px; position: absolute; left: -5px; top: 230px;\" id=\"startLabel\" class=\"design-mode-hidden\">Starting Number:</label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 175px; height: 35px; position: absolute; left: -10px; top: 275px;\" id=\"amountLabel\" class=\"design-mode-hidden\">Amount of Numbers to Try:</label><input id=\"amountInput\" style=\"margin: 0px; width: 140px; height: 30px; border-style: solid; color: rgb(77, 87, 95); background-color: rgb(242, 242, 242); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 175px; top: 280px;\" class=\"design-mode-hidden\"><button id=\"generateNonceButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 45px; width: 160px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 75px; top: 330px;\" class=\"design-mode-hidden\">Mine!</button><div contenteditable=\"false\" class=\"textArea design-mode-hidden\" id=\"nonceTextBox\" style=\"width: 320px; height: 65px; border-style: solid; background-color: rgb(242, 242, 242); color: rgb(77, 87, 95); border-color: rgb(255, 255, 255); border-radius: 2px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 2.77556e-17px; top: 375px; margin: 0px;\"></div><button id=\"screen2BackButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 40px; width: 80px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 0px; top: 95px;\">Back</button><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 19px; padding: 2px 15px; width: 104px; height: 24px; position: absolute; left: 2.22045e-16px; top: 45px;\" id=\"nonceTitleLabel\">Nonce:</label><button id=\"nonceLabel\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 30px; width: 130px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 160px; top: 45px;\">0</button></div></div>",
    "fail_on_lint_errors": "false",
    "makerlab_enabled": "false",
    "widget_mode": "false",
    "ai_enabled": "false",
    "start_libraries": "[{\"name\":\"SHAHashLibrary\",\"description\":\"Library of functions for Crypto widget apps\",\"functions\":[\"sharedPrime\",\"decimalToHexString\",\"hexStringToDecimal\",\"md5\"],\"dropletConfig\":[{\"func\":\"SHAHashLibrary.sharedPrime\",\"category\":\"Functions\",\"comment\":\"According to this website, this will generate a prime number with 129 bits of info\\nhttps://primes.utm.edu/lists/2small/100bit.html\",\"type\":\"either\"},{\"func\":\"SHAHashLibrary.decimalToHexString\",\"category\":\"Functions\",\"comment\":\"Converts a decimal number to a hex string\",\"type\":\"either\",\"params\":[\"decNum\"],\"paletteParams\":[\"decNum\"]},{\"func\":\"SHAHashLibrary.hexStringToDecimal\",\"category\":\"Functions\",\"comment\":\"Converts a hex string to a decimal number\",\"type\":\"either\",\"params\":[\"hexStr\"],\"paletteParams\":[\"hexStr\"]},{\"func\":\"SHAHashLibrary.md5\",\"category\":\"Functions\",\"comment\":\"A formatted version of a popular md5 implementation.\\nOriginal copyright (c) Paul Johnston & Greg Holt.\\nThe function itself is now 42 lines long.\",\"type\":\"either\",\"params\":[\"inputString\"],\"paletteParams\":[\"inputString\"]}],\"source\":\"//THIS IS THE LEVELBUILDER VERSION OF THIS PROJECT:\\n//https://studio.code.org/projects/applab/YXz154QFd3d2YTiTaX3Va83rbs9fclgbeL3z6jEcwyg/edit\\n//NEED TO BE ON LEVELBUILDER FOR LIBRARY IMPORT INTO LEVELS\\n\\n//According to this website, this will generate a prime number with 129 bits of info\\n//https://primes.utm.edu/lists/2small/100bit.html\\nfunction sharedPrime() {\\n  return Math.pow(2, 16) - 15;\\n}\\n\\n//Converts a decimal number to a hex string\\nfunction decimalToHexString(decNum) {\\n  return decNum.toString(16);\\n}\\n\\n//Converts a hex string to a decimal number\\nfunction hexStringToDecimal(hexStr) {\\n  return parseInt(hexStr, 16);\\n}\\n\\n\\n\\n\\n//  A formatted version of a popular md5 implementation.\\n//  Original copyright (c) Paul Johnston & Greg Holt.\\n//  The function itself is now 42 lines long.\\nfunction md5(inputString) {\\n    var hc=\\\"0123456789abcdef\\\";\\n    function rh(n) {var j,s=\\\"\\\";for(j=0;j<=3;j++) s+=hc.charAt((n>>(j*8+4))&0x0F)+hc.charAt((n>>(j*8))&0x0F);return s;}\\n    function ad(x,y) {var l=(x&0xFFFF)+(y&0xFFFF);var m=(x>>16)+(y>>16)+(l>>16);return (m<<16)|(l&0xFFFF);}\\n    function rl(n,c)            {return (n<<c)|(n>>>(32-c));}\\n    function cm(q,a,b,x,s,t)    {return ad(rl(ad(ad(a,q),ad(x,t)),s),b);}\\n    function ff(a,b,c,d,x,s,t)  {return cm((b&c)|((~b)&d),a,b,x,s,t);}\\n    function gg(a,b,c,d,x,s,t)  {return cm((b&d)|(c&(~d)),a,b,x,s,t);}\\n    function hh(a,b,c,d,x,s,t)  {return cm(b^c^d,a,b,x,s,t);}\\n    function ii(a,b,c,d,x,s,t)  {return cm(c^(b|(~d)),a,b,x,s,t);}\\n    function sb(x) {\\n        var i;var nblk=((x.length+8)>>6)+1;var blks=new Array(nblk*16);for(i=0;i<nblk*16;i++) blks[i]=0;\\n        for(i=0;i<x.length;i++) blks[i>>2]|=x.charCodeAt(i)<<((i%4)*8);\\n        blks[i>>2]|=0x80<<((i%4)*8);blks[nblk*16-2]=x.length*8;return blks;\\n    }\\n    var i,x=sb(inputString),a=1732584193,b=-271733879,c=-1732584194,d=271733878,olda,oldb,oldc,oldd;\\n    for(i=0;i<x.length;i+=16) {olda=a;oldb=b;oldc=c;oldd=d;\\n        a=ff(a,b,c,d,x[i+ 0], 7, -680876936);d=ff(d,a,b,c,x[i+ 1],12, -389564586);c=ff(c,d,a,b,x[i+ 2],17,  606105819);\\n        b=ff(b,c,d,a,x[i+ 3],22,-1044525330);a=ff(a,b,c,d,x[i+ 4], 7, -176418897);d=ff(d,a,b,c,x[i+ 5],12, 1200080426);\\n        c=ff(c,d,a,b,x[i+ 6],17,-1473231341);b=ff(b,c,d,a,x[i+ 7],22,  -45705983);a=ff(a,b,c,d,x[i+ 8], 7, 1770035416);\\n        d=ff(d,a,b,c,x[i+ 9],12,-1958414417);c=ff(c,d,a,b,x[i+10],17,     -42063);b=ff(b,c,d,a,x[i+11],22,-1990404162);\\n        a=ff(a,b,c,d,x[i+12], 7, 1804603682);d=ff(d,a,b,c,x[i+13],12,  -40341101);c=ff(c,d,a,b,x[i+14],17,-1502002290);\\n        b=ff(b,c,d,a,x[i+15],22, 1236535329);a=gg(a,b,c,d,x[i+ 1], 5, -165796510);d=gg(d,a,b,c,x[i+ 6], 9,-1069501632);\\n        c=gg(c,d,a,b,x[i+11],14,  643717713);b=gg(b,c,d,a,x[i+ 0],20, -373897302);a=gg(a,b,c,d,x[i+ 5], 5, -701558691);\\n        d=gg(d,a,b,c,x[i+10], 9,   38016083);c=gg(c,d,a,b,x[i+15],14, -660478335);b=gg(b,c,d,a,x[i+ 4],20, -405537848);\\n        a=gg(a,b,c,d,x[i+ 9], 5,  568446438);d=gg(d,a,b,c,x[i+14], 9,-1019803690);c=gg(c,d,a,b,x[i+ 3],14, -187363961);\\n        b=gg(b,c,d,a,x[i+ 8],20, 1163531501);a=gg(a,b,c,d,x[i+13], 5,-1444681467);d=gg(d,a,b,c,x[i+ 2], 9,  -51403784);\\n        c=gg(c,d,a,b,x[i+ 7],14, 1735328473);b=gg(b,c,d,a,x[i+12],20,-1926607734);a=hh(a,b,c,d,x[i+ 5], 4,    -378558);\\n        d=hh(d,a,b,c,x[i+ 8],11,-2022574463);c=hh(c,d,a,b,x[i+11],16, 1839030562);b=hh(b,c,d,a,x[i+14],23,  -35309556);\\n        a=hh(a,b,c,d,x[i+ 1], 4,-1530992060);d=hh(d,a,b,c,x[i+ 4],11, 1272893353);c=hh(c,d,a,b,x[i+ 7],16, -155497632);\\n        b=hh(b,c,d,a,x[i+10],23,-1094730640);a=hh(a,b,c,d,x[i+13], 4,  681279174);d=hh(d,a,b,c,x[i+ 0],11, -358537222);\\n        c=hh(c,d,a,b,x[i+ 3],16, -722521979);b=hh(b,c,d,a,x[i+ 6],23,   76029189);a=hh(a,b,c,d,x[i+ 9], 4, -640364487);\\n        d=hh(d,a,b,c,x[i+12],11, -421815835);c=hh(c,d,a,b,x[i+15],16,  530742520);b=hh(b,c,d,a,x[i+ 2],23, -995338651);\\n        a=ii(a,b,c,d,x[i+ 0], 6, -198630844);d=ii(d,a,b,c,x[i+ 7],10, 1126891415);c=ii(c,d,a,b,x[i+14],15,-1416354905);\\n        b=ii(b,c,d,a,x[i+ 5],21,  -57434055);a=ii(a,b,c,d,x[i+12], 6, 1700485571);d=ii(d,a,b,c,x[i+ 3],10,-1894986606);\\n        c=ii(c,d,a,b,x[i+10],15,   -1051523);b=ii(b,c,d,a,x[i+ 1],21,-2054922799);a=ii(a,b,c,d,x[i+ 8], 6, 1873313359);\\n        d=ii(d,a,b,c,x[i+15],10,  -30611744);c=ii(c,d,a,b,x[i+ 6],15,-1560198380);b=ii(b,c,d,a,x[i+13],21, 1309151649);\\n        a=ii(a,b,c,d,x[i+ 4], 6, -145523070);d=ii(d,a,b,c,x[i+11],10,-1120210379);c=ii(c,d,a,b,x[i+ 2],15,  718787259);\\n        b=ii(b,c,d,a,x[i+ 9],21, -343485551);a=ad(a,olda);b=ad(b,oldb);c=ad(c,oldc);d=ad(d,oldd);\\n    }\\n    return rh(a)+rh(b)+rh(c)+rh(d);\\n}\",\"originalName\":\"SHAHashLibrary\",\"versionId\":\"oZPIq0BmLtKk3NCUaoZ2_bI.g5yh.Rfp\",\"channelId\":\"HwYXbqSfVols5oWA-aR-Ag\",\"fromLevelbuilder\":true}]",
    "long_instructions": "# Building Blocks and Mining\r\n\r\nUse the messages below to build your block, then attempt to mine it. Make sure to verify the signature of each message and avoid adding duplicate entries into the same block!\r\n\r\n\r\n| Name | Public Key |\r\n| --- | ----------- |\r\n| Aliyah | 13202 |\r\n| Kai | 38625 |\r\n| Ximena &nbsp; &nbsp; &nbsp; | 42863 |\r\n| Miguel | 748 |\r\n| Destiny | 26742 |\r\n\r\n----\r\n\r\n| # | From | To | Amount | Signature |\r\n| --- | --- | --- | --- | --- |\r\n| A | Aliyah | Kai | 10 | b7353e48a2db69e0685b1c2c6c183a8d |\r\n| B | Ximena &nbsp; &nbsp; &nbsp; | Kai | 10 | 91bb8899cfa4728c0d8adab576752c55 |\r\n| C | Miguel | Kai | 10 | 6ba88c18e35d39b168520c9671dcece4 |\r\n| D | Destiny | Kai | 10 | 0825b0b51c3e0fb221c9690ecfb9aa9f |\r\n| E | Kai | Aliyah &nbsp; &nbsp; &nbsp; | 40 | ca1e5a2fda5c77fdd3a18d15cba7858c |\r\n| F | Aliyah | Kai | 20 | ab33ef97c534f4cc3ab178c518864b69 |\r\n| G | Ximena | Kai | 20 | 9f971a991de0223ba2f5ab352f13b6f4 |\r\n| H | Miguel | Kai | 20 | 7d7d067dee2e057000aaf7256dc3f6b7 |\r\n| I | Destiny | Kai | 20 | a5bb974b9da0352603667883dbf39d98 |\r\n| J | Kai | Ximena | 80 | abfe2ed308b5a4e72c88a2d95f25b33f |",
    "preload_asset_list": null,
    "encrypted_examples": [

    ]
  },
  "game_id": 41,
  "published": true,
  "created_at": "2022-06-16T23:32:12.000Z",
  "level_num": "custom",
  "user_id": 14639,
  "audit_log": "[{\"changed_at\":\"2022-06-16T23:32:12.323+00:00\",\"changed\":[\"cloned from \\\"Crypto - Bitcoin - Scenario 3\\\"\"],\"cloned_from\":\"Crypto - Bitcoin - Scenario 3\"},{\"changed_at\":\"2022-06-16 23:32:58 +0000\",\"changed\":[\"start_blocks\",\"long_instructions\",\"preload_asset_list\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-16 23:33:53 +0000\",\"changed\":[\"long_instructions\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-08-17 23:25:13 +0000\",\"changed\":[\"embed\",\"start_blocks\",\"long_instructions\",\"preload_asset_list\",\"contained_level_names\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>