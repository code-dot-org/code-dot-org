<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene about dog and cat breeds using a list of dog breeds and a list of cat breeds.\r\n\r\n##In PetScene.java:\r\n\r\n1. Write the method `combinePets()`(#e7e8ea) to create and return a new list that combines the list of `Pet`(#e7e8ea)s in `catBreeds`(#e7e8ea) and `dogBreeds`(#e7e8ea).\r\n\r\n   * Call the `sortCombinedPets()`(#e7e8ea) method before returning the new list.\r\n\r\n2. Write the method `sortCombinedPets()`(#e7e8ea) to sort the `combined`(#e7e8ea) list of `Pet`(#e7e8ea)s in alphabetical (A to Z) order using a selection sort, insertion sort, or merge sort.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Dog and Cat Breeds",
    "bubble_choice_description": "Create a scene about dog and cat breeds using a list of dog breeds and a list of cat breeds.",
    "thumbnail_url": "https://images.code.org/3fd66866dd4fb3b002f0721143ff6f81-pets.png",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.util.ArrayList;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    ArrayList<Pet> catBreeds = Pet.getPets(\"catbreeds.txt\");\n    ArrayList<Pet> dogBreeds = Pet.getPets(\"dogbreeds.txt\");\n\n    PetScene myScene = new PetScene(catBreeds, dogBreeds);\n\n    // TO DO #3: Call the combinePets() and createScene() methods.\n    \n\n    Theater.playScenes(myScene);\n    \n  }\n}",
        "isVisible": true
      },
      "PetScene.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.util.ArrayList;\n\n/*\n * Represents a pet scene displaying images of cats and dogs\n */\npublic class PetScene extends Scene {\n\n  private ArrayList<Pet> catBreeds;    // The list of cat breeds\n  private ArrayList<Pet> dogBreeds;    // The list of dog breeds\n\n  /*\n   * Constructor to create a PetScene with\n   * the specified lists of cat and dog breeds\n   */\n  public PetScene(ArrayList<Pet> catBreeds, ArrayList<Pet> dogBreeds) {\n    this.catBreeds = catBreeds;\n    this.dogBreeds = dogBreeds;\n  }\n\n  /*\n   * Returns a new list that contains the elements in the lists\n   * of cat and dog breeds into one list in alphabetical order\n   */\n  public ArrayList<Pet> combinePets() {\n    // TO DO #1: Combine the lists of cat and dog breeds into one list.\n\n\n    \n  }\n\n  /*\n   * Sorts the list of pets in alphabetical (A to Z) order\n   */\n  public void sortCombinedPets(ArrayList<Pet> combined) {\n    // TO DO #2: Sort the combined list using a selection sort, insertion sort, or merge sort.\n\n\n    \n  }\n\n  /*\n   * Creates a scene that displays the images of each pet\n   */\n  public void createScene(ArrayList<Pet> breedList) {\n    for (Pet thePet : breedList) {\n      drawImage(thePet.getImage(), 0, 0, getWidth());\n      setTextColor(\"white\");\n      drawText(thePet.getBreed(), 50, 200);\n      pause(0.5);\n      clear(\"white\");\n    }\n  }\n  \n}",
        "isVisible": true
      },
      "Pet.java": {
        "text": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Represents a pet\n */\npublic class Pet {\n\n  private String breed;       // The name of the breed\n  private String image;       // The image file of the pet\n\n  /*\n   * Constructor to create a Pet with the\n   * specified breed name and image file\n   */\n  public Pet(String breed, String image) {\n    this.breed = breed;\n    this.image = image;\n  }\n\n  /*\n   * Returns the name of the breed\n   */\n  public String getBreed() {\n    return breed;\n  }\n\n  /*\n   * Returns the image file of the pet\n   */\n  public String getImage() {\n    return image;\n  }\n\n  /*\n   * Reads the pet information from a file and\n   * returns an ArrayList of Pets\n   */\n  public static ArrayList<Pet> getPets(String filename) {\n    File myFile = new File(filename);\n    Scanner fileReader = createScanner(myFile);\n\n    ArrayList<Pet> tempPets = new ArrayList<Pet>();\n\n    while (fileReader.hasNextLine()) {\n      String currentLine = fileReader.nextLine();\n      Pet currentPet = createPet(currentLine);\n      tempPets.add(currentPet);\n    }\n\n    fileReader.close();\n    return tempPets;\n  }\n\n  /*\n   * Returns a Scanner object to read a specified File\n   */\n  public static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Gets the name of the breed and the image file\n   * from currentLine and returns a Pet object\n   */\n  public static Pet createPet(String currentLine) {\n    int comma = currentLine.indexOf(\",\");\n\n    String breedName = currentLine.substring(0, comma);\n    String imageFile = currentLine.substring(comma + 1);\n\n    Pet temp = new Pet(breedName, imageFile);\n    return temp;\n  }\n\n  public String toString() {\n    return breed;\n  }\n  \n}",
        "isVisible": true
      },
      "dogbreeds.txt": {
        "text": "Australian Shepherd,australianshepherd.jpg\nMaltese,maltese.jpg\nPapillon,papillon.jpg\nShih Tzu,shuhtzu.jpeg\nWest Highland White Terrier,westhighlandterrier.jpg",
        "isVisible": true
      },
      "catbreeds.txt": {
        "text": "American Wirehair,americanwirehair.jpg\nEgyptian Mau,egyptianmau.jpg\nKurilian,kurilian.jpg\nSavannah,savannah.jpg\nSnowshoe,snowshoe.jpg",
        "isVisible": true
      }
    },
    "starter_assets": {
      "americanwirehair.jpg": "ac2e6e75-6458-48b6-89d3-45fddf3d63d7.jpg",
      "australianshepherd.jpg": "1a575f01-7360-4f18-bf06-f747282d56db.jpg",
      "egyptianmau.jpg": "789c3ed3-ade7-417a-87d3-828b4dd621f6.jpg",
      "kurilian.jpg": "30378226-4212-4c40-a783-aa1a2d60ec47.jpg",
      "maltese.jpg": "045ba4d9-8a3f-418d-8b1e-9c0d7a472427.jpg",
      "papillon.jpg": "7817fae3-6555-46be-8d6d-8c7b1f0f39f3.jpg",
      "savannah.jpg": "6588fbfb-180d-49e8-a4f7-dd6e7eb0372c.jpg",
      "shuhtzu.jpeg": "3786a8e8-05ca-4beb-b04c-2e31e3a9892e.jpeg",
      "snowshoe.jpg": "e3fff741-ab63-43b4-8b9e-191492e778e8.jpg",
      "westhighlandterrier.jpg": "7b4bf04b-a843-4e1d-88f4-bf363c6205e8.jpg"
    },
    "encrypted_exemplar_sources": "axeM8ErT/JagtM3EkSmeyosysAk2fiMrrkNd39e618HCdn2D2c16yUSAicds\n3RB5xWX5AWtU3s+5p8hfOHqlKDscuqPhFh3k4mg3ifvhzMCaU/AovJ59kzsx\nkWP+Pem/GeK68UwiNmnxkWJ4K7hl6pkBRV3WOJ0Ekz4g4ZHCylCfhRo1/enW\nBIBxtzqLH+X35jrWxOIPcXgztbzJjxufATlVz+FyTFRZBxUowpqmsiL7hSsw\nwWUHQgYIWZodUFmruIgLqcjuMsXgwEuILoW654SCtAQubGyUyHrSl5r08Q6Q\nPQPs5vvu2V/yasI4C99HZFjk0usVSeIX/vhHo6A/wunnqbZqM51il8yKQX5V\npjKXJxxa3TSU3HdqeXW9/hwkqpiCsl6vLS/bHxmI8jwYd8p+/Koqq9BSzkxG\nEZrIJfktlH9X7JoAIzqKw0liu8c+nr5E5mHyhZ8UMfz9W5bZu3U5r9zRTDVD\ntztQuhJpTajg/qC9ll/nAFFPrUASg5ISOa9vINP5woPyPVRdbvSL3Wbgv15O\nwtJVF6Mg+xjlx51+MbcXePn4s9KnnfpUZVOC6Kl3+wI6RJhFXoxav19i92Kx\nHmVU0R8ae752RT4h+Vlf84NB2dy2Qwst8vh+D2wdPN6trGeUyEw7hYaO33z9\n7+DKQToHtL7mwfBiW6RzZFHCpM+Fu10gms9hLXW+o/xZd0h5wYrXqjdQJsLI\nzGcEXzXsSzDMNDclbD/Yy57aYMrgcR60eNgn8DsXndIK3esWXMNq6VtjHOFf\n8nw7bllzdkGo78cpF9hIiqksnFUPzN6fC29VhpcBBnIfCfltaRtcikksosZ1\nFSqJBIbXHoG6r8rInWhZJE4gBGPlqcdaV6SCgzQxbCxtWCzqqh63cQcEVT8P\nHdWvg30Lzu5TthqfvB/LGB+CzlrEkGn0OlaRDtOrLElvAtQfFpQ1S/mjIwbz\nFOCPX7VjPNDJQaheZucrAM8V6ut4VEqk/Hxu2PvvIizfFjSOEpBMYhe/naVs\n6lolkIvCisIMCtIXwsN6Lgon7s4RAVnAtTItsWQKeJLX5SFhlAYYe1/Cqd0L\nSZK7UUbbcWW8XJlPSvbmaxbgzUA+LQYVFnt7so6Ycy45+3dBK6fbNt4ZnaCs\nmUEiNu/A+GNfChPx2telyuFzIzx+SUpswvtxSw+EN/G9PuvYJeG0e7lnMDh/\nIsY4MJ+sQrLGXtKR2UbM7djluJImn3rtC+SdkEzi2Xx2m7+Q7aa0rHlZwnBo\nAiUnUS6MvQ7+D44GynOf+QvzO5lupmuvDY4SNtSRhqfvjNxU/5bmUvEg2Cr0\ntD/sTSJeJeJXbTCKZnQyEg1JSai0dYB659naTXdCWGXX781+R0v4bgarho5w\nVJG+phmfd3ns/HdWJsjQw+UTgkJa1vafEDZOHuxlTo3uvLosWbGPVFOGij1R\nZ4oi5dBSsmcuEiXBRUSYeMv8t4MxxMTv5Kpa3Jy67NsXlLx+X6VVeSfW2T7l\nAtfveky2L//CInS1QCF9p/PDGB5eOOK4Fa6jcypD4OONNgxoTcHUzj70CNcF\nZqR+cQNfRkTrm+C5LAhW+pcEWEFRz7m4/yIVD3kM+Eu6xT3SO3ejnr2rlpgH\n6GofE8rkMnrVAmF8xpjVbrQ62y3YEhMpElpWwAhxKE+5u+7b3y0mYwbLj4Jz\nqxT6+qCyGP0NM5W5VHQXQh2mm2FfBXsTH9leBvl3ZI1IfeaLj4d++tCtfbR2\nAaex/MC6Ph7ysmsFGqGA9oejF0XdqVk7LXSzXAHv9jNQhZHgp07XzwzVOOB5\n7Pz69uRTiab5xOFWZYOFPzjMPKnoQaokUZMEyI520iEq1mdDzXPTknBI949F\nAr7VcF+4U9pUeyk+2azM0jgzy4lmzyzJOJENVPBbQair0A9+8cwxmjRuW30P\nW+up6L08PSL7Ges8Uegt3w889mAgyx7U1WNLdSYV1qxLf7nqKm5lI+1NXRD7\nWnok0I5+tUaeUaIVCA48o0XaXrjAP+RU6MYkjrVp75VOqs6OGl0UhKaCGaRF\n+PTZLaAIGkS+RpIQfSqAUaQEOB8fwGGFqJYBMK5jYUQDKNunT0O9kYMGLBlZ\nJhhySN8BqCLYSwmUOAyi3FIYP963lQkeaUV7rP9OfY+HG1GWKeBVd3TuJeLO\nNz1gEaVZD77v03yXC+vMImakxl5z1f6Mn9v2bkQk32Ejb/TkT+esLoqT8wUm\nFTmFczl3vso6sLB+nIPf+hRF5vKMh2vc9WBDQ7IWkqdSnIRjJL0yijLOP8Dl\nNe8B2nXTU+NCqMrYnzhsadKpKeHLGPeyrr83Iy3Lo4Vclt2X0+N8y41qIzhw\nvinCkpZcljSvX/cLDNiRl4nanI5BzikZHzuJsHJgVm1Z1XWZ+1df2NARM826\nZDUi7FIAGZlPOMLUBV5VtpP5VcLXhWxJZton0Svx+h2yY1+3tkyg9m8SZTtk\n4bSUm6EWrjJAwu5jNSDtJpCpc1QxO2Yxs6KVSuiWW4loaBMRIsmbBs6uiGwu\nJxZ7O6TGtapBR41ZHu6aTkU/E2yu7cq0A+DtmVmQlWaYeUPyOmZtO71Wp3AJ\nB6tfbEFeLgVu4pkH0W0KsYVKUfr8y7R4SqKLjejk6utYx1x7zXdRt0Uz/We3\na/TtReXgiXJie+P6N7IYdTDCJ4WV4j6h8YiVqzibN18pi2fO17yCMsDZD4lc\nKJhqnElud7tAj6Yg/fABszUjzS4tPADzDDgqztDbz5LQLvoHrG4IS/IyKjnO\nX7AWgxrlij+4NGZsStQbQj1pF7Kb3RIhjV7nYkS+vbyO+zlGTD2iUUPGdj69\nALlOg5AZGH1GSTSodWjD7PC2a9B83lcNwGHu9RZBz0CCIfgNZe0YECuf07Pd\n6L9dX+JU+Y1HooCPUVeVUN/aDD8PwJIT8VEFR6m17Cg0tJWyrasPMyuCQ67v\nBlPpS5VuSLOzJgt62VQZBftK0KRNv6nMlxRGL1NarHpnUNRvZBNKlR8KagxW\n8PD5bP7JCOk1y3AnAwR15Ggba9uIO6R1ItD4ZXUcG1nmeJVITsua1ZB34zE4\nCcTCVIIQW4yEHGs5bGdIRLaqKqbTTgemo8QAE0aEbpCKBny4cvqmHZansGkd\n88rMo/3U9pOlDvQJAQjYMGH+oWGU+koFi+3VnjM6R2KzBp+G57th/bu3rf+q\nTDd3Ws/6k5Qy30HvTo6FzzjSSRZWxVETm1LjFBs2GjozGmiPjpweuUqKnKQh\nf8pN+XilZFiq1euea0riVk29GxSDYiNzPyZ8pchBRnVWQRoGRSm6H2Kt/gWO\nY9asQff3QGK7jOPjKywL9cafGmQirsMtJiSH6Ap0p12uNH8+jucemx0nvaDC\nfOJIFtkMNHTBejcpCbpgW56kk9sgQ3OGcgmrF4QH/PkK/UjJSN1NfdU0d/CI\nwoxV98pWXNiyqER75qilNsNfbtroRWtLcG2EgN9yBXjajdHEolXJBJkGKrBI\nEAj5O21iS8S/SERFeQg0GlIPefoOVdMJCkn2g1rXO4mDztfixzx+h35EH21T\ntG1SC0MKW/f9gNYc9sQ85oWLLUnAIPZSiEk3Uz62+04GOdN/3TmFgbyS+HwL\n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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-04-18T19:46:29.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-04-18T19:46:29.452+00:00\",\"changed\":[\"cloned from \\\"CSA U8L8-L3c_2022\\\"\"],\"cloned_from\":\"CSA U8L8-L3c_2022\"},{\"changed_at\":\"2022-04-18 19:46:31 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-15 21:08:29 +0000\",\"changed\":[\"csa_view_mode\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-16 14:41:08 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-17 22:57:59 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-18 14:29:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-18 14:38:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-18 14:41:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-18 14:46:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-18 15:12:38 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-18 15:13:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-18 15:13:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-18 15:16:11 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
