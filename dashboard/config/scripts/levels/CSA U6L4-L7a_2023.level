<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Store</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to store products available in an online marketplace.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Store</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Product</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Product</code> objects\r\n\r\n* a method called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addProduct()</code> that adds a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Product</code> to the list\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">StoreRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Store</code> object.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addProduct()</code> method to add products to the list.\r\n\r\n3. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> and using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">add()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Online Marketplace",
    "bubble_choice_description": "Create a `Store` class that contains an `ArrayList` to store products available in an online marketplace.",
    "thumbnail_url": "https://images.code.org/cb2c5a4c908c0dc153157559ba7ab64a-laptop.png",
    "encrypted_validation": "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\nfS/VbnxZlJP79xKD2/gRTviif6I=\n",
    "start_sources": {
      "StoreRunner.java": {
        "text": "public class StoreRunner {\n  public static void main(String[] args) {\n    Product prod = new Product(\"phone\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Store object.\n     * -----------------------------------------------------------------------------\n     */\n\n    Store myStore = new Store();\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the addProduct() method to add products to the list.\n     * -----------------------------------------------------------------------------\n     */\n\n    myStore.addProduct(prod);\n    \n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n    System.out.println(myStore.getProducts());\n    \n  }\n}\n",
        "isVisible": true,
        "tabOrder": 0
      },
      "Store.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a Store\n */\npublic class Store {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Product objects\n   * -----------------------------------------------------------------------------\n   */\n  private ArrayList<Product> products;\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a constructor that initializes the list to an empty list\n   * -----------------------------------------------------------------------------\n   */\n  public Store() {\n    products = new ArrayList<Product>();\n  }\n  \n  \n  public ArrayList<Product> getProducts() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write an accessor method that returns the list of Product objects\n     * -----------------------------------------------------------------------------\n     */\n    return products;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a method called addProduct() that adds a Product to the list\n   * -----------------------------------------------------------------------------\n   */\n  public void addProduct(Product newProduct) {\n    products.add(newProduct);\n  }\n  \n}\n",
        "isVisible": true,
        "tabOrder": 1
      },
      "Product.java": {
        "text": "/*\n * Represents a Product\n */\npublic class Product {\n  private String name;\n\n  public Product(String name) {\n    this.name = name;\n  }\n}\n",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    ArrayList<String> fieldsList = fieldsToList(Arrays.toString(classFields));\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    fieldsAsText = fieldsAsText.substring(1, fieldsAsText.length() - 1);\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    }
  },
  "game_id": 68,
  "created_at": "2023-04-03T13:58:54.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-03T13:58:54.577+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L6d_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L6d_2023\"},{\"changed_at\":\"2023-04-03 13:58:56 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:34:22 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 19:39:22 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-03 03:19:05 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:21:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:21:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:23:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:23:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:24:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:30:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:31:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:31:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:31:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:32:45 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:35:53 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:36:38 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:36:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:36:53 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:36:54 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"}]"
}]]></config>
</Javalab>
