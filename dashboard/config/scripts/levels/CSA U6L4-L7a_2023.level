<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-03T13:58:54.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Store</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to store products available in an online marketplace.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Store</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Product</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Product</code> objects\r\n\r\n* a method called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addProduct()</code> that adds a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Product</code> to the list\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">StoreRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Store</code> object.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addProduct()</code> method to add products to the list.\r\n\r\n3. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> and using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">add()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Online Marketplace",
    "bubble_choice_description": "Create a `Store` class that contains an `ArrayList` to store products available in an online marketplace.",
    "thumbnail_url": "https://images.code.org/cb2c5a4c908c0dc153157559ba7ab64a-laptop.png",
    "encrypted_validation": "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\nfVc/ENhSYbc9WJcPiIhv1Y/rCdtNaMT9+aYAwgk=\n",
    "encrypted_exemplar_sources": "QcmKwIwT7oZtZ7knWEBALxSVINRSVsmCAD+qoZ9ubEcvfH6Nu9tAM6GcH0Uo\nxWD6GXvPS9qRaWt8HFxcBsft9Q3uhEeTm+Z4ievxHTJuwaMBKWtXTtSPYxGy\nqTO0VM3odHdKR5xEHprG9nBUB66INfScewN3En02zUZjVkeV++4P71iY7SuQ\n4EHNOrenfxI2JVwB+HNne+HHcst+4UzyB/tf45EoMhSK12JrXwZOzt7dpE4D\ncBInoCeJVypNTSZdxgYZvBY82cFQK1cV48zm2S+bznyEU2LmoBci4t5ex7Sy\n0QiS57AbvEO95vn6K3HeenhSkFavmI+fCO19+MPBikxVRkBPa61IITkNGsIW\noXNxmj3dCUB4GMLcwFbvCoXc2bNZASV16yA08AYoD/P+pk7LV8mVXv6PAFIa\nOHLxIJKUAIkJff9EHlOtj/Yv8dtLyacuIu6m4QUrSQjD/kgrCWjc9uANr9/v\neFVDjPMVXjnJty8IU666D28F7SV1+eJsnJH+tAA81kI4qr2xFuYxTrW6FzVY\n+KBBwK3JDgqjOY2ySShqsfGb8L29uTmvWTbccEufSEJJ7DEJIxpwufUj93U0\nnYSIDLSWZMU1kRqqbk26fXTB76YsJJxX8ae2sJ8scHoHxj9+0eYr7eR2GaTc\nKUXyI9XF6rxa6IYOvZqZ22ieyDlH7YkmlWzt3GDhqvJhSipDuvhX4ipbo3Hi\nczTUgasRAeVDjwpVFWQDI83doyWHptUMh0s+OjzQWk67JBanpCK6DbLtbuGp\nRaSKuiibFIBA/CVBWZD/fI6ViFNYEt65cfKwP/RNsJzUlqLqNErG8FH95RE4\nv1ClUKiF0eMms6Ns1YZYLCkxtudC7N+q9BEredvrQBFM9gkOrGwM/F1xtwQo\npxoImVTppRo9RtMS5YPTwn7yozTw8X9B+OwPXnZg0a5J8JuR7msWRaywYF8j\n0UFTc0cGl6UW0jjDeT6pi9/rNgX+WS1VP3pBC/v4qeNelQrilemdFg6y03dt\n8HGXJj5oeQI0YgiOONf6P+s5bC9BxAfpwP4zJd/TtDkUwJABlo/x5phJ3RP/\nEZs894i9J+QmDV2PDYJk4ElzgBG3mnCycwVCbH1OIjCCFdLr52C0EcTtKZdF\nfDuaZG0TncC6+3tZFdU+L1CEEWEUtMb+LbjhE1KxuDa/5Eul+BBtrMiZo3F+\nJSnx3DcMIvGqINR7Wi8FKXt3cMG4XIcQKLNoh+X6NQAHHehX25b3E/O26Nbl\npgUTZEZFjrdsZDU+BDlzGGbYVw94xI56/mKUOGHPAQYe7wcOO3md2VhrNRs4\naJwErK841Fp40ZWkSmaISG73d+sikxSNvfG9VlaVvTtC1CBasFUbd+fwNzGu\n/6q8qa7QlXvOQxaZJbTDFl8AIiOJrAVaxwt2kS91j6dQZeeMtsEKWgnklYl9\nCu8rQeUeVAirb9470iYw8kw/FgC5Px6UtAbhoX/5WxP1sUNSjsGk5Jwj5XNJ\n+Raa0fZxNUOD+yFBvXh3H3Lv1LVkrCuMCHeqjYXLO3LdHD7bcjuB5ie3r+yz\nssrNtDyOU/EwdF+N6ib3yFOBHjTMJFjqFaRnsywZN0RENv6b8K/hp/7IU8dp\nlDJ2Fkx78Y3qfIYeJYH6adS6rbSoyBQ3WEtCkI7jiHp8wLXcuPuiSxxXCT6B\nlqAjQBuvlQepQvIYzrszNwWufIT5NbENVFiqKCiZrcfrYxvbPs3UfTIac453\nSf7ZAGzIJtkMFSwoOhq7flAWuWIjQAyvhRAJcioMy6/NPq53Z5dMXBtGnK/x\numVlzjXz/P0IlmvN8wG+HIb3y+J4HbXn2pH6ACLeUt8mVc1t8wxAqJDDuUf1\nU6TZ8eUpZ8Viblts6k5Q8lJRd5ANJBahU/DQweim56DYYZa6zMuaABzZL6C5\nEcsxYvqHElvVMVQVc9KQINWdgN6fUZKFB3UwydW2At1Al1dCWEFiVtggtJNB\n+8spmcztBGxUfHAh/Ettpzi3qFEmoei2r2LE9OPHWByP42QsZyOBFx6DcdKU\nt59DKG94y9Yht3hSbMtYsC1Uqu5RVweBQqC3M86d0pSDdR4lQGYnh34Cfk33\nLQmcuoNDF1/4kWuiC3kQi4FCmlVZmP0NHYC5FIE19UxNGSoNpy76D1Xkk03E\ngtSfffesGzg80IxTCgMzKA//UAF+7ug599NU4GB9pEH4GVer2R1Z7pIAbP70\nSOryvQntsCsIJx2m6CLi07ifsq4aIhZdie5Kvr9A2NtIZ7SDFv6FTWLYB0X7\nEIQ4CqlqhKLzIniVHLehmJYA/0uP0srs8jFI4S6hgIcLBQ9Xmamg55GPI/7c\nu7ZMhSzjDA6e480F/Jm+Wkf6L6H1vRDCuO0tULYm23CakZGwqS2HiyCFlANC\nL0I0P6hN2Cm+OgP6o+x274XUr+MTfsEKB6YiY3xAu+enYcDxfnFTricsapTD\nubYuTxtFc4U2kvMDwclW93SVgOgg9OIW19XPukHlaFhPlR8SYN6wTXJo99e1\nUU+QsT8Uy1Q6kSasb5vwQ4f2pu7MN8hsdr/FJR8KAhvl72EMW1o6LFyPU05g\nPnAH8kjh7OuUiIq5hzN7JiKSeXCZyGHil9jxkawkVGHtarrhqfloPBHZDwYX\nB73B3g6Fg+6aDbkglRl3D9QwREbPHkiLEcE9FM8Z/VMN8ycIjK3XVQ0izHev\nU/LUurDe+NabTh3fpfCdKxE8D+g9q/jNUkHAiL2DPmoPnRJlECz7BSMAHsFn\ngpMGKPuNmI3QPFi2D30NvHgYlu6Yt5A08wC4bz/CfSmYywalHFjhjjaxaaT4\nkx3VCBNw2FvdQc9KT/4CT69nG6NRqnZyZLHjJZJckD+aeI69ObqV9hZ9hGfN\ngfdDabyLnKMp671sdOSfnqiPmhm9xjyXZDU0c+IaFQXceULuXo7QUQPpJBJm\nkRdMJ17YdeWor0rWm2wzxdxfS+I+6gw+t8D1Z9UrcmS652RYarbXSpcCK/f9\n/Nbw1GAhfv8nUHrc3SZOKKgbdZU7+4tBsKAgSU7RvV0tnjqAQObccTLKfJRR\nnqABTyKApE34AGWZEFIAVMfMlEd9Gt7qzTrEs4Sn142W9lkgdrDDZpb+ggFj\n4+De8hVWg3hTyz0NI1m7LfEDLMGX7x5GhAXm8xBwy5YygHlZAylxeJsw5JRJ\nw/djrMXkHl/iasne09HkjhISImZBPtjwKBcq/W4xcuY1asamwERRCz5prFyT\nWOf5gDx9TlceOLNrv6VlbsRmQxq7wetcXNcWOQg3LagIpl8duMWWaRLmVOd8\nVEflscDbkXo+STwbz0tthRUfKaema9juUz1ffsZo3UD1FYsnCLgFtfFEz/Jp\nKSIusvBbYpwfNCSLoEeBMKW2awldCbG6nct5eBtlXjxvuHeOjFo7bA36RB7R\nzOCcYKl0PZlGndc/KswZTvnZYlcoOk/l88Nf55jAJe7kVwdMz/v8FpiUXpue\n7qoq5xEYv5w272qBvPGHbbI4xwBG3YjjMC61mLleIKQod1JOhnZdfsEPTeLD\nbakMwo/3LfCJxuNWZKxfjz/6cEXeiomON1jYmgrKCMVDRxa64zTIIiVgJFlk\nV3TI17SZUdY85T8pwNHXcerdeHjdN5G1NX08s7aiixlsfREFxHptfcQnEGQd\nqI9CUz7A1nEixRkAKwBN81tkgplW2+hWFoMzMmkJ7jIE/mScFwjdQZT8FwhU\nQpLqLKkBovadODNSGQmPFSwkg7sy6oPm9nL/jcJJ8kFfxXGiq8RjqmmeQjKZ\nw4zguKksecXM9a1jzasQpx1MsZHUcjf4PDQVw9PCaxXav7jNjSFHwVyc2EJu\nSR+nONGLDhyt6E0C5XCg1Roh/bRSqATsv4k1lzN6mjtwYMAF6NM/vU5aoKTa\nKNnGQCxoZDxyBiVSBgbCyLJr1pMauWcAMA6Y6cp9kTLqzAUYzbGzUOLXnXZM\nVn0SwlTjYUFvRCfucAE95JyY52lArH4l2nVRt68wlSfbY7gpiFNkfnAXyoBb\nXRTTGrJT1jKVdBKct/j6BNG0xu/iE3rye8bjHvypYf3LBz5ECNETxENWWAHR\nVwv77hn2cS9x/EXzafvDxOm0l3eelRwED4WRDum1qltYNuWdIsdVpoZ48xRz\ncXYecLppRozegt2wv8vWbUm3z15Hgp+y7oZ8mT645q/taUTAwmyS+ofV9gmB\niVNShOUrfp37/KzXCpto4PJMrNyw/D3l7AQABTu8Vl1OTsWlRsdodc3+Q2fL\nY9L9Hsrt4EbeJLqe65xuL4B0G7jsUPFm8QcZ6sYNr8H8al6aThl/9e1Jwg2a\ny7gKlDAOtpuj89MUIfL9FNkD3Bh5AQS6mczovTd/cBGtn2z5UtEIWge8XKZz\nF01ksSF9WoWva67Y9Nk9r9UZCc4oAsZZAUzL5pTgQGwxCzHnVdm4JBWwviaY\nYfg1Pz61MVIahFqQwsu1B75//r5ahSlP7FhmXubjjrNs+bFu9KAlUVr+KWas\nXRj8PkOnyfq7hoCghTT5vBFFSriA2/sWabdfpzIddqeKtux0Br34Vgu2pV4G\nOnb90YTgBprxOGEufCPBRLbSbZgi0S//QI1LZdzPo+ooxyHAV2bBBO8y9Nqq\nh+DKrhmdxq7m4aTdLeWGA0mERx8Z3gqqO1dYPllvmqrvXup39eBWd99C1byA\nbedXv0jaV3c19NwDB2HFaYFMAGjLE/IbSCHfowJQS31rfs0pB3cT/vvk1QUd\nti7j0IqWAGjmg3LxF4rWw6Y4xdI2cHxW0AypdmLR7nYmFtdqc12t3uHcybT/\nnoNItO4zOthp0cYla8ViuqRnC7RaN7+r/OpTdTQEU3G4+u+S4eZWlwpZNN6h\n0cxKfZxVB5AvJPO5k9Oneamu0k8H7I2Gw2Rmt5PZNQpalD8AcdZVHsG4wChX\nMz8b6ZhFbCuj6ob81akMs1BoZRed4kQPVwcUBVvAdWQ+NgKZZVZ+QUL/zemK\nbYlg7mqPwQ4y7nfsyyyB72+zpvG5I+OFwqJSeV/HI98JcYEB1VKutbvLoI1y\nenUkWBsWF3y6FiJ/9b8Wk9juOUwZLj4X69bgJB38Rm4mw28kbuWor3w0o35z\ni80Axd+AL0fFq/D0zbA2ETADd46NkyU7yV4PSlIVtopLkagDvE1dTgB8D9cL\nnYh+KUFLCHYFLhE37m1NyYOYVYZMkJFPVnp9A9HTBToZ6NJpU5eM3HdG4Znj\nmROOZiXYvkPk04SK9TUWiq7dIK6gvFUD4tla6W3EVDMLZ51sPdonEFn4tgBc\nsVbBfsqi1TjeqfD1hOltLYNH2j2XX0R+/41AlHCPXkIJqB/7E66jttHO/xTS\nIPgqLs5WGbtm3BVabL00NjdyaPP/vWeZnGVyJPXjBXa1vW4GT0KcgyMkKsEc\nhC7i7kBTwNk/GyiOwGdpmEKBV9KqCxXU60VglaDxDhgEEA8Znac8JfYftESo\nGPND6LwPitO8rJ5f3xccnYMJf4bwzQlEft+aKuFoY4FV2Pw+c273uMTkQrEi\n6g4yGuFbgAzBhCBjPvvrbRHj02OvGPnsw/4vwLSsjmkl1BXXWF3X7srtqc7w\nfSm+QAQqEc0nDsKOETnJraQ16WBZl50Lio+NwsJvr+COXTRdsgBxBOwGpvrM\nl/o4EWPIyuzo5vF514Jl/4neakexkyNBKeTh1DclaABWp3rsEvPILNtHk+g+\nKHAUjys2CVlYjdxu9YVFbBcLNvCsuShptgSVQrDhB2/IDgdKpvEHtQ0odLiO\n4q3y8jAqB+aLTmQkY/22VB3G7E9YK6Tiyu182blkad3Lz3E7fVYnjujl2EUg\ncDkMX2YshzDaDV25x01i24zco3w1pUPjV7+blL/JABO//P9Qx9TB1UMZn8mR\nKlX7KwAPZl2C73P1iYo2LDowlYwSilB5hoqBN8qjdC1XOWlWguhusSSd/UAW\nO6EzuDU0FoP+IAsADGvBaOxIi4t1r05NKQb7Gt8AfQJTLbJ9yxrIs+LrZauL\n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\nbLQ=\n",
    "start_sources": {
      "StoreRunner.java": {
        "text": "public class StoreRunner {\n  public static void main(String[] args) {\n    Product prod = new Product(\"phone\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Store object.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the addProduct() method to add products to the list.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n  }\n}\n",
        "isVisible": true,
        "tabOrder": 0
      },
      "Store.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a Store\n */\npublic class Store {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Product objects\n   * -----------------------------------------------------------------------------\n   */\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a constructor that initializes the list to an empty list\n   * -----------------------------------------------------------------------------\n   */\n  \n  \n  public ArrayList<Product> getProducts() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write an accessor method that returns the list of Product objects\n     * -----------------------------------------------------------------------------\n     */\n\n    return null;\n  }\n\n  \n  public void addProduct(Product newProduct) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write a method called addProduct() that adds a Product to the list\n     * -----------------------------------------------------------------------------\n     */\n  }\n  \n}\n",
        "isVisible": true,
        "tabOrder": 1
      },
      "Product.java": {
        "text": "/*\n * Represents a Product\n */\npublic class Product {\n  private String name;\n\n  public Product(String name) {\n    this.name = name;\n  }\n\n  public String toString() {\n    return name;\n  }\n}\n",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-03T13:58:54.577+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L6d_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L6d_2023\"},{\"changed_at\":\"2023-04-03 13:58:56 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:34:22 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 19:39:22 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-03 03:19:05 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:21:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:21:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:23:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:23:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:24:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:30:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:31:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:31:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:31:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:32:45 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:35:53 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:36:38 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:36:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:36:53 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:36:54 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:53:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:54:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:54:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:54:32 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:55:01 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:55:08 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:55:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:56:01 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:56:05 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:56:26 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:56:34 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:56:46 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:57:41 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:58:37 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:59:43 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:00:54 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:01:34 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:01:41 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:01:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:01:57 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:02:52 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:03:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:03:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:03:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:03:38 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:18:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:19:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:19:23 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:19:28 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:04:30 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"}]"
}]]></config>
</Javalab>
