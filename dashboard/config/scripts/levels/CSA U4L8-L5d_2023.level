<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "## Finding Patterns\r\n\r\nComplete the <a href=\"https://docs.google.com/document/d/1OJIjB4GPp5eqri8qIIceuUGUYl8bzEYXbH3qXIpcg9I/edit?usp=sharing\" target=\"_blank\"><strong>Finding Patterns</strong></a> activity guide to identify the patterns and relationships you notice in this dataset.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "DataRunner.java": {
        "text": "public class DataRunner {\n  public static void main(String[] args) {\n\n    String[] textFiles = {\"code.txt\", \"crop.txt\", \"2018.txt\", \"2017.txt\", \"2016.txt\", \"2015.txt\", \"2014.txt\"};\n\n    DataManager data = new DataManager(textFiles);\n    \n    System.out.print(data.showDataset());\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 1
      },
      "DataManager.java": {
        "text": "/*\n * Reads and displays data from text files\n */\npublic class DataManager {\n\n  private String[] textFiles;    // The 1D array of text files\n  private Data[] dataset;        // The 1D array of Data objects\n\n  /*\n   * Sets textFiles to the specified text files and initializes\n   * dataset to store Data objects for each text file\n   */\n  public DataManager(String[] textFiles) {\n    this.textFiles = textFiles;\n    dataset = new Data[textFiles.length];\n  }\n\n  /*\n   * Creates the datasets and returns the dataset values\n   */\n  public String showDataset() {\n    createData();\n    return getDatasetValues();\n  }\n\n  /*\n   * Instantiates each Data object in the 1D array dataset\n   * using each text file from the 1D array textfiles\n   */\n  public void createData() {\n    for (int index = 0; index < dataset.length; index++) {\n      dataset[index] = new Data(textFiles[index]);\n    }\n  }\n\n  /*\n   * Returns a String containing the values from each Data object\n   */\n  public String getDatasetValues() {\n    String result = \"\";\n\n    // Gets the length of the first Data object's 1D array of values\n    int valuesLength = dataset[0].getNumValues();\n\n    // Outer loop repeats from the first value to the last value of the first Data object's 1D array of values\n    for (int index = 0; index < valuesLength; index++) {\n\n      // Inner loop goes through each Data object to get the corresponding value from each 1D array of values\n      for (Data values : dataset) {\n        \n        // String.format() formats a String using format specifiers. In \"%-45s\", the \"%\" indicates the start of the format specifier,\n        // the \"-\" means the String is left-justified, \"45\" indicates the width of the field, and \"s\" indicates a String\n        result += String.format(\"%-45s\", values.getValue(index));\n      }\n\n      // Adds a new line character after getting a row of data\n      result += \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Data.java": {
        "text": "/*\n * Manages data from a text file\n */\npublic class Data {\n\n  private String filename;    // The name of a text file\n  private String[] values;    // The 1D array containing the values from a text file\n\n  /*\n   * Sets filename to the specified filename and initializes\n   * values to store the values from the file\n   */\n  public Data(String filename) {\n    this.filename = filename;\n    values = FileReader.toStringArray(filename);\n  }\n\n  /*\n   * Returns the 1D array of values\n   */\n  public String[] getValues() {\n    return values;\n  }\n\n  /*\n   * Returns a value at a specified index from values\n   */\n  public String getValue(int index) {\n    return values[index];\n  }\n\n  /*\n   * Returns the number of elements in values\n   */ \n  public int getNumValues() {\n    return values.length;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "code.txt": {
        "text": "CROP CODE\n------\n221\n515\n526\n366\n367\n572\n486\n44\n176\n414\n558\n552\n89\n358\n426\n393\n531\n530\n191\n689\n656\n195\n554\n397\n577\n399\n569\n512\n619\n406\n720\n507\n560\n242\n225\n677\n592\n497\n201\n372\n333\n56\n446\n571\n568\n79\n292\n234\n75\n430\n260\n403\n490\n600\n534\n521\n187\n417\n574\n223\n536\n116\n394\n270\n547\n27\n71\n280\n328\n83\n236\n373\n544\n423\n157\n156\n267\n122\n495\n136\n826\n388\n463\n222\n567\n15",
        "isVisible": true,
        "tabOrder": 4
      },
      "crop.txt": {
        "text": "CROP\n------\nAlmonds, with shell\nApples\nApricots\nArtichokes\nAsparagus\nAvocados\nBananas\nBarley\nBeans, dry\nBeans, green\nBerries nes\nBlueberries\nBuckwheat\nCabbages and other brassicas\nCarrots and turnips\nCauliflowers and broccoli\nCherries\nCherries, sour\nChick peas\nChillies and peppers, green\nCoffee, green\nCow peas, dry\nCranberries\nCucumbers and gherkins\nDates\nEggplants (aubergines)\nFigs\nFruit, citrus nes\nFruit, fresh nes\nGarlic\nGinger\nGrapefruit (inc. pomelos)\nGrapes\nGroundnuts, with shell\nHazelnuts, with shell\nHops\nKiwi fruit\nLemons and limes\nLentils\nLettuce and chicory\nLinseed\nMaize\nMaize, green\nMangoes, mangosteens, guavas\nMelons\nMillet\nMustard seed\nNuts nes\nOats\nOkra\nOlives\nOnions, dry\nOranges\nPapayas\nPeaches and nectarines\nPears\nPeas, dry\nPeas, green\nPineapples\nPistachios\nPlums and sloes\nPotatoes\nPumpkins, squash and gourds\nRapeseed\nRaspberries\nRice, paddy\nRye\nSafflower seed\nSeed cotton\nSorghum\nSoybeans\nSpinach\nStrawberries\nString beans\nSugar beet\nSugar cane\nSunflower seed\nSweet potatoes\nTangerines, mandarins, clementines, satsumas\nTaro (cocoyam)\nTobacco, unmanufactured\nTomatoes\nVegetables, fresh nes\nWalnuts, with shell\nWatermelons\nWheat",
        "isVisible": true,
        "tabOrder": 5
      },
      "2018.txt": {
        "text": "2018 YIELD\n------\n42450\n394802\n83636\n162543\n40387\n77638\n163756\n41637\n20843\n32175\n81926\n70655\n10511\n403413\n463819\n188649\n90828\n94988\n16946\n323564\n7646\n19862\n254577\n156154\n70251\n399155\n112675\n217280\n192407\n196143\n325438\n277845\n181729\n44732\n25986\n21773\n217300\n369910\n13126\n314215\n15168\n118639\n173609\n192376\n285087\n20010\n8401\n7307\n23274\n78239\n88069\n623348\n234238\n145586\n195547\n389998\n22099\n43361\n276305\n41905\n141323\n497624\n256117\n20846\n145124\n86211\n19386\n16941\n26821\n45266\n34681\n154684\n650772\n89035\n678302\n860652\n19404\n212510\n275026\n112565\n20508\n968079\n660570\n43297\n392851\n31999",
        "isVisible": true,
        "tabOrder": 6
      },
      "2017.txt": {
        "text": "2017 YIELD\n------\n35422\n394569\n90613\n145697\n35855\n72365\n158413\n39283\n19927\n31221\n81658\n69274\n10484\n440682\n457741\n189327\n108960\n79590\n12946\n341374\n7560\n17007\n235801\n180875\n72467\n394460\n109266\n199644\n192594\n173738\n331013\n259088\n165889\n44916\n17934\n21927\n171236\n365849\n8206\n342427\n9499\n118754\n182562\n193319\n280914\n24846\n6957\n8441\n22120\n78003\n119732\n609542\n215247\n287640\n173375\n364145\n15131\n50256\n279471\n26914\n165671\n483882\n246796\n17123\n127312\n84147\n21449\n13587\n26713\n45031\n33133\n140097\n573243\n95530\n710812\n824130\n17964\n250811\n348761\n119286\n24759\n886625\n698005\n42158\n421882\n31175",
        "isVisible": true,
        "tabOrder": 7
      },
      "2016.txt": {
        "text": "2016 YIELD\n------\n35061\n391856\n130584\n162618\n36050\n53635\n115204\n41931\n20648\n33480\n81390\n71697\n10439\n438013\n459075\n193669\n86902\n96085\n19079\n338497\n6926\n18162\n260029\n169262\n68047\n389764\n112776\n161683\n193641\n168128\n336587\n280829\n170904\n40730\n26659\n19205\n171133\n371759\n15846\n365324\n15905\n117433\n170175\n194455\n300469\n20448\n10989\n7652\n23677\n77768\n99927\n635033\n247510\n316714\n190715\n365599\n23382\n49661\n283028\n42044\n99164\n486408\n258137\n20461\n146161\n81121\n17458\n16047\n26229\n48912\n34936\n166107\n617277\n94647\n734763\n797242\n19400\n216525\n320931\n122308\n22045\n911398\n661752\n49031\n396338\n35408",
        "isVisible": true,
        "tabOrder": 8
      },
      "2015.txt": {
        "text": "2015 YIELD\n------\n34998\n347767\n97072\n151418\n36390\n86599\n161994\n37083\n19729\n47282\n81741\n69881\n10508\n379913\n414167\n197298\n84447\n74410\n13924\n350849\n8566\n17991\n234661\n158717\n85666\n385513\n111042\n224959\n162698\n181824\n344258\n303062\n168279\n44423\n20440\n20254\n120000\n366443\n12424\n359216\n13895\n105723\n216208\n194476\n291944\n18983\n7523\n14899\n25168\n79087\n111455\n631237\n247290\n204745\n189487\n375837\n18915\n87407\n281901\n12988\n159809\n469000\n190919\n18818\n145075\n83722\n20043\n15092\n25911\n47709\n32289\n175598\n592370\n93783\n692254\n811535\n18212\n227059\n305105\n113571\n24527\n894615\n692326\n45282\n341403\n29299",
        "isVisible": true,
        "tabOrder": 9
      },
      "2014.txt": {
        "text": "2014 YIELD\n------\n43897\n416171\n134508\n145932\n34995\n75023\n187701\n39115\n19655\n40712\n81690\n76537\n10641\n397237\n416365\n187164\n90868\n90085\n14839\n358062\n9068\n17903\n231904\n162005\n74870\n379021\n106954\n249053\n192750\n182191\n340295\n337702\n170855\n43975\n26900\n20934\n155847\n340184\n14914\n353519\n13234\n107326\n162780\n201481\n267697\n17572\n10420\n21627\n24338\n78783\n57559\n559495\n256368\n176359\n189712\n378134\n21376\n43359\n282258\n26068\n147853\n471507\n241257\n18085\n130827\n84919\n17490\n13740\n25886\n42417\n31977\n185697\n565836\n85396\n611797\n785279\n16470\n245277\n280501\n98000\n25963\n971661\n713375\n44138\n334838\n29378",
        "isVisible": true,
        "tabOrder": 10
      }
    },
    "display_name": "US Agricultural Crops",
    "bubble_choice_description": "US agricultural crop data for 2000-2018",
    "thumbnail_url": "https://images.code.org/9ea4f032a0e45caecf801f237f5ede44-crops.png"
  },
  "game_id": 68,
  "created_at": "2023-02-17T19:13:02.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-02-17T19:13:02.943+00:00\",\"changed\":[\"cloned from \\\"CSA U4L8-L5c_2023\\\"\"],\"cloned_from\":\"CSA U4L8-L5c_2023\"},{\"changed_at\":\"2023-02-17 19:13:04 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 13:49:10 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 14:25:13 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 15:32:24 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 15:32:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 17:23:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
