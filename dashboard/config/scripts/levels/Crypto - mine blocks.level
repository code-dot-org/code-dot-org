<Applab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "skin": "applab",
    "validation_enabled": "false",
    "embed": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "start_blocks": "//INITIAL PEOPLE\nvar Dan = {\n  \"name\": \"Dan\",\n  \"private\": 182,\n  \"public\": 65161\n};\n\nvar DeShay = {\n  \"name\": \"DeShay\",\n  \"private\": 28172,\n  \"public\": 59388\n};\n\nvar Thomas = {\n  \"name\": \"Thomas\",\n  \"private\": 38212,\n  \"public\": 61068\n};\n\n//***********************************\n//****DON'T FORGET THIS IS HERE******\n//***********************************\nvar PEOPLE = [Dan, DeShay, Thomas];\n\nvar messages = [\n  {\n    \"name\": \"A\",\n    \"from\": \"Dan\",\n    \"to\": \"DeShay\",\n    \"amount\": \"10\",\n    \"signature\": \"a8f663e96c5b7628731a6b0a596f161c\"\n  },\n  {\n    \"name\": \"B\",\n    \"from\": \"DeShay\",\n    \"to\": \"Thomas\",\n    \"amount\": \"35\",\n    \"signature\": \"c82c0977c893e0bca73f75741a6991a9\"\n  },\n  {\n    \"name\": \"C\",\n    \"from\": \"Thomas\",\n    \"to\": \"Dan\",\n    \"amount\": \"5\",\n    \"signature\": \"339ff3bbcb48e5172e73adcf259f9280\"\n  },\n  {\n    \"name\": \"D\",\n    \"from\": \"Dan\",\n    \"to\": \"DeShay\",\n    \"amount\": \"100\",\n    \"signature\": \"9265ff9345ab44e419d9603ac99d71e6\"\n  },\n  {\n    \"name\": \"E\",\n    \"from\": \"Dan\",\n    \"to\": \"DeShay\",\n    \"amount\": \"100\",\n    \"signature\": \"e1fa08e6850f17beecd7995d7cc680d0\"\n  },\n  {\n    \"name\": \"F\",\n    \"from\": \"Dan\",\n    \"to\": \"DeShay\",\n    \"amount\": \"100\",\n    \"signature\": \"e1fa08e6850f17beecd7995d7cc680d0\"\n  },\n  {\n    \"name\": \"G\",\n    \"from\": \"Dan\",\n    \"to\": \"DeShay\",\n    \"amount\": \"100\",\n    \"signature\": \"e1fa08e6850f17beecd7995d7cc680d0\"\n  },\n  {\n    \"name\": \"H\",\n    \"from\": \"Dan\",\n    \"to\": \"DeShay\",\n    \"amount\": \"100\",\n    \"signature\": \"e1fa08e6850f17beecd7995d7cc680d0\"\n  }\n];\n\n//SETUP VARIABLES\nvar BUTTONSIZE = 40;\nvar BUTTONPROPS = {\n  \"width\": BUTTONSIZE,\n  \"height\": BUTTONSIZE,\n  \"x\": 0,\n  \"y\": 450 - BUTTONSIZE\n};\nvar BLOCK = [];\nvar NUMZEROES = 2;\nvar ZEROSTRING = \"\";\nfor(var i = 0; i < NUMZEROES; i++) {\n  ZEROSTRING += \"0\";\n}\nvar CURRENTMSG = null;\nvar BLOCKBUTTONS = [];\nvar SHAREDPRIME = SHAHashLibrary.sharedPrime();\n\nfunction initializeMessages() {\n  var buttonY = 0;\n\n  for(var k = 0; k < messages.length; k++) {\n    var msg = messages[k];\n    var tempBtnId = \"button\" + msg.name;\n    button(tempBtnId, msg.name);\n    setPosition(tempBtnId, 0, buttonY, 100, 40);\n    buttonY += 40;\n    //Create an event for the button I just created\n    onEvent(tempBtnId, \"click\", function(e) {\n      //Get the button I just clicked from the event\n      //Because sychronizing data with dynamically-created elements is tricky\n      var msgName = e.srcElementId.split(\"button\")[1];\n      \n      for(var i = 0; i < messages.length; i++) {\n        if(messages[i].name == msgName) {\n          CURRENTMSG = messages[i];\n          break;    \n        }\n      }\n      showMessage(CURRENTMSG);\n      UI(true);\n    });\n  }\n}\n\nfunction UI(show) {\n  if(show) {\n    showElement(\"verifyTitleLabel\");\n    showElement(\"publicKeyLabel\");\n    showElement(\"publicKeyInput\");\n    showElement(\"verifySignatureButton\");\n    showElement(\"addBlockButton\");\n    setText(\"publicKeyInput\", \"\");\n  } else {\n    hideElement(\"verifyTitleLabel\");\n    hideElement(\"publicKeyLabel\");\n    hideElement(\"publicKeyInput\");\n    hideElement(\"verifySignatureButton\");\n    hideElement(\"verifyLabel\");\n    hideElement(\"addBlockButton\");\n  }\n}\n\n//HELPER FUNCTIONS\nfunction messageFormat(from, to, amount) {\n  return \"<From: \" + from + \" | To: \" + to + \" | Amount: \" + amount + \">\";\n}\n\nfunction blockToString(block) {\n  //block is an array of messages\n  //messages are objects with a \"from\", \"to\", \"amount\", and \"signature\" field\n  //messageFormat() is a function that converts the raw from/to/amount fields into a single string\n  var tempStrings = [];\n  for(var i = 0; i < block.length; i++) {\n    var msg = block[i];\n    var msgString = \"(\" + messageFormat(msg.from, msg.to, msg.amount);\n    msgString += \" - \" + msg.signature + \")\";\n    //msgString should have format (<From: _ | To: _ | Amount: _> - _)\n    tempStrings.push(msgString);\n  }\n  return \"[\" + tempStrings.toString() + \"]\";\n}\n\n// Looks for NUMZEROES in the range and doesn't stop\n// Will return an array of all possible nonces that satisfy the condition\nfunction mineAll(startVal, numVals) {\n  //Same as mine, but returns array of possible values in the range rather than first value\n  var blockString = blockToString(BLOCK);\n  var endVal = startVal + numVals;\n  var blockStringWithNonce;\n  var blockHash;\n  var DEBUG = false;\n  var nonces = [];\n  for(var nonce = startVal; nonce < endVal; nonce++) {\n    blockStringWithNonce = blockString + \",\" + nonce;  \n    blockHash = SHAHashLibrary.md5(blockStringWithNonce);\n    if(DEBUG) {\n      console.log(\"NONCE:\" + nonce + \"; HASH:\" + blockHash);\n    }\n    var firstPart = blockHash.substr(0, NUMZEROES);\n    if(firstPart == ZEROSTRING) {\n      console.log(\"SUCCESS! Nonce: \" + nonce);\n      nonces.push(nonce);\n    }\n  }\n  console.log(\"Done Mining\");\n  return nonces;\n}\n\n//Returns first nonce that satisfies NUMZEROES condition\nfunction mine(startVal, numVals) {\n  var blockString = blockToString(BLOCK);\n  var endVal = startVal + numVals;\n  var blockStringWithNonce;\n  var blockHash;\n  var DEBUG = true;\n  for(var nonce = startVal; nonce < endVal; nonce++) {\n    blockStringWithNonce = blockString + \",\" + nonce;  \n    blockHash = SHAHashLibrary.md5(blockStringWithNonce);\n    if(DEBUG) {\n      console.log(\"NONCE:\" + nonce + \"; HASH:\" + blockHash);\n    }\n    var firstPart = blockHash.substr(0, NUMZEROES);\n    if(firstPart == ZEROSTRING) {\n      //console.log(\"SUCCESS! Nonce: \" + nonce);\n      return nonce;\n    }\n  }\n  console.log(\"Done Mining\");\n  return -1;\n}\n\n\nfunction showMessage(msg) {\n  var tempStr = \"\";\n  //tempStr += \"<\\n\";\n  tempStr += \"From: \" + msg.from + \"\\n\";\n  tempStr += \"To: \" + msg.to + \"\\n\";\n  tempStr += \"Amount: \" + msg.amount + \"\\n\";\n  //tempStr += \">\\n\";\n  tempStr += \"Signature: \" + msg.signature;\n  setText(\"messageTextBox\", tempStr);\n}\n\nfunction addMsgToBlock(msg) {\n  //Add to BLOCK array, which is used for hashes later\n  BLOCK.push(msg);\n  \n  //Add to BLOCKBUTTONS array, which is used for UI management\n  BLOCKBUTTONS.push(msg.name);\n  \n  //Reset the screen\n  CURRENTMSG = null;\n  setText(\"messageTextBox\", \"\");\n  //Hide the button we just clicked\n  hideElement(\"button\" + msg.name);\n  \n  //Create a new button to represent the block\n  var tempBtnId = \"block\" + msg.name;\n  button(tempBtnId, msg.name);\n  \n  //I didn't need these - somehow AppLab is naturally managing a visual stack which is GREAT\n  //setProperty(tempBtnId,\"width\", BUTTONPROPS.width);\n  //setProperty(tempBtnId, \"height\", BUTTONPROPS.height);\n  //setProperty(tempBtnId, \"x\", BUTTONPROPS.x);\n  //BUTTONPROPS.x += BUTTONSIZE;\n  setProperty(tempBtnId, \"y\", BUTTONPROPS.y);\n  \n  //Create an event for the button I just created\n  onEvent(tempBtnId, \"click\", function(e) {\n    //Get the button I just clicked from the event\n    //Because sychronizing data with dynamically-created elements is tricky\n    var msgName = e.srcElementId.split(\"block\")[1];\n    \n    //Reset the button to view the message\n    showElement(\"button\" + msgName);\n    //Delete this element from the screen (which somehow automatically shifts all the other buttons visually)\n    deleteElement(e.srcElementId);\n    \n    //Delete msg from BLOCKBUTTONS array as well\n    //Requires a mid-array deletion\n    var i = 0;\n    while(i < BLOCKBUTTONS.length) {\n      if(BLOCKBUTTONS[i] == msgName) {\n        BLOCKBUTTONS.splice(i, 1);\n        BLOCK.splice(i, 1);\n        break;\n      }\n      i++;\n    }\n  });\n}\n\nfunction decryptSignature(encryptedHash, pubKey) {\n  var tempStr = \"\";\n  for(var i = 0; i < encryptedHash.length; i += 4) {\n    var subStr = encryptedHash.substr(i, 4);\n    //console.log(subStr);\n    var toDec = SHAHashLibrary.hexStringToDecimal(subStr);\n    //console.log(\"toDec: \" + toDec);\n    var encrypted = (toDec * pubKey) % SHAREDPRIME;\n    //console.log(\"encrypted: \" + encrypted);\n    var toHex = SHAHashLibrary.decimalToHexString(encrypted);\n    //console.log(\"toHex: \" + toHex);\n    \n    while(toHex.length < 4) {\n      toHex = \"0\" + toHex;\n    }\n    \n    tempStr += toHex;\n  }\n  return tempStr;\n}\n\n//EVENTS\nonEvent(\"addBlockButton\", \"click\", function() {\n  if(CURRENTMSG != null) {\n    addMsgToBlock(CURRENTMSG);\n  }\n  UI(false);\n});\n\nonEvent(\"nextButton\",\"click\", function() {\n  setScreen(\"screen2\");\n  setText(\"goalLabel\", \"Your Goal: Add a number to your block so that the hash starts with \" + NUMZEROES + \" zeroes. This doesn't change the block itself - it only changes the hash\");\n  for(var i = 0; i < BLOCKBUTTONS.length; i++) {\n    var msgName = BLOCKBUTTONS[i];\n    //Create a new button to represent the block\n    var tempBtnId = \"screen2block\" + msgName;\n    button(tempBtnId, msgName);\n  }\n});\n\nonEvent(\"generateHashButton\", \"click\", function() {\n  var blockString = blockToString(BLOCK) + \",0\";\n  var blockHash = SHAHashLibrary.md5(blockString);\n  setText(\"hashTextBox\", blockHash);\n  showElement(\"goalLabel\");\n  showElement(\"startLabel\");\n  showElement(\"startInput\");\n  showElement(\"amountLabel\");\n  showElement(\"amountInput\");\n  showElement(\"generateNonceButton\");\n});\n\nonEvent(\"generateNonceButton\", \"click\", function() {\n  setText(\"nonceTextBox\", \"\");\n  var start = getNumber(\"startInput\");\n  var amount = getNumber(\"amountInput\");\n  var result = mine(start, amount);\n  showElement(\"nonceTextBox\");\n  if(result != -1) {\n    var blockString = blockToString(BLOCK) + \",\" + result;\n    var blockHash = SHAHashLibrary.md5(blockString);\n    setText(\"nonceTextBox\", \"Success! The number \" + result + \" created the hash \" + blockHash + \"\\nThis successully solves the puzzle for mining this block!\");\n  } else {\n    setText(\"nonceTextBox\", \"No result was found - try different values!\");\n  }\n});\n\nonEvent(\"verifySignatureButton\", \"click\", function() {\n  if(CURRENTMSG == null) {\n    console.log(\"Error! Null CURRENTMSG\");\n    return;\n  }\n  //generate hash\n  var from = CURRENTMSG.from;\n  var to = CURRENTMSG.to;\n  var amount = CURRENTMSG.amount;\n  var MESSAGE = messageFormat(from, to, amount);\n  //setText(\"messageTextBox\", MESSAGE);\n  var hash = SHAHashLibrary.md5(MESSAGE);\n  \n  //verify signature\n  var sig = CURRENTMSG.signature;\n  var pubKey = getText(\"publicKeyInput\");\n  var decryptedHash = decryptSignature(sig, pubKey);\n  if(hash == decryptedHash) {\n    setText(\"verifyLabel\", \"SUCCESS - the original hash and the verified hash match!\");\n    setProperty(\"verifyLabel\", \"background-color\", \"green\");\n  } else {\n    setText(\"verifyLabel\", \"ERROR - the original hash and the verified hash do NOT match!\");\n    setProperty(\"verifyLabel\", \"background-color\", \"red\");\n  }\n  showElement(\"verifyLabel\");\n});\n\n\nonEvent(\"screen2BackButton\", \"click\", function() {\n  setScreen(\"screen1\");\n  UI(false);\n  //Delete buttons on 2nd screen that may have been created.\n  //This is necessary for next and back logic to work.\n  for(var i = 0; i < BLOCKBUTTONS.length; i++) {\n    var msgName = BLOCKBUTTONS[i];\n    var tempBtnId = \"screen2block\" + msgName;\n    deleteElement(tempBtnId);\n  }\n});\n//RUNS AT START OF PROGRAM\ninitializeMessages();",
    "never_autoplay_video": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "text_mode_at_start": "false",
    "hide_view_data_button": "true",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "debugger_disabled": "false",
    "libraries_enabled": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "start_html": "<div id=\"designModeViz\" class=\"appModern clip-content\" tabindex=\"1\" data-radium=\"true\" style=\"width: 320px; height: 450px; display: none;\"><div class=\"screen\" tabindex=\"1\" data-theme=\"default\" id=\"screen1\" style=\"display: block; height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255);\"><div contenteditable=\"true\" class=\"textArea\" id=\"messageTextBox\" style=\"width: 190px; height: 150px; border-style: solid; background-color: rgb(242, 242, 242); color: rgb(77, 87, 95); border-color: rgb(255, 255, 255); border-radius: 2px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 130px; top: 0px; margin: 0px;\"></div><button id=\"addBlockButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 40px; width: 175px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 145px; top: 330px;\" class=\"design-mode-hidden\">Add To Block</button><button id=\"nextButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 25px; width: 130px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 190px; top: 390px;\">Next Screen</button><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 320px; height: 35px; position: absolute; left: 0px; top: 415px;\" id=\"label2\"></label><input id=\"publicKeyInput\" style=\"margin: 0px; width: 175px; height: 30px; border-style: solid; color: rgb(77, 87, 95); background-color: rgb(242, 242, 242); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 145px; top: 210px;\" class=\"design-mode-hidden\"><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 12px; padding: 2px 15px; width: 210px; height: 30px; position: absolute; left: 120px; top: 185px; text-align: right;\" id=\"publicKeyLabel\" class=\"design-mode-hidden\">Enter Public Key of Sender</label><button id=\"verifySignatureButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 25px; width: 175px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 145px; top: 245px;\" class=\"design-mode-hidden\">Verify Signature</button><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 185px; height: 50px; position: absolute; left: 135px; top: 275px;\" id=\"verifyLabel\" class=\"design-mode-hidden\"></label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(181, 215, 255); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 190px; height: 30px; position: absolute; left: 130px; top: 150px; text-align: center;\" id=\"verifyTitleLabel\" class=\"design-mode-hidden\">Verify Signature</label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 11px; padding: 2px 15px; width: 185px; height: 45px; position: absolute; left: -10px; top: 390px;\" id=\"blockTitleLabel\">Click on a block to remove it from the chain</label></div><div class=\"screen\" tabindex=\"1\" data-theme=\"default\" id=\"screen2\" style=\"height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255); display: none;\"><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 320px; height: 40px; position: absolute; left: 0px; top: 0px;\" id=\"label1\"></label><button id=\"generateHashButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 40px; width: 225px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 90px; top: 50px;\">Generate Hash</button><div contenteditable=\"false\" class=\"textArea\" id=\"hashTextBox\" style=\"width: 310px; height: 65px; border-style: solid; background-color: rgb(242, 242, 242); color: rgb(77, 87, 95); border-color: rgb(255, 255, 255); border-radius: 2px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 5px; top: 100px; margin: 0px;\"></div><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 320px; height: 55px; position: absolute; left: 0px; top: 170px;\" id=\"goalLabel\" class=\"design-mode-hidden\">Your Goal: Add a number to your block so that the hash starts with N zeroes</label><input id=\"startInput\" style=\"margin: 0px; width: 140px; height: 30px; border-style: solid; color: rgb(77, 87, 95); background-color: rgb(242, 242, 242); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 175px; top: 230px;\" class=\"design-mode-hidden\"><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 154px; height: 18px; position: absolute; left: -5px; top: 230px;\" id=\"startLabel\" class=\"design-mode-hidden\">Starting Number:</label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 175px; height: 35px; position: absolute; left: -10px; top: 275px;\" id=\"amountLabel\" class=\"design-mode-hidden\">Amount of Numbers to Try:</label><input id=\"amountInput\" style=\"margin: 0px; width: 140px; height: 30px; border-style: solid; color: rgb(77, 87, 95); background-color: rgb(242, 242, 242); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 175px; top: 280px;\" class=\"design-mode-hidden\"><button id=\"generateNonceButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 45px; width: 160px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 75px; top: 330px;\" class=\"design-mode-hidden\">Mine!</button><div contenteditable=\"false\" class=\"textArea design-mode-hidden\" id=\"nonceTextBox\" style=\"width: 265px; height: 60px; border-style: solid; background-color: rgb(242, 242, 242); color: rgb(77, 87, 95); border-color: rgb(255, 255, 255); border-radius: 2px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 30px; top: 380px; margin: 0px;\"></div><button id=\"screen2BackButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 40px; width: 80px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 0px; top: 50px;\">Back</button></div></div>",
    "fail_on_lint_errors": "false",
    "makerlab_enabled": "false",
    "widget_mode": "false",
    "ai_enabled": "false",
    "start_libraries": "[{\"name\":\"SHAHashLibrary\",\"description\":\"Library of functions for Crypto widget apps\",\"functions\":[\"sharedPrime\",\"decimalToHexString\",\"hexStringToDecimal\",\"md5\"],\"dropletConfig\":[{\"func\":\"SHAHashLibrary.sharedPrime\",\"category\":\"Functions\",\"comment\":\"According to this website, this will generate a prime number with 129 bits of info\\nhttps://primes.utm.edu/lists/2small/100bit.html\",\"type\":\"either\"},{\"func\":\"SHAHashLibrary.decimalToHexString\",\"category\":\"Functions\",\"comment\":\"Converts a decimal number to a hex string\",\"type\":\"either\",\"params\":[\"decNum\"],\"paletteParams\":[\"decNum\"]},{\"func\":\"SHAHashLibrary.hexStringToDecimal\",\"category\":\"Functions\",\"comment\":\"Converts a hex string to a decimal number\",\"type\":\"either\",\"params\":[\"hexStr\"],\"paletteParams\":[\"hexStr\"]},{\"func\":\"SHAHashLibrary.md5\",\"category\":\"Functions\",\"comment\":\"A formatted version of a popular md5 implementation.\\nOriginal copyright (c) Paul Johnston & Greg Holt.\\nThe function itself is now 42 lines long.\",\"type\":\"either\",\"params\":[\"inputString\"],\"paletteParams\":[\"inputString\"]}],\"source\":\"//THIS IS THE LEVELBUILDER VERSION OF THIS PROJECT:\\n//https://studio.code.org/projects/applab/YXz154QFd3d2YTiTaX3Va83rbs9fclgbeL3z6jEcwyg/edit\\n//NEED TO BE ON LEVELBUILDER FOR LIBRARY IMPORT INTO LEVELS\\n\\n//According to this website, this will generate a prime number with 129 bits of info\\n//https://primes.utm.edu/lists/2small/100bit.html\\nfunction sharedPrime() {\\n  return Math.pow(2, 16) - 15;\\n}\\n\\n//Converts a decimal number to a hex string\\nfunction decimalToHexString(decNum) {\\n  return decNum.toString(16);\\n}\\n\\n//Converts a hex string to a decimal number\\nfunction hexStringToDecimal(hexStr) {\\n  return parseInt(hexStr, 16);\\n}\\n\\n\\n\\n\\n//  A formatted version of a popular md5 implementation.\\n//  Original copyright (c) Paul Johnston & Greg Holt.\\n//  The function itself is now 42 lines long.\\nfunction md5(inputString) {\\n    var hc=\\\"0123456789abcdef\\\";\\n    function rh(n) {var j,s=\\\"\\\";for(j=0;j<=3;j++) s+=hc.charAt((n>>(j*8+4))&0x0F)+hc.charAt((n>>(j*8))&0x0F);return s;}\\n    function ad(x,y) {var l=(x&0xFFFF)+(y&0xFFFF);var m=(x>>16)+(y>>16)+(l>>16);return (m<<16)|(l&0xFFFF);}\\n    function rl(n,c)            {return (n<<c)|(n>>>(32-c));}\\n    function cm(q,a,b,x,s,t)    {return ad(rl(ad(ad(a,q),ad(x,t)),s),b);}\\n    function ff(a,b,c,d,x,s,t)  {return cm((b&c)|((~b)&d),a,b,x,s,t);}\\n    function gg(a,b,c,d,x,s,t)  {return cm((b&d)|(c&(~d)),a,b,x,s,t);}\\n    function hh(a,b,c,d,x,s,t)  {return cm(b^c^d,a,b,x,s,t);}\\n    function ii(a,b,c,d,x,s,t)  {return cm(c^(b|(~d)),a,b,x,s,t);}\\n    function sb(x) {\\n        var i;var nblk=((x.length+8)>>6)+1;var blks=new Array(nblk*16);for(i=0;i<nblk*16;i++) blks[i]=0;\\n        for(i=0;i<x.length;i++) blks[i>>2]|=x.charCodeAt(i)<<((i%4)*8);\\n        blks[i>>2]|=0x80<<((i%4)*8);blks[nblk*16-2]=x.length*8;return blks;\\n    }\\n    var i,x=sb(inputString),a=1732584193,b=-271733879,c=-1732584194,d=271733878,olda,oldb,oldc,oldd;\\n    for(i=0;i<x.length;i+=16) {olda=a;oldb=b;oldc=c;oldd=d;\\n        a=ff(a,b,c,d,x[i+ 0], 7, -680876936);d=ff(d,a,b,c,x[i+ 1],12, -389564586);c=ff(c,d,a,b,x[i+ 2],17,  606105819);\\n        b=ff(b,c,d,a,x[i+ 3],22,-1044525330);a=ff(a,b,c,d,x[i+ 4], 7, -176418897);d=ff(d,a,b,c,x[i+ 5],12, 1200080426);\\n        c=ff(c,d,a,b,x[i+ 6],17,-1473231341);b=ff(b,c,d,a,x[i+ 7],22,  -45705983);a=ff(a,b,c,d,x[i+ 8], 7, 1770035416);\\n        d=ff(d,a,b,c,x[i+ 9],12,-1958414417);c=ff(c,d,a,b,x[i+10],17,     -42063);b=ff(b,c,d,a,x[i+11],22,-1990404162);\\n        a=ff(a,b,c,d,x[i+12], 7, 1804603682);d=ff(d,a,b,c,x[i+13],12,  -40341101);c=ff(c,d,a,b,x[i+14],17,-1502002290);\\n        b=ff(b,c,d,a,x[i+15],22, 1236535329);a=gg(a,b,c,d,x[i+ 1], 5, -165796510);d=gg(d,a,b,c,x[i+ 6], 9,-1069501632);\\n        c=gg(c,d,a,b,x[i+11],14,  643717713);b=gg(b,c,d,a,x[i+ 0],20, -373897302);a=gg(a,b,c,d,x[i+ 5], 5, -701558691);\\n        d=gg(d,a,b,c,x[i+10], 9,   38016083);c=gg(c,d,a,b,x[i+15],14, -660478335);b=gg(b,c,d,a,x[i+ 4],20, -405537848);\\n        a=gg(a,b,c,d,x[i+ 9], 5,  568446438);d=gg(d,a,b,c,x[i+14], 9,-1019803690);c=gg(c,d,a,b,x[i+ 3],14, -187363961);\\n        b=gg(b,c,d,a,x[i+ 8],20, 1163531501);a=gg(a,b,c,d,x[i+13], 5,-1444681467);d=gg(d,a,b,c,x[i+ 2], 9,  -51403784);\\n        c=gg(c,d,a,b,x[i+ 7],14, 1735328473);b=gg(b,c,d,a,x[i+12],20,-1926607734);a=hh(a,b,c,d,x[i+ 5], 4,    -378558);\\n        d=hh(d,a,b,c,x[i+ 8],11,-2022574463);c=hh(c,d,a,b,x[i+11],16, 1839030562);b=hh(b,c,d,a,x[i+14],23,  -35309556);\\n        a=hh(a,b,c,d,x[i+ 1], 4,-1530992060);d=hh(d,a,b,c,x[i+ 4],11, 1272893353);c=hh(c,d,a,b,x[i+ 7],16, -155497632);\\n        b=hh(b,c,d,a,x[i+10],23,-1094730640);a=hh(a,b,c,d,x[i+13], 4,  681279174);d=hh(d,a,b,c,x[i+ 0],11, -358537222);\\n        c=hh(c,d,a,b,x[i+ 3],16, -722521979);b=hh(b,c,d,a,x[i+ 6],23,   76029189);a=hh(a,b,c,d,x[i+ 9], 4, -640364487);\\n        d=hh(d,a,b,c,x[i+12],11, -421815835);c=hh(c,d,a,b,x[i+15],16,  530742520);b=hh(b,c,d,a,x[i+ 2],23, -995338651);\\n        a=ii(a,b,c,d,x[i+ 0], 6, -198630844);d=ii(d,a,b,c,x[i+ 7],10, 1126891415);c=ii(c,d,a,b,x[i+14],15,-1416354905);\\n        b=ii(b,c,d,a,x[i+ 5],21,  -57434055);a=ii(a,b,c,d,x[i+12], 6, 1700485571);d=ii(d,a,b,c,x[i+ 3],10,-1894986606);\\n        c=ii(c,d,a,b,x[i+10],15,   -1051523);b=ii(b,c,d,a,x[i+ 1],21,-2054922799);a=ii(a,b,c,d,x[i+ 8], 6, 1873313359);\\n        d=ii(d,a,b,c,x[i+15],10,  -30611744);c=ii(c,d,a,b,x[i+ 6],15,-1560198380);b=ii(b,c,d,a,x[i+13],21, 1309151649);\\n        a=ii(a,b,c,d,x[i+ 4], 6, -145523070);d=ii(d,a,b,c,x[i+11],10,-1120210379);c=ii(c,d,a,b,x[i+ 2],15,  718787259);\\n        b=ii(b,c,d,a,x[i+ 9],21, -343485551);a=ad(a,olda);b=ad(b,oldb);c=ad(c,oldc);d=ad(d,oldd);\\n    }\\n    return rh(a)+rh(b)+rh(c)+rh(d);\\n}\",\"originalName\":\"SHAHashLibrary\",\"versionId\":\"oZPIq0BmLtKk3NCUaoZ2_bI.g5yh.Rfp\",\"channelId\":\"HwYXbqSfVols5oWA-aR-Ag\",\"fromLevelbuilder\":true}]",
    "preload_asset_list": null
  },
  "game_id": 41,
  "created_at": "2022-06-08T17:54:16.000Z",
  "level_num": "custom",
  "user_id": 14639,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-06-08T17:54:16.863+00:00\",\"changed\":[\"cloned from \\\"Crypto - verify signature\\\"\"],\"cloned_from\":\"Crypto - verify signature\"},{\"changed_at\":\"2022-06-08 17:54:52 +0000\",\"changed\":[\"start_blocks\",\"start_html\",\"preload_asset_list\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-08 23:26:53 +0000\",\"changed\":[\"start_blocks\",\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-08 23:34:07 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-08 23:40:02 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-08 23:43:42 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-08 23:44:07 +0000\",\"changed\":[\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-08 23:44:29 +0000\",\"changed\":[\"start_blocks\",\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-08 23:45:52 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-08 23:46:25 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-08 23:50:59 +0000\",\"changed\":[\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-08 23:51:49 +0000\",\"changed\":[\"start_blocks\",\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-08 23:57:35 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-09 00:02:55 +0000\",\"changed\":[\"start_blocks\",\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-09 00:03:42 +0000\",\"changed\":[\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-09 00:06:28 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-09 00:24:27 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-09 00:29:51 +0000\",\"changed\":[\"start_blocks\",\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-09 00:30:17 +0000\",\"changed\":[\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-09 00:33:21 +0000\",\"changed\":[\"start_blocks\",\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>