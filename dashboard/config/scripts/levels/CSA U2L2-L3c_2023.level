<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**An artist wants to sell their work on an app, and the software engineer has created a `Painting`(#e7e8ea) class to represent the paintings.**\r\n\r\n✅ **TO DO #1:** In the `Painting`(#e7e8ea) class, write a no-argument constructor to assign default values to the instance variables:\r\n\r\n   * Assign a default name to the instance variable `title`(#e7e8ea), such as `\"new painting\"`(#e7e8ea)\r\n\r\n   * Assign a default value to the instance variable `year`(#e7e8ea), such as `2022`(#e7e8ea)\r\n\r\n✅ **TO DO #2:** In `ArtRunner.java`(#e7e8ea), instantiate a `Painting`(#e7e8ea) object.\r\n\r\n✅ **TO DO #3:** Print the constructor and the values assigned to the instance variables for the `Painting`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printPaintingInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nPainting picasso = new Painting();\r\npicasso.printPaintingInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out **Help & Tips** tab ⬆️ for help with writing a no-argument constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Painting Class",
    "bubble_choice_description": "An artist wants to sell their work on an app, and the software engineer has created a `Painting` class to represent the paintings.",
    "thumbnail_url": "https://images.code.org/74d20a08c9c353e657eadf25651b413f-artwork.png",
    "start_sources": {
      "ArtRunner.java": {
        "text": "public class ArtRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Painting object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject), and print the values assigned\n     * to the instance variables using the Painting class printPaintingInfo() method.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Painting.java": {
        "text": "/*\n * Represents a painting\n */\npublic class Painting {\n\n  private String title;    // The title of a painting\n  private int year;        // The year a painting was created\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the\n   * title and year instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n\n\n  \n\n  /*\n   * Prints the title of the painting and\n   * the year the painting was created\n   */\n  public void printPaintingInfo() {\n    System.out.println(\"Title: \" + title);\n    System.out.println(\"Year: \" + year);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-03T19:21:06.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:21:06.801+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L3b_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L3b_2023\"},{\"changed_at\":\"2022-11-03 19:21:08 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 21:23:02 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:42:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:42:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:43:25 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:44:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:44:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 21:42:13 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 14:27:57 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:10:26 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:10:41 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:52:55 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
