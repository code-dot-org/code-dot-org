<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2016-10-12T17:57:34.000Z",
  "properties": {
    "options": {
      "skip_dialog": true,
      "css": "unplugged"
    },
    "title": "title",
    "content1": "description here",
    "markdown": "# Having Your App Make Decisions\n\nNow that you have variables keeping track of useful information in an app, the next thing you probably want to do is make decisions based on their values.\n\nFor example: in the Count Up/Down App what we want to say is **\"if the score reaches 20 then switch screens\"**\n\n# *if* Statements\nMost programming languages have a way to do this: to check to see if some condition is true, and if it is do something.  It's called an **\"`if` statement\"**.  `if` statements are a big topic in and of themselves, but for now we'll just look at a simple example to meet our current needs.\n\nHere's an example of an `if` statement (shown in both block and text form)\n\n<table>\n<tr>\n<td>\n<img src=\"https://images.code.org/621491cac1e3b105c9c2794b01d8de23-image-1446153210916.png\" style=\"width: 230px\">\n</td>\n<td>\n<img src=\"https://images.code.org/5ca15eabd31a8a60ab9a3960a105faae-image-1446153241063.png\" style=\"width: 230px\">\n</td>\n</tr>\n</table>\n\nThere are a couple of things happening here that we should explain.\n\n# How to Add an *if* Statement to Your Program\n\nIn the toolbox you'll now see an `if` statement.  To add it to your program just drag it out.  For our current program we want to check the value of count *inside* the up arrow event handler.\n\n<img src=\"https://images.code.org/285ec021f4f5e12ea409c2a6d2603645-image-1446153790212.gif\" style=\"width: 500px\">\n\nYou'll notice it has an empty space where you need to insert the **condition** that you want to check.  We'll get to that next.\n\nThe `if` statement defines a block of code to execute between open and closing curly braces {}.\n\n**If the condition is true** then the block of code inside the curly braces is executed from top to bottom, exactly once.\n**If the condition is false** then the entire block of code is ignored.\n\n# Misconception Alert - Where to Put *if* Statements\n\nAn `if` statement does not constantly monitor your program checking the condition to see if it's true or false.  An `if` statement is an instruction just like any other that gets executed line by line in order from top to bottom.\n\nThis means that you need to insert an `if` statement into your code **at the exact place where you need the condition checked**.  Once the condition is checked program execution picks up at the end of the `if` statement and proceeds from there.\n\nThis is why we need to **check the value of <code>count</code> EVERY time the up arrow is clicked**.  So that means the `if` statment must be written into the event handler for the up arrow, and checked *after* we update the value of `count`.  Here's what the full event handler should look like:\n\n![](https://images.code.org/a65dec71bc103397f2ceed603f328531-image-1446154248803.png)\n\n# How to Define a Condition for an *if* Statement\n\nAn `if` statement requires you to define an **expression that evaluates to true or false.** \n\nJust as in arithmetic there are some operators you can use to write expressions that evaluate to a number, programming languages also have a number of operators that let you write expressions that evaluate to true or false.\n\nA simple one is the `==` operator which tells you whether one value **is equal** to another.  If the two values are equal the expression evaluates to **true**.  If they are not equal it evaluates to **false**.\n\nFor example:\n\n| Code | Result |\n|:--:|:--:|\n|`7 == 7` | true |\n|`8 == 5` | false |\n|<hr>|<hr> \t|\n| ``var a = 3;``<br>``var b = 5;``| |\n| `a == 3` | true |\n| `b == 5` | true |\n| `a == b` | false |\n\n\n# The == Operator vs. =\n\n`=` read as: \"gets\"\n\n`==` read as: \"equal-equal\"\n\nThe reason why we recommended that you read `=` as \"gets\" is really to avoid confusion with the `==` operator, which to avoid confusion even further, many programmers read as \"equal-equal\". \n\nTo state what should be obvious by this point: `=` is for assigning a value to a variable and `==` is for checking or testing to see what a value is.  You can probably imagine the number of mistakes that beginners might make here.\n\n**TIP:** if you continue to read code \"aloud\" in your head using \"gets\" and \"equal-equal\" it might help you discover bugs in your code or avoid them in the first place.  For example, here is an arbitrary piece of code:\n\n| code | read as |\n|:---|---|\n| ![](https://images.code.org/acf7d36df4d669f284b35ccc82509f1b-image-1446154925792.png) | \"var *a* gets 7.<br>If *a* equal-equal 9 then<br> *a* gets 0\" |\n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue</a>\n\n\n"
  },
  "published": true
}]]></config>
</External>
