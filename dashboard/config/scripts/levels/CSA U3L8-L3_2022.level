<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "##In States.java:\r\n\r\n1. Write the method `getMax()`(#e7e8ea) to find and return the largest value in the `data`(#e7e8ea) array.\r\n\r\n2. Write the method `getMin()`(#e7e8ea) to find and return the smallest value in the `data`(#e7e8ea) array.\r\n\r\n##In MyConsole.java:\r\n\r\n3. Print the result of a call to `getMax()`(#e7e8ea) on the `myStates`(#e7e8ea) object.\r\n\r\n4. Print the result of a call to `getMin()`(#e7e8ea) on the `myStates`(#e7e8ea) object.\r\n\r\n![](https://images.code.org/1d2b6e597db0bfa9288bcf1a2b3ffbd0-image-1648738095916.png)",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "submittable": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"statenames.txt\");\n\n    String[] stateNames = myFileReader.getStringData(50);\n    myFileReader.setFile(\"population.txt\");\n    int[] population = myFileReader.getIntData(50);\n\n    States myStates = new States(stateNames, population);\n    \n    // TO DO #3: Print the result of a call to getMax().\n\n\n    // TO DO #4: Print the result of a call to getMin().\n\n\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "States.java": {
        "text": "/*\n * Analyzes data about states in the USA\n */\npublic class States {\n\n  private String[] stateNames;  // The array of state names\n  private int[] data;           // The array of data to analyze\n\n  /*\n   * Constructor to create a States object with the\n   * specified arrays of state names and data\n   */\n  public States(String[] stateNames, int[] data) {\n    this.stateNames = stateNames;\n    this.data = data;\n  }\n\n  /*\n   * Prints each pair of states, the description of the data, and whether or not the first\n   * state's data value is greater than the second state's data value\n   */\n  public void printPairs(String description) {\n    for (int index = 0; index < stateNames.length - 1; index++) {\n      System.out.print(stateNames[index] + \" has larger \" + description + \" than \" + stateNames[index + 1] + \": \");\n      System.out.println(compareValues(data[index], data[index + 1]));\n    }\n  }\n\n  /*\n   * Returns true if the first value is greater than the\n   * second value, otherwise returns false\n   */\n  public boolean compareValues(int first, int second) {\n    if (first > second) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /*\n   * Returns the largest value in the data array\n   */\n  public int getMax() {\n    // TO DO #1: Traverse the data array to find the largest value.\n\n\n    \n  }\n\n  /*\n   * Returns the smallest value in the data array\n   */\n  public int getMin() {\n    // TO DO #2: Traverse the data array to find the smallest value.\n\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "statenames.txt": {
        "text": "Alabama\nAlaska\nArizona\nArkansas\nCalifornia\nColorado\nConnecticut\nDelaware\nFlorida\nGeorgia\nHawaii\nIdaho\nIllinois\nIndiana\nIowa\nKansas\nKentucky\nLouisiana\nMaine\nMaryland\nMassachusetts\nMichigan\nMinnesota\nMississippi\nMissouri\nMontana\nNebraska\nNevada\nNew Hampshire\nNew Jersey\nNew Mexico\nNew York\nNorth Carolina\nNorth Dakota\nOhio\nOklahoma\nOregon\nPennsylvania\nRhode Island\nSouth Carolina\nSouth Dakota\nTennessee\nTexas\nUtah\nVermont\nVirginia\nWashington\nWest Virginia\nWisconsin\nWyoming",
        "isVisible": true
      },
      "population.txt": {
        "text": "4833722\n735132\n6626624\n2959373\n38332521\n5268367\n3596080\n925749\n19552860\n9992167\n1404054\n1612136\n12882135\n6570902\n3090416\n2893957\n4395295\n4625470\n1328302\n5928814\n6692824\n9895622\n5420380\n2991207\n6044171\n1015165\n1868516\n2790136\n1323459\n8899339\n2085287\n19651127\n9848060\n723393\n11570808\n3850568\n3930065\n12773801\n1051511\n4774839\n844877\n6495978\n26448193\n2900872\n626630\n8260405\n6971406\n1854304\n5742713\n582658",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\nd69vXdCbME1yHY+FToa6\n",
    "encrypted_examples": [

    ],
    "map_reference": "/programming_environments/javalab"
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-03-25T12:56:37.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-03-25 12:56:39 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:41:41 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:44:04 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:48:06 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:48:20 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:53:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:53:45 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:53:50 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:26:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:27:03 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:27:11 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-27 19:29:14 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
