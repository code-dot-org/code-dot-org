<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "##In States.java:\r\n\r\n1. Write the method `getMax()`(#e7e8ea) to find and return the largest value in the `data`(#e7e8ea) array.\r\n\r\n2. Write the method `getMin()`(#e7e8ea) to find and return the smallest value in the `data`(#e7e8ea) array.\r\n\r\n##In MyConsole.java:\r\n\r\n3. Print the result of a call to `getMax()`(#e7e8ea) on the `myStates`(#e7e8ea) object.\r\n\r\n4. Print the result of a call to `getMin()`(#e7e8ea) on the `myStates`(#e7e8ea) object.\r\n\r\n![](https://images.code.org/1d2b6e597db0bfa9288bcf1a2b3ffbd0-image-1648738095916.png)",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "submittable": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"stateNames.txt\");\n    String[] stateNames = myFileReader.readText(50);\n\n    myFileReader.changeFile(\"population.txt\");\n    int[] populations = myFileReader.readNumbers(50);\n\n    States myStates = new States(stateNames, populations);\n    \n    // TO DO #3: Print the result of a call to getMax().\n\n\n    // TO DO #4: Print the result of a call to getMin().\n\n\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n  private Scanner input;  // The Scanner object for reading the data\n\n  /*\n   * Constructor to create a FileReader object with\n   * a specified filename\n   */\n  public FileReader(String newFileName) {\n    File newFile = new File(newFileName);\n    input = null;\n\n    createScanner(newFile);\n  }\n\n  /*\n   * Creates the input object with the specified file\n   * or notifies the user that the file is not found\n   */\n  public void createScanner(File newFile) {\n    try {\n      input = new Scanner(newFile);\n    } catch (FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n  }\n\n  /*\n   * Creates a new File object from the specified filename\n   * and updates the input object with the new file\n   */\n  public void changeFile(String filename) {\n    File newFile = new File(filename);\n    createScanner(newFile);\n  }\n\n  /*\n   * Reads numValues integers from a file into\n   * an int 1D array and returns the array\n   */\n  public int[] readNumbers(int numValues) {\n    int[] values = new int[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (input.hasNextInt()) {\n        values[index] = input.nextInt();\n      }\n    }\n\n    input.close();\n    return values;\n  }\n\n  /*\n   * Reads numValues Strings from a file into\n   * an String 1D array and returns the array\n   */\n  public String[] readText(int numValues) {\n    String[] text = new String[numValues];\n\n    for (int index = 0; index < text.length; index++) {\n      if (input.hasNextLine()) {\n        text[index] = input.nextLine();\n      }\n    }\n\n    input.close();\n    return text;\n  }\n\n}",
        "isVisible": true
      },
      "States.java": {
        "text": "/*\n * Analyzes data about states in the USA\n */\npublic class States {\n\n  private String[] stateNames;  // The array of state names\n  private int[] data;           // The array of data to analyze\n\n  /*\n   * Constructor to create a States object with the\n   * specified array of state names and data\n   */\n  public States(String[] stateNames, int[] data) {\n    this.stateNames = stateNames;\n    this.data = data;\n  }\n\n  /*\n   * Changes the data to the specified array of data\n   */\n  public void changeData(int[] data) {\n    this.data = data;\n  }\n\n  /*\n   * Prints each pair of states, the description of the data, and whether or not the first\n   * state's data value is greater than the second state's data value\n   */\n  public void printPairs(String description) {\n    for (int index = 0; index < stateNames.length; index++) {\n      System.out.print(stateNames[index] + \" has larger \" + description + \" than \" + stateNames[index + 1] + \": \");\n      System.out.println(compareValues(data[index], data[index + 1]));\n    }\n  }\n\n  /*\n   * Returns true if the first value is greater than the\n   * second value, otherwise returns false\n   */\n  public boolean compareValues(int first, int second) {\n    if (first > second) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /*\n   * Returns the largest value in the data array\n   */\n  public int getMax() {\n    // TO DO #1: Traverse the data array to find the largest value.\n\n\n    \n  }\n\n  /*\n   * Returns the smallest value in the data array\n   */\n  public int getMin() {\n    // TO DO #2: Traverse the data array to find the smallest value.\n\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "stateNames.txt": {
        "text": "Alabama\nAlaska\nArizona\nArkansas\nCalifornia\nColorado\nConnecticut\nDelaware\nFlorida\nGeorgia\nHawaii\nIdaho\nIllinois\nIndiana\nIowa\nKansas\nKentucky\nLouisiana\nMaine\nMaryland\nMassachusetts\nMichigan\nMinnesota\nMississippi\nMissouri\nMontana\nNebraska\nNevada\nNew Hampshire\nNew Jersey\nNew Mexico\nNew York\nNorth Carolina\nNorth Dakota\nOhio\nOklahoma\nOregon\nPennsylvania\nRhode Island\nSouth Carolina\nSouth Dakota\nTennessee\nTexas\nUtah\nVermont\nVirginia\nWashington\nWest Virginia\nWisconsin\nWyoming",
        "isVisible": true
      },
      "population.txt": {
        "text": "4833722\n735132\n6626624\n2959373\n38332521\n5268367\n3596080\n925749\n19552860\n9992167\n1404054\n1612136\n12882135\n6570902\n3090416\n2893957\n4395295\n4625470\n1328302\n5928814\n6692824\n9895622\n5420380\n2991207\n6044171\n1015165\n1868516\n2790136\n1323459\n8899339\n2085287\n19651127\n9848060\n723393\n11570808\n3850568\n3930065\n12773801\n1051511\n4774839\n844877\n6495978\n26448193\n2900872\n626630\n8260405\n6971406\n1854304\n5742713\n582658",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "ofol2dtcnA2uwmsz0sjpzIHHK32rFo065+rawnVktRL21QICoQ2TOpXrbeZP\nzHxHXyhzyyhMro/C9CelcCcPaynWgSMVYZifeADxlQ00L9/SAjsDeCq0ZBSa\n3v/i/lflRVHMQenrNWwE4lnkgFRdfqcsV3uyZrBrktwshJZwww0o9SYsLHJ4\nqzrtrEAHiUPK2XxatVzWxotUrXJ3mPWsfWbTBO8SROOzhUEQfDGXLIlJqWuu\nsYku2LDHlS6Ouhiob1HyqxAEPz0UwRlV2nfCQ2OThmtNoreZGE2YCz7GICo5\nMABHl8walCLcUYX++GaWO3CO9j6hsyvvQU2mRC6ZtLSxhmSOSxv2C5kwVMak\n89WuKKefto9rhnrBHAuwDP5RTm2rEBATjwB/kjbYlgtIwTk+1Nj68jwoMZVP\n7G58VPr4jqCelLia1tpsS7ba3mzaAYpLJeGLqJx2PtdHkZFpiP3bLo7iNhaQ\nWUIUH1bUYUH44MSr51aH2arne2OqAbwAq5pQd1uFK+BuOv0tE4RkdYILgrMe\nSyZjdzZHutN/ebBKtzjl8exMoLx/rRqIFrke4CRgoJ2PT645sqPNtyFU5NuB\nQ71Rmwt51pbv5BOgyLpHKTKPRMcLAApOLOTegHBtMpXuDNapRBDA6JU0DlQY\nUSlidH24KxOLQye7cmSGhSxaRBuz0QYOirFfWBhQ4y8ddIr8/dx7ewHAECPN\nSG6z3Pi6xnJCjx6Z8qE4oy+F9ch8CZg57agrDK+8c+7VTZpgC+huWkq5kghD\nulZQtUakJ1ErMpk+v4kmfqfWtdajJL51AbdCkWxEOsGga98nfIVwlMxbryAi\nO+RQ8ld3VPHgcYw8ouozbT58FuxU5BsWd/eqGELvGzLv6aSQYKKsTs4fEUnL\nFnNTPaZHJUhuEGaovVWDbRntVmkn2j3R378gsqMEDbBsKiTNLgRstSH+p1BN\nFrtqepYNmyVgsO9IB8jp+WfJ0ATwnjOf0Vywr6UPt/0vMaZ2Ltt+oeGzB0kU\nos0lu30q7h3mRP3f2M6KB6FLGLrEx4gSwHWVSKbJFCE9HS6yZMLZDv5nHbQZ\ncNocMm6ehETErf8TKEEcMC+g+vsxQasxLavBqPAGBsZEV/TB4bOSqoKTsIv1\nIMVAFwhNNVW6PfVLadUzTvBoAvQqlaEWrAdQICzMNass4ijzFwPRd2A03rpK\nD+zjigchtX4M04kWZ4gumfTPQerjfCFosuc8VCAJb6aO0vbhpnGJ4K4oO2Ti\nBiHlZRoKFYjOhmFRVYtnjM+UT8QlSr+Y0ASkPFLhNR+9DDpylTzhHK2kfeFx\nQ49zbMoSNbnzktS1jne0IMsDdoLZTxyeAOpHyHzOVeFUp6es24vlO2m3tL+P\nBkz4UWuHW9n9K8H5RR5peUQDSBrzvl3bp0nZbe7P1vNbtzXwNqqcc213IWoo\n7a11xEH9G4QzFAUmXi4VxTwFP8G3xblO0sAComR7lNSd31d0CsTwxvfMo7vG\nHWyqXh6onUKaHjvI3BcKLs3VZ5oFp288Aagfsk3msWhouTD6Q7Uq0i+03Esz\nt5wSzkJtxYOOwPnYb5ovRxxkGuIvb7luBL+7qJJoLX8Se0P8v1jzCbeRniUd\nH6Hhhaz0vhmHew0f652kxUO0I+bUQUYPqLRXZIgkVi32Vo5UQCa2S1820ozr\nfRqFu2D+QV2GcNfWVKvznULZsi6be/MEqFqzv+38HB2s2i+auRI2wN3xuZ3C\n1fVtuBBXqd5aIdN1BD0NghshRHfGW3t3LT9okdWvfgVkjK3mAdw/w49Q+ESN\nzpn077c0fdLvXRGmOB+y1D2gH2f5iwM1P8u8NJ+NGVOzJALzsrwxGmfU8VN1\nFbf8GPWzstZRNyuD/5kHtgm85mek6TnCNtyF/hkoHyS00szOZ3e83ajAU/s5\nRYCpLkiStAo3/hcZoNTSA8ACVn9XNuVnfcCYmIHldhFD9dY34rs6lyobYx4Z\nDaeckiY1LcqFjArKs2att+5iKZxqikfbejtvj1fk51TeYcIljz2mNjOjfeS+\n/vPK5yvLVTE2vLqsQXcdDNrEk9UXHT0cjh9Rw5eFVVOHcZoxK9lQpIAC+udp\nhN+ftDboTqHcI9PKvcx1j/LnJgvAbP1oOZoD/ky5HAwYqWflAoZJ9ISY8cpp\nTjQy+cB/VmWCTWePeF7nVY2FdmxOuCGwlFAiLRHzXKiSFpSdhkGPNccGSZuw\n2z2Y7E8LceDM77JXye5glF308+qTtF3boXIWRhrfWh2UGWyxEOAGCrwlTttg\n6tqNx4tMWv7Hf2rhR9sJVtktjtBDwRdOd/vNRPKZlJGyydIZJk6tGoSk7qRi\n0GVgrxNsA/vJtdLHJZ2LpyFEhdm2ZbCWkM/bz3xYTXlLn6eE9mlDqweQ6C/N\npRaAbmgW0pWbQyBi4oBRjBsQizRhLJgysTYMdqMrMeQk2b4TYokJvEdBqXit\nsUxJpatm9nblxubc+hrXr/u7etQpEgpjWyKnKXm+39YGt34Vvo36teNOa3OA\n00E3HkD0OovW29UaYqgf7sMq95TAgx/2agSv1XdFuVOBu0AG6qI2om/sFX46\nz34qn9Mw6wx+nVW/8Z6KLdajzxf+ija6WnLlVk/cY+RRGI63D9btrFcc9Zps\nbWL06Vb0ddgA1KzZmazRs0x+HFtuakb+Mj4KNFf42GoOvl/lPlDwvcuARjeK\n00bAmZ3iR1hKNoF9UBj+35+VlLEn+Kpx46XF99WvRZIN+C2Gz2jDmaPl9kDn\njkRm/yePwrSZY9f7I5ojLKou7mjRAZrJKyG17q6ch15Rl7rW6VTS0ZZxzqmg\nW58T5QaDfCxWsztJ9NW0Ih1ezc7haIBUNxJEklThWfefG/KEcMywAMBWJCHI\n284Z36mQuYsLK5ryuGKO3TS7nunnGWiMphIEI/1dg8LhIisKa/DOnWRlIyc9\nzDoq9YH4dlc0RfDtRn1O43uIM6Cr61A54+bDLLYq95PLzWbt+oNwrNodyGlQ\n74/qjSQRNNItXcTkNCZrfz99FAkgrT/q1ldVzrfK4ZQeo/lNMsoQdm6Qt/8x\nyWEAh087zrJaRjsSzc4Jr5ypSCYggFU7Jlxr4vCwM1dg4x/Uts0F23j8da+w\ndWBwidczMdl3biAnda/Jrj6ETxP2HWo0ZlEga3Cal00xBuzvv2UzeDLp+lpb\nhUjZDwJJYR7ZfnxPAzBiv85vhvBAPxWeOFJmCn1Lj9w4651Iv4I5OHbDr17H\nFWk498drqjLYkvSYnN+bqxyjrmda+IFaUw87sF24gPF6nqvv4SXFoNpTtNh0\nzFLRqsAXuyE8rjyaC97FiMfLb3YsmtIwAldmwQ/CTAIN08rKYi9wwKHNo7zx\nibUj+CMRs7gzUWkTRXEEzN1YX/5vXDG0j93u/SWrYPQXvbu4DKkeQSXDzDQP\n8NZpCKfH/WfP4sAmXdIcCy5v4rswDt8cgM4gChJ1kveIgpqCDqzCmNFwPYxZ\nNTyWhbkreni/V+KbuN69O3kYCFsm9K4w7hNbmHjLPP+OIOHgIj6L8JJi297B\nxW7vMGXVOr7Yn/wOChAhnBcQAGgGQm6R8hor5xhgkIv61ROBdbI37oRUMwKt\nMeb2N1YrBOtAVxOguFFiPhh9mPux8kVtXA0Tugb5WxOPnOSnXVYCYaQG2iMe\nTpqN8vjzrF//+1+K1wB2RiZKYPK84zhxXkIcnNtp0lFRn1l2KFcIMkabEkyq\nGQXb55qpThDE1nmMu1HzXIANhnlZcTz+DHl2Qv350+tXZ84Rhtw4p+T8otHi\nWIiocrLUVTDrdHweRM9HiHVE2goXi1uC/H5+cbRIPt4AbPuUkSDz0gNrhW7+\nsey/G51v2rAdbWoiM7+Px+qfhEavUjWCy5e+FMzW/Qwyfr9TPPT/EthzZx6m\nq6kigbzdSMLyYRklGaLyGIbfbdc3b2vGp9XOu+5N2lOLPWzKX0JoRWjEVf02\n/cz/lAfcuOAjR3Su9VAwK6RjA5CfVX5TSJSx88GX9VGur4WJK41Ky2ySHZ9i\nrjIPnRJkluHiOt8lxfyKf4CM/TBShffFUNPy5gg5nLnH4lig4bsPNfIa/SoC\nOfPaQWNmbKKgbeJaLn92R+nk4USExINaITretJaXcV77GqiY3po0/5KgLN+d\nBdk29TlQd1udJoZMIvJDlY4rIJYHEBYQOdMpGPY0iWrWUQQ+RQCt2W5c+dSX\nynEgpB4ToH+ph0mOZGbFQxGKod6UBOe5obIygc4ZigYBa1dX7NaU/uoe3CWQ\nkauX1h+Dp1gxejGkptMd8RPjRSI1K8tn2ySCQVOGELQUhi6pFW3Cv4AyBeiB\nqmYHKvKV2MfZx6DrYVTOzh8ro5/pOOlgw/tZklbj2KS2LDyPhJ9N0CWPH+AN\nwa2+WOCHyVMfucZ0e1U3SPKeLOFmYeLJS8vQE182P5ESEQW35oYEY+gqNSex\nunFTkuqaMYgwioAlpM9L5RSVNLzt9ycZN/MPujXZkcrz1lX1MHFb1bBOQoHz\nky8qMhpUm2IYsoK6fw0tZJJO/Q3VQYFjW0xZ2TffCi9I5xWKWKp8nFR78238\n5m5hzOu8S8FfimRtgeGXaHZrOX4L8vgcDAMAFPKxBg7WpiHFn5pddZ15DbvA\nVWq3kH+bU/dgpq9sWPiL8cf2Jz8S4CGOSjnkgvLu7EY99gefJ3k7yQBHCdDy\nHS/2SEjbmYNMdMoy8j3tjNs9CElcZKywsp6LOoUi/Ovuqmj8+IJGCIjyMIdX\nbmsf4iYmUoLwXcN7OcAKsy/G3NFG+SgWt+Kekim/8pUyp0E6l4G6CXdT7Zq7\n24dc+TEDCg9Z2ySp+U3XZjjSt47XrmNLU5S5xxirJP8MSnZXmB1CvfnTNaAs\nVxTdbUrCp8LpCM/2/tzQjZTTaB+I5kkMG9DLA8CosbHaycs1B/e+ID6N59vz\n0TQKm3F3ciAKYn/5aHSGxbHZBXc3PPtjISXNes5ZjaxWSAkNgoVeYeJyQi6y\nYHObBQz7QFSocBjsjLa4hX4NxMgaCFQAFtnTxL2jeaRaALOy2dwnlXvjDf0O\nrzdCzswtAYiMn1/YWDPqJHbey8Vx3Bba8UOrVZdDkaP+0x43eCG6ASJR1FwH\naXoM3Lom8zAnNoTk9s1+rPKvbibpNAgD4kXPsn3n/vCA9TmKmKGPCFmPntV5\naA+AMyqlei/DTsRRoMLgXCBI8+auDz+oOgLfDkMyHyyxKuTwxcW9TOBGyxi5\nzr31MSTJgiD332xOHVWz9PTu+/6w5jEetqpIRuT0LDi+Xg8tiT39hrVmIxZL\nHgPTFdrZI9kHEhmSpVWaAzFNAGFKN05k5Oim5ZqQUP62QW9kqprt8r1hn9uh\nCsJlSLCLFbDFLPe1MMnEKVwYtPp9+XQbS2/d9/C7NF12PJmHwECniGRAAyC7\noqOK63lU67pDv2jpJsf/TMiItQ1zJoNVp08Tghf91gQAn6doWp4z9kAlVM4f\na0YzxlZP0tfo5qRA76yPjpQRmq0ck0H1jVIfNrWvl4qc4yyOj7ffK2R4B+8L\njmuqL6wIG9N83YgpE2cro1CXtlU6hkrETHXf98oQ9gaNbjghQF2Qs7PZUvVI\ncIzLEzK5W3pFa5l0ryG+6mbh/zzFaaTpQ50xdkCybmN3DkxUzjQ/1s92HdT4\n5iWyobWhx6d+35uz169bSC3bsyUjT9VnC1RhjDEkpZXx39uZwzHeXxRofnw6\n/xlnutrXaW6uYFkXSaSiyCEcd5HQ1uNZxQmTuAvXA7Z7c+xJMqxlxAVJMDvj\nTfPWewzbHQ8KmIg67fSs7Gs9OGHfyTG4ZdfEr5i5zgBBOYqCVqskPGscg27g\nLLZJqR9akok5dm5cpvjJhV2isO/JRL7FtfpSydacFFU7noNiBOdb8wP/pfWE\nxBHIpOP5jUbXtAq4oycMutQELK/hNVIxG5dXxj8tURmFK06ErKWvN3YN+QQK\n88L4xiL1id8+lqZx0RuKRMNXlgOIngQBe0LdJHJ0jRGXOFC20Ng4N2eQVYMu\nceYnzK6+C/pwR1FEGON3UW4rSZ05ti2MeecqJf1qMoS2QKUWfvfjPzaFpMrY\nbNMYN4QBjvmdbkeaA+YnGIKxoMdi0UqbAJwTO0udVuudgYd8tlkEwAkbD7ul\nKBjybpAA3YRZ/g2b7kv1MD7yZFDYonGj6ri3zAthxOollwUfmXtq29L0ASJE\nqdWFae+Sfvc9HWpMDsByeWaS6onRGNWC94Sm71HUwrZIpbniL6C3rfk8QmTV\n83R/B/GxpJCTVFp1svuaco4S7XXluZzgeYWVeEkO65jqaEjYKLzZUmeNNEsH\nd90klUM8ackGeu/j/0bFES/BBpnZuQpF2UPoXcjE/fr2om6SK8OZprrSIiFH\nb03qdfhJdKAgiF+3MGzftGXWhxru1K0+I0Zd4gK5vppmk/kvGVQhUTW+Ade5\nNyUjXQJOzqg3pBF0oJ47lWUpS2QQHhAE+69zCJZFYgkLV1waoWyEEatfaoW5\nkhwkbI/D2jAoO/UGyNzVSlRxIlEvKA4gH5NhvV7p4YiSE9750Z/e6gq3WvUI\n/pS4U+3ma83/p8rLCBbRl5LiBSojb+njEIdHvSPDS6NdvHQykEar0PBAaJIq\nri9K+qvzgLhkfJJRGCi53f2wMOJFgjM9XgS6FHILB8gcXwDDJAwS9ugNWSEK\nE0zvNudcl7lFbvsQcegeuQQuYuh4+CKMS9RamSGK0W7U7VmgoW74MctkZUG1\nCFZ8ahTiQqKQCOTpAkXdQqt7c4mY0VEEmPRngQZP1+49dtJ00l03dU0Etb0e\nbbfxW1jLjVLjtB+GjuIM/TzMkANnoxiAqllJniSHUHgZWO/8O8TpJZRL5owy\nm4t5vHDdrJ841vXB08XmNY8Js6O13JuAxSeXHFER+JoK4uOrKsNEO8cNEqUg\nld9vJys4iwWKIAHesDevQAvuXKe9N9oDlKVt2wjksoF8gsnyg0AlylWwCt7q\nAOOBw4Prl6qQcUqddTP9OSvFZwhXFJj56eZURPniboq5SNmQTiZ/eG0Y5oyR\nUTIWIx0v6WIztAoxF8zMS563Out3iQ6RMAx9x8GmGlRNYPnODPrrEx4p9KTq\n3njolqRwxBP+x0X2gFHiyR84EFQJuYADghesjYXpsoWiW/XG0PTrxt9q6yUo\nQRCAq7fQ6bBE1nP9lsvposhdybO67OA1BDA/JPt+k7P2m/Lde+UdnnSs75a1\nN9k0wi7SifChB65a8F9l6RdINlA6c+9H\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-03-25T12:56:37.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-03-25 12:56:39 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:41:41 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:44:04 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:48:06 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 14:48:20 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
