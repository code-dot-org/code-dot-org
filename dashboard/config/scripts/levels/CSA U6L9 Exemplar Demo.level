<Javalab>
  <config><![CDATA[{
  "properties": {
    "start_sources": {
      "MyPoetry.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class MyPoetry {\n  public static void main(String[] args) throws FileNotFoundException {\n\n    File poemWords = new File(\"poem_words.txt\");\n    CodePoetry myPoem = new CodePoetry(\"Jamila\", \"A Poem About Nothing\", poemWords);\n\n    ArrayList<String> theWords = myPoem.read();\n    System.out.print(\"ORIGINAL: \");\n    myPoem.print(theWords);\n\n    myPoem.change(theWords);\n    System.out.print(\"AFTER CHANGE: \");\n    myPoem.print(theWords);\n\n    myPoem.removeNot(theWords);\n    myPoem.print(theWords);\n\n    Scanner input = new Scanner(System.in);\n    System.out.println(\"Let's add some words to the poem!\");\n    System.out.print(\"How many words do you want to add? \");\n    int numWords = input.nextInt();\n    myPoem.addWords(theWords, numWords);\n    myPoem.print(theWords);\n\n    File nothingLeftPoem = new File(\"nothing_left.txt\");\n    ArrayList<String> moreWords = myPoem.extract(nothingLeftPoem);\n    moreWords = myPoem.breakIntoWords(moreWords);\n\n    for (int i = 0; i < moreWords.size(); i++) {\n      theWords.add(moreWords.get(i));\n    }\n    \n    System.out.println(myPoem.chooseRandom(theWords));\n\n    System.out.println(\"Is your word better?\");\n    System.out.print(\"Enter a word: \");\n    String aWord = input.next();\n    myPoem.doesComeAfter(theWords, aWord);\n\n    System.out.print(\"What phrase do you want to look for? \");\n    String phrase = input.next();\n    ArrayList<String> allTheThes = myPoem.getWordsWith(theWords, \"the\");\n    myPoem.print(allTheThes);\n\n    System.out.println(\"Do you want to know how many \\\"no\\'s\\\" are in my poem?\");\n    System.out.println(\"There are \" + myPoem.numberOfNos(theWords) + \" in this poem.\");\n  }\n}",
        "isVisible": true
      },
      "CodePoetry.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\npublic class CodePoetry {\n\tprivate String author;\t\t\t\t\t\t// Every poem has an author.\n\tprivate String title;\t\t\t\t\t\t// Every poem has a title.\n\tprivate File words;\t\t\t\t\t\t\t// Every poem has a file that has the words.\n\n\t/**\n\t * Creates a CodePoetry object with an author and a title\n\t * @param author the author of the poem\n\t * @param title the title of the poem\n\t */\n\tpublic CodePoetry(String author, String title, File words) {\n\t\tthis.author = author;\t\t\t\t\t// We know the author when the poem is written.\n\t\tthis.title = title;\t\t\t\t\t\t// And we know the title too.\n\t\tthis.words = words;\t\t\t\t\t\t// A poem is not a poem without words.\n\t}\n\t\n\t/**\n\t * Gets the author of the poem\n\t * @return the poem's author\n\t */\n\tpublic String getAuthor() {\t\t\t\t\t// If you ever forget who the author is,\n\t\treturn author;\t\t\t\t\t\t\t// I can give you the author's name.\n\t}\n\t\n\t/**\n\t * Gets the title of the poem\n\t * @return the poem's title\n\t */\n\tpublic String getTitle() {\t\t\t\t\t// If you ever forget the name of the poem,\n\t\treturn title;\t\t\t\t\t\t\t// I can give you the title.\n\t}\n\t\n\t/**\n\t * Gets the words of the poem\n\t * @return the poem's words\n\t */\n\tpublic File getWords() {\t\t\t\t\t// If you forget where the poem is saved,\n\t\treturn words;\t\t\t\t\t\t\t// I can give you the name of the file.\n\t}\n\t\n\t/**\n\t * Changes the author of the poem\n\t * @param newAuthor the new author\n\t */\n\tpublic void setAuthor(String newAuthor) {\t// If you want to change the author,\n\t\tthis.author = newAuthor;\t\t\t\t// I can change it to the new author.\n\t}\n\t\n\t/**\n\t * Changes the title of the poem\n\t * @param newTitle the new title\n\t */\n\tpublic void setTitle(String newTitle) {\t\t// If you want to change the title,\n\t\tthis.title = newTitle;\t\t\t\t\t// I can change it to a new title.\n\t}\n\t\n\t/**\n\t * Changes the words of the poem\n\t * @param newWords the new words\n\t */\n\tpublic void setWords(File newWords) {\t\t// If you want to change the poem entirely,\n\t\tthis.words = newWords;\t\t\t\t\t// I can change it to the new file.\n\t}\n\n  /**\n   * Creates a String containing the title and author\n   * @return the title and author of the poem\n   */\n  public String toString() {\t\t\t\t\t// Or if you just need a reminder,\n    return title + \" by \" + author;\t\t\t\t// I can tell you the title and the author.\n  }\n\t\n\t/**\n\t * Gets the text from the file\n\t * @return the poem text from the file\n\t */\n\tpublic ArrayList<String> read() throws FileNotFoundException {\n\t\tArrayList<String> poemText = new ArrayList<String>();\t// I have no words yet,\n\t\tScanner input = new Scanner(words);\t\t\t\t\t\t// so I have to scan them in.\n\t\t\n\t\twhile (input.hasNextLine()) {\t\t\t\t\t\t\t// While I have words to read\n\t\t\tpoemText.add(input.nextLine());\t\t\t\t\t\t// I will add them to my text.\n\t\t}\n\t\t\n\t\tinput.close();\t\t\t\t\t\t\t\t\t\t\t// Then I am done,\n\t\t\n\t\treturn poemText;\t\t\t\t\t\t\t\t\t\t// and can give you the words.\n\t}\n\n  /**\n   * Creates and prints a String containing the words in the list\n   */\n  public void print(ArrayList<String> theWords) {\n    String words = \"\";\t\t\t\t\t\t\t\t\t\t\t// I start with no words.\n    \n    for (int i = 0; i < theWords.size(); i++) {\t\t\t\t\t// I go through my list of words,\n      words += theWords.get(i) + \" \";\t\t\t\t\t\t\t// piecing them together into one String.\n    }\n\n    System.out.println(words);\t\t\t\t\t\t\t\t\t// Then, I print the text.\n  }\n\n  /**\n   * Changes words that are less than 4 letters\n   */\n  public void change(ArrayList<String> theWords) {\n    Scanner input = new Scanner(System.in);\t\t\t\t\t\t// I need to scan for new words.\n    \n    for (int i = 0; i < theWords.size(); i++) {\t\t\t\t\t// But first I need to go through the list.\n      String currentWord = theWords.get(i);\t\t\t\t\t\t// I get the current word from the list,\n\n      if (currentWord.length() < 4) {\t\t\t\t\t\t\t// and check its length.\n        System.out.println(\"\\\"\" + currentWord + \"\\\" is too short.\"); \t// I'll tell the reader if it's too short\n        System.out.print(\"Enter another word: \");\t\t\t\t\t\t// and tell them to give another word,\n        String newWord = input.nextLine();\t\t\t\t\t\t// making the new word be whatever they enter,\n        theWords.set(i, newWord);\t\t\t\t\t\t\t\t// and replacing the short word with the new word.\n      }\n    }\n\n    input.close();\t\t\t\t\t\t\t\t\t\t\t\t// When I'm done, I can stop scanning.\n  }\n\n  /**\n   * Removes words that contains \"not\"\n   */\n  public void removeNot(ArrayList<String> theWords) {\n    for (int i = 0; i < theWords.size(); i++) {\t\t\t\t\t// First I need to look at each word,\n      String currentWord = theWords.get(i);\t\t\t\t\t\t// setting the current word to each one as I go.\n\n      if (currentWord.indexOf(\"not\") >= 0) {\t\t\t\t\t// If the location of \"not\" is greater than or equal to 0,\n        theWords.remove(i);\t\t\t\t\t\t\t\t\t\t// remove the word,\n        i--;\t\t\t\t\t\t\t\t\t\t\t\t\t// and move the index back down.\n      }\n    }\n  }\n\n  /**\n   * Adds words to the list that are given by the reader\n   */\n  public void addWords(ArrayList<String> theWords, int count) {\n    Scanner input = new Scanner(System.in);\t\t\t\t\t\t// I need to be able to scan for words.\n    int numWords = 0;\t\t\t\t\t\t\t\t\t\t\t// Right now, I have no words.\n    \n    while (numWords < count) {\t\t\t\t\t\t\t\t\t// But while the words I have is less than\n      System.out.print(\"Enter a word to add to the poem: \");\t// the words I am asking from the reader,\n      String newWord = input.nextLine();\t\t\t\t\t\t// I will keep getting words from the reader\n      \n      newWord = chopTheWord(newWord);\t\t\t\t\t\t\t// chopping them up,\n      theWords.add(newWord);\t\t\t\t\t\t\t\t\t// and adding them to the words of my poem.\n      \n      numWords++;\t\t\t\t\t\t\t\t\t\t\t\t// Then I'll move on to the next.\n    }\n  }\n\n  /**\n   * Chops either the first half of the word or after a \"the\"\n   * @return the chopped word\n   */\n  public String chopTheWord(String word) {\n\tString chopped = \"\";\t\t\t\t\t\t\t\t\t\t// Right now, I have no chopped word.\n    int theIndex = word.indexOf(\"the\");\t\t\t\t\t\t\t// First I need to check if \"the\" is in the word.\n    \n    if (theIndex >= 0) {\t\t\t\t\t\t\t\t\t\t// If \"the\" is in the word,\n      chopped = word.substring(theIndex + 3);\t\t\t\t\t// I will get everything after \"the\".\n    }\n    else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Otherwise,\n      chopped = word.substring(0, word.length() / 2);\t\t\t// I'll just cut the word in half!\n    }\n\n    return chopped;\t\t\t\t\t\t\t\t\t\t\t\t// Either way, I will give the chopped word.\n  }\n\n  /**\n   * Extract each line from a file and puts each line in a list\n   * @return the list containing each line from the file\n   */\n  public ArrayList<String> extract(File thePoem) throws FileNotFoundException {\n    ArrayList<String> linesFromPoem = new ArrayList<String>();\t// Right now, I have no lines from the poem.\n    Scanner input = new Scanner(thePoem);\t\t\t\t\t\t// I need to scan the file it's in.\n\n    while (input.hasNextLine()) {\t\t\t\t\t\t\t\t// So while there are lines to read,\n      String line = input.nextLine();\t\t\t\t\t\t\t// I read each line\n      linesFromPoem.add(line);\t\t\t\t\t\t\t\t\t// and add it to the list of lines.\n    }\n\n    return linesFromPoem;\t\t\t\t\t\t\t\t\t\t// Then I can give the lines to the reader.\n  }\n\n  /**\n   * Breaks the lines of the poem into individual words in a list\n   * @return the list containing each word from the original list\n   */\n  public ArrayList<String> breakIntoWords(ArrayList<String> poemLines) {\n    ArrayList<String> wordsFromPoem = new ArrayList<String>();\t// Right now, I have no words.\n\n    for (int i = 0; i < poemLines.size(); i++) {\t\t\t\t// I need to read each line in the list,\n      String currentLine = poemLines.get(i);\t\t\t\t\t// working with the current line to break it up.\n\t  int startPos = 0;\t\t\t\t\t\t\t\t\t\t\t// I'll start at the beginning of each word I find.\n      \n      for (int j = 0; j < currentLine.length(); j++) {\t\t\t// As I go through the line,\n        String word = \"\";\t\t\t\t\t\t\t\t\t\t// I start with an empty word.\n\n        if (currentLine.substring(j, j + 1).equals(\" \")) {\t\t// I need to find the space\n          word = currentLine.substring(startPos, j);\t\t\t// and get everything up to that space to make a word.\n          wordsFromPoem.add(word);\t\t\t\t\t\t\t\t// Then I can add it to the list of words,\n          startPos = j + 1;\t\t\t\t\t\t\t\t\t\t// and move my start position for the next word.\n        }\n      }\n    }\n\n    return wordsFromPoem;\t\t\t\t\t\t\t\t\t\t// Now I can give the words to the reader.\n  }\n\n  /**\n   * Chooses a random word from a list of words\n   */\n  public String chooseRandom(ArrayList<String> poemWords) {\n    int randomIndex = (int) (Math.random() * poemWords.size());\t// Get a random number between 0 and the size of the list\n    return poemWords.get(randomIndex);\t\t\t\t\t\t\t// and use it to choose the word.\n  }\n\n  /**\n   * Compares a word from the reader to a randomly chosen word\n   */\n  public void doesComeAfter(ArrayList<String> poemWords, String compareToWord) {\n    boolean comesAfter = false;\t\t\t\t\t\t\t\t\t// I have to start by assuming it doesn't come after.\n    String randomWord = chooseRandom(poemWords);\t\t\t\t// And I also need to get a word from the poem's words.\n\n    if (randomWord.compareTo(compareToWord) > 0) {\t\t\t\t// If the random word comes after the reader's word,\n      comesAfter = true;\t\t\t\t\t\t\t\t\t\t// then let comesAfter be true.\n    }\n\n    if (comesAfter) {\t\t\t\t\t\t\t\t\t\t\t// If comesAfter is true,\n      System.out.println(randomWord + \" comes after \" + compareToWord);\t// let the reader know,\n      poemWords.remove(randomWord);\t\t\t\t\t\t\t\t// get rid of the random word,\n      poemWords.add(compareToWord);\t\t\t\t\t\t\t\t// and user their word instead.\n    }\n    else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t// otherwise,\n      System.out.println(randomWord + \" comes before \" + compareToWord);\t// I'll just let the reader know.\n    }\n  }\n\n  /**\n   * Gets a list of words that contains a specific substring and\n   * removes the word from the original list\n   * @return list of words that contain the specified substring\n   */\n  public ArrayList<String> getWordsWith(ArrayList<String> poemWords, String word) {\n\tArrayList<String> wordsFound = new ArrayList<String>();\t\t// I want a list of words that contain the word.\n    for (int i = 0; i < poemWords.size(); i++) {\t\t\t\t// I need to check each word in the poem,\n      String currentWord = poemWords.get(i);\t\t\t\t\t// so I need to get each word as I go.\n\n      if (currentWord.indexOf(word) >= 0) {\t\t\t\t\t\t// If the word I'm looking for is in the word from the poem,\n        wordsFound.add(currentWord);\t\t\t\t\t\t\t// add it to the list of words found,\n        poemWords.remove(currentWord);\t\t\t\t\t\t\t// and remove it from the list of poem words.\n      }\n    }\n  }\n\n  /**\n   * Gets the number of substrings that contain \"no\"\n   * @return the number of \"no\" found in the list\n   */\n  public int numberOfNos(ArrayList<String> poemWords) {\n    int count = 0;\t\t\t\t\t\t\t\t\t\t// I need to track how many \"no\" are found.\n\n    for (int i = 0; i < poemWords.size(); i++) {\t\t// So I search the list,\n      String currentWord = poemWords.get(i);\t\t\t// and get each word.\n\n      for (int j = 0; j < currentWord.length(); j++) {\t// Then I search each letter of the word,\n        String wordPiece = currentWord.substring(j, j + 2);\t// and get a chunk of letters to check.\n\n        if (wordPiece.equals(\"no\")) {\t\t\t\t\t// If the chunk of letters is \"no\",\n          count++;\t\t\t\t\t\t\t\t\t\t// add 1 to count.\n        }\n      }\n    }\n\n    return count;\t\t\t\t\t\t\t// I'll let the reader know the final number when it's done.\n  }\n}",
        "isVisible": true
      },
      "poem_words.txt": {
        "text": "pizza\nis\nnot\ngreat",
        "isVisible": true
      },
      "nothing_left.txt": {
        "text": "And when there is nothing left to do but live,\nlet us retire the noise,\nand build a home inside the stillness.\n\nGrab a wrench and unfasten the parts of you\nthat have become mechanical;\nrest your weary limbs in the bed of anomaly.\n\nOutside,\nthe machine is powering down.\nYou can hear the birds when the gears aren’t grinding.\n\nWhen there is nothing left to do but live,\nmake a vacation of your body;\neach part explored, a stamp on your passport.\n\nBegin with your heart, maybe?\nCrawl inside and sightsee,\nask difficult questions about who it is, and why.\n\nOutside,\nthe machine is powering down.\nYou can hear yourself when the gears aren’t grinding.\n\nWhen there is nothing left to do but live,\nsimply show up;\nthat has always been enough.\n\nAnd together in this sudden strangeness,\nradical imagination will run wild;\ntomorrow being built today.",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2021-08-09T14:20:27.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2021-08-09 17:59:49 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 18:00:17 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-12 18:44:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-12 18:48:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-12 18:48:19 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-12 18:54:16 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"}]"
}]]></config>
</Javalab>
