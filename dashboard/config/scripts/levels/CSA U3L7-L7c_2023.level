<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "The <a href=\"https://www.kaggle.com/datasets/isaienkov/nba-top-50-alltime-scorers\" target=\"_blank\">**NBA Top 50 All-Time Scorers dataset**</a> includes the points each player scored in regular season games. Each <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Player</code> object is stored in a 1D array called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">players</code>.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Basketball.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcAveragePoints()</code> method to calculate and return the average points scored using an enhanced <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loop.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">DataRunner.java</code>,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Basketball</code> object with the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"names.txt\"</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"points.txt\"</code> files containing the names and points scored data.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcAveragePoints()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with traversing a 1D array using an enhanced <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loop.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ntotalPoints = 0\r\n\r\nfor each player in players\r\n  totalPoints += player.getTotalPoints()\r\n\r\nreturn totalPoints / playerPoints.length\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ What is the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \r\n    <p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class is a hidden support class that has methods for reading data from a text file into a 1D array. It has the following methods:</p>\r\n\t\t<ul>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toStringArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> objects containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toIntArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> values containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toDoubleArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> values containng the data</li>\r\n\t\t</ul>\r\n    \t<p>For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nString[] names = FileReader.toStringArray(\"names.txt\");\r\n \r\nint[] numbers = FileReader.toIntArray(\"numbers.txt\");\r\n \r\ndouble[] prices = FileReader.toDoubleArray(\"prices.txt\");</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/enhanced-for-loops"
    ],
    "display_name": "Basketball",
    "bubble_choice_description": "Find the average points scored in regular season games by the top 50 all-time scorers in the NBA.",
    "thumbnail_url": "https://images.code.org/946a9087232443ab58bf5ca2ce801c44-basketball-ball.png",
    "encrypted_validation": "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\nFRg0zXGiPz3YWt2QKLbDE5HqIezgwg==\n",
    "encrypted_exemplar_sources": "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\n",
    "start_sources": {
      "DataRunner.java": {
        "text": "public class DataRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Basketball object with the \"names.txt\" and \"points.txt\"\n     * files, then call the calcAveragePoints() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Basketball.java": {
        "text": "/*\n * Manages data about basketball players\n */\npublic class Basketball {\n\n  private Player[] players;    // The 1D array of Player objects\n\n  /*\n   * Reads the data from namesFile and pointsFile to\n   * initialize the 1D array players\n   */\n  public Basketball(String namesFile, String pointsFile) {\n    players = createPlayers(namesFile, pointsFile);\n  }\n\n  /*\n   * Returns a 1D array of Player objects using the data\n   * from namesFile and pointsFile\n   */\n  public Player[] createPlayers(String namesFile, String pointsFile) {\n    String[] namesData = FileReader.toStringArray(namesFile);\n    int[] pointsData = FileReader.toIntArray(pointsFile);\n    Player[] tempPlayers = new Player[namesData.length];\n\n    for (int index = 0; index < tempPlayers.length; index++) {\n      tempPlayers[index] = new Player(namesData[index], pointsData[index]);\n    }\n\n    return tempPlayers;\n  }\n\n  /*\n   * Calculates and returns the average points scored by each player\n   */\n  public int calcAveragePoints() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Use an enhanced for loop to calculate the average points scored by\n     * each player in the 1D array players.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    return -1;\n  }\n\n  /*\n   * Returns a String containing each player's information\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (int index = 0; index < players.length; index++) {\n      result += players[index] + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Player.java": {
        "text": "/*\n * Represents a basketball player\n */\npublic class Player {\n\n  private String name;       // The name of a player\n  private int totalPoints;   // The total points a player scored\n\n  /*\n   * Sets name and totalPoints to the specified values\n   */\n  public Player(String name, int totalPoints) {\n    this.name = name;\n    this.totalPoints = totalPoints;\n  }\n\n  /*\n   * Returns the name of the player\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the total points the player scored\n   */\n  public int getTotalPoints() {\n    return totalPoints;\n  }\n\n  /*\n   * Returns a String containing the name of the player\n   * and the total points the player scored\n   */\n  public String toString() {\n    return name + \": \" + totalPoints + \" total points scored\";\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "names.txt": {
        "text": "Kareem Abdul-Jabbar\nLeBron James\nKarl Malone\nKobe Bryant\nMichael Jordan\nDirk Nowitzki\nWilt Chamberlain\nShaquille O'Neal\nCarmelo Anthony\nMoses Malone\nElvin Hayes\nHakeem Olajuwon\nOscar Robertson\nKevin Durant\nDominique Wilkins\nTim Duncan\nPaul Pierce\nJohn Havlicek\nKevin Garnett\nVince Carter\nAlex English\nReggie Miller\nJerry West\nPatrick Ewing\nRay Allen\nAllen Iverson\nJames Harden\nRussell Westbrook\nCharles Barkley\nRobert Parish\nAdrian Dantley\nDwyane Wade\nElgin Baylor\nClyde Drexler\nGary Payton\nLarry Bird\nHal Greer\nChris Paul\nWalt Bellamy\nDeMar DeRozan\nPau Gasol\nBob Pettit\nStephen Curry\nDavid Robinson\nGeorge Gervin\nLaMarcus Aldridge\nMitch Richmond\nJoe Johnson\nTom Chambers\nAntawn Jamison",
        "isVisible": true,
        "tabOrder": 3
      },
      "points.txt": {
        "text": "38387\n37965\n36928\n33643\n32292\n31560\n31419\n28596\n28289\n27409\n27313\n26946\n26710\n26684\n26668\n26496\n26397\n26395\n26071\n25728\n25613\n25279\n25192\n24815\n24505\n24368\n24005\n23845\n23757\n23334\n23177\n23165\n23149\n22195\n21813\n21791\n21586\n21276\n20941\n20925\n20894\n20880\n20843\n20790\n20708\n20558\n20497\n20407\n20049\n20042",
        "isVisible": true,
        "tabOrder": 4
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "video_key": "csa_enhanced_for_loops",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2023-01-12T21:53:55.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2023-01-12T21:53:55.918+00:00\",\"changed\":[\"cloned from \\\"CSA U3L7-L7b_2023\\\"\"],\"cloned_from\":\"CSA U3L7-L7b_2023\"},{\"changed_at\":\"2023-01-12 21:53:57 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-26 14:25:53 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-26 16:16:57 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-27 04:57:04 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-28 14:03:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-28 14:04:43 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-28 16:05:36 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-28 16:08:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-28 16:08:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-28 16:08:57 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-28 16:09:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-28 16:09:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-28 16:09:21 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-28 16:10:57 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-31 01:43:32 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-02-02 15:19:24 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 21:05:38 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
