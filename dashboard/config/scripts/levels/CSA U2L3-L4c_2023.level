<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A scientist wants to analyze planets in the solar system.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Planet`(#e7e8ea) class to assign specific values to the `name`(#e7e8ea), `numMoons`(#e7e8ea), and `hasRingSystem`(#e7e8ea) instance variables.\r\n\r\n✅ **TO DO #2:** Write a parameterized constructor in the `Planet`(#e7e8ea) class to assign specific values to the `name`(#e7e8ea) and `numMoons`(#e7e8ea) instance variables and a default value to the `hasRingSystem`(#e7e8ea) instance variable.\r\n\r\n✅ **TO DO #2:** In `PlanetRunner.java`(#e7e8ea), instantiate `Planet`(#e7e8ea) objects using each parameterized constructor. \r\n\r\n✅ **TO DO #3:** Print the constructors and the values assigned to the instance variables for the `Planet`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printPlanetInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nPlanet earth = new Planet();\r\nearth.printPlanetInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing a parameterized constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "PlanetsRunner.java": {
        "text": "public class PlanetsRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Planets object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "Planet.java": {
        "text": "/*\n * Represents a planet\n */\npublic class Planet {\n\n  private String name;             // The name of a planet\n  private int numMoons;            // The number of moons a planet has\n  private boolean hasRingSystem;   // Whether or not a planet has a ring system\n  \n  /*\n   * Sets the name to \"unknown\", numMoons to 1,\n   * and hasRingSystem to false\n   */\n  public Planet() {\n    name = \"unknown\";\n    numMoons = 1;\n    hasRingSystem = false;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specific values to\n   * the name, numMoons, and hasRingSystem instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign a specific value to the name\n   * and numMoons instance variables and a default value to hasRingSystem.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Prints the name, number of moons, and whether\n   * or not the planet has a ring system\n   */\n  public void printPlanetInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Number of Moons: \" + numMoons);\n    System.out.println(\"Has Ring System? \" + hasRingSystem);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Planets",
    "bubble_choice_description": "A scientist wants to analyze planets in the solar system.",
    "thumbnail_url": "https://images.code.org/f1532040bc5141e260cc64df5dd8ed76-solar-system.png",
    "encrypted_exemplar_sources": "5Fhgn4B3GK5cPeDhD3mc//aMP4xARXixvLEvDocDm35bCdEGlY2MhCUw3Dtj\nbbO3NozGXTOikSaNSnqp1QqozIHCMd/ZA9+hg+QzrXirCDeKK2j9UR221aPe\nblImnZAK6NsiPaU3XWAjPLWYWb+8QMdH3MjQwI5NK7pjb+9WkmzMiHM5gV4F\n/9/KNXYvjd5CawtURAfEys4cYxAD8KN8goA0Tgmi+w48bClL5uiGK7qwD2pA\npERvFDEzEjNXrQvgTAqtD5k8gYJueA5aUL53VNvG2u0v65SKKb+QlrLWZyAq\n4sFOJ07DaWqBski6mb2sFjbEHpHdQ6n9y5NgXATdot04i1CJQbqI12+LH3f1\nErilktvCIETugJNOpN6JqvCNvGvHXWo4eljAOSp7T+RqOf6ee7ARNUY+W8lV\nwpoti/yaUR3moNsHXb2/ADf6NOdo2RzJZyHsI7jf/ne8yyySU9WjeF3vM/Ba\noMMWHGQ2JueorbOup/j/iIceh7M+LuLWtUzFo6LFnmyWPqucfyjdh6KGhFAI\nTJtiTvVuqakFETILs8Eq7NsEiEah5KhylV7xnZhRUPkwWu2dEj1ifKrrYXhn\nOJdCbc9Dk9DCBH5Wg8tUM2zwHURo/prjpKz6MV43CNvcF5egziwoB1JR8UkD\nQR0kBe1dwXyMiQ7MGSppyWpxi+2az+dXt41Os4v4hT9bWYQ0c0Xo9ufvcWYe\no2HV7+WGyO2A9aGB3TCBPhJb/fnFBDEjDqgQOBBAji2u3UL6L94eHwQ4uM1r\nGIelZpuX19b9sjBkjhmNQF2gq140khOuOYSPIreEqMrBnO8LgbgM/Wv5xRrd\nlyx7NJx7642TrqWNNke2Fw6NeRxK0ZB2V90TNoochCFfvC34IAaopV723Cik\nOHYSvTPFaPStXtmQVqgEqxaaY9uVXXxOInUYZxEKga0Ag0p0DjyeER1FRC+G\nBZiWqjmoGRB21GWCMjEmVb9HDLTdcDcpUVR+E/3fJxBf+2+p5rbHZUConXBz\n/t4hN/siCdJHtqmzOV0su9c/dr5k/xy6dyK1fQyp7dt+AWWUX9jJStXLvjZI\nVfDu4NSMNdXIKPly6TXDdcyc1KxYGup5Ifaz1xfSv3fqxUAY7k9WHbmSHHfH\n8eIxGuIWOQ6pjnur3FXfqtE48q5egjSofXKcRtyM5DOMm5w2CMcgAUCXOOOM\nyKFiZNkMAhaRHN6xz86Tbci1OXAz33uDdJbhy0gzJfuU/wxh+KKMIDa3GZ6H\nJr6KA6L5lCO9yOvfTXVaLaas23WyZVhdC5PkXDht1+Vv/ZGW3sXiUvkLM72v\nG5lQMs8ZP2bSv5ZMOmucAGeNXO9NVV0gX/rpXBA7fvNffdkMtMTyo6q4pyvS\nQHmX6iLj3pS/1aV/IIf0AdzNJW9E4i0pXwlOj2bPzClh1R22DxuaIIlVgBXn\njv3Qnh6HyzD65K/4lEp8wnLcSau/94y7EuSwlWgH9qN/q1tVP11QyCVz/WFk\nU6Y3IN6I2QK2tbvImkDgJo9NPJcNtWnsceq01ZugFcBXVNt9TVqM58DgnhSV\nn2wERTNEJRTXvAfbyru/vQ8PQk20HU98jvTZU3HSNoERfmNjGHvTYjNntlfp\ntIEwFjSACm6CT0bT4eEvfBBdB07FNh8e50lk0sZiaMVmA0b4e+NtwETnHCVq\nQkD8jiSbIDuOmq5BB3A54m3oHrFnI73uUoxrNyy23RezvsjBlWh6Vmj2q1w4\nsVIwUvuGmZnRbGrfjEg6KgcwK6DGb8xv5wHwhzKgFDdXTNtYg9yG0KQkAJjm\n0s2ZPDw9+UYM+Ewh7l90LkfXn6jGXlv1yubjFqnrDUg0QwaKJLg7ItHELMjk\nVlC1LsduGchArchQz+4KEgqvsmx1gHZTBmxkctGQoVHt2uMxW1prYwBMuhIk\nyFNiEFuIlqQ1YOVxtL8jk2AqRG1EPVmQe3IIyCc4cZYUDmvfztcsZdtqYsGN\ngrp8f4X+vG6CVSqQKtbt6Kb6a220H9jMN+k5hF4VfBLugphB8VVLxV567uDz\nEugj0hVlwXeuVROedJ1YOVBC+sB1MgRQdOt6Uz1TfQg9o4+NzcaYwXd06+S/\nIFk+qDbNo+W9iJ3hmgDC0rPdcVRVButpKXd73ul5Vl37AScy8YYssTw3Fq2d\nfv3P3pGkCyCTNpzYdOqx5B1nlPmSuo0jhih0p+gHUWPccmYmNuMb/gynmSDv\njjUc0RvfLQJf3sQ9YMQE7jqP6G/Il+KMa7NA40AfrNZABjHuejz1bLmwsjvh\nXm8OeSiGZZADeX5F9zPPR8h5Z8KNJsQPRgdTzoaFdI8OaX7gIPT1Sw44UzRU\nx98ul6OwXabQRJch6VxtvAlaLONQBNAY6lDQS8R/S358HQcP4qHyAfwsjBJD\ny6nheyn7vIxbl79J6iY7vYu+kPzpfAvm5x6ML8pTBBcTrmcZJgcLPHeTwrgl\n59lxFpgX4rwQ99Ggb/a4n+W6nirJs5FDI5g2Ys4tJbeLLoZYeWbsJhndgnV4\nlpg62J5j3pXTOishMXyo4geStE19gqdMsxHMnnkDr3DpflUC6quh7oUkU7Ac\nHHK0AQaqHYCwY7kKo9i1ipv56Jl5K4w27h0gZfCgvDjch2wzGWHIf9RdsJvn\nqqQsg19rNQFLyciVL13AoxHFT05nCF7EaRCmbVTwSwbtHoTWQWcUBFHN98Ot\n1X1u5Sy2rfGHC11oO6GB477lHfBQaRdjhQeSIMV/NcWW5jjlVNT84YcNGaod\nSIS7nvmJWvJw6DpENc6ZmK0fzB1SSGAb1aKI0OBpGyoQilgYd+ObzPx8aLxS\nTvCBQJj8B6D33PueKmig4WhqbyguAQB5bqdUfvNao21TRmgUb1deQ1YrHubg\n/cSfR6OPIunAOCpdyWmAsVHXHaXBm3uM4ne6O494ZsfplYy+h+VTydu+fRwz\nexUnJeMmmlWO3jCLM2XHJLZpf1Nb044wRB72c3FrUu0FZxOCdS+8Y04uTYfT\na60KF2wn3ghtNlIqDm7WdtXi5Rnp/cNLiU22OTuXTSmjmMXHTRPPgXsCMaky\nJSI00K4pl5IBmr6bCDK5eMtOpalf+kPBc7nH934imK7ucaroqcaKLnn2ZtgA\njk+Bfd0icReP6Ss3/WsXI7CHsk5BuK9edh+Kip45/Z8HlS4w/aEVPQxxkwOo\nG6F+M8ot6Pil6ThLVI4pPu3Ey1Tiq9xO4VoOntKoeBRJtMvofltonQta25TQ\njJAMGbDua3iHSJ1PDcV8BWSAXDhsyMy9EOswZ/cBt6pZFvZGqraa+hNplGR3\nTkYEtT24a6tSwk+Fxh+wyhckz9VUwNCs2JfqtEst95AE52SbxmSP2ZdPI0mG\nLKqrlWTa8TLwEnkbCVqPidV7ksFI3LH78+uAucZNhyQT31ke9r5aQJPofZTS\ncP+iuaB7ZJpi4r2JBLRYLY/kqsTYdKfcb0UmEDi/X3oDp1Sm9enaplV8I2hs\n60QPVlu0zDovWtGfdMij/AQm9uH4guBHfBwtZa6rPg+cIVPPGhQ9t0FtSP3Q\nsjzuin+YhBYOTsqPiYuHmp3sWl0PMc/Of511kCEXl5QnWh83rnRPbdvQ2iqm\nMUfxNnSv5+qI0jLOpoRLZ8w28JtUDAgpvpdIGHvyPXl35s+3YLzVeHAUMz5B\neHVGSNazTn7PW2TnHs+Hrq/kPt7nYSBx3mkCUbNaF7y9wEKftPv/8YxTeTI4\n0corP8Q609RIc9iwKjVOnM3Vxl6SO7NWJGa5QsKLrYzxrP4QG/UVjRdVHoKT\nedrCphliZL4o4v2fY3MQmBZxJwu7UfUUyyxhsCIeFtTpjAbUB5wSUeEsCMkT\nar6/WAmRmOR5HWorc9pB6Ltc1etZ6+UCEKwYfquWZYnEBfTIzvzCYZjvN2o6\n+7BEDgBlGuA0FbdGFlpvBByEl1SM8MdWmvYIbxMdz1C/S0hjQ5LGYwJl0/et\n4vkyll0oRZbmUvri9N3une7YdFuo75kvbMHFpWWeyMaGAP1ZSRKSAoETPv/k\nHtc8ySGbvc5NxIH8a7BT/3q4Bf2n+xlaeIWhjn5tOPsKeVP6oTmqHYqsXkCX\nX0A5Sp6Tf6Zvvtlq3Q7HuTn1Yt0EKE0/jlKzu4d3+iquXYN+mUyRhn3Jxiou\nA5cS2RYMp1pt/MbPraKIwsg8MXhFQIp8Aaq++j5zzOPrSbNnULnPJPhCESIt\nOfWpiv+nHAVpdFH7kJk04vZS3qeGo2EvnIrTLb+iVVaCgs3uUqfljSDvWLNJ\n2pSdpbaocX+8me8gmVk8hPprLMjHCFOMCB4agCUcMIKVhflZE4LmS6j1JOHu\ny1Vd6w8v+9EfAOWeu+ZvVvXxTaB4rhRFM0APIlo6xFa74xwLezmNV3HdHk+x\nEwVWqKCi8gh5++OztbXBon0EEEaBzRDypiR9mbw7BtBzARWFCxbDhV+kRNgh\nczsQUS7zj+rzhGZZho/E/9KcoO9Er9wBG2EG8dTIpGsep+frxEeYRLeEgc4/\nvxoAiU/W69dryJGUmcammESKDrtQnKRNjF8QlZ5NhLn9I6ekCFNmJ30ff++z\n5R7ONlouvsMz3emML0FcG6dXDKB7O3qopMSYeu0Ozqf15+9OK9yV8mQ2gq4R\na6oxzCQDpSwVGbcpYlTdBhMIklUrd5p3bKLf3AnorghH66Q1HMe+T5iXL/48\noppONXIvzf0Iih2j0NKoUSqxKmb9YBRT9Dfrhel7aIugcJfS6/+8/iKDyjb5\n+P88SvG6INSYWhidqihM1qqcwEgaaxxmbnw8JXc3+RXvor8xcWuyC22PasOo\nyADOfntW/56nINQF7VYlgpM4r+oh9/jfStUHeDW6sGFrfjpcpkUaI9oKGGUd\nC6tXiILACQ8O5mw1NGgrBItBPaTUX+36cAIUzh7wBY/9/+s3Y8+TEC7So9Ge\nWHiClplugMeWtI0Mcp2XHA/eFaoFeIOU8USiYMNkE3ILJizrG20/H12wcAMx\n0B9+Exy1C9b7UOxLyJr6ZuXIbebe6HeUSuCS8YUju6g8OoRilDzXOY+pn8Kh\nPkKyrsUu6mjlasGSYYwM5RV8+2pebgFNFaxOu/HKQChknCK5YE0PPc7gvKB8\nl9GkCC7DW0Qh/D+I9K9dyiTbcF+WUMXhsREKV6B5gAoNbbAFm9tniY+7RtNU\nNise8UDI+pk75iYPGgW3fbWrJN/pcvdVCsfA8ehr1DZWFBKGzpDTC5W0MOY+\nC5Yv42ev3LSF4jitqIBW6QwjABCbMK7TI/LdhjeXHawoqrH1LH8WvFYnicIb\nivx6VD61+TnpCoy5bPqyCYcnfyV3Ef7YpnhkJmyPjqbIMEsZQdCSFUszYIW7\nopDnKfnCl8sbxz6/aHISvvibXwzuHBtPyP9a60So0RFEiqFv09mXjm8ZSJzj\n/pR0/wb76iUKYEEGFzqTvj7kc5sKJtbL/Jd47NTAOTdR2v8a5ThjbjfKF6Pn\ntK/Rpx0P6sVq1Q/MmzVp9zZ82gRnJiiUuND6yQTWVg8eD5Od6kBS+Cf2Nh6u\nb1PTmpQRDKCE/E7TFh0mFN+ySvHkt3P8jWGeErLCT5pZPkWcp4RwOVldLgjO\nBT/ywQGc5kDqtGFwHHRCPqKvSL3D7A3AolBMTfo3sGPMhCZh1miIXff3WKfJ\nUjHSxJNil3iVK+zDcq1mvJeE7/OzYA6mGMSfgHav0y0Y8DSv+DP2kUwKDrEL\n8q6X5L0CpdTac4CAORgq4HFzOW2rqCkjexJ6yFMdp5sw4t790gXOwb0mxsnr\n3gJ0w9ZmQp40D9oAnrymsm2c4NK07GsUIPcHtYLM6KzrXiAE8Gw3IHxs9l+7\nEhAarY9wxsK6/X6UQFb64ZTImZWxLmk4f7rlMNl9y751scgmhhI9ULWrJHMT\n3S8fK10GmsuLFmZbelFbXuEOb9D3TjmvZxbUJxrqpoJcg0WCyU3KV15jlLCA\n6wgoPlrsVgvjLFFsOfvbIWjgwsqFKYSU9K+0gC7aImZaqbnDHAzgfh6+DPnB\naCoD8EB/5nd5jEp5zxcaREVnzPekMMCE+eCPtjCCPN4sESy9utKw/NiNjIU2\nJI5siKhGipcZUKsbf//nu5u3OHDT6rUf0Z+SpTLnhKHiuVw8ST7VyC2WEmlJ\nIpyrMqeOvLH8UEY+0pjuxncPFcImV+LXZ4+ldfsjaCBBWApo+iz3TWhpK4vS\nFpPA2ILUEijdbiMsfmA4BGLpTOirVUn9Xnaa2L/MqUca/JrgZuCzjFGZ/H0T\n4Gpdp2iEj4ABXqlmvOr8cZyNQtqMYdsZkd/oAhqd4sATCIti5DBbDYsbyk/W\nSD6U4SxW9jzNlZ2dyGmTKIBujWWgPmFqVRpMBy2RbVt97XXLfkd4zlwLC36B\nxlB0RxeLFeW3HnVvKeGL8B4N7PQubRBVJ59rtaDyKhWryaRIJWBJaxirbalV\n6PfZUvBtCdD8A58seimNr0jcBwysMY6fG6FPQJHEfkr2zVDHo0Ju3VbyCGss\nDRyq63AsBRTVc5MF3E1lB+qyOLFTqYZQyXEVpfyR3VSDmaPk7EciuRtXalmS\nsMndbuR+XdiduFFvy6dTxFY7+Hy96uw+UXejsIeCPZaDGP9T0nOOXAmd1uG+\nrLRe1QXzzBoG+ZQbBgC4Wuphs6B5/TaD51rae51WEwcr+0/Us9U746k45/aV\nj5w7pbussR+N3KfjkuvT5SGMIEQLtY5vKpA3E63uwc2A1AsO3xqenzWlyvDY\njY+q3XnUYGCZM62ukFc2cIVB8r1K0grflo2BNaacaSmML4sWzjpaRp1ALmRN\nAUiBC9YrdSV3dLh3JxayKtkbdgOSUnJ1evfP6FV3mO0WMqKFFwFTwXhvyahb\nBe4v6XOaXmQQw1n7h+TVhFIVbOkLpXX7pobdmzbKHI23gJtRTl6ip8GkCpR8\n1PW0O3WXv+J9qgewB2052mPv9zD5MbKb/k2ntarxekIXpNYlzJLa+YlLGgNf\nfxkwIJNbLbSNkHeIH7D/LrzVxP4c6JkK6MSwWDx4/FcLAQX4kpcZETldzggF\nRrMnYtaEO0BMUKTayMU7UoYclNeplc6oRZrFfVZwW59tKKEqKQWmKHQ34/1+\nUGp5Wsbx9NtVhJyO7HNueRDoqu/Am12kfBUqeJW80RmBuasUM5gQV2rqDGXo\nFlqnhxlFJo33izFVfMQTMDWTQlfOmq/mVBkN+6leHnfgrZBeWK78Ea/Xb4j2\n8OpyB06pmMG9+UWk1Ivb1ecHl0o2aqzh6q4mJn/Rm4AuZehIbgdMoCy68OYO\nEZ6+s4D9+BvCx6tFb2o1LpvDXetmd3tcFXq7HA1WjngbX5rpict11OE8wFgJ\nWEq7XXYz909TooHyNkxQKPP+d81VGNQNSVwtrYOWZAfbz/fiuxYE4z3SvLQb\n/PTGStKDQqijnlKHyZWHTrkOIOwTj7+KYL3aD7bj1O7fP8m6OcAei2LFQh4y\nsJqULlCuhxod+i9327JRPmmd3AzrS3E0KHhgVdsvAe9+u9gIGrWsRhOkrRoz\ncPnPzK+sd+RPqGBvjvW6AD47Cu8U7O2fAac/MwxNn/Gu3Apq/lpbGYSBT7gq\nNcsE1I6i76w56YRVHsJgon19oijfphqF5ZN+fFXWHbqfQH2FP1eGP6l97pN8\nT+eP676c9E4L/fIhuR1VxJzUOggDRW7pZiR377HTh9PWQ4rTcp3qFfFywd2A\nm2eGHYvXTjrFigJssIybXIEch91IlNwqs2LjzvdLqE3Z8X19I3sic4X4tI2i\nHcLASiCParO6WZFsPfKf23KBUfX+n78l34NK0yb8f9pS7OgqNgU4QHQYlq7l\nK9DS5lZ2UXKfSqGq12dyCBznagK/KqZmWgd7agE3C07rVAlD3qRcDi/Qc134\nrx8kEK9Q1GEz2QCKgJ8yBXySF8YdrqqHgbDZ3JtJ5baBcnzTTLg09JWPx/4D\n0KDDlpGgpSgxI4OVrJTm7E82WaaY2IeF5WOl6r8xFvYFql7U28C+rW9dmZlf\nthKXjSOnS136XerfFf1T4LL9kT4IceShSKRm7Hp0IyPGraZIoMsKBXJNyZ0P\njSPGn3aSJMX8YfHkQNyXTuhF6B0auMyLd1HLyCpxvpBU0e4uOuogB5RQvyia\nynjADiLhPZREZIq+ANcaZzSffzsbzpJUAvtydN6+5JR3NfXhnvUCbDSiQHtI\ncdrn81H1fSdacDPQ5b5du6iZkEfcU4OhHUaLdmhDAjfJbQ3v5Fttdb3JhPI4\nhExsEIeQpzes0D5oqZmyNgo2N33CAaLpTQQwQJr1kGUutZbB4OGZauaYShvn\ncmdPigKoMxOMN4UEjlHakqrxDFmtCaweA9iOR5cfixPVyRSsxGude6pojAmx\nvJQTwld/yICN49aeJsgax1XJk0AgPiiyZypdP+Xryc1Vlj2lxf2yp9YmO3bS\nzfVdnlVTAGdUWnXw1aOYuzFtL8x2WvHZeBWMnx0Vngkx8Fnau99n339THTw0\n4wNA832H+B22qTE6VxYabo+50v9/B8tmFOqJIddgu5Oufw8HX0DVunyDFA3+\nMkTlHhfGqrV4rp/N8tmaQi6GJJ5MY/xqzUsrpBWf5hbBYJF4FQdi8odnDiH4\nhmBnLGbEr7UlHXAmbJLbr8TgD65GBYavKZKza9ce309de2lYmDUs5mRvdYz7\nq4/sRHZzhwUilPjJ4LSADzwBaUWa35um7O86+QYe7/2+pV2y47nMuiReftwW\nMJ8phlLdaF5KDCQcLJ5EmjJlsQ1sKe7j0NXSRlcWo1Bax4G+oZgoJ/1zKdN9\nkRmQ7m4CZYO/BJgrNdBJFAJbmvQOzbhQgp16+EEf/ov/IGBQSjpDFtpKV4oF\nSbJuuqCBbfUHlNEKFX7/qtLGBLkfA7O8qtl1LiNGJ5zZrl7rF2/ViKw49MMX\nxorAH2W6CjrHRZzBTMHke9BWCA+nCpfTG2faRYkQtE3oVHA0CKlPI6MAI/Qm\nIWIFfh0um8i3aCInaCCkKn6eL46Ewn+9jNfFeRDkbab+bwdtWC08SxuHj7o0\n7aAF4U5ir5aHInMVJTfNPLJ5004OdcxxAlAANW9M2hjy1117fhBLy5Eox8l2\nxjA/xGy9dvdmeZUz6eoVA9iQ0QHlGSA2h16+peTR1bn/+gu9BmhC7ceq/6pK\nCNYc+CxfEjlHoXmDoG8aPoVAisTDC7N1XQ0Gq0JrJ3YyHVwRVNfkI5X9ggoO\n0ahKOqpj4yLTJ1DGXRtR9f1CydgEcquBbYEeBKowOHPERsXhsLZ1XlEfNXAN\nZe6X0nn8Wv+XvY5mUNuwhzrAn2A9Y3fEu/pKp3YPovCNs85m7MH+oFiUVhVZ\neHAFA/k+uUuoxp5wK3lTn1tJnCGNf6t46AoiNcUT2O/SyYWChjgb63im1TvV\nbkcAFVbgwobhVjy7uhjxOehVJe9eJBU7SWRAFPyFulLlFb0zbDqvhb2Wtb3n\nTIoFpn/IwZm2DXKEMmPNKE4jB8dAPX7LjoymH68jicZvlbcsCWKEA0RLdVjD\noelWJiOlFJWMXFAejA/bED5G53EpudAC/oTLUVKXzFvkZMOXO4djp0+4k600\nBkOMu6IGMSsTa2vVxGsL//uR34oqsnRyxQNTqivgMTIdRuk3plSbQYdyB+8g\nPzyhzoeDKTXhjGUpxRMEjyd4Ew5iNS0KDIughvwaXVdBFCtz/2FHN8JHADbF\n/XiWH41VgEXLrn7Xr/05FvG1IXCxDj+iYvaluM/0FmPVfZA8TuK4lKIjB13t\no4ka9Xml680V/surkonPq8fErl6H4QIVe0GBq9ucNA4hSpgdA4oRXAFmIcyP\noA3TU/hdVU+k/JOMJoG3CcA5GaKi8rlyod5kz9t19KKf+GCY517+xz+CIizw\n66FBolcbpbmLezpOTcseVFQWVSawPPva/uwCXJvw10RvrbCBsGOnWILjlyVE\nw9Lc7tG+YqqHcJAl9X1YalBbW/kU/+LEfbgtCGYRojp4t1PrrioIWf/IQlT/\n2ERbIxdJxPYLfcf6x0stu/4cqlWea+/Mz1co8JSOWPTEv6SZiGaWfOUHiLpK\nrr7lodMZPrVArNiL2JFXXWPzwuSCEWDs+DpV9auWqo2xM3yVhFZjtgKwqvDv\nYhXaWlb4AV82QcwbpRxKhvKfx0mNOK1FkpYz+IWFaLjU/xxTqs1MyaoxRDCG\nniIWYnmj5HPmaousJlS5AaOIe16j5dRTFbitp9UL0af+uXlSd2R93EmmZUqa\nxqjB4guQH8KOS8SjZBxTl8Rc2LWqkmRep2Si5z61\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-09T21:26:11.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:26:11.055+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L4b_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L4b_2023\"},{\"changed_at\":\"2022-11-09 21:26:12 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:47:12 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:53:57 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:14:59 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:40:50 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:46:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:47:05 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:52:26 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 02:01:55 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
