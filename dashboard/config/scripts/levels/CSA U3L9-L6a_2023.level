<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "The <a href=\"https://www.kaggle.com/datasets/rakkesharv/forbes-2000-global-companies\" target=\"_blank\">**Forbes 2000 Global Companies dataset**</a> includes the names of organizations and the year each organization was founded.\r\n\r\n‚úÖ **TO DO #1:** In `Forbes.java`(#e7e8ea), write the `checkForDuplicates()`(#e7e8ea) method to return `true`(#e7e8ea) if any companies in `companyData`(#e7e8ea) were founded the same year, otherwise return `false`(#e7e8ea).\r\n\r\n::: details [**üî¶ Need help with your algorithm?**]\r\n  \r\nHere is one approach to solving this problem.\r\n\r\n```\r\nloop from 0 to companyData.length\r\n  loop from next position to companyData.length\r\n    if companyData[outer].getYearFounded() == companyData[inner].getYearFounded()\r\n      return true\r\n\r\nreturn false\r\n```\r\n:::\r\n&nbsp;\r\n\r\n::: details [**üî¶ What is the `FileReader`(#e7e8ea) class?**]\r\n  \r\nThe `FileReader()`(#e7e8ea) class is a hidden support class that has methods for reading data from a text file into a 1D array. It has the following methods:\r\n\r\n* `toStringArray(String filename)`(#e7e8ea) - reads the data from the specified `filename`(#e7e8ea) and returns a 1D array of `String`(#e7e8ea) objects containing the data\r\n\r\n* `toIntArray(String filename)`(#e7e8ea) - reads the data from the specified `filename`(#e7e8ea) and returns a 1D array of `int`(#e7e8ea) values containing the data\r\n\r\n* `toDoubleArray(String filename)`(#e7e8ea) - reads the data from the specified `filename`(#e7e8ea) and returns a 1D array of `double`(#e7e8ea) values containng the data\r\n\r\nFor example:\r\n\r\n```\r\nString[] names = FileReader.toStringArray(\"names.txt\");\r\n\r\nint[] numbers = FileReader.toIntArray(\"numbers.txt\");\r\n\r\ndouble[] prices = FileReader.toDoubleArray(\"prices.txt\");\r\n```\r\n\r\n:::\r\n&nbsp;\r\n\r\n‚úÖ **TO DO #2:** In `ForbesRunner.java`(#e7e8ea), call the `checkForDuplicates()`(#e7e8ea) method and print the result.\r\n\r\nüí° **TIP:** Check out the **Help & Tips** tab ‚¨ÜÔ∏è for help with writing a nested `for`(#e7e8ea) loop.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/nested-loops"
    ],
    "display_name": "Forbes Global Companies",
    "bubble_choice_description": "Determine whether the Forbes 2000 Global Companies dataset contains duplicate values.",
    "thumbnail_url": "https://images.code.org/daaaad222a20d7f0b936aea0ae4127e1-teamwork.png",
    "encrypted_validation": "18TuyK7EVdPEwpUfZtBmL0BbSbcsX5xbcsIb7X/Dou/am3nVEjfpDHwrvFkr\nH2B9O7q5j5Arm4vXNufKhbheY/xeJi0CfwyvYfl9ZWRBtqKzdESwrk5ORx9b\nybkhM2kb+ngFs6EPAHXa+NvWtBfw+sPAL2Cb0CykA6//G9/To99EcSphZQWb\nKCiVr+aVu4xP8++ZWpmG720O3RwnzEYIJ2vCjw6nf5qk3U9PpPWZ4OZtIZ1d\nDschKisxupuB0Dh6Od40sb0VsGkAsYvStDfJd39hFqxcEDeq7aFSPGgjjWHD\nSBZNnlQh26fMpfqZcnuuqukIyEPE/dLl0YJvyiZ3aPa6f+8egREI8tz066L3\nqQRT1qW8Gs9Favkqzlmugtgj0E5xjwXwJXgE5/Rb7S6okWkKzr0THRe5BFYZ\n2BVimP8ZTgZYSNTHBN3TcBGB9P1sZh1SnygnU5SauASCKZ9m/Wj8oiWKZKGo\nb7EmVPdIm/pHMKJXa4flFp07vAsh3FLtm+4+eeyjvFNlQNfRKsL5IO4nyPzQ\nj4moAVBW8eXnriRTCuc/atWSaxUeE+xSjNO4t73RBAR8ZW1YoSLD8BYO3yN5\npVoGsD6RFcjtunvdQmR8bcNzsaclcKc8AbcAAbWs1AC5mhf6/qMXb0T7PCk0\nuSbiMRCYA9z5Ym/4weqrLPcqCPa2aikcm+KFg1v90TLcbSug2+lUHX8isMRQ\nFShqyQCdYNIQKb49Id4zxVu8Qnw01PIWxgqXFlTIkYj0k8AU/arN/iHsGRHL\nskaUDQ7br/Rmu08RpbDqQ/vRipWA9ZW7ak3582E1uRhC1gX2zrIHGJh8Lwd+\nRfYSSvlWS/Pf9lbt5QXguBOJRzBdUsi+hj3yVfYOwLeUDFcQwkKjW/mPCWH7\nnIgX1xUIIfqJ1qrZMvRJvt0xmoiEO8tCpwfUi1rrBrOjrmppSKuGwNiBDTEl\nrrKiZ+lyju7kGmWWNZhwc361K4Ub00wc5MNyx6blt0vYbDbPJumAgK5dPdTh\nWf216a6sHQy1txliaKhlI0PJe3R/PM5oAj9bnf2FAA5aLWDRYeUzR0+0Sxti\nvn6tzqUDatQ70KRpDEFwcZDTGv+lDD69rbNuCr6MuWusRaGYfBOEzOOk89J8\n6KiqP+xoeAfGcjCXylijbCImQWMW0GoUmVZz4snBquM7rmDtOmqSYjNL6ph2\nxz5QILmerW5O+GQXUGyo4shN3iX/H8bijDQbBssfhElxJI4o8z0vvDGtV2uI\n0SNoU/syK0+AoXnz0t/2axNydhqSJxE/xMrSta1UbCAZg8abgMImpO5GRM47\nJIz/wFrVF0+a+hdVv7GTZzmjfRTpyMU6kZvlGiukvZyuzYvT8oZzjr23jGUR\nskySwfnVQ/5H2FmVuCQJPaNC15oWqJA/VpalMp56aXFuWuKt/6nlTcOd8Ebb\nrkHRVR1WU2dMnHiCvtjd1c3bA4xrx3BEIgiLFWGC1WSGXf6Zc9BFV62yVuoh\nQ0pAN9Zhz+H0axU=\n",
    "start_sources": {
      "ForbesRunner.java": {
        "text": "public class ForbesRunner {\n  public static void main(String[] args) {\n\n    Forbes companies = new Forbes(\"names.txt\", \"years.txt\");\n    System.out.println(companies);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the checkForDuplicates() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n   \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Forbes.java": {
        "text": "/*\n * Manages data about Forbes 2000 Global Companies\n */\npublic class Forbes {\n\n  private Company[] companyData;    // The 1D array of Company objects\n\n  /*\n   * Reads the data from namesFile and\n   * yearsFile to initialize companyData\n   */\n  public Forbes(String namesFile, String yearsFile) {\n    companyData = createCompanies(namesFile, yearsFile);\n  }\n\n  /*\n   * Returns a 1D array of Company objects using\n   * the data from namesFile and yearsFile\n   */\n  public Company[] createCompanies(String namesFile, String yearsFile) {\n    String[] namesData = FileReader.toStringArray(namesFile);\n    int[] yearsData = FileReader.toIntArray(yearsFile);\n\n    Company[] tempCompanies = new Company[namesData.length];\n\n    for (int index = 0; index < tempCompanies.length; index++) {\n      tempCompanies[index] = new Company(namesData[index], yearsData[index]);\n    }\n\n    return tempCompanies;\n  }\n\n  /*\n   * Returns true if any companies in companyData were\n   * founded the same year, otherwise returns false\n   */\n  public boolean checkForDuplicates() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Use nested loops to traverse the 1D array companyData and the getYearFounded()\n     * method in the Company class to check if there are duplicate years.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return false;\n  }\n\n  /*\n   * Returns a String containing each company's information\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (Company org : companyData) {\n      result += org + \"\\n\";\n    }\n\n    return result;\n  }\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Company.java": {
        "text": "/*\n * Represents a company\n */\npublic class Company {\n\n  private String name;        // The name of a company\n  private int yearFounded;    // The year a company was founded\n\n  /*\n   * Sets name and yearFounded to the specified values\n   */\n  public Company(String name, int yearFounded) {\n    this.name = name;\n    this.yearFounded = yearFounded;\n  }\n\n  /*\n   * Returns the name of the company\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the year the company was founded\n   */\n  public int getYearFounded() {\n    return yearFounded;\n  }\n\n  /*\n   * Returns a String containing the name of the\n   * company and the year it was founded\n   */\n  public String toString() {\n    return name + \" - Founded in \" + yearFounded;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "names.txt": {
        "text": "Berkshire Hathaway\nJPMorgan Chase\nAmazon\nApple\nBank of America\nAlphabet\nMicrosoft\nExxonMobil\nWells Fargo\nVerizon Communications\nAT&T\nUnitedHealth Group\nWalmart\nChevron\nCitigroup\nComcast\nMeta Platforms\nMorgan Stanley\nGoldman Sachs Group\nJohnson & Johnson\nCVS Health\nPfizer\nIntel\nProcter & Gamble\nAbbVie\nGeneral Motors\nMetLife\nAmerican Express\nCigna\nPrudential Financial\nPepsiCo\nMerck & Co.\nElevance Health\nAmerican International Group\nCisco Systems\nWalt Disney\nIBM\nUnited Parcel Service\nRaytheon Technologies\nCapital One\nBristol Myers Squibb\nCoca-Cola\nOracle\nThermo Fisher Scientific\nCostco Wholesale\nCharter Communications\nConocoPhillips\nUS Bancorp\nAbbott Laboratories\nCaterpillar",
        "isVisible": true,
        "tabOrder": 3
      },
      "years.txt": {
        "text": "1939\n2000\n1994\n1976\n1998\n1998\n1975\n1999\n1852\n1983\n1876\n1977\n1962\n1879\n1998\n1963\n2004\n1924\n1869\n1886\n1963\n1849\n1968\n1837\n2013\n1908\n1868\n1850\n1792\n1875\n1965\n1891\n2004\n1919\n1984\n1923\n1911\n1907\n2020\n1994\n1933\n1892\n1977\n1956\n1983\n1993\n1875\n1929\n1888\n1925",
        "isVisible": true,
        "tabOrder": 4
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "encrypted_exemplar_sources": "WTq0Oq9InF/r79cpaFiPIWAEbzU3zT26jaO4EjiG/J5lMTO7brtlY47rXmPF\nLS5f6ZEmyM+S9EBkfSEnLZuheH6cPkKKMTCls4/PDecHeGxmUwiyOowNm70c\nDSPZcMTD1ywycdF5zYWHFjMPDm1IdUZT21VhK7ADMi5TWUhbDsvelRxkfODt\n9xM7HkVTTYq4oDZfvlUAzLxiGAebXY+KCsWcSh0tctXrRc5bg29mIdQq0pyI\niBCAzCM8IxdSma4M0yk5Pv6aRq/mhka24SPWYL7h3v3MO93EDeaNy3RzhXia\nl0ld/LM/Yy0nvI1H6fLEGGndW/f2aus5QIzVfs++uJVKyI/s7L157X3W42mN\n7rd/928KLW0ubk8UOi5+fGUr8go/snQME/O8swxTKHwMPVDRw+ORTtM4a7tp\na2XOKGvUTMVdpqkZnpvkzsFgINcDSb4rRyOCyucDpdVPgp/Po3OYwFxyUWAP\njjvV/vP5FNlWKRObpJmsqinuYXm3RqBVhN7QWKAcVk4/8s2VgYR7CjhHZreb\nry2Q054BMICJJyVd+7TaPx0NgKZezIn9Ox9FuNFxnb9K0TfhcDj69CSUwtrG\nIEmVkLszYXu8e4noa4lxQj0MIda9wML+NQsiRd6hheQeA5W9L79XgEFeiAu6\nUTur9Vwgw6zCNzCmE5s3yOQa9Q/NrqXErNFZYbR9Odb4ibUiB+B2tGCXA0XZ\nTUHwTdW+Iz2WvH+L+TJiY1poC4ZVaFMY6ml8B0u+IfB+rGPXo4GEqACcU2m3\nluoBs63rNhtPcQv+nqshtFOnbK8sXZbtz8zT6B7xgvhbblBGuhU9NdipXjqE\nqotN+7c6Md8kYH1eMCQH/LC09uAoEVo7SNKUhu5TQUcs4cwt2JO7rA9lfQQS\n/CCDU5ThobXp16HtPaSDN0NgWWrEwbkya58RN0ZovqZ6uB7Kl0se9O4flyxH\nbjUMqEbPPVhJXzY0UNzXtNMWSawsQbC4dcVOdgQfKb1G+KRkjbVP6FNmsF/c\nFhUdR/EtD2EnotI2z4JSFqvp3Vb/M/oPFZc/EiDJuhEp21bXbFpflPWX0tCq\n7mqj8s44skhjjVnHXl0GDCF14egBYwlMUdp/ZeCzYA1tp97KLqa62uXeb5eZ\nPfkTSgcJKMv6vDMNKsBFyXetc4ZH/OuGiGOGEX2+rF0hCDiB1tKfONlbORsn\nN4hVQH7/kKR8uDLvHqV8SpzebbL0kJhkEYHiycb+6xYIMWVbpgUAwBHl6svb\nLtDc5LkvV4T+G5LYiJZLZQ6x28hxWLwy2mQgP2Y1gDsWNt/FFQ4Tiv+sfmC0\nwUVIUyvn1wU6EXT+4cksrXktDzlNVHpgseBKg7Iwd8V/+YYLut768dNNR6hf\noC/M3G7vFgaB0UjJminMZQj0lfHW1WgGLNUxzsGbdX4MZU47YeNQpW3lo6sM\nkyN7Ex41JymhbHRO6g7QzMEykg/sFSJVDjXdLq2c/sOIXATIjp+R9jTSibRy\nGpxclJOvaTP/q5SHl0HILl54xFHW0zFMLst0d7ip7NQRuowvjhBHAnD9BbQ4\nZdv3nhV35EMYDzWZ/AV6YUIwJrMOhsWkQt7xORkY2crbwPbwTTnilE8v5GNW\nDHlv5MemiFZcIoCESytqkqgJgJLLeWJW2kbdtbWv3MNzyc+pQpllGAXtT4tz\nKAEFXFL9CN+vi4eyEKmUsceE1Knhv/AeojCMZYZGU5PN8VY42sqdwipBBOX1\ngYCMlWS50Oz4gdvPRDxaFeX3gr1vQmfLtpT/HEoBcZFtAz350fl0fsyY0omr\nwEaoORtXOcG1Ct/K+nkLJELYRSr3gjrnQEjokotkcYBty6tClpEIyNir1Gwr\ngwR3TXZRKhvuad0xikFWTxSwYGey6KT+NzE2wia/UHB3yu/I/1STeHmuQBYv\nST368S+mxHBj/irO/nvUNEqj+ijX+ZU9tjacf/EOxwPtdINKYBhcByd0d6dm\nu2xX0er3xDJ6BgZv3WOcxUhbmdRxhlQf8ZQLGj29qCbpCtr/4oJlxh/lA1cH\nJ7MVaVVOK67RR+LUgQdlEqAVFu5gV68t0fuCEFeH/P01dhQHCPumuaxVEPRq\ntw5tH5a9SoM/OQ27e59mbnaFLOVHSNq6R83vGTtLfv4TIJRLy9NVhjOqk3bT\njwVZqiZ9vhoqFGnX5C+WOu04YSYM0Y0tMlbGBQhKBrqibzpgvmGvolHJUra4\nKdTyNVHpZBMMsxrRbWpGkQZMqZj3cFjWzO3WKaRBEQmd0e1XY/uNJtNdGoKX\n7ZrSNhbOCkLGSUF+hiGRv2KM/zm38q8eUoYlzLlAfTvOOCT5iDjzepSqHGbb\n33PMVTaUMU/XgpMx/G1tk8emEAy3Et0LVvfvnFhTtY1sNWJAgHYd8JUSSyIt\nVRrsHkSRbZG27C4/Tk1mkpYO4BAqHca+S6rTwhNjXugPQTjzd/7utStUQuKM\nh5UuSgnSh7dGNy9674CVy+Nni2auL2ymUBKW2+Stqzz7JYQvYbihIsW2Gogo\n2keTU99YpUchERhtuP2XbcB1LD2RZDZSN7MpigzWi0xytgQEw460VPryME0C\n3fA5v9R+gUUOGH1NnZJXxiLCA+ZQ6AixQDo5+4Gmv2U8vYPM49S/p3j7mM2E\nAoaJEWIN8Dwfvd/U1dXrx46NvUMvKd+XcPVrXDQDBqMiRFFAi24/AhRuX3rY\nfWI3gCbcDkSlcKj++R6k8gVyfM86zbu3TO8x0Z7oSsqSRgxdPP4j9SIbv8ld\nYIvhn63yBsqYkTiFMic+Ea/zMTxQAoJAVf2OE1r8tHghmGjcITD+lb4sh5Tx\naBltB7bO6ID++IgS2nXa1g7GqmmB0QB4qHSwtt0yaZNpjZ2GXmRkPsVg1CLb\nRDwHyL9Nwkxt1MXCug4+csPgbtA++9pxvEFwz1ReQ79w7f05bVaF6GWRbWai\n/5zLCkuHRiqMqe0sXWAxq2vrzjJPo/2MO12hZtq01IG2aw5I900Hui051EgA\nBDo3xmMUko4+Gzc/2BrnRtjObnZu0zPCNC3co+hRuni/dYUlEJoMtP4Lamx6\nWRxoPDyQz0s/pfz3fnZZaRlNnAkbf8hEXpAi0kWdFlPiLAlfoWUtmJgASJbB\ngP8DibGpjVgNfFpg0IhmmqgIarXTGDE7EATF/je1Pq07i9FZWJn9uGLkqMjy\nbGgzJWqo0UoPyraX3RYw+PuQfQ2+JVe9tmVgTB78Bmz+M5fsjOlRgT2wpd2P\n6rX/LvUQPZpfx7DMJKnY/VC3rVkQM4qHSLG6sBIIs28WCAd24QmyymEQIU6Q\nJHaZBH0UBNlvxklTBauG8oXVRRFXB1m9k899vZFTtUlCe8icF6yqK2tcMOik\nFmH7m3fG7pQtkUXnPeiXALznD1zQx3WUfVH95kD3yfO8r2EwfFutoX/DCcio\nVG8fSwAAjVgfbgoukXtudn+AQappDmH53SmBVRWxrLVbioZUi315npqAr3Ey\nGtm+hvwOmuVOPC7NqZalJTOnDHGzAbr1OtGWdp/MAdFsmGjDmweXfnMzuSWf\nUudkEHDuzHia2rLNB5x3bQzrs68ooYK3QhlVhySNbM3/y4aAx4hStHlCr8/q\nnxIw/NAR0jGSALum4b3314ykjyaJH7jzJR+5F59BYefcYLdLqlYQMWpIH2h0\nkxSGXn8bx1lybibKH/AGy2ESCsueZm0CvZ51Vl1LtsEZwk6jzZrsPr1z3LBu\nqNB/YaB4IbMlCEvBMQZMjb/wTb8G1lFGXAD/xqjengltbIeaoysFIGg+h9LP\ng1d5wkaD9iCnLNK4qT31z7j6VJkSbF9hLT0cP0vEJYmYr/bywH4XwtHsFATH\nxZnJVJuidiV6NvqVlDMlkyAFSoQyjaIzaNsOtMpZf1KVEYLrQEDDTt0aPVtL\nP1TL4Nz3B4JChyAYtmIlO5sxBoqlZ4PNtzgpcBdK+OZkso85jrkRvtjPBTpF\nh5OlRdzhbsW2YOt5lKP3nQ+lbUZ2lWVLhXV7q4Dodunpz2URzPcLuWk/ARf3\nx10/JmROzolhr+16GFJMihwUYY3DWw4JnpIxFoxu6hfxZ8C+R0qdLM0V+yok\ne1Y4Nb2NAa2mMSWoKogvOiDZF2o235PMCbwsZlttHc+mV+XE1oRkk1Mtcp4I\ns7rzEbYKjMf6tRgqZurBhGcURAlWmg/FUD/ShhO0SMfiSw4Zf9PeEGxFM9cV\nyM/G5/sr+PFVIba4bhk8ZOZN2JwpwIk1aZzt48iT4inuuDMDczXawNZhQxy3\nZPDWRHR0xqEtFGeYtwRHl9tjsQFzlABeiDbkJfSLS+/FbIAN5UmK/Y+a+dbh\n07w/kmYSUoBqUgAD1/lyMfW8pa1SbFzHwCImg8XtcqAXoZIStv++F4lM5RPG\n8knurcDeEyVzqEUxFKREPAnXYGhGB2VVH8xUB8TIttxkT168UUz3lN1vTyOC\nWe6uctkZwxP3c9mqOiQEhBPSZHRVOD4yUVSSt5KruAnEMLd9rRfecp4KEQRK\nex9d4qm2uLKxkeh5Zm6b5kZgAYyqwVLuMS+/1atmm1/dk1wZDiwkxbz7cK8f\nIufTnW5jCX5hYA0N1dJJArvzz/tpOqj87xsV9oRfb0uj2xtv7f0RTYyLhCW/\np8job5J0e21ZzQtKyvWP1kNu+w0h+VaZWFU+j12USLZpmnf/Pq11KbMXsvAk\nwFQm0d1/4i1YRCIVg/usIPQL/KmSjOgKT5QCBjjNXmE+tH9XKSXpeB96PBKr\n6DQjxba4m3ZBbyw8w1zR3vmMmh0aVtUAkJCO4mHXQxbWgYzcKxWsgTUE5D8D\nQ+wFurzh+/QjgkyPWOir58+6kB0U3rAuKmXYvl3vi/xEmA6RNSMg3b2MR0qq\nC4DJuR8KXX+laiWwq0FA+9SE+jZdTznflRNriwss/tpuuW6y9kBa7SmgaQ40\nugQMYJcPYqSaD9AinqCsG8vPwxTpoVrikp10q7M/U29w7Nm4AHcSZvx9jsJI\nitwSfHwiTpn1Jk90dPwrt+DEfINgQw+5XIzR8up4RHSAqfys4noTRvOBN+Xb\nD7GqZrTgl2+MXaBxTdW/+ITzvMGjjB39thHQLp+k7ZbHhglQUzCYLYlF70ii\nt8jeOqx9cuOX7StxeetkqyfRGGq+DlTOftzXFAiklRbVdQ3sYVBwCs3bZoZ2\njQGTsk26t+3m/71lObgZmancy1f/VhCy3j0uru+iD/nb1EcUtHOu/UPXeQ7y\ndk6mnI2O6onkTCjyeafJ9GGTFE6UASbf4Dwz/Uk0IWOPVofuvt3SpInJeJb4\npi7iLMaQhiWaG5bZ7bHVTH4dtbwjs6ddtlsH6YFDoNKlP2Di+syQhzUqsI8l\nbvomrRhqHSl7otKDXLwYw8m8/YCD4E6m2YLJMqyjCvokq2M+sBxu5El2xZAT\nMB23g3A+KBH7yjp529OXUQf0hqx5b1MfKtvwwxYvejWZRGrszUdP4f4kT59o\nw/vEyKB7ygV97Jo6vPff5NpumMDQe0DrX1ykg6dwIZwtt7aX9IuOc8dbQpBw\nhrn7c63apESu25SBgvrlXGxfnbD3IJ5JdzWDwYRLnh4E2vurJolX31q4WCsA\n7U1WUXa+uBPf9x0RxEMRKZqkJmLIRztHZ08ajeVzJ0is7yXXr+qh+oymgUUR\nNm15Gr4IsKLhtI6hJhXgcc+Y3MmGBrbDhiYULJ3ojvzGP1vXUnIAR//CAcxR\nTRbzBtnUdSROMY8txoM7XD+wqeSv2jEsiL1TZfXBqDbnY26qmSy6Vi1Gm9Ou\nu4qzoNqk4PsA/xAUdrILXAOKN5A+2Y+fIDt1kzKkqeS/9wmerPM4Q7cyJZx8\npheRXZE6zxcwAbYUnpJ4JC12c5XZQLm5+dXa5MNtHD0dAXF4JACbTnLk9GWN\n3TihcjbFZ3b6rdMC4fWxIHGBasJew7C0dq5thaOVaMiKed9myacmeSZlfo7J\nDrmYa9OAzAMjVbS0qzTAvhbR+5gu+o1SikAfgF0iapLCeKWRiXk0sYdarV7x\n20X2mlrgECK9K4BUDyK1nHfn8wjBiMntgZHi9DE+zoex3LAGmUbyuPO9LP12\nizDQNebrshH53UW/n0WKmJUnvxV8G/pH71i0H2wOhAhv9HxHDZNW3RYaYI0o\nRxOXlvP/ILoS6BXQFMMJXJWZCjBk3V/4JLPTez6Rp6vJZ9RC1UQAIBumEiVD\n6UOm15KV1QRQVe47doE+m7mRGLvL4orUw4nQ6INBB2iI+lRfLsG9hwtBoZmb\nWUW1/KI/VNXjGTX1CerdASDwfeEQI4Vw9gOfLUcu+HAh4XrApwxRwl/I0ThZ\nD3S4LHsUbkMCe6Jj+CGPh/tfeJ6QGTPVyStOA/7O0LZy1+YuNzfMepENNoUt\n+DdAODhS/gh0tRdsft42YeJk4bVkAxDryIC0+hzLPp3wjYMBONhN0qnP+AWO\nOj67sH9qGaHspb7tuJEyArCvXa7bzNW3dhqh+qKzhFAFBvJ6jUn4wB9S0rsN\nuEUUZNOu4b2Tpf0zFNMYr7aOW1CCZF4ekpfo2y2Qz4WtzGA54BZmrUFysHbZ\nJsVaevRg1zDrMZhoAJG5KuSHnCroR+jcPs2oOB0JqGBDXBTnAwXqbtwfl2f5\nrjOVd6AEQ+YtmbjaW8yLu4ZaXS+2YJOSoeDiN8XIsaAJh1MplxgDEHfPzZ2n\nLzNIRAIt08CCDb966p/RmuxO2xE2+vdFQznbV466tuGLT137xp9KkHlh2fJE\n/jSbHLH2S0U2/Zem/aMFASnAVInEV5ZSHyQk3knNXFyGKRF/Xi7E0zIc0tbj\niBHbw0PypEKzPuhd8Q3qxHV3kXFBIcLaU0AgEqOWz7a6z3sv5T9TBRU2pubK\nPOT1793eXeOiHdt2xkMFwWzN8bgx6kLa95GAtraGtGO0VzAiBLYBnh+TCjRL\nwoJPYkhnIxlAw4SR9T2ycXNrDdL3XREDs+0Ebccncnee6R405av6FRVBbuBy\ntUeRiy739CKEsnJWsmcOlM0EEn8E9R77lzqmmb4mkH4id/tDXsB+A0xVtuzJ\nyzTjMM6KZmXfT7F3sFRLBFRcFkAMu6FZs6u10WLuVCWf33Soc+21BOhXF6me\nlsDZIz1OR39kNm6K8vTbe3GCKY0zCnKd70EoaW610UECsfV+Qzvcu+b7M1TG\nQw4O+BPy9EsRvpXdlDZ2ljjyerTzv7l9pKqQMEwQZ+jLmUEDV134gpFHtG9a\nDr44gtSFcHqxqvf2E2XwEf3IILegvwW8ijWs8u15lSeb8H/5GA6QXld6uVQw\n1n5cP2qeni0csS7QoLZr9vNO0nIC6dqBPRwgyzDQlRx65oordaF0dlIXrEsj\nBl1kTb//xtMP/syyL/bD8ob4rFcEJMmcSCYvRbPiCpF6DJ8QUUzQJ0irSBrh\nSHSS8kTYHaTERttECwONah3CTYoEMqFKDFhwekrEcTwCAyT99oWvNwgSCI4K\nUf5nI906ngk0wMfakcuYYTs/oB/V5okktO0qT60xK4ovFFwToXTfUk1VAjnf\nNl83iH5VTu6FmIyu9LILPzl64IqrYPFDJcJig3ZcEWiF/oIMmvuLWyoniKm1\nd8CjiBJoflzYPo6XAzdAtpSDMAyf2FseNB4H/Zfo+Lq6xUuUk22xZnL2+3Eo\nK+k/cpSfDm64aGjIeKgwQ6s+GxtMn6+kiVoiJf0AMdzrs237qn/1Itcd8/6h\naH++ED0/sc7ZfiQXeQKHFM6fXmQLaq1v3LEGxXXWxHoOVyPG7lu+SJmPhcst\nU7Yi0n6WApemFyyyzbwFqyf3pkKHQSZPT5/mqp5VborwbZ/PpJecC6VBu6a8\no+tLRWdt0/g05p+ynnpUwZB9qECIqjxm4DH7KyjrXZYhcDjpbRrghK1b1sh0\nzsmbX3sljgjjRuTV/MEqxVkXC1c4/S3lBanyMrZZgh2nXbr+2TfXgHRKNpyc\negApfRCY9uANYqprwkr5gWeZpqmwokhuroi7qt8MCAA3bi6PuY5r7CO7VvCJ\n3YLAZ3cp0NGD0nwVBHczALH2+GENt7laWUTNcacebEBWFFFf0z2rZPTPj/Uj\nHqko0rWfXlwIVZMsuJCL2U4sz1MFBX0j/uqe9rnDzYnn59E9BERmNuEHAe3n\nzurQSLIBZqBf8GNkoZj2cqmFJ9lpRvn208hacd6PJFnr3bu0veVVnsur8djp\nhyoDJCgrgnWYUPPW3eI5eJaltrAR53GCkELe6n7DfJwSTi1zjcuO/zrYjbw5\nFX9Z/pH9KygRlYTcWHOkzW6/S2pAJSOLeqnVel9GHWfXx21CEfOsnG7MDdK7\nkTCGbZRAgihZRIz8aZ1a3zZSTWzNsDviEOdmoWZgsjF19nBQ6vCCMWFa0ivU\nztlgfVKsfWzEfxKmgvlOwX0=\n",
    "encrypted_examples": [

    ],
    "video_key": "csa_nested_loops"
  },
  "game_id": 68,
  "published": true,
  "created_at": "2023-01-12T22:23:01.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2023-01-12T22:23:01.090+00:00\",\"changed\":[\"cloned from \\\"CSA Practice Level Template\\\"\"],\"cloned_from\":\"CSA Practice Level Template\"},{\"changed_at\":\"2023-01-12 22:23:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 23:22:31 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 01:05:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 01:06:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 01:26:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 14:18:08 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 14:33:43 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 14:33:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:10:16 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:31:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:31:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:36:51 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:37:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-31 01:56:48 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-02-02 15:22:47 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
