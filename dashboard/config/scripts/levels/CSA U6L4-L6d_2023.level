<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-03T13:58:17.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Playlist</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to store songs in a playlist.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Playlist</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Song</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Song</code> objects\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">PlaylistRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Playlist</code> object.\r\n\r\n2. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code>.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Music Library",
    "bubble_choice_description": "Create a Playlist class that contains an ArrayList to store songs in a playlist.",
    "thumbnail_url": "https://images.code.org/bcf0351e1fda8eaf4ddb887924a5a984-music.png",
    "encrypted_validation": "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\nqao=\n",
    "encrypted_exemplar_sources": "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\nBy1nLCKjfw==\n",
    "start_sources": {
      "PlaylistRunner.java": {
        "text": "public class PlaylistRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Playlist object.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Playlist.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a Playlist\n */\npublic class Playlist {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Song objects\n   * -----------------------------------------------------------------------------\n   */\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a constructor that initializes the list to an empty list\n   * -----------------------------------------------------------------------------\n   */\n\n  \n  public ArrayList<Song> getSongs() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write an accessor method that returns the list of Song objects\n     * -----------------------------------------------------------------------------\n     */\n    return null;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Song.java": {
        "text": "/*\n * Represents a Song\n */\npublic class Song {\n  private String name;\n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-03T13:58:17.704+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L6c_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L6c_2023\"},{\"changed_at\":\"2023-04-03 13:58:20 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:34:15 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 19:22:54 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-02 21:09:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:11:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:11:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:11:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:11:41 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:11:59 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:12:32 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:12:38 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:14:37 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:27:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:27:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:28:07 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:28:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:28:30 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:28:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:28:40 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:21:23 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:21:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:21:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:21:58 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:27:27 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:28:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:30:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:33:08 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:34:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:34:16 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:34:29 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:34:53 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:35:11 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:35:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:35:40 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:35:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:36:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:36:24 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:36:41 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:36:41 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:37:08 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:37:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:37:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:38:39 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:04:03 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:04:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:04:10 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"}]"
}]]></config>
</Javalab>
