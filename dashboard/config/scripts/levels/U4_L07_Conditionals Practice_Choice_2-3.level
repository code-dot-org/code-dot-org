<Applab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "skin": "applab",
    "validation_enabled": "true",
    "code_functions": {
      "onEvent": null,
      "button": null,
      "textInput": null,
      "textLabel": null,
      "dropdown": null,
      "getText": null,
      "setText": null,
      "getNumber": null,
      "setNumber": null,
      "checkbox": null,
      "radioButton": null,
      "getChecked": null,
      "setChecked": null,
      "image": null,
      "getImageURL": null,
      "setImageURL": null,
      "playSound": null,
      "stopSound": null,
      "playSpeech": null,
      "showElement": null,
      "hideElement": null,
      "deleteElement": null,
      "setPosition": null,
      "setSize": null,
      "setProperty": null,
      "getProperty": null,
      "write": null,
      "getXPosition": null,
      "getYPosition": null,
      "setScreen": null,
      "rgb": null,
      "open": null,
      "createCanvas": null,
      "setActiveCanvas": null,
      "line": null,
      "circle": null,
      "rect": null,
      "setStrokeWidth": null,
      "setStrokeColor": null,
      "setFillColor": null,
      "drawImageURL": null,
      "getImageData": null,
      "putImageData": null,
      "clearCanvas": null,
      "getRed": null,
      "getGreen": null,
      "getBlue": null,
      "getAlpha": null,
      "setRed": null,
      "setGreen": null,
      "setBlue": null,
      "setAlpha": null,
      "setRGB": null,
      "getColumn": null,
      "startWebRequest": null,
      "setKeyValue": null,
      "getKeyValue": null,
      "createRecord": null,
      "readRecords": null,
      "updateRecord": null,
      "deleteRecord": null,
      "onRecordEvent": null,
      "getUserId": null,
      "drawChart": null,
      "drawChartFromRecords": null,
      "getPrediction": null,
      "moveForward": null,
      "moveBackward": null,
      "move": null,
      "moveTo": null,
      "dot": null,
      "turnRight": null,
      "turnLeft": null,
      "turnTo": null,
      "arcRight": null,
      "arcLeft": null,
      "getX": null,
      "getY": null,
      "getDirection": null,
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "penRGB": null,
      "show": null,
      "hide": null,
      "speed": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "setTimeout": null,
      "clearTimeout": null,
      "timedLoop": null,
      "stopTimedLoop": null,
      "getTime": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "moduloOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRound": null,
      "mathAbs": null,
      "mathMax": null,
      "mathMin": null,
      "mathRandom": null,
      "mathPow": null,
      "mathSqrt": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "declareAssign_x_prompt": null,
      "declareAssign_x_promptNum": null,
      "console.log": null,
      "console.clear": null,
      "declareAssign_str_hello_world": null,
      "substring": null,
      "indexOf": null,
      "includes": null,
      "length": null,
      "toUpperCase": null,
      "toLowerCase": null,
      "declareAssign_list_abd": null,
      "declareAssign_list_123": null,
      "accessListItem": null,
      "listLength": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "join": null,
      "declareAssign_object": null,
      "getValue": null,
      "addPair": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null,
      "comment": null,
      "pinMode": null,
      "digitalWrite": null,
      "digitalRead": null,
      "analogWrite": null,
      "analogRead": null,
      "boardConnected": null,
      "var myLed = createLed": null,
      "var myButton = createButton": null,
      "var mySensor = createCapacitiveTouchSensor": null,
      "__.on": null,
      "__.off": null,
      "__.toggle": null,
      "__.blink": null,
      "__.pulse": null,
      "colorLeds[0].on": null,
      "colorLeds[0].off": null,
      "colorLeds[0].toggle": null,
      "colorLeds[0].blink": null,
      "colorLeds[0].pulse": null,
      "stop": null,
      "color": null,
      "intensity": null,
      "led.on": null,
      "led.off": null,
      "led.blink": null,
      "led.toggle": null,
      "led.pulse": null,
      "buzzer.frequency": null,
      "buzzer.note": null,
      "buzzer.stop": null,
      "buzzer.playNotes": null,
      "buzzer.playSong": null,
      "accelerometer.getOrientation": null,
      "accelerometer.getAcceleration": null,
      "isPressed": null,
      "holdtime": null,
      "soundSensor.value": null,
      "soundSensor.getAveragedValue": null,
      "soundSensor.setScale": null,
      "soundSensor.threshold": null,
      "lightSensor.value": null,
      "lightSensor.getAveragedValue": null,
      "lightSensor.setScale": null,
      "lightSensor.threshold": null,
      "tempSensor.F": null,
      "tempSensor.C": null,
      "toggleSwitch.isOpen": null,
      "onBoardEvent": null,
      "ledScreen.on": null,
      "ledScreen.off": null,
      "ledScreen.toggle": null,
      "ledScreen.display": null,
      "ledScreen.clear": null,
      "ledScreen.scrollNumber": null,
      "ledScreen.scrollString": null,
      "compass.getHeading": null
    },
    "embed": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "never_autoplay_video": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "hide_view_data_button": "false",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "fail_on_lint_errors": "false",
    "debugger_disabled": "false",
    "widget_mode": "false",
    "libraries_enabled": "false",
    "ai_enabled": "false",
    "display_name": "Emoji Movie App, part 3",
    "project_template_level_name": "U4_L07_Conditionals Practice_Choice_2-Template",
    "long_instructions": "## Crafting the Score Conditional\r\n\r\n<br> \r\n\r\nThe first conditional that we will create in our game will take place when the user clicks the SUBMIT button for their answer. We will create a simple If / Else conditional that checks whether the user's input matches the expected answer. If so, we will award a point. We will also be creating the resultString string variable in this conditional. This variable will display at the end of the game to give the user their score card on what they missed and what they guessed correctly.\r\n\r\n<br>\r\n\r\n<span role=\"img\" aria-label=\"Two\">2️⃣</span> Create an <code style=\"color:black; background-color:#fef088\">If</code> / <code style=\"color:black; background-color:#fef088\">Else</code> conditional statement that evaluates whether the local variables <span style=\"color: #bb77c7\">userGuess</span> and <span style=\"color: #bb77c7\">correctAnswer</span> are equivalent. \r\n* If so, add <strong>1</strong> to the <span style=\"color: #bb77c7\">score</span> variable.\r\n* Create the <span style=\"color: #bb77c7\">resultString</span>. We will concatenate (<i>add</i>) the following variables into our string: previous value of <span style=\"color: #bb77c7\">resultString</span> / <span style=\"color: #bb77c7\">turn</span> / <span style=\"color: #bb77c7\">correctAnswer</span>.\r\n* Concatenate a thumbs up 👍 or thumbs down 👎 emoji depending on whether the user guessed correctly or incorrectly.\r\n* Concatenate a<strong> \"\\n\"</strong> string onto the end of the <span style=\"color: #bb77c7\">resultString</span>. This will start a new line in our <span style=\"color: #bb77c7\">resultString</span> variable so that every question result will have its own line.\r\n\r\nYou can find the location in the starter code to modify by matching the number next to the task (*e.g. <span role=\"img\" aria-label=\"Two\">2️⃣</span> in this case*)\r\n\r\n<br>\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\n\r\n<span style=\"color: #000000; font-size: 150%\">🔎</span> <strong>Check This Out!</strong> Sometimes, it is easier to work in text-based mode rather than in block-based mode when working with longer sets of conditionals or when we need to concatenate a lot of information together in a string variable.\r\n\r\n<br>\r\n\r\nYou can toggle to text mode by clicking the <span style=\"color: #000000; font-size: 1.3em\"><img src=\"https://images.code.org/06d5a09b944a6caf79086dd66a97a653-showText.png\" alt=\"\"/>\r\n</span> button in the upper-right corner of the Workspace. Similarly, you can revert back to blocks by clicking <span style=\"color: #000000; font-size: 1.0em\"><img src=\"https://images.code.org/0319d53ea6184b861c1a8f65ae4e29f4-showBlocks.png\" alt=\"\"/>\r\n</span>.\r\n\r\n</div>\r\n\r\n<br>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">🔎 Need help with your algorithm?</summary>\r\n    \r\n    <br>\r\n    \r\n    <p>\r\n    \r\n    We can create this <code style=\"color:black; background-color:#fef088\">If</code> / <code style=\"color:black; background-color:#fef088\">Else</code> conditional statement as follows:</p>\r\n    \r\n    <br> \r\n    \r\n    <img src=\"https://images.code.org/17fc8acba3c6aaf8e423972858792963-2-2-2.png\" alt=\"\" style=\"display: block; margin: auto;\"/>\r\n    <br>\r\n    <hr>\r\n    <br>\r\n    <img src=\"https://images.code.org/38d8e4ac842dfb32112beb6d54a3289a-2-2-1.png\" alt=\"\" style=\"display: block; margin: auto;\"/>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n\t<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\">\r\n    </p>\r\n    \r\n    <br> \r\n    \r\n\t<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\">\r\n    </p>\r\n</div>\r\n\r\nDon't forget to include the new line command at the end of your <span style=\"color: #bb77c7\">resultString</span> (<strong>\\n</strong>)! As you can see in the example above, it is easier to work in text mode when concatenating all of these values together. Toggle back and forth between text & block modes as needed to make the task easier for you.\r\n\r\n<br>\r\n<div style=\"background-color: #ffffff; border: 1px solid #9660bf; border-radius: 5px; padding: 15px; margin-bottom: 10px; font-size: 1.1em\">\r\n🐛 <strong>Bug Alert!</strong> Remember that we need to use the <i>equality operator</i> (<strong>==</strong>) in order to compare two values or expressions. <br>\r\n<br>\r\nIt is common to accidentally use the <i>assignment operator</i> (<strong>=</strong>) instead. This will result in an error within the conditional.</div>\r\n\r\n</details>\r\n\r\n<br>\r\n\r\n<hr>\r\n\r\n## Is It Over, Yet?\r\n\r\nNow that we have a working score for our program, it is time to allow users to see how well they did by transitioning from the <strong>quizScreen</strong> to the <strong>resultsScreen</strong>.\r\n\r\n<br>\r\n\r\nThere is just one problem: there is not a fixed amount of questions in the quiz. The default number of questions in the starter code was<strong> 4</strong>; however, some of you all might have added or subtracted questions when declaring and initializing variables in Step One. \r\n\r\n<br>\r\n\r\nIn order to transition screens, we will rely on the information in the <span style=\"color: #bb77c7\">totalQuestions</span> variable to test whether we have reached the end or not.\r\n\r\n<span role=\"img\" aria-label=\"Three\">3️⃣</span> Create an <code style=\"color:black; background-color:#fef088\">If</code> / <code style=\"color:black; background-color:#fef088\">Else</code> conditional statement that tests whether the <span style=\"color: #bb77c7\">turn</span> variable is greater than or equal to the <span style=\"color: #bb77c7\">totalQuestions</span> variable. \r\n* 👍 If<i> true</i>, then use the <code style=\"color:black; background-color:#fef088\">setScreen();</code> command to transition to<strong> resultsScreen</strong>. Additionally, call the <code style=\"color:black; background-color:#68d995\">displayResults();</code> command in order to show the value of our <span style=\"color: #bb77c7\">resultString</span> that we created in the previous step.\r\n\r\n<br>\r\n\r\n* 👎 If <i>false</i>, add<strong> 1</strong> to the value of <span style=\"color: #bb77c7\">turn</span>. Reset the<strong> userGuess</strong> input box to an empty string using the <code style=\"color:black; background-color:#fef088\">setText();</code> command. Finally, call the <code style=\"color:black; background-color:#68d995\">updateQuestion();</code> command to fill in the next movie question and answer.\r\n\r\n<br>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">🔎 Need help with your algorithm?</summary>\r\n    \r\n    <br>\r\n    \r\n   The <code style=\"color:black; background-color:#fef088\">If</code> / <code style=\"color:black; background-color:#fef088\">Else</code> conditional and accompanying statements can be coded as follows:\r\n    \r\n    <br> \r\n    <br>\r\n\r\n<div style=\"column-count: 2; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 2; width: 100%\"> \r\n\t<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\">\r\n    <img src=\"https://images.code.org/3fb37557c667296fabec508e83b83d48-2-3-2.png\" alt=\"\" style=\"display: block; margin: auto;\"/>\r\n    </p>\r\n\t<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\">\r\n    <img src=\"https://images.code.org/f58904b9ab44b2a36e854a708a01abc1-2-3-1.png\" alt=\"\" style=\"display: block; margin: auto;\"/>    \r\n    </p>\r\n </div>\r\n \r\n</details>",
    "bubble_choice_description": "Craft the conditionals that determine whether a user's answer was correct or incorrect.",
    "thumbnail_url": "https://images.code.org/e98be0cc9d626c4151d22f545c5c8dd0-EmojiMovie_titleCard.png",
    "preload_asset_list": null,
    "encrypted_examples": [

    ]
  },
  "game_id": 41,
  "published": true,
  "created_at": "2023-03-23T19:27:14.000Z",
  "level_num": "custom",
  "user_id": 18603,
  "audit_log": "[{\"changed_at\":\"2023-03-23T19:27:14.390+00:00\",\"changed\":[\"cloned from \\\"U4_L07_Conditionals Practice_Choice_2-2\\\"\"],\"cloned_from\":\"U4_L07_Conditionals Practice_Choice_2-2\"},{\"changed_at\":\"2023-03-23 19:27:17 +0000\",\"changed\":[\"code_functions\",\"preload_asset_list\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2023-03-23 19:29:03 +0000\",\"changed\":[\"code_functions\",\"display_name\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2023-03-28 18:35:56 +0000\",\"changed\":[\"code_functions\",\"long_instructions\",\"bubble_choice_description\",\"preload_asset_list\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2023-03-28 18:59:00 +0000\",\"changed\":[\"code_functions\",\"long_instructions\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>