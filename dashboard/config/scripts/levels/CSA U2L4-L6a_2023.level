<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A farmer wants to keep track of the crops they grow.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Crop`(#e7e8ea) class to assign specific values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #2:** Write a no-argument constructor in the `Crop`(#e7e8ea) class to assign default values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #3:** In `FarmRunner.java`(#e7e8ea), instantiate `Crop`(#e7e8ea) objects using each constructor.\r\n\r\n✅ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the `Crop`(#e7e8ea) objects.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nUse the `getType()`(#e7e8ea) and `getNumDays()`(#e7e8ea) methods in the `Crop`(#e7e8ea) class to get the current values assigned to the instance variables. For example:\r\n\r\n```\r\nCrop potatoes = new Crop();\r\nSystem.out.println(\"Type: \" + potatoes.getType());\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing parameterized constructors, using the `this`(#e7e8ea) keyword, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-this-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Crops",
    "bubble_choice_description": "A farmer wants to keep track of the crops they grow. Help the farmer by writing the `Crop` class with no-argument and parameterized constructors.",
    "thumbnail_url": "https://images.code.org/f2d13a07d850e54b9c5637528750d82c-crops.png",
    "encrypted_exemplar_sources": "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\nA4TGNL8pL2zElKknY7ktb8rhS5cbYi0hXw==\n",
    "encrypted_validation": "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\nBdCVkmpYD2XsZA==\n",
    "start_sources": {
      "FarmRunner.java": {
        "text": "public class FarmRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate Crop objects using the no-argument and parameterized constructors,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Crop.java": {
        "text": "/*\n * Represents a crop on a farm\n */\npublic class Crop {\n\n  private String type;      // The type of crop\n  private int numDays;      // The number of days it takes a crop to mature\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specified values to the\n   * instance variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /*\n   * Returns the current value assigned to type\n   */\n  public String getType() {\n    return type;\n  }\n\n  /*\n   * Returns the current value assigned to numDays\n   */\n  public int getNumDays() {\n    return numDays;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-11-17T23:08:18.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-17T23:08:18.302+00:00\",\"changed\":[\"cloned from \\\"CSA Practice Level Template\\\"\"],\"cloned_from\":\"CSA Practice Level Template\"},{\"changed_at\":\"2022-11-17 23:08:25 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:59:06 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:11:48 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:17:48 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:23:42 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:35:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:38:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:39:01 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:39:10 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:39:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:39:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:13:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:15:27 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:52:56 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:53:18 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:53:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:54:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:54:03 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
