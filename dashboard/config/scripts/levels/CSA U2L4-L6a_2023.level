<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A farmer wants to keep track of the crops they grow.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Crop`(#e7e8ea) class to assign specific values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #2:** Write a no-argument constructor in the `Crop`(#e7e8ea) class to assign default values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #3:** In `FarmRunner.java`(#e7e8ea), instantiate `Crop`(#e7e8ea) objects using each constructor.\r\n\r\n✅ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the `Crop`(#e7e8ea) objects.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printCropInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nCrop potatoes = new Crop();\r\npotatoes.printCropInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing parameterized constructors, using the `this`(#e7e8ea) keyword, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "FarmRunner.java": {
        "text": "public class FarmRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate Crop objects using the no-argument and parameterized constructors,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Crop.java": {
        "text": "/*\n * Represents a crop on a farm\n */\npublic class Crop {\n\n  private String type;      // The type of crop\n  private int numDays;      // The number of days it takes a crop to mature\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specified values to the\n   * instance variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /*\n   * Prints the type of the crop and the number\n   * of days it takes the crop to mature\n   */\n  public void printCropInfo() {\n    System.out.println(\"Type: \" + type);\n    System.out.println(\"Number of Days to Mature: \" + numDays);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-this-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Crops",
    "bubble_choice_description": "A farmer wants to keep track of the crops they grow. Help the farmer by writing the `Crop` class with no-argument and parameterized constructors.",
    "thumbnail_url": "https://images.code.org/f2d13a07d850e54b9c5637528750d82c-crops.png",
    "encrypted_exemplar_sources": "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\n"
  },
  "game_id": 68,
  "created_at": "2022-11-17T23:08:18.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-17T23:08:18.302+00:00\",\"changed\":[\"cloned from \\\"CSA Practice Level Template\\\"\"],\"cloned_from\":\"CSA Practice Level Template\"},{\"changed_at\":\"2022-11-17 23:08:25 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:59:06 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:11:48 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:17:48 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:23:42 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:35:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:38:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:39:01 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:39:10 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:39:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:39:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
