<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2016-10-12T17:57:34.000Z",
  "properties": {
    "options": {
      "skip_dialog": true,
      "css": "unplugged"
    },
    "title": "title",
    "content1": "description here",
    "markdown": "# Controlling Memory - Other ways to store values\n\n## Tip: Say \"gets\" instead of \"equals\"\n\nWe know that the `=` sign, in a JavaScript statement like `a = b`, **isn't** a statement of mathematical equality. It's an instruction to move memory around. We'll talk about how to do mathematical equalities in JavaScript soon, but for now we'll just focus on the meaning of `=`.\n\nOne tip is to read a statement like `var score = 0` as: **\"The variable score *gets* the value 0\"** or maybe just **\"score *gets* 0\"** to be brief.  Another example: `a = b + 7` should be read as **\"a gets b plus 7\"**\n\nWhen you read the `=` sign as \"gets\", and say it out loud that way, you'll prevent confusing yourself, and other programmers will know what you're talking about.\n\nAs we're about to see there are other ways to store values in variables besides just hard-coding single numbers.  But in all cases, even when it's more complicated, **using the word \"gets\"** when you see a single `=` sign will help your mental model of what's happening.\n\nIn the next several levels we're going to see how to:\n\n* Assign the result of an arithmetic expression.\n* Assign the value returned by `randomNumber`.\n* Assign a value given by the user through `promptNum`.\n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue</a>\n"
  },
  "published": true
}]]></config>
</External>
