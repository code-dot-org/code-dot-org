<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A commissioner wants to track the teams in their sports league.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Team`(#e7e8ea) class to assign specific values to the `name`(#e7e8ea) and `numWins`(#e7e8ea) instance variables.\r\n\r\n✅ **TO DO #2:** Write a parameterized constructor in the `Team`(#e7e8ea) class to assign a specific value to the `name`(#e7e8ea) instance variable and a default value to the `numWins`(#e7e8ea) instance variable.\r\n\r\n✅ **TO DO #2:** In `TeamRunner.java`(#e7e8ea), instantiate `Team`(#e7e8ea) objects using each parameterized constructor. \r\n\r\n✅ **TO DO #3:** Print the constructors and the values assigned to the instance variables for the `Team`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printTeamInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nTeam basketball = new Team();\r\nbasketball.printTeamInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing a parameterized constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "TeamRunner.java": {
        "text": "public class TeamRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Team object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Team.java": {
        "text": "/*\n * Represents a team in a sports league\n */\npublic class Team {\n\n  private String name;     // The name of a team\n  private int numWins;     // The number of championship wins\n  \n  /*\n   * Sets the name to \"unknown\" and numWins to 0\n   */\n  public Team() {\n    name = \"unknown\";\n    numWins = 0;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specific values to\n   * the name and numWins instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign a specific value to the\n   * name instance variable and a default value to the numWins instance variable.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Prints the name and number of wins for the team\n   */\n  public void printTeamInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Number of Wins: \" + numWins);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Sports League",
    "bubble_choice_description": "A commissioner wants to track the teams in their sports league.",
    "thumbnail_url": "https://images.code.org/91a73752dbfe96c50b830c1dde7e984b-sports.png",
    "encrypted_exemplar_sources": "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\nZjPLrRWI2rmetyMGOU8+J2FHkrIWykRqBj6nw/w=\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-09T21:25:50.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:25:50.219+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L3d_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L3d_2023\"},{\"changed_at\":\"2022-11-09 21:25:51 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:47:06 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:49:35 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:22:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:22:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:26:26 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 02:02:23 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
