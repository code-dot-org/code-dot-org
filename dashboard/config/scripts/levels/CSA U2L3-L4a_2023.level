<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "A commissioner wants to track the teams in their sports league.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numWins</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class to assign a specific value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> instance variable and a default value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numWins</code> instance variable.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TeamRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> objects using each parameterized constructor. \r\n\r\n‚úÖ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>\r\n        Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getNumWins()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class to get the current values assigned to the instance variables. For example:</p>\r\n                <pre style=\"background-color: #333333; color: white;\">\r\nTeam basketball = new Team();\r\nSystem.out.println(\"Name: \" + basketball.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Sports League",
    "bubble_choice_description": "A commissioner wants to track the teams in their sports league.",
    "thumbnail_url": "https://images.code.org/91a73752dbfe96c50b830c1dde7e984b-sports.png",
    "encrypted_exemplar_sources": "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\nlqaxhHOql+MW7go9\n",
    "encrypted_validation": "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\n",
    "start_sources": {
      "TeamRunner.java": {
        "text": "public class TeamRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Team object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Team.java": {
        "text": "/*\n * Represents a team in a sports league\n */\npublic class Team {\n\n  private String name;     // The name of a team\n  private int numWins;     // The number of championship wins\n  \n  /*\n   * Sets the name to \"unknown\" and numWins to 0\n   */\n  public Team() {\n    name = \"unknown\";\n    numWins = 0;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the name and numWins instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign a specific value to the\n   * name instance variable and a default value to the numWins instance variable.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to numWins\n   */\n  public int getNumWins() {\n    return numWins;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "video_key": "csa_overloaded_constructors",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-09T21:25:50.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:25:50.219+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L3d_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L3d_2023\"},{\"changed_at\":\"2022-11-09 21:25:51 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:47:06 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:49:35 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:22:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:22:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:26:26 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 02:02:23 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-17 02:29:47 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:56:05 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:42:07 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:51:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:52:24 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:36:59 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:44:06 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:44:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:46:13 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:50:39 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:51:58 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:55:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:55:46 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-02-02 14:28:14 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-14 18:27:53 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
