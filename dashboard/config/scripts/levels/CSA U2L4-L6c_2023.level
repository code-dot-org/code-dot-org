<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A candle maker wants to keep track of the candles they make and sell.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Candle`(#e7e8ea) class to assign specific values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #2:** Write a no-argument constructor in the `Candle`(#e7e8ea) class to assign default values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #3:** In `CandleRunner.java`(#e7e8ea), instantiate `Candle`(#e7e8ea) objects using each constructor.\r\n\r\n✅ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the `Candle`(#e7e8ea) objects.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nUse the `getScent()`(#e7e8ea), `getPrice()`(#e7e8ea), and `getIsSeasonal()`(#e7e8ea) methods in the `Candle`(#e7e8ea) class to get the current values assigned to the instance variables. For example:\r\n\r\n```\r\nCandle holiday = new Candle();\r\nSystem.out.println(\"Scent: \" + holiday.getScent());\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing parameterized constructors, using the `this`(#e7e8ea) keyword, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-this-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Candles",
    "bubble_choice_description": "A candle maker wants to keep track of the candles they make and sell. Help the candle maker by writing the `Candle` class with no-argument and parameterized constructors.",
    "thumbnail_url": "https://images.code.org/d2027c2e38ea7711f0092176186b2cb0-candles.png",
    "encrypted_exemplar_sources": "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\nSjJixpOiKBKmfo4h7SSwjA==\n",
    "encrypted_validation": "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\n",
    "start_sources": {
      "CandleRunner.java": {
        "text": "public class CandleRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate Candle objects using the no-argument and parameterized constructors,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Candle.java": {
        "text": "/*\n * Represents a candle made by a candle maker\n */\npublic class Candle {\n\n  private String scent;        // The scent of a candle\n  private double price;        // The price of a candle\n  private boolean isSeasonal;  // Whether or not a candle is a seasonal scent\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specified values to the\n   * instance variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /*\n   * Returns the current value assigned to scent\n   */\n  public String getScent() {\n    return scent;\n  }\n\n  /*\n   * Returns the current value assigned to price\n   */\n  public double getPrice() {\n    return price;\n  }\n\n  /*\n   * Returns the current value assigned to isSeasonal\n   */\n  public boolean getIsSeasonal() {\n    return isSeasonal;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-11-17T23:09:07.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-17T23:09:07.466+00:00\",\"changed\":[\"cloned from \\\"CSA U2L4-L6b_2023\\\"\"],\"cloned_from\":\"CSA U2L4-L6b_2023\"},{\"changed_at\":\"2022-11-17 23:09:12 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:59:02 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:19:01 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:22:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:59:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:59:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 22:00:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:13:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:16:52 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:41:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:41:44 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:42:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:42:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:42:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:44:21 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:44:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:44:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:45:11 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:47:04 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
