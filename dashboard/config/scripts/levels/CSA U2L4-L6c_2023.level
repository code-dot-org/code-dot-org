<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A candle maker wants to keep track of the candles they make and sell.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Candle`(#e7e8ea) class to assign specific values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #2:** Write a no-argument constructor in the `Candle`(#e7e8ea) class to assign default values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #3:** In `CandleRunner.java`(#e7e8ea), instantiate `Candle`(#e7e8ea) objects using each constructor.\r\n\r\n✅ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the `Candle`(#e7e8ea) objects.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printCandleInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nCandle holiday = new Candle();\r\nholiday.printCandleInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing parameterized constructors, using the `this`(#e7e8ea) keyword, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "CandleRunner.java": {
        "text": "public class CandleRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate Candle objects using the no-argument and parameterized constructors,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Candle.java": {
        "text": "/*\n * Represents a candle made by a candle maker\n */\npublic class Candle {\n\n  private String scent;        // The scent of a candle\n  private double price;        // The price of a candle\n  private boolean isSeasonal;  // Whether or not a candle is a seasonal scent\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specified values to the\n   * instance variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /*\n   * Prints the scent and price of the candle and\n   * whether or not it is a seasonal scent\n   */\n  public void printCandleInfo() {\n    System.out.println(\"Scent: \" + scent);\n    System.out.println(\"Price: \" + price);\n    System.out.println(\"Is Seasonal? \" + isSeasonal);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-this-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Candles",
    "bubble_choice_description": "A candle maker wants to keep track of the candles they make and sell. Help the candle maker by writing the `Candle` class with no-argument and parameterized constructors.",
    "thumbnail_url": "https://images.code.org/d2027c2e38ea7711f0092176186b2cb0-candles.png",
    "encrypted_exemplar_sources": "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\nr8z6ASoJuH3UoP14Vhxiq6nCsAdwvTNp6n56DOaPA6g8osMtaU2P8db10JyV\n2/BY52GaQ7Fa4Pk9s2Yq6YYHZPoE6Lw6enYCn3Tdg8OfuVXyyQSo8VPZfE7B\nH20QTxn+nun9K7uypkF1io9sdXwUhrGK4adaWPvOuXuB1zuK1wn6819zv6TR\n2M71MGxOwkSBTG70jb5ig9jeI7Zj9hExaam5ij1vxqE7r0jNFPSnJ9EcUXYj\niZ3UVyu/SMC7NTQiFWB2RqM/FsEe+eyRyJZZyTgsAZEWYNsL2sdCXzixYrEq\ntl0I2wl3p/mu4m5Kq0+PK5vyJA0shSLpQkM5m7NcU4TY071pMxkmHRLNw62C\nhcIPDDTaGy2n9rvQuexdn1evARSXQEZShVPfng67eHD5qZQWsWE2k2IiTMvA\nafdpPU0QDfgHr6j0OTY5vPBv5n8eeSM4r/uQ/A7fU2r7jQc2GHRh11J5fpsN\ne7loa7SvYmfFaLjr9mlCc23TPaMfRYJDh26FMZjJCm4vVmtJh6sHfaQOvl8N\nJuYP+lHS8k8+W05mwXYGzEghSyzi1qpeUPAYGwR95CHH3Kobtb+OhXpCh/lx\nMdnnL4HTgx3vLYPkJO9NpmsZ9/Q4zc+FwQuvzkLrjQgVZlSdimozIwy2vsFj\nIDTIS5zM1i886MPSoF7DLrxCMJPm0cT7v3M1n9YtZms6Wpa4sqqjXd65gdf5\nQTOm/9+2UBPHa22XOkzgf+/GzMWXxlkqz10aC4SYUsGN8OiWpKj1CYi/S/qF\n/iN7tDPm6yR7MVonTal5cO3WIsHC4LUypqO7IXGJQiePmIeBUzhc0qu4ZW8j\ncdAr6XRT9Krb+tIaMYhw1pkYCSsi7FdaHGn2kKy1ZkisZWTDELSR6VlYi3mo\nXT68mNsPU4xQAt57MB3lYo1QZLdJiI4zDlxpCpqBXEsyeL7oXeQ+QHPKeK9z\nQhUzXyZYv8Rpx5pKGxBnUfSMHP6bXAYMu89oE6RV9q3sqbf241o5dVl/V2if\nG53D3J9O/l7YkIuU3kk35PEWdE35HLDkq0iKBqXRiK7vIvQLePXkhbrZLGzm\nQDc1sAr8bQHXM+iVuovIaeaL14orbNU3MphVJghz5v+WxBishs7Fz2vCMtok\nQLjXPTrxrsnwyTRMa4JKdhLgpetrha/K1A6209AW75F4VkpTe/ue+0mqK96s\n50pNuwsw7xsYvDhZM+LCtU4n323+j76ZqnBXOFRNC9mjjeVYA2UBApkRYvVD\nfhrvySC33IP31n6SleGr0hgx7my7mGAlrAURlFosUab3C3sf9NDxLX0TuYJN\nWT31TdrClmkchDVVtbIVFM+BG+es4RKblF4TS4xiErqp2aloIiryUx+uvXFE\n92NuYOjlXeeaSp8WgJdNs+qTGQXtaYYeYOxEsHXrJpNldwqSrMa0iQLlu5+0\nUmRmfcA9Vh4FO95heDbd4v0bpOjAqgmxAe3k8b+bDT8uRPU33TFywm9zujlP\nYPLlVnAzHg7xTUXv5X/opUtsUb/w4YHj4qwCb7QH/lCDTlL2xOCIOkqWzzaA\n9n5IbAMAcb+jvFsFSxzFkKwpnTPDI/n7p9Iu+f+R/c7/3fm6ODDyjoRwHTCg\n2tXqQ15vE5MGPijbLCuObX8R3ICA/ar8LrVUV62eIwXNFdrU7chvwlsup9u1\nedH6UuZ7hocI3mDWeVjLDBT7spiMYDl6gUnRlpwSlVu+6pxPvuraokkYDR6T\n4S4MDPKllecnSRo35c8Sb2XvtD6Oh3UWUxupfZ+00Z7WKiW7ZqvhhaJWFkmJ\niZf4UPFNGn7VsBlnLfa0ucpBgMbn5muHbnm6I2PAFRtEvEVdD67+Xsx3gAnK\n/jVY0/uUS35JGODiE5FobBd8kvsjE2q4UoEaRW2UIrc5ZUx2zJnf3w0Qhw4V\nLd8/Er1vOl2zgxCmKUfeeVvJ8QkxGsEIZ7iFgynE60YmtvfXtoFfvm8sxDlo\n5/diNpvCYU84CR8F+NmhetXiEt37zmHK7ZhYdMJZVHpu/jDUy4do/sSb765X\nfeH3cOl/JyBZ9Oq+2CCfsd3u6aFbMkaXPIyEQev7wwuj4gWL/YiZc5GK3Gt2\nECt8BP9w4szZREZJjDqzyS/K6VDA5ddyH3adfXFySThD8Bbb/7VG43+Bm5qA\nmjCntpJPY9i9202BvQ6sYPCuQV5KVTA1jnXwVOjYZPG36nQbtmNqLKI5fu/m\nM9+vo4j4mGp1d1lg4lBMroMBV/BiAnQoAKJSei+4p02LuWVH46BM2W7JSY31\n1GL99n9Dc63yZafIRREokIsxLc78PxyLmbmqHIlwdsrC8PjUHg/ILv+A9Fhy\nQ2N+7QIZayHzNJ/jTbTsveSTb0POLyLzJxg3JccnlCk57mNNAEgGaMxqI6rB\nv+beiOdLJRJIDsEp63q4s/GVR8c8Zy34RdrZNw4Da70OpXLNKtj6OSsLK06I\n8aeZzjL0RVjNtCaOR85P3ebSrdtYEuWtVxczruSQRaT7TG/xZN2j8irFrFU4\nYOI9OZfSP3VDvFl7wBLJoHy0aseCQgQCJG0QRI0eBf/TJaVxp5tw99pSOByy\nbSEfDXf3oPCSpgD4m2apNinSBJxpozhMXr4uLsj7Svgyzre6AABMn3tX40Eg\nnp6GxIn/g/p8PR+IGXYTCJqsPEh8WMztfkPlE1uhWNcNfzvaNJXEx13gBXwV\nGHyDuiBwM7cgHRYaP3+g8cblGErrpy5sue3SC0ozO4jtwohjoCxwPEcryvgf\nYgfEddLXFiZVNEnsaVWT/JvLaHg9OTl6Whuw979sX1qS9L/Awjdn8dGjii6E\ngOVBOUwg2MWceEje9TbExT/Thi/47i6sRlk17C7oFjOQD2YdEZr/1Z2OAptZ\nVruRaDGtbO4I85ALJgb7CQZgeHELa0f3WOR5eCe6k+yZraCP3BmtqmhEDWc4\nlEDZWsCP924iV4GSspXPT4pwRwxBBhX+0kzaPvpHkJH2etvwJo060freBQPB\nXoezzBxX09hAGZ6LF1fzlqHL49c6pKqZ4POS4tW/ImrvIiM5xo67mTWgVkAx\nXJd/YaoVeIZP2qrVqERsrKSPU1g/FOavSnwBWk+1EvCTf0v/GLYzJP7IULb1\nHKL6ZB0gwvmm/7PujL50k0meWE6hget8ytApeJTBkY9JRUj4pdIXxQT+IXj4\nhwBGRaKrQAEN+087Y82Li5X/aKOc+bewY6sfR+4eabA/2VVFH9HqGVMPY5PE\nGEIIIfacGRNrEoFRvtfLyxjfK4MQ+fjlIp84WuBMDlQb48y9lFMobqfO9toD\n5BCIrxD1B7cvVSvVJ3NXelMgiNP83tCKiXwjKufZxDTF1ytOCf1F7oc4nZt2\nc3dIVnL1Y1iLIG7Udlk2CoufVq2YdiJrHvOGggQRXlH9rbytfmPvjGxPGhu4\nRdZJMylyXxmydI5NCwMg3+hchbTA2KeDjE2QLjaTU6Gq0Jnfn8xsGA0BHT6q\nYNPb5RgiwUIAIynNA4CSHbnTD0xJlpZJTwze98Cq0/1KYEXLcfLbsLCmEaP/\nCNVSocuSDeUIeAHNTfJv2/qCx04+fxFUV5x2sSdSZbtqZDG+hW1QZTTboqnr\ntMi4RGdHC1bR8cYxFnAgxLy6nzltQrgLDZCBc4Oc5ZBlNyoa4SBf36cGK5TO\nDCMGa9EzypnNFo/p23f9b3icX6WsJFVXc/jJy8F+SQwBkCvj2wJsVQZt5eQ2\nu44vqT9Zu9Qr5GbA+7RiPPqjNtz3cPdxiyF096wH+WphyPApSj4JttyWmmwz\nK5CT6zLn5plLtplcrkQsUnqSJJbS5wnMn7ZvuO6bIXQPREGfn8ezF6xRESFD\nS5yQ4VtgDlYFPeM4YbIrYh/aQZ9m5u/B9bAhx6DJL2oRrGTTofawt4TRESmQ\nvddbPTn9h4JLJ8ttRHNPM7c6fko/GDVytV6irrquPrcWjK5V6l6Nc7Ms0/Ic\nxbljKSRy6MvHECa0497XLF6F44cqGr6gbo/Q2P+qlWnWEOIql0R5fzd5fT/R\nUKFc0r/926CUmZjR5GObsOKYeZup5/h0o6gAqa8WLwhSdTFetPxHWVKRWzM8\n5fiEySllSB7Bh2ctO2RJAnSMDhnY3WRwTuIgemvWNpqq6HJgojzQ7+geECfi\nYrqzX9tUAmmevEdaHU/1auZ+4zIKbBXq2zWlqDoqMo3qbwgAriLYcbz1W/hY\ng131DL4D5FaUgPJIaFCybTnQ2OXaCx/175b3+4tLzV4acUDl3NWFsiIq26Fp\niN0U+GpbWcS0gOWNC+XawBHlyNZi3mxr4XhghWV0EWZefjryG4PPQLCTF99L\naP2xcN6d2AqtKlp09FBFPr9wsH7DUYcsp5ctiQc5kjP6JEHQu0Cn49H+Z+qn\nDldFk1lopS0M/RHgWHtPEiuFskAuS6D1jkMl9T4b7JXvcccIMm/OFvzrM/i7\nEudXFmxdNCWWucrLP2+byPY+VV7R/pgoauwqzQv9uQBvo+YuJ9xRzdcgZYET\nnXumc4ggDyGj76pk0s2xbxIKlTymtl+UlUKNkd6Nz1GJyT75zj4fdZNok3KF\nsoOuOcnikm0Ce6AjpdYF3uRNto7aPcrigReOhaiKqal6ygt8einHRaszMQ1s\nr9BblHtEc3wSYBnLJpTw5gOWIuztNrOEQJ5XE9bZg0qCFxeLzIF3a3R/kAXn\nklX64y7/wArZz4LE6PqYzK7tpBli0WUxm1C7H3XYjZvsOAw84nairNP0AhsS\nVmN7Cb7xKYgyI1J9y8rRkZzXPmIytlK/C7WAHGiOr2d21rODjnwM3ySI/fMV\nvyh4u+34zavOM/exQP8vzokFa+wglYta46RbfFvuqBp39+TC7n8iTuSwLCYw\n+2CAgvI0OUOv9aVGpIPdKCEuUTPMTD9uIpC+N5UGgdpXGXg1k2PoEcB4Nuyw\nLBB37LpCR7P4Mpuad3Lk/khWkjoaEIsoRsuhbwW38Nq+p2/awr61cq0Om7Gz\nr7nIRc0UoCI/ltQeDuSviGq5mnEpp6pgplIDoe2C+9UKsUTvzzwekx2q3Bsb\niL4fVi28z6/poHmk\n"
  },
  "game_id": 68,
  "created_at": "2022-11-17T23:09:07.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-17T23:09:07.466+00:00\",\"changed\":[\"cloned from \\\"CSA U2L4-L6b_2023\\\"\"],\"cloned_from\":\"CSA U2L4-L6b_2023\"},{\"changed_at\":\"2022-11-17 23:09:12 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:59:02 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:19:01 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:22:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:59:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:59:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 22:00:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
