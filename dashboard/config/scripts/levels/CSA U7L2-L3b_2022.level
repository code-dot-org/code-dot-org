<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "A restaurant wants to allow customers to create meal combos consisting of a burger, side, and drink. The `Combo`(#e7e8ea) class represents a combo and has instance variables for a `Burger`(#e7e8ea) object, a `Side`(#e7e8ea) object, and a `Drink`(#e7e8ea) object.\r\n\r\nCustomers can create multiple combos that are added to a `customerOrders`(#e7e8ea) list. When they are finished creating their combos, the program displays the information about their selections.\r\n\r\n##In Combo.java:\r\n\r\n1. Complete the constructor to create a `Combo`(#e7e8ea) object. The constructor should instantiate the `theBurger`(#e7e8ea), `theSide`(#e7e8ea), and `theDrink`(#e7e8ea) instance variables with new `Burger`(#e7e8ea), `Side`(#e7e8ea), and `Drink`(#e7e8ea) objects.\r\n\r\n   * Use the `getHasCheese()`(#e7e8ea), `getSide()`(#e7e8ea) and `getType()`(#e7e8ea) methods in the `Burger`(#e7e8ea), `Side`(#e7e8ea), and `Drink`(#e7e8ea) objects to instantiate the new objects.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\n\npublic class MyConsole {\n  public static void main(String[] args) {\n\n    Scanner input = new Scanner(System.in);\n    ArrayList<Combo> customerOrders = new ArrayList<Combo>();\n\n    String choice = \"\";\n    Combo myCombo = null;\n\n    while (!choice.equals(\"no\")) {\n      System.out.print(\"Would you like to create a combo? (yes or no) \");\n      choice = input.nextLine();\n\n      if (choice.equals(\"yes\")) {\n        Burger tempBurger = Combo.getCustomerBurger();\n        Side tempSide = Combo.getCustomerSide();\n        Drink tempDrink = Combo.getCustomerDrink();\n\n        myCombo = new Combo(tempBurger, tempSide, tempDrink);\n        customerOrders.add(myCombo);\n      }\n    }\n\n    for (Combo order : customerOrders) {\n      System.out.println(order);\n    }\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Combo.java": {
        "text": "import java.util.Scanner;\n\n/*\n * Represents a meal combo\n */\npublic class Combo {\n\n  private Burger theBurger;   // The Burger for the combo\n  private Side theSide;       // The Side for the combo\n  private Drink theDrink;     // The Drink for the combo\n\n  /*\n   * Constructor to create a Combo with\n   * the specified Burger, Side, and Drink\n   */\n  public Combo(Burger theBurger, Side theSide, Drink theDrink) {\n    // TO DO #1: Write the constructor to create a Combo object\n    // with new Burger, Side, and Drink objects.\n    \n    \n  }\n\n  /*\n   * Returns a Burger based on user input\n   */\n  public static Burger getCustomerBurger() {\n    Scanner input = new Scanner(System.in);\n    System.out.print(\"Would you like cheese on your burger? (true for yes, false for no) \");\n    boolean cheese = input.nextBoolean();\n    input.close();\n    Burger tempBurger = new Burger(cheese);\n    return tempBurger;\n  }\n\n  /*\n   * Returns a Side based on user input\n   */\n  public static Side getCustomerSide() {\n    Scanner input = new Scanner(System.in);\n    System.out.print(\"What side would you like - fries, chips, or salad? \");\n    String choice = input.nextLine();\n    input.close();\n    Side tempSide = new Side(choice);\n    return tempSide;\n  }\n\n  /*\n   * Returns a Drink based on user input\n   */\n  public static Drink getCustomerDrink() {\n    Scanner input = new Scanner(System.in);\n    System.out.print(\"What drink would you like - soda, water, or juice? \");\n    String choice = input.nextLine();\n    input.close();\n    Drink tempDrink = new Drink(choice);\n    return tempDrink;\n  }\n\n  /*\n   * Returns a String containing the Combo information\n   */\n  public String toString() {\n    return theBurger + \" with a \" + theSide + \" and \" + theDrink;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Burger.java": {
        "text": "/*\n * Represents a burger\n */\npublic class Burger {\n\n  private boolean hasCheese;   // Whether or not the Burger has cheese\n\n  /*\n   * Constructor to create a Burger with\n   * the specified cheese status\n   */\n  public Burger(boolean hasCheese) {\n    this.hasCheese = hasCheese;\n  }\n\n  /*\n   * Returns whether or not the Burger has cheese\n   */\n  public boolean getHasCheese() {\n    return hasCheese;\n  }\n\n  /*\n   * Returns a String containing the Burger information\n   */\n  public String toString() {\n    String text = \"\";\n\n    if (hasCheese) {\n      text = \"Cheeseburger\";\n    }\n    else {\n      text = \"Hamburger\";\n    }\n\n    return text;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Side.java": {
        "text": "/*\n * Represents a side\n */\npublic class Side {\n\n  private String type;   // The type of side\n\n  /*\n   * Constructor to create a Side with the\n   * specified type (fries, chips, or salad)\n   */\n  public Side(String type) {\n    if (type.equals(\"fries\") || type.equals(\"chips\") || type.equals(\"salad\")) {\n      this.type = type;\n    }\n    else {\n      System.out.println(type + \" is not available as a side.\");\n    }\n  }\n\n  /*\n   * Returns the side\n   */\n  public String getSide() {\n    return type;\n  }\n\n  /*\n   * Returns a String containing the Side information\n   */\n  public String toString() {\n    return \"side of \" + type;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "Drink.java": {
        "text": "/*\n * Represents a drink\n */\npublic class Drink {\n\n  private String type;   // The type of drink\n\n  /*\n   * Constructor to create a Drink with the\n   * the specified type (soda, water, or juice)\n   */\n  public Drink(String type) {\n    if (type.equals(\"soda\") || type.equals(\"water\") || type.equals(\"juice\")) {\n      this.type = type;\n    }\n    else {\n      System.out.println(type + \" is not available as a drink.\");\n    }\n  }\n\n  /*\n   * Returns the type of drink\n   */\n  public String getType() {\n    return type;\n  }\n\n  /*\n   * Returns a String containing information about the Drink\n   */\n  public String toString() {\n    return type + \" drink\";\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\n+vwSmife+Q==\n",
    "display_name": "Meal Combo",
    "bubble_choice_description": "A restaurant wants to allow customers to create meal combos consisting of a burger, side, and drink. Write the constructor for the Combo class to instantiate Burger, Side, and Drink objects.",
    "thumbnail_url": "https://images.code.org/4d907256cb39aba6baf44e776323889c-burger.png"
  },
  "game_id": 68,
  "created_at": "2022-04-18T12:33:06.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-18T12:33:06.257+00:00\",\"changed\":[\"cloned from \\\"CSA U7L2-L3a_2022\\\"\"],\"cloned_from\":\"CSA U7L2-L3a_2022\"},{\"changed_at\":\"2022-04-18 12:33:12 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 16:09:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 16:48:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 17:15:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:31:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:33:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:33:23 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:33:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:34:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:35:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:36:03 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:36:12 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:36:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:36:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:41:24 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:43:28 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-10 18:44:55 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-28 16:13:18 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-02-21 15:09:15 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-01 15:03:16 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
