<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A student wants to keep track of the museums they visit.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Museum`(#e7e8ea) class to assign specific values to the `name`(#e7e8ea) and `isNonProfit`(#e7e8ea) instance variables.\r\n\r\n✅ **TO DO #2:** In `MuseumRunner.java`(#e7e8ea), instantiate a `Museum`(#e7e8ea) object using the parameterized constructor. \r\n\r\n✅ **TO DO #3:** Print the constructors and the values assigned to the instance variables for the `Museum`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printMuseumInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nMuseum modernArt = new Museum();\r\nmodernArt.printMuseumInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing a parameterized constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MuseumRunner.java": {
        "text": "public class MuseumRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Museum object using the parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Museum.java": {
        "text": "/*\n * Represents a museum\n */\npublic class Museum {\n\n  private String name;           // The name of a museum\n  private boolean isNonProfit;   // Whether or not a museum is non-profit\n\n  /*\n   * Sets the name to \"unknown\" and isNonProfit to false\n   */\n  public Museum() {\n    name = \"unknown\";\n    isNonProfit = false;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specific values to\n   * the name and isNonProfit instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  /*\n   * Prints the name of the museum and whether\n   * or not the museum is non-profit\n   */\n  public void printMuseumInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Non-Profit? \" + isNonProfit);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "display_name": "Museums",
    "bubble_choice_description": "A student wants to keep track of the museums they visit.",
    "encrypted_exemplar_sources": "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\nOAS4bHx0nDuUX7grSXvSXg==\n",
    "thumbnail_url": "https://images.code.org/3edf96bc3d43630be81553151320374a-museum.png",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-09T21:24:55.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:24:55.904+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L3c_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L3c_2023\"},{\"changed_at\":\"2022-11-09 21:24:57 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:02:11 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:28:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:28:55 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:31:53 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:32:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:32:04 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:36:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:46:07 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:48:50 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:55:23 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
