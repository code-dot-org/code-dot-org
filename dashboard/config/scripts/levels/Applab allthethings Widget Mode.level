<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2019-07-29T22:24:25.000Z",
  "level_num": "custom",
  "user_id": 22,
  "properties": {
    "encrypted": "false",
    "skin": "applab",
    "embed": "false",
    "instructions_important": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "never_autoplay_video": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "hide_view_data_button": "false",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "fail_on_lint_errors": "false",
    "debugger_disabled": "false",
    "makerlab_enabled": "false",
    "long_instructions": "# It's a Word Search\r\n\r\nOn the left side of the screen, click \"Run\" to start the word search.\r\n\r\nWorking with a team find the following words in the grid. They may be horizontal, vertical, or diagonal in any direction. \r\n\r\n * DEFINE \r\n * PREPARE\r\n * TRY\r\n * REFLECT\r\n * PROBLEM\r\n * SOLVE\r\n * COMPUTER\r\n * SCIENCE\r\n \r\n Once you have found the words (or your teacher calls time), click \"Finish\" to move to the next activity.",
    "start_blocks": "var cellDim = 20;\r\nvar textArray = [];\r\ntextArray.push(\"E S Q H J H R C F A X M G M U E B L N I\".split(\" \"));\r\ntextArray.push(\"S R K E R E T U P M O C E C M Z T Y J C\".split(\" \"));\r\ntextArray.push(\"D X A P N X Q L Y V K L S X X N C E H N\".split(\" \"));\r\ntextArray.push(\"J M X P K W W O J Q B B O Q M H E A H T\".split(\" \"));\r\ntextArray.push(\"B I U O E Y H K M O A R L F R D L P H A\".split(\" \"));\r\ntextArray.push(\"N J H T Y R A E R C F L V M S C F A J M\".split(\" \"));\r\ntextArray.push(\"T I R Y Q W P P H D X Q E Q U N E R G S\".split(\" \"));\r\ntextArray.push(\"H Y R I M I X D Z K B M N G O J R B K U\".split(\" \"));\r\ntextArray.push(\"P U B U E U J E G D T F B D T I M V V P\".split(\" \"));\r\ntextArray.push(\"H V W S K F D G K V D M S O X Y O R S F\".split(\" \"));\r\ntextArray.push(\"S C I E N C E W P Q T E O R I A S Q M U\".split(\" \"));\r\ntextArray.push(\"H R G D Y V N H I J D C F G V H E M Z M\".split(\" \"));\r\ntextArray.push(\"U O H H N A G X O Q K K B I G M T W O L\".split(\" \"));\r\ntextArray.push(\"O P E I O Q G B A R V H P N N A Z E X V\".split(\" \"));\r\ntextArray.push(\"Y I S W N R N U U W G H X H A E B O P N\".split(\" \"));\r\ntextArray.push(\"L X D J X R P V Y J H U H X D Y F O I D\".split(\" \"));\r\ntextArray.push(\"F U D J X V U K F C V D Q B P D Z I B D\".split(\" \"));\r\ntextArray.push(\"F B R D S I W P K F K V T R D R G Y C R\".split(\" \"));\r\ntextArray.push(\"Y E T Y O D M X H L L V P T J V I J C D\".split(\" \"));\r\ntextArray.push(\"H E X K R O I P B W E T O Y X I B W V O\".split(\" \"));\r\nvar currentCanvas = false;\r\nvar lineStart = [0,0];\r\nvar lineEnd = [0,0];\r\n\r\nvar canvasArray = [];\r\nvar wordBank = [\"DEFINE\", \"PREPARE\", \"TRY\", \"REFLECT\", \"PROBLEM\", \"SOLVE\", \"COMPUTER\", \"SCIENCE\"];\r\n\r\nfor (var i=0; i<textArray.length; i++) {\r\n  for (var j=0; j<textArray[i].length; j++) {\r\n    textLabel(i + \"-\" + j, textArray[i][j]);\r\n    setStyle(i + \"-\" + j,  \"position: absolute; font-size: 15px; padding:0px\" );\r\n    setProperty(i + \"-\" + j,  \"y\", i * cellDim + cellDim / 2);\r\n    setProperty(i + \"-\" + j,  \"x\", j * cellDim + cellDim / 2);\r\n    setProperty(i + \"-\" + j,  \"height\", 15);\r\n    setProperty(i + \"-\" + j,  \"width\", 15);\r\n    setProperty(i + \"-\" + j,  \"text-align\", \"center\");\r\n  }\r\n}\r\n\r\nfor (var i=0; i<wordBank.length; i++) {\r\n  textLabel(\"word\" + i, wordBank[i]);\r\n  setStyle(\"word\" + i,  \"position: absolute; font-size: 15px;\");\r\n  setProperty(\"word\" + i,  \"x\", 420);\r\n  setProperty(\"word\" + i,  \"y\", 35 * i + 10);\r\n}\r\n\r\nloadLines();\r\nloadWords();\r\n\r\nbutton(\"start_over_button\", \"Start Over\");\r\nsetProperty(\"start_over_button\", \"x\", 440);\r\nsetProperty(\"start_over_button\", \"y\", 330);\r\n\r\nonEvent(\"start_over_button\", \"click\", function() {\r\n  readRecords(\"lines\", {}, function(records) {\r\n    for (var i =0; i < records.length; i++) {\r\n      deleteRecord(\"lines\", {id:records[i].id}, function(success) {\r\n      });\r\n    }\r\n  });\r\n  readRecords(\"words\", {}, function(records) {\r\n    for (var i =0; i < records.length; i++) {\r\n      deleteRecord(\"words\", {id:records[i].id}, function(success) { \r\n      });\r\n      setStyle(\"word\" + records[i].index, \"text-decoration: none;\"); \r\n    }\r\n  });\r\n});\r\n\r\nonEvent(\"screen1\", \"mousedown\", function(event) {\r\n  if (isValidLetter(event.pageX, event.pageY)) {\r\n    var canvasID = \"canvas\" + canvasArray.length;\r\n    currentCanvas = createCanvas(canvasID);\r\n    setActiveCanvas(canvasID);\r\n    canvasArray.push(currentCanvas);\r\n    lineStart = [getClosestLetterPos(event.pageX), getClosestLetterPos(event.pageY)];\r\n    lineEnd = [getClosestLetterPos(event.pageX), getClosestLetterPos(event.pageY)];\r\n    drawLine();\r\n\r\n  }\r\n\r\n});\r\nonEvent(\"screen1\" , \"mousemove\", function(event) {\r\n  if (currentCanvas) {\r\n    lineEnd = [getClosestLetterPos(event.pageX), getClosestLetterPos(event.pageY)];\r\n    clearCanvas();\r\n    drawLine();\r\n  }\r\n});\r\nonEvent(\"screen1\",\"mouseup\",function(event) {\r\n  if (currentCanvas && isValidLetter(lineEnd[0], lineEnd[1]) && ((lineStart[0] == lineEnd[0]) || (lineStart[1] == lineEnd[1]))) {\r\n    if (getWord(lineStart, lineEnd)) {\r\n      currentCanvas = false;\r\n      saveLine();\r\n      saveWord(getWord(lineStart, lineEnd));\r\n    } else {\r\n      clearCanvas();\r\n      currentCanvas = false;\r\n    }\r\n  } else if (isValidLetter(lineEnd[0], lineEnd[1]) && (Math.abs(lineStart[0] - lineEnd[0]) == Math.abs(lineStart[1] - lineEnd[1]))) {\r\n    if (getWord(lineStart, lineEnd)) {\r\n      currentCanvas = false;\r\n      saveLine();\r\n      saveWord(getWord(lineStart, lineEnd));\r\n    } else {\r\n      clearCanvas();\r\n      currentCanvas = false;\r\n    }\r\n  } else {\r\n    clearCanvas();\r\n    currentCanvas = false;\r\n  }\r\n});\r\nfunction drawLine() {\r\n  setStrokeWidth(15);\r\n  setStrokeColor(rgb(255,200,0,0.5));\r\n  line(lineStart[0], lineStart[1], lineEnd[0], lineEnd[1]);\r\n}\r\nfunction isValidLetter (x, y) {\r\n  return ((x > cellDim / 2) && (x < cellDim * 20.5) && (y > cellDim / 2) && (y < cellDim * 20.5));\r\n}\r\nfunction saveLine() {\r\n  createRecord(\"lines\", {startX:lineStart[0],startY:lineStart[1], endX:lineEnd[0],endY:lineEnd[1]}, function(record) {\r\n  });\r\n\r\n}\r\nfunction saveWord(word) {\r\n  createRecord(\"words\", {word: word, index: wordBank.indexOf(word)}, function(record) {\r\n  });\r\n}\r\nfunction loadLines() {\r\n  readRecords(\"lines\", {}, function(records) {\r\n    for (var i =0; i < records.length; i++) {\r\n      createCanvas(\"\" + records[i].id);\r\n      setStrokeWidth(15);\r\n      setStrokeColor(rgb(255,200,0,0.5));\r\n      line(records[i].startX, records[i].startY, records[i].endX, records[i].endY);\r\n    }\r\n  });\r\n}\r\nfunction loadWords() {\r\n  readRecords(\"words\", {}, function(records) {\r\n    for (var i =0; i < records.length; i++) {\r\n      setStyle(\"word\" + records[i].index, \"text-decoration: line-through;\");\r\n    }\r\n  });\r\n}\r\nfunction getClosestLetterPos(number) {\r\n  return (Math.floor(number / 20) * 20 + 4);\r\n}\r\n\r\nfunction getWord(firstLetterPos, lastLetterPos) {\r\n  if (firstLetterPos[0] == lastLetterPos[0]) {\r\n    return getVerticalWord(firstLetterPos, lastLetterPos);\r\n  }\r\n  if (firstLetterPos[1] == lastLetterPos[1]) {\r\n    return getHorizontalWord(firstLetterPos, lastLetterPos);\r\n  }\r\n  if (Math.abs(firstLetterPos[0] - lastLetterPos[0]) == Math.abs(firstLetterPos[0] - lastLetterPos[0])) {\r\n    return getDiagonalWord(firstLetterPos, lastLetterPos);\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction getVerticalWord(firstLetterPos, lastLetterPos) {\r\n  var myWord = getLetterFromPos(firstLetterPos);\r\n  var letterX = firstLetterPos[0];\r\n  var currentLetterY = firstLetterPos[1];\r\n  var goingUp = lastLetterPos[1] < firstLetterPos[1];\r\n  while (currentLetterY != lastLetterPos[1] ) {\r\n    if (goingUp) {\r\n      currentLetterY -= cellDim;\r\n    } else {\r\n      currentLetterY += cellDim;\r\n    }\r\n    myWord += getLetterFromPos([letterX, currentLetterY]);\r\n  }\r\n  var bankIndex = wordBank.indexOf(myWord);\r\n  if (bankIndex == -1) { \r\n    return false;\r\n  } else {\r\n    setStyle(\"word\" + bankIndex, \"text-decoration: line-through;\");\r\n  }\r\n  return myWord;\r\n}\r\n\r\nfunction getHorizontalWord(firstLetterPos, lastLetterPos) {\r\n  var myWord = getLetterFromPos(firstLetterPos);\r\n  var letterY = firstLetterPos[1];\r\n  var currentLetterX = firstLetterPos[0];\r\n  var goingLeft = lastLetterPos[0] < firstLetterPos[0];\r\n  while (currentLetterX != lastLetterPos[0] ) {\r\n    if (goingLeft) {\r\n      currentLetterX -= cellDim;\r\n    } else {\r\n      currentLetterX += cellDim;\r\n    }\r\n    myWord += getLetterFromPos([currentLetterX, letterY]);\r\n  }\r\n  var bankIndex = wordBank.indexOf(myWord);\r\n  if (bankIndex == -1) { \r\n    return false;\r\n  } else {\r\n    setStyle(\"word\" + bankIndex, \"text-decoration: line-through;\");\r\n  }\r\n  return myWord;\r\n}\r\n\r\nfunction getDiagonalWord(firstLetterPos, lastLetterPos) {\r\n  var myWord = getLetterFromPos(firstLetterPos);\r\n  var currentLetterX = firstLetterPos[0];\r\n  var currentLetterY = firstLetterPos[1];\r\n  var goingUp = lastLetterPos[1] < firstLetterPos[1];\r\n  var goingLeft = lastLetterPos[0] < firstLetterPos[0];\r\n  while (currentLetterY != lastLetterPos[1] ) {\r\n    if (goingUp) {\r\n      currentLetterY -= cellDim;\r\n    } else {\r\n      currentLetterY += cellDim;\r\n    }\r\n    if (goingLeft) {\r\n      currentLetterX -= cellDim;\r\n    } else {\r\n      currentLetterX += cellDim;\r\n    }\r\n    myWord += getLetterFromPos([currentLetterX, currentLetterY]);\r\n  }\r\n  var bankIndex = wordBank.indexOf(myWord);\r\n  if (bankIndex == -1) { \r\n    return false;\r\n  } else {\r\n    setStyle(\"word\" + bankIndex, \"text-decoration: line-through;\");\r\n  }\r\n  return myWord;\r\n}\r\n\r\nfunction getLetterFromPos(coordinates) {\r\n  var x = (coordinates[0] - 24) / cellDim;\r\n  var y = (coordinates[1] - 24) / cellDim;\r\n  // check that coordinates are within the letter grid\r\n  if ((x < 20) && (y < 20)) {\r\n    return textArray[y][x];\r\n  }\r\n  return false;\r\n}",
    "widget_mode": "true",
    "preload_asset_list": null,
    "encrypted_examples": [

    ]
  },
  "published": true,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2019-07-29 22:24:49 +0000\",\"changed\":[\"notes\",\"code_functions\",\"preload_asset_list\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-07-29 22:27:31 +0000\",\"changed\":[\"code_functions\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-07-29 22:28:27 +0000\",\"changed\":[\"code_functions\",\"preload_asset_list\",\"encrypted_examples\",\"hide_design_mode\",\"hide_view_data_button\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-07-29 22:38:27 +0000\",\"changed\":[\"code_functions\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-07-29 23:05:33 +0000\",\"changed\":[\"code_functions\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-07-31 17:11:56 +0000\",\"changed\":[\"code_functions\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-07-31 17:45:10 +0000\",\"changed\":[\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-08-01 22:12:13 +0000\",\"changed\":[\"preload_asset_list\",\"encrypted_examples\",\"embed\",\"hide_design_mode\",\"hide_view_data_button\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-08-01 22:17:03 +0000\",\"changed\":[\"preload_asset_list\",\"encrypted_examples\",\"embed\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-08-01 22:38:49 +0000\",\"changed\":[\"preload_asset_list\",\"encrypted_examples\",\"embed\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-08-01 22:51:35 +0000\",\"changed\":[\"preload_asset_list\",\"encrypted_examples\",\"embed\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-08-01 23:02:40 +0000\",\"changed\":[\"preload_asset_list\",\"encrypted_examples\",\"embed\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-08-05 20:56:16 +0000\",\"changed\":[\"preload_asset_list\",\"encrypted_examples\",\"start_blocks\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-08-05 21:03:07 +0000\",\"changed\":[\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-08-05 21:58:21 +0000\",\"changed\":[\"preload_asset_list\",\"encrypted_examples\",\"embed\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-08-06 17:33:05 +0000\",\"changed\":[\"hide_design_mode\",\"hide_view_data_button\",\"long_instructions\",\"start_blocks\",\"preload_asset_list\",\"contained_level_names\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-08-07 21:36:06 +0000\",\"changed\":[\"name\",\"embed\",\"hide_design_mode\",\"hide_view_data_button\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2019-08-09 22:02:10 +0000\",\"changed\":[\"start_blocks\",\"preload_asset_list\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"}]",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Applab>