<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Look at this project example. What are some of its characteristics and features?\r\n\r\n*While this is an example of a project for this unit, it is not representative of the only way you can approach or develop the project.*",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    Player redPlayer = new Player(\"red\");\n    Player yellowPlayer = new Player(\"yellow\");\n    ConnectFour game = new ConnectFour(redPlayer, yellowPlayer);\n    game.playGame();\n    \n  }\n}",
        "isVisible": true
      },
      "ConnectFour.java": {
        "text": "public class ConnectFour {\n\n  private Board gameBoard;\n  private Player redPlayer;\n  private Player yellowPlayer;\n  \n  public ConnectFour(Player redPlayer, Player yellowPlayer) {\n    this.redPlayer = redPlayer;\n    this.yellowPlayer = yellowPlayer;\n  }\n  \n  public void dropDisk(Player currentPlayer) {\n    int selection = currentPlayer.getPosition();\n    gameBoard.addDisk(selection, currentPlayer.getLetter());\n  }\n  \n  public String displayWinner(String winner) {\n    String result = null;\n\n    if (winner != null) {\n      if (winner.equals(redPlayer.getLetter())) {\n        result = \"The red player won.\";\n      }\n\n      if (winner.equals(yellowPlayer.getLetter())) {\n        result = \"The yellow player won.\";\n      }\n    }\n\n    return result;\n  }\n  \n  public Player choosePlayer(int turn) {\n    Player currentPlayer = null;\n\n    if (turn % 2 == 0) {\n      currentPlayer = redPlayer;\n    }\n    else {\n      currentPlayer = yellowPlayer;\n    }\n\n    return currentPlayer;\n  }\n  \n  public void playGame() {\n    int turn = 0;\n    String winner = null;\n\n    gameBoard = new Board();\n    gameBoard.showGrid();\n\n    while (winner == null) {\n      Player currentPlayer = choosePlayer(turn);\n      dropDisk(currentPlayer);\n\n      turn++;\n      gameBoard.showGrid();\n      winner = gameBoard.checkWinner();\n      endGame(currentPlayer, winner);\n    }\n  }\n  \n  public void endGame(Player currentPlayer, String winner) {\n    if (winner != null) {\n      String winningMessage = displayWinner(winner);\n      System.out.println(winningMessage);\n\n      if (currentPlayer.playAgain()) {\n        playGame();\n      }\n    }\n  }\n\n}",
        "isVisible": true
      },
      "Board.java": {
        "text": "public class Board {\n\n  private String[][] grid;\n\n  public Board() {\n    this.grid = createGrid();\n  }\n\n  public String[][] getGrid() {\n    return grid;\n  }\n\n  public String[][] createGrid() {\n    String[][] tempGrid = new String[7][15];\n\n    for (int row = 0; row < tempGrid.length; row++) {\n      for (int col = 0; col < tempGrid[0].length; col++) {\n        if (col % 2 == 0) {\n          tempGrid[row][col] = \"|\";\n        }\n        else {\n          tempGrid[row][col] = \" \";\n        }\n\n        if (row == 6) {\n          tempGrid[row][col] = \"-\";\n        }\n      }\n    }\n\n    return tempGrid;\n  }\n\n  public void showGrid() {\n    for (int row = 0; row < grid.length; row++) {\n      for (int col = 0; col < grid[0].length; col++) {\n        System.out.print(grid[row][col]);\n      }\n\n      System.out.println();\n    }\n  }\n\n  public void addDisk(int playerSelection, String playerLetter) {\n    for (int position = 5; position >= 0; position--) {\n      if (grid[position][playerSelection] == \" \") {\n        grid[position][playerSelection] = playerLetter;\n        break;\n      }\n    }\n  }\n\n  public String checkWinner() {\n    String horizontalResult = checkHorizontalRow();\n    String verticalResult = checkVerticalRow();\n    String diagonalResult = checkDiagonalRow();\n    String reverseResult = checkReverseVertical();\n\n    String result;\n\n    if (horizontalResult != null) {\n      result = horizontalResult;\n    }\n    else if (verticalResult != null) {\n      result = verticalResult;\n    }\n    else if (diagonalResult != null) {\n      result = diagonalResult;\n    }\n    else if (reverseResult != null) {\n      result = reverseResult;\n    }\n    else {\n      result = null;\n    }\n\n    return result;\n  }\n\n  private String checkHorizontalRow() {\n    String winner = null;\n\n    for (int row = 0; row < 6; row ++) {\n      for (int col = 0; col < 7; col += 2) {\n        if ((grid[row][col+1] != \" \") && (grid[row][col+3] != \" \") && (grid[row][col+5] != \" \") && (grid[row][col+7] != \" \")\n            && ((grid[row][col+1].equals(grid[row][col+3])) && (grid[row][col+3].equals(grid[row][col+5])) && (grid[row][col+5].equals(grid[row][col+7])))) {\n\n          winner = grid[row][col+1];\n\n        }\n      }\n    }\n\n    return winner;\n  }\n\n  private String checkVerticalRow() {\n    String winner = null;\n\n    for (int row = 1; row < 15; row += 2) {\n      for (int col = 0; col < 3; col++) {\n        if ((grid[col][row] != \" \") && (grid[col+1][row] != \" \") && (grid[col+2][row] != \" \") && (grid[col+3][row] != \" \")\n            && ((grid[col][row].equals(grid[col+1][row])) && (grid[col+1][row].equals(grid[col+2][row])) && (grid[col+2][row].equals(grid[col+3][row])))) {\n\n          winner = grid[col][row];\n\n        }\n      }\n    }\n\n    return winner;\n  }\n\n  private String checkDiagonalRow() {\n    String winner = null;\n\n    for (int row = 0; row < 3; row++) {\n      for (int col = 1; col < 9; col += 2) {\n        if ((grid[row][col] != \" \") && (grid[row+1][col+2] != \" \") && (grid[row+2][col+4] != \" \") && (grid[row+3][col+6] != \" \")\n            && ((grid[row][col].equals(grid[row+1][col+2])) && (grid[row+1][col+2].equals(grid[row+2][col+4])) && (grid[row+2][col+4].equals(grid[row+3][col+6])))) {\n\n          winner = grid[row][col];\n        }\n      }\n    }\n\n    return winner;\n  }\n\n  private String checkReverseVertical() {\n    String winner = null;\n\n    for (int row = 0; row < 3; row++) {\n      for (int col = 7; col < 15; col += 2) {\n        if ((grid[row][col] != \" \") && (grid[row+1][col-2] != \" \") && (grid[row+2][col-4] != \" \") && (grid[row+3][col-6] != \" \")\n            && ((grid[row][col].equals(grid[row+1][col-2])) && (grid[row+1][col-2].equals(grid[row+2][col-4])) && (grid[row+2][col-4].equals(grid[row+3][col-6])))) {\n\n              winner = grid[row][col];\n        }\n      }\n    }\n\n    return winner;\n  }\n    \n}",
        "isVisible": true
      },
      "Player.java": {
        "text": "import java.util.Scanner;\n\npublic class Player {\n    \n  private String color;\n\n  public Player(String color) {\n    this.color = color;\n  }\n\n  public String getColor() {\n    return color;\n  }\n\n  public String getLetter() {\n    return color.substring(0, 1).toUpperCase();\n  }\n\n  public int getPosition() {\n    Scanner input = new Scanner(System.in);\n\n    System.out.print(\"Drop a \" + color + \" disk at column 0-6: \");\n    int position = input.nextInt();\n    position = 2 * position + 1;\n\n    return position;\n  }\n\n  public boolean playAgain() {\n    boolean result = false;\n    Scanner input = new Scanner(System.in);\n\n    System.out.print(\"Do you want to play again? \");\n    String answer = input.nextLine();\n\n    if (answer.equals(\"yes\") || answer.equals(\"y\")) {\n      result = true;\n    }\n\n    return result;\n  }\n}",
        "isVisible": true
      }
    },
    "encrypted_examples": [

    ],
    "display_name": "Connect Four",
    "bubble_choice_description": "An example project that recreates the Connect Four game.",
    "thumbnail_url": "https://images.code.org/6d44a2ee8986b359d453dabbbf6c5962-Connect_Four,_John_Slegers.png"
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-04-18T19:35:39.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-04-18T19:35:39.250+00:00\",\"changed\":[\"cloned from \\\"CSA U8L1-L1c_2022\\\"\"],\"cloned_from\":\"CSA U8L1-L1c_2022\"},{\"changed_at\":\"2022-04-18 19:35:41 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-14 00:11:32 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-08-26 17:04:12 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-08-26 17:04:50 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-08-26 17:04:51 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-08-26 17:06:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
