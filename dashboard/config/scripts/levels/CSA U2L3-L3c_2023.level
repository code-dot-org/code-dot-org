<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A theatre director is casting for the characters in their play.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Character`(#e7e8ea) class to assign specific values to the `name`(#e7e8ea) and `isLeadRole`(#e7e8ea) instance variables.\r\n\r\n✅ **TO DO #2:** In `CharacterRunner.java`(#e7e8ea), instantiate a `Character`(#e7e8ea) object using the parameterized constructor. \r\n\r\n✅ **TO DO #3:** Print the constructors and the values assigned to the instance variables for the `Character`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printCharacterInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nCharacter hamlet = new Character();\r\nhamlet.printCharacterInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing a parameterized constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "CharacterRunner.java": {
        "text": "public class CharacterRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Character object using the parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Character.java": {
        "text": "/*\n * Represents a character in a play\n */\npublic class Character {\n\n  private String name;          // The name of a character\n  private boolean isLeadRole;   // Whether or not a character is a lead role\n\n  /*\n   * Sets the name to \"unknown\" and isLeadRole to false\n   */\n  public Character() {\n    name = \"unknown\";\n    isLeadRole = false;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specific values to\n   * the name and isLeadRole instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  /*\n   * Prints the name of the character and whether\n   * or not the character is a lead role\n   */\n  public void printCharacterInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Lead Role? \" + isLeadRole);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "display_name": "Characters",
    "bubble_choice_description": "A theatre director is casting for the characters in their play.",
    "encrypted_exemplar_sources": "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\nWP6UFxjWp+3NiLfKxv7psJqWyQ==\n",
    "thumbnail_url": "https://images.code.org/4b71865dbb6054f7fdf93794dcbdb12d-theater.png",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-09T21:24:45.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:24:45.642+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L3b_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L3b_2023\"},{\"changed_at\":\"2022-11-09 21:24:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:00:00 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:02:23 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:23:05 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:23:07 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:26:22 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:35:29 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:45:57 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:48:34 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:55:16 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
