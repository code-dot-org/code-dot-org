<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-02-26T00:32:35.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Explore and test this program using the questions on the Testing Software activity guide.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "The Theater",
    "bubble_choice_description": "Explore and test this project using The Theater.",
    "thumbnail_url": "https://images.code.org/bdb9e4dda2b163fd00887f464d16a7d1-image-1639155674019.png",
    "starter_assets": {
      "apple.png": "b7a36eda-736d-4065-a49a-98f7bba3f6cd.png",
      "banana.png": "cf0137ec-63e5-4c41-9936-f7204f0cb79b.png",
      "bread.png": "03c33d14-2b3c-4cf2-9355-3e7352d698e4.png",
      "broccoli.png": "c45e5726-505a-4f49-8a8a-b3486d23cade.png",
      "can.png": "75b057c4-aed8-4d2b-ba00-7ea3f72cd463.png",
      "carrot.png": "1a31c9f4-4ac4-4cc3-96c9-4e4ab5d7f204.png",
      "cheese.png": "4d6a850a-3290-4eab-a39e-6b6d0d39cd34.png",
      "chicken.png": "41ec7dab-d622-4918-a13f-bf5a9d5ad090.png",
      "corn.png": "f8953024-c25b-4b0d-88bf-fb5de01ed301.png",
      "egg.png": "c379066a-7357-4f68-a1b7-82f292879872.png",
      "food.jpg": "fa5dd04c-7c47-42d5-8c88-abc2576f11a7.jpg",
      "goal2.png": "4a0b6ded-093f-4518-b577-b847af30c4b7.png",
      "goal2fact.jpg": "d87e39cb-2828-407d-983e-b8fcfbc94cbc.jpg",
      "grapes.png": "1c9a3a57-c074-42c4-baed-42af41516821.png",
      "meat.png": "dced1b09-0632-4b5b-8e13-6e3f7dbbdff9.png",
      "milk.png": "b307173c-eda1-454d-aa84-1ad6cb1bebb0.png",
      "orange.png": "f4eb2cd3-65a4-4db3-9f2e-bdd12f3aa0cf.png",
      "potato.png": "ca77b9be-171d-4824-8470-ba02fb108ac4.png",
      "salad.png": "cd3f0df8-67c2-4a0d-ba90-705577844f04.png",
      "sandwich.png": "88280bbd-7252-4e55-af28-50c48a9d6f2c.png",
      "starvation_quote.jpeg": "0b65a03c-e869-45aa-b8d8-21034032ba6b.jpeg",
      "strawberry.png": "fa384a54-b828-44b8-8810-e1bb294e0aeb.png",
      "watermelon.png": "b9f8d999-bf79-449b-8708-f6e8122c3b2f.png"
    },
    "start_sources": {
      "MyConcert.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class MyConcert {\n  public static void main(String[] args) throws FileNotFoundException {\n\n    String[] imageFiles = {\"goal2.png\", \"goal2fact.jpg\", \"starvation_quote.jpeg\", \"food.jpg\"};\n    String[][] foodFiles = {{\"apple.png\", \"bread.png\", \"carrot.png\", \"grapes.png\"},\n                            {\"banana.png\", \"can.png\", \"chicken.png\", \"milk.png\"},\n                            {\"broccoli.png\", \"cheese.png\", \"meat.png\", \"orange.png\"},\n                            {\"corn.png\", \"egg.png\", \"potato.png\", \"salad.png\"}};\n\n    SustainableNeighborhood concert = new SustainableNeighborhood(imageFiles, foodFiles);\n    concert.playConcert();\n    \n  }\n}",
        "isVisible": true
      },
      "SustainableNeighborhood.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class SustainableNeighborhood {\n\n  private Stage myStage = Theater.stage;\n  private GrayscaleImage intro;\n  private ColorEditor fact;\n  private GrayscaleImage quote;\n  private SepiaImage food;\n  private String[][] transitionFoods;\n\n  public SustainableNeighborhood(String[] imageFiles, String[][] foodImages) {\n    intro = TheaterControl.createGrayscaleImage(imageFiles[0]);\n    fact = TheaterControl.createColorEditor(imageFiles[1]);\n    quote = TheaterControl.createGrayscaleImage(imageFiles[2]);\n    food = TheaterControl.createSepiaImage(imageFiles[3]);\n\n    transitionFoods = foodImages;\n  }\n\n  public void playConcert() throws FileNotFoundException {\n    intro.grayscale();\n    fact.removeGreen();\n    quote.brightGrayscale();\n    food.sepia();\n\n    Image[] imageFilters = {intro, fact, quote, food};\n\n    for (int index = 0; index < imageFilters.length; index++) {\n      myStage.drawImage(imageFilters[index], 0, 0, myStage.getWidth(), myStage.getHeight(), 0);\n      myStage.pause(1.5);\n      transition();\n    }\n\n    myStage.play();\n  }\n\n  public void transition() throws FileNotFoundException {\n    int yPos = 20;\n    \n    for (int row = 0; row < transitionFoods.length; row++) {\n      int xPos = 20;\n      for (int col = 0; col < transitionFoods[0].length; col++) {\n        int randomRotation = (int)(Math.random() * 180);\n        \n        myStage.drawImage(transitionFoods[row][col], xPos, yPos, 120, 120, randomRotation);\n        xPos += 130;\n        myStage.pause(0.5);\n      }\n\n      yPos += 130;\n    }\n  }\n}",
        "isVisible": true
      },
      "TheaterControl.java": {
        "text": "import org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic final class TheaterControl {\n  private static Image tempImage;\n  private static ColorEditor tempColor;\n  private static GrayscaleImage tempGrayscale;\n  private static SepiaImage tempSepia;\n\n  public static Image createImage(String filename) {\n    try {\n      tempImage = new Image(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return tempImage;\n  }\n\n  public static ColorEditor createColorEditor(String filename) {\n    try {\n      tempColor = new ColorEditor(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return tempColor;\n  }\n\n  public static GrayscaleImage createGrayscaleImage(String filename) {\n    try {\n      tempGrayscale = new GrayscaleImage(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return tempGrayscale;\n  }\n\n  public static SepiaImage createSepiaImage(String filename) {\n    try {\n      tempSepia = new SepiaImage(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return tempSepia;\n  }\n}",
        "isVisible": true
      },
      "ImageEditor.java": {
        "text": "import org.code.media.*;\n\npublic final class ImageEditor {\n\n\tpublic static Pixel[][] getPixels(Image theImage) {\n    int width = theImage.getWidth();\n    int height = theImage.getHeight();\n    Pixel[][] pixelArray = new Pixel[height][width];\n\n    for (int row = 0; row < height; row++) {\n      for (int col = 0; col < width; col++) {\n        pixelArray[row][col] = theImage.getPixel(col, row);\n      }\n    }\n\n    return pixelArray;\n  }\n  \n}",
        "isVisible": true
      },
      "GrayscaleImage.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class GrayscaleImage extends Image {\n\n  private Pixel[][] imagePixels;\n\n  public GrayscaleImage(String filename) throws FileNotFoundException {\n    super(filename);\n    imagePixels = ImageEditor.getPixels(this);\n  }\n\n  public void grayscale() {\n    for (int row = 0; row < imagePixels.length; row++) {\n      for (int col = 0; col < imagePixels[0].length; col++) {\n        Pixel currentPixel = imagePixels[row][col];\n\n        int average = (int)((currentPixel.getRed() + currentPixel.getGreen() + currentPixel.getBlue()) / 3);\n\n        currentPixel.setRed(average);\n        currentPixel.setGreen(average);\n        currentPixel.setBlue(average);\n      }\n    }\n  }\n\n  public void brightGrayscale() {\n    grayscale();\n\n    for (int row = 0; row < imagePixels.length; row++) {\n      for (int col = 0; col < imagePixels[0].length; col++) {\n        Pixel currentPixel = imagePixels[row][col];\n        currentPixel.setRed((int)(currentPixel.getRed() * 1.5));\n        currentPixel.setGreen((int)(currentPixel.getGreen() * 1.5));\n        currentPixel.setBlue((int)(currentPixel.getBlue() * 1.5));\n      }\n    }\n  }\n}",
        "isVisible": true
      },
      "ColorEditor.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class ColorEditor extends Image {\n  private Pixel[][] imagePixels;\n\n  public ColorEditor(String filename) throws FileNotFoundException {\n    super(filename);\n    imagePixels = ImageEditor.getPixels(this);\n  }\n\n  // Unit 5 Lesson 4 – Level 1a\n  public void removeRed() {\n    for (Pixel[] pixelRow : imagePixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setRed(0);\n      }\n    }\n  }\n\n  // Unit 5 Lesson 4 – Level 1b\n  public void removeGreen() {\n    for (Pixel[] pixelRow : imagePixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setGreen(0);\n      }\n    }\n  }\n\n  // Unit 5 Lesson 4 – Level 1c\n  public void removeBlue() {\n    for (Pixel[] pixelRow : imagePixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setGreen(0);\n      }\n    }\n  }\n\n  // Unit 5 Lesson 4 – Level 4a\n  public void keepRed() {\n    for (Pixel[] pixelRow : imagePixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setGreen(0);\n        pixel.setBlue(0);\n      }\n    }\n  }\n\n  // Unit 5 Lesson 4 – Level 4b\n  public void keepGreen() {\n    for (Pixel[] pixelRow : imagePixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setRed(0);\n        pixel.setBlue(0);\n      }\n    }\n  }\n\n  // Unit 5 Lesson 4 – Level 4c\n  public void keepBlue() {\n    for (Pixel[] pixelRow : imagePixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setRed(0);\n        pixel.setGreen(0);\n      }\n    }\n  }\n}",
        "isVisible": true
      },
      "SepiaImage.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class SepiaImage extends Image {\n\n  private Pixel[][] imagePixels;\n\n  public SepiaImage(String filename) throws FileNotFoundException {\n    super(filename);\n    imagePixels = ImageEditor.getPixels(this);\n  }\n\n  public void sepia() {\n    for (int row = 0; row < imagePixels.length; row++) {\n      for (int col = 0; col < imagePixels[0].length; col++) {\n        Pixel currentPixel = imagePixels[row][col];\n        int redValue = currentPixel.getRed();\n        int greenValue = currentPixel.getGreen();\n        int blueValue = currentPixel.getBlue();\n\n        if (redValue < 60) {\n          redValue = (int) (redValue * 0.8);\n          greenValue = (int) (greenValue * 0.9);\n          blueValue = (int) (blueValue * 0.9);\n        }\n        else if (redValue < 190) {\n          blueValue = (int) (blueValue * 0.8);\n        }\n        else {\n          blueValue = (int) (blueValue * 0.9);\n        }\n\n        currentPixel.setRed(redValue);\n        currentPixel.setGreen(greenValue);\n        currentPixel.setBlue(blueValue);\n      }\n    }\n  }\n}",
        "isVisible": true
      }
    },
    "name_suffix": "_2022"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-02-26T00:32:35.805+00:00\",\"changed\":[\"cloned from \\\"CSA U7L10-L1b\\\"\"],\"cloned_from\":\"CSA U7L10-L1b\"}]"
}]]></config>
</Javalab>
