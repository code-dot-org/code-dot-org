<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "submittable": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"airlinenames.txt\");\n    String[] airlines = myFileReader.readText(134);\n\n    myFileReader.changeFile(\"yearsfounded.txt\");\n    int[] years = myFileReader.readNumbers(134);\n\n    AirlineStats myAirlines = new AirlineStats(airlines, years);\n\n    // TO DO #2: Print the result of a call to hasDuplicates().\n\n\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n  private Scanner input;  // The Scanner object for reading the data\n\n  /*\n   * Constructor to create a FileReader object with\n   * a specified filename\n   */\n  public FileReader(String newFileName) {\n    File newFile = new File(newFileName);\n    input = null;\n\n    createScanner(newFile);\n  }\n\n  /*\n   * Creates the input object with the specified file\n   * or notifies the user that the file is not found\n   */\n  public void createScanner(File newFile) {\n    try {\n      input = new Scanner(newFile);\n    } catch (FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n  }\n\n  /*\n   * Creates a new File object from the specified filename\n   * and updates the input object with the new file\n   */\n  public void changeFile(String filename) {\n    File newFile = new File(filename);\n    createScanner(newFile);\n  }\n\n  /*\n   * Reads numValues integers from a file into\n   * an int 1D array and returns the array\n   */\n  public int[] readNumbers(int numValues) {\n    int[] values = new int[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (input.hasNextInt()) {\n        values[index] = input.nextInt();\n      }\n    }\n\n    input.close();\n    return values;\n  }\n\n  /*\n   * Reads numValues Strings from a file into\n   * an String 1D array and returns the array\n   */\n  public String[] readText(int numValues) {\n    String[] text = new String[numValues];\n\n    for (int index = 0; index < text.length; index++) {\n      if (input.hasNextLine()) {\n        text[index] = input.nextLine();\n      }\n    }\n\n    input.close();\n    return text;\n  }\n\n}",
        "isVisible": true
      },
      "AirlineStats.java": {
        "text": "/*\n * Analyzes data about airlines\n */\npublic class AirlineStats {\n\n  private String[] airlineNames;\n  private int[] yearsFounded;\n\n  /*\n   * Constructor to create an AirlineStats object with specified\n   * arrays of airline names and the years they were founded\n   */\n  public AirlineStats(String[] airlineNames, int[] yearsFounded) {\n    this.airlineNames = airlineNames;\n    this.yearsFounded = yearsFounded;\n  }\n\n  /*\n   * Returns true if there are duplicate years in\n   * the yearsFounded array, otherwise returns false\n   */\n  public boolean hasDuplicates() {\n    // TO DO #1: Traverse the yearsFounded array to determine if there\n    // are duplicate values and return the result.\n\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "airlinenames.txt": {
        "text": "Bemidji Airlines\nAir Cargo Carriers\nSkyway Enterprises\nNational Airlines\nAtlas Air\nIFL Group\nABX Air\nKalitta Air\nAmeriflight\nFedEx Express\nAirNet Express\nAloha Air Cargo\nRyan Air Services\nAir Transport International\nSky Lease Cargo\nSouthern Air\nAlaska Central Express\nAlpine Air Express\nAmeristar Jet Charter\nAmerijet International\nEmpire Airlines\nCorporate Air\n21 Air\nCastle Aviation\nFreight Runners Express\nCSA Air\nUSA Jet Airlines\nLynden Air Cargo\nMid-Atlantic Freight\nMerlin Airways\nAsia Pacific Airlines\nMartinaire\nMountain Air Cargo\nTransair\nNorthern Air Cargo\nPolar Air Cargo\nWest Air\nRoyal Air Freight\nUPS Airlines\nEverts Air Cargo\nWestern Global Airlines\nWiggins Airways\nAir Flight Charters\nSierra Pacific Airlines\nSkymax\nOrange Air\nWorld Atlantic Airlines\nXtra Airways\nPentastar Aviation\nAirshare\nNetJets\nIAero Airways\nTalkeetna Air Taxi\nBighorn Airways\nBerry Aviation\nPlaneSense\nIBC Airways\nChoice Airways\nDelta Private Jets\nEastern Airlines, LLC\nSuperior Aviation\nLiberty Jet Management\nOmni Air International\nPhoenix Air\nPacific Coast Jet\nJetSuite\nSongbird Airways\nCharter Air Transport\nTwin Cities Air Service\nExcelAire\nXOJET\nRediske Air\nStampede Aviation\nTropic Ocean Airways\nGrant Aviation\nIsland Airways\nKenmore Air\nMokulele Airlines\nAir Choice One\nScenic Airlines\nEverts Air\nAdvanced Air\nKey Lime Air\nFrontier Flying Service\nHageland Aviation Services\nBering Air\nBoutique Air\nEastern Airlines, LLC\nSouthern Airways Express\nTradewind Aviation\nJSX\nNew England Airlines\nServant Air\nReliant Air\nAir Sunshine\nGrand Canyon Scenic Airlines\nTaquan Air\nSurf Air\nUltimate Air Shuttle\nWarbelow's Air Ventures\nWright Air Service\nGem Air\nGriffing Flying Service\nMakani Kai Air\nPenobscot Island Air\nSan Juan Airlines\nUtah Airways\nSun Country Airlines\nSouthwest Airlines\nAmerican Airlines\nSpirit Airlines\nDelta Air Lines\nHawaiian Airlines\nAlaska Airlines\nJetBlue Airways\nUnited Airlines\nAllegiant Air\nFrontier Airlines\nExpressJet\nRepublic Airways\nGoJet Airlines\nElite Airways\nEnvoy Air\nEndeavor Air\nPiedmont Airlines\nMesa Airlines\nPSA Airlines\nHorizon Air\nSkyWest Airlines\nAir Wisconsin\nCommutAir\nCape Air\nSilver Airways\nContour Airlines",
        "isVisible": true
      },
      "yearsfounded.txt": {
        "text": "1946\n1986\n1981\n1985\n1992\n1983\n1980\n1967\n1968\n1971\n1974\n1946\n1953\n1978\n1969\n1999\n1996\n1971\n2000\n1974\n1977\n1981\n2014\n1986\n1985\n1998\n1994\n1995\n1990\n1983\n1998\n1978\n1974\n1982\n1956\n1993\n1988\n1961\n1988\n1995\n2013\n1929\n1987\n1970\n1997\n2011\n2002\n1987\n1964\n2000\n1964\n1997\n1947\n1947\n1983\n1992\n1991\n2009\n1984\n2010\n1979\n2006\n1993\n1978\n2006\n2006\n1990\n1997\n1992\n1993\n2006\n1991\n2011\n2009\n1971\n1945\n1946\n1994\n1979\n1927\n1978\n2005\n1997\n1950\n1981\n1979\n2007\n2010\n2013\n2001\n2016\n1970\n2003\n1988\n1982\n1967\n1977\n2012\n2009\n1958\n1966\n2014\n1937\n1998\n2004\n2002\n2015\n1982\n1967\n1926\n1980\n1924\n1929\n1932\n1998\n1926\n1997\n1994\n1986\n1998\n2004\n2006\n1984\n1985\n1961\n1980\n1979\n1981\n1972\n1965\n1989\n1988\n2011\n1982",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-03-25T13:16:36.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-03-25 13:16:37 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 19:40:17 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 19:40:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 20:06:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 20:09:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-31 21:09:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
