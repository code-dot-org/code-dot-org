<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "## Finding Patterns\r\n\r\nComplete the <a href=\"https://docs.google.com/document/d/1OJIjB4GPp5eqri8qIIceuUGUYl8bzEYXbH3qXIpcg9I/edit?usp=sharing\" target=\"_blank\"><strong>Finding Patterns</strong></a> activity guide to identify the patterns and relationships you notice in this dataset.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "DataRunner.java": {
        "text": "public class DataRunner {\n  public static void main(String[] args) {\n\n    String[] textFiles = {\"birdname.txt\", \"scientificname.txt\", \"conservationstatus.txt\", \"primarycolor.txt\", \"diet.txt\"};\n\n    DataManager data = new DataManager(textFiles);\n    \n    System.out.print(data.showDataset());\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 1
      },
      "birdname.txt": {
        "text": "NAME\n------\nAmerican Goldfinch\nAmerican Purple Gallinule\nAmerican Redstart\nAmsterdam Albatross\nArctic Tern\nBald Eagle\nBelted Kingfisher\nBlack-Crowned Night Heron\nBlue Footed Booby\nBlue Jay\nBlue Manakin\nBokikokiko\nBrown Creeper\nBuff-Spotted Flufftail\nBumblebee Hummingbird\nCarolina Wren\nCave Swallow\nCommon Buttonquail\nCommon Ostrich\nCommon Pheasant\nCommon Raven\nCommon Sandpiper\nCrested Caracara\nDark-Eyed Junco\nDouble-Crested Cormorant\nEastern Screech Owl\nEastern Whip-Poor-Will\nElegant Sunbird\nElegant Trogon\nEmperor Goose\nFlame Bowerbird\nFork-Tailed Flycatcher\nGambel's Quail\nGolden White-Eye\nGouldian Finch\nGreat Blue Heron\nGreat Curassow\nGreat Frigatebird\nGreat Hornbill\nGreat Potoo\nGreat White Pelican\nGreater Flamingo\nHarpy Eagle\nHawaiian Stilt\nHoatzin\nKakapo\nKing Vulture\nLaughing Falcon\nLaughing Kookaburra\nLear's Macaw\nLittle Spotted Kiwi\nMacaroni Penguin\nMallard\nMourning Dove\nNarcissus Flycatcher\nNene\nNorthern Cardinal\nOvenbird\nPeregrine Falcon\nPied Avocet\nPileated Woodpecker\nPink Robin\nPinyon Jay\nRazorbill\nRed-Billed Oxpecker\nRed-Breasted Nuthatch\nRed-Tailed Tropicbird\nRed-Whiskered Bulbul\nRegent Honeyeater\nRing-Billed Gull\nRock Dove\nRoseate Spoonbill\nRose-Breasted Gosbeak\nRuby-Crowned Kinglet\nRuby-Throated Hummingbird\nRudd's Lark\nScarlet Tanager\nSecretarybird\nSharp-Shinned Hawk\nShoebill\nSierra Madre Sparrow\nSmooth-Billed Ani\nSnail Kite\nSnowy Owl\nSpoon-Billed Sandpiper\nSuperb Bird-of-Paradise\nTawny Frogmouth\nToco Toucan\nTricolored Blackbird\nTufted Puffin\nVictoria Crowned Pigeon\nViolet-Backed Starling\nVulturine Guineafowl\nWhite Wagtail\nWhooping Crane\nWilson's Bird-Of-Paradise\nWood Duck\nYellow Bellied Sapsucker",
        "isVisible": true,
        "tabOrder": 4
      },
      "scientificname.txt": {
        "text": "SCIENTIFIC NAME\n------\nSpinus tristis\nPorphyrio martinicus\nSetophaga ruticilla\nDiomedea amsterdamensis\nSterna paradisaea\nHaliaeetus leucocephalus\nMegaceryle alcyon\nNycticorax nycticorax\nSula nebouxii\nCyanocitta cristata\nChiroxiphia caudata\nAcrocephalus aequinoctialis\nCerthia americana\nSarothrura elegans\nAtthis heloisa\nThryothorus ludovicianus\nPetrochelidon fulva\nTurnix sylvaticus\nStruthio camelus\nPhasianus colchicus\nCorvus corax\nActitis hypoleucos\nCaracara cheriway\nJunco hyemalis\nPhalacrocorax auritus\nMegascops asio\nAntrostomus vociferus\nAethopyga duyvenbodei\nTrogon elegans\nChen canagica\nSericulus ardens\nTyrannus savana\nCallipepla gambelii\nCleptornis marchei\nErythrura gouldiae\nArdea herodias\nCrax rubra\nFregata minor\nBuceros bicornis\nNyctibius grandis\nPelecanus onocrotalus\nPhoenicopterun roseus\nHarpia harpyja\nHimantopus mexicanus knudseni\nOphisthocomus hoazin\nStrigops habroptilus\nSarcoramphus papa\nHerpetotheres cachinnans\nDacelo novaeguineae\nAnodorhynchus leari\nApteryx owenii\nEudyptes chrysolophus\nAnas platyrhynchos\nZenaida macroura\nFicedula narcissina\nBranta sandvicensis\nCardinalis cardinalis\nSeiurus aurocapilla\nFalco peregrinus\nRecurvirostra avosetta\nDryocopus pileatus\nPetroica rodinogaster\nGymnorhinus cyanocephalus\nAlca torda\nBuphagus erythrorhynchus\nSitta canadensis\nPhaethon rubricauda\nPycnonotus jocosus\nAnthochaera phrygia\nLarus delawarensis\nColumba livia\nPlatalea ajaja\nPheucticus ludovicianus\nRegulus calendula\nArchilochus columbris\nHeteromirafra ruddi\nPiranga olivacea\nSagittarius serpentarius\nAccipiter striatus\nBalaeniceps rex\nXenospiza baileyi\nCrotophaga ani\nRostrhamus sociabilis\nBubo scandiacus\nCalidris pygmaea\nLophorina superba\nPodargus strigoides\nRamphastos toco\nAgelaius tricolor\nFratercula cirrhata\nGoura victoria\nCinnyricinclus leucogaster\nAcryllium vulturinum\nMotacilla alba\nGrus americana\nCicinnurus respublica\nAix sponsa\nSphyrapicus varius",
        "isVisible": true,
        "tabOrder": 5
      },
      "conservationstatus.txt": {
        "text": "CONSERVATION STATUS\n------\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nLeast Concern\nNear Threatened\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nNear Threatened\nLeast Concern\nVulnerable\nLeast Concern\nNear Threatened\nLeast Concern\nLeast Concern\nLeast Concern\nNear Threatened\nEndangered\nLeast Concern\nCritically Endangered\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nNear Threatened\nVulnerable\nLeast Concern\nLeast Concern\nLeast Concern\nVulnerable\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nVulnerable\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nCritically Endangered\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nVulnerable\nLeast Concern\nVulnerable\nLeast Concern\nVulnerable\nEndangered\nLeast Concern\nLeast Concern\nVulnerable\nCritically Endangered\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nLeast Concern\nNear Threatened\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nNear Threatened\nLeast Concern\nLeast Concern",
        "isVisible": true,
        "tabOrder": 6
      },
      "primarycolor.txt": {
        "text": "PRIMARY COLOR\n------\nYellow\nBlue\nBlack\nBlack\nWhite\nBrown\nGrey\nGrey\nWhite\nBlue\nBlue\nGrey\nBrown\nBlack\nGreen\nBrown\nBrown\nBrown\nBlack\nBrown\nBlack\nWhite\nBrown\nBlack\nBlack\nBrown\nBrown\nYellow\nRed\nGrey\nYellow\nWhite\nBlue\nYellow\nGreen\nGrey\nBlack\nBlack\nBlack\nBrown\nWhite\nPink\nGrey\nBlack\nBrown\nGreen\nWhite\nBrown\nBrown\nBlue\nBrown\nWhite\nBrown\nBrown\nYellow\nBrown\nRed\nBrown\nGrey\nWhite\nBlack\nPink\nBlue\nWhite\nBrown\nGrey\nWhite\nBrown\nBlack\nWhite\nGrey\nPink\nWhite\nBrown\nGreen\nBrown\nRed\nWhite\nBrown\nGrey\nBrown\nBlack\nGrey\nWhite\nBrown\nBlack\nBrown\nBlack\nBlack\nBlack\nBlue\nPink\nBlue\nWhite\nWhite\nRed\nBrown\nBlack",
        "isVisible": true,
        "tabOrder": 7
      },
      "diet.txt": {
        "text": "DIET\n------\nseeds, insects\nfrogs, seeds, leaves, fish\nflying insects\nsquid, fish, crustaceans\nfish, crustaceans\nfish, small mammals, birds\nfish, insects, crustaceans, amphibians\nfish, crustaceans, frogs, insects\nfish, squid\nnuts, grain, corn, berries, insects\nfruit, berries, insects\nflies, dragonflies, small lizards\ninsects, suet, seeds\nants, small insects\nnectar, spiders\ninsects, fruits, seeds\nflying insects\nseeds, insects, larvae\nseeds, shrubs, grass, fruit, flowers, insects\nfruit, seeds, grain, leaves\ncarrion, grain, berries, insects, small animals, garbage\nlarvae, snails, crustaceans, crabs, clams\ncarcasses\nseeds, insects\nfish\ninsects, crayfish, small mammals\nflying insects\ninsects, nectar\ninsects, fruit\nshoots, roots, berries\nfruit, insects\nflying insects\ninsects, plants\ninsects, fruit, nectar\nseeds\nfish, crabs, insects, frogs\nfruits, anthropods\nfish, crabs, jellyfish\nfruit\nflying insects\nfish\nplankton, tiny fish, crustaceans\nmonkeys, birds, sloths,\nfish, crabs, worms, insects\nleaves, fruit, flowers\nplants, seeds, fruits, pollen\ncarcasses, dead fish, dead lizards\nsnakes, lizards, rodents\nmice, insects, fish\nlicuri palm nuts\ngrubs, insects, berries\ncrustaceans, squid, fish\ninsects, worms, crustaceans, seeds, plants\nseeds, snails, insects\nInsects\nleaves, seeds, flowers, grasses\nseeds, grain, fruit, insects\ninsects\npigeons, doves, waterfowl, songbirds\ncrustaceans, insects\ninsects, fruit, nuts, berries\nspiders, caterpillars, beetles\npinyon seeds, pine seeds\nfish, crustaceans\nblood, ticks, mites\ninsects, conifer seeds, suet\nsquid, flying fish\nfruit, insects\neucalyptus nectar, insect honeydew\ninsects, fish, grains, food scraps\nfruits, grains, insects, seeds, food scraps\ncrustaceans, aquatic insects, frogs, newts and small fish\ninsects, seeds, berries\ninsects, fruit, seeds\nflower nectar, insects\ninsects\ninsects, berries, seeds, snails\ninsects, small mammals, lizards, snakes\nbirds, rodents\nfish, frogs, snakes\ninsects, seeds\ninsects, lizards, termites\nsnails, crayfish\nsmall mammals, birds\nmosquitoes, moss, spiders, shrimp\nfruit, insects, frogs, seeds\nlarge insects\nfruit, insects, frogs, eggs\nbeetles, snails, insects, seeds\nfish, squid, krill\nseeds, invertebrates\nfruit, seeds, insects\nseeds, small invertebrates\naquatic insects, snails, small fish, crustaceans\ncrustaceans, mollusks, fish, eels\nfruit, insects\nberries, seeds, insects\ntree sap, fruit, insects",
        "isVisible": true,
        "tabOrder": 8
      },
      "DataManager.java": {
        "text": "/*\n * Reads and displays data from text files\n */\npublic class DataManager {\n\n  private String[] textFiles;    // The 1D array of text files\n  private Data[] dataset;        // The 1D array of Data objects\n\n  /*\n   * Sets textFiles to the specified text files and initializes\n   * dataset to store Data objects for each text file\n   */\n  public DataManager(String[] textFiles) {\n    this.textFiles = textFiles;\n    dataset = new Data[textFiles.length];\n  }\n\n  /*\n   * Creates the datasets and returns the dataset values\n   */\n  public String showDataset() {\n    createData();\n    return getDatasetValues();\n  }\n\n  /*\n   * Instantiates each Data object in the 1D array dataset\n   * using each text file from the 1D array textfiles\n   */\n  public void createData() {\n    for (int index = 0; index < dataset.length; index++) {\n      dataset[index] = new Data(textFiles[index]);\n    }\n  }\n\n  /*\n   * Returns a String containing the values from each Data object\n   */\n  public String getDatasetValues() {\n    String result = \"\";\n\n    // Gets the length of the first Data object's 1D array of values\n    int valuesLength = dataset[0].getNumValues();\n\n    // Outer loop repeats from the first value to the last value of the first Data object's 1D array of values\n    for (int index = 0; index < valuesLength; index++) {\n\n      // Inner loop goes through each Data object to get the corresponding value from each 1D array of values\n      for (Data values : dataset) {\n        \n        // String.format() formats a String using format specifiers. In \"%-30s\", the \"%\" indicates the start of the format specifier,\n        // the \"-\" means the String is left-justified, \"30\" indicates the width of the field, and \"s\" indicates a String\n        result += String.format(\"%-30s\", values.getValue(index));\n      }\n\n      // Adds a new line character after getting a row of data\n      result += \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Data.java": {
        "text": "/*\n * Manages data from a text file\n */\npublic class Data {\n\n  private String filename;    // The name of a text file\n  private String[] values;    // The 1D array containing the values from a text file\n\n  /*\n   * Sets filename to the specified filename and initializes\n   * values to store the values from the file\n   */\n  public Data(String filename) {\n    this.filename = filename;\n    values = FileReader.toStringArray(filename);\n  }\n\n  /*\n   * Returns the 1D array of values\n   */\n  public String[] getValues() {\n    return values;\n  }\n\n  /*\n   * Returns a value at a specified index from values\n   */\n  public String getValue(int index) {\n    return values[index];\n  }\n\n  /*\n   * Returns the number of elements in values\n   */ \n  public int getNumValues() {\n    return values.length;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      }
    },
    "display_name": "100 Birds of the World",
    "bubble_choice_description": "Dataset about 100 different species of birds of the world and various facts about each bird.",
    "thumbnail_url": "https://images.code.org/5749244044b717ab6b58e7dd44d8b388-birds.png"
  },
  "game_id": 68,
  "created_at": "2023-02-17T18:59:43.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-02-17T18:59:43.425+00:00\",\"changed\":[\"cloned from \\\"CSA U4L8-L4_2023\\\"\"],\"cloned_from\":\"CSA U4L8-L4_2023\"},{\"changed_at\":\"2023-02-17 18:59:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 13:49:03 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 14:22:08 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 15:29:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 15:46:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 15:56:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
