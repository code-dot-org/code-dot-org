<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Look at this project example. What are some of its characteristics and features?\r\n\r\n**Note:** The `TextProcessor`(#e7e8ea) class is a hidden class containing code that you will be writing later in this unit!\r\n\r\n*While this is an example of a project for this unit, it is not representative of the only way you can approach or develop the project.*",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    SongAnalyzer mySongs = new SongAnalyzer(\"songtitles.txt\");\n    mySongs.prompt();\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\n/*\n * Reads data from a file\n */\npublic final class FileReader {\n\n  private static File myFile;          // The File containing the data\n  private static Scanner fileReader;   // The Scanner object to read the file\n\n  /*\n   * Returns an ArrayList of Strings from a file\n   */\n  public static ArrayList<String> getStringData(String filename) {\n    createFile(filename);\n    \n    ArrayList<String> tempList = new ArrayList<String>();\n    \n    while (fileReader.hasNextLine()) {\n      tempList.add(fileReader.nextLine());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of words from a file\n   */\n  public static ArrayList<String> getWords(String filename) {\n    createFile(filename);\n\n    ArrayList<String> tempList = new ArrayList<String>();\n\n    while (fileReader.hasNext()) {\n      tempList.add(fileReader.next());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of ints from a file\n   */\n  public static ArrayList<Integer> getIntData(String filename) {\n    createFile(filename);\n\n    ArrayList<Integer> tempList = new ArrayList<Integer>();\n\n    while (fileReader.hasNextInt()) {\n      tempList.add(fileReader.nextInt());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of doubles from a file\n   */\n  public static ArrayList<Double> getDoubleData(String filename) {\n    createFile(filename);\n\n    ArrayList<Double> tempList = new ArrayList<Double>();\n\n    while (fileReader.hasNextDouble()) {\n      tempList.add(fileReader.nextDouble());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Creates the File and Scanner to read the specified filename\n   */\n  public static void createFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read a file or notifies the\n   * user if the file is not found\n   */\n  public static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException e) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n}",
        "isVisible": true
      },
      "TextProcessor.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Analyzes and processes text\n */\npublic class TextProcessor {\n\n  private String filename;              // The file containing the text\n  private ArrayList<String> textList;   // The list of text from the file\n\n  /*\n   * Constructor to create a TextProcessor with the specified filename\n   */\n  public TextProcessor(String filename) {\n    this.filename = filename;\n    textList = FileReader.getStringData(filename);\n  }\n\n  /*\n   * Changes the file to analyze and process and updates the textList\n   */\n  public void changeFile(String filename) {\n    this.filename = filename;\n    textList = FileReader.getStringData(filename);\n  }\n\n  /*\n   * Changes the textList to the newTextList\n   */\n  public void setTextList(ArrayList<String> newTextList) {\n    textList = newTextList;\n  }\n\n  /*\n   * Returns the textList\n   */\n  public ArrayList<String> getTextList() {\n    return textList;\n  }\n\n  /*\n   * Finds and removes all occurrences of each stop word from textList\n   */\n  public void removeStopWords(ArrayList<String> stopWords) {\n    for (String word : stopWords) {\n      for (int index = 0; index < textList.size(); index++) {\n        String currentWord = textList.get(index);\n\n        if (word.equals(currentWord)) {\n          textList.remove(index);\n          index--;\n        }\n      }\n    }\n  }\n\n  /*\n   * Returns an ArrayList containing the individual words from textList\n   */\n  public ArrayList<String> textToWords() {\n    ArrayList<String> wordList = new ArrayList<String>();\n\n    for (int index = 0; index < textList.size(); index++) {\n      String currentLine = textList.get(index);\n      int location = currentLine.indexOf(\" \");;\n\n      while (location != -1) {\n        String currentWord = currentLine.substring(0, location);\n        wordList.add(currentWord);\n        currentLine = currentLine.substring(location + 1);\n        location = currentLine.indexOf(\" \");\n      }\n\n      wordList.add(currentLine);\n    }\n    \n    return wordList;\n  }\n\n  /*\n   * Lesson 7 - Level 4 Choice A\n   * Returns a String containing the most frequent word in textList\n   * and the number of times the word appears in the list\n   */\n  public String findFrequentWord() {\n    String maxWord = \"\";\n    int maxCount = 0;\n    \n    for (int index = 0; index < textList.size(); index++) {\n      String currentWord = textList.get(index);\n      int currentCount = 1;\n\n      for (int next = index + 1; next < textList.size(); next++) {\n        String nextWord = textList.get(next);\n\n        if (currentWord.equals(nextWord)) {\n          currentCount++;\n        }\n      }\n\n      if (currentCount > maxCount) {\n        maxCount = currentCount;\n        maxWord = currentWord;\n      }\n    }\n\n    return \"Most frequent word: \" + maxWord + \" (\" + maxCount + \")\";\n  }\n\n  /*\n   * Lesson 7 - Level 4 Choice B\n   * Returns a 2D array containing the words and their parts of speech\n   */\n  public String[][] getPartsOfSpeech(ArrayList<String> partsOfSpeech) {\n    String[][] wordList = new String[partsOfSpeech.size()][2];\n\n    for (int row = 0; row < wordList.length; row++) {\n      String currentLine = partsOfSpeech.get(row);\n\n      int colon = currentLine.indexOf(\":\");\n      String part = currentLine.substring(0, colon);\n      String word = currentLine.substring(colon + 1);\n      \n      wordList[row][0] = part;\n      wordList[row][1] = word;\n    }\n\n    return wordList;\n  }\n\n  /*\n   * Lesson 7 - Level 4 Choice C\n   * Returns an ArrayList containing words that are a specified part of speech\n   */\n  public ArrayList<String> getWordsForPart(ArrayList<String> partsOfSpeech, String partToFind) {\n    ArrayList<String> wordList = new ArrayList<String>();\n\n    for (int index = 0; index < partsOfSpeech.size(); index++) {\n      String currentLine = partsOfSpeech.get(index);\n      int colon = currentLine.indexOf(\":\");\n      String part = currentLine.substring(0, colon);\n\n      if (part.equals(partToFind)) {\n        String word = currentLine.substring(colon + 1);\n        wordList.add(word);\n      }\n    }\n\n    return wordList;\n  }\n\n  /*\n   * Lesson 7 - Level 4 Choice D\n   * Returns an ArrayList containing the list of words\n   * from textList tagged with their parts of speech\n   */\n  public ArrayList<String> tagPartsOfSpeech(ArrayList<String> partsOfSpeech) {\n    ArrayList<String> taggedWords = new ArrayList<String>();\n    \n    for (int index = 0; index < textList.size(); index++) {\n      String currentWord = textList.get(index);\n      \n      for (int partIndex = 0; partIndex < partsOfSpeech.size(); partIndex++) {\n        String currentLine = partsOfSpeech.get(partIndex);\n        int colon = currentLine.indexOf(\":\");\n        String word = currentLine.substring(colon + 1);\n\n        if (currentWord.equals(word)) {\n          String part = currentLine.substring(0, colon);\n          taggedWords.add(currentWord + \": \" + part);\n        }\n      }\n    }\n\n    return taggedWords;\n  }\n\n  /*\n   * Lesson 8 - Level 4 Choice C\n   * Sorts the words in textList in reverse alphabetical order (Z to A)\n   */\n  public void sortWords() {\n    for (int index = 0; index < textList.size(); index++) {\n      for (int next = index + 1; next < textList.size(); next++) {\n        if (textList.get(index).compareTo(textList.get(next)) < 0) {\n          String temp = textList.get(index);\n          textList.set(index, textList.get(next));\n          textList.set(next, temp);\n        }\n      }\n    }\n  }\n\n  /*\n   * Lesson 8 - Level 4 Choice D\n   * Sorts the lines in textList in reverse alphabetical order (Z to A)\n   */\n  public void sortLines() {\n    for (int index = 0; index < textList.size(); index++) {\n      for (int next = index + 1; next < textList.size(); next++) {\n        if (textList.get(index).compareTo(textList.get(next)) < 0) {\n          String temp = textList.get(index);\n          textList.set(index, textList.get(next));\n          textList.set(next, temp);\n        }\n      }\n    }\n  }\n\n  /*\n   * Lesson 9 - Level 3 Choice B\n   * Returns true if textList contains the specified word\n   * or phrase, otherwise returns false\n   */\n  public boolean hasText(String phrase) {\n    boolean found = false;\n    \n    for (int index = 0; index < textList.size(); index++) {\n      String currentLine = textList.get(index);\n\n      if (currentLine.indexOf(phrase) >= 0) {\n        found = true;\n      }\n    }\n\n    return found;\n  }\n\n  /*\n   * Lesson 9 - Level 3 Choice C\n   * Returns the number of times a word or phrase appears in textList\n   */\n  public int countPhrases(String phrase) {\n    int count = 0;\n\n    for (int index = 0; index < textList.size(); index++) {\n      String currentLine = textList.get(index);\n      int startIndex = 0;\n\n      while (currentLine.indexOf(phrase) != -1) {\n        count++;\n        currentLine = currentLine.substring(currentLine.indexOf(phrase) + 1);\n      }\n    }\n\n    return count;\n  }\n\n  /*\n   * Lesson 9 - Level 3 Choice D\n   * Returns the word that appears the most often in textList\n   */\n  public String mostCommonWord(String firstWord, String secondWord) {\n    int firstCount = 0;\n    int secondCount = 0;\n    String maxWord = \"\";\n\n    for (int index = 0; index < textList.size(); index++) {\n      String firstLine = textList.get(index);\n      String secondLine = textList.get(index);\n\n      while (firstLine.indexOf(firstWord) != -1 || secondLine.indexOf(secondWord) != -1) {\n        if (firstLine.indexOf(firstWord) != -1) {\n          firstCount++;\n          firstLine = firstLine.substring(firstLine.indexOf(firstWord) + 1);\n        }\n\n        if (secondLine.indexOf(secondWord) != -1) {\n          secondCount++;\n          secondLine = secondLine.substring(secondLine.indexOf(secondWord) + 1);\n        }\n      }\n    }\n\n    if (firstCount > secondCount) {\n      maxWord = firstWord;\n    }\n    else {\n      maxWord = secondWord;\n    }\n\n    return maxWord;\n  }\n\n  /*\n   * Lesson 10 - Level 2\n   * Returns the sentiment value of a word\n   */\n  public double getSentiment(ArrayList<String> sentiments, String word) {\n    double sentimentValue = 0.0;\n\n    for (int index = 0; index < sentiments.size(); index++) {\n      String currentLine = sentiments.get(index);\n\n      int comma = currentLine.indexOf(\",\");\n      String sentimentWord = currentLine.substring(0, comma);\n      \n      if (sentimentWord.equals(word)) {\n        sentimentValue = Double.parseDouble(currentLine.substring(comma + 1));\n      }\n    }\n\n    return sentimentValue;\n  }\n\n  /*\n   * Lesson 10 - Level 3 Choice A\n   * Returns the average sentiment of text entered by a user\n   */\n  public double userSentiment(ArrayList<String> sentiments, String userText) {\n    double sum = 0.0;\n    int numWords = 0;\n\n    while (userText.indexOf(\" \") != -1) {\n      String currentWord = userText.substring(0, userText.indexOf(\" \"));\n      sum += getSentiment(sentiments, currentWord);\n      numWords++;\n      userText = userText.substring(userText.indexOf(\" \") + 1);\n    }\n\n    sum += getSentiment(sentiments, userText);\n\n    return sum / (numWords + 1);\n  }\n\n  /*\n   * Lesson 10 - Level 3 Choice B\n   * Returns the average sentiment of a product review\n   */\n  public double productSentiment(ArrayList<String> sentimentValues) {\n    double sum = 0.0;\n    \n    for (int index = 0; index < textList.size(); index++) {\n      String currentWord = textList.get(index);\n      sum += getSentiment(sentimentValues, currentWord);\n    }\n\n    return sum;\n  }\n\n  /*\n   * Lesson 10 - Level 3 Choice C\n   * Returns the average sentiment of a song\n   */\n  public double songSentiment(ArrayList<String> sentimentValues) {\n    double sum = 0.0;\n    \n    for (int index = 0; index < textList.size(); index++) {\n      String currentWord = textList.get(index);\n      sum += getSentiment(sentimentValues, currentWord);\n    }\n\n    return sum / textList.size();\n  }\n\n  /*\n   * Lesson 10 - Level 3 Choice D\n   * Returns the star rating based on the overall sentiment\n   */\n  public String assignStars(ArrayList<String> sentimentValues) {\n    double sum = 0.0;\n    \n    for (int index = 0; index < textList.size(); index++) {\n      String currentWord = textList.get(index);\n      sum += getSentiment(sentimentValues, currentWord);\n    }\n\n    double averageSentiment = sum / textList.size();\n    String stars = \"\";\n\n    if (averageSentiment < -10) {\n      stars = \"0 stars\";\n    }\n    else if (averageSentiment < 0) {\n      stars = \"1 star\";\n    }\n    else if (averageSentiment < 10) {\n      stars = \"2 stars\";\n    }\n    else if (averageSentiment < 20) {\n      stars = \"3 stars\";\n    }\n    else {\n      stars = \"4 stars\";\n    }\n\n    return stars;\n  }\n\n  /*\n   * Returns a String containing the text in textList\n   */\n  public String toString() {\n    String text = \"\";\n\n    for (String value : textList) {\n      text = text + value + \"\\n\";\n    }\n\n    return text;\n  }\n  \n}",
        "isVisible": false
      },
      "SongAnalyzer.java": {
        "text": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n/*\n * Analyzes unique words in song lyrics\n */\npublic class SongAnalyzer {\n    \n  private String lyrics;                   // The file containing the lyrics\n  private ArrayList<String> songTitles;    // The list of songs to analyze\n  private ArrayList<String> uniqueWords;   // The list of unique words in the lyrics\n  private ArrayList<Integer> counts;       // The counts of each unique word in the lyrics\n\n  public SongAnalyzer(String songsFile) {\n    this.songTitles = FileReader.getStringData(songsFile);\n  }\n\n  /*\n   * Prompts the user to choose a song to retrieve information about\n   */\n  public void prompt() {\n    Scanner input = new Scanner(System.in);\n    String choice = \"yes\";\n  \n    while (choice.equals(\"yes\") || choice.equals(\"y\")) {\n      System.out.print(\"Would you like to analyze a song? \");\n      choice = input.nextLine();\n  \n      if (choice.equals(\"yes\") || choice.equals(\"y\")) {\n        System.out.print(\"Enter the name of the song: \");\n        String songTitle = input.nextLine();\n\n        if (confirmSong(songTitle)) {\n          lyrics = getSongFile(songTitle);\n          System.out.println(getSongInfo());\n        }\n        else {\n          System.out.println(\"Song title not found. Choose another song.\");\n        }\n      }\n    }\n  \n    input.close();\n    System.out.println(\"Goodbye!\");\n  }\n\n  /*\n   * Gets the filename for the chosen song\n   */\n  public String getSongFile(String songTitle) {\n    String foundSongFile = \"\";\n\n    for (int index = 0; index < songTitles.size(); index++) {\n      String currentLine = songTitles.get(index);\n      int colon = currentLine.indexOf(\":\");\n      String currentTitle = currentLine.substring(0, colon);\n\n      if (currentTitle.equals(songTitle)) {\n        foundSongFile = currentLine.substring(colon + 1);\n      }\n    }\n\n    return foundSongFile;\n  }\n\n  /*\n   * Confirms that the song is in the list of songs\n   */\n  public boolean confirmSong(String songTitle) {\n    boolean found = false;\n  \n    for (int index = 0; index < songTitles.size(); index++) {\n      String currentLine = songTitles.get(index);\n      int colon = currentLine.indexOf(\":\");\n      String currentSongTitle = currentLine.substring(0, colon);\n  \n      if (songTitle.equals(currentSongTitle)) {\n        found = true;\n      }\n    }\n  \n    return found;\n  }\n\n  /*\n   * Cleans the song lyrics to obtain only the words\n   * in the song without any stop words\n   */\n    public ArrayList<String> cleanSongLyrics() {\n      TextProcessor processor = new TextProcessor(lyrics);\n  \n      ArrayList<String> songWords = processor.textToWords();\n      processor.setTextList(songWords);\n  \n      processor.removeStopWords(FileReader.getStringData(\"stopwords.txt\"));\n  \n      return processor.getTextList();\n    }\n\n  /*\n   * Finds and sets the list of unique words and the\n   * number of times each word appears in the song lyrics\n   */\n  public void countUniqueWords(ArrayList<String> wordsFromLyrics) {\n    uniqueWords = new ArrayList<String>();\n    counts = new ArrayList<Integer>();\n\n    for (int start = 0; start < wordsFromLyrics.size(); start++) {\n      String currentWord = wordsFromLyrics.get(start);\n      int count = countDuplicates(wordsFromLyrics, start, currentWord);\n\n      if (count > 1) {\n        addUnique(currentWord, count);\n      }\n    }\n  }\n\n  /*\n   * Returns a count of the number of times a word appears in wordsFromLyrics\n   */\n  public int countDuplicates(ArrayList<String> wordsFromLyrics, int position, String currentWord) {\n    int count = 1;\n\n    for (int index = position + 1; index < wordsFromLyrics.size(); index++) {\n      String nextWord = wordsFromLyrics.get(index);\n\n      if (currentWord.equals(nextWord)) {\n        count++;\n        wordsFromLyrics.remove(index);\n        index--;\n      }\n    }\n\n    return count;\n  }\n\n  /*\n   * Adds the unique word and the number of times it appears in the song\n   * lyrics to the list of unique words and counts\n   */\n    public void addUnique(String currentWord, int currentCount) {\n      uniqueWords.add(currentWord);\n      counts.add(currentCount);\n    }\n\n  /*\n   * Returns an ArrayList containing the unique words and the number of times\n   * number of times each word appears in the song lyrics\n   */\n  public ArrayList<String> getWordsAndCounts() {\n    ArrayList<String> wordsAndCounts = new ArrayList<String>();\n  \n    for (int index = 0; index < uniqueWords.size(); index++) {\n      wordsAndCounts.add(uniqueWords.get(index) + \": \" + counts.get(index));\n    }\n  \n    return wordsAndCounts;\n  }\n\n  /*\n   * Returns an ArrayList containing the results of the song lyrics analysis\n   */\n  public ArrayList<String> getResults() {\n    ArrayList<String> words = cleanSongLyrics();\n    countUniqueWords(words);\n    ArrayList<String> wordsAndCounts = getWordsAndCounts();\n    return wordsAndCounts;\n  }\n\n  /*\n   * Returns a String containing the results from analyzing the song lyrics\n   */\n  public String getSongInfo() {\n    ArrayList<String> wordsAndCounts = getResults();\n    String text = \"\";\n  \n    for (int index = 0; index < wordsAndCounts.size(); index++) {\n      text = text + wordsAndCounts.get(index) + \"\\n\";\n    }\n  \n    return text;\n  }\n\n}",
        "isVisible": true
      },
      "songtitles.txt": {
        "text": "Eye of the Tiger:eyeofthetiger.txt\nWe are the Champions:wearethechampions.txt\nBlackbird:blackbird.txt",
        "isVisible": true
      },
      "stopwords.txt": {
        "text": "a\nan\nand\nare\nas\nat\nbe\nby\nfor\nfrom\nhas\nhe\nin\nis\nit\nits\nof\non\nthat\nthe\nto\nwas\nwere\nwill\nwith",
        "isVisible": true
      },
      "eyeofthetiger.txt": {
        "text": "Rising up, back on the street\nDid my time, took my chances\nWent the distance, now I'm back on my feet\nJust a man and his will to survive\nSo many times it happens too fast\nYou change your passion for glory\nDon't lose your grip on the dreams of the past\nYou must fight just to keep them alive\nIt's the eye of the tiger\nIt's the thrill of the fight\nRising up to the challenge of our rival\nAnd the last known survivor\nStalks his prey in the night\nAnd he's watching us all with the eye of the tiger\nFace to face, out in the heat\nHanging tough, staying hungry\nThey stack the odds 'til we take to the street\nFor the kill with the skill to survive\nIt's the eye of the tiger\nIt's the thrill of the fight\nRising up to the challenge of our rival\nAnd the last known survivor\nStalks his prey in the night\nAnd he's watching us all with the eye of the tiger\nRising up straight to the top\nHad the guts, got the glory\nWent the distance, now I'm not going to stop\nJust a man and his will to survive\nIt's the eye of the tiger\nIt's the thrill of the fight\nRising up to the challenge of our rival\nAnd the last known survivor\nStalks his prey in the night\nAnd he's watching us all with the eye of the tiger\nThe eye of the tiger\nThe eye of the tiger\nThe eye of the tiger\nThe eye of the tiger",
        "isVisible": true
      },
      "wearethechampions.txt": {
        "text": "I've paid my dues time after time\nI've done my sentence but committed no crime\nAnd bad mistakes, I've made a few\nI've had my share of sand kicked in my face\nBut I've come through\nAnd we mean to go on, and on, and on, and on\nWe are the champions, my friends\nAnd we'll keep on fighting till the end\nWe are the champions, we are the champions\nNo time for losers, 'cause we are the champions of the world\nI've taken my bows and my curtain calls\nYou brought me fame and fortune\nAnd everything that goes with it, I thank you all\nBut it's been no bed of roses, no pleasure cruise\nI consider it a challenge before\nThe whole human race and I ain't gonna lose\nAnd we mean to go on, and on, and on and on\nWe are the champions, my friends\nAnd we'll keep on fighting till the end\nWe are the champions, we are the champions\nNo time for losers, 'cause we are the champions of the world\nWe are the champions, my friends\nAnd we'll keep on fighting till the end, oh\nWe are the champions, we are the champions\nNo time for losers, 'cause we are the champions",
        "isVisible": true
      },
      "blackbird.txt": {
        "text": "Blackbird singing in the dead of night\nTake these broken wings and learn to fly\nAll your life\nYou were only waiting for this moment to arise\nBlackbird singing in the dead of night\nTake these sunken eyes and learn to see\nAll your life\nYou were only waiting for this moment to be free\nBlackbird fly, blackbird fly\nInto the light of a dark black night\nBlackbird fly, blackbird fly\nInto the light of a dark black night\nBlackbird singing in the dead of night\nTake these broken wings and learn to fly\nAll your life\nYou were only waiting for this moment to arise\nYou were only waiting for this moment to arise\nYou were only waiting for this moment to arise",
        "isVisible": true
      }
    },
    "display_name": "Keyword Analysis",
    "bubble_choice_description": "An example project that identifies the most frequent words used in a song to determine its main ideas.",
    "thumbnail_url": "https://images.code.org/6bd2f044accf80f823532afd2206792f-image-1638478918432.png",
    "name_suffix": "_2022",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-02-26T00:27:42.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "audit_log": "[{\"changed_at\":\"2022-02-26T00:27:42.538+00:00\",\"changed\":[\"cloned from \\\"CSA U6L1-L1b\\\"\"],\"cloned_from\":\"CSA U6L1-L1b\"},{\"changed_at\":\"2022-05-11 12:45:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-25 20:00:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-25 20:01:38 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-25 22:06:50 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-25 22:08:31 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-25 22:08:49 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-25 22:14:09 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
