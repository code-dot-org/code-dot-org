<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A theme park manager wants to keep track of the rollercoasters they have at the park.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Rollercoaster`(#e7e8ea) class to assign specific values to the `name`(#e7e8ea) and `speed`(#e7e8ea) instance variables.\r\n\r\n✅ **TO DO #2:** In `RollercoasterRunner.java`(#e7e8ea), instantiate a `Rollercoaster`(#e7e8ea) object using the parameterized constructor. \r\n\r\n✅ **TO DO #3:** Print the constructors and the values assigned to the instance variables for the `Rollercoaster`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printRollercoasterInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nRollercoaster comet = new Rollercoaster();\r\ncomet.printRollercoasterInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing a parameterized constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "RollercoasterRunner.java": {
        "text": "public class RollercoasterRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Rollercoaster object using the parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Rollercoaster.java": {
        "text": "/*\n * Represents a rollercoaster at a theme park\n */\npublic class Rollercoaster {\n\n  private String name;     // The name of a rollercoaster\n  private int speed;       // The speed of a rollercoaster\n\n  /*\n   * Sets the name to \"unknown\" and speed to 20\n   */\n  public Rollercoaster() {\n    name = \"unknown\";\n    speed = 20;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specific values to\n   * the name and speed instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  /*\n   * Prints the name and speed for the rollercoaster\n   */\n  public void printRollercoasterInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Speed: \" + speed);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "display_name": "Rollercoasters",
    "bubble_choice_description": "A theme park manager wants to keep track of the rollercoasters they have at the park.",
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ],
    "thumbnail_url": "https://images.code.org/49e12feb3c5bb9ebf326ef694ef2f68e-rollercoaster.png",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-09T21:24:20.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:24:20.585+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L2_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L2_2023\"},{\"changed_at\":\"2022-11-09 21:24:26 +0000\",\"changed\":[\"project_template_level_name\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-11 23:56:02 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:02:44 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:08:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:08:14 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:11:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:14:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:32:58 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:45:36 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:48:00 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
