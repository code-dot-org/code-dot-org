<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A teacher sponsors a club at the school, and they need help creating a program to manage the club roster.**\r\n\r\n✅ **TO DO #1:** In the `Club`(#e7e8ea) class, declare instance variables named `sponsor`(#e7e8ea) and `numMembers`(#e7e8ea) for the club sponsor's name and the number of club members.\r\n\r\n✅ **TO DO #2:** Write a no-argument constructor to assign default values to the instance variables, such as `\"new sponsor\"`(#e7e8ea) for the club sponsor's name and `1`(#e7e8ea) for the number of club members.\r\n\r\n✅ **TO DO #3:** In `ClubRunner.java`(#e7e8ea), instantiate a `Club`(#e7e8ea) object.\r\n\r\n✅ **TO DO #4:** Print the constructor and the values assigned to the instance variables for the `Club`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printClubInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nClub bookClub = new Club();\r\nbookClub.printClubInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, writing no-argument constructors, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Club Class",
    "bubble_choice_description": "A teacher sponsors a club at the school, and they need help creating a program to manage the club roster.",
    "thumbnail_url": "https://images.code.org/b89c8797888da4c8a9824798e2451122-book-club.png",
    "start_sources": {
      "ClubRunner.java": {
        "text": "public class ClubRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Club object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject).\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Club.java": {
        "text": "/*\n * Represents a school club\n */\npublic class Club {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Declare instance variables for the sponsor's name and number of members.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables for the sponsor's name and number of members.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /*\n   * Prints the sponsor's name and number of club members\n   */\n  public void printClubInfo() {\n    System.out.println(\"Club Sponsor: \" + sponsor);\n    System.out.println(\"Number of Club Members: \" + numMembers);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-03T19:23:28.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:23:28.117+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L5c_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L5c_2023\"},{\"changed_at\":\"2022-11-03 19:23:29 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:46:03 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:41:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:46:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:46:40 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:46:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:47:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:50:02 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 22:17:16 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:26:50 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:56:24 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:57:40 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:57:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:58:01 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
