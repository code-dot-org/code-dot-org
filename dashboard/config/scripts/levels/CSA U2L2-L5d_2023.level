<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A teacher sponsors a club at the school, and they need help creating a program to manage the club roster.**\r\n\r\n✅ **TO DO:** Write the `Club`(#e7e8ea) class and instantiate a `Club`(#e7e8ea) object.\r\n\r\n1. In the `Club`(#e7e8ea) class:\r\n\r\n   **a.** Declare instance variables for the club sponsor's name and the number of club members.\r\n   \r\n   **b.** Write a no-argument constructor to assign default values to the instance variables, such as `\"new sponsor\"`(#e7e8ea) for the club sponsor's name and `1`(#e7e8ea) for the number of club members.\r\n\r\n2. In `ClubRunner.java`(#e7e8ea):\r\n\r\n   **a.** Instantiate a `Club`(#e7e8ea) object\r\n   \r\n   **b.** Print the constructor for the `Club`(#e7e8ea) object to the console using `ClassInfo.getConstructors(nameOfObject)`(#e7e8ea)\r\n   \r\n   **c.** Print the values assigned to the instance variables for the `Club`(#e7e8ea) object to the console by calling the `printClubInfo()`(#e7e8ea) method.\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, writing no-argument constructors, and instantiating objects.\r\n\r\n📝 **COMMENT:** Be sure to add comments to note what your code does.\r\n\r\n🖥️ **TEST:** Test your program to check if your code achieves the expected result.\r\n\r\n🎉 **RUN:** Run your program to see the result of your code!\r\n\r\n## 🎯 Goal\r\n\r\n![](https://images.code.org/16965822162b916f62c07834e1c26967-image-1667839801069.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Club Class",
    "bubble_choice_description": "A teacher sponsors a club at the school, and they need help creating a program to manage the club roster.",
    "thumbnail_url": "https://images.code.org/b89c8797888da4c8a9824798e2451122-book-club.png",
    "encrypted_validation": "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\n",
    "start_sources": {
      "ClubRunner.java": {
        "text": "public class ClubRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Club object. Print the constructor to the console using\n     * ClassInfo.getConstructors(nameOfObject).\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Club.java": {
        "text": "/*\n * Represents a school club\n */\npublic class Club {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Declare instance variables for the sponsor's name and number of members.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables for the sponsor's name and number of members.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ClassInfo.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ClassInfo {\n\n  public static String getAttributes(Object testObject) {\n    Class objectClass = testObject.getClass();\n    Class objectSuperClass = objectClass.getSuperclass();\n    \n    Field[] objectFields = objectClass.getDeclaredFields();\n    Field[] superFields = objectSuperClass.getDeclaredFields();\n    \n    ArrayList<String> classFieldsList = convertToList(Arrays.toString(objectFields));\n    ArrayList<String> superFieldsList = convertToList(Arrays.toString(superFields));\n\n    String className = objectClass.getSimpleName();\n    String superClassName = objectSuperClass.getSimpleName();\n    \n    String heading = \"\\n------------------------------\\n\";\n    \n    String classFieldsText = cleanFields(classFieldsList, className);\n    String superFieldsText = cleanFields(superFieldsList, superClassName);\n\n    String result = className + \" Attributes \" + heading + classFieldsText;\n\n    if (!superClassName.equals(\"Object\")) {\n      result += \"\\n>> inherited from \" + superClassName + \" class <<\\n\" + superFieldsText;\n    }\n\n    return result;\n  }\n\n  public static ArrayList<String> convertToList(String result) {\n    result = result.substring(1, result.length() - 1);\n    ArrayList<String> classFields = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = result.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = result.substring(0, comma);\n      classFields.add(currentField);\n      result = result.substring(comma + 2);\n      comma = result.indexOf(\",\");\n    }\n\n    classFields.add(result);\n    return classFields;\n  }\n\n  public static String cleanFields(ArrayList<String> classFields, String className) {\n    String result = \"\";\n\n    for (int index = 0; index < classFields.size(); index++) {\n      String currentField = classFields.get(index);\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      result += currentField + \"\\n\";\n    }\n\n    return result;\n  }\n\n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n\n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n\n  public static String findField(ArrayList<String> classFields, String typeToFind) {\n    String result = \"MISSING\";\n    \n    for (int index = 0; index < classFields.size(); index++) {\n      String current = classFields.get(index);\n      \n      if (current.indexOf(typeToFind) > 0) {\n        result = ClassInfo.removeClassName(current, \"Instrument\");\n        result = ClassInfo.removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n\n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    }\n\n    return result;\n  }\n\n  public static String getFieldType(String currentField) {\n    currentField = currentField.trim();\n    String[] possibleTypes = {\"boolean\", \"int\", \"double\", \"String\"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result;\n  }\n\n  public static String getConstructors(Object testObject) {\n    Class objectClass = testObject.getClass();\n    String className = objectClass.getSimpleName();\n    Constructor[] objectConstructors = objectClass.getDeclaredConstructors();\n    \n    ArrayList<String> constructorsList = convertToList(Arrays.toString(objectConstructors));\n\n    String heading = \"\\n------------------------------\\n\";\n    String result = className + \" Constructors \" + heading;\n\n    for (String current : constructorsList) {\n      result += current + \"\\n\";\n    }\n    \n    return result;\n  }\n\n  public static String getValue(List<String> output, String lineToFind) {\n    String outputText = \"\";\n    String valueResult = \"\";\n\n    for (int index = 0; index < output.size(); index++) {\n      String current = output.get(index);\n      \n      if (current.indexOf(lineToFind) >= 0) {\n        outputText = current;\n        valueResult = outputText.substring(lineToFind.length());\n      }\n    }\n    \n    return valueResult.trim();\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-03T19:23:28.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:23:28.117+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L5c_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L5c_2023\"},{\"changed_at\":\"2022-11-03 19:23:29 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:46:03 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:41:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:46:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:46:40 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:46:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:47:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:50:02 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
