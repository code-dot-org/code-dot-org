<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A hairstylist wants to keep track of the products they use to style their clients' hair.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `HairProduct`(#e7e8ea) class to assign specific values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #2:** Write a no-argument constructor in the `HairProduct`(#e7e8ea) class to assign default values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #3:** In `StylistRunner.java`(#e7e8ea), instantiate `HairProduct`(#e7e8ea) objects using each constructor.\r\n\r\n✅ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the `HairProduct`(#e7e8ea) objects.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printProductInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nHairProduct hairGel = new HairProduct();\r\nhairGel.printProductInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing parameterized constructors, using the `this`(#e7e8ea) keyword, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "StylistRunner.java": {
        "text": "public class StylistRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate HairProduct objects using the no-argument and parameterized constructors,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "HairProduct.java": {
        "text": "/*\n * Represents a hair product used by a hair stylist\n */\npublic class HairProduct {\n\n  private String type;      // The type of hair product\n  private double price;     // The price of a hair product\n  private boolean isCurly;  // Whether or not a hair product is for curly hair\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specified values to the\n   * instance variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /*\n   * Prints the type and price of the hair product\n   * and whether or not it is for curly hair\n   */\n  public void printProductInfo() {\n    System.out.println(\"Type: \" + type);\n    System.out.println(\"Price: \" + price);\n    System.out.println(\"For Curly Hair? \" + isCurly);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-this-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Hair Products",
    "bubble_choice_description": "A hair stylist wants to keep track of the products they use to style their clients' hair. Help the hair stylist by writing the `HairProduct` class with no-argument and paramterized constructors.",
    "thumbnail_url": "https://images.code.org/621d6b76d105dbeba2e49b8c566d2c21-hairstylist.png",
    "encrypted_exemplar_sources": "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\nCEgAFbXNAR0MdEWV\n"
  },
  "game_id": 68,
  "created_at": "2022-11-17T23:08:43.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-17T23:08:43.629+00:00\",\"changed\":[\"cloned from \\\"CSA U2L4-L6a_2023\\\"\"],\"cloned_from\":\"CSA U2L4-L6a_2023\"},{\"changed_at\":\"2022-11-17 23:08:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:59:04 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:18:30 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:23:18 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:45:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:45:22 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:45:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
