<Studio>
  <config><![CDATA[{
  "game_id": 33,
  "created_at": "2014-11-21T22:21:22.000Z",
  "level_num": "custom",
  "user_id": 1,
  "properties": {
    "skin": "studio",
    "success_condition": "function () {\r\n  if (!Studio.__hacked) {\r\n    Studio.__hacked = true;\r\n    var originalOnTick = Studio.customLogic.constructor.prototype.onTick.bind(Studio.customLogic);\r\n    function resetSprite(sprite){\r\n      if (sprite.dir === 2) {\r\n        sprite.x = 0 - sprite.width;\r\n      } else {\r\n        sprite.x = Studio.MAZE_WIDTH;\r\n      }\r\n      sprite.y = Math.floor(Math.random() * (Studio.MAZE_HEIGHT - sprite.height));\r\n    } \r\n   \r\n    // This wraps the existing onTick function (in bigGameLogic.js) in order to allow you to also\r\n    // add some of your own code. The idea is that code added here is done to be able to iterate quickly,\r\n    // and eventually will also end up in bigGameLogic.js\r\n    \r\n    Studio.customLogic.constructor.prototype.onTick = function () {\r\n      // run existing logic\r\n      originalOnTick();\r\n      \r\n      // run custom logic\r\n      //if (this.studio_.tickCount === 1) {\r\n      if (!this.studio_.playerScore) {\r\n      \tthis.studio_.playerScore = 100;\r\n      }\r\n      \r\n      var titleScreenTitle = document.getElementById('titleScreenTitle');\r\n      if (titleScreenTitle.getAttribute('visibility') === \"visible\") {\r\n        return;\r\n      }\r\n      \r\n      var playerSprite = this.studio_.sprite[this.playerSpriteIndex];\r\n      var targetSprite = this.studio_.sprite[this.targetSpriteIndex];\r\n      var dangerSprite = this.studio_.sprite[this.dangerSpriteIndex];\r\n\r\n      if (this.collide(playerSprite.x, playerSprite.y, dangerSprite.x, dangerSprite.y) && playerSprite.visible && dangerSprite.visible) {\r\n        this.studio_.vanishActor({spriteIndex:this.playerSpriteIndex});\r\n        setTimeout((function() {this.studio_.setSprite({spriteIndex:this.playerSpriteIndex,value:\"visible\"});}).bind(this), 500);\r\n        this.studio_.playerScore -= 20;\r\n        \r\n        // send sprite back offscreen\r\n        resetSprite(dangerSprite);\r\n      }\r\n\r\n      if (this.collide(playerSprite.x, playerSprite.y, targetSprite.x, targetSprite.y) && playerSprite.visible && targetSprite.visible) {\r\n        \r\n        this.studio_.playerScore += 10;\r\n        \r\n        // send sprite back offscreen\r\n        resetSprite(targetSprite);\r\n      }\r\n      if (this.studio_.playerScore <= 0) {\r\n        this.studio_.setScoreText({text:\"Game Over\"})\r\n        this.studio_.showTitleScreen({text:'click reset to play again'})\r\n        for (var i = 0; i < this.studio_.spriteCount; i++) {\r\n          this.studio_.vanishActor({spriteIndex:i});\r\n        }\r\n      }\r\n\r\n      this.studio_.displayScore();\r\n      \r\n    }\r\n  }\r\n}",
    "failure_condition": "function () {\r\n}",
    "maze": "[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,16,0,0,0,0],[16,0,0,0,0,0,16,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]",
    "embed": "false",
    "instructions": "A demo of the completed CS in Algebra Big Game project",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "true",
    "free_play": "true",
    "edge_collisions": "false",
    "projectile_collisions": "false",
    "allow_sprites_outside_playspace": "true",
    "sprites_hidden_to_start": "true",
    "coordinate_grid_background": "false",
    "default_num_example_blocks": "2",
    "disable_sharing": "false",
    "generate_function_pass_blocks": "true",
    "timeout_after_when_run": "false",
    "soft_buttons": [
      "leftButton",
      "rightButton",
      "downButton",
      "upButton"
    ],
    "step_speed": "50",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "custom_game_type": "Big Game",
    "disable_examples": "false"
  }
}]]></config>
  <blocks>
    <start_blocks>
      <xml>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given a current x coordinate, return an updated x coordinate 10 pixels to the right.</description>
            <outputtype>Number</outputtype>
          </mutation>
          <title name="NAME">update-target</title>
          <functional_input name="STACK">
            <block type="functional_plus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_parameters_get">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">x</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-right?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">200</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">200</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">450</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-right?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">500</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">500</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">450</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given a sprite's x-coordinate, is it safe on the right?</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">safe-right?</title>
          <functional_input name="STACK">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_parameters_get">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">x</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">450</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-left?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">75</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_greater_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">75</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">-50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-left?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">-100</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_greater_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">-100</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">-50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given a sprite's x-coordinate, is it safe-left? and safe-right?</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">onscreen?</title>
          <functional_input name="STACK">
            <block type="functional_logical_and" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="safe-left?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">x</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_call" inline="false">
                  <mutation name="safe-right?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">x</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="onscreen?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">-100</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_logical_and" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="safe-left?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">-100</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_call" inline="false">
                  <mutation name="safe-right?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">-100</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="onscreen?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">250</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_logical_and" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="safe-left?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">250</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_call" inline="false">
                  <mutation name="safe-right?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">250</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="px" type="Number"/>
            <arg name="py" type="Number"/>
            <arg name="cx" type="Number"/>
            <arg name="cy" type="Number"/>
            <description>Given the x and y coordinates of the player and another character, are they colliding?</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">collide?</title>
          <functional_input name="STACK">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="distance">
                    <arg name="px" type="Number"/>
                    <arg name="py" type="Number"/>
                    <arg name="cx" type="Number"/>
                    <arg name="cy" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">px</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG1">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">py</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">cx</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG3">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">cy</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="collide?">
                <arg name="px" type="Number"/>
                <arg name="py" type="Number"/>
                <arg name="cx" type="Number"/>
                <arg name="cy" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">20</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">310</title>
                </block>
              </functional_input>
              <functional_input name="ARG3">
                <block type="functional_math_number">
                  <title name="NUM">320</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="distance">
                    <arg name="px" type="Number"/>
                    <arg name="py" type="Number"/>
                    <arg name="cx" type="Number"/>
                    <arg name="cy" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">10</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG1">
                    <block type="functional_math_number">
                      <title name="NUM">20</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_math_number">
                      <title name="NUM">310</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG3">
                    <block type="functional_math_number">
                      <title name="NUM">320</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="collide?">
                <arg name="px" type="Number"/>
                <arg name="py" type="Number"/>
                <arg name="cx" type="Number"/>
                <arg name="cy" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">55</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">60</title>
                </block>
              </functional_input>
              <functional_input name="ARG3">
                <block type="functional_math_number">
                  <title name="NUM">65</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="distance">
                    <arg name="px" type="Number"/>
                    <arg name="py" type="Number"/>
                    <arg name="cx" type="Number"/>
                    <arg name="cy" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">50</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG1">
                    <block type="functional_math_number">
                      <title name="NUM">55</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_math_number">
                      <title name="NUM">60</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG3">
                    <block type="functional_math_number">
                      <title name="NUM">65</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="key" type="Number"/>
            <arg name="y" type="Number"/>
            <description>Given a key pressed and current y coordinate, return an updated y coordinate</description>
            <outputtype>Number</outputtype>
          </mutation>
          <title name="NAME">update-player</title>
          <functional_input name="STACK">
            <block type="functional_cond" inline="false">
              <mutation pairs="0,1"/>
              <functional_input name="COND0">
                <block type="functional_number_equals" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">key</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_math_number">
                      <title name="NUM">38</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="VALUE0">
                <block type="functional_plus" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">y</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_math_number">
                      <title name="NUM">10</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="COND1">
                <block type="functional_number_equals" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">key</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_math_number">
                      <title name="NUM">40</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="VALUE1">
                <block type="functional_minus" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">y</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_math_number">
                      <title name="NUM">10</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="DEFAULT">
                <block type="functional_parameters_get">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">y</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="update-player">
                <arg name="key" type="Number"/>
                <arg name="y" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">38</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">150</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_plus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">150</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="update-player">
                <arg name="key" type="Number"/>
                <arg name="y" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">38</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">200</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_plus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">200</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="update-player">
                <arg name="key" type="Number"/>
                <arg name="y" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">40</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">150</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_minus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">150</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="update-player">
                <arg name="key" type="Number"/>
                <arg name="y" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">40</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">200</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_minus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">200</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given a current x coordinate, return an updated x coordinate 10 pixels to the left.</description>
            <outputtype>Number</outputtype>
          </mutation>
          <title name="NAME">update-danger</title>
          <functional_input name="STACK">
            <block type="functional_minus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_parameters_get">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">x</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="update-danger">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_minus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="update-danger">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">40</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_minus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">40</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given a sprite's x-coordinate, is it safe on the left?</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">safe-left?</title>
          <functional_input name="STACK">
            <block type="functional_greater_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_parameters_get">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">x</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">-50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="update-target">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_plus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="update-target">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">60</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_plus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">60</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <outputtype>Image</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">player</title>
          <functional_input name="STACK">
            <block type="functional_sprite_dropdown">
              <title name="SPRITE_INDEX">ninja</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="px" type="Number"/>
            <arg name="py" type="Number"/>
            <arg name="cx" type="Number"/>
            <arg name="cy" type="Number"/>
            <description>Given the player's x and y coordinates, and the coordinates of another character, how far apart are their center points?</description>
            <outputtype>Number</outputtype>
          </mutation>
          <title name="NAME">distance</title>
          <functional_input name="STACK">
            <block type="functional_sqrt" inline="false">
              <functional_input name="ARG1">
                <block type="functional_plus" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_call" inline="false">
                      <mutation name="sqr">
                        <arg name="number" type="Number"/>
                      </mutation>
                      <functional_input name="ARG0">
                        <block type="functional_call" inline="false">
                          <mutation name="line-length">
                            <arg name="a" type="Number"/>
                            <arg name="b" type="Number"/>
                          </mutation>
                          <functional_input name="ARG0">
                            <block type="functional_parameters_get">
                              <mutation>
                                <outputtype>Number</outputtype>
                              </mutation>
                              <title name="VAR">px</title>
                            </block>
                          </functional_input>
                          <functional_input name="ARG1">
                            <block type="functional_parameters_get">
                              <mutation>
                                <outputtype>Number</outputtype>
                              </mutation>
                              <title name="VAR">cx</title>
                            </block>
                          </functional_input>
                        </block>
                      </functional_input>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_call" inline="false">
                      <mutation name="sqr">
                        <arg name="number" type="Number"/>
                      </mutation>
                      <functional_input name="ARG0">
                        <block type="functional_call" inline="false">
                          <mutation name="line-length">
                            <arg name="a" type="Number"/>
                            <arg name="b" type="Number"/>
                          </mutation>
                          <functional_input name="ARG0">
                            <block type="functional_parameters_get">
                              <mutation>
                                <outputtype>Number</outputtype>
                              </mutation>
                              <title name="VAR">py</title>
                            </block>
                          </functional_input>
                          <functional_input name="ARG1">
                            <block type="functional_parameters_get">
                              <mutation>
                                <outputtype>Number</outputtype>
                              </mutation>
                              <title name="VAR">cy</title>
                            </block>
                          </functional_input>
                        </block>
                      </functional_input>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="distance">
                <arg name="px" type="Number"/>
                <arg name="py" type="Number"/>
                <arg name="cx" type="Number"/>
                <arg name="cy" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">200</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">125</title>
                </block>
              </functional_input>
              <functional_input name="ARG3">
                <block type="functional_math_number">
                  <title name="NUM">225</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_sqrt" inline="false">
              <functional_input name="ARG1">
                <block type="functional_plus" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_call" inline="false">
                      <mutation name="sqr">
                        <arg name="number" type="Number"/>
                      </mutation>
                      <functional_input name="ARG0">
                        <block type="functional_call" inline="false">
                          <mutation name="line-length">
                            <arg name="a" type="Number"/>
                            <arg name="b" type="Number"/>
                          </mutation>
                          <functional_input name="ARG0">
                            <block type="functional_math_number">
                              <title name="NUM">200</title>
                            </block>
                          </functional_input>
                          <functional_input name="ARG1">
                            <block type="functional_math_number">
                              <title name="NUM">125</title>
                            </block>
                          </functional_input>
                        </block>
                      </functional_input>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_call" inline="false">
                      <mutation name="sqr">
                        <arg name="number" type="Number"/>
                      </mutation>
                      <functional_input name="ARG0">
                        <block type="functional_call" inline="false">
                          <mutation name="line-length">
                            <arg name="a" type="Number"/>
                            <arg name="b" type="Number"/>
                          </mutation>
                          <functional_input name="ARG0">
                            <block type="functional_math_number">
                              <title name="NUM">100</title>
                            </block>
                          </functional_input>
                          <functional_input name="ARG1">
                            <block type="functional_math_number">
                              <title name="NUM">225</title>
                            </block>
                          </functional_input>
                        </block>
                      </functional_input>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="distance">
                <arg name="px" type="Number"/>
                <arg name="py" type="Number"/>
                <arg name="cx" type="Number"/>
                <arg name="cy" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">150</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">200</title>
                </block>
              </functional_input>
              <functional_input name="ARG3">
                <block type="functional_math_number">
                  <title name="NUM">250</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_sqrt" inline="false">
              <functional_input name="ARG1">
                <block type="functional_plus" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_call" inline="false">
                      <mutation name="sqr">
                        <arg name="number" type="Number"/>
                      </mutation>
                      <functional_input name="ARG0">
                        <block type="functional_call" inline="false">
                          <mutation name="line-length">
                            <arg name="a" type="Number"/>
                            <arg name="b" type="Number"/>
                          </mutation>
                          <functional_input name="ARG0">
                            <block type="functional_math_number">
                              <title name="NUM">100</title>
                            </block>
                          </functional_input>
                          <functional_input name="ARG1">
                            <block type="functional_math_number">
                              <title name="NUM">200</title>
                            </block>
                          </functional_input>
                        </block>
                      </functional_input>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_call" inline="false">
                      <mutation name="sqr">
                        <arg name="number" type="Number"/>
                      </mutation>
                      <functional_input name="ARG0">
                        <block type="functional_call" inline="false">
                          <mutation name="line-length">
                            <arg name="a" type="Number"/>
                            <arg name="b" type="Number"/>
                          </mutation>
                          <functional_input name="ARG0">
                            <block type="functional_math_number">
                              <title name="NUM">150</title>
                            </block>
                          </functional_input>
                          <functional_input name="ARG1">
                            <block type="functional_math_number">
                              <title name="NUM">250</title>
                            </block>
                          </functional_input>
                        </block>
                      </functional_input>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="a" type="Number"/>
            <arg name="b" type="Number"/>
            <description>Given two points on a number line, how far apart are they?</description>
            <outputtype>Number</outputtype>
          </mutation>
          <title name="NAME">line-length</title>
          <functional_input name="STACK">
            <block type="functional_cond" inline="false">
              <functional_input name="COND0">
                <block type="functional_greater_than" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">a</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">b</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="VALUE0">
                <block type="functional_minus" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">a</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">b</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="DEFAULT">
                <block type="functional_minus" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">b</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">a</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="line-length">
                <arg name="a" type="Number"/>
                <arg name="b" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">200</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">175</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_minus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">200</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">175</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="line-length">
                <arg name="a" type="Number"/>
                <arg name="b" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">150</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_minus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">150</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <outputtype>String</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">title</title>
          <functional_input name="STACK">
            <block type="functional_string">
              <title name="VAL">Ninja vs Dragon!</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <outputtype>String</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">subtitle</title>
          <functional_input name="STACK">
            <block type="functional_string">
              <title name="VAL">Catch the unicorn, avoid the dragon</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <outputtype>Image</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">bg</title>
          <functional_input name="STACK">
            <block type="functional_background_dropdown">
              <title name="BACKGROUND">"cloudy"</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_start_setFuncs" inline="false" deletable="false" movable="false" editable="false" id="game_funcs">
          <functional_input name="title">
            <block type="functional_call" deletable="false">
              <mutation name="title"/>
            </block>
          </functional_input>
          <functional_input name="subtitle">
            <block type="functional_call" deletable="false">
              <mutation name="subtitle"/>
            </block>
          </functional_input>
          <functional_input name="background">
            <block type="functional_call" deletable="false">
              <mutation name="bg"/>
            </block>
          </functional_input>
          <functional_input name="target">
            <block type="functional_call" deletable="false">
              <mutation name="target"/>
            </block>
          </functional_input>
          <functional_input name="danger">
            <block type="functional_call" deletable="false">
              <mutation name="danger"/>
            </block>
          </functional_input>
          <functional_input name="player">
            <block type="functional_call" deletable="false">
              <mutation name="player"/>
            </block>
          </functional_input>
          <functional_input name="update-target">
            <block type="functional_pass">
              <mutation name="update-target"/>
            </block>
          </functional_input>
          <functional_input name="update-danger">
            <block type="functional_pass">
              <mutation name="update-danger"/>
            </block>
          </functional_input>
          <functional_input name="update-player">
            <block type="functional_pass">
              <mutation name="update-player"/>
            </block>
          </functional_input>
          <functional_input name="collide?">
            <block type="functional_pass">
              <mutation name="collide?"/>
            </block>
          </functional_input>
          <functional_input name="on-screen?">
            <block type="functional_pass">
              <mutation name="onscreen?"/>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false">
          <mutation>
            <outputtype>Image</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">danger</title>
          <functional_input name="STACK">
            <block type="functional_sprite_dropdown">
              <title name="SPRITE_INDEX">dragon</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false">
          <mutation>
            <outputtype>Image</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">target</title>
          <functional_input name="STACK">
            <block type="functional_sprite_dropdown">
              <title name="SPRITE_INDEX">unicorn</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="sqr">
                <arg name="number" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="sqr">
                <arg name="number" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <arg name="number" type="Number"/>
            <outputtype>Number</outputtype>
          </mutation>
          <title name="NAME">sqr</title>
          <functional_input name="STACK">
            <block type="functional_times" inline="false" uservisible="false">
              <functional_input name="ARG1">
                <block type="functional_parameters_get" uservisible="false">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">number</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_parameters_get" uservisible="false">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">number</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
      </xml>
    </start_blocks>
    <toolbox_blocks>
      <xml>
        <category name="Number">
          <block type="functional_plus" inline="false"/>
          <block type="functional_minus" inline="false"/>
          <block type="functional_times" inline="false"/>
          <block type="functional_dividedby" inline="false"/>
          <block type="functional_sqrt" inline="false"/>
          <block type="functional_math_number">
            <title name="NUM">0</title>
          </block>
        </category>
        <category name="String">
          <block type="functional_string">
            <title name="VAL"/>
          </block>
        </category>
        <category name="Image">
          <block type="functional_sprite_dropdown">
            <title name="SPRITE_INDEX">dog</title>
          </block>
          <block type="functional_background_dropdown">
            <title name="BACKGROUND">"cave"</title>
          </block>
        </category>
        <category name="Boolean">
          <block type="functional_greater_than" inline="false"/>
          <block type="functional_less_than" inline="false"/>
          <block type="functional_number_equals" inline="false"/>
          <block type="functional_string_equals" inline="false"/>
          <block type="functional_logical_and" inline="false"/>
          <block type="functional_logical_not" inline="false"/>
          <block type="functional_boolean">
            <title name="VAL">true</title>
          </block>
        </category>
        <category name="Conditionals">
          <block type="functional_cond" inline="false"/>
          <block type="functional_logical_or" inline="false"/>
        </category>
        <category name="Variables" custom="FUNCTIONAL_VARIABLE"/>
        <category name="Functions" custom="PROCEDURE">
  </category>
      </xml>
    </toolbox_blocks>
  </blocks>
</Studio>