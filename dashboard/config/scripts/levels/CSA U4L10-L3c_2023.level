<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-08-01T16:21:50.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that draws an image of each planet based on the length of their days.\r\n\r\n##In PlanetScene.java:\r\n\r\n1. Write the `chooseSize()`(#e7e8ea) method using multi-selection statements to check the length of each day and return the size to draw the image.\r\n\r\n   * If the length of the day is greater than `100`(#e7e8ea), return a size of `150`(#e7e8ea).\r\n   \r\n   * Else if the length of the day is greater than or equal to `15`(#e7e8ea), return a size of `100`(#e7e8ea).\r\n   \r\n   * Otherwise, return a size of `50`(#e7e8ea).\r\n\r\n##In MyTheater.java:\r\n\r\n2. Call the `createScene()`(#e7e8ea) method with the array.\r\n\r\n3. Use `Theater.playScenes()`(#e7e8ea) to play the scene.\r\n\r\n::: details [**Show Me How**]\r\nA multi-selection statement uses the following syntax:\r\n  \r\n  ```\r\n  if (condition) {\r\n    // code to execute\r\n  }\r\n  else if (condition) {\r\n    // code to execute\r\n  }\r\n  else {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nYou can have more than one `else if`(#e7e8ea) if you have additional conditions you need to check.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"planets.txt\");\n    String[] planets = myFileReader.getStringData(9);\n\n    myFileReader.setFile(\"daylengths.txt\");\n    int[] days = myFileReader.getIntData(9);\n\n    PlanetScene myScene = new PlanetScene(planets, days);\n\n    // TO DO #2: Call the createScene() method.\n\n\n    // TO DO #3: Use Theater.playScenes() to play the scene.\n    \n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "PlanetScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the length of a day for each planet\n */\npublic class PlanetScene extends Scene {\n\n  private String[] planets;     // The list of planet images\n  private int[] dayLengths;     // The list of the length of days for each planet\n\n  /*\n   * Constructor to create a PlanetScene with the\n   * specified arrays of planets and length of days\n   */\n  public PlanetScene(String[] planets, int[] dayLengths) {\n    this.planets = planets;\n    this.dayLengths = dayLengths;\n  }\n\n  /*\n   * Returns the size to draw the image based on the length of the day\n   */\n  public int chooseSize(int dayLength) {\n    int size = 0;\n\n    // TO DO #1: Check the length of the planet's day and\n    // decide the image size to use based on the value.\n    \n    \n    return size;\n  }\n\n  /*\n   * Creates the scene by drawing each planet image\n   * based on the length of their days\n   */\n  public void createScene() {    \n    // TO DO #1: Draw each planet image at random locations. Use the\n    // length of their days to inform the size of the image.\n    for (int i = 0; i < dayLengths.length; i++) {\n      int x = (int) (Math.random() * getWidth());\n      int y = (int) (Math.random() * getHeight());\n      int size = chooseSize(dayLengths[i]);\n      drawImage(planets[i], x, y, size);\n    }\n  }\n}",
        "isVisible": true
      },
      "planets.txt": {
        "text": "mercury.png\nvenus.png\nearth.png\nmars.png\njupiter.png\nsaturn.png\nuranus.png\nneptune.png\npluto.png",
        "isVisible": true
      },
      "daylengths.txt": {
        "text": "4222\n2802\n24\n24\n9\n10\n17\n16\n153",
        "isVisible": true
      }
    },
    "display_name": "Planets",
    "bubble_choice_description": "Draw the images for each planet based on the length of their days.",
    "thumbnail_url": "https://images.code.org/baad52ae8ed2a37bfa00da5ccc375658-image-1650719543283.png",
    "starter_assets": {
      "pluto.png": "253a86ad-b96b-4d7c-99cf-d0cb9f79eb73.png",
      "neptune.png": "af43b0ac-7525-4292-a6b0-438741a029e9.png",
      "uranus.png": "f8900e70-805c-4ad3-a659-3f1b0d18613f.png",
      "saturn.png": "c702d5ff-0356-43eb-8f05-aee10c41129d.png",
      "jupiter.png": "8e16c859-61e8-474d-bb15-0708df82f5bd.png",
      "mars.png": "6f542895-a832-41e9-84c8-f5a8a2dbc6bf.png",
      "earth.png": "a6f87412-cf56-4e23-b148-515d0c420f3b.png",
      "venus.png": "577f8056-2845-42ae-8d8f-ca36dca181c2.png",
      "mercury.png": "adc6cf55-2a14-4cc8-a8d2-8388c68201cb.png"
    },
    "encrypted_exemplar_sources": "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\n",
    "name_suffix": "_2023"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-08-01T16:21:50.619+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L3c_2022\\\"\"],\"cloned_from\":\"CSA U4L10-L3c_2022\"}]"
}]]></config>
</Javalab>
