<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-10-27T10:25:10.000Z",
  "level_num": "custom",
  "user_id": 13,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "console.log": null
    },
    "edit_code": true,
    "embed": "false",
    "instructions": "Trace the code and predict what you think will be printed to the console. Then add a console.log statement at the end of the program to see the last value of someNum to see if your full prediction is correct. (click to see full Instructions)",
    "markdown_instructions": "# Variable Re-assignment - Part 2: Updating Values\r\n\r\nAll of our examples so far have shown how to set the value of a variable by using combinations of numbers and other variables.  But what if you wanted to do something like **add 10 to the *current* value of a variable**? \r\n\r\nBecause updating the value in a variable is just moving memory around, the process has to go something like this:\r\n* Read the current value of a variable.\r\n* Add 10 to it.\r\n* Store the new value back into the same variable.\r\n\r\nThe technical term for this is called **variable re-assignment** - when you change the value of a variable based on its current contents.   To increase the value of `num1` by 10 you actually need to do this:\r\n\r\n<img src=\"https://images.code.org/c49b1a0fb81de4b90558fdb278e40987-image-1445942169121.png\" style=\"float:right\">\r\n```\r\nnum1 = num1 + 10;\r\n```\r\nThe diagram at right shows a picture of what's happening (it assumes the value of `num1` is 7 before the line is executed).  It's actually very similar to what happens with plain old arithmetic: compute a value, then store it in a variable.  Because the computation has to happen before storing the result in a variable, there is no contradiction here.\r\n\r\n<details>\r\n<Summary><strong>Common Mistakes & Tips</strong> [click to expand]</Summary>\r\n\r\n<h3>\r\nMistake 1\r\n</h3>\r\n<p>To increase the value of variable by 10 (for example) a common mistake is to think that this statement alone will do the trick.\r\n</p><p>\r\n\r\n```\r\nnum1 + 10;\r\n```\r\n</p><p>\r\nIt doesn't. This tells the computer to add 10 to whatever the value of `num1` is.  And the computer will do that, and the result will go....nowhere.  It will be lost.\r\n</p><p>\r\nBecause you are trying assign a new value to a variable it should make sense that **the = sign must be involved somehow**.  \r\n</p>\r\n<h3>\r\nMistake 2\r\n</h3>\r\n<p>\r\nIf you were in math class this statment would make no sense:\r\n```\r\nnum1 = num1 + 10;\r\n```\r\n</p><p>\r\nBut **remember to read = as \"gets.\"** If you read the statement above as: \"num1 *gets* the value of num1's current value plus 10\" it might make more sense.  Get in the habit of using \"gets.\"\r\n</p>\r\n</details>\r\n\r\n# Do This:\r\n\r\n * **Make a prediction.**\r\n We start you out with some code again (see below). \r\n\r\n <img src=\"https://images.code.org/60b25394c387bc111451f0e481528733-image-1447800367736.43.42.png\" style=\"width: 500px;\"> \r\n\r\n Trace the code and predict what you think will be printed to the console.  (NOTE: We're serious about this \"make a prediction\" stuff. When you force yourself to make a prediction about what code will do you will learn faster since it triggers you to apply your mental model of what's happening.)\r\n  \r\n * **Run the program** to see if you were right.\r\n \r\n * **Add a `console.log` statement**.\r\n \r\n  We've left you with a *little bit* of programming to do: add a `console.log` statement at the end of the program to see the last value of `someNum` to see if your full prediction is correct.\r\n",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "text_mode_at_start": "true",
    "design_mode_at_start": "false",
    "hide_design_mode": "true",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "true",
    "start_blocks": "var someNum = 7;\r\n\r\nsomeNum = someNum + 1;\r\nconsole.log(\"The value of someNum is now: \" + someNum);\r\n\r\nsomeNum = someNum + 1;\r\nconsole.log(\"The value of someNum is now: \" + someNum);\r\n\r\nsomeNum = someNum + 1;\r\nconsole.log(\"The value of someNum is now: \" + someNum);\r\n\r\nsomeNum = someNum * someNum;\r\n\r\n",
    "lock_zero_param_functions": "false",
    "execute_palette_apis_only": "false"
  }
}]]></config>
  <blocks/>
</Applab>
