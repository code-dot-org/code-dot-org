<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that draws an image of each planet based on the length of their days.\r\n\r\n##In PlanetScene.java:\r\n\r\n1. Write the `createScene()`(#e7e8ea) method to draw each planet's image at a random location in the scene. Traverse the `dayLengths`(#e7e8ea) array and use multi-selection statements to check the length of each day and decide the size to draw the image.\r\n\r\n   * If the length of the day is greater than `100`(#e7e8ea), draw the corresponding planet's image in the `planets`(#e7e8ea) array with a size of `150`(#e7e8ea).\r\n   \r\n   * Else if the length of the day is greater than or equal to `15`(#e7e8ea), draw the corresponding planet's image in the `planets`(#e7e8ea) array with a size of `100`(#e7e8ea).\r\n   \r\n   * Otherwise, draw the corresponding planet's image in the `planets`(#e7e8ea) array with a size of `50`(#e7e8ea).\r\n\r\n##In MyTheater.java:\r\n\r\n2. Call the `createScene()`(#e7e8ea) method with the array.\r\n\r\n3. Use `Theater.playScenes()`(#e7e8ea) to play the scene.\r\n\r\n::: details [**Show Me How**]\r\nA multi-selection statement uses the following syntax:\r\n  \r\n  ```\r\n  if (condition) {\r\n    // code to execute\r\n  }\r\n  else if (condition) {\r\n    // code to execute\r\n  }\r\n  else {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nYou can have more than one `else if`(#e7e8ea) if you have additional conditions you need to check.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"planets.txt\");\n    String[] planets = myFileReader.getStringData(9);\n\n    myFileReader.setFile(\"daylengths.txt\");\n    int[] days = myFileReader.getIntData(9);\n\n    PlanetScene myScene = new PlanetScene(planets, days);\n\n    // TO DO #2: Call the createScene() method.\n\n\n    // TO DO #3: Use Theater.playScenes() to play the scene.\n    \n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "PlanetScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the length of a day for each planet\n */\npublic class PlanetScene extends Scene {\n\n  private String[] planets;     // The list of planet images\n  private int[] dayLengths;     // The list of the length of days for each planet\n\n  /*\n   * Constructor to create a PlanetScene with the\n   * specified arrays of planets and length of days\n   */\n  public PlanetScene(String[] planets, int[] dayLengths) {\n    this.planets = planets;\n    this.dayLengths = dayLengths;\n  }\n\n  /*\n   * Creates the scene by drawing each planet image\n   * based on the length of their days\n   */\n  public void createScene() {    \n    // TO DO #1: Draw each planet image at random locations. Use the\n    // length of their days to inform the size of the image.\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "planets.txt": {
        "text": "mercury.png\nvenus.png\nearth.png\nmars.png\njupiter.png\nsaturn.png\nuranus.png\nneptune.png\npluto.png",
        "isVisible": true
      },
      "daylengths.txt": {
        "text": "4222\n2802\n24\n24\n9\n10\n17\n16\n153",
        "isVisible": true
      }
    },
    "display_name": "Planets",
    "bubble_choice_description": "Draw the images for each planet based on the length of their days.",
    "thumbnail_url": "https://images.code.org/baad52ae8ed2a37bfa00da5ccc375658-image-1650719543283.png",
    "starter_assets": {
      "pluto.png": "253a86ad-b96b-4d7c-99cf-d0cb9f79eb73.png",
      "neptune.png": "af43b0ac-7525-4292-a6b0-438741a029e9.png",
      "uranus.png": "f8900e70-805c-4ad3-a659-3f1b0d18613f.png",
      "saturn.png": "c702d5ff-0356-43eb-8f05-aee10c41129d.png",
      "jupiter.png": "8e16c859-61e8-474d-bb15-0708df82f5bd.png",
      "mars.png": "6f542895-a832-41e9-84c8-f5a8a2dbc6bf.png",
      "earth.png": "a6f87412-cf56-4e23-b148-515d0c420f3b.png",
      "venus.png": "577f8056-2845-42ae-8d8f-ca36dca181c2.png",
      "mercury.png": "adc6cf55-2a14-4cc8-a8d2-8388c68201cb.png"
    },
    "encrypted_exemplar_sources": "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\n"
  },
  "game_id": 68,
  "created_at": "2022-04-07T18:58:22.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-07T18:58:22.559+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L3b_2022\\\"\"],\"cloned_from\":\"CSA U4L10-L3b_2022\"},{\"changed_at\":\"2022-04-07 18:58:25 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:00:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:02:33 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:12:33 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:25:10 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 16:14:01 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 16:19:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 16:22:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-25 21:25:36 +0000\",\"changed\":[],\"changed_by_id\":13506,\"changed_by_email\":\"sanchit+levelbuilder@code.org\"},{\"changed_at\":\"2022-05-03 12:45:56 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:46:29 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:46:33 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 13:03:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 13:04:13 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 13:04:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-27 16:50:01 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
