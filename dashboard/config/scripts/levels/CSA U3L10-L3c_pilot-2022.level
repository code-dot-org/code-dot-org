<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "project_template_level_name": "CSA U3L10-L3c PBT_pilot-2022",
    "long_instructions": "##In States.java:\r\n\r\n1. Write the `hasDuplicates()`(#e7e8ea) method to return `true`(#e7e8ea) if there are duplicate elements in the `admissionYears`(#e7e8ea) array.\r\n\r\n##In MyConsole.java:\r\n\r\n2. Print the result of a call to the `hasDuplicates()`(#e7e8ea) method on the `myStates`(#e7e8ea) object to check the array for duplicates.\r\n\r\n***Curious about this dataset?*** *Learn more about it [**here**](https://github.com/CivilServiceUSA/us-states)!*\r\n\r\n![](https://images.code.org/966e565b0b8ec5d5e0f705cbe406febe-image-1648761589205.png)",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "submittable": "false",
    "csa_view_mode": "console",
    "display_name": "States",
    "bubble_choice_description": "Find out if there are duplicate admission years that states joined the United States.",
    "thumbnail_url": "https://images.code.org/f61a8284743e827818ed7b095c8c1a3c-image-1648758558035.png",
    "encrypted_exemplar_sources": "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\n",
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "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\nf4Fqbv2yLJXznHUw0BWEyCZJHKDDVzo=\n",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"statenames.txt\");\n    String[] states = myFileReader.getStringData(50);\n\n    myFileReader.setFile(\"admissionyears.txt\");\n    int[] years = myFileReader.getIntData(50);\n\n    States myStates = new States(states, years);\n\n    // TO DO #2: Print the result of a call to hasDuplicates().\n\n\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "statenames.txt": {
        "text": "Alabama\nAlaska\nArizona\nArkansas\nCalifornia\nColorado\nConnecticut\nDelaware\nFlorida\nGeorgia\nHawaii\nIdaho\nIllinois\nIndiana\nIowa\nKansas\nKentucky\nLouisiana\nMaine\nMaryland\nMassachusetts\nMichigan\nMinnesota\nMississippi\nMissouri\nMontana\nNebraska\nNevada\nNew Hampshire\nNew Jersey\nNew Mexico\nNew York\nNorth Carolina\nNorth Dakota\nOhio\nOklahoma\nOregon\nPennsylvania\nRhode Island\nSouth Carolina\nSouth Dakota\nTennessee\nTexas\nUtah\nVermont\nVirginia\nWashington\nWest Virginia\nWisconsin\nWyoming",
        "isVisible": true
      },
      "admissionyears.txt": {
        "text": "1819\n1959\n1912\n1836\n1850\n1876\n1788\n1787\n1845\n1788\n1959\n1890\n1818\n1816\n1846\n1861\n1792\n1812\n1820\n1788\n1788\n1837\n1858\n1817\n1821\n1889\n1867\n1864\n1788\n1787\n1912\n1788\n1789\n1889\n1803\n1907\n1859\n1787\n1790\n1788\n1889\n1796\n1845\n1896\n1791\n1788\n1889\n1863\n1848\n1890",
        "isVisible": true
      },
      "States.java": {
        "text": "/*\n * Analyzes data about states\n */\npublic class States {\n\n  private String[] stateNames;\n  private int[] admissionYears;\n\n  /*\n   * Constructor to create an States object with the specified\n   * arrays of state names and years they were admitted\n   */\n  public States(String[] stateNames, int[] admissionYears) {\n    this.stateNames = stateNames;\n    this.admissionYears = admissionYears;\n  }\n\n  /*\n   * Returns true if there are duplicate years in\n   * the admissionYears array, otherwise returns false\n   */\n  public boolean hasDuplicates() {\n    // TO DO #1: Traverse the admissionYears array to determine if there\n    // are duplicate values and return the result.\n\n\n    return false;\n  }\n  \n}",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-08-23T20:25:44.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:25:44.479+00:00\",\"changed\":[\"cloned from \\\"CSA U3L10-L3c_2022\\\"\"],\"cloned_from\":\"CSA U3L10-L3c_2022\"},{\"changed_at\":\"2022-09-09 19:30:10 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 19:31:33 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 19:33:03 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 19:41:20 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 19:41:40 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
