<Studio>
  <config><![CDATA[{
  "game_id": 33,
  "created_at": "2015-09-23T04:58:17.000Z",
  "level_num": "custom",
  "user_id": 1,
  "properties": {
    "skin": "studio",
    "failure_condition": "function () {\r\n  //return (Studio.sprite[0].y < -100 || Studio.sprite[0].y > 400 ||\r\n  //        Studio.sprite[0].x < -100 || Studio.sprite[0].y > 400);\r\n}",
    "maze": "[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,16,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]",
    "soft_buttons": [
      "leftButton",
      "rightButton",
      "downButton",
      "upButton"
    ],
    "instructions": "Add a second parameter to \"onscreen?\" for Sam's y coordinate and update the function so it keeps him safe on all four sides.",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "true",
    "first_sprite_index": "6",
    "edge_collisions": "false",
    "projectile_collisions": "false",
    "allow_sprites_outside_playspace": "true",
    "sprites_hidden_to_start": "false",
    "coordinate_grid_background": "true",
    "free_play": "true",
    "embed": "false",
    "protaganist_sprite_index": "0",
    "min_workspace_height": "1500",
    "default_num_example_blocks": "2",
    "disable_sharing": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "generate_function_pass_blocks": "true",
    "timeout_after_when_run": "false",
    "custom_game_type": "Sam the Bat",
    "callout_json": "[]",
    "disable_examples": "false",
    "markdown_instructions": "Add a second parameter to `onscreen?` for Sam's y coordinate and update the function so it keeps him safe on all four sides.",
    "never_autoplay_video": "false",
    "examples_required": "false",
    "maze_data": null
  }
}]]></config>
  <blocks>
    <start_blocks>
      <xml>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given Sam's x coordinate, check if he is both safe-left? and safe-right?</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">on-screen?</title>
          <functional_input name="STACK">
            <block type="functional_logical_and" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="safe-left?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">x</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_call" inline="false">
                  <mutation name="safe-right?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">x</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="on-screen?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_logical_and" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="safe-left?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">50</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_call" inline="false">
                  <mutation name="safe-right?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">50</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="on-screen?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">-50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_logical_and" inline="false">
              <functional_input name="ARG1">
                <block type="functional_call" inline="false">
                  <mutation name="safe-left?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">-50</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_call" inline="false">
                  <mutation name="safe-right?">
                    <arg name="x" type="Number"/>
                  </mutation>
                  <functional_input name="ARG0">
                    <block type="functional_math_number">
                      <title name="NUM">-50</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given Sam's x coordinate, return true if his x is greater than 50.</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">safe-left?</title>
          <functional_input name="STACK">
            <block type="functional_greater_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_parameters_get">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">x</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-left?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_greater_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-left?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">0</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_greater_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">0</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given Sam's x coordinate, return true if his x is less than 350.</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">safe-right?</title>
          <functional_input name="STACK">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_parameters_get">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">x</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">350</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-right?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">300</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">300</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">350</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-right?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">400</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">400</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">350</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_start_setValue" inline="false" deletable="false" movable="false" editable="false" id="start_block">
          <functional_input name="VALUE">
            <block type="functional_pass">
              <mutation name="on-screen?"/>
            </block>
          </functional_input>
        </block>
      </xml>
    </start_blocks>
    <toolbox_blocks>
      <xml>
        <category name="Number">
          <block type="functional_plus" inline="false"/>
          <block type="functional_minus" inline="false"/>
          <block type="functional_times" inline="false"/>
          <block type="functional_dividedby" inline="false"/>
          <block type="functional_sqrt" inline="false"/>
          <block type="functional_math_number">
            <title name="NUM">0</title>
          </block>
        </category>
        <category name="Boolean">
          <block type="functional_greater_than" inline="false"/>
          <block type="functional_less_than" inline="false"/>
          <block type="functional_number_equals" inline="false"/>
          <block type="functional_logical_and" inline="false"/>
          <block type="functional_logical_or" inline="false"/>
          <block type="functional_logical_not" inline="false"/>
          <block type="functional_boolean">
            <title name="VAL">true</title>
          </block>
        </category>
        <category name="Functions" custom="PROCEDURE"/>
      </xml>
    </toolbox_blocks>
  </blocks>
</Studio>