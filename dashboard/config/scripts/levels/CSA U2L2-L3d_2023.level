<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A clothing designer sells custom apparel, and they have created a `Shirt`(#e7e8ea) class to represent the shirts they create.**\r\n\r\n✅ **TO DO #1:** In the `Shirt`(#e7e8ea) class, write a no-argument constructor to assign default values to the instance variables:\r\n\r\n   * Assign a default name to the instance variable `size`(#e7e8ea), such as `\"small\"`(#e7e8ea)\r\n\r\n   * Assign a default value to the instance variable `price`(#e7e8ea), such as `5.99`(#e7e8ea)\r\n\r\n✅ **TO DO #2:** In `ClothesRunner.java`(#e7e8ea), instantiate a `Shirt`(#e7e8ea) object.\r\n\r\n✅ **TO DO #3:** Print the constructor and the values assigned to the instance variables for the `Shirt`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printShirtInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nShirt tShirt = new Shirt();\r\ntShirt.printShirtInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out **Help & Tips** tab ⬆️ for help with writing a no-argument constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Shirt Class",
    "bubble_choice_description": "A clothing designer sells custom apparel, and they have created a `Shirt` class to represent the shirts they create.",
    "thumbnail_url": "https://images.code.org/d1a4be4e76f35fb45c38b556089c1e77-tshirt.png",
    "start_sources": {
      "ClothesRunner.java": {
        "text": "public class ClothesRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Shirt object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject), and print the values assigned\n     * to the instance variables using the Shirt class printShirtInfo() method.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Shirt.java": {
        "text": "/*\n * Represents a custom shirt\n */\npublic class Shirt {\n\n  private String size;     // The size of a shirt\n  private double price;    // The price of a shirt\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the\n   * size and price instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n\n\n\n  \n\n  /*\n   * Prints the size and price of the shirt\n   */\n  public void printShirtInfo() {\n    System.out.println(\"Size: \" + size);\n    System.out.println(\"Price: \" + price);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\nKZifDFEGnbm9Hx3qHJ8=\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-03T19:21:17.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:21:17.792+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L3c_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L3c_2023\"},{\"changed_at\":\"2022-11-03 19:21:19 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 21:26:51 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:48:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:50:26 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:50:30 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:50:34 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:50:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:54:45 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 21:44:56 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 14:29:02 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:11:25 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:11:45 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:53:04 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
