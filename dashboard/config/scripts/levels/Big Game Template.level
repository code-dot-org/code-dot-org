<Studio>
  <config><![CDATA[{
  "game_id": 33,
  "created_at": "2015-02-09T21:58:11.000Z",
  "level_num": "custom",
  "user_id": 1,
  "properties": {
    "skin": "studio",
    "success_condition": "function () {\r\n}",
    "failure_condition": "function () {\r\n}",
    "maze": "[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,16,0,0,0,0],[16,0,0,0,0,0,16,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]",
    "embed": "false",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "true",
    "free_play": "true",
    "edge_collisions": "false",
    "projectile_collisions": "false",
    "allow_sprites_outside_playspace": "true",
    "sprites_hidden_to_start": "true",
    "coordinate_grid_background": "false",
    "default_num_example_blocks": "2",
    "disable_sharing": "false",
    "generate_function_pass_blocks": "true",
    "timeout_after_when_run": "false",
    "soft_buttons": [
      "downButton",
      "upButton"
    ],
    "step_speed": "50",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "custom_game_type": "Big Game"
  }
}]]></config>
  <blocks>
    <start_blocks>
      <xml>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-right?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">350</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-right?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">400</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">400</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">350</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Is the character visible on the right side of the screen?</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">safe-right?</title>
          <functional_input name="STACK">
            <block type="functional_less_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_parameters_get">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">x</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">350</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-left?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_greater_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">100</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="safe-left?">
                <arg name="x" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">0</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_greater_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">0</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Is the character visible on the left side of the screen?</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">safe-left?</title>
          <functional_input name="STACK">
            <block type="functional_greater_than" inline="false">
              <functional_input name="ARG1">
                <block type="functional_parameters_get">
                  <mutation>
                    <outputtype>Number</outputtype>
                  </mutation>
                  <title name="VAR">x</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">50</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_start_setFuncs" inline="false" deletable="false" movable="false" editable="false" id="game_funcs">
          <functional_input name="title">
            <block type="functional_call" id="game_title">
              <mutation name="title"/>
            </block>
          </functional_input>
          <functional_input name="subtitle">
            <block type="functional_call" id="game_subtitle">
              <mutation name="subtitle"/>
            </block>
          </functional_input>
          <functional_input name="background">
            <block type="functional_call" id="game_bg">
              <mutation name="bg"/>
            </block>
          </functional_input>
          <functional_input name="target">
            <block type="functional_call" id="game_target">
              <mutation name="target"/>
            </block>
          </functional_input>
          <functional_input name="danger">
            <block type="functional_call" id="game_danger">
              <mutation name="danger"/>
            </block>
          </functional_input>
          <functional_input name="player">
            <block type="functional_call" id="game_player">
              <mutation name="player"/>
            </block>
          </functional_input>
          <functional_input name="update-target">
            <block type="functional_pass" id="game_update_target">
              <mutation name="update-target"/>
            </block>
          </functional_input>
          <functional_input name="update-danger">
            <block type="functional_pass" id="game_update_danger">
              <mutation name="update-danger"/>
            </block>
          </functional_input>
          <functional_input name="update-player">
            <block type="functional_pass" id="game_update_player">
              <mutation name="update-player"/>
            </block>
          </functional_input>
          <functional_input name="collide?">
            <block type="functional_pass" id="game_collide">
              <mutation name="collide?"/>
            </block>
          </functional_input>
          <functional_input name="on-screen?">
            <block type="functional_pass" id="game_onscreen">
              <mutation name="onscreen?"/>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="distance">
                <arg name="px" type="Number"/>
                <arg name="py" type="Number"/>
                <arg name="cx" type="Number"/>
                <arg name="cy" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="distance">
                <arg name="px" type="Number"/>
                <arg name="py" type="Number"/>
                <arg name="cx" type="Number"/>
                <arg name="cy" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" editable="false">
          <mutation>
            <arg name="px" type="Number"/>
            <arg name="py" type="Number"/>
            <arg name="cx" type="Number"/>
            <arg name="cy" type="Number"/>
            <description>Given the player's x and y, and a character's x and y, determine how far apart they are</description>
            <outputtype>Number</outputtype>
          </mutation>
          <title name="NAME">distance</title>
          <functional_input name="STACK">
            <block type="functional_math_number">
              <title name="NUM">0</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="line-length">
                <arg name="a" type="Number"/>
                <arg name="b" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">20</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_minus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">20</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="update-target">
                <arg name="x" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="update-target">
                <arg name="x" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given the target's x coordinate, return the next x</description>
            <outputtype>Number</outputtype>
          </mutation>
          <title name="NAME">update-target</title>
          <functional_input name="STACK">
            <block type="functional_parameters_get" uservisible="false">
              <mutation>
                <outputtype>Number</outputtype>
              </mutation>
              <title name="VAR">x</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false">
              <mutation name="line-length">
                <arg name="a" type="Number"/>
                <arg name="b" type="Number"/>
              </mutation>
              <functional_input name="ARG0">
                <block type="functional_math_number">
                  <title name="NUM">20</title>
                </block>
              </functional_input>
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
          <functional_input name="EXPECTED">
            <block type="functional_minus" inline="false">
              <functional_input name="ARG1">
                <block type="functional_math_number">
                  <title name="NUM">20</title>
                </block>
              </functional_input>
              <functional_input name="ARG2">
                <block type="functional_math_number">
                  <title name="NUM">10</title>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="update-player">
                <arg name="key" type="Number"/>
                <arg name="y" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="update-player">
                <arg name="key" type="Number"/>
                <arg name="y" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="onscreen?">
                <arg name="x" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="collide?">
                <arg name="px" type="Number"/>
                <arg name="py" type="Number"/>
                <arg name="cx" type="Number"/>
                <arg name="cy" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="collide?">
                <arg name="px" type="Number"/>
                <arg name="py" type="Number"/>
                <arg name="cx" type="Number"/>
                <arg name="cy" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" deletable="false" movable="false" editable="false">
          <mutation>
            <arg name="a" type="Number"/>
            <arg name="b" type="Number"/>
            <description>Given two points on a number line, return the distance between them</description>
            <outputtype>Number</outputtype>
          </mutation>
          <title name="NAME">line-length</title>
          <functional_input name="STACK">
            <block type="functional_cond" inline="false">
              <functional_input name="COND0">
                <block type="functional_greater_than" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">a</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">b</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="VALUE0">
                <block type="functional_minus" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">a</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">b</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
              <functional_input name="DEFAULT">
                <block type="functional_minus" inline="false">
                  <functional_input name="ARG1">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">b</title>
                    </block>
                  </functional_input>
                  <functional_input name="ARG2">
                    <block type="functional_parameters_get">
                      <mutation>
                        <outputtype>Number</outputtype>
                      </mutation>
                      <title name="VAR">a</title>
                    </block>
                  </functional_input>
                </block>
              </functional_input>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given an sprite's x coordinate, determine if the sprite is visible on screen</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">onscreen?</title>
          <functional_input name="STACK">
            <block type="functional_boolean" uservisible="false">
              <title name="VAL">true</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <arg name="key" type="Number"/>
            <arg name="y" type="Number"/>
            <description>Given a keycode for direction and the player's y coordinate, return the new y</description>
            <outputtype>Number</outputtype>
          </mutation>
          <title name="NAME">update-player</title>
          <functional_input name="STACK">
            <block type="functional_parameters_get" uservisible="false" id="define_update_player">
              <mutation>
                <outputtype>Number</outputtype>
              </mutation>
              <title name="VAR">y</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <arg name="px" type="Number"/>
            <arg name="py" type="Number"/>
            <arg name="cx" type="Number"/>
            <arg name="cy" type="Number"/>
            <description>Given the player's x and y, and a character's x and y, determine if they have collided</description>
            <outputtype>Boolean</outputtype>
          </mutation>
          <title name="NAME">collide?</title>
          <functional_input name="STACK">
            <block type="functional_boolean" uservisible="false">
              <title name="VAL">false</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="onscreen?">
                <arg name="x" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="update-danger">
                <arg name="x" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_example" inline="false" uservisible="false">
          <functional_input name="ACTUAL">
            <block type="functional_call" inline="false" uservisible="false">
              <mutation name="update-danger">
                <arg name="x" type="Number"/>
              </mutation>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <arg name="x" type="Number"/>
            <description>Given the danger's x coordinate, return the next x</description>
            <outputtype>Number</outputtype>
          </mutation>
          <title name="NAME">update-danger</title>
          <functional_input name="STACK">
            <block type="functional_parameters_get" uservisible="false">
              <mutation>
                <outputtype>Number</outputtype>
              </mutation>
              <title name="VAR">x</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <outputtype>Image</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">target</title>
          <functional_input name="STACK">
            <block type="functional_sprite_dropdown" uservisible="false">
              <title name="SPRITE_INDEX">penguin</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <outputtype>String</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">title</title>
          <functional_input name="STACK">
            <block type="functional_string" uservisible="false">
              <title name="VAL">My Game</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <outputtype>Image</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">danger</title>
          <functional_input name="STACK">
            <block type="functional_sprite_dropdown" uservisible="false">
              <title name="SPRITE_INDEX">cat</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <outputtype>Image</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">player</title>
          <functional_input name="STACK">
            <block type="functional_sprite_dropdown" uservisible="false">
              <title name="SPRITE_INDEX">dog</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <outputtype>Image</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">bg</title>
          <functional_input name="STACK">
            <block type="functional_background_dropdown" uservisible="false">
              <title name="BACKGROUND">"cave"</title>
            </block>
          </functional_input>
        </block>
        <block type="functional_definition" inline="false" uservisible="false">
          <mutation>
            <outputtype>String</outputtype>
            <isfunctionalvariable>true</isfunctionalvariable>
          </mutation>
          <title name="NAME">subtitle</title>
          <functional_input name="STACK">
            <block type="functional_string" uservisible="false">
              <title name="VAL">Is so cool</title>
            </block>
          </functional_input>
        </block>
      </xml>
    </start_blocks>
    <toolbox_blocks>
      <xml>
        <category name="Number">
          <block type="functional_plus" inline="false"/>
          <block type="functional_minus" inline="false"/>
          <block type="functional_times" inline="false"/>
          <block type="functional_dividedby" inline="false"/>
          <block type="functional_sqrt" inline="false"/>
          <block type="functional_squared" inline="false"/>
          <block type="functional_pow" inline="false"/>
          <block type="functional_math_number">
            <title name="NUM">0</title>
          </block>
        </category>
        <category name="String">
          <block type="functional_string">
            <title name="VAL"/>
          </block>
        </category>
        <category name="Image">
          <block type="functional_sprite_dropdown">
            <title name="SPRITE_INDEX">dog</title>
          </block>
          <block type="functional_background_dropdown">
            <title name="BACKGROUND">"cave"</title>
          </block>
        </category>
        <category name="Boolean">
          <block type="functional_greater_than" inline="false"/>
          <block type="functional_less_than" inline="false"/>
          <block type="functional_number_equals" inline="false"/>
          <block type="functional_string_equals" inline="false"/>
          <block type="functional_logical_and" inline="false"/>
          <block type="functional_logical_or" inline="false"/>
          <block type="functional_logical_not" inline="false"/>
          <block type="functional_boolean">
            <title name="VAL">true</title>
          </block>
        </category>
        <category name="Conditionals">
          <block type="functional_cond_number" inline="false"/>
          <block type="functional_cond_string" inline="false"/>
          <block type="functional_cond_image" inline="false"/>
          <block type="functional_cond_boolean" inline="false"/>
        </category>
        <category name="Variables" custom="FUNCTIONAL_VARIABLE"/>
        <category name="Functions" custom="PROCEDURE"/>
      </xml>
    </toolbox_blocks>
  </blocks>
</Studio>