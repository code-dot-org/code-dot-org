<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-11-05T20:10:20.000Z",
  "level_num": "custom",
  "user_id": 155,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "write": null,
      "whileBlock": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "randomNumber_min_max": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "console.log": null
    },
    "edit_code": true,
    "embed": "false",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "false",
    "markdown_instructions": "# Boolean Operators in *while* Loops - Part 2\r\n\r\nWe just saw that you can create more complex boolean expressions for our `while` loops just like in an `if` statement. Let's try something a little more complex. \r\n\r\n# English and Logic Can Be Tricky\r\nOften you think about looping in terms of a condition that should make it stop, rather than the condition that should make the loop continue.  A condition to make the loop stop is the *logical inverse* of the condition that signals it to continue. Trying to invert logical statements can be tricky, so let's do a little practice.\r\n\r\n# Do This:\r\n\r\n**Starter code** is provided that rolls two dice while either one of them is less than or equal to 3.  \r\n\r\n* **Modify this code** so that the loop **stops when both dice have a value greater than 3**.\r\n* **Try it out and experiment** - change the condition and run the program several times. You should exit the loop the first time both dice have a value greater than 3 displayed.\r\n\r\n**Hint:** A NOT(`!`) operator might be helpful for this one.",
    "start_blocks": "var die1 = -1;\r\nvar die2 = -1;\r\nwhile (die1 <= 3 && die2 <= 3) { \r\n  die1 = randomNumber(1, 6);\r\n  die2 = randomNumber(1, 6);\r\n  write(\"Rolled a \" + die1 + \" and a \" + die2);\r\n}\r\nwrite(\"Done.\");",
    "instructions": "Change the boolean expression for the while loop so that it will roll until both dice are greater than 3. (Click to see full instructions)"
  }
}]]></config>
  <blocks/>
</Applab>