<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2016-10-12T17:57:35.000Z",
  "properties": {
    "options": {
      "skip_dialog": true,
      "css": "unplugged"
    },
    "title": "title",
    "content1": "description here",
    "markdown": "# Combining AND and OR\n\nYou can express more complex conditions by combining **AND** and **OR** in one statement.  You should use parentheses to group expressions together to make it clear which expressions are being \"and-ed\" or \"or-ed\" together. \n\nFor example: this statement will evaluate to true if the day is Tuesday or Thursday AND their age is 15 or 16.\n\n![](https://images.code.org/c21b4c39c34e16658924a1f16c02055b-image-1448061732098.06.36.png)\n<br>\n\n\n# Misconception Alert - using incomplete expressions with boolean operators\n\nMany beginning programmers make a mistake (which reasonable but wrong) while trying to write the expression above. Notice the subtle difference between the correct code above and this version...\n\n![](https://images.code.org/299555658c714c2426f8cf05490f9a6b-image-1448061740731.06.03.png)\n\nAn expression like: `(day == \"Tuesday\" || \"Thursday\")` is incorrect because unfortunately the computer cannot assume or infer that you are trying to compare \"Thursday\" to the value that is in the variable `day`.  \n\nBecause the string \"Thursday\" by itself isn't an expression that evaluates to **true** or **false** it *should not* be used as an expression in a boolean operator.\n\nEven more unfortunately, <code>(day == \"Tuesday\" || \"Thursday\")</code> **doesn't do what you might think**...it turns out it will run without error and it will *always* be true. \n\n\n\n<p></p>\n<details>\n<summary><strong>(optional) Read more about using single values in `if` statements</strong> (click to expand)</summary>\nIn JavaScript a value on its own, when used in an `if` statement, is *always true*.  For example: <code>if(\"Thursday\")</code> is true. <code>if(15)</code>...<code>if(23423)</code> both true.  This means that <code>if(day==\"Tuesday\" || \"Thursday\")</code> is also always true.  \n<br>\nSome single values such as <code>0</code> and the empty string <code>\"\"</code> evaluate to <strong>false</strong> inside an `if` statement.\n<br>\nThere are other examples of bizarre expressions that evaluate to **true** or **false** when used inside an `if` statement but almost none of them are used intentionally.\n</details>\n<br>\n\n<img src=\"https://images.code.org/addc9f770e5f25d3be4d656acabfd1f8-image-1446485780702.png\" style=\"width: 200px; float: right\">\n\nJust remember to follow the rules of boolean operators...\n\nThe boolean operators **OR** and **AND** *require* that there be an expression that evaluates to **true** or **false** on **both sides** of the operator.\n\nMost of the time you're going to use an expression that uses one of the comparison operators `< > == !=` or a function that returns a **true**/**false** value.\n\nLet's now try using an **AND** and an **OR** in one combined expression... \n\n<a class=\"btn btn-large btn-primary next-stage submitButton\">Continue</a>\n\n"
  },
  "published": true
}]]></config>
</External>
