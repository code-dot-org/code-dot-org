<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "##Investigate and Modify\r\n\r\nRun the program to observe the results.\r\n\r\nâœ… **TO DO:** Experiment with the program by making the following modifications. Change one line at a time, then run the program after each change to observe the results.\r\n\r\n1. In `Vlogger.java`(#e7e8ea), try changing the values assigned to the instance variables in the constructor to different values, then run the program. What do you notice about what is printed to the console?\r\n\r\n2. Comment out the lines inside the constructor, then run the program. What do you notice about the values that are assigned to the instance variables? Why do you think this happened?\r\n\r\n3. In `Vlogger.java`(#e7e8ea), add the following code:\r\n\r\n```\r\npublic Vlogger() {\r\n  name = \"new user\";\r\n  yearJoined = 2021;\r\n}\r\n```\r\n\r\nWhat happens when you run the program? Why do you think this happened?",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "project_template_level_name": "CSA U2L2-Constructors PBT_2023",
    "teacher_markdown": "1. Students should notice that the values they assign to the instance variables are then printed to the console because of the call to the `printVloggerInfo()` method in `VlogRunner.java`.\r\n\r\n2. When commenting out the lines inside the constructor that assign the values to the instance variables, Java assigns default values to the instance variables based on the default values for the data type. The `name` variable is assigned `null`, and the `yearJoined` variable is assigned `0`.\r\n\r\n3. Adding this code segment results in the following error:\r\n\r\n```\r\n/Vlogger.java:28: error: constructor Vlogger() is already defined in class Vlogger\r\n  public Vlogger() {\r\n         ^\r\n```\r\n\r\nThis indicates that there can only be one no-argument constructor in a class.",
    "encrypted_validation": "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\nM8+GFaBiV8mNNuoWN+qN0ZsO1mGfsA==\n",
    "start_sources": {
      "VlogRunner.java": {
        "text": "public class VlogRunner {\n  public static void main(String[] args) {\n\n    Vlogger valerie = new Vlogger();\n\n    System.out.println(ClassInfo.getConstructors(valerie));\n    \n    valerie.printVloggerInfo();\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Vlogger.java": {
        "text": "/*\n * Represents a vlogger on a social media app\n */\npublic class Vlogger {\n\n  private String name;        // The name of a vlogger\n  private int yearJoined;     // The year a vlogger joined the app\n\n  /*\n   * Sets name to \"new vlogger\" and yearJoined to 2022\n   */\n  public Vlogger() {\n    name = \"new vlogger\";\n    yearJoined = 2022;\n  }\n  \n  /*\n   * Prints the name of the vlogger and\n   * the year the vlogger joined the app\n   */\n  public void printVloggerInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Year Joined: \" + yearJoined);\n  }\n\n  /* ---- ðŸ”Ž ADD YOUR CODE BELOW THIS LINE ---- */\n\n\n\n  \n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ClassInfo.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ClassInfo {\n\n  public static String getAttributes(Object testObject) {\n    Class objectClass = testObject.getClass();\n    Class objectSuperClass = objectClass.getSuperclass();\n    \n    Field[] objectFields = objectClass.getDeclaredFields();\n    Field[] superFields = objectSuperClass.getDeclaredFields();\n    \n    ArrayList<String> classFieldsList = convertToList(Arrays.toString(objectFields));\n    ArrayList<String> superFieldsList = convertToList(Arrays.toString(superFields));\n\n    String className = objectClass.getSimpleName();\n    String superClassName = objectSuperClass.getSimpleName();\n    \n    String heading = \"\\n------------------------------\\n\";\n    \n    String classFieldsText = cleanFields(classFieldsList, className);\n    String superFieldsText = cleanFields(superFieldsList, superClassName);\n\n    String result = className + \" Attributes \" + heading + classFieldsText;\n\n    if (!superClassName.equals(\"Object\")) {\n      result += \"\\n>> inherited from \" + superClassName + \" class <<\\n\" + superFieldsText;\n    }\n\n    return result;\n  }\n\n  public static ArrayList<String> convertToList(String result) {\n    result = result.substring(1, result.length() - 1);\n    ArrayList<String> classFields = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = result.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = result.substring(0, comma);\n      classFields.add(currentField);\n      result = result.substring(comma + 2);\n      comma = result.indexOf(\",\");\n    }\n\n    classFields.add(result);\n    return classFields;\n  }\n\n  public static String cleanFields(ArrayList<String> classFields, String className) {\n    String result = \"\";\n\n    for (int index = 0; index < classFields.size(); index++) {\n      String currentField = classFields.get(index);\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      result += currentField + \"\\n\";\n    }\n\n    return result;\n  }\n\n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n\n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n\n  public static String getConstructors(Object testObject) {\n    Class objectClass = testObject.getClass();\n    String className = objectClass.getSimpleName();\n    Constructor[] objectConstructors = objectClass.getDeclaredConstructors();\n    \n    ArrayList<String> constructorsList = convertToList(Arrays.toString(objectConstructors));\n\n    String heading = \"\\n------------------------------\\n\";\n    String result = className + \" Constructors \" + heading;\n\n    for (String current : constructorsList) {\n      result += current + \"\\n\";\n    }\n    \n    return result;\n  }\n\n  public static String getValue(List<String> output, String lineToFind) {\n    String outputText = \"\";\n    String valueResult = \"\";\n\n    for (int index = 0; index < output.size(); index++) {\n      String current = output.get(index);\n      \n      if (current.indexOf(lineToFind) >= 0) {\n        outputText = current;\n        valueResult = outputText.substring(lineToFind.length());\n      }\n    }\n    \n    return valueResult.trim();\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-11-03T19:20:32.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:20:32.129+00:00\",\"changed\":[\"cloned from \\\"CSA Practice Level Template\\\"\"],\"cloned_from\":\"CSA Practice Level Template\"},{\"changed_at\":\"2022-11-03 19:20:34 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 13:41:09 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 16:36:37 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 16:38:05 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 16:49:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:05:32 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:06:01 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:06:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:06:49 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:10:18 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:11:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:11:36 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:12:36 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:13:00 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:13:55 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:14:41 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:18:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:18:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:18:24 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:00:16 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
