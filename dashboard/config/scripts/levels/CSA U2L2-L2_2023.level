<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "##Investigate and Modify\r\n\r\nExperiment with the program by making the following modifications, then run the program to observe the results.\r\n\r\nâœ… **TO DO:** In `Vlogger.java`(#e7e8ea), try changing the values assigned to the instance variables in the constructor to different values, then run the program. What do you notice about what is printed to the console?",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "project_template_level_name": "CSA U2L2-Constructors PBT_2023",
    "teacher_markdown": "1. Students should notice that the values they assign to the instance variables are then printed to the console because of the call to the `printVloggerInfo()` method in `VlogRunner.java`.\r\n\r\n2. When commenting out the lines inside the constructor that assign the values to the instance variables, Java assigns default values to the instance variables based on the default values for the data type. The `name` variable is assigned `null`, and the `yearJoined` variable is assigned `0`.\r\n\r\n3. Adding this code segment results in the following error:\r\n\r\n```\r\n/Vlogger.java:28: error: constructor Vlogger() is already defined in class Vlogger\r\n  public Vlogger() {\r\n         ^\r\n```\r\n\r\nThis indicates that there can only be one no-argument constructor in a class.",
    "start_sources": {
      "VlogRunner.java": {
        "text": "public class VlogRunner {\n  public static void main(String[] args) {\n\n    Vlogger valerie = new Vlogger();\n\n    ConstructorsHelper.printConstructors(valerie);\n    \n    valerie.printVloggerInfo();\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Vlogger.java": {
        "text": "/*\n * Represents a vlogger on a social media app\n */\npublic class Vlogger {\n\n  private String name;        // The name of a vlogger\n  private int yearJoined;     // The year a vlogger joined the app\n\n  /*\n   * Sets name to \"new vlogger\" and yearJoined to 2022\n   */\n  public Vlogger() {\n    name = \"new vlogger\";\n    yearJoined = 2022;\n  }\n  \n  /*\n   * Prints the name of the vlogger and\n   * the year the vlogger joined the app\n   */\n  public void printVloggerInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Year Joined: \" + yearJoined);\n  }\n\n  /* ---- ðŸ”Ž ADD YOUR CODE BELOW THIS LINE ---- */\n\n\n\n  \n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-03T19:20:32.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:20:32.129+00:00\",\"changed\":[\"cloned from \\\"CSA Practice Level Template\\\"\"],\"cloned_from\":\"CSA Practice Level Template\"},{\"changed_at\":\"2022-11-03 19:20:34 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 13:41:09 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 16:36:37 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 16:38:05 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 16:49:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:05:32 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:06:01 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:06:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:06:49 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:10:18 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:11:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:11:36 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:12:36 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:13:00 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:13:55 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:14:41 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:18:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:18:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 17:18:24 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:00:16 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 14:18:52 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 14:19:32 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-15 19:42:33 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
