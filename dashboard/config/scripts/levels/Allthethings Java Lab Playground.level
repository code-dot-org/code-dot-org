<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "This is a sample Playground level. It responds to clicks on the images that are in the program.",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "playground",
    "submittable": "false",
    "start_sources": {
      "Dice.java": {
        "text": "import org.code.playground.*;\nimport java.io.FileNotFoundException;\n\n// LESSON 1\npublic class Dice {\n\n  private ImageItem[] diceImages;\n\n  public Dice(String[] diceFiles, int xPos, int yPos) throws FileNotFoundException {\n    diceImages = new ImageItem[6];\n    \n\tfor (int i = 0; i < diceFiles.length; i++) {\n      diceImages[i] = new ImageItem(diceFiles[i], xPos, yPos,  50, 50);\n    }\n  }\n\n  public void displayDice(int value) {\n    Playground.board.addItem(diceImages[value - 1]);\n  }\n\n  public ImageItem getDice(int value) {\n    return this.diceImages[value - 1];\n  }\n\n  public void hideDice() {\n    for (ImageItem diceImage : this.diceImages) {\n    \tPlayground.board.removeItem(diceImage);\n    }\n  }\n}",
        "isVisible": true
      },
      "Balloon.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\n// LESSON 6\npublic class Balloon extends ClickableImage {\n\n  private boolean popped;\n  private int value;\n\n  public Balloon(String filename, int value,  int xPos, int yPos, int width, int height) throws FileNotFoundException {\n    super(filename, xPos, yPos, width, height);\n    this.value = value;\n    this.popped = false;\n  }\n\n  public int getValue() {\n    if (this.popped) {\n      return 0;\n    }\n    return value;\n  }\n\n  public boolean isPopped() {\n    return popped;\n  }\n\n  public boolean equals(Balloon otherBalloon) {\n    boolean status = false;\n    \n\tif (this.isPopped() == otherBalloon.isPopped()) {\n      status = true;\n    }\n\n    if (this.getValue() != otherBalloon.getValue()) {\n      status = false;\n    }\n\n    return status;\n  }\n\n\n  public void onClick() {\n    // Add check for valid move in Lesson 7\n    if (PopBalloonsGame.isValidMove(value)) {\n      this.popped = true;\n      try {\n      \tPopBalloonsGame.popBalloon(this, value);\n      } catch (FileNotFoundException e) {\n        // do nothing\n      }\n      Playground.board.removeItem(this);\n    }\n  }\n}",
        "isVisible": true
      },
      "RollButton.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\n// LESSON 1\npublic class RollButton extends ClickableImage {\n\n  private int diceRollLeft;\n  private int diceRollRight;\n  private int totalRoll;\n  \n  public RollButton(String filename,  int x, int y, int width, int height) throws FileNotFoundException {\n    super(filename, x, y, width, height);\n    this.diceRollLeft = 1;\n    this.diceRollRight = 1;\n    this.totalRoll = 0;\n  }\n\n  public int getDiceRollLeft() {\n    return diceRollLeft;\n  }\n\n  public int getDiceRollRight() {\n    return diceRollRight;\n  }\n\n  public int getTotalRoll() {\n    return totalRoll;\n  }\n\n  public void setTotalRoll(int newValue) {\n    totalRoll -= newValue;\n    System.out.println(\"Total roll is now: \" + this.getTotalRoll());\n  }\n\n  public void onClick() {\n    // In Lesson 1, have diceRollLeft and diceRollRight\n    // assigned specific values.\n    \n    diceRollLeft = (int)(Math.random() * 5 + 1);\n    PopBalloonsGame.updateDice(1, diceRollLeft);\n\n    \n    // Add in Lesson 9\n    if (PopBalloonsGame.canRollBoth()) {\n      diceRollRight = (int)(Math.random() * 5 + 1);\n      PopBalloonsGame.updateDice(2, diceRollRight);\n    }\n\n    totalRoll = diceRollLeft + diceRollRight;\n    PopBalloonsGame.calculateScore();\n\n    if (PopBalloonsGame.movesLeft()) {\n      PopBalloonsGame.showMessage(\"Pop balloons to total \" + totalRoll + \"!\", Color.BLACK);\n    }\n  }\n}",
        "isVisible": true
      },
      "PopBalloonsGame.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic final class PopBalloonsGame {\n\n  private static Dice diceLeft;\n  private static Dice diceRight;\n  private static Balloon[] balloons;\n  private static String[] popped;\n  private static RollButton rollButton;\n  \n  private static int score = 0;\n  private static int remaining = 0;\n\n  public static void play() throws FileNotFoundException, PlaygroundException {\n    createDice();\n    createRollButton(\"rollButton.png\");\n    \n    createBalloons();\t// add in Lesson 5\n    createPopped();\t\t// add in Lesson 5\n    \n    showIntro();\n\n    Playground.board.run();\n  }\n\n  // STARTER CODE\n  public static void showIntro() {\n    System.out.println(\"Pop the Balloons!\");\n    System.out.println(\"---------------------\");\n    System.out.println(\"This game involves balloons that are numbered 1 through 10.\");\n    System.out.println(\"Your goal is to pop all of them!\");\n    System.out.println(\"You may pop any combination of unpopped ballons to add up to the sum on the dice.\\n\");\n  }\n\n  // STARTER CODE\n  public static void showMessage(String text, Color textColor) {\n    System.out.println(\"\\n\\n\" + text + \"\\n\\n\");\n    TextItem textItem = new TextItem(text, 5, 10, textColor, Font.MONO,  FontStyle.BOLD, 10, 0);\n    Playground.board.addItem(textItem);\n  }\n\n  public static void showMessage(String text) {\n    PopBalloonsGame.showMessage(text, Color.BLACK);\n  }\n\n  // STARTER CODE\n  public static void createDice() throws FileNotFoundException {\n    String[] diceLeftFiles = {\"dice1.png\", \"dice2.png\", \"dice3.png\", \"dice4.png\", \"dice5.png\", \"dice6.png\"};\n    diceLeft = new Dice(diceLeftFiles, 100, 250);\n\n    String[] diceRightFiles = {\"dice1.png\", \"dice2.png\", \"dice3.png\", \"dice4.png\", \"dice5.png\", \"dice6.png\"};\n    diceRight = new Dice(diceRightFiles, 200, 250);\n    \n    diceLeft.displayDice(1);\n    diceRight.displayDice(1);\n  }\n\n  // STARTER CODE\n  public static void createRollButton(String filename) throws FileNotFoundException {\n    rollButton = new RollButton(filename, 300, 300, 100, 50);\n    Playground.board.addClickableImage(rollButton);\n  }\n\n  // STARTER CODE\n  public static void createBalloons() throws FileNotFoundException {\n    balloons = new Balloon[10];\n    int balloonValue = 1;\n    int xPos = 0;\n    int yPos = 20;\n\n    for (int i = 0; i < balloons.length; i++) {\n      String balloonFile = \"balloon\" + balloonValue + \".png\";\n      balloons[i] = new Balloon(balloonFile, balloonValue,  xPos, yPos, 75, 100);\n      Playground.board.addClickableImage(balloons[i]);\n\n      xPos += 80;\n      if (i == 4) {\n        yPos += 100;\n        xPos = 0;\n      }\n      \n      balloonValue++;\n    }\n  }\n\n  // STARTER CODE\n  public static void createPopped() throws FileNotFoundException {\n    popped = new String[10];\n    \n    for (int i = 0; i < popped.length; i++) {\n      if (i == 0 || i == 5) {\n        popped[i] = \"poppedTeal.png\";\n      }\n      else if (i == 1 || i == 6) {\n        popped[i] = \"poppedPurple.png\";\n      }\n      else if (i == 2 || i == 7) {\n        popped[i] = \"poppedOrange.png\";\n      }\n      else if (i == 3 || i == 8) {\n        popped[i] = \"poppedGreen.png\";\n      }\n      else {\n        popped[i] = \"poppedBlue.png\";\n      }\n    }\n  }\n\n  // LESSON 4\n  public static void updateDice(int value, int diceRoll) {\n\tif (value == 1) {\n      diceLeft.hideDice();\n      Playground.board.addItem(diceLeft.getDice(diceRoll));\n    }\n    \n    if (value == 2) {\n      diceRight.hideDice();\n      Playground.board.addItem(diceRight.getDice(diceRoll));\n    }\n  }\n\n  // LESSON 5\n  public static void calculateScore() {\n    score = 0;\n    remaining = 0;\n\n    Color[] textColors = {Color.RED, Color.PURPLE, Color.ORANGE, Color.BLACK};\n    int randomIndex = (int)(Math.random() * textColors.length);\n\n    for (int i = 0; i < balloons.length; i++) {\n      if (!balloons[i].isPopped()) {\n        score += balloons[i].getValue();\n        remaining++;\n      }\n    }\n\n    showMessage(\"Your score is now \" + score + \".\", textColors[randomIndex]);\n  }\n\n  // LESSON 5\n  public static void popBalloon(Balloon balloon, int value) throws FileNotFoundException {\n    String[] popSounds = {\"pop1.wav\", \"pop2.wav\", \"pop3.wav\", \"pop4.wav\", \"pop5.wav\"};\n\tint randomIndex = (int)(Math.random() * popSounds.length);\n    \n    for (int i = 0; i < popped.length; i++) {\n      if (value - 1 == i) {\n        System.out.println(\"--- PLAYING SOUND ---\\n\\n\" + popSounds[randomIndex] + \"\\n\\n---\\n\");\n        Playground.board.playSound(popSounds[randomIndex]);\n        balloon.setFilename(popped[i]);\n        Playground.board.removeItem(balloon);\n        System.out.printf(\"Popping index %d at x: %d y: %d\", i, balloon.getX(), balloon.getY());\n        Playground.board.addItem(new ImageItem(popped[i], balloon.getX(), balloon.getY(), 75, 100));\n      }\n    }\n  }\n\n  // LESSON 6 and 9\n  public static boolean movesLeft() {\n    boolean canContinue = false;\n    int currentTotalRoll = rollButton.getTotalRoll();\n\n    for (int i = 0; i < balloons.length; i++) {\n      Balloon currentBalloon = balloons[i];\n      \n      for (int j = 0; j < balloons.length; j++) {\n        Balloon nextBalloon = balloons[j];\n\n        if (!currentBalloon.equals(nextBalloon)) {\n          // In Lesson 6, just have canContinue = true.\n\n          // Add in Lesson 9\n          int totalBalloonValue = currentBalloon.getValue() + nextBalloon.getValue();\n          if (currentBalloon.getValue() == currentTotalRoll || totalBalloonValue == currentTotalRoll) {\n            return true;\n          }\n        }\n      }\n    }\n\n    // Add in Lesson 7\n    if (!canContinue) {\n      try {\n        gameOver();\n      } catch (Exception e) {\n        System.out.println(\"Caught an error!\");\n      }\n    }\n\n    return canContinue;\n  }\n\n  // LESSON 7\n  public static boolean isValidMove(int value) {\n    boolean isValid = false;\n\n    if (value > rollButton.getTotalRoll()) {\n      showMessage(\"That doesn't add up to \" + rollButton.getTotalRoll() + \".\", Color.BLACK);\n    }\n    else {\n      rollButton.setTotalRoll(value);\n      isValid = true;\n    }\n\n    return isValid;\n  }\n\n  // LESSON 8\n  public static void gameOver() throws FileNotFoundException {\n    String endingSound = \"gameOver.wav\";\n\tif (score > 0) {\n      Playground.board.playSound(\"gameOver.wav\");\n      showMessage(\"Game over! Your score was \" + score + \".\");\n    }\n    else if (remaining > 0) {\n      Playground.board.playSound(\"gameOver.wav\");\n      showMessage(\"Game over! You had \" + remaining + \" balloons remaining.\", Color.BLACK);\n    }\n    else {\n      endingSound = \"win.wav\";\n      Playground.board.playSound(\"win.wav\");\n      showMessage(\"You popped all of the balloons -- YOU WIN!\", Color.BLACK);\n    }\n\n    try {\n      Playground.board.exit();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Caught an exception!\");\n    }\n  }\n\n  // LESSON 9\n  public static boolean canRollBoth() {\n    boolean status = true;\n    \n    if (balloons[6].isPopped() && balloons[7].isPopped() && balloons[8].isPopped()) {\n      showMessage(\"Balloons 7, 8, and 9 are popped, so you can only roll once dice.\", Color.BLACK);\n      diceRight.hideDice();\n      status = false;\n    }\n\n    return status;\n  }\n}",
        "isVisible": true
      },
      "Main.java": {
        "text": "import org.code.playground.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    try {\n      PopBalloonsGame.play();\n    } catch (Exception e) {\n      System.out.println(\"Caught an exception!\");\n    }   \n  }\n}",
        "isVisible": true
      }
    },
    "starter_assets": {
      "balloon1.png": "13e6a3a7-3052-4ba3-ba73-4ab87e1fe43a.png",
      "balloon2.png": "dfd8c1cb-bb59-4f69-9612-20f81e3566d1.png",
      "balloon3.png": "13a99f23-0f74-47da-9e05-8b46922d5b6e.png",
      "balloon4.png": "caada1a2-65ae-4153-875a-93904c0298ad.png",
      "balloon5.png": "ead586e3-e228-4f98-b6d6-635ecdf0551e.png",
      "balloon6.png": "1f5505e0-132b-4039-9e5b-353ab5bfc9b6.png",
      "balloon7.png": "0153f4fe-4dd7-4fda-aa93-c7e8579d5bcc.png",
      "balloon8.png": "c243ac39-5b13-4bd0-8804-2123b058b7e7.png",
      "balloon9.png": "836484dd-0c13-4142-9ccc-7fcd4d2a0968.png",
      "balloon10.png": "513cdff5-0f7e-4bf7-8b79-3c70c0a85a6a.png",
      "dice1.png": "cf6f6e4f-a4c9-471e-8f30-f439d0e23084.png",
      "dice2.png": "85878622-89bc-430b-8a5d-cd53c31f8f9a.png",
      "dice3.png": "9bbbd6a2-2779-4036-b69c-866c03be1aca.png",
      "dice4.png": "fa4a5304-0289-4d7c-9bc3-0f34957c13b2.png",
      "dice5.png": "d55efc95-8c44-49e4-afd3-64e3915d1845.png",
      "dice6.png": "633b160a-4fc1-4ce1-a187-d5cd10cbb6d2.png",
      "poppedBlue.png": "aa48aaf5-f2d2-48cc-9295-6eccecc7d0d4.png",
      "poppedGreen.png": "b2adac40-ed14-4872-9e57-af544f7581f2.png",
      "poppedOrange.png": "334b802f-9a34-4ce8-b9a3-9cb0b961ca02.png",
      "poppedPurple.png": "5fa9cc88-c09c-4921-9127-8de43e14cc66.png",
      "poppedTeal.png": "a458c258-e305-4e30-a67b-d0b541540fb6.png",
      "rollButton.png": "60e223ed-5fb3-44a7-8006-2c0fa591609b.png",
      "diceRoll.wav": "6d462b45-3e48-4d75-8970-5ca71747009f.wav",
      "gameOver.wav": "ed42cfac-f7d9-44e4-aba6-f3a9b2d247d4.wav",
      "pop.wav": "c0f9d64e-205a-4815-852b-cc414ceffe4c.wav",
      "win.wav": "4890997c-0c57-4a22-85ec-a6e3f3356c80.wav"
    }
  },
  "game_id": 68,
  "created_at": "2021-08-12T17:14:36.000Z",
  "level_num": "custom",
  "user_id": 22,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2021-09-21 00:15:22 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2021-09-21 00:27:03 +0000\",\"changed\":[],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2021-09-21 00:50:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"},{\"changed_at\":\"2021-09-21 16:54:25 +0000\",\"changed\":[],\"changed_by_id\":22,\"changed_by_email\":\"jessica+localtest@code.org\"}]"
}]]></config>
</Javalab>
