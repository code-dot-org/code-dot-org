<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-03T13:58:08.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">School</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to store the clubs at a school.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">School</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Club</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Club</code> objects\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SchoolRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">School</code> object.\r\n\r\n2. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code>.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "School Clubs",
    "bubble_choice_description": "Create a `School` class that contains an `ArrayList` to store clubs at a school.",
    "thumbnail_url": "https://images.code.org/ce3f72344059da7b020d2a08dffaf47e-school.png",
    "encrypted_exemplar_sources": "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\n0rNJ3tJ9kfhRCJ2SVAmnvMeuHUM=\n",
    "encrypted_validation": "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\nkdoNiJlbZ1GESlqCLZQe\n",
    "start_sources": {
      "SchoolRunner.java": {
        "text": "public class SchoolRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a School object.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "School.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a School\n */\npublic class School {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Club objects\n   * -----------------------------------------------------------------------------\n   */\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a constructor that initializes the list to an empty list\n   * -----------------------------------------------------------------------------\n   */\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an accessor method that returns the list of Club objects\n   * -----------------------------------------------------------------------------\n   */\n  public ArrayList<Club> getClubs() {\n    return null;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Club.java": {
        "text": "/*\n * Represents a Club\n */\npublic class Club {\n  private String name;\n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 3
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 4
      }
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-03T13:58:08.794+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L6b_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L6b_2023\"},{\"changed_at\":\"2023-04-03 13:58:10 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:34:06 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 19:22:29 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-02 21:04:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:04:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:04:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:06:17 +0000\",\"changed\":[\"start_sources\",\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:06:29 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:06:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:06:54 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:12:20 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:12:46 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:12:50 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:12:57 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:13:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:14:38 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:25:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:25:56 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:26:08 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:26:15 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:26:40 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:15:42 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:17:17 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:17:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:41:44 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:41:56 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:42:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:42:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:43:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:43:30 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:45:27 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:46:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:46:10 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:46:37 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:47:16 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:47:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:47:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:48:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:48:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:48:44 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:48:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:48:53 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:03:31 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"}]"
}]]></config>
</Javalab>
