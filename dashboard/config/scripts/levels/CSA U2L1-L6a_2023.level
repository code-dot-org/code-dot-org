<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "long_instructions": "**Create the `Dessert`(#e7e8ea) class by declaring instance variables for the specified attributes, and refactor the `Cookie`(#e7e8ea) class to be a subclass of the `Dessert`(#e7e8ea) class.**\r\n\r\n✅ **TO DO:** Write the `Dessert`(#e7e8ea) class, and refactor the `Cookie`(#e7e8ea) class.\r\n\r\n1. In the `Dessert`(#e7e8ea) class, declare instance variables for the following attributes:\r\n\r\n   * the flavor of a dessert\r\n   \r\n   * the price of a dessert\r\n\r\n2. Refactor the `Cookie`(#e7e8ea) class to be a subclass of the `Dessert`(#e7e8ea) class.\r\n\r\n3. In `FoodTruckRunner.java`(#e7e8ea):\r\n\r\n   **a.** Instantiate a `Dessert`(#e7e8ea) object and a `Cookie`(#e7e8ea) object\r\n   \r\n   **b.** Print the instance variables for the `Dessert`(#e7e8ea) and `Cookie`(#e7e8ea) objects to the console using `ClassInfo.getAttributes(nameOfObject)`(#e7e8ea)\r\n\r\n::: details [**🔦 What is `ClassInfo.getAttributes()`(#e7e8ea)?**]\r\n  \r\nThe `ClassInfo.getAttributes()`(#e7e8ea) is a hidden support method that returns the instance variables in a class as a `String`(#e7e8ea). Call the method by passing an object as its argument, such as:\r\n\r\n```\r\nDog fido = new Dog();\r\nSystem.out.println(ClassInfo.getAttributes(fido));\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, creating a subclass, and instantiating objects.\r\n\r\n📝 **COMMENT:** Be sure to add comments to note what your code does.\r\n\r\n🖥️ **TEST:** Test your program to check if your code achieves the expected result.\r\n\r\n🎉 **RUN:** Run your program to see the result of your code!\r\n\r\n## 🎯 Goal\r\n\r\n![](https://images.code.org/170ea66d8783febe2db9bcd54a7288d7-image-1667489998731.png)",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/inheritance",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Desserts and Cookies",
    "bubble_choice_description": "Create the `Dessert` class by declaring instance variables for the specified attributes, and refactor the `Cookie` class to be a subclass of the `Dessert` class.",
    "thumbnail_url": "https://images.code.org/20490e89a01048e57894bdb3fca5d498-cookie.png",
    "encrypted_validation": "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\nJX+6pdmCIZryuu7PRWDg\n",
    "encrypted_exemplar_sources": "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\nngZRAytGbto36lTMc+pi1hFmeQzGIOiL\n",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ------------------------------------- TO DO -------------------------------------\n     * ✅ Instantiate Dessert and Cookie objects, then print the instance variables for\n     * the Dessert and Cookie objects to the console using ClassInfo.getAttributes().\n     * ---------------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Dessert.java": {
        "text": "/*\n * Represents a dessert that can be sold at a food truck\n */\npublic class Dessert {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ✅ Declare instance variables for the flavor and price of a dessert.\n   * -------------------------------------------------------------------\n   */\n\n\n\n  \n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Cookie.java": {
        "text": "/*\n * Represents a cookie that can be sold at a food truck\n * Cookie is a type of Dessert\n */\npublic class Cookie {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ✅ Refactor the Cookie class to be a subclass of Dessert.\n   * -------------------------------------------------------------------\n   */\n\n  private String flavor;     // The flavor of a cookie\n  private double price;      // The price of a cookie\n  private boolean isChewy;   // Whether or not a cookie is chewy\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "ClassInfo.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ClassInfo {\n\n  public static String getAttributes(Object testObject) {\n    Class objectClass = testObject.getClass();\n    Class objectSuperClass = objectClass.getSuperclass();\n    \n    Field[] objectFields = objectClass.getDeclaredFields();\n    Field[] superFields = objectSuperClass.getDeclaredFields();\n    \n    ArrayList<String> classFieldsList = convertToList(Arrays.toString(objectFields));\n    ArrayList<String> superFieldsList = convertToList(Arrays.toString(superFields));\n\n    String className = objectClass.getSimpleName();\n    String superClassName = objectSuperClass.getSimpleName();\n    \n    String heading = \"\\n------------------------------\\n\";\n    \n    String classFieldsText = cleanFields(classFieldsList, className);\n    String superFieldsText = cleanFields(superFieldsList, superClassName);\n\n    String result = className + \" Attributes \" + heading + classFieldsText;\n\n    if (!superClassName.equals(\"Object\")) {\n      result += \"\\n>> inherited from \" + superClassName + \" class <<\\n\" + superFieldsText;\n    }\n\n    return result;\n  }\n\n  public static ArrayList<String> convertToList(String result) {\n    result = result.substring(1, result.length() - 1);\n    ArrayList<String> classFields = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = result.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = result.substring(0, comma);\n      classFields.add(currentField);\n      result = result.substring(comma + 2);\n      comma = result.indexOf(\",\");\n    }\n\n    classFields.add(result);\n    return classFields;\n  }\n\n  public static String cleanFields(ArrayList<String> classFields, String className) {\n    String result = \"\";\n\n    for (int index = 0; index < classFields.size(); index++) {\n      String currentField = classFields.get(index);\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      result += currentField + \"\\n\";\n    }\n\n    return result;\n  }\n\n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n\n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n\n  public static String findField(ArrayList<String> classFields, String typeToFind) {\n    String result = \"MISSING\";\n    \n    for (int index = 0; index < classFields.size(); index++) {\n      String current = classFields.get(index);\n      \n      if (current.indexOf(typeToFind) > 0) {\n        result = ClassInfo.removeClassName(current, \"Instrument\");\n        result = ClassInfo.removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n\n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    }\n\n    return result;\n  }\n\n  public static String getFieldType(String currentField) {\n    currentField = currentField.trim();\n    String[] possibleTypes = {\"boolean\", \"int\", \"double\", \"String\"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result;\n  }\n\n  public static String getConstructors(Object testObject) {\n    Class objectClass = testObject.getClass();\n    String className = objectClass.getSimpleName();\n    Constructor[] objectConstructors = objectClass.getDeclaredConstructors();\n    \n    ArrayList<String> constructorsList = convertToList(Arrays.toString(objectConstructors));\n\n    String heading = \"\\n------------------------------\\n\";\n    String result = className + \" Constructors \" + heading;\n\n    for (String current : constructorsList) {\n      result += current + \"\\n\";\n    }\n    \n    return result;\n  }\n\n  public static String getValue(List<String> output, String lineToFind) {\n    String outputText = \"\";\n    String valueResult = \"\";\n\n    for (int index = 0; index < output.size(); index++) {\n      String current = output.get(index);\n      \n      if (current.indexOf(lineToFind) >= 0) {\n        outputText = current;\n        valueResult = outputText.substring(lineToFind.length());\n      }\n    }\n    \n    return valueResult.trim();\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-11-01T17:31:17.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-01T17:31:17.803+00:00\",\"changed\":[\"cloned from \\\"CSA U2L1-L4_2023\\\"\"],\"cloned_from\":\"CSA U2L1-L4_2023\"},{\"changed_at\":\"2022-11-01 17:31:19 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-01 18:19:28 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:37:06 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:45:31 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:45:39 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:46:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:05:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:05:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:07:24 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:07:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:08:13 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:09:10 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:13:00 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:15:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:16:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:16:12 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:16:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:39:59 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:40:48 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 21:20:49 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:51:42 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:14:36 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:14:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:14:43 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
