<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">StateSorter</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">sortStates()</code> method to sort <code style=\"background-color: #ececec; color: black; font-weight: bold;\">stateNames</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">data</code> in increasing order by the values in <code style=\"background-color: #ececec; color: black; font-weight: bold;\">data</code>. Use a selection, insertion, or merge sort to sort the lists.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">StateRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">sortStates()</code> method and print the updated list.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with implementing a sorting algorithm.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/selection-sort",
      "/courses/csa-2023/guides/insertion-sort",
      "/courses/csa-2023/guides/merge-sort"
    ],
    "video_key": "csa_sorting_algorithms",
    "display_name": "State Populations",
    "bubble_choice_description": "Sort a list of states in order by their populations.",
    "thumbnail_url": "https://images.code.org/9513e77948fce6f8c29039cc875efe38-united-states.png",
    "encrypted_validation": "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\nfNsHjXhisl3GybyXLN6m29CxzCDRV4lomQ==\n",
    "start_sources": {
      "StateRunner.java": {
        "text": "import java.util.ArrayList;\n\npublic class StateRunner {\n  public static void main(String[] args) {\n\n    ArrayList<String> stateData = FileReader.toStringList(\"populations.txt\");\n\n    ArrayList<String> stateNames = StateSorter.getStates(stateData);\n    ArrayList<Integer> populations = StateSorter.getData(stateData);\n\n    System.out.println(\"----------Unsorted List of States and Populations----------\");\n    System.out.println(StateSorter.dataToString(stateNames, populations));\n\n    System.out.println(\"\\n----------Sorted List of States and Populations----------\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the sortStates() method and print the updated list.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "StateSorter.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Manages lists of data about states\n */\npublic class StateSorter {\n\n  /*\n   * Sorts the list of state names and data in increasing order\n   */\n  public static void sortStates(ArrayList<String> stateNames, ArrayList<Integer> data) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Sort stateNames and data in increasing order based on the values in data.\n     * -----------------------------------------------------------------------------\n     */\n    \n\n    \n  }\n\n  /*\n   * Returns an ArrayList containing the name of the states\n   */\n  public static ArrayList<String> getStates(ArrayList<String> statesData) {\n    ArrayList<String> stateNames = new ArrayList<String>();\n\n    for (int index = 0; index < statesData.size(); index++) {\n      String currentData = statesData.get(index);\n      int comma = currentData.indexOf(\",\");\n      String currentState = currentData.substring(0, comma);\n      stateNames.add(currentState);\n    }\n    \n    return stateNames;\n  }\n\n  /*\n   * Returns an ArrayList containing the data for each state\n   */\n  public static ArrayList<Integer> getData(ArrayList<String> statesData) {\n    ArrayList<Integer> stateData = new ArrayList<Integer>();\n\n    for (int index = 0; index < statesData.size(); index++) {\n      String currentData = statesData.get(index);\n      int comma = currentData.indexOf(\",\");\n      int currentValue = Integer.parseInt(currentData.substring(comma + 1));\n      stateData.add(currentValue);\n    }\n\n    return stateData;\n  }\n\n  /*\n   * Returns a String containing each state name and their population data\n   */\n  public static String dataToString(ArrayList<String> stateNames, ArrayList<Integer> data) {\n    String result = \"\";\n    \n    for (int index = 0; index < stateNames.size(); index++) {\n      result += stateNames.get(index) + \": \" + data.get(index) + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static ArrayList<String> toStringList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    return temp;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Integer> toIntList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Integer> data = new ArrayList<Integer>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Integer.parseInt(currentValue));\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Double> toDoubleList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Double> data = new ArrayList<Double>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Double.parseDouble(currentValue));\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "populations.txt": {
        "text": "Alabama,4833722\nAlaska,735132\nArizona,6626624\nArkansas,2959373\nCalifornia,38332521\nColorado,5268367\nConnecticut,3596080\nDelaware,925749\nFlorida,19552860\nGeorgia,9992167\nHawaii,1404054\nIdaho,1612136\nIllinois,12882135\nIndiana,6570902\nIowa,3090416\nKansas,2893957\nKentucky,4395295\nLouisiana,4625470\nMaine,1328302\nMaryland,5928814\nMassachusetts,6692824\nMichigan,9895622\nMinnesota,5420380\nMississippi,2991207\nMissouri,6044171\nMontana,1015165\nNebraska,1868516\nNevada,2790136\nNew Hampshire,1323459\nNew Jersey,8899339\nNew Mexico,2085287\nNew York,19651127\nNorth Carolina,9848060\nNorth Dakota,723393\nOhio,11570808\nOklahoma,3850568\nOregon,3930065\nPennsylvania,12773801\nRhode Island,1051511\nSouth Carolina,4774839\nSouth Dakota,844877\nTennessee,6495978\nTexas,26448193\nUtah,2900872\nVermont,626630\nVirginia,8260405\nWashington,6971406\nWest Virginia,1854304\nWisconsin,5742713\nWyoming,582658",
        "isVisible": true,
        "tabOrder": 3
      }
    },
    "encrypted_exemplar_sources": "+eivztRkLKfvXT/O591rGJhL5PrwqOe5Y1VolL3shwupss7u/HpdyTDNYUXW\noFv5DYN8chOlCYyAY66fwe/WVQDMgm1hT97XHvCybDFGBtcsc0oR+Yoz+rgx\nsJotdRXQIlzZsaAm3x2Mg0Bz6lyAY3YPLqkUMYBOq1Xr0k2eWlwxzI9aPxG2\nGdytrLIHtLBrVWmDP7ADHTIkKoUrdLvc8ezLddfy5gunerzkhQvdVkulcaJM\nJb0npBcSM6Cxa17RHlFjLXYGsld7SJqLTKv1SzTTBVSO6eaG/D2JRhODCuGh\nTQ94tPt+5C0xtLSJmqczEALPm8wQ0CTHLTZqaSt5sK57hZYucG4Dd4UDUGNv\n/ZjY2Wu5ROW21ePZp1LQxEGqr2Z3FRW9R4u5fSEUAeIVIZMBZuYBC3dJPk8T\nd6tuua6bUvLsWWGwcnYqZfn5MROldzfs4Zb57jZeDP8eAJfprVd/ll9q0EYZ\n6Fz5NBsk9IkAPIZIPY+qBTMrc6VSA9klDz+fd4u11xn8XHEZc+jwUwAN3zx+\nvLc8Y4SABtX7e1KVUzjwvoQv4sQzx9R8ZIbNuZNmr3xUZCMWSTDrKgE5kaUz\nnM04OH3TBAJuNHR3dMa45zQftBQb5nhsdyYMBp9/QwNSgQ10/bJCX7Py+BMB\nBXeIdYVp6Ior4N3FWcwCB7NpuFG1NCOg4MsM/3Z5Oqz3h3yxYUDlOgFNfvI0\nXJ+vq6KpMn7MM1+t7bm3X6pqyuLDJXPKepTWAMiC+u+afHi87IoAFMyNbX3U\nzq/D68KloS2k0zd9Yv/vw/Oabw7jlaQXaU7jzPgkFK5AZN8q0Qwp8YsXlrIl\ntwu+jra9kdT+F/pQBAgBu2K9T7g5rqifYn4fptXt+5kcnfZ1xo1htT9fVLuV\nfqnCntLH3fzCZxFov5lATf7HwaYHHXnPNRFtUa5uEHUoINaJXM23l08XxXL6\nD9zQ7qw6olShw0fi7YkO6Y76DPgokmufFTspmn554QpZqF+LGDLs/A+NkACQ\nofUDgbgWWduwiNYlrr8KTXv0Ob44Yuuhsp3ou+BfQMGrinlVwDoicvCLx4I/\nVTOAesKpPgErI5OTKfhbJmlj+2iCXpXfRHVrITvWdhHqLUwWUCC8spFbMxP4\nkVUPbvJX9T67kJfAkDBk/HO/f6TRGwNispagFrr0sowKTvVLdmmf0d82Gmhs\nrDayCxv83xeObxer8cW1epJKC0bCv18XLEmR1eeQ48dDN8slx20KNJY4bREi\niYwsJFiD3HOArzujAZzlujbX1QuJ99PH7DKXBSFNeAI/lOfKmM1OtvDLBs1O\nhl3nvv3UBYvrbQJEjkEaBuW3eizNKDvUVgNlw1nJXHggkcyk9V9GbD/BE5ch\n/DDax10ADL6rjjotCn/tVE1RxBi1DRxcLTOeX36049kzMc+oBvYCsX+mEIE3\n4PKije+G3fGllI5PxnbfTXLoNezgomFPJlei1hBPpRomQeHbCLBd7buARa1P\nr/B2Jx/rX0FrOfC2UoFbO0rl5aAJAj0GdS8fvvAczYejvBVa3F/BkILHslXl\nfCR6n6r5rVv8OCFmrEFdVf6J0WpcNM+ECx1kgnEB9FzL4T1hg66y7JKKRfUu\na6JYI6NH2hpp2RYeN+rAJMMVRZbRkCzPMaCbYzMD4RmK/tsSmZd6eBes7joY\nV5ea5KHKBxJlR+HIjkJSwNEObx9QI/WhXuvEEZUUlqfoLqW9r9TOj5CHWvoO\nXee7XIiYExz0PaNWmg0sMTys32yu9+Ea7+UVsjFIOF1pRia6HQ8s2EmQddvx\nEV6k8hNnUuiI1SCSFXt/ZY2j6BhDsaO0VIwF4vLNTpvBbtBMIOkouM091d83\nhyO06BoD6rTTqNbIRq2ebkmvQu8+CbTvZNHbk4jdnYUYZHyYSBnG9WLyZbcz\nFnrrASDLhK/I3/+D4J5H5QmqPYYDS4l3Mc4YS25UtyvN6Wj2cZnegXSVa5Q4\ntmMlXodXrID8GqGdvTMBsW0j0DW8GR+mFYZ3kJHSkVesNUPIl67dg06b5cxz\nALTsws7UlUnwBVdzwWoWc1S8EJi2TeR94FDOpvqvuor8zcXSWOqGaowu2t+u\nA7hPc7lsQU2BnY4PWAsTijgwpKfEX1EOWIvBuPOT2/oiVOyigPi7u+M660+Z\n4d9NflZJQAjXfoofjJIBVCJAZcBcXRqT/dcmqHIIueV39o3tg4pZNE/8SEGS\n+BSjpiXMbcBInpoBgBYOqwgJM3aaqzuaDfSpXDNPrdko//Gs0Oh4/FBnyb50\nz5cw2zOdjvatgmLJbYLj0YGqeBGZnejRI5C3/JU1w/5T4P1m4V4qX/DSUl9m\nqsOCunehKf638TxuNJXStcrxxiHT/zc5eHW0gwvVnjxTyQ7DtcSyGqkQYOul\nS77zWBnXbOj6amtiZg69NHIoUsSi1Srt5ALWWenjr5BNpiSDuisbu+NXQK/D\nCITWuoT7BDV3C/R4Kg1rq8MFF0IZgZ58M1gbKXubSjT88xcCUJrx9kOhWI4d\nH38CCc9YhNdMndEda+AjSlWYIafk/oKOULFBd6s80xbQQzr3drkO6TZzS+UR\n5zlyVluqUjP3gIek6pi78VKnjDJvplKoGlZ4MeabhFsbXAY/XA71En/zj7ue\n4XRNaCynPO+1ssgW4/bg85oytJ2r9PzYEgUwSO6JbGZP4uaLFNRQAdhqRUsO\ndXz+AlaVSRZ+dhjLS+vXm4LC9/qHTI/iDKHmG/JZswS14PyscURhdXtxFAZW\nPoh/hfpUR78PpczXjTRb6VpJd7hkYEaoP5pHSoL01lbmmofeLHo4d2tHGzez\nBY80PJxeJyGVCLPnyJuakWrrNHasNaV7CbTM710F46XLuajyuw/aZvMT3b6w\nhskJIGOjVDypXlP4vBN6xbe3r/Vnz4jJFq4oTpyoYTou0i5/BD2JWUqUt0kU\npzQZSTXr3s8wJPV4S56oL7c2DucNqSvy+ne4yc2Bxclt4w+2o1jXO+nf0fNH\nE67ZnyhcbUBEzJ3h0yYWefQCrA3mWZIkuFRdWOKWtYzQL/moHq6WWqpz7zU7\nhS9Rl/NfSJba3A58xdIVWnCc5Tt+GCTGgx6YODx4iPmP7OnaE/tAatzBgHJo\nv5S76G6RWOW7omlDySTUyGusl3up80ZjBQn5swnA/XSo8BJscfXcIVAvwu5M\n0eMenC67jVCBdsrJY+j+OxdFpPbcDk91DyXqdczrX7Ab6MTOuHWtz9o74CoM\n4QxlozVNWKaeo4kKn2Nlfvi8NWVEjwa7NqBKlcEtfK5agwf0Ns4TWIwvyX8J\nKSnjgzgrJ8ShMa/pjzz2WnZC9WJre5V2rxYF4Q7y+zyRBabW7vEF4FUxbKRK\nJJwnV1GiI8SOur3AnXIemiZtNreIWyawuq2cPzJk0xJDl+zeVImVdS504Ick\nkJoumisoc8mBDrfnpcWuStk0QZ0e0VptPmGrOgi+g5ZR3Lzym8EAtgoMfpeo\n9cqcFxX26B6CqUy9xxLHP454RuYDhbTQncbWaTvMn5cqdmP/X6bi2TcaaLW8\nGScD3sNXL00mpWyZdWBx8oKY9uUHw6WlPT9XcHEPH+ZdQ6yvpd9bEdivIgjr\nd5//1nT+KuHyGwZqGS/vc8ndBE+AXVOUMtB69F9x2EPIvPtON6cFLu8izYm5\n3apiLQhDELi1VUZXplzbFEZIPjdJfK9LliSZ02DMjLql6jJHSK8IdCalzD77\nM9GQDmPasFbpZpuk86IjLT9hpmanE37cdOi/0FuPJm3KNdhNpKEkUQiUcIw6\n9PyzI8RyFlrSlhp/l84QPlQjVahO+go8cBesp/evF+zlridqPFlK7EjDSYRV\nLlOQUBtWEIrCaZFshe3jhQeViVPy5BaOKTkZLOl0opxT6awu5OyqwYanl/p4\n2jNiAJFhYx/2oovYDVM11v6F0dM8sYVAdkG9z2DasFxQUL91pwr8XY+wic+A\nZE/eXkXGL7+9vdr3aOGe9dw5nmHJ4kd3Ky4vxo1T2V8nWAnHPQ2hbu3KdCbL\nDyAMsPb0CQg0VM/ChrLhve5nv4a4xd8bPlgA5QsBga+t2HJnEQm7pR0hK+ZY\ni7pfec6d3xOrwJzdycJW0uSnfWStdMcd15T4RgDsozcbAUm4EadM655cVpB+\noN35mCKge81X9kN1ZQhnrPP4kKZKOcIULwAnDLTO6e7zPnMlbIXWeD7f5Wog\nwwivilwEsBrKoKUkvKOYjGdx7UNMuCDfg0LDTHlXBk66OpSLE0VndkAdDk3d\nygCIiDKbjCVj0KVKCA1bzaWDBZ5Tz2KgCEPLwve6Fbo+pGVgbqLRwsxjjDXE\noGB1nFfOaPg2aHccx2BsY5ApJL/2OunT0fJ2+ojIME+DYvLadOTMWRFD0M0i\n7E1iUFhk79ZR+dS7gyOfwSc03bWkG+VDijsRU4oYVgCoT6P1idxaYT1r6Kal\nl7BdcahnJGg/Dp9/LGQ9XobLa1pUe7vLKl3F8pMdXiKBytDFz2xv0INOxxGv\nVzR4dTUJJroe9XhsvKoKa9LqJmXhkf6fjtf+/j2eLCIsbHcUHDjlGPIudsu2\nMLiWjnPnrhHM2WV8uPmjGe0ziwbKUauBHzLtI4bAlSk2a8pqOD7eFzWf5jO+\nkplDyDt5WwwCh4rbtllqXH8nP3ovjmXgTS9y6Cg5+5psI6ChB/tXUcwEZ4ou\nW7oteXSmDToC3yGH9yB9Y8gyS/xl+U5X8DUUEiOstlQA7dHnEmRt59V2F+79\nvtmP8GeSrT9/wPwDGXebUy+tmaW2l91Xk1wJBgcqIGbfnEEaps+AZIGE6oQL\n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\nyHe430dG4A==\n"
  },
  "game_id": 68,
  "created_at": "2023-04-14T14:10:32.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-14T14:10:32.496+00:00\",\"changed\":[\"cloned from \\\"CSA U8L7-L8c_2023\\\"\"],\"cloned_from\":\"CSA U8L7-L8c_2023\"},{\"changed_at\":\"2023-04-14 14:10:34 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:30:50 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 02:22:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 02:24:07 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 02:24:18 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 02:24:23 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 02:24:29 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 02:24:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
