<Applab>
  <config><![CDATA[{
  "properties": {
    "skin": "applab",
    "validation_enabled": "false",
    "code_functions": {
      "onEvent": null,
      "button": null,
      "textInput": null,
      "textLabel": null,
      "dropdown": null,
      "getText": null,
      "setText": null,
      "getNumber": null,
      "setNumber": null,
      "checkbox": null,
      "radioButton": null,
      "getChecked": null,
      "setChecked": null,
      "image": null,
      "getImageURL": null,
      "setImageURL": null,
      "playSound": null,
      "stopSound": null,
      "playSpeech": null,
      "showElement": null,
      "hideElement": null,
      "deleteElement": null,
      "setPosition": null,
      "setSize": null,
      "setProperty": null,
      "getProperty": null,
      "write": null,
      "getXPosition": null,
      "getYPosition": null,
      "setScreen": null,
      "rgb": null,
      "open": null,
      "createCanvas": null,
      "setActiveCanvas": null,
      "line": null,
      "circle": null,
      "rect": null,
      "setStrokeWidth": null,
      "setStrokeColor": null,
      "setFillColor": null,
      "drawImageURL": null,
      "getImageData": null,
      "putImageData": null,
      "clearCanvas": null,
      "getRed": null,
      "getGreen": null,
      "getBlue": null,
      "getAlpha": null,
      "setRed": null,
      "setGreen": null,
      "setBlue": null,
      "setAlpha": null,
      "setRGB": null,
      "getColumn": null,
      "startWebRequest": null,
      "setKeyValue": null,
      "getKeyValue": null,
      "createRecord": null,
      "readRecords": null,
      "updateRecord": null,
      "deleteRecord": null,
      "onRecordEvent": null,
      "getUserId": null,
      "drawChart": null,
      "drawChartFromRecords": null,
      "getPrediction": null,
      "moveForward": null,
      "moveBackward": null,
      "move": null,
      "moveTo": null,
      "dot": null,
      "turnRight": null,
      "turnLeft": null,
      "turnTo": null,
      "arcRight": null,
      "arcLeft": null,
      "getX": null,
      "getY": null,
      "getDirection": null,
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "penRGB": null,
      "show": null,
      "hide": null,
      "speed": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "setTimeout": null,
      "clearTimeout": null,
      "timedLoop": null,
      "stopTimedLoop": null,
      "getTime": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "moduloOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRound": null,
      "mathAbs": null,
      "mathMax": null,
      "mathMin": null,
      "mathRandom": null,
      "mathPow": null,
      "mathSqrt": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "declareAssign_x_prompt": null,
      "declareAssign_x_promptNum": null,
      "console.log": null,
      "console.clear": null,
      "declareAssign_str_hello_world": null,
      "substring": null,
      "indexOf": null,
      "includes": null,
      "length": null,
      "toUpperCase": null,
      "toLowerCase": null,
      "declareAssign_list_abd": null,
      "declareAssign_list_123": null,
      "accessListItem": null,
      "listLength": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "join": null,
      "declareAssign_object": null,
      "getValue": null,
      "addPair": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null,
      "comment": null,
      "pinMode": null,
      "digitalWrite": null,
      "digitalRead": null,
      "analogWrite": null,
      "analogRead": null,
      "boardConnected": null,
      "var myLed = createLed": null,
      "var myButton = createButton": null,
      "var mySensor = createCapacitiveTouchSensor": null,
      "__.on": null,
      "__.off": null,
      "__.toggle": null,
      "__.blink": null,
      "__.pulse": null,
      "colorLeds[0].on": null,
      "colorLeds[0].off": null,
      "colorLeds[0].toggle": null,
      "colorLeds[0].blink": null,
      "colorLeds[0].pulse": null,
      "stop": null,
      "color": null,
      "intensity": null,
      "led.on": null,
      "led.off": null,
      "led.blink": null,
      "led.toggle": null,
      "led.pulse": null,
      "buzzer.frequency": null,
      "buzzer.note": null,
      "buzzer.stop": null,
      "buzzer.playNotes": null,
      "buzzer.playSong": null,
      "accelerometer.getOrientation": null,
      "accelerometer.getAcceleration": null,
      "isPressed": null,
      "holdtime": null,
      "soundSensor.value": null,
      "soundSensor.getAveragedValue": null,
      "soundSensor.setScale": null,
      "soundSensor.threshold": null,
      "lightSensor.value": null,
      "lightSensor.getAveragedValue": null,
      "lightSensor.setScale": null,
      "lightSensor.threshold": null,
      "tempSensor.F": null,
      "tempSensor.C": null,
      "toggleSwitch.isOpen": null,
      "onBoardEvent": null,
      "ledScreen.on": null,
      "ledScreen.off": null,
      "ledScreen.toggle": null,
      "ledScreen.display": null,
      "ledScreen.clear": null,
      "ledScreen.scrollNumber": null,
      "ledScreen.scrollString": null,
      "compass.getHeading": null
    },
    "encrypted": "false",
    "embed": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "never_autoplay_video": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "hide_view_data_button": "false",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "fail_on_lint_errors": "false",
    "debugger_disabled": "false",
    "widget_mode": "true",
    "libraries_enabled": "false",
    "ai_enabled": "false",
    "start_blocks": "/**************************\n * GLOBAL VARIABLE FOR SCREENMODEL\n * ***********************/\n\nvar GLOBALID = 0;\n\n/**************************\n * LABEL\n * ***********************/\n\nfunction Label(id, x, y, w, h) {\n  this.id = id + GLOBALID;\n  this.x = x;\n  this.y = y;\n  this.w = w;\n  this.h = h;\n  GLOBALID +=1;\n}\n\n//Puts the label on the screen\nLabel.prototype.draw = function() {\n  textLabel(this.id, \"\");\n  setProperty(this.id, \"background-color\", \"black\");\n  setPosition(this.id, this.x, this.y, this.w, this.h);\n};\n\n//Deletes the label from the screen\nLabel.prototype.delete = function() {\n  deleteElement(this.id);\n};\n\n//Updates label\nLabel.prototype.update = function(x, y, w, h) {\n  this.x = x;\n  this.y = y;\n  this.w = w;\n  this.h = h;\n  setPosition(this.id, this.x, this.y, this.w, this.h);\n};\n\nLabel.prototype.printLabel = function() {\n  var tempObj = {};\n  tempObj.id = this.id;\n  tempObj.x = this.x;\n  tempObj.y = this.y;\n  tempObj.w = this.w;\n  tempObj.h = this.h;\n  console.log(tempObj);\n};\n\n\n/**************************\n * SCREEN\n * ***********************/\n\n\n//Constructor for Screen object.\n//Screen holds an array of Labels, and index to help with creating new labels,\n//and other cosmetic properties.\nfunction Screen() {\n  this.labels = [];\n  this.bg = rgb(randomNumber(0, 255), randomNumber(0, 255), randomNumber(0, 255));\n  //setProperty(\"screen1\", \"background-color\", this.bg);\n}\n\n//Add a new label to the screen\n//takes a Label object as an argument\nScreen.prototype.pushLabel = function(label) {\n  this.labels.push(label);\n  label.draw();\n};\n\nScreen.prototype.popLabel = function() {\n  if(this.labels.length > 0) {\n    var tempLabel = this.labels.pop();\n    tempLabel.delete();\n  }\n};\n\nScreen.prototype.setBg = function(bg) {\n  this.bg = bg;\n};\n\nScreen.prototype.getBg = function() {\n  return this.bg;\n};\n\nScreen.prototype.reloadScreen = function() {\n  //setProperty(\"screen1\", \"background-color\", this.bg);\n  for(var i = 0; i < this.labels.length; i++) {\n    this.labels[i].draw();\n  }\n};\n\nScreen.prototype.clearScreen = function() {\n  setProperty(\"screen1\", \"background-color\", \"white\");\n  for(var i = 0; i < this.labels.length; i++) {\n    this.labels[i].delete();\n  }\n};\n\nScreen.prototype.printScreen = function() {\n  var tempObj = {};\n  tempObj.labels = this.labels;\n  tempObj.bg = this.bg;\n  console.log(tempObj);\n};\n\n\n/**************************\n * SCREEN MODEL\n * ***********************/\n\n\n//Always starts with a blank screen\nfunction ScreenModel() {\n  var tempScreen = new Screen();\n  this.screens = [tempScreen];\n  this.index = 0;\n}\n\n//Returns current screen as a screen object\nScreenModel.prototype.getScreen = function() {\n  return this.screens[this.index]; \n};\n\n//Updates current screen with new screen object.\nScreenModel.prototype.saveScreen = function(newScreen) {\n  this.screens[this.index] = newScreen;\n};\n\n//Moves to the next screen and returns it\nScreenModel.prototype.nextScreen = function() {\n  var curScreen = this.screens[this.index];\n  curScreen.clearScreen();\n  this.index += 1;\n  if(this.index == this.screens.length) {\n    //We're at the end of the screens, so make a new one and return it.\n    var tempScreen = new Screen();\n    this.screens.push(tempScreen);\n  }\n  var newScreen = this.screens[this.index];\n  newScreen.reloadScreen();\n  return newScreen;\n};\n\n//Goes to last screen and returns it\nScreenModel.prototype.prevScreen = function() {\n  var curScreen = this.screens[this.index];\n  curScreen.clearScreen();\n  if(this.index > 0) {\n    this.index -= 1;\n  }\n  var newScreen = this.screens[this.index];\n  newScreen.reloadScreen();\n  return newScreen;\n};\n\nScreenModel.prototype.getNumScreens = function() {\n  return this.screens.length;\n};\n\n\n\n/**************************\n * START OF PROGRAM XYZ\n * ***********************/\n\n\n\n\n\n//Global Vars\nvar dragging = false;\nvar origEvent = {};\nvar curEvent = {};\nvar DRAGLABELID = \"DRAGGINGLABEL\";\nvar screenModel = new ScreenModel();\nvar IMGURL = \"https://cdn.glitch.global/863b2e2c-c3b7-405e-8ece-1585b4e83e88/dschneider_a_landscape_painting_of_a_road_up_a_tall_hill_with_a_7ba37816-7587-41ff-a076-0c582e3b823d.png?v=1680305929843\";\n\n//Setting up the widget\nvar curScreen = screenModel.getScreen();\nsetProperty(\"screen1\", \"image\", IMGURL);\n\nonEvent(\"screen1\", \"mousedown\", function(e) {\n  if(inRange(e)) {\n    dragging = true;\n    textLabel(DRAGLABELID, \"\");\n    setProperty(DRAGLABELID, \"background-color\", \"black\");\n    origEvent.x = e.x;\n    origEvent.y = e.y;\n    curEvent.x = e.x;\n    curEvent.y = e.y;\n    drawLabel(DRAGLABELID);\n  }\n});\nonEvent(\"screen1\", \"mouseup\", function(e) {\n  if(dragging && inRange(e)) {\n    endDrag(e);\n  }\n});\nonEvent(\"screen1\", \"mousemove\", function(e) {\n  if(dragging && inRange(e)) {\n    curEvent.x = e.x;\n    curEvent.y = e.y;\n    drawLabel(DRAGLABELID);\n  }\n  if(dragging & !inRange(e)) {\n    endDrag(e);\n  }\n});\n\nfunction endDrag(e) {\n  curEvent.x = e.x;\n  curEvent.y = e.y;\n  var tempw = (curEvent.x - origEvent.x);\n  var temph = (curEvent.y - origEvent.y);\n  var tempLabel = new Label(\"label\", origEvent.x, origEvent.y, tempw, temph);\n  curScreen.pushLabel(tempLabel);\n  deleteElement(DRAGLABELID);\n  dragging = false;\n}\n\n\nfunction inRange(e) {\n  return e.y > 40 && e.y < 410 && e.x > 40 && e.x < 560;\n}\n\nfunction drawLabel(labelID) {\n  setPosition(labelID, origEvent.x, origEvent.y, (curEvent.x - origEvent.x), (curEvent.y - origEvent.y));\n}\n\nonEvent(\"undoButton\", \"click\", function( ) {\n  curScreen.popLabel();\n});\n\nonEvent(\"nextButton\", \"click\", function() {\n  screenModel.saveScreen(curScreen);\n  curScreen = screenModel.nextScreen();\n});\n\nonEvent(\"backButton\", \"click\", function() {\n  screenModel.saveScreen(curScreen);\n  curScreen = screenModel.prevScreen();\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "start_html": "<div id=\"designModeViz\" class=\"appModern clip-content\" tabindex=\"1\" data-radium=\"true\" style=\"width: 600px; height: 450px; display: none;\"><div class=\"screen\" tabindex=\"1\" data-theme=\"default\" id=\"screen1\" style=\"display: block; height: 450px; width: 600px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255);\"><button id=\"undoButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 25px; width: 100px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 245px; top: 425px;\">Undo</button><button id=\"nextButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 25px; width: 100px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 500px; top: 425px;\">Next</button><button id=\"backButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 25px; width: 100px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 0px; top: 425px;\">Back</button></div></div>",
    "preload_asset_list": null
  },
  "game_id": 41,
  "created_at": "2023-03-28T22:42:55.000Z",
  "level_num": "custom",
  "user_id": 14639,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-03-28 22:43:39 +0000\",\"changed\":[\"published\",\"validation_enabled\",\"code_functions\",\"preload_asset_list\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-28 22:53:27 +0000\",\"changed\":[],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-28 22:54:39 +0000\",\"changed\":[\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-28 22:55:02 +0000\",\"changed\":[\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-28 22:56:49 +0000\",\"changed\":[\"start_blocks\",\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-28 22:57:46 +0000\",\"changed\":[\"start_blocks\",\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-28 22:58:06 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-28 22:58:31 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-28 22:59:10 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-28 22:59:13 +0000\",\"changed\":[\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-28 23:08:59 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-28 23:10:49 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-29 00:42:51 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-29 01:08:47 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-31 22:50:15 +0000\",\"changed\":[\"start_blocks\",\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-31 23:07:32 +0000\",\"changed\":[\"start_blocks\",\"start_html\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-31 23:08:52 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-31 23:12:45 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-31 23:16:15 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-31 23:17:45 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-31 23:24:51 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-31 23:40:23 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-31 23:40:55 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-31 23:53:38 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>