<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A coach manages a sports team at the school, and they need help creating a program to manage their team.**\r\n\r\n✅ **TO DO #1:** In the `Team`(#e7e8ea) class, declare instance variables named `teamName`(#e7e8ea) and `numAthletes`(#e7e8ea) for the team name and the number of athletes on a team.\r\n\r\n✅ **TO DO #2:** Write a no-argument constructor to assign default values to the instance variables, such as `\"new team\"`(#e7e8ea) for the team name and `5`(#e7e8ea) for the number of athletes on a team.\r\n\r\n✅ **TO DO #3:** In `TeamRunner.java`(#e7e8ea), instantiate a `Team`(#e7e8ea) object.\r\n\r\n✅ **TO DO #4:** Print the constructor and the values assigned to the instance variables for the `Team`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printTeamInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nTeam soccer = new Team();\r\nsoccer.printTeamInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, writing no-argument constructors, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Team Class",
    "bubble_choice_description": "A coach manages a sports team at the school, and they need help creating a program to manage their team.",
    "thumbnail_url": "https://images.code.org/153e2ae6a64d6c57317641ab8812c9a7-sports.png",
    "start_sources": {
      "TeamRunner.java": {
        "text": "public class TeamRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Team object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject).\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Team.java": {
        "text": "/*\n * Represents a school sports team\n */\npublic class Team {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Declare instance variables for the team name and number of athletes.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables for the team name and number of athletes.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /*\n   * Prints the name of the team and the number\n   * of athletes on the team\n   */\n  public void printTeamInfo() {\n    System.out.println(\"Team Name: \" + teamName);\n    System.out.println(\"Number of Athletes: \" + numAthletes);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "hTjCH07naH1pONdt+LfObM/lPDKdMUI17da6zBUF0UAUSSUm9j8vvFiVSqzy\ntoYXGGM9eiE8fZnIsa8e8s4D7JIlAsZzAKt7Xp/LmEp5h85coJKE3HNG1dTL\ntpt7QlgiwEALwelAZn9n4rEvhUvM4iFe5a7J+tqPrJZ4LjkyxR+qKqUdDviy\nVOG+drz1tIlBlvzceyU0SknHs/0ILJqmAzT27QocZ996J5K3ynhriEmPGyr1\nBRkfstXNl3cVdMFEh3w6UA/Gqw0JBOw97TI/MlD+8Rcbgp8nQqvi8Q4BlysA\nGGpOQK1Y5LFbe2Igp7ecydQkpP5xxWqE9sbi4ruyCMnojZfk8A4CdvXIqtUI\noxx5TyDp8DEoV+b9/H1ta9Ak/LhktlEfpPXcQuEr30c9WosBrkGlCxTCRxEt\nPdZXvOLk6y6C/WC2xYo0JO7udhYfzevseudhmU2fHZ85yoVKsqASrbkKwLBj\nukRqieVfEZID/PHEqQxxQiVkJLVNst0HFs0YwKiWnxojsC7+rOYDQIKoT/z/\nDlv6XjslyBAAvR1LvUiC9dJbZFR1Sljuxh8QVICMbzdO0nXpkx6Vo1V7il2z\nZLMFYLlUczMQLg7aZpxMkUhRx2dKDWf0xSaQbiPANXlXQbzXYUqzGWCix6Qz\nFMb09Rn5hGNv1k5ViLbPWKuzCJ7gL1YUXevJy1XLzmGFsdvVPbjQgwwkDpAk\nzZyBMzphCnCL5YY73yGWl+me7YYC+MTnvqw1WxMEhQNkBZM4Mbg+5zVo/htR\ngD1hPOQWhm1e9/TG7PSZq4HG+sbDRBGYKNiDdZbgq6QaxDyOwpaKy3eeKmb4\ncOAO6rpsIw7PgHvJrujLxRx5+bKLvchFJYTyET9UWuy6YRmQNHIVVc4bU2kf\nrn5nRE2UPJoH15qQO1wtKoYsQn6MfEp5RM6pXyYCtBpDV64WGKv8/2tCD3qc\nwEBFZRAnaaNgWUrGxtOjT/ALtQYN7i0nSJ37YDs8R4bx2hjCCUZkMophdCO1\n0vHO2cKi/8F3mND18l9u5wWCLRLlmIrCyBjvnPM+VdwX6WNY2Cqwt5Rf9o0K\nP9JugWJdVo3xA1+v+E9EWWimGpL9j5GD8ObX5vwdXALeX3z6Z8qfKBhLv9zH\nxlhoGvVgKxOiawiLfr7GclpM65TtRHS6HFV4OdxV44oKjR9BHkfdA4SQAAAh\n+oi/abSNy/r67fmv33LFT1QE7bWNRwXbFH6nXEsxRVcuioU4gmcdS81Kcgam\nfWIpZksH86mvoi7jH91R817WqTd1BtpK8z6siuLGyJ0jAdY+ZvUjaAJZ1eVM\nW/1Kmk+JzPDRUf2MrFigzJn64+BP59MdaWwbYsH0CCKN6g7oLEOShQa3mSEN\n5VzbQOFeLWZz+WU4ik7cpczo21g/E4+otutPC0n0e4hiw459G8Xtj0XQwGbF\nxUSjbNkQPbwD0+eaVXEHgPQbikOe28VnpYHFg6aiumIocaO0dkYX+Mty9GhZ\n7mh0CWAhQLuXVK4+5NOBhLO00QmKOvFgCptJbE4zF4cU3H8/OyTcajZbxkOG\nCDxtvEod6dsRKakm+VhmFCwZruuH6uqs9Nh33iFhJZKu23vNHdNWe7/SSAei\naWXJKJmRawnoFrXQX711tJZarUe8c4647fPaxRln7e2Cd+hY2wHBRmxSirTu\nKQnFsKcwEUj799c2sU+h6KMOtJZsvtx0IIS/Nb4BrZCujvIGmeCpxHRJbc9A\nTUCG4dgU9hgemZQX7WZt580ghLeRGhGn2ihxrSsozUCy/QsIrxsUO5Y2vss/\nJHsK0cM+fIoq6BqUeuq30qNRuaQ3k/w1hTnsU6DPyV/ZFSOG2Y/LbH3uI1V2\ngT4HWMoyVgUTzO5l1tI9Jz4NOTuHM3tr3cni3OEqbevBNprTU3NviW6uOK5I\njlyNhOxeSoYjBOxFIv4fVV9pQehctIPZFrr8UI+040VQ2LOs8xkQso4hzufB\n6CVrbY+fsC0tUdA7gsE56uH3+AimBqsvlUlT1VZiln1hDw3LbtO9S7B890RK\naJvLeFrY5P8ztO/Ubz/GmF1z/0QdWH89ZzOFndsPQ0saigqrqIZjJ7Kfilsq\nM0LcuKoBme5AD+Pc/AOlmAzhNU2BHgNsbSPilPU5eIJxyQrEa5reXTZESpcg\nxKmK21YMAsiYxhM5lGxODBu6kzFGrRZRmr5C7G+oi41M2HK+zVzTrCBrJjS7\nrNv2UPiBJtmn5LXXiesqkTbaMbjnRDq6vVWcqSfVGQtn4FXHnF7e3eqxCIc/\nry0Ki/AI8qn56Mk4g7UUIJTsJJJ9qnYnj7aNnHynjF8w5F8oNzdRDCVN8GN1\nNXQYefHAL2b4p+u1BLyFX4umbbMQnrhWZHZKFopxkb4WSG83KwaKnfpRh8Mk\n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\n8DT3sBoLZHPOUifVg83i\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-03T19:23:06.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:23:06.504+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L5a_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L5a_2023\"},{\"changed_at\":\"2022-11-03 19:23:08 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:37:44 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:39:17 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:39:55 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:27:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:27:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:28:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:28:12 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:28:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:29:41 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:49:10 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 21:58:30 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:24:20 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:56:44 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:56:46 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:57:38 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:57:40 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:57:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:57:52 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:59:17 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
