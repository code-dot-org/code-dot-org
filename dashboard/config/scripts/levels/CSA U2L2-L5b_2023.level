<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A coach manages a sports team at the school, and they need help creating a program to manage their team.**\r\n\r\n✅ **TO DO:** Write the `Team`(#e7e8ea) class and instantiate a `Team`(#e7e8ea) object.\r\n\r\n1. In the `Team`(#e7e8ea) class:\r\n\r\n   **a.** Declare instance variables for the team name and the number of athletes on a team.\r\n   \r\n   **b.** Write a no-argument constructor to assign default values to the instance variables, such as `\"new team\"`(#e7e8ea) for the team name and `5`(#e7e8ea) for the number of athletes on a team.\r\n\r\n2. In `TeamRunner.java`(#e7e8ea):\r\n\r\n   **a.** Instantiate a `Team`(#e7e8ea) object\r\n   \r\n   **b.** Print the constructor for the `Team`(#e7e8ea) object to the console using `ClassInfo.getConstructors(nameOfObject)`(#e7e8ea)\r\n   \r\n   **c.** Print the values assigned to the instance variables for the `Team`(#e7e8ea) object to the console by calling the `printTeamInfo()`(#e7e8ea) method.\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, writing no-argument constructors, and instantiating objects.\r\n\r\n📝 **COMMENT:** Be sure to add comments to note what your code does.\r\n\r\n🖥️ **TEST:** Test your program to check if your code achieves the expected result.\r\n\r\n🎉 **RUN:** Run your program to see the result of your code!\r\n\r\n## 🎯 Goal\r\n\r\n![](https://images.code.org/50d17705d5f5f40125d5bab40aca1efd-image-1667839748885.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Team Class",
    "bubble_choice_description": "A coach manages a sports team at the school, and they need help creating a program to manage their team.",
    "thumbnail_url": "https://images.code.org/153e2ae6a64d6c57317641ab8812c9a7-sports.png",
    "encrypted_validation": "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\n",
    "start_sources": {
      "TeamRunner.java": {
        "text": "public class TeamRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Team object. Print the constructor to the console using\n     * ClassInfo.getConstructors(nameOfObject).\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Team.java": {
        "text": "/*\n * Represents a school sports team\n */\npublic class Team {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Declare instance variables for the team name and number of athletes.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables for the team name and number of athletes.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ClassInfo.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ClassInfo {\n\n  public static String getAttributes(Object testObject) {\n    Class objectClass = testObject.getClass();\n    Class objectSuperClass = objectClass.getSuperclass();\n    \n    Field[] objectFields = objectClass.getDeclaredFields();\n    Field[] superFields = objectSuperClass.getDeclaredFields();\n    \n    ArrayList<String> classFieldsList = convertToList(Arrays.toString(objectFields));\n    ArrayList<String> superFieldsList = convertToList(Arrays.toString(superFields));\n\n    String className = objectClass.getSimpleName();\n    String superClassName = objectSuperClass.getSimpleName();\n    \n    String heading = \"\\n------------------------------\\n\";\n    \n    String classFieldsText = cleanFields(classFieldsList, className);\n    String superFieldsText = cleanFields(superFieldsList, superClassName);\n\n    String result = className + \" Attributes \" + heading + classFieldsText;\n\n    if (!superClassName.equals(\"Object\")) {\n      result += \"\\n>> inherited from \" + superClassName + \" class <<\\n\" + superFieldsText;\n    }\n\n    return result;\n  }\n\n  public static ArrayList<String> convertToList(String result) {\n    result = result.substring(1, result.length() - 1);\n    ArrayList<String> classFields = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = result.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = result.substring(0, comma);\n      classFields.add(currentField);\n      result = result.substring(comma + 2);\n      comma = result.indexOf(\",\");\n    }\n\n    classFields.add(result);\n    return classFields;\n  }\n\n  public static String cleanFields(ArrayList<String> classFields, String className) {\n    String result = \"\";\n\n    for (int index = 0; index < classFields.size(); index++) {\n      String currentField = classFields.get(index);\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      result += currentField + \"\\n\";\n    }\n\n    return result;\n  }\n\n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n\n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n\n  public static String findField(ArrayList<String> classFields, String typeToFind) {\n    String result = \"MISSING\";\n    \n    for (int index = 0; index < classFields.size(); index++) {\n      String current = classFields.get(index);\n      \n      if (current.indexOf(typeToFind) > 0) {\n        result = ClassInfo.removeClassName(current, \"Instrument\");\n        result = ClassInfo.removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n\n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    }\n\n    return result;\n  }\n\n  public static String getFieldType(String currentField) {\n    currentField = currentField.trim();\n    String[] possibleTypes = {\"boolean\", \"int\", \"double\", \"String\"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result;\n  }\n\n  public static String getConstructors(Object testObject) {\n    Class objectClass = testObject.getClass();\n    String className = objectClass.getSimpleName();\n    Constructor[] objectConstructors = objectClass.getDeclaredConstructors();\n    \n    ArrayList<String> constructorsList = convertToList(Arrays.toString(objectConstructors));\n\n    String heading = \"\\n------------------------------\\n\";\n    String result = className + \" Constructors \" + heading;\n\n    for (String current : constructorsList) {\n      result += current + \"\\n\";\n    }\n    \n    return result;\n  }\n\n  public static String getValue(List<String> output, String lineToFind) {\n    String outputText = \"\";\n    String valueResult = \"\";\n\n    for (int index = 0; index < output.size(); index++) {\n      String current = output.get(index);\n      \n      if (current.indexOf(lineToFind) >= 0) {\n        outputText = current;\n        valueResult = outputText.substring(lineToFind.length());\n      }\n    }\n    \n    return valueResult.trim();\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-03T19:23:06.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:23:06.504+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L5a_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L5a_2023\"},{\"changed_at\":\"2022-11-03 19:23:08 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:37:44 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:39:17 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:39:55 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:27:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:27:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:28:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:28:12 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:28:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:29:41 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:49:10 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
