<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-14T13:58:54.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Look at this project example. What are some of its characteristics and features?\r\n\r\n*While this is an example of a project for this unit, it is not representative of the only way you can approach or develop the project.*",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "GameRunner.java": {
        "text": "import java.util.Scanner;\n\npublic class GameRunner {\n  public static void main(String[] args) {\n\n    Player redPlayer = new Player(\"red\");\n    Player yellowPlayer;\n\n    Scanner input = new Scanner(System.in);\n    System.out.println(\"Do you want to play against?\");\n    System.out.println(\"1: another player\");\n    System.out.println(\"2: a random computer player\");\n    System.out.println(\"3: a pattern computer player\");\n    int choice = input.nextInt();\n\n    if (choice == 1) {\n        yellowPlayer = new Player(\"yellow\");\n    }\n    else if (choice == 2) {\n        yellowPlayer = new RandomComputerPlayer(\"yellow\");\n    }\n    else {\n        yellowPlayer = new PatternComputerPlayer(\"yellow\");\n    }\n\n    ConnectFour game = new ConnectFour(redPlayer, yellowPlayer);\n    game.playGame();\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ConnectFour.java": {
        "text": "public class ConnectFour {\n\n  private Board gameBoard;\n  private Player redPlayer;\n  private Player yellowPlayer;\n  \n  public ConnectFour(Player redPlayer, Player yellowPlayer) {\n    this.redPlayer = redPlayer;\n    this.yellowPlayer = yellowPlayer;\n  }\n  \n  public void dropDisk(Player currentPlayer) {\n    int selection = currentPlayer.getPosition();\n    gameBoard.addDisk(selection, currentPlayer.getLetter());\n  }\n  \n  public String displayWinner(String winner) {\n    String result = null;\n\n    if (winner != null) {\n      if (winner.equals(redPlayer.getLetter())) {\n        result = \"The red player won.\";\n      }\n\n      if (winner.equals(yellowPlayer.getLetter())) {\n        result = \"The yellow player won.\";\n      }\n    }\n\n    return result;\n  }\n  \n  public Player choosePlayer(int turn) {\n    Player currentPlayer = null;\n\n    if (turn % 2 == 0) {\n      currentPlayer = redPlayer;\n    }\n    else {\n      currentPlayer = yellowPlayer;\n    }\n\n    return currentPlayer;\n  }\n  \n  public void playGame() {\n    int turn = 0;\n    String winner = null;\n\n    gameBoard = new Board();\n    gameBoard.showGrid();\n\n    while (winner == null) {\n      Player currentPlayer = choosePlayer(turn);\n      dropDisk(currentPlayer);\n\n      turn++;\n      gameBoard.showGrid();\n      winner = gameBoard.checkWinner();\n      endGame(currentPlayer, winner);\n    }\n  }\n  \n  public void endGame(Player currentPlayer, String winner) {\n    if (winner != null) {\n      String winningMessage = displayWinner(winner);\n      System.out.println(winningMessage);\n\n      if (currentPlayer.playAgain()) {\n        playGame();\n      }\n    }\n  }\n\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Board.java": {
        "text": "public class Board {\n\n  private String[][] grid;\n\n  public Board() {\n    this.grid = createGrid();\n  }\n\n  public String[][] getGrid() {\n    return grid;\n  }\n\n  public String[][] createGrid() {\n    String[][] tempGrid = new String[7][15];\n\n    for (int row = 0; row < tempGrid.length; row++) {\n      for (int col = 0; col < tempGrid[0].length; col++) {\n        if (col % 2 == 0) {\n          tempGrid[row][col] = \"|\";\n        }\n        else {\n          tempGrid[row][col] = \" \";\n        }\n\n        if (row == 6) {\n          tempGrid[row][col] = \"-\";\n        }\n      }\n    }\n\n    return tempGrid;\n  }\n\n  public void showGrid() {\n    for (int row = 0; row < grid.length; row++) {\n      for (int col = 0; col < grid[0].length; col++) {\n        System.out.print(grid[row][col]);\n      }\n\n      System.out.println();\n    }\n  }\n\n  public void addDisk(int playerSelection, String playerLetter) {\n    for (int position = 5; position >= 0; position--) {\n      if (grid[position][playerSelection] == \" \") {\n        grid[position][playerSelection] = playerLetter;\n        break;\n      }\n    }\n  }\n\n  public String checkWinner() {\n    String horizontalResult = checkHorizontalRow();\n    String verticalResult = checkVerticalRow();\n    String diagonalResult = checkDiagonalRow();\n    String reverseResult = checkReverseVertical();\n\n    String result;\n\n    if (horizontalResult != null) {\n      result = horizontalResult;\n    }\n    else if (verticalResult != null) {\n      result = verticalResult;\n    }\n    else if (diagonalResult != null) {\n      result = diagonalResult;\n    }\n    else if (reverseResult != null) {\n      result = reverseResult;\n    }\n    else {\n      result = null;\n    }\n\n    return result;\n  }\n\n  private String checkHorizontalRow() {\n    String winner = null;\n\n    for (int row = 0; row < 6; row ++) {\n      for (int col = 0; col < 7; col += 2) {\n        if ((grid[row][col+1] != \" \") && (grid[row][col+3] != \" \") && (grid[row][col+5] != \" \") && (grid[row][col+7] != \" \")\n            && ((grid[row][col+1].equals(grid[row][col+3])) && (grid[row][col+3].equals(grid[row][col+5])) && (grid[row][col+5].equals(grid[row][col+7])))) {\n\n          winner = grid[row][col+1];\n\n        }\n      }\n    }\n\n    return winner;\n  }\n\n  private String checkVerticalRow() {\n    String winner = null;\n\n    for (int row = 1; row < 15; row += 2) {\n      for (int col = 0; col < 3; col++) {\n        if ((grid[col][row] != \" \") && (grid[col+1][row] != \" \") && (grid[col+2][row] != \" \") && (grid[col+3][row] != \" \")\n            && ((grid[col][row].equals(grid[col+1][row])) && (grid[col+1][row].equals(grid[col+2][row])) && (grid[col+2][row].equals(grid[col+3][row])))) {\n\n          winner = grid[col][row];\n\n        }\n      }\n    }\n\n    return winner;\n  }\n\n  private String checkDiagonalRow() {\n    String winner = null;\n\n    for (int row = 0; row < 3; row++) {\n      for (int col = 1; col < 9; col += 2) {\n        if ((grid[row][col] != \" \") && (grid[row+1][col+2] != \" \") && (grid[row+2][col+4] != \" \") && (grid[row+3][col+6] != \" \")\n            && ((grid[row][col].equals(grid[row+1][col+2])) && (grid[row+1][col+2].equals(grid[row+2][col+4])) && (grid[row+2][col+4].equals(grid[row+3][col+6])))) {\n\n          winner = grid[row][col];\n        }\n      }\n    }\n\n    return winner;\n  }\n\n  private String checkReverseVertical() {\n    String winner = null;\n\n    for (int row = 0; row < 3; row++) {\n      for (int col = 7; col < 15; col += 2) {\n        if ((grid[row][col] != \" \") && (grid[row+1][col-2] != \" \") && (grid[row+2][col-4] != \" \") && (grid[row+3][col-6] != \" \")\n            && ((grid[row][col].equals(grid[row+1][col-2])) && (grid[row+1][col-2].equals(grid[row+2][col-4])) && (grid[row+2][col-4].equals(grid[row+3][col-6])))) {\n\n              winner = grid[row][col];\n        }\n      }\n    }\n\n    return winner;\n  }\n    \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Player.java": {
        "text": "import java.util.Scanner;\n\npublic class Player {\n    \n  private String color;\n\n  public Player(String color) {\n    this.color = color;\n  }\n\n  public String getColor() {\n    return color;\n  }\n\n  public String getLetter() {\n    return color.substring(0, 1).toUpperCase();\n  }\n\n  public int getPosition() {\n    Scanner input = new Scanner(System.in);\n\n    System.out.print(\"Drop a \" + color + \" disk at column 0-6: \");\n    int position = input.nextInt();\n    position = 2 * position + 1;\n\n    return position;\n  }\n\n  public boolean playAgain() {\n    boolean result = false;\n    Scanner input = new Scanner(System.in);\n\n    System.out.print(\"Do you want to play again? \");\n    String answer = input.nextLine();\n\n    if (answer.equals(\"yes\") || answer.equals(\"y\")) {\n      result = true;\n    }\n\n    return result;\n  }\n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "RandomComputerPlayer.java": {
        "text": "public class RandomComputerPlayer extends Player {\n  public RandomComputerPlayer(String color) {\n    super(color);\n  }\n\n  public int getPosition() {\n    int position = (int) (Math.random() * 7);\n    position = 2 * position + 1;\n\n    return position;\n  }\n}",
        "isVisible": true,
        "tabOrder": 4
      },
      "PatternComputerPlayer.java": {
        "text": "public class PatternComputerPlayer extends Player {\n  private int position = 0;\n\n  public PatternComputerPlayer(String color) {\n    super(color);\n  }\n\n  public int getPosition() {\n    position += 2;\n    position %= 7;\n    return 2 * position + 1;\n  }\n}",
        "isVisible": true,
        "tabOrder": 5
      }
    },
    "display_name": "Connect Four",
    "bubble_choice_description": "An example project that recreates the Connect Four game.",
    "thumbnail_url": "https://images.code.org/4f1af9613c9a6f0c3786968c96ee1b37-optionD.png",
    "encrypted_exemplar_sources": "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\nhu1j76JakTTOX6CVdINGlQ==\n"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-14T13:58:54.479+00:00\",\"changed\":[\"cloned from \\\"CSA U8L1-L1c_2023\\\"\"],\"cloned_from\":\"CSA U8L1-L1c_2023\"},{\"changed_at\":\"2023-04-14 13:58:55 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:45:36 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:47:43 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:54:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:54:15 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:54:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-17 04:19:01 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-17 04:19:11 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-17 04:19:52 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-17 04:24:09 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-17 04:25:44 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-17 04:27:19 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-17 04:27:38 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-17 04:28:06 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-19 17:05:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-19 17:06:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-19 17:06:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-19 17:06:56 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-19 17:07:20 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-19 17:07:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-19 17:08:05 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-19 17:09:18 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"}]"
}]]></config>
</Javalab>
