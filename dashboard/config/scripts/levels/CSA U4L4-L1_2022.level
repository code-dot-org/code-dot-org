<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "##Investigate and Modify\r\n\r\nRun the program to observe the results.\r\n\r\nThen, experiment with the program by making the following modifications. Change one line at a time, then run the program after each change to observe the results.\r\n\r\n1. Enter different values and observe the result. For example, what happens when you enter `90`(#e7e8ea)? What about `40`(#e7e8ea)? What about `-1`(#e7e8ea)?\r\n\r\n2. In `Course.java`(#e7e8ea), change the `&&`(#e7e8ea) (AND) in the `isValidScore()`(#e7e8ea) method on **Line 45** to `||`(#e7e8ea) (OR). Run the program and enter different values to observe the results. How are these results different?\r\n\r\n3. In `Course.java`(#e7e8ea), try changing the condition in the `isValidScore()`(#e7e8ea) method on **Line 45** to `if(!(score >= 50) && score <= 100)`(#e7e8ea) then run the program. Enter different values to observe the results. How are these results different?",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    Course csCourse = new Course(\"Ms. Lovelace\");\n    csCourse.promptForGrade();\n    \n  }\n}",
        "isVisible": true
      },
      "Course.java": {
        "text": "import java.util.Scanner;\n\npublic class Course {\n  \n  private String teacher;\n\n  public Course(String teacher) {\n    this.teacher = teacher;\n  }\n\n  public String getTeacher() {\n    return teacher;\n  }\n\n  public void promptForGrade() {\n    Scanner input = new Scanner(System.in);\n    int score = 0;\n\n    while (score != -1) {\n      System.out.print(\"Enter the student's score (or -1 to quit): \");\n      score = input.nextInt();\n      printResult(score);\n    }\n\n    input.close();\n  }\n\n  public void printResult(int enteredScore) {\n    if (isValidScore(enteredScore)) {\n      System.out.println(\"Score is: \" + enteredScore);\n    }\n    else {\n      if (enteredScore == -1) {\n        System.out.println(\"Goodbye!\");\n      }\n      else {\n        System.out.println(\"The score is invalid. Please try again.\");\n      }\n    }\n  }\n\n  public boolean isValidScore(int score) {\n    boolean result = false;\n\n    if (score >= 50 && score <= 100) {\n      result = true;\n    }\n    \n    return result;\n  }\n  \n}",
        "isVisible": true
      }
    },
    "encrypted_examples": [

    ],
    "teacher_markdown": "1. When the user enters a value that is between 50 and 100, inclusive, the program accepts the input and prints \"*Score is:* \" + `score`(#e7e8ea). Otherwise, the user is told that the score is invalid and to enter another score. If the user inputs `-1`(#e7e8ea), the program will quit.\r\n\r\n2. Because only one of the conditional checks needs to be true when using the `OR`(#e7e8ea) operator (`||`(#e7e8ea)), we find that any input other than `-1`(#e7e8ea) results in the program deeming the score to be valid and accepting the input.\r\n\r\n3. In this situation, we can interpret the `!(score >= 50)`(#e7e8ea) as being equivalent to saying `score < 50`(#e7e8ea). The only values that would satisfy this condition as well as `score <= 100`(#e7e8ea) would be values that are `49`(#e7e8ea) or less."
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-04-07T17:55:27.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-04-07 17:55:32 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 21:04:49 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 21:12:39 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 22:36:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 22:45:38 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 22:47:15 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 22:50:47 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-18 21:53:00 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-18 21:53:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-18 21:53:35 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-27 15:23:46 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-10 15:12:41 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
