<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "A researcher wants to analyze the cost of living index for several countries. They have the following values:\r\n\r\n![](https://images.code.org/1c82c9f6dd34afdee23ce4fff6391076-image-1650920898553.png)\r\n\r\nwhere each row represents Australia, Brazil, Canada, France, and United States, respectively. Each column represents the cost of living index, the rent index, the groceries index, and the restaurant price index, respectively.\r\n\r\n##In Countries.java:\r\n\r\nWrite the `createDataArray()`(#e7e8ea) method:\r\n\r\n1. Declare and initialize a 2D `double`(#e7e8ea) array called `tempData`(#e7e8ea) to store the values using an initializer list.\r\n\r\n2. Return the `tempData`(#e7e8ea) array.\r\n\r\nWrite the `getCountryData`(#e7e8ea) method:\r\n\r\n3. Return a `String`(#e7e8ea) containing each value in the country's row from the `livingCost`(#e7e8ea) array.\r\n\r\n**Hint:** Use the `getCountryRow()`(#e7e8ea) method in the `Countries`(#e7e8ea) class to get the row in `livingCost`(#e7e8ea) array for the parameter `country`(#e7e8ea).\r\n\r\n::: details [**Show Me How**]\r\nA 2D array is declared and initialized using the following syntax:\r\n  \r\n  ```\r\n  dataType[][] variableName = { {row1value1, row1value2, row1value3}, {row2value1, row2value2, row2value3} };\r\n  ```\r\n\r\nBe sure to change `variableName`(#e7e8ea) to a name you can easily identify, and add the values for each row in the 2D array inside curly braces `{ }`(#e7e8ea).\r\n\r\nValues are accessed using the following syntax:\r\n\r\n  ```\r\n  variableName[row][col];\r\n  ```\r\n  \r\nSpecify the specific `row`(#e7e8ea) and `col`(#e7e8ea) of the value you want to access.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Cost of Living",
    "bubble_choice_description": "A researcher wants to analyze the cost of living index for several countries. Declare and initialize a 2D array to store the values.",
    "thumbnail_url": "https://images.code.org/3c5b557945947706f94d7d0a295a7c63-image-1650921017189.png",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    Countries researcher = new Countries();\n\n    String canadaData = researcher.getCountryData(\"Canada\");\n    System.out.println(canadaData);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Countries.java": {
        "text": "/*\n * Manages data about the cost of living in countries\n */\npublic class Countries {\n\n  private double[][] livingCost;    // The 2D array containing the cost of living index for each country\n\n  /*\n   * Constructor to create a Countries object with the specified 2D\n   * array containing the cost of living index for each country\n   */\n  public Countries() {\n    this.livingCost = createDataArray();\n  }\n\n  /*\n   * Returns the 2D array containing the cost\n   * of living index for each country\n   */\n  public double[][] getLivingCost() {\n    return livingCost;\n  }\n\n  /*\n   * Declares, initializes, and returns a 2D double array\n   */\n  public double[][] createDataArray() {\n    // TO DO #1: Declare, initialize, and return a 2D double array\n    // called tempData containing the values for each country.\n\n    \n    return null;\n  }\n\n  /*\n   * Returns a String containing each value for the specified country\n   */\n  public String getCountryData(String country) {\n    // TO DO #3: Return a String containing each value in the country's row.\n\n    \n    return null;\n  }\n\n  /*\n   * Returns the row in the 2D array livingCost for a specified country\n   */\n  public int getCountryRow(String country) {\n    int countryRow = 0;\n    \n    if (country.equals(\"Australia\")) {\n      countryRow = 0;\n    }\n    else if (country.equals(\"Brazil\")) {\n      countryRow = 1;\n    }\n    else if (country.equals(\"Canada\")) {\n      countryRow = 2;\n    }\n    else if (country.equals(\"France\")) {\n      countryRow = 3;\n    }\n    else if (country.equals(\"United States\")) {\n      countryRow = 4;\n    }\n\n    return countryRow;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "encrypted_exemplar_sources": "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\nJS64pJo=\n"
  },
  "game_id": 68,
  "created_at": "2022-04-12T18:52:01.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-12T18:52:01.438+00:00\",\"changed\":[\"cloned from \\\"CSA U5L1-L3d_2022\\\"\"],\"cloned_from\":\"CSA U5L1-L3d_2022\"},{\"changed_at\":\"2022-04-12 18:52:03 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-25 21:01:40 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-25 21:11:32 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-25 21:12:03 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-25 21:16:08 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-25 23:54:07 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-26 00:41:56 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-08 19:03:44 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-08 19:04:10 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-08 19:04:11 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-08 19:04:30 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
