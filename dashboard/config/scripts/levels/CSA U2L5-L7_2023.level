<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**Now that Joyful Pastries food truck owner can create `Dessert`(#e7e8ea) objects with specific flavors and prices, they would like to create `Cookie`(#e7e8ea), `Pie`(#e7e8ea), `Donut`(#e7e8ea), or `Cupcake`(#e7e8ea) objects with specific values as well.**\r\n\r\n🎒 **IMPORT:** Import your `Dessert`(#e7e8ea) class and `Dessert`(#e7e8ea) **subclass** (`Cookie`(#e7e8ea), `Pie`(#e7e8ea), `Donut`(#e7e8ea), or `Cupcake`(#e7e8ea)) from your **Backpack**.\r\n\r\n*Don't have it, or it doesn't work? That's ok! Copy the code from* ***here*** *and paste it into a new file in your project.*\r\n\r\n✅ **TO DO #1:** Write a no-argument constructor in the `Dessert`(#e7e8ea) **subclass**.\r\n\r\n✅ **TO DO #2:** Write a parameterized constructor in the `Dessert`(#e7e8ea) **subclass**.\r\n\r\n✅ **TO DO #3:** In `FoodTruckRunner.java`(#e7e8ea), instantiate objects of the `Dessert`(#e7e8ea) **subclass** using each constructor.\r\n\r\n✅ **TO DO #4:** Print the constructors for the objects.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing no-argument and parameterized constructors, using the `super`(#e7e8ea) keyword, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate objects using the no-argument and parameterized\n     * constructors. Then use ConstructorsHelper.printConstructors(nameOfObject)\n     * to print the constructors for the objects to the console.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 1
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-super-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_exemplar_sources": "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\n"
  },
  "game_id": 68,
  "created_at": "2022-11-23T14:33:38.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-23T14:33:38.213+00:00\",\"changed\":[\"cloned from \\\"CSA U2L5-L6d_2023\\\"\"],\"cloned_from\":\"CSA U2L5-L6d_2023\"},{\"changed_at\":\"2022-11-23 14:33:39 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-23 19:55:16 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-23 19:56:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-23 19:56:45 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-23 20:21:38 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-23 20:37:38 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-23 20:37:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-23 20:37:53 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
