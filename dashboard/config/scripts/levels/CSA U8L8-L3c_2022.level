<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene about the top ten tallest mountains in the world using a list of images and a list of colors.\r\n\r\n##In MountainScene.java:\r\n\r\n1. Write the method `showMountain()`(#e7e8ea) to display the name of the mountain and its image. Choose a random color from the list of colors to set the color of the text using the `setTextColor()`(#e7e8ea) in the `Scene`(#e7e8ea) class.\r\n\r\n  **Note:** You can also use the `setTextHeight()`(#e7e8ea) and `setTextStyle()`(#e7e8ea) methods in the `Scene`(#e7e8ea) class to set the size and style of the text.\r\n\r\n2. Write the method `createScene()`(#e7e8ea) to traverse the list of mountains and show each mountain's name and image  if its number of ascents is greater than `50`(#e7e8ea).",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Mountain Scene",
    "bubble_choice_description": "Create a scene about the top ten tallest mountains in the world using a list of images and a list of colors.",
    "thumbnail_url": "https://images.code.org/32193a621258c09b171b37bbf4259b2d-mountain.png",
    "starter_assets": {
      "annapurna.jpg": "922ba658-b4f5-46cc-b38c-ccacee5c79a9.jpg",
      "chooyu.jpg": "69a76ad8-e376-4ce6-b0ac-2666232d3b19.jpg",
      "dhaulagiri.jpg": "cbf26377-c64d-438f-acff-5e5df2abcab9.jpg",
      "k2.jpg": "cf20cf3e-7bd1-47f6-95c2-a01022b0fb6f.jpg",
      "kangchenjunga.jpg": "dda30924-e9cf-4e8b-8031-347209e0d7d2.jpg",
      "lhotse.jpg": "2d5bb379-bf39-4936-80a5-79381217c0a2.jpg",
      "makalu.jpg": "e5ac8654-8701-4573-ad64-1f0c94c15a45.jpg",
      "manaslu.jpg": "cc7acb13-efd6-40c8-885e-41a7b1970e5c.jpg",
      "mounteverest.jpg": "11415901-dcc0-4669-80f5-421d8a6a626c.jpg",
      "nagaparbat.jpg": "0991b3c5-0dd5-470b-8ac1-11b43149e874.jpg"
    },
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    Mountain[] mountainList = MountainScene.getMountains(\"mountains.txt\");\n    Color[] colorList = {Color.SILVER, Color.TEAL, Color.GOLD, Color.INDIGO, Color.IVORY};\n\n    MountainScene myScene = new MountainScene(mountainList, colorList);\n    myScene.createScene();\n\n    Theater.playScenes(myScene);\n    \n  }\n}",
        "isVisible": true
      },
      "MountainScene.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Represents a scene that displays images and\n * information about the world's tallest mountains\n */\npublic class MountainScene extends Scene {\n\n  private Mountain[] mountainList;   // The list of mountains\n  private Color[] colorList;         // The list of colors\n\n  /*\n   * Creates a MountainScene with the specified\n   * lists of mountains and colors\n   */\n  public MountainScene(Mountain[] mountainList, Color[] colorList) {\n    this.mountainList = mountainList;\n    this.colorList = colorList;\n  }\n\n  /*\n   * Reads the mountain information from a file and\n   * returns a 1D array of Mountains\n   */\n  public static Mountain[] getMountains(String filename) {\n    File myFile = new File(filename);\n    Scanner fileReader = createScanner(myFile);\n\n    Mountain[] tempMountains = new Mountain[10];\n    int index = 0;\n\n    while (fileReader.hasNextLine()) {\n      String currentLine = fileReader.nextLine();\n      Mountain currentMountain = createMountain(currentLine);\n      tempMountains[index] = currentMountain;\n      index++;\n    }\n\n    fileReader.close();\n    return tempMountains;\n  }\n\n  /*\n   * Returns a Scanner object to read a specified File\n   */\n  public static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Gets the name of the mountain, the image file, and number\n   * of ascents made from currentLine and returns a Mountain object\n   */\n  public static Mountain createMountain(String currentLine) {\n    int comma = currentLine.indexOf(\",\");\n    int colon = currentLine.indexOf(\":\");\n\n    String mountainName = currentLine.substring(0, comma);\n    String imageFile = currentLine.substring(comma + 1, colon);\n    String ascents = currentLine.substring(colon + 1);\n\n    Mountain temp = new Mountain(mountainName, imageFile, Integer.parseInt(ascents));\n    return temp;\n  }\n\n  /*\n   * Shows the name of the mountain and its image\n   */\n  public void showMountain(Mountain theMountain) {\n    // TO DO #1: Display the name of the mountain using a random color\n    // from the list of colors and its image.\n\n    \n    \n  }\n\n  /*\n   * Creates the scene by displaying each mountain in mountainList\n   * if its number of ascents is greater than 50.\n   */\n  public void createScene() {\n    // TO DO #2: Traverse mountainList and call showMountain() if\n    // its number of ascents is greater than 50.\n\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "Mountain.java": {
        "text": "/*\n * Represents a mountain\n */\npublic class Mountain {\n\n  private String name;     // The name of the mountain\n  private String image;    // The image file of the mountain\n  private int numAscents;  // The number of ascents made on the mountain\n\n  /*\n   * Constructor to create a Mountain with the specified\n   * name and image file and number of ascents made\n   */\n  public Mountain(String name, String image, int numAscents) {\n    this.name = name;\n    this.image = image;\n    this.numAscents = numAscents;\n  }\n\n  /*\n   * Returns the name of the mountain\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the image file of the mountain\n   */\n  public String getImage() {\n    return image;\n  }\n\n  /*\n   * Returns the number of ascents made on the mountain\n   */\n  public int getNumAscents() {\n    return numAscents;\n  }\n  \n}",
        "isVisible": true
      },
      "mountains.txt": {
        "text": "Mount Everest,mounteverest.jpg:145\nK2,k2.jpg:45\nKangchenjunga,kangchenjunga.jpg:38\nLhotse,lhotse.jpg:26\nMakalu,malaku.jpg:45\nCho Oyu,chooyu.jpg:79\nDhaulagiri I,dhaulagiri.jpg:51\nManaslu,manaslu.jpg:49\nNanga Parbat,nagaparbat.jpg:52\nAnnapurna I,annapurna.jpg:36",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\nu6mCNFP/SIRM3eVzzGQQSchSBPg=\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-04-18T19:46:18.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-04-18T19:46:18.856+00:00\",\"changed\":[\"cloned from \\\"CSA U8L8-L3b_2022\\\"\"],\"cloned_from\":\"CSA U8L8-L3b_2022\"},{\"changed_at\":\"2022-04-18 19:46:20 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-15 21:08:13 +0000\",\"changed\":[\"csa_view_mode\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-16 02:01:41 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-16 14:27:40 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-16 14:35:09 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-16 19:28:18 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-16 19:30:38 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-16 19:36:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-16 19:36:03 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-16 19:36:18 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-16 19:38:00 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
