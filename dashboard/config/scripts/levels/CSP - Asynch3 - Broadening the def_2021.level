<FreeResponse>
  <config><![CDATA[{
  "game_id": 52,
  "created_at": "2021-05-28T01:05:14.000Z",
  "level_num": "custom",
  "user_id": 884,
  "properties": {
    "encrypted": "false",
    "tts_short_instructions_override": "How would you describe the difference between computer science and coding? How would you explain sequencing and algorithms to your students? ",
    "tts_long_instructions_override": "Congratulations! You just wrote some code. You are officially a programmer!\r\n\r\nDid you notice that the last puzzle was a little more difficult? It was a challenge puzzle. Challenge puzzles are meant to stretch the boundaries of what students will do. We make it clear that they should be attempted, but do not require that they be completed for students to succeed for the lesson.\r\n\r\nNow take a moment to reflect. How would you describe the difference between computer science and coding? How would you explain sequencing and algorithms to your students? ",
    "instructions_important": "false",
    "long_instructions": "# Broadening and labeling what it means to be “smart” in CS\r\n\r\n## Why is this important?\r\nWhen we think about broadening and labeling what it means to be “smart” in computer science, we want to go beyond the narrow definition that students might have.  For some students, they may see other students who have more prior experience with coding and think that the other students are “smart” at computer science, when really other students just have more experience with it! \r\n\r\nWhen we broaden the definition of being “smart” at computer science, we are able to recognize and help all students recognize their own CS abilities.\r\n\r\n## What does this look like in practice?\r\nLet’s start by considering the ways in which students advance their own learning and the learning of students around them.  Here’s some ideas to get you started:\r\n\r\n* A student sees a command or block they haven’t used before and decides to read the documentation to understand how they might use it in their program.\r\n* A student sees or hears about a problem in their community and brainstorms how they could create an app or computer program to help solve that problem.\r\n* A student creates diagrams of screens in their project and discusses the benefits and drawbacks of having different elements on their screen - for example, the benefits of a dropdown with four different options versus having four different buttons on the screen.\r\n* A student creates a “road map” for a project by writing out comments in their code first describing the separate steps they need to get their program to work, before writing the actual code.   This helps them keep the big picture in mind before diving into the details.\r\n* A student suggests their partner test smaller portions of their code as they create a larger program.\r\n* A student recognizes that they are rewriting the same chunks of code over and over again and makes a function that can be called instead of rewriting the code multiple times.\r\n\r\nNotice that each of these ways is **specific** and speaks to the **intellectual contributions** of students in the computer science classroom. \r\n\r\n## Reflect \r\nWhat are some other ways you see students advance their own learning and the learning of students around them in your computer science classes?  What are specific ways you see \"smartness\" in your classroom?\r\n",
    "allow_user_uploads": "false",
    "submittable": "false",
    "peer_reviewable": "false",
    "optional": "false",
    "skip_dialog": true,
    "skip_sound": true,
    "parent_level_id": 24396,
    "name_suffix": "_2021"
  },
  "published": true,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2019-11-07 00:55:21 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":884,\"changed_by_email\":\"emma@code.org\"},{\"changed_at\":\"2020-07-10 00:37:39 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":962,\"changed_by_email\":\"jess@code.org\"},{\"changed_at\":\"2020-07-10 00:38:11 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":962,\"changed_by_email\":\"jess@code.org\"},{\"changed_at\":\"2020-07-10 14:21:19 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":962,\"changed_by_email\":\"jess@code.org\"},{\"changed_at\":\"2020-07-10 14:44:35 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":962,\"changed_by_email\":\"jess@code.org\"},{\"changed_at\":\"2020-07-16 13:35:49 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":977,\"changed_by_email\":\"kaitie@code.org\"},{\"changed_at\":\"2020-07-16 13:36:43 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":977,\"changed_by_email\":\"kaitie@code.org\"},{\"changed_at\":\"2020-07-23 15:19:37 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":977,\"changed_by_email\":\"kaitie@code.org\"},{\"changed_at\":\"2020-08-13 15:37:11 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":977,\"changed_by_email\":\"kaitie@code.org\"},{\"changed_at\":\"2020-08-13 15:40:44 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":977,\"changed_by_email\":\"kaitie@code.org\"},{\"changed_at\":\"2020-08-14 18:17:54 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":977,\"changed_by_email\":\"kaitie@code.org\"},{\"changed_at\":\"2020-08-14 18:24:10 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":977,\"changed_by_email\":\"kaitie@code.org\"},{\"changed_at\":\"2020-08-19 19:01:04 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":977,\"changed_by_email\":\"kaitie@code.org\"}]"
}]]></config>
</FreeResponse>
