<Applab>
  <config><![CDATA[{
  "properties": {
    "skin": "applab",
    "edit_code": true,
    "embed": "false",
    "instructions_important": "false",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "disable_procedure_autopopulate": "false",
    "top_level_procedure_autopopulate": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "disable_if_else_editing": "false",
    "free_play": "false",
    "validation_enabled": "true",
    "submittable": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "true",
    "beginner_mode": "false",
    "hide_view_data_button": "true",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "fail_on_lint_errors": "false",
    "debugger_disabled": "false",
    "makerlab_enabled": "microbit",
    "long_instructions": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/8e31f511d30894d2f7ae29739ce5628a-image-1677033450462.png)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n# External Button Events\r\n\r\nThis app shows how external buttons are created. This happens in two parts:\r\n1. A [`createButton()`(#4dd0e1)](/docs/applab/createButton/) block lets you assign an external button to a variable\r\n2. An [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block uses the same variable name to detect button events like `up` and `down`\r\n\r\nRight now, the micro:bit says \"Hello\" when the wires touch for a `down` event. Let's add another event to clear the `ledScreen` when the wires release for an `up` event.\r\n\r\n# Do This\r\n\r\n<div markdown=\"1\" style=\"float: right; margin: 20px;\">\r\n\r\n![expandable](https://images.code.org/e0c18875bd829fad3089555d3d81adb1-image-1677033422918.gif)\r\n\r\n<br/>\r\n\r\nClick to Expand\r\n\r\n</div>\r\n\r\n1) Use an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) to detect when the `scrollButton` is released `up`\r\n\t- Add an [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/) block to your code\r\n\t- In the first parameter, do not select any of the options from the dropdown. Instead, type in `scrollButton`\r\n\t- In the second parameter, select \"up\" from the list of options\r\n2) When the `scrollButton` is released: clear the `ledScreen`\r\n\t- Inside the [`onBoardEvent()`(#f78183)](/docs/applab/onBoardEvent/): \r\n    \t- Drag out an [`ledScreen.clear()`(#f78183)](/docs/ide/applab/expressions/ledScreen.clear) block\r\n\r\nRun the program! micro:bit should now display \"Hello\" when the wires are touching, and the message will clear when the wires are disconnected",
    "text_mode_at_start": "false",
    "parent_level_id": 20603,
    "name_suffix": "_mb2022",
    "mini_rubric": "false",
    "encrypted": "false",
    "widget_mode": "false",
    "libraries_enabled": "false",
    "ai_enabled": "false",
    "project_template_level_name": "CSD U6 - Physical Input - SB Template_mb2022",
    "encrypted_examples": [

    ],
    "preload_asset_list": null
  },
  "game_id": 41,
  "published": true,
  "created_at": "2023-02-01T10:53:18.000Z",
  "level_num": "custom",
  "user_id": 1,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2023-02-01T10:53:18.491+00:00\",\"changed\":[\"cloned from \\\"CSD U6 - Physical Input - SB2_2222\\\"\"],\"cloned_from\":\"CSD U6 - Physical Input - SB2_2222\"},{\"changed_at\":\"2023-02-22 02:17:01 +0000\",\"changed\":[\"makerlab_enabled\",\"text_mode_at_start\",\"encrypted_examples\",\"start_blocks\",\"preload_asset_list\",\"contained_level_names\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-02-22 02:21:52 +0000\",\"changed\":[\"long_instructions\",\"reference_links\",\"map_reference\",\"start_html\",\"encrypted_examples\",\"preload_asset_list\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-02-22 02:26:29 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\",\"preload_asset_list\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-02-22 02:39:34 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\",\"preload_asset_list\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>