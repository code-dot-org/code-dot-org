<Applab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "skin": "applab",
    "validation_enabled": "false",
    "embed": "true",
    "mini_rubric": "false",
    "submittable": "false",
    "start_blocks": "//INITIAL PEOPLE\r\nvar Daniela = {\r\n  \"name\": \"Daniela\",\r\n  \"private\": 6343,\r\n  \"public\": 36505\r\n};\r\n\r\nvar Alejandro = {\r\n  \"name\": \"Alejandro\",\r\n  \"private\": 5020,\r\n  \"public\": 46191\r\n};\r\n\r\nvar Jayla = {\r\n  \"name\": \"Jayla\",\r\n  \"private\": 6521,\r\n  \"public\": 6531\r\n};\r\n\r\nvar Emmanuel = {\r\n  \"name\": \"Emmanuel\",\r\n  \"private\": 5204,\r\n  \"public\": 38464\r\n};\r\n\r\nvar Lila = {\r\n  \"name\": \"Lila\",\r\n  \"private\": 6551,\r\n  \"public\": 11912\r\n};\r\n\r\n//***********************************\r\n//****DON'T FORGET THIS IS HERE******\r\n//***********************************\r\nvar PEOPLE = [Daniela, Alejandro, Jayla, Emmanuel, Lila];\r\n\r\nvar messages = [\r\n  {\r\n    \"name\": \"A\",\r\n    \"from\": \"Daniela\",\r\n    \"to\": \"Alejandro\",\r\n    \"amount\": \"2\",\r\n    \"signature\": \"fc4cf9abb6f93bd6276ab77430833c18\"\r\n  },\r\n  {\r\n    \"name\": \"B\",\r\n    \"from\": \"Lila\",\r\n    \"to\": \"Alejandro\",\r\n    \"amount\": \"2\",\r\n    \"signature\": \"6aae71c825293c9a819a03628d978c0e\"\r\n  },\r\n  {\r\n    \"name\": \"C\",\r\n    \"from\": \"Emmanuel\",\r\n    \"to\": \"Alejandro\",\r\n    \"amount\": \"4\",\r\n    \"signature\": \"1131df67b7572c766ecfe68338b49b67\"\r\n  },\r\n  {\r\n    \"name\": \"D\",\r\n    \"from\": \"Jayla\",\r\n    \"to\": \"Alejandro\",\r\n    \"amount\": \"10\",\r\n    \"signature\": \"765967ec5dadbc1612200246dfda7b5c\"\r\n  },\r\n  {\r\n    \"name\": \"E\",\r\n    \"from\": \"Daniela\",\r\n    \"to\": \"Jayla\",\r\n    \"amount\": \"3\",\r\n    \"signature\": \"237fb93cc84359ed8b29002096279afb\"\r\n  },\r\n  {\r\n    \"name\": \"F\",\r\n    \"from\": \"Emmanuel\",\r\n    \"to\": \"Jayla\",\r\n    \"amount\": \"6\",\r\n    \"signature\": \"eb9425053d7afa35fdfcf5c98b3d49a8\"\r\n  },\r\n  {\r\n    \"name\": \"G\",\r\n    \"from\": \"Lila\",\r\n    \"to\": \"Jayla\",\r\n    \"amount\": \"5\",\r\n    \"signature\": \"c9d47f80325fcb79e8babddbd27b6ee4\"\r\n  },\r\n  {\r\n    \"name\": \"H\",\r\n    \"from\": \"Alejandro\",\r\n    \"to\": \"Jayla\",\r\n    \"amount\": \"1\",\r\n    \"signature\": \"b9271d55bb931602017b45164d9e8b68\"\r\n  },\r\n  {\r\n    \"name\": \"I\",\r\n    \"from\": \"Jayla\",\r\n    \"to\": \"Daniela\",\r\n    \"amount\": \"1\",\r\n    \"signature\": \"abfe2ed308b5a4e72c88a2d95f25b33f\"\r\n  },\r\n  {\r\n    \"name\": \"J\",\r\n    \"from\": \"Alejandro\",\r\n    \"to\": \"Daniela\",\r\n    \"amount\": \"4\",\r\n    \"signature\": \"d87687056c23dbf386a9cc809d2bdbe5\"\r\n  }\r\n];\r\n\r\n//SETUP VARIABLES\r\nvar DEBUG = false;\r\nvar BUTTONSIZE = 32;\r\nvar BLOCK = [];\r\nvar NUMZEROES = 2;\r\nvar ZEROSTRING = \"\";\r\nfor(var i = 0; i < NUMZEROES; i++) {\r\n  ZEROSTRING += \"0\";\r\n}\r\nvar CURRENTMSG = null;\r\nvar BLOCKBUTTONS = [];\r\nvar SHAREDPRIME = SHAHashLibrary.sharedPrime();\r\n\r\nvar SCREEN1ONCE = false;\r\nvar SCREEN2ONCE = false;\r\n\r\nfunction initializeMessages() {\r\n  var buttonY = BUTTONSIZE;\r\n  var buttonX = 0;\r\n  for(var k = 0; k < messages.length; k++) {\r\n    var msg = messages[k];\r\n    var tempBtnId = \"button\" + msg.name;\r\n    button(tempBtnId, msg.name);\r\n    setProperty(tempBtnId, \"font-size\", 14);\r\n    setStyle(tempBtnId, \"padding: 2px\");\r\n    setStyle(tempBtnId, \"text-align: center\");\r\n    setPosition(tempBtnId, buttonX, buttonY, BUTTONSIZE, BUTTONSIZE);\r\n    buttonX += BUTTONSIZE;\r\n    //buttonY += BUTTONSIZE;\r\n    //Create an event for the button I just created\r\n    onEvent(tempBtnId, \"click\", function(e) {\r\n      //Get the button I just clicked from the event\r\n      //Because sychronizing data with dynamically-created elements is tricky\r\n      var msgName = e.srcElementId.split(\"button\")[1];\r\n      \r\n      for(var i = 0; i < messages.length; i++) {\r\n        if(messages[i].name == msgName) {\r\n          CURRENTMSG = messages[i];\r\n          break;    \r\n        }\r\n      }\r\n      showMessage(CURRENTMSG);\r\n      //setText(\"verifyLabel\", \"\");\r\n      hideElement(\"verifyLabel\");\r\n      UI(true);\r\n    });\r\n  }\r\n}\r\n\r\nfunction UI(show) {\r\n  if(show) {\r\n    showElement(\"verifySignaturePanel\");\r\n    showElement(\"messageDetailsPanel\");\r\n    showElement(\"messageTextBox\");\r\n    showElement(\"publicKeyLabel\");\r\n    showElement(\"publicKeyInput\");\r\n    showElement(\"verifySignatureButton\");\r\n    //showElement(\"addBlockButton\");\r\n    setText(\"publicKeyInput\", \"\");\r\n  } else {\r\n    hideElement(\"verifySignaturePanel\");\r\n    hideElement(\"messageDetailsPanel\");\r\n    hideElement(\"messageTextBox\");\r\n    hideElement(\"publicKeyLabel\");\r\n    hideElement(\"publicKeyInput\");\r\n    hideElement(\"verifySignatureButton\");\r\n    hideElement(\"verifyLabel\");\r\n    hideElement(\"addBlockButton\");\r\n  }\r\n}\r\n\r\n//HELPER FUNCTIONS\r\nfunction messageFormat(from, to, amount) {\r\n  return \"<From: \" + from + \" | To: \" + to + \" | Amount: \" + amount + \">\";\r\n}\r\n\r\nfunction blockToString(block) {\r\n  //block is an array of messages\r\n  //messages are objects with a \"from\", \"to\", \"amount\", and \"signature\" field\r\n  //messageFormat() is a function that converts the raw from/to/amount fields into a single string\r\n  var tempStrings = [];\r\n  for(var i = 0; i < block.length; i++) {\r\n    var msg = block[i];\r\n    var msgString = \"(\" + messageFormat(msg.from, msg.to, msg.amount);\r\n    msgString += \" - \" + msg.signature + \")\";\r\n    //msgString should have format (<From: _ | To: _ | Amount: _> - _)\r\n    tempStrings.push(msgString);\r\n  }\r\n  return \"[\" + tempStrings.toString() + \"]\";\r\n}\r\n\r\n// Looks for NUMZEROES in the range and doesn't stop\r\n// Will return an array of all possible nonces that satisfy the condition\r\nfunction mineAll(startVal, numVals) {\r\n  //Same as mine, but returns array of possible values in the range rather than first value\r\n  var blockString = blockToString(BLOCK);\r\n  var endVal = startVal + numVals;\r\n  var blockStringWithNonce;\r\n  var blockHash;\r\n  var DEBUG = false;\r\n  var nonces = [];\r\n  for(var nonce = startVal; nonce < endVal; nonce++) {\r\n    blockStringWithNonce = blockString + \",\" + nonce;  \r\n    blockHash = SHAHashLibrary.md5(blockStringWithNonce);\r\n    if(DEBUG) {\r\n      console.log(\"NONCE:\" + nonce + \"; HASH:\" + blockHash);\r\n    }\r\n    var firstPart = blockHash.substr(0, NUMZEROES);\r\n    if(firstPart == ZEROSTRING) {\r\n      console.log(\"SUCCESS! Nonce: \" + nonce);\r\n      nonces.push(nonce);\r\n    }\r\n  }\r\n  //console.log(\"Done Mining\");\r\n  return nonces;\r\n}\r\n\r\n//Returns first nonce that satisfies NUMZEROES condition\r\nfunction mine(startVal, numVals) {\r\n  var blockString = blockToString(BLOCK);\r\n  var endVal = startVal + numVals;\r\n  var blockStringWithNonce;\r\n  var blockHash;\r\n  var DEBUG = false;\r\n  for(var nonce = startVal; nonce < endVal; nonce++) {\r\n    blockStringWithNonce = blockString + \",\" + nonce;  \r\n    blockHash = SHAHashLibrary.md5(blockStringWithNonce);\r\n    setText(\"nonceLabel\", nonce);\r\n    setText(\"hashTextBox\", blockHash);\r\n    if(DEBUG) {\r\n      console.log(\"NONCE:\" + nonce + \"; HASH:\" + blockHash);\r\n    }\r\n    var firstPart = blockHash.substr(0, NUMZEROES);\r\n    if(firstPart == ZEROSTRING) {\r\n      //console.log(\"SUCCESS! Nonce: \" + nonce);\r\n      return nonce;\r\n    }\r\n  }\r\n  console.log(\"Done Mining\");\r\n  return -1;\r\n}\r\n\r\n\r\nfunction showMessage(msg) {\r\n  var tempStr = \"\";\r\n  //tempStr += \"<\\n\";\r\n  tempStr += \"Block \" + msg.name + \"\\n\";\r\n  tempStr += \"From: \" + msg.from + \"\\n\";\r\n  tempStr += \"To: \" + msg.to + \"\\n\";\r\n  tempStr += \"Amount: \" + msg.amount + \"\\n\";\r\n  //tempStr += \">\\n\";\r\n  tempStr += \"Signature: \" + msg.signature;\r\n  setText(\"messageTextBox\", tempStr);\r\n}\r\n\r\nfunction drawBlocksScreen1() {\r\n  for(var i = 0; i < BLOCKIDS.length; i++) {\r\n    var tempBlockId = BLOCKIDS[i];\r\n    var buttonX = BUTTONSIZE * i;\r\n    var buttonY = 450 - BUTTONSIZE;\r\n    //setProperty(tempBlockId, \"x\", buttonX);\r\n    setPosition(tempBlockId, buttonX, buttonY, BUTTONSIZE, BUTTONSIZE);\r\n  }\r\n  if(BLOCKIDS.length > 0) {\r\n    //showElement(\"bottomMessageLabel\");\r\n    showElement(\"nextButton\");\r\n  } else {\r\n    //hideElement(\"bottomMessageLabel\");\r\n    hideElement(\"nextButton\");\r\n  }\r\n}\r\n\r\nfunction drawBlocksScreen2() {\r\n  for(var i = 0; i < BLOCKBUTTONS.length; i++) {\r\n    var msgName = BLOCKBUTTONS[i];\r\n    //Create a new button to represent the block\r\n    var tempBtnId = \"screen2block\" + msgName;\r\n    button(tempBtnId, msgName);\r\n    setProperty(tempBtnId, \"font-size\", 14);\r\n    setStyle(tempBtnId, \"padding: 2px\");\r\n    setStyle(tempBtnId, \"text-align: center\");\r\n    var buttonX = BUTTONSIZE * i;\r\n    var buttonY = BUTTONSIZE;\r\n    //setProperty(tempBlockId, \"x\", buttonX);\r\n    setPosition(tempBtnId, buttonX, buttonY, BUTTONSIZE, BUTTONSIZE);\r\n  }\r\n  \r\n}\r\n\r\nvar BLOCKIDS = [];\r\n\r\nfunction addMsgToBlock(msg) {\r\n  //Add to BLOCK array, which is used for hashes later\r\n  BLOCK.push(msg);\r\n  \r\n  //Add to BLOCKBUTTONS array, which is used for UI management\r\n  BLOCKBUTTONS.push(msg.name);\r\n  \r\n  //Reset the screen\r\n  CURRENTMSG = null;\r\n  setText(\"messageTextBox\", \"\");\r\n  //Hide the button we just clicked\r\n  hideElement(\"button\" + msg.name);\r\n  \r\n  //Create a new button to represent the block\r\n  var tempBtnId = \"block\" + msg.name;\r\n  BLOCKIDS.push(tempBtnId);\r\n  button(tempBtnId, msg.name);\r\n  \r\n  setProperty(tempBtnId, \"font-size\", 14);\r\n  setStyle(tempBtnId, \"padding: 2px\");\r\n  setStyle(tempBtnId, \"text-align: center\");\r\n  //setPosition(tempBtnId, buttonX, buttonY, BUTTONSIZE, BUTTONSIZE);\r\n  drawBlocksScreen1();\r\n  \r\n  //Create an event for the button I just created\r\n  onEvent(tempBtnId, \"click\", function(e) {\r\n    //Get the button I just clicked from the event\r\n    //Because sychronizing data with dynamically-created elements is tricky\r\n    var msgName = e.srcElementId.split(\"block\")[1];\r\n    \r\n    //Reset the button to view the message\r\n    showElement(\"button\" + msgName);\r\n    //Delete this element from the screen (which somehow automatically shifts all the other buttons visually)\r\n    deleteElement(e.srcElementId);\r\n    \r\n    //Delete msg from BLOCKBUTTONS array as well\r\n    //Requires a mid-array deletion\r\n    var i = 0;\r\n    while(i < BLOCKBUTTONS.length) {\r\n      if(BLOCKBUTTONS[i] == msgName) {\r\n        BLOCKBUTTONS.splice(i, 1);\r\n        BLOCK.splice(i, 1);\r\n        BLOCKIDS.splice(i, 1);\r\n        break;\r\n      }\r\n      i++;\r\n    }\r\n    drawBlocksScreen1();\r\n  });\r\n}\r\n\r\nfunction decryptSignature(encryptedHash, pubKey) {\r\n  var tempStr = \"\";\r\n  for(var i = 0; i < encryptedHash.length; i += 4) {\r\n    var subStr = encryptedHash.substr(i, 4);\r\n    //console.log(subStr);\r\n    var toDec = SHAHashLibrary.hexStringToDecimal(subStr);\r\n    //console.log(\"toDec: \" + toDec);\r\n    var encrypted = (toDec * pubKey) % SHAREDPRIME;\r\n    //console.log(\"encrypted: \" + encrypted);\r\n    var toHex = SHAHashLibrary.decimalToHexString(encrypted);\r\n    //console.log(\"toHex: \" + toHex);\r\n    \r\n    while(toHex.length < 4) {\r\n      toHex = \"0\" + toHex;\r\n    }\r\n    \r\n    tempStr += toHex;\r\n  }\r\n  return tempStr;\r\n}\r\n\r\n//EVENTS\r\nonEvent(\"addBlockButton\", \"click\", function() {\r\n  if(CURRENTMSG != null) {\r\n    addMsgToBlock(CURRENTMSG);\r\n  }\r\n  UI(false);\r\n});\r\n\r\nvar SCREEN2STEP = 0;\r\nvar SCREEN2LONGTIME = 3000;\r\nvar SCREEN2SHORTTIME = 1000;\r\n\r\nonEvent(\"nextButton\",\"click\", function() {\r\n  setScreen(\"screen2\");\r\n  //setText(\"goalLabel\", \"Your Goal: Add a number to your block so that the hash starts with \" + NUMZEROES + \" zeroes. This doesn't change the block itself - it only changes the hash\");\r\n  /*\r\n  for(var i = 0; i < BLOCKBUTTONS.length; i++) {\r\n    var msgName = BLOCKBUTTONS[i];\r\n    //Create a new button to represent the block\r\n    var tempBtnId = \"screen2block\" + msgName;\r\n    button(tempBtnId, msgName);\r\n  }\r\n  */\r\n  \r\n  drawBlocksScreen2();\r\n  resetScreen2();\r\n  SCREEN2STEP = 0;\r\n  setTimeout(playScreen2, (DEBUG == true ? 1 : SCREEN2SHORTTIME));\r\n});\r\n\r\nfunction playScreen2() {\r\n  var time = SCREEN2SHORTTIME;\r\n  if (SCREEN2STEP == 0) {\r\n    showElement(\"explanationLabel\");\r\n    showElement(\"hashTextBox\");\r\n    setText(\"hashTextBox\", \"Calculating\");\r\n    var tempTimer = 0;\r\n    timedLoop(SCREEN2LONGTIME / 5, function() {\r\n      //console.log(\"here\");\r\n      setText(\"hashTextBox\", getText(\"hashTextBox\") + \".\");\r\n      tempTimer += 1;\r\n      if(tempTimer >= 5) {\r\n        stopTimedLoop();\r\n      }\r\n    });\r\n    time = SCREEN2LONGTIME;\r\n  } else if (SCREEN2STEP == 1) {\r\n    var blockString = blockToString(BLOCK) + \",0\";\r\n    var blockHash = SHAHashLibrary.md5(blockString);\r\n    setText(\"hashTextBox\", blockHash);\r\n  } else if (SCREEN2STEP == 2) {\r\n    showElement(\"goalLabel\");\r\n    showElement(\"nonceTitleLabel\");\r\n    showElement(\"nonceLabel\");\r\n    time = SCREEN2LONGTIME;\r\n  } else if (SCREEN2STEP == 3) {\r\n    showElement(\"iterativeLabel\");\r\n    time = SCREEN2LONGTIME;\r\n  } else if (SCREEN2STEP == 4) {\r\n    showElement(\"startInput\");\r\n    showElement(\"startLabel\");\r\n    time = SCREEN2SHORTTIME;\r\n  } else if (SCREEN2STEP == 5) {\r\n    showElement(\"amountInput\");\r\n    showElement(\"amountLabel\");\r\n    time = SCREEN2LONGTIME;\r\n  } else if (SCREEN2STEP == 6) {\r\n    showElement(\"mineExplanationLabel\");\r\n    showElement(\"generateNonceButton\");\r\n    time = SCREEN2SHORTTIME;\r\n  } else {\r\n    SCREEN2STEP = -100;\r\n    //speed up timers on subsequent views\r\n    if(!SCREEN2ONCE) {\r\n      SCREEN2SHORTTIME = SCREEN2SHORTTIME / 4;\r\n      SCREEN2LONGTIME = SCREEN2LONGTIME / 4;\r\n      SCREEN2ONCE = true;\r\n    }\r\n  }\r\n  \r\n  SCREEN2STEP += 1;\r\n  if(SCREEN2STEP > 0){\r\n    setTimeout(playScreen2, (DEBUG == true ? 1 : time));  \r\n  }\r\n  \r\n}\r\n\r\nfunction resetScreen2() {\r\n  hideElement(\"hashTextBox\");\r\n  hideElement(\"explanationLabel\");\r\n  hideElement(\"goalLabel\");\r\n  hideElement(\"nonceTitleLabel\");\r\n  hideElement(\"nonceLabel\");\r\n  hideElement(\"iterativeLabel\");\r\n  hideElement(\"startLabel\");\r\n  hideElement(\"startInput\");\r\n  hideElement(\"amountLabel\");\r\n  hideElement(\"amountInput\");\r\n  hideElement(\"nonceTextBox\");\r\n  hideElement(\"mineExplanationLabel\");\r\n  hideElement(\"generateNonceButton\");\r\n  \r\n  setText(\"startInput\", \"\");\r\n  setText(\"amountInput\", \"\");\r\n  setText(\"nonceLabel\", \"0\");\r\n  setText(\"hashTextBox\", \"\");\r\n}\r\n\r\nonEvent(\"generateNonceButton\", \"click\", function() {\r\n  hideElement(\"nonceTextBox\");\r\n  setText(\"nonceTextBox\", \"\");\r\n  setProperty(\"nonceTextBox\", \"background-color\", \"white\");\r\n  var start = getNumber(\"startInput\");\r\n  var amount = getNumber(\"amountInput\");\r\n  var result = mine(start, amount);\r\n  showElement(\"nonceTextBox\");\r\n  if(result != -1) {\r\n    setProperty(\"nonceTextBox\", \"background-color\", \"#b6f0ab\");\r\n    setText(\"nonceTextBox\", \"Success! We found a hash that starts with two 0's!  This successully solves the puzzle for mining this block!\");\r\n  } else {\r\n    setProperty(\"nonceTextBox\", \"background-color\", \"#f0abad\");\r\n    setText(\"nonceTextBox\", \"Error! No result was found! Try a different starting number, then press Mine again!\");\r\n  }\r\n});\r\n\r\nvar SCREEN1TIME = 2500;\r\n\r\nonEvent(\"verifySignatureButton\", \"click\", function() {\r\n  if(CURRENTMSG == null) {\r\n    console.log(\"Error! Null CURRENTMSG\");\r\n    return;\r\n  }\r\n  hideElement(\"addBlockButton\");\r\n  setProperty(\"verifyLabel\", \"font-size\", 12);\r\n  setProperty(\"verifyLabel\", \"font-family\", \"Arial Black\");\r\n  setProperty(\"verifyLabel\", \"background-color\", \"#ffffff\");\r\n  setText(\"verifyLabel\", \"Verifying authenticity by using the public key to verify the signature of the message...\");\r\n  showElement(\"verifyLabel\");\r\n  showElement(\"waitingImage\");\r\n  setTimeout(finishVerifySignature, (DEBUG == true ? 1 : SCREEN1TIME));\r\n});\r\n\r\nvar TEMPSTRARRAY = [];\r\nvar TEMPSTRINDEX = 0;\r\nvar TEMPSTRTIMER = 1000;\r\n\r\nfunction finishVerifySignature() {\r\n  hideElement(\"waitingImage\");\r\n  setProperty(\"verifyLabel\", \"font-size\", 11);\r\n  setProperty(\"verifyLabel\", \"font-family\", \"Courier\");\r\n  setText(\"verifyLabel\", \"\");\r\n  //generate hash\r\n  var from = CURRENTMSG.from;\r\n  var to = CURRENTMSG.to;\r\n  var amount = CURRENTMSG.amount;\r\n  var MESSAGE = messageFormat(from, to, amount);\r\n  //setText(\"messageTextBox\", MESSAGE);\r\n  var hash = SHAHashLibrary.md5(MESSAGE);\r\n  \r\n  //verify signature\r\n  var sig = CURRENTMSG.signature;\r\n  var pubKey = getText(\"publicKeyInput\");\r\n  var decryptedHash = decryptSignature(sig, pubKey);\r\n  \r\n  TEMPSTRARRAY = [];\r\n  TEMPSTRINDEX = 0;\r\n  TEMPSTRARRAY.push(\"Verification Complete!\\n\");\r\n  TEMPSTRARRAY.push(\"Original Hash:\\n\");\r\n  TEMPSTRARRAY.push(\"   \" + hash + \"\\n\");\r\n  TEMPSTRARRAY.push(\"Verified Hash with Signature:\\n\");\r\n  TEMPSTRARRAY.push(\"   \" + decryptedHash + \"\\n\");\r\n  \r\n  if(hash == decryptedHash) {\r\n    TEMPSTRARRAY.push(\"SUCCESS!\\n\");\r\n    TEMPSTRARRAY.push(\"the original signature and the verified signature match!\");\r\n    //setText(\"verifyLabel\", );\r\n    //setProperty(\"verifyLabel\", \"background-color\", \"green\");\r\n  } else {\r\n    TEMPSTRARRAY.push(\"ERROR!\\n\");\r\n    TEMPSTRARRAY.push(\"the original hash and the verified hash do NOT match!\");\r\n    //setText(\"verifyLabel\", \"ERROR - the original hash and the verified hash do NOT match!\");\r\n    //setProperty(\"verifyLabel\", \"background-color\", \"red\");\r\n  }\r\n  //setText(\"verifyLabel\", tempStr);\r\n  setTimeout(printResultsTimed, (DEBUG == true ? 1 : TEMPSTRTIMER));\r\n  //showElement(\"verifyLabel\");\r\n}\r\n\r\nfunction printResultsTimed() {\r\n  var currentText = getText(\"verifyLabel\");  \r\n  var newText = currentText += TEMPSTRARRAY[TEMPSTRINDEX];\r\n  if(TEMPSTRINDEX == 5) {\r\n    if(TEMPSTRARRAY[TEMPSTRINDEX].indexOf(\"SUCCESS\") != -1) {\r\n      setProperty(\"verifyLabel\", \"background-color\", \"#b6f0ab\");\r\n    } else {\r\n      setProperty(\"verifyLabel\", \"background-color\", \"#f0abad\");\r\n    }\r\n  }\r\n  setText(\"verifyLabel\", newText);\r\n  TEMPSTRINDEX += 1;\r\n  if(TEMPSTRINDEX < TEMPSTRARRAY.length) {\r\n    setTimeout(printResultsTimed, (DEBUG == true ? 1 : TEMPSTRTIMER));\r\n  } else {\r\n    showElement(\"addBlockButton\");\r\n    //Faster times after doing it once.\r\n    if(!SCREEN1ONCE) {\r\n      SCREEN1TIME = SCREEN1TIME / 4;\r\n      TEMPSTRTIMER = TEMPSTRTIMER / 4;\r\n      SCREEN1ONCE = true;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nonEvent(\"screen2BackButton\", \"click\", function() {\r\n  setScreen(\"screen1\");\r\n  SCREEN2STEP = -100;\r\n  resetScreen2();\r\n  UI(false);\r\n  //Delete buttons on 2nd screen that may have been created.\r\n  //This is necessary for next and back logic to work.\r\n  for(var i = 0; i < BLOCKBUTTONS.length; i++) {\r\n    var msgName = BLOCKBUTTONS[i];\r\n    var tempBtnId = \"screen2block\" + msgName;\r\n    deleteElement(tempBtnId);\r\n  }\r\n});\r\n\r\nonEvent(\"startInput\", \"input\", function( ) {\r\n\tsetText(\"nonceLabel\", getText(\"startInput\"));\r\n});\r\n//RUNS AT START OF PROGRAM\r\ninitializeMessages();\r\nsetStyle(\"nonceLabel\", \"font-weight: bold\");\r\nsetStyle(\"mineExplanationLabel\", \"padding: 2px\");\r\nsetStyle(\"bottomMessageLabel\", \"padding: 2px\");\r\nhideElement(\"foregroundLabel\");",
    "never_autoplay_video": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "text_mode_at_start": "false",
    "hide_view_data_button": "true",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "debugger_disabled": "false",
    "libraries_enabled": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "start_html": "<div id=\"designModeViz\" class=\"appModern clip-content\" tabindex=\"1\" data-radium=\"true\" style=\"width: 320px; height: 450px; display: none;\"><div class=\"screen\" tabindex=\"1\" data-theme=\"default\" id=\"screen1\" style=\"display: block; height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255);\"><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(181, 215, 255); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 160px; height: 160px; position: absolute; left: 1.66533e-16px; top: 65px; text-align: center;\" id=\"messageDetailsPanel\" class=\"design-mode-hidden\">Message Details</label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(181, 255, 202); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 160px; height: 160px; position: absolute; left: 160px; top: 65px; text-align: center;\" id=\"verifySignaturePanel\" class=\"design-mode-hidden\">Verify Signature</label><div contenteditable=\"false\" class=\"textArea design-mode-hidden\" id=\"messageTextBox\" style=\"width: 160px; height: 135px; border-style: solid; background-color: rgba(242, 242, 242, 0.38); color: rgb(77, 87, 95); border-color: rgb(255, 255, 255); border-radius: 2px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 0px; top: 85px; margin: 0px;\"></div><button id=\"addBlockButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 25px; width: 160px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 0px; top: 345px;\" class=\"design-mode-hidden\">Add To Block</button><button id=\"nextButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 25px; width: 160px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 160px; top: 345px;\" class=\"design-mode-hidden\">Next Screen</button><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(255, 255, 255); background-color: rgb(0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 12px; padding: 2px 15px; width: 320px; height: 80px; position: absolute; left: 2.22045e-16px; top: 370px; text-align: center;\" id=\"bottomMessageLabel\">This is the \"block\" of messages you've verified above. Try to get 4-5 messages before continuing!&nbsp;If you change your mind, you can click a block to remove it!</label><input id=\"publicKeyInput\" style=\"margin: 0px; width: 160px; height: 30px; border-style: solid; color: rgb(77, 87, 95); background-color: rgb(242, 242, 242); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 160px; top: 155px;\" class=\"design-mode-hidden\"><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: Arial, Helvetica, sans-serif; font-size: 12px; padding: 2px 15px; width: 160px; height: 60px; position: absolute; left: 160px; top: 90px; text-align: center;\" id=\"publicKeyLabel\" class=\"design-mode-hidden\">Check who the sender is in this block, then copy-and-paste their public key below</label><button id=\"verifySignatureButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 35px; width: 160px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 160px; top: 190px;\" class=\"design-mode-hidden\">Verify Signature</button><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(255, 255, 255); background-color: rgb(0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 16px; padding: 2px 15px; width: 320px; height: 64px; position: absolute; left: 0px; top: 0px; text-align: center;\" id=\"topMessageLabel\">Click Below To View a Message!</label><div contenteditable=\"false\" class=\"textArea design-mode-hidden\" id=\"verifyLabel\" style=\"width: 320px; height: 120px; border-style: solid; background-color: rgb(255, 255, 255); color: rgb(77, 87, 95); border-color: rgb(255, 255, 255); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 12px; padding: 5px 15px; position: absolute; left: 0px; top: 225px; margin: 0px;\"></div><img src=\"//levelbuilder-studio.code.org/media?u=https%3A%2F%2Fsustainabledevelopment.un.org%2Fcontent%2Fimages%2Fimage18_708.jpg\" data-canonical-image-url=\"https://sustainabledevelopment.un.org/content/images/image18_708.jpg\" data-image-type=\"url\" data-object-fit=\"contain\" id=\"waitingImage\" style=\"height: 65px; width: 65px; border-style: solid; border-width: 0px; border-color: rgb(0, 0, 0); border-radius: 0px; position: absolute; left: 135px; top: 260px; margin: 0px;\" class=\"design-mode-hidden\"><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; padding: 2px 15px; width: 320px; height: 450px; position: absolute; left: 0px; top: 0px; font-size: 30px; text-align: center;\" id=\"foregroundLabel\">Click the Run button to start the Blockchain Simulator!</label></div><div class=\"screen\" tabindex=\"1\" data-theme=\"default\" id=\"screen2\" style=\"height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255); display: none;\"><div contenteditable=\"false\" class=\"textArea design-mode-hidden\" id=\"nonceTextBox\" style=\"width: 320px; height: 55px; border-style: solid; background-color: rgb(242, 242, 242); color: rgb(77, 87, 95); border-color: rgb(255, 255, 255); border-radius: 0px; border-width: 0px; font-family: Arial, Helvetica, sans-serif; font-size: 12px; padding: 5px 15px; position: absolute; left: 0px; top: 395px; margin: 0px;\"></div><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(255, 229, 181); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 12px; padding: 2px 15px; height: 55px; position: absolute; left: 0px; top: 340px; text-align: center; width: 320px;\" id=\"mineExplanationLabel\" class=\"design-mode-hidden\">When you're ready, press the Mine button, then watch the numbers above as they update!</label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(188, 253, 245); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 2px 15px; width: 160px; height: 60px; position: absolute; left: 0px; top: 280px; text-align: center;\" id=\"startLabel\" class=\"design-mode-hidden\">Number to start with</label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(255, 229, 181); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 320px; height: 60px; position: absolute; left: 0px; top: 65px; text-align: center;\" id=\"explanationLabel\" class=\"design-mode-hidden\">This block currently has a hash of:</label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(255, 255, 255); background-color: rgb(0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; padding: 2px 15px; width: 320px; height: 64px; position: absolute; left: 0px; top: 0px; text-align: left;\" id=\"topLabelScreen2\">Your \"Block\" Of Messages</label><div contenteditable=\"false\" class=\"textArea design-mode-hidden\" id=\"hashTextBox\" style=\"width: 320px; height: 35px; border-style: solid; background-color: rgba(242, 242, 242, 0.3); color: rgb(77, 87, 95); border-color: rgb(255, 255, 255); border-width: 0px; font-family: &quot;Courier New&quot;, Courier, monospace; font-size: 13px; padding: 5px 15px; position: absolute; left: 0px; top: 90px; margin: 0px; text-align: center; border-radius: 0px;\"></div><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 12px; padding: 2px 15px; width: 320px; height: 53px; position: absolute; left: 0px; top: 125px; text-align: center;\" id=\"goalLabel\" class=\"design-mode-hidden\">In order to \"mine\" the block and verify your work, you need to add a number to the end of&nbsp;your block so that the new hash starts with 2&nbsp;zeroes</label><input id=\"startInput\" style=\"margin: 0px; width: 140px; height: 30px; border-style: solid; color: rgb(77, 87, 95); background-color: rgb(242, 242, 242); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 10px; top: 310px;\" class=\"design-mode-hidden\"><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(188, 253, 245); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: Arial, Helvetica, sans-serif; font-size: 12px; padding: 2px 15px; width: 160px; height: 60px; position: absolute; left: 160px; top: 280px; text-align: center;\" id=\"amountLabel\" class=\"design-mode-hidden\">How many numbers you want to try in this batch</label><input id=\"amountInput\" style=\"margin: 0px; width: 140px; height: 30px; border-style: solid; color: rgb(77, 87, 95); background-color: rgb(242, 242, 242); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 5px 15px; position: absolute; left: 175px; top: 310px;\" class=\"design-mode-hidden\"><button id=\"generateNonceButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 25px; width: 115px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 100px; top: 370px;\" class=\"design-mode-hidden\">Mine!</button><button id=\"screen2BackButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 25px; width: 75px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 15px; position: absolute; left: 245px; top: -1.11022e-16px;\">Back</button><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgb(188, 253, 245); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: Arial, Helvetica, sans-serif; font-size: 13px; padding: 2px 15px; width: 320px; height: 55px; position: absolute; left: 0px; top: 180px; text-align: center;\" id=\"nonceTitleLabel\" class=\"design-mode-hidden\">Number Only Used Once (Nonce)</label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 12px; padding: 2px 15px; width: 320px; height: 41px; position: absolute; left: 0px; top: 235px; text-align: center;\" id=\"iterativeLabel\" class=\"design-mode-hidden\">We can attempt this by trying to \"guess\" a number that will make this work. We'll use a loop to try a bunch of numbers in a batch.</label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Courier New&quot;, Courier, monospace; font-size: 20px; padding: 2px 15px; width: 320px; height: 30px; position: absolute; left: 2.22045e-16px; top: 200px; text-align: center;\" id=\"nonceLabel\" class=\"design-mode-hidden\">0</label></div></div>",
    "fail_on_lint_errors": "false",
    "widget_mode": "false",
    "ai_enabled": "false",
    "start_libraries": "[{\"name\":\"SHAHashLibrary\",\"description\":\"Library of functions for Crypto widget apps\",\"functions\":[\"sharedPrime\",\"decimalToHexString\",\"hexStringToDecimal\",\"md5\"],\"dropletConfig\":[{\"func\":\"SHAHashLibrary.sharedPrime\",\"category\":\"Functions\",\"comment\":\"According to this website, this will generate a prime number with 129 bits of info\\nhttps://primes.utm.edu/lists/2small/100bit.html\",\"type\":\"either\"},{\"func\":\"SHAHashLibrary.decimalToHexString\",\"category\":\"Functions\",\"comment\":\"Converts a decimal number to a hex string\",\"type\":\"either\",\"params\":[\"decNum\"],\"paletteParams\":[\"decNum\"]},{\"func\":\"SHAHashLibrary.hexStringToDecimal\",\"category\":\"Functions\",\"comment\":\"Converts a hex string to a decimal number\",\"type\":\"either\",\"params\":[\"hexStr\"],\"paletteParams\":[\"hexStr\"]},{\"func\":\"SHAHashLibrary.md5\",\"category\":\"Functions\",\"comment\":\"A formatted version of a popular md5 implementation.\\nOriginal copyright (c) Paul Johnston & Greg Holt.\\nThe function itself is now 42 lines long.\",\"type\":\"either\",\"params\":[\"inputString\"],\"paletteParams\":[\"inputString\"]}],\"source\":\"//THIS IS THE LEVELBUILDER VERSION OF THIS PROJECT:\\n//https://studio.code.org/projects/applab/YXz154QFd3d2YTiTaX3Va83rbs9fclgbeL3z6jEcwyg/edit\\n//NEED TO BE ON LEVELBUILDER FOR LIBRARY IMPORT INTO LEVELS\\n\\n//According to this website, this will generate a prime number with 129 bits of info\\n//https://primes.utm.edu/lists/2small/100bit.html\\nfunction sharedPrime() {\\n  return Math.pow(2, 16) - 15;\\n}\\n\\n//Converts a decimal number to a hex string\\nfunction decimalToHexString(decNum) {\\n  return decNum.toString(16);\\n}\\n\\n//Converts a hex string to a decimal number\\nfunction hexStringToDecimal(hexStr) {\\n  return parseInt(hexStr, 16);\\n}\\n\\n\\n\\n\\n//  A formatted version of a popular md5 implementation.\\n//  Original copyright (c) Paul Johnston & Greg Holt.\\n//  The function itself is now 42 lines long.\\nfunction md5(inputString) {\\n    var hc=\\\"0123456789abcdef\\\";\\n    function rh(n) {var j,s=\\\"\\\";for(j=0;j<=3;j++) s+=hc.charAt((n>>(j*8+4))&0x0F)+hc.charAt((n>>(j*8))&0x0F);return s;}\\n    function ad(x,y) {var l=(x&0xFFFF)+(y&0xFFFF);var m=(x>>16)+(y>>16)+(l>>16);return (m<<16)|(l&0xFFFF);}\\n    function rl(n,c)            {return (n<<c)|(n>>>(32-c));}\\n    function cm(q,a,b,x,s,t)    {return ad(rl(ad(ad(a,q),ad(x,t)),s),b);}\\n    function ff(a,b,c,d,x,s,t)  {return cm((b&c)|((~b)&d),a,b,x,s,t);}\\n    function gg(a,b,c,d,x,s,t)  {return cm((b&d)|(c&(~d)),a,b,x,s,t);}\\n    function hh(a,b,c,d,x,s,t)  {return cm(b^c^d,a,b,x,s,t);}\\n    function ii(a,b,c,d,x,s,t)  {return cm(c^(b|(~d)),a,b,x,s,t);}\\n    function sb(x) {\\n        var i;var nblk=((x.length+8)>>6)+1;var blks=new Array(nblk*16);for(i=0;i<nblk*16;i++) blks[i]=0;\\n        for(i=0;i<x.length;i++) blks[i>>2]|=x.charCodeAt(i)<<((i%4)*8);\\n        blks[i>>2]|=0x80<<((i%4)*8);blks[nblk*16-2]=x.length*8;return blks;\\n    }\\n    var i,x=sb(inputString),a=1732584193,b=-271733879,c=-1732584194,d=271733878,olda,oldb,oldc,oldd;\\n    for(i=0;i<x.length;i+=16) {olda=a;oldb=b;oldc=c;oldd=d;\\n        a=ff(a,b,c,d,x[i+ 0], 7, -680876936);d=ff(d,a,b,c,x[i+ 1],12, -389564586);c=ff(c,d,a,b,x[i+ 2],17,  606105819);\\n        b=ff(b,c,d,a,x[i+ 3],22,-1044525330);a=ff(a,b,c,d,x[i+ 4], 7, -176418897);d=ff(d,a,b,c,x[i+ 5],12, 1200080426);\\n        c=ff(c,d,a,b,x[i+ 6],17,-1473231341);b=ff(b,c,d,a,x[i+ 7],22,  -45705983);a=ff(a,b,c,d,x[i+ 8], 7, 1770035416);\\n        d=ff(d,a,b,c,x[i+ 9],12,-1958414417);c=ff(c,d,a,b,x[i+10],17,     -42063);b=ff(b,c,d,a,x[i+11],22,-1990404162);\\n        a=ff(a,b,c,d,x[i+12], 7, 1804603682);d=ff(d,a,b,c,x[i+13],12,  -40341101);c=ff(c,d,a,b,x[i+14],17,-1502002290);\\n        b=ff(b,c,d,a,x[i+15],22, 1236535329);a=gg(a,b,c,d,x[i+ 1], 5, -165796510);d=gg(d,a,b,c,x[i+ 6], 9,-1069501632);\\n        c=gg(c,d,a,b,x[i+11],14,  643717713);b=gg(b,c,d,a,x[i+ 0],20, -373897302);a=gg(a,b,c,d,x[i+ 5], 5, -701558691);\\n        d=gg(d,a,b,c,x[i+10], 9,   38016083);c=gg(c,d,a,b,x[i+15],14, -660478335);b=gg(b,c,d,a,x[i+ 4],20, -405537848);\\n        a=gg(a,b,c,d,x[i+ 9], 5,  568446438);d=gg(d,a,b,c,x[i+14], 9,-1019803690);c=gg(c,d,a,b,x[i+ 3],14, -187363961);\\n        b=gg(b,c,d,a,x[i+ 8],20, 1163531501);a=gg(a,b,c,d,x[i+13], 5,-1444681467);d=gg(d,a,b,c,x[i+ 2], 9,  -51403784);\\n        c=gg(c,d,a,b,x[i+ 7],14, 1735328473);b=gg(b,c,d,a,x[i+12],20,-1926607734);a=hh(a,b,c,d,x[i+ 5], 4,    -378558);\\n        d=hh(d,a,b,c,x[i+ 8],11,-2022574463);c=hh(c,d,a,b,x[i+11],16, 1839030562);b=hh(b,c,d,a,x[i+14],23,  -35309556);\\n        a=hh(a,b,c,d,x[i+ 1], 4,-1530992060);d=hh(d,a,b,c,x[i+ 4],11, 1272893353);c=hh(c,d,a,b,x[i+ 7],16, -155497632);\\n        b=hh(b,c,d,a,x[i+10],23,-1094730640);a=hh(a,b,c,d,x[i+13], 4,  681279174);d=hh(d,a,b,c,x[i+ 0],11, -358537222);\\n        c=hh(c,d,a,b,x[i+ 3],16, -722521979);b=hh(b,c,d,a,x[i+ 6],23,   76029189);a=hh(a,b,c,d,x[i+ 9], 4, -640364487);\\n        d=hh(d,a,b,c,x[i+12],11, -421815835);c=hh(c,d,a,b,x[i+15],16,  530742520);b=hh(b,c,d,a,x[i+ 2],23, -995338651);\\n        a=ii(a,b,c,d,x[i+ 0], 6, -198630844);d=ii(d,a,b,c,x[i+ 7],10, 1126891415);c=ii(c,d,a,b,x[i+14],15,-1416354905);\\n        b=ii(b,c,d,a,x[i+ 5],21,  -57434055);a=ii(a,b,c,d,x[i+12], 6, 1700485571);d=ii(d,a,b,c,x[i+ 3],10,-1894986606);\\n        c=ii(c,d,a,b,x[i+10],15,   -1051523);b=ii(b,c,d,a,x[i+ 1],21,-2054922799);a=ii(a,b,c,d,x[i+ 8], 6, 1873313359);\\n        d=ii(d,a,b,c,x[i+15],10,  -30611744);c=ii(c,d,a,b,x[i+ 6],15,-1560198380);b=ii(b,c,d,a,x[i+13],21, 1309151649);\\n        a=ii(a,b,c,d,x[i+ 4], 6, -145523070);d=ii(d,a,b,c,x[i+11],10,-1120210379);c=ii(c,d,a,b,x[i+ 2],15,  718787259);\\n        b=ii(b,c,d,a,x[i+ 9],21, -343485551);a=ad(a,olda);b=ad(b,oldb);c=ad(c,oldc);d=ad(d,oldd);\\n    }\\n    return rh(a)+rh(b)+rh(c)+rh(d);\\n}\",\"originalName\":\"SHAHashLibrary\",\"versionId\":\"oZPIq0BmLtKk3NCUaoZ2_bI.g5yh.Rfp\",\"channelId\":\"HwYXbqSfVols5oWA-aR-Ag\",\"fromLevelbuilder\":true}]",
    "long_instructions": "# Building Blocks and Mining\r\n\r\nUse the messages below to build your block, then attempt to mine it. Make sure to verify the signature of each message and avoid adding duplicate entries into the same block!\r\n\r\n\r\n| Name | Public Key |\r\n| --- | ----------- |\r\n| Daniela | 36505 |\r\n| Alejandro &nbsp; &nbsp; &nbsp; | 46191 |\r\n| Jayla | 6531 |\r\n| Emmanuel | 38464 |\r\n| Lila | 11912 |\r\n\r\n----\r\n\r\n| # | From | To | Amount | Signature |\r\n| --- | --- | --- | --- | --- |\r\n| A | Daniela &nbsp; &nbsp; | Alejandro &nbsp; &nbsp; | 2 | fc4cf9abb6f93bd6276ab77430833c18 |\r\n| B | Lila | Alejandro | 2 | 6aae71c825293c9a819a03628d978c0e |\r\n| C | Emmanuel | Alejandro | 4 | 1131df67b7572c766ecfe68338b49b67 |\r\n| D | Jayla | Alejandro | 10 | 765967ec5dadbc1612200246dfda7b5c |\r\n| E | Daniela | Jayla | 3 | 237fb93cc84359ed8b29002096279afb |\r\n| F | Emmanuel | Jayla | 6 | eb9425053d7afa35fdfcf5c98b3d49a8 |\r\n| G | Lila | Jayla | 5 | c9d47f80325fcb79e8babddbd27b6ee4 |\r\n| H | Alejandro | Jayla | 1  | b9271d55bb931602017b45164d9e8b68 |\r\n| I | Jayla | Daniela | 1 | abfe2ed308b5a4e72c88a2d95f25b33f |\r\n| J | Alejandro | Daniela | 4 | d87687056c23dbf386a9cc809d2bdbe5 |\r\n\r\n----\r\n\r\n**On your Activity Guide:** Since the transactions are public, we can see how these people are trading money. Does it look like this scenario has a pattern? If so, what story can you tell about that scenario amongst this group of friends?",
    "preload_asset_list": null,
    "encrypted_examples": [

    ]
  },
  "game_id": 41,
  "published": true,
  "created_at": "2022-06-16T23:30:35.000Z",
  "level_num": "custom",
  "user_id": 14639,
  "audit_log": "[{\"changed_at\":\"2022-06-16T23:30:35.001+00:00\",\"changed\":[\"cloned from \\\"Crypto - Bitcoin - Scenario 2\\\"\"],\"cloned_from\":\"Crypto - Bitcoin - Scenario 2\"},{\"changed_at\":\"2022-06-16 23:31:25 +0000\",\"changed\":[\"start_blocks\",\"long_instructions\",\"preload_asset_list\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-06-16 23:37:12 +0000\",\"changed\":[\"long_instructions\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2022-08-17 23:22:36 +0000\",\"changed\":[\"embed\",\"start_blocks\",\"long_instructions\",\"preload_asset_list\",\"contained_level_names\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-02-17 00:15:13 +0000\",\"changed\":[\"makerlab_enabled\",\"long_instructions\",\"preload_asset_list\",\"contained_level_names\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-02-17 00:20:25 +0000\",\"changed\":[\"long_instructions\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-06 21:21:24 +0000\",\"changed\":[\"start_blocks\",\"start_html\",\"preload_asset_list\",\"contained_level_names\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-06 21:24:49 +0000\",\"changed\":[\"start_blocks\",\"start_html\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-06 21:26:31 +0000\",\"changed\":[\"start_blocks\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-03-06 21:26:58 +0000\",\"changed\":[\"start_blocks\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>