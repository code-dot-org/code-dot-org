<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-03T13:59:20.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Community</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of players that are part of a gaming community.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Community</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Player</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Player</code> objects\r\n\r\n* a method called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addPlayer()</code> that adds a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Player</code> to the list\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">CommunityRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Community</code> object.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addPlayer()</code> method to add players to the list.\r\n\r\n3. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> and using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">add()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Gaming Community",
    "bubble_choice_description": "Create a `Community` class that contains an `ArrayList` to store players that are part of a gaming community.",
    "thumbnail_url": "https://images.code.org/6bf6017b43db174d2b2e91d7f3a85536-game-console.png",
    "encrypted_validation": "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\nvW/6hfY2UyMgfvnJm7Q51y5iFg==\n",
    "start_sources": {
      "CommunityRunner.java": {
        "text": "public class CommunityRunner {\n  public static void main(String[] args) {\n    Player player = new Player(\"gamer\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Community object.\n     * -----------------------------------------------------------------------------\n     */\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the addPlayer() method to add a player to the list.\n     * -----------------------------------------------------------------------------\n     */\n    \n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n    \n  }\n}\n",
        "isVisible": true,
        "tabOrder": 0
      },
      "Community.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a Community\n */\npublic class Community {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Player objects\n   * -----------------------------------------------------------------------------\n   */\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a constructor that initializes the list to an empty list\n   * -----------------------------------------------------------------------------\n   */\n\n  \n  public ArrayList<Player> getPlayers() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write an accessor method that returns the list of Player objects\n     * -----------------------------------------------------------------------------\n     */\n\n    return null;\n  }\n\n  \n  public void addPlayer(Player newPlayer) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write a method called addPlayer() that adds a Player to the list\n     * -----------------------------------------------------------------------------\n     */\n  }\n  \n}\n",
        "isVisible": true,
        "tabOrder": 1
      },
      "Player.java": {
        "text": "/*\n * Represents a Player\n */\npublic class Player {\n  private String name;\n\n  public Player(String name) {\n    this.name = name;\n  }\n\n  public String toString() {\n    return name;\n  }\n}\n",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-03T13:59:20.489+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L7c_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L7c_2023\"},{\"changed_at\":\"2023-04-03 13:59:22 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:34:44 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 19:41:53 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-05 17:48:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:49:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:49:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:50:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:50:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:50:32 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:50:38 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:50:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:51:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:51:18 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:51:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:57:26 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:57:42 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:58:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:58:33 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:58:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:59:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:59:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:05:42 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-08 02:28:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"}]"
}]]></config>
</Javalab>
