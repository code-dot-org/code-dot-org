<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2016-10-12T17:57:36.000Z",
  "level_num": "custom",
  "user_id": 155,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "listLength": null,
      "randomNumber": null,
      "console.log": null,
      "declareAssign_x_array_1_4": {
        "block": "var list = [1,2,3];"
      }
    },
    "edit_code": true,
    "embed": "false",
    "instructions": "Make a boolean variable to use as a flag to keep track of whether there is a 5 in the array. (Click to see full instructions)",
    "markdown_instructions": "# Using a Boolean Variable as a Flag\r\n\r\nWe are going to do a **challenge that is similar to the last exercise** but, rather than counting the number of 5's in the array, we're going to use a different **interesting programming technique for processing arrays** that might prove useful to you in the future. \r\n\r\n# Using a Boolean Flag\r\n\r\n<img src=\"https://images.code.org/756fcab9d5f48ace76eb5d300fcf58af-image-1447624065160.png\" style=\"float: right; width: 250px\">\r\nThe technique is generally referred to as **using a boolean \"flag.\"** To understand this idea, think about how some mailboxes work: the flag starts down, and when a person wants to let the mail carrier know there is something to pick up, she puts the flag up to notify the mail carrier that there is outgoing mail in the box.\r\n\r\nWe can use a variable to do something similar when programming. Rather than incrementing a count every time we find a 5 in the array, we will use a variable that acts like a **flag**.  We will create a variable before the loop and assign it `false` to start (flag is down). Then, as we process the array, if we find a 5, set the variable to `true` (put the flag up).  \r\n\r\nHere is some pseudocode:\r\n```\r\nvar flag = FALSE\r\nFOR EACH item IN list\r\n  IF (item EQUALS 5)\r\n    flag = TRUE\r\n    \r\nDISPLAY (flag)\r\n```\r\nNotice that it doesn't matter if we find more than one 5.  It will just keep setting the flag to `true`.  However, if there are no 5's, the `if` statement in the loop will never execute, and so the variable will remain the value it was initialized to, which was `false`.\r\n\r\n# Do This:\r\n\r\n* **Implement the pseudocode above** in JavaScript. \r\n* We've given you code that constructs an array of random values, and the standard `for` loop for looping over an array.\r\n* The output will be no different from the previous exercise, but you should still **confirm that your program correctly identifies when a 5 is in the array.**\r\n\r\n| One or more 5's | No 5's |\r\n| --- | --- |\r\n|![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31 PM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46 PM.png)|\r\n\r\n",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "slider_speed": "1",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "true",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "false",
    "start_blocks": "// Fill an array with some random values\r\nvar testArray = [];\r\nfor (var i = 0; i < 10; i++) {\r\n  appendItem(testArray, randomNumber(0,10));\r\n}\r\nconsole.log(\"Original: \" + testArray);\r\n\r\n// Process the array\r\n\r\nvar flag = false;\r\nfor (var i = 0; i < 10; i++) {\r\n\r\n  // your code here\r\n  \r\n}\r\nconsole.log(\"There is a 5 in the array: \" + flag);",
    "encrypted_examples": "x3b4EKApGVyNhA+1ObQVKo/Q1JolC4lnkLPx08+bI45xKhOIlgn13IY30qmp\nUwF7\n",
    "fail_on_lint_errors": "false",
    "contained_level_names": null
  },
  "published": true,
  "notes": ""
}]]></config>
  <blocks/>
</Applab>