<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2017-08-14T19:54:19.000Z",
  "level_num": "custom",
  "user_id": 324,
  "properties": {
    "skin": "applab",
    "edit_code": true,
    "embed": "true",
    "markdown_instructions": "# Bit Length\r\n\r\nIf you don't know how many bits long each number is, you won't be able to decode a string of numbers.\r\n\r\nFor example, the following binary string could be decoded many different ways.\r\n\r\n<img src=\"https://images.code.org/51fe16afb224a2cc4819def434f6ec9d-image-1502735454689.png\" style=\"height: 30px;\">\r\n\r\nIf you split the string like this, the string reads 71, 28, 28.\r\n\r\n<img src=\"https://images.code.org/03f40f140dbdbff92af0784911e66fa2-image-1502741759516.png\" style=\"height: 30px;\"> &nbsp;&nbsp; <img src=\"https://images.code.org/b5b34c9ec4d051bd81404756269b1cf0-image-1502741761216.png\" style=\"height: 30px;\"> &nbsp;&nbsp; <img src=\"https://images.code.org/b5b34c9ec4d051bd81404756269b1cf0-image-1502741761216.png\" style=\"height: 30px;\">\r\n\r\nIf you split it like this, the string reads 17, 249, 12.\r\n\r\n<img src=\"https://images.code.org/ec9a1533c32a23637f9d1021d318f496-image-1502741540345.png\" style=\"height: 30px;\"> &nbsp;&nbsp;  <img src=\"https://images.code.org/1239b8d5f24df95e6461165b92a41383-image-1502741542720.png\" style=\"height: 30px;\">  &nbsp;&nbsp; <img src=\"https://images.code.org/5e71958697e30b9874ed6f6028a02023-image-1502741545510.png\" style=\"height: 30px;\">\r\n\r\n\r\nTo solve this problem, people agree on a fixed length for every number.  The following string uses the same three numbers, but each number takes up exactly eight bits.\r\n\r\n\r\n<img src=\"https://images.code.org/2c55ec3f4ff236cb4ffa8d9b1b46895f-image-1502742909603.png\" style=\"height: 30px;\">\r\n\r\n# Do This\r\n\r\n* Use the binary widget to decode the string that uses eight bit numbers.\r\n* Check you answer with a partner to see whether you got the same answer.",
    "instructions_important": "false",
    "submittable": "false",
    "start_blocks": "hideElement(\"startImage\");\r\ncreateCanvas(\"background\");\r\nsetPosition(\"background\", 20, 180, 285, 50);\r\nsetFillColor(\"gray\");\r\nrect(0, 0, 320, 400);\r\nvar bits = [];\r\n\r\ntextLabel(\"instructions\", \"Click on the bits to turn them off and on and change the value of your number.\");\r\nsetPosition(\"instructions\", 30, 280, 240, 100);\r\nsetProperty(\"instructions\", \"font-size\", 20);\r\nsetProperty(\"instructions\", \"text-align\", \"center\");\r\n\r\n\r\nfor (var i = 0; i<8 ; i++) {\r\n  bits[i] = [];\r\n  bits[i].on = 0;\r\n  bits[i].value = Math.pow(2, i);\r\n  textLabel(\"bit\" + i, bits[i].value);\r\n  setProperty(\"bit\" + i, \"font-size\", 20);\r\n  setProperty(\"bit\" + i, \"text-color\", \"#303030\");\r\n  setProperty(\"bit\" + i, \"text-align\", \"center\");\r\n  setPosition(\"bit\" + i, 270 - 35 * i, 190, 30, 20);\r\n  createCanvas(\"canvas\" + i);\r\n  setPosition(\"canvas\" + i, 270 - 35 * i, 185, 30,40);\r\n  setActiveCanvas(\"canvas\" + i);\r\n  setFillColor(\"black\");\r\n  rect(0,0, 350, 400);\r\n  onEvent(\"bit\" + i, \"click\", function(event) {\r\n    toggleBit(event.targetId.substring(3));\r\n  })\r\n  onEvent(\"canvas\" + i, \"click\", function(event) {\r\n    toggleBit(event.targetId.substring(6));\r\n  })\r\n}\r\n\r\n\r\ntextLabel(\"number\", \"0\");\r\nsetProperty(\"number\", \"text-color\", \"#303030\");\r\nsetProperty(\"number\", \"font-size\", 50);\r\nsetProperty(\"number\", \"text-align\", \"center\");\r\nsetPosition(\"number\", 100, 60, 120, 20);\r\n\r\nfunction toggleBit(value) {\r\n  //toggle 1 or 0 in array\r\n  bits[value].on = 1 - bits[value].on;\r\n\r\n  //show or hide bit\r\n  \r\n  setActiveCanvas(\"canvas\" + value);\r\n  if (bits[value].on == 1) {\r\n    setFillColor(\"white\");\r\n  } else {\r\n    setFillColor(\"black\");\r\n  }\r\n  rect(0,0, 350,400);\r\n  \r\n  //recalculate number\r\n  recalculate();\r\n}\r\n\r\nfunction recalculate() {\r\n  var value = 0;\r\n  for (var i=0; i<8; i++) {\r\n    value += bits[i].value * bits[i].on;\r\n  }\r\n  setText(\"number\", value);\r\n}",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "disable_procedure_autopopulate": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "disable_if_else_editing": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "hide_view_data_button": "false",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "fail_on_lint_errors": "false",
    "debugger_disabled": "false",
    "makerlab_enabled": "false",
    "start_html": "<div id=\"designModeViz\" class=\"appModern withCrosshair clip-content\" data-radium=\"true\" style=\"width: 320px; height: 450px; display: block;\"><div class=\"screen\" tabindex=\"1\" id=\"screen1\" style=\"display: block; height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0;\"><img src=\"https://images.code.org/3d248054eaeaf133a4cbbc167d7eb361-image-1502901324840.26.51 AM.png\" data-canonical-image-url=\"https://images.code.org/3d248054eaeaf133a4cbbc167d7eb361-image-1502901324840.26.51 AM.png\" id=\"startImage\" style=\"height: 75px; width: 285px; position: absolute; left: 20px; top: 155px; margin: 0px;\"></div></div>",
    "contained_level_names": null
  },
  "published": true,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2017-08-14 19:54:58 +0000\",\"changed\":[\"notes\",\"code_functions\",\"contained_level_names\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2017-08-14 19:55:35 +0000\",\"changed\":[\"contained_level_names\",\"encrypted_examples\",\"markdown_instructions\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2017-08-14 20:16:50 +0000\",\"changed\":[\"contained_level_names\",\"encrypted_examples\",\"markdown_instructions\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2017-08-14 20:35:25 +0000\",\"changed\":[\"contained_level_names\",\"encrypted_examples\",\"embed\",\"markdown_instructions\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2017-08-14 20:35:56 +0000\",\"changed\":[\"contained_level_names\",\"encrypted_examples\",\"markdown_instructions\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2017-08-14 20:39:27 +0000\",\"changed\":[\"contained_level_names\",\"encrypted_examples\",\"markdown_instructions\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2017-08-16 16:42:22 +0000\",\"changed\":[\"start_blocks\",\"contained_level_names\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2017-08-16 17:02:08 +0000\",\"changed\":[\"markdown_instructions\",\"contained_level_names\",\"encrypted_examples\"],\"changed_by_id\":106,\"changed_by_email\":\"gtwrobel@gmail.com\"}]",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Applab>