<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "project_template_level_name": "CSA U3L10-L3b PBT_pilot-2022",
    "long_instructions": "##In Basketball.java:\r\n\r\n1. Write the `hasDuplicates()`(#e7e8ea) method to return `true`(#e7e8ea) if there are duplicate elements in the `championshipWins`(#e7e8ea) array.\r\n\r\n##In MyConsole.java:\r\n\r\n2. Print the result of a call to the `hasDuplicates()`(#e7e8ea) method on the `myBasketballStats`(#e7e8ea) object to check the array for duplicates.\r\n\r\n***Curious about this dataset?*** *Learn more about it [**here**](https://www.basketball-reference.com/)!*\r\n\r\n![](https://images.code.org/4c3f723944d056252f8d5519842e0ed5-image-1648761585338.png)",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "submittable": "false",
    "csa_view_mode": "console",
    "display_name": "Basketball",
    "bubble_choice_description": "Find out if there are duplicate numbers of championship wins for a list of basketball teams.",
    "thumbnail_url": "https://images.code.org/85b78d8dd66f050a208cbf4a15f21021-image-1648757498214.png",
    "encrypted_exemplar_sources": "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\n",
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "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\n0H/pYguiAPMhVaW9MFfMFvbj6i/3sCaYDWg=\n",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"teamnames.txt\");\n    String[] teams = myFileReader.getStringData(30);\n\n    myFileReader.setFile(\"championshipwins.txt\");\n    int[] wins = myFileReader.getIntData(30);\n\n    Basketball myBasketballStats = new Basketball(teams, wins);\n\n    // TO DO #2: Print the result of a call to hasDuplicates().\n\n\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "teamnames.txt": {
        "text": "Boston Celtics\nBrooklyn Nets\nNew York Knicks\nPhiladelphia 76ers\nToronto Raptors\nChicago Bulls\nCleveland Cavaliers\nDetroit Pistons\nIndiana Pacers\nMilwaukee Bucks\nAtlanta Hawks\nCharlotte Hornets\nMiami Heat\nOrlando Magic\nWashington Wizards\nDenver Nuggets\nMinnesota Timberwolves\nOklahoma City Thunder\nPortland Trail Blazers\nUtah Jazz\nGolden State Warriors\nLos Angeles Clippers\nLos Angeles Lakers\nPhoenix Suns\nSacramento Kings\nDallas Mavericks\nHouston Rockets\nMemphis Grizzlies\nNew Orleans Pelicans\nSan Antonio Spurs",
        "isVisible": true
      },
      "championshipwins.txt": {
        "text": "17\n0\n2\n3\n1\n6\n1\n3\n0\n1\n1\n0\n3\n0\n1\n0\n0\n1\n1\n0\n6\n0\n16\n0\n1\n1\n2\n0\n0\n5",
        "isVisible": true
      },
      "Basketball.java": {
        "text": "/*\n * Analyzes data about basketball teams\n */\npublic class Basketball {\n\n  private String[] teamNames;\n  private int[] championshipWins;\n\n  /*\n   * Constructor to create an Basketball object with the\n   * specified arrays of team names and championship wins\n   */\n  public Basketball(String[] teamNames, int[] championshipWins) {\n    this.teamNames = teamNames;\n    this.championshipWins = championshipWins;\n  }\n\n  /*\n   * Returns true if there are duplicate years in\n   * the championshipWins array, otherwise returns false\n   */\n  public boolean hasDuplicates() {\n    // TO DO #1: Traverse the championshipWins array to determine if there\n    // are duplicate values and return the result.\n\n\n    return false;\n  }\n  \n}",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-08-23T20:25:44.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:25:44.198+00:00\",\"changed\":[\"cloned from \\\"CSA U3L10-L3b_2022\\\"\"],\"cloned_from\":\"CSA U3L10-L3b_2022\"},{\"changed_at\":\"2022-09-09 19:42:29 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 19:43:57 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 19:52:29 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 19:52:32 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
