<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "The `SATScene`(#e7e8ea) class creates a visualization of the number of SAT scores in the following ranges:\r\n\r\n* Top Scores\r\n\r\n* Competitive Scores\r\n\r\n* Above Average Scores\r\n\r\n* Below Average Scores\r\n\r\nThe `SATScene`(#e7e8ea) class has instance variables for each range. The `analyzeData`(#e7e8ea) method counts the number of scores in the `satScores`(#e7e8ea) array that fall within each range. The `createScene`(#e7e8ea) method draws circles using these counts to represent the number of scores in each range.\r\n\r\n##In SATScene.java:\r\n\r\n1. Write the `analyzeData()`(#e7e8ea) method by traversing the `satScores`(#e7e8ea) array.\r\n\r\n   * If the value is less than or equal to `1600`(#e7e8ea) and greater than or equal to `1340`(#e7e8ea), add `1`(#e7e8ea) to `topScores`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1320`(#e7e8ea) and greater than or equal to `1200`(#e7e8ea), add `1`(#e7e8ea) to `competitive`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1180`(#e7e8ea) and greater than or equal to `1030`(#e7e8ea), add `1`(#e7e8ea) to `aboveAverage`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1010`(#e7e8ea) and greater than or equal to `400`(#e7e8ea), add `1`(#e7e8ea) to `belowAverage`(#e7e8ea).\r\n\r\n2. Write the `createScene()`(#e7e8ea) method by drawing different colored circles for each range. Use the instance variables `topScores`(#e7e8ea), `competitive`(#e7e8ea), `aboveAverage`(#e7e8ea), and `belowAverage`(#e7e8ea) for the width and height of the circles.\r\n\r\n![](https://images.code.org/3b76d3f7d3eabfc90caaf653c78b6b92-image-1650563872945.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "SAT Scores",
    "bubble_choice_description": "Use nested if statements to analyze SAT score ranges and draw circles to represent the number of scores in each range.",
    "thumbnail_url": "https://images.code.org/3b76d3f7d3eabfc90caaf653c78b6b92-image-1650563872945.png",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"satscores.txt\");\n    int[] scores = myFileReader.getIntData(181);\n\n    SATScene myScene = new SATScene(scores);\n    \n    myScene.analyzeData();\n    myScene.createScene();\n\n    Theater.playScenes(myScene);\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "SATScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Represents a scene that illustrates SAT score ranges\n */\npublic class SATScene extends Scene {\n\n  private int[] satScores;    // The list of SAT scores\n  private int topScores;      // The number of SAT scores in the top range (1340-1600)\n  private int competitive;    // The number of SAT scores in the competitive range (1200-1320)\n  private int aboveAverage;   // The number of SAT scores in the above average range (1030-1180)\n  private int belowAverage;   // The number of SAT scores in the below average range (400-1010)\n\n  /*\n   * Constructor to create an SATScene with the specified array\n   * of SAT scores and sets the counts for each range to 0\n   */\n  public SATScene(int[] satScores) {\n    this.satScores = satScores;\n    \n    topScores = 0;\n    competitive = 0;\n    aboveAverage = 0;\n    belowAverage = 0;\n  }\n\n  /*\n   * Analyzes the values in the satScores array to count the\n   * number of scores in each range\n   */\n  public void analyzeData() {\n    // TO DO #1: Traverse the satScores array and use nested\n    // if statements to count the number of scores in each range.\n    \n\n    \n  }\n\n  /*\n   * Creates the scene by drawing circles to illustrate\n   * the number of SAT scores in each range\n   */\n  public void createScene() {\n    // TO DO #2: Draw different colored circles in the scene using the number\n    // of scores for each range as the width and height of each circle.\n    \n\n    \n  }\n}",
        "isVisible": true
      },
      "satscores.txt": {
        "text": "1600\n1593\n1587\n1580\n1573\n1567\n1560\n1553\n1547\n1540\n1533\n1527\n1520\n1513\n1507\n1500\n1493\n1487\n1480\n1473\n1467\n1460\n1453\n1447\n1440\n1433\n1427\n1420\n1413\n1407\n1400\n1393\n1387\n1380\n1373\n1367\n1360\n1353\n1347\n1340\n1333\n1327\n1320\n1313\n1307\n1300\n1293\n1287\n1280\n1273\n1267\n1260\n1253\n1247\n1240\n1233\n1227\n1220\n1213\n1207\n1200\n1193\n1187\n1180\n1173\n1167\n1160\n1153\n1147\n1140\n1133\n1127\n1120\n1113\n1107\n1100\n1093\n1087\n1080\n1073\n1067\n1060\n1053\n1047\n1040\n1033\n1027\n1020\n1013\n1007\n1000\n993\n987\n980\n973\n967\n960\n953\n947\n940\n933\n927\n920\n913\n907\n900\n893\n887\n880\n873\n867\n860\n853\n847\n840\n833\n827\n820\n813\n807\n800\n793\n787\n780\n773\n767\n760\n753\n747\n740\n733\n727\n720\n713\n707\n700\n693\n687\n680\n673\n667\n660\n653\n647\n640\n633\n627\n620\n613\n607\n600\n593\n587\n580\n573\n567\n560\n553\n547\n540\n533\n527\n520\n513\n507\n500\n493\n487\n480\n473\n467\n460\n453\n447\n440\n433\n427\n420\n413\n407\n400",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\nHGK/DAY0\n"
  },
  "game_id": 68,
  "created_at": "2022-04-07T17:45:40.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-07T17:45:40.407+00:00\",\"changed\":[\"cloned from \\\"CSA U4L3-L3c_2022\\\"\"],\"cloned_from\":\"CSA U4L3-L3c_2022\"},{\"changed_at\":\"2022-04-07 17:45:43 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 17:58:35 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-01 15:56:03 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-01 16:00:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:27:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:29:03 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:29:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:49:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:50:22 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:55:08 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:55:21 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-20 19:37:11 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-20 19:37:42 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-20 19:37:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
