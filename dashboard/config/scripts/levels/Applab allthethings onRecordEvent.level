<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2016-02-22T22:52:19.000Z",
  "level_num": "custom",
  "user_id": 6,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "onEvent": null,
      "button": null,
      "textInput": null,
      "textLabel": null,
      "dropdown": null,
      "getText": null,
      "setText": null,
      "checkbox": null,
      "radioButton": null,
      "getChecked": null,
      "setChecked": null,
      "image": null,
      "getImageURL": null,
      "setImageURL": null,
      "playSound": null,
      "showElement": null,
      "hideElement": null,
      "deleteElement": null,
      "setPosition": null,
      "setSize": null,
      "setProperty": null,
      "write": null,
      "getXPosition": null,
      "getYPosition": null,
      "setScreen": null,
      "createCanvas": null,
      "setActiveCanvas": null,
      "line": null,
      "circle": null,
      "rect": null,
      "setStrokeWidth": null,
      "setStrokeColor": null,
      "setFillColor": null,
      "drawImageURL": null,
      "getImageData": null,
      "putImageData": null,
      "clearCanvas": null,
      "getRed": null,
      "getGreen": null,
      "getBlue": null,
      "getAlpha": null,
      "setRed": null,
      "setGreen": null,
      "setBlue": null,
      "setAlpha": null,
      "setRGB": null,
      "startWebRequest": null,
      "setKeyValue": null,
      "getKeyValue": null,
      "createRecord": null,
      "readRecords": null,
      "updateRecord": null,
      "deleteRecord": null,
      "onRecordEvent": null,
      "getUserId": null,
      "drawChartFromRecords": null,
      "moveForward": null,
      "moveBackward": null,
      "move": null,
      "moveTo": null,
      "dot": null,
      "turnRight": null,
      "turnLeft": null,
      "turnTo": null,
      "arcRight": null,
      "arcLeft": null,
      "getX": null,
      "getY": null,
      "getDirection": null,
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "penRGB": null,
      "show": null,
      "hide": null,
      "speed": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "setTimeout": null,
      "clearTimeout": null,
      "setInterval": null,
      "clearInterval": null,
      "getTime": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRound": null,
      "mathAbs": null,
      "mathMax": null,
      "mathMin": null,
      "mathRandom": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "declareAssign_x_prompt": null,
      "declareAssign_x_promptNum": null,
      "console.log": null,
      "declareAssign_str_hello_world": null,
      "substring": null,
      "indexOf": null,
      "includes": null,
      "length": null,
      "toUpperCase": null,
      "toLowerCase": null,
      "declareAssign_list_abd": null,
      "listLength": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null,
      "comment": null,
      "stopSound": null
    },
    "edit_code": true,
    "embed": "false",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "false",
    "debugger_disabled": "false",
    "start_blocks": "var lastRecordId = 0;\r\nvar recordId;\r\nvar sawCreate = false;\r\nvar sawUpdate = false;\r\n\r\n// Find the highest record id already in the table\r\nreadRecords(\"mytable\", {}, function(records) {\r\n  for (var i =0; i < records.length; i++) {\r\n    lastRecordId = Math.max(lastRecordId, records[i].id);\r\n  }\r\n  listenForRecords();\r\n});\r\n\r\n\r\nfunction listenForRecords() {\r\n  onRecordEvent(\"mytable\", function(record, eventType) {\r\n    if (eventType === 'create') {\r\n      if (record.id > lastRecordId) {\r\n        // ignore records created before this test started\r\n        handleCreateEvent(record);  \r\n      }\r\n    } else if (eventType === 'update') {\r\n      handleUpdateEvent(record);\r\n    } else if ((eventType === 'delete')) {\r\n      handleDeleteEvent(record);\r\n    } else {\r\n      console.log('unexpected event type: ' + eventType);\r\n      throw 'Unexpected event type: ' + eventType;\r\n    }\r\n  });\r\n  createRecord(\"mytable\", {name:'Alice'}, function() {});\r\n}\r\n\r\nfunction handleCreateEvent(record) {\r\n  if (sawCreate) {\r\n    console.log('error in handleCreateEvent: saw too many create events')\r\n    return;\r\n  }\r\n  sawCreate = true;\r\n\r\n  if (record.name !== 'Alice') {\r\n    console.log('error in handleCreateEvent: invalid record contents: ' + JSON.stringify(record));\r\n    return;\r\n  }\r\n  recordId = record.id;\r\n  testUpdate();\r\n}\r\n\r\nfunction testUpdate() {\r\n  updateRecord(\"mytable\", {id:recordId, name:'Bob'}, function() {});\r\n}\r\n\r\nfunction handleUpdateEvent(record) {\r\n  if (!sawCreate) {\r\n    console.log('error in handleUpdateEvent: saw update before create')\r\n    return;\r\n  }\r\n  if (sawUpdate) {\r\n    console.log('error in handleUpdateEvent: saw too many update events')\r\n    return;\r\n  }\r\n  sawUpdate = true;\r\n\r\n  if (record.name !== 'Bob' || record.id !== recordId) {\r\n    console.log('error in handleUpdateEvent: invalid record contents: ' + JSON.stringify(record));\r\n    return;\r\n  }\r\n  testDelete();  \r\n}\r\n\r\nfunction testDelete() {\r\n  deleteRecord(\"mytable\", {id:recordId}, function() {});\r\n\r\n}\r\n\r\nfunction handleDeleteEvent(record) {\r\n  if (!sawCreate) {\r\n    console.log('error in handleDeleteEvent: saw delete before create')\r\n    return;\r\n  }\r\n  if (!sawUpdate) {\r\n    console.log('error in handleDeleteEvent: saw delete before update')\r\n    return;\r\n  }\r\n  if (record.name !== undefined || record.id !== recordId) {\r\n    console.log('error in handleDeleteEvent: invalid record contents: ' + JSON.stringify(record));\r\n    return;\r\n  }\r\n\r\n  textLabel('successLabel', ' onRecordEvent success!');\r\n}\r\n",
    "instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
    "markdown_instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
    "contained_level_names": null
  },
  "published": true,
  "notes": ""
}]]></config>
  <blocks/>
</Applab>