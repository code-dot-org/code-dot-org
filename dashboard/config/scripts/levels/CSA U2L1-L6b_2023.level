<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "long_instructions": "**Create the `Dessert`(#e7e8ea) class by declaring instance variables for the specified attributes, and refactor the `Pie`(#e7e8ea) class to be a subclass of the `Dessert`(#e7e8ea) class.**\r\n\r\n✅ **TO DO #1:** In the `Dessert`(#e7e8ea) class, declare instance variables for the following attributes:\r\n\r\n   * the flavor of a dessert\r\n   \r\n   * the price of a dessert\r\n\r\n✅ **TO DO #2:** Refactor the `Pie`(#e7e8ea) class to be a subclass of the `Dessert`(#e7e8ea) class.\r\n\r\n✅ **TO DO #3:** In `FoodTruckRunner.java`(#e7e8ea), instantiate a `Dessert`(#e7e8ea) object and a `Pie`(#e7e8ea) object, then print the instance variables for the `Dessert`(#e7e8ea) and `Pie`(#e7e8ea) objects by calling the `AttributesHelper.printAttributes(nameOfObject)`(#e7e8ea) method.\r\n\r\n::: details [**🔦 What is `AttributesHelper.printAttributes()`(#e7e8ea)?**]\r\n  \r\nThe `AttributesHelper.printAttributes()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nAttributesHelper.printAttributes(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, creating a subclass, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/inheritance",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Desserts and Pies",
    "bubble_choice_description": "Create the `Dessert` class by declaring instance variables for the specified attributes, and refactor the `Pie` class to be a subclass of the `Dessert` class.",
    "thumbnail_url": "https://images.code.org/9035a1faa42e4530234f38f0678f927a-pie.png",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ------------------------------------- TO DO -------------------------------------\n     * ✅ Instantiate Dessert and Pie objects, then print the instance variables for\n     * the Dessert and Pie objects to the console using AttributesHelper.printAttributes().\n     * ---------------------------------------------------------------------------------\n     */\n\n\n    \n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Dessert.java": {
        "text": "/*\n * Represents a dessert that can be sold at a food truck\n */\npublic class Dessert {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ✅ Declare instance variables for the flavor and price of a dessert.\n   * -------------------------------------------------------------------\n   */\n\n\n\n  \n\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Pie.java": {
        "text": "/*\n * Represents a pie that can be sold at a food truck\n * Pie is a type of Dessert\n */\npublic class Pie {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ✅ Refactor the Pie class to be a subclass of Dessert.\n   * -------------------------------------------------------------------\n   */\n\n  private String flavor;     // The flavor of a pie\n  private double price;      // The price of a pie\n  private int diameter;      // The diameter of a pie\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    ArrayList<String> fieldsList = fieldsToList(Arrays.toString(classFields));\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    fieldsAsText = fieldsAsText.substring(1, fieldsAsText.length() - 1);\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean\", \"int\", \"double\", \"String\"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result;\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-01T17:31:27.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-01T17:31:27.915+00:00\",\"changed\":[\"cloned from \\\"CSA U2L1-L6a_2023\\\"\"],\"cloned_from\":\"CSA U2L1-L6a_2023\"},{\"changed_at\":\"2022-11-01 17:31:29 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-01 18:19:35 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:40:42 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:47:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:47:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:26:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:26:24 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:26:36 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:26:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:27:55 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:40:12 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:40:56 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 21:21:04 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:51:50 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:12:20 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-11 18:53:41 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-11 18:54:31 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-11 18:54:46 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-11 18:55:23 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-11 18:59:07 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
