<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "long_instructions": "**Create the `Dessert`(#e7e8ea) class by declaring instance variables for the specified attributes, and refactor the `Pie`(#e7e8ea) class to be a subclass of the `Dessert`(#e7e8ea) class.**\r\n\r\n✅ **TO DO:** Write the `Dessert`(#e7e8ea) class, and refactor the `Pie`(#e7e8ea) class.\r\n\r\n1. In the `Dessert`(#e7e8ea) class, declare instance variables for the following attributes:\r\n\r\n   * the flavor of a dessert\r\n   \r\n   * the price of a dessert\r\n\r\n2. Refactor the `Pie`(#e7e8ea) class to be a subclass of the `Dessert`(#e7e8ea) class.\r\n\r\n3. In `FoodTruckRunner.java`(#e7e8ea):\r\n\r\n   **a.** Instantiate a `Dessert`(#e7e8ea) object and a `Pie`(#e7e8ea) object\r\n   \r\n   **b.** Print the instance variables for the `Dessert`(#e7e8ea) and `Pie`(#e7e8ea) objects to the console using `ClassInfo.getAttributes(nameOfObject)`(#e7e8ea)\r\n\r\n::: details [**🔦 What is `ClassInfo.getAttributes()`(#e7e8ea)?**]\r\n  \r\nThe `ClassInfo.getAttributes()`(#e7e8ea) is a hidden support method that returns the instance variables in a class as a `String`(#e7e8ea). Call the method by passing an object as its argument, such as:\r\n\r\n```\r\nDog fido = new Dog();\r\nSystem.out.println(ClassInfo.getAttributes(fido));\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, creating a subclass, and instantiating objects.\r\n\r\n📝 **COMMENT:** Be sure to add comments to note what your code does.\r\n\r\n🖥️ **TEST:** Test your program to check if your code achieves the expected result.\r\n\r\n🎉 **RUN:** Run your program to see the result of your code!\r\n\r\n## 🎯 Goal\r\n\r\n![](https://images.code.org/426d729f2ae56219ad67e8e1e1d9b663-image-1667490012557.png)",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/inheritance",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Desserts and Pies",
    "bubble_choice_description": "Create the `Dessert` class by declaring instance variables for the specified attributes, and refactor the `Pie` class to be a subclass of the `Dessert` class.",
    "thumbnail_url": "https://images.code.org/9035a1faa42e4530234f38f0678f927a-pie.png",
    "encrypted_validation": "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\n",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ------------------------------------- TO DO -------------------------------------\n     * ✅ Instantiate Dessert and Pie objects, then print the instance variables for\n     * the Dessert and Pie objects to the console using ClassInfo.getAttributes().\n     * ---------------------------------------------------------------------------------\n     */\n\n\n    \n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Dessert.java": {
        "text": "/*\n * Represents a dessert that can be sold at a food truck\n */\npublic class Dessert {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ✅ Declare instance variables for the flavor and price of a dessert.\n   * -------------------------------------------------------------------\n   */\n\n\n\n  \n\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Pie.java": {
        "text": "/*\n * Represents a pie that can be sold at a food truck\n * Pie is a type of Dessert\n */\npublic class Pie {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ✅ Refactor the Pie class to be a subclass of Dessert.\n   * -------------------------------------------------------------------\n   */\n\n  private String flavor;     // The flavor of a pie\n  private double price;      // The price of a pie\n  private int diameter;      // The diameter of a pie\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "ClassInfo.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ClassInfo {\n\n  public static String getAttributes(Object testObject) {\n    Class objectClass = testObject.getClass();\n    Class objectSuperClass = objectClass.getSuperclass();\n    \n    Field[] objectFields = objectClass.getDeclaredFields();\n    Field[] superFields = objectSuperClass.getDeclaredFields();\n    \n    ArrayList<String> classFieldsList = convertToList(Arrays.toString(objectFields));\n    ArrayList<String> superFieldsList = convertToList(Arrays.toString(superFields));\n\n    String className = objectClass.getSimpleName();\n    String superClassName = objectSuperClass.getSimpleName();\n    \n    String heading = \"\\n------------------------------\\n\";\n    \n    String classFieldsText = cleanFields(classFieldsList, className);\n    String superFieldsText = cleanFields(superFieldsList, superClassName);\n\n    String result = className + \" Attributes \" + heading + classFieldsText;\n\n    if (!superClassName.equals(\"Object\")) {\n      result += \"\\n>> inherited from \" + superClassName + \" class <<\\n\" + superFieldsText;\n    }\n\n    return result;\n  }\n\n  public static ArrayList<String> convertToList(String result) {\n    result = result.substring(1, result.length() - 1);\n    ArrayList<String> classFields = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = result.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = result.substring(0, comma);\n      classFields.add(currentField);\n      result = result.substring(comma + 2);\n      comma = result.indexOf(\",\");\n    }\n\n    classFields.add(result);\n    return classFields;\n  }\n\n  public static String cleanFields(ArrayList<String> classFields, String className) {\n    String result = \"\";\n\n    for (int index = 0; index < classFields.size(); index++) {\n      String currentField = classFields.get(index);\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      result += currentField + \"\\n\";\n    }\n\n    return result;\n  }\n\n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n\n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n\n  public static String findField(ArrayList<String> classFields, String typeToFind) {\n    String result = \"MISSING\";\n    \n    for (int index = 0; index < classFields.size(); index++) {\n      String current = classFields.get(index);\n      \n      if (current.indexOf(typeToFind) > 0) {\n        result = ClassInfo.removeClassName(current, \"Instrument\");\n        result = ClassInfo.removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n\n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    }\n\n    return result;\n  }\n\n  public static String getFieldType(String currentField) {\n    currentField = currentField.trim();\n    String[] possibleTypes = {\"boolean\", \"int\", \"double\", \"String\"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result;\n  }\n\n  public static String getConstructors(Object testObject) {\n    Class objectClass = testObject.getClass();\n    String className = objectClass.getSimpleName();\n    Constructor[] objectConstructors = objectClass.getDeclaredConstructors();\n    \n    ArrayList<String> constructorsList = convertToList(Arrays.toString(objectConstructors));\n\n    String heading = \"\\n------------------------------\\n\";\n    String result = className + \" Constructors \" + heading;\n\n    for (String current : constructorsList) {\n      result += current + \"\\n\";\n    }\n    \n    return result;\n  }\n\n  public static String getValue(List<String> output, String lineToFind) {\n    String outputText = \"\";\n    String valueResult = \"\";\n\n    for (int index = 0; index < output.size(); index++) {\n      String current = output.get(index);\n      \n      if (current.indexOf(lineToFind) >= 0) {\n        outputText = current;\n        valueResult = outputText.substring(lineToFind.length());\n      }\n    }\n    \n    return valueResult.trim();\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "encrypted_exemplar_sources": "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\nURl4IK6woqcgxfCL98irme6OHYL4\n"
  },
  "game_id": 68,
  "created_at": "2022-11-01T17:31:27.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-01T17:31:27.915+00:00\",\"changed\":[\"cloned from \\\"CSA U2L1-L6a_2023\\\"\"],\"cloned_from\":\"CSA U2L1-L6a_2023\"},{\"changed_at\":\"2022-11-01 17:31:29 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-01 18:19:35 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:40:42 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:47:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:47:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:26:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:26:24 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:26:36 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:26:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:27:55 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:40:12 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:40:56 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 21:21:04 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:51:50 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:12:20 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
