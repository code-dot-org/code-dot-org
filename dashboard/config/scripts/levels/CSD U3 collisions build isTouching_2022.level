<Gamelab>
  <config><![CDATA[{
  "game_id": 50,
  "created_at": "2022-03-30T23:41:01.000Z",
  "level_num": "custom",
  "user_id": 324,
  "properties": {
    "skin": "gamelab",
    "code_functions": {
      "drawSprites": null,
      "keyDown": null,
      "comment_GameLab": null,
      "var sprite = createSprite": null,
      "setAnimation": null,
      "sprite.height": null,
      "sprite.width": null,
      "visible": null,
      "comment_Sprites": null,
      "background": null,
      "ifBlock": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "mathAbs": null,
      "comment_Math": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "console.log": null,
      "comment_Variables": null
    },
    "edit_code": true,
    "embed": "false",
    "long_instructions": "# Using Math to Figure it Out\r\n\r\nComputers use math to figure out whether two things are touching.  Look at the math in this program to see how the sprite properties are compared with their width to see whether they are touching.\r\n\r\n# Do This\r\n\r\n* Read the if statements inside the draw loop and find the different sprite properties and how they are compared.\r\n* Discuss the code with your partner.\r\n* Why does the code only use the width and x properties, and not the height and y properties?\r\n* Would you want to write this code every time you checked whether something was touching?\r\n",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "validation_enabled": "false",
    "text_mode_at_start": "false",
    "submittable": "false",
    "hide_view_data_button": "false",
    "debugger_disabled": "true",
    "hide_animation_mode": "false",
    "pause_animations_by_default": "false",
    "start_animations": "{\r\n  \"orderedKeys\": [\r\n    \"86485340-196f-4e35-af2b-629490d8143c\",\r\n    \"47f5c656-ef78-4de7-b41f-7779cd5c6ef6\",\r\n    \"052023e9-81ce-455c-985e-bf568c30ed6f\",\r\n    \"082c62b0-c1a6-4adb-9b6f-75909ba305e4\",\r\n    \"4a289c63-a3a6-472a-ab17-b31fdaa14c29\"\r\n  ],\r\n  \"propsByKey\": {\r\n    \"86485340-196f-4e35-af2b-629490d8143c\": {\r\n      \"name\": \"bunny\",\r\n      \"sourceUrl\": \"https://studio.code.org/v3/animations/oyOr3rFW2xqwucwtvqeLCxQw7ghFJkPUxgvUNVsdwNM/86485340-196f-4e35-af2b-629490d8143c.png?version=9hWKijZc77UHfHT5vybfDt19a5oGYXle\",\r\n      \"frameSize\": {\r\n        \"x\": 112,\r\n        \"y\": 191\r\n      },\r\n      \"frameCount\": 1,\r\n      \"looping\": true,\r\n      \"frameDelay\": 12,\r\n      \"version\": \"9hWKijZc77UHfHT5vybfDt19a5oGYXle\"\r\n    },\r\n    \"47f5c656-ef78-4de7-b41f-7779cd5c6ef6\": {\r\n      \"name\": \"stew\",\r\n      \"sourceUrl\": \"https://studio.code.org/v3/animations/oyOr3rFW2xqwucwtvqeLCxQw7ghFJkPUxgvUNVsdwNM/47f5c656-ef78-4de7-b41f-7779cd5c6ef6.png?version=FRIA.IFIDAY1h9Xq0qUeJMHuI8Tw5K_K\",\r\n      \"frameSize\": {\r\n        \"x\": 87,\r\n        \"y\": 53\r\n      },\r\n      \"frameCount\": 1,\r\n      \"looping\": true,\r\n      \"frameDelay\": 12,\r\n      \"version\": \"FRIA.IFIDAY1h9Xq0qUeJMHuI8Tw5K_K\"\r\n    },\r\n    \"052023e9-81ce-455c-985e-bf568c30ed6f\": {\r\n      \"name\": \"bowl\",\r\n      \"sourceUrl\": \"https://studio.code.org/v3/animations/oyOr3rFW2xqwucwtvqeLCxQw7ghFJkPUxgvUNVsdwNM/052023e9-81ce-455c-985e-bf568c30ed6f.png?version=X3oUxgDsNCzxle6NMyXoqtsZcJCvanUq\",\r\n      \"frameSize\": {\r\n        \"x\": 87,\r\n        \"y\": 53\r\n      },\r\n      \"frameCount\": 1,\r\n      \"looping\": true,\r\n      \"frameDelay\": 12,\r\n      \"version\": \"X3oUxgDsNCzxle6NMyXoqtsZcJCvanUq\"\r\n    },\r\n    \"082c62b0-c1a6-4adb-9b6f-75909ba305e4\": {\r\n      \"name\": \"meadow\",\r\n      \"sourceUrl\": \"https://studio.code.org/api/v1/animation-library/gamelab/PBJke0OcZeBcSCZ4Jf1odHo4h3du1gOK/category_backgrounds/meadow.png\",\r\n      \"frameSize\": {\r\n        \"x\": 400,\r\n        \"y\": 400\r\n      },\r\n      \"frameCount\": 1,\r\n      \"looping\": true,\r\n      \"frameDelay\": 2,\r\n      \"version\": \"PBJke0OcZeBcSCZ4Jf1odHo4h3du1gOK\"\r\n    },\r\n    \"4a289c63-a3a6-472a-ab17-b31fdaa14c29\": {\r\n      \"name\": \"robot\",\r\n      \"sourceUrl\": \"https://studio.code.org/api/v1/animation-library/gamelab/V1ZFWXFctYTOk6tsB96C9ZdH.jLHrZGY/category_characters/gray_robot_3.png\",\r\n      \"frameSize\": {\r\n        \"x\": 480,\r\n        \"y\": 847\r\n      },\r\n      \"frameCount\": 1,\r\n      \"looping\": true,\r\n      \"frameDelay\": 2,\r\n      \"version\": \"V1ZFWXFctYTOk6tsB96C9ZdH.jLHrZGY\"\r\n    }\r\n  }\r\n}",
    "start_blocks": "// Create the sprites and start them moving\r\nvar backdrop = createSprite(200,200);\r\nbackdrop.setAnimation(\"meadow\");\r\nvar bunny = createSprite(50, 300);\r\nbunny.setAnimation(\"bunny\");\r\nbunny.velocityX = 3;\r\nvar robot = createSprite(400, 320);\r\nrobot.setAnimation(\"robot\");\r\nrobot.scale = 0.2;\r\nrobot.velocityX = -3;\r\nvar dinner = createSprite(370, 350);\r\ndinner.setAnimation(\"stew\");\r\ndinner.velocityX = -3;\r\n\r\nfunction draw() {\r\n  // check if the bunny and dinner are touching\r\n  if ((((bunny.x > dinner.x) && ((bunny.x - dinner.x) < (bunny.width/2 + dinner.width/2))) || \r\n    ((bunny.x < dinner.x) && ((bunny.x - dinner.x) > - (bunny.width/2 + dinner.width/2))))) {\r\n    // stop everything and change to empty bowl\r\n    bunny.velocityX = 0;\r\n    dinner.velocityX = 0;\r\n    robot.velocityX = 0;\r\n    dinner.setAnimation(\"bowl\");\r\n  }\r\n  drawSprites();\r\n}\r\n",
    "start_in_animation_tab": "false",
    "all_animations_single_frame": "true",
    "instructions_important": "false",
    "show_debug_watch": "true",
    "display_name": "Collision Detection",
    "hide_share_and_remix": "false",
    "disable_if_else_editing": "false",
    "expand_debugger": "false",
    "teacher_markdown": "The code in this level is overwhelming.  The point is not that students understand every line, but that they see that it's possible to check whether sprites are touching just by using their positions.  They should understand that the `isTouching` block used in the next level automatically runs the complicated code that they see here, but that it's hidden inside the block to make programming easier.\r\n\r\nThis code does not include the y and height properties because the two sprites are interacting on the same horizontal line.  If the bunny could move diagonally, then the code would be even more complicated.",
    "parent_level_id": 20818,
    "name_suffix": "_2022",
    "encrypted": "false",
    "mini_rubric": "false",
    "libraries_enabled": "false",
    "contained_level_names": [
      "CSD games collision predict contained_2022"
    ],
    "preload_asset_list": null
  },
  "published": true,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2022-03-30T23:41:01.053+00:00\",\"changed\":[\"cloned from \\\"CSD U3 collisions build isTouching_2021\\\"\"],\"cloned_from\":\"CSD U3 collisions build isTouching_2021\"}]"
}]]></config>
  <blocks/>
</Gamelab>