<Applab>
  <config><![CDATA[{
  "published": true,
  "game_id": 41,
  "created_at": "2023-06-01T16:57:11.000Z",
  "level_num": "custom",
  "user_id": 14639,
  "properties": {
    "encrypted": "false",
    "skin": "applab",
    "validation_enabled": "false",
    "embed": "true",
    "mini_rubric": "false",
    "submittable": "false",
    "start_blocks": "/*************************************\r\n * Sarah (programmer) note:\r\n * This entire program was stolen from a different program that was created for compression.\r\n * The names do not all make sense, but otherwise the functionality was what I wanted.\r\n * Not sure it's worth time to find everywhere that I would have to rename them. \r\n***************************************/\r\n\r\n//Global variables\r\nvar WIDTH = 320; //width of canvas for painting images on\r\nvar HEIGHT = 280; //height of canvas for painting images on\r\n//default image in case the user doesn't add their own\r\nvar pixelImage = \"https://studio.code.org/media?u=https%3A%2F%2Fimages.code.org%2F94fc42764aa25d608f2489cee7a04d11-image-1564414597427.jpg\";\r\n\r\n//Canvases for drawing images on\r\ncreateCanvas(\"imgCanv\", WIDTH, HEIGHT); //Will draw the image with no noise\r\ncreateCanvas(\"drawCanv\", WIDTH, HEIGHT); //Will draw a computed image with noise\r\n\r\n//Set the original level of noise to 1, and draw the first image on the canvas\r\nsetup();\r\n\r\n/***\r\n * Function: Use an image users have uploaded from a URL\r\n * Called when: The new image button is clicked\r\n ***/ \r\nonEvent(\"newImageButton\", \"click\", function(){\r\n  pixelImage = prompt(\"Enter your picture URL\");\r\n  if(pixelImage == null){ //if the user didn't enter a value, use the default image\r\n    pixelImage = \"https://studio.code.org/media?u=https%3A%2F%2Fimages.code.org%2F94fc42764aa25d608f2489cee7a04d11-image-1564414597427.jpg\";\r\n  } else if (pixelImage.includes(\"jpg\") == false //if the user entered a value, but it's not an image, use the default image\r\n  && pixelImage.includes(\"JPG\") == false \r\n  && pixelImage.includes(\"png\") == false\r\n  && pixelImage.includes(\"PNG\") == false\r\n  && pixelImage.includes(\"gif\") == false\r\n  && pixelImage.includes(\"GIF\") == false\r\n  && pixelImage.includes(\"jpeg\") == false\r\n  && pixelImage.includes(\"JPEG\") == false\r\n  && pixelImage == \"\"){\r\n    pixelImage = \"https://studio.code.org/media?u=https%3A%2F%2Fimages.code.org%2F94fc42764aa25d608f2489cee7a04d11-image-1564414597427.jpg\";\r\n  }\r\n  setup(); //if we made it here, it's either a valid image or we've made it a valid image. Re-set with this new image.\r\n});\r\n\r\n/****\r\n * Function: Every time the user moves the slider, an image will appear with that amount of noise \r\n * Called when: The slider is moved\r\n ****/\r\nonEvent(\"bitsSlider\", \"change\", function( ) {\r\n  setText(\"sampleSizeOutput\", getNumber(\"bitsSlider\"));\r\n  hideElement(\"sampleSizeOutput\");\r\n  sampleImage(getNumber(\"bitsSlider\"));\r\n  showElement(\"sampleSizeOutput\");\r\n});\r\n\r\n/******\r\n * Input: url -- the URL to draw the original input from\r\n * Output: no return, but the screen changes. See \"function\"\r\n * Function: Draw the original, no-noise image on the drawCanv \r\n * Called when: Noise is set to 1 or the setup function is called (new image, first run)\r\n ******/\r\nfunction drawImg(url) {\r\n  setActiveCanvas(\"drawCanv\");\r\n  clearCanvas();\r\n  setActiveCanvas(\"imgCanv\");\r\n  clearCanvas();\r\n  setFillColor(\"black\");\r\n  rect(0, 0, WIDTH, HEIGHT);\r\n  drawImageURL(url);\r\n  showElement(\"imgCanv\");\r\n}\r\n\r\n/******\r\n * Input: noiseAmount\r\n * Output: No return, but the screen changes -- see \"function\"\r\n * Function: A noisy version of the image is drawn on a canvas that only shows noisy images.\r\n *           If there is no noise added, draws the no-noise image on the no-noise canvas.\r\n * Called when: The user moves the slider that adds or subtracts noise from the image\r\n ******/\r\nfunction sampleImage(noiseAmount) {\r\n\r\n  //Find the values of the original image, add \"noise\" and store them here\r\n  var red;\r\n  var green;\r\n  var blue;\r\n\r\n  if (noiseAmount > 1){\r\n    setActiveCanvas(\"drawCanv\");\r\n    clearCanvas();\r\n  \r\n    setActiveCanvas(\"imgCanv\");\r\n    var imageData = getImageData(0,0,WIDTH,HEIGHT);\r\n    var newImageData = imageData;\r\n    hideElement(\"imgCanv\");\r\n    showElement(\"loadingScreen\");\r\n  \r\n    for (var i = 0; i < imageData.data.length; i += 4) {\r\n      var noise = (0.5 - Math.random()) * noiseAmount;\r\n  \r\n      //use this line for true Gaussian Noise and uncomment the required functions.\r\n      //True Gaussian noise will get much noisier much quicker, so you should also change the values the slider can go to.\r\n      //comment out the previous noise line if we want Gaussian noise.\r\n      //var noise = gaussianNoise(0, size * 255);\r\n  \r\n      //doing the calculations first makes the image show up better, I imagine for threading\r\n      red = imageData.data[i] + noise; // Red channel\r\n      green = imageData.data[i + 1] + noise; // Green channel\r\n      blue = imageData.data[i + 2] + noise; // Blue channel\r\n      newImageData.data[i] = red;\r\n      newImageData.data[i+ 1] = green;\r\n      newImageData.data[i+2] = blue;\r\n   }\r\n    //Draw the noisy image to the screen\r\n    setActiveCanvas(\"drawCanv\");\r\n    putImageData(newImageData,0,0);\r\n    hideElement(\"loadingScreen\");\r\n  } \r\n  else { // When noiseAmount is 1 we should just draw the non-noisy image\r\n    drawImg(pixelImage);\r\n  }\r\n}\r\n\r\n\r\n/******\r\n * Function: start the slider at 1 noise, draw a non-noisy version of the image\r\n * Called when: * there is a new image \r\n *              * the program first runs.\r\n ******/\r\nfunction setup(){\r\n  setProperty(\"bitsSlider\", \"value\", 1);\r\n  setText(\"sampleSizeOutput\", 1);\r\n  drawImg(pixelImage);\r\n}\r\n\r\n/***\r\n * This function creates true Gaussian noise, as opposed to uniform random noise. \r\n * Uniform random noise will do, though. Kept this here in case we want to go back to the\r\n * kind of noise that a diffusion model would actually use.\r\n * To use this function, find the commented out line for noise in sampleImage()\r\n * \r\nfunction gaussianNoise(mean, stdDev) {\r\n  var u = Math.random();\r\n  var v = Math.random();\r\n  return stdDev * Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v) + mean;\r\n}\r\n***/\r\n",
    "never_autoplay_video": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "text_mode_at_start": "false",
    "hide_view_data_button": "true",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "debugger_disabled": "false",
    "libraries_enabled": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "start_html": "<div id=\"designModeViz\" class=\"appModern\" tabindex=\"1\" data-radium=\"true\" style=\"display: none; width: 320px; height: 450px;\"><div class=\"screen\" tabindex=\"1\" data-theme=\"default\" id=\"compressScreen\" style=\"display: block; height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(27, 137, 247);\"><input type=\"range\" value=\"1\" min=\"1\" max=\"3000\" step=\"1\" id=\"bitsSlider\" style=\"margin: 0px; padding: 0px; width: 310px; height: 25px; position: absolute; left: 5px; top: 305px;\"><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; border-radius: 0px; border-width: 0px; border-color: rgb(77, 87, 95); color: rgb(255, 255, 255); font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 16px; padding: 2px 15px; width: 90px; height: 20px; position: absolute; left: 220px; top: 425px; text-align: left; background-color: rgba(0, 0, 0, 0); text-rendering: optimizespeed;\" id=\"sampleSizeOutput\"></label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; color: rgb(255, 255, 255); background-color: rgba(0, 0, 0, 0); border-radius: 0px; border-width: 0px; font-family: Arial, Helvetica, sans-serif; font-size: 15px; padding: 2px 15px; width: 320px; height: 45px; position: absolute; left: -1.11022e-16px; top: 335px; text-align: center; border-color: rgb(0, 0, 0); text-rendering: optimizespeed;\" id=\"label1\">Move the slider to add more or less generations of noise to the image</label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; border-radius: 0px; border-width: 0px; border-color: rgb(77, 87, 95); color: rgb(255, 164, 0); font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 16px; padding: 2px 15px; width: 198px; height: 21px; position: absolute; top: 425px; text-align: center; left: 0px; background-color: rgba(0, 0, 0, 0); text-rendering: optimizespeed;\" id=\"label2\">Noise Generations: </label><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; color: rgb(77, 87, 95); background-color: rgb(255, 164, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; font-size: 13px; padding: 2px 15px; width: 320px; height: 25px; position: absolute; left: 0px; top: 275px; text-rendering: optimizespeed;\" id=\"label7\"></label><button id=\"newImageButton\" style=\"padding: 0px; margin: 0px; border-style: solid; height: 30px; width: 100px; background-color: rgb(255, 164, 0); color: rgb(255, 255, 255); border-color: rgb(77, 87, 95); border-radius: 4px; border-width: 1px; font-family: Arial, Helvetica, sans-serif; font-size: 15px; position: absolute; left: 105px; top: 390px;\">New Image</button><label style=\"margin: 0px; line-height: 1; overflow: hidden; overflow-wrap: break-word; max-width: 320px; border-style: solid; text-rendering: optimizespeed; color: rgb(77, 87, 95); background-color: rgba(0, 0, 0, 0); border-color: rgb(77, 87, 95); border-radius: 0px; border-width: 0px; font-family: &quot;Arial Black&quot;, Gadget, sans-serif; padding: 2px 15px; width: 255px; height: 155px; position: absolute; left: 25px; top: 35px; font-size: 20px;\" id=\"loadingScreen\" class=\"design-mode-hidden\">Be patient! Noisy image loading!</label></div></div>",
    "fail_on_lint_errors": "false",
    "widget_mode": "false",
    "ai_enabled": "false",
    "long_instructions": "# Noisy Image Widget\r\n\r\nExplore what images look like with different amounts of noise added. What details can you still tell exist? Move the slider to change the amount of noise.\r\n\r\n",
    "display_name": "Voice Simulator",
    "teacher_markdown": "While the noise generated by this widget is not truly done in \"generations\" and is not truly Gaussian noise (which a diffusion model uses) the point of this activity is for students to see details in noisy images, which this widget shows. True Gaussian noise would get much noisier much quicker.",
    "preload_asset_list": null,
    "encrypted_examples": [

    ]
  },
  "audit_log": "[{\"changed_at\":\"2023-06-01T16:57:11.359+00:00\",\"changed\":[\"cloned from \\\"LLM - Written Voice Simulator\\\"\"],\"cloned_from\":\"LLM - Written Voice Simulator\"},{\"changed_at\":\"2023-06-01 17:08:43 +0000\",\"changed\":[\"start_blocks\",\"start_html\",\"long_instructions\",\"teacher_markdown\",\"preload_asset_list\"],\"changed_by_id\":18972,\"changed_by_email\":\"sarah.judd@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>