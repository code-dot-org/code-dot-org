<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-02-26T00:28:18.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Modify this program to use an `ArrayList` instead of a 1D array.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class MyConsole {\n  public static void main(String[] args) throws FileNotFoundException {\n\n    File plainPoemFile = new File(\"plainPoem.txt\");\n    File freeVersePoemFile = new File(\"freeVersePoem.txt\");\n    File haikuPoemFile = new File(\"haikuPoem.txt\");\n    \n    Poem plainPoem = new Poem(\"The Road Not Taken\", \"Robert Frost\", plainPoemFile);\n    FreeVerse freeVersePoem = new FreeVerse(\"After the Sea-Ship\", \"Walt Whitman\", false, freeVersePoemFile);\n    Haiku haikuPoem = new Haiku(\"Tanka\", \"Sadakichi Harmann\", 5, haikuPoemFile);\n\n    Poem[] poetryCollection = new Poem[3];\n    poetryCollection[0] = plainPoem;\n    poetryCollection[1] = freeVersePoem;\n    poetryCollection[2] = haikuPoem;\n\n    for (int index = 0; index < poetryCollection.length; index++) {\n      poetryCollection[index].followsRules();\n    }\n  }\n}",
        "isVisible": true
      },
      "Poem.java": {
        "text": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class Poem {\n\n  private String title;\n  private String author;\n  private File poemFile;\n  private ArrayList<String> poemText;\n\n  public Poem(String title, String author, File poemFile) throws FileNotFoundException {\n    this.title = title;\n    this.author = author;\n    this.poemFile = poemFile;\n    this.poemText = readFile();\n  }\n\n  public String getTitle() {\n    return title;\n  }\n\n  public String getAuthor() {\n    return author;\n  }\n\n  public ArrayList<String> readFile() throws FileNotFoundException {\n    Scanner fileInput = new Scanner(poemFile);\n    ArrayList<String> fileText = new ArrayList<String>();\n\n    while (fileInput.hasNextLine()) {\n      fileText.add(fileInput.nextLine());\n    }\n\n    fileInput.close();\n\n    return fileText;\n  }\n\n  public void followsRules() {\n    boolean meetsLimits = true;\n\n    for (int index = 0; index < poemText.size(); index++) {\n      String currentLine = poemText.get(index);\n\n      if (currentLine.length() > 50) {\n        meetsLimits = false;\n      }\n    }\n\n    System.out.println(\"This plain poem should not have more than 50 characters.\");\n    if (meetsLimits) {\n      System.out.println(\"This plain poem follows the rules.\");\n    }\n    else {\n      System.out.println(\"This plain poem does NOT follow the rules.\");\n    }\n  }\n\n  public String toString() {\n    String poemAsString = \"\";\n    \n    for (int index = 0; index < poemText.size(); index++) {\n      poemAsString += poemText.get(index) + \"\\n\";\n    }\n\n    return poemAsString;\n  }\n  \n}",
        "isVisible": true
      },
      "FreeVerse.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FreeVerse extends Poem {\n\n  private boolean hasRhyme;\n\n  public FreeVerse(String title, String author, boolean hasRhyme, File poemFile) throws FileNotFoundException {\n    super(title, author, poemFile);\n    this.hasRhyme = hasRhyme;\n  }\n\n  public boolean getHasRhyme() {\n    return hasRhyme;\n  }\n\n  public void followsRules() {\n    System.out.println(\"This free verse poem should not rhyme.\");\n\n    if (!hasRhyme) {\n      System.out.println(\"This free verse poem follows the rules.\");\n    }\n    else {\n      System.out.println(\"This free verse poem does NOT follow the rules.\");\n    }\n  }\n  \n}",
        "isVisible": true
      },
      "Haiku.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class Haiku extends Poem {\n\n  private int numLines;\n\n  public Haiku(String title, String author, int numLines, File poemFile) throws FileNotFoundException {\n    super(title, author, poemFile);\n    this.numLines = numLines;\n  }\n\n  public void followsRules() {\n    System.out.println(\"This haiku poem should not rhyme.\");\n\n    if (numLines <= 3) {\n      System.out.println(\"This haiku poem follows the rules.\");\n    }\n    else {\n      System.out.println(\"This haiku poem does NOT follow the rules.\");\n    }\n  }\n\n}",
        "isVisible": true
      },
      "plainPoem.txt": {
        "text": "Two roads diverged in a yellow wood,\nAnd sorry I could not travel both\nAnd be one traveler, long I stood\nAnd looked down one as far as I could\nTo where it bent in the undergrowth;\n\nThen took the other, as just as fair,\nAnd having perhaps the better claim,\nBecause it was grassy and wanted wear;\nThough as for that the passing there\nHad worn them really about the same,\n\nAnd both that morning equally lay\nIn leaves no step had trodden black.\nOh, I kept the first for another day!\nYet knowing how way leads on to way,\nI doubted if I should ever come back.\n\nI shall be telling this with a sigh\nSomewhere ages and ages hence:\nTwo roads diverged in a wood, and Iâ€”\nI took the one less traveled by,\nAnd that has made all the difference.",
        "isVisible": true
      },
      "freeVersePoem.txt": {
        "text": "AFTER the Sea-Ship--after the whistling winds;\nAfter the white-gray sails, taut to their spars and ropes,\nBelow, a myriad, myriad waves, hastening, lifting up their necks,\nTending in ceaseless flow toward the track of the ship:\nWaves of the ocean, bubbling and gurgling, blithely prying,\nWaves, undulating waves--liquid, uneven, emulous waves,\nToward that whirling current, laughing and buoyant, with curves,\nWhere the great Vessel, sailing and tacking, displaced the surface;",
        "isVisible": true
      },
      "haikuPoem.txt": {
        "text": "Winter? Spring? Who knows?\nWhite buds from the plumtrees wing\nAnd mingle with the snows.\nNo blue skies these flowers bring,\nYet their fragrance augurs Spring.",
        "isVisible": true
      }
    },
    "encrypted_examples": "f0IsrdHx9oayOAswvXWYgoG/TL5XtGZ+9azHHlFb/tM9E9IspvpSby6P4e/Z\n1tOr45wvDKL731mmXnlgfwfXk7Z82RYQVgr5I+Osg5/zXb0=\n",
    "name_suffix": "_2022"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-02-26T00:28:18.308+00:00\",\"changed\":[\"cloned from \\\"CSA U6L5-L1\\\"\"],\"cloned_from\":\"CSA U6L5-L1\"}]"
}]]></config>
</Javalab>
