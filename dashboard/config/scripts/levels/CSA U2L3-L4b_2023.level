<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A website allows freelance photographers to display and sell their projects.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Project`(#e7e8ea) class to assign specific values to the `title`(#e7e8ea) and `numPhotos`(#e7e8ea) instance variables.\r\n\r\n✅ **TO DO #2:** Write a parameterized constructor in the `Project`(#e7e8ea) class to assign a specific value to the `title`(#e7e8ea) instance variable and a default value to the `numPhotos`(#e7e8ea) instance variable.\r\n\r\n✅ **TO DO #3:** In `ProjectRunner.java`(#e7e8ea), instantiate `Project`(#e7e8ea) objects using each parameterized constructor. \r\n\r\n✅ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the `Project`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nUse the `getTitle()`(#e7e8ea) and `getNumPhotos()`(#e7e8ea) methods in the `Project`(#e7e8ea) class to get the current values assigned to the instance variables. For example:\r\n\r\n```\r\nProject landscapes = new Project();\r\nSystem.out.println(\"Title: \" + landscapes.getTitle());\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing a parameterized constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Photographer Projects",
    "bubble_choice_description": "A website allows freelance photographers to display and sell their projects.",
    "thumbnail_url": "https://images.code.org/d9cf73181550fe3578f317197fbaa1d2-camera.png",
    "encrypted_exemplar_sources": "COc2mpzEVFQI8CeFwz9gmTgF6y0OWkKZe9k8N3D0j/eTvyQ8dh2+01Fixfzx\nBV7sgaYj6mQlkazTcSDmkR4P5R1QKc6Yup/b2ZO7KK1wzkLdDIoFcgKz6it4\n0mEU+H/7uFahZ6rl/K1ihHAeFMFYHljFvVVUsl8FWmTO3wwVqTwEwpjVmtBy\nfh0SpMmmFa55744J2+k8ehXuhOmquqP6OAQQxSQ/iUI4GYYVWBL4nnyNZnBZ\nFrrqGpdIiBRuYeVo+k6BvxhPwRqKggNYXD2XbLymMDgVW52XmObQOUweUH36\nO5XzKnrX7HW/YbrFR9yiLa2HHiPhpyXuSxfw6MJpry/f0QAsBHrVLfKbLS/M\nM9y40BwTziHU2fZp7AzYEXyj2NxyLOpAR8mzriye4JwTq7q3MmjPE5tVgSA6\npqDKeJFt32rQn4dt6kk7Nbd/aLEy0Bkll9TJBJzxnwh+l5d/KT5z/smNedgc\n3mmoBQllC36BTQQ3g0Rf+rurZUiIwNc1xbdRCtp0xl+KVS8rjGJxj6kwN6hv\n+oEgY2bzB/FPh3RjZ01vFDisfdpMV2U3r8KqgC8mbZdJVpyhn5nJeve7Z/1b\nvo3C736AoursMwsuL+Hu21cV6yUGpJCrqDoERfQdcHKEA9obm/xjMIxJ0JiF\nmDhj86UknJFBIcyrgtszoLLE7aCa7N0PElQdXen9+AePpDlC9mtb7yVYthCp\nQD+SWA+Q1ILjBwstBM5TsMgo8I5Q0cE2hkPS1IhUdFb28BCz6jpXIWiniYuF\nc/leYwA1yuAbQgsbOoY7V05PwFwowUQLzBNDzY9yoLZ0qnedzTAVGjdO0eiZ\nG+aE1/Nih4W5RuDQA5PmmrSEntx/k2pS1vlWSgqCF/26D2AD+kqeAyGGg07v\neeOt/KIE+01+b+obAx7Ox69K/e5uZU+jleCXbfLS7Q9GOAI9ZysT3HomnUIM\nwzMcUfmoBWRpQe/Wg03dEFS9YF5b8d7tneTd1iWHiaXI9lCZZNrzWB5eWior\nE+bZXdZBlSWdey5MChiNTu0ak8kzjNphWyI8FzoheoxFZou41P4utllmVeGU\nYt3Ay0dKd6mfK3vXOPGcRgkLszZ65jMsna1bktun+oTqSjCnK0uob4bxzPKh\nYmhGal9Lb+OJdNGo+Mmion2v4lSVGuG3bgAWXbZVt/du72RDglPc4mMjItYx\nCgMsvBCvtpbkxPP2Uk8XoyL0PA4Z+36eV7Gu52kYFerazSV7tC4+35aYTYyv\netUDMDtraDlefFu6q5+638CgnTFx1jcl1ich2S9P5f17TfYPYMjIXCrEWxaq\nOrzy+L7svZ4bSOR6Y7cyKJR1q7qT2fz1p8zGRt5dNs61Y+5Jy/1eOKD29FGW\nZ7ALhbPqEFhgJEX7GA/tDPaCUuoxM9ZSgNMH6U895YYrW+/NzAypW+9Kp1m5\nunVnxXco95Mk8o3JQ/HZogWpk33X1IgKKcWTFLJBRiWwBL4u3ceO2HhpgpYR\nNkxdrBPrLE4tFNs+we53B1zYvQtd0rIrg4RL41GcQY+uWa4l4jokH2FYPBcv\njU0LlUrgasPQSYNJGnlLktnVYd+PQ2d4FVIbfBIsqJF4ahaWfh41ABe10w1r\nfls1svrPLOYzrrkghCdsQgSgF6cYq4znsEBUqhLnWrRkbYYRnJJBdMYyFmrI\nqwrYuIBglupi1D2ZCoTznz6f5M4k9YqAgn6RWyn6fHe0bdNUfjRlVTogFhg9\nXgeDfCi96wLNnP0E9y3duX5g/JaMgQEYwCYygiT5gXOuxOJ98OuEcKxUXBpS\nMq3J2uSE8UJ9Yt6H8e/yRx/FSAySdGVZGC6maqW+5MASnMqtZvkxGPsZ62mw\nddXPEN14kkO9VJ/dCqWGuMuX4yK5tSLfPlyI5LGnHWc9Cuy11sk0/6UxJec8\naASQWDGEhejX8eF45MqASkStjWmPZ8XxKkh1B83SPpR7Dkxwz70aU0J7g1IZ\nT5oq083mWpLbwIrjDEqUev3UbQJgHEiv2xyvEi0QdfC8ZQtrYHCX/11W/b2Y\n9AWYtAD9nF3cZz7bv/RqnJEDFh0TQV78pmbQUXoCf98tYY+UjyiPeIu1ADWQ\nc5EkWr7n2cx64KXLOp/st4EHiJCHLCRanq9Y9gqxLrm1JnsbvyMQAACT1iWz\nHATu1uA3F+ornJLS/IFyiXMFsLBLwVsywWJO+OPGXSy94lmB2mC0RcBDYYU6\nsJVIXOe2pbRghJA/r6Rz+wY8/V/FXJtDBGk54dAO8v78ixseFZfnvzDakQGq\nhonaJQNbzhIgmT5EltefHWVRfFJfIYADaW5RPawu7w+ovT/XJ0cYb1B33nC1\n68YhMfZ51aRGTeIaJmH5bpsS8frxWRjNmkNw4Ep0TrwdhqrQTiAjlnduIobv\nRK/lTGPCKXQBXs3ntGQOwRpoxxGAL6/r/m55wx0E0WwySPTDj9wVQ5fYB0G6\nJ5htAhmql7HHBU6+lV10eQAQg8256k2KroPBD0VHPU0aRhKplLrJKGJOplSk\nrko5dUZR54o70oj9+nGyDKk+IhJ4BZNfkIoDJpkA+PqsVr8FrOFYwdc9hvBg\nTO5u8QX3Qb0gAOposxFTmJJYc3gGx4PhLFKZ7her5iYVbvh8QimBvL4SKntX\nhz/WEzMHyJh43q3jUjwy91ZFnv7/FVtH9tcszR6w3/rR9l7hzvWPn6oCERSj\n24pHWqsTHU9SfIsgeDwSUJUznm0HLMqDyWMCIWxacvFHac5Lt1fAj/CWcjEf\nCViL+X5F0+pAmzeQNY9VSovYPPmJe9cXAf2klgFRPeC4sZRuFrrIPevI9Y8Y\nKA8yxZvJz7TdD7nuFy+t0cTtnEeRALksnyxJmm/eR17co86jpFJzUDZKy0o4\nAYS3v04JGwLVIExqAQY4vetZXTEdjQQez9prz5dKsHKfXzKit0jwxMgB1dku\nU7+9BZ/76UIjGguRqzN92Mv1LixcnvfWsO0tWRuVhOGnP6g5kWWhGXo+9rqC\nngyQ/z/qUMpNVF/CvoBKojiUiPrO0dF8HgJ6JbRCPiQrLR0/EijJe+8JuepX\niAp3e0bt1Hepjm6sx/TGGHvMZUPTa9vNVNVH+sj8ihMbsdazGnZpXf9bkCtl\n/lo62bvOStM4JvfC5uBheFWsulayeKwqMOtdPkx6tXz6fbO3lSX/gqn4+fh9\nAWUbmV15SkOtG/H5nVqNusUSQ7r70hZdxTzViPVxXtQsHXzjLNPF+6SgqcVs\ncMBE7201QGhYbgDA7t3gbwid0svLNAfL72v+tCL98nItZRruKKLiEpdpSAx/\nHlBSBjADtFRvQU4fsuPNpYLFHzLu+7ASzB1BEpac97wet7HNPOUU/1v4IWJf\nPy2lSXjhsjSYpNbQeA5yZ5rl5c3d/6eH5ZyqZp1pHvjVjHCHyq5FAdYw7Roh\n9YtGoZX+MqTRhy3Uw+zHUEpZTjuKkoVlN68W6P7tsLW5pht51w1epkMpXZWV\nabWK189wcZM2jMcBy2yQ8stK5cJIpWdsUth0vA9b0wTnCU1qI6ZyaFjzSHsr\n9Yatd+FqxU3a5En8HvadpBlptgX8by5tQBIlBC+eomxc9KNtgLvOkHboyB3S\n3Bhk2ftxfrAYcg/4dF49MBFlg0fT41NrqUwhSco5ah+7YjXHxSc6yxpfZKdV\nvdflb6G26MKwvj91ez4VzDDd+4VRCwNPnGvWaSthYh7xgAhw1zIkHeNgwukh\nNX33TXKfs5K0QKcuyTSFMlc5BhDts3bNUhb71dJcdZ/TtO2P0ka7FjnYeTcd\nEjho1xlwDFeUT2JniKp1eO+PXsXrAoGr9LYBSHOKp7aQIHA1nXFIXdMZIuw7\nhtoCDJ/y3SQSnP0ynHlq5zl1nMkRq1SGAErOGETPj65UhnAS36R/cmZP0JUg\nJY/yLuZ0Rbgjp4sAOQfY9Syrfdk0hEkz+41h+OZ3jQDGDqQJg9bsz0BJM2Pt\n9Y0LOaLEUk0qliq+/bFkat5OMXzqVKqP/oLdYTWyp8OwnBA8jdbni8RibEKG\ngrZlp75ErjinPw4+o0s20D7K9Wc2SQf2H/HgLL1/Ue40KMYErKnbwRwhMyId\nP1sz/HSaijjLKTgh0s+9m/yBw3SBcFw4ydlEZiRoD0tSIxgke/wlX2qFj7/S\n+SB5Vs028bfEhF6049CqTzimlUFxgoZexYdaPiD7qjOYPwzgbHaPWnIh1YOc\nFSjUwRhRAGNHOKgADj76KJa/9pSol+d12ZsIuI0FWC0KktSE8L3X6V5bHG3F\n7/znKE+ugNnehWkqUi9T/TNKUxm55cEgOFtzHdM+5y6biLA9ofx13jayiuu5\nB6dIzbDi+Z5xSuJI4HtoCDO0/NnVasZBwN00LHUC97F9IhafydEvr6pOyj1K\nicsgjuuRBViZSz6LdReJLrXXHy+xgWucfbuXafsoOObByalKou/z9HPh8UJR\nHF+7adlSY8uGXuHw9CTVlgTOMsDUc7Npg2IajwTwqE14cftDSV8pn/INt00Q\naQ97baaQa2wW08/qc8QO714M17bJO2gxYKSupWiCCg/qILdVGinSpzbID4Oa\nlT6mHV3uKl1yKey+koKVTqRrn2sValedNuC0mp9q8r+BG2+K7bpo+VMn0IZd\n7t5UmLCGP5U76ROuNrB3B2sCvOkAv998bvVe2fBnevvBEPlc/3B7qUdyE2Gk\n/husBaX+ZNU7qeabaNWD7EV5fJIDKlVsvVz3urO3RjZ72OOTpZNR+i8hhmzt\n/rhDFYh7G+OJY2PTSvgnf0/2jKVHK2d3wXXj0+ewGKtNhqmWP4SU1mnpIwOJ\n3NewIw68aGWO06kl1aFlXSE8mRsfwF0fmCTtLIl1es3N2+No/4+AySG/5G3w\nvLvYnl1Acy3OLYZ81UefQ96jLqa35X3hptOcJHAubmAvga8MZf+1RGvBzHk4\nKLotLOPV9qV+qIqEIAddMoE2jwCtlg9DsZ/KNB8rSSUDwF3cnoH2THtf35nU\n1a8ScRct5DPjenTv6FXACMhQJP7dBs0iK5aHzezz0rZJjNHlHFM9HuOCmvKZ\nBBbD2mp5iO5dRCCJSDeRqFrQfda46g8apExxDJD2T00mzfYNlamGvkaYNMhR\nXJsDwCsYKCUmodonkZR50MRdTnjSB4WOtGvysIGvGRqChc5Vsnfaba0+dN5N\n1gEZ6j1Mg5m/Pr0A06WExOU6Ge1FPr33D25QU1Bi+rKue6FIZraUvm8/BBaE\n34XuaIjl6ee0muco59XZciGaf2BH7s2uKoqQVlgWL0E/p/+PpSoTLUdTS+0X\nfmMAbLxIgLveYdgqKHvHjVzeM93JeYm96QgVfDSHxigUlqqeuw0yjR8FR93q\no0JoGKYEbVIqbd6KYGk647xm6OrrCVCLi94dhZBpWVXMIAXlgAhwcfqaXu4I\n4MHC0ZlsG+7KSOZ21A2t+v16RQjkTcu7yuGZR8CUBWbYa9aeqM/1exXFeUbq\nvFs5xG/vrGWNoc8XfkQg+CjKlnGA7tSDoFcqyxLGu9gppfLTpbPUuBN53hpy\nkVgdjiegsRjsH2z8qW7RYk53Y6UjgW3uvDgT/h/LWez14gMqoQO8Mh5D74LZ\nMwZQf/pj2AKeN4miTfC778ut0+RU2jhkonBQ0N8RgqWYtbO9ySbaodWXxRib\ncJhGb/psIkLPYYCVPxWKvlQcKAthLUULrIRbRnyxCCnxz3RIDwn4f4c6fp+B\nz6zApL8OeVUEZ7AU1DlvAFuKy1CrWNsHfm/z78drw3pjHnCIThs7Ud5rWyoO\nWLpRdqWZSyS+VLbRco4Oo0iJrHcCHR0L6NNSCLxQbe8a73G2NAg3RdU0gp1e\nfSoS+VJPmIWBAqNzPw9o+RTMkP2jtsYhxvc18xkhTxs5rfUnrszOJt9pBieX\nFl3UOAXNSoiRnJ07Ic8/dY+sZQyX3FF4CiKyhEc7YZZjU4FEyf7U4wWTyqux\nqGQQMiMeA4qpZtaK1QOstL9C8DV7QWbTLIpA9Te6lcXZSb4lETzsiI//cjrw\nwbYoinNNsrEo9yYZ8UGz5sMGzwPfoyiPq8IpWnZEgJjW+Fe2ywbwo0KlYu3v\nC2dcttl1cnEjN9o/q4o6KKzc7vVFuXkUt7t7dM+T2LbXvRUI5skepkoKz3Dt\n7a5jl8ah1T6wXc8UNkj7YWKpEkasTyzZNKfT5ftgKokZ8zCtZOgCiom4ZHIM\nnTweGsG7Qkt89FrI/pIuaWft7sDX/762J8ISTAg8BMSJd/6KtbEjQry9YjzJ\n1unP/vaf1tPO5ma4l4pveXbbAQeTFmMylcIZ4oE/hO32fRsBC2merXg7L+Lo\npf+rAsIaCXYzWRYVm5r0F3bGUUAy1mkZoL37JJlarCGrhOXeaaXuC0DoxYSe\nXs1dZIL4HhKy2VxRLy/VcWrnYJdiykNo7lOV/vZtg6PFWYMfN1C1tTug38Aq\ni8ZYP5+IgxeA8UWyK+dyGKxCYYdyV5Qv5XIOenLObLnL3KArVyPJ1VviaHp1\nLeRzc1tVlY7rO5dxbDSuJcRz2puOreuV3aLRLt+jWXNUdeqAmGmAznSMfoDC\nOZko+pY48USr0Sg2QX42kPgSe0Xlw622he4cweHgz4ixSW3egv1j+yheGNVh\nZsKJYQcPjk/7qJn1Qh7X5MRpXSszFlsSKaBkKalvi9xfRKpbGJjV7I+sS87f\nXBBB0fa+z5tu0p1lcl56ynqCUXAnf0T31C3suG1L4q/xgrGWvut7IkceRNyF\nymbRFbcz+jkJiO8xClebuwI4M8FPAQz+JkyD0l5N9BQh6+5rMFhGx2uyCiya\nhpsfwCfXgart+vgd0pU/qgMQkV0xQVkYgJhNqLGntXuJVflkhwoWMS7HhtC1\nIk0r+E9srMwi6o+pBP4hm8A5WwBnWoy1MeMKs9K1s3YtK4iuKSbF2aNBltme\nOzNvWL89IELJM8uNwdS1IuSCIy136VEhSsJOrb4kmSL6fdNNyyXOkho7lQMU\nqBRJrnO3XtquWJjv2ap53Vc8rBlJQHEuz5+bEzGgR6/YHarLiBt9hP0zaUq9\n9wBIiPedC6WzyU9OxxObx8Bn266E6ysc7GsXq4HRQkWqk2u47wKmx25LJmNG\naDmTXyDsrBAp0bc11yhd0I3PEsZBCeHJyIVmZ2M+8f7N1lpRTCuwRdYqbNjX\nqRb4TzcMkvsOGfrggiNIzKeYTvfEvxvtEv/iSeVmqeYKLTjg67nbtzy1MECr\ntRCCBnMx4ZGaehG+wP9p1bOhOQLraTdFhtV2v8mwHJcacRSUbQnBwUmOl/xk\n83ns4wNJKN4FCQMa8TGuycytYfz16ZRhavqvmvfRc0596a6kAD3Vg32rqP0U\nlvl6S7Z6W3TK+EFbXKduJ7FNkcsLg9M4Zj7GZ0CDgpRkDuMqGvLipOUldyvu\nDH6A4fAohYYEvUxbNLHMRJiyKTB5soxk05u2AFlI43jpYO81PMYPMu2d5rDK\niQlzxbJy1zPHXx0C8Vzx8iIuMPt4Qe2R+M2hUfdVqZR3mgQZRi5Nk6qVGLDz\n3mn+EeJ1lOc2+Tx4tNW+YB9yiz2d/erQ353aftZsGP4AcXf15DLOtimrgPXZ\nl3qblPZISLB1P6g0gONAxNyUlxkth98HcSiiPcLMaSDcMont04qU0n+pxog4\nIhJ4wBDGQR390DYNVDb1/12zvhitaFxkjxBxBjvkkJLsX+TSitjnuGzOumW4\nbgZy6+xYNxqvr6GA/fe1hB+5M4tsNUJ1CyIQmFZNTj016UKUF767qG/VeC6a\nFMGsav5ZxPPv28RFQvRU7GJjUaWdXhgGweqtRTXLzzZoPsaIhpgguFz+2/hB\nElj0oDzIvEqo7OSrAhLrtWfd8Ib3U28wkSSD5wHaWHKk5HSJvCMEjMPW2tyB\nFTgJEDb6pgQ9uvyumGgdmbSHoN2J+dwVxVH+DhD9RMO3sZEoLscQeo0C8X1P\najyAtgBNTmTDlkJuNC/FJnuRNhU3+fQZwa1eJ7+wNio8PXTcMNjDYZJBGkL9\nEnpAyQb3JkYUyDzUjaunXly5pVTQe5tgpKN7NKutvuSlZrrJ87+chnMx+Ys+\nHzyNb2/jXSkeu2G+V9glfoGr+KCXAbjIMUrzLFiWh7mdNhIn4LMSYJASMrtP\niZnB1U/MzfQkVTu+tZPQwNYXktkKe0+/L1rOLy1/ZpENTPLRb1Wd4Q2YhOmx\nrjaZJc4+UIHq0olXGBj9fJa5FkHhy5ly4TjqaLw6lYmJ4Yp4Ij5Y8uDGly8J\naZE9pP9m2pmy+pScjLDQeGqHXXQMSUbYDSKuHHenQLHRzXaaoMAWsHwhjWxR\nWiQz/OpUL6htdxbnsDhQGlYsma1is3WW25HhvfyvDaJKzTslhrqZ3QOzeqFZ\nyb/7mmavnxc1dgUgAkiTJyAeE3/3wdxFpMdA9loKQV/rY4fClg2eDai4gAKt\nAzh7RFfD/iNUDAAsTA7jXz0oZd2Dbu/ULv4M0m0tVY6WTMLJdZYfVxsc6slT\nsc4GyO1hAOWrIWu5QgShzLoOoA//2M4aEapKT4uIv9Ab1LlMXs6SQNVaJq3C\n4eplifOrm2z+CY37Xw+eGSoU1ew7yotHDMrD99i5CEslc4TDHhrju7/q5xT7\ncBu5jnU5r/hTtFmMO1wxO+MCfpvxyI6yWe1gSVi7V7X6uVZZAxJnW1MCiAgx\nkLKl7r6i1Nt89RwjpOYwNAli7i5UUbAAmC/0IwgiLQVkFm49fRJ8xcOkUKNp\ndVHPRFhepHZ92RhU8R2webAJhYR35d90sX2x4cvR6p0W9/ziGfg4Lwc52tuP\niHv+zJraQDuBwMUoLl8WklfKL+vWLei4TvH85UDpxYo2KTwT4AzAOgJXHlbZ\nOE0EHZvJ5c8/LtW8t5RFvKBYd/KuxmzY9AKp6N/SySfPS9pLR+lFFjKmCl3s\nPMyUgtCyDmHwCQ56mK3h2njBxeqTJjv0+jSX02hRO/2aAy0tM3G4l/Jo7rrc\nzA6yG0InA8tHzBED8OmTcAOxR2oUiW9dth6ANHOTFY821DK+Cl+QFvQzv27V\nzcWFqHFdZPwbvPEtte0Q8O/SfJ3yW2FzlJeZMrwsAphW66JmND59dz+tioQJ\nHiMjUdmMFvFFhrIhBATfLXgk4d/JnnPF8eqT9lfQBH9u09kdcWXLZmRLa1yH\nPT874lzo6lkebfJFNXJAcJFTkWvfY1S0Ljo89LchGlPAotiawC70jcO5mXpO\n76E3KIBnQuSyrELJmJkCq4manlApzjJifeREOSJ1psOpLFx1F6y9h9dJE2DR\nv/mp4YBnvq5m+UWfJrY4Q+Lfd7sC7xZPaUf36cPaEwtib+ObTisEu9zFiMHp\n7sz4Sk8U5UDGvmdHaxsoPwaiZs0V9szdcSB919mYZh7mqALGAXlCXDB4oM3b\nssUUovZ7Gr5GnBEisNzMduik4WJ3eNM1pxkke/Fjxbb2L515seOUXn9BDlDN\nhLxP90W4Ha9zwGcxJZQobwSz4bEfOxeDvXidRXqyVLmlcG6jTSNAR6sY2CtG\nDcC0U8NvzL1+UihgBYBuLUTZIsbrQrtObu9vKbmcOaLEKQ9riKpSmfMJi8KU\nGHdBdJeEed6MzQff1cfxmfqNHiv0qcAa9Nw51WQm8qetYbZRYsQh3ioG/Yp7\nhW32LQMgC0YNVXq2RyGH/kjXxb1tXeax4GTmLnqnpi469fHwcVmL3/DmCOyy\n2Lf8sWHgCm3sRVeCQcnb+PzIYhy3RdlmaVHtyxn/0uIIMq+kN0AlVw3FW6lz\n4qJJ9EMRI2Aw/ZR8zFKgISHdWhwNMlE7xqKVZPffBElHyJY/NkV91oP/dV8L\nWCxY1VX6/y0ljsrrfuJBMT4Ghu5s5wEYDxC8KK6koz697RaPk4clL6SEgDEX\nBcK5T4kSAy3YjpUEHeU77qfIWiAb+EqR3xBrSPRPNnYCPQ7+DQ5zdCib2m3W\n++FIyIlekxTnx5YPag5mixlnScwuQbUt+uQ6qkEL2CdH/kZDhkaIQ5zYdsg8\n6+4rDXENOPoiG4Kl6Uh+KiwQ3aA9FQ8w7mMzN0/n0gct69+dwT3+OPPgFJYz\nxVJhpmtrycCojTMJvyB8a4WOUg/7dIQQocR/VYVoPyfMNHTNPg==\n",
    "encrypted_validation": "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\n",
    "start_sources": {
      "ProjectRunner.java": {
        "text": "public class ProjectRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Project object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Project.java": {
        "text": "/*\n * Represents a photographer's project of photos\n */\npublic class Project {\n\n  private String title;     // The title of a photography project\n  private int numPhotos;    // The number of photos in a project\n  \n  /*\n   * Sets the name to \"unknown\" and numPhotos to 0\n   */\n  public Project() {\n    title = \"unknown\";\n    numPhotos = 0;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specific values to\n   * the title and numPhotos instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign a specific value to the title\n   * instance variable and a default value to the numPhotos instance variable.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Returns the current value assigned to title\n   */\n  public String getTitle() {\n    return title;\n  }\n\n  /*\n   * Returns the current value assigned to numPhotos\n   */\n  public int getNumPhotos() {\n    return numPhotos;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "encrypted_examples": [

    ],
    "video_key": "csa_overloaded_constructors"
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-09T21:26:00.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:26:00.766+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L4a_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L4a_2023\"},{\"changed_at\":\"2022-11-09 21:26:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:47:09 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:52:52 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:28:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:28:49 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:34:08 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:34:10 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:35:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:35:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:38:18 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 02:02:09 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-17 02:30:21 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:56:12 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:42:40 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:53:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:54:21 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:37:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:58:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:01:34 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:01:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:02:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:02:29 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:02:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-02-02 14:28:22 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
