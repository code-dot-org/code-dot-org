<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A website allows freelance photographers to display and sell their projects.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Project`(#e7e8ea) class to assign specific values to the `title`(#e7e8ea) and `numPhotos`(#e7e8ea) instance variables.\r\n\r\n✅ **TO DO #2:** Write a parameterized constructor in the `Project`(#e7e8ea) class to assign a specific value to the `title`(#e7e8ea) instance variable and a default value to the `numPhotos`(#e7e8ea) instance variable.\r\n\r\n✅ **TO DO #3:** In `ProjectRunner.java`(#e7e8ea), instantiate `Project`(#e7e8ea) objects using each parameterized constructor. \r\n\r\n✅ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the `Project`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printProjectInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nProject landscapes = new Project();\r\nlandscapes.printProjectInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing a parameterized constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "ProjectRunner.java": {
        "text": "public class ProjectRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Project object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Project.java": {
        "text": "/*\n * Represents a photographer's project of photos\n */\npublic class Project {\n\n  private String title;     // The title of a photography project\n  private int numPhotos;    // The number of photos in a project\n  \n  /*\n   * Sets the name to \"unknown\" and numPhotos to 0\n   */\n  public Project() {\n    title = \"unknown\";\n    numPhotos = 0;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specific values to\n   * the title and numPhotos instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign a specific value to the title\n   * instance variable and a default value to the numPhotos instance variable.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Prints the title and number of photos for the project\n   */\n  public void printProjectInfo() {\n    System.out.println(\"Project Title: \" + title);\n    System.out.println(\"Number of Photos: \" + numPhotos);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Photographer Projects",
    "bubble_choice_description": "A website allows freelance photographers to display and sell their projects.",
    "thumbnail_url": "https://images.code.org/d9cf73181550fe3578f317197fbaa1d2-camera.png",
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-09T21:26:00.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:26:00.766+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L4a_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L4a_2023\"},{\"changed_at\":\"2022-11-09 21:26:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:47:09 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:52:52 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:28:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:28:49 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:34:08 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:34:10 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:35:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:35:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:38:18 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 02:02:09 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-17 02:30:21 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
