<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2016-10-12T17:57:35.000Z",
  "level_num": "custom",
  "user_id": 155,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "write": null,
      "whileBlock": null,
      "addOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "randomNumber_min_max": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "console.log": null
    },
    "edit_code": true,
    "embed": "false",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "false",
    "markdown_instructions": "# Starting Condition\r\n\r\nWe have seen that loops can run infinitely. On the last level we saw that there is also the **chance that the loop never runs at all!** If the condition of the `while` loop starts out false then the loop will never run.\r\n\r\nWe fixed this problem in the last exercise by displaying the value of `num` in two places: before the loop and in the loop. Duplicating code is generally a bad strategy, so the question is: can we be a little clever and get into the loop without missing any values?  The answer is yes.\r\n\r\n**The solution** is to initialize the values used in our boolean expression so that we are **certain** it will evaluate to true the first time the loop checks it.  **For example, if your loop condition is: `while (num != 6)` you could initialize `num` to anything other than 6 and you'd know that you get into the loop**.  \r\n\r\nIf you use this technique though...\r\n1. You need to make sure you set the value of `num` right away inside the loop.\r\n2. You probably want to use a nonsense value like -1, so that if you ever see that displayed it will be obvious something is wrong and be easier to debug.\r\n\r\n# Do This:\r\n\r\n* **Starter code** is provided which creates a `while` loop that never runs.\r\n* **Run the program** once to see that the loop is never entered.\r\n* **Fix** the problem by changing the initial value of `num` to a nonsense value such as -1.",
    "start_blocks": "var num = 6;\r\nwhile (num != 6) {\r\n  write(\"Nope. Not 6. Roll again.\");\r\n  num = randomNumber(1, 6);\r\n  write(\"New number is \" + num);\r\n}\r\nwrite(\"Done.\");",
    "instructions": "Fix the problem so the loop will run at least once. Change the initial value of num to a dummy value such as -1. (Click to see full instructions)",
    "encrypted_examples": "kAqT9O8nDiDf3vma8k3ykxP/NaQjpWWJWQhHPesHEf8rbPrwyIFNG+Trc89Y\n1beP\n",
    "contained_level_names": null
  },
  "published": true
}]]></config>
  <blocks/>
</Applab>