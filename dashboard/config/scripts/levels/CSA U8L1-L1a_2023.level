<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Look at this project example. What are some of its characteristics and features?\r\n\r\n*While this is an example of a project for this unit, it is not representative of the only way you can approach or develop the project.*",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "ChipotleRunner.java": {
        "text": "public class ChipotleRunner {\n  public static void main(String[] args) {\n\n    Customer myCustomer = new Customer();\n    Chipotle myChipotle = new Chipotle(myCustomer, \"menu.txt\");\n    \n    myChipotle.serveCustomer();\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static ArrayList<String> toStringList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    return temp;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Integer> toIntList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Integer> data = new ArrayList<Integer>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Integer.parseInt(currentValue));\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Double> toDoubleList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Double> data = new ArrayList<Double>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Double.parseDouble(currentValue));\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 1
      },
      "Chipotle.java": {
        "text": "import java.util.ArrayList;\n\npublic class Chipotle {\n\n  private Customer currentCustomer;\n  private String menuFile;\n  private static ArrayList<String> menuOptions;\n  private ArrayList<String> optionTypes;\n\n  public Chipotle(Customer currentCustomer, String menuFile) {\n    this.currentCustomer = currentCustomer;\n    this.menuFile = menuFile;\n    menuOptions = FileReader.toStringList(menuFile);\n    this.optionTypes = setOptionTypes();\n  }\n\n  public String getMenuFile() {\n    return menuFile;\n  }\n\n  public void setMenuFile(String newMenuFile) {\n    this.menuFile = newMenuFile;\n  }\n\n  public static ArrayList<String> getMenuOptions() {\n    return menuOptions;\n  }\n\n  public void greetCustomer() {\n    System.out.print(\"Welcome to Chipotle! What is your name? \");\n    String customerName = currentCustomer.giveName();\n    System.out.println(\"\\nWelcome \" + customerName + \"!\");\n  }\n\n  public void createCustomerOrder() {\n    System.out.print(\"\\nWould you like a burrito (1) or a burrito bowl (2)? \");\n    boolean bowlStatus = currentCustomer.getItemSelection();\n    Order tempOrder = new Order(bowlStatus);\n    currentCustomer.setOrder(tempOrder);\n  }\n\n  public void getCustomerSelection() {\n    for (String currentType : optionTypes) {\n      System.out.println(\"\\nChoose your \" + currentType + \":\");\n      showChoices(currentType);\n\n      if (currentType.equals(\"protein\") && currentCustomer.getOrder().canAddProtein()) {\n        System.out.println(\"\\nYou can choose up to 2 options for protein.\");\n        System.out.print(\"Would you like to add an additional protein? \");\n        getAdditionalChoice(currentType);\n      }\n\n      if (currentType.equals(\"toppings\")) {\n        System.out.print(\"\\nAny additional toppings? \");\n        getAdditionalChoice(currentType);\n      }\n    }\n  }\n\n  public void showChoices(String currentType) {\n    String choicesAndPrices = Option.getChoicesAndPrices(currentType);\n    System.out.println(choicesAndPrices);\n    System.out.print(\"Which \" + currentType + \" would you like? \");\n    getChoice(choicesAndPrices, currentType);\n  }\n\n  public void getChoice(String choicesAndPrices, String currentType) {\n    String selection = currentCustomer.makeOptionSelection(currentType);\n    verifySelection(choicesAndPrices, selection, currentType);\n  }\n\n  public void getAdditionalChoice(String currentType) {\n    boolean wantMore = currentCustomer.getAnswer();\n\n    if (wantMore && currentType.equals(\"protein\")) {\n      currentCustomer.getOrder().addProtein();\n      showChoices(currentType);\n    }\n    \n    while (wantMore && currentType.equals(\"toppings\")) {\n      showChoices(currentType);\n      System.out.print(\"Any additional toppings? \");\n      wantMore = currentCustomer.getAnswer();\n    }\n  }\n\n  public void getCharitySelection(double currentTotal) {\n    System.out.print(\"\\nWould you like to round up for charity? \");\n    boolean roundUp = currentCustomer.getAnswer();\n\n    if (roundUp) {\n      double newTotal = currentCustomer.getOrder().calculateNewTotal(currentTotal);\n      System.out.println(\"Your new total is \" + String.format(\"%.2f\", newTotal) + \".\");\n    }\n  }\n\n  public void displayOrder() {\n    System.out.print(\"\\n\" + currentCustomer.getName() + \"'s \" + currentCustomer.getOrder());\n    double customerTotal = currentCustomer.getOrder().calculateTotal();\n    System.out.println(\"\\nYour total is \" + String.format(\"%.2f\", customerTotal) + \".\");\n    getCharitySelection(customerTotal);\n  }\n\n  public void serveCustomer() {\n    greetCustomer();\n    createCustomerOrder();\n    getCustomerSelection();\n    displayOrder();\n  }\n\n  private void verifySelection(String choicesAndPrices, String selection, String type) {\n    if (choicesAndPrices.indexOf(selection) < 0) {\n      System.out.println(\"Sorry! Your selection was invalid. Please try again.\");\n    }\n    else {\n      double selectionPrice = Option.getPriceForChoice(selection, type);\n      Option tempOption = new Option(selection, selectionPrice);\n      currentCustomer.getOrder().addToOrder(tempOption);\n    }\n  }\n\n  private ArrayList<String> setOptionTypes() {\n    ArrayList<String> tempTypesList = new ArrayList<String>();\n\n    for (String currentOption : menuOptions) {\n      String currentType = currentOption.substring(0, currentOption.indexOf(\"/\"));\n      tempTypesList.add(currentType);\n    }\n\n    removeDuplicates(tempTypesList);\n    return tempTypesList;\n  }\n\n  private void removeDuplicates(ArrayList<String> originalList) {\n    for (int start = 0; start < originalList.size(); start++) {\n      String currentItem = originalList.get(start);\n\n      for (int next = start + 1; next < originalList.size(); next++) {\n        String nextItem = originalList.get(next);\n\n        if (currentItem.equals(nextItem)) {\n          originalList.remove(nextItem);\n          next--;\n        }\n      }\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Customer.java": {
        "text": "import java.util.Scanner;\n\npublic class Customer {\n\n  private String name;\n  private Order customerOrder;\n  private Scanner input;\n\n  public Customer() {\n    this.name = null;\n    this.customerOrder = null;\n    this.input = new Scanner(System.in);\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String giveName() {\n      this.name = input.nextLine();\n      return name;\n  }\n\n  public Order getOrder() {\n    return customerOrder;\n  }\n\n  public void setOrder(Order newOrder) {\n    this.customerOrder = newOrder;\n  }\n\n  public boolean getItemSelection() {\n    String wantsBowl = input.nextLine();\n    boolean result = false;\n\n    if (wantsBowl.equals(\"burrito bowl\") || wantsBowl.equals(\"2\")) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  public String makeOptionSelection(String currentType) {\n    String selection = input.nextLine();\n    return selection;\n  }\n\n  public boolean getAnswer() {\n    String selection = input.nextLine();\n    boolean result = false;\n  \n    if (selection.toLowerCase().equals(\"yes\") || selection.toLowerCase().equals(\"y\")) {\n      result = true;\n    }\n  \n    return result;\n  }\n\n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "Order.java": {
        "text": "import java.util.ArrayList;\n\npublic class Order {\n\n  private boolean isBowl;\n  private ArrayList<Option> selectedOptions;\n  public static final int MAX_PROTEIN = 2;\n  public static int currentProtein;\n\n  public Order(boolean isBowl) {\n    this.isBowl = isBowl;\n    this.selectedOptions = new ArrayList<Option>();\n    currentProtein = 0;\n  }\n\n  public boolean hasBowl() {\n    return isBowl;\n  }\n\n  public void addProtein() {\n    if (currentProtein < MAX_PROTEIN) {\n      currentProtein++;\n    }\n  }\n\n  public boolean canAddProtein() {\n    return currentProtein < MAX_PROTEIN;\n  }\n\n  public void addToOrder(Option currentOption) {\n    selectedOptions.add(currentOption);\n  }\n\n  public double calculateTotal() {\n    double total = 0.00;\n\n    for (Option currentOption : selectedOptions) {\n        total += currentOption.getSelectedPrice();\n    }\n\n    total += getTax(total);\n\n    return total;\n  }\n\n  public double getTax(double subtotal) {\n    double taxRate = 0.06;\n    return subtotal * taxRate;\n  }\n\n  public double calculateNewTotal(double currentTotal) {\n    double newTotal = (int)(currentTotal + 0.5);\n    return newTotal;\n  }\n\n  public String toString() {\n    String result = \"\";\n\n    if (isBowl) {\n        result += \"Burrito Bowl\";\n    }\n    else {\n        result += \"Burrito\";\n    }\n\n    result += \"\\n--------------------\\n\";\n\n    for (Option currentOption : selectedOptions) {\n        result += currentOption.getSelectedChoice() + \" (\" + currentOption.getSelectedPrice() + \")\" + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 4
      },
      "Option.java": {
        "text": "import java.util.ArrayList;\n\npublic class Option {\n\n  private String selectedChoice;\n  private double selectedPrice;\n\n  public Option(String selectedChoice, double selectedPrice) {\n    this.selectedChoice = selectedChoice;\n    this.selectedPrice = selectedPrice;\n  }\n\n  public String getSelectedChoice() {\n    return selectedChoice;\n  }\n\n  public double getSelectedPrice() {\n    return selectedPrice;\n  }\n\n  public static String getChoicesAndPrices(String typeToFind) {\n    ArrayList<String> choices = getChoiceNames(typeToFind);\n    ArrayList<Double> prices = getChoicePrices(typeToFind);\n    \n    String result = \"\";\n\n    for (int index = 0; index < choices.size(); index++) {\n      result += choices.get(index);\n\n      if (prices.get(index) > 0) {\n        result += \" - \" + prices.get(index);\n      }\n\n      result += \"\\n\";\n    }\n\n    return result;\n  }\n\n  public static double getPriceForChoice(String currentChoice, String typeToFind) {\n    ArrayList<String> choiceNames = getChoiceNames(typeToFind);\n    ArrayList<Double> choicePrices = getChoicePrices(typeToFind);\n    \n    double currentPrice = 0.00;\n\n    for (int index = 0; index < choiceNames.size(); index++) {\n      if (currentChoice.equals(choiceNames.get(index))) {\n        currentPrice = choicePrices.get(index);\n      }\n    }\n\n    return currentPrice;\n  }\n\n  private static ArrayList<String> getChoiceNames(String typeToFind) {\n    ArrayList<String> menu = Chipotle.getMenuOptions();\n    ArrayList<String> temp = new ArrayList<String>();\n\n    for (int index = 0; index < menu.size(); index++) {\n      String currentChoice = menu.get(index);\n\n      if (isMatchingChoice(typeToFind, currentChoice)) {\n        String currentName = currentChoice.substring(currentChoice.indexOf(\"/\") + 1, currentChoice.indexOf(\",\"));\n        temp.add(currentName);\n      }\n    }\n\n    return temp;\n  }\n\n  private static ArrayList<Double> getChoicePrices(String typeToFind) {\n    ArrayList<String> menu = Chipotle.getMenuOptions();\n    ArrayList<Double> temp = new ArrayList<Double>();\n\n    for (int index = 0; index < menu.size(); index++) {\n      String currentChoice = menu.get(index);\n\n      if (isMatchingChoice(typeToFind, currentChoice)) {\n        String currentPrice = currentChoice.substring(currentChoice.indexOf(\",\") + 1);\n        temp.add(Double.parseDouble(currentPrice));\n      }\n    }\n\n    return temp;\n  }\n\n  private static boolean isMatchingChoice(String typeToFind, String currentChoice) {\n    boolean isMatching = false;\n    String currentType = currentChoice.substring(0, currentChoice.indexOf(\"/\"));\n\n    if (currentType.equals(typeToFind)) {\n      isMatching = true;\n    }\n\n    return isMatching;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 5
      },
      "menu.txt": {
        "text": "protein/chicken,8.45\nprotein/steak,10.20\nprotein/barbacoa,10.20\nprotein/carnitas,9.10\nprotein/sofritas,8.45\nprotein/veggie,8.45\nrice/white rice,0.00\nrice/brown rice,0.00\nrice/none,0.00\nbeans/black beans,0.00\nbeans/pinto beans,0.00\nbeans/none,0.00\ntoppings/guacamole,2.65\ntoppings/tomato salsa,0.00\ntoppings/roasted chili-corn salsa,0.00\ntoppings/tomatillo-green chili salsa,0.00\ntoppings/tomatillo-red chili salsa,0.00\ntoppings/sour cream,0.00\ntoppings/fajita veggies,0.00\ntoppings/cheese,0.00\ntoppings/romaine lettuce,0.00\ntoppings/queso blanco,1.55\ntoppings/none,0.00",
        "isVisible": true,
        "tabOrder": 6
      }
    },
    "display_name": "Chipotle Orders",
    "bubble_choice_description": "An example project that allows the user to place orders at Chipotle.",
    "thumbnail_url": "https://images.code.org/4cb589ff128fa44bea2f7a445ac95d37-optionA.jpg"
  },
  "game_id": 68,
  "created_at": "2023-04-14T13:58:28.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-14T13:58:28.055+00:00\",\"changed\":[\"cloned from \\\"CSA U8 Creative Coding with the Console Project 1-Day_2023\\\"\"],\"cloned_from\":\"CSA U8 Creative Coding with the Console Project 1-Day_2023\"},{\"changed_at\":\"2023-04-14 13:58:29 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:45:31 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:46:51 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:50:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:50:55 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:51:29 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:51:30 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
