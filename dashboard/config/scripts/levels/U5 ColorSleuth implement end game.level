<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2016-12-01T20:41:57.000Z",
  "level_num": "custom",
  "user_id": 13,
  "properties": {
    "skin": "applab",
    "edit_code": true,
    "embed": "false",
    "instructions_important": "false",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "project_template_level_name": "U5 ColorSleuth Template",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "true",
    "hide_view_data_button": "true",
    "show_debug_watch": "false",
    "fail_on_lint_errors": "false",
    "debugger_disabled": "false",
    "makerlab_enabled": "false",
    "markdown_instructions": "# Challenge - Pick a way for the game to end and implement it\r\n\r\nYour challenge now is to add some code completely on your own.  Use what you've learned so far, and Alexis and Michael's discussion to help you.\r\n\r\n**This is the last programming level**\r\n\r\n* Make all changes and additions to the program that you want here\r\n* When you're done hit **Submit**\r\n\r\n**Goal:** Add code that provides a way for the game to end which:\r\n* Switches to the `gameOver_screen`\r\n* Shows which player won the game by showing `player1Win_label` or `player2Win_label`\r\n\r\n*We've provided `gameOver_screen` as part of the template for this project -- Switch to Design Mode to take a look at what's there*\r\n\r\n**Suggestions**\r\n* If you're stuck for ideas, try to implement the end game condition of \"first to 10\" - first player to reach a score of 10 wins.\r\n* You should use the suggestion from the discussion to add a function like `checkGameOver()` and call it from `checkCorrect`\r\n\r\n<details><summary><strong>Above and Beyond: optional extra options for your project [Click to expand]</strong></summary>\r\n\r\n<p>\r\nHere are a bunch of ways you can add to or extend the project:\r\n\r\n</p>\r\n<ul>\r\n\r\n\r\n<li>Add \"start over\" button on the last screen, which should reset everything, and go back to the game play screen\r\n</li>\r\n<li>Add a welcome screen that explains the rules and invites the player to start the game (make it the default screen)\r\n</li>\r\n<li>Make the game more difficult:</li>\r\n<uL>\r\n<li>Make the colors more similar (we added 20 to every RGB value, try 15 or 10).</li>\r\n    <li>Or make the difficulty variable - you can generate a random number between 5 and 20 and add that to the RGB values. </li>\r\n    <li>Or make it get progressively more difficult - use a variable to keep track of how much to add to each RGB value and decrease it over time.</li>\r\n\t<li>Or on a welcome screen ask if the player wants to play easy, medium, or hard.</li>\r\n</uL>\r\n\r\n<li>Add a timing element - lookup the documentation for setTimeout which calls a function after a certain amount of time. (Note: you may need to remix the project in as a free-play App Lab project to do this).\r\n</li>\r\n<li>You can also use <code>getTime()</code> at the beginning and end of your code to figure out how long it took for the game to end, which you could use to adjust the score.</li>\r\n</ul>\r\n</details>\r\n",
    "teacher_markdown": "This is probably going to be the hardest level because there is the least amount of guidance.\r\n\r\nAlso, the end game condition can be written a *number of different ways.* Even for a particular condition like \"first to 10\" there are several different ways you could go about it. This is intentional in order to spur actual problem solving, and encourage students to talk to each other about possible solutions.\r\n\r\nEncourage students to:\r\n* Study the pseudocode diagram from the previous page - it has the outline of what you need to add to the code\r\n* Don't forget to add a little bit and test with console.log statements\r\n* Ask a friend for help.\r\n\r\nBelow are 3 possible ways a `checkGameOver` function could be written - each using a different technique of if-statements that we learned about.\r\n\r\n\t\t// Nested if-statements\r\n\t\tfunction checkGameOver(){\r\n        \tif(p1Score >= 10 || p2Score >= 10){\t\t\t// if anyone is over 10 points the game is over\r\n            \tsetScreen(\"gameOver_screen\");\r\n            \tif(p1Score > p2Score){\t\t\t\t\t// figure out who won and show the label\r\n                \tshowElement(\"player1Wins_label\");\r\n                } else {\r\n                \tshowElement(\"player2Wins_label\");\r\n                }\r\n            }\r\n        }\r\n        \r\n        // If-else-if with compound booleans\r\n        function checkGameOver(){\r\n        \tif(p1Score >= 10 && p1Score > p2Score){\t\t// if player 1 is over 10 points and winning\r\n            \tsetScreen(\"gameOver_screen\");\t\t\t// game over\r\n                showElement(\"player1Wins_label\");\r\n            }\r\n            else if(p2Score >= 10 && p2Score > p1Score){ //otherwise if player 2 is over 10 points and winning\r\n               setScreen(\"gameOver_screen\");\t\t\t // game over\r\n               showElement(\"player2Wins_label\");\r\n            }\r\n        }\r\n        \r\n        // sequential if statements\r\n        function checkGameOver(){\r\n        \tvar winnerId = \"player1Wins_label\"; //make a variable of the label id for whoever is winning right now\r\n            if(p2Score > p1Score){\r\n            \twinnerId = \"player2Wins_label\";\r\n            }\r\n            if(p1Score >= 10 || p2Score >= 10){  // if either is over 10 points\r\n            \tsetScreen(\"gameOver_screen\");\t // then game is over, show the label of winner\r\n                showElement(winnerId);\t\t\t \r\n            }\r\n         }\r\n\r\nIt's worth pointing out that the solutions give above aren't *quite* fair because it advantages player 1 in the case where the game is neck-and-neck: if player 1 and 2 are tied with 9 points apiece, and player 1 gets to 10 first, the code above will declare her the winner, and player 2 wouldn't have a chance to even the game up.\r\n\r\nSo, while this would be unexpected from students on a first pass -- you could add another condition to all of these to make sure that it's player 2's turn before declaring anyone the winner.  There are a number of ways to implement this condition as well.  We'll show one here:\r\n\r\n\t\tfunction checkGameOver(){\r\n        \tif(currentPlayer == 2 && (p1Score >= 10 || p2Score >= 10)){\t\r\n            \tsetScreen(\"gameOver_screen\");\r\n            \tif(p1Score > p2Score){\t\t\t\t\t\r\n                \tshowElement(\"player1Wins_label\");\r\n                } else {\r\n                \tshowElement(\"player2Wins_label\");\r\n                }\r\n            }\r\n        }\r\n\r\n",
    "encrypted_examples": "fUp7tn5uE6ton4jmF2AD1TXnl9yWGGdPhYxnNmOrFAsuuyySphCHj4WmjE2L\nyL/Z8XNWJ850j75i5+A1XnxgUQ==\n",
    "hide_share_and_remix": "false",
    "disable_if_else_editing": "false",
    "expand_debugger": "false",
    "contained_level_names": null
  },
  "published": true,
  "notes": "",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Applab>