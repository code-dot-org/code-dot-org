<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2016-10-12T17:57:34.000Z",
  "level_num": "custom",
  "user_id": 13,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "console.log": null,
      "declareAssign_x": null,
      "declareAssign_str_hello_world": null
    },
    "edit_code": true,
    "embed": "false",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "app_width": "320",
    "app_height": "480",
    "never_autoplay_video": "false",
    "examples_required": "false",
    "droplet_tooltips_disabled": "false",
    "text_mode_at_start": "true",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "true",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "true",
    "markdown_instructions": "# Strings\r\n\r\nThe primary data type we have used so far is **Numbers**. If we want to interact with user-submitted text, however, we'll need to learn about a new data type called a **String**.  A string is a **sequence of ASCII characters**.\r\n\r\n**Example** | **Rule**\r\n---|---\r\n`\"aString\"` | Strings **might** look a lot like a variable name but there are **many differences**.\r\n`\"look at all these spaces\"` | Strings can **contain spaces**.\r\n`\"$2 bills are the coolest\"` | Strings can **contain special characters** (and even start with them).\r\n`\"11\"` | Strings might **contain only digits**. This looks like a number but it is really 2 ASCII characters.\r\n`\"\"` | Strings might **contain no characters**.\r\n<br>\r\nYou can **store strings in a variable just like a number**. In this example the variable name is `str` but you should choose a name that is **descriptive and meaningful**.\r\n\r\n![](https://images.code.org/56e6b30a51556aa3b516e0a49b51cbeb-image-1445894334432.18.40 PM.png)\r\n\r\n**Combining Strings:** often you will want to combine multiple strings to create one longer string. You can do this with the `+` operator. The formal name of this process is **concatenation**.\r\n\r\nThe program you're about to see is a very simple Mad Libs app that uses strings that are created inside the program and  saved inside of variables. These strings are then **concatenated** with other strings to create a Mad Lib.\r\n\r\n# Do This:\r\n\r\n* The input words of this Mad Lib are **currently set to the empty string**.\r\n* **Add your own input words** and run the program to generate the Mad Lib.",
    "instructions": "Save a string inside a variable and log it to the console. (Click to see full instructions)",
    "start_blocks": "//Change these strings from the empty string to the kind of word indicated in each variable name\r\nvar pluralNoun = \"\";\r\nvar verb = \"\";\r\nvar adjective1 = \"\";\r\nvar adjective2 = \"\";\r\n\r\nconsole.log(\"How to take care of your pet ostrich\");\r\nconsole.log(\"1. Make sure your ostrich eats plenty of \" + pluralNoun);\r\nconsole.log(\"2. Your ostrich will need to \" + verb + \" at least a couple of times a day\");\r\nconsole.log(\"3. A healthy diet will make sure your ostrich's feathers are \" + adjective1 + \" and \" + adjective2);",
    "encrypted_examples": "GNxWsn53PDCpja7ITtZODwuAZETmaE4RXf0fbadpqGKaIcz6eXnzcyaMIQ1h\n07qL\n",
    "lock_zero_param_functions": "false",
    "execute_palette_apis_only": "false",
    "contained_level_names": null
  },
  "published": true
}]]></config>
  <blocks/>
</Applab>