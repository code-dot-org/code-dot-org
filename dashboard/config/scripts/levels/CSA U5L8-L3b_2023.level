<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Pixelating an image is a process of reducing the resolution or quality of an image by dividing the image into regions of pixels and replacing each region with a single color, usually the average color of the pixels in that region. The resulting image appears blocky or \"pixelated\" due to the reduction in the number of colors used to represent the image.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">PixelatedImage</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">pixelate()</code> method to apply a pixelate filter to each <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> object. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">pixelate()</code> method should:\r\n\r\n1. Traverse the 2D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> objects.\r\n\r\n2. For each iteration of the outer loop, define the start and end row of the current region to be processed using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">gridSize</code> variable. Use <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math.min()</code> to ensure that the end row is not greater than the total number of rows in the image.\r\n\r\n3. For each iteration of the inner loop, define the start and end column of the current region to be processed using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">gridSize</code> variable. Use <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math.min()</code> to ensure that the end column is not greater than the total number of columns in the image.\r\n\r\n4. Use another set of nested for loops to iterate over the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> objects in the current region.\r\n\r\n5. For each <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> in the current region, add its red, green, and blue color values to the running total for that color.\r\n\r\n6. After iterating over all <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> objects in the current region, calculate the average red, green, and blue color values for the region by dividing the running total for each color by the total number of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> objects in the region.\r\n\r\n7. Use another set of nested for loops to iterate over the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> objects in the current region again.\r\n\r\n8. For each <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> in the current region, set its red, green, and blue color values to the average values calculated.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner</code> class,\r\n\r\n1. Instantiate an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">PixelatedImage</code> object with an image in the Asset Manager, then draw the image in the scene without any filters. You can also upload and use your own image.\r\n\r\n2. Add a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">pause()</code> after drawing the image.\r\n\r\n3. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">pixelate()</code> method on your <code style=\"background-color: #ececec; color: black; font-weight: bold;\">PixelatedImage</code> object, then draw the image with the filter in the scene.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with getting and setting color values for a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> object.\r\n</div>\r\n\r\n## üéØ Goal\r\n\r\n![](https://images.code.org/1dba0564c5b8ada4d682c03e6e8edf47-image-1682904251569.gif)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Pixelate Filter",
    "bubble_choice_description": "Pixelating an image is the process of reducing the resolution or quality of an image by dividing the image into regions of pixels and replacing each region with a single color, usually the average color of the pixels in that region.",
    "starter_assets": {
      "astronaut.jpg": "9cd8e469-6ff0-4416-b718-763c2ed7c96d.jpg",
      "baseball.jpg": "3608ded2-5853-47be-9d21-47f00ac3c919.jpg",
      "basketball.jpg": "e7100846-8404-4607-963f-a6af59f605ef.jpg",
      "cellphone.jpg": "6adf6d13-d610-4a31-8d88-cef5256c07fa.jpg",
      "dog.jpg": "e5ed3073-1145-4415-9739-36c580a76676.jpg",
      "donut.jpg": "83302dae-6cf6-4283-89d1-2a25320e6b43.jpg",
      "electricguitars.jpg": "ad9bd884-a985-44e2-a968-bb71ac06ef56.jpg",
      "fashion.jpg": "81bc8066-5a72-4c6a-a6ec-f0e59382561d.jpg",
      "football.jpg": "8c85c2c8-117a-4cc7-9eff-8b8d2fc2522f.jpg",
      "games.jpg": "56b70f03-1b53-49c7-873f-ccc5d3344785.jpg",
      "guitar.jpg": "312c6d6f-5279-4f85-aae8-41044a6f475a.jpg",
      "laptop.jpg": "f93421a6-b3ac-41f8-b926-758047da5319.jpg",
      "motivation.jpg": "bbd8830e-97a6-4f69-8624-ba173679cc0e.jpg",
      "nature.jpg": "91ca5891-a4e1-4ff2-b8ee-11da3209924d.jpg",
      "paintbrushes.jpg": "8d269d92-d1eb-486d-9d8d-94bd6ced6474.jpg",
      "soccer.jpg": "1c8c215e-38a8-435b-9fc9-5a70c303a1b3.jpg",
      "speakers.jpg": "6a102375-6a3c-43e8-98be-0a076c47bf0b.jpg",
      "starwars.jpg": "22c47460-e381-4eac-a851-6c00ee7d112c.jpg",
      "track.jpg": "4f7b869e-7b63-4e85-bf7b-b9f5ae332cd4.jpg"
    },
    "encrypted_validation": "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\n1Z20aNgo5A==\n",
    "encrypted_exemplar_sources": "YyRhf5XQ7GbGqjh3pQacF8EMMpqOQsu168sBLGi5TMukQAFhjkp9A392i3/y\nv7ElbiwYO8VVEVPtipqO4uIUvOZ8BiJm6hGy4HKyEHW0w8edHkuJL/uupfAo\nimpRDk8ICK7Wvm5AkoEFpztf3G8c4IHQd1V+n7ng49yUxIy5q7vh4iPX/QNx\n2F+afB5TzyZQmdNuezyt5aD5Ly+ah1ia+cTygqgIGodYJdVFNhFAY4cOKUIM\nBd5QEp4CTBz385cr/PeRMkA8hOPhUvbLC3l9PKC8HULFw6WRdSKiVBuZyZgX\nfEwCxOnUXSfwQaR30+LmKt7US5rbl+Uflkk3v/CutQnxt7aOmLRqczZu+Z8T\nXqShbTsGyqBO90MAKPifdqiSuFeSLyF+rW5HQDfZvBRWreeF9850e/3k1vWG\nDCRzwFsEW+mNmcV12xpdUgwrbvFk+Z+DbMo+yJOcuImmsHegYwlV1i2AARig\nXd081RHhLQRYocHndfRMiYD7gsOJgLVvApR8JsDDRBywGvw/P3CB4W0HOwZ8\nX5VXsKX6KFDWCPVpzRywTdtlSJ53XbyuBevTN8XL+Wk5SZ4C4o7DSeTl0bDd\nNvjC1Eo/usEtG1epwbWp9yfpMsyKwbXX9ridkEsTIIcIaNGC4cxdV1jmrFeA\npaghOhEK4M5O4NfcBPAHhE3i/l7l+t6ajh2V3wHmF+6yPrKfkCIyY1lykcpP\neehIeFmc2NoFHj24DGq+WZsFmG9VQBgC5vyY0XD8/ga6Y9wctwHfVPAAZ42j\ngJCV/lShqHTCWg2ZlrbipEfFqRf4TLy4saK3Mm6zPNr6x359vjE69NH0r4gi\n/X21ndLSOQ1lj5lu19Qpjl2WdQSkdI9UcQPbt1X3c8+ufRccNXMuV2BsEtd/\nmCibozXqFZZr32QqWYxEml9GLgawUiJTuzeXLZiM2Gw8vUVAxoE1WqXswTcx\nEQXi7k5EM016wS9UqWCICQdahULUGE5SpPpslHE1y0+qcO/a9d7sCWc2H6G1\nBpmWvJ/9fabwyw0MgvhDKr/NDRrCN1YX+x7+NO1NyN5qhxDTMZwt44DtPwpe\nn+GgBxbXsExSYrFWZn9p3IAu8fszlDi7gPc1iHoM++oMSEPujsm06epe3wE2\nzaUJzSKkfm6QveVhZRYwCTKeKHNQv94QClb3fJUooTXFF7CV36IdW7aApZws\nNKnkwnXHUVs8K5HR0HknnK3OM70IrT0LfXgIktklLQFkVJJvS2PmNA68qiti\n2HhmRxJ2GgCMmfeC6CtLaf/G7MSFmD0q1L33Oh3BcEqRsEu4Id41B9VUL6Vo\nPCcrAYUAysgqahi1FfN987IEhGRgqp3kEilrHJeunCymI9QounknE9dKqlR2\nhyCyg7yWpharzB7mBo7cjTN4rnC3J+nPq/oei8sRCApMq65al5DmlvRGMNjr\nKty3XSBRp4qUuD4yAJYq8yr7r3gQZrvnP87id/gbyO1Yr5DRUKgdY0tUy8q/\nvTSGTZt7hU1inGRejm9FI5yn0Kqmwixmvh2MjS6xvfLqy/AtEo2+3a3FHxsi\n8CX4WZ1Vu/67y5SMfXAL2Ebe0bpK+N5nEEBY2pRqKxAroI/fUt7BVqrR+T4f\nN0VOxu9TrkaZ5O2OJrd4c4OYFQpZg8LeFzVxJodKGDcJi5IF8tHCY2IvjFFb\nnP4/bSAh8/c/8+rMYr6O0FlRlZKTP/wlv1/zEvooN57ww9KiFS4AmzG83zTn\nP1sLcQU+zyQtDxpMhBjGDwM7W3oqWb9QHHvBQOTkvqiqG5DPe0gTDcx/YvUR\nzUgTBzNFdzGbA6iqlwrLxkuKc7e1gruRR/j//X3jbB9gacSOhMPyqp/cRBSc\nYC9eeX9lnaSSdV3Fl81Bh0p1gosbPoDJJFTYvMVl5i3GGC2UWAyrOy0bdNph\nafhTyTv/LBRIvu958GZ1gRbI2k8FMlluoX5hUwOcOH5rAA6Z5zO+epY8Cj14\ng3CCh0A/yUK6p/dMgNSfSQcCNWPrONbcnY0BCUi1Fr55Pa1XiOA6+GqMvggW\nKLqsxxsTC/HmA/V8BL9I79S5lXt53+zv5zsdJ2xyLLbdCraNFe707lIy5HtE\naDL0lHtiAy+FCoqT7QW94kSBIE5OW5uw/8N42I3IzbVPuCdMseRFtrEenmB1\nuE7cOGTicEYEaVP0LVeHfjllyjkL5hTTXaHGJh/k3kq3EVfmzlwzi95FPDZ/\nUclPFFp7mo2IOag0QauYCSwhQ8MX7vg/3VKWMgqQ2T4YABnqFfkBM9Ar81v0\ng4gLP1woX+qqkI7BHRe0PFR/g04YXPvubfj/TXoHFai7MFTZigYWq+C5hBxg\nY+1/cy2p0NEcfRmOqU8nvNKLufLolR/m4sVfltW7Nul/TDnIo+KjbvdEz9rw\nrRzIS+RyeC+/Cr7XpofmsixIQbrF47BLoSflhHp5OxmjYRE2C7BGWFWAFTjB\nv7eORxjFnwZaqZ7pcrqhr+stJaY9eAFnopwFmQoEXQqPl3ZZrTkX8tqYUIvQ\n7rrFP+Htwjvoe3mXj6HKKxztuQziBSBN2wPinY9F+ISfVBuJwJapX75bQ5oL\nJIrWuY4NjL2TnO+u2phnKxdw7mfIjEva8USBoMmPNSbq3IGUJlUHL5pxbnfw\nnO7Gl81VH4lPDUWauDd1QBIv2m6As5sUnLHQgA/SJQflY71V6nz5v0ddTFij\nFQu+Tb1fC6RwcUtfx6pVgXARH1xDsmkvETIwoEUQ4JssUPw9J9OUYmBHlfNA\ncEys34U5pTrslhG2J8nvI498JJGxjXe2SUeQXcPfIjOv4qY7sLDRun9bfpU3\nseuiH1nlyEzLO2akHsUXrbfiMt6VYSzT8dh7SbgXZq1KcWMGTKv3cjYqOVdt\nO3/qtpmvV/+x/hcf/xtnFwJPnXOWEAVsGYhQaiBiHeIuUkzAZwslcTQumZ3N\nqaYjr1HEd+AVKk6o9u/6hmeg7KtUcNsHnnhouxWhyaUaDtKKe7hrcsLr8Jf1\nPiRnn40GYF2NiOM0CXIOKKUzEtPWM4NkdHQCdl+IOISBDdiVAIwLegzafwpw\nkX6x5GY3Q981Mwimi3opWFi05Nm4P3Yl55NgDaK1zpwYY+6ZSJIa8J5NRIuW\n9RD+RmZEfEpA/aSOg1ubWPlAELiWEvVRSpUC08iqv/VVV1+qlQUqb/8CPjtI\ncCLms/sZ5PnIVzcYj/pGjHD2z2a3VFIwTAhCGsvKgctXul+PNvOnKQ8nWmBh\nofPutYysDemAb49/oSK6jMK6PH0qupBcT04tUInynPsAAhCtoCQOAb/CiExu\n9cEs1Zw5ys5R7aco7qnhPqx4kRn4F1o9i6Eo9otrWffuAdOJ/Oym4x1uvkhX\nlWolFO7kf0FbaxkvGnYghQp3pWNZWfT5v3BYdmRRM7GDU17Lsk/ubYmDB/rg\nVqpfNi9DllAIdV5GixIp5qApK/iX076FUL0K24PDqJVZy+BUHKaZjM9tHc6O\nwuzgTvh1SyD2pWnDS9xoSk4/LdtR7itv/ffD7uM5qgz5bqEdFsyQ1M/FhcNj\ng6XacaH93F6dUw/fhTpfY/b0w2021FByA0ic5rBZftg5fIORtLp/o6c6eOG+\n4vtxPsETWVcDcNCY1Qf1nQbcsKXPZkzZISUrN3ZhF/ZxC8TVtevpQ6C7u5IQ\n3gHQQP/grRbh2IPbBSfFUe1xcwajjV321IabF9+rWX8pTWJlp386OnLLoFQU\nsXSlQKFtWc43VGTXGTQ8eRH7rbqxMnjEM/D9FOIjjbnSGQyhM0xoerKT/jvD\n/Q3PutMXHmTTSqAdGRnTfB0wbeO53/O+StfUiDDjdczXsVWuHUEEXFeOM8jZ\nJEnhHXvp04OWiFjGvtyTTOxE/f14XiFGOeW07LbgEmadqvXwo6TUuAgOBhcP\ns65ufcfNuGLHQjNCp1R0PEinF1qDRYjLHzW3UdUvVMHMnAdniOyIXvCyHjlp\na/D4CbqYsmp6C1tQMgo1fHze2u245V0Oam/oMB3sTTc02++dFP5yPpF7Vtf6\nMyLInGp7bf7Gvs3xiM2xvn6C2NADJyqukCdffiYH3RVqqLfa0pcaOLqpRPtX\nGjjNPUJt7GFl8Db5xA+ZW4Ei7WIdkyNqaCXpsF4VcpaJLHUMMbnRISRIzJ4I\ndMHcPFefe/DU/eVg7hTsFQlReJb92hHzmta6d9y35qEQ5HQxUDW/+tYH7KaE\n+2J/vtf7dHu8hUj7W1Le8nlLbI59PvaoaO0JSlBmSZAaAJ9XS0HbePlPwLJf\nys8tIeDDBGwJP+eszokryMEeHa1OdkML9ZoSUzs5gnSobvzTscQzs2iv8MZ1\nDZuerZWqYf3gQZNSl0/F9jBD/TnAxgPtVW9eV41QhB64RqrjcApDnkDDOaoO\nfaGrfeanWnFCidIi2dV/u7zh4BkjAuF4Kbd8j+XSqSpl2xFpzogyoW8815Pu\na2KhwCfjOouG8fm8sTRwB9AQ3s80a8bc/rin2NAjl/MnH3rO7IYwmOZ32rLP\n5v3gvquVF97Q2p/vJ8WNdqDBNkcuF1iOTJdPHCKG7HbWQz8ElvP5hAfmyJ8O\nJIEqQD2zS/68nZsQrUF7imY0EU/en2padSfreYbQ6/cltwjqrpTPjSokDm/W\noIczvJ/t9x9CkHOM0fEpqPrDxMjfwzj7zVo+TelBUI+voEeOoKDx2H4uM7tK\n5Tka0ZHWp+41q2i6mb5Yu3oxRnuCOVsGdEvx89awC6+yVhJs8CYt8z3Elfv0\n5ZLOsgO04+BGBTabEn81UwzGSsSHh49vqAwE6pdbWJP3SdxiEwiNnYU1sJMe\nKBFdEmFu/MOUk6ewXWVu25soY1YnK3NVX7rgjky/VgaoD8RnnTxLio93R5jG\nnqd2CZE5inqvraYMNkKOX4lmXeMeL2+X94CYSJv4J8F9MSLyHmCwxVR9GXro\n0J4hup3czh56E7c04o1xePl+mhsvEde3n3IzZIRMaxFnZzWcnYgvqkRMhFur\nB+ouU1e+QRlU1BhG8mjsLErhxdEyQBBwoOwde7u65rXuufZIL4BkiYPYvNZO\ncieq3a8HTNclX5QUptT4AznGG5J3bgvir+HqV2ovN08RX9BIAkLFTU8KzF8S\npqUb1PvvQIBkfR5M9iQldFa1BJclAcgHCXL/Ewc2Y6N10Q+t6ZQgshWXvuTU\no4Qyegg95dtagsflzaTTh7gnQiD4oYBlY5FEClH4IfKJgzMfN4r8ak9/XYC8\nV3k+phd3MMUAWfodzmnxEdOODC8G6mN4pyRdc6RCGrCXmKDy/zZFerAEdboi\nBl+LeOvFWWkqyuoUqRDn+LhdXxYG9iuiujQB41EbOeAGewaG6uAcRz66iG6l\nbtdWW7ZbtzRNcHUeZSE5nmdBz7H94PGpe0mk0PXWS4ztC9e+GhQrMKOxlIZG\nzXzesj6/TEF8yXy6YwLjdhM2AocMRTPtDEvIPtjdEHxRevBxoN5vwHFp10QH\nTrguaZKUkekRD62RThgced092aRJVtXYWkvfAEuElMkQXj008AOi+r0TNBhD\nxqCnk+5mYEnDjcgox/fIcARQqbA0Bc7TauvALjH2pkUdPlUce9lYUPGAgBI6\nd3woFGRegJ/9zML4wGek5UL3OBbupZLRsu+qZa5HuNNIGJklC08TtOasBxVz\nMwRM3h/H6CVhtNkvzR7ur+fUEWHy2kQIYlOvzO8qVeuPgK+FH1M1IMd+/bmv\nCnKnmknPBnoYPhxCKAz+wWXfutcoZmYqUam8ZWmi641CQg0WplKJ6VlKM8MV\nPmuFDKOIXuQZxEo6gwfjSTxcqkaC4vmVpIMm21+8d75hm+DOzVe2uLXi56Dy\nRaX+B00KqAob0nX2Kd7pBvbCj4KQfLvCF/n7ieccZxg4GXr8NWIKw1zjleYj\nVc8fB3DJsSM3B3aJt0A6+WZkNNweSWfEdi7n8KuT7Kgh6SrxLGqJ4nYsTttc\n9HzbbVdgWSX7eJh02q29X6NBWzEagC2WkH2azcLBB5cm9aKCFKLLxR+zT+Bo\nPfB/hcBulT+yRH6b98O4Izq5GJZ6noWVyILyFEN3hlgmoLi+V0X1tSGHYyDa\nDbtltAssd8TsJ7cL+kRyz+CsVndE/es18zI5X5o3Q2K2MttA1Jp1n134XWIY\nlK0wum28DAH7abkXUKcY9b3bdRtwm2jxLo2hagLJ7QI0mCeRqeD+em/iE9jQ\nMjf7V4P2Kbx9j99JdxkN8dzc88kTR4kZmDFCQHTtjdNCNHvyH0EZkdFgk+VO\n8ROS2wdw8u5dzxSIYogfGXkaVnrRpQYVn+2zwshCBHb6bXiGl8WK1ggEh6nV\ncSm1GAH8nGmKEDo=\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a Scene object\n    Scene images = new Scene();\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a PixelatedImage object, and draw the image in the scene\n     * without any filters. Call the pixelate() method, then draw the image again\n     * in the scene.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n\n    // Plays the scene\n    Theater.playScenes(images);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ImagePlus.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Represents an image that can be modified with filters and effects\n */\npublic class ImagePlus extends Image {\n\n  private Pixel[][] pixels;    // The 2D array of pixels\n\n  /*\n   * Sets the superclass filename to the specified filename\n   * and calls the getPixelsFromImage() method to initialize\n   * the 2D array of Pixel objects that make up the image\n   */\n  public ImagePlus(String filename) {\n    super(filename);   // Calls the Image class constructor\n\n    // Initialize the pixels array by getting the pixels from the image\n    pixels = getPixelsFromImage();\n  }\n\n  /*\n   * Returns the 2D array of pixels\n   */\n  public Pixel[][] getImagePixels() {\n    return pixels;\n  }\n\n  /*\n   * Returns the pixels in the image as a 2D array of Pixel objects\n   */\n  public Pixel[][] getPixelsFromImage() {\n    Pixel[][] tempPixels = new Pixel[getHeight()][getWidth()];\n    \n    for (int row = 0; row < tempPixels.length; row++) {\n      for (int col = 0; col < tempPixels[0].length; col++) {\n        tempPixels[row][col] = getPixel(col, row);\n      }\n    }\n\n    return tempPixels;\n  }\n\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "PixelatedImage.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Represents a pixelated image\n */\npublic class PixelatedImage extends ImagePlus {\n\n  /*\n   * Calls the superclass constructor to initialize pixels\n   */\n  public PixelatedImage(String filename) {\n    super(filename);\n  }\n\n  /*\n   * Applies a pixelate filter to each Pixel object by dividing the image into a grid\n   * of equal-sized rectangular regions and setting the color of each Pixel object in\n   * a region to the color of the first Pixel object in the region\n   */\n  public void pixelate(int gridSize) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Traverse each row of pixels by the gridSize amount (instead of by 1), then\n     * traverse each column of pixels by the gridSize amount (instead of by 1). Get\n     * the average red, green, and blue values of the pixels in that region, and\n     * set each red, green, and blue values in that region to the averages.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "encrypted_examples": [

    ],
    "thumbnail_url": "https://images.code.org/7db7d21509f399e86a8769bee3c9c839-optionB.gif"
  },
  "game_id": 68,
  "published": true,
  "created_at": "2023-03-28T00:06:59.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2023-03-28T00:06:59.096+00:00\",\"changed\":[\"cloned from \\\"CSA U5L8-L3a_2023\\\"\"],\"cloned_from\":\"CSA U5L8-L3a_2023\"},{\"changed_at\":\"2023-03-28 00:07:00 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-22 00:32:17 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 12:45:01 +0000\",\"changed\":[\"long_instructions\",\"csa_view_mode\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 12:46:15 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 15:26:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 15:26:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 15:26:19 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:01:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:01:38 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:01:52 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:03:20 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:22:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:23:58 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:24:15 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:25:04 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:25:06 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:25:15 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:25:38 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:25:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-30 19:25:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 01:27:10 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
