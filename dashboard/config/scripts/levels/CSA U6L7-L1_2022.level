<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    String pangramDefinition = \"a sentence that contains every letter of the alphabet\";\n    String pangram = \"The quick brown fox jumps over the lazy dog.\";\n    \n    System.out.println(\"There is a t in pangramDefinition at \" + pangramDefinition.indexOf(\"t\"));\n    System.out.println(\"There is a t in pangram at \" + pangram.indexOf(\"t\"));\n\n    String aSubstring = pangram.substring(4);\n    System.out.println(\"First substring: \" + aSubstring);\n\n    String anotherSubstring = pangram.substring(4, 8);\n    System.out.println(\"Second substring: \" + anotherSubstring);\n    \n  }\n}",
        "isVisible": true
      }
    },
    "name_suffix": "_2022",
    "long_instructions": "##Investigate and Modify\r\n\r\nRun the program to observe the results.\r\n\r\nThen, experiment with the program by making the following modifications. Change one line at a time, then run the program after each change to observe the results.\r\n\r\n1. What is the purpose of the `indexOf()`(#e7e8ea) method? What does it return? Add the following code:\r\n\r\n```\r\nSystem.out.println(\"Location of T in definition \" + pangramDefinition.indexOf(\"T\"));\r\nSystem.out.println(\"Location of T in pangram \" + pangram.indexOf(\"T\"));\r\n```\r\n\r\nWhat is printed when you run the program? Why do you think this happened?\r\n\r\n2. What is the purpose of the `substring()`(#e7e8ea) method? What is the difference between the `aSubstring`(#e7e8ea) and the `anotherSubstring`(#e7e8ea)? Try changing the parameters to different values.\r\n\r\n3. Try changing the parameter for the `aSubstring`(#e7e8ea) to `30`(#e7e8ea) then run the program. What is printed? Why do you think this happened?\r\n\r\n4. What would happen if the two-parameter `substring`(#e7e8ea) was called with index values that were next to each other? Try changing the parameters for the `anotherSubstring`(#e7e8ea) to `5`(#e7e8ea) and `6`(#e7e8ea) then run the program. What is printed? Why do you think this happened?",
    "teacher_markdown": "##Investigate and Modify\r\n\r\n1. The `indexOf()`(#e7e8ea) method returns the index value of the first instance of a particular character within a String. When we add the code, as requested, we see that the `indexOf()`(#e7e8ea) method is also case-sensitive. It finds and returns the index of **0** for the \"**T**\" at the beginning of the `pangram`(#e7e8ea) String, but returns a **-1** when searching the `pangramDefinition`(#e7e8ea) since there is not a \"**T**\" character present in that string.\r\n\r\n2. These are two different ways of calling the `substring()`(#e7e8ea) method. In the first, for `aSubstring`(#e7e8ea), the method will return the all of the characters in the String from index **4** until the end of the String. For the implementation in `anotherSubstring`(#e7e8ea), we see two arguments: these denote that a String will be returned within the range from **4** (*inclusive*) to **8** (*exclusive*).\r\n\r\n3. When we change the parameter for the `aSubstring`(#e7e8ea) to `30`(#e7e8ea) the value that is printed to the console is `\" the lazy dog.\"`(#e7e8ea)  This is because the `substring()`(#e7e8ea) method is returning a String composed from the characters in index **30** (*inclusive*) until the end of the original `pangram`(#e7e8ea) String.\r\n\r\n4. In this instance, a single character `\"u\"`(#e7e8ea) is returned. This is because the `substring()`(#e7e8ea) method is returning a String composed of the single character at index **5** (*inclusive*) to index **6** (*exclusive*).\r\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-02-26T00:28:29.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "audit_log": "[{\"changed_at\":\"2022-02-26T00:28:29.712+00:00\",\"changed\":[\"cloned from \\\"CSA U6L7-L1\\\"\"],\"cloned_from\":\"CSA U6L7-L1\"},{\"changed_at\":\"2022-05-05 16:07:34 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 16:26:28 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 17:36:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 17:37:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 17:38:24 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 20:48:27 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 20:50:19 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-01 19:06:34 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-11-02 14:21:12 +0000\",\"changed\":[\"teacher_markdown\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-11-02 14:21:24 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
