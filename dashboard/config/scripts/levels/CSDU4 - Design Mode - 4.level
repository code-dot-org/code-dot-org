<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2016-05-26T21:47:25.000Z",
  "level_num": "custom",
  "user_id": 13,
  "properties": {
    "skin": "applab",
    "edit_code": true,
    "embed": "false",
    "instructions": "Improve the button by choosing a descriptive and meaningful ID. (Click to see full instructions)",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "free_play": "true",
    "markdown_instructions": "# IDs\r\nThe `id` (we'll typically write **ID**) is a **unique identifier** for that element in the app.\r\n\r\nEach element that appears in the app must have a **unique ID**. In fact, if you try to run a program that has two buttons with same ID you will get a warning message in the console. \r\n\r\n# Choosing Good IDs\r\n\r\n<img src=\"https://images.code.org/f968ce4b09d2500b224af1bf9bacbacd-image-1444155536105.png\" style=\"float: right\">**Good IDs** are **meaningful and descriptive**.\r\nJust like good names for functions, you will want an ID to describe the intended purpose of the element.  For example, if you have many buttons in your program, you will want to give each an ID that describes what the button does. For example \"forwardButton\", \"leftButton\", etc.\r\n\r\n**IDs are also case-sensitive** which means you'll want to develop a style for capitalizing IDs. A common strategy is to use a style called **camelcase**.  In camelcase style, words are combined together with no spaces and each new word, after the first, is capitalized. itTypicallyLooksLikeThis.  \r\n\r\n**Why?** Many computer systems do not allow keywords like function names and IDs to contain spaces.  You've already seen several examples like this: `moveForward`, `onEvent`, `turnLeft`, etc.  It's important to realize that camelcase is a style convention, not a hard and fast rule. Sometimes you'll see other styles such as using underscores: `move_forward`, `turn_left`.  But in App Lab we typically use camelcase.\r\n\r\n# Rules About IDs\r\nIn making descriptive and meaningful IDs there **are some rules about IDs** you need to know.  IDs...\r\n* cannot contain spaces.\r\n* *must* begin with a letter (A-Z or a-z) and may be followed by any number of digits and letters.\r\n* can contain hyphens (\"-\"), underscores (\"_\"), colons (\":\"), or periods (\".\").",
    "never_autoplay_video": "false",
    "examples_required": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "true",
    "beginner_mode": "true",
    "submittable": "false",
    "hide_view_data_button": "true",
    "droplet_tooltips_disabled": "false",
    "debugger_disabled": "true",
    "lock_zero_param_functions": "false",
    "execute_palette_apis_only": "false",
    "fail_on_lint_errors": "false"
  },
  "published": true,
  "notes": "",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Applab>