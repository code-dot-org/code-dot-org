<Javalab>
  <config><![CDATA[{
  "published": true,
  "game_id": 68,
  "created_at": "2023-06-20T12:10:08.000Z",
  "level_num": "custom",
  "user_id": 19026,
  "properties": {
    "encrypted": "false",
    "long_instructions": "##LightBoard FRQ\r\n\r\n\r\nThe `LightBoard` class models a two-dimensional display of lights, where each light is either on or off, as\r\nrepresented by a Boolean value. You will implement a constructor to initialize the display and a method to\r\nevaluate a light. \r\n<br><br>\r\n__Part A)__ Write the constructor for the `LightBoard` class, which initializes `lights` so that each light is set to on with a 40% probability. The notation `lights[r][c]` represents the array element at row `r` and\r\ncolumn `c`.\r\n\r\nComplete the `LightBoard` constructor below.\r\n```\r\n\r\n /** Constructs a LightBoard object having numRows rows and numCols columns.\r\n  * Precondition: numRows > 0, numCols > 0\r\n  * Postcondition: each light has a 40% probability of being set to on.\r\n  */\r\n public LightBoard(int numRows, int numCols) \r\n```\r\n<br>\r\n\r\n__Part B)__ Write the method `evaluateLight`, which computes and returns the status of a light at a given row and\r\ncolumn based on the following rules.\r\n1. If the light is on, return `false` if the number of lights in its column that are on is even, including\r\nthe current light.\r\n2. If the light is off, return `true` if the number of lights in its column that are on is divisible by three.\r\n3. Otherwise, return the lightâ€™s current status.\r\nFor example, suppose that `LightBoard sim = new LightBoard(7, 5)` creates a light board\r\nwith the initial state shown below, where `true` represents a light that is on and `false` represents a light\r\nthat is off. Lights that are off are shaded. \r\n\r\n",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "encrypted_exemplar_sources": "vklhZoz8qojEing9/FRaM2/ANU1jTla54lpyghjzEJx6rFic1BdQy3kde8tH\n+fhtGF93S6D4ZwZXrx8fhiBxvSYQcwPFF8evlE40b/PTUixbOHko/61xKNXz\nI1dQ4EdClEJhR8Xt8lgsRYQH7TgVHv/c8M7bkWqHQ6RpcpbrAD5ZNxNCBPRi\niupP7FbBXk9zUcNtbwR33xq6Xs66J7lmVuo3TefEWS1tEcG7TgYC+jn7zVhC\niXDhNIMea0y9WwXyRtNUWqj0MJCFUv93wd+Ei0+wHQgtjDsRL8oK0ypeRXTN\nngLtCuhWy1lublXB/v89JYZktgjE1RQ1N/kxMBvBor2ZVOc9kYeX5MqtLrhg\noJpEr++1mXnvyT4EDOifQniuFh7tRbAJQKZWGmfTbbUF/fBErPfcsJ+eFmjL\n7Wa3H9FZA/Gkt3ofad8+Bn5CFV3nNzv7XB5hBlsIPH+8BajwWEhNp4jgW4by\nhN8+2d+MdFekmbKEYnvq0epwKd0+2XcmHzRGv5fFO+l//dDKbKM2pWJGcIz7\n4zYcV4OqGDBoIVaR2QTbeKmLK9gU90K0Hwx+/QJ3kjeNpeg503g6IH5wHHrq\neMpaJTAFYuMKySy5cW4VtbzbC3R2Ht6Xjwol6Hb5zsnxuu315XkWScOYaho8\nv3N5OWTuVR7NTai84hhr7DEtcbPybPL62D8xw2qn5yu34NoE/xNPI3m8ZK/3\nulGyMwNJiuaMnZ2nmoV3XP6Z+fdl52/je5DT9TCtu6ZTlifm4n9zQmkzrcH4\nrHXYh8lsTtUNKEfu/QdmdVUuvy9Cx9aGny3wIGK9YxvpTu6Lc5VeeIDUAUkJ\nGuPXY/n2nObneREDy8MDNpUIdAyx/aCYmM4C3WZ4AJ3BvbVa9CejTOSjkLsh\n6gwHNqAF+UDvf3m4x1tZLBGzvzEK2OGiS+wv9em5k6dg0Bqpf0GDB3RlxTek\nKuHPh3mLg+WTtSi5+bTqRf/F5yPMtFse+wq5/3EXtDQVOrQ9PBXsIfPgAtrI\nLQ01KGRSr+MU9UCMIOELFmA2tEaTB8hT9WOJ4yvYDQgzroYKxZcKknM0D4XG\nxxAvEh7PNMu37Ls0EieIvJKfhAFgD/n89hqBAw+s5uHK/6343iP6jcvtH3wD\nPgbSWM3nyXsA1Td1fsZqHC0lO0iecweDcg7fuA704MiaTxbJTCD+iR5AdHBh\nraAVbNF0qUvGXp8RoFTKTLGUvnhZAZC/6aYz+iF1FHulzJfdFEED2v+Enh9a\n3HlJJHOy+zYgGKhJuaxu6IYb9CqwsuKYZmOls16l/TYlVqA++D57AjFfWE1E\nsrhlOmEoKaszMKG6zxZFqWb5VDUvpwhW4ApWj1T43sJqHfWr1PiwmObnDWs+\nKf9UMcIWBVrD9Snib/BxTf+9ooqlBBD2JVREj58x0tKRji/F0Tqigy8ZRoF/\nflA5vs4ETeec3uU7n6At6kVyGaHLTqtgYAXAeXkgNKnFDHoDnS/yY9pJqAYl\nVI+eYMFFB6rvCbZ5CXd6jfOwk0N6No2e/Af1OaK6WWRaTrecOT5ZXHpY9J2P\nIqmmngVY0U90tHi56Bs9bu0cSAs01UI2BoIM2l2eW/rRLA5XPzkpzYSkdRmt\nF5KEaVUnoiyk8D5U3+hNZQLMjWLAXzlFbv0fIb0VrHooy9AVBSFKv7C+auYB\npAjFA+ImjnVf3dEQKjOpaHJ2fP557Y3dzjlb5AqCWjdXmfgjw7B6xW9NjAHx\ni6lbTOSkBGtKAa+2t3Io6DwJ8Vtr2vs=\n",
    "start_sources": {
      "LightBoard.java": {
        "text": "public class LightBoard\n{\n /** The lights on the board, where true represents on and false represents off.\n */\n  \n private boolean[][] lights;\n /** Constructs a LightBoard object having numRows rows and numCols columns.\n * Precondition: numRows > 0, numCols > 0\n * Postcondition: each light has a 40% probability of being set to on.\n */\n  \n public LightBoard(int numRows, int numCols)\n { /* to be implemented in part (a) */ }\n /** Evaluates a light in row index row and column index col and returns a status\n * as described in part (b).\n * Precondition: row and col are valid indexes in lights.\n */\n  \n public boolean evaluateLight(int row, int col)\n { /* to be implemented in part (b) */ }\n // There may be additional instance variables, constructors, and methods not shown.\n}",
        "isVisible": true,
        "tabOrder": 0
      }
    },
    "encrypted_validation": "nAPhQ9EIG27T7uGlzR5KbEi+pKxSie8ZIuVcD19FlhdSjpx2ikvCWe9re0tR\nqZOqimR6IoScSNW4MhC/24ub2vFFtKyPkCz99nTelBiLu6c=\n",
    "encrypted_examples": [

    ]
  },
  "audit_log": "[{\"changed_at\":\"2023-06-20 12:10:47 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 12:15:31 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 12:16:06 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 12:16:08 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 12:16:09 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 12:16:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 16:46:56 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"}]"
}]]></config>
</Javalab>
