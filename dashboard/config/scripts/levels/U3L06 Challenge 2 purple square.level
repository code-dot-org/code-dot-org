<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-05-03T20:17:15.000Z",
  "level_num": "custom",
  "user_id": 13,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "moveForward": null,
      "turnLeft": {
        "paramButtons": {
          "maxArgs": 1,
          "minArgs": 1
        }
      },
      "turnRight": {
        "paramButtons": {
          "maxArgs": 1,
          "minArgs": 1
        }
      },
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "functionParams_none": null,
      "callMyFunction": null,
      "comment": null
    },
    "edit_code": true,
    "embed": "false",
    "instructions": "Read the documentation for penColor() and penWidth() before using them to draw the blue square.",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "slider_speed": "0.9",
    "disable_param_editing": "false",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "free_play": "true",
    "app_width": "320",
    "app_height": "480",
    "show_turtle_before_run": "true",
    "autocomplete_palette_apis_only": "true",
    "markdown_instructions": "# Documentation\r\nAs we move forward you are going to see more and more (and more!) commands added to the toolbox.  What happens if you see a command and don't understand it, or you forget how it works?  Don't worry, this happens to professional programmers all the time! No one actually memorizes long lists of commands.  Most programming environments have ways to quickly look up documentation about the commands of the language you're using.  **Good news: App Lab has documentation too!**\r\n\r\n![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\r\n\r\nWhen you **hover your mouse over a command** in the block palette a bubble pops up with a quick reminder of what a function does, and what its parameters are. If you click \"See examples\", you will be taken to more detailed documentation of the command which includes **code examples** that you can even copy and paste.\r\n\r\n# More New Commands: Color and Width\r\n\r\nTwo powerful new commands have been added to the toolbox, `penColor()` and `penWidth()`. \r\n\r\n**Read the documentation:** Read through the documentation for `penColor()` and `penWidth()` which let you set the color and size of the pen your turtle uses to draw. The documentation for `penColor()` has a lot in it!  For now just look at the **named colors**, things like \"red\", \"green\", etc.  Don't worry, you'll get a lot of opportunities to practice with colors in a variety of ways.  We're just getting started!\r\n\r\n# Do This:\r\n\r\n**Draw the square:** Use pen color and width functions to draw the thick blue square shown below.  The size of the square doesn't matter.\r\n\r\n<img src=\"https://images.code.org/6ed36a408e568a0410f10d017550843f-image-1441904430698.png\" style=\"height: 250px\">\r\n",
    "never_autoplay_video": "false",
    "examples_required": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "true",
    "beginner_mode": "true",
    "submittable": "false",
    "hide_view_data_button": "true",
    "droplet_tooltips_disabled": "false",
    "debugger_disabled": "true",
    "encrypted_examples": "pK2qM1Dogyph2gEHikUpfMG0XAub1IcR8O/xhQEmSQEtGH1De/smmICVwrQu\nslKi\n",
    "lock_zero_param_functions": "true",
    "execute_palette_apis_only": "false",
    "fail_on_lint_errors": "false",
    "log_conditions": [
      {
        "entries": [
          "[forTest]"
        ],
        "matchType": "exact",
        "minTimes": 0,
        "maxTimes": 0,
        "message": "Hey! You're using a programming construct - loops - we haven't (officially) learned about yet :).  Don't worry, your knowledge will come in handy later, but for now, try to stick to the constraints of this problem: Just use a sequence of moveForward() and turnLeft() or turnRight() without any loops."
      },
      {
        "entries": [
          "penWidth:1"
        ],
        "matchType": "exact",
        "minTimes": 1,
        "message": "To complete the task you need to set the pen width"
      },
      {
        "entries": [
          "penColor:1"
        ],
        "matchType": "exact",
        "minTimes": 1,
        "message": "To complete the task you need to set the pen color."
      },
      {
        "entries": [
          "moveForward:1"
        ],
        "matchType": "exact",
        "minTimes": 4,
        "message": "To draw a square you need to moveForward(pixels) at least 4 times."
      }
    ],
    "instructions_important": "false",
    "show_debug_watch": "false",
    "makerlab_enabled": "false",
    "teacher_markdown": "Validation note: this does not verify that a student actually drew a blue square.  Only that they used `penColor` and `penWidth`",
    "contained_level_names": null
  },
  "published": true,
  "notes": "",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Applab>