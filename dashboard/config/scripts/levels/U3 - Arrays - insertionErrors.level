<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-11-10T23:06:13.000Z",
  "level_num": "custom",
  "user_id": 106,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "addOperator": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "randomNumber": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "console.log": null,
      "declareAssign_x_array_1_4": {
        "block": "var list = [];"
      }
    },
    "edit_code": true,
    "embed": "false",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "true",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "false",
    "instructions": "Run each command that references indexes that are out of bounds and observe the results. (Click to see full instructions)",
    "markdown_instructions": "# Out of Bounds\r\n\r\nIn many languages trying to access indexes of an array that don't exist will create an error. **JavaScript allows for some strange behavior** with arrays that it's useful to see, even though **you will likely never use this functionality**.\r\n\r\n**Warning:** some of this code will generate errors or work in unexpected ways. Don't spend a long time trying to understand weird results. The point to take from this is **referencing indexes that are out of bounds will almost never do what you intend**, and we'll be learning ways to avoid this as we move forward.\r\n\r\n# Do This:\r\n\r\n* **Starter code** has been provided which creates an array with three elements.\r\n* Uncomment the **first command that references indexes that are out of bounds** and run the code.\r\n* **Examine the output** and try to understand what is happening.\r\n* Reset and then **recomment** the line after you've used it. \r\n* **Repeat the process for all the lines.**\r\n\r\n**Note:** We have used a different style of comment in this program. `/* long block comment */` is used when you want to write a multiple-line comment. ",
    "slider_speed": "1",
    "start_blocks": "var myArray = [10, 20, 30];\r\n\r\n/* Uncomment each of the following commands one at a time and \r\nrun the program. Examine the output to see what\r\nthe results of each command are. Recomment commands\r\nonce you've used them so that you're only\r\nseeing the results of a single command. */\r\n\r\n//insertItem(myArray,-1,0);\r\n\r\n//insertItem(myArray,1000,40);\r\n\r\n//myArray[-1] = 0;\r\n\r\n//myArray[1000] = 40;\r\n\r\n//myArray[3] = 40;\r\n\r\nconsole.log(myArray);"
  }
}]]></config>
  <blocks/>
</Applab>