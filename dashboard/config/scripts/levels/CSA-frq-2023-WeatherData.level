<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-06-21T15:51:53.000Z",
  "level_num": "custom",
  "user_id": 19026,
  "properties": {
    "encrypted": "false",
    "long_instructions": "##WeatherData FRQ\r\n\r\nThis question involves the analysis of weather data. The following `WeatherData` class has an instance variable, `temperatures`, which contains the daily high temperatures recorded on consecutive days at a particular location. The class also contains methods used to analyze that data. You will write two methods of the `WeatherData` class.\r\n\r\n__Part A)__ Write the `cleanData` method, which modifies the `temperatures` instance variable by removing all values that are less than the `lower` parameter and all values that are greater than the `upper` parameter. The order of the remaining values in `temperatures` must be maintained. \r\n\r\nFor example, consider a `WeatherData` object for which `temperatures` contains the following. \r\n\r\n![](https://images.code.org/9b76524cbe7c957306564f3874e86e6c-image-1687362402242.46.33 AM.png)\r\n\r\nThe three shaded values shown would be removed by the method call `cleanData(85.0, 120.0)`. \r\n\r\n![](https://images.code.org/18eaa07a8476558791f46f9c6be713a8-image-1687362387416.46.22 AM.png)\r\n\r\nThe following shows the contents of `temperatures` after the three shaded values are removed as a result of the method call `cleanData(85.0, 120.0)`. \r\n\r\n![](https://images.code.org/cbe2051e32013e7fbddcdd23414d5693-image-1687362361965.45.56 AM.png)\r\n\r\nComplete method `cleanData`.\r\n\r\n\r\n<br>\r\n\r\n__Part B)__ Write the `longestHeatWave` method, which returns the length of the longest heat wave found in the `temperatures` instance variable. A heat wave is a sequence of two or more consecutive days with a daily high temperature greater than the parameter `threshold`. The `temperatures` instance variable is guaranteed to contain at least one heat wave based on the `threshold` parameter. \r\n\r\nFor example, consider the following contents of `temperatures`. \r\n\r\n![](https://images.code.org/06dfddee92fe21be4b42ca5cdea87560-image-1687362326437.45.21 AM.png)\r\n\r\nIn the following sample contents of temperatures, all heat waves based on the `threshold` temperature of `100.5` are shaded. The method call `longestHeatWave(100.5)` would return `3`, which is the length of the longest heat wave. \r\n\r\n![](https://images.code.org/dd28fb5e94eddacad98bdf7450ab9bd7-image-1687362304574.45.00 AM.png)\r\n\r\nIn the following sample contents of `temperatures`, all heat waves based on the `threshold` temperature of `95.2` are shaded. The method call `longestHeatWave(95.2)` would return `4`, which is the length of the longest heat wave. \r\n\r\n![](https://images.code.org/fc245344a6f5eb7acc174e944246cc90-image-1687362283805.44.37 AM.png)\r\n\r\nComplete method `longestHeatWave`.\r\n",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "WeatherData.java": {
        "text": "public class WeatherData \n{ \n  /** Guaranteed not to be null and to contain only non-null entries */ \n  private ArrayList<Double> temperatures; \n  \n  /** \n    * Cleans the data by removing from temperatures all values that are less than \n    * lower and all values that are greater than upper, as described in part (a) \n    */ \n  public void cleanData(double lower, double upper) \n  { /* to be implemented in part (a) */ } \n  \n  /** \n    * Returns the length of the longest heat wave found in temperatures, as described in \n    * part (b) \n    * Precondition: There is at least one heat wave in temperatures based on threshold. \n    */ \n  public int longestHeatWave(double threshold) \n  { /* to be implemented in part (b) */ } \n  \n  // There may be instance variables, constructors, and methods that are not shown. \n}",
        "isVisible": true,
        "tabOrder": 0
      }
    },
    "encrypted_exemplar_sources": "+D54jgkyj/cukSCcRDgC4atue3qrV4ZDFjIfMiSvH0H9KMDyxVBegCFG3bH2\nyojseByNCVaIspBj+RA+oq4K5DDMBer/dYuZ2MQa1W/ym98Wc1yH+1lmBBk4\nwdav5p9FyssYQA/Gzot63+jLdfaB93BdKxxgdbs+Xa8QshLqNTkKeT/dmHVu\nG+/DNhHhQqjBucvsom/L16T3qUGrbXOIsBzsU2SHJhzPR2oOefrh+BVYcdgp\nggOi4gxp3YrB/GEod+MiAgq19JIKHG+5JM/XMJrNAMA51hVtzR/a2x3JgUqO\n3cBRb8qSME6iRuW5Q+xYaNC9PiPaQ6JPLcnkJ39/6rxpwNjCwd/ahD7l7att\nemg5Deym9mjpcLV4hndHlPWSJNbne1vSBGZoy4kberRCTS5nq8UbijPIK0MP\nt0sPQ//xrRfxYt00X4SY+H8laoRuIPZgOIsl+ObdZxJhZuOkHn862jdisyDC\nKIepRlBYjtWNwULaIAs64l+j+aLA16dAaUeYS8zSGRJcRKzwAzTFjSeIJ6OL\nQhGLHAbnA0gEu8xjB+22blD8kZIOAz8eXRdCBiv3rDa5fHnVYXj9WCd6+PVW\nBSCukcUhIXTJkTzSY+9E6p8CJvnJU4+UkfVPBkzfzyNOPHCTciGNnq9eXkfU\nhFjvBbdf9qHohM1PwqRMs7idgexTWeVG/0shoVEL9ozAeH18W+U8J6RDjPmN\nFE9sS9YJ+NKE/FYHR7a3VSynpA7jCVpbvfID4vI2h5YjBPl0zRpzFBux0Vx5\nqIoJeNoD4afQYBHponJT6xjw7gdM9vbF1+A1ixXm0e8AaZXP1p9gXTE0dbwK\nDiir4ctaHCdWGp0p027Xm7dTCrDsJXuwHBW9LxuU4AkNf4NbUfp/fxUSOuHR\nBrtnQWXpUZz6P+6Qdm4uYUn/OpdaqlV6qtoatJRLPl2TZFhO2LUb+5dBVfp8\ne/zMJ+FPDos2+qB6Jv66GQTBp5ikhDEzYQdKLm55uyCAwAzLNDfa85PxLX6W\n/bhrjp1XQ50lpcIYuFFxYeA+SHTjIqB0NLBRUHqxlv8kLikvIRu1R5EW9KEX\np0EusGrrcGxd9oT80/4qI2yo7dARMam+XLxH0wTisv2EPmqmtgo/LecGbHBS\n6ktcHl3wyxTmoY6c4BegcNMEn+Zp7dBip5Q9AOPjp7MKb4JkdrygXpT1JDIY\nanVd9QvXVEWW/YtnC4EPtG+3AFAeycqYD9/MF/GisSy9hJ+NFzGKaKOic3rT\ntmJi7JEnBeBJrakwbDriQn07MU8p9kusvUXovymoERNughc3oPnimddOmhs0\nExYGCyd3kOkgWDSp00VAHGBcsYvV63B1402HUe3Re6FC3NuAa3qY6SQ7f8Qn\ns7uoOQztbs2fm36LBDBnVXMJFAsKGyGrx83ueDN2mdFaI6Zdc4DTkP4qMK68\n8PG1UDeljnGExVvy76CzDe4vbWAAdrrMAbLn6sZxqEo6+7huzees+sw56InS\nBO1FfsD37ZqJuZt4SaTSubV3aZRYgDgYKzGFdjKX0jx31wJKyWP1s3+2T5cL\nX0VbVhBRB9PsXsgSPw/2RWJesHGKVn7CyM2Eo6k034XZ67kPJYUzil2EhU0D\ng4LXPf/FeQ7biVYy2VOOXNNuNEfHWcok2mU81Syt+YhkQYP+GTm2oRpZF3Rc\naH9twHd29BwtRtBwz379iJ1h8Q+nJyMsagpIT/l3FpevLpTOuQAXDNCL9b89\nRXSJbd4HeZTJYmvurJw/RyBFZi0RoKFQyUYTj90P6GdajSZbCXISHvVMDPvH\n0zMwlPhep7AUuIurQ9LRqVIuTDG3s8NHbAVMquA5gSwIALCISjlXS3XaGn19\n/NhBDCbN4U85hCFTiuyz7f2SSIm7I3ipSvm1X3Lv5yOFZZWJvQ+LbqbAJ8Sp\nZa2myxAGz9XYOFYNJXzwAQDAztEwoWZKO5/hzC5f55l+4n85PqWr6atfe3+0\nlAxn/IKg7lZHID9vWqoHt0X4e6ew+8PHr+u/mAccpfbc0A0N9HQH1XxzoFYr\nsKRct3ha7RB1KCxx1Pw51nlyM/NmZ6uMjNufKIyu+0sF7lCvCI5CxHrC6L0Y\nzBPvcMMUmM9Xsw2jM7oBSlRWS2dRcIhcQDQLfFMOh/PTWoeCNFRmtDEVUwuD\n7RjKxgz/kza8+hFmUPz1Sxe+WAkL59FUkqhZ4gqdWiGNNb2wIdDrBZc/xoRi\nG/1674YI7s2t2V9sssARld7JhxNKokb+co4bkgn6bA==\n",
    "encrypted_validation": "z+QzBjvZWORabmh66Y8WHfIls8SSjUdvjTcrp0YazgVwPbQX3TDPt3onJp5f\nZXxMw1nPbJiF3ngRItmsVZfrHt8CGyZ0EcqEgnr4oQAIbaQ=\n"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-06-21 15:51:57 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 15:56:15 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 16:07:40 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 16:07:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 16:08:02 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"}]"
}]]></config>
</Javalab>
