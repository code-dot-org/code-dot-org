<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-08-23T20:32:19.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that draws the logos of basketball teams based on the number of championship wins they have.\r\n\r\n##In BasketballScene.java:\r\n\r\n1. Write the `createScene()`(#e7e8ea) method to draw each basketball team's logo at a random location in the scene. Traverse the `championships`(#e7e8ea) array and use multi-selection statements to check the number of championship wins and decide the size to draw the image.\r\n\r\n   * If the number of wins is greater than `10`(#e7e8ea), draw the corresponding team logo in the `logos`(#e7e8ea) array with a size of `150`(#e7e8ea).\r\n   \r\n   * Else if the number of wins is greater than or equal to `5`(#e7e8ea), draw the corresponding team logo in the `logos`(#e7e8ea) array with a size of `100`(#e7e8ea).\r\n   \r\n   * Otherwise, draw the corresponding team logo in the `logos`(#e7e8ea) array with a size of `50`(#e7e8ea).\r\n\r\n##In MyTheater.java:\r\n\r\n2. Call the `createScene()`(#e7e8ea) method with the array.\r\n\r\n3. Use `Theater.playScenes()`(#e7e8ea) to play the scene.\r\n\r\n::: details [**Show Me How**]\r\nA multi-selection statement uses the following syntax:\r\n  \r\n  ```\r\n  if (condition) {\r\n    // code to execute\r\n  }\r\n  else if (condition) {\r\n    // code to execute\r\n  }\r\n  else {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nYou can have more than one `else if`(#e7e8ea) if you have additional conditions you need to check.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"logos.txt\");\n    String[] logos = myFileReader.getStringData(30);\n\n    myFileReader.setFile(\"wins.txt\");\n    int[] wins = myFileReader.getIntData(50);\n\n    BasketballScene myScene = new BasketballScene(logos, wins);\n\n    // TO DO #2: Call the createScene() method.\n\n\n    // TO DO #3: Use Theater.playScenes() to play the scene.\n    \n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "BasketballScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the number of championship wins\n * for each basketball team\n */\npublic class BasketballScene extends Scene {\n\n  private String[] logos;             // The list of basketball team logos\n  private int[] championships;        // The list of championship wins\n\n  /*\n   * Constructor to create a BasketballScene with the\n   * specified arrays of logos and championship wins\n   */\n  public BasketballScene(String[] logos, int[] championships) {\n    this.logos = logos;\n    this.championships = championships;\n  }\n\n  /*\n   * Creates the scene by drawing each team logo based\n   * on the number of championship wins they have\n   */\n  public void createScene() {    \n    // TO DO #1: Draw each team logo image at random locations. Use the\n    // number of championship wins to inform the size of the image.\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "logos.txt": {
        "text": "bostonceltics.png\nbrooklynnets.png\nnewyorkknicks.png\nphiladelphia76ers.png\ntorontoraptors.png\nchicagobulls.png\nclevelandcavaliers.png\ndetroitpistons.png\nindianapacers.png\nmilwaukeebucks.png\natlantahawks.png\ncharlottehornets.png\nmiamiheat.png\norlandomagic.png\nwashingtonwizards.png\ndenvernuggets.png\nminnesotatimberwolves.png\nokcthunder.png\nportlandtrailblazers.png\nutahjazz.png\ngoldenstatewarriors.png\nlosangelesclippers.png\nlalakers.png\nphoenixsuns.png\nsacramentokings.png\ndallasmavericks.png\nhoustonrockets.png\nmemphisgrizzlies.png\nneworleanspelicans.png\nsanantoniospurs.png",
        "isVisible": true
      },
      "wins.txt": {
        "text": "17\n0\n2\n3\n1\n6\n1\n3\n0\n1\n1\n0\n3\n0\n1\n0\n0\n1\n1\n0\n6\n0\n16\n0\n1\n1\n2\n0\n0\n5",
        "isVisible": true
      }
    },
    "display_name": "NBA Teams",
    "bubble_choice_description": "Draw the logos for each NBA team based on the number of championship wins they have.",
    "thumbnail_url": "https://images.code.org/4c3552b00321d044c4c44408ddc5af8c-image-1650719208107.png",
    "starter_assets": {
      "bostonceltics.png": "8d0c4cbc-ad44-4fec-b5bb-ea75a2f11845.png",
      "brooklynnets.png": "4ed2f12b-25bb-4a1f-a1a6-de3088a6b146.png",
      "newyorkknicks.png": "973a488c-6506-49e4-b5db-0a1e6307783e.png",
      "philadelphia76ers.png": "b62ef4ce-20e5-4fd2-a0f8-267612e24c44.png",
      "torontoraptors.png": "201e2e9f-e591-4ab2-a109-371d1d080bb7.png",
      "chicagobulls.png": "9c45f74b-e082-4eb0-8d70-b6404302a567.png",
      "clevelandcavaliers.png": "0e990edc-33d4-44b7-9777-06bd84338265.png",
      "detroitpistons.png": "5467cc09-9161-4d50-bb27-570488cf97fe.png",
      "indianapacers.png": "fb42d121-fcdd-477c-9b32-9dcad075b3f8.png",
      "milwaukeebucks.png": "eed23b47-9443-463d-9a7a-95fc668860f1.png",
      "atlantahawks.png": "089bc0ba-0a70-44b4-a2a9-bf770714f94f.png",
      "charlottehornets.png": "7307b9a1-b9cb-4af1-bf4b-11b2f45074fd.png",
      "miamiheat.png": "4c8a15cd-0413-4c84-9ae7-5ae5f4af0434.png",
      "orlandomagic.png": "55a8642f-355b-4f35-8679-dcc2725869aa.png",
      "washingtonwizards.png": "7491cdfa-9f32-4b15-9ff4-c10953d35bf9.png",
      "denvernuggets.png": "3c713d8e-7e68-483e-855c-af30a287d90e.png",
      "minnesotatimberwolves.png": "8c54f077-9c64-4a63-b143-a740aecd24bd.png",
      "okcthunder.png": "19419a54-8649-48b8-8b21-536a523e548b.png",
      "portlandtrailblazers.png": "06937393-537f-4aa6-b4c4-f326baeec984.png",
      "utahjazz.png": "67b4e79a-aae9-4c3e-b1dd-498f85971a63.png",
      "goldenstatewarriors.png": "f06c5338-5b48-45a1-91fb-ccdd990a289f.png",
      "losangelesclippers.png": "9a53038a-651e-486e-bec0-324d68044fc5.png",
      "lalakers.png": "22e61a3c-bcde-4f80-b4e9-983511257d1d.png",
      "phoenixsuns.png": "65dee8d5-28c7-4479-a837-d457a947d738.png",
      "sacramentokings.png": "d5b6b861-8036-4f0e-a55a-cf35dc37fdbe.png",
      "dallasmavericks.png": "f98ff3e0-e9ba-48db-a38d-fa35b55f3844.png",
      "houstonrockets.png": "f7643790-2edb-4ffc-89a6-62c06a7a92b9.png",
      "memphisgrizzlies.png": "e5115728-8b77-42fb-848f-9beba94cec64.png",
      "neworleanspelicans.png": "34dd1e64-8e4a-4d2f-a3f3-9c895d807e48.png",
      "sanantoniospurs.png": "b90c5bbd-2602-4a9d-ac10-fd2d12da00db.png"
    },
    "encrypted_exemplar_sources": "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\n94ayQlVgr3P90n3Gc0E=\n",
    "name_suffix": "_pilot-2022"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:32:19.197+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L3b_2022\\\"\"],\"cloned_from\":\"CSA U4L10-L3b_2022\"}]"
}]]></config>
</Javalab>
