<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">User</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to store a user's friends on a social media platform.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">User</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Friend</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Friend</code> objects\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">UserRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">User</code> object.\r\n\r\n2. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code>.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Social Media",
    "bubble_choice_description": "Create a `User` class that contains an `ArrayList` to store a user's friends on a social media platform.",
    "thumbnail_url": "https://images.code.org/e4239a039e760c22f3cf469cea4b1824-add-user.png",
    "encrypted_validation": "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\nS3FocudZYf7tTZ6Qp+ohAjSYlQ==\n",
    "encrypted_exemplar_sources": "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\nzXqlsxEsrdeToSxpnwg+VUSCVIo=\n",
    "start_sources": {
      "User.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a User\n */\npublic class User {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Friend objects\n   * -----------------------------------------------------------------------------\n   */\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a constructor that initializes the list to an empty list\n   * -----------------------------------------------------------------------------\n   */\n  \n  public ArrayList<Friend> getFriends() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write an accessor method that returns the list of Friend objects\n     * -----------------------------------------------------------------------------\n     */\n\n    return null;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Friend.java": {
        "text": "/*\n * Represents a Friend\n */\npublic class Friend {\n  private String name;\n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    ArrayList<String> fieldsList = fieldsToList(Arrays.toString(classFields));\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    fieldsAsText = fieldsAsText.substring(1, fieldsAsText.length() - 1);\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      },
      "UserRunner.java": {
        "text": "public class UserRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a User object.\n     * -----------------------------------------------------------------------------\n     */\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      }
    }
  },
  "game_id": 68,
  "created_at": "2023-04-03T13:57:50.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-03T13:57:50.276+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-ArrayLists PBT_2023\\\"\"],\"cloned_from\":\"CSA U6L4-ArrayLists PBT_2023\"},{\"changed_at\":\"2023-04-03 13:57:51 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:33:53 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 19:21:40 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-02 18:11:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:12:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:14:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:14:10 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:15:18 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:16:16 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:16:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:17:31 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:18:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:18:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:18:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:20:33 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:25:28 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:27:57 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:28:13 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:28:20 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:28:34 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:28:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:28:55 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:41:16 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:42:44 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:43:08 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:43:16 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:43:41 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:43:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:43:51 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:44:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:44:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:44:59 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:45:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:45:33 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:45:54 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:46:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:46:22 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:46:30 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:49:19 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:49:23 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:50:12 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:50:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:50:37 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:50:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:50:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:51:15 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:51:21 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:51:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:51:29 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:51:44 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:51:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:52:01 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:52:49 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:52:54 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:52:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:53:03 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:53:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:53:27 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:53:30 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:54:00 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:54:05 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:54:48 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:54:56 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:55:09 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:55:28 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:55:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:55:48 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:55:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:58:11 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 18:58:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 19:01:26 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 19:01:36 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 19:02:35 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 19:02:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 19:03:31 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 19:03:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 19:03:45 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 19:06:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:49:02 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:49:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:49:43 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:49:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:50:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:50:18 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:50:30 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:14:06 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:14:35 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"}]"
}]]></config>
</Javalab>
