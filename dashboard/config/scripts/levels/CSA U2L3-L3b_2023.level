<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A hiker wants to keep track of the national parks they visit.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `NationalPark`(#e7e8ea) class to assign specific values to the `name`(#e7e8ea) and `area`(#e7e8ea) instance variables.\r\n\r\n✅ **TO DO #2:** In `ParkRunner.java`(#e7e8ea), instantiate a `NationalPark`(#e7e8ea) object using the parameterized constructor. \r\n\r\n✅ **TO DO #3:** Print the constructors and the values assigned to the instance variables for the `NationalPark`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printParkInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nNationalPark yellowstone = new NationalPark();\r\nyellowstone.printParkInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing a parameterized constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "ParkRunner.java": {
        "text": "public class ParkRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a NationalPark object using the parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "NationalPark.java": {
        "text": "/*\n * Represents a national park\n */\npublic class NationalPark {\n\n  private String name;     // The name of a national park\n  private int area;        // The area in acres of a national park\n\n  /*\n   * Sets the name to \"unknown\" and area to 100\n   */\n  public NationalPark() {\n    name = \"unknown\";\n    area = 100;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specific values to\n   * the name and area instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  /*\n   * Prints the name and area for the national park\n   */\n  public void printParkInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Area: \" + area);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "display_name": "National Parks",
    "bubble_choice_description": "A hiker wants to keep track of the national parks they visit.",
    "encrypted_exemplar_sources": "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\n9B9K2Jvmow5Hi093fQ==\n",
    "encrypted_examples": [

    ],
    "thumbnail_url": "https://images.code.org/5d0890086e735d8cd65312ea190e8da3-park.png",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-09T21:24:35.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:24:35.756+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L3a_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L3a_2023\"},{\"changed_at\":\"2022-11-09 21:24:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-11 23:58:04 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:02:34 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:17:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:17:13 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:19:54 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:33:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:45:47 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:48:15 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
