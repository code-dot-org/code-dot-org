<Javalab>
  <config><![CDATA[{
  "published": true,
  "game_id": 68,
  "created_at": "2023-06-20T13:40:08.000Z",
  "level_num": "custom",
  "user_id": 19026,
  "properties": {
    "encrypted": "false",
    "long_instructions": "##ArrayResizer FRQ\r\n\r\nThis question involves manipulating a two-dimensional array of integers. You will write two `static` methods of the `ArrayResizer` class, which is shown below. \r\n```\r\npublic class ArrayResizer \r\n{ \r\n\t/** Returns true if and only if every value in row r of array2D is non-zero. \r\n     * Precondition: r is a valid row index in array2D. \r\n     * Postcondition: array2D is unchanged. \r\n     */ \r\n    public static boolean isNonZeroRow(int[][] array2D, int r) \r\n    { /* to be implemented in part (a) */ } \r\n    \r\n    /** Returns the number of rows in array2D that contain all non-zero values. \r\n     * Postcondition: array2D is unchanged. \r\n     */ \r\n    public static int numNonZeroRows(int[][] array2D) \r\n    { /* implementation not shown */ } \r\n    \r\n    /** Returns a new, possibly smaller, two-dimensional array that contains only rows \r\n     * from array2D with no zeros, as described in part (b). \r\n     * Precondition: array2D contains at least one column and at least one row with no zeros. \r\n     * Postcondition: array2D is unchanged. \r\n     */ \r\n    public static int[][] resize(int[][] array2D) \r\n    { /* to be implemented in part (b) */ } \r\n}\r\n```\r\n\r\n__Part A)__ Write the method `isNonZeroRow`, which returns `true` if and only if all elements in row `r` of a two-dimensional array `array2D` are not equal to zero. \r\n\r\nFor example, consider the following statement, which initializes a two-dimensional array. \r\n```\r\nint[][] arr = {{2, 1, 0}, \r\n              {1, 3, 2}, \r\n              {0, 0, 0}, \r\n              {4, 5, 6}}; \r\n```\r\n\r\nSample calls to `isNonZeroRow` are shown below\r\n\r\n![](https://images.code.org/145af4851abbccff6b7ad6ba0fb9901e-image-1687368696316.31.32 PM.png)\r\n\r\nComplete the `isNonZeroRow` method.\r\n\r\n<br>\r\n\r\n\r\n__Part B)__ Write the method `resize`, which returns a new two-dimensional array containing only rows from `array2D` with all non-zero values. The elements in the new array should appear in the same order as the order in which they appeared in the original array. \r\n\r\nThe following code segment initializes a two-dimensional array and calls the `resize` method. \r\n\r\n```\r\nint[][] arr = {{2, 1, 0},\r\n\t\t\t   {1, 3, 2}, \r\n               {0, 0, 0}, \r\n               {4, 5, 6}}; \r\nint[][] smaller = ArrayResizer.resize(arr); \r\n```\r\n\r\nWhen the code segment completes, the following will be the contents of `smaller`. \r\n\r\n```\r\n{{1, 3, 2}, {4, 5, 6}} \r\n```\r\n\r\nA helper method, `numNonZeroRows`, has been provided for you. The method returns the number of rows in its two-dimensional array parameter that contain no zero values. \r\n\r\nComplete the `resize` method. Assume that `isNonZeroRow` works as specified, regardless of what you wrote in part (a). You must use `numNonZeroRows` and `isNonZeroRow` appropriately to receive full credit.\r\n",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "encrypted_validation": "Du1bt7vO3Q9LOnF4K4YLxURx46Po2MtNTioO5kuPXR1i/dKwi+4Bxfw5C1lg\nyAvQC2cBXP+YdXG/9B+Ve/A7tXVT+OvlU1Mbsam+DnxYTzI=\n",
    "start_sources": {
      "ArrayResizer.java": {
        "text": "public class ArrayResizer \n{ \n  /** Returns true if and only if every value in row r of array2D is non-zero. \n  * Precondition: r is a valid row index in array2D. \n  * Postcondition: array2D is unchanged. \n  */ \n  public static boolean isNonZeroRow(int[][] array2D, int r) \n  { /* to be implemented in part (a) */ }\n  \n  /** Returns the number of rows in array2D that contain all non-zero values. \n  * Postcondition: array2D is unchanged. \n  */ \n  public static int numNonZeroRows(int[][] array2D) \n  { /* implementation not shown */ } \n  \n  /** Returns a new, possibly smaller, two-dimensional array that contains only rows \n  * from array2D with no zeros, as described in part (b). \n  * Precondition: array2D contains at least one column and at least one row with no zeros. \n  * Postcondition: array2D is unchanged. \n  */ \n  public static int[][] resize(int[][] array2D) \n  { /* to be implemented in part (b) */ } }\n}",
        "isVisible": true,
        "tabOrder": 0
      }
    },
    "encrypted_exemplar_sources": "G3fccHCjUP4osh5kxXdn9b5S+I4gNgwwnsTlnvN5ociZDjnkPazonhYPdzLx\nf5yX3CpNspScOs8gUPgaDg4Xaf/G7hGRu1qIOnAWx1lQkM7/D4J7LAgPPdDp\n8JigVWoWprF5Z9GturzcmMh+YZwANBOfjJV+U5OjorK+w0qmzR/+AfMTjeIc\n/Q5zV22BQuhivoa7H9mzr5grMsLAgmy1nsjqjqERo+Bdt8Yh9APAGPqYuyAn\n7RKA5/tX2maM5xc2pWwigcrzGXuZXvr6Ivv+PaRZD0xlRWnj2ZsjtqAD7uPk\nQTgY2bzoTdAFwp7mRegeybKmqo+rEVIPsYLlt8SnY3NXxVrtYSBpo/aXehqv\nXxPeEw5FiPayImc9e3579gH0e7jyj5IwnyUADDXjf0uvKHfh60hbfSm8Bi5P\nxrtX0bY142ZSjrkrOI3BxxP+p0w+BVCHkpKvRMpiWzAlLNw6robPu5xm7cIE\n49cH272DCiHX3AN4dy6xGFMxrmqlDTF7KrzDER3vpj+yCje3FMHpZ4T/eapL\nf0dHABtU7wG+7m7LuNJkuMcJXFzDPHLblsFFoX5eOoWqVLhpD3TC8DNxtf7b\nPdxvtZL3nKKrPb8uRzDEJ7lgIe9fbn85KBacxsYy09gMsKogG9D4BbX7IzSq\nM6kmZqAdHJm1iuP8+KV64Xa3LwklBLxNEM4lnp9zwA340aVfE0idNbutofAh\nYBHfc5d07uiACskTfOT92lk+LgIPP44LhJj7Tnbe26dKSY6NPFkD7UuFXo21\na3CQ+bj5S2mzxic0HI1A7GzR5mFCE51SZGvfFbSGssgsge7YV6X5+9OSUuwV\ntQViPt0lnuCQ9ZHLbz5TPrgQOD0Ygv9UG7j5zX5sV0/F6e4+i5FGmMc1tS31\ndloraeKBGxcwDbuOV9zAl/5nkwEb2BqBug3ePoA4tIlRgn9wlpZPrReLhMOZ\nJfOY6LqiJCwm0grwdJ2Tk8MxI1s9+hYgEEDHt6/kUKcM457b9h0ny2rxOJ18\nli0bRCDNMe9Dpr4m0krecHubLDLg7WF9IemNrfi87zTUP9+niYL341YwtTnH\n5WdwyGRLDX8kN9u5DCWOQ6GsjSP3x3GsIhjytAI8l65MvTQuknTUQpCD9rVi\nGejVOqTLQ9ruvEuiO4kU1jgL3vKCEDzJyhcPp/XKOtQTH5OVxSSzxCg7Ts0g\nC87Dhzedxx+POqNZLdZHznTSR0AE18YVgntFA4W/NcoV1Ax0blEWE3QlM+DE\nJfduoTbDakZfkNpwovqSearjNePTDZTrn865/n74M1Zvzt2BROqLdnKYS6G+\nlhaGYjPcO9V+zKm5VV/8sFxDh5DwTRZIsWDE9+fUWdhYUvr12L8BJHGjGbjy\n/MmVEAhK+ej+TWq8fgxXxJ+jG6/zhN/Az8aYrXu5nzlYZVUIn3/n3RkANtKw\nkcPhVQQ18OMJSAxb6hSekC2w9PhE7TNVq5PrYqBwxbEKKmL3HeFgniragL9w\n86nPnwr5LitZh03gw5LBA1Fm28NXjfmR5vPKPiZHMtPiEIcQpgS8W8h5U9rt\nB4Pa4OBJ3hIxKmIil2uUn4IbW9PfEKYAfwgoGV1XfL6m5IPyHxfr5gKblL8D\nOXaepydmiMB6DzE2/lQpcOwK/F5ADOkOJ8k/HClhLKf+rRmJgU4CfOf+wvkV\nhvBwDNeq2KCmlJDh9C2CtMOu/pXxG0X8v+j2FgjE8d4o/u31Z2lez3fgMI0o\nW/vTL4DkeoE8Uvu0vJvbsAG74ktT5Rp73CMDlsFebd3A07mElcOFHwLetwYR\nraReq9xKpKmbfqCSG4C1/fDTdzmPmIrEjGlGN7erpVCRLtg5CwOyCeVWYjH8\nXbXLK5XFTQA0ILAf1bBpV8ol+2wWXTl7qC+FgKI=\n",
    "encrypted_examples": [

    ]
  },
  "audit_log": "[{\"changed_at\":\"2023-06-20 13:40:10 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 14:38:52 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 14:39:07 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 14:40:05 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 17:36:28 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 17:32:26 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"}]"
}]]></config>
</Javalab>
