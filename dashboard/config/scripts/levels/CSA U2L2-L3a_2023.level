<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A video game developer is planning a new game, and they have written a `Player`(#e7e8ea) class to represent a player in their game.**\r\n\r\n✅ **TO DO #1:** In the `Player`(#e7e8ea) class, write a no-argument constructor to assign default values to the instance variables:\r\n\r\n   * Assign a default name to the instance variable `name`(#e7e8ea), such as `\"new player\"`(#e7e8ea)\r\n\r\n   * Assign a default value to the instance variable `level`(#e7e8ea), such as `1`(#e7e8ea)\r\n\r\n✅ **TO DO #2:** In `GameRunner.java`(#e7e8ea), instantiate a `Player`(#e7e8ea) object.\r\n\r\n✅ **TO DO #3:** Print the constructor and the values assigned to the instance variables for the `Player`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printPlayerInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nPlayer hero = new Player();\r\nhero.printPlayerInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out **Help & Tips** tab ⬆️ for help with writing a no-argument constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Player Class",
    "bubble_choice_description": "A video game developer is planning a new game, and they have written a `Player` class to represent a player in their game.",
    "thumbnail_url": "https://images.code.org/21f69124180b97ebde9051134135b521-console.png",
    "start_sources": {
      "GameRunner.java": {
        "text": "public class GameRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Player object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject), and print the values assigned\n     * to the instance variables using the Player class printPlayerInfo() method.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Player.java": {
        "text": "/*\n * Represents a player in a game\n */\npublic class Player {\n\n  private String name;    // The name of a player\n  private int level;      // The level of a player\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the\n   * name and level instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n\n\n\n  \n\n  /*\n   * Prints the name and level of the player\n   */\n  public void printPlayerInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Level: \" + level);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\n"
  },
  "game_id": 68,
  "created_at": "2022-11-03T19:20:44.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:20:44.348+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L2_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L2_2023\"},{\"changed_at\":\"2022-11-03 19:20:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 20:58:35 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 21:16:19 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\",\"reference_links\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:38:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:41:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:41:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:41:59 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:15:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:15:21 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:16:23 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:17:53 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:24:13 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:24:56 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:25:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 21:36:43 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 14:29:12 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:08:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:08:18 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:08:40 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:08:40 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
