<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-01-12T17:54:05.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The <a href=\"https://charts.spotify.com/charts/view/regional-global-daily/2022-12-05\" target=\"_blank\">**Song Plays dataset**</a> includes the number of times a song was played on a streaming music service each day in a month. The number of times a song was played is stored in an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> array called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">songPlays</code>.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Song.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcAveragePlays()</code> method to calculate and return the average number of times the song was played on the streaming music service each day of the month.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">DataRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcAveragePlays()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with traversing a 1D array using a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loop.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The average is found by dividing the sum by the number of values. You already have a way to get the sum of the values in the 1D array <code style=\"background-color: #ececec; color: black; font-weight: bold;\">songPlays</code>!</p>\r\n        <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcTotalPlays()</code> method to get the sum and divide the result by the length of the 1D array to find the average.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ntotalPlays = calcTotalPlays()\r\naveragePlays = totalPlays / songPlays.length\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Song Plays",
    "bubble_choice_description": "The Song Plays dataset includes the number of times a song was played on a streaming music service each day in a month. Write the `calcAveragePlays()` method to calculate and return the **average** number of times the song was played on the streaming music service each day of the month.",
    "thumbnail_url": "https://images.code.org/69377ddb4e99a9a91d1b42391fa4bf20-music.png",
    "reference_links": [
      "/courses/csa-2023/guides/for-loops"
    ],
    "project_template_level_name": "CSA U3L5-ChoiceB_2023",
    "encrypted_validation": "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\nwBIP\n",
    "start_sources": {
      "DataRunner.java": {
        "text": "public class DataRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the FileReader.toIntArray() to read the dailyPlays.txt file and\n     * store the result in a 1D array. Instantiate a Song object with the 1D\n     * array, then call the calcTotalPlays() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the calcAveragePlays() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Song.java": {
        "text": "/*\n * Manages data about a song\n */\npublic class Song {\n\n  private String title;       // The title of the song\n  private int[] songPlays;    // The 1D array of the number of times a song was played\n\n  /*\n   * Sets title to the specified title of the song and initializes songPlays\n   * to the specified 1D array of the number of times a song was played\n   */\n  public Song(String title, int[] songPlays) {\n    this.title = title;\n    this.songPlays = songPlays;\n  }\n\n  /*\n   * Returns the title of the song\n   */\n  public String getTitle() {\n    return title;\n  }\n\n  /*\n   * Returns the number of plays for the day at the specified index\n   */\n  public String getSongInfo(int index) {\n    return songPlays[index] + \" plays\";\n  }\n\n  /*\n   * Returns the total number of times the song was played\n   */\n  public int calcTotalPlays() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Traverse songPlays to calculate and return the total number of times the\n     * song was played on the streaming music service.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    return -1;\n  }\n\n  /*\n   * Returns the average number of times the song was played each day\n   */\n  public int calcAveragePlays() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Calculate and return the average number of times the song was played.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    return -1;\n  }\n\n  /*\n   * Returns a String containing the number of plays the song had each day\n   */\n  public String toString() {\n    String result = title + \" Daily Plays\\n----------\\n\";\n\n    for (int index = 0; index < songPlays.length; index++) {\n      result += \"Day \" + (index + 1) + \": \" + songPlays[index] + \"\\n\";\n    }\n\n    return result;\n  }\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "dailyPlays.txt": {
        "text": "4750185\n5102574\n6149812\n5811600\n4506688\n4873139\n5009612\n5562741\n5799207\n7068846\n6882528\n5372271\n5364677\n5532812\n5901056\n6708201\n7723706\n6543891\n5942353\n6314185\n6903992\n8020508\n10905559\n21273357\n16216593\n4510287\n2037749\n1483957\n1224254\n1091757\n1500302",
        "isVisible": true,
        "tabOrder": 2
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "encrypted_exemplar_sources": "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\nNk/QIRmk8Q8xN63I1Q==\n"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-01-12T17:54:05.537+00:00\",\"changed\":[\"cloned from \\\"CSA U3L5-L4a_2023\\\"\"],\"cloned_from\":\"CSA U3L5-L4a_2023\"},{\"changed_at\":\"2023-01-12 17:54:07 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 00:00:27 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 01:34:47 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 01:46:27 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 01:46:51 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 02:03:20 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 02:19:14 +0000\",\"changed\":[\"encrypted_examples\",\"project_template_level_name\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 16:14:58 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 16:45:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 16:45:09 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 16:46:53 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 20:23:40 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
