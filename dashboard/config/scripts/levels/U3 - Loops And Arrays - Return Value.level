<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-11-12T21:35:44.000Z",
  "level_num": "custom",
  "user_id": 155,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "onEvent": null,
      "moveForward": null,
      "moveBackward": null,
      "move": null,
      "moveTo": null,
      "dot": null,
      "turnRight": null,
      "turnLeft": null,
      "turnTo": null,
      "arcRight": null,
      "arcLeft": null,
      "getX": null,
      "getY": null,
      "getDirection": null,
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "penRGB": null,
      "show": null,
      "hide": null,
      "speed": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRandom": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "console.log": null,
      "length": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null
    },
    "edit_code": true,
    "embed": "false",
    "instructions": "Use constrain in this simple app to keep the turtle from driving off the screen.  (Click to see full instructions)",
    "markdown_instructions": "# Use a function that returns a value in an app\r\n\r\nWe create functions to **contain blocks of code that will be used multiple times within our program**. The same is true with functions that return values. Let's see an example of how we might use one of the functions we've written.\r\n\r\nThis exercise comes with starter code that creates a **simple turtle driver app**. The x and y location of the turtle are stored in the variables `xloc` and `yloc`. An event handler is used to update these values when the arrow keys are pressed, and then a separate `updateTurtle` function is called to draw the turtle on the screen.\r\n\r\nCurrently the turtle can drive off the screen. If we are clever about how we use our `constrain` function, however, we can prevent this from happening.\r\n\r\n# Do This\r\n\r\n* **Starter code** is provided which allows the turtle to move. Additionally a **working version of `constrain`** is provided.\r\n* **Use the `constrain` function** within the `updateTurtle` function to prevent the values of `xloc` and `yloc` from going outside the size of the screen. Recall the screen is **320 by 450 pixels**.\r\n* **Run your app** and confirm the turtle cannot leave the screen.",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "slider_speed": "1",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "true",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "false",
    "start_blocks": "penUp();\r\nvar xloc = 160;\r\nvar yloc = 240;\r\n\r\nonEvent(\"screen1\", \"keydown\", function(event) {\r\n  if(event.key == \"Left\"){\r\n    xloc = xloc - 10;\r\n  } else if (event.key == \"Right\"){\r\n    xloc = xloc + 10;\r\n  } else if (event.key == \"Up\"){\r\n    yloc = yloc - 10;\r\n  } else if (event.key == \"Down\"){\r\n    yloc = yloc + 10;\r\n  }\r\n  \r\n  updateTurtle();\r\n});\r\n\r\nfunction updateTurtle(){\r\n  moveTo(xloc, yloc);\r\n}\r\n\r\nfunction constrain(input, low, high){\r\n  var output;\r\n  if(input < low){\r\n    output = low;\r\n  } else if (input > high){\r\n    output = high;\r\n  } else {\r\n    output = input;\r\n  }\r\n  return output;\r\n}"
  }
}]]></config>
  <blocks/>
</Applab>