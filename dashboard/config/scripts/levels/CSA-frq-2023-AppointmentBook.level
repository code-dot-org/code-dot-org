<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-06-21T13:58:58.000Z",
  "level_num": "custom",
  "user_id": 19026,
  "properties": {
    "encrypted": "false",
    "long_instructions": "##AppointmentBook FRQ\r\n\r\nThis question involves the `AppointmentBook` class, which provides methods for students to schedule appointments with their teacher. Appointments can be scheduled during one of eight class periods during the school day, numbered 1 through 8. A requested appointment has a duration, which is the number of minutes the appointment will last. The 60 minutes within a period are numbered 0 through 59. In order for an appointment to be scheduled, the teacher must have a block of consecutive, available minutes that contains at least the requested number of minutes in a requested period. Scheduled appointments must start and end within the same period.\r\n\r\nThe `AppointmentBook` class contains two helper methods, `isMinuteFree` and `reserveBlock`. You will write two additional methods of the `AppointmentBook` class.\r\n\r\n__Part A)__ Write the `findFreeBlock` method, which searches `period` for the first block of free minutes that is `duration` minutes long. If such a block is found, `findFreeBlock` returns the first minute in the block. Otherwise, `findFreeBlock` returns `-1`. The `findFreeBlock` method uses the helper method `isMinuteFree`, which returns `true` if a particular minute is available to be included in a new appointment and returns `false` if the minute is unavailable. \r\n\r\nConsider the following list of unavailable and available minutes in period 2. \r\n\r\n![](https://images.code.org/36e52075d0c9637b356a30a1266925dd-image-1687355918138.58.30 AM.png)\r\n\r\nThe method call `findFreeBlock(2, 15)` would return `30` to indicate that a 15-minute block starting with minute `30` is available. No steps should be taken as a result of the call to `findFreeBlock` to mark those 15 minutes as unavailable. \r\n\r\nThe method call `findFreeBlock(2, 9)` would also return `30`. Whenever there are multiple blocks that satisfy the requirement, the earliest starting minute is returned. \r\n\r\nThe method call `findFreeBlock(2, 20)` would return `-1`, since no 20-minute block of available minutes exists in period 2. \r\n\r\nComplete method `findFreeBlock`. You must use `isMinuteFree` appropriately in order to receive full credit.\r\n\r\n<br>\r\n\r\n\r\n__Part B)__ Write the `makeAppointment` method, which searches the periods from `startPeriod` to `endPeriod`, inclusive, for the earliest block of `duration` available minutes in the lowest-numbered period. If such a block is found, the `makeAppointment` method calls the helper method `reserveBlock` to mark the minutes in the block as unavailable and returns `true`. If no such block is found, the `makeAppointment` method returns `false`. \r\n\r\nConsider the following list of unavailable and available minutes in periods 2, 3, and 4 and three successive calls to `makeAppointment`.\r\n\r\n![](https://images.code.org/d6367e5f3ee84f54e6989c1c9628db08-image-1687355868949.57.38 AM.png)\r\n\r\nThe method call `makeAppointment(2, 4, 22)` returns `true` and results in the minutes 5 through 26, inclusive, in period 4 being marked as unavailable. \r\n\r\nThe method call `makeAppointment(3, 4, 3)` returns `true` and results in the minutes 0 through 2, inclusive, in period 3 being marked as unavailable. \r\n\r\nThe method call `makeAppointment(2, 4, 30)` returns `false`, since there is no block of 30 available minutes in periods 2, 3, or 4. \r\n\r\nThe following shows the updated list of unavailable and available minutes in periods 2, 3, and 4 after the three example method calls are complete.\r\n\r\n![](https://images.code.org/a45bca2d9d080f3fcd2a5b83405bbff4-image-1687355820943.56.53 AM.png)\r\n\r\nComplete method `makeAppointment`. Assume that `findFreeBlock` works as intended, regardless of what you wrote in part (a). You must use `findFreeBlock` and `reserveBlock` appropriately in order to receive full credit.\r\n\r\n",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "encrypted_exemplar_sources": "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\n",
    "start_sources": {
      "AppointmentBook.java": {
        "text": "public class AppointmentBook \n{ \n  /** \n    * Returns true if minute in period is available for an appointment and returns \n    * false otherwise \n    * Preconditions: 1 <= period <= 8; 0 <= minute <= 59 \n    */ \n  private boolean isMinuteFree(int period, int minute) \n  { /* implementation not shown */ } \n  \n  /** \n    * Marks the block of minutes that starts at startMinute in period and \n    * is duration minutes long as reserved for an appointment \n    * Preconditions: 1 <= period <= 8; 0 <= startMinute <= 59; \n    * 1 <= duration <= 60 \n    */ \n  private void reserveBlock(int period, int startMinute, int duration) \n  { /* implementation not shown */ } \n  \n  /** \n    * Searches for the first block of duration free minutes during period, as described in \n    * part (a). Returns the first minute in the block if such a block is found or returns -1 if no \n    * such block is found. * Preconditions: 1 <= period <= 8; 1 <= duration <= 60 \n    */ \n  public int findFreeBlock(int period, int duration)\n  {  /* to be implemented in part (a) */  }\n  \n  /** \n    * Searches periods from startPeriod to endPeriod, inclusive, for a block \n    * of duration free minutes, as described in part (b). If such a block is found, \n    * calls reserveBlock to reserve the block of minutes and returns true; otherwise \n    * returns false. \n    * Preconditions: 1 <= startPeriod <= endPeriod <= 8; 1 <= duration <= 60 \n    */ \n  public boolean makeAppointment(int startPeriod, int endPeriod, int duration)\n  {  /* to be implemented in part (b) */  }\n  \n  // There may be instance variables, constructors, and methods that are not shown. \n}",
        "isVisible": true,
        "tabOrder": 0
      }
    },
    "encrypted_validation": "5merO//Q96gqJLWU5++fiZvqKZ64EofUOATbQRWV5xfB0YOgq/zO2lOCqLad\nYA1PyTrJwaXkjfJ/RqNmT/Lh9A2HWkX6LGk72qQwUmzsiBw=\n"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-06-21 13:59:02 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 13:59:30 +0000\",\"changed\":[\"encrypted_examples\",\"long_instructions\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 14:08:24 +0000\",\"changed\":[\"encrypted_examples\",\"long_instructions\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 14:22:02 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 14:24:25 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 14:24:34 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 14:24:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 14:25:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"}]"
}]]></config>
</Javalab>
