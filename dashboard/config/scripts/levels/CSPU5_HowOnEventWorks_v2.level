<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2016-10-14T14:00:53.000Z",
  "properties": {
    "href": "path/to/html/in/asset/folder",
    "options": {
      "skip_dialog": true
    },
    "title": "title",
    "content1": "description here",
    "markdown": "# Event-driven programming\n\nApps work by adding code to respond to certain \"events\" that occur in a program.\n\nExamples of events:\n* Clicking a button\n* Moving the mouse\n* typing a key on the keyboard\n\nIn order for your button to do more than just sit there all pretty-like you need to add an **Event Handler**.  In AppLab you do this with the onEvent block.\n\nonEvent is the *starting point* any code to run.\n\nonEvent specifies 3 things.  Here they are in plain english:\n\t* Run some code (a function)..\n    * when a particular kind of event happens...\n    * on a particular element of the user interface.\n    \nHowever, the onEvent code block actually requires you to specify these things in reverse order.  See diagram.\n\n\t* for **some** UI element\n    * when **some** event occurs\n    * run **some** function\n\n## BAKER NOTE: modify this vvv into a diagram and worked example.\n\n# How Do Events Work?\nEvent-driven apps are made up of elements that can trigger events (such as buttons) and pieces of code called **event handlers**. Event handlers are commands that \"watch\" for certain events to occur in your program, and then run some function when an event occurs.\n\n<img src=\"https://images.code.org/96abf7d54a0be221a8b8eda80c696bf4-image-1444142010683.png\" style=\"float: right; width: 250px\"> `onEvent(id, type, callback)` command creates an **event handler** in your app. The three parameters are:\n\n* **id** - the ID of the element in the app you want to \"watch\", one that might trigger an event\n* **type** - the type of event to \"watch\" for (e.g. a click, a key press, a mousemove, etc.)\n* **callback** - a **callback function** is only different from a normal function in that you don't call it directly from your code. Instead it gets *called by the system at the time the specified event occurs*. You put the code into this function just like you would any other, and it will run when the event occurs.\n\nOnce created, the event handler will always \"watch\" that element as long as it exists. \n\n# Do This:\nThe program you are going to see has a button with a new ID but no event handler that is attached to it.\n\n* **Add an `onEvent` handler** that watches for a click on the button and *moves the turtle forward* when it happens. \n* **Run the program** to make sure it works.\n* **Try changing the event type** to something like \"mouseover\" and see what happens.  Not all event types will work with buttons but it's fun\nto play a little bit.\n\nOnce you've got the program responding to some event, move on to the next problem.\n",
    "type": "External",
    "encrypted": "false",
    "published": "true",
    "concept_ids": [
      ""
    ],
    "level_concept_difficulty_attributes": {
      "id": "",
      "sequencing": "",
      "debugging": "",
      "repeat_loops": "",
      "repeat_until_while": "",
      "for_loops": "",
      "events": "",
      "variables": "",
      "functions": "",
      "functions_with_params": "",
      "conditionals": ""
    }
  },
  "published": true
}]]></config>
</External>
