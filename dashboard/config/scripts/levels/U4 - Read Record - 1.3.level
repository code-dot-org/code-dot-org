<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-12-09T19:06:58.000Z",
  "level_num": "custom",
  "user_id": 155,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "readRecords": {
        "params": [
          "\"myTable\"",
          "{}",
          "function(records){\n\n}"
        ],
        "paletteParams": [
          "table",
          "terms",
          "callback"
        ]
      },
      "console.log": null
    },
    "edit_code": true,
    "embed": "false",
    "instructions": "Add a console.log command inside the callback function. (Click to see full instructions)\r\n",
    "markdown_instructions": "# Asynchronous Commands\r\nAs you just saw **the callback function for a `readRecords` command does not run immediately**. In fact, **commands outside of the callback function will run**. \r\n\r\nWe say that the callback function of `readRecords` is **asynchronous** [\"A-sing-kro-nus\"] because the rest of your program will not wait for the response from the database - it will continue executing, and eventually the callback function will be triggered once the data has arrived from the database.  \r\n\r\n<details><summary><strong>Terminology: Synchronous v. Asynchronous</strong> [Click to expand]</summary>\r\n<P>\r\n\"Asynchronous\" is the opposite of \"synchronous\".  In programming, we talk about whether <strong>functions are synchronous or asynchronous</strong>.\r\n</P>\r\n<p>\r\n<strong>Synchronous</strong> (or \"in sync\") -- things happening at the same time.  \"The dance moves were in sync with the music.\" \r\n<li>When functions are \"synchronous\", if function A calls or triggers function B, function B will execute immediately, at the moment it's called, and A will wait for B to complete before continuing on.\r\n</li>\r\n</p>\r\n<p>\r\n<strong>Asynchronous</strong> (or \"NOT in sync\") -- things happening at different times or not in a prescribed sequence. \r\n<li>When functions are asynchronous, if function A calls are triggers function B, function B will execute at some <strong>later time in the future.</strong> </li>\r\n<li>Asynchronous functions are used especially when the internet is involved because sending a request for data and getting it back can take time.  The setup is common - send a request for data, and as part of the request specify what <i>should happen when the data eventually comes back.  This is what the callback function is for.</i></li>\r\n</p>\r\n</details>\r\n\r\n<br>\r\nThis allows your program to keep running while you wait for responses from the database, but **asynchronous commands can make it challenging to keep track of the order your program will run in**.\r\n\r\nYou typically think of programs waiting for one command to finish before running the next. This style of programming is referred to as **synchronous** and is generally much easier to read and write.\r\n\r\n# Callback Functions are Like Event Handlers\r\n\r\n**Event handlers** for UI elements can be triggered at any time. You cannot know ahead of time when the event will be triggered **so all the code that should run when the event is triggered needs to go in the event handler**.\r\n\r\n![](https://images.code.org/a6303ef07bf90ddf22f77950dd29a971-image-1449691163707.gif)\r\n\r\nThe same thing is true with the callback function for data commands. **If a piece of code should run after a response has been received from the database it must be placed in the callback function**.\r\n\r\n![](https://images.code.org/7908fa39f133ec1ce374f8e9943c5257-image-1449692589680.gif)\r\n\r\n**Tip: treat the callback function of a data command like an event handler. It gets triggered when you receive the response from the database**\r\n\r\n# Do This\r\n\r\n**Your code from the previous exercise** is provided.\r\n\r\n* **Move your second `console.log` command inside the callback function**\r\n* **Run the program** and pay close attention to **the order in which the commands run**. You can **check the Debug Console** to see which `console.log` command ran first.",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "data_tables": "\"myTable\" :[\r\n  {\r\n    \"name\": \"New York City\",\r\n    \"state\": \"New York\"\r\n    \"population\": 9,000,000\r\n  },\r\n  {\r\n     \"name\": \"Los Angeles\",\r\n    \"state\": \"California\"\r\n    \"population\": 4,000,000\r\n  },\r\n  {\r\n     \"name\": \"Chicago\",\r\n    \"state\": \"Illinios\"\r\n    \"population\": 3,000,000\r\n  }\r\n  {\r\n     \"name\": \"Houston\",\r\n    \"state\": \"Texas\"\r\n    \"population\": 2,000,000\r\n  }\r\n]",
    "hide_view_data_button": "false",
    "debugger_disabled": "false",
    "slider_speed": "0",
    "project_template_level_name": "U4 - Read Record - part 1 - template"
  }
}]]></config>
  <blocks/>
</Applab>