<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**An electronics store sells a variety of new and used electronics.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Electronic`(#e7e8ea) class to assign specific values to the `name`(#e7e8ea), `price`(#e7e8ea), and `isRefurbished`(#e7e8ea) instance variables.\r\n\r\n✅ **TO DO #2:** Write a parameterized constructor in the `Electronic`(#e7e8ea) class to assign specific values to the `name`(#e7e8ea) and `price`(#e7e8ea) instance variables and a default value to the `isRefurbished`(#e7e8ea) instance variable.\r\n\r\n✅ **TO DO #2:** In `StoreRunner.java`(#e7e8ea), instantiate `Electronic`(#e7e8ea) objects using each parameterized constructor. \r\n\r\n✅ **TO DO #3:** Print the constructors and the values assigned to the instance variables for the `Electronic`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printElectronicInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nElectronic phone = new Electronic();\r\nphone.printElectronicInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing a parameterized constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "StoreRunner.java": {
        "text": "public class StoreRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Electronic object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Electronic.java": {
        "text": "/*\n * Represents an electronic at a store\n */\npublic class Electronic {\n\n  private String name;             // The name of an electronic\n  private double price;            // The price of an electronic\n  private boolean isRefurbished;   // Whether or not an electronic is refurbished\n  \n  /*\n   * Sets the name to \"unknown\", price to 50.99\n   * and isRefurbished to false\n   */\n  public Electronic() {\n    name = \"unknown\";\n    price = 50.99;\n    isRefurbished = false;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specific values to\n   * the name, price, and isRefurbished instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign a specific value to the name\n   * and price instance variables and a default value to isRefurbished.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Prints the name, price, and whether\n   * or not the electronic is refurbished\n   */\n  public void printElectronicInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Price: \" + price);\n    System.out.println(\"Refurbished? \" + isRefurbished);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Electronics",
    "bubble_choice_description": "An electronics store sells a variety of new and used electronics.",
    "thumbnail_url": "https://images.code.org/9e5af0aef12d976f207f2434757ce977-desktop.png",
    "encrypted_exemplar_sources": "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\nNuql/wVsfW3K9jLNNMKehAc=\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-09T21:26:21.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:26:21.704+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L4c_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L4c_2023\"},{\"changed_at\":\"2022-11-09 21:26:23 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:47:14 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:18:00 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:56:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 02:01:24 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 02:01:41 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
