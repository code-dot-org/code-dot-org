<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "An electronics store sells a variety of new and used electronics.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Electronic</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">price</code>, and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">isRefurbished</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Electronic</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">price</code> instance variables and a default value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">isRefurbished</code> instance variable.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">StoreRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Electronic</code> objects using each parameterized constructor. \r\n\r\n‚úÖ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Electronic</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>\r\n        Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getPrice()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Electronic</code> class to get the current values assigned to the instance variables. For example:</p>\r\n                <pre style=\"background-color: #333333; color: white;\">\r\nElectronic phone = new Electronic();\r\nSystem.out.println(\"Name: \" + phone.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Electronics",
    "bubble_choice_description": "An electronics store sells a variety of new and used electronics.",
    "thumbnail_url": "https://images.code.org/9e5af0aef12d976f207f2434757ce977-desktop.png",
    "encrypted_exemplar_sources": "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\nazkmou+nVKBK28fDJ2SPA/u26Qw2VUku0silceRLN6pVGIxxRPFliTWt+BmR\nUsyBmG8W6sx4SafGNZnPQSyInM+OWDbrFsIPph4M84z2Gv3oL4uuel4WJmWQ\n92jfZZzML/G7UaruXURldacxnu7582reTAl74iWi93a37Yb8FoO/ElSm6XbL\nr1xT1//Q0eh1cDUiTSwRXOMOmpZjELQ+oFfepSBT5/uJ8nD62Xwx0h4wMD30\nTx0G3PVgLErZtAjBeO7JyU8Ube3ECVRLLlA5ENcUqohvyHj8wuTfkg9xTJ++\n4LU60eHwmsMbc+MDWnr7gLiuNzm0HH4ttMn6mO9720F0lK39dbv6z3fCmFSf\ndj40qykGMI57hR0JIoYOYsb5QP1hoZm+YrLV/yZaLf9SIYJPIfVVVJCNONA6\nzo4nYiOWz92/0O58yJFG6X9DdGULS40vtPJkEA8ere6E1CzAZUEOchebOb8Y\nx5Gv4STnqdNafgaeKYlf0IDOhM/4NK15mjIC/tBa7MxhlU9/LxkAvixLRRWG\nWveNzJsCtcz+49AZ0U5FVjxjcxfepVggxANGFD3Mf4xja85qI3iuOHbY/tur\n2FKjA/AJXXsKRkfBAdBqYOs1Y51GxvOVrzHM8A7Itv1evkjuVxW/6YMIsiP/\nWoGt0rCaJJcswjn/Nyx5omrQmH8I+t73a5aSq13A2f27G5CrIVfDcb7g12yA\nd5tKjH+819vKW51CxDiJWmNhfO0F+Au57xWOA9DXpz2J7KinrpLmTTXYpg3o\nBJpevydPgi17i/qzLAbc670jZgss6W5Nvvqt90zJtuF3HsQXUoRErScvod7w\nQ78gdRieZzo4LeAjFQYCgVUQ7C81PmvWF0rK/nNQHkFD6Gtbq8Wdwsk1OMnZ\nJ/tNWcfwgJgtJp+5zMg4K01bXWPM7Fdu2Wz+cEFAWLde8JA21eS97+xLcWeW\nIZPAg5YX+jGqlsofg7IcJ4IimDP8m0owbsmr5QRhpPDKFgs1kGaVnhrtZq+Q\noT7dHonL5BzN61QOmpYkLvLcQu93BZiOV8sXhAkCvM7J0CbhwQY5dC8j++TQ\nfblmd614HeTctqhH1IIiarlLIH+tU9ejEWz3I6QW7Ey640P5ioEhE1bsZH1M\nuhZeVAQ+jMed6OPCN2HcRw1cbE17dupOLw==\n",
    "encrypted_validation": "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\nyZkadeAB71muMTpynoxg9RA3gOU=\n",
    "start_sources": {
      "StoreRunner.java": {
        "text": "public class StoreRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Electronic object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Electronic.java": {
        "text": "/*\n * Represents an electronic at a store\n */\npublic class Electronic {\n\n  private String name;             // The name of an electronic\n  private double price;            // The price of an electronic\n  private boolean isRefurbished;   // Whether or not an electronic is refurbished\n  \n  /*\n   * Sets the name to \"unknown\", price to 50.99\n   * and isRefurbished to false\n   */\n  public Electronic() {\n    name = \"unknown\";\n    price = 50.99;\n    isRefurbished = false;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the name, price, and isRefurbished instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign a specific value to the name\n   * and price instance variables and a default value to isRefurbished.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to price\n   */\n  public double getPrice() {\n    return price;\n  }\n\n  /*\n   * Returns the current value assigned to isRefurbished\n   */\n  public boolean getIsRefurbished() {\n    return isRefurbished;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "video_key": "csa_overloaded_constructors",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-09T21:26:21.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:26:21.704+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L4c_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L4c_2023\"},{\"changed_at\":\"2022-11-09 21:26:23 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:47:14 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:18:00 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:56:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 02:01:24 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 02:01:41 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-17 02:30:48 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:56:30 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:43:43 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:58:24 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:59:27 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:37:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:59:05 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:04:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:04:41 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:04:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-02-02 14:28:38 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-14 18:31:56 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
