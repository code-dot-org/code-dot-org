<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "The `SATScene`(#e7e8ea) class creates a visualization of the number of SAT scores in the following ranges:\r\n\r\n* Top Scores\r\n\r\n* Competitive Scores\r\n\r\n* Above Average Scores\r\n\r\n* Below Average Scores\r\n\r\nThe `SATScene`(#e7e8ea) class has instance variables for each range. The `analyzeData`(#e7e8ea) method counts the number of scores in the `satScores`(#e7e8ea) array that fall within each range. The `createScene`(#e7e8ea) method draws circles using these counts to represent the number of scores in each range.\r\n\r\n##In SATScene.java:\r\n\r\n1. Write the `analyzeData()`(#e7e8ea) method by traversing the `satScores`(#e7e8ea) array.\r\n\r\n   * If the value is less than or equal to `1600`(#e7e8ea) and greater than or equal to `1340`(#e7e8ea), add `1`(#e7e8ea) to `topScores`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1320`(#e7e8ea) and greater than or equal to `1200`(#e7e8ea), add `1`(#e7e8ea) to `competitive`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1180`(#e7e8ea) and greater than or equal to `1030`(#e7e8ea), add `1`(#e7e8ea) to `aboveAverage`(#e7e8ea).\r\n   \r\n   * If the value is less than or equal to `1010`(#e7e8ea) and greater than or equal to `400`(#e7e8ea), add `1`(#e7e8ea) to `belowAverage`(#e7e8ea).\r\n\r\n2. Write the `createScene()`(#e7e8ea) method by drawing different colored circles for each range. Use the instance variables `topScores`(#e7e8ea), `competitive`(#e7e8ea), `aboveAverage`(#e7e8ea), and `belowAverage`(#e7e8ea) for the width and height of the circles.\r\n\r\n![](https://images.code.org/3b76d3f7d3eabfc90caaf653c78b6b92-image-1650563872945.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "SAT Scores",
    "bubble_choice_description": "Use nested if statements to analyze SAT score ranges and draw circles to represent the number of scores in each range.",
    "thumbnail_url": "https://images.code.org/3b76d3f7d3eabfc90caaf653c78b6b92-image-1650563872945.png",
    "encrypted_exemplar_sources": "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\n",
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "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\nxWDmeTn7k/s5Cf4kYrmg\n",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"satscores.txt\");\n    int[] scores = myFileReader.getIntData(181);\n\n    SATScene myScene = new SATScene(scores);\n    \n    myScene.analyzeData();\n    myScene.createScene();\n\n    Theater.playScenes(myScene);\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "SATScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Represents a scene that illustrates SAT score ranges\n */\npublic class SATScene extends Scene {\n\n  private int[] satScores;    // The list of SAT scores\n  private int topScores;      // The number of SAT scores in the top range (1340-1600)\n  private int competitive;    // The number of SAT scores in the competitive range (1200-1320)\n  private int aboveAverage;   // The number of SAT scores in the above average range (1030-1180)\n  private int belowAverage;   // The number of SAT scores in the below average range (400-1010)\n\n  /*\n   * Constructor to create an SATScene with the specified array\n   * of SAT scores and sets the counts for each range to 0\n   */\n  public SATScene(int[] satScores) {\n    this.satScores = satScores;\n    \n    topScores = 0;\n    competitive = 0;\n    aboveAverage = 0;\n    belowAverage = 0;\n  }\n\n  /*\n   * Returns the current value of topScores\n   */\n  public int getTopScores() {\n    return topScores;\n  }\n\n  /*\n   * Returns the current value of competitive\n   */\n  public int getCompetitive() {\n    return competitive;\n  }\n\n  /*\n   * Returns the current value of aboveAverage\n   */\n  public int getAboveAverage() {\n    return aboveAverage;\n  }\n\n  /*\n   * Returns the current value of belowAverage\n   */\n  public int getBelowAverage() {\n    return belowAverage;\n  }\n\n  /*\n   * Analyzes the values in the satScores array to count the\n   * number of scores in each range\n   */\n  public void analyzeData() {\n    // TO DO #1: Traverse the satScores array and use nested\n    // if statements to count the number of scores in each range.\n    \n\n    \n  }\n\n  /*\n   * Creates the scene by drawing circles to illustrate\n   * the number of SAT scores in each range\n   */\n  public void createScene() {\n    // TO DO #2: Draw different colored circles in the scene using the number\n    // of scores for each range as the width and height of each circle.\n    \n\n    \n  }\n}",
        "isVisible": true
      },
      "satscores.txt": {
        "text": "1600\n1593\n1587\n1580\n1573\n1567\n1560\n1553\n1547\n1540\n1533\n1527\n1520\n1513\n1507\n1500\n1493\n1487\n1480\n1473\n1467\n1460\n1453\n1447\n1440\n1433\n1427\n1420\n1413\n1407\n1400\n1393\n1387\n1380\n1373\n1367\n1360\n1353\n1347\n1340\n1333\n1327\n1320\n1313\n1307\n1300\n1293\n1287\n1280\n1273\n1267\n1260\n1253\n1247\n1240\n1233\n1227\n1220\n1213\n1207\n1200\n1193\n1187\n1180\n1173\n1167\n1160\n1153\n1147\n1140\n1133\n1127\n1120\n1113\n1107\n1100\n1093\n1087\n1080\n1073\n1067\n1060\n1053\n1047\n1040\n1033\n1027\n1020\n1013\n1007\n1000\n993\n987\n980\n973\n967\n960\n953\n947\n940\n933\n927\n920\n913\n907\n900\n893\n887\n880\n873\n867\n860\n853\n847\n840\n833\n827\n820\n813\n807\n800\n793\n787\n780\n773\n767\n760\n753\n747\n740\n733\n727\n720\n713\n707\n700\n693\n687\n680\n673\n667\n660\n653\n647\n640\n633\n627\n620\n613\n607\n600\n593\n587\n580\n573\n567\n560\n553\n547\n540\n533\n527\n520\n513\n507\n500\n493\n487\n480\n473\n467\n460\n453\n447\n440\n433\n427\n420\n413\n407\n400",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-08-23T20:31:58.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:31:58.763+00:00\",\"changed\":[\"cloned from \\\"CSA U4L3-L3d_2022\\\"\"],\"cloned_from\":\"CSA U4L3-L3d_2022\"},{\"changed_at\":\"2022-09-20 22:29:10 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:04:18 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:15:00 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:15:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:23:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:25:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:26:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:27:01 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:28:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:30:47 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:36:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:37:12 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:37:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:37:56 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:38:10 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:38:22 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:39:21 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:39:49 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:40:15 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:41:32 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:41:56 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:42:04 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:42:56 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:44:50 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:46:34 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:48:57 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:49:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 00:49:22 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
