<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Unit 6 Lesson 9 version of `TextProcessor.java`(#e7e8ea) and `FileReader.java`(#e7e8ea)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "serialized_maze": [
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ]
    ],
    "start_sources": {
      "TextProcessor.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Analyzes and processes text\n */\npublic class TextProcessor {\n\n  private String filename;              // The file containing the text\n  private ArrayList<String> textList;   // The list of text from the file\n\n  /*\n   * Constructor to create a TextProcessor with the specified filename\n   */\n  public TextProcessor(String filename) {\n    this.filename = filename;\n    textList = FileReader.getStringData(filename);\n  }\n\n  /*\n   * Changes the file to analyze and process and updates the textList\n   */\n  public void changeFile(String filename) {\n    this.filename = filename;\n    textList = FileReader.getStringData(filename);\n  }\n\n  /*\n   * Changes the textList to the newTextList\n   */\n  public void setTextList(ArrayList<String> newTextList) {\n    textList = newTextList;\n  }\n\n  /*\n   * Finds and removes all occurrences of each stop word from textList\n   */\n  public void removeStopWords(ArrayList<String> stopWords) {\n    for (String word : stopWords) {\n      for (int index = 0; index < textList.size(); index++) {\n        String currentWord = textList.get(index);\n\n        if (word.equals(currentWord)) {\n          textList.remove(index);\n          index--;\n        }\n      }\n    }\n  }\n\n  /*\n   * Returns an ArrayList containing the individual words from textList\n   */\n  public ArrayList<String> textToWords() {\n    ArrayList<String> wordList = new ArrayList<String>();\n\n    for (int index = 0; index < textList.size(); index++) {\n      String currentLine = textList.get(index);\n      int location = currentLine.indexOf(\" \");;\n\n      while (location != -1) {\n        String currentWord = currentLine.substring(0, location);\n        wordList.add(currentWord);\n        currentLine = currentLine.substring(location + 1);\n        location = currentLine.indexOf(\" \");\n      }\n\n      wordList.add(currentLine);\n    }\n    \n    return wordList;\n  }\n\n  /*\n   * Lesson 7 - Level 4 Choice A\n   * Returns a String containing the most frequent word in textList\n   * and the number of times the word appears in the list\n   */\n  public String findFrequentWord() {\n    String maxWord = \"\";\n    int maxCount = 0;\n    \n    for (int index = 0; index < textList.size(); index++) {\n      String currentWord = textList.get(index);\n      int currentCount = 1;\n\n      for (int next = index + 1; next < textList.size(); next++) {\n        String nextWord = textList.get(next);\n\n        if (currentWord.equals(nextWord)) {\n          currentCount++;\n        }\n      }\n\n      if (currentCount > maxCount) {\n        maxCount = currentCount;\n        maxWord = currentWord;\n      }\n    }\n\n    return \"Most frequent word: \" + maxWord + \" (\" + maxCount + \")\";\n  }\n\n  /*\n   * Lesson 7 - Level 4 Choice B\n   * Returns a 2D array containing the words and their parts of speech\n   */\n  public String[][] getPartsOfSpeech(ArrayList<String> partsOfSpeech) {\n    String[][] wordList = new String[partsOfSpeech.size()][2];\n\n    for (int row = 0; row < wordList.length; row++) {\n      String currentLine = partsOfSpeech.get(row);\n\n      int colon = currentLine.indexOf(\":\");\n      String part = currentLine.substring(0, colon);\n      String word = currentLine.substring(colon + 1);\n      \n      wordList[row][0] = part;\n      wordList[row][1] = word;\n    }\n\n    return wordList;\n  }\n\n  /*\n   * Lesson 7 - Level 4 Choice C\n   * Returns an ArrayList containing words that are a specified part of speech\n   */\n  public ArrayList<String> getWordsForPart(ArrayList<String> partsOfSpeech, String partToFind) {\n    ArrayList<String> wordList = new ArrayList<String>();\n\n    for (int index = 0; index < partsOfSpeech.size(); index++) {\n      String currentLine = partsOfSpeech.get(row);\n      int colon = currentLine.indexOf(\":\");\n      String part = currentLine.substring(0, colon);\n\n      if (part.equals(partToFind)) {\n        String word = currentLine.substring(colon + 1);\n        wordList.add(word);\n      }\n    }\n\n    return wordList;\n  }\n\n  /*\n   * Lesson 7 - Level 4 Choice D\n   * Returns an ArrayList containing the list of words\n   * from textList tagged with their parts of speech\n   */\n  public ArrayList<String> tagPartsOfSpeech(ArrayList<String> partsOfSpeech) {\n    ArrayList<String> taggedWords = new ArrayList<String>();\n    \n    for (int index = 0; index < textList.size(); index++) {\n      String currentWord = textList.get(index);\n      \n      for (int partIndex = 0; partIndex < partsOfSpeech.size(); partIndex++) {\n        String currentLine = partsOfSpeech.get(partIndex);\n        int colon = currentLine.indexOf(\":\");\n        String word = currentLine.substring(colon + 1);\n\n        if (currentWord.equals(word)) {\n          String part = currentLine.substring(0, colon);\n          taggedWords.add(currentWord + \": \" + part);\n        }\n      }\n    }\n\n    return taggedWords;\n  }\n\n  /*\n   * Lesson 8 - Level 4 Choice C\n   * Returns an ArrayList containing the words in textList\n   * sorted in reverse alphabetical order (Z to A)\n   */\n  public ArrayList<String> sortWords() {\n    ArrayList<String> sortedList = new ArrayList<String>();\n    sortedList.add(textList.get(0));\n\n    int wordIndex = 1;\n    int sortIndex = 0;\n\n    while (wordIndex < textList.size()) {\n      String currentWord = textList.get(wordIndex);\n      String sortedWord = sortedList.get(sortIndex);\n\n      if (currentWord.compareTo(sortedWord) > 0) {\n        sortedList.add(sortIndex, currentWord);\n      }\n      else {\n        sortedList.add(currentWord);\n      }\n\n      sortIndex = 0;\n      wordIndex++;\n    }\n\n    return sortedList;\n  }\n\n  /*\n   * Lesson 8 - Level 4 Choice D\n   * Returns an ArrayList containing the lines in textList\n   * sorted in reverse alphabetical order (Z to A)\n   */\n  public ArrayList<String> sortLines() {\n    ArrayList<String> sortedList = new ArrayList<String>();\n    sortedList.add(textList.get(0));\n\n    int lineIndex = 1;\n    int sortIndex = 0;\n\n    while (lineIndex < textList.size()) {\n      String currentLine = textList.get(lineIndex);\n      String sortedLine = sortedList.get(sortIndex);\n\n      if (currentLine.compareTo(sortedLine) > 0) {\n        sortedList.add(sortIndex, currentLine);\n      }\n      else {\n        sortedList.add(currentLine);\n      }\n\n      sortIndex = 0;\n      lineIndex++;\n    }\n\n    return sortedList;\n  }\n\n  /*\n   * Lesson 9 - Level 3 Choice B\n   * Returns true if textList contains the specified word\n   * or phrase, otherwise returns false\n   */\n  public boolean hasText(String phrase) {\n    boolean found = false;\n    \n    for (int index = 0; index < textList.size(); index++) {\n      String currentLine = textList.get(index);\n\n      if (currentLine.indexOf(phrase) >= 0) {\n        found = true;\n      }\n    }\n\n    return found;\n  }\n\n  /*\n   * Lesson 9 - Level 3 Choice C\n   * Returns the number of times a word or phrase appears in textList\n   */\n  public int countPhrases(String phrase) {\n    int count = 0;\n\n    for (int index = 0; index < textList.size(); index++) {\n      String currentLine = textList.size();\n      int location = currentLine.indexOf(phrase);\n\n      while (location > 0) {\n        count++;\n        currentLine = currentLine.substring(0, location + 1);\n      }\n    }\n\n    return count;\n  }\n\n  /*\n   * Lesson 9 - Level 3 Choice D\n   * Returns the word that appears the most often in textList\n   */\n  public String mostCommonWord(String firstWord, String secondWord) {\n    int firstCount = 0;\n    int secondCount = 0;\n    String maxWord = \"\";\n\n    for (int index = 0; index < textList.size(); index++) {\n      String firstLine = textList.get(index);\n      String secondLine = textList.get(index);\n      int firstLocation = currentLine.indexOf(firstWord);\n      int secondLocation = currentLine.indexOf(secondLocation);\n\n      while (firstLocation > 0 || secondLocation > 0) {\n        if (firstLocation > 0) {\n          firstCount++;\n          firstLine = firstLine.substring(0, firstLocation + 1);\n        }\n\n        if (secondLocation > 0) {\n          secondCount++;\n          secondLine = secondLine.substring(0, secondLocation + 1);\n        }\n      }\n    }\n\n    if (firstCount > secondCount) {\n      maxWord = firstWord;\n    }\n    else {\n      maxWord = secondWord;\n    }\n\n    return maxWord;\n  }\n\n  /*\n   * Returns a String containing the text in textList\n   */\n  public String toString() {\n    String text = \"\";\n\n    for (String value : textList) {\n      text = text + value + \"\\n\";\n    }\n\n    return text;\n  }\n  \n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\n/*\n * Reads data from a file\n */\npublic final class FileReader {\n\n  private static File myFile;          // The File containing the data\n  private static Scanner fileReader;   // The Scanner object to read the file\n\n  /*\n   * Returns an ArrayList of Strings from a file\n   */\n  public static ArrayList<String> getStringData(String filename) {\n    createFile(filename);\n    \n    ArrayList<String> tempList = new ArrayList<String>();\n    \n    while (fileReader.hasNextLine()) {\n      tempList.add(fileReader.nextLine());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of words from a file\n   */\n  public static ArrayList<String> getWords(String filename) {\n    createFile(filename);\n\n    ArrayList<String> tempList = new ArrayList<String>();\n\n    while (fileReader.hasNext()) {\n      tempList.add(fileReader.next());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of ints from a file\n   */\n  public static ArrayList<Integer> getIntData(String filename) {\n    createFile(filename);\n\n    ArrayList<Integer> tempList = new ArrayList<Integer>();\n\n    while (fileReader.hasNextInt()) {\n      tempList.add(fileReader.nextInt());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of doubles from a file\n   */\n  public static ArrayList<Double> getDoubleData(String filename) {\n    createFile(filename);\n\n    ArrayList<Double> tempList = new ArrayList<Double>();\n\n    while (fileReader.hasNextDouble()) {\n      tempList.add(fileReader.nextDouble());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Creates the File and Scanner to read the specified filename\n   */\n  public static void createFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read a file or notifies the\n   * user if the file is not found\n   */\n  public static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException e) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n}",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-05-07T13:01:34.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-05-07T13:01:34.516+00:00\",\"changed\":[\"cloned from \\\"CSA U6L8 TextProcessor\\\"\"],\"cloned_from\":\"CSA U6L8 TextProcessor\"},{\"changed_at\":\"2022-05-07 13:01:39 +0000\",\"changed\":[\"long_instructions\",\"serialized_maze\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-07 13:01:57 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-07 13:10:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-07 13:24:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
