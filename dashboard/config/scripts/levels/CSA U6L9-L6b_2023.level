<Javalab>
  <config><![CDATA[{
  "published": true,
  "game_id": 68,
  "created_at": "2023-04-03T15:59:48.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A travel website wants to extract keywords from user reviews to help travelers find the best vacation spots. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Travel</code> class has an instance variable called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">reviews</code>, which is an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> that stores the list of reviews for travel destinations. It also has instance variables <code style=\"background-color: #ececec; color: black; font-weight: bold;\">keywords</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">counts</code>, which are <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code>s that store the list of keywords found in the reviews and the number of times the keywords appear in all the reviews. These lists are initialized to empty lists when a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Travel</code> object is instantiated.\r\n\r\nâœ… **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Travel</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getTravelKeywords()</code> method to get the most commonly used keywords related to travel experiences.\r\n\r\n* Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getWordsFromReview()</code> method to convert the review text into a list of words.\r\n\r\n* Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">isTravelKeyword()</code> method to check if a word is a travel keyword.\r\n\r\n* When the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">keywords</code> list is empty, add the word to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">keywords</code> list and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">counts</code> list.\r\n\r\n* When the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">keywords</code> list is not empty, determine if the word matches any of the existing keywords in the list. If the word is already in the list, increase the corresponding count by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code>. If it is not already in the list, add the word to the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">keywords</code> and add <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">counts</code> list.\r\n\r\nâœ… **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TravelRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getTravelKeywords()</code> method and print the result.\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">ðŸ”¦ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nloop through each review in reviews\r\n  set reviewWords to getWordsFromReview(review)\r\n&nbsp;\r\n  loop through each word in reviewWords\r\n    if word isTravelKeyword\r\n      if keywords size is 0\r\n        add word to keywords\r\n        add 1 to counts\r\n&nbsp;\r\n      loop through each keyword in keywords\r\n        get current keyword\r\n&nbsp;\r\n        if current keyword equals word\r\n          set corresponding index in counts to current count + 1\r\n        else\r\n          add word to keywords\r\n          add 1 to counts\r\n</pre>\r\n    </div>\r\n</details>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Vacation Spots",
    "bubble_choice_description": "A travel website wants to extract keywords from user reviews to help travelers find the best vacation spots.",
    "thumbnail_url": "https://images.code.org/29d52cdfd87d6f25d00558d1d7d531ef-baggage.png",
    "encrypted_validation": "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\n",
    "start_sources": {
      "TravelRunner.java": {
        "text": "import java.util.ArrayList;\n\npublic class TravelRunner {\n  public static void main(String[] args) {\n\n    // Creates an ArrayList of reviews\n    ArrayList<String> reviews = new ArrayList<String>();\n    reviews.add(\"The beach was beautiful and relaxing. I loved the clear blue water.\");\n    reviews.add(\"The mountain views were breathtaking. We went hiking and saw some amazing scenery.\");\n    reviews.add(\"The city had so much culture and history. We visited museums and landmarks.\");\n    reviews.add(\"The adventure activities were so much fun. We went white water rafting and zip-lining.\");\n\n    // Creates a Travel object\n    Travel travelDestination = new Travel(reviews);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Call the getTravelKeywords() method, then call the getTopKeyword()\n     * method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Travel.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a travel website\n */\npublic class Travel {\n  \n  private ArrayList<String> reviews;      // The list of reviews for a travel destination\n  private ArrayList<String> keywords;     // The list of keywords\n  private ArrayList<Integer> counts;      // The list containing the number of times each keyword appears\n  \n  /*\n   * Sets the list of reviews to the specified list of reviews\n   * and initializes keywords and counts to empty lists\n   */\n  public Travel(ArrayList<String> reviews) {\n    this.reviews = reviews;\n    this.keywords = new ArrayList<String>();\n    this.counts = new ArrayList<Integer>();\n  }\n\n  /*\n   * Returns the list of reviews\n   */\n  public ArrayList<String> getReviews() {\n    return reviews;\n  }\n\n  /*\n   * Returns the list of keywords\n   */\n  public ArrayList<String> getKeywords() {\n    return keywords;\n  }\n\n  /*\n   * Returns the list of counts\n   */\n  public ArrayList<Integer> getCounts() {\n    return counts;\n  }\n  \n  /*\n   * Extracts the keywords related to travel experiences from the\n   * list of reviews and counts the number of times they appear\n   */\n  public void getTravelKeywords() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… For each review, use the getWordsFromReview() to get the list of words.\n     * Check if each word is a travel keyword using isTravelKeyword(). If the\n     * keywords list is empty, add the word to the keywords list and 1 to the counts\n     * list. If the list is not empty, determine if the word matches any keywords \n     * in the list. If it matches, increase the corresponding count by 1. If there\n     * are no matches, add the word to the list of keywords and 1 to the counts list.\n     * -----------------------------------------------------------------------------\n     */\n    \n\n\n    \n  }\n\n  /*\n   * Returns the top keyword in the reviews\n   */\n  public String getTopKeyword() {\n    String topKeyword = \"\";\n    int maxCount = 0;\n\n    for (int index = 0; index < counts.size(); index++) {\n      if (counts.get(index) > maxCount) {\n        topKeyword = keywords.get(index);\n        maxCount = counts.get(index);\n      }\n    }\n\n    return topKeyword;\n  }\n\n  /*\n   * Returns an ArrayList containing each word in review\n   */\n  public ArrayList<String> getWordsFromReview(String review) {\n    ArrayList<String> words = new ArrayList<String>();\n\n    int space = review.indexOf(\" \");\n\n    while (space != -1) {\n      String currentWord = review.substring(0, space);\n      words.add(currentWord);\n      review = review.substring(space + 1);\n      space = review.indexOf(\" \");\n    }\n\n    words.add(review);\n    return words;\n  }\n  \n  /*\n   * Returns true if a word is a keyword related to travel experiences,\n   * otherwise returns false\n   */\n  public boolean isTravelKeyword(String word) {\n    String[] keywords = {\"beach\", \"Beach\", \"mountain\", \"Mountain\", \"scenery\", \"Scenery\", \"adventure\",\n                         \"Adventure\", \"sightseeing\", \"Sightseeing\", \"culture\", \"Culture\"};\n    \n    for (String keyword : keywords) {\n      if (word.equals(keyword)) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static ArrayList<String> toStringList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    return temp;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Integer> toIntList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Integer> data = new ArrayList<Integer>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Integer.parseInt(currentValue));\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Double> toDoubleList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Double> data = new ArrayList<Double>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Double.parseDouble(currentValue));\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "encrypted_exemplar_sources": "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\nAzhHl325RVKUFNb2tdjjW7I6QeWWXrJXIDaq/PM=\n",
    "encrypted_examples": [

    ]
  },
  "audit_log": "[{\"changed_at\":\"2023-04-03T15:59:48.590+00:00\",\"changed\":[\"cloned from \\\"CSA U6L9-L6a_2023\\\"\"],\"cloned_from\":\"CSA U6L9-L6a_2023\"},{\"changed_at\":\"2023-04-03 15:59:50 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-02 13:34:25 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 16:40:31 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 16:40:32 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 16:40:33 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 16:40:35 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 16:48:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 16:48:46 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 16:48:46 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 16:48:49 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 17:16:34 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 17:52:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 17:52:42 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 17:52:51 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 18:05:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 18:05:08 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 18:05:22 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 18:08:36 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-06 18:09:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-09 13:37:39 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
