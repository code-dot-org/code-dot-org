<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A teacher wants to create their own learning management system for their courses.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Course`(#e7e8ea) class to assign specific values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #2:** Write a no-argument constructor in the `Course`(#e7e8ea) class to assign default values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #3:** In `CourseRunner.java`(#e7e8ea), instantiate `Course`(#e7e8ea) objects using each constructor.\r\n\r\n✅ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the `Course`(#e7e8ea) objects.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nUse the `getName()`(#e7e8ea), `getNumStudents()`(#e7e8ea), and `getIsSemester()`(#e7e8ea) methods in the `Course`(#e7e8ea) class to get the current values assigned to the instance variables. For example:\r\n\r\n```\r\nCourse cybersecurity = new Course();\r\nSystem.out.println(\"Name: \" + cybersecurity.getName());\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing parameterized constructors, using the `this`(#e7e8ea) keyword, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-this-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Courses",
    "bubble_choice_description": "A teacher wants to create their own learning management system for their courses. Help the teacher by writing the `Course` class with no-argument and parameterized constructors.",
    "thumbnail_url": "https://images.code.org/bdb37dd29668bbade953534d03a41374-online-course.png",
    "encrypted_exemplar_sources": "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\nuCVN\n",
    "encrypted_validation": "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\nK7kv/a4ttF3vVu0SOLQ=\n",
    "start_sources": {
      "CourseRunner.java": {
        "text": "public class CourseRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate Course objects using the no-argument and parameterized constructors,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Course.java": {
        "text": "/*\n * Represents a course taught by a teacher\n */\npublic class Course {\n\n  private String name;          // The name of a course\n  private int numStudents;      // The number of students in a course\n  private boolean isSemester;   // Whether or not it is a semester course\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specified values to the\n   * instance variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to numStudents\n   */\n  public int getNumStudents() {\n    return numStudents;\n  }\n\n  /*\n   * Returns the current value assigned to isSemester\n   */\n  public boolean getIsSemester() {\n    return isSemester;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-11-17T23:09:29.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-17T23:09:29.624+00:00\",\"changed\":[\"cloned from \\\"CSA U2L4-L6c_2023\\\"\"],\"cloned_from\":\"CSA U2L4-L6c_2023\"},{\"changed_at\":\"2022-11-17 23:09:33 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:59:00 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:19:51 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:22:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 22:05:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 22:05:22 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 22:05:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:13:43 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 16:17:33 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 17:42:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 17:42:45 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 17:43:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 17:43:24 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
