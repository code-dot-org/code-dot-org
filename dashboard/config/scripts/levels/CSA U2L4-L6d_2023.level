<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A teacher wants to create their own learning management system for their courses.**\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Course`(#e7e8ea) class to assign specific values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #2:** Write a no-argument constructor in the `Course`(#e7e8ea) class to assign default values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #3:** In `CourseRunner.java`(#e7e8ea), instantiate `Course`(#e7e8ea) objects using each constructor.\r\n\r\n✅ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the `Course`(#e7e8ea) objects.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printCourseInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nCourse cybersecurity = new Course();\r\ncybersecurity.printCourseInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing parameterized constructors, using the `this`(#e7e8ea) keyword, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "CourseRunner.java": {
        "text": "public class CourseRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate Course objects using the no-argument and parameterized constructors,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Course.java": {
        "text": "/*\n * Represents a course taught by a teacher\n */\npublic class Course {\n\n  private String name;          // The name of a course\n  private int numStudents;      // The number of students in a course\n  private boolean isSemester;   // Whether or not it is a semester course\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a parameterized constructor to assign specified values to the\n   * instance variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /*\n   * Prints the name of the course, the number of students in\n   * the course, and whether or not it is a semester course\n   */\n  public void printCourseInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Number of Students: \" + numStudents);\n    System.out.println(\"Is Semester Course? \" + isSemester);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-this-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Courses",
    "bubble_choice_description": "A teacher wants to create their own learning management system for their courses. Help the teacher by writing the `Course` class with no-argument and parameterized constructors.",
    "thumbnail_url": "https://images.code.org/bdb37dd29668bbade953534d03a41374-online-course.png",
    "encrypted_exemplar_sources": "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\nHXG7oRY92kLTAmwZJ4cyGECU3S0ycfun2BnxKzG+WYmJOhnkrnc4REy7hoyR\nRErz/GhJOjOmZTDiC5vBhDkkoqOO/p3YnPKgpbeI/J4s2aDbwmtUPRwZcD9i\nttxO9IhhVjnJV9lkc3hSbxtflQGyaYIy0KlPPI5ZcC2PRK8/4jmhDcQF6scW\nHSa3MCFdxBerYNuqbVWqYAsIcinSYzIfc9HeRUdNN8HvMguGlNytbiKcnT9f\ndaletu+kzBdzcfXNbXLVKEApVta1VWSM3Qne5RrHoW7ZouPSgnKXuzLzM3LI\nAlrokpWSgVLezZrp0YMoDhCqtXWOMY5T2+z9GCOm9jb9jiSUQJq/nA88MvHb\nveetBMJqD+zdH73+QwTDJimaRMTK+Rgl23OLvnpkXygmbGMzkqq5G+eqLbb5\nhJf66duKZJU3q0KanY56YnQReJyUzD1UNAKmUiocHU20cMGQQJEubQLa1yI3\nAyNN+BrDwUDS+Mqxw8DYcTPZxp/DDItoqpWRr7amCEZYrL7B+MFeozlR37ne\ngy/Hsm0wF6StIV6K+CfL5/vLSRvB9i5z7SGFn3koJAE/+cCkGi/IB9ivWEzz\n7Er0DN7im2GNsfAruClJiescO68uzSY2sAuTifE/7slW6WRYaePqjSLuWZtU\nypYqG6GwZKaLmlk4bcXrLncA6+LzSgrcGkeLn5csi2CpBx1AfO7vwddmrCjv\nVrSVamlqCqK5P03k58jbVGoykfJRssTcsi+GqhMK05pc3B4pWwSYm1sJ+mvU\nHasbHYRe/LsQFqH8T7z3q8KLhDuh3POOVwZy2Hj8+tAvE4OKvmop6C4h8wMQ\n5sAUNDy1gle0r1u1n32DvD0XsjramYnV2FSIACMP6u26JTlfGeSKMKVj4+Fr\nPeH5R4poN9rimd5YIcbHx2kVQYgKoFO2l3E16f8yPo14kKIigTSuT4xFD+cd\nQsu/X9GINaZ+5yrpqEyiieV0zBvXQhjKwRHN4M4CRpRFIZwyqHY9yV6tt5/g\nZTlQTQPQ6HXzLr/iyuRAmKCPwbCCcpF3n4J2wZwMRUoimMSxabUd1MiYYrTI\nwNoZWrinvJVgJIo4KoT+GEA9ZUNIrBJ/tFzc+JMewhmLR4m91Rgy3u7V5D+D\nlcQK/2V0twV4v9bFVgQUk4o4HAPK6ttlYdao2qI6N6O1dR8HMLXQcuV6SI2n\n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\nZKY=\n"
  },
  "game_id": 68,
  "created_at": "2022-11-17T23:09:29.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-17T23:09:29.624+00:00\",\"changed\":[\"cloned from \\\"CSA U2L4-L6c_2023\\\"\"],\"cloned_from\":\"CSA U2L4-L6c_2023\"},{\"changed_at\":\"2022-11-17 23:09:33 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:59:00 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:19:51 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:22:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 22:05:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 22:05:22 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 22:05:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
