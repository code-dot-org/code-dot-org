<Gamelab>
  <config><![CDATA[{
  "game_id": 50,
  "created_at": "2016-06-07T18:13:06.000Z",
  "level_num": "custom",
  "user_id": 106,
  "properties": {
    "skin": "gamelab",
    "code_functions": {
      "color": null,
      "fill": null,
      "noFill": null,
      "stroke": null,
      "strokeWeight": null,
      "noStroke": null,
      "ellipse": null,
      "rect": null,
      "regularPolygon": null,
      "line": null,
      "arc": null,
      "shape": null,
      "point": null,
      "text": null,
      "textAlign": null,
      "textFont": null,
      "textSize": null,
      "comment": null,
      "draw": null,
      "frameRate": null,
      "randomNumber_min_max": null,
      "background": null,
      "console.log": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null
    },
    "show_d_pad": "true",
    "edit_code": true,
    "embed": "false",
    "markdown_instructions": "# Animating with Counters\r\n\r\nThe counter pattern can be used to increase the value of a variable each time the draw loop runs. You can use this to create smooth motion in your programs. You're going to try out a few ways of using this.\r\n\r\n# Do This\r\n\r\nThis program uses the counter pattern with a variable called `xPos`.\r\n\r\n* **Read the program** and make a prediction of how it will run.\r\n* **Run the program** to check your prediction\r\n* **Change the code** so that `xPos` changes by different amounts each draw loop. For example instead of `xPos = xPos + 1` you could try:\r\n\t* `xPos = xPos + 2`\r\n    * `xPos = xPos + 5`\r\n    * `xPos = xPos + 0.1`",
    "start_blocks": "var xPos = 0;\r\n\r\nfunction draw(){\r\n  xPos = xPos + 1;\r\n  \r\n  background(\"white\");\r\n  rect(xPos, 0, 10, 10);\r\n}",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "text_mode_at_start": "false",
    "submittable": "false",
    "hide_view_data_button": "false",
    "debugger_disabled": "false",
    "encrypted_examples": "pw3Cks4k0JPjCCkTrB6zd2x4cQr2GlYAAySVlDF+GmwzLNK+vbkkRyaj7sfl\nLrg4\n",
    "instructions_important": "false",
    "hide_animation_mode": "true",
    "start_in_animation_tab": "false",
    "all_animations_single_frame": "false",
    "pause_animations_by_default": "false",
    "show_debug_watch": "true",
    "contained_level_names": null
  },
  "published": true,
  "notes": "",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Gamelab>