<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-05-19T14:13:02.000Z",
  "level_num": "custom",
  "user_id": 13,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "console.log": null,
      "declareAssign_x": null,
      "assign_x": null
    },
    "edit_code": true,
    "embed": "false",
    "instructions": "Predict the value of a and b. Add console.log statements to find out the actual value of a and b. (Click for full instructions)",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "slider_speed": "0.1",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "start_blocks": "var a = 3;\r\nvar b = 7;\r\na = b;\r\nb = a;\r\n//add console.log statments below\r\n",
    "markdown_instructions": "# Variable Reassignment part 1\r\n\r\nSo far we have only set a variable's value once.  But it's called a *variable* for a reason - its value can change (or vary) throughout a program. This is useful and necessary for keeping track of things like a score in a game.\r\n\r\nTo re-assign a value to a variable all you have to do is maintain the mental model of what's happening:\r\n\r\n * Variables are containers for information\r\n * The '=' sign is an instruction to set the value.\r\n * A series of assignment statements (see example to right) is a list of instructions to execute one at a time - it's not a series of equations that define the state of the world.\r\n\r\n# Do This\r\n<img src=\"https://images.code.org/066db834ae289ac538609b68c6492c4a-image-1445944263895.png\" style=\"float: right\">\r\n\r\n * **Make a prediction**\r\n\r\n The code on the following screen looks like what is shown at right.  Study it rigth and now and make a prediction about what will happen when you run the code. What will the values of `a` and `b` be at the end of the program?\r\n\r\n* **Add console.log statements** \r\n\r\n Prove it to yourself by adding `console.log` statements at the end of the program to find out what the value of a and b are.\r\n \r\n* **NOTICE:** in the code above, after the variable `a` has been created using `var`, to change  only need to refer to the variable by its name.  The word `var` only needs to be used once - when the variable is created for the first time. \r\n\r\n* It's a **common mistake** to use `var` everytime you want to *use* a variable but just **remember `var` means CREATE a new variable**.  When you create a new variable it will lose its old value.  We'll look at errors related to this later.\r\n\r\n",
    "never_autoplay_video": "false",
    "examples_required": "false",
    "droplet_tooltips_disabled": "false",
    "text_mode_at_start": "true",
    "design_mode_at_start": "false",
    "hide_design_mode": "true",
    "beginner_mode": "true",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "true",
    "encrypted_examples": [

    ]
  }
}]]></config>
  <blocks/>
</Applab>