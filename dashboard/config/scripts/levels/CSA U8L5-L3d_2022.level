<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "The owner of the Project Mercury Pastries Food Truck business assigns food trucks for each day of the week in several cities. The owner stores these food trucks in a 2D array, where each row represents a unique city. Each column represents Monday, Tuesday, Wednesday, Thursday, and Friday, respectively.\r\n\r\nThe owner wants to assign food trucks based on the amount of inventory each food truck has. Use the selection sort algorithm to sort the food trucks in each city from the truck with the largest inventory to the truck with the smallest inventory.\r\n\r\n##In Owner.java:\r\n\r\n1. Write the method `sortTrucks()`(#e7e8ea) to sort the instance variable `foodTrucks`(#e7e8ea) using a selection sort.\r\n\r\n##In MyConsole.java:\r\n\r\n2. Call the `sortTrucks()`(#e7e8ea) method and print the updated array.\r\n\r\n::: details [**Show Me How**]\r\nThe algorithm for a selection sort is:\r\n\r\n**Step 1:** Set MIN to location 0\r\n**Step 2:** Find the minimum element in the list\r\n**Step 3:** Swap with value at location MIN\r\n**Step 4:** Set MIN to point to the next element\r\n**Step 5:** Repeat until list is sorted\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Food Trucks",
    "bubble_choice_description": "The owner of the Project Mercury Pastries Food Truck business wants to assign food trucks based on the amount of inventory each food truck has.",
    "thumbnail_url": "https://images.code.org/03f6d46e661409d6585bdfd64dbc13ae-food-truck.png",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    // Creates the list of cities\n    String[] cities = {\"Little Rock\", \"Lansing\", \"Austin\", \"Baton Rouge\"};\n\n    // Instantiates FoodTruck objects\n    FoodTruck littleRock1 = new FoodTruck(\"Little Rock Truck #1\", 27);\n    FoodTruck littleRock2 = new FoodTruck(\"Little Rock Truck #2\", 18);\n    FoodTruck littleRock3 = new FoodTruck(\"Little Rock Truck #3\", 32);\n\n    FoodTruck lansing1 = new FoodTruck(\"Lansing Truck #1\", 13);\n    FoodTruck lansing2 = new FoodTruck(\"Lansing Truck #2\", 25);\n    FoodTruck lansing3 = new FoodTruck(\"Lansing Truck #3\", 23);\n\n    FoodTruck austin1 = new FoodTruck(\"Austin Truck #1\", 19);\n    FoodTruck austin2 = new FoodTruck(\"Austin Truck #2\", 39);\n    FoodTruck austin3 = new FoodTruck(\"Austin Truck #3\", 26);\n\n    FoodTruck batonRouge1 = new FoodTruck(\"Baton Rouge Truck #1\", 20);\n    FoodTruck batonRouge2 = new FoodTruck(\"Baton Rouge Truck #2\", 24);\n    FoodTruck batonRouge3 = new FoodTruck(\"Baton Rouge Truck #3\", 22);\n\n    // Creates a 2D array of FoodTruck objects\n    FoodTruck[][] myFoodTrucks = {{littleRock1, littleRock2, littleRock3},\n                                  {lansing1, lansing2, lansing3},\n                                  {austin1, austin2, austin3},\n                                  {batonRouge1, batonRouge2, batonRouge3}};\n\n    // Instantiates an Owner object with the myFoodTrucks array and prints the names\n    Owner myOwner = new Owner(cities, myFoodTrucks);\n    System.out.println(\"Before Sort\");\n    myOwner.printFoodTrucks();\n\n    System.out.println(\"\\nAfter Sort\");\n\n    // TO DO #2: Call the sortTrucks() method and print the updated array.\n    \n\n    \n  }\n}",
        "isVisible": true
      },
      "Owner.java": {
        "text": "/*\n * Represents the owner of the food truck business\n */\npublic class Owner {\n\n  private String[] cities;            // The list of cities\n  private FoodTruck[][] foodTrucks;   // The 2D array of food trucks\n\n  /*\n   * Constructor to create an Owner with the specified\n   * list of cities and 2D array of food trucks\n   */\n  public Owner(String[] cities, FoodTruck[][] foodTrucks) {\n    this.cities = cities;\n    this.foodTrucks = foodTrucks;\n  }\n\n  /*\n   * Prints the name of each food truck\n   */\n  public void printFoodTrucks() {\n    for (int row = 0; row < foodTrucks.length; row++) {\n      System.out.println(cities[row]);\n      \n      for (int col = 0; col < foodTrucks[0].length; col++) {\n        System.out.println(foodTrucks[row][col] + \" \");\n      }\n\n      System.out.println();\n    }\n  }\n\n  /*\n   * Sorts the list of food trucks from the truck with the\n   * largest inventory to the truck with the smallest inventory\n   */\n  public void sortTrucks() {\n    // TO DO #1: Implement the selection sort algorithm\n    // to sort each row in foodTrucks.\n\n    \n    \n  }\n  \n}",
        "isVisible": true
      },
      "FoodTruck.java": {
        "text": "/*\n * Represents a food truck\n */\npublic class FoodTruck {\n\n  private String name;    // The name of the food truck\n  private int inventory;  // The number of desserts the food truck has\n\n  /*\n   * Constructor to create a FoodTruck\n   * with the specified name and inventory\n   */\n  public FoodTruck(String name, int inventory) {\n    this.name = name;\n    this.inventory = inventory;\n  }\n\n  /*\n   * Returns the number of desserts the FoodTruck has\n   */\n  public int getInventory() {\n    return inventory;\n  }\n\n  /*\n   * Returns a String containing the FoodTruck's information\n   */\n  public String toString() {\n    return name + \": \" + inventory + \" desserts\";\n  }\n  \n}",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\n9iHXsA==\n"
  },
  "game_id": 68,
  "created_at": "2022-04-18T19:42:20.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-18T19:42:20.049+00:00\",\"changed\":[\"cloned from \\\"CSA U8L5-L3c_2022\\\"\"],\"cloned_from\":\"CSA U8L5-L3c_2022\"},{\"changed_at\":\"2022-04-18 19:42:21 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-15 02:01:42 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-15 11:56:49 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-15 11:58:16 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-15 11:59:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-15 12:05:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-15 12:05:32 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-15 21:01:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-15 21:01:29 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-15 21:01:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
