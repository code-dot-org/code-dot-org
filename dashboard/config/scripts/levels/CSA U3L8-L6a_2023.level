<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "✅ **TO DO #1:** In `MusicSurvey.java`(#e7e8ea), write the method `countStreaming()`(#e7e8ea) to count the number of times the parameter `streamingService`(#e7e8ea) appears in the survey responses.\r\n\r\n::: details [**🔦 Need help with your algorithm?**]\r\n  \r\nHere is one approach to solving this problem.\r\n\r\n```\r\ncount = 0\r\n\r\nfor each answer in responses\r\n  if answer.getStreaming() equals target\r\n    count++\r\n\r\nreturn count\r\n```\r\n:::\r\n&nbsp;\r\n\r\n✅ **TO DO #2:** In `MusicSurvey.java`(#e7e8ea), write the `promptUser()`(#e7e8ea) method to prompt the user to enter a streaming service to find and return their response.\r\n\r\n💡 **TIP:** Check out the documentation for the `Scanner`(#e7e8ea) class in the **Documentation** tab ⬆️ for help with creating a `Scanner`(#e7e8ea) object and using its methods!\r\n\r\n::: details [**🔦 How do I prompt the user?**]\r\n  \r\nHere is one approach to solving this problem.\r\n\r\n```\r\ncreate Scanner object\r\nprint \"Enter a streaming service: \"\r\nchoice = nextLine()\r\nclose the Scanner object\r\nreturn choice\r\n```\r\n:::\r\n&nbsp;\r\n\r\n✅ **TO DO #3:** In `SurveyRunner.java`(#e7e8ea), call the `promptUser()`(#e7e8ea) and `countStreaming()`(#e7e8ea) methods and print the result.\r\n\r\n::: details [**🌟 Challenge: How can I let the user continue searching?**]\r\n  \r\nHere is one approach to solving this problem in `SurveyRunner.java`(#e7e8ea).\r\n\r\n```\r\ncreate Scanner object\r\nchoice = \"y\"\r\n\r\nwhile choice not equal \"n\"\r\n  streamingToFind = promptUser()\r\n  result = countStreaming(streamingToFind)\r\n  print result\r\n  prompt to enter \"y\" to search again or \"n\" to quit\r\n  choice = nextLine()\r\n\r\nclose Scanner object\r\nprint \"Goodbye!\"\r\n```\r\n:::\r\n&nbsp;\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Count Genres",
    "bubble_choice_description": "Write the `countStreaming()` method to count the number of times a streaming service appears in the survey responses.",
    "thumbnail_url": "https://images.code.org/1335c7f4ce34e57242bd82590f96048d-counter.png",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "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\n7g==\n",
    "start_sources": {
      "SurveyRunner.java": {
        "text": "import java.util.Scanner;\n\npublic class SurveyRunner {\n  public static void main(String[] args) {\n\n    MusicSurvey responses = new MusicSurvey(\"ages.txt\", \"streaming.txt\");\n    System.out.println(responses);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Call the promptUser() and countStreaming() methods and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "MusicSurvey.java": {
        "text": "import java.util.Scanner;\n\n/*\n * Manages data about responses to a survey\n */\npublic class MusicSurvey {\n\n  private String agesFile;           // The name of the file containing the ages data\n  private String streamingFile;      // The name of the file containing the streaming service data\n  private Respondent[] responses;    // The 1D array of Respondent objects\n\n  /*\n   * Reads the data from agesFile and streamingFile to initialize responses\n   */\n  public MusicSurvey(String agesFile, String streamingFile) {\n    this.agesFile = agesFile;\n    this.streamingFile = streamingFile;\n    responses = createResponses();\n  }\n\n  /*\n   * Returns a 1D array of Respondent objects using the data from agesFile and streamingFile\n   */\n  public Respondent[] createResponses() {\n    int[] agesData = FileReader.toIntArray(agesFile);\n    String[] streamingData = FileReader.toStringArray(streamingFile);\n    \n    Respondent[] tempResponses = new Respondent[streamingData.length];\n\n    for (int index = 0; index < tempResponses.length; index++) {\n      tempResponses[index] = new Respondent(agesData[index], streamingData[index]);\n    }\n\n    return tempResponses;\n  }\n\n  /*\n   * Counts the number of times a streaming service appears in the responses\n   */\n  public int countStreaming(String streamingService) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Count the number of times the parameter streamingService appears in the\n     * 1D array responses and return the count.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return -1;\n  }\n\n  /*\n   * Prompts the user to enter a streaming service and returns their response\n   */\n  public String promptUser() {\n    /* -------------------------------------- TO DO --------------------------------------\n     * ✅ Prompt the user to enter a streaming service to find and return their response.\n     * -----------------------------------------------------------------------------------\n     */\n\n    \n    return \"\";\n  }\n\n  /*\n   * Returns a String containing each respondent's information\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (Respondent answer : responses) {\n      result += answer + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Respondent.java": {
        "text": "/*\n * Represents a respondent to a survey\n */\npublic class Respondent {\n\n  private int age;              // The age of a respondent\n  private String streaming;     // The streaming service a respondent uses\n\n  /*\n   * Sets age and streaming to the specified values\n   */\n  public Respondent(int age, String streaming) {\n    this.age = age;\n    this.streaming = streaming;\n  }\n\n  /*\n   * Returns the age of the respondent\n   */\n  public int getAge() {\n    return age;\n  }\n\n  /*\n   * Returns the streaming service the respondent uses\n   */\n  public String getStreaming() {\n    return streaming;\n  }\n\n  /*\n   * Returns a String containing the age and streaming service of the respondent\n   */\n  public String toString() {\n    return age + \" years old: \" + streaming;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "streaming.txt": {
        "text": "Spotify\nPandora\nSpotify\nYouTube Music\nSpotify\nSpotify\nYouTube Music\nSpotify\nSpotify\nNone\nSpotify\nYouTube Music\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nApple Music\nSpotify\nNone\nSpotify\nOther\nSpotify\nSpotify\nYouTube Music\nSpotify\nApple Music\nApple Music\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nOther\nOther\nSpotify\nYouTube Music\nSpotify\nYouTube Music\nSpotify\nSpotify\nNone\nSpotify\nSpotify\nSpotify\nSpotify\nApple Music\nSpotify\nApple Music\nSpotify\nSpotify\nApple Music\nSpotify\nNone\nSpotify\nNone\nYouTube Music\nPandora\nOther\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nApple Music\nNone\nYouTube Music\nSpotify\nSpotify\nSpotify\nApple Music\nSpotify\nSpotify\nSpotify\nYouTube Music\nYouTube Music\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nNone\nSpotify\nSpotify\nSpotify\nNone\nSpotify\nYouTube Music\nYouTube Music\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify",
        "isVisible": true,
        "tabOrder": 4
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 5
      },
      "ages.txt": {
        "text": "18\n63\n18\n61\n18\n18\n18\n21\n19\n18\n18\n19\n17\n19\n18\n17\n16\n16\n17\n15\n15\n17\n19\n18\n16\n18\n14\n18\n17\n17\n20\n19\n19\n17\n16\n18\n21\n17\n26\n20\n23\n18\n37\n17\n18\n17\n36\n24\n18\n19\n17\n16\n23\n23\n22\n16\n18\n42\n23\n23\n19\n22\n15\n25\n32\n36\n24\n29\n41\n36\n19\n31\n16\n26\n22\n16\n17\n19\n18\n18\n19\n19\n22\n16\n19\n37\n14\n33\n26\n32\n30\n43\n24\n36\n19\n22\n20\n31\n19\n15",
        "isVisible": true,
        "tabOrder": 3
      }
    }
  },
  "game_id": 68,
  "created_at": "2023-01-12T22:17:15.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-01-12T22:17:15.640+00:00\",\"changed\":[\"cloned from \\\"CSA Practice Level Template\\\"\"],\"cloned_from\":\"CSA Practice Level Template\"},{\"changed_at\":\"2023-01-12 22:17:17 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:11:59 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:18:41 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:53:26 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\",\"bubble_choice_description\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 17:12:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 17:13:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 18:02:05 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:15:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:42:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:42:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:43:28 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:44:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:46:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:47:02 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:53:57 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:54:54 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:34:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:36:26 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:36:35 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:38:28 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:38:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:38:58 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
