<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A company is planning a new social media app, and the software engineer has created a `Profile`(#e7e8ea) class to represent a user's profile on the app.**\r\n\r\n✅ **TO DO #1:** In the `Profile`(#e7e8ea) class, write a no-argument constructor to assign default values to the instance variables:\r\n\r\n   * Assign a default name to the instance variable `name`(#e7e8ea), such as `\"new user\"`(#e7e8ea)\r\n\r\n   * Assign a default value to the instance variable `yearJoined`(#e7e8ea), such as `2022`(#e7e8ea)\r\n\r\n✅ **TO DO #2:** In `ProfileRunner.java`(#e7e8ea), instantiate a `Profile`(#e7e8ea) object.\r\n\r\n✅ **TO DO #3:** Print the constructor and the values assigned to the instance variables for the `Profile`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printProfileInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nProfile user = new Profile();\r\nuser.printProfileInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out **Help & Tips** tab ⬆️ for help with writing a no-argument constructor and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Profile Class",
    "bubble_choice_description": "A company is planning a new social media app, and the software engineer has created a `Profile` class to represent a user's profile on the app.",
    "thumbnail_url": "https://images.code.org/147c48047ed61b5411478bc480e21792-social-media.png",
    "start_sources": {
      "ProfileRunner.java": {
        "text": "public class ProfileRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Profile object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject), and print the values assigned\n     * to the instance variables using the Profile class printProfileInfo() method.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Profile.java": {
        "text": "/*\n * Represents a user's profile on a social media app\n */\npublic class Profile {\n\n  private String name;      // The name of a user\n  private int yearJoined;   // The year a user joined the app\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the\n   * name and yearJoined instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n\n\n  \n\n  /*\n   * Prints the name of the user and the year\n   * the user joined the social media app\n   */\n  public void printProfileInfo() {\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Year Joined: \" + yearJoined);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-03T19:20:55.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:20:55.918+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L3a_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L3a_2023\"},{\"changed_at\":\"2022-11-03 19:20:57 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 21:18:16 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:24:23 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:24:34 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:24:46 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:26:18 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:27:10 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:27:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 21:39:28 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 14:26:25 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:09:22 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:09:44 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:09:46 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:52:46 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
