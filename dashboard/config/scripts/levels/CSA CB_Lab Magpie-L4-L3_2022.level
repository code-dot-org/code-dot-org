<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "map_reference": "/docs/ide/javalab/classes/String",
    "project_template_level_name": "CSA CB_Lab Magpie L4 PBT_2022",
    "long_instructions": "## Scanning for a Phrase\r\n---\r\nIn this next activity, we will practice adding functionality to our Magpie chatbot by expanding its ability to detect and respond to user input.\r\n\r\n&nbsp;\r\n1. Create a conditional statement that will utilize the `findKeyword()` method in order to determine if a user's input contains `I want`(#ffe3e3). This conditional, if *true*, should call a method named `transformIWantStatement()`. You should pass the user's *statement* into the method as a String. The method will return a string that will be saved into the *response* variable.\r\n\r\n2. Create a basic `transformIWantStatement()` method. When this method is run, it should simply return the String \"I want!\"  Use this basic response in order to test that your conditional statement and method are set up correctly.\r\n",
    "mini_rubric": "false",
    "teacher_markdown": "A sample solution can be found here.",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "Magpie4.java": {
        "text": "\npublic class Magpie4\n{\n\n  // Default Greeting\n  public String getGreeting()\n\t{\n\t\treturn \"Hello, let's talk.\";\n\t}\n\t\n  // User input in Magpie is stored in the `statement` string. This method chooses a response to the `statement`\n\tpublic String getResponse(String statement)\n\t{\n\t\tString response = \"\";\n\n    // ** TO DO 1: Create a conditional statement to check for \"I want\" in the user input\n    \n\t\tif (statement.length() == 0)\n\t\t{\n\t\t\tresponse = \"Say something, please.\";\n\t\t}\n\n\t\telse if (findKeyword(statement, \"no\") >= 0)\n\t\t{\n\t\t\tresponse = \"Why so negative?\";\n\t\t}\n\t\telse if (findKeyword(statement, \"mother\") >= 0\n\t\t\t\t|| findKeyword(statement, \"father\") >= 0\n\t\t\t\t|| findKeyword(statement, \"sister\") >= 0\n\t\t\t\t|| findKeyword(statement, \"brother\") >= 0)\n\t\t{\n\t\t\tresponse = \"Tell me more about your family.\";\n\t\t}\n\n\t\t// Responses which require transformations\n\t\telse if (findKeyword(statement, \"I want to\", 0) >= 0)\n\t\t{\n\t\t\tresponse = transformIWantToStatement(statement);\n\t\t}\n\n\t\telse\n\t\t{\n\t\t\t// Look for a two word (you <something> me) pattern\n\t\t\tint psn = findKeyword(statement, \"you\", 0);\n\n\t\t\tif (psn >= 0\n\t\t\t\t\t&& findKeyword(statement, \"me\", psn) >= 0)\n\t\t\t{\n\t\t\t\tresponse = transformYouMeStatement(statement);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresponse = getRandomResponse();\n\t\t\t}\n\t\t}\n\t\treturn response;\n\t}\n\t\n\t// Take a statement with \"I want to <something>.\" and transform it into \n\t// \"What would it mean to <something>?\"\n\tprivate String transformIWantToStatement(String statement)\n\t{\n\t\t//  Remove the final period, if there is one\n\t\tstatement = statement.trim();\n\t\tString lastChar = statement.substring(statement\n\t\t\t\t.length() - 1);\n\t\tif (lastChar.equals(\".\"))\n\t\t{\n\t\t\tstatement = statement.substring(0, statement\n\t\t\t\t\t.length() - 1);\n\t\t}\n\t\tint psn = findKeyword (statement, \"I want to\", 0);\n\t\tString restOfStatement = statement.substring(psn + 9).trim();\n\t\treturn \"What would it mean to \" + restOfStatement + \"?\";\n\t}\n\n\n  \n  // ** TO DO 2: Create a basic transformIWantStatement() method\n\n  \n\t\n\t// Take a statement with \"you <something> me\" and transform it into \n\t// \"What makes you think that I <something> you?\"\n\tprivate String transformYouMeStatement(String statement)\n\t{\n\t\t//  Remove the final period, if there is one\n\t\tstatement = statement.trim();\n\t\tString lastChar = statement.substring(statement\n\t\t\t\t.length() - 1);\n\t\tif (lastChar.equals(\".\"))\n\t\t{\n\t\t\tstatement = statement.substring(0, statement\n\t\t\t\t\t.length() - 1);\n\t\t}\n\t\t\n\t\tint psnOfYou = findKeyword (statement, \"you\", 0);\n\t\tint psnOfMe = findKeyword (statement, \"me\", psnOfYou + 3);\n\t\t\n\t\tString restOfStatement = statement.substring(psnOfYou + 3, psnOfMe).trim();\n\t\treturn \"What makes you think that I \" + restOfStatement + \" you?\";\n\t}\n\t\n\t\n\n\t/**\n\t * Search for one word in phrase. The search is not case\n\t * sensitive. This method will check that the given goal\n\t * is not a substring of a longer string (so, for\n\t * example, \"I know\" does not contain \"no\").\n\t *\n\t * @param statement\n\t *            the string to search\n\t * @param goal\n\t *            the string to search for\n\t * @param startPos\n\t *            the character of the string to begin the\n\t *            search at\n\t * @return the index of the first occurrence of goal in\n\t *         statement or -1 if it's not found\n\t */\n\tprivate int findKeyword(String statement, String goal,\n\t\t\tint startPos)\n\t{\n\t\tString phrase = statement.trim().toLowerCase();\n\t\tgoal = goal.toLowerCase();\n\n\t\t// The only change to incorporate the startPos is in\n\t\t// the line below\n\t\tint psn = phrase.indexOf(goal, startPos);\n\n\t\t// Refinement--make sure the goal isn't part of a\n\t\t// word\n\t\twhile (psn >= 0)\n\t\t{\n\t\t\t// Find the string of length 1 before and after\n\t\t\t// the word\n\t\t\tString before = \" \", after = \" \";\n\t\t\tif (psn > 0)\n\t\t\t{\n\t\t\t\tbefore = phrase.substring(psn - 1, psn);\n\t\t\t}\n\t\t\tif (psn + goal.length() < phrase.length())\n\t\t\t{\n\t\t\t\tafter = phrase.substring(\n\t\t\t\t\t\tpsn + goal.length(),\n\t\t\t\t\t\tpsn + goal.length() + 1);\n\t\t\t}\n\n\t\t\t// If before and after aren't letters, we've\n\t\t\t// found the word\n\t\t\tif (((before.compareTo(\"a\") < 0) || (before\n\t\t\t\t\t.compareTo(\"z\") > 0)) // before is not a\n\t\t\t\t\t\t\t\t\t\t\t// letter\n\t\t\t\t\t&& ((after.compareTo(\"a\") < 0) || (after\n\t\t\t\t\t\t\t.compareTo(\"z\") > 0)))\n\t\t\t{\n\t\t\t\treturn psn;\n\t\t\t}\n\n\t\t\t// The last position didn't work, so let's find\n\t\t\t// the next, if there is one.\n\t\t\tpsn = phrase.indexOf(goal, psn + 1);\n\n\t\t}\n\n\t\treturn -1;\n\t}\n\t\n\t// Search for one word in phrase.  The search is not case sensitive.\n\t// This method will check that the given goal is not a substring of a longer string\n\tprivate int findKeyword(String statement, String goal)\n\t{\n\t\treturn findKeyword (statement, goal, 0);\n\t}\n\t\n\n\n\t// Pick a random response to use if nothing else fits.\n\tprivate String getRandomResponse()\n\t{\n\t\tfinal int NUMBER_OF_RESPONSES = 4;\n\t\tdouble r = Math.random();\n\t\tint whichResponse = (int)(r * NUMBER_OF_RESPONSES);\n\t\tString response = \"\";\n\t\t\n\t\tif (whichResponse == 0)\n\t\t{\n\t\t\tresponse = \"Interesting, tell me more.\";\n\t\t}\n\t\telse if (whichResponse == 1)\n\t\t{\n\t\t\tresponse = \"Hmmm.\";\n\t\t}\n\t\telse if (whichResponse == 2)\n\t\t{\n\t\t\tresponse = \"Do you really think so?\";\n\t\t}\n\t\telse if (whichResponse == 3)\n\t\t{\n\t\t\tresponse = \"You don't say.\";\n\t\t}\n\n\t\treturn response;\n\t}\n\n}",
        "isVisible": true
      },
      "MyClass.java": {
        "text": "import java.util.Scanner;\n\n/**\n * A simple class to run the Magpie class.\n * @author Laurie White\n * @version April 2012\n */\npublic class MyClass\n{\n\n\t/**\n\t * Create a Magpie, give it user input, and print its replies.\n\t */\n\tpublic static void main(String[] args)\n\t{\n\t\tMagpie4 maggie = new Magpie4();\n\t\t\n\t\tSystem.out.println (maggie.getGreeting());\n\t\tScanner in = new Scanner (System.in);\n\t\tString statement = in.nextLine();\n\t\t\n\t\twhile (!statement.equals(\"Bye\"))\n\t\t{\n\t\t\tSystem.out.println (maggie.getResponse(statement));\n\t\t\tstatement = in.nextLine();\n\t\t}\n\t}\n\n}",
        "isVisible": false
      }
    },
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-07-12T14:57:19.000Z",
  "level_num": "custom",
  "user_id": 18603,
  "audit_log": "[{\"changed_at\":\"2022-07-12 14:57:28 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-12 19:07:23 +0000\",\"changed\":[\"encrypted_examples\",\"long_instructions\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-12 19:44:51 +0000\",\"changed\":[\"encrypted_examples\",\"project_template_level_name\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-12 19:56:05 +0000\",\"changed\":[\"encrypted_examples\",\"long_instructions\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-13 00:43:20 +0000\",\"changed\":[\"encrypted_examples\",\"long_instructions\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-13 23:32:00 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-13 23:42:21 +0000\",\"changed\":[],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-13 23:42:24 +0000\",\"changed\":[],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-13 23:45:53 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-19 15:03:57 +0000\",\"changed\":[\"project_template_level_name\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-19 15:07:16 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-19 15:07:26 +0000\",\"changed\":[],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-19 15:07:31 +0000\",\"changed\":[],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-22 14:44:19 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-22 14:45:42 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-22 14:46:02 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-22 14:46:40 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-22 14:49:12 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-22 16:08:20 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
