<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**Write a no-argument constructor in the `Dessert`(#e7e8ea) class to assign default values for the instance variables.**\r\n\r\n🎒 **IMPORT:** Import your `Dessert`(#e7e8ea) class from your **Backpack**.\r\n\r\n*Don't have it, or it doesn't work? That's ok! Copy the code from* ***here*** *and paste it into a new file in your project.*\r\n\r\n✅ **TO DO:** Write a no-argument constructor in the `Dessert`(#e7e8ea) class and instantiate a `Dessert`(#e7e8ea) object.\r\n\r\n1. In the `Dessert`(#e7e8ea) class, write a no-argument constructor to assign default values for the instance variables:\r\n\r\n   * Assign a default value to the instance variable for the flavor, such as `\"plain\"`(#e7e8ea)\r\n\r\n   * Assign a default value to the instance variable for the price, such as `0.50`(#e7e8ea)\r\n\r\n2. In `FoodTruckRunner.java`(#e7e8ea):\r\n\r\n   **(a)** Instantiate a `Dessert`(#e7e8ea) object\r\n   \r\n   **(b)** Print the constructor for the `Dessert`(#e7e8ea) object to the console using `ClassInfo.getConstructors(nameOfObject)`(#e7e8ea)\r\n   \r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing a no-argument constructor and instantiating objects.\r\n\r\n📝 **COMMENT:** Be sure to add comments to note what your code does.\r\n\r\n🖥️ **TEST:** Test your program to check if your code achieves the expected result.\r\n\r\n🎉 **RUN:** Run your program to see the result of your code!\r\n\r\n## 🎯 Goal\r\n\r\n![](https://images.code.org/a9acff68a467ee9e5de6a5353a2fa784-image-1667831312260.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_validation": "+blWbpW6SQmgZ41IAQJSx6vpffdE9qhAZeT8d/BqleaZbjRJ+bXgnRzma8DZ\n4PZ3sd4oyHzN6jxZO+96039q379PNt0cd7IsmJnj+RT4bIASlSjVMeu/PUfi\nSoZzUjs+6OkqanBbnT8wDx2gxZi3HOiR/Td3Jybnok3kRUcblq80YiPb+39d\n1AnVOJX/hUgH6QlUxeNK9U2cb8/QbtkZ9UojYKEAr7FwnE43nPMbsQ2I+jZp\ndGjvRz/b+cc2vgIf4L57WTznJYaUc4DOtlqbNrVCG7qkPk9Pgxpmqmve2JUd\nMeM+/MNGW4BhdDJFTZLYYLSJsdyx9l0W2B2KrBfMDA84rOOksy1mA9KGpB+Q\nZy1WTxCVBsIUG1K3Z6LxkihS8yzTKoiWrqpC94xhFvGVqdwEjde5ZPeXD2GW\nJN/ODY0WWRiuoykTXBNiTXgqBMomCkT6oosNoonFfbpldO0mDIzg6DA4RfmD\nBMFXUk8C1eZmUHYQS3T1o+h8XezeOKxqQeJNj0PZau1T3IUIpedOMhjWe84x\nyJyNkIG5zXnpSKtjuSmfP3ZECIiUXhwF3GDymUXNHQlhvPxKsiT2TxrKwbVL\nmp7bUEfqA6U2kp9/9TOU2j90d5ElXRUp+oo3BoQ9DXRk/XhJBzo+ANi/9BTr\nNf+fCNnfHaJ8Zf3RtLZg5Kw0YZ+XDzt8QQFHuDZHs3JYB6LxHBermzZhpWbi\nLLu+88OsUXimc0G+zsW71QtWry6ya+C5C+OCzij36tBYa4SUDzfXOeTEuEw9\ndgsvtwLv+XrPEJFqr2vj4Uyh6JQ0XxCSXjU1fpUamPsxsVwSf0iIYj12njLz\nCaftjf4rIopwqOPoXMgYl6DBofd9xvy+tvqQBMfEobOQRm3BXVqj7KofEC6Z\nXPpOxHdzphueRWbY1Nkr8JAgTMUxdt75UnFoKrWtSejF4F+Fe5uCotwSPuTK\nb0hiAXNX8aWhH9uAqVpHz6wZYVgX5AOrh31p8bXmIPRtu1CZhMJmWeqnb3uu\nVLQogqjJnnvARb6Rn/NN83wxBmAzwLBaVy3d5M3X7ekq6qjNaVGEO6fSdBSj\nVn5U/X4BA/ctjVB+lPPmt9vXSCk0kbVyBn3hGETUjvi6IR5YpqeBPMnyKCL+\nHhYoW0ZM3Vs4+hpvX9/gcjWG7zBBajJKyU0NPRc3kW4M8W+rJSTFkNH2jXTD\nyaleT1oLoKTewc15+ievG67x8tRT8zOwITT9M4QJMGUq69P4S9RFPEg3Lc4V\n+gRy8u1oPdKj2kVhxZ7MKQuIN8M2LUNs0ZvsdeyJiQppEIjMO7BwNwJLHjm3\nhX1Fee9Zjx68lcawrqKPMIiRjF9G6+PezCfH5anAF3kvttC/kwKFnR3ryl88\nyUBIgM1g6nj64CUWQfCKvgYqJttcCC+iAe5mrfv5qLDlf0RAeQdr2r8Pp5Og\n/BKs3NuMu6Q93sur4LJYCxB5FeSbhYIhyg9ZQSiUNF13rgsRPNO9B2scJo9k\ngRh11nDMdrI3ovcus4YMEW3hZSxxWtfhVlSopBBYnguorOEbo8e89lC1xOQh\newE1J+KG7OgteqMmIIwbdSVEt7i1whTYd0q6T+HRbYWKZwBhSXcavcB+7sQU\n5hwjc0Rl1h8K6R/qt5JsOUxpnCVzBB7leFnRoOqa6vnl7RPAb0SZwOVAFnyH\nZhoTQ1HQKZ61HcVoLZnFNqWeBys6X8cSRbCkatNOtPn5DqYyaFr5sxeBw+o0\n2RahLqcXWEoJIXsJEH6X/A3dCTu9E6/6UArFIjv4ObyGSgvfFxFLeNxcUMAP\nVVRUPSy1k6dWaw==\n",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Dessert object and use ClassInfo.getConstructors(nameOfObject)\n     * to print the constructor for the Dessert object to the console.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ClassInfo.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ClassInfo {\n\n  public static String getAttributes(Object testObject) {\n    Class objectClass = testObject.getClass();\n    Class objectSuperClass = objectClass.getSuperclass();\n    \n    Field[] objectFields = objectClass.getDeclaredFields();\n    Field[] superFields = objectSuperClass.getDeclaredFields();\n    \n    ArrayList<String> classFieldsList = convertToList(Arrays.toString(objectFields));\n    ArrayList<String> superFieldsList = convertToList(Arrays.toString(superFields));\n\n    String className = objectClass.getSimpleName();\n    String superClassName = objectSuperClass.getSimpleName();\n    \n    String heading = \"\\n------------------------------\\n\";\n    \n    String classFieldsText = cleanFields(classFieldsList, className);\n    String superFieldsText = cleanFields(superFieldsList, superClassName);\n\n    String result = className + \" Attributes \" + heading + classFieldsText;\n\n    if (!superClassName.equals(\"Object\")) {\n      result += \"\\n>> inherited from \" + superClassName + \" class <<\\n\" + superFieldsText;\n    }\n\n    return result;\n  }\n\n  public static ArrayList<String> convertToList(String result) {\n    result = result.substring(1, result.length() - 1);\n    ArrayList<String> classFields = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = result.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = result.substring(0, comma);\n      classFields.add(currentField);\n      result = result.substring(comma + 2);\n      comma = result.indexOf(\",\");\n    }\n\n    classFields.add(result);\n    return classFields;\n  }\n\n  public static String cleanFields(ArrayList<String> classFields, String className) {\n    String result = \"\";\n\n    for (int index = 0; index < classFields.size(); index++) {\n      String currentField = classFields.get(index);\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      result += currentField + \"\\n\";\n    }\n\n    return result;\n  }\n\n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n\n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n\n  public static String getConstructors(Object testObject) {\n    Class objectClass = testObject.getClass();\n    String className = objectClass.getSimpleName();\n    Constructor[] objectConstructors = objectClass.getDeclaredConstructors();\n    \n    ArrayList<String> constructorsList = convertToList(Arrays.toString(objectConstructors));\n\n    String heading = \"\\n------------------------------\\n\";\n    String result = className + \" Constructors \" + heading;\n\n    for (String current : constructorsList) {\n      result += current + \"\\n\";\n    }\n    \n    return result;\n  }\n\n  public static String getValue(List<String> output, String lineToFind) {\n    String outputText = \"\";\n    String valueResult = \"\";\n\n    for (int index = 0; index < output.size(); index++) {\n      String current = output.get(index);\n      \n      if (current.indexOf(lineToFind) >= 0) {\n        outputText = current;\n        valueResult = outputText.substring(lineToFind.length());\n      }\n    }\n    \n    return valueResult.trim();\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 1
      }
    },
    "encrypted_exemplar_sources": "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\nguXuD536kZgpF5jp2K4AjXkhE8w+9gA=\n"
  },
  "game_id": 68,
  "created_at": "2022-11-03T19:24:12.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:24:12.775+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L5d_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L5d_2023\"},{\"changed_at\":\"2022-11-03 19:24:14 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 22:04:59 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:26:20 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:27:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:27:13 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:27:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:28:35 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:33:03 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 14:33:16 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
