<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyFoodTruck.java": {
        "text": "public class MyFoodTruck {\n  public static void main(String[] args) {\n\n\tString[] quantities = {\"2\", \"4\", \"6\", \"8\", \"10\"};\n    String[] prices = {\"2.99\", \"1.99\", \"0.50\", \"1.75\", \"3.50\"};\n\n    int[] fixedQuantities = Owner.fixInventory(quantities);\n    double[] fixedPrices = Owner.fixPrices(prices);\n\n    for (int i = 0; i < fixedQuantities.length; i++) {\n      System.out.println(fixedQuantities[i]);\n      System.out.println(fixedPrices[i]);\n    }\n    \n  }\n}",
        "isVisible": true
      },
      "Dessert.java": {
        "text": "public class Dessert {\n\tprivate String flavor;\n\tprivate int quantity;\n\tprivate double price;\n\t\n\tpublic Dessert(String newFlavor, int newQty, double newPrice) {\n\t\tflavor = newFlavor;\n\t\tquantity = newQty;\n\t\tprice = newPrice;\n\t}\n\t\n\tpublic String getFlavor() {\n\t\treturn flavor;\n\t}\n\t\n\tpublic int getQuantity() {\n\t\treturn quantity;\n\t}\n\t\n\tpublic double getPrice() {\n\t\treturn price;\n\t}\n\t\n\tpublic void setFlavor(String newFlavor) {\n\t\tflavor = newFlavor;\n\t}\n\t\n\tpublic void setQuantity(int newQty) {\n\t\tquantity = newQty;\n\t}\n\t\n\tpublic void setPrice(double newPrice) {\n\t\tprice = newPrice;\n\t}\n\t\n\tpublic String toString() {\n\t\treturn \"Flavor = \\\"\" + flavor + \"\\\",\\nQuantity = \" + quantity + \",\\nPrice = \" + price;\n\t}\n\t\n\tpublic void printInfo() {\n\t\tSystem.out.println(this);\n\t}\n}",
        "isVisible": true
      },
      "Cake.java": {
        "text": "public class Cake extends Dessert {\n\tprivate int layers;\n\tprivate String topping;\n\t\n\tpublic Cake(String flavor, int quantity, double price, int layers, String topping) {\n\t\tsuper(flavor, quantity, price);\n\t\tthis.layers = layers;\n\t\tthis.topping = topping;\n\t}\n\t\n\tpublic int getLayers() {\n\t\treturn layers;\n\t}\n\t\n\tpublic String getTopping() {\n\t\treturn topping;\n\t}\n\t\n\tpublic void setLayers(int newLayers) {\n\t\tif (layers > 0) {\n\t\t\tsetPrice(getPrice() * newLayers / getLayers());\n\t\t\tlayers = newLayers;\n\t\t}\n\t}\n}",
        "isVisible": true
      },
      "Cookie.java": {
        "text": "// CHOICE LEVEL\n\npublic class Cookie extends Dessert {\n\tprivate int diameter;\n\tprivate boolean isChewy;\n\t\n\tpublic Cookie(String flavor, int quantity, double price, int diameter, boolean isChewy) {\n\t\tsuper(flavor, quantity, price);\n\t\tthis.diameter = diameter;\n\t\tthis.isChewy = isChewy;\n\t}\n\t\n\tpublic int getDiameter() {\n\t\treturn diameter;\n\t}\n\t\n\tpublic boolean getChewy() {\n\t\treturn isChewy;\n\t}\n\t\n\tpublic void setDiameter(int newDiameter) {\n\t\tthis.diameter = newDiameter;\n\t}\n\t\n\tpublic void setChewy(boolean isChewy) {\n\t\tthis.isChewy = isChewy;\n\t}\n}",
        "isVisible": true
      },
      "Cupcake.java": {
        "text": "// CHOICE LEVEL\n\npublic class Cupcake extends Dessert {\n\tprivate String frostingFlavor;\n\tprivate boolean hasSprinkles;\n\t\n\tpublic Cupcake(String flavor, int quantity, double price,\n\t\t\tString frostingFlavor, boolean hasSprinkles) {\n\t\tsuper(flavor, quantity, price);\n\t\tthis.frostingFlavor = frostingFlavor;\n\t\tthis.hasSprinkles = hasSprinkles;\n\t}\n\t\n\tpublic String getFrostingFlavor() {\n\t\treturn frostingFlavor;\n\t}\n\t\n\tpublic boolean getSprinkles() {\n\t\treturn hasSprinkles;\n\t}\n\t\n\tpublic void setFrostingFlavor(String newFlavor) {\n\t\tthis.frostingFlavor = newFlavor;\n\t}\n\t\n\tpublic void setSprinkles(boolean hasSprinkles) {\n\t\tthis.hasSprinkles = hasSprinkles;\n\t}\n}",
        "isVisible": true
      },
      "Donut.java": {
        "text": "// CHOICE LEVEL\n\npublic class Donut extends Dessert {\n\tprivate boolean hasFilling;\n\tprivate boolean hasSprinkles;\n\t\n\tpublic Donut (String flavor, int quantity, double price,\n\t\t\tboolean hasFilling, boolean hasSprinkles) {\n\t\tsuper(flavor, quantity, price);\n\t\tthis.hasFilling = hasFilling;\n\t\tthis.hasSprinkles = hasSprinkles;\n\t}\n\t\n\tpublic boolean getFilling() {\n\t\treturn hasFilling;\n\t}\n\t\n\tpublic boolean getSprinkles() {\n\t\treturn hasSprinkles;\n\t}\n\t\n\tpublic void setFilling(boolean hasFilling) {\n\t\tthis.hasFilling = hasFilling;\n\t}\n\t\n\tpublic void setSprinkles(boolean hasSprinkles) {\n\t\tthis.hasSprinkles = hasSprinkles;\n\t}\n}",
        "isVisible": true
      },
      "Pie.java": {
        "text": "// CHOICE LEVEL\n\npublic class Pie extends Dessert {\n\tprivate String filling;\n\tprivate boolean hasCrust;\n\t\n\tpublic Pie(String flavor, int quantity, double price, String filling, boolean hasCrust) {\n\t\tsuper(flavor, quantity, price);\n\t\tthis.filling = filling;\n\t\tthis.hasCrust = hasCrust;\n\t}\n\t\n\tpublic String getFilling() {\n\t\treturn filling;\n\t}\n\t\n\tpublic boolean getCrust() {\n\t\treturn hasCrust;\n\t}\n\t\n\tpublic void setFilling(String newFilling) {\n\t\tthis.filling = newFilling;\n\t}\n\t\n\tpublic void setCrust(boolean hasCrust) {\n\t\tthis.hasCrust = hasCrust;\n\t}\n}",
        "isVisible": true
      },
      "FoodTruck.java": {
        "text": "public class FoodTruck {\n\tprivate String owner;\n\tprivate Dessert newDessert;\n\t\n\tpublic FoodTruck(String owner, Dessert newDessert) {\n\t\tthis.owner = owner;\n\t\tthis.newDessert = newDessert;\n\t}\n\t\n\tpublic String toString() {\n\t\treturn \"The owner is \" + owner + \"\\n\\nThe food truck has:\\n\" + this.newDessert;\n\t}\n\t\n\tpublic void printTruckInfo() {\n\t\tSystem.out.println(this);\n\t}\n}",
        "isVisible": true
      },
      "Owner.java": {
        "text": "public class Owner {\n  private String name;\n  private int numTrucks;\n  private int numDesserts;\n  \n  private int[][] inventory = {{6, 3, 12},\n                               {5, 2, 10},\n                               {8, 4, 11},\n                               {9, 1, 7} };\n  \n  private double[][] prices = {{10.00, 7.00, 1.00},\n                               {9.50, 7.00, 1.25},\n                               {12.00, 6.50, 0.75},\n                               {11.50, 6.00, 1.00} };\n  \n  \n  public Owner(String name, int numTrucks, int numDesserts) {\n    this.name = name;\n    this.numTrucks = numTrucks;\n    this.numDesserts = numDesserts;\n  }\n  \n  public String getName() {\n    return name;\n  }\n  \n  public int getNumTrucks() {\n  \treturn numTrucks;\n  }\n  \n  public int getNumDesserts() {\n    return numDesserts;\n  }\n  \n  public void setNumTrucks(int numTrucks) {\n    this.numTrucks = numTrucks;\n  }\n  \n  public void setNumDesserts(int numDesserts) {\n    this.numDesserts = numDesserts;\n  }\n  \n  public int[] getTruckQuantity(int foodTruckNum) {\n    return inventory[foodTruckNum - 1];\n  }\n  \n  public double[] getTruckPrices(int foodTruckNum) {\n    return prices[foodTruckNum - 1];\n  }\n  \n  // choice level\n  public void halfPriceCakes() {\n    prices[0][0] /= 2;\n    prices[1][0] /= 2;\n    prices[2][0] /= 2;\n    prices[3][0] /= 2;\n  }\n  \n  // choice level\n  public void sellAllDonuts() {\n    inventory[0][2] = 0;\n    inventory[1][2] /= 0;\n    inventory[2][2] /= 0;\n    inventory[3][2] /= 0;\n  }\n  \n  // choice level\n  public void addTenPies() {\n    inventory[0][1] += 10;\n    inventory[1][1] += 10;\n    inventory[2][1] += 10;\n    inventory[3][1] += 10;\n  }\n  \n  public double calcAveragePrice() {\n    double totalPrice = 0.0;\n    int items = 0;\n    \n    for (int i = 0; i < prices.length; i++) {\n      for (int j = 0; j < prices[0].length; j++) {\n        totalPrice += prices[i][j];\n        items++;\n      }\n    }\n    \n    return totalPrice / items;\n  }\n  \n  public boolean checkSpecial() {\n    for (int i = 0; i < inventory.length; i++) {\n      for (int j = 0; j < inventory.length; j++) {\n        if (inventory[i][j] % 6 != 0) {\n          return false;\n         }\n       }\n     }\n    \n    return true;\n  }\n  \n  public int checkQuantities() {\n    int items = 0;\n    \n    for (int i = 0; i < inventory.length; i++) {\n      for (int j = 0; j < inventory.length; j++) {\n        if (inventory[i][j] > 16) {\n          items++;\n         }\n       }\n     }\n    \n    return items;\t\t\n  }\n  \n  public void calcDessertsInventory() {\n    \n    for (int col = 0; col < inventory[0].length; col++) {\n      // Counter to keep track of the inventory total\n      int colTotal = 0;\n      \n      // Iterates through each element down the column\n      for (int row = 0; row < inventory.length; row++) {\n        colTotal += inventory[row][col];\n       }\n      \n      // Prints the inventory total for the column\n      System.out.println(colTotal);\n     }\n   }\n    \n    public void printPrices() {\n      for (int col = 0; col < prices[0].length; col++) {\n        for (int row = 0; row < prices.length; row++) {\n          System.out.println(prices[row][col]);\n         }\n         System.out.println(\" \");\n       }\n    }\n\n  public static int[] fixInventory(String[] oldInventory) {\n    int[] correctInventory = new int[oldInventory.length];\n    \n\tfor (int i = 0; i < oldInventory.length; i++) {\n      correctInventory[i] = Integer.parseInt(oldInventory[i]);\n    }\n\n    return correctInventory;\n  }\n\n  public static double[] fixPrices(String[] oldPrices) {\n    double[] correctPrices = new double[oldPrices.length];\n    \n\tfor (int i = 0; i < oldPrices.length; i++) {\n      correctPrices[i] = Double.parseDouble(oldPrices[i]);\n    }\n\n    return correctPrices;\n  }\n}",
        "isVisible": true
      }
    },
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2021-08-09T13:33:29.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "audit_log": "[{\"changed_at\":\"2021-08-09 13:35:07 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 13:35:52 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-13 16:07:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-13 16:15:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-13 19:16:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-13 19:16:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-13 19:18:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-13 19:19:51 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"}]"
}]]></config>
</Javalab>
