<Javalab>
  <config><![CDATA[{
  "properties": {
    "start_sources": {
      "MyPoetry.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class MyPoetry {\n  public static void main(String[] args) throws FileNotFoundException {\n\n    File poemWords = new File(\"poem_words.txt\");\n    CodePoetry myPoem = new CodePoetry(\"Jamila\", \"A Poem About Nothing\", poemWords);\n\n    ArrayList<String> theWords = myPoem.read();\n    System.out.print(\"ORIGINAL: \");\n    myPoem.print(theWords);\n\n    myPoem.change(theWords);\n    System.out.print(\"AFTER CHANGE: \");\n    myPoem.print(theWords);\n\n    myPoem.removeNot(theWords);\n    myPoem.print(theWords);\n\n    Scanner input = new Scanner(System.in);\n    System.out.println(\"Let's add some words to the poem!\");\n    System.out.print(\"How many words do you want to add? \");\n    int numWords = input.nextInt();\n    myPoem.addWords(theWords, numWords);\n    myPoem.print(theWords);\n  }\n}",
        "isVisible": true
      },
      "CodePoetry.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\npublic class CodePoetry {\n\tprivate String author;\t\t\t\t\t\t// Every poem has an author.\n\tprivate String title;\t\t\t\t\t\t// Every poem has a title.\n\tprivate File words;\t\t\t\t\t\t\t// Every poem has a file that has the words.\n\n\t/**\n\t * Creates a CodePoetry object with an author and a title\n\t * @param author the author of the poem\n\t * @param title the title of the poem\n\t */\n\tpublic CodePoetry(String author, String title, File words) {\n\t\tthis.author = author;\t\t\t\t\t// We know the author when the poem is written.\n\t\tthis.title = title;\t\t\t\t\t\t// And we know the title too.\n\t\tthis.words = words;\t\t\t\t\t\t// A poem is not a poem without words.\n\t}\n\t\n\t/**\n\t * Gets the author of the poem\n\t * @return the poem's author\n\t */\n\tpublic String getAuthor() {\t\t\t\t\t// If you ever forget who the author is,\n\t\treturn author;\t\t\t\t\t\t\t// I can give you the author's name.\n\t}\n\t\n\t/**\n\t * Gets the title of the poem\n\t * @return the poem's title\n\t */\n\tpublic String getTitle() {\t\t\t\t\t// If you ever forget the name of the poem,\n\t\treturn title;\t\t\t\t\t\t\t// I can give you the title.\n\t}\n\t\n\t/**\n\t * Gets the words of the poem\n\t * @return the poem's words\n\t */\n\tpublic File getWords() {\t\t\t\t\t// If you forget where the poem is saved,\n\t\treturn words;\t\t\t\t\t\t\t// I can give you the name of the file.\n\t}\n\t\n\t/**\n\t * Changes the author of the poem\n\t * @param newAuthor the new author\n\t */\n\tpublic void setAuthor(String newAuthor) {\t// If you want to change the author,\n\t\tthis.author = newAuthor;\t\t\t\t// I can change it to the new author.\n\t}\n\t\n\t/**\n\t * Changes the title of the poem\n\t * @param newTitle the new title\n\t */\n\tpublic void setTitle(String newTitle) {\t\t// If you want to change the title,\n\t\tthis.title = newTitle;\t\t\t\t\t// I can change it to a new title.\n\t}\n\t\n\t/**\n\t * Changes the words of the poem\n\t * @param newWords the new words\n\t */\n\tpublic void setWords(File newWords) {\t\t// If you want to change the poem entirely,\n\t\tthis.words = newWords;\t\t\t\t\t// I can change it to the new file.\n\t}\n\n  /**\n   * Creates a String containing the title and author\n   * @return the title and author of the poem\n   */\n  public String toString() {\t\t\t\t\t// Or if you just need a reminder,\n    return title + \" by \" + author;\t\t\t\t// I can tell you the title and the author.\n  }\n\t\n\t/**\n\t * Gets the text from the file\n\t * @return the poem text from the file\n\t */\n\tpublic ArrayList<String> read() throws FileNotFoundException {\n\t\tArrayList<String> poemText = new ArrayList<String>();\t// I have no words yet,\n\t\tScanner input = new Scanner(words);\t\t\t\t\t\t// so I have to scan them in.\n\t\t\n\t\twhile (input.hasNextLine()) {\t\t\t\t\t\t\t// While I have words to read\n\t\t\tpoemText.add(input.nextLine());\t\t\t\t\t\t// I will add them to my text.\n\t\t}\n\t\t\n\t\tinput.close();\t\t\t\t\t\t\t\t\t\t\t// Then I am done,\n\t\t\n\t\treturn poemText;\t\t\t\t\t\t\t\t\t\t// and can give you the words.\n\t}\n\n  /**\n   * Creates and prints a String containing the words in the list\n   */\n  public void print(ArrayList<String> theWords) {\n    String words = \"\";\t\t\t\t\t\t\t\t\t\t\t// I start with no words.\n    \n    for (int i = 0; i < theWords.size(); i++) {\t\t\t\t\t// I go through my list of words,\n      words += theWords.get(i) + \" \";\t\t\t\t\t\t\t// piecing them together into one String.\n    }\n\n    System.out.println(words);\t\t\t\t\t\t\t\t\t// Then, I print the text.\n  }\n\n  /**\n   * Changes words that are less than 4 letters\n   */\n  public void change(ArrayList<String> theWords) {\n    Scanner input = new Scanner(System.in);\t\t\t\t\t\t// I need to scan for new words.\n    \n    for (int i = 0; i < theWords.size(); i++) {\t\t\t\t\t// But first I need to go through the list.\n      String currentWord = theWords.get(i);\t\t\t\t\t\t// I get the current word from the list,\n\n      if (currentWord.length() < 4) {\t\t\t\t\t\t\t// and check its length.\n        System.out.println(\"\\\"\" + currentWord + \"\\\" is too short.\"); \t// I'll tell the reader if it's too short\n        System.out.print(\"Enter another word: \");\t\t\t\t\t\t// and tell them to give another word,\n        String newWord = input.nextLine();\t\t\t\t\t\t// making the new word be whatever they enter,\n        theWords.set(i, newWord);\t\t\t\t\t\t\t\t// and replacing the short word with the new word.\n      }\n    }\n\n    input.close();\t\t\t\t\t\t\t\t\t\t\t\t// When I'm done, I can stop scanning.\n  }\n\n  /**\n   * Removes words that contains \"not\"\n   */\n  public void removeNot(ArrayList<String> theWords) {\n    for (int i = 0; i < theWords.size(); i++) {\t\t\t\t\t// First I need to look at each word,\n      String currentWord = theWords.get(i);\t\t\t\t\t\t// setting the current word to each one as I go.\n\n      if (currentWord.indexOf(\"not\") >= 0) {\t\t\t\t\t// If the location of \"not\" is greater than or equal to 0,\n        theWords.remove(i);\t\t\t\t\t\t\t\t\t\t// remove the word,\n        i--;\t\t\t\t\t\t\t\t\t\t\t\t\t// and move the index back down.\n      }\n    }\n  }\n\n  /**\n   * Adds words to the list that are given by the reader\n   */\n  public void addWords(ArrayList<String> theWords, int count) {\n    Scanner input = new Scanner(System.in);\t\t\t\t\t\t// I need to be able to scan for words.\n    int numWords = 0;\t\t\t\t\t\t\t\t\t\t\t// Right now, I have no words.\n    \n    while (numWords < count) {\t\t\t\t\t\t\t\t\t// But while the words I have is less than\n      System.out.print(\"Enter a word to add to the poem: \");\t// the words I am asking from the reader,\n      String newWord = input.nextLine();\t\t\t\t\t\t// I will keep getting words from the reader\n      \n      newWord = chopTheWord(newWord);\t\t\t\t\t\t\t// chopping them up,\n      theWords.add(newWord);\t\t\t\t\t\t\t\t\t// and adding them to the words of my poem.\n      \n      numWords++;\t\t\t\t\t\t\t\t\t\t\t\t// Then I'll move on to the next.\n    }\n  }\n\n  /**\n   * Chops either the first half of the word or after a \"the\"\n   * @return the chopped word\n   */\n  public String chopTheWord(String word) {\n\tString chopped = \"\";\t\t\t\t\t\t\t\t\t\t// Right now, I have no chopped word.\n    int theIndex = word.indexOf(\"the\");\t\t\t\t\t\t\t// First I need to check if \"the\" is in the word.\n    \n    if (theIndex >= 0) {\t\t\t\t\t\t\t\t\t\t// If \"the\" is in the word,\n      chopped = word.substring(theIndex + 3);\t\t\t\t\t// I will get everything after \"the\".\n    }\n    else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Otherwise,\n      chopped = word.substring(0, word.length() / 2);\t\t\t// I'll just cut the word in half!\n    }\n\n    return chopped;\t\t\t\t\t\t\t\t\t\t\t\t// Either way, I will give the chopped word.\n  }\n}",
        "isVisible": true
      },
      "poem_words.txt": {
        "text": "pizza\nis\nnot\ngreat",
        "isVisible": true
      }
    }
  },
  "published": true,
  "level_num": "custom",
  "game_id": 68,
  "created_at": "2021-08-09T14:18:34.000Z",
  "user_id": 9271,
  "audit_log": "[{\"changed_at\":\"2021-08-09 14:28:07 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 14:45:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 14:53:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:06:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:07:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:07:57 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:10:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:17:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:19:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:26:17 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:26:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:27:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:28:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:28:41 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:29:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:29:43 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 15:31:29 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 17:57:18 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 17:57:22 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 17:58:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-09 17:58:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"}]"
}]]></config>
</Javalab>
