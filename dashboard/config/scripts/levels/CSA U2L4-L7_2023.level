<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**The owner of the Joyful Pastries food truck wants to create desserts with specific flavors and prices.**\r\n\r\n🎒 **IMPORT:** Import your `Dessert`(#e7e8ea) class from your **Backpack**.\r\n\r\n*Don't have it, or it doesn't work? That's ok! Copy the code from* ***here*** *and paste it into a new file in your project.*\r\n\r\n✅ **TO DO #1:** Write a parameterized constructor in the `Dessert`(#e7e8ea) class that assigns specific values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #2:** Refactor the no-argument constructor to assign default values to the instance variables using the `this`(#e7e8ea) keyword.\r\n\r\n✅ **TO DO #3:** In `FoodTruckRunner.java`(#e7e8ea), instantiate `Dessert`(#e7e8ea) objects using each constructor.\r\n\r\n✅ **TO DO #4:** Print the constructors for the `Dessert`(#e7e8ea) objects.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with writing parameterized constructors, using the `this`(#e7e8ea) keyword, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate Dessert objects using the no-argument and parameterized\n     * constructors. Then use ConstructorsHelper.printConstructors(nameOfObject)\n     * to print the constructors for the Dessert objects to the console.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 1
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-this-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_exemplar_sources": "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\n"
  },
  "game_id": 68,
  "created_at": "2022-11-17T23:11:56.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-17T23:11:56.603+00:00\",\"changed\":[\"cloned from \\\"CSA U2L4-L6d_2023\\\"\"],\"cloned_from\":\"CSA U2L4-L6d_2023\"},{\"changed_at\":\"2022-11-17 23:12:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:58:20 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:58:56 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:00:50 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:02:58 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:21:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:21:35 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:21:57 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:21:58 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:27:49 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:32:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 21:32:51 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
