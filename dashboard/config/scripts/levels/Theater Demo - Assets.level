<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "General Theater demos and tests.",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "start_sources": {
      "MyConcert.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class MyConcert {\n  public static void main(String[] args) throws FileNotFoundException {\n\n    Stage myStage = Theater.stage;\n\n    System.out.println(\"Welcome to The Theater!\");\n    \n    CharacterStory myConcert = new CharacterStory(\"animal21.png\", \"home06.png\");\n\n    /* Test individual methods from CharacterStory by commenting\n\t * commenting out the myConcert.playConcert() below and then\n\t * calling the method in your concert that you want to test.\n     */\n    \n    myConcert.playConcert();\n\n\n\n    \n  }\n}",
        "isVisible": true
      },
      "CharacterStory.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class CharacterStory {\n  private Stage myStage = Theater.stage;\t\t\t// where images and drawings are displayed\n  private String myCharacter;\t\t\t\t\t\t// the main character of your story\n  private String characterHome;\t\t\t\t\t\t// the main character's home\n\n  public CharacterStory(String myCharacter, String characterHome) {\n    this.myCharacter = myCharacter;\n    this.characterHome = characterHome;\n  }\n\n  // LESSON 2 - SCENE 1\n  public void showIntroduction() throws FileNotFoundException {    \n    // TO DO: Display the image of your character's home.\n\tmyStage.drawImage(characterHome, 0, 0, myStage.getWidth(), myStage.getHeight(), 0);\n\n    // TO DO: Display the image of your character.\n    myStage.drawImage(myCharacter, 200, 200, 100, 100, 20);\n\n    // TO DO: Add more notes to the song.\n    int[] notes = {75, 74, 77, 80, 60, 62, 64, 66};\n\n    // TO DO: Play the notes you added and modify how the notes are played.\n    // Student modifications will vary.\n    myStage.playNoteAndPause(Instrument.PIANO, notes[0], 1);\n\n\tmyStage.playNoteAndPause(Instrument.PIANO, notes[0], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[1], 0.5);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[0], 1);\n    \n    myStage.playNoteAndPause(Instrument.PIANO, notes[0], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[1], 0.5);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[0], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[2], 0.5);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[2], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[3], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[3], 1);\n\n    myStage.playNoteAndPause(Instrument.PIANO, notes[4], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[5], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[6], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[7], 1);\n  }\n  \n\n  // LESSON 4 - SCENE 2 PART A\n  public void drawShapes() {\n    // TO DO: Create an array of colors for the fill.\n\tColor[] fillColors = {Color.RED, Color.YELLOW, Color.PURPLE, Color.ORANGE, Color.BLUE};\n\n    // TO DO: Create an array of colors for the stroke.\n\tColor[] strokeColors = {Color.BLACK, Color.GOLD, Color.GREEN, Color.RED, Color.PURPLE};\n\n    // TO DO: Set the stroke width.\n    myStage.setStrokeWidth(2);\n    \n    // TO DO: Loop through one of the color arrays and draw rectangles and circles.\n\tint width = 0;\n    int height = 0;\n    \n    for (int index = 0; index < fillColors.length; index++) {\n      myStage.setFillColor(fillColors[index]);\n      myStage.setStrokeColor(strokeColors[index]);\n\n      width += 40;\n      height += 40;\n      \n      int xPos = (myStage.getWidth() / 2) - (width / 2);\n      int yPos = (myStage.getHeight() / 2) - (height / 2);\n\n      myStage.drawRectangle(xPos, yPos, width, height);\n      myStage.drawEllipse(xPos, yPos, width, height);\n\n      myStage.pause(1);\n    }\n  }\n  \n\n  // LESSON 4 - SCENE 2 PART B [LEVEL 5]\n  public void showFavoriteFoodsOriginal() throws FileNotFoundException {\n    myStage.drawImage(characterHome, 0, 0, myStage.getWidth(), myStage.getHeight(), 0);\n    myStage.drawImage(myCharacter, 100, 100, 200, 200, 0);\n    \n    // TO DO: Create an array of food images.\n\tString[] foods = {\"food05.png\", \"food09.png\", \"food13.png\", \"food15.png\", \"food19.png\"};\n    \n    // TO DO: Loop through the array of foods to display each food and play the sound effect.\n\tint index = 0;\n\n    while (index < foods.length) {\n      myStage.playSound(\"winning.wav\");\n      myStage.drawImage(foods[index], 200, 300, 50, 50, 0);\n      \n      myStage.pause(1);\n      \n      index++;\n    }\n  }\n\n\n  // LESSON 4 - SCENE 2 PART B [LEVEL 6]\n  public void showFavoriteFoods() throws FileNotFoundException {\n    myStage.drawImage(characterHome, 0, 0, myStage.getWidth(), myStage.getHeight(), 0);\n    myStage.drawImage(myCharacter, 100, 100, 200, 200, 0);\n    \n    // TO DO: Create an array of food images.\n\tString[] foods = {\"food05.png\", \"food09.png\", \"food13.png\", \"food15.png\", \"food19.png\"};\n    \n    // TO DO: Loop through the array of foods to display each food and play the sound effect.\n\tint index = 0;\n    int xPos = 50;\n    int yPos = 50;\n\n    while (index < foods.length) {\n      myStage.playSound(\"winning.wav\");\n      myStage.drawImage(foods[index], xPos, yPos, 50, 50, 0);\n\n      if (index < 2) {\n        yPos += 100;\n      }\n\n      if (index == 2) {\n        yPos = 50;\n        xPos += 250;\n      }\n\n      if (index > 2) {\n        yPos += 100;\n      }\n      \n      myStage.pause(1);\n      \n      index++;\n    }\n  }\n  \n\n  // LESSON 5 - SCENE 3\n  public void showFriends() throws FileNotFoundException {\n    // TO DO: Create an array of Animal objects.\n\tChicken chicken = new Chicken(\"chicken.png\", \"chicken.wav\");\n    Cow cow = new Cow(\"cow.png\", \"cow.wav\");\n    Elephant elephant = new Elephant(\"elephant.png\", \"elephant.wav\");\n    Horse horse = new Horse(\"horse.png\", \"horse.wav\");\n    Monkey monkey = new Monkey(\"monkey.png\", \"monkey.wav\");\n    Animal[] animals = {chicken, cow, elephant, horse, monkey};\n\n    // TO DO: Loop through the array of animals to display each animal and play their sound.\n\tfor (int i = 0; i < animals.length; i++) {\n      myStage.drawImage(characterHome, 0, 0, myStage.getWidth(), myStage.getHeight(), 0);\n      animals[i].show();\n      animals[i].speak();\n      myStage.pause(7);\n    }\n  }\n  \n\n  // LESSON 6 - SCENE 4 PART A\n  public void playUnicornMusic() throws FileNotFoundException {\n    // TO DO: Create an array of notes.\n\n\n    // TO DO: Play the array of notes.\n\n  }\n  \n\n  // LESSON 6 - SCENE 4 PART B\n  public void showUnicorn() throws FileNotFoundException {\n    String[] unicornRunning = {\"unicornRunning01.png\", \"unicornRunning02.png\", \"unicornRunning03.png\", \"unicornRunning04.png\",\n                               \"unicornRunning05.png\", \"unicornRunning06.png\", \"unicornRunning07.png\"};\n    \n    String[] unicornJumping = {\"unicornJumping01.png\", \"unicornJumping02.png\", \"unicornJumping03.png\", \"unicornJumping04.png\",\n                               \"unicornJumping05.png\", \"unicornJumping06.png\", \"unicornJumping07.png\"};\n\n    // TO DO: Refactor the loop as an enhanced for loop to display the unicorn running.\n    for (int i = 0; i < unicornRunning.length; i++) {\n      myStage.drawImage(\"gradient.png\", 0, 0, myStage.getWidth(), myStage.getHeight(), 0);\n      myStage.drawImage(unicornRunning[i], 200, 200, 150, 150, 0);\n      myStage.pause(1);\n      myStage.clear(Color.WHITE);\n    }\n\n    // TO DO: Refactor the loop as an enhanced for loop to display the unicorn jumping.\n    int index = 0;\n\n    while (index < unicornJumping.length) {\n      myStage.drawImage(\"gradient.png\", 0, 0, myStage.getWidth(), myStage.getHeight(), 0);\n      myStage.drawImage(unicornJumping[index], 200, 200, 150, 150, 0);\n      index++;\n      myStage.pause(1);\n      myStage.clear(Color.WHITE);\n    }\n  }\n\n  \n  // LESSON 7 - SCENE 5\n  public void showCity() throws FileNotFoundException {\n    // TO DO: Create an array of samples from a sound.\n\n\n    // TO DO: Display an image of a city during the day.\n\n\n    // TO DO: Display the image of your character.\n\n\n    // TO DO: Play the array of samples.\n\n\n    // TO DO: Increase the volume and play the samples again.\n\n\n    // TO DO: Display an image of a city at night.\n\n\n    // TO DO: Display the image of your character.\n\n\n    // TO DO: Decrease the volume twice and play the samples again.\n\n  }\n\n  \n  // LESSON 9 - SCENE 6\n  public void showOcean() throws FileNotFoundException {\n    // TO DO: Display an image of an ocean.\n    \n\n    // TO DO: Create an aray of samples from a sound.\n\n\n    // TO DO: Create an array of fish images.\n\n\n    // TO DO: Play the aray of samples.\n\n\n    // TO DO: Display the image of your character.\n    \n\n    // TO DO: Loop through the array of fish to display each fish.\n\n\n    // TO DO: Apply find() on the array of samples and play the samples again.\n    \n  }\n  \n\n  // LESSON 10 - SCENE 7\n  public void showSpace() throws FileNotFoundException {\n    // TO DO: Display an image of space.\n    \n\n    // TO DO: Create an array of samples from a sound.\n\n\n    // TO DO: Create an array of planet images.\n    \n\n    // TO DO: Play the array of samples.\n    \n\n    // TO DO: Display the image of your character.\n    \n    \n    // TO DO: Use nested loops to loop through the array of planets to\n    // display each planet moving around your character.\n\n\n    // TO DO: Apply shiftSound() on the array of samples and play the samples again.\n\n  }\n  \n\n  // LESSON 10 - SCENE 8\n  public void showHome() throws FileNotFoundException {\n    // TO DO: Display the image of your character's home.\n    \n\n    // TO DO: Create an array of samples from a sound.\n\n\n    // TO DO: Create an array of Animal objects.\n\n\n    // TO DO: Play the array of samples.\n\n\n    // TO DO: Display the image of your character.\n    \n    \n    // TO DO: Apply the reverseSound() effect on the sound and play again.\n\n\n    // TO DO: Loop through the array of animals to display each animal and play their sound.\n    \n  }\n  \n\n  public void playConcert() throws FileNotFoundException {  \n    // Scene 1\n    showIntroduction();\n\n    // Scene 2\n\tmyStage.pause(3);\n    myStage.clear(Color.WHITE);\n    drawShapes();\n    showFavoriteFoods();\n    \n    // Scene 3\n\tmyStage.pause(2);\n    showFriends();\n    \n    // Scene 4\n\tmyStage.pause(2);\n    playUnicornMusic();\n    showUnicorn();\n    \n    // Scene 5\n    myStage.pause(2);\n    showCity();\n    \n    // Scene 6\n\tmyStage.pause(2);\n    showOcean();\n    \n    // Scene 7\n    myStage.pause(2);\n    showSpace();\n\n    // Scene 8\n    myStage.pause(2);\n    showHome();\n\n    myStage.play();\n  }\n  \n}",
        "isVisible": true
      },
      "SoundEffects.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic final class SoundEffects {\n\n  // TO DO: Create constants for volume.\n\n\n  public static final int SAMPLE_RATE = 44100;\n\n  // Gets the length of a sound in seconds.\n  public static int getSoundLength(double[] samples) {\n    int soundLength = samples.length / SAMPLE_RATE;\n    return soundLength;\n  }\n\n  // Decreases the volume of a sound.\n  public static void decreaseVolume(double[] samples) {\n    for (int i = 0; i < samples.length; i++) {\n      samples[i] *= 0.5;\n    }\n  }\n\n  // Increases the volume of a sound.\n  public static void increaseVolume(double[] samples) {\n    for (int i = 0; i < samples.length; i++) {\n      samples[i] *= 2;\n\n      // TO DO: Use if statements to make sure the volume is\n      // not greater than MAX_VOLUME or less than MIN_VOLUME.\n\n\n      \n    }\n  }\n\n  // Replaces and counts duplicate samples with 0.\n  public static void replaceDuplicates(double[] samples) {\n\n\n    System.out.println(\"Duplicates replaced: \");\n  }\n\n  // Creates a new array containing the samples that are\n  // greater than 0 from the original array.\n  public static double[] find(double[] samples) {\n    double[] newSound = new double[1];\n    \n\n\n    System.out.println(\"Number of original samples: \");\n    System.out.println(\"Number of samples greater than 0: \");\n\n    return newSound;\n  }\n\n  // Shift the samples in the sound to the left by one place\n  public static double[] shiftSound(double[] samples) {\n    double[] newSound = new double[1];\n\n    \n\n    return newSound;\n  }\n\n  // Creates a new array containing the samples from\n  // the original array in reverse.\n  public static double[] reverseSound(double[] samples) {\n    double[] reversed = new double[1];\n\n    \n\n    return reversed;\n  }\n}",
        "isVisible": true
      },
      "Animal.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Animal { \n\n  private Image animalImage;\n  private String soundFile;\n\n  public Animal(String imageFile, String soundFile) throws FileNotFoundException {\n    this.animalImage = new Image(imageFile);\n    this.soundFile = soundFile;\n  }\n  \n  public Image getImage() {\n    return animalImage;\n  }\n\n  public String getSound() {\n    return soundFile;\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 150;\n    int yPos = 250;\n    \n    Theater.stage.drawImage(animalImage, xPos, yPos, 100, 100, 0);\n  }\n  \n  public void speak() throws FileNotFoundException {\n    Theater.stage.playSound(soundFile);\n  }\n}",
        "isVisible": true
      },
      "Chicken.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Chicken extends Animal {\n\n  public Chicken(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 150;\n    int yPos = 250;\n    \n    Theater.stage.drawImage(super.getImage(), xPos, yPos, 100, 100, 0);\n  }\n}",
        "isVisible": true
      },
      "Cow.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Cow extends Animal {\n\n  public Cow(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 150;\n    int yPos = 250;\n    \n    Theater.stage.drawImage(super.getImage(), xPos, yPos, 100, 100, 0);\n  }\n}",
        "isVisible": true
      },
      "Elephant.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Elephant extends Animal {\n\n  public Elephant(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 150;\n    int yPos = 250;\n    \n    Theater.stage.drawImage(super.getImage(), xPos, yPos, 100, 100, 0);\n  }\n}",
        "isVisible": true
      },
      "Horse.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Horse extends Animal {\n\n  public Horse(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 150;\n    int yPos = 250;\n    \n    Theater.stage.drawImage(super.getImage(), xPos, yPos, 100, 100, 0);\n  }\n}",
        "isVisible": true
      },
      "Monkey.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Monkey extends Animal {\n\n  public Monkey(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 150;\n    int yPos = 250;\n    \n    Theater.stage.drawImage(super.getImage(), xPos, yPos, 100, 100, 0);\n  }\n}",
        "isVisible": true
      },
      "Pig.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Pig extends Animal {\n\n  public Pig(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 150;\n    int yPos = 250;\n    \n    Theater.stage.drawImage(super.getImage(), xPos, yPos, 100, 100, 0);\n  }\n}",
        "isVisible": true
      },
      "Sheep.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Sheep extends Animal {\n\n  public Sheep(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 150;\n    int yPos = 250;\n    \n    Theater.stage.drawImage(super.getImage(), xPos, yPos, 100, 100, 0);\n  }\n}",
        "isVisible": true
      },
      "Tiger.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Tiger extends Animal {\n\n  public Tiger(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 150;\n    int yPos = 250;\n    \n    Theater.stage.drawImage(super.getImage(), xPos, yPos, 100, 100, 0);\n  }\n}",
        "isVisible": true
      }
    },
    "parent_level_id": 28900
  },
  "game_id": 68,
  "created_at": "2021-07-22T15:01:34.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2021-07-22T15:01:34.306+00:00\",\"changed\":[\"cloned from \\\"Theater Demo\\\"\"],\"cloned_from\":\"Theater Demo\"},{\"changed_at\":\"2021-07-22 15:01:38 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-07-22 15:02:43 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-03 19:26:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-03 19:26:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-03 19:28:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-18 15:22:24 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-18 15:34:24 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-18 17:10:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-18 17:10:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-18 17:11:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-18 18:10:08 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-18 18:35:59 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"}]"
}]]></config>
</Javalab>
