<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "##In StateSorter.java:\r\n\r\n1. Write the `sortStates()`(#e7e8ea) method to sort `stateNames`(#e7e8ea) and `data`(#e7e8ea) in increasing order by the values in `data`(#e7e8ea). Use a selection, insertion, or merge sort to sort the lists.\r\n\r\n##In MyConsole.java:\r\n\r\n2. Call the `sortStates()`(#e7e8ea) method and print the updated list.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "import java.util.ArrayList;\n\npublic class MyConsole {\n  public static void main(String[] args) {\n\n    ArrayList<String> stateData = FileReader.getStringData(\"populations.txt\");\n\n    ArrayList<String> stateNames = StateSorter.getStates(stateData);\n    ArrayList<Integer> populations = StateSorter.getData(stateData);\n\n    System.out.println(\"----------Unsorted List of States and Populations----------\");\n    StateSorter.printStates(stateNames, populations);\n\n    System.out.println(\"\\n----------Sorted List of States and Populations----------\");\n\n    // TO DO #2: Call the sortStates() method and print the updated list.\n\n    \n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\n/*\n * Reads data from a file\n */\npublic final class FileReader {\n\n  private static File myFile;          // The File containing the data\n  private static Scanner fileReader;   // The Scanner object to read the file\n\n  /*\n   * Returns an ArrayList of Strings from a file\n   */\n  public static ArrayList<String> getStringData(String filename) {\n    createFile(filename);\n    \n    ArrayList<String> tempList = new ArrayList<String>();\n    \n    while (fileReader.hasNextLine()) {\n      tempList.add(fileReader.nextLine());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of words from a file\n   */\n  public static ArrayList<String> getWords(String filename) {\n    createFile(filename);\n\n    ArrayList<String> tempList = new ArrayList<String>();\n\n    while (fileReader.hasNext()) {\n      tempList.add(fileReader.next());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of ints from a file\n   */\n  public static ArrayList<Integer> getIntData(String filename) {\n    createFile(filename);\n\n    ArrayList<Integer> tempList = new ArrayList<Integer>();\n\n    while (fileReader.hasNextInt()) {\n      tempList.add(fileReader.nextInt());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of doubles from a file\n   */\n  public static ArrayList<Double> getDoubleData(String filename) {\n    createFile(filename);\n\n    ArrayList<Double> tempList = new ArrayList<Double>();\n\n    while (fileReader.hasNextDouble()) {\n      tempList.add(fileReader.nextDouble());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Creates the File and Scanner to read the specified filename\n   */\n  public static void createFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read a file or notifies the\n   * user if the file is not found\n   */\n  public static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException e) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n}",
        "isVisible": true
      },
      "StateSorter.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Manages lists of data about states\n */\npublic final class StateSorter {\n\n  /*\n   * Sorts the list of state names and data in increasing order\n   */\n  public static void sortStates(ArrayList<String> stateNames, ArrayList<Integer> data) {\n    // TO DO #1: Sort stateNames and data in increasing\n    // order based on the values in data.\n    \n\n    \n  }\n\n  /*\n   * Returns an ArrayList containing the name of the states\n   */\n  public static ArrayList<String> getStates(ArrayList<String> statesData) {\n    ArrayList<String> stateNames = new ArrayList<String>();\n\n    for (int index = 0; index < statesData.size(); index++) {\n      String currentData = statesData.get(index);\n      int comma = currentData.indexOf(\",\");\n      String currentState = currentData.substring(0, comma);\n      stateNames.add(currentState);\n    }\n    \n    return stateNames;\n  }\n\n  /*\n   * Returns an ArrayList containing the data for each state\n   */\n  public static ArrayList<Integer> getData(ArrayList<String> statesData) {\n    ArrayList<Integer> stateData = new ArrayList<Integer>();\n\n    for (int index = 0; index < statesData.size(); index++) {\n      String currentData = statesData.get(index);\n      int comma = currentData.indexOf(\",\");\n      int currentValue = Integer.parseInt(currentData.substring(comma + 1));\n      stateData.add(currentValue);\n    }\n\n    return stateData;\n  }\n\n  /*\n   * Prints the list of states and their data\n   */\n  public static void printStates(ArrayList<String> stateNames, ArrayList<Integer> data) {\n    for (int index = 0; index < stateNames.size(); index++) {\n      System.out.println(stateNames.get(index) + \": \" + data.get(index));\n    }\n\n    System.out.println();\n  }\n  \n}",
        "isVisible": true
      },
      "populations.txt": {
        "text": "Alabama,4833722\nAlaska,735132\nArizona,6626624\nArkansas,2959373\nCalifornia,38332521\nColorado,5268367\nConnecticut,3596080\nDelaware,925749\nFlorida,19552860\nGeorgia,9992167\nHawaii,1404054\nIdaho,1612136\nIllinois,12882135\nIndiana,6570902\nIowa,3090416\nKansas,2893957\nKentucky,4395295\nLouisiana,4625470\nMaine,1328302\nMaryland,5928814\nMassachusetts,6692824\nMichigan,9895622\nMinnesota,5420380\nMississippi,2991207\nMissouri,6044171\nMontana,1015165\nNebraska,1868516\nNevada,2790136\nNew Hampshire,1323459\nNew Jersey,8899339\nNew Mexico,2085287\nNew York,19651127\nNorth Carolina,9848060\nNorth Dakota,723393\nOhio,11570808\nOklahoma,3850568\nOregon,3930065\nPennsylvania,12773801\nRhode Island,1051511\nSouth Carolina,4774839\nSouth Dakota,844877\nTennessee,6495978\nTexas,26448193\nUtah,2900872\nVermont,626630\nVirginia,8260405\nWashington,6971406\nWest Virginia,1854304\nWisconsin,5742713\nWyoming,582658",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\n6/BFyg==\n",
    "encrypted_examples": [

    ],
    "display_name": "State Populations",
    "bubble_choice_description": "Sort a list of states in order by their populations.",
    "thumbnail_url": "https://images.code.org/9513e77948fce6f8c29039cc875efe38-united-states.png"
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-04-18T19:49:53.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-04-18T19:49:53.340+00:00\",\"changed\":[\"cloned from \\\"CSA U8L9-L2d_2022\\\"\"],\"cloned_from\":\"CSA U8L9-L2d_2022\"},{\"changed_at\":\"2022-04-18 19:49:55 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-18 20:22:33 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-19 00:02:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-19 00:05:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-19 13:13:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-19 13:13:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-19 13:13:59 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-19 13:14:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-19 13:16:10 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
