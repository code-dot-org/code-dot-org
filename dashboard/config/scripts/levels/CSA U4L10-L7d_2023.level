<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that visualizes the number of cat breeds that originated in each country. Use multi-selection statements to count the number of cat breeds for each country, and use the counts for each country to decide the size of the flag images to draw.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">CatScene.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">analyzeCountries()</code> method to count the number of cat breeds that originated in each country by traversing the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">countries</code> array.\r\n\r\n1. Create an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> array to store the counts for each country.\r\n\r\n2. Use multi-selection statements and the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">equals()</code> method to check if the current country equals <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"Egypt\"</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"Russia\"</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"Thailand\"</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"United Kingdom\"</code>, or <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"United States\"</code>. Increase the corresponding value in the array by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> if the condition is <code style=\"background-color: #ececec; color: black; font-weight: bold;\">true</code>.\r\n\r\n3. Return the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> array.\r\n\r\n‚úÖ **TO DO #2:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">createScene()</code> method to draw each country flag at a random location in the scene. Use the corresponding value in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">counts</code> array to determine the size to draw the image.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing multi-selection statements.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Cat Breeds",
    "bubble_choice_description": "Count the number of cat breeds that originated in each country and draw images based on the count.",
    "thumbnail_url": "https://images.code.org/7ad394dec8c9fc164c5a3c37f8f6b1ea-image-1650719083623.png",
    "reference_links": [
      "/courses/csa-2023/guides/multi-selection-statements"
    ],
    "video_key": "csa_multi-selection_statements",
    "starter_assets": {
      "usa.png": "0e4dc675-1dd6-4fc8-9b85-018fe8a3fba6.png",
      "uk.png": "0b9cf391-e25f-48ef-95ee-a6cdbc0aacd9.png",
      "thailand.png": "5620c3c8-a4ce-447d-817a-594d6dfd20c9.png",
      "russia.png": "0ceb5fdd-604d-46f8-9abe-f30fb0c9e610.png",
      "egypt.png": "57a45933-7aad-4cfd-8c6b-7dadfd68b84a.png"
    },
    "encrypted_validation": "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\nun+dnBP7t/zEg3NGAhKX6Q7tprI32p3WG560R1Y=\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of cat breeds\n    String[] breeds = FileReader.toStringArray(\"breeds.txt\");\n\n    // Creates a 1D array of country names\n    String[] countries = FileReader.toStringArray(\"countries.txt\");\n\n    // Creates a CatScene object\n    CatScene scene = new CatScene(breeds, countries);\n\n    // Calls the analyzeCountries() method\n    int[] results = scene.analyzeCountries();\n\n    // Calls the drawResults() method\n    scene.drawResults(results);\n\n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "CatScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the number of cat\n * breeds that originated in each country\n */\npublic class CatScene extends Scene {\n\n  private String[] breeds;     // The 1D array of cat breeds\n  private String[] countries;  // The 1D array of originating countries\n\n  /*\n   * Initializes breeds and countries to the specified 1D arrays\n   */\n  public CatScene(String[] breeds, String[] countries) {\n    this.breeds = breeds;\n    this.countries = countries;\n  }\n\n  /*\n   * Returns an array containing the number\n   * of cat breeds for each country\n   */\n  public int[] analyzeCountries() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Traverse the countries array to count the number of breeds that\n     * originated in each country.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    return null;\n  }\n\n  /*\n   * Creates the scene by drawing each country flag at a random location\n   * and the size based on the number of originating cat breeds\n   */\n  public void drawResults(int[] counts) {\n    String[] countryFlags = {\"egypt.png\", \"russia.png\", \"thailand.png\", \"uk.png\", \"usa.png\"};\n\n    for (int index = 0; index < countryFlags.length; index++) {\n      int randomX = (int)(Math.random() * 200);\n      int randomY = (int)(Math.random() * 200);\n\n      drawImage(countryFlags[index], randomX, randomY, counts[index] * 5);\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "breeds.txt": {
        "text": "Abyssinian\nAmerican Bobtail\nAmerican Curl\nAmerican Shorthair\nAmerican Wirehair\nBalinese\nBambino\nBengal\nBombay\nBritish Longhair\nBritish Shorthair\nBurmilla\nCalifornia Spangled\nChantilly-Tiffany\nChausie\nCheetoh\nColorpoint Shorthair\nCornish Rex\nDevon Rex\nDonskoy\nEgyptian Mau\nExotic Shorthair\nHavana Brown\nHimalayan\nJavanese\nKhao Manee\nKorat\nKurilian\nLaPerm\nMaine Coon\nMalayan\nMunchkin\nNebelung\nOcicat\nOriental\nPixie-bob\nRagamuffin\nRagdoll\nRussian Blue\nSavannah\nScottish Fold\nSelkirk Rex\nSiamese\nSiberian\nSnowshoe\nToyger\nYork Chocolate",
        "isVisible": true,
        "tabOrder": 3
      },
      "countries.txt": {
        "text": "Egypt\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nUnited Kingdom\nUnited States\nUnited States\nEgypt\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nRussia\nEgypt\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nThailand\nThailand\nRussia\nThailand\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nRussia\nUnited States\nUnited Kingdom\nUnited States\nThailand\nRussia\nUnited States\nUnited States\nUnited States",
        "isVisible": true,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\nj4yNQHrYJeaxenhDNg==\n"
  },
  "game_id": 68,
  "created_at": "2023-02-17T19:06:45.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-02-17T19:06:45.827+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L7c_2023\\\"\"],\"cloned_from\":\"CSA U4L10-L7c_2023\"},{\"changed_at\":\"2023-02-17 19:06:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-10 21:30:35 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-10 21:30:47 +0000\",\"changed\":[\"csa_view_mode\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 13:45:58 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 00:32:30 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 00:33:15 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 00:33:31 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 00:33:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
