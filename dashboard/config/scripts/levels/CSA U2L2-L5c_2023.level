<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A poet wants to compile some of their work in a book, and they need help creating a program to manage their poetry.**\r\n\r\n✅ **TO DO #1:** In the `Poem`(#e7e8ea) class, declare instance variables named `title`(#e7e8ea) and `numLines`(#e7e8ea) for the title of a poem and the number of lines in a poem.\r\n\r\n✅ **TO DO #2:** Write a no-argument constructor to assign default values to the instance variables, such as `\"new poem\"`(#e7e8ea) for the title of a poem and `1`(#e7e8ea) for the number of lines in a poem.\r\n\r\n✅ **TO DO #3:** In `PoemRunner.java`(#e7e8ea), instantiate a `Poem`(#e7e8ea) object.\r\n\r\n✅ **TO DO #4:** Print the constructor and the values assigned to the instance variables for the `Poem`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you wrote your constructors correctly.\r\n\r\nUse the `getTitle()`(#e7e8ea) and `getNumLines()`(#e7e8ea) methods in the `Poem`(#e7e8ea) class to get the current values assigned to the instance variables. For example:\r\n\r\n```\r\nPoem maya = new Poem();\r\nSystem.out.println(\"Title: \" + maya.getTitle());\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, writing no-argument constructors, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Poem Class",
    "bubble_choice_description": "A poet wants to compile some of their work in a book, and they need help creating a program to manage their poetry.",
    "thumbnail_url": "https://images.code.org/ab6084fba9f36bfa1a213256868c5f08-poem.png",
    "start_sources": {
      "PoemRunner.java": {
        "text": "public class PoemRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Poem object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject) and the values assigned\n     * to the instance variables using the methods in the Poem class.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Poem.java": {
        "text": "/*\n * Represents a poem\n */\npublic class Poem {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Declare instance variables for the title and number of lines in a poem.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables for the title and number of lines in a poem.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n\n  /*\n   * Returns the current value assigned to title\n   */\n  public String getTitle() {\n    return title;\n  }\n\n  /*\n   * Returns the current value assigned to numLines\n   */\n  public int getNumLines() {\n    return numLines;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    ArrayList<String> fieldsList = fieldsToList(Arrays.toString(classFields));\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    fieldsAsText = fieldsAsText.substring(1, fieldsAsText.length() - 1);\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "encrypted_exemplar_sources": "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\n2GTO09xi1ejn6gcJBk4=\n",
    "encrypted_validation": "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\nlCosZ5RTZkeOvuKNYs9k\n"
  },
  "game_id": 68,
  "created_at": "2022-11-03T19:23:17.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:23:17.310+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L5b_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L5b_2023\"},{\"changed_at\":\"2022-11-03 19:23:18 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:41:43 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:30:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:30:13 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:38:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:31 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:39 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:44:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:49:19 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 22:16:03 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 22:17:26 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:25:41 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:13:03 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:54:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:55:20 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:55:25 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:55:40 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:53:45 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:47:41 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:50:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:51:39 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:52:15 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:52:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 17:13:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
