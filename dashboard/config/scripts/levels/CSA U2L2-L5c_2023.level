<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A poet wants to compile some of their work in a book, and they need help creating a program to manage their poetry.**\r\n\r\n✅ **TO DO #1:** In the `Poem`(#e7e8ea) class, declare instance variables named `title`(#e7e8ea) and `numLines`(#e7e8ea) for the title of a poem and the number of lines in a poem.\r\n\r\n✅ **TO DO #2:** Write a no-argument constructor to assign default values to the instance variables, such as `\"new poem\"`(#e7e8ea) for the title of a poem and `1`(#e7e8ea) for the number of lines in a poem.\r\n\r\n✅ **TO DO #3:** In `PoemRunner.java`(#e7e8ea), instantiate a `Poem`(#e7e8ea) object.\r\n\r\n✅ **TO DO #4:** Print the constructor and the values assigned to the instance variables for the `Poem`(#e7e8ea) object.\r\n\r\n::: details [**🔦 How do I print the information?**]\r\n  \r\nThe `ConstructorsHelper.printConstructors()`(#e7e8ea) is a hidden support method that prints the instance variables in a class to the console. For example:\r\n\r\n```\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n\r\nPrint the values that are currently assigned to the instance variables using the `printPoemInfo()`(#e7e8ea) method. For example:\r\n\r\n```\r\nPoem maya = new Poem();\r\nmaya.printPoemInfo();\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, writing no-argument constructors, and instantiating objects.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Poem Class",
    "bubble_choice_description": "A poet wants to compile some of their work in a book, and they need help creating a program to manage their poetry.",
    "thumbnail_url": "https://images.code.org/ab6084fba9f36bfa1a213256868c5f08-poem.png",
    "start_sources": {
      "PoemRunner.java": {
        "text": "public class PoemRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Poem object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject).\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Poem.java": {
        "text": "/*\n * Represents a poem\n */\npublic class Poem {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Declare instance variables for the title and number of lines in a poem.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables for the title and number of lines in a poem.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n\n  /*\n   * Prints the title of the poem and the\n   * number of lines in the poem\n   */\n  public void printPoemInfo() {\n    System.out.println(\"Title: \" + title);\n    System.out.println(\"Number of Lines: \" + numLines);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n\n    int start = currentConstructor.indexOf(\"(\");\n    int end = currentConstructor.indexOf(\")\");\n\n    currentConstructor.substring(start, end);\n    int comma = currentConstructor.indexOf(\",\");\n  \n      while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma);\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1);\n        comma = currentConstructor.indexOf(\",\");\n      }\n  \n      return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n  \n  \n  \n}",
        "isVisible": false,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-03T19:23:17.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:23:17.310+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L5b_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L5b_2023\"},{\"changed_at\":\"2022-11-03 19:23:18 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:41:43 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:30:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:30:13 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:38:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:31 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:39 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:44:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:49:19 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 22:16:03 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 22:17:26 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:25:41 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:13:03 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:54:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:55:20 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:55:25 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 16:55:40 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
