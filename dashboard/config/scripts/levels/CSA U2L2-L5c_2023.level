<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**A poet wants to compile some of their work in a book, and they need help creating a program to manage their poetry.**\r\n\r\n✅ **TO DO:** Write the `Poem`(#e7e8ea) class and instantiate a `Poem`(#e7e8ea) object.\r\n\r\n1. In the `Poem`(#e7e8ea) class:\r\n\r\n   **a.** Declare instance variables for the title of a poem and the number of lines in a poem.\r\n   \r\n   **b.** Write a no-argument constructor to assign default values to the instance variables, such as `\"new poem\"`(#e7e8ea) for the title of a poem and `1`(#e7e8ea) for the number of lines in a poem.\r\n\r\n2. In `PoemRunner.java`(#e7e8ea):\r\n\r\n   **a.** Instantiate a `Poem`(#e7e8ea) object\r\n   \r\n   **b.** Print the constructor for the `Poem`(#e7e8ea) object to the console using `ClassInfo.getConstructors(nameOfObject)`(#e7e8ea)\r\n   \r\n   **c.** Print the values assigned to the instance variables for the `Poem`(#e7e8ea) object to the console by calling the `printPoemInfo()`(#e7e8ea) method.\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, writing no-argument constructors, and instantiating objects.\r\n\r\n📝 **COMMENT:** Be sure to add comments to note what your code does.\r\n\r\n🖥️ **TEST:** Test your program to check if your code achieves the expected result.\r\n\r\n🎉 **RUN:** Run your program to see the result of your code!\r\n\r\n## 🎯 Goal\r\n\r\n![](https://images.code.org/addcb7bbeb3c73a74b060783c752a753-image-1667839757826.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Poem Class",
    "bubble_choice_description": "A poet wants to compile some of their work in a book, and they need help creating a program to manage their poetry.",
    "thumbnail_url": "https://images.code.org/ab6084fba9f36bfa1a213256868c5f08-poem.png",
    "encrypted_validation": "SGU06woiNKLV9GwUt8hkkWbALo4aK72UdU0Mc2c5TGnn+41tKJ9j2ggehOby\nR3PuTMXb89cWgl1h+H2tBUzrR8YxOwDF/z1dBmHs8iUyH1psssWDv0MlFRLr\n4RWY1l8vMLOEnI6AxbI/1GfiUcrmQ7Gsyp2R8axiNG08k0RAJJwUbRzo6ZyE\nePsk0u4Z5j/jodIFnH4UemSBJXBQwTuvDdHS5pQNZl1COBnNL4izrHi4kHcD\nsMe7/aYqutR4iF4OgT6baIkVmbM/guXbLJm+WIu3eZrUXkrw23u1/sKAQNKZ\njznj89OCGO0tmopAeeL3y7qXjxjwFwsYIA60ioJv0XC8lkaSC4KlLJoS7Erm\nHGfyDmXVjVK3VluKzH34Cc4KGcHgrgzdJuTQcIzRqNF9Bkma3Bs+CN8Fuk77\nuf7/Tta1Xxy/cPr0RgekID76wBnfWoxQMZTLL91DOJYrEvQR9bPTcIYTjaLa\nC1FJfKFkIG2w2nKSRrSYkEY67gykcW+/NIGzoaE/L4nyeuVq3KF22AEO2aAB\newHIv5wzpolAzCS0n+P5Yn7hnFY0rtmo1dUgEUkyc38pP6OwzW1CZG3CEMh4\n9k9HnDuyzgm3JN2q3RFAWJ2YviATcBQY3EUGx4cS3i/EBP2LMom3wjYyEgwE\nktd/Do9v+LGYyzOMS6EN34zOogH5tXP/OptptKoD8c22Ap6nhwawyA5/hzrr\nC4cv2kptVGdPTqN8MIf13MCP9HJXT8WhsqQ4Tt8B6kKgPE66iCHb+mk7Ja0Z\nI4wVfH4LUyZkdmnJ22kQweR2p1qGVnA4ZH2UvD+iRxtbzFIJRhQHGOePfjp0\n74l2/Jj7/DgZWj7qQgj/lklvj/ocrK8CZklWp+tNN18cQ5zBcqfexhXykBSR\nv8f0x2Iw0cGbmYN6UFKpndn79DGxbszT1f/HO+qwGc7x5tPU4IuiZB0E0UXN\n92hK80UBFCNLLP0XbnrRBLsfOK6+4HrZwxKzz3ppvze5xvr2jS/ZXytTbVFT\noQY0LJrk5YRNFkswZ+GrAPvizZl51UzqK5wtP772/s/ySN0f1W334mx0XmXT\nrPpAuEFsPG+jKts9G1RkQxgHw8CrkwN4Oo+4xWYpBM3UCyZ7/fzk1ogFFryl\nK/Fbcb3Zcvt7cHFDC+ixqA25THIIRrOMHCDvGBUTF6JDr+lUGQnYS855cLm3\nRqqIn7YCXuC6vmCNtFf23pmki0boK6qvd1D1n82jDz/aLlkAgpAk61GKpQ8X\nbbTdvCQYWHKRjK2z4WInEOAHrLPCr6xJ87+W1cepw7Kt2GEfdNeOqMDEHsGj\nBzosZcLEmzbV87u/9/o2ioWsswVvxABHdWyLJ0Mpylsjkh4sYgBGB6FaKMu9\nei3obXyxDMk0k00HnPzfzEOUlrNxcUsd2XXSn/5btfEsA8ozGUBGJ8BBHwpx\n33T5oFnpd2vRqNlzhZdoU118sjapRLsOR9Oh+dqrAy7AogLp7sq0IlrpKgjp\nf26jGGpYX/6+nvPC7hVsngviegJwnChZ/7KviTpSdpyGc5i4Z6RSXXWOFhGH\ney/Tau/n5VYOO4VSc0HdWPNPOGbCxSCW+9WbxaIxhM0SNQ5HofGwWKFfFaSo\nVXTCXa2jBLlANUtNN8sulz4gxDRujCbmKHZPtF7QJTANCY5olHgBm20z20eL\nFt8nz7ZmrDBNwxs0iWi2NBS4mT6cNDKG2pK7vg4Ea7Ca8Oc05mLl2Z3LjZut\n8xRhW1liTda4RnF98xAZ62aPnkOxeYzNfrmRbmV0lmu3Ws9LjCLdWFY+S3M3\n/PF9cHeBfzz5hIvMBrnphZaziPgPcgPy1dbYCIOxAluHnSqrSjGCALrtGWwz\nAn0ndiXyBPpCuKPuL5QBBZZOVi45Y12TUoNG0C7QiKACCe2aesNweKJm9j8f\n+CM3VELQqGxitjknLXyd0K7XpCL8MiQ7Mx0oJCKNuN/dAc9lWyE9M/LSFsze\nL+ZPy3FHitII7cLHzG+jvPn/NXGVnGtY5ioZO+eHKookiOdFGdetryG+Xyb+\nlWAq+9ixKOOQTymHkZtSTbbk6IIP3wdggEMDt662t6sL0Yn42pNuKZYmBKb4\nQaSsTu3uMgs8nQ+VY3JE6ncyiDnWuCJiCDcZBoVCixLMklRumf7tXw0GIHwx\nw6GUlrqZ8yKx+Dsm7EqPEh5cO/woBX2lE8HjLj5luS50NQ4TNC78IX2G2RqG\nPmNZtcps8KiMt43xiyNndlePIrwENKlgEHXPvVg3mj274k0QUnr285hEQeiM\nxdh6KsDa1lZAMvcfF7XN4LU+rhPYjSGKUTrZ9SZ9huHw/97P3wEQt9P+xekf\nOf3z3f7Czw6bShCpjkSdBidujql0xjEuMbF81xZIGjnMKiNPcRRnMi+oGycl\n5jbEAAQKtGL3ne0jVqnD6pFB0fiLsiaQA/4bB/1Nm973/ZRwqdEWUxEN/p8E\nZX4qtKuMSqfT63Io3JdsaBU3A8IZNNylQkWZf0PAennm34IhEcR4+kNXFYz1\noHb0/jFI9LoswooN/NZiVIQekCTReuqWPiiF+flssS50pCBY+PXRCMd/UN+w\nsudMxFDWdyE/UGqf+bRH5V75gUmkV1+CB7VP1Cxp22/tWC/MIHiI5uCq0KvW\nMxaRyCT/V+viY9a4R9Fan1/3H7n7ZjqrPMCz6VWBbpf/+jWJZMr+suHvH7w5\nb5sUgdKwqLcKpSorq8OrwpbMlAD8+rTthEUUHFvB9OAK7CcP83XMDreJSBOo\neh6kLqQe0pKX2Y9DTOwz+Ks8kPs59jqOBoQq1LS0BuUwUP6euEHcFWvdswIA\nLH9StLMuGur5qGD5FJ9e431ANeYpf3Gt2zu+Jpb7BIVjgN8vLFz/eNLgul6k\nkJrvNvObl/me4qlIDYt0yqcIE96WDlmPQ6gC2jjRJ6+UKEwklzU/J6zD6tej\nQ9slGKA2nQ9eux1Q8jwTywEbA85OYwPppSGAG0KB3+42MXZuCWH6+y4b95pK\nPoGBfOC46dj2W3PoRni9C5tX0zZPzOBAqaJDJcESzctvrIW6adyqdgHNmavE\ndm1EbAKfkf9owzV76GlhxlDClcSsx+9lQxADPZb/YjkTY+yQWuqFjhl631DO\nHDc/fWyu1nnJ+6zgNWdDiWFqmqFej+gN71nvf3aXOjuVOEMZVPnCWA3R7DVQ\nm+G8Q0hF09WWRmWXYwAHyuaiUQC8j+vMzX7FXOe9sg1zb6YeMrAygdS66ke7\nB7il2UbTyl9+vAvLXEMn3bXDZUqx+LMbwuGYEVLrmiDzxzhQbsGZTTdGBTNX\nNHepL5KbEo9AGv30RUFJj9mGUdIveTXQeJpFuQoJMDUv4rvtXp0vUhjXGzF6\nTflNb7AbsIV55H//lTRTDyOLeD/yH9+LJDb4q0Aw0a+pZ3jkbO8UP5+Sexbj\ngIA/yXu181tVjKeVUsTN/FYGKI9MmcCmnu19rUfdS/ZWqkrqx2+5IEXa4Gjr\nsKW0t9uxL1S2TFBnf7NKgbtD9D2+B7pfOBfs0kNXGHEqrNtung56yWybO3ah\nHNNX2YwkfTaZoH3egmJCGWaN+NZcPVrSSUM43r1N/U4G638BgSkGOTqUkPdM\nBbcFCgqW/UZtadtQNwBgMd+eGXlniHpx8zN7XemMB0AcZZYJ28Nz904SG0QI\nsZk9Vy26cIQy0QLxUaaNE2jsRMRgklT2RKJMQC4WUnXF7f9kYeQ7ag2Xklk4\nqxBjdb1Y40E/8amKf5dUoi2DQYLo4/sFvZ22A3ewo+f2iLo/iTMquayrTgwP\ntB8di/hOo3Rx4bFE3iuwEv4zUtwGKIx578JDfIBW2QjOMXFqokPwlcGhA/gI\n9bCTzuwYmoDX91HAko2fLfhSZKAHHAJRYCVFO0d0Isk=\n",
    "start_sources": {
      "PoemRunner.java": {
        "text": "public class PoemRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Instantiate a Poem object. Print the constructor to the console using\n     * ClassInfo.getConstructors(nameOfObject).\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Poem.java": {
        "text": "/*\n * Represents a poem\n */\npublic class Poem {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Declare instance variables for the title and number of lines in a poem.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ✅ Write a no-argument constructor to assign default values to the instance\n   * variables for the title and number of lines in a poem.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ClassInfo.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ClassInfo {\n\n  public static String getAttributes(Object testObject) {\n    Class objectClass = testObject.getClass();\n    Class objectSuperClass = objectClass.getSuperclass();\n    \n    Field[] objectFields = objectClass.getDeclaredFields();\n    Field[] superFields = objectSuperClass.getDeclaredFields();\n    \n    ArrayList<String> classFieldsList = convertToList(Arrays.toString(objectFields));\n    ArrayList<String> superFieldsList = convertToList(Arrays.toString(superFields));\n\n    String className = objectClass.getSimpleName();\n    String superClassName = objectSuperClass.getSimpleName();\n    \n    String heading = \"\\n------------------------------\\n\";\n    \n    String classFieldsText = cleanFields(classFieldsList, className);\n    String superFieldsText = cleanFields(superFieldsList, superClassName);\n\n    String result = className + \" Attributes \" + heading + classFieldsText;\n\n    if (!superClassName.equals(\"Object\")) {\n      result += \"\\n>> inherited from \" + superClassName + \" class <<\\n\" + superFieldsText;\n    }\n\n    return result;\n  }\n\n  public static ArrayList<String> convertToList(String result) {\n    result = result.substring(1, result.length() - 1);\n    ArrayList<String> classFields = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = result.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = result.substring(0, comma);\n      classFields.add(currentField);\n      result = result.substring(comma + 2);\n      comma = result.indexOf(\",\");\n    }\n\n    classFields.add(result);\n    return classFields;\n  }\n\n  public static String cleanFields(ArrayList<String> classFields, String className) {\n    String result = \"\";\n\n    for (int index = 0; index < classFields.size(); index++) {\n      String currentField = classFields.get(index);\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      result += currentField + \"\\n\";\n    }\n\n    return result;\n  }\n\n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n\n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n\n  public static String findField(ArrayList<String> classFields, String typeToFind) {\n    String result = \"MISSING\";\n    \n    for (int index = 0; index < classFields.size(); index++) {\n      String current = classFields.get(index);\n      \n      if (current.indexOf(typeToFind) > 0) {\n        result = ClassInfo.removeClassName(current, \"Instrument\");\n        result = ClassInfo.removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n\n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    }\n\n    return result;\n  }\n\n  public static String getFieldType(String currentField) {\n    currentField = currentField.trim();\n    String[] possibleTypes = {\"boolean\", \"int\", \"double\", \"String\"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result;\n  }\n\n  public static String getConstructors(Object testObject) {\n    Class objectClass = testObject.getClass();\n    String className = objectClass.getSimpleName();\n    Constructor[] objectConstructors = objectClass.getDeclaredConstructors();\n    \n    ArrayList<String> constructorsList = convertToList(Arrays.toString(objectConstructors));\n\n    String heading = \"\\n------------------------------\\n\";\n    String result = className + \" Constructors \" + heading;\n\n    for (String current : constructorsList) {\n      result += current + \"\\n\";\n    }\n    \n    return result;\n  }\n\n  public static String getValue(List<String> output, String lineToFind) {\n    String outputText = \"\";\n    String valueResult = \"\";\n\n    for (int index = 0; index < output.size(); index++) {\n      String current = output.get(index);\n      \n      if (current.indexOf(lineToFind) >= 0) {\n        outputText = current;\n        valueResult = outputText.substring(lineToFind.length());\n      }\n    }\n    \n    return valueResult.trim();\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-11-03T19:23:17.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:23:17.310+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L5b_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L5b_2023\"},{\"changed_at\":\"2022-11-03 19:23:18 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:41:43 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:30:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:30:13 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:38:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:31 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:39 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:43:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:44:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:49:19 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
