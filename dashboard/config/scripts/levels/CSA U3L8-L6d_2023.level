<Javalab>
  <config><![CDATA[{
  "published": true,
  "game_id": 68,
  "created_at": "2023-01-12T22:17:46.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "âœ… **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MusicSurvey.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">reverseResponses()</code> method to reverse the elements in the 1D array <code style=\"background-color: #ececec; color: black; font-weight: bold;\">responses</code> so they are stored newest to oldest.\r\n\r\nâœ… **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SurveyRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">reverseResponses()</code> method, then print the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MusicSurvey</code> object.\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">ðŸ”¦ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nnumElements = responses.length\r\nloop from 0 to responses.length / 2\r\n  temp = responses[index]\r\n  responses[index] = responses[numElements - index - 1]\r\n  responses[numElements - index - 1] = temp\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">ðŸ”¦ What is the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \r\n    <p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class is a hidden support class that has methods for reading data from a text file into a 1D array. It has the following methods:</p>\r\n\t\t<ul>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toStringArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> objects containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toIntArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> values containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toDoubleArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> values containng the data</li>\r\n\t\t</ul>\r\n    \t<p>For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nString[] names = FileReader.toStringArray(\"names.txt\");\r\n \r\nint[] numbers = FileReader.toIntArray(\"numbers.txt\");\r\n \r\ndouble[] prices = FileReader.toDoubleArray(\"prices.txt\");</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Reverse Responses",
    "bubble_choice_description": "Write the `reverseResponses()` method to reverse the responses so they are stored newest to oldest.",
    "thumbnail_url": "https://images.code.org/46891ac4b769eec206d996b59e851c06-opposite-arrows.png",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "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\nUH/BtE3Kl6BNPjaAW5QsAITOQzQAztzI16sE5BQ=\n",
    "start_sources": {
      "SurveyRunner.java": {
        "text": "public class SurveyRunner {\n  public static void main(String[] args) {\n\n    MusicSurvey responses = new MusicSurvey(\"times.txt\", \"ages.txt\", \"hours.txt\");\n    System.out.println(\"Original Order\\n--------------------\");\n    System.out.println(responses);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Call the reverseResponses() method, then print the MusicSurvey object.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n\n    \n\n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "MusicSurvey.java": {
        "text": "/*\n * Manages data about responses to a survey\n */\npublic class MusicSurvey {\n\n  private Respondent[] responses;    // The 1D array of Respondent objects\n\n  /*\n   * Reads the data from timesFile, agesFile, and\n   * hoursFile to initialize responses\n   */\n  public MusicSurvey(String timesFile, String agesFile, String hoursFile) {\n    responses = createResponses(timesFile, agesFile, hoursFile);\n  }\n\n  /*\n   * Returns a 1D array of Respondent objects using the\n   * data from timesFile, agesFile, and hoursFile\n   */\n  public Respondent[] createResponses(String timesFile, String agesFile, String hoursFile) {\n    String[] timesData = FileReader.toStringArray(timesFile);\n    int[] agesData = FileReader.toIntArray(agesFile);\n    double[] hoursData = FileReader.toDoubleArray(hoursFile);\n\n    Respondent[] tempResponses = new Respondent[timesData.length];\n\n    for (int index = 0; index < tempResponses.length; index++) {\n      tempResponses[index] = new Respondent(timesData[index], agesData[index], hoursData[index]);\n    }\n\n    return tempResponses;\n  }\n\n  /*\n   * Returns the 1D array of Respondent objects\n   */\n  public Respondent[] getResponses() {\n    return responses;\n  }\n\n  /*\n   * Reverses the elements in the 1D array responses\n   */\n  public void reverseResponses() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Reverse the elements in the 1D array responses so that the newest\n     * response is first and the oldest response is last.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n  }\n\n  /*\n   * Returns a String containing each respondent's information\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (Respondent answer : responses) {\n      result += answer + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Respondent.java": {
        "text": "/*\n * Represents a respondent to a survey\n */\npublic class Respondent {\n\n  private String time;      // The date and time a respondent answered the survey\n  private int age;          // The age of a respondent\n  private double hours;     // The number of hours a respondent listens to music each day\n\n  /*\n   * Sets time, age, and hours to the specified values\n   */\n  public Respondent(String time, int age, double hours) {\n    this.time = time;\n    this.age = age;\n    this.hours = hours;\n  }\n\n  /*\n   * Returns the date and time the respondent answered the survey\n   */\n  public String getTime() {\n    return time;\n  }\n\n  /*\n   * Returns the age of the respondent\n   */\n  public int getAge() {\n    return age;\n  }\n\n  /*\n   * Returns the number of hours the respondent listens to music each day\n   */\n  public double getHours() {\n    return hours;\n  }\n\n  /*\n   * Returns a String containing the date and time, age, and hours\n   */\n  public String toString() {\n    return \"[\" + time + \"] \" + age + \" years old - \" + hours + \" hours per day\";\n  }\n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "times.txt": {
        "text": "08/27 @ 07:29\n08/27 @ 07:57\n08/27 @ 09:28\n08/27 @ 09:40\n08/27 @ 09:54\n08/27 @ 09:56\n08/27 @ 10:00\n08/27 @ 10:18\n08/27 @ 10:33\n08/27 @ 10:44\n08/27 @ 10:51\n08/27 @ 11:00\n08/27 @ 11:04\n08/27 @ 11:12\n08/27 @ 11:16\n08/27 @ 11:19\n08/27 @ 11:39\n08/27 @ 11:39\n08/27 @ 11:40\n08/27 @ 11:41\n08/27 @ 11:43\n08/28 @ 12:28\n08/28 @ 01:39\n08/28 @ 03:19\n08/28 @ 04:13\n08/28 @ 04:38\n08/28 @ 04:40\n08/28 @ 05:05\n08/28 @ 05:16\n08/28 @ 08:36\n08/28 @ 10:30\n08/28 @ 10:38\n08/28 @ 10:54\n08/28 @ 10:59\n08/28 @ 11:08\n08/28 @ 11:13\n08/28 @ 11:25\n08/28 @ 11:27\n08/28 @ 11:36\n08/28 @ 11:39\n08/28 @ 11:50\n08/28 @ 11:54\n08/28 @ 11:55\n08/28 @ 11:58\n08/28 @ 12:08\n08/28 @ 12:12\n08/28 @ 12:15\n08/28 @ 12:23\n08/28 @ 12:30\n08/28 @ 12:32\n08/28 @ 12:37\n08/28 @ 12:39\n08/28 @ 12:52\n08/28 @ 12:53\n08/28 @ 12:54\n08/28 @ 01:01\n08/28 @ 01:05\n08/28 @ 01:08\n08/28 @ 01:09\n08/28 @ 01:18\n08/28 @ 01:22\n08/28 @ 01:22\n08/28 @ 01:34\n08/28 @ 01:34\n08/28 @ 01:42\n08/28 @ 01:43\n08/28 @ 01:46\n08/28 @ 01:48\n08/28 @ 01:55\n08/28 @ 01:57\n08/28 @ 01:59\n08/28 @ 02:00\n08/28 @ 02:01\n08/28 @ 02:02\n08/28 @ 02:04\n08/28 @ 02:04\n08/28 @ 02:07\n08/28 @ 02:08\n08/28 @ 02:10\n08/28 @ 02:10\n08/28 @ 02:12\n08/28 @ 02:14\n08/28 @ 02:18\n08/28 @ 02:24\n08/28 @ 02:25\n08/28 @ 02:26\n08/28 @ 02:29\n08/28 @ 02:30\n08/28 @ 02:38\n08/28 @ 02:41\n08/28 @ 02:45\n08/28 @ 02:47\n08/28 @ 02:49\n08/28 @ 02:51\n08/28 @ 02:58\n08/28 @ 02:59\n08/28 @ 03:02\n08/28 @ 03:03\n08/28 @ 03:03\n08/28 @ 03:07",
        "isVisible": true,
        "tabOrder": 3
      },
      "ages.txt": {
        "text": "18\n63\n18\n61\n18\n18\n18\n21\n19\n18\n18\n19\n17\n19\n18\n17\n16\n16\n17\n15\n15\n17\n19\n18\n16\n18\n14\n18\n17\n17\n20\n19\n19\n17\n16\n18\n21\n17\n26\n20\n23\n18\n37\n17\n18\n17\n36\n24\n18\n19\n17\n16\n23\n23\n22\n16\n18\n42\n23\n23\n19\n22\n15\n25\n32\n36\n24\n29\n41\n36\n19\n31\n16\n26\n22\n16\n17\n19\n18\n18\n19\n19\n22\n16\n19\n37\n14\n33\n26\n32\n30\n43\n24\n36\n19\n22\n20\n31\n19\n15",
        "isVisible": true,
        "tabOrder": 4
      },
      "hours.txt": {
        "text": "3\n1.5\n4\n2.5\n4\n5\n3\n1\n6\n1\n3\n8\n3\n2\n4\n2\n8\n12\n24\n3\n8\n4\n5\n2\n3\n2\n12\n6\n2\n1\n5\n2\n6\n4\n1\n5\n4\n3\n0.5\n4\n2\n5\n0.25\n3\n4\n1\n1\n3\n5\n3\n2\n6\n1\n12\n4\n2\n6\n0\n7\n1\n1\n1\n2\n2\n5\n6\n3\n4\n3\n2\n3\n2\n4\n2\n0.5\n5\n5\n10\n2\n4\n5\n3\n2\n2.5\n3\n1\n7\n1\n1\n3\n5\n6\n4\n1\n4\n10\n3\n2\n4\n8",
        "isVisible": true,
        "tabOrder": 5
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 6
      }
    },
    "encrypted_examples": [

    ]
  },
  "audit_log": "[{\"changed_at\":\"2023-01-12T22:17:46.232+00:00\",\"changed\":[\"cloned from \\\"CSA U3L8-L6c_2023\\\"\"],\"cloned_from\":\"CSA U3L8-L6c_2023\"},{\"changed_at\":\"2023-01-12 22:17:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:37:15 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 17:17:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:41:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:41:17 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:18:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 21:05:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 21:08:51 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 21:09:57 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 21:12:19 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 21:12:26 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 21:12:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 21:13:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 21:13:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 14:29:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 14:29:47 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 14:30:02 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-31 01:47:52 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 21:19:25 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-07-12 14:29:16 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
