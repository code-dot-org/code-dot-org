<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-08-23T20:57:01.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "##Investigate and Modify\r\n\r\nRun the program to observe the results.\r\n\r\nThen, experiment with the program by making the following modifications. Change one line at a time, then run the program after each change to observe the results.\r\n\r\n1. Look at the `insertionSort`(#e7e8ea) method in `Sorter.java`(#e7e8ea). What do you notice about the code? Add a print statement at the beginning of the `while`(#e7e8ea) loop to print the value at index `next`(#e7e8ea).\r\n\r\n2. What do you think would happen if the `insertionSort`(#e7e8ea) method was used on an array that was already sorted? Declare and initialize a 1D array of values in increasing order. Call the `insertionSort()`(#e7e8ea) method and print the updated array.\r\n\r\n3. Which algorithm is more efficient? Try adding values to each list and tracing each method to determine their execution counts.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    System.out.println(\"----------First Set----------\");\n    int[] firstSet = {30, 50, 10, 40, 20};\n    Sorter.insertionSort(firstSet);\n    Sorter.printArray(firstSet);\n\n    System.out.println(\"\\n-----------Second Set----------\");\n    int[] secondSet = {43, 25, 78, 19, 56};\n    Sorter.selectionSort(secondSet);\n    Sorter.printArray(secondSet);\n    \n  }\n}",
        "isVisible": true
      },
      "Sorter.java": {
        "text": "public final class Sorter {\n\n  public static void insertionSort(int[] data) {\n    int totalInserts = 0;\n    \n    for (int index = 1; index < data.length; index++) {\n      int current = data[index];\n      int next = index - 1;\n\n      while ((next >= 0) && (data[next] > current)) {\n        data[next + 1] = data[next];\n        next--;\n      }\n\n      data[next + 1] = current;\n      totalInserts++;\n    }\n\n    System.out.println(\"Total insertions: \" + totalInserts);\n  }\n\n  public static void selectionSort(int[] data) {\n    int totalSwaps = 0;\n    \n    for (int index = 0; index < data.length - 1; index++) {\n      int current = index;\n\n      for (int next = index + 1; next < data.length; next++) {\n        System.out.println(data[next] + \" checked\");\n        \n        if (data[next] < data[current]) {\n          current = next;\n        }\n      }\n\n      int temp = data[current];\n      data[current] = data[index];\n      data[index] = temp;\n\n      totalSwaps++;\n    }\n\n    System.out.println(\"Total swaps: \" + totalSwaps);\n  }\n\n  public static void printArray(int[] data) {\n    for (int value : data) {\n      System.out.print(value + \" \");\n    }\n  }\n  \n}",
        "isVisible": true
      }
    },
    "name_suffix": "_pilot-2022"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:57:01.832+00:00\",\"changed\":[\"cloned from \\\"CSA U8L6-L1v2_2022\\\"\"],\"cloned_from\":\"CSA U8L6-L1v2_2022\"}]"
}]]></config>
</Javalab>
