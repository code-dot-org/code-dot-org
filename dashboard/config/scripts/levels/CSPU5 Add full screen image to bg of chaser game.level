<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2016-10-24T14:16:56.000Z",
  "level_num": "custom",
  "user_id": 155,
  "properties": {
    "skin": "applab",
    "edit_code": true,
    "embed": "false",
    "instructions": "Recreate the game from the \"Chaser Game\" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)",
    "markdown_instructions": "# Add a Full Screen Image to act as Background to Game\r\n\r\n<img src=\"https://images.code.org/9898664ee57768dd6e332bfab804c2a6-image-1477324830263.png\" style=\"float: right\">\r\n\r\nWe want to be able to detect when the user *misses* clicking on the target. Since we know the screen itself registers every click no matter what, the only way to determine that the user missed the target is to **add an image that takes up the full screen**.  \r\n\r\nIn other words we're trying to determine which of two images was clicked - the target, or the background - which is do-able since we know when images overlap only one will have a click event triggered. \r\n\r\n  * When the target is clicked, it jumps to a new location\r\n  * When the background image is clicked we will (eventually) switch to a new screen.\r\n\r\n**Following the Event-Driven Pattern...**\r\n\r\n* **Design mode: Add a new image to the game** \r\n  * and stretch it to fill the whole screen.\r\n  * Change the layering order (if necessary) so that the target image is in front of the full screen image.\r\n  * (See example at right which shows an image that is stretched to the full size of the screen sitting behind the target image).\r\n\r\n* **Add an onEvent handler** for the full screen image with a simple console.log message\r\n  * **TIP**: this is basically done for you if you add onEvent from Design Mode\r\n\r\n* **Run. Test. Debug.**\r\n  \r\nMake sure that with each click one of two things is happening.\r\n * When the target is clicked, it jumps to a new location (and optionally print a message to the console).\r\n * When the background image is clicked it should display a message to the console.\r\n * (See example console output at right).",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "true",
    "submittable": "false",
    "hide_view_data_button": "true",
    "project_template_level_name": "CSPU5_clickerGame_v1_template",
    "droplet_tooltips_disabled": "false",
    "debugger_disabled": "true",
    "lock_zero_param_functions": "false",
    "execute_palette_apis_only": "false",
    "encrypted_examples": "ACkRTDFTSHSoTlmhLpQqrIKH1PBApOFKPYyOWytXkOd2MhISlsygAFNcLX6g\n9bK+\n",
    "instructions_important": "false",
    "fail_on_lint_errors": "false",
    "makerlab_enabled": "false",
    "code_functions": {
      "onEvent": {
        "params": [
          "\"id\"",
          "\"click\"",
          "function(){\n\n}"
        ]
      },
      "randomNumber_min_max": null,
      "setPosition": null,
      "setWidth": null,
      "hideElement": null,
      "showElement": null,
      "setScreen": null,
      "setSize": null,
      "console.log": null
    },
    "teacher_markdown": "### Teaching Tip\r\n\r\nThis may be a confusing step for students for two reasons:\r\n\r\n1) We want the background image to be it's own UI element *rather* than just giving the screen a background image.  -- we're doing this so that we can detect the difference between clicking on the target image, and the background.  (The event listener for the screen triggers on every click, no matter what).\r\n\r\n2) We're making the app respond to a click but *not changing anything about the screen* yet.  We're *only* printing a message to the console.  That's okay, here. We're doing this in small steps.\r\n\r\n  * The reason is that this is a good strategy for programming with UI elements. Using console.log is a simple half-step we can verify that we've properly set up the event handler to respond to the event we want.  Console.log WILL print something if the event fires.  If console.log doesn't print, then we know the event was never triggered and we can check: do we have the ID right? the event type? etc.\r\n  * Sometimes you can be too eager and add more code to the event handler, say to change the screen, and if it doesn't work you don't know what happened - did the event not fire? Or did is the code to set the screen wrong?\r\n",
    "contained_level_names": null
  },
  "published": true,
  "notes": "",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Applab>