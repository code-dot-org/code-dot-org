<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-03T13:57:59.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to store the players on a sports team.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Player</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Player</code> objects\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TeamRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> object.\r\n\r\n2. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code>.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Sports Team",
    "bubble_choice_description": "Create a `Team` class that contains an `ArrayList` to store the players on a sports team.",
    "thumbnail_url": "https://images.code.org/21d89b4a258f762f20915af8e121511c-sports.png",
    "encrypted_validation": "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\nsUG6y3Nrj/sEnCab\n",
    "encrypted_exemplar_sources": "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\nQc1naKyCjZ6yDnI691WXZ8gwpxQ=\n",
    "start_sources": {
      "TeamRunner.java": {
        "text": "public class TeamRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Team object.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Team.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a Team\n */\npublic class Team {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Player objects\n   * -----------------------------------------------------------------------------\n   */\n\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a constructor that initializes the list to an empty list\n   * -----------------------------------------------------------------------------\n   */\n\n  \n  public ArrayList<Player> getPlayers() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write an accessor method that returns the list of Player objects\n     * -----------------------------------------------------------------------------\n     */\n    return null;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Player.java": {
        "text": "/*\n * Represents a Player\n */\npublic class Player {\n  private String name;\n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-03T13:57:59.695+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L6a_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L6a_2023\"},{\"changed_at\":\"2023-04-03 13:58:01 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:33:59 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 19:22:06 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-02 20:52:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:52:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:52:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:53:06 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:54:02 +0000\",\"changed\":[\"start_sources\",\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:54:23 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:54:29 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:55:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:56:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:56:38 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:56:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:57:25 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:57:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 20:59:42 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:00:31 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:00:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:00:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:01:05 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:01:16 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:06:46 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:13:27 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:13:31 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:13:40 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 23:49:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:19:04 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:37:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:38:14 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:38:18 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:38:29 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:38:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:39:14 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:39:17 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:39:25 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:39:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:40:06 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:40:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-04 00:40:14 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:39:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:03:00 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:03:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:03:13 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"}]"
}]]></config>
</Javalab>
