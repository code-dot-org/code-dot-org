<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "✅ **TO DO #1:** In `MusicSurvey.java`(#e7e8ea), write the `findGenreEffect()`(#e7e8ea) method to find the genre that matches the parameter `target`(#e7e8ea) and return whether or not music improved the respondent's mental health.\r\n\r\n💡 **HINT:** Use the `getEffectAsBoolean()`(#e7e8ea) method to get the effect as `true`(#e7e8ea) or `false`(#e7e8ea).\r\n\r\n::: details [**🔦 Need help with your algorithm?**]\r\n  \r\nHere is one approach to solving this problem.\r\n\r\n```\r\nfor each answer in responses\r\n  if answer.getGenre() equals target\r\n    return getEffectAsBoolean(answer.getEffect())\r\n\r\nreturn false\r\n```\r\n:::\r\n&nbsp;\r\n\r\n✅ **TO DO #2:** In `MusicSurvey.java`(#e7e8ea), write the `promptUser()`(#e7e8ea) method to prompt the user to enter a genre and return their response.\r\n\r\n::: details [**🔦 How do I prompt the user?**]\r\n  \r\nHere is one approach to solving this problem.\r\n\r\n```\r\ncreate Scanner object\r\nprompt user for genre\r\nchoice = nextLine()\r\nclose the Scanner object\r\nreturn choice\r\n```\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the documentation for the `Scanner`(#e7e8ea) class in the **Documentation** tab ⬆️ for help with creating a `Scanner`(#e7e8ea) object and using its methods!\r\n\r\n✅ **TO DO #3:** In `SurveyRunner.java`(#e7e8ea), call the `promptUser()`(#e7e8ea) and `findGenreEffect()`(#e7e8ea) methods and print the result.\r\n\r\n::: details [**🌟 Challenge: How can I let the user continue searching?**]\r\n  \r\nHere is one approach to solving this problem in `SurveyRunner.java`(#e7e8ea).\r\n\r\n```\r\ncreate Scanner object\r\nchoice = \"y\"\r\n\r\nwhile choice not equal \"n\"\r\n  selectedGenre = promptUser()\r\n  result = findGenreEffect(selectedGenre)\r\n  print result\r\n  prompt to enter \"y\" to search again or \"n\" to quit\r\n  choice = nextLine()\r\n\r\nclose the Scanner object\r\nprint \"Goodbye!\"\r\n```\r\n:::\r\n&nbsp;\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Effect on Mental Health",
    "bubble_choice_description": "Write the `findGenreEffect()` method to find a specified genre and return whether music improved a respondent's mental health.",
    "thumbnail_url": "https://images.code.org/38c2cfc6ccbf6e467a308996e09cc89b-headphones.png",
    "encrypted_exemplar_sources": "7g6uqUKBSf8CsrdaMEyHRmh2hWPJG0X5BVJaIdUSFBlbn8DOpdqGG2xtLfYC\nK+ZzWgilJAbfiXAj6oBaAESjky1hxg9ETtQa9nOwvIX+hllO0XSpDJ0MA3lP\n/LP9+NNtBaUXWI6BUdvYP2sdd51R158coI1zMmYg/jxCvG5LWLRmewSEuqIT\njLefdLfPlbXSmxbtW7pWJwUDGdbVnmqt+rK5zutJ/goajH+BTZPU8ziBS4nQ\nAnbhVmb4lB1lktBCz+0UStxlwrNuYmlzybz2Q2LBPXyVsjz3QCe35rSzIBYD\nRll4BoWdY0gnjAKqTm1FIl+dlojwTqrm6pkKtUK2tS2ouXO61N8vJHy9jAD0\nGr8XxopVpkVMus6HOWI3XINnYjAOPQ5vHOJkPC4oy30IrvzvwKc4SzT4FW7K\nO3xJdxrqu+NgowCcEoYEIaiowBP46u75R6Cp5XIF+2K8r5Z37YqUaAvNyPjA\nqa27eJaQxYJCWmxfeZDV2xVB9pZb737RBY2gyJCOhcFjUpmj+qZLely/nuwg\nrhUExFbznrQbIx1VilJhOmTDIzMLdd2OcsQW4ILcejN+A8MibCim67HuN7il\np8/xZ2e+DFBwCI8YyN+RWVdbXnBXCp+98OePqUOUj2YUMIP6mEbhzH9MEtRw\niEM9o3OPPWWTGwIIIyXH9O4dygkv6+Kxe7ms/D24gzAC8GEV8GdWo9kKyhVm\n+iSO7h/1R+I005pzb1BnqV4bC+syAxalqh16Q9pT78aAsU0xu6W3ZoAw9let\ndVxBMduxJQpfrMdxdJQcoOV0uZcl1MI5Nrx29GlCjAM2zeE6YLO7U1wlCK2H\nUCv4+gIc3Fximr5mYClU6C/kkRel7kdD0eWx1tysWpeA5CkHtI0BCItYShgu\nrZzwJcFKVx0K76jpXjkW9v/I0ggx71lwFAWXEJi75/EJc5MIMYGF8CKmN38v\njCsw70NYkj+VEG5vlo53AD0NGRIjtup3EHUbIuTUQhMBrnHMU+YDXaS/9Qlm\nT7XT0wHCVVVpzw/wkTuosPXTw3TGb4QWSoBP/FZo6us6JCelYF1/sNS/j0VB\nKhuaSaPKH6neDDKgAyRAeDtIqtjWxBe6B+zqoGaD5UqFJh9ADan1GThteB87\nBSJn8LQHaiIOxTNVPvGwNux7UcuXyFpWM5wQwccStrvy8WGtGRPIxzk62tK8\nM+zkuqCOIC6OvO4VWhzic4E4d8QtuFpAA+gqSmxeSwoGzw5s3JJdMbKB2DYD\nLVPnwddOk7H8l+m8g+irccKpLLXhbizLVqohiCBXCgbGdqV/yiY9qTOfgauV\nOCT0c3LS6biK9YP2Cpzu38+cg57liBD2Kd4gK6R0P8XEuVU/5LJTXh/9y40A\nC5lDxuNaUvjjr8qT7wuEHmGvP2Y0xL05uUARHQ1zGxYpl65TvjG5vgHU2Xnf\nVteL1ZMURuMsYesLIP3RAssxvFc9fo5UwZVCLZcMVn7AH+uyt/g/O7GHSNJl\nElwAWZj/wDfultX0QOaqtvJzONA1CtPKr5f6+PopadiihCctMi5upbaHHshU\nhh0Zd9H7xuTbgQVzr9F2TxwOFkgnvw2PTLvjJA1SYVRhZKF3/K/5pOxVK0yq\n6fX/97e33L25VgqVd1QufpHV4bJaJLNnxGmxgNIoYE1EIR2GugJRNqBPCZ4U\naHeTJ07+cZUZVlzW4lpDiMjzKS7oqw7Zb6QxiG1yM/CSaHTBvKnxJ1qp877U\nQng1QGoZQPEEZFpCrgZCKt4bp+s9yDn1nVzdX/DitJCRhYd2w3gEmpSEpdqa\nD6sTQRlsZgB3l9ndnqCW4kOfX75RelcscPXnlLCdvCkxSuBIM2SVmMScn+Dw\n04eltfblmjiU/URKbYsNO4BdbtBPw2RQldENZOvB0w+pOpszLgm5UFk0mJ3w\nMQ3OTcnBR5fG8rN0xMDprOvvH+zyEreDcBcekp0VRvA/v0b8a9q1bsNzGFn9\nAGfZ8qn5bvw+KhrezXg5cTQmEK59tklOiWswCHdhlkchgPoNy9JJlVg+awRH\nM1nKEQtcbD+SwvUgvxbyxKLvSQAE66nudIjpu147egQ57Z0SeJl+zVJvEfZo\ny+4plDjHnxSLiy2u1EK7dQeBblm1YIaiPI6Ln84THMywK7hG+E5gimf6gl8h\nHvm5FFV6yEKv+LK/ffVEorZGNOboo3ZfQcgAswPbu2Diec1PVE6C+aZQeUf+\nqGVaObPyypruE1kgvL4rxGLBGU8iD/G1SvnTcVxqy6W724cbbDKVOUlqEtn/\n/xWmMlaF8KNpotpFxSvAV0zhW4KBxkaKnuPdU9v4JIAqLN7NBAUzAKgI9Z6u\ngz2euZB58NsgvlwgU9fv26+H3ot31s40Bw7qLtgOpK9BWR61irbNsqoW0t+m\nhG37Q3AsjPMQH/6LQLkBF5H52r31+7Aydogmk2WsA1OVhf2MwDMFN5nKNxS4\nou0DT8k1Wb5S2GgvjrxDrTmdzha9tJ2vDoJmBUWxS5RCJrM08/kZMEPiib/t\nF2owWwfD7dj72bVPuEd/QRZUzqdjFLXH7pA6v3ybN2pmJl1TIJOTMEl51Erq\nzKwhYvRFsP+EG8fIdzZovhJ4VoOYvYPjgweaYnHZEuVdgGTcEdqbrCBk0pzH\nwUsVrCdJ55A+I5weh52Kqmo0GJtFsf2SYo6tgt/Fq3OLFX8EIw1a7Vlgcwwg\ndUaJwPpJGwv5GApYWcFLw8bv9OCJ7HEKJ/bKiP7vcZ3EsXVoR/PnmgCevZUR\nml/lnTh1y9XxJic1oL9hpayPtYS5JxLm2lrheAQ57wAdvQawMvAmdjJ9ANT+\nrt+4DVvRdNKqixx9+p9WF1Epe2uPwItVtMNUvppNLL3aEIWQsLHwpBXROXpt\nIaYzeY/xKiSIqdtKFBBgonLjT81MRqSOss9O+EymTG80UYvnAeEUJrvXH8Dk\nJmEPxZhuZ7B3R6Ztm5clbln9knrWB/V+0JndhXxn/M9jnqlLv/VXqg/wY+8o\nvrDpkzoM5OC9kasnZDeeXO4DagAHYpannrH7SZjWIA+I+GO8iphY0Q9x40CR\n8UDSMkLUAGRtpjrJLM2HwwTMRtVR2wgoYEtVmRXAOlXwGC977HgdKW2HzSl1\neCeLTVQtKfqQ/1tsJv/G8spB6xVZj6OcWiosRTfy7YMaN57pZZAg+F9Z9Kw/\npPwfRrvTnxlvAqd6dNEYFD916LdfPtEfcWaZwnVVe+Odv+7nSX+z/t2H3DUF\nVfEjPrM/EagfXITRtj58dEEf8/Ick+nBW6AhXxHWMOX9pwqUg2KbS3/fKDpl\ndQcB+FIQv8T3fWN9Gl+QhKUqzTDNwwNhVgx++62UU7Xh9Omep9tc3inxeAxs\nWcot0bK2JSjZ0oQknFqKZKoD71cdaIE8Sju1e9R6v6GnPZ0YBzHiQXcD7RfU\nrDpuhTAQqx5lFUD5uEdYe7/b46H2fbq9gVx4R2F3LJP/6h49ZioRNFydUsoK\nswWrJ5px8muZL6dyk3ET5rhifo1ep4iO6DrOMG2nUGTAbQyiQZsaMQpxsIMG\nclzSTz0TP9ickjEG8VE6Gjev+Ekkg8tM9ZrOLrpM7c0a+co72/ln5AlGsNkG\nfbfs52hRRdS03gIAjMZea8+1zq+6m+luLskBN+3WuRto/8VQPllALTYzRPOA\nwbaQ/JxQtZF72v6/UrIpyqpxTLGMZ5lGQmI8WsOnGhBymLIiwpDqNsF43n17\nqNRyp6dwHmP9bVnblcNmHoYum2UnaJsjHUZAFy47uQCP7e3/Pofrm+Hwa6NS\nRKC6G7C73bhKkc4R30Ytx1KfMFHEuGRKTI/2VD2PfxmUYsQaW10LrKCNvGb8\nEydZIP2nPUl+frSRoADx3WG+lqpKx/v8robd4UjmzBDyRQ9FAQ+TR1p7HrD0\nnBReQKs0VDyloXOJoJhMNCc9IaGEH0tSUXaaUXm37v9RxwkzIjyqME6D2ycm\nSiYdGzgYSYjm4gncko88Btej0sgEoeS6XKlRpfKFzX36OoFhYrzJ7trvTU0+\nX9gUw2ptNWy/8gwcGGdDHMoBNavO4lJrKTfpTAxJAwDkwmhyY2eeQXeJTvVZ\nEGSwc1IzOfdFk6BZe6hc1YBBM8i1LUD0gd5UYRrBrN/dTRMN5XYerLORBLDU\nFjE12FOcHI6smzUFuO29cKLZVBi6vIZvPb9l2szlmzTJqKuyztSZSUPWCxNR\nGt7ChxVuLhNStEWqySpPV0Q5RynOdyPeegxx3ZODoHErViKyh+YX4sdajGDj\nCFCWwW0F27o2KoWQQii7G4q5YfEX2wjBqkDWvawaxJTaXxk7a3mK8wkY20rW\n/vK60i9NKuuufRnbse2FtMEIM7NJkY+8FjR239doe6JAsLV/j/QIKTeYRa3G\nFM/KHr5teclZGwjvQ3tEzYAOfoGRibXBb00Zb01vy+PP6/qlvkYbIN8TQVf2\nrv5vDRCzmDDX0rwM0lOxVKbRI6XpwxUDDaLiov+abs4QlIy5+Y1ZK3zPpjS6\npN8V0HQLOQUfwXWFGgN7Avjsb9FMCjqBRRVPxRTnv3+k/kMfPkuiZtqphUyl\nQ2sqxBMZiGOZukjCO0Gx2suE4qF30zBDgZW+129KJmwl3pjogbjREm4M49Gu\nZvG9bozaJYqF2gjNLJrwc+fFPww02yd+35iluNH9b2jPA6jJXGYmtgj+4KxM\nfl+9cVeP6gVqQHTA/QQ88aRf79Zohi4vBgEOS+56YQcN4O8t2UAL/P61emKS\n6cWGexGACucrT9d18GJDNsVy4gkd9OSIdH7DnQVkgzToa3/02ybaUQqCyPyl\nA6fUzxqsc4D35dGpTCXE19m8lxWbq7kR5+zbUWGTKoS33IHEgK5l4UFH5zEL\nteTt2H3chLgCw6GUMP8ygEwiNHmW88sYMBpcArcM3oghARdMPqMzi/xomEm9\nr/WeCtSFOrFNemqNM3mMZBJ/h/DHXn4pUCsXQJ3x7HcM1pmdc81icIN3r+wO\nRNylHFe51cUbEFSQwA1/WpyV97oAqq69PDjpMjZzReV5wLAdIcQf9rMgq66J\neuxE59nr0f7AuBvw6ZfP1k99Kkj09TC1TtXfxlMTNXLDOtFSTWRuooFqIs6j\nrbs561yd0DCslUGZOZWin529HLGQ3AyfUG7CkIEVmoA10VKKyBZ/fzulIntU\nfiT/0Ht/N8xqoJrgSI/aSX8Jh4LK+P1/RCp5a4ZCT46yUVJjo0bJ+slxVqLC\n3qtr1pWAzQPTqk8vM3qMNlLs18DxgeAuPvfMy4i/mP6pjiOkiMQMrcZvxanN\nCyaRLHPoKMfa4By5wXsEFXf0DuyLsZVK9KVnUAJFLKMvTzp3SXEXVuBFWgKk\nlKACjzW6OVG35OGzODtMGi+D/1tse8KJ71T1vngINCZE42aGtr9ErF5od9Wi\nDSkW8a8nkbK9jzNvktR5FapQzd5do20lalVu7UsnCrdnXzhAdn44g+7CYc/d\nVid+FrUz7/YZo/4JI2jks0OZAhavK2gGNhNAFXa3a2YRJG9QhNL9INdIMmAO\n/G5RtWIB5wNfS7f8G/6BfIRsfXqYtr8cb47Su/122jSxjvtVVlWiAFpjOwjE\n8CiwcR1/fUldrYNt6nESzKYekcsdVX1tvISGpT03Wse7XLy6TyzIIGwhRKXX\nt4KWCiRKNbM5XkrXgg+DEdcRTdi9KoijA4BA/7n1FEkIbRpuYkhMyXW2WMTr\n2XsU6lZQKqeLsG3OCaBnqr8izQZNs1AD4OMugGD8ZwGvcEXJTyfKSXnXyxq9\n8pD5VmOJVZEMnBbaOTVgytodEXTWTcu64DeaVRt9MFCuTFdxe+9TaOVt8VYA\nJVVNMRzQA9ij/9tDw3m9VpWnHwT9eIEcz0ECVqWO2C5QchFfEzxLUXsDoHWB\nEd6wyPMoVGu5W9mmydoJxDaHKaqOTpv/g68wdTjUdssCxH3BfwswOhYlTH4D\nU3bKc307zJOVMdwmN1Y9Rsp4NvT0SLUSB3WjbTJUI4tJqL1XQonFdlZDjYkW\nFyUG0yoPtt4bire7RZ9GI5Mer8Oor78ATCPakC3coQvOLbY2ODdE05MNoFbn\n7puPecA8D+arBW3wA0DF3bfAg2rJkYhlNuATjUZ2aw9KzKPByCGGK+RxTp5c\nefSpNb+m95vlYDkzXw9ImN0Ut0O6g8R0UBMo27Yi3hCWYw5n5Uc4o67u5pL4\ncLSZQIuaECmpX83DPH2CqTNEMxPHEteLutEQbjErTAhmKH20B5obIcGymXPu\n982SFmbRQy5YPYSsuV0hLZqMMMwFipoGew/X5ed8zqV1XZ03YBrUNAHvA4oK\n1ruj+XYKzM3oBV5eeP84k82r9TvkqiPMaHDyacCSG8M2sp5wDw9tv2n8FC5D\nCj0QeSqKDMeOgoyFASrJeRR6/TDqLGbVYoqhbpYGbTvybJE5pt4OeeEGUBmd\njNphYpMt6v45qrj7bJapCxfrBvg6EGGd3PHbmF570HorSaX1YwDbtOH/OxLM\nZVHGQFdDj0Nh/JaiA+e78wq47EhwqnBaBbWL27xssJ4goUr/jB6DPdFop6Jz\nE0dTtu/hd+IstVtvRdXFKeqoGxPk8jq6kWeQDyXoJn69dEkQ3DtKWq8m9vE+\ncgOO9okkF1Vb2JHCE3jPFInq3HOldt3tkZdpk/tY/R+ToLGRnw/Po/5GzCF0\n1N/vxwvHkb3ygleSFyUmx/YhLFUFVb7mFaVvPj94IBxlCI1o88nwrOnLJXkW\nYzkF3qb/K3IjcjmS6akSjISKoYfljGDECX7rdeqeeEjZ5WtAH2UT4Tm6UKKA\nkucBTT9gEFM5v8TWTD/ycI7vyuKFBCGXLaZ6QFxy6vmLpocRBH1lVt+AM5ql\nlOzTYF+VrgpOxJUU6ULczs281UxSCrCFilMkB7BKX743K0HxEq5X7OmGQnru\nL72PKKyz2/V7TuH1pCMCxOmxm/o0BOAWLosipjE4ivaQntEJ5dj0ASxK3D4I\n+5LmQVNJjtnwIZofFAYu1xYu28JwGHwrt5A6yazddqwV0AOY1XQcZst6kSaR\nV/lCMLwJzHwpYDwBFsq5zqxkFL9uILEyxUzOSE+CD7mZqjje7VsbXPU7w8gp\n58Zm/PE+HHNnVUl9SgJtHWaLPTnH7yOOKKtLZVf56xo3t1s2UgGKjflwaOd3\nZnEKMC9EsPAFxcgNuc4jcSuAf2bB2rAMtgIDdEqV/fdSBETokpJ8H7NDEwGd\nnZ/VOeooFOvKh7PaSrbcpgcBZjT0X1ckhfLG8orM6F+qHACX6BLe7GiXL1z2\n7Mey1RkG3QSVOoYDLi+Ox3YDg8S2dPdVv/sLeUypRFkAHPaagwO8jQseTGoY\nUeMx0LimaZpQX+3vcdxG0dEYbwsMxVoBpICvFZV7S5txb38sNzql5H2FlsHj\nSPEiDhKwSb+B5mdekb0x1Ninv+7Ghg2+VmHk/c5K25q1KmLrq1cn5+Pjx1KM\n7vDI/4BMI9vbsNj/qvr9tyVx8gmYNYHX5MtWI8kE+eWc9FIVTTTjf1YFYq9h\nRGAe340nhI0zldjD5qPsdMEaYSx1y0gr4AE4TGEg0nArP3k7VZ6XOrN1LyQQ\nidl3LH69C/wBorbzCSWcYhvqV8nwbskjY5kbIgDkRkoocpYLOqLM4OflfoSo\n34W34DCiJwn2l46/KwxQ9NkvXVtzoP+cd+AY33uvcrxQirI3f6L6yFYcxfGZ\nHLi6zzMu+WczVw9MjokT+5xa3DtFBWoEMmw7blaNhnfSLQKpjYlNCXazSqrL\nA2oK16cWT7afhOVZyzgaNxeqOOW3n4M7r9k32dBHLByGc/IbjmXSXX0ZEhL0\nWupF+LLipyn1eYhM8CUuDvql9/XILDOMop6n+QokdquNx2or9NKCwwZYynJw\nXXdMvd7MfCeqBFBbmgnQ/lPkUyqURcY9/R7emer+vExwa8ozbrc1BLWHXkNq\nnweSmHfVjQ1O1bxltsGte7+vtvfrC4+TynkawbUA8kLecBfgiqt6VAH6RQdS\nl3tdrQJBJJaQJXekQoKTgdVvANWBwlZvJaS9iS89R7oN9Sf+YvarZNShs7o+\nHC8Pc26sbYbFRcTumQByRu3RRl+gLogk9n4RQk0duzq/v5MCuaZRt3PqIOqF\nqI7+vXs9hz55UQnQHFcY/lUQ6qrfH6+axhe0Vpg46NQKp9aduzznqSFzPmep\n7YWLvzzdjThAIpXHSJU76Yxl7FQKRGJkSWfOMcNjkh+V9D5E0Kv0K/FEK/F2\n3X9e6uiLppXzcJdkfS5dsra2BSVVOI0MEwpYUqRR7iN9CP762p9yN+o5wqOo\nmFuvlMy8I8FBockXxYqmsrADGJF3VfrlmT8kLYAS9gxeKYpWAMdsAWtE8M9o\n1tIWRI5y5GJ/L3W+WXWn8B4FEI/lG5mFk76AVJxFilCW8F7d8R7DlMykwEk6\nYs0lWshO8DQH19LiagSI0BMOlG3vB/5lIqEho0R3aIJ9FWljqK0oxFMLWkrw\n3v06K6fCbMbN8iTEwk44iMeHcIcBAg++zVeoAsg3OBiPLPEAZCEX6TB9Nnqb\nlG/UVMn9oM0RLHeEDL1bvbr9Mx+AwnGWNJE8uqyS9ep2zyyXXOL9d96yD6nm\nH/W8d0ycA75PiOTzN89VnvY3z8vzmcDflS/ZbVfC8TtuCqh3Q7WUNGMaAmIP\nxrNIRkmzR41hge3YVq0ZAMPR8IiwLUUIqc7bwlz7jafnm07naB3Sx3t9yaOz\nigkMNucThnsnX4pQmsCr6uz9YdP4VvqItSgDsVS+xea5fRseOZ2wzeDMZNRa\nty5uGZCp2Jg+TQ/fN9TYxrfahus3Bq6jmx8jBQbYI9VfIwKj6jh9pJOKEDtZ\noe37ki8o70gHHXhdxaw6kSCaHuPW40SMMP6EwPa+XkuAVDBtac7X5X+NMM/C\n24z93qItZRFeBiIWlM3MNd3utljN7tWwkwxw5XTT7A5jC9zoal4DuT18IkIn\nplWKcRscI/xDuay5tKxnSqjP7dIv8SpiSgCyb0Vky8rBvhMaps3k8ssa8XqH\nM33oc/ke9Y7Frs/fHdj9wDSdDEYS3uw+CBsQB9bSb6qZLvwgWoSRifGdVX9Z\nMPESYYfmCB6tMCVTH2vN9cFlLUzEjjttpgKJep2Rl9LikrGNDOhkBc01wbtV\ny4XJAatSxOEwYj4cqzwM6Pp7zxH3gTYiXjf0SA+Dn3ODwOu/uK9JS5U5IZrH\nQ5ufgL94LIflwStc1bNGBUDbLezVo3oIAT/Qw5U8MG8fFkmYb0Vy3GAxeN7b\nK1yRt8q8YjIR5rfWyvXP9tUG0OyFHquZYLMy+evOx9yVC7irjOZcrhhM+/xz\n+woq27NgncXXLjcgVNvptJM1COSDMrNl6LICbFXyv2vFAblHLgMAi+Y2yl1d\n29jFb7oV3zB3SWdISuBfcwg177pOP9us+ZMJ43gw7UyjVrv5gZF+HnwtVLso\nzaVrczlctdgNVwuNGSc/veij1IVQlxnk7PHbSFm7PiRFRRQu7HSLe79d9D9m\nG9bpHVtUDdER7TdC/HR/PnY5x4kAA+kTbYXNtCyfSwcGfW8rTMTuF+PERHMP\n7vWO51nsFLasjKCh9JIvhfF758vzWD5Oa6JW8pjT5F/H96yhxJkg38HyloSL\no1aDH+TLKrqYEvkaTI7FkbRwCfA8iGJBb9Cma9mMfkznJ/bD7awWRGRov2Ku\npZ1imssuWN/qJAh14eAdqFSjP3IkHgwEhicMg+9BuFFAsotbQ8GTZ0e3OaSJ\nj8Bcc167BII2ObOBOCQMg0eoanMtvAOC/BvC7zyV9NswXZKq3Zkc4m/eucgy\nVF6wqJWZfqrwTIGtKH7vqqpvZUgFrAnWyssUyQrRvnwvvilUesXS/6p5+uUY\nzabQWt2bWqPgEAmz4mbOndVqutNd3K9yVUKYgPM9MX588CDL17dyZJ5r4mHn\n56rMKSVSUGK9WnHPI/qlhuIv4zC4GKYSijJrV1weuC9CSLNxKPEYU0f71P6o\nDz+KuOJHFHQ5wJ/r7piozwrqd+3ZOk6jnbr9QNeDICUmxK63+huI5w1PVK2Q\nHWicEjkMq5Woaui7DGSx79My9n2kr4OO2el00WcoY1VCbxrKSz012sO6AmVp\ni18Lis6dYKIuQqiUOPDNY79P+V0bCmxIHSCnkSgw1oZ+C/l9/4uQSwpxzNrk\nWm7bLnECEmdpkzwWC6qUGcI8p6J+zi1d4LKYxvIDduS7zAr1ZYOwJoLr8XPk\nH35srQCKwB7h1J0fR8+/OHOenAqJAQzCGQR6qjdSocyb8Fp1P8j/KHlJ7Zj4\nmJrliSuRbsMUFA1MW5IjAb91gh/mEjklMQ0VQAmrPXDxOIGnZw5cIuBVMKfX\nmytY8FWD6jj7QqJinD6yOpYzt092r52PGFS6bHGSE8p6/XTk6eq7+bWnpymZ\nYqXK3DXevset6aBMMkMMEnOXn+BQpaefafilTCLWOFsES+JRvo3GDjnkWufM\nFlnA14d+rulna5syxGK1gQRpBcOMheszVuhko6OeQkk+cNKGSkpBJEGQgVtp\ndXvQO/byqN0d4UNNHQECXGdBBXgABDgXVehtAijIYl/zOL9AH/lXPAPQmxAM\n81vQPf51OCsEKiNnIXLK+6gBg0TpChL4Sn4OjkCLbOZddS3fZp0nKGQXwg6M\ns2MyWa6Vl1jZdnsprXBKkiRb8rfPx8/f18IspbG8iVNHgCWLA5+X17vGBKdV\nuxFNtP/UEhkD8RNz3sEmsxdY/q9N5LCkSSWlY3VnSRSY81X8c2FMvVrLiwpl\n67T8bBYap7QR1fwF5ulpfY1kHnzVk8NJ0bHcz4Pu+U0YD8ZEMtMY3C/oL6Qz\n1ZnglQzhasNIIkuwd+qPYygfVi0yUatASE3BtFUFqSuFEnYGZspP5TDdEBI6\nrfSIEj7/oubjXZ/DFEoh2BMlVkOKRoxoLwtF7BfOjrK+2HMQqOAwnsxFJABD\nIjGPFDYJ7joyYZdDJO9JLTJGf1dFAQN6SyHH9wjF7flYMA2Bu5NEyf8soT5q\nRvWsYayQhaIyc5dgYrNutSoap42XTVv9gDCuj8GR5k4LsIj2kgFBTg200M51\nFcjwoGnWO0xwf+CFzfHK5x83ZnUJS23JdenQDRscyYjJxKKeSg9lI8Enfhp7\nanIjB4pjsjgxU4DYRerHV9IDfen1FX7ypQS9hFVEXuNTkGvEdw9CIPplUE/I\nu0rv/86Wf+cIGETrzNNlnyaVyG6ze5gb3ptE9bfkYDZF8G9orWiBqjt5SVRx\n061mjbiXgE3Mh2p1ZLJsv6vSfvuyx9Spz9+pnN0tHv5oe11VC/j1FScFSRah\ntCa/icmOVC42bZxuuYp3ZdzhCGyOZ7BjV0W9tOhRJKlxrX0Fc7IpT2v37/KF\nD6qCLlcP54sQyTw8zMDsp692q1g+Knbjg5odVFNBE7A6gE0PudNbQ+3tsjTP\nKEJkXLResbVzq7KfxooyOFgmuJQ7ly3cI5g3OmJp0q4ZUNBodqf3YyoQ5CAf\nZU8EVUTDWk/qn2yXxpUTwZdzoU/GVxyI9aBcv+YuzrWDrWSiKOrDNT9Z3k+W\nAXTmD0CC+KUKBKyJFwrGJSNbt8X2j4XhwJn28uvTbC/dagHko/9WjXBZ08nI\nFFXaKBCT4sjNfB+5rlm6VNS0EuzNxpn8uWbxlm+lWI4zCgE6C0kPWGWg4EEF\ncVK9ZXegbRKlB141cD3CGMM//vbRQDNicYBds7yEM//9UF03vqZOvrJzOEMg\naa63gWJ4l1el7cMOuxHaF6zn+4gCZRRUmaeFv2hEArQ7jpJSWVQWjHfCxQen\nXZ0ZDDu8KIxeMVQdozo5/+kzNdwFBpqvhOIFxh0mobu6mkd6ZlE408SOtrU9\nmiV76Iu7TYm2liwJLzCHX3xb9EWyDYgyyThxQlarWw==\n",
    "encrypted_validation": "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\nEL6acVoMxJrEhdFjMBXAa5IfiA==\n",
    "start_sources": {
      "SurveyRunner.java": {
        "text": "import java.util.Scanner;\n\npublic class SurveyRunner {\n  public static void main(String[] args) {\n\n    MusicSurvey responses = new MusicSurvey(\"genres.txt\", \"effects.txt\");\n    System.out.println(responses);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Call the promptUser() and findGenreEffect() methods and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n\n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "MusicSurvey.java": {
        "text": "import java.util.Scanner;\n\n/*\n * Manages data about responses to a survey\n */\npublic class MusicSurvey {\n\n  private String genreFile;          // The name of the file containing the genre data\n  private String effectFile;         // The name of the file containing the effects data\n  private Respondent[] responses;    // The 1D array of Respondent objects\n\n  /*\n   * Reads the data from genreFile and effectFile to initialize responses\n   */\n  public MusicSurvey(String genreFile, String effectFile) {\n    this.genreFile = genreFile;\n    this.effectFile = effectFile;\n    responses = createResponses();\n  }\n\n  /*\n   * Returns a 1D array of Respondent objects using the data from genreFile and effectFile\n   */\n  public Respondent[] createResponses() {\n    String[] genreData = FileReader.toStringArray(genreFile);\n    String[] effectData = FileReader.toStringArray(effectFile);\n\n    Respondent[] tempResponses = new Respondent[genreData.length];\n\n    for (int index = 0; index < tempResponses.length; index++) {\n      tempResponses[index] = new Respondent(genreData[index], effectData[index]);\n    }\n\n    return tempResponses;\n  }\n\n  /*\n   * Finds the genre that matches target and returns true if music\n   * improved the respondent's mental health, otherwise false\n   */\n  public boolean findGenreEffect(String target) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Find the genre that matches target and use the getEffectAsBoolean()\n     * method to return true if effect is \"Improve\", otherwise false\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return false;\n  }\n\n  /*\n   * Prompts the user for a genre and returns their response\n   */\n  public String promptUser() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Prompt the user to enter a genre and return their response.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    return \"\";\n  }\n\n  /*\n   * Returns true if effect is \"Improve\", otherwise false\n   */\n  public boolean getEffectAsBoolean(String effect) {\n    boolean result = false;\n\n    if (effect.equals(\"Improve\")) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /*\n   * Returns a String containing each respondent's information\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (Respondent answer : responses) {\n      result += answer + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Respondent.java": {
        "text": "/*\n * Represents a respondent to a survey\n */\npublic class Respondent {\n\n  private String genre;      // The favorite genre of a respondent\n  private String effect;     // The effect music had on a respondent's mental health\n\n  /*\n   * Sets genre and effect to the specified values\n   */\n  public Respondent(String genre, String effect) {\n    this.genre = genre;\n    this.effect = effect;\n  }\n\n  /*\n   * Returns the favorite genre of the respondent\n   */\n  public String getGenre() {\n    return genre;\n  }\n\n  /*\n   * Returns the effect music had on the respondent's mental health\n   */\n  public String getEffect() {\n    return effect;\n  }\n\n  /*\n   * Returns a String containing the genre and effect\n   */\n  public String toString() {\n    return genre + \" - \" + effect;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "genres.txt": {
        "text": "Latin\nRock\nVideo game music\nJazz\nR&B\nJazz\nVideo game music\nK pop\nRock\nR&B\nCountry\nEDM\nHip hop\nCountry\nJazz\nPop\nHip hop\nHip hop\nRap\nHip hop\nHip hop\nRap\nR&B\nPop\nRock\nPop\nRock\nPop\nPop\nPop\nRock\nClassical\nMetal\nRock\nClassical\nPop\nPop\nPop\nRock\nEDM\nVideo game music\nRock\nVideo game music\nClassical\nMetal\nFolk\nClassical\nRock\nMetal\nPop\nEDM\nK pop\nRap\nPop\nRock\nClassical\nRock\nRock\nFolk\nVideo game music\nK pop\nRock\nRock\nMetal\nRock\nMetal\nRock\nHip hop\nMetal\nRock\nRock\nRock\nRock\nHip hop\nHip hop\nJazz\nMetal\nR&B\nEDM\nHip hop\nRock\nJazz\nK pop\nRock\nR&B\nRock\nJazz\nMetal\nR&B\nHip hop\nMetal\nVideo game music\nClassical\nRock\nVideo game music\nMetal\nEDM\nRock\nMetal\nRock",
        "isVisible": true,
        "tabOrder": 3
      },
      "effects.txt": {
        "text": "No effect\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nWorsen\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nImprove\nNo effect\nImprove\nNo effect\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nWorsen\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove",
        "isVisible": true,
        "tabOrder": 4
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    }
  },
  "game_id": 68,
  "created_at": "2023-01-12T22:17:36.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-01-12T22:17:36.450+00:00\",\"changed\":[\"cloned from \\\"CSA U3L8-L6b_2023\\\"\"],\"cloned_from\":\"CSA U3L8-L6b_2023\"},{\"changed_at\":\"2023-01-12 22:17:38 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:33:21 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:55:54 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\",\"display_name\",\"bubble_choice_description\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 17:15:42 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 17:15:56 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:26:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:27:44 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:29:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:07:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:07:52 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:09:30 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:10:09 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:13:56 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:48:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:53:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:57:51 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:58:06 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:58:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:58:38 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
