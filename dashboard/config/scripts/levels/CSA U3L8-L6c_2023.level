<Javalab>
  <config><![CDATA[{
  "published": true,
  "game_id": 68,
  "created_at": "2023-01-12T22:17:36.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MusicSurvey.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findGenreEffect()</code> method to find the genre that matches the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">target</code> and return whether or not music improved the respondent's mental health.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>HINT:</strong> Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getEffectAsBoolean()</code> method to get the effect as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">true</code> or <code style=\"background-color: #ececec; color: black; font-weight: bold;\">false</code>.\r\n</div>\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MusicSurvey.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">promptUser()</code> method to prompt the user to enter a genre and return their response.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SurveyResponse.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">promptUser()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findGenreEffect()</code> methods and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Scanner</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with creating a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Scanner</code> object and using its methods!\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nfor each answer in responses\r\n  if answer.getGenre() equals target\r\n    return getEffectAsBoolean(answer.getEffect())\r\nreturn false\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I prompt the user?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ncreate Scanner object\r\nprompt user for genre\r\nchoice = nextLine()\r\nclose the Scanner object\r\nreturn choice\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üåü Challenge: How can I let the user continue searching?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ncreate Scanner object\r\nchoice = \"y\"\r\nwhile choice not equal \"n\"\r\n  selectedGenre = promptUser()\r\n  result = findGenreEffect(selectedGenre)\r\n  print result\r\n  prompt to enter \"y\" to search again or \"n\" to quit\r\n  choice = nextLine()\r\nclose the Scanner object\r\nprint \"Goodbye!\"\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ What is the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \r\n    <p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class is a hidden support class that has methods for reading data from a text file into a 1D array. It has the following methods:</p>\r\n\t\t<ul>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toStringArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> objects containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toIntArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> values containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toDoubleArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> values containng the data</li>\r\n\t\t</ul>\r\n    \t<p>For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nString[] names = FileReader.toStringArray(\"names.txt\");\r\n \r\nint[] numbers = FileReader.toIntArray(\"numbers.txt\");\r\n \r\ndouble[] prices = FileReader.toDoubleArray(\"prices.txt\");</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Effect on Mental Health",
    "bubble_choice_description": "Write the `findGenreEffect()` method to find a specified genre and return whether music improved a respondent's mental health.",
    "thumbnail_url": "https://images.code.org/38c2cfc6ccbf6e467a308996e09cc89b-headphones.png",
    "encrypted_exemplar_sources": "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\n",
    "encrypted_validation": "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\nEL6acVoMxJrEhdFjMBXAa5IfiA==\n",
    "start_sources": {
      "SurveyRunner.java": {
        "text": "import java.util.Scanner;\n\npublic class SurveyRunner {\n  public static void main(String[] args) {\n\n    MusicSurvey responses = new MusicSurvey(\"genres.txt\", \"effects.txt\");\n    System.out.println(responses);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the promptUser() and findGenreEffect() methods and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n\n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "MusicSurvey.java": {
        "text": "import java.util.Scanner;\n\n/*\n * Manages data about responses to a survey\n */\npublic class MusicSurvey {\n\n  private Respondent[] responses;    // The 1D array of Respondent objects\n\n  /*\n   * Reads the data from genreFile and effectFile to initialize responses\n   */\n  public MusicSurvey(String genreFile, String effectFile) {\n    responses = createResponses(genreFile, effectFile);\n  }\n\n  /*\n   * Returns a 1D array of Respondent objects using the data from genreFile and effectFile\n   */\n  public Respondent[] createResponses(String genreFile, String effectFile) {\n    String[] genreData = FileReader.toStringArray(genreFile);\n    String[] effectData = FileReader.toStringArray(effectFile);\n\n    Respondent[] tempResponses = new Respondent[genreData.length];\n\n    for (int index = 0; index < tempResponses.length; index++) {\n      tempResponses[index] = new Respondent(genreData[index], effectData[index]);\n    }\n\n    return tempResponses;\n  }\n\n  /*\n   * Finds the genre that matches target and returns true if music\n   * improved the respondent's mental health, otherwise false\n   */\n  public boolean findGenreEffect(String target) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Find the genre that matches target and use the getEffectAsBoolean()\n     * method to return true if effect is \"Improve\", otherwise false\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return false;\n  }\n\n  /*\n   * Prompts the user for a genre and returns their response\n   */\n  public String promptUser() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Prompt the user to enter a genre and return their response.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    return \"\";\n  }\n\n  /*\n   * Returns true if effect is \"Improve\", otherwise false\n   */\n  public boolean getEffectAsBoolean(String effect) {\n    boolean result = false;\n\n    if (effect.equals(\"Improve\")) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /*\n   * Returns a String containing each respondent's information\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (Respondent answer : responses) {\n      result += answer + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Respondent.java": {
        "text": "/*\n * Represents a respondent to a survey\n */\npublic class Respondent {\n\n  private String genre;      // The favorite genre of a respondent\n  private String effect;     // The effect music had on a respondent's mental health\n\n  /*\n   * Sets genre and effect to the specified values\n   */\n  public Respondent(String genre, String effect) {\n    this.genre = genre;\n    this.effect = effect;\n  }\n\n  /*\n   * Returns the favorite genre of the respondent\n   */\n  public String getGenre() {\n    return genre;\n  }\n\n  /*\n   * Returns the effect music had on the respondent's mental health\n   */\n  public String getEffect() {\n    return effect;\n  }\n\n  /*\n   * Returns a String containing the genre and effect\n   */\n  public String toString() {\n    return genre + \" - \" + effect;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "genres.txt": {
        "text": "Latin\nRock\nVideo game music\nJazz\nR&B\nJazz\nVideo game music\nK pop\nRock\nR&B\nCountry\nEDM\nHip hop\nCountry\nJazz\nPop\nHip hop\nHip hop\nRap\nHip hop\nHip hop\nRap\nR&B\nPop\nRock\nPop\nRock\nPop\nPop\nPop\nRock\nClassical\nMetal\nRock\nClassical\nPop\nPop\nPop\nRock\nEDM\nVideo game music\nRock\nVideo game music\nClassical\nMetal\nFolk\nClassical\nRock\nMetal\nPop\nEDM\nK pop\nRap\nPop\nRock\nClassical\nRock\nRock\nFolk\nVideo game music\nK pop\nRock\nRock\nMetal\nRock\nMetal\nRock\nHip hop\nMetal\nRock\nRock\nRock\nRock\nHip hop\nHip hop\nJazz\nMetal\nR&B\nEDM\nHip hop\nRock\nJazz\nK pop\nRock\nR&B\nRock\nJazz\nMetal\nR&B\nHip hop\nMetal\nVideo game music\nClassical\nRock\nVideo game music\nMetal\nEDM\nRock\nMetal\nRock",
        "isVisible": true,
        "tabOrder": 3
      },
      "effects.txt": {
        "text": "No effect\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nWorsen\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nImprove\nNo effect\nImprove\nNo effect\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nWorsen\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove",
        "isVisible": true,
        "tabOrder": 4
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "encrypted_examples": [

    ]
  },
  "audit_log": "[{\"changed_at\":\"2023-01-12T22:17:36.450+00:00\",\"changed\":[\"cloned from \\\"CSA U3L8-L6b_2023\\\"\"],\"cloned_from\":\"CSA U3L8-L6b_2023\"},{\"changed_at\":\"2023-01-12 22:17:38 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:33:21 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:55:54 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\",\"display_name\",\"bubble_choice_description\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 17:15:42 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 17:15:56 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:26:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:27:44 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:29:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:07:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:07:52 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:09:30 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:10:09 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:13:56 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:48:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:53:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:57:51 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:58:06 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:58:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:58:38 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 14:22:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 14:22:57 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-31 01:47:46 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 21:23:01 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 21:30:42 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-07-12 14:28:46 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
