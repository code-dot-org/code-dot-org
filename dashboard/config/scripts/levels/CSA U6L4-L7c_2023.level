<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-03T13:59:12.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">CodeSchool</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of of courses available in an online learning platform.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">CodeSchool</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Course</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Course</code> objects\r\n\r\n* a method called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addCourse()</code> that adds a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Course</code> to the list\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SchoolRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">CodeSchool</code> object.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addCourse()</code> method to add courses to the list.\r\n\r\n3. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> and using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">add()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Online Learning",
    "bubble_choice_description": "Create a `CodeSchool` class that contains an `ArrayList` that stores the courses available in an online learning platform.",
    "thumbnail_url": "https://images.code.org/fc419d6b79b2e64018e67f2f1bf17bba-online-lesson.png",
    "encrypted_validation": "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\nyKYhYf7v\n",
    "start_sources": {
      "SchoolRunner.java": {
        "text": "public class SchoolRunner {\n  public static void main(String[] args) {\n    Course course = new Course(\"Java\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a CodeSchool object.\n     * -----------------------------------------------------------------------------\n     */\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the addCourse() method to add a course to the list.\n     * -----------------------------------------------------------------------------\n     */\n    \n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n    \n  }\n}\n",
        "isVisible": true,
        "tabOrder": 0
      },
      "CodeSchool.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a CodeSchool\n */\npublic class CodeSchool {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Course objects\n   * -----------------------------------------------------------------------------\n   */\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a constructor that initializes the list to an empty list\n   * -----------------------------------------------------------------------------\n   */\n  \n  public ArrayList<Course> getCourses() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write an accessor method that returns the list of Course objects\n     * -----------------------------------------------------------------------------\n     */\n    return null;\n  }\n\n  \n  public void addCourse(Course newCourse) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write a method called addCourse() that adds a Course to the list\n     * -----------------------------------------------------------------------------\n     */\n  }\n  \n}\n",
        "isVisible": true,
        "tabOrder": 1
      },
      "Course.java": {
        "text": "/*\n * Represents a Course\n */\npublic class Course {\n  private String name;\n\n  public Course(String name) {\n    this.name = name;\n  }\n\n  public String toString() {\n    return name;\n  }\n}\n",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "encrypted_exemplar_sources": "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\n"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-03T13:59:12.148+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L7b_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L7b_2023\"},{\"changed_at\":\"2023-04-03 13:59:13 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:34:36 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 19:41:12 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-05 17:42:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:43:29 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:43:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:43:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:44:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:44:29 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:44:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:44:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:45:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:45:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:46:16 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:46:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:46:58 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:05:14 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-08 02:28:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"}]"
}]]></config>
</Javalab>
