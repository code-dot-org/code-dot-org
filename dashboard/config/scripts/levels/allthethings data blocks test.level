<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-10-21T20:42:28.000Z",
  "level_num": "custom",
  "user_id": 18,
  "properties": {
    "skin": "applab",
    "markdown_instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
    "instructions": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
    "code_functions": {
      "onEvent": null,
      "button": null,
      "textInput": null,
      "textLabel": null,
      "dropdown": null,
      "getText": null,
      "setText": null,
      "checkbox": null,
      "radioButton": null,
      "getChecked": null,
      "setChecked": null,
      "image": null,
      "getImageURL": null,
      "setImageURL": null,
      "playSound": null,
      "showElement": null,
      "hideElement": null,
      "deleteElement": null,
      "setPosition": null,
      "write": null,
      "getXPosition": null,
      "getYPosition": null,
      "setScreen": null,
      "createCanvas": null,
      "setActiveCanvas": null,
      "line": null,
      "circle": null,
      "rect": null,
      "setStrokeWidth": null,
      "setStrokeColor": null,
      "setFillColor": null,
      "getImageData": null,
      "putImageData": null,
      "clearCanvas": null,
      "getRed": null,
      "getGreen": null,
      "getBlue": null,
      "getAlpha": null,
      "setRed": null,
      "setGreen": null,
      "setBlue": null,
      "setAlpha": null,
      "setRGB": null,
      "startWebRequest": null,
      "setKeyValue": null,
      "getKeyValue": null,
      "createRecord": null,
      "readRecords": null,
      "updateRecord": null,
      "deleteRecord": null,
      "getUserId": null,
      "moveForward": null,
      "moveBackward": null,
      "move": null,
      "moveTo": null,
      "dot": null,
      "turnRight": null,
      "turnLeft": null,
      "turnTo": null,
      "arcRight": null,
      "arcLeft": null,
      "getX": null,
      "getY": null,
      "getDirection": null,
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "show": null,
      "hide": null,
      "speed": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "setTimeout": null,
      "clearTimeout": null,
      "setInterval": null,
      "clearInterval": null,
      "getTime": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "lessThanOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRound": null,
      "mathAbs": null,
      "mathMax": null,
      "mathMin": null,
      "declareAssign_x": null,
      "assign_x": null,
      "declareAssign_x_prompt": null,
      "console.log": null,
      "declareAssign_str_hello_world": null,
      "substring": null,
      "indexOf": null,
      "length": null,
      "toUpperCase": null,
      "toLowerCase": null,
      "declareAssign_list_abd": null,
      "listLength": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null,
      "drawImageURL": null
    },
    "edit_code": true,
    "embed": "false",
    "start_blocks": "// Simple storage unit test.\r\n\r\nvar id;\r\nvar table = 'storageTest';\r\n\r\n\r\nvar startTime = getTime();\r\nfunction elapsedTime() {\r\n  return '@ ' + ((getTime() - startTime) / 1000) + ' seconds';\r\n}\r\n\r\nconsole.log('calling createRecord @ 0 seconds');\r\ncreateRecord(table, {name:'Alice'},  function(record) {\r\n  if (!record.id) {\r\n    console.log('error creating record: result contains no id.');\r\n  }\r\n  id = record.id;\r\n  testRead1();\r\n});\r\n\r\nfunction testRead1() {\r\n  console.log('testRead1 ' + elapsedTime());\r\n  readRecords(table, {id:id},  function(records) {\r\n    if (records.length === 1 && records[0].name === 'Alice') {\r\n      testUpdate();\r\n    } else {\r\n      console.log('error in testRead1: expected record with name \"Alice\"');\r\n    }\r\n  });\r\n}\r\n\r\nfunction testUpdate() {\r\n  console.log('testUpdate ' + elapsedTime());\r\n  updateRecord(table, {id:id, name:'Bob'},  function(record, success) {\r\n    if (record && record.id === id && success === true) {\r\n      testRead2();\r\n    } else {\r\n      console.log('unexpected callback params in testUpdate: record: ' + record + ' success: ' + success);\r\n    }\r\n  });\r\n}\r\n\r\nfunction testRead2() {\r\n  console.log('testRead2 ' + elapsedTime());\r\n  readRecords(table, {id:id},  function(records) {\r\n    if (records.length === 1 && records[0].name === 'Bob') {\r\n      testDelete();\r\n    } else {\r\n      console.log('error in testRead2: expected record with name \"Bob\"');\r\n    }\r\n  });\r\n}\r\n\r\nfunction testDelete() {\r\n  console.log('testDelete ' + elapsedTime());\r\n  deleteRecord(table, {id:id}, function(success) {\r\n    if (success === true) {\r\n      testRead3();\r\n    } else {\r\n      console.log('unexpected callback params in testDelete: success:' + success);\r\n    }\r\n  });\r\n}\r\n\r\nfunction testRead3() {\r\n  console.log('testRead3 ' + elapsedTime());\r\n  readRecords(table, {id:id}, function(records) {\r\n    if (records && records.length === 0) {\r\n      testUpdateNotFound();\r\n    } else {\r\n      console.log('error in testRead3: failed to delete record id ' + id);\r\n    }\r\n  });\r\n}\r\n\r\nvar wrongId = 789;\r\nfunction testUpdateNotFound() {\r\n  console.log('testUpdateNotFound ' + elapsedTime());\r\n  updateRecord(\"mytable\", {id:wrongId, name:'Bob'}, function(record, success) {\r\n    if (success) {\r\n      console.log('error in testUpdateNotFound: expected success to be false');\r\n    } else if (record !== null) {\r\n      console.log('error in testUpdateNotFound: expected records to be null');\r\n    } else {\r\n      testDeleteNotFound();\r\n    }\r\n  });\r\n}\r\n\r\nfunction testDeleteNotFound() {\r\n  console.log('testDeleteNotFound ' + elapsedTime());\r\n  deleteRecord(\"mytable\", {id:wrongId}, function(success) {\r\n    if (success) {\r\n      console.log('error in testDeleteNotFound: expected success to be false');\r\n    } else {\r\n      console.log('record tests complete ' + elapsedTime());\r\n      textLabel('recordLabel', 'record success!');\r\n    }\r\n  });\r\n}\r\n\r\nfunction testGetSetKey1() {\r\n  console.log('testGetSetKey1 ' + elapsedTime());\r\n  setKeyValue(\"key\", \"value1\", function () {\r\n    getKeyValue(\"key\", function (value) {\r\n      if (value === \"value1\") {\r\n        testGetSetKey2();\r\n      } else {\r\n        console.log('error in testGetSetKey1: failed to get or set key');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction testGetSetKey2() {\r\n  console.log('testGetSetKey2 ' + elapsedTime());\r\n  setKeyValue(\"key\", 2, function () {\r\n    getKeyValue(\"key\", function (value) {\r\n      if (value === 2) {\r\n        testGetSetKeySync();\r\n      } else {\r\n        console.log('error in testGetSetKey2: failed to get or set key');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction testGetSetKeySync() {\r\n  console.log('testGetSetKeySync ' + elapsedTime());\r\n  var setResult = setKeyValueSync(\"key\", 3);\r\n  if (setResult) {\r\n    if (getKeyValueSync(\"key\") === 3) {\r\n      console.log('key value tests complete ' + elapsedTime());\r\n      textLabel('keyValueLabel', 'key value success!');\r\n    } else {\r\n      console.log('error in testGetSetKeySync: failed to get key with expected value');\r\n    }\r\n  } else {\r\n    console.log('error in testGetSetKeySync: setKeyValueSync failed');\r\n  }\r\n}\r\ntestGetSetKey1();",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "false",
    "slider_speed": "1.0",
    "lock_zero_param_functions": "false",
    "execute_palette_apis_only": "false"
  }
}]]></config>
  <blocks/>
</Applab>
