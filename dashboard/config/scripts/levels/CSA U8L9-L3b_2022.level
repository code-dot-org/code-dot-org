<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-02-26T00:34:11.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The Memory game contains a list of cards that are each placed at a random location on the board. The possible locations that a card can be placed is managed with the `coordinates` list. To use these coordinates, the x and y values must be converted to integers to assign to each card.\r\n\r\nIn `Memory.java`, complete the `parseCoordinate()` method. The method takes a `position` (either `\"x\"` or `\"y\"`) and the `coordinate` from the `coordinates` list. It should return the `int` representation of the `\"x\"` or `\"y\"` coordinate.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "playground",
    "encrypted_examples": "Y5oxU2saAYVgPIsEA2UtbgpirxPfyQgbuyBX978jkHY3jPzh5K4ZAIFMmCxg\nkN429Ki9Ovq4r36kfPT1AWENNMpFTySBzYBIPHDH080qY0qf1GfY2d7Zt0BM\n4AltQBJa\n",
    "start_sources": {
      "MyPlayground.java": {
        "text": "public class MyPlayground {\n  public static void main(String[] args) {\n\n    String[] cards = {\"donut.png\", \"football.png\", \"gift.png\", \"money.png\", \"nophone.png\", \"rocket.png\", \"smile.png\", \"unicorn.png\"};\n    \n    Memory myGame = new Memory(cards);\n    myGame.play();\n    \n  }\n}",
        "isVisible": true
      },
      "Memory.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\nimport java.util.ArrayList;\nimport java.io.FileNotFoundException;\n\npublic class Memory {\n\n  /**\n   * the board to display the game\n   */\n  private static Board myBoard = Playground.board;\n\n  /**\n   * the 2D array of Card objects\n   */\n  private static Card[][] memoryCards;\n\n  /**\n   * the possible positions for the cards\n   */\n  private ArrayList<String> coordinates;\n\n  /**\n   * Creates a Memory game\n   */\n  public Memory(String[] imageFiles) {\n    coordinates = setCoordinates();\n    memoryCards = createMemoryCards(imageFiles);\n  }\n\n  /**\n   * Starts the game\n   */\n  public void play() {\n    showGame();\n    printRules();\n\n    try {\n      myBoard.start();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error starting game.\");\n    }\n  }\n\n  /**\n   * Prints the rules of the game to the console\n   */\n  public void printRules() {\n    System.out.println(\"Match two cards to get a pair!\");\n    System.out.println(\"Get more pairs than your opponent to win the game.\");\n  }\n\n  /**\n   * Places the game components on the board\n   */\n  public void showGame() {\n    // show the cards\n    for (int row = 0; row < memoryCards.length; row++) {\n      for (int col = 0; col < memoryCards[0].length; col++) {\n        myBoard.addClickableImage(memoryCards[row][col]);\n      }\n    }\n  }\n\n  /**\n   * Creates the memory cards from the image files\n   * @return a 2D array containing the memory cards\n   */\n  public Card[][] createMemoryCards(String[] imageFiles) {\n    Card[][] tempCards = new Card[4][4];\n    int uniqueCard = 0;\n    int xPos = 0;\n    int yPos = 0;\n\n    for (int row = 0; row < tempCards.length ; row += 2) {\n      for (int col = 0; col < tempCards[0].length; col++) {\n        String currentCoordinate = getCoordinate();\n        xPos = parseCoordinate(\"x\", currentCoordinate);\n        yPos = parseCoordinate(\"y\", currentCoordinate);\n\n        try {\n          tempCards[row][col] = new Card(\"cardBack.png\", imageFiles[uniqueCard], xPos, yPos, 75, 75);\n        } catch (FileNotFoundException e) {\n          System.out.println(\"Error creating card: \" + imageFiles[uniqueCard]);\n        }\n\n        currentCoordinate = getCoordinate();\n        xPos = parseCoordinate(\"x\", currentCoordinate);\n        yPos = parseCoordinate(\"y\", currentCoordinate);\n\n        try {\n          tempCards[row+1][col] = new Card(\"cardBack.png\", imageFiles[uniqueCard], xPos, yPos, 75, 75);\n        } catch (FileNotFoundException e) {\n          System.out.println(\"Error creating card: \" + imageFiles[uniqueCard]);\n        }\n\n        uniqueCard++;\n      }\n    }\n\n    return tempCards;\n  }\n\n  /**\n   * Convert the specified coordinate to an integer\n   * @param coordinate the coordinate to convert\n   * @return the integer of the coordinate\n   */\n  public int parseCoordinate(String position, String coordinate) {\n    // the placeholder string for the coordinate value\n    String coordinateValue = \"\";\n\n    // TO DO: If position is x, set the coordinateValue to the substring\n    // of coordinate from 0 to the location of the \",\". If the position\n    // is y, set the coordinateValue to the substring of coordinate from\n    // the location of the \",\" + 1 to the end of the string.\n\n    \n    return Integer.parseInt(coordinateValue);\n  }\n\n  /**\n   * Creates the list of available card positions\n   */\n  public ArrayList<String> setCoordinates() {\n    ArrayList<String> positions = new ArrayList<String>();\n    // first row\n    positions.add(\"25,30\");\n    positions.add(\"115,30\");\n    positions.add(\"210,30\");\n    positions.add(\"300,30\");\n\n    // second row\n    positions.add(\"25,120\");\n    positions.add(\"115,120\");\n    positions.add(\"210,120\");\n    positions.add(\"300,120\");\n\n    // third row\n    positions.add(\"25,210\");\n    positions.add(\"115,210\");\n    positions.add(\"210,210\");\n    positions.add(\"300,210\");\n\n    // fourth row\n    positions.add(\"25,300\");\n    positions.add(\"115,300\");\n    positions.add(\"210,300\");\n    positions.add(\"300,300\");\n    \n    return positions;\n  }\n\n  /**\n   * Chooses a random x position for the card\n   * and removes it from the list of positions\n   */\n  public String getCoordinate() {\n    int randomIndex = (int)(Math.random() * coordinates.size());\n    String currentCoordinates = coordinates.get(randomIndex);\n    coordinates.remove(randomIndex);\n    return currentCoordinates;\n  }\n\n  /**\n   * Gets the memory cards\n   * @return the 2D array of memory cards\n   */\n  public static Card[][] getMemoryCards() {\n    return memoryCards;\n  }\n\n  /**\n   * Gets the board for the game\n   */\n  public static Board getBoard() {\n    return myBoard;\n  }\n}",
        "isVisible": true
      },
      "MemoryLogic.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\nimport java.util.ArrayList;\n\npublic final class MemoryLogic {\n\n  /**\n   * the memory cards\n   */\n  private static Card[][] memoryCards = Memory.getMemoryCards();\n\n  /**\n   * the number of cards that are flipped\n   */\n  public static int numCardsFlipped = 0;\n\n  /**\n   * the first player\n   */\n  private static Player firstPlayer = new Player(1);\n\n  /**\n   * the second player\n   */\n  private static Player secondPlayer = new Player(2);\n\n  /**\n   * whether or not it is the first player's turn\n   */\n  private static boolean player1Turn = true;\n\n  /**\n   * Switches players\n   */\n  public static void switchPlayer() {\n    if (player1Turn == true) {\n      player1Turn = false;\n      System.out.println(\"Player 2's turn.\");\n    }\n    else {\n      player1Turn = true;\n      System.out.println(\"Player 2's turn.\");\n    }\n  }\n\n  /**\n   * Determines which player's turn it is to set the\n   * player's cards with the clicked card\n   * @param clickedCard the card that has been clicked\n   */\n  public static void setPlayerCard(Card clickedCard) {\n    if (player1Turn) {\n      setPlayerCard(firstPlayer, clickedCard);\n    }\n    else {\n      setPlayerCard(secondPlayer, clickedCard);\n    }\n  }\n\n  /**\n   * Sets the player's cards with the clicked card\n   * @param currentPlayer the current player\n   * @param clickedCard the card that has been clicked\n   */\n  public static void setPlayerCard(Player currentPlayer, Card clickedCard) {\n    currentPlayer.setCard(clickedCard);\n  }\n\n  /**\n   * Resets the cards to show the back of\n   * the card if it has not been matched\n   */\n  public static void resetCards() {\n    for (int row = 0; row < memoryCards.length; row++) {\n      for (int col = 0; col < memoryCards[0].length; col++) {\n        Card currentCard = memoryCards[row][col];\n        \n        if (!currentCard.hasBeenMatched()) {\n          currentCard.changeImage(currentCard.getCardBack());\n        }\n      }\n\n      numCardsFlipped = 0;\n    }\n    \n  }\n\n  /**\n   * Calculates the score for the player\n   * @param currentPlayer the player to calculate the score\n   * @return the score for the player\n   */\n  public static int calculateScore(Player currentPlayer) {\n    return currentPlayer.getTotalCards();\n  }\n\n  /**\n   * Checks if the game is over\n   * @param player1Score the current number of cards the first player has\n   * @param player2Score the current number of cards the second player has\n   * @return true if the game is over, otherwise false\n   */\n  public static boolean isGameOver(int player1Score, int player2Score) {\n    boolean gameOver = false;\n\n    if ((player1Score + player2Score) * 2 == 16) {\n      gameOver = true;\n    }\n\n    return gameOver;\n  }\n\n  /**\n   * Ends the game and determines which player won\n   */\n  public static void endGame() {\n    int player1Score = calculateScore(firstPlayer);\n    int player2Score = calculateScore(secondPlayer);\n\n    if (isGameOver(player1Score, player2Score)) {\n      if (player1Score > player2Score) {\n        System.out.println(\"Player 1 wins the game!\");\n      }\n      else if (player2Score > player1Score) {\n        System.out.println(\"Player 2 wins the game!\");\n      }\n      else {\n        System.out.println(\"It's a tie!\");\n      }\n\n      try {\n        Memory.getBoard().end();\n      } catch (PlaygroundException e) {\n        System.out.println(\"Error ending the game.\");\n      }\n    }\n  }\n}",
        "isVisible": true
      },
      "Card.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class Card extends ClickableImage {\n\n  /**\n   * the name of the card\n   */\n  private String cardName;\n\n  /**\n   * the card image\n   */\n  private String cardImage;\n\n  /**\n   * the card back\n   */\n  private String cardBack;\n\n  /**\n   * whether or not the card has been matched\n   */\n  private boolean isMatched;\n\n  /**\n   * Creates a Card\n   * @param filename the name of the image file for the button\n   * @param x the x position of the button\n   * @param y the y position of the button\n   * @param width the width of the button\n   * @param height the height of the button\n   */\n  public Card(String filename, String cardImage, int x, int y, int width, int height) throws FileNotFoundException {\n    super(filename, x, y, width, height);\n    cardBack = filename;\n\n    this.cardImage = cardImage;\n    cardName = cardImage.substring(0, cardImage.indexOf(\".\"));\n    \n    isMatched = false;\n  }\n\n  /**\n   * Gets the name of the card\n   */\n  public String getCardName() {\n    return cardName;\n  }\n\n  /**\n   * Gets the back of the card\n   */\n  public String getCardBack() {\n    return cardBack;\n  }\n\n  /**\n   * Changes the card image\n   * @param imageFile the image file to change to\n   */\n  public void changeImage(String imageFile) {\n    try {\n      setFilename(imageFile);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error changing the card image.\");\n    }\n  }\n\n  /**\n   * Checks if the card has been matched\n   * @return true if the card has been matched,\n   *         otherwise false\n   */\n  public boolean hasBeenMatched() {\n    return isMatched;\n  }\n\n  /**\n   * Updates the card's match status\n   * @param status the new status to set the card\n   */\n  public void setMatch(boolean status) {\n    isMatched = status;\n  }\n\n  /**\n   * Checks if the name of this card is the\n   * same as the name of the otherCard\n   * @return true if both card names are the same,\n   *         otherwise false\n   */\n  public boolean equals(Card otherCard) {\n    boolean isEqual = false;\n    \n    if (cardName.equals(otherCard.getCardName())) {\n      isEqual = true;\n    }\n\n    return isEqual;\n  }\n\n  /**\n   * Flips the card over and sets it as the\n   * player's current card when clicked\n   */\n  public void onClick() {\n    if (MemoryLogic.numCardsFlipped == 0 || MemoryLogic.numCardsFlipped == 1) {\n      changeImage(cardImage);\n      MemoryLogic.setPlayerCard(this);\n    }\n    \n    MemoryLogic.numCardsFlipped++;\n\n    if (MemoryLogic.numCardsFlipped > 2) {\n      MemoryLogic.switchPlayer();\n      MemoryLogic.resetCards();\n    }\n\n    MemoryLogic.endGame();\n  }\n}",
        "isVisible": true
      },
      "Player.java": {
        "text": "import java.util.ArrayList;\n\npublic class Player {\n\n  /**\n   * the player number\n   */\n  private int playerNumber;\n\n  /**\n   * the list of cards the player has matched\n   */\n  private ArrayList<Card> cardList;\n\n  /**\n   * the first card the player has chosen\n   */\n  private Card firstCard;\n\n  /**\n   * the second card the player has chosen\n   */\n  private Card secondCard;\n\n  /**\n   * Creates a Player\n   * @param playerNumber the player number\n   */\n  public Player(int playerNumber) {\n    this.playerNumber = playerNumber;\n    cardList = new ArrayList<Card>();\n    firstCard = null;\n    secondCard = null;\n  }\n\n  /**\n   * Sets the card the player clicked and adds the\n   * cards to their list if the player has a pair\n   * @param chosenCard the card the player clicked\n   */\n  public void setCard(Card chosenCard) {\n    if (firstCard == null) {\n      firstCard = chosenCard;\n    }\n    else {\n      secondCard = chosenCard;\n\n      if (hasPair()) {\n        System.out.println(\"Player \" + playerNumber + \" found a match!\");\n        firstCard.setMatch(true);\n        secondCard.setMatch(true);\n        cardList.add(secondCard);\n        System.out.println(\"Player \" + playerNumber + \" has \" + cardList.size() + \" matches so far.\");\n      }\n\n      resetCards();\n    }\n  }\n\n  /**\n   * Adds the matched cards to the card list\n   * and resets both firstCard and secondCard\n   */\n  public void resetCards() {\n    firstCard = null;\n    secondCard = null;\n  }\n\n  /**\n   * Checks whether the chosen cards are a pair\n   * @return true if both cards match, otherwise false\n   */\n  public boolean hasPair() {\n    boolean status = false;\n\n    if (firstCard.equals(secondCard)) {\n      status = true;\n    }\n\n    return status;\n  }\n\n  /**\n   * Gets the number of matched cards\n   * @return the number of matched cards\n   */\n  public int getTotalCards() {\n    return cardList.size();\n  }\n}",
        "isVisible": true
      }
    },
    "starter_assets": {
      "cardBack.png": "d598549b-7d02-40ae-add1-1d9aa415c381.png",
      "donut.png": "0d7211f0-b16c-4774-aafd-5e00764b5dd1.png",
      "football.png": "752f16e0-9ed4-4db6-9141-95aec1acf8f8.png",
      "gift.png": "14bf2c8a-e8d0-401c-91dc-d87f7f93bfa7.png",
      "money.png": "cfe3b8b6-c098-47b5-a3de-30b30d4816d2.png",
      "nophone.png": "f72b12c2-794d-41f2-b0b8-8124154749c7.png",
      "rocket.png": "403a7323-60da-44ed-8b90-f82056ec7cc9.png",
      "smile.png": "d5315b6f-bf7b-4066-914b-bef63c1339d6.png",
      "unicorn.png": "d52c4362-9ddb-4a97-af28-9d8f89d440d4.png"
    },
    "display_name": "Memory",
    "bubble_choice_description": "Use multiple lists in this Memory game to manage random locations for each card.",
    "thumbnail_url": "https://images.code.org/8244f9697e61468243280f115e64cf87-image-1641776845756.png",
    "name_suffix": "_2022"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-02-26T00:34:11.036+00:00\",\"changed\":[\"cloned from \\\"CSA U8L9-L3b\\\"\"],\"cloned_from\":\"CSA U8L9-L3b\"}]"
}]]></config>
</Javalab>
