<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "âœ… **TO DO #1:** In `MusicSurvey.java`(#e7e8ea), write the `findMinHours()`(#e7e8ea) method to find the minimum number of hours a respondent listens to music per day.\r\n\r\n::: details [**ðŸ”¦ Need help with your algorithm?**]\r\n  \r\nHere is one approach to solving this problem.\r\n\r\n```\r\nminHours = responses[0].getHours()\r\n\r\nfor each answer in responses\r\n  if answer.getHours() < minHours\r\n    minHours = answer.getHours()\r\n\r\nreturn minHours\r\n```\r\n:::\r\n&nbsp;\r\n\r\nâœ… **TO DO #2:** In `MusicSurvey.java`(#e7e8ea), write the `findMaxHours()`(#e7e8ea) method to find the maximum number of hours a respondent listens to music per day.\r\n\r\n::: details [**ðŸ”¦ Need help with your algorithm?**]\r\n  \r\nHere is one approach to solving this problem.\r\n\r\n```\r\nmaxHours = responses[0].getHours()\r\n\r\nfor each answer in responses\r\n  if answer.getHours() > maxHours\r\n    maxHours = answer.getHours()\r\n\r\nreturn maxHours\r\n```\r\n:::\r\n&nbsp;\r\n\r\nâœ… **TO DO #3:** In `SurveyRunner.java`(#e7e8ea), call the `findMinHours()`(#e7e8ea) and `findMaxHours()`(#e7e8ea) methods and print the result.\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Minimum and Maximum Hours",
    "bubble_choice_description": "Write the `findMinHours()` and `findMaxHours()` methods to find the minimum and maximum hours a respondent listens to music each day.",
    "thumbnail_url": "https://images.code.org/a2ede4869370c8441546249de04fa03a-compare.png",
    "encrypted_validation": "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\nQ0QqsOT8ts27EDvjTsEmaT49YpfHTaPjfj69UbWQ/oGnWdzuPb6T0jGuj8cV\nMJ9f7o4iMYpBzRt+r42IugCV9d2KX7npfMymZuH15iochRHSnqyugX0SC/oW\n6adNati5rY75fYGENlEA9Q/LACM/839sxlzUXyCrQYe5naKmRL1mNcxapKFH\neUV1NOWn/a0ialkxshWyN+ig7wu7yqLeY5FfEhW05muWM7Iu+y9Qz9gfbqe/\nQBRUh0N+8uQcGYshORMAaTEbCZh2jyVCqdBmcCVHlFvnpZhFXlzOP62DBJwd\nEQsSPNThlg0mz5sp6s++K4G/fUGluTfRRbPP0vtqjsSGa+H8c4fUxKqN231B\nLtDaAwScow22+KCtObsSX2LhHaQk4b7ydm8sxcOLqOzfl05HPKhGkyCeePvB\nJYHBras5HiK0VmGwULgKT1jBFS8Ap6utzq/1t39yX7TAvuFA7pHl+hZXxmKB\nhda6edWYMYSOCikjMRR0eEknv6REQ0FiLTsguW7HqtRcJhgcLnZJem4M7qML\nU6r0/el9CE1hA7xYa23YypARZtGGP/vOeQ6yOsIVyFU4WrDVfbbJij9JAWZ0\nHyhIejNBFvUWsVhMIuw8xSofvwzLxyUdVbu7Z53sTzaE/JLmy9I0n51KGLaL\nIZPZp+DhvCHxmr2i0CjENWDqUes/FdqHBhSMlu7HQAoQ4r5JXD38fry2ZjOi\nqFrI4jI83Zl0V/fsbEVnY7PzdqVyko8HmAsEFpgthxVVGnWkBV7UGv8VDha/\nMl6FXEybzc3PSV3affqj128ZI8tW+EB8lffjjdZ2t39D8Wlu6HnjhdDOOWg7\nyI40Q9xLe8uF6bARce14vjr19RrF/9Qgh0dpyHyegevOcqS67ptmTf9TTRap\n+gDjqY6LuB+LWMgnAzC9APP2ndQFAhJDch31oJx/+3kdtEDQWua5ZcxUYvFm\nnYTUtEyYCMY=\n",
    "start_sources": {
      "SurveyRunner.java": {
        "text": "public class SurveyRunner {\n  public static void main(String[] args) {\n\n    MusicSurvey responses = new MusicSurvey(\"hours.txt\", \"effects.txt\");\n    System.out.println(responses);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Call the findMinHours() and findMaxHours() methods and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "MusicSurvey.java": {
        "text": "/*\n * Manages data about responses to a survey\n */\npublic class MusicSurvey {\n\n  private String hoursFile;          // The name of the file containing the hours data\n  private String effectsFile;        // The name of the file containing the effects data\n  private Respondent[] responses;    // The 1D array of Respondent objects\n\n  /*\n   * Reads the data from hoursFile and effectsFile to initialize responses\n   */\n  public MusicSurvey(String hoursFile, String effectsFile) {\n    this.hoursFile = hoursFile;\n    this.effectsFile = effectsFile;\n    responses = createResponses();\n  }\n\n  /*\n   * Returns a 1D array of Respondent objects using the data from hoursFile and effectsFile\n   */\n  public Respondent[] createResponses() {\n    double[] hoursData = FileReader.toDoubleArray(hoursFile);\n    String[] effectsData = FileReader.toStringArray(effectsFile);\n    \n    Respondent[] tempResponses = new Respondent[hoursData.length];\n\n    for (int index = 0; index < tempResponses.length; index++) {\n      tempResponses[index] = new Respondent(hoursData[index], effectsData[index]);\n    }\n\n    return tempResponses;\n  }\n\n  /*\n   * Returns the minimum number of hours a respondent listens to music per day\n   */\n  public double findMinHours() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Find and return the smallest number of hours a respondent listens\n     * to music each day.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return -1;\n  }\n\n  /*\n   * Returns the maximum number of hours a respondent listens to music per day\n   */\n  public double findMaxHours() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Find and return the largest number of hours a respondent listens\n     * to music each day.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    return -1;\n  }\n\n  /*\n   * Returns a String containing each respondent's information\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (Respondent answer : responses) {\n      result += answer + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Respondent.java": {
        "text": "/*\n * Represents a respondent to a survey\n */\npublic class Respondent {\n\n  private double hours;      // The number of hours a respondent listens to music per day\n  private String effect;     // The effect music has on a respondent's mental health\n\n  /*\n   * Sets hours and effect to the specified values\n   */\n  public Respondent(double hours, String effect) {\n    this.hours = hours;\n    this.effect = effect;\n  }\n\n  /*\n   * Returns the number of hours a respondent listens to music per day\n   */\n  public double getHours() {\n    return hours;\n  }\n\n  /*\n   * Returns the effect music has on the respondent's mental health\n   */\n  public String getEffect() {\n    return effect;\n  }\n\n  /*\n   * Returns a String containing the hours and effect\n   */\n  public String toString() {\n    return hours + \" hours - \" + effect;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "hours.txt": {
        "text": "3\n1.5\n4\n2.5\n4\n5\n3\n1\n6\n1\n3\n8\n3\n2\n4\n2\n8\n12\n24\n3\n8\n4\n5\n2\n3\n2\n12\n6\n2\n1\n5\n2\n6\n4\n1\n5\n4\n3\n0.5\n4\n2\n5\n0.25\n3\n4\n1\n1\n3\n5\n3\n2\n6\n1\n12\n4\n2\n6\n0\n7\n1\n1\n1\n2\n2\n5\n6\n3\n4\n3\n2\n3\n2\n4\n2\n0.5\n5\n5\n10\n2\n4\n5\n3\n2\n2.5\n3\n1\n7\n1\n1\n3\n5\n6\n4\n1\n4\n10\n3\n2\n4\n8",
        "isVisible": true,
        "tabOrder": 3
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 5
      },
      "effects.txt": {
        "text": "No effect\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nWorsen\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nImprove\nNo effect\nImprove\nNo effect\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nWorsen\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove",
        "isVisible": true,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\nRDg95LWO\n"
  },
  "game_id": 68,
  "created_at": "2023-01-12T22:17:26.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-01-12T22:17:26.247+00:00\",\"changed\":[\"cloned from \\\"CSA U3L8-L6a_2023\\\"\"],\"cloned_from\":\"CSA U3L8-L6a_2023\"},{\"changed_at\":\"2023-01-12 22:17:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:16:46 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:20:38 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 17:14:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 17:14:08 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 18:03:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 18:15:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 18:15:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:14:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:16:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:16:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:03:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:04:13 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:44:56 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:44:57 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:45:23 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:45:37 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:45:57 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
