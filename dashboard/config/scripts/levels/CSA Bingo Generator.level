<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**Short one-sentence description of problem to solve.**\r\n\r\n✅ **TO DO:** Overview of the steps to take.\r\n\r\n1. More specific step\r\n\r\n2. More specific step\r\n\r\n💡 **TIP:** Check out the documentation for the `ClassName`(#e7e8ea) class in the **Documentation** tab ⬆️ for a thing to look for!\r\n\r\n📝 Be sure to add comments to note what your code does.\r\n\r\n🖥️ **TEST:** Test your program to check if your code achieves the expected result.\r\n\r\n🎉 **RUN:** Run your program to see the result of your code!\r\n\r\n## 🎯 Goal\r\n\r\nimage/gif or console output\r\n\r\n::: details [**📖 Show Me How**]\r\n###Tip Overview\r\n\r\ndescription / examples/ etc\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "serialized_maze": [
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 18,
          "assetId": 303
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 285
        }
      ],
      [
        {
          "tileType": 0,
          "value": 0,
          "assetId": 50
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 285
        }
      ],
      [
        {
          "tileType": 0,
          "value": 0,
          "assetId": 284
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 285
        }
      ],
      [
        {
          "tileType": 0,
          "value": 0,
          "assetId": 284
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 285
        }
      ],
      [
        {
          "tileType": 0,
          "value": 0,
          "assetId": 284
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 47
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 1
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 47
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 1
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 47
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 1
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 285
        }
      ],
      [
        {
          "tileType": 0,
          "value": 0,
          "assetId": 284
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 2
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 3
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 2
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 3
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 2
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 3
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 285
        }
      ],
      [
        {
          "tileType": 0,
          "value": 0,
          "assetId": 284
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 4
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 5
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 4
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 5
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 4
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 5
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 285
        }
      ],
      [
        {
          "tileType": 0,
          "value": 0,
          "assetId": 284
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 0,
          "value": 0,
          "assetId": 285
        }
      ]
    ],
    "start_sources": {
      "BingoRunner.java": {
        "text": "/*\n * Terms in the text file are formatted as U.LLN, where U represents the unit,\n * LL represents the two-digit lesson, and N represents the number.\n */\npublic class BingoRunner {\n  public static void main(String[] args) {\n\n    User csBingo = new User(\"csavocab.txt\");\n    csBingo.prompt();\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Bingo.java": {
        "text": "import java.io.*;\nimport java.util.*;\n\npublic class Bingo {\n\n  private HashMap<Double, String> vocab;\n  private ArrayList<String> allChosenTerms;\n\n  public Bingo(HashMap<Double, String> vocab) {\n    this.vocab = vocab;\n    this.allChosenTerms = new ArrayList<String>();\n  }\n\n  /*\n   * Gets a list of available terms from startLesson to endLesson\n   * @param startLesson the lesson from which to start retrieving terms\n   * @param endLesson the lesson to stop at (exclusive)\n   * @return the list of available terms between startLesson and endLesson (exclusive)\n   */\n  public ArrayList<String> getAvailableTerms(double startLesson, double endLesson) {\n    ArrayList<String> available = new ArrayList<String>();\n\n    vocab.forEach((key, value) -> {\n      if (key > startLesson && key < endLesson) {\n        available.add(value);\n      }\n    });\n\n    return available;\n  }\n\n  /*\n   * Gets a set of random numTerms from available\n   * @param available the list of available terms\n   * @param numTerms the number of terms to retrieve\n   * @return the list of random terms from available that has numTerms terms\n   */\n  public ArrayList<String> getRandomTerms(ArrayList<String> available, int numTerms) {\n    ArrayList<String> chosen = new ArrayList<String>();\n    \n    for (int count = 0; count < numTerms; count++) {\n      int index = (int)(Math.random() * available.size());\n      chosen.add(available.get(index));\n      allChosenTerms.add(available.get(index));\n    }\n\n    return chosen;\n  }\n\n  /*\n   * Gets numSets sets of random numTerms terms from availableTerms\n   * @param availableTerms the list of available terms\n   * @param numSets the number of sets needed\n   * @param numTerms the number of terms in each set\n   */\n  public void getMultipleSets(ArrayList<String> availableTerms, int numSets, int numTerms) {\n    while (numSets > 0) {\n      System.out.println(\"\\nSet #\" + numSets + \"\\n--------------------\");\n      ArrayList<String> chosenSet = getRandomTerms(availableTerms, numTerms);\n\n      while (hasDuplicates(chosenSet)) {\n        replaceDuplicates(chosenSet, availableTerms);\n      }\n      \n      showChosenTerms(chosenSet);\n      numSets--;\n    }\n  }\n\n  /*\n   * Checks if original contains duplicates\n   * @param original the list to check for duplicates\n   * @return true if original contains duplicates, otherwise false\n   */\n  public boolean hasDuplicates(ArrayList<String> original) {\n    boolean status = false;\n\n    for (int current = 0; current < original.size(); current++) {\n      String currentTerm = original.get(current);\n      \n      for (int next = current + 1; next < original.size(); next++) {\n        String nextTerm = original.get(next);\n\n        if (currentTerm.equals(nextTerm)) {\n          status = true;\n        }\n      }\n    }\n\n    return status;\n  }\n\n  /*\n   * Replaces duplicate terms in original\n   * @param original the original list of terms\n   */\n  public void replaceDuplicates(ArrayList<String> original, ArrayList<String> availableTerms) {\n    for (int current = 0; current < original.size(); current++) {\n      String currentTerm = original.get(current);\n      \n      for (int next = current + 1; next < original.size(); next++) {\n        String nextTerm = original.get(next);\n        \n        if (currentTerm.equals(nextTerm)) {\n          int randomIndex = (int)(Math.random() * availableTerms.size());\n          String newTerm = availableTerms.get(randomIndex);\n          original.set(next, newTerm);\n        }\n      }\n    }\n  }\n\n  /*\n   * Gets the list of all chosen terms without duplicates\n   * @return the list of all chosen terms without duplicates\n   */\n  public ArrayList<String> getAllChosenTerms() {\n    ArrayList<String> finalList = new ArrayList<String>();\n\n    for (String term : allChosenTerms) {\n      if (!finalList.contains(term)) {\n        finalList.add(term);\n      }\n    }\n\n    return finalList;\n  }\n\n  /*\n   * Displays the list of chosen terms\n   * @param chosen the list of chosen terms\n   */\n  public void showChosenTerms(ArrayList<String> chosen) {\n    for (String term : chosen) {\n      System.out.println(term);\n    }\n\n    System.out.println();\n  }\n\n  /*\n   * Displays the list of all chosen terms\n   * @param allChosenTerms the list of all chosen terms\n   */\n  public void showAllChosenTerms(ArrayList<String> allChosenTerms) {\n    for (String term : allChosenTerms) {\n      System.out.println(term);\n    }\n\n    System.out.println();\n  }\n\n  /*\n   * Sorts the list of all chosen terms\n   * @param allChosenTerms the list of all chosen terms\n   */\n  public void sortList(ArrayList<String> allChosenTerms) {\n    for (int index = 0; index < allChosenTerms.size(); index++) {\n      String currentWord = allChosenTerms.get(index);\n      String currentWordLower = currentWord.toLowerCase();\n      \n      int next = index - 1;\n      \n      while ((next >= 0) && (currentWordLower.compareTo(allChosenTerms.get(next).toLowerCase()) < 0)) {\n        allChosenTerms.set(next + 1, allChosenTerms.get(next));\n        next--;\n      }\n      \n      allChosenTerms.set(next + 1, currentWord);\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "User.java": {
        "text": "import java.util.*;\n\npublic class User {\n\n  private String filename;\n  private Bingo csBingo;\n  private Scanner input;\n  private double startLesson;\n  private double endLesson;\n  private int numTermsNeeded;\n\n  public User(String filename) {\n    this.filename = filename;\n\n    HashMap<Double, String> vocab = FileReader.getEntries(filename);\n    this.csBingo = new Bingo(vocab);\n    this.input = new Scanner(System.in);\n  }\n\n  /*\n   * \n   */\n  public void prompt() {\n    int numSetsNeeded = getNumSetsNeeded();\n    startLesson = getStartLesson();\n    endLesson = getEndLesson(); \n    numTermsNeeded = getNumTerms();\n    \n    makeSelection(numSetsNeeded);\n  }\n\n  /*\n   * Gets the number of sets needed from the user\n   * @return the number of sets specified by the user\n   */\n  public int getNumSetsNeeded() {\n    System.out.print(\"Number of sets needed: \");\n    int numSetsNeeded = input.nextInt();\n    input.nextLine();\n    return numSetsNeeded;\n  }\n\n  /*\n   * Prompts the user to make a selection\n   */\n  public void makeSelection(int numSetsNeeded) {\n    int choice = 0;\n\n    while (choice != 4) {\n      chooseOption(choice, numSetsNeeded);\n      showOptions();\n      choice = input.nextInt();\n      input.nextLine();\n    }\n\n    input.close();\n  }\n\n  /*\n   * Displays the options for the user to choose from\n   */\n  public void showOptions() {\n    System.out.println(\"--------------------\");\n    System.out.println(\"1) New set - same lessons and same number of terms\");\n    System.out.println(\"2) New set - different lessons, same number of terms\");\n    System.out.println(\"3) New set - different lessons and different number of terms\");\n    System.out.println(\"4) Quit\");\n    System.out.print(\"Enter choice: \");\n  }\n\n  /*\n   * Gets a list of terms based on the user's selection\n   * @param choice the user's current choice\n   * @param numSetsNeeded the number of sets needed\n   */\n  public void chooseOption(int choice, int numSetsNeeded) {\n    System.out.println(\"--------------------\");\n\n    if (choice == 0 || choice == 1) {\n      ArrayList<String> availableTerms = csBingo.getAvailableTerms(startLesson, endLesson);\n      csBingo.getMultipleSets(availableTerms, numSetsNeeded, numTermsNeeded);\n\n      System.out.println(\"----------ALL TERMS----------\");\n      ArrayList<String> allChosenTerms = csBingo.getAllChosenTerms();\n      csBingo.sortList(allChosenTerms);\n      csBingo.showAllChosenTerms(allChosenTerms);\n    }\n    else if (choice == 2) {\n      double startLesson = getStartLesson();\n      double endLesson = getEndLesson();\n      ArrayList<String> availableTerms = csBingo.getAvailableTerms(startLesson, endLesson);\n      csBingo.getMultipleSets(availableTerms, numSetsNeeded, numTermsNeeded);\n\n      System.out.println(\"----------ALL TERMS----------\");\n      ArrayList<String> allChosenTerms = csBingo.getAllChosenTerms();\n      csBingo.sortList(allChosenTerms);\n      csBingo.showAllChosenTerms(allChosenTerms);\n    }\n    else if (choice == 3) {\n      numTermsNeeded = getNumTerms();\n      double startLesson = getStartLesson();\n      double endLesson = getEndLesson();\n      ArrayList<String> availableTerms = csBingo.getAvailableTerms(startLesson, endLesson);\n      csBingo.getMultipleSets(availableTerms, numSetsNeeded, numTermsNeeded);\n\n      System.out.println(\"----------ALL TERMS----------\");\n      ArrayList<String> allChosenTerms = csBingo.getAllChosenTerms();\n      csBingo.sortList(allChosenTerms);\n      csBingo.showAllChosenTerms(allChosenTerms);\n    }\n    else {\n      System.out.println(\"Invalid choice.\");\n    }\n\n    System.out.println();\n  }\n\n  /*\n   * Gets the lesson to start getting terms from\n   * @return the lesson to start getting terms from\n   */\n  public double getStartLesson() {\n    System.out.print(\"Enter starting lesson (format as U.LL): \");\n    double startLesson = input.nextDouble();\n    return startLesson;\n  }\n\n  /*\n   * Gets the lesson to stop getting terms from\n   * @return the lesson to stop getting terms from\n   */\n  public double getEndLesson() {\n    System.out.print(\"Enter ending lesson (format as U.LL): \");\n    double endLesson = input.nextDouble();\n    return endLesson;\n  }\n\n  /*\n   * Gets the number of terms needed in a set\n   * @return the number of terms needed in a set\n   */\n  public int getNumTerms() {\n    System.out.print(\"Enter the number of terms needed: \");\n    int numTerms = input.nextInt();\n    input.nextLine();\n    return numTerms;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "csavocab.txt": {
        "text": "1.011:software engineer\n1.021:class header\n1.022:comment\n1.023:source code\n1.024:syntax\n1.025:syntax error\n1.031:attribute\n1.032:behavior\n1.033:class\n1.034:constructor\n1.035:instantiate\n1.036:object\n1.037:object-oriented programming\n1.041:argument\n1.042:dot operator\n1.043:method\n1.044:parameter\n1.045:string literal\n1.051:algorithm\n1.052:condition\n1.053:iteration statement\n1.061:inheritance\n1.062:subclass\n1.063:superclass\n1.064:tester class\n1.071:method signature\n1.072:return\n1.073:return type\n1.074:void\n1.081:code review\n1.082:commit\n1.083:documentation\n1.084:programming style\n1.091:selection statement\n1.101:data type\n1.102:declaration\n1.103:variable\n1.111:decomposition\n1.112:efficient\n1.113:redundant\n1.121:logical operator\n1.122:two-way selection statement",
        "isVisible": true,
        "tabOrder": 4
      },
      "FileReader.java": {
        "text": "import java.io.*;\nimport java.util.*;\n\npublic class FileReader {\n\n  /*\n   * Reads the entries from filename and returns list\n   */\n  public static HashMap<Double, String> getEntries(String filename) {\n    HashMap<Double, String> terms = new HashMap<Double, String>();\n    \n    try {\n      File vocabFile = new File(filename);\n      Scanner fileReader = new Scanner(vocabFile);\n\n      while (fileReader.hasNextLine()) {\n        String entry = fileReader.nextLine();\n        terms.put(getKey(entry), getValue(entry));\n      }\n\n      fileReader.close();\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error reading file.\");\n    }\n\n    return terms;\n  }\n\n  /*\n   * Extracts the key from entry\n   */\n  public static double getKey(String entry) {\n    return Double.parseDouble(entry.substring(0, entry.indexOf(\":\")));\n  }\n\n  /*\n   * Extracts the value from entry\n   */\n  public static String getValue(String entry) {\n    return entry.substring(entry.indexOf(\":\") + 1);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-10-24T14:43:12.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-10-24T14:43:12.269+00:00\",\"changed\":[\"cloned from \\\"CSA Practice Level Template\\\"\"],\"cloned_from\":\"CSA Practice Level Template\"},{\"changed_at\":\"2022-10-24 14:43:20 +0000\",\"changed\":[\"csa_view_mode\",\"serialized_maze\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-24 15:29:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-24 17:12:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-24 17:14:17 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-24 17:18:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
