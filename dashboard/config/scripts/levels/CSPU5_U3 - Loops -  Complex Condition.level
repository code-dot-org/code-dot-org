<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2016-10-12T17:57:35.000Z",
  "level_num": "custom",
  "user_id": 155,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "write": null,
      "whileBlock": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "orOperator": null,
      "andOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "console.log": null
    },
    "edit_code": true,
    "embed": "false",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "false",
    "markdown_instructions": "# Expressing Stopping Conditions: \"Until Loops\"\r\nIt is often more natural to think about looping in terms of when the loop should end rather than when it should continue. For example you might say \"keep going down the road until you see the gas station\" or \"keep calling until you get through to someone.\" You might think of these as \"until loops\" rather than \"while loops,\" since we want the loop to continue **until a condition is true rather than while a condition is true**.\r\n\r\n**There is no \"until loop\" in JavaScript** but it is actually quite easy to translate \"until loops\" into `while` loops so that you can use them in programs. An \"until loop\" runs *until* a condition is true, as opposed to a while loop which runs *as long as* a condition is true.  That means an until loop is the logical inverse of a while loop - it runs as long as the **condition is false**. The table below shows how you can use the **NOT** ( `!` ) operator to translate stopping conditions into `while` loop conditions.\r\n\r\n| Expressed as Stopping | Expressed as Until Loop | Expressed as While Loop |\r\n| --- | --- | --- |\r\n| **Stop** once you reach the gas station | Keep going **until** you reach the gas station | Keep going **while** you have **NOT** reached the gas station|\r\n| **Stop** calling when you get through to someone | Keep calling **until** you get through to someone | Keep calling **while** you have **NOT** gotten through to someone|\r\n| **Stop** when `x == y` | `until(x == y){...` | `while(!(x == y)){...`|\r\n<br>\r\nNote how we can use the **NOT** operation to find the **logical inverse** (or opposite) of the condition from our \"until loop\" to create a `while` loop. Let's do a little practice of that now.\r\n\r\n# Do This:\r\n\r\n**Starter code** is provided that repeatedly rolls two dice and writes their values to the screen. **Careful: ** before you edit this code it creates an infinite loop.\r\n\r\n* Use the technique above to **modify this code** so that the loop **stops when both dice are 5 or greater**.\r\n* **Try it out and experiment.** You should exit the loop the first time both dice have values greater than or equal to 5 displayed.\r\n\r\n![](https://images.code.org/076fb8e95fabc55e8ee45e31e51ca2d5-image-1448925611863.19.59 PM.png)",
    "start_blocks": "var die1 = -1;\r\nvar die2 = -1;\r\nwhile (true) { \r\n  die1 = randomNumber(1, 6);\r\n  die2 = randomNumber(1, 6);\r\n  write(\"Rolled a \" + die1 + \" and a \" + die2);\r\n}\r\nwrite(\"Done.\");",
    "instructions": "Change the boolean expression for the while loop so that it will stop when both dice are greater than or equal to 5. (Click to see full instructions)",
    "encrypted_examples": "EOwNuuOBV0X7ZdFRGn4zyEcOMluIzs+btYRloMZrnsBKSXI3vT6egk8rLTL3\nMuGC\n",
    "fail_on_lint_errors": "false",
    "contained_level_names": null
  },
  "published": true,
  "notes": ""
}]]></config>
  <blocks/>
</Applab>