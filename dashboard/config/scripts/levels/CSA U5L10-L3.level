<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a mini-concert showcasing some of the filters you have created.\r\n\r\n1. Import at least four filters that you created (`MirroredImage`, `ColorEditor`, `GrayscaleImage`, `ReversedImage`, `ShiftedImage`, and `SepiaImage`) AND `ImageEffect.java` from your **Backpack**.\r\n\r\n2. In `FiltersConcert.java`,\r\n\r\n   a. Create instance variables for your filter objects.\r\n   \r\n   b. Initialize each filter object using the appropriate `TheaterControl` method.\r\n   \r\n   c. Call each filter object's effect method in `playConcert()`.\r\n   \r\n   d. Create a 1D `Image` array with your filter objects. Traverse the array to draw each image on the stage. Be sure to add a `pause()` between each image!\r\n   \r\n3. In `MyConcert.java`,\r\n\r\n   a. Modify the `imageFiles` to use images of your choice or images provided to you in the Asset Manager.\r\n   \r\n   b. Create a `FiltersConcert` object and call its `playConcert()` method.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "start_sources": {
      "MyConcert.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class MyConcert {\n  public static void main(String[] args) throws FileNotFoundException {\n\n    Stage myStage = Theater.stage;\n\n    // TO DO: Modify the imageFiles with your images and to match\n    // the image filters you are using in FiltersConcert.\n    String[] imageFiles = {\"demo02.jpg\", \"demo05.jpg\", \"demo08.jpg\", \"demo09.jpg\"};\n\n    // TO DO: Create a FiltersConcert object and call its playConcert() method.\n\t\t\n    \n    \n  }\n}",
        "isVisible": true
      },
      "FiltersConcert.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\npublic class FiltersConcert {\n  private Stage myStage = Theater.stage;\t\t// the stage\n\n  // TO DO: Create instance variables for your filter objects.\n  \n\n  // TO DO: Initialize each filter object using TheaterControl.\n  public FiltersConcert(String[] imageFiles) { \n    \n  }\n\n  public void playConcert() {\n    // TO DO: Call each filter object's effect.\n\t\ttheMirrored.verticalMirror();\n    theGrayscale.grayscale();\n    theShifted.shift(100);\n    theSepia.sepia();\n\n    // TO DO: Create an Image array with your filter objects.\n    \n\n    // TO DO: Draw each image on the stage. Be sure to add\n    // a pause between each image!\n    \n    \n\n    myStage.play();\n  }\n}",
        "isVisible": true
      },
      "TheaterControl.java": {
        "text": "import org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic final class TheaterControl {\n  private static Image tempImage;\n  private static MirroredImage tempMirror;\n  private static ColorEditor tempColor;\n  private static GrayscaleImage tempGrayscale;\n  private static ReversedImage tempReversed;\n  private static ShiftedImage tempShifted;\n  private static SepiaImage tempSepia;\n\n  public static Image createImage(String filename) {\n    try {\n      tempImage = new Image(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return tempImage;\n  }\n\n  public static MirroredImage createMirroredImage(String filename) {\n    try {\n      tempMirror = new MirroredImage(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return tempMirror;\n  }\n\n  public static ColorEditor createColorEditor(String filename) {\n    try {\n      tempColor = new ColorEditor(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return tempColor;\n  }\n\n  public static GrayscaleImage createGrayscaleImage(String filename) {\n    try {\n      tempGrayscale = new GrayscaleImage(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return tempGrayscale;\n  }\n\n  public static ReversedImage createReversedImage(String filename) {\n    try {\n      tempReversed = new ReversedImage(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return tempReversed;\n  }\n\n  public static ShiftedImage createShiftedImage(String filename) {\n    try {\n      tempShifted = new ShiftedImage(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return tempShifted;\n  }\n\n  public static SepiaImage createSepiaImage(String filename) {\n    try {\n      tempSepia = new SepiaImage(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return tempSepia;\n  }\n}",
        "isVisible": true
      }
    },
    "starter_assets": {
      "demo01.jpeg": "da267d1e-4111-4a0d-b2eb-abba777fdaaa.jpeg",
      "demo02.jpg": "f8b109d1-3efc-4a6c-950a-8eca658c775d.jpg",
      "demo03.jpg": "f12cad9c-fcb8-4c93-ad04-80bf687599cf.jpg",
      "demo04.jpg": "ed9b7066-4009-4c98-a39b-e00d4750b8b2.jpg",
      "demo05.jpg": "2dfd0ecc-0a58-44bf-a0e0-ad821e6d9b54.jpg",
      "demo06.jpg": "ed70e152-0d60-425b-bc63-f9538a18b385.jpg",
      "demo07.jpg": "49b830d2-819d-4718-b185-e53c1f063500.jpg",
      "demo08.jpg": "84597817-9b9c-4aa9-8666-b9ad7d81c025.jpg",
      "demo09.jpg": "cc475619-ee1c-4e7f-abc8-5503e8c6b618.jpg",
      "demo10.jpg": "e9ed105f-4b4c-43b7-8cdb-c23ae51861e9.jpg"
    },
    "encrypted_examples": "BeLIdeJFNrCImeoFw0e5Y5JTkjzYkJ6d8vZ6/Av263P+Kni1kY+RTnc+/E65\niPHIM433tCzD44wlclU29x8C0gAH3NPelRb7exoC/wFODmg=\n",
    "reference_links": [
      "https://docs.google.com/document/d/e/2PACX-1vSbu1JcuqFt8sFJWEUsd2dMmvRhzkNMD30gPiMpFYNZJEPEOzflNVGWqEL36VjpDKVcYY2NDyVi4gZl/pub"
    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2021-09-29T21:02:28.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "audit_log": "[{\"changed_at\":\"2021-09-29 21:02:30 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-17 14:41:23 +0000\",\"changed\":[\"project_template_level_name\",\"contained_level_names\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-17 16:30:17 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-17 16:31:06 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-17 16:35:53 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-17 16:39:10 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2022-01-12 15:19:35 +0000\",\"changed\":[\"encrypted_examples\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-14 20:05:48 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
