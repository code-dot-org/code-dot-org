<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-09-08T21:28:35.000Z",
  "level_num": "custom",
  "user_id": 13,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "moveForward": {
        "params": [
          ""
        ],
        "paletteParams": [
          ""
        ]
      },
      "turnLeft": {
        "paramButtons": {
          "maxArgs": 0
        },
        "params": [
          ""
        ],
        "paletteParams": [
          ""
        ]
      },
      "penUp": null,
      "penDown": null,
      "functionParams_none": null,
      "callMyFunction": null,
      "comment": null
    },
    "edit_code": true,
    "embed": "false",
    "instructions": "Write a function called drawRectangle().\r\n(Click to see full instructions)",
    "markdown_instructions": "This is your code from the previous level.  Did you know that you can write functions that call your own functions?\r\n\r\nTake the code that draws the rectangle and move into a new function called `drawRectangle()`. The first line of your program should be a single call to `drawRectangle()`. The rest of the code should just be function definitions. \r\n\r\nNOTE: your program will still do the same thing.  We are just changing the way it is written to demonstrate that you can use functions you've already written as building blocks in new functions.\r\n\r\n![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "project_template_level_name": "U3L03 - rectangle Template",
    "free_play": "true",
    "show_turtle_before_run": "true",
    "autocomplete_palette_apis_only": "true",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "true",
    "beginner_mode": "true",
    "submittable": "false",
    "hide_view_data_button": "true",
    "droplet_tooltips_disabled": "true",
    "debugger_disabled": "true",
    "encrypted_examples": "lP3v8o6oIQ+pLg0QOLcUdtQ3BrqIk3aEpYIvTsV+IRmNH1+I2xeJmeEgGFr2\nTXST\n",
    "lock_zero_param_functions": "true",
    "execute_palette_apis_only": "true",
    "log_conditions": [
      {
        "entries": [
          "[forTest]"
        ],
        "matchType": "exact",
        "minTimes": 0,
        "maxTimes": 0,
        "message": "Hey! You're using a programming construct - loops - we haven't (officially) learned about yet :).  Don't worry, your knowledge will come in handy later, but for now, try to stick to the constraints of this problem - no loops, please."
      },
      {
        "entries": [
          "turnLeft:1"
        ],
        "matchType": "exact",
        "minTimes": 0,
        "maxTimes": 0,
        "message": "You seem to have discovered that the turnLeft() function can accept the number of degrees to turn!  Clever.  You can use this knowledge later, but for now, try to stick to the constraints of this problem - use only turnLeft()."
      },
      {
        "entries": [
          "moveForward:1"
        ],
        "matchType": "exact",
        "minTimes": 0,
        "maxTimes": 0,
        "message": "You seem to have discovered that the moveForward() function can accept the number of pixels to move forward!  Clever.  You can use this knowledge later, but for now, try to stick to the constraints of this problem."
      },
      {
        "entries": [
          "turnRight"
        ],
        "matchType": "exact",
        "minTimes": 0,
        "maxTimes": 0,
        "message": "You seem to have found the turnRight function. You can use this knowledge later, but for now, try to stick to the constraints of this problem and just write a function called right()."
      },
      {
        "entries": [
          "turnRight:1"
        ],
        "matchType": "exact",
        "minTimes": 0,
        "maxTimes": 0,
        "message": "You seem to have found the turnRight function. You can use this knowledge later, but for now, try to stick to the constraints of this problem and just write a function called right()."
      },
      {
        "entries": [
          "right"
        ],
        "matchType": "exact",
        "minTimes": 3,
        "message": "You need to define a function called \"right\" and call it. Did you spell and capitalize it the same way as the instructions? Did you call it enough times to travel around the rectangle in a clock-wise fashion?"
      },
      {
        "entries": [
          "moveForward"
        ],
        "matchType": "exact",
        "minTimes": 6,
        "message": "It doesn't seem like you are moving forward enough times to draw the figure. Note the long sides of the rectangle are 2 moveForwards long."
      },
      {
        "entries": [
          "drawRectangle"
        ],
        "matchType": "exact",
        "minTimes": 1,
        "message": "You need to define a function called \"drawRectangle\" and call it. Did you spell and capitalize it the same way as the instructions? Did you call it?"
      }
    ],
    "fail_on_lint_errors": "false",
    "instructions_important": "false",
    "makerlab_enabled": "false",
    "contained_level_names": null
  },
  "published": true,
  "notes": "",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Applab>