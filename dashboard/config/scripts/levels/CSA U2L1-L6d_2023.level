<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "long_instructions": "**Create the `Dessert`(#e7e8ea) class by declaring instance variables for the specified attributes, and refactor the `Cupcake`(#e7e8ea) class to be a subclass of the `Dessert`(#e7e8ea) class.**\r\n\r\n✅ **TO DO:** Write the `Dessert`(#e7e8ea) class, and refactor the `Cupcake`(#e7e8ea) class.\r\n\r\n1. In the `Dessert`(#e7e8ea) class, declare instance variables for the following attributes:\r\n\r\n   * the flavor of a dessert\r\n   \r\n   * the price of a dessert\r\n\r\n2. Refactor the `Cupcake`(#e7e8ea) class to be a subclass of the `Dessert`(#e7e8ea) class.\r\n\r\n3. In `FoodTruckRunner.java`(#e7e8ea):\r\n\r\n   **a.** Instantiate a `Dessert`(#e7e8ea) object and a `Cupcake`(#e7e8ea) object\r\n   \r\n   **b.** Print the instance variables for the `Dessert`(#e7e8ea) and `Cupcake`(#e7e8ea) objects to the console using `ClassInfo.getAttributes(nameOfObject)`(#e7e8ea)\r\n\r\n::: details [**🔦 What is `ClassInfo.getAttributes()`(#e7e8ea)?**]\r\n  \r\nThe `ClassInfo.getAttributes()`(#e7e8ea) is a hidden support method that returns the instance variables in a class as a `String`(#e7e8ea). Call the method by passing an object as its argument, such as:\r\n\r\n```\r\nDog fido = new Dog();\r\nSystem.out.println(ClassInfo.getAttributes(fido));\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, creating a subclass, and instantiating objects.\r\n\r\n📝 **COMMENT:** Be sure to add comments to note what your code does.\r\n\r\n🖥️ **TEST:** Test your program to check if your code achieves the expected result.\r\n\r\n🎉 **RUN:** Run your program to see the result of your code!\r\n\r\n## 🎯 Goal\r\n\r\n![](https://images.code.org/c3fa440c805c6d38316ee35324022457-image-1667490034423.png)",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/inheritance",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Desserts and Cupcakes",
    "bubble_choice_description": "Create the `Dessert` class by declaring instance variables for the specified attributes, and refactor the `Cupcake` class to be a subclass of the `Dessert` class.",
    "thumbnail_url": "https://images.code.org/5324bf9000c0be0a687436e37b9d93f9-cupcake.png",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "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\nFIQDfkgnONlvXCs=\n",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* -------------------------------------- TO DO --------------------------------------\n     * ✅ Instantiate Dessert and Cupcake objects, then print the instance variables for\n     * the Dessert and Cupcake objects to the console using ClassInfo.getAttributes().\n     * -----------------------------------------------------------------------------------\n     */\n\n    \n\n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Dessert.java": {
        "text": "/*\n * Represents a dessert that can be sold at a food truck\n */\npublic class Dessert {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ✅ Declare instance variables for the flavor and price of a dessert.\n   * -------------------------------------------------------------------\n   */\n\n\n\n  \n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Cupcake.java": {
        "text": "/*\n * Represents a cupcake that can be sold at a food truck\n * Cupcake is a type of Dessert\n */\npublic class Cupcake {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ✅ Refactor the Cupcake class to be a subclass of Dessert.\n   * -------------------------------------------------------------------\n   */\n\n  private String flavor;    // The flavor of a cupcake\n  private double price;     // The price of a cupcake\n  private boolean isMini;   // Whether or not a cupcake is a miniature cupcake\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "ClassInfo.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ClassInfo {\n\n  public static String getAttributes(Object testObject) {\n    Class objectClass = testObject.getClass();\n    Class objectSuperClass = objectClass.getSuperclass();\n    \n    Field[] objectFields = objectClass.getDeclaredFields();\n    Field[] superFields = objectSuperClass.getDeclaredFields();\n    \n    ArrayList<String> classFieldsList = convertToList(Arrays.toString(objectFields));\n    ArrayList<String> superFieldsList = convertToList(Arrays.toString(superFields));\n\n    String className = objectClass.getSimpleName();\n    String superClassName = objectSuperClass.getSimpleName();\n    \n    String heading = \"\\n------------------------------\\n\";\n    \n    String classFieldsText = cleanFields(classFieldsList, className);\n    String superFieldsText = cleanFields(superFieldsList, superClassName);\n\n    String result = className + \" Attributes \" + heading + classFieldsText;\n\n    if (!superClassName.equals(\"Object\")) {\n      result += \"\\n>> inherited from \" + superClassName + \" class <<\\n\" + superFieldsText;\n    }\n\n    return result;\n  }\n\n  public static ArrayList<String> convertToList(String result) {\n    result = result.substring(1, result.length() - 1);\n    ArrayList<String> classFields = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = result.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = result.substring(0, comma);\n      classFields.add(currentField);\n      result = result.substring(comma + 2);\n      comma = result.indexOf(\",\");\n    }\n\n    classFields.add(result);\n    return classFields;\n  }\n\n  public static String cleanFields(ArrayList<String> classFields, String className) {\n    String result = \"\";\n\n    for (int index = 0; index < classFields.size(); index++) {\n      String currentField = classFields.get(index);\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      result += currentField + \"\\n\";\n    }\n\n    return result;\n  }\n\n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n\n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n\n  public static String findField(ArrayList<String> classFields, String typeToFind) {\n    String result = \"MISSING\";\n    \n    for (int index = 0; index < classFields.size(); index++) {\n      String current = classFields.get(index);\n      \n      if (current.indexOf(typeToFind) > 0) {\n        result = ClassInfo.removeClassName(current, \"Instrument\");\n        result = ClassInfo.removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n\n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    }\n\n    return result;\n  }\n\n  public static String getFieldType(String currentField) {\n    currentField = currentField.trim();\n    String[] possibleTypes = {\"boolean\", \"int\", \"double\", \"String\"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result;\n  }\n\n  public static String getConstructors(Object testObject) {\n    Class objectClass = testObject.getClass();\n    String className = objectClass.getSimpleName();\n    Constructor[] objectConstructors = objectClass.getDeclaredConstructors();\n    \n    ArrayList<String> constructorsList = convertToList(Arrays.toString(objectConstructors));\n\n    String heading = \"\\n------------------------------\\n\";\n    String result = className + \" Constructors \" + heading;\n\n    for (String current : constructorsList) {\n      result += current + \"\\n\";\n    }\n    \n    return result;\n  }\n\n  public static String getValue(List<String> output, String lineToFind) {\n    String outputText = \"\";\n    String valueResult = \"\";\n\n    for (int index = 0; index < output.size(); index++) {\n      String current = output.get(index);\n      \n      if (current.indexOf(lineToFind) >= 0) {\n        outputText = current;\n        valueResult = outputText.substring(lineToFind.length());\n      }\n    }\n    \n    return valueResult.trim();\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-11-01T17:31:49.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-01T17:31:49.328+00:00\",\"changed\":[\"cloned from \\\"CSA U2L1-L6c_2023\\\"\"],\"cloned_from\":\"CSA U2L1-L6c_2023\"},{\"changed_at\":\"2022-11-01 17:31:50 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-01 18:19:48 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:41:25 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:51:59 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:52:00 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:52:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:36:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:36:15 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:36:23 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:36:43 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:40:33 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 21:21:30 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:52:08 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:09:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:09:24 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
