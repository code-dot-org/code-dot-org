<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "##Getting Started\r\n1. Import `TextProcessor.java`(#e7e8ea) from the ![Backpack](https://images.code.org/b17feeef2e8db2a98abdb4a5860c5c61-image-1642175705297.png)\r\n\r\n*Don't have it or it doesn't work? That's ok! Just copy and paste the code from <a href=\"https://studio.code.org/projects/javalab/EGm7iIOmkk8fk3b_7SgAuLRHfD0Dayn86RPGy1jJ7CQ\" target=\"_blank\">**here**</a>.*\r\n\r\n##In TextProcessor.java:\r\n\r\n2. Write the method `textToWords()`(#e7e8ea) to create and return an `ArrayList`(#e7e8ea) containing the individual words from `textList`(#e7e8ea).\r\n\r\n   * For each line in `textList`(#e7e8ea), use the `indexOf()`(#e7e8ea) and `substring()`(#e7e8ea) methods in the `String`(#e7e8ea) class to obtain and add each word in the line to an `ArrayList`(#e7e8ea).\r\n   \r\n   * Return the `ArrayList`(#e7e8ea) containing the individual words from each line in `textList`(#e7e8ea).\r\n\r\n##In MyConsole.java:\r\n\r\n3. Declare and initialize an `ArrayList`(#e7e8ea) that stores the `ArrayList`(#e7e8ea) returned from calling the `textToWord()`(#e7e8ea) method and print the list.\r\n\r\n::: details [**Show Me How**]\r\nThe `substring()`(#e7e8ea) method in the `String`(#e7e8ea) class uses the following syntax:\r\n  \r\n  ```\r\n  variableName.substring(startIndex);\r\n  \r\n  or\r\n  \r\n  variableName.substring(startIndex, endIndex);\r\n  ```\r\n\r\nThe `indexOf()`(#e7e8ea) method in the `String`(#e7e8ea) class uses the following syntax:\r\n\r\n  ```\r\n  variableName.indexOf(\"stringToFind\");\r\n  ```\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "import java.util.ArrayList;\n\npublic class MyConsole {\n  public static void main(String[] args) {\n\n    TextProcessor myText = new TextProcessor(\"speech.txt\");\n\n    // TO DO #4: Call the textToWords() method and print the list.\n\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\n/*\n * Reads data from a file\n */\npublic final class FileReader {\n\n  private static File myFile;          // The File containing the data\n  private static Scanner fileReader;   // The Scanner object to read the file\n\n  /*\n   * Returns an ArrayList of Strings from a file\n   */\n  public static ArrayList<String> getStringData(String filename) {\n    createFile(filename);\n    \n    ArrayList<String> tempList = new ArrayList<String>();\n    \n    while (fileReader.hasNextLine()) {\n      tempList.add(fileReader.nextLine());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of words from a file\n   */\n  public static ArrayList<String> getWords(String filename) {\n    createFile(filename);\n\n    ArrayList<String> tempList = new ArrayList<String>();\n\n    while (fileReader.hasNext()) {\n      tempList.add(fileReader.next());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of ints from a file\n   */\n  public static ArrayList<Integer> getIntData(String filename) {\n    createFile(filename);\n\n    ArrayList<Integer> tempList = new ArrayList<Integer>();\n\n    while (fileReader.hasNextInt()) {\n      tempList.add(fileReader.nextInt());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of doubles from a file\n   */\n  public static ArrayList<Double> getDoubleData(String filename) {\n    createFile(filename);\n\n    ArrayList<Double> tempList = new ArrayList<Double>();\n\n    while (fileReader.hasNextDouble()) {\n      tempList.add(fileReader.nextDouble());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Creates the File and Scanner to read the specified filename\n   */\n  public static void createFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read a file or notifies the\n   * user if the file is not found\n   */\n  public static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException e) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n}",
        "isVisible": true
      },
      "speech.txt": {
        "text": "Moreover, I am cognizant of the interrelatedness of all communities and states. I cannot sit idly by\nin Atlanta and not be concerned about what happens in Birmingham. Injustice anywhere is a threat to\njustice everywhere. We are caught in an inescapable network of mutuality, tied in a single garment\nof destiny. Whatever affects one directly, affects all indirectly. Never again can we afford to live\nwith the narrow, provincial \"outside agitator\" idea. Anyone who lives inside the United States can\nnever be considered an outsider anywhere within its bounds.",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-04-14T19:33:31.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-04-14T19:33:31.228+00:00\",\"changed\":[\"cloned from \\\"CSA U6L6-L5d_2022\\\"\"],\"cloned_from\":\"CSA U6L6-L5d_2022\"},{\"changed_at\":\"2022-04-14 19:33:33 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 16:26:18 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 16:26:34 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 20:52:18 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 20:52:34 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 20:55:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 21:43:26 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 21:43:50 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 21:45:08 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:02:29 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:03:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:03:31 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:05:20 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:06:33 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:23:16 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 00:29:18 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-06 20:25:28 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-06-27 20:49:04 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-07-12 21:06:48 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
