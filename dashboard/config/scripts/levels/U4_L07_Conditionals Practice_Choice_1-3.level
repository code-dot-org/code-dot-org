<Applab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "skin": "applab",
    "validation_enabled": "true",
    "code_functions": {
      "onEvent": null,
      "button": null,
      "textInput": null,
      "textLabel": null,
      "dropdown": null,
      "getText": null,
      "setText": null,
      "getNumber": null,
      "setNumber": null,
      "checkbox": null,
      "radioButton": null,
      "getChecked": null,
      "setChecked": null,
      "image": null,
      "getImageURL": null,
      "setImageURL": null,
      "playSound": null,
      "stopSound": null,
      "playSpeech": null,
      "showElement": null,
      "hideElement": null,
      "deleteElement": null,
      "setPosition": null,
      "setSize": null,
      "setProperty": null,
      "getProperty": null,
      "write": null,
      "getXPosition": null,
      "getYPosition": null,
      "setScreen": null,
      "rgb": null,
      "open": null,
      "createCanvas": null,
      "setActiveCanvas": null,
      "line": null,
      "circle": null,
      "rect": null,
      "setStrokeWidth": null,
      "setStrokeColor": null,
      "setFillColor": null,
      "drawImageURL": null,
      "getImageData": null,
      "putImageData": null,
      "clearCanvas": null,
      "getRed": null,
      "getGreen": null,
      "getBlue": null,
      "getAlpha": null,
      "setRed": null,
      "setGreen": null,
      "setBlue": null,
      "setAlpha": null,
      "setRGB": null,
      "getColumn": null,
      "startWebRequest": null,
      "setKeyValue": null,
      "getKeyValue": null,
      "createRecord": null,
      "readRecords": null,
      "updateRecord": null,
      "deleteRecord": null,
      "onRecordEvent": null,
      "getUserId": null,
      "drawChart": null,
      "drawChartFromRecords": null,
      "getPrediction": null,
      "moveForward": null,
      "moveBackward": null,
      "move": null,
      "moveTo": null,
      "dot": null,
      "turnRight": null,
      "turnLeft": null,
      "turnTo": null,
      "arcRight": null,
      "arcLeft": null,
      "getX": null,
      "getY": null,
      "getDirection": null,
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "penRGB": null,
      "show": null,
      "hide": null,
      "speed": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "setTimeout": null,
      "clearTimeout": null,
      "timedLoop": null,
      "stopTimedLoop": null,
      "getTime": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "moduloOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRound": null,
      "mathAbs": null,
      "mathMax": null,
      "mathMin": null,
      "mathRandom": null,
      "mathPow": null,
      "mathSqrt": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "declareAssign_x_prompt": null,
      "declareAssign_x_promptNum": null,
      "console.log": null,
      "console.clear": null,
      "declareAssign_str_hello_world": null,
      "substring": null,
      "indexOf": null,
      "includes": null,
      "length": null,
      "toUpperCase": null,
      "toLowerCase": null,
      "declareAssign_list_abd": null,
      "declareAssign_list_123": null,
      "accessListItem": null,
      "listLength": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "join": null,
      "declareAssign_object": null,
      "getValue": null,
      "addPair": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null,
      "comment": null,
      "pinMode": null,
      "digitalWrite": null,
      "digitalRead": null,
      "analogWrite": null,
      "analogRead": null,
      "boardConnected": null,
      "var myLed = createLed": null,
      "var myButton = createButton": null,
      "var mySensor = createCapacitiveTouchSensor": null,
      "__.on": null,
      "__.off": null,
      "__.toggle": null,
      "__.blink": null,
      "__.pulse": null,
      "colorLeds[0].on": null,
      "colorLeds[0].off": null,
      "colorLeds[0].toggle": null,
      "colorLeds[0].blink": null,
      "colorLeds[0].pulse": null,
      "stop": null,
      "color": null,
      "intensity": null,
      "led.on": null,
      "led.off": null,
      "led.blink": null,
      "led.toggle": null,
      "led.pulse": null,
      "buzzer.frequency": null,
      "buzzer.note": null,
      "buzzer.stop": null,
      "buzzer.playNotes": null,
      "buzzer.playSong": null,
      "accelerometer.getOrientation": null,
      "accelerometer.getAcceleration": null,
      "isPressed": null,
      "holdtime": null,
      "soundSensor.value": null,
      "soundSensor.getAveragedValue": null,
      "soundSensor.setScale": null,
      "soundSensor.threshold": null,
      "lightSensor.value": null,
      "lightSensor.getAveragedValue": null,
      "lightSensor.setScale": null,
      "lightSensor.threshold": null,
      "tempSensor.F": null,
      "tempSensor.C": null,
      "toggleSwitch.isOpen": null,
      "onBoardEvent": null,
      "ledScreen.on": null,
      "ledScreen.off": null,
      "ledScreen.toggle": null,
      "ledScreen.display": null,
      "ledScreen.clear": null,
      "ledScreen.scrollNumber": null,
      "ledScreen.scrollString": null,
      "compass.getHeading": null
    },
    "embed": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "never_autoplay_video": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "hide_view_data_button": "false",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "fail_on_lint_errors": "false",
    "debugger_disabled": "false",
    "widget_mode": "false",
    "libraries_enabled": "false",
    "ai_enabled": "false",
    "display_name": "CodeFeed Quiz, Part 3",
    "project_template_level_name": "U4_L07_Conditionals Practice_Choice_1-Template",
    "bubble_choice_description": "Craft the conditionals which determine which result the user will receive based on their answers to the quiz questions.",
    "thumbnail_url": "https://images.code.org/cbfa84a7082db45977b76d11d8a6e861-codefeed_titleCard.png",
    "long_instructions": "## Display the Results\r\n\r\n<br> \r\n\r\nNext, we will use the values that we have collected in the <span style=\"color: #bb77c7\">result1</span>, <span style=\"color: #bb77c7\">result2</span>, <span style=\"color: #bb77c7\">result3</span>, and <span style=\"color: #bb77c7\">result4</span> variables in order to determine which result screen to show the user.\r\n\r\n<br>\r\n\r\n2Ô∏è‚É£ Create a set of conditional statements, using <code style=\"color:black; background-color:#fef088\">If</code>, <code style=\"color:black; background-color:#fef088\">Else If</code>, and <code style=\"color:black; background-color:#fef088\">Else</code>, in order to determine which <span style=\"color: #bb77c7\">result</span> has the most clicks and to display the correct results page accordingly. \r\n* You will need to make use of the logical operator <strong>&&</strong> to test either value of the <span style=\"color: #bb77c7\">result</span> variables against one another\r\n* The <code style=\"color:black; background-color:#fef088\">Else</code> statement will be used when there is not one result variable that is greater than the others (the default result)\r\n* Use the displayAnswer1(), displayAnswer2(), displayAnswer3(), displayAnswer4() within your conditional statement to fill the text and the image for the results page.\r\n\r\nYou can find the location in the starter code to modify by matching the number next to the task (*e.g. 1Ô∏è‚É£ in this case*)\r\n\r\n<br>\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\n\r\n<span style=\"color: #000000; font-size: 150%\">üîé</span> <strong>Check This Out!</strong> Sometimes, it is easier to work in text-based mode rather than in block-based mode when working with longer sets of conditionals that involve logical operators (<strong> &&, ||, !</strong>)\r\n\r\n<br>\r\n\r\nYou can toggle to text mode by clicking the <span style=\"color: #000000; font-size: 1.3em\"><img src=\"https://images.code.org/06d5a09b944a6caf79086dd66a97a653-showText.png\" alt=\"\"/>\r\n</span> button in the upper-right corner of the Workspace. Similarly, you can revert back to blocks by clicking <span style=\"color: #000000; font-size: 1.0em\"><img src=\"https://images.code.org/0319d53ea6184b861c1a8f65ae4e29f4-showBlocks.png\" alt=\"\"/>\r\n</span>.\r\n\r\n</div>\r\n\r\n<br>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üîé Need help with your algorithm?</summary>\r\n    \r\n    <br>\r\n    \r\n    Our conditional statements in this part of the app will be created using a set of three different expressions linked with the<strong> &&</strong> logical operator:\r\n    \r\n    <br> \r\n    <img src=\"https://images.code.org/c9039d0da0767d05216549c09e572aeb-1-3-1.png\" alt=\"\" style=\"display: block; margin: auto;\"/>\r\n    <br>\r\n    <img src=\"https://images.code.org/c8d2de7ab6a3b3491da3007ecf38bd2f-1-3-2.png\" alt=\"\" style=\"display: block; margin: auto;\"/>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    <div style=\"column-count: 2; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 2; width: 100%\"> \r\n\t<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\">\r\n    </p>\r\n\t<p style=\"break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;\">\r\n    </p>\r\n </div>\r\n\r\n<br>\r\n    <hr>\r\n    <br>\r\n\r\n\r\nIn the example above, we are comparing <span style=\"color: #bb77c7\">result1</span> against <span style=\"color: #bb77c7\">result2</span>, <span style=\"color: #bb77c7\">result3</span>, and <span style=\"color: #bb77c7\">result4</span>. If it is, indeed, greater than all of these values, then we will call <code style=\"color:black; background-color:#68d995\">displayAnswer1();</code>\r\n\r\n<br>\r\n\r\n <img src=\"https://images.code.org/94729eb13dbba95d0f925058d0e61a5d-1-3-3.png\" alt=\"\" style=\"display: block; margin: auto;\"/>\r\n \r\n <br>\r\n \r\n Complete a similar set of conditional statements to test whether the other result variables contain the highest value, and call the appropriate  <code style=\"color:black; background-color:#68d995\">displayAnswer_();</code> command.\r\n \r\n</div>\r\n</details>\r\n\r\n<hr>\r\n\r\n<br>\r\n\r\n## Create an Easter Egg!\r\n<div>\r\n\r\n</div>\r\n<div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px; height: 150px\">\r\n<img src=\"https://images.code.org/35f973d9c349d447dfeeca57ddc10534-1-3-4.png\" style=\"margin-right: 40px; float: left\">\r\n<p>According to Wikipedia, an Easter Egg can be described as follows:</p>\r\n<p><i>An Easter egg is a message, image, or feature hidden in software, a video game, a film, or another, usually electronic, medium.</i>\r\n</p>\r\n<p>\r\nLet's take that idea and incorporate our own Easter Egg in our CodeFeed program where a user receives a special result if their result variables equal a secret set of values.\r\n</p>\r\n</div>\r\n</div>\r\n\r\n\r\n<br>\r\n\r\n3Ô∏è‚É£ Create a unique set of values for our result variables which will trigger our <i>special</i> results screen page. \r\n* Conditional statements that utilize <code style=\"color:black; background-color:#fef088\">If</code>, <code style=\"color:black; background-color:#fef088\">Else If</code>, and <code style=\"color:black; background-color:#fef088\">Else</code> should go from most specific to least specific case. Therefore, make sure to put your Easter Egg first in the lineup.\r\n* Use the <code style=\"color:black; background-color:#68d995\">displayEasterEgg()</code> command in order to update the results page accordingly.\r\n\r\n<br>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üîé Need help with your algorithm?</summary>\r\n    \r\n    <br>\r\n    \r\n    A sample solution to this challenge might involve testing to see if three different values from our result variables are  equal to one another. The code segment that follows illustrates how this might look:\r\n    \r\n    <br> \r\n    <img src=\"https://images.code.org/6abbb653d7b67b0454bef27162484653-1-3-5.png\" alt=\"\" style=\"display: block; margin: auto;\"/>\r\n    <br>\r\n    \r\n    <strong>Note</strong>: There are many different combinations that you can implement. Try to create your own Easter Egg!\r\n\r\n</details>",
    "preload_asset_list": null,
    "encrypted_examples": [

    ]
  },
  "game_id": 41,
  "published": true,
  "created_at": "2023-03-23T19:26:29.000Z",
  "level_num": "custom",
  "user_id": 18603,
  "audit_log": "[{\"changed_at\":\"2023-03-23T19:26:29.148+00:00\",\"changed\":[\"cloned from \\\"U4_L07_Conditionals Practice_Choice_1-2\\\"\"],\"cloned_from\":\"U4_L07_Conditionals Practice_Choice_1-2\"},{\"changed_at\":\"2023-03-23 19:26:33 +0000\",\"changed\":[\"code_functions\",\"preload_asset_list\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2023-03-23 19:28:57 +0000\",\"changed\":[\"code_functions\",\"display_name\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2023-03-24 22:08:30 +0000\",\"changed\":[\"code_functions\",\"long_instructions\",\"preload_asset_list\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2023-03-24 22:31:14 +0000\",\"changed\":[\"code_functions\",\"bubble_choice_description\",\"long_instructions\",\"preload_asset_list\",\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>