<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-11-19T16:33:55.000Z",
  "level_num": "custom",
  "user_id": 155,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "console.log": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null
    },
    "edit_code": true,
    "embed": "false",
    "instructions": "Correct the error in constrain so that it returns the appropriate value.  (Click to see full instructions)",
    "markdown_instructions": "# Debugging and Multiple Return Statements: *constrain*\r\n\r\nWe're going to debug another function that uses multiple return statements. The function is called `constrain` and is used to limit an input number to a certain range. The function accepts three parameters.\r\n\r\n* `input` : the number to be constrained.\r\n* `low` : the lower bound of the range. If `input` is below this value, the function should return the value of `low`.\r\n* `high` : the upper bound of the range. If `input` is above this value, the function should return the value of `high`.\r\n\r\n<details>\r\n<summary>**Click for sample input and output for `constrain`**</summary>\r\n* `constrain(15,10,20)` should return 15 since it is within the range of 10 to 20.\r\n* `constrain(5,10,20)` should return 10 since the input is below the range of 10 to 20.\r\n* `constrain(25,10,20)` should return 20 since the input is above the range of 10 to 20.\r\n</details>\r\n<br>\r\nUnfortunately, because of the way this function was written, it does not always work as expected. In particular, **because of how `return` was used, some portions of the function never run**. Change the structure of the function to **use the pattern you have been shown in previous exercises, included below**.\r\n<br> <br>\r\n**Pattern for Functions that Return Values**\r\n* Use parameters to provide input.\r\n* Declare a variable that will be used as output, possibly initializing its value.\r\n* Update the value in your output variable throughout your program.\r\n* Return your output variable on the last line of your function.\r\n\r\n# Do This:\r\n\r\n* **Run the program** and identify the errors generated in the output.\r\n* **Inspect the logic of `constrain`** to identify the logical errors.\r\n* **Rewrite** `constrain` to make use of the **pattern for functions that return values**, shown above.\r\n* **Run the program** to ensure it is now running as you expect.\r\n\r\n![](https://images.code.org/38afcc5420e084b3146a8b12cc2d0e72-image-1447952855846.07.25 AM.png)",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "slider_speed": "1",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "true",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "false",
    "start_blocks": "console.log(\"Limiting 5 to the range 10 - 20: \" + constrain(5,10,20));\r\nconsole.log(\"Limiting 10 to the range 10 - 20: \" + constrain(10,10,20));\r\nconsole.log(\"Limiting 15 to the range 10 - 20: \" + constrain(15,10,20));\r\nconsole.log(\"Limiting 20 to the range 10 - 20: \" + constrain(20,10,20));\r\nconsole.log(\"Limiting 25 to the range 10 - 20: \" + constrain(25,10,20));\r\n\r\n// Rewrite this function to use the pattern described and a single return value\r\n\r\nfunction constrain(input, low, high){\r\n  if (input > low) {\r\n    return input;\r\n  } else {\r\n    return low;\r\n  }\r\n  if (input < high) {\r\n    return input;\r\n  } else {\r\n    return high;\r\n  }\r\n  return input;\r\n}",
    "encrypted_examples": "yeZuwibhhvNTHmzdVNW0nz01DQJi3Xxc9BZ40wzKHk0ty4Rd+dYyb/5S/zHT\nY+ox\n"
  }
}]]></config>
  <blocks/>
</Applab>