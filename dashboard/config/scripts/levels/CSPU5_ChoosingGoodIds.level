<External>
  <config><![CDATA[{
  "game_id": 43,
  "created_at": "2016-10-14T16:28:52.000Z",
  "properties": {
    "href": "path/to/html/in/asset/folder",
    "options": {
      "skip_dialog": true
    },
    "title": "title",
    "content1": "description here",
    "markdown": "# Choosing Good IDs\n\n<img src=\"https://images.code.org/f968ce4b09d2500b224af1bf9bacbacd-image-1444155536105.png\" style=\"float: right\">**Good IDs** are **meaningful and descriptive**.\nJust like good names for functions, you will want an ID to describe the intended purpose of the element.  For example, if you have many buttons in your program, you will want to give each an ID that describes what the button does. For example \"forwardButton\", \"leftButton\", etc.\n\n**IDs are also case-sensitive** which means you'll want to develop a style for capitalizing IDs. A common strategy is to use a style called **camelcase**.  In camelcase style, words are combined together with no spaces and each new word, after the first, is capitalized. itTypicallyLooksLikeThis.  \n\n**Why?** Many computer systems do not allow keywords like function names and IDs to contain spaces.  You've already seen several examples like this: `moveForward`, `onEvent`, `turnLeft`, etc.  It's important to realize that camelcase is a style convention, not a hard and fast rule. Sometimes you'll see other styles such as using underscores: `move_forward`, `turn_left`.  But in App Lab we typically use camelcase.\n\n# Rules About IDs\nIn making descriptive and meaningful IDs there **are some rules about IDs** you need to know.  IDs...\n* cannot contain spaces.\n* *must* begin with a letter (A-Z or a-z) and may be followed by any number of digits and letters.\n* can contain hyphens (\"-\"), underscores (\"_\"), colons (\":\"), or periods (\".\").\n\n## Baker NOTES:\n * Debugging stuff below was incorporated from different level - where first add two buttons\n * probably remove all except debugging language.  Depends on flow from prev. levels.\n * Could move problem into annotated diagram here?\n * Q: show annotated diagram of where to look for this debugging?\n\n# Debugging Event-Driven Programs: IDs\n\n**Debugging:** As you write more complex event-driven programs, you'll need to polish your **debugging** skills. Debugging involves locating and correcting errors within a program. It is a critical (and generally unavoidable) step when writing code.<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\" style=\"float: right; width: 200px\">\n\n**Target Application:** In the next three exercises, you'll debug this application (shown at right) which has two buttons, one for moving forward and one for turning left.\n\n**Debug the problem**:\nIn each problem, we've added various errors into the program and it does not work as intended. You will need to find the errors, debug the problems, and make corrections such that the program works correctly.\n\n**Checking IDs:** Your first debugging task will be to verify that the button IDs match the event-handlers. **Remember that IDs are case-sensitive**.\n",
    "type": "External",
    "encrypted": "false",
    "published": "true",
    "concept_ids": [
      ""
    ],
    "level_concept_difficulty_attributes": {
      "id": "",
      "sequencing": "",
      "debugging": "",
      "repeat_loops": "",
      "repeat_until_while": "",
      "for_loops": "",
      "events": "",
      "variables": "",
      "functions": "",
      "functions_with_params": "",
      "conditionals": ""
    }
  },
  "published": true
}]]></config>
</External>
