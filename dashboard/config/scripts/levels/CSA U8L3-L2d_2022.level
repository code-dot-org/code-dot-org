<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-02-26T00:33:51.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "encrypted_examples": "Y5oxU2saAYVgPIsEA2UtbgpirxPfyQgbuyBX978jkHY3jPzh5K4ZAIFMmCxg\nkN42lnhtF0eZGDn8Dk5SMV40IctqtzmScarz2vFPh0Ob2pwhMURkQOYQWj2A\nRzMSpaEb\n",
    "long_instructions": "The guessing game guesses the player's number using binary search. A `GuessingGame` object is created with a `minValue` and `maxValue` to guess within. The `GuessingGame` class contains methods to get and set the `minValue`, `maxValue`, and `middleValue` as well as the components to display and update on `myBoard`.\r\n\r\nIn `GuessingLogic.java`, use the binary search to implement the `makeGuess()` method. This method takes a `status` based on the button that is clicked (high, low, or correct).\r\n\r\n* If the `\"low\"` button is clicked, the `minValue` is updated using `GuessingGame.setMinValue()`.\r\n\r\n* Else if the `\"high\"` button is clicked, the `maxValue` is updated using `GuessingGame.setMaxValue()`.\r\n\r\n* Otherwise, `gameOver()` is called and the `numberGuessed` variable is set to `true`.\r\n\r\n* If the number has not been guessed, the `middleValue` is updated using `GuessingGame.setMiddleValue()` and the `guess` text is updated.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "playground",
    "start_sources": {
      "MyPlayground.java": {
        "text": "import java.io.FileNotFoundException;\n\npublic class MyPlayground {\n  public static void main(String[] args) throws FileNotFoundException {\n\n    GuessingGame myGame = new GuessingGame(20, 100);\n    myGame.play();\n    \n  }\n}",
        "isVisible": true
      },
      "GuessingGame.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class GuessingGame {\n\n  /**\n   * the board to display the game\n   */\n  private static Board myBoard = Playground.board;\n\n  /**\n   * the minimum value of the range to guess within\n   */\n  private static int minValue;\n\n  /**\n   * the maximum value of the range to guess within\n   */\n  private static int maxValue;\n\n  /**\n   * the middle value of the range to guess within\n   */\n  private static int middleValue;\n\n  /**\n   * the guess text\n   */\n  private static TextItem guess;\n  \n  /**\n   * the message text\n   */\n  private static TextItem message;\n  \n  /**\n   * the non-clickable unicorn image\n   */\n  private ImageItem unicorn;\n  \n  /**\n   * the clickable Too High button\n   */\n  private Button tooHigh;\n  \n  /**\n   * the clickable Too Low button\n   */\n  private Button tooLow;\n  \n  /**\n   * the clickable Correct button\n   */\n  private Button correct;\n\n  /**\n   * Creates a GuessingGame with a specified minimum and maximum value\n   * @param minValue the minimum value to guess within\n   * @param maxValue the maximum value to guess within\n   */\n  public GuessingGame(int minValue, int maxValue) throws FileNotFoundException {\n    this.minValue = minValue;\n    this.maxValue = maxValue;\n    middleValue = (minValue + maxValue) / 2;\n\n    guess = new TextItem(\"Is your number \" + middleValue + \"?\", 90, 180, Color.BLACK, Font.SANS, 24, 0);\n    message = new TextItem(\"I will guess your number!\", 75, 30, Color.BLACK, Font.SANS, 24, 0);\n    unicorn = new ImageItem(\"computer.png\", 140, 55, 120, 120);\n\n    tooHigh = new Button(\"toohigh.png\", 50, 220, 150, 75, \"high\");\n    tooLow = new Button(\"toolow.png\", 200, 220, 150, 75, \"low\");\n    correct = new Button(\"correct.png\", 125, 295, 150, 75, \"correct\");\n  }\n\n  /**\n   * Displays the game components and begins the game\n   */\n  public void play() throws FileNotFoundException {\n    displayGame();\n    \n    try {\n      myBoard.start();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error starting the game.\");\n    }\n  }\n\n  /**\n   * Displays the game components on the board\n   */\n  private void displayGame() throws FileNotFoundException {    \n    myBoard.addClickableImage(tooHigh);\n    myBoard.addClickableImage(tooLow);\n    myBoard.addClickableImage(correct);\n\n    myBoard.addTextItem(message);\n    myBoard.addTextItem(guess);\n    \n    myBoard.addImageItem(unicorn);\n  }\n\n  /**\n   * Gets the game board\n   * @return the game board\n   */\n  public static Board getBoard() {\n    return myBoard;\n  }\n\n  /**\n   * Updates the text shown in the specified text item\n   * @param textItem the text item to update\n   * @param text the text to display\n   */\n  public static void updateText(String textItem, String text) {\n    if (textItem.equals(\"message\")) {\n      message.setText(text);\n    }\n    else {\n      guess.setText(text);\n    }\n  }\n\n  /**\n   * Gets the minimum value for the range to guess within\n   * @return the minimum value for the range\n   */\n  public static int getMinValue() {\n    return minValue;\n  }\n\n  /**\n   * Gets the maximum value for the range to guess within\n   * @return the maximum value for the range\n   */\n  public static int getMaxValue() {\n    return maxValue;\n  }\n\n  /**\n   * Gets the middle value of the range to guess within\n   * @return the middle value of the range\n   */\n  public static int getMiddleValue() {\n    return middleValue;\n  }\n\n  /**\n   * Updates the minimum value for the range to guess within\n   * @param newValue the new minimum value for the range to guess within\n   */\n  public static void setMinValue(int newValue) {\n    minValue = newValue;\n  }\n\n  /**\n   * Updates the maximum value for the range to guess within\n   * @param newValue the new maximum value for the range to guess within\n   */\n  public static void setMaxValue(int newValue) {\n    maxValue = newValue;\n  }\n\n  /**\n   * Updates the middle value of the range to guess within\n   * @param newValue the new middle value of the range to guess within\n   */\n  public static void setMiddleValue(int newValue) {\n    middleValue = newValue;\n  }\n  \n}",
        "isVisible": true
      },
      "Button.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Button extends ClickableImage {\n\n  /**\n   * the status label of the button (high, low, or correct)\n   */\n  private String status;\n\n  /**\n   * Creates a clickable Button with a specified status (high, low, or correct)\n   * @param filename the filename of the button image\n   * @param x the x position of the button\n   * @param y the y position of the button\n   * @param width the width of the button\n   * @param height the height of the button\n   * @param status the status of the button (high, low, correct)\n   */\n  public Button(String filename, int x, int y, int width, int height, String status) throws FileNotFoundException {\n    super(filename, x, y, width, height);\n    this.status = status;\n  }\n\n  /**\n   * Prompts the game to make a new guess when\n   * the button is clicked based on its status\n   */\n  public void onClick() {\n    GuessingGame.makeGuess(status);\n  }\n}",
        "isVisible": true
      },
      "GuessingLogic.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic final class GuessingLogic {\n\n  /**\n   * whether or not the number has been guessed\n   */\n  private static boolean numberGuessed = false;\n\n  /**\n   * Makes a guess using binary search to choose a number between the\n   * minValue and maxValue based on the status of the button clicked\n   * @param status the status of the button clicked (high, low, or correct)\n   */\n  public static void makeGuess(String status) {\n\n\n\n\n    if (!numberGuessed) {\n      // update the middle value\n\n      \n      GuessingGame.updateText(\"guess\", \"Is your number \" + GuessingGame.getMiddleValue() + \"?\");\n    }\n  }\n\n  /**\n   * Displays winning message and guess then ends the game\n   */\n  private static void gameOver() {\n    GuessingGame.updateText(\"message\", \"I guessed it!\");\n    GuessingGame.updateText(\"guess\", \"Your number is \" + GuessingGame.getMiddleValue() + \".\");\n\n    try {\n      GuessingGame.getBoard().end();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error ending the game.\");\n    }\n  }\n}",
        "isVisible": true
      }
    },
    "starter_assets": {
      "toohigh.png": "93ff918d-b178-402b-ab35-d072f295609e.png",
      "toolow.png": "f09898aa-4ccd-4c3d-9337-df137f2ffd12.png",
      "correct.png": "fb1b57a7-da1b-4867-a169-5ade843624ce.png",
      "computer.png": "fdcd9509-4d6f-458f-9ab3-8dcfd00e2682.png"
    },
    "display_name": "Guessing Game",
    "bubble_choice_description": "Use a binary search to create a guessing game in The Playground.",
    "thumbnail_url": "https://images.code.org/25c6070ba509797cc4e4c925a13cdd79-image-1641396269038.png",
    "name_suffix": "_2022"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-02-26T00:33:51.631+00:00\",\"changed\":[\"cloned from \\\"CSA U8L3-L2d\\\"\"],\"cloned_from\":\"CSA U8L3-L2d\"}]"
}]]></config>
</Javalab>
