<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-11-12T22:30:34.000Z",
  "level_num": "custom",
  "user_id": 155,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "console.log": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null
    },
    "edit_code": true,
    "embed": "false",
    "instructions": "Test out the return values of the findMax function.  (Click to see full instructions)",
    "markdown_instructions": "# Multiple Returns\r\n\r\nIt turns out that you can have multiple return statements in a function.  Our function for findMax could be written like this:\r\n\r\n<img src=\"https://images.code.org/bfc70bf49e97f7aa9354ba867076284c-image-1447380154324.02.17 PM.png\" style=\"width: 270px; float:right\">\r\n\r\nThis function basicially returns a value **as soon** as you know the answer.  **In a function if a return statement executes, it will exit the function and none of the other lines of code after that one will even be attempted. ** This can lead to some very devious errors in which statements effectively become unreachable because of some small mistake in logic.  In addition if you have return statements scattered about in a larger function it can be very difficult to figure out what exactly should be returned by a function.  \r\n\r\n**Best practice when writing Functions with Returns:** \r\n\r\n* Calculate whatever you need\r\n* Store it in a variable\r\n* Return it at the end of the function. \r\n\r\n(**Note: **this is not a hard and fast rule.  You might want to break it sometimes, but for now this is a way to help you think about what your code needs to do.)\r\n\r\n\r\n# Do This\r\n\r\n* Check out the example of a function that accepts two numbers and returns the larger the two.\r\n\r\n* **Call the function with a couple different sets of numbers. `console.log` the results.**",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "slider_speed": "1",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "true",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "false",
    "start_blocks": "function findMax(num1, num2){\r\n  var max;\r\n  if(num1 > num2){\r\n     return num1;\r\n  }\r\n  else{\r\n    return num2;\r\n  }\r\n}"
  }
}]]></config>
  <blocks/>
</Applab>