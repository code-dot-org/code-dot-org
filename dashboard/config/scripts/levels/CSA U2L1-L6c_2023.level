<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "long_instructions": "**Create the `Dessert`(#e7e8ea) class by declaring instance variables for the specified attributes, and refactor the `Donut`(#e7e8ea) class to be a subclass of the `Dessert`(#e7e8ea) class.**\r\n\r\n✅ **TO DO:** Write the `Dessert`(#e7e8ea) class, and refactor the `Donut`(#e7e8ea) class.\r\n\r\n1. In the `Dessert`(#e7e8ea) class, declare instance variables for the following attributes:\r\n\r\n   * the flavor of a dessert\r\n   \r\n   * the price of a dessert\r\n\r\n2. Refactor the `Donut`(#e7e8ea) class to be a subclass of the `Dessert`(#e7e8ea) class.\r\n\r\n3. In `FoodTruckRunner.java`(#e7e8ea):\r\n\r\n   **a.** Instantiate a `Dessert`(#e7e8ea) object and a `Donut`(#e7e8ea) object\r\n   \r\n   **b.** Print the instance variables for the `Dessert`(#e7e8ea) and `Donut`(#e7e8ea) objects to the console using `ClassInfo.getAttributes(nameOfObject)`(#e7e8ea)\r\n\r\n::: details [**🔦 What is `ClassInfo.getAttributes()`(#e7e8ea)?**]\r\n  \r\nThe `ClassInfo.getAttributes()`(#e7e8ea) is a hidden support method that returns the instance variables in a class as a `String`(#e7e8ea). Call the method by passing an object as its argument, such as:\r\n\r\n```\r\nDog fido = new Dog();\r\nSystem.out.println(ClassInfo.getAttributes(fido));\r\n```\r\n\r\nThis method (along with the tests) will help you check that you declared your instance variables correctly.\r\n:::\r\n&nbsp;\r\n\r\n💡 **TIP:** Check out the **Help & Tips** tab ⬆️ for help with declaring instance variables, creating a subclass, and instantiating objects.\r\n\r\n📝 **COMMENT:** Be sure to add comments to note what your code does.\r\n\r\n🖥️ **TEST:** Test your program to check if your code achieves the expected result.\r\n\r\n🎉 **RUN:** Run your program to see the result of your code!\r\n\r\n## 🎯 Goal\r\n\r\n![](https://images.code.org/d49395cddf45bcfb4bfb19f61689e0f9-image-1667490021219.png)",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/inheritance",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Desserts and Donuts",
    "bubble_choice_description": "Create the `Dessert` class by declaring instance variables for the specified attributes, and refactor the `Donut` class to be a subclass of the `Dessert` class.",
    "thumbnail_url": "https://images.code.org/f9692b1a8d6f5fcb61cc40fe879a2a18-donut.png",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "siqQ5NeAX0vrxxkIKCeTrIH9R38sOnixwmXUYtCr5Iteu5dX7pHmHCMeNnzZ\ndMscb3Xw3pZHMWY/e7Xu0gd8x5QXEpr6Xafj9fIX3ZTKdcN0j+lXEO2HUvSO\nmocYg1D8o+b1jmV8XLjgshxaby7PdJ64cv+5QunoydT52ZxC2vm23ddpDoOk\nRqaAjWLBuXsZSvC36zMycvYGEbDtg835ncfyqPv01FLaGjhoiLWTl42D+BY3\nrOXLCVBUAAh7O+MZwCFcSufqKNyK5Aa+LG/ukoW8b35ElOPO3Tkb78AXayGC\ns0zLCkM91Fleyjn032GBArI9NCD/LPV1LUJ7U6RyKgECP49Sg/1J1JdsjIi9\nwBqAavr69mdnkV9M68z+L86mn3e29xkLnrf6FSBhdpyqGpAyjEnGEQRAeQA7\nu+H+ja/busdS49T2nNE3KEQc7oSK/Vq3QE9j4y3wIf0XzpULDEYVVBWZMw6J\nWDWqGDLdsknh40g6G3EYwc0uxFaAvF3bRZ6rt+uFMZ4ZRV8yjZyOONdzbDGw\nzrU5r28kcDbGlUewN6qXofJGKtEJye2JFJkzZ10trqo3UcnVoz2Ib3BYXxWY\numTKOgC/UK+Jct/3Eej7KIBjkFl0aMGB/lhnNja4OdnSIVcJQOIlH8zNXv7o\naaw987if+LwWIaXlOFZ0naYze50BVxUEQz3K77Qacn0WoCC7cR2bETVjKaqd\nlBmDUu8/Acbh5hfjHBc6WqhokAW0YrX3x9cEYHJrth8X0l8PssaLBUuRlX4E\nnh5ab7IdgCLPBE06eiv9jMgQkSX0w6tw0xBYNRzJ45fCTkHqzDG9Wykke8n3\ndHBPO2OpFXiXanVcA6Uk3kTQCvIa4Xn1yp4BC3aZYjnipnn53HQDcEySmhKO\ncxfs5Jao8Ku7A7kDNkNtf9ECmf22/2SjKr6eR0RAFKPdMnUbynBwQ+mZTvgg\n75gw8cyLBcwWvFlcPFt467Dj/DxDZi/10zLvhtZZ4dRL0C12YzZwbjau+OIN\n1MJ8o5DW+WrCUsRLM4jdwr9klaYy7Hrv6NfNQ+7JvYwYQvLl/Vt/lpd/MiDP\nJA3WJ4xraSHqQ8gILxvGgqG20qV1hJvCN/8ChRt5FTfCZ0Gd3zE5xoLzNctH\ndarQusBUFB8NOIOLIHs2yIOPPz08sl6/ROhu2hFSegUZSB9zXChWwBRj2xiz\n34WE7/sSjPo6TAYV4ePLxE0++enxBM5THCyNMr0M4BQTzpAZxT50o3Rcy7DZ\nbiBSYcfEEuWBPm/YB842D5WAwPtJTJC/FSuDlelpqGMNPOYQJLeUdIHoKafo\nyodBqGBpdR5FRLEEDaDXhInLocgb7LkxH+bIeTAopH/jK9XylNsIc9k1acfe\nWdHw4JyTiPC8NrysRetujb4RhnriTcs+l2xO3touWe41SQeoW/dMI6/wl3zy\nwIlL50TgmmaRtbDAs7LkTdY/3G7X0n2rUwE9410MdgIXQB96NYg2V/ACCfjq\nOXABQESXWnMiqo4+ZPnDyjJMTMcbtXkCLtFlxiA1ekAsWvpmWOe+8qEyaxuh\nZlpqzyZwelhETVKpxy4/JBdyvvo4Owun62jWPbZiKBZXMKv438OX22g+uuWs\ngtO9s4IJMYQph3mNjBqZta4DUGjGXen88gemlHo7nF3oN/NFhUcG8Ductjs6\n9TUtOdOICtS3JgyYo6myEmlkAp2u/4y5hfS/FUStYwmf48wU3I0KJ5zW3WOr\nBngqwJduXhgCdfKZVKamX97IKlN+uOK1RmSmEBD4qCmxdg7/vk2TpJwZGwrn\nGk7gaar4vKGYr0owWUpX0FpSjUASD5ZoO67CEc9+RzviVGFCz8LGchHyIdiW\nap2iMGR5exseMtc9fBYr7QRS8e+XiG5tqw/DzN/a+GT93dp4IYR2H9u4vrGa\n1hgVLgKLD/sUFgygsiPr8lkab609lsZYCqHDoQ5t4w9ajqaBx48cuO88g2zU\nRuWpZlXrV4SnM4J8cMkpKDgS4vWaT6n77BEcarPEcogbzm8A5WO4rivTaqAq\nwzTansf7ugtDMKwuHofjJetCZoDnuXEMueGAE/d3okq5W9CZ36YZYhix8+Yw\nEyAgqYRQzRd/Zshg5q/ngkrD7sSFvY0oeZMHbrCYNS661eEI+tBwnRUtEjfh\nyl0KkuMc+0Nr4USY6QLoITDRy3fyIWGmbUsHCySId9km99ofoBYqJqFfnkUa\nWGNYa+A973BXUobHpqljdPTcInkkLFYdYhLp3qEDc2DB6RdEy8pqNfKprhAr\n27QGcPpkHSrD0DevHVrVkc1FiKAM1GWETgCPchQ5nNyVWHDnGuOtXjrbgDQw\n7lSIde8z0W5WmxsxFSD0HtrvnqR5JQ/3uflxsPd1rxMmlh9kgShLXqa4zNCX\nlg7Z7aaWMYozXdAZx7kL0BgC75F/v0vnBu0W1Km/sQcj2C8uwncuiMlcBHdL\nB8VtpRw3a6waM9Y84hzF+AhHCYjsoaKcLt9+HHHBXVm6kXDrWIaJKTuKuRK2\nqDkm5TqMI5uOH3Aoj6po2ltliyONMUNnEqUB3zMS3AQLVAeUE/LD09f0yPcQ\nvczV+ivzrvwkhKvu0HaksnIHI8NH6SZgI1YPv9CLziKw7xQ9rXfLyhOUlUqw\nMJKDF3tE8Bsr0AGlog9KO3kbQaNeulEwQNfTeL8pB2geQpVtrEYdvQLbiM1+\nKgXyaNMEn3m9frZ8ho0cNpn+dLt3KIDi3ybMGvKwTJLp0Jk8npjkUMkaYdaO\nu6wDJnPvZVlqGTVIbX2tMS1y5Tuy+3G34aTQ3lC69Z+9bRk1BRRoVoC/Cbcd\n1Al+4feBzNsV2v+NBpKGAw3zi8fRX6Ar0XM39uoFbow34XgG2DD8kdOO76Jp\nfVjpIYHUHTlfW/QsXeqt5OO94UEGm6CW9w2y3NqcVMnKuJCxwyHJCS9VaLp4\ni7I+4Hr/RQELzoDJIHnTG8VB8HTK4tHuwE8gzAgnkTO1n6VvLXaVpChUEZ8L\nuxu1gTIkaVJgaxfJlJaE6uH8Hzqx/gl5C87kVvXB3r0CVBwyMAI+i5LzDCSw\nB5JEbSDSmI0BPrV8c8g5RTaUyMHYDKropTawF8ytfYrOSJoWiz3AAIKibIG0\nFUzMQdX8stP5rV8JN+t6K6FDo9beFFqXaeZY24co7tms8NxL0W0vQsxB63z2\n3lTyYPntM6JWCyUXKL3/8TADe+ur50FZsIhqT7sJpb4kjQKtIjLatwgJvCYJ\nvILcqFXP+yffsY7inquQj4L/ty2cNMOls8926ypUNDyAQyuKF+fwJuoqZf9E\nr/ec2N0mCVhSQsss+BO27zp7LmcQsTg26bTDaVL2F90B3bnBPBQQAFEQBwjm\nJONLbHuT75CKKDtKzjXK/v5lq5r4a8q0dLXvJfkQNDQgzunMy8TcjzqH1UiG\nZw9lKUGoZqduNiuoPd/o1gJLi/VEgRDqouemNavor5/9fhE7WdtMDyOBZVHR\nhSaPf3Scxl8jPTcvTB6T/PgNjaWfAD8/mmANgdpspuZQ2C9YVBJ50Oj93Y4/\nMpMO6A5AGzF8gf7Tf+A6eHQGZ/Pg+IWMZP/ZJ1+XsqQBP03wGAA8sVfhiUHp\n2ajIe1rSFwZOVEmAhhjCm7XsYQxD2WKNnN6EAbalUDxkKGTdgEuI5OFcSicz\nDCt48r8TyZLDkQb3kk4e4Y9or8qAEW07KaHJF6TypDAb8aIWFsT+PUzwwnYL\n7yNSNzgN4xw6doEXQUEC10FxsM9dUYraB29nJ4Ti9tvxq99NaRIbHY8hPAPj\n6RRJRgOkrb/K+r0MIatGDWIFsMChHefLGqNvxlJNkMdNkTFUovcUdY4RFIxi\nPFu/TCbRsEensQtC0MAfXJqtFa9jbq6zwOHnTfaMInRYV06OnUUOgDy1sn0r\nVusEI4DwHCDI1Ooi11C4W/xpHLWF05Bbp1Pff5iPg2K2AVvmyxRLMYdmhCF+\n9YlQ0io5mbXxMzkS2LPXZCr1sR+4DlQvAtAllKYt6ylHszhhT5+DGzeePAgq\nHklecGnGeOJ9UVjar211XbAJcZxOpPT9bohGJa/bOTGGlZHpXULDft1BvgpM\nYCmzd2ET8Ff4VUPkYhhMGj9zFvQbCqzvFBbYcg+nBlCNIAupjI3LwJCQ4aB3\n49vjnSH2WYff6YZoADdhj+zHngMEezPs0c675nSNk8CF69RA2E4VW5lw0qZa\nUHIJKLOyJ8RAaojy5Ns6KLIhkZ2tTVQZPADOSIwIOSaCrHs+1+thhKdITI4E\nnSSbp39H4Q3Iwk/9o2po6HUqrxL4Th32PCEQpoUVuLUcOQ3O43aJXtxr0yZv\nfUHqjHofaJTeuO94VM0I0SkW/yO5oma4nvu5owRadSmAQSTgOjW0c7tl8XKU\ntljduxnPfRgPLpsagQOe6djpHD1U9tAMDqj+7pbkcsQsrW4dwTGZEiajXFVK\nIzd8oj3lL0SMS/jA0LVu7yL7oQUktkl9G3/LlWcNSdWrpdUOHXDCfYA44O/T\nDDy8od5lOhtmguz2na4f6XsSehr3PkPa2aKvTndhHTNIRLlu6UNdVQIKhnHN\n+gSdLKNN4FIyuZ0A2nRXLf2c8e+YkQirz7archto4ibkNAFcX5K3AsxlSHnC\naLpYKDlvnroOM+1VIKwGxb51963ZxkwAwGs6WAyOzd2UIl2x5qAQY7safTbD\ne5h4n/cdDwjXJaeJQcPkNvP9lglWy/SwsE27I05KavAAU51shiMAQWThA70+\n1PmPux94WRocHdHmy5jBKwJxp8M5YgK165TGwzJfNX2ttXrGAXfHa8qNwltp\nClbEQue7R/7g4Wm4M0SPwdVvFXY8Cqqw3VpX9+a5N3oFhjaibHXMtHaPawlj\nNtMIKxRpO/aCb4TnI6MyJF+GY/93v+uWpUyW16ngM2aWKQ6O8UW0V10jnoLw\nxWXfxBSoaY8/4wZHCVXrMGIDWwgK1093Gs5uO/YhDodShOlWtVKcwOJDMM1N\nxMmAemyq6AT2f6Bq30xl89TNuTZ5TBGfrgH/rdreeFnLTKNGbCdwGbpn0KvL\nVLeF+yjMXJs4lMwfCxpFGgGhat7Es1M/yh1bBj2N+f9AyNblureFklDsDaDw\n3kxI48gj8ozyoNT7QdHdmM1HeQ8QpRcm7QiHKekTaMff/jC3XzgqO7F2yjRn\nXobcgEUDIa/fq4zOii8v7DoCtSV/1F9N7utACXUvPnroyXNSPblRojT0qur1\n0CTfPJHGeEPxdlfrkZi4Z8avjNsHnmgs0XN83f+AUw4Jyqq+IXuwZiEJbtLq\nZcYe+dlGtiqBGguzE9/q52Fikb9mIzME3naV3GUZj5m0IFgzJ15tQ568ifOS\nCb3/4dipwn5P+muRFrBJ+ireai+hGOVLHidIcyfqmGk/CQDwOquu04KJi7+d\n5XWeQy5TVXhiolB74yDfkL/kM2bvqzHowj8NCgoOx1WEvqcoTGNvdYB4+YCU\n7j1DAkKkoTvRC3PXoYpYtKW6gg6pKcQ0wBK2Tk41SBqcGfusxIKQbra3cJmx\nz1jMX0HHMOUgPViOODXZjg/K9PbZRUBZWYyCXMfdv5AQGeiP32LJ1S1aAY2u\nvq6RDea4NBalw/FR2oTwkgiN3K0p+NQaoQtROorWclnCbq3QsuI1U9IQlrN5\nRf0+s706xtbO6t59wMZ9Yk0nwImf82TSmyoNXJQarlnfbLdLlF9GOXH4vxrE\nTs/Ns6NGnt83lr/kWkSCtvYI6K2L6iPDcO1XpWgL3rvzcvwY4RLVb5gx4+QI\njbvNttVdLXYMJbMEIyYB2PjFykqD8d2LbFeGjHPtZ05FXkyHuYFN23IE47H1\nU+vEUy8b+5y5C3ceajyVNmQFa974bRqCnu/gnnesPTc7ur79ztgwQbs8bA4q\nsb6ZJhuARzMsgaYBZtf6Nd3Mh9AOUzxC6U0YbLKp/DlgzscK75HA6Q8DsX96\nHnQmKw+DGTXDNxSDEVhovUMEZ1AE8Eaiov5b2px9r6/hMDw90V+ZOyVO+6WL\ngdS2SVLRIRBj6cL3npA3VQIkp8yBEp8ezT0iTnoIKAruNm8BPNYlXHZWdN8O\nR88UfdZFIX9azIdRduUZupmFPciHrgi+V9wL6F0HUnv7Jwb/jq9zAS6bSG2Y\nkua1s4eQ9ZpCfRsbBhNeF6m0lz1C3MXDmLhPRBYnUUOKVb5GjtRST+XFyXQT\nM6iBkjMrcilhFoQAJAyHH2/wXFO9HR3N8rSgPjXQPcLHmQ7k5YOlRY5uIwpN\nS89oHKDSTfY5PSWkCQ/1Syk1q5xD25PP\n",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ------------------------------------- TO DO -------------------------------------\n     * ✅ Instantiate Dessert and Donut objects, then print the instance variables for\n     * the Dessert and Donut objects to the console using ClassInfo.getAttributes().\n     * ---------------------------------------------------------------------------------\n     */\n\n    \n\n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Dessert.java": {
        "text": "/*\n * Represents a dessert that can be sold at a food truck\n */\npublic class Dessert {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ✅ Declare instance variables for the flavor and price of a dessert.\n   * -------------------------------------------------------------------\n   */\n\n\n\n  \n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Donut.java": {
        "text": "/*\n * Represents a donut that can be sold at a food truck\n * Donut is a type of Dessert\n */\npublic class Donut {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ✅ Refactor the Donut class to be a subclass of Dessert.\n   * -------------------------------------------------------------------\n   */\n\n  private String flavor;          // The flavor of a donut\n  private double price;           // The price of a donut\n  private boolean hasSprinkles;   // Whether or not a donut has sprinkles\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "ClassInfo.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ClassInfo {\n\n  public static String getAttributes(Object testObject) {\n    Class objectClass = testObject.getClass();\n    Class objectSuperClass = objectClass.getSuperclass();\n    \n    Field[] objectFields = objectClass.getDeclaredFields();\n    Field[] superFields = objectSuperClass.getDeclaredFields();\n    \n    ArrayList<String> classFieldsList = convertToList(Arrays.toString(objectFields));\n    ArrayList<String> superFieldsList = convertToList(Arrays.toString(superFields));\n\n    String className = objectClass.getSimpleName();\n    String superClassName = objectSuperClass.getSimpleName();\n    \n    String heading = \"\\n------------------------------\\n\";\n    \n    String classFieldsText = cleanFields(classFieldsList, className);\n    String superFieldsText = cleanFields(superFieldsList, superClassName);\n\n    String result = className + \" Attributes \" + heading + classFieldsText;\n\n    if (!superClassName.equals(\"Object\")) {\n      result += \"\\n>> inherited from \" + superClassName + \" class <<\\n\" + superFieldsText;\n    }\n\n    return result;\n  }\n\n  public static ArrayList<String> convertToList(String result) {\n    result = result.substring(1, result.length() - 1);\n    ArrayList<String> classFields = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = result.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = result.substring(0, comma);\n      classFields.add(currentField);\n      result = result.substring(comma + 2);\n      comma = result.indexOf(\",\");\n    }\n\n    classFields.add(result);\n    return classFields;\n  }\n\n  public static String cleanFields(ArrayList<String> classFields, String className) {\n    String result = \"\";\n\n    for (int index = 0; index < classFields.size(); index++) {\n      String currentField = classFields.get(index);\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      result += currentField + \"\\n\";\n    }\n\n    return result;\n  }\n\n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n\n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n\n  public static String findField(ArrayList<String> classFields, String typeToFind) {\n    String result = \"MISSING\";\n    \n    for (int index = 0; index < classFields.size(); index++) {\n      String current = classFields.get(index);\n      \n      if (current.indexOf(typeToFind) > 0) {\n        result = ClassInfo.removeClassName(current, \"Instrument\");\n        result = ClassInfo.removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n\n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    }\n\n    return result;\n  }\n\n  public static String getFieldType(String currentField) {\n    currentField = currentField.trim();\n    String[] possibleTypes = {\"boolean\", \"int\", \"double\", \"String\"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result;\n  }\n\n  public static String getConstructors(Object testObject) {\n    Class objectClass = testObject.getClass();\n    String className = objectClass.getSimpleName();\n    Constructor[] objectConstructors = objectClass.getDeclaredConstructors();\n    \n    ArrayList<String> constructorsList = convertToList(Arrays.toString(objectConstructors));\n\n    String heading = \"\\n------------------------------\\n\";\n    String result = className + \" Constructors \" + heading;\n\n    for (String current : constructorsList) {\n      result += current + \"\\n\";\n    }\n    \n    return result;\n  }\n\n  public static String getValue(List<String> output, String lineToFind) {\n    String outputText = \"\";\n    String valueResult = \"\";\n\n    for (int index = 0; index < output.size(); index++) {\n      String current = output.get(index);\n      \n      if (current.indexOf(lineToFind) >= 0) {\n        outputText = current;\n        valueResult = outputText.substring(lineToFind.length());\n      }\n    }\n    \n    return valueResult.trim();\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-11-01T17:31:39.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-01T17:31:39.511+00:00\",\"changed\":[\"cloned from \\\"CSA U2L1-L6b_2023\\\"\"],\"cloned_from\":\"CSA U2L1-L6b_2023\"},{\"changed_at\":\"2022-11-01 17:31:41 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-01 18:19:42 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:41:08 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 14:49:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:31:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:32:30 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:32:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:32:58 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:33:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:40:20 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-03 15:41:04 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 21:21:18 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:51:59 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:10:43 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:11:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:11:30 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
