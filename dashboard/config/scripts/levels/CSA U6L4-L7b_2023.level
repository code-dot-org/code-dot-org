<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-03T13:59:03.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Student</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of colleges a student is applying to.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Student</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">College</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">College</code> objects\r\n\r\n* a method called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addCollege()</code> that adds a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">College</code> to the list\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">StudentRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Student</code> object.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addCollege()</code> method to add colleges to the list.\r\n\r\n3. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> and using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">add()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "College Applications",
    "bubble_choice_description": "Create a `Student` class that contains an `ArrayList` of colleges a student is applying to.",
    "thumbnail_url": "https://images.code.org/8c84953c6e6a8e1477c47737657bc154-resume.png",
    "encrypted_validation": "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\n",
    "start_sources": {
      "StudentRunner.java": {
        "text": "public class StudentRunner {\n  public static void main(String[] args) {\n    College college = new College(\"CC\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Student object.\n     * -----------------------------------------------------------------------------\n     */\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the addCollege() method to add a college to the list.\n     * -----------------------------------------------------------------------------\n     */\n    \n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n    \n  }\n}\n",
        "isVisible": true,
        "tabOrder": 0
      },
      "Student.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a Student\n */\npublic class Student {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of College objects\n   * -----------------------------------------------------------------------------\n   */\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a constructor that initializes the list to an empty list\n   * -----------------------------------------------------------------------------\n   */\n  \n  \n  public ArrayList<College> getColleges() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write an accessor method that returns the list of College objects\n     * -----------------------------------------------------------------------------\n     */\n    return null;\n  }\n\n  \n  public void addCollege(College newCollege) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Write a method called addCollege() that adds a College to the list\n     * -----------------------------------------------------------------------------\n     */\n  }\n  \n}\n",
        "isVisible": true,
        "tabOrder": 1
      },
      "College.java": {
        "text": "/*\n * Represents a College\n */\npublic class College {\n  private String name;\n\n  public College(String name) {\n    this.name = name;\n  }\n\n  public String toString() {\n    return name;\n  }\n}\n",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "encrypted_exemplar_sources": "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\n"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-03T13:59:03.093+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L7a_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L7a_2023\"},{\"changed_at\":\"2023-04-03 13:59:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:34:28 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 19:40:35 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-05 17:13:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:14:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:15:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:15:49 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:16:42 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:17:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:17:20 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:18:40 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:18:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:20:07 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:20:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:22:57 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:23:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:04:51 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-08 02:28:30 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-08 02:28:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"}]"
}]]></config>
</Javalab>
