<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2016-10-12T17:57:34.000Z",
  "level_num": "custom",
  "user_id": 13,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "declareNoAssign_x": null,
      "declareAssign_x": null,
      "assign_x": null,
      "declareAssign_x_prompt": null,
      "console.log": null,
      "write": null
    },
    "edit_code": true,
    "embed": "false",
    "markdown_instructions": "# Text and Variables Living Together!\r\n\r\nSometimes itâ€™s useful to display text along with the value of a variable in the same line of output. To do this you use `+` to attach a variable onto a literal string of characters.  Here is an example:\r\n\r\n<img src=\"https://images.code.org/a35e68b062fc814871a8323938cf3384-image-1445888147995.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\">\r\n\r\nNotice that the `+` operator has **two different meanings in JavaScript depending on what type of data you're applying it to**. Click the explanations below for more details.\r\n\r\n<details>\r\n<summary>If **both operands are numbers** `+` means to add those two numbers together.</summary>\r\n\r\nThis is standard addition.  It works both with numbers and with variables that contain numbers, as shown below.<br>\r\n\r\n<img src=\"https://images.code.org/eb50a1fcea459fe74774d903b07a274f-image-1445887814602.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\r\n\r\nBecause `num1` is a variable that holds a number, and 10 itself is obviously a number, in this case `+` will do addition like you would expect.\r\n\r\n</details>\r\n<br>\r\n<details>\r\n<summary>If **either of the operands is a string** `+` treats both as if they were strings and combines them to create a single string.</summary>\r\nThis is potentially confusing behavior and can get pretty weird if the text *looks* like numbers.  For example, this code will display **16100** to the screen.<br>\r\n\r\n<img src=\"https://images.code.org/a9c54b664bd192aa5bf611808d88a3bc-image-1445887893598.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\r\n\r\nWhy? Because JavaScript sees you trying to display a mix of text and variable values. \"16\" (in quotes) is a string of ASCII characters not a number.  And so JavaScript converts everything to text, and the characters in the result of \"16\"+\"100\" comes out to \"16100\". \r\n\r\n</details>\r\n<br>\r\n \r\n**TIP:** It's common to want to sandwich a variable between some text when displaying it.  You can string together multiple pieces of text and variables using the `+` operator.  For example, you can do this:\r\n<br> \r\n\r\n<img src=\"https://images.code.org/65b0e277f058903bd3b956cc59ee5253-image-1445887976271.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\r\n \r\n<br>\r\n<details>\r\n<summary>**Misconception Alert**</summary>\r\n\r\nThe **key thing to understand** about the `+` symbol is that it can _only_ do actual arithmetic addition if the values on either side of the `+` are actually numbers or variables that contain numbers. \r\n\r\n**And** if the `+` symbol cannot determine whether the value is a number then it **assumes it's a string**, and converts everything to a string and tries to concatenate it.  \r\n \r\nThe computer relies on you - the programmer - to make sure that the **type of data** stored in a variable is appropriate for the task at hand.\r\n</details><br>\r\n\r\nOn the next screen we'll have you play with this a little bit, but you'll write statements to display a mix of text and strings from here on out.\r\n\r\n# Do This:\r\nWe have given you the starting code shown below.  You should **modify** the `write` statement on **line 3** to combine text and variables together to make the app display a single line of text as shown.\r\n\r\n|starting code|output|\r\n|--|--|\r\n|<img src=\"https://images.code.org/a1b84a8728599e9945c576d3bb459140-image-1445891621155.png\" style=\"height:50px\">| <img src=\"https://images.code.org/f5673df128eca0f9637c0cca1729b489-image-1445891800242.png\" style=\"width: 250px\">|",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "text_mode_at_start": "true",
    "design_mode_at_start": "false",
    "hide_design_mode": "true",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "true",
    "instructions": "Modify the write statement on line 3 to combine text and variables together to make the app display a single line of text that shows the player's lives and score. (click to see full instructions)",
    "start_blocks": "var score = 0;\r\nvar lives = 3;\r\nwrite(\"change this text\");",
    "lock_zero_param_functions": "false",
    "execute_palette_apis_only": "false",
    "encrypted_examples": "hOp7b7owtrr/V0jV6RoFmYrFOCSev1kaHCqloGp4CW+d6EzWRmfU+Xb25673\nHEFo\n",
    "contained_level_names": null
  },
  "published": true
}]]></config>
  <blocks/>
</Applab>