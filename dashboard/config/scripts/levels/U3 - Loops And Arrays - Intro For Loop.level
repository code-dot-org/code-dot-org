<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2015-11-12T15:25:35.000Z",
  "level_num": "custom",
  "user_id": 155,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "forLoop_i_0_4": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "console.log": null
    },
    "edit_code": true,
    "embed": "false",
    "instructions": "Add a for loop with a console.log inside and test out the 3 pieces of the for loop. (Click to see full instructions)",
    "markdown_instructions": "# *for* Loop\r\n\r\nIt's very common to want to repeat a set of commands a particular number of times. Recently, we have been using the `while` loop to do this by creating a counting variable, setting the boolean expression, and incrementing the value of the counter by 1 each time. We've also used the `for` loop before, and we'll explain it more in-depth now.  The `for` loop was created to wrap all of those components related to counting loops into a single line of code.\r\n\r\n<img src=\"https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png\" style=\"width: 450px\">\r\n\r\n<img src=\"https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png\" style=\"width: 450px\">\r\n\r\nProgrammers would typically read a loop `for (var i = 0; i < 10; i++)` out like this: <br>\r\n**\"for variable i starting at 0, while i is less than 10, i plus plus (or increment i by 1)\"**\r\n\r\nNotice that in reading a `for` loop we still use the word \"while\".\r\n\r\nYou may notice that when you drag a `for` loop out from the toolbox that we've set it up for you with `i` as the variable. \r\n\r\n<details> \r\n<summary>**Why is `i` the variable?** [click to expand]</summary>  \r\n\r\nUsing the single character `i` as the variable in a `for` loop has become a convention in programming for a variety of reasons. One reason is that `for` loops are often used when processing arrays - **you can think of `i` as shorthand for index. **   But there is no reason why you have to use `i` if you don't want to.  It's just a variable.  \r\n</details>\r\n\r\n# Do This:\r\n\r\n* Drag out the `for` loop.\r\n\r\n* Insert a `console.log` statement inside the `for` loop that displays `i`.\r\n![](https://images.code.org/2a81206296dc693463d7b147f2f93dcb-image-1447446254447.gif)\r\n\r\n* Try changing:\r\n\t* The condition to stop the loop (make it run longer).\r\n    * The amount you change `i` by each time (try changing `i++` to something like `i += 5`).\r\n    * The starting value of `i`.\r\n\r\n",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "slider_speed": "1",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "true",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "false",
    "contained_level_names": null
  },
  "published": true
}]]></config>
  <blocks/>
</Applab>