<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that draws park images based on the area in acres of each national park.\r\n\r\n##In ParkScene.java:\r\n\r\n1. Write the `chooseSize()`(#e7e8ea) method using multi-selection statements to check the area in acres of each national park and return the size to draw the image.\r\n\r\n   * If the number of acres is greater than `1000000`(#e7e8ea), return a size of `100`(#e7e8ea).\r\n   \r\n   * Else if the number of acres is greater than or equal to `100000`(#e7e8ea), return a size of `50`(#e7e8ea).\r\n   \r\n   * Otherwise, return a size of `25`(#e7e8ea).\r\n\r\n##In MyTheater.java:\r\n\r\n2. Call the `createScene()`(#e7e8ea) method with the array.\r\n\r\n3. Use `Theater.playScenes()`(#e7e8ea) to play the scene.\r\n\r\n::: details [**Show Me How**]\r\nA multi-selection statement uses the following syntax:\r\n  \r\n  ```\r\n  if (condition) {\r\n    // code to execute\r\n  }\r\n  else if (condition) {\r\n    // code to execute\r\n  }\r\n  else {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nYou can have more than one `else if`(#e7e8ea) if you have additional conditions you need to check.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "National Parks",
    "bubble_choice_description": "Create a visualization based on the area in acres of each national park.",
    "thumbnail_url": "https://images.code.org/84b9359f0aa6687415053452f0d1277c-image-1650719759035.png",
    "starter_assets": {
      "egypt.png": "0ddffeea-482a-4c11-85f1-4ea00a89901b.png",
      "russia.png": "6beb4dca-a99c-4f98-a82d-2570262d6cbe.png",
      "thailand.png": "2b11e45d-905c-4927-8d10-cbc6216a598c.png",
      "uk.png": "72103ada-d454-40c0-9251-b174e42ba893.png",
      "usa.png": "7c3220e6-e5cd-4c93-9275-36e6e9ff6fc7.png",
      "park.png": "db1cab4c-ee8f-430a-87b2-afa8b9344912.png"
    },
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"parks.txt\");\n    String[] parks = myFileReader.getStringData(62);\n\n    myFileReader.setFile(\"acres.txt\");\n    int[] acres = myFileReader.getIntData(62);\n\n    ParkScene myScene = new ParkScene(parks, acres);\n\n    // TO DO #2: Call the createScene() method.\n    \n\n    // TO DO #3: Use Theater.playScenes() to play the scene.\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "ParkScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the size of each national park\n */\npublic class ParkScene extends Scene {\n\n  private String[] parks;     // The list of national parks\n  private int[] acres;     // The list of areas in acres\n\n  /*\n   * Constructor to create a ParkScene with the\n   * specified arrays of parks and acres\n   */\n  public ParkScene(String[] parks, int[] acres) {\n    this.parks = parks;\n    this.acres = acres;\n  }\n\n  /*\n   * Returns the size to draw each image\n   */\n  public int chooseSize(int acres) {\n    int size = 0;\n\n    // TO DO #1: Check the area in acres of each national park\n    // and decide the image size to use based on the acres.\n\n    \n\n    return size;\n  }\n\n  /*\n   * Creates the scene by drawing the park image based on\n   * the area of each park in acres\n   */\n  public void createScene() {    \n    for (int i = 0; i < acres.length; i++) {\n      int x = (int) (Math.random() * getWidth());\n      int y = (int) (Math.random() * getHeight());\n      int size = chooseSize(acres[i]);\n      drawImage(\"park.png\", x, y, size);\n    }\n  }\n}",
        "isVisible": true
      },
      "parks.txt": {
        "text": "Acadia\nAmerican Samoa\nArches\nBadlands\nBig Bend\nBiscayne\nBlack Canyon of the Gunnison\nBryce Canyon\nCanyonlands\nCapitol Reef\nCarlsbad Caverns\nChannel Islands\nCongaree\nCrater Lake\nCuyahoga Valley\nDeath Valley\nDenali\nDry Tortugas\nEverglades\nGates of the Arctic\nGateway Arch\nGlacier\nGlacier Bay\nGrand Canyon\nGrand Teton\nGreat Basin\nGreat Sand Dunes\nGreat Smoky Mountains\nGuadalupe Mountains\nHaleakala\nHawaiʻi Volcanoes\nHot Springs\nIndiana Dunes\nIsle Royale\nJoshua Tree\nKatmai\nKenai Fjords\nKings Canyon\nKobuk Valley\nLake Clark\nLassen Volcanic\nMammoth Cave\nMesa Verde\nMount Rainier\nNorth Cascades\nOlympic\nPetrified Forest\nPinnacles\nRedwood\nRocky Mountain\nSaguaro\nSequoia\nShenandoah\nTheodore Roosevelt\nVirgin Islands\nVoyageurs\nWhite Sands\nWind Cave\nWrangell–St. Elias\nYellowstone\nYosemite\nZion",
        "isVisible": true
      },
      "acres.txt": {
        "text": "49077\n8257\n76679\n242756\n801163\n172971\n30780\n35835\n337598\n241905\n46766\n249561\n26476\n183224\n32572\n3408407\n4740911\n64701\n1508939\n7523897\n193\n1013126\n3223383\n1201647\n310044\n77180\n107342\n522427\n86367\n33265\n325605\n5554\n15349\n571790\n795156\n3674529\n669650\n461901\n1750716\n2619816\n106589\n54012\n52485\n236382\n504781\n922649\n221390\n26686\n138999\n265807\n91716\n404063\n199224\n70447\n15053\n218222\n146344\n33971\n8323146\n2219791\n761748\n147243",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-04-07T18:57:12.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-04-07T18:57:12.863+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L2_2022\\\"\"],\"cloned_from\":\"CSA U4L10-L2_2022\"},{\"changed_at\":\"2022-04-07 18:57:29 +0000\",\"changed\":[\"long_instructions\",\"csa_view_mode\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:02:39 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:04:52 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:12:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:24:48 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:30:29 +0000\",\"changed\":[\"bubble_choice_description\",\"thumbnail_url\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:30:52 +0000\",\"changed\":[\"display_name\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:41:41 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:43:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:43:22 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:46:38 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:47:10 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:47:25 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:48:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:50:20 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-25 21:20:53 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-25 21:37:24 +0000\",\"changed\":[],\"changed_by_id\":13506,\"changed_by_email\":\"sanchit+levelbuilder@code.org\"},{\"changed_at\":\"2022-05-03 12:33:42 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:33:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:33:56 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:58:24 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:58:53 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 12:58:57 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-22 18:24:55 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-22 18:25:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-22 18:25:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-22 18:25:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-22 18:26:05 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-22 18:30:00 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-22 18:31:51 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
