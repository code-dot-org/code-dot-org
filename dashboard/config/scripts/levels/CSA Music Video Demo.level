<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Demo for Unit 7 in The Theater",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "starter_assets": {
      "arabic_trap.wav": "603fc71c-0948-4337-8536-d4daab0fbaa7.wav",
      "chill_trap.wav": "68c31fb7-f213-4dc2-80ac-1544fb7241e5.wav",
      "middle_eastern.wav": "a251583b-13f4-459e-b284-4dc661594da8.wav",
      "piano.wav": "931b3cc3-72ed-4d7b-9ed3-aaa4cc827abd.wav",
      "rock.wav": "d7a76e2b-2055-4805-aec9-3fec6bb66220.wav"
    },
    "start_sources": {
      "MyConcert.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class MyConcert {\n  public static void main(String[] args) {\n\n\n\n    \n  }\n}",
        "isVisible": true
      },
      "TitleSequence.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class TitleSequence {\n\n\n\n  \n}",
        "isVisible": true
      },
      "SoundEffects.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic final class SoundEffects {\n\n  // Create constants for volume.\n  public static final double MIN_VOLUME = -1.0;\n  public static final double MAX_VOLUME = 1.0;\n\n  public static final int SAMPLE_RATE = 44100;\n\n  // Gets the length of a sound in seconds.\n  public static int getSoundLength(double[] samples) {\n    int soundLength = samples.length / SAMPLE_RATE;\n    return soundLength;\n  }\n\n  // Decreases the volume of a sound.\n  public static void decreaseVolume(double[] samples) {\n    for (int i = 0; i < samples.length; i++) {\n      samples[i] *= 0.5;\n    }\n  }\n\n  // Increases the volume of a sound.\n  public static void increaseVolume(double[] samples) {\n    for (int i = 0; i < samples.length; i++) {\n      samples[i] *= 2;\n\n      if (samples[i] > MAX_VOLUME) {\n        samples[i] = MAX_VOLUME;\n      }\n\n      if (samples[i] < MIN_VOLUME) {\n        samples[i] = MIN_VOLUME;\n      }\n    }\n  }\n\n  // Replaces and counts duplicate samples with 0.\n  public static void replaceDuplicates(double[] samples) {\n\tint duplicates = 0;\n\n    for (int i = 0; i < samples.length - 1; i += 2) {\n      if (samples[i] == samples[i + 1]) {\n        samples[i] = 0;\n        samples[i + 1] = 0;\n        duplicates++;\n      }\n    }\n\n    System.out.println(\"Duplicates replaced: \" + duplicates);\n  }\n\n  // Creates a new array containing the samples that are\n  // greater than 0 from the original array.\n  public static double[] find(double[] samples) {\n    double[] newSound = new double[samples.length];\n\tint target = 0;\n    int count = 0;\n    \n    for (int i = 0; i < samples.length; i++) {\n      if (samples[i] > 0) {\n        newSound[target] = samples[i];\n        target++;\n        count++;\n      }\n    }\n\n\n    System.out.println(\"Number of original samples: \" + samples.length);\n    System.out.println(\"Number of samples greater than 0: \" + count);\n\n    return newSound;\n  }\n\n  // Shift the samples in the sound to the left by one place\n  public static void shiftSound(double[] samples) {\n    for (int i = 0; i < 2; i++) {\n      double temp = samples[0];\n\n      for (int j = 0; j < samples.length; j++) {\n        samples[j] = samples[j + 1];\n      }\n\n      samples[samples.length - i] = temp;\n    }\n  }\n\n  // Creates a new array containing the samples from\n  // the original array in reverse.\n  public static double[] reverseSound(double[] samples) {\n    double[] reversed = samples;\n    int start = 0;\n    int end = samples.length - 1;\n\n    while (start < end) {\n      double temp = reversed[start];\n      reversed[start] = reversed[end];\n      reversed[end] = temp;\n      start++;\n      end--;\n    }\n\n    return reversed;\n  }\n\n  // Combines two sounds to create one sound\n  public static double[] combine(double[] firstSamples, double[] secondSamples) {\n    double[] newSound = new double[firstSamples.length + secondSamples.length];\n\tint targetIndex = 0;\n\n    for (int i = 0; i < firstSamples.length; i++) {\n      newSound[targetIndex] = firstSamples[i];\n      targetIndex++;\n    }\n\n    for (int i = 0; i < secondSamples.length; i++) {\n      newSound[targetIndex] = secondSamples[i];\n      targetIndex++;\n    }\n\n    return newSound;\n  }\n}",
        "isVisible": true
      },
      "ImageEffects.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic final class ImageEffects {\n\n  // Gets a 2D array of pixels for the image\n  public static Pixel[][] getPixels(Image image) {\n    int width = image.getWidth();\n    int height = image.getHeight();\n    Pixel[][] pixelArray = new Pixel[height][width];\n\n    for (int row = 0; row < height; row++) {\n      for (int col = 0; col < width; col++) {\n        pixelArray[row][col] = image.getPixel(col, row);\n      }\n    }\n\n    return pixelArray;\n  }\n\n  // Mirrors the image vertically in the center\n  public static Image mirrorVertical(Image image) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n    Pixel leftPixel = null;\n    Pixel rightPixel = null;\n    int width = pixels[0].length;\n\n    for (int col = 0; col < width / 2; col++) {\n      for (int row = 0; row < pixels.length; row++) {\n        leftPixel = pixels[row][col];\n        rightPixel = pixels[row][width - 1 - col];\n        rightPixel.setColor(leftPixel.getColor());\n      }\n    }\n\n    return modified;\n  }\n\n  // Sets all red values to 0\n  public static Image removeRed(Image image) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n\n    for (Pixel[] pixelRow : pixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setRed(0);\n      }\n    }\n\n    return modified;\n  }\n\n  // Sets all green values to 0\n  public static Image removeGreen(Image image) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n\n    for (Pixel[] pixelRow : pixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setGreen(0);\n      }\n    }\n\n    return modified;\n  }\n\n  // Sets all blue values to 0\n  public static Image removeBlue(Image image) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n\n    for (Pixel[] pixelRow : pixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setBlue(0);\n      }\n    }\n\n    return modified;\n  }\n\n  // Keeps only the red values in the image\n  public static Image keepRed(Image image) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n\n    for (Pixel[] pixelRow : pixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setGreen(0);\n        pixel.setBlue(0);\n      }\n    }\n\n    return modified;\n  }\n\n  // Keeps only the green values in the image\n  public static Image keepGreen(Image image) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n\n    for (Pixel[] pixelRow : pixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setRed(0);\n        pixel.setBlue(0);\n      }\n    }\n\n    return modified;\n  }\n\n  // Keeps only the blue values in the image\n  public static Image keepBlue(Image image) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n\n    for (Pixel[] pixelRow : pixels) {\n      for (Pixel pixel : pixelRow) {\n        pixel.setRed(0);\n        pixel.setGreen(0);\n      }\n    }\n\n    return modified;\n  }\n\n  // Creates a grayscale version of the image\n  public static Image grayscale(Image image) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n\n    for (int row = 0; row < pixels.length; row++) {\n      for (int col = 0; col < pixels[0].length; col++) {\n        int redValue = pixels[row][col].getRed();\n        int greenValue = pixels[row][col].getGreen();\n        int blueValue = pixels[row][col].getBlue();\n\n        int average = (int) ((redValue + greenValue + blueValue) / 3);\n\n        pixels[row][col].setRed(average);\n        pixels[row][col].setGreen(average);\n        pixels[row][col].setBlue(average);\n      }\n    }\n\n    return modified;\n  }\n\n  // Finds the maximum red value and sets all other red values to that value\n  public static Image setMaxRed(Image image) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n    Pixel currentPixel = pixels[0][0];\n    int maxRed = currentPixel.getRed();\n\n    for (int row = 0; row < pixels.length; row++) {\n      for (int col = 0; col < pixels[0].length; col++) {\n        currentPixel = pixels[row][col];\n\n        if (currentPixel.getRed() > maxRed) {\n          maxRed = currentPixel.getRed();\n        }\n      }\n    }\n\n    for (int row = 0; row < pixels.length; row++) {\n      for (int col = 0; col < pixels[0].length; col++) {\n        currentPixel = pixels[row][col];\n        currentPixel.setRed(maxRed);\n      }\n    }\n\n    return modified;\n  }\n\n  // Finds the minimum red value and sets all other red values to that value\n  public static Image setMinRed(Image image) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n    Pixel currentPixel = pixels[0][0];\n    int minRed = currentPixel.getRed();\n\n    for (int row = 0; row < pixels.length; row++) {\n      for (int col = 0; col < pixels[0].length; col++) {\n        currentPixel = pixels[row][col];\n\n        if (currentPixel.getRed() < minRed) {\n          minRed = currentPixel.getRed();\n        }\n      }\n    }\n\n    for (int row = 0; row < pixels.length; row++) {\n      for (int col = 0; col < pixels[0].length; col++) {\n        currentPixel = pixels[row][col];\n        currentPixel.setRed(minRed);\n      }\n    }\n\n    return modified;\n  }\n\n  // Creates a new image with the pixels reversed\n  public static Image reverse(Image image) {\n    Image modified = new Image(image.getWidth(), image.getHeight());\n    Pixel currentPixel = null;\n    Pixel targetPixel = null;\n    int targetRow = image.getWidth() - 1;\n    int targetCol = image.getHeight() - 1;\n\n    for (int sourceRow = 0; sourceRow < image.getWidth(); sourceRow++) {\n      for (int sourceCol = 0; sourceCol < image.getHeight(); sourceCol++) {\n        currentPixel = image.getPixel(sourceRow, sourceCol);\n        targetPixel = modified.getPixel(targetRow, targetCol);\n        targetPixel.setColor(currentPixel.getColor());\n        targetCol--;\n      }\n      targetRow--;\n      targetCol = image.getHeight() - 1;\n    }\n\n    return modified;\n  }\n\n  // Creates a new image with pixels shifted to the left a specified amount\n  public static Image shift(Image image, int shift) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n    Pixel current = null;\n    Pixel target = null;\n\n    for (int row = 0; row < pixels.length; row++) {\n      int rowLength = pixels[row].length;\n      shift = shift % rowLength;\n      Pixel[] temp = new Pixel[shift];\n\n      for (int i = 0; i < shift; i++) {\n        temp[i] = pixels[row][i];\n      }\n\n      for (int col = 0; col < rowLength - shift; col++) {\n        current = pixels[row][col];\n        target = pixels[row][col + shift];\n        current.setColor(target.getColor());\n      }\n\n      for (int i = 0; i < shift; i++) {\n        current = pixels[row][i + (rowLength - shift)];\n        target = temp[i];\n        current.setColor(target.getColor());\n      }\n    }\n\n    return modified;\n  }\n\n  // Creates a new image with duplicate pixels removed\n  public static Image removeDuplicates(Image image) {\n    Image modified = new Image(image);\n    Pixel[][] pixels = getPixels(modified);\n    Pixel[] allPixels = new Pixel[pixels.length * pixels[0].length];\n    int allPixelsPos = 0;\n\n    for (Pixel[] pixelRow : pixels) {\n      for (Pixel pixel : pixelRow) {\n        allPixels[allPixelsPos] = pixel;\n        allPixelsPos++;\n      }\n    }\n\n    int duplicates = 0;\n    for (int i = 0; i < allPixels.length; i++) {\n      boolean found = false;\n\n      for (int j = i + 1; j < allPixels.length; j++) {\n        if (allPixels[i].equals(allPixels[j])) {\n          found = true;\n          allPixels[j].setColor(Color.WHITE);\n        }\n      }\n\n      if (found) {\n        duplicates++;\n        allPixels[i].setColor(Color.WHITE);\n      }\n    }\n\n    System.out.println(\"Number of duplicate pixels: \" + duplicates);\n    return modified;\n  }\n\n  // Creates a sepia-toned image\n  public static Image sepia(Image image) {\n    Image modified = new Image(image);\n    Pixel pixel = null;\n    double redValue = 0;\n    double greenValue = 0;\n    double blueValue = 0;\n    int modifiedRed = 0;\n    int modifiedGreen = 0;\n    int modifiedBlue = 0;\n\n    modified = grayscale(modified);\n\n    for (int row = 0; row < modified.getWidth(); row++) {\n      for (int col = 0; col < modified.getHeight(); col++) {\n        pixel = modified.getPixel(row, col);\n        redValue = pixel.getRed();\n        greenValue = pixel.getGreen();\n        blueValue = pixel.getBlue();\n\n        if (redValue < 60) {\n          redValue = redValue * 0.9;\n          greenValue = greenValue * 0.9;\n          blueValue = blueValue * 0.9;\n          modifiedRed++;\n          modifiedGreen++;\n          modifiedBlue++;\n        }\n        else if (redValue < 190) {\n          blueValue = blueValue * 0.8;\n          modifiedBlue++;\n        }\n        else {\n          blueValue = blueValue * 0.9;\n          modifiedBlue++;\n        }\n\n        pixel.setRed((int) redValue);\n        pixel.setGreen((int) greenValue);\n        pixel.setBlue((int) blueValue);\n      }\n    }\n\n    System.out.println(modifiedRed + \" red values were modified.\");\n    System.out.println(modifiedGreen + \" green values were modified.\");\n    System.out.println(modifiedBlue + \" blue values were modified.\");\n\n    return modified;\n  }\n}",
        "isVisible": true
      },
      "TheaterManager.java": {
        "text": "public final class TheaterManager {\n\n  // Find the highest note in an array of music notes.\n  public static int maxPitch(int[] music) {\n\n    return 0;\n  }\n\n  // Find the lowest note in an array of music notes.\n  public static int minPitch(int[] music) {\n    int lowest = music[0];\n\n    for (int i = 0; i <= music.length; i++) {\n      if (lowest > music[i]) {\n        lowest = music[i];\n      }\n    }\n\n    return lowest;\n  }\n\n  // Calculate the total profit of the ticket sales.\n  public static double totalProfit(double[] sales) {\n\n    return 0;\n  }\n\n  // Calculate the average price of the ticket prices.\n  public static double averagePrice(double[] sales) {\n\n    return 0;\n  }\n\n  // Determine whether a performance has been oversold.\n  public static boolean isInCapacity(double[] ticketCount) {\n\n    return false;\n  }\n}",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2021-09-02T18:30:59.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2021-09-02 18:31:02 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-09-02 20:58:11 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-09-08 14:26:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-09-08 15:02:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-09-08 15:21:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-09-08 15:22:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"}]"
}]]></config>
</Javalab>
