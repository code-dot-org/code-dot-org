<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-02-26T00:31:59.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "display_name": "Music Creator",
    "long_instructions": "Look at this project example. What are some of its characteristics and features?\r\n\r\n*While this is an example of a project for this unit, it is not representative of the only way you can approach or develop the project.*",
    "mini_rubric": "false",
    "bubble_choice_description": "An example project that creates a title sequence for a musician that is getting their own TV show.",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "start_sources": {
      "MyTheater.java": {
        "text": "import java.io.FileNotFoundException;\n\npublic class MyTheater {\n  public static void main(String[] args) throws FileNotFoundException {\n\n    Scene intro = new Scene(\"Introducing\", \"turntable.jpeg\");\n    Scene main = new SpecialScene(\"DJ Doggo\\'s\", \"musician.jpeg\");\n    Scene ending = new SpecialScene(\"Studio Diaries\", \"studio.jpeg\");\n\n    Scene[] sequenceScenes = {intro, main, ending};\n    Soundtrack sequenceMusic = new Soundtrack(\"electrohouse.wav\");\n\n    TitleSequence djDoggo = new TitleSequence(sequenceScenes, sequenceMusic);\n    djDoggo.playTitleSequence();\n    \n  }\n}",
        "isVisible": true
      },
      "TitleSequence.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class TitleSequence {\n\n  private Stage myStage = Theater.stage;    // the stage the scenes are played on\n  private Scene[] sequenceScenes;           // the array of scenes in the title sequence\n  private Soundtrack sequenceMusic;         // the soundtrack for the title sequence\n\n  public TitleSequence(Scene[] sequenceScenes, Soundtrack sequenceMusic) {\n    this.sequenceScenes = sequenceScenes;\n    this.sequenceMusic = sequenceMusic;\n  }\n\n  /**\n   * Plays each scene in the array of scenes\n   */\n  public void playTitleSequence() throws FileNotFoundException {\n    sequenceMusic.remixAndPlay();\n    \n    for (int index = 0; index < sequenceScenes.length; index++) {\n      sequenceScenes[index].playScene();\n      myStage.pause(0.5);\n    }\n\n    myStage.play();\n  }\n}",
        "isVisible": true
      },
      "Scene.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Scene {\n\n  private String sceneTitle;\n  private String background;\n  private Stage myStage = Theater.stage;\n\n  public Scene(String sceneTitle, String background) {\n    this.sceneTitle = sceneTitle;\n    this.background = background;\n  }\n\n  public void setBackground(String imageFile) throws FileNotFoundException {\n    myStage.drawImage(imageFile, 0, 0, myStage.getWidth(), myStage.getHeight(), 0);\n  }\n\n  public void setTitle(String text, int xPos, int yPos, int rotation) {\n    myStage.drawText(text, xPos, yPos, Color.WHITE, Font.SANS, FontStyle.BOLD, 40, rotation);\n  }\n\n  public void playScene() throws FileNotFoundException {\n    setBackground(background);\n    myStage.pause(0.5);\n    setTitle(sceneTitle, 20, 100, 0);\n  }\n}",
        "isVisible": true
      },
      "Soundtrack.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Soundtrack {\n\n  private double[] audioSamples;\n  private Stage myStage = Theater.stage;\n\n  public Soundtrack(String audioFile) throws FileNotFoundException {\n    audioSamples = SoundLoader.read(audioFile);\n  }\n\n  public void remixAudio() {\n    SoundEffects.decreaseVolume(audioSamples);\n    SoundEffects.shiftSound(audioSamples);\n  }\n\n  public void playAudio() {\n    myStage.playSound(audioSamples);\n  }\n\n  public void remixAndPlay() {\n    remixAudio();\n    playAudio();\n  }\n}",
        "isVisible": true
      },
      "SpecialScene.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class SpecialScene extends Scene {\n\n  private Stage myStage = Theater.stage;\n  private static int sceneCount = 0;\n\n  public SpecialScene(String sceneTitle, String background) {\n    super(sceneTitle, background);\n    sceneCount++;\n  }\n\n  private void draw(int numShapes) {\n    draw(numShapes, 150);\n  }\n\n  private void draw(int numShapes, int size) {\n    for (int i = 0; i < numShapes; i++) {\n      int randomX = (int)(Math.random() * myStage.getWidth());\n      int randomY = (int)(Math.random() * myStage.getHeight());\n      myStage.drawRectangle(randomX, randomY, size, size);\n      myStage.pause(0.2);\n    }\n  }\n\n  public void playScene() throws FileNotFoundException {\n    if (sceneCount == 1) {\n      draw(20);\n    }\n    else {\n      draw(20, 100);\n    }\n    \n    myStage.pause(0.5);\n    super.playScene();\n  }\n}",
        "isVisible": true
      },
      "SoundEffects.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic final class SoundEffects {\n\n  // TO DO: Create constants for volume.\n  public static final double MIN_VOLUME = -1.0;\n  public static final double MAX_VOLUME = 1.0;\n\n  public static final int SAMPLE_RATE = 44100;\n\n  // Gets the length of a sound in seconds.\n  public static int getSoundLength(double[] samples) {\n    int soundLength = samples.length / SAMPLE_RATE;\n    return soundLength;\n  }\n\n  // Decreases the volume of a sound.\n  public static void decreaseVolume(double[] samples) {\n    for (int i = 0; i < samples.length; i++) {\n      samples[i] *= 0.5;\n    }\n  }\n\n  // Increases the volume of a sound.\n  public static void increaseVolume(double[] samples) {\n    for (int i = 0; i < samples.length; i++) {\n      samples[i] *= 2;\n\n      if (samples[i] > MAX_VOLUME) {\n        samples[i] = MAX_VOLUME;\n      }\n\n      if (samples[i] < MIN_VOLUME) {\n        samples[i] = MIN_VOLUME;\n      }\n    }\n  }\n\n  // Replaces and counts duplicate samples with 0.\n  public static void replaceDuplicates(double[] samples) {\n\tint duplicates = 0;\n\n    for (int i = 0; i < samples.length - 1; i += 2) {\n      if (samples[i] == samples[i + 1]) {\n        samples[i] = 0;\n        samples[i + 1] = 0;\n        duplicates++;\n      }\n    }\n\n    System.out.println(\"Duplicates replaced: \" + duplicates);\n  }\n\n  // Creates a new array containing the samples that are\n  // greater than 0 from the original array.\n  public static double[] find(double[] samples) {\n    double[] newSound = new double[samples.length];\n\tint target = 0;\n    int count = 0;\n    \n    for (int i = 0; i < samples.length; i++) {\n      if (samples[i] > 0) {\n        newSound[target] = samples[i];\n        target++;\n        count++;\n      }\n    }\n\n\n    System.out.println(\"Number of original samples: \" + samples.length);\n    System.out.println(\"Number of samples greater than 0: \" + count);\n\n    return newSound;\n  }\n\n  // Shift the samples in the sound to the left by one place\n  public static void shiftSound(double[] samples) {\n    for (int i = 0; i < 2; i++) {\n      double temp = samples[0];\n\n      for (int j = 0; j < samples.length - 1; j++) {\n        samples[j] = samples[j + 1];\n      }\n\n      samples[samples.length - i - 1] = temp;\n    }\n  }\n\n  // Creates a new array containing the samples from\n  // the original array in reverse.\n  public static double[] reverseSound(double[] samples) {\n    double[] reversed = samples;\n    int start = 0;\n    int end = samples.length - 1;\n\n    while (start < end) {\n      double temp = reversed[start];\n      reversed[start] = reversed[end];\n      reversed[end] = temp;\n      start++;\n      end--;\n    }\n\n    return reversed;\n  }\n\n  // Combines two sounds to create one sound\n  public static double[] combine(double[] firstSamples, double[] secondSamples) {\n    double[] newSound = new double[firstSamples.length + secondSamples.length];\n\tint targetIndex = 0;\n\n    for (int i = 0; i < firstSamples.length; i++) {\n      newSound[targetIndex] = firstSamples[i];\n      targetIndex++;\n    }\n\n    for (int i = 0; i < secondSamples.length; i++) {\n      newSound[targetIndex] = secondSamples[i];\n      targetIndex++;\n    }\n\n    return newSound;\n  }\n}",
        "isVisible": true
      }
    },
    "starter_assets": {
      "musician.jpeg": "5ba19f40-1d1d-4aa4-9984-2f4c647ef2a2.jpeg",
      "studio.jpeg": "f45285e3-d8e9-41f6-be5c-2c6b05ae964f.jpeg",
      "turntable.jpeg": "f4e32ff9-eb18-4d8d-a8da-93229992303a.jpeg",
      "electrohouse.wav": "647880d9-ceb4-4c32-ad15-1bfc25ecd659.wav"
    },
    "thumbnail_url": "https://images.code.org/63d750449b10e0efbafe879f15be9e96-image-1639769648719.jpeg",
    "name_suffix": "_2022"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-02-26T00:31:59.957+00:00\",\"changed\":[\"cloned from \\\"CSA U7L1-L1a\\\"\"],\"cloned_from\":\"CSA U7L1-L1a\"}]"
}]]></config>
</Javalab>
