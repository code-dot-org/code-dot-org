name 'CSPPD3-u3 chunk 1 concepts'
css 'unplugged'
markdown <<MARKDOWN
# Unit 3 Overview > Chunk 1: Introduction to Functions > Concepts

<img src="https://images.code.org/0294794ed5e596d9b407f952b4ba2ee0-image-1446424146615.png" width="550" style="float:right; margin-left:30px">

## Content Overview

Unit three kicks off with students learning about the building blocks of programming by creating simple line drawings using only 4 **built-in commands** (move forward, turn left, pen up, pen down). The drawing is done using "turtle graphics." Turtle graphics go way back in computing history as a way for newcomers to learn how to program. The system is modeled after an old robot called the "turtle robot" that held a pen and could be controlled to move around and draw things as it moved. In the computer version we have commands that represent the robot controls and the "turtle" is represented as a triangle on the screen.

Working with a constrained toolbox of commands motivates students to **write functions of their own** which are constructed by combining a set of actions you want to perform and assigning those actions a name. Students build their own functions because it helps reduce the amount of repeating needed to carry out a task multiple times. For example, if a student wanted to write a program to draw the American Flag, a simple `drawStar` function could be written that draws a single star, and that function could be called 50 times to draw all of the stars on the flag.

Next, students learn about the documentation, or **API** that is used to help a programmer understand what commands can be used in a given programming language. Students check out the App Lab API in order to get a better sense of what other turtle commands are supported. Reading the documentation is generally important because it gives the programmer details about how different commands are supposed to be used. In fact, it’s not important that students memorize all of the commands of a language - there are way too many to remember the specifics of each one off the top of your head. The important thing is that a student know where to look it up!

Students then learn about **functions with parameters**, which accept input when they are called. Parameters allow us to build functions that are generally useful, with the details passed in when the function is called. For example, a student might want to build a program that draws the Chinese Flag, which has stars of two different sizes. Rather than building two different star functions(`drawBigStar()` and `drawSmallStar()`), a general `drawStar(size)` function could be written that take a `size` parameter when it’s called.

Next, students learn about simple **repeat loops** and random numbers in order to build programs that produce different output each time they’re run. Note that in these lessons, students won’t learn the specifics of how a loop works; instead, they’ll just use an abstracted loop which only has one input - the number of times the loop repeats. This repeat loop along with a random number is a great way to experiment with programs that produce different outcomes each time they’re run.

The chunk ends with a practice performance task, in which students apply their knowledge to create their own functions, loops, and random numbers in order to create a programmatically drawn digital scene.

## What it looks like

Students move through a series App Lab levels that have a constrained toolbox, with each lesson revealing more commands from the toolbox. By the end of the chunk, students have access to all of the turtle-related commands. The goal of the lessons with scoped toolboxes is to build the students’ skills with important concepts. The goal of the open-ended project is to give students space to apply their knowledge of the concepts.

### Purpose of Programming Languages
In this lesson, students work through the process of giving instruction to one another to build a simple LEGO tower, revealing some of the shortcomings of using human language to communicate very specific instructions. This lesson motivates the whole unit.

>**CS Concepts:**

>- **Programming languages** serve to ***remove the ambiguous variations*** in how we communicate through human language.

### Using and Making Simple Functions

<img src="https://images.code.org/3d2c030c3cd5c16ca90fcb1d145e92d6-image-1446476018248.gif" width="75" style="float:right; margin-left:10px">

Students begin programming with simple primitive commands, which move a “turtle” around the screen and draw lines as it moves. These lessons help students understand how to control the computer programmatically while using very basic commands, and show students how to create their own functions. Check out the example output on the right, which shows the kind of simple drawings that are done early in the chunk.

>**CS Concepts:**

>- Programming Languages have **primitive commands** that cause the computer to execute simple behaviors. When these primitives are combined and stacked on top of one another, we can do more and more sophisticated things.
- A programmer can **declare, or create functions** that are made up of a combination of the built-in commands.
- The act of declaring a function is different than **calling the function**, or making the function execute in the program.
- Functions can call other functions.
- When solving a problem, **top-down design** can be used to break down ***subtasks***, which are implemented as functions that are called in other functions.
- There are often many approaches to solving to a programming challenge, but programmers usually try to think about how to solve problems **efficiently**.

### Using and Making Functions with Parameters

Now that students have a sense of why it's useful to create their own functions, they move one step further and build functions that are more generally useful and accept parameters. For example: App Lab has a built-in function called `moveForward(distance)`, which lets us move the turtle any distance - moveForward(5) and moveForward(500) both use the same function, but move the turtle 5 steps and 500 steps, respectively. 

>**CS Concepts:**

>- Programming languages have **application program interfaces (API)**, which are the set of commands made available to the user by default.
- **Functions with parameters** accept values when you run them, which means you can build functions to be generally useful. The information specific to the particular context is passed to the function as a parameter when the function is called. 
- There are certain situations that are better suited for creating functions with parameters (for example: scenarios where you perform a similar action with different constraints multiple times in the same program). 

<img src="https://images.code.org/1968b12a0e767a2b5d4834a0441001f7-image-1446476221350.55.54 PM.png" width=“100” style="float:right; margin-left:10px">

### Altering Program Outcome with Random

Students use loops and the built-in random number function to draw a random number of things of a random size. These tools are applied to build a digital drawing that looks slightly different every time the program is run, because placement of items is randomly assigned based on the number that is generated. 

>**CS Concepts:**

>- **Repeat loops** function to simplify the expression of tasks that are repeated in a program.
- A programmer can use **random numbers** in code to create an output that changes each time the program is run. 

### Practice PT
Students work together to apply what they’ve learned about functions and simple loops to create a "digital scene" that is made up of functions that were written by different members of the group and brought together to create the final product.

>**CS Concepts:**

>- Multiple people can **collaborate** to write code and create functions that are brought together in a larger programming task.
MARKDOWN
