name 'CSA Theater Overview'
title 'The Theater'
description 'The Theater is a canvas-like environment that allows students to create drawings, display images, and play and manipulate sounds.'

markdown <<MARKDOWN
#The Theater
The Theater is a canvas-like environment that allows students to create drawings, display images, and play and manipulate sounds.

##Stage
The following are the methods in the `Stage` class.

###Methods
`public int getWidth()`

**Returns:** the width of the canvas

---

`public int getHeight()`

**Returns:** the height of the canvas

---

`public void playSound(double[] sound)`

plays the array of samples provided

**Parameters:**
* `sound` — an array of samples to play

---

`public void playSound(String filename) throws FileNotFoundException`

plays the sound referenced by the file name

**Parameters:**
* `filename` — the file to play in the asset manager

**Exceptions:**
* `FileNotFoundException` — if the file can’t be found in the project

---

`public void playNote(Instrument instrument, int note, double seconds)`

plays a note with the selected instrument

**Parameters:**
* `instrument` — the instrument to play
* `note` — the note to play. 60 represents middle C on a piano. The possible range of notes is from 48, representing a C one octave below middle C, to 84, representing a C two octaves above middle C.
* `seconds` — length of the note

---

`public void playNoteAndPause(Instrument instrument, int note, double seconds)`

Plays a note with the selected instrument and adds a pause in drawing/audio for the duration of the note, so that subsequent play commands begin after the note has finished playing. Convenience method for playing notes in sequence without needing to call `pause()` between each one.

**Parameters:**
* `instrument` — the instrument to play
* `note` — the note to play. 60 represents middle C on a piano. The possible range of notes is from 48, representing a C one octave below middle C, to 84, representing a C two octaves above middle C.
* `seconds` — length of the note

---

`public void pause(double seconds)`

wait the provided number of seconds before performing the next draw or play command

**Parameters:**
* `seconds` — The number of seconds to wait. This can be a fraction of a second, but the smallest value can be .1 seconds.

---

`public void clear(Color color)`

clear the canvas and set the background to the given color

**Parameters:**
* `color` — new background color

---

`public void drawImage(String filename, int x, int y, int width, int height, double rotation) throws FileNotFoundException`

draw an image on the canvas at the given location, expanded or shrunk to fit the width and height provided

**Parameters:**
* `filename` — the name of the file in the asset manager
* `x` — the left side of the image in the canvas
* `y` — the top of the image in the canvas
* `width` — the width to draw the image on the canvas
* `height` — the height to draw the image on the canvas
* `rotation` — the amount to rotate the image in degrees

**Exceptions:**
* `FileNotFoundException` — if the file can’t be found in the project

---

`public void drawImage(Image image, int x, int y, int width, int height, double rotation)`

draw an image on the canvas at the given location, expanded or shrunk to fit the width and height provided

**Parameters:**
* `image` — the `Image` object to draw on the canvas
* `x` — the left side of the image in the canvas
* `y` — the top of the image in the canvas
* `width` — the width to draw the image on the canvas
* `height` — the height to draw the image on the canvas
* `rotation` — the amount to rotate the image in degrees

---

`public void drawText( String text, int x, int y, Color color, Font font, FontStyle fontStyle, int height, double rotation )`

draws text on the canvas

**Parameters:**
* `text` — the text to draw
* `x` — the distance from the left side of the image to draw the text
* `y` — the distance from the top of the image to draw the text
* `color` — the color to draw the text
* `font` — the font to draw the text in
* `fontStyle` — the style to draw the text in
* `height` — the height of the text in pixels
* `rotation` — the rotation or tilt of the text, in degrees

---

`public void drawText( String text, int x, int y, Color color, Font font, int height, double rotation)`

draws text on the image in a "normal" font style

**Parameters:**
* `text` — the text to draw
* `x` — the distance from the left side of the image to draw the text
* `y` — the distance from the top of the image to draw the text
* `color` — the color to draw the text
* `font` — the font to draw the text in
* `height` — the height of the text in pixels
* `rotation` — the rotation or tilt of the text, in degrees

---

`public void drawLine(int startX, int startY, int endX, int endY)`

draw a line on the canvas

**Parameters:**
* `startX` — the beginning X coordinate of the line
* `startY` — the beginning Y coordinate of the line
* `endX` — the end X coordinate of the line
* `endY` — the end Y coordinate of the line

---

`public void drawRegularPolygon(int x, int y, int sides, int radius)`

draw a regular polygon on the canvas

**Parameters:**
* `x` — the center X coordinate of the polygon
* `y` — the center Y coordinate of the polygon
* `sides` — the number of sides of the polygon
* `radius` — the distance from the center to each point on the polygon

---

`public void drawShape(int[] points, boolean close)`

draw as a shape by connecting the points provided

**Parameters:**
* `points` — an array of numbers representing the points. For instance, a triangle could be represented as [x1, y1, x2, y2, x3, y3]
* `close` — whether to close the shape. If this is set to true, the last point and the first point will be connected by a line, and if a fill color is set, the shape will be filled with that color

---

`public void drawEllipse(int x, int y, int width, int height)`

draws an ellipse (an oval or a circle) on the canvas

**Parameters:**
* `x` — the left side of the ellipse
* `y` — the top of the ellipse
* `width` — the width of the ellipse
* `height` — the height of the ellipse

---

`public void drawRectangle(int x, int y, int width, int height)`

draws a rectangle on the canvas

**Parameters:**
* `x` — the left side of the rectangle
* `y` — the top of the rectangle
* `width` — the width of the rectangle
* `height` — the height of the rectangle

---

`public void setStrokeWidth(double width)`

sets the thickness of lines drawn

**Parameters:**
* `width` — width in pixels of the line to draw. Zero means no line.

---

`public void setStrokeColor(Color color)`

Sets the color of lines drawn

**Parameters:**
* `color` — the color to draw lines with

---

`public void removeStrokeColor()`

removes the stroke color so any future shapes drawn have no outlines

---

`public void setFillColor(Color color)`

sets the fill color for all future shapes drawn

**Parameters:**
* `color` — the color value to fill any shape

---

`public void removeFillColor()`

removes the fill color so any future shapes drawn will have no fill

---

`public void play()`

Plays the instructions. This method may only be called per program execution.


##Image Class
The following are the constructors and methods in the `Image` class.

###Constructors
| Constructor      |Description |
| ----------- |----------- |
| | &nbsp; |
| `public Image(String filename) throws FileNotFoundException` &nbsp;&nbsp; | Creates a new image object, using the pixel information from the file uploaded to the asset manager  |
| | **Parameters:** |
| | * `filename` — the name of the image loaded into the asset manager for the project |
| | **Exceptions:** |
| | * `FileNotFoundException` —  if the file doesn’t exist in the asset manager. |
| | &nbsp; |
| `public Image(Image source)` | Create a new image object, copying the source image provided    |
| | &nbsp; |
| | **Parameters:** |
| | * `source` — the image to duplicate |
| | &nbsp; |
| `public Image(int width, int height)` | Creates an empty image filled with the default background color  |
| | &nbsp; |
| | **Parameters:** |
| | * `width` — the width of the image to create |
| | * `height` — the height of the image to create |


###Methods
| Method      |Description |
| ----------- |----------- |
|  | &nbsp; |
| `public Pixel getPixel(int x, int y)` | **Returns:** the `Pixel` at the (x,y) coordinate specified   |
| | **Parameters:** |
| | * `x` — the x position of the pixel |
| | * `y` — the y position of the pixel |
| | &nbsp; |
| `public void setPixel(int x, int y, Color color)` &nbsp;&nbsp; | set the `Pixel` at the (x,y) coordinate specified   |
| | **Parameters:** |
| | * `x` — the x position of the pixel |
| | * `y` — the y position of the pixel |
| | * `color` — the color to set the pixel |
| | &nbsp; |
| `public int getWidth()`  | **Returns:** the width of the image in pixels  |
| | &nbsp; |
| `public int getHeight()`  | **Returns:** the height of the image in pixels |
| | &nbsp; |
| `public void clear(Color color)`  | clears the image, filling it with the color provided   |
| | **Parameters:** |
| | * `color` — the color with which to fill the image |


##Pixel Class
The following are the methods in the `Pixel` class.

###Methods
| Method      |Description |
| ----------- |----------- |
|  | &nbsp; |
| `public int getX()` | **Returns:** the x position of the pixel   |
| | &nbsp; |
| `public int getY()`  | **Returns:** the y position of the pixel      |
| | &nbsp; |
| `public Image getSourceImage()`  | **Returns:** the image that this pixel part of    |
| | &nbsp; |
| `public Color getColor()`  | **Returns:** the color of the pixel in the image   |
| | &nbsp; |
| `public void setColor(Color color)`  | set the color of the pixel    |
| | **Parameters:** |
| | * `color` — the color to set the pixel |
| | &nbsp; |
| `public int getRed()`  | **Returns:** a number representing the red value (between 0 and 255) of the pixel   |
| | &nbsp; |
| `public int getGreen()`  | **Returns:** a number representing the green value (between 0 and 255) of the pixel   |
| | &nbsp; |
| `public int getBlue()`  | **Returns:** a number representing the blue value (between 0 and 255) of the pixel      |
| | &nbsp; |
| `public void setRed(int value)`  | Sets the amount of red (ranging from 0 to 255) in the color of the pixel. Values below 0 will be ignored and set to 0, and values above 255 with be ignored and set to 255.    |
| | **Parameters:** |
| | * `value` — the amount of red (ranging from 0 to 255) in the color of the pixel |
| | &nbsp; |
| `public void setGreen(int value)` &nbsp;&nbsp;&nbsp;&nbsp; | Sets the amount of green (ranging from 0 to 255) in the color of the pixel. Values below 0 will be ignored and set to 0, and values above 255 with be ignored and set to 255.       |
| | **Parameters:** |
| | * `value` — the amount of green (ranging from 0 to 255) in the color of the pixel |
| | &nbsp; |
| `public void setBlue(int value)`  | **Returns:** `true` if there is no barrier one square ahead in the current direction       |
| | **Parameters:** |
| | * `value` — the amount of blue (ranging from 0 to 255) in the color of the pixel |


##Color Class
The following are the constructors, constants, and methods in the `Color` class.

###Constructors
| Constructor      |Description |
| ----------- |----------- |
| | &nbsp; |
| `public Color(String color) throws IllegalArgumentException` &nbsp;&nbsp; | Creates a color from a string representation     |
| | **Parameters:** |
| | * `color` — the string name of the color (case insensitive) |
| | **Exceptions:** |
| | * `IllegalArgumentException` — if the value specifies an unsupported color name |
| | &nbsp; |
| `public Color(int red, int green, int blue)` | Create a new color based on the red, green, and blue values provided. The alpha value will be maximum opacity.     |
| | &nbsp; |
| | **Parameters:** |
| | * `red` — the red value from 0 - 255 |
| | * `green` — the green value from 0 - 255 |
| | * `blue` — the blue value from 0 - 255 |
| | &nbsp; |
| `public Color(Color color)` | Create a new color that is copied from the provided color   |
| | &nbsp; |
| | **Parameters:** |
| | * `color` — the original color to copy |


###Constants
| Constant      |Description |
| ----------- |----------- |
| `public static final Color WHITE` | Constant color with the value (255, 255, 255) |
| | &nbsp; |
| `public static final Color SiLVER` | Constant color with the value (192, 192, 192) |
| | &nbsp; |
| `public static final Color GRAY` | Constant color with the value (128, 128, 128) |
| | &nbsp; |
| `public static final Color BLACK` | Constant color with the value (0, 0, 0) |
| | &nbsp; |
| `public static final Color RED` | Constant color with the value (255, 0, 0) |
| | &nbsp; |
| `public static final Color MAROON` | Constant color with the value (128, 0, 0) |
| | &nbsp; |
| `public static final Color OLIVE` | Constant color with the value (128, 128, 0) |
| | &nbsp; |
| `public static final Color LIME` | Constant color with the value (0, 255, 0) |
| | &nbsp; |
| `public static final Color AQUA` | Constant color with the value (0, 255, 255) |
| | &nbsp; |
| `public static final Color TEAL` | Constant color with the value (0, 128, 128) |
| | &nbsp; |
| `public static final Color BLUE` | Constant color with the value (0, 255, 255) |
| | &nbsp; |
| `public static final Color NAVY` | Constant color with the value (0, 0, 128) |
| | &nbsp; |
| `public static final Color FUSCHIA` | Constant color with the value (255, 0, 255) |
| | &nbsp; |
| `public static final Color PURPLE` | Constant color with the value (128, 0, 128) |
| | &nbsp; |
| `public static final Color PINK` | Constant color with the value (255, 192, 203) |
| | &nbsp; |
| `public static final Color ORANGE` | Constant color with the value (255, 165, 0) |
| | &nbsp; |
| `public static final Color GOLD` | Constant color with the value (255, 215, 0) |
| | &nbsp; |
| `public static final Color BROWN` | Constant color with the value (165, 42, 42) |
| | &nbsp; |
| | &nbsp; |
| `public static final Color CHOCOLATE` | Constant color with the value (210, 105, 30) |
| | &nbsp; |
| | &nbsp; |
| `public static final Color TAN` | Constant color with the value (210, 180, 140) |
| | &nbsp; |
| | &nbsp; |
| `public static final Color TURQUOISE` &nbsp;&nbsp;&nbsp;&nbsp; | Constant color with the value (64, 224, 208) |
| | &nbsp; |
| | &nbsp; |
| `public static final Color INDIGO` | Constant color with the value (75, 0, 130) |
| | &nbsp; |
| | &nbsp; |
| `public static final Color VIOLET` | Constant color with the value (238, 130, 238) |
| | &nbsp; |
| | &nbsp; |
| `public static final Color BEIGE` | Constant color with the value (245, 245, 220) |
| | &nbsp; |
| | &nbsp; |
| `public static final Color IVORY` | Constant color with the value (255, 255, 240) |
| | &nbsp; |


###Methods
| Method      |Description |
| ----------- |----------- |
|  | &nbsp; |
| `public int getRed()` | **Returns:** a number representing the red value (between 0 and 255) of the pixel  |
| | &nbsp; |
| `public int getGreen()`  | **Returns:** a number representing the green value (between 0 and 255) of the pixel    |
| | &nbsp; |
| `public int getBlue()`  | **Returns:** a number representing the blue value (between 0 and 255) of the pixel      |
| | &nbsp; |
| `public void setRed(int value)`  | Sets the amount of red (ranging from 0 to 255). Values below 0 will be ignored and set to 0, and values above 255 will be ignored and set to 255.     |
| | **Parameters:** |
| | * `value` — the amount of red (ranging from 0 to 255) in the color of the pixel |
| | &nbsp; |
| `public void setGreen(int value)` &nbsp;&nbsp;&nbsp;&nbsp;  | Sets the amount of green (ranging from 0 to 255). Values below 0 will be ignored and set to 0, and values above 255 will be ignored and set to 255.    |
| | **Parameters:** |
| | * `value` — the amount of green (ranging from 0 to 255) in the color of the pixel |
| | &nbsp; |
| `public void setBlue(int value)`  | Sets the amount of blue (ranging from 0 to 255). Values below 0 will be ignored and set to 0, and values above 255 will be ignored and set to 255.    |
| | **Parameters:** |
| | * `value` — the amount of blue (ranging from 0 to 255) in the color of the pixel |


##Font Class
The following are the constants in the `Font` class.

###Font Constants
| Constant      |Description |
| ----------- |----------- |
| | &nbsp; |
| `MONO` &nbsp;&nbsp;&nbsp;&nbsp; | Represents a monospaced font, used for code or other situations where it’s important that the characters are all the same width for alignment.   |
| | &nbsp; |
| `SANS` &nbsp;&nbsp;&nbsp;&nbsp; | Represents a sans-serif font, which has no lines or strokes attached to the end of larger strokes in a letter.  |
| | &nbsp; |
| `SERIF` &nbsp;&nbsp;&nbsp;&nbsp; | Represents a serif font, which has small lines or strokes attached to the end of larger strokes in a letter.   |

###FontStyle Constants
| Constant      |Description |
| ----------- |----------- |
| | &nbsp; |
| `NORMAL` &nbsp;&nbsp;&nbsp;&nbsp; | Represents a “normal” style for a font.   |
| | &nbsp; |
| `BOLD` &nbsp;&nbsp;&nbsp;&nbsp; | Represents a bold style for a font, which has heavier lines.  |
| | &nbsp; |
| `ITALIC` &nbsp;&nbsp;&nbsp;&nbsp; | Represents an italic style for a font. which is slanted forward.  |
| `BOLD_ITALIC` &nbsp;&nbsp;&nbsp;&nbsp; | Represents a bold italic style for a font, which is drawn with heavier lines and is slanted forward.   |


##SoundLoader Class
The following are the methods in the `SoundLoader` class.

###Methods
| Method      |Description |
| ----------- |----------- |
|  | &nbsp; |
| `public static double[] read(String filename) throws SoundException, FileNotFoundException` | **Returns:** the array of samples, at 44.1 kilohertz, from a WAV or AU sound file. This means that 441000 samples are played per second.  |
| | **Parameters:** |
| | * `filename` — the name of the audio file |
| | **Exceptions:** |
| | * `SoundException` — if there is an error reading the file, or FileNotFoundException when the file cannot be found. |


##Instrument Class
The following are the methods in the `Instrument` class.

###Constants
| Constructor      |Description |
| ----------- |----------- |
| | &nbsp; |
| `PIANO` &nbsp;&nbsp;&nbsp;&nbsp; | Represents a piano sound.    |
| | &nbsp; |
| `BASS` &nbsp;&nbsp;&nbsp;&nbsp; | Represents a lower bass guitar sound.    |
MARKDOWN
