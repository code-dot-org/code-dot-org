name 'CSPPD3-u3 chunk 2 concepts'
css 'unplugged'
markdown <<MARKDOWN
# Unit 3 Overview > Chunk 2: Introduction to Events and Apps > Concepts

<img src="https://images.code.org/569a63a19c27a15565a45d19b28aba07-image-1446414633468.png" width="550" style="float:left; margin-right:30px">

## Content Overview

For the first chunk of lessons we wrote programs that ran sequentially, which means the code ran in order, from top to bottom. In the second chunk of lessons we shift gears and begin to look at **event-driven programming**, which for now is a type of program that responds to input from the user, like clicking a button, and runs different pieces of code based on what the user does.

You could compare the programming we did in the first 8 lessons to a recipe. When you follow a recipe, you start at the beginning with your ingredients and move down the page following each step of preparation and cooking. The programs we wrote at the beginning of this unit were similar, in that they executed in order from top to bottom. The programming we’re doing in this second chunk of lessons is more like what a referee at a sporting event would do. The ref is watching what’s happening on the field and has specific actions to take depending on what the players do. The ref will make a call when something happens, but there is no set order that we can anticipate those calls will come in - it all depends on what the players do.

A program written with events works in the same way. Students will write code that watches for the user of their program to interact with it through behaviors like clicking a button, and the code for a specific action will only be run when the user interacts with the associated element.

## What it looks like

Students will do a lot of skill building in this section of the unit, which means many of the levels in code studio give small, very specific tasks that help students gain comprehension of how these concepts work. In the second half of the chunk, students will build up a simple app that responds to the mouse.

### Part 1: Introduction to Events

In this first part of the unit chunk, students begin with an unplugged card game that leads them through the ideas behind event-driven programming (specifically by declaring rules that define events to watch for) and an action that follows each event. Students then move to the computer and write very simple programs that use buttons to let the user interact with the program.

>**CS Concepts:**

>- User-interface (UI) elements allow the user to interact with the program
- UI elements are named with unique **IDs**
-  **Event handlers** are used to have the program execute something specific when the UI element is interacted with
- Error messages help the programmer correct errors in the code 
- How to debug simple issues related to event-driven programming
- Event-related concepts including: 
  - creating buttons
  - writing event handlers for buttons
  - creating useful IDs for buttons 

<img src="https://images.code.org/35f6b9e3a6d5d4fc46576d71e1faf80a-image-1446412437840.gif" width="100" style="float:right; margin-left:30px">

### Part 2: User Interface and Apps

Now that students have an idea of the basics of how events work in a program, we start to look at the different types of user interface interactions related to the mouse (tracking mouse movement, mouse clicks, and the location of the cursor relative to another element on the screen). Students build up their understanding of these different ways they can respond to the user’s actions in the program and begin constructing a basic app that uses events to make an image of their choice “run away” from the mouse (see the example on the right). Students then build an app that does whatever they want but includes multiple screens, incorporates text, sounds, images, and buttons.

>**CS Concepts:**

>- How to build and use multiple screens in an app 
- Students will learn how to do the following things in App Lab:
  - set the position of an element of the screen
  - add text labels on the screen to display text
  - add an image to the screen
  - use the debugging console at the bottom of the page to help understand what is running in the program and when it’s running
  - use “design mode” in App Lab to set up all of the elements they want to have appear on the screen
MARKDOWN
