name 'Introduction to Unit 3'
css 'unplugged'
markdown <<MARKDOWN
# Unit 3: Algorithms and Programming

## Concepts and Topics

<img src="https://images.code.org/20d0a073a53b0d1f3122367d1f6bd621-image-1479825435539.png" style="width:500px; float:right; margin-left:20px">

This unit introduces students to programming in the JavaScript language and creating small applications (apps) that live on the web. This introduction places a heavy emphasis on understanding general principles of computer programming and revealing those things that are universally applicable to any programming language. 



## Unit Flow and Breakdown
To start the unit we use unplugged activities to introduce algorithms and highlight the need for a programming language to implement them on a computer. These activities will involve the whole class working in small groups to solve problems using simple manipulatives like playing cards or blocks. We want to draw connections here between the rules of Internet protocols developed earlier in the course, in which students acted as the computer processing the information. Many of the structured and systematic thinking that goes into developing communication protocols feels similar to designing algorithms - ultimately you’re designing a series of steps to solve a problem that a machine could follow.  We want to establish the dual enduring understandings **that algorithms are precise sequences of instructions for processes that can be executed by a computer and are implemented using programming languages (4.1) and people write programs to execute algorithms (5.2).**

<img src="https://images.code.org/60e4deedafd0f3552ae76861bdbc9b47-image-1479825569674.png" style="width:200px; float:right; margin-left:20px">
Students are introduced to the App Lab programming environment by writing programs to control a “turtle”, an imaginary character that moves around the screen and can draw.  In the lessons students learn features of the JavaScript language by going through a series of short tutorials to familiarize students with the environment, and new concepts. There is a heavy emphasis on writing procedures (functions in JavaScript), and using top-down program design - a process by which a large problem is broken down into smaller and more manageable parts. These lessons highlight the way **multiple levels of abstraction are used to write programs (2.2).**

Along the way students create more and more sophisticated drawings culminating in the Practice PT: Design a Digital Scene in which small groups must collaborate to design and share code to create a small vignette created with turtle art. Through the lessons and PTs we want to build toward some enduring understandings that **creative development can be an essential process for creating computational artifacts (1.1)** and that **collaboration and computing enables people to use creative development processes to create computational artifacts for creative expression or to solve a problem (1.2).**


MARKDOWN
