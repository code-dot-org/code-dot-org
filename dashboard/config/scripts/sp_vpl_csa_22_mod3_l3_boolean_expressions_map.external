name 'SP-VPL-CSA-22-mod3-L3-boolean-expressions-map'
title 'title'
description 'description here'

markdown <<MARKDOWN
# Boolean expressions

A **boolean expression** is a code segment that evaluates to a boolean value.  A boolean value is either `true` or `false`. 

A boolean expression can use **relational operators** which evaluate to a boolean value. 

In this lesson we will be looking at the following relational operators in Java: 

| Operator  | Description |
| :---: |    :----   |
| `>` | Greater than |
| `<` | Less than |
| `>=`| Greater than or equal to  |
| `<=`| Less than or equal to |
| `==`| Equal to |
| `!=`| Not equal to |

## Examples
**Example 1**

Assume you have a variable `int num = 10`.  Then the boolean expression `num >= 5` evaluates to `true` because the value stored in `num` (10)  is greater than 5.  

---

**Example 2**  

Assume you have a variable `int points = 21`.  Then the boolean expression `points<21` evaluates to `false` because the value stored in `points` is not less than 21.

---

**Example 3**

You can also combine arithmetic operators with relational operators for a boolean expression.  Assume you have the variable `int fouls = 2` and the boolean expression `fouls + 1 <   2`.  This boolean expression evaluates to `false`.  Java will first do the arithmetic operation of `+` and then evaluate the boolean expression.  For the computer, it evaluates `(2+1) < 2`.  Since 3 is not less than 2, this expression will evaluate to `false`.

## Additional resources
Looking for more resources, examples, and practice?  You can learn more about boolean expressions with these resources:
*  <a href="https://runestone.academy/ns/books/published/csawesome/Unit3-If-Statements/topic-3-1-booleans.html" target="_blank">CS Awesomeâ€™s chapter on boolean expressions</a>

* <a href="https://codehs.com/textbook/apcsa_textbook/3.1" target="_blank">Cod eHS's chapter on boolean expressions</a>

MARKDOWN
