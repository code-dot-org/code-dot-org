name 'CSA U8 Assessment q03_pilot-2025'

wrong 'When an element is moved to the sorted list in insertion sort, it may move again if a smaller item is found.'
right 'Selection sort is generally slower than insertion sort on a randomized list.'
wrong 'When an element is moved in selection sort, it is put into a sorted position and will not move again.'
wrong 'Insertion sort is generally faster for a nearly sorted array.'
wrong 'Insertion sort is generally faster for a reverse sorted array.'

markdown <<MARKDOWN
Which of the following are NOT true of insertion and selection sort?
MARKDOWN

allow_multiple_attempts true
teacher_markdown <<MARKDOWN
Let's analyze each statement:

**A. When an element is moved to the sorted list in insertion sort, it may move again if a smaller item is found.**

This statement is true. In insertion sort, elements are compared and moved as necessary to insert them into their correct positions within the sorted list. If a smaller item is encountered later in the list, the element may need to be shifted further to the right.

**B. Selection sort is generally slower than insertion sort on a randomized list.**

This statement is false. Selection sort and insertion sort have different performance characteristics. While insertion sort performs better than selection sort for partially sorted or nearly sorted arrays, it is not necessarily faster on a randomized list. The relative performance of the two algorithms depends on various factors, such as the specific input order and the size of the input.

**C. When an element is moved in selection sort, it is put into a sorted position and will not move again.**

This statement is true. In selection sort, the smallest (or largest) element is repeatedly selected and placed into its correct position. Once an element is moved to its sorted position, it will not move again during the sorting process.

**D. Insertion sort is generally faster for a nearly sorted array.**

This statement is true. Insertion sort is well-suited for nearly sorted arrays because it requires fewer comparisons and shifts to insert elements into their correct positions. This efficiency advantage makes insertion sort generally faster for nearly sorted arrays compared to other sorting algorithms.

**E. Insertion sort is generally faster for a reverse sorted array.**

This statement is true. Insertion sort performs well on a reverse sorted array because it compares each element with the elements on its left and moves them to the right until it finds the correct position. In a reverse sorted array, each element will be compared and shifted to the right for almost every iteration. This means that fewer comparisons and shifts are required compared to other sorting algorithms, making insertion sort more efficient in this specific case.
MARKDOWN
