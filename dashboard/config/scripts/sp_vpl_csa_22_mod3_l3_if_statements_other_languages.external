name 'SP-VPL-CSA-22-mod3-L3-if-statements-other-languages'
title 'title'
description 'description here'

markdown <<MARKDOWN
# Misconception alert: Assignment operator and comparison operator 

A common misconception for new-to-Java programmers is the difference between the assignment operator (`=`) and the comparison operator (`==`).  

## The assignment operator

You learned in the last lesson that the **assignment operator** is used to set or update the value stored in a variable and is read using the word “gets”.  For example `int age = 16` is read “age gets 16”.  When using the assignment operator it is important that the name of the variable you want to update is on the left side of the assignment operator in order for the value in the variable to be updated. 

## The comparison operator

When checking for comparison between two integer values, we use the **comparison operator** (`==`).  This operator is used to check for equality between two integer values.  When we use the comparison operator we get a boolean value after the comparison is made.  When we read `age == 16` we say `age equal to 16`.  It is important to note that this is not setting age equal to 16 but rather asking “is age equal to 16?”  If so, then the expression `age == 16` evaluates to `true`.  If age is not equal to 16, the expression `age == 16` evaluates to `false`.  

Finally, with the comparison operator, `age == 16` and `16 == age` will evaluate to the same boolean value. The order does not matter. 

Let’s practice!
MARKDOWN
