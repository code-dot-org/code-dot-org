name 'CSA U7 Assessment q06_2024'

wrong '![](https://images.code.org/80e7ff3c15592b146e7aa78f0df6633c-image-1652103957806.png)'
wrong '![](https://images.code.org/a4b73a520a26279a36d0a9506c9f9eb7-image-1652103961767.png)'
right '![](https://images.code.org/355ff607e72b292be65568d044c7454a-image-1652103966224.png)'
wrong '![](https://images.code.org/f302f3a99da1e35bbce911f2baa5fe9e-image-1652103969981.png)'
wrong '![](https://images.code.org/1615bfa46bf31a2a57c800bf535be3a2-image-1652103974343.png)'

markdown <<MARKDOWN
Consider the following recursive method.

```
public static void whatsUp(String str) {
  int len = str.length();
  if (len > 1){
    String temp = str.substring(0, len-1);
    whatsUp(temp);
    System.out.println(temp);
  }
}
```

What is printed as a result of the call `whatsUp("WATCH")`?
MARKDOWN

allow_multiple_attempts true
teacher_markdown <<MARKDOWN
This method takes a `String` and checks if its length is greater than `1`. If it is, it creates a new `String` called `temp`, which is the original `String` minus the last character. Then it calls itself with this new `String`. After that call returns, it prints the new `String`.

In case of `whatsUp("WATCH")`, here is the sequence of operations:

1. Call `whatsUp("WATCH")`.

    - `temp` is `"WATC"`.
    
    - Call `whatsUp("WATC")`.
    
        - `temp` is `"WAT"`.
        
        - Call `whatsUp("WAT")`.
        
            - `temp` is `"WA"`.
            
            - Call `whatsUp("WA")`.
            
                - `temp` is `"W"`.
                
                - Call `whatsUp("W")`.
                
                    - This call does nothing because the length of `"W"` is not greater than `1`.
                    
                - Print `"W"`.
                
            - Print `"WA"`.
            
        - Print `"WAT"`.
        
    - Print `"WATC"`.
    
- Print `"WATCH"`.

So the output is:

```
W
WA
WAT
WATC
WATCH
```
MARKDOWN
