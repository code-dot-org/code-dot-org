name 'SP-VPL-21-mod3-LessonTypes-CSP_2023'
title 'title'
description 'description here'

markdown <<MARKDOWN
# Lessons

<div style="background-color: #a6e3e8; border-radius: 40px; color: #000000; width: 95%; padding: 1px 20px 1px 20px;">

<p style="line-height: 1.5; margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; font-size: 18px; ">Each unit of CS Principles consists of individual lessons that share common characteristics. Knowing the types of lessons in the curriculum will help you understand the intent and purpose along with your role in teaching the lesson. 
</p>
</div>


## Lesson length


##### CS Principles lessons are designed for 45 minute class periods, but can be modified for longer or shorter class periods. Some lessons, such as project lessons, take multiple days to complete. Suggested times are included in each lesson plan.

## Lesson components 

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üôã‚Äç‚ôÄÔ∏è Warm Up</summary>
 <div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### Each lesson begins with a warm up, which serves as a highly approachable shared experience that highlights the need for the skills and understandings presented in the lesson. These should be kept short so that students can quickly move into the main activity of the lesson. 
</p>
</div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üíÉ Activity</summary>
 <div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### Students spend the majority of their time engaging in the lesson activity. Activities provide students with opportunities to explore new computing concepts. Exploration is essential for students to build the content knowledge they will need to understand and participate in computing activities. Lesson activities are scaffolded to provide students with just-in-time information to solve their problems as they build their computing knowledge and skills.
</p>
</div>
</details>


<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üèÅ Wrap Up</summary>
 <div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### Wrap ups end every lesson and provide students with opportunities to reflect on the skills and understandings presented in the lesson. Wrap ups include a review of any vocabulary introduced in the lesson, key points, and often provide students with a discussion or journal question that will help them process their learning. Wrap ups are often journal prompts and short discussions that can be used as an exit ticket or short formative assessment.
</p></div>
</details>

## Lesson types


<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üíª Programming Lessons</summary>
 <div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### Programming lessons introduce new programming concepts and skills to students. Although students will spend a majority of their time on the computer during these lessons, programming lessons also include offline, or unplugged, components. Students are expected to complete many of the activities in small groups or as a class. The teacher plays an active role facilitating opportunities for sense making and formative assessment as students engage in lesson content. 

##### In CS Principles, coding units follow an Explore-Investigate-Practice-Make (EIPM) sequence. You will learn more about EIPM sequences in-depth later in this module. 
</p></div>
</details>


<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">‚úçüèΩ Non-programming Lessons</summary>
 <div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### Non-programming lessons focus on process skills and non-programming computing concepts. These lessons are mostly unplugged, but some do include online components. Unplugged lessons typically include an activity guide that students will use throughout the lesson as a guide for their learning. Non-programming lessons present students with opportunities for collaboration and discussion in small groups as well as individual reflection.
</p></div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üë©‚Äçüíª Project Lessons</summary>
 <div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### Projects are multi-day open-ended lessons found at the end of each unit, except for units 6 and 8. Unit 8 culminates instead with the Create Performance Task that students submit as part of their AP Portfolio if they are taking the course as an AP course. Projects challenge students to create using skills developed throughout the unit. Projects often include opportunities for planning, creation, and reflection.  
</p></div>
</details>



MARKDOWN
