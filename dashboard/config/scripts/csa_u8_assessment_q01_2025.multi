name 'CSA U8 Assessment q01_2025'

wrong '21'
wrong '20'
wrong '19'
wrong '10'
right '5'

markdown <<MARKDOWN
Suppose the `binarySearch` method is called with an array containing 20 elements sorted in increasing order. What is the maximum number of times that the statement indicated by `/* calculate midpoint */` could execute?

```
public static int binarySearch(int[] a, int target) {
  int left = 0;
  int right = a.length - 1;
  
  while (left <= right) {
    int mid = (left + right) / 2;   /* calculate midpoint */

    if (a[mid] < target) {
      left = mid + 1;
    }
    else if (a[mid] > target) {
      right = mid - 1;
    }
    else {
      return mid;
    }
  }

  return -1;
}
```
MARKDOWN

allow_multiple_attempts true
teacher_markdown <<MARKDOWN
In the given binary search algorithm, the maximum number of times the statement indicated by `/* calculate midpoint */` could execute is 5.

Let's analyze the algorithm to understand why:

1. The algorithm initializes `left` as 0, which is the index of the first element in the array, and `right` as `a.length - 1`, which is the index of the last element in the array.

2. The algorithm enters a while loop that continues as long as `left` is less than or equal to `right`. This condition ensures that there are still elements to search within the current range.

3. Inside the `while` loop, the midpoint `mid` is calculated as the average of `left` and `right`, using the formula `(left + right) / 2`.

4. The algorithm performs a comparison between the element at index `mid` (`a[mid]`) and the target value. Based on the result of the comparison, one of the following actions is taken:

   - If `a[mid]` is less than the target, it means the target is in the right half of the current range. The `left` index is updated to `mid + 1` to search in the right half.
   
   - If `a[mid]` is greater than the target, it means the target is in the left half of the current range. The `right` index is updated to `mid - 1` to search in the left half.
   
   - If `a[mid]` is equal to the target, it means the target has been found at index `mid`, and the algorithm returns `mid`.
   
5. If the `while` loop completes without finding the target, the algorithm returns `-1`, indicating that the target is not present in the array.

6. The number of times the statement indicated by `/* calculate midpoint */` executes is equal to the number of iterations the `while` loop performs before terminating.

Considering that the binary search algorithm halves the search range in each iteration, the maximum number of times the statement executes is reached when the remaining range becomes a single element or the target is found. Since the array has 20 elements, the maximum number of iterations occurs when the remaining range reduces to a single element, which is a range of size 1.
 
To reach a range of size 1, the initial range of size 20 needs to be halved 4 times. Each halving reduces the range size by half:

1. Initial range size: 20
2. After 1st halving: 10
3. After 2nd halving: 5
4. After 3rd halving: 3
5. After 4th halving: 2

At this point, the remaining range is 2, which is not yet a range of size 1. However, after the 5th halving, the remaining range becomes a single element:

6. After 5th halving: 1

Therefore, the maximum number of times the statement indicated by `/* calculate midpoint */` could execute is 5.
MARKDOWN
