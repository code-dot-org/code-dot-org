name 'csa-prework-m4-transition-text-2023'
title 'title'
description 'description here'

markdown <<MARKDOWN
# Adding vocabulary

Congratulations!  You are well on your way to using classes in Java.  Let’s start to build more understanding of what Java concepts you have been using. 

## Classes and objects
In the last level we used the `Painter` class.  A **class** is a programmer-defined blueprint from which objects are created.  Using a class, we can create an object.  

The `Painter` class you just used was created by Code.org.  The information in the `Painter` class provided the computer a “blueprint” create a new `Painter` object.  Once you have created an object, you can use behaviors from the `Painter` class to make the `Painter` object behave in a specific way.

<br>

### Example

In the prior level `annieTheArtist` was the name of your `Painter` object.  

```
Painter annieTheArtist = new Painter();   // this line of code created your Painter object
```

`annieTheArtist` was able to “move” because the blueprint for the Painter class had instructions for any Painter object to move.  

```
annieTheArtist.move();   // after creating your Painter object you could tell the object to move
```

Imagine other classes that could be written in Java to serve as a blueprint for an object.  Perhaps you have a `Bicycle` class that served as a blueprint for a bicycle.  You could create different Bicycle objects using the blueprint.  Those `Bicycle` objects could have different attributes (such as different colors or be made out of different materials) but they all could have the same behaviors (such as "break" or "shift").

<br>

### What you have done

In the prior level, you saw two key tasks in Java:

* Instantiating an object
* Calling a method

We will go into more depth on these two tasks in this lesson.

<hr>

**Up next:** Learn what it means to "call a method" in Java.

MARKDOWN
