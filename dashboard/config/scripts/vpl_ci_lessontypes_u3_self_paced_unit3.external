name 'VPL-CI-LessonTypes-U3_self-paced-unit3'
title 'title'
description 'description here'

markdown <<MARKDOWN
# Unit Structure

<div style="background-color: #a6e3e8; border-radius: 40px; color: #000000; width: 95%; padding: 1px 20px 1px 20px;">

<p style="line-height: 1.5; margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; font-size: 18px; ">
The Interactive Animations and Games unit is divided into <strong>two chapters</strong>. Each chapter includes several small projects and activities that provide an opportunity for students to practice new skills. If you are short on time, you may choose to complete only the first chapter of the unit.
</p></div>

## Chapters

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üìò Chapter 1: Images and Animations</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### <strong>Description:</strong> Students build up toward programming interactive animations in the Game Lab environment. They begin with simple shapes and sprite objects, then use loops to create flipbook style animations. Next, they learn to use booleans and conditionals to respond to user input. At the end of the chapter, students design and create an interactive animation that they can share with the world.

* ##### What is a computer program?
* ##### What are the core features of most programming languages?
* ##### How does programming enable creativity and individual expression?
* ##### What practices and strategies will help me as I write programs?
</p></div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üìó Chapter 2: Building Games</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### <strong>Description:</strong> In this chapter students combine the constructs that they learned in the first chapter to program more complex movement and collisions in their sprites. As they create more complex programs, they begin to use functions to organize their code. In the end, students use a design process to create an original game.

* ##### How do software developers manage complexity and scale?
* ##### How can programs be organized so that common problems only need to be solved once?
* ##### How can I build on previous solutions to create even more complex behavior?
</p></div>
</details>

## Lessons
##### Most lessons are designed for **45 minute class periods**, but can be modified for longer or shorter class periods. Some lessons, such as project lessons, take multiple days to complete. Suggested times are included in each lesson plan.

### Lesson components 

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üôã‚Äç‚ôÄÔ∏è Warm up</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>


##### Each lesson begins with a warm up, which serves as a highly approachable shared experience that highlights the need for the skills and understandings presented in the lesson. These should be kept short so that students can quickly move into the main activity of the lesson. Warm ups end with a big question that articulates the problem space students will be exploring during the lesson. This question sets the stage for the target learning.
</p></div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üíÉ Activity</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>


##### Students spend the majority of their time engaging in the lesson activity. Activities provide students with opportunities to explore new computing concepts. Exploration is essential for students to build the content knowledge they will need to understand and participate in computing activities. Lesson activities are scaffolded to provide students with just-in-time information to solve their problems as they build their computing knowledge and skills.
</p></div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üèÅ Wrap up</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>


##### Wrap ups end every lesson and provide students with opportunities to reflect on the skills and understandings presented in the lesson. Wrap ups include a review of any vocabulary introduced in the lesson, and return to the big question introduced in the warm up. Wrap ups are often journal prompts and short discussions that can be used as an exit ticket or short formative assessment.
</p></div>
</details>

### Lesson types

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üíª Programming lessons</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### Programming lessons introduce new programming concepts and skills to students. Although students will spend a majority of their time on the computer during these lessons, programming lessons also include offline components. Students are expected to complete many of the activities in small groups or as a class. The teacher plays an active role facilitating opportunities for sense making and formative assessment as students engage in lesson content. 
</p></div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">‚úçüèΩ Non-programming lessons</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>


##### Non-programming lessons focus on process skills and non-programming computing concepts. These lessons are mostly offline, but some do include online components. Offline lessons typically include an activity guide that students will use throughout the lesson as a guide for their learning. Non-programming lessons present students with opportunities for collaboration and discussion in small groups as well as individual reflection.
</p></div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üë©‚Äçüíª Project lessons</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>


##### ***Mini-projects*** are opportunities for students to apply what they have learned by creating something new in a more open-ended setting. Mini-projects appear throughout the unit as opportunities for students to practice open-ended application of a small set of new skills. These projects can be expanded or condensed depending on the class time available. 

##### ***Projects*** are multi-day open-ended lessons found at the end of each chapter or unit. Projects challenge students to create using skills developed throughout the unit. Projects often include opportunities for planning, creation, and reflection. 
</p></div>
</details>


MARKDOWN
