name 'Events Overview'
css 'unplugged'
markdown <<MARKDOWN
# Events Overview and How To Guide

Event-Based programming can be a useful tool when a programmer wants to develop a program that reacts to a set of external triggers.  This means that the program is directed by an outside process such as a user (through the Graphic User Interface or GUI) or other systems within the computer (client/server requests).  In App Lab, we will focus on situations triggered by a user.

In unit 3, students began programming by drawing images with the turtle.  This is *not* event driven because the program does a single set of commands in a prescribed order.  The result will never change.  An example of a highly event-driven software is a word processor: nothing occurs until the user presses keys or clicks a button.  These keypresses are events that trigger the computer to process the action and update the screen with the appropriate letter. The characters written on the screen are not predetermined by the programmer, so the application must be event-driven.

In App Lab, students will use event handlers to listen for and respond to user events.  

<img style = "margin: 0 auto" src="https://images.code.org/a4cf535f00b0b77737d5259386b4442d-image-1476884080311.png">

Students will use Design Mode to create UI elements and give them names.  They then create event handlers that listen for particular actions to be performed with the specified element and execute a segment of code when that event occurs.  Within the event block, you will see a yellow segment (the event) and a green segment (an unnamed function).  The event handler is really only the yellow portion of the code.  Its only job is to listen for an event to occur, and then starts a function.  In App Lab, we write this function just below the event handler. A function with no name as seen here is called a ‘callback function’.  Generally, callback functions are used when a process may take a long time to complete and the programmer wants the sequence to continue after the result has come in.  Students do not need to have a strong understanding of callback functions, rather they should understand that the only thing an event handler can do is call a function, and the function that is being called is the green block attached to the event handler.


The following links provide additional links and information about event driven programming.  Many of these links are also found in the curriculum, but are consolidated here for convenience.

- <a href = “https://studio.code.org/s/csp5/stage/1/puzzle/5” target=_blank>Event Driven Programming <i class="fa fa-external-link-square"/></a>
- <a href = “https://studio.code.org/s/csp5/stage/1/puzzle/8” target=_blank>Event Driven Programming Patterns <i class="fa fa-external-link-square"/></a>
- <a href = “https://studio.code.org/s/csp5/stage/1/puzzle/9” target=_blank>Choosing Good IDs <i class="fa fa-external-link-square"/></a>
- <a href = “https://studio.code.org/s/csp5/stage/3/puzzle/2” target=_blank>Event Driven Programming Recap <i class="fa fa-external-link-square"/></a>

MARKDOWN
