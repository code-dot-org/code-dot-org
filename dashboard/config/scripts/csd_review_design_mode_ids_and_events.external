name 'CSD Review: Design Mode, IDs, and Events'
display_name 'Review: Design Mode, IDs, and Events'
markdown <<MARKDOWN
# Review: Design Mode and IDs

## Design Mode
App Lab lets you easily add UI Elements to your app, and then add code to respond when a user interacts with those elements.

<div style="column-count: 4; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%">

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
You'll see a set of switches above the app area that let you flip back and forth between "Design Mode" and Code Mode".</p>

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>Adding an element is as easy as dragging and dropping it into the app where ever you want. Once it's on the app screen you can reposition it, resize it and change lots of other properties about it </p>

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">3.</span>The <em>Properties</em> tab shows you everything you can change about the look and feel of a UI element.</p>

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">4.</span>The <strong>element ID</strong> is important because it's how you refer to the element in your code. We'll discuss element IDs later on.</p>
</div>

![](https://images.code.org/01a31ac3be66deb6d01a92a1edfffd21-image-1476726587662.png)


<div style="column-count: 2; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 66%; float: right">

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">5.</span>You can make the text that the user sees on the button text be whatever you like.</p>

<p style="break-after: always; -moz-column-break-after: always; -webkit-column-break-after: always;"><span style="font-weight: bold; color: #00adbc; font-size: 200%;">6.</span><strong>Note:</strong> Scroll down to see other properties for a UI element might be "hiding" down below.</p>
</div>

<div style="clear: both"></div>
<hr>

## Choosing Good IDs

**Good IDs** are **meaningful and descriptive**. You will want an ID to describe the intended purpose of the element.

<img src="https://images.code.org/b33be9ee1521f2aa80fedcf22c929d44-image-1476910499958.png" style="display: block; margin: auto;">

### Rules About IDs
In making descriptive and meaningful IDs there **are some rules about IDs** you need to know.  IDs...

* are case-sensitive. This means there is a difference between `HomeButton` and `homeButton`  (notice the Capital H on the first one).
* cannot contain spaces.
* *must* begin with a letter (A-Z or a-z) and may be followed by any number of digits and letters.
* can contain hyphens ("-"), underscores ("_"), colons (":"), or periods (".").

There are a few common styles for capitalizing and spelling multi-word IDs:

* **"Camelcase"** -- `aCamelcaseNameMightLookLikeThis`
* **Underscores** -- `Some_people_like_to_use_underscores_to_separate_words`
* **Dashes** -- `Others-like-to-use-hyphens-or-dashes`

Whatever you choose is up to you.  It's your style.  It just helps to be consistent.
MARKDOWN

teacher_markdown <<MARKDOWN
#### Developing Good Programming Habits

Following clear and consistent naming conventions is an important habit to develop, but the benefits are rarely immediately obvious to students. It really pays off in the long term to be a stickler for well named IDs, particularly because it will save your own sanity when it comes time to read your students' programs.

#### Events 

The essentials:

* The `onEvent()` block specifies:
	* an element ID
    * an event (such as "click" or "mouseover")
    * code that should be run when the event occurs (this code is technically an anonymous callback function, represented by the green block)
* Code inside `onEvent()` blocks runs any time the specified event occurs

#### Compared to Game Lab

In Game Lab, we might use the following code to check if a sprite named "button" was clicked and do something about it:

    function draw() {
    	if (mousePressedOver(button)) {
       		// Do something
       	}
    }


In App Lab, given a button with the ID "button", we could write the following code to achieve the same goal:


    onEvent("button", "click", function () {
    	// Do something
    });

In the App Lab example, the function is just another argument passed to the onEvent function, it just so happens that the argument must be a function itself. We could also define the function separately and write this same program as follows:

    function doSomething() {
    	// Do something
    }
    
    onEvent("button", "click", doSomething);


In the second example, notice that when we pass the function `doSomething` to the `onEvent` function we _don't_ include the parenthesis at the end. This is because we're actually passing the whole function as an object.

MARKDOWN
