name 'CSA U6L9-L7_pilot-2025'
title 'Check for Understanding'

wrong '`[5, 0, 2, 7, 2, 4, 0, 8]`'
wrong '`[5, 2, 7, 2, 4, 8, 0, 0]`'
wrong '`[0, 0, 2, 7, 2, 4, 8, 5]`'
right '`[5, 2, 7, 2, 4, 8]`'
wrong 'An `IndexOutOfBoundsException` will occur.'

allow_multiple_attempts true

teacher_markdown <<MARKDOWN
The method `remove_num()` removes all occurrences of the integer `0` from `nums`. When the integer `0` is removed from the `ArrayList`, the indices of all subsequent elements are shifted by one to fill the gap. This means that the original index `a` should not be incremented in the case that an element is removed, to avoid skipping over elements that were shifted down by one index.

In this particular case, the `while` loop starts with index `0`, and the first two elements of the `ArrayList` are `5` and `0`. The `if` statement checks if the element at index `0` is equal to `0`, which is `true`, so the element at index `0` is removed. The `ArrayList` now contains `[0, 2, 7, 2, 4, 0, 8]`, but the value of `a` is incremented to `1`.

The next element in the `ArrayList` is `2`, so the `if` statement does not execute and the loop continues.

The next element is `7`, which is not `0`, so the `if` statement does not execute and the loop continues.

The next element is `2`, which is not `0`, so the `if` statement does not execute and the loop continues.

The next element is `4`, which is not `0`, so the `if` statement does not execute and the loop continues.

The next element is `0`, which is equal to `0`, so the element at index `5` is removed. The `ArrayList` now contains `[0, 2, 7, 2, 4, 8]`, but the value of `a` is incremented to `6`, which is outside the bounds of the `ArrayList`, so the loop terminates.

The final `ArrayList` contains `[5, 2, 7, 2, 4, 8]`.
MARKDOWN

markdown <<MARKDOWN
Assume an `ArrayList` called `nums` has been initialized with the following `Integer` values: `[5, 0, 2, 7, 2, 4, 0, 8]`. What will `nums` contain as a result of executing the following method `remove_num()`?

```
private ArrayList<Integer> nums;

/*
 * Precondition: nums.size() > 0
 * Precondition: nums contains Integer objects
 */
public void remove_num() {
   int a = 0;
   Integer zero = new Integer(0);
   while (a < nums.size()) {
      if (nums.get(a).equals(zero)) {
         nums.remove(a);
      }

      a++;
   }
}
```
MARKDOWN