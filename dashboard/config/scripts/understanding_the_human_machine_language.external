name 'Understanding the Human Machine Language'
css 'unplugged'
markdown <<MARKDOWN
# Understanding the Human Machine Language

The main point of this set of lessons is to connect the acts of writing “code” and designing algorithms, and to take some steps towards programming with code. To do this we imagine trying to write instructions for a “Human Machine” to complete a tightly defined task with playing cards. We want to introduce the term algorithm and explore what designing an algorithm means in computer science (i.e. programming). We then want to take a few steps to build up to writing an algorithm with “code”.


## Why the Human Machine Language? 
<img src="https://images.code.org/8570fc3517a0ff0457261db304e5bed2-image-1479765017681.png" style="float:right; margin-left:10px; width:300px">
This language bears a strong resemblance to so-called <a href= “https://en.wikipedia.org/wiki/Low-level_programming_language” target=_blank>“low level” programming languages <i class="fa fa-external-link-square"/></a> - a sparse, primitive set of commands to directly control the physical/electronic operations of a computing machine. Other programming languages are built on top of the low level languages to provide more abstraction and functionality that combines low level operations into commonly used procedures. The most commonly known low level language is called <a href =”https://en.wikipedia.org/wiki/Assembly_language” target=_blank> Assembly Language <i class="fa fa-external-link-square"/></a> 


## Equity
The beginning of a programming unit in a computer science course can create a divide for your students; some students have been waiting all year for this moment, while others have been dreading it.  This is also the time when traditional notions of which students ‘get’ it may come out, and it is important to make sure that the community that has developed in the classroom is not lost.  This is an important goal of the Human Machine Language — while this language may resemble many low level languages, it most likely does not resemble languages that your students may have used in the past.  This forces students who think they know how to program to pay close attention to logic and algorithms because they cannot rely upon familiar structures.  They may even get frustrated and want to use commands that don’t exist in this language, but may exist in others.  Here, new and novice programmers will have an advantage over their peers because they will not be inhibited by their preconceived notions of programming.

The Human machine language thus does two things for students:

- It gives them an understanding of how languages are made and makes them consider how to create algorithms with a simple, low level language.
- It creates a common experience for all students to struggle with that will help them consider the structure of programs and how they can be used to solve problems.

Together, these objectives support the students in preparing for their first day of programming in App Lab, which starts in lesson 4.





MARKDOWN
