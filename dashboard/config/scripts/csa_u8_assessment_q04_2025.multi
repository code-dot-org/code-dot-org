name 'CSA U8 Assessment q04_2025'

wrong '`[8, 11, 12, 7, 21, 15, 1]`'
wrong '`[11, 8, 12, 7, 1, 15, 21]`'
right '`[12, 11, 8, 7, 21, 15, 1]`'
wrong '`[11, 8, 12, 7, 21, 15, 1]`'
wrong '`[7, 8, 11, 12, 21, 15, 1]`'

markdown <<MARKDOWN
Consider the following implementation of the insertion sort algorithm.

```
public static void insertionSort(ArrayList<Integer> nums) {

  for (int i = 1; i < nums.size(); i ++){
    int temp = nums.get(i);
    int index = i;
    
    while (index > 0 && temp > nums.get(index - 1)) {
      nums.set(index, nums.get(index-1));
      index --;
    }

    nums.set(index, temp);
  }
}
```

An `ArrayList` containing the values `[11, 8, 12, 7, 21, 15, 1]` is sorted using the above method. What is stored in the `ArrayList` after the `for` loop has executed twice?
MARKDOWN

allow_multiple_attempts true
teacher_markdown <<MARKDOWN
Let's step through the code:

1. The initial `ArrayList` is `[11, 8, 12, 7, 21, 15, 1]`.

2. The `for` loop iterates from `i = 1` to `i < nums.size()`, which means it will run for the indices `1` and `2`.

3. In the first iteration (`i = 1`):
   - The variable `temp` is assigned the value at index `1`, which is `8`.
   - The variable `index` is set to `1`.
   - The `while` loop condition is checked. Since `index > 0` and `temp` (`8`) is greater than the value at `index - 1` (`11`), the condition is satisfied.
   - The value at index `1` is set to the value at index `0`, resulting in the `ArrayList` to contain `[11, 11, 12, 7, 21, 15, 1]`.
   - The `index` is decremented to `0`.
   - The value at index `0` is set to `temp` (`8`), resulting in the `ArrayList` to contain `[8, 11, 12, 7, 21, 15, 1]`.

4. In the second iteration (`i = 2`):
   - The variable `temp` is assigned the value at index `2`, which is `12`.
   - The variable `index` is set to `2`.
   - The `while` loop condition is checked. Since `index > 0` and `temp` (`12`) is greater than the value at `index - 1` (`11`), the condition is satisfied.
   - The value at index `2` is set to the value at index `1`, resulting in the `ArrayList` to contain `[8, 11, 11, 7, 21, 15, 1]`.
   - The `index` is decremented to `1`.
   - The value at index `1` is set to `temp` (`12`), resulting in the `ArrayList` to contain `[8, 12, 11, 7, 21, 15, 1]`.

After the `for` loop has executed twice, the `ArrayList` contains `[12, 11, 8, 7, 21, 15, 1]`.
MARKDOWN
