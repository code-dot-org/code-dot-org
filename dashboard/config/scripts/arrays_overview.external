name 'Arrays Overview'
css 'unplugged'
markdown <<MARKDOWN
# Arrays Overview and How To Guide


In these lessons, arrays are going to be used to stores variables.  In the future (Lesson 15 and onward) an **array** is a data type that holds a list of items.  While the word 'list' is a generic term, and 'array' is a specific kind of list, we often use these words interchangeably.   All programming languages have many ways of constructing and processing list of information.  An 'array' in most languages is usually the most primitive kind of list structure.

>An array can be used like any other variable and gives us the ability to store information for use while the program is running. With an array we can keep track of lots of pieces of information all under one name. 

When creating an array we often add some initial items to the list. For example, `var numList = [2,4,8,16,32]`.  You can also store string in an array `var studentNames = ["Nancy", "Bill", "Marcus"]` Note that although this is common practice, it is not required to pass values into the array when we create it. We could just as easily create `var studentNames = [ ]` and add the names in later in our program.

The elements stored in an array are each assigned an `index`, or numeric value related the position of the item relative to the list. Indexes start at 0. In the example above, `Nancy` is stored at index 0 and `Bill` is at index 1.

<img src="https://images.code.org/b5a8a013306d4ec5aa1ec7286ee6f369-image-1446446698823.gif" width="450px" style="float:left; margin-right:15px">

If we want to **retrieve the value of an element** in the array, we just need to reference the index of the item. For example, if we wanted to print the word “Nancy” from the array, we could do this: `write(studentNames[0]);`

Let’s looks at an example in code. Imagine we’re back to flipping the coin from earlier.  We can use a two-element array in a clever way to make a custom message for heads or tails. This example is essentially just generating a 0 pr 1 randomly, and using that values as an index into the array.

>**Each individual item in a array can be used like a variable of that type.** We can **reassign the value of an element of an array** by referencing a specific index and giving that index a new value.

Looking back at the list of student names from earlier, `studentNames[0]=“Brook”;` would change the value of `studentNames[0]` from “Nancy” to “Brook”.

>We can also **add elements** to the array by using the `appendItem` function.  `appendItem` is a function added to App Lab because it is a function students will see on the AP exam.  There are actually many ways to add items to arrays in JavaScript, but we will use `appendItem` in this course.

`appendItem` adds a given element to the "end" of the array.  It takes two parameters: the array to append to, and the item to append.  This line of code will add "Caley" to the list of names: `appendItem(studentNames, "Caley")` After this operation `studentNames` will have 4 values in it: `["Nancy", "Bill", "Marcus", "Caley"] and *Caley* will be at index 3 - the last index.

## Using loops to process arrays

<img src="https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png" style="float:right; margin-left:30px">

**For Loop**: A *for loop* is typically used to execute a block of code some number of times.  It does this by doing 3 things:

 * Creates a counter variable to keep track of the number of times through the loop.
 * Defines a looping condition.
 * Defines how to change the looping variable after each iteration.

The most common setup is shown on the right.

The `for` loop repeats statements like a `while` loop, but adds an initialization and final expression step, like this:

`for (initialization; condition; final expression){`
<br>
`	code to execute`
    <br>
`}`

<img src="https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png"style="float:right; margin-left:30px">

**for** loops are a convenient way to wrap up into one statement these three things you need to do to make a repeat loop.  You can achieve the same thing with a while loop but the code gets spread out (as shown on the right).

>As we’ll see in this chunk, `for` loops are particularly useful for situations where we want to use a loop to visit, read, or update, every item in an array. This is the case because we can use the looping variable as an index into the array.

Arrays also carry around with them a `length` variable that holds the number of items currently in the array.  You access it like this: `myArray.length`

Combining for loops and arrays, you can write a loop in a few lines of code to visit every element of a list. Here is an example that will simply display all the values in an array:

![](https://images.code.org/930923a746004603ee9f68f8807c3e70-image-1447948267650.png)

The following links provide additional links and information about booleans.  Many of these links are also found in the curriculum, but are consolidated here for convenience.

**Stage 13:**

- <a href = “https://studio.code.org/s/csp5/stage/13/puzzle/2” target=_blank> Video - Introduction to Lists part 1 <i class="fa fa-external-link-square"/></a>
- <a href = “https://studio.code.org/s/csp5/stage/13/puzzle/5” target=_blank> Video - Introduction to Lists part 2 <i class="fa fa-external-link-square"/></a>
- <a href = “https://studio.code.org/s/csp5/stage/13/puzzle/8” target=_blank> Video - Introduction to Lists part 3 <i class="fa fa-external-link-square"/></a>
- <a href = “https://studio.code.org/s/csp5/stage/13/puzzle/16” target=_blank> Video - Introduction to Lists part 4 <i class="fa fa-external-link-square"/></a>

**Stage 15:**

- <a href = “https://studio.code.org/s/csp5/stage/15/puzzle/2” target=_blank> Video - Processing Lists with Loops <i class="fa fa-external-link-square"/></a>

MARKDOWN
