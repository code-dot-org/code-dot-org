name 'CSPPD3-u3 chunk 1 resources'
css 'unplugged'
markdown <<MARKDOWN
# Unit 3 Overview > Chunk 1: Introduction to Functions > Resources

Here are a few resources to help you get started with understanding these CS concepts. Please share any resources you find in the <a href=“http://forum.code.org/c/csp-unit3” target=_blank>forum!</a>

## Using and Making Simple Functions

### Vocabulary

- **Primitive Commands**: The building blocks of a programming language.
<img src="https://images.code.org/6003202c010f82eda217414edde5f2ae-image-1446478209533.26.38 AM.png" width=“150” style="float:right; margin-left:10px">
- **Functions:** A block of code that is chunked together and given a name so it can be used as many times as needed in the execution of a program. When you **define** a function you give a name to a set of actions you want the computer to perform. (see the example on the right)
<br><br>
When you **call** a function you are telling the computer to run (or execute) that set of actions. The function described above would be called like this: `square();`
<br><br>
A function definition can be provided anywhere in your code - in some ways the function definition lives independently of the code around it. You can call a function from anywhere, either before or after the function definition. *In this course, we will follow the convention of always putting function definitions at the bottom of our program, and the code for calling functions at the top of our program.*

- **Efficiency:** While there are different ways to measure efficiecy of a program, here we will usually determine it based on the number of lines of code.


### Lessons in Code Studio

- <a href="https://studio.code.org/s/cspunit3/stage/1/puzzle/1" target=_blank>Stage 01- The Need for Programming Languages</a>
- <a href="https://studio.code.org/s/cspunit3/stage/2/puzzle/1" target=_blank>Stage 02- Using Simple Commands</a>
- <a href="https://studio.code.org/s/cspunit3/stage/3/puzzle/1" target=_blank>Stage 03- Creating Functions</a>
- <a href="https://studio.code.org/s/cspunit3/stage/4/puzzle/1" target=_blank>Stage 04- Functions and Top-Down Design</a>

### External Resources

- <a href="https://en.wikipedia.org/wiki/Logo_(programming_language)" target=_blank>History of Turtle Programming- Wikipedia</a>
- <a href="http://www.cs.utah.edu/~germain/PPS/Topics/functions.html" target=_blank>What is a function? (read sections under 'functions' and 'why do we write functions')</a>
- <a href="https://youtu.be/i2KHYUhtOlM" target=_blank>Video: Turtle Programming (from the curriculum) </a>
<br>
- <a href="https://youtu.be/yPWQfa4CHbw" target=_blank>Video: Functions in App Lab (from the curriculum) </a>
<br>

## Using and Making Functions with Parameters

### Vocabulary

- **API:** The documentation for a programming language that details which commands are available and how they’re to be used.

<img src="https://images.code.org/658da1eda846fe9d21778f9402841d80-image-1446477914282.24.29 AM.png" width=“200” style="float:right; margin-left:10px">

- **Function with Parameters:** A block of code that accepts one or more inputs at the time it is called and uses those inputs in the body of the function to perform an action. The example on the right shows the function **declaration**— the function accepts an input parameter that defines the size of a side of a square, then draws the square.
<br><br>
Now, when you **call** a function with parameters you have to pass an input value for each of the parameters of the function. The function described above would be called like this: `square(50);` to draw a square with sides that are 50 units long. '50' could be replaced with any other number.
<br><br>
Just like functions without parameters, the order of the function declaration and calls do not matter.

### Lessons in Code Studio

- <a href="https://studio.code.org/s/cspunit3/stage/5/puzzle/1" target=_blank>Stage 05- APIS and using Functions with Parameters</a>
- <a href="https://studio.code.org/s/cspunit3/stage/6/puzzle/1" target=_blank>Stage 06- Creating Functions with Parameters</a>

### External Resources

- <a href="http://www.w3schools.com/js/js_function_parameters.asp" target=_blank>JavaScript Functions with parameters- W3Schools</a>
- <a href="https://youtu.be/e9qjXKaeDHg" target=_blank>Video: Functions with Parameters - (Code Studio video from other courses) </a> Note that this videos reference the block-only environment used by our Intro to Computer Science courses intended for younger students, but still describe the basic concept of a function with a parameter, which is shared across all programming languages.

## Simple Looping and Random Numbers

### Vocabulary

- **Repeat Loop:** A basic looping structure that repeats a chunk of code some set number of times (for example, `repeat(5){write(“let’s go team!”}` would print "let's go team!" 5 times)

- **Random:** A function, `Random(min, max)`, that returns a random number ranging from the first number (min) to the second number (max), including both numbers in the range. For example, you could use random to move the turtle forward some amount between 1 and 100 like this: `moveForward(randomNumber(1, 100));`

### Lessons in Code Studio

- <a href="https://studio.code.org/s/cspunit3/stage/7/puzzle/1" target=_blank>Stage 07- Looping and Random Numbers</a>
- <a href="https://studio.code.org/s/cspunit3/stage/8/puzzle/1" target=_blank>Stage 08- Practice PT: Design a Digital Scene</a>

### External Resources

- <a href="http://www.w3schools.com/jsref/jsref_random.asp" target=_blank>JavaScript Random function- W3Schools</a>
- <a href="http://fareedsiddiqui.expertscolumn.com/article/importance-loops-computer-programming-0" target=_blank>Why are loops useful in programming?</a>
MARKDOWN
