name 'CSA U3 Assessment q15_2024'

right '`6, 4, 2`'
wrong '`0, 0, 0, 0, 6, 4, 2`'
wrong '`6, 4, 2, 4, 0, 0, 2`'
wrong '`0, 6, 0, 4, 0, 0, 2`'
wrong '`6, 4, 2, 0, 0, 0, 0`'

markdown <<MARKDOWN
Consider the following code segment.

```
int[] numbers = {0, 6, 0, 4, 0, 0, 2};

int count = 0;

for (int index = 0; index < numbers.length; index++) {
  if (numbers[index] != 0) {
    numbers[count] = numbers[index];
    count++;
  }
}

int[] updated = new int[count];

for (int index = 0; index < count; index++) {
  updated[index] = numbers[index];
}
```

What will the 1D array `updated` contain after executing this code segment?
MARKDOWN

teacher_markdown <<MARKDOWN
The first `for` loop in this code segment traverses the elements in the 1D array `numbers`. The `if` statement checks if the value does not equal `0`. If this is `true`, then the value at `numbers[count]` is updated to the value at `numbers[index]` that is not `0` and `count` is increased by `1`. This means that all values in `numbers` that are not `0` are reassigned to the beginning of the 1D array. In this case, `numbers` would then contain `6, 4, 2, 4, 0, 0, 2`. Note that since there are three non-zero numbers(6, 4, 2) then indices 0-2 are replaced with those numbers. The rest of the array from indices 3-6 remains unaltered.

A new 1D array called `updated` is then created, and the second `for` loop repeats from `0` up to but not including the value of `count`. In this code segment, `count` is assigned the value `3` because there were three values that were not equal to `0`, so the `for` loop repeats three times. In the body of the `for` loop, the value at `numbers[count]` is assigned to the value at `updated[index]`. This means the first three values of `numbers` are stored in `updated`, so `updated` contains `6, 4, 2`.
MARKDOWN

allow_multiple_attempts true