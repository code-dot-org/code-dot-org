name 'CSA U3L6-L8_2023'
title 'Check for Understanding'

wrong 'The 1D array `myPets` cannot contain elements of different types.'
wrong 'A `Dog` object cannot be assigned to the `Pet` reference `petOne`.'
right 'A `Pet` object cannot be assigned to the `Dog` reference `petTwo`.'
wrong 'The object referenced by `petOne` cannot be added to `myPets` since `petOne` was instantiated by a call to the `Dog` constructor.'
wrong 'The object referenced by `petTwo` cannot be added to `myPets` since `petTwo` was declared to be of type `Dog`.'

markdown <<MARKDOWN
Consider the following class definitions.

```
public class Pet {
  private String name;

  public Pet(String name) {
    this.name = name;
  }
}

public class Dog extends Pet {
  public Dog(String name) {
    super(name);
  }
}
```

The following code segment appears in a class other than `Pet` or `Dog`.

```
Pet petOne = new Dog("Sparky");
Dog petTwo = new Pet("Fido");

Pet[] myPets = new Pet[2];

myPets[0] = petOne;
myPets[1] = petTwo;
```

Which of the following best explains why the code segment does not compile?
MARKDOWN

teacher_markdown <<MARKDOWN
**The 1D array `myPets` cannot contain elements of different types.**

This statement is false because the 1D array `myPets` is of type `Pet`. This means `myPets` can contain elements of `Pet` objects and objects of any `Pet` subclasses.

---

**A `Dog` object cannot be assigned to the `Pet` reference `petOne`.**

This statement is false. Since the reference variable `petOne` is of type `Pet`, it can be assigned objects of type `Pet` or of any `Pet` subclasses.

---

**A `Pet` object cannot be assigned to the `Dog` reference `petTwo`.**

This statement is true. Since the reference variable `petTwo` is of type `Dog`, it can only be assigned objects of type `Dog` or of any `Dog` subclasses.

---

**The object referenced by `petOne` cannot be added to `myPets` since `petOne` was instantiated by a call to the `Dog` constructor.**

This statement is false because the 1D array `myPets` is of type `Pet`. This means `myPets` can contain elements of `Pet` objects and objects of any `Pet` subclasses.

---

**The object referenced by `petTwo` cannot be added to `myPets` since `petTwo` was declared to be of type `Dog`.**

This statement is false because the 1D array `myPets` is of type `Pet`. This means `myPets` can contain elements of `Pet` objects and objects of any `Pet` subclasses.
MARKDOWN
