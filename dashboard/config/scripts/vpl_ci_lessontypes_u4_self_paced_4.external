name 'VPL-CI-LessonTypes-U4_self-paced-4'
title 'title'
description 'description here'

markdown <<MARKDOWN
# Unit Structure

<div style="background-color: #a6e3e8; border-radius: 40px; color: #000000; width: 95%; padding: 1px 20px 1px 20px;">

<p style="line-height: 1.5; margin-left: 10px; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; font-size: 18px; ">
The Design Process unit is divided into <strong>two chapters</strong>. Each chapter includes activities that provide an opportunity for students to practice new skills. If you are short on time, you may choose to complete only the first chapter of the unit.
</p></div>

## Chapters

###### Click on the arrows to expand each section.

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üìò Chapter 1: User Centered Design</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### <strong>Description:</strong> This chapter introduces the design process as a specific version of the problem solving process in which empathy for a user's needs is consistently integrated. Students learn strategies for identifying user needs and assessing how well different designs address them. In particular they learn how to develop a paper prototype, how to gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps.

* ##### How do designers identify the needs of their user?
* ##### How can we ensure that a user's needs are met by our designs?
* ##### What processes will best allow us to efficiently create, test, and iterate upon our designs?
</p></div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üìó Chapter 2: Multi-Page Websites</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### <strong>Description:</strong> This chapter is focused on a long running group project that allows students to apply all they've learned about User-Centered Design to develop an app prototype. Working in teams, students identify a social issue that they care about and design and prototype an app to address that issue. This is an opportunity for students to explore other roles in software development, such as product management, marketing, design, and testing.

* ##### How do teams effectively work together to develop software?
* ##### What roles beyond programming are necessary to design and develop software?
* ##### How do designers incorporate feedback into multiple iterations of a product?
</p></div>
</details>

## Lessons
##### Most lessons are designed for **45 minute class periods**, but can be modified for longer or shorter class periods. Some lessons, such as project lessons, take multiple days to complete. Suggested times are included in each lesson plan.

### Lesson components 

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üôã‚Äç‚ôÄÔ∏è Warm up</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>


##### Each lesson begins with a warm up, which serves as a highly approachable shared experience that highlights the need for the skills and understandings presented in the lesson. These should be kept short so that students can quickly move into the main activity of the lesson. Warm ups end with a big question that articulates the problem space students will be exploring during the lesson. This question sets the stage for the target learning.
</p></div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üíÉ Activity</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>


##### Students spend the majority of their time engaging in the lesson activity. Activities provide students with opportunities to explore new computing concepts. Exploration is essential for students to build the content knowledge they will need to understand and participate in computing activities. Lesson activities are scaffolded to provide students with just-in-time information to solve their problems as they build their computing knowledge and skills.
</p></div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üèÅ Wrap up</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>


##### Wrap ups end every lesson and provide students with opportunities to reflect on the skills and understandings presented in the lesson. Wrap ups include a review of any vocabulary introduced in the lesson, and return to the big question introduced in the warm up. Wrap ups are often journal prompts and short discussions that can be used as an exit ticket or short formative assessment.
</p></div>
</details>

### Lesson types

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üíª Programming lessons</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>

##### Programming lessons introduce new programming concepts and skills to students. Although students will spend a majority of their time on the computer during these lessons, programming lessons also include offline components. Students are expected to complete many of the activities in small groups or as a class. The teacher plays an active role facilitating opportunities for sense making and formative assessment as students engage in lesson content. 
</p></div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">‚úçüèΩ Non-programming lessons</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>


##### Non-programming lessons focus on process skills and non-programming computing concepts. These lessons are mostly offline, but some do include online components. Offline lessons typically include an activity guide that students will use throughout the lesson as a guide for their learning. Non-programming lessons present students with opportunities for collaboration and discussion in small groups as well as individual reflection.
</p></div>
</details>

<details style="background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;">
    <summary style="font-size: 1.5em; font-weight: bold;">üë©‚Äçüíª Project lessons</summary>
<div style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">
    <p>


##### ***Mini-projects*** are opportunities for students to apply what they have learned by creating something new in a more open-ended setting. Mini-projects appear throughout the unit as opportunities for students to practice open-ended application of a small set of new skills. These projects can be expanded or condensed depending on the class time available. 

##### ***Projects*** are multi-day open-ended lessons found at the end of each chapter or unit. Projects challenge students to create using skills developed throughout the unit. Projects often include opportunities for planning, creation, and reflection. 
</p></div>
</details>


MARKDOWN
