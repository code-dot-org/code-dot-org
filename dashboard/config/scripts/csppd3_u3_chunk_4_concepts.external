name 'CSPPD3-u3 chunk 4 concepts'
css 'unplugged'
markdown <<MARKDOWN
# Unit 3 Overview > Chunk 4: Introduction to Conditionals > Concepts

<img src="https://images.code.org/0db2fa9734b360e15d1844ee80f4001e-image-1446419997098.png" width="550" style="float:left; margin-right:30px">

## Content Overview

In the preceding chunks, students learned about functions, events, and controlling the computer’s memory with variables. The focus of this unit is **conditional statements**, which are used to control the program flow. Conditionals are used in programs to construct trees of possible scenarios and associated outcomes that are executed at runtime based on how a *conditional statement* evaluates.

This is a new paradigm for the programs we’re writing in this unit. In the first chunk of lessons, every line of code was executed, starting at the top and going to the bottom. In the second chunk of lessons the flow of the program was structured through events, and the outcomes were controlled at runtime based on the events that were triggered (mouse clicks, button presses, etc.). The code associated with each of these events would run *any time* the event occurred. Now, with conditionals, we have another way to control the program flow that merges the sequential execution we saw in chunk one with the multiple-possible-outcome structure we see with events.

Conditional logic is particularly useful for situations where we want to compare the current state of a variable or other element to some value and execute particular code depending on the state. For example, we might construct a tree of possible states and associated outcomes for the current weather if we were trying to determine what we need to leave the house in the morning. A few possible states of weather could be sunny, raining, or snowing, and the associated outcomes we want to plan for might be to wear sun glasses,  bring an umbrella, or wear a heavy coat. The more you work with conditionals, the more you’ll notice that we use conditional logic in real life all of the time!

Conditionals in their simplest form are just a structure to say IF this is true, THEN perform that action (if it is sunny outside, bring sunglasses). From the basic **if-statement** we build up to the **if/else statement** which says IF this is true, THEN perform that action, OTHERWISE perform a different action. We can then combine conditional statements together to implement more sophisticated circumstances for executing the code, including **chained conditionals** (using multiple if/else statements in sequence), **nested conditionals** (putting if/else statements inside other if/else branches, so the internal statement is only evaluated if the first condition is true), and **compound conditionals** (a conditional based on more than one statement evaluating to true).

### Conditionals VS Events

Notice that conditionals and events both serve to control the flow of the program, but they function differently when the program is run.

- Events are used when we want to monitor for a particular action ALL OF THE TIME
- Conditionals are only evaluated when they’re executed in the code. This means you have to actively check a conditional statement in order to evaluate it. 

Luckily you can write code that uses both events and conditionals!

<img src="https://images.code.org/53a46fef1ba05ece7e22a97ad23b52cd-image-1446469166375.gif" width="150" style="float:right; margin-left:30px">

## What it looks like

There are 5 lessons in this chunk, which build up to a culminating project where students build a “digital assistant” for the topic of their choice, which functions like siri or cortana to programmatically provide answers to questions that are stated in natural human language. For example, students might make a digital assistant that answers questions about movies or music.

This project leverages conditionals because students will need to be able to parse the human language that the questions are asked in. This is done here by looking for keywords, and giving answers based on the keywords present in the question.

### Intelligent Text Processing

This one-lesson introduction to the chunk serves provide background about natural language processing (NLP) and give students time to explore tools that use NLP and learn more about how they work. 

>**CS Concepts:**

>- **Natural Language Processor (NLP) algorithms** are used to parse things humans say and write in order to make that information usable in a program. We use tools built on NLP algorithms when we use voice-activated digital assistants like Siri and Cortana.
- NLP algorithms use **keywords** as markers to determine what the user is looking for

### Introduction to Conditionals

In these 4 lessons students move through making small programs that use conditionals. After several skill-building lessons to become comfortable with chained, nested, and compound conditionals, students use each of these types of conditionals to create a digital assistant that can answer questions about the topic of their choice.

>**CS Concepts:**

>- **Conditional statements** (or if-statements) can be mapped out using flow charts
- Different **boolean operators** can be used in a program to implement decision logic
- Multiple conditionals can be used together to carry out decision logic. Two methods of mapping out conditional branches are **chained conditionals** and **nested conditionals**  
- If a function returns a boolean value (true or false, 0 or 1), that return value can be used in place of a boolean expression to control the decision logic in a conditional
- When we evaluate more than one condition in an if-statement (for example: if(itsRaining AND itsCold)) it’s called a **compound conditional**
MARKDOWN
