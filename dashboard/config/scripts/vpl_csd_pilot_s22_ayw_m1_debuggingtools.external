name 'VPL-CSD-PILOT-S22-AYW-M1-DebuggingTools'
title 'title'
description 'description here'

markdown <<MARKDOWN
# Debugging Tools

##### During the synchronous portion of this module, you were introduced to debugging tools in Web Lab and Game Lab. In this section, you'll learn more about these tools and practice using them.

## Tools Overview

##### Expand each drop-down to learn more about debugging tools. Click on each image to enlarge.

### **Web Lab**

<details>
<summary><strong>Inspector Tool</strong></summary>

<a href="https://images.code.org/89449893b2da5f925f8840a481d1d6ab-image-1660265254498.47.30 PM.png" target="blank"><img src="https://images.code.org/89449893b2da5f925f8840a481d1d6ab-image-1660265254498.47.30 PM.png" alt="Screenshot of Web Lab with a red circle around the Inspector Tool button." width="350px" style="border-radius:10px; float:left; margin: 0 0 10px 10px;  padding-right: 30px;"></a>

The Inspector Tool is introduced to students early in the Web Development unit, during <a href="https://studio.code.org/s/csd2-2022/lessons/2" target="blank">Lesson 2: Intro to HTML</a>.

The inspector tool helps students to link parts of the web page with code that created them. It highlights the code corresponding to a web page element when hovered over in the Preview Area. The Inspector Tool is not automatically toggled on for students.

###### Click image to enlarge.

</details>

<div style="clear:both"/>

### **Game Lab & App Lab**

<details><summary><strong>Watch Panel</strong></summary>

<a href="https://images.code.org/3a9bf5f2a79f68c1bfd64a8bd7775e18-image-1660268066053.34.05 PM.png" target="blank"><img src="https://images.code.org/3a9bf5f2a79f68c1bfd64a8bd7775e18-image-1660268066053.34.05 PM.png" alt="Screenshot of Game Lab with a red rectangle around the Watch Panel." width="350px" style="border-radius:10px; float:left; margin: 0 0 10px 10px;  padding-right: 30px;"></a>

Entering a name of a variable in Variable / Property field and pressing the blue plus (+) button adds a watcher to that variable. When the program is run, this watcher will reflect the current value for that variable. 

###### Click image to enlarge.

</details>

<div style="clear:both"/>

<details><summary><strong>Debug Console</strong></summary>

<a href="https://images.code.org/4d87951e3615e8fc119817c00f2eca9a-image-1660268081918.34.09 PM.png" target="blank"><img src="https://images.code.org/4d87951e3615e8fc119817c00f2eca9a-image-1660268081918.34.09 PM.png" alt="Screenshot of Game Lab with a red rectangle around the Debug Console." width="350px" style="border-radius:10px; float:left; margin: 0 0 10px 10px;  padding-right: 30px;"></a>

Shows warnings, errors, and other messages generated by the program as it is running. 

###### Click image to enlarge.

</details>

<div style="clear:both"/>

<details><summary><strong>Execution Speed</strong></summary>

<a href="https://images.code.org/2fac88f4ede6670429abfc6947519cad-image-1660268360618.38.14 PM.png" target="blank"><img src="https://images.code.org/2fac88f4ede6670429abfc6947519cad-image-1660268360618.38.14 PM.png" alt="Image of App Lab with a red rectangle around the execution speed slider." width="350px" style="float:left; margin: 0 0 10px 10px;  padding-right: 30px;"></a>

Controls how quickly or slowly the program will run, allowing you to watch each line of code or block execute and the effects it had in the program. 

###### Click image to enlarge.

</details>

<div style="clear:both"/>

<details><summary><strong>Debug Commands</strong></summary>

<a href="https://images.code.org/c1a428908f1037a6ae24d58fce6a3427-image-1660268331277.38.22 PM.png" target="blank"><img src="https://images.code.org/c1a428908f1037a6ae24d58fce6a3427-image-1660268331277.38.22 PM.png" alt="Image of App Lab with a red rectangle around the debug commands." width="350px" style="border-radius:10px; float:left; margin: 0 0 10px 10px;  padding-right: 30px;"></a>

Allow the user to control the execution of code in a step-by-step manner, to help debug issues that might be too difficult to figure out just by running the program.

* **Break/Continue**: This button stops and starts the program. When the button says “Break”, clicking it will stop the program wherever it is at that point. When it says “Continue”, clicking it will resume normal execution.
* **Step Over**: Run the line of code the program has paused at, which will be highlighted in yellow.
* **Step in**: If the current line the program is paused at contains a function, jump to the first line of code for that function.
* **Step Out**: If the current line of the program is paused at is within a function, execute the rest of the function and pause at the line of code just after where the function was called.

###### Click image to enlarge.

</details>

<div style="clear:both"/>

##### In the next level, you'll get a chance to use debugging tools in student coding challenges.
MARKDOWN
