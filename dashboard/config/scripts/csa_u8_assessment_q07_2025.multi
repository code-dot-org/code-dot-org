name 'CSA U8 Assessment q07_2025'

right '`k = j - 1; k >= 0; k--`'
wrong '`k = j - 1; k > 0; k--`'
wrong '`k = 1; k < arr1.length; k++`'
wrong '`k = 1; k > arr1.length; k++`'
wrong '`k = 0; k <= arr1.length; k++`'

markdown <<MARKDOWN
The following incomplete method is intended to sort its array parameter `arr` in increasing order.

```
// Postcondition: arr is sorted in increasing order
public static void sortArray(int[] arr1) {
  int j, k;
 
  for (j = arr1.length - 1; j > 0; j--) {
    int pos = j;
 
    for ( /* missing code */ ) {
      if (arr1[k] > arr[pos]) {
        pos = k;
      }
    }
 
    swap(arr1, j, pos);
  }
}
```
 
Assume that `swap(arr1, j, pos)` exchanges the values of `arr1[j]` and `arr1[pos]`. Which of the following could be used to replace `/* missing code */` so that executing the code segment sorts the values in array `arr1`?
MARKDOWN

allow_multiple_attempts true
teacher_markdown <<MARKDOWN
Let'slook at why this is the correct answer:

1. The outer loop iterates over the array in reverse order, starting from the last element (`j = arr1.length - 1`) and going until the second element (`j > 0`). This allows the largest element to move towards its correct position in each iteration.

2. Inside the outer loop, a variable `pos` is initialized to `j` at the beginning of each iteration. This variable keeps track of the position of the largest element found so far.

3. The missing code should determine the range and direction of the inner loop. Since we want to compare the elements from `j - 1` down to `0` in each iteration, we need to set `k` initially to `j - 1` and decrement `k` by 1 in each iteration until `k` is greater than or equal to `0` (`k >= 0`). This ensures that we compare the current element at `pos` with the elements before it.

4. Inside the inner loop, we compare `arr1[k]` with `arr[pos]`, where `pos` is the current position of the largest element found. If `arr1[k]` is greater than `arr[pos]`, we update `pos` to `k` because we have found a larger element that should be swapped with the current largest element.

5. After the inner loop, the `swap` function is called to exchange the values of `arr1[j]` and `arr1[pos]`, placing the largest element in its correct position.

6. The outer loop continues until all elements are sorted, iteratively placing the largest element in the correct position at the end of the array in each iteration.

By using the replacement `k = j - 1; k >= 0; k--` in the missing code, the code segment will sort the values in array `arr1` in increasing order.
MARKDOWN
