name 'CSA U4 Assessment q10_2024'

wrong '`smallest` always returns the value of `z`.'
wrong '`smallest` may not work correctly when `z` has the smallest value.'
right '`smallest` may not work correctly when `x` and `y` have equal values.'
wrong '`smallest` may not work correctly when `x` and `z` have equal values.'
wrong '`smallest` may not work correctly when `y` and `z` have equal values.'

markdown <<MARKDOWN
Consider the following method, `smallest`, which is intended to return the smallest of three integers. It does not always work as intended.

```
public static int smallest(int x, int y, int z) {
  if ((x < y) && (x < z)) {
    return x;
  }
  else if ((y < x) && (y < z)) {
    return y;
  }
  else {
    return z;
  }
}
```

Which of the following identifies the condition in which `smallest` may not work as intended?
MARKDOWN

teacher_markdown <<MARKDOWN
**`smallest` always returns the value of `z`**

This is **false**.

If we use values like

* `x = 1`

* `y = 2`

* `z = 3`

the condition for the `if` statement would evaluate to `true`. The value assigned to `x` would be returned, which is the smallest number. The method would work as intended with these values.

---

**`smallest` may not work correctly when `z` has the smallest value**

This is **false**.

If we use values like

* `x = 3`

* `y = 2`

* `z = 1`

the conditions for the `if` and `else if` statements would evaluate to `false`. The value assigned to `z` would be returned, which is the smallest number. The method would work as intended with these values.

---

**`smallest` may not work correctly when `x` and `y` have equal values.**

This is **true**.

If we use values like

* `x = 2`

* `y = 2`

* `z = 3`

the conditions for the `if` and `else if` statements would evaluate to `false`. The value assigned to `z` would be returned, which is **not** the smallest number. The method would not work as intended with these values.

---

**`smallest` may not work correctly when `x` and `z` have equal values.**

This is **false**.

If we use values like

* `x = 2`

* `y = 3`

* `z = 2`

the conditions for the `if` and `else if` statements would evaluate to `false`. The value assigned to `z` would be returned, which is the smallest number. The method would work as intended with these values.

---

**`smallest` may not work correctly when `y` and `z` have equal values.**

This is **false**.

If we use values like

* `x = 3`

* `y = 2`

* `z = 2`

the conditions for the `if` and `else if` statements would evaluate to `false`. The value assigned to `z` would be returned, which is the smallest number. The method would work as intended with these values.
MARKDOWN

allow_multiple_attempts true