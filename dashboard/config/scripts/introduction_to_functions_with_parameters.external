name 'Introduction to Functions with Parameters'
css 'unplugged'
markdown <<MARKDOWN
# Introduction to Functions with Parameters


<img src="https://images.code.org/70606685dd8b67fb3e0a2eba50b4aeb6-image-1479790383366.gif" style="float:right; margin-left:30px; width:200px">
Writing functions with parameters is a simple idea, but it traditionally has some devilish details for new programmers. The basic idea is that you often want to write a function that takes some input and performs some action based on that input. For example, the turtle function moveForward is much more useful when you can specify how much to move forward (e.g., `moveForward(100)`), rather than just a fixed amount every time.  

## Functions with Parameters in the Curriculum 
Students will practice *using* parameterized functions in <a href = “https://curriculum.code.org/csp/unit3/7/” target=_blank> lesson 7 </a>.  This lesson supports students in discovering how parameterized functions work, and situations in which they may be useful.  After considering those situations, in <a href = “https://curriculum.code.org/csp/unit3/8/” target=_blank> lesson 8 </a>students will begin to identify portions of their own programs that could be turned in to parameterized function to improve efficiency and human readability.


## When to Use Functions with Parameters
It’s very common to encounter situations where as a programmer you realize that you basically need a duplicate of some code you’ve already got, but you just want to change some numbers. That’s a good time to write a function with a parameter; the parameter just acts as a placeholder for some value that you plug in at the time you call the function. Just like it’s considered good practice to give descriptive names to your functions, the same is true for the names of the parameters themselves. For example: `drawSquare(sideLength)` is better than `drawSquare(stuff)`.

MARKDOWN
