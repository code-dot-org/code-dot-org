name 'Conditionals Overview'
css 'unplugged'
markdown <<MARKDOWN

# Conditionals Overview and How To Guide

Conditional logic is particularly useful for situations where we want to compare the current state of a variable or other element to some value and execute particular code depending on the state. For example, we might construct a tree of possible states and associated outcomes for the current weather if we were trying to determine what we need to leave the house in the morning. A few possible states of weather could be sunny, raining, or snowing, and the associated outcomes we want to plan for might be to wear sun glasses, bring an umbrella, or wear a heavy coat. The more you work with conditionals, the more you'll notice that we use conditional logic in real life all of the time!
## Events Vs. Conditionals
While conditionals and events can both determine what code is executed and what is not, it is important to recognize that they are used in very different ways.  In everyday conversation, it is common to interchange the words “when” and “if,” as in “If the user presses the button, execute this function.” The English language is tricky. We often say “if” the button is clicked when really we mean “when” a button is clicked. “When” relates to This can cause confusion because “if” has a well-defined meaning in programming.
How are conditionals (if statements) different from events?
Here is one way to think about it:
Events are set up by a programmer, but triggered by the computer at any moment in time.  Events are used when we want to monitor for a particular action ALL OF THE TIME
If statements are a way a programmer can have her code make a decision during the normal flow of execution to do one thing or another. Conditionals are only evaluated when they're executed in the code. This means you have to actively check a conditional statement in order to evaluate it.

## How If-statements work

<img src="https://images.code.org/361556bbff61bf91e2c737f745582dff-image-1479418505481.png" style="float: right; margin-left: 20px; margin-right: 20px">

`if` statements are the lines of code you need to change the flow while you're program is running. You can write code that *makes a decision that determines which lines of code should be run next.*

At the right is a diagram showing the elements of a basic `if` statement in JavaScript.
<br>
<br>
<br>

There are two basic parts to an if-statement.

<br>
	1. A condition to be evaluated (A Boolean expression that evaluates to **true** or **false**)
	2. Code that should run *if* the expression was true - enclosed in curly braces

## A worked example
<img src="https://images.code.org/ca716e009ddb8dc397eb5a651a1ac2d7-image-1479420772852.png" style="display: block; margin: auto; float: right">
<span style="font-weight: bold; color: #00adbc; font-size: 150%;">1.</span>
Program executes line by line as you would expect. It displays a message, then prompts the user to enter a number.  Whatever the user types will be stored in the variable `age` and then proceeds to the next line...
</p>
<p><span style="font-weight: bold; color: #00adbc; font-size: 150%;">2.</span>
When the `if` statement is encountered the <em>first</em> thing it does is evaluate the condition in the parentheses. It checks to see if, at this point in the program, the value in a variable `age` is greater than or equal to 18.  If it is then we say the expression "<strong>returns true</strong>".  Otherwise it returns false.
</p>

<p><span style="font-weight: bold; color: #00adbc; font-size: 150%;">3.</span>
These console.log statements will <em>only</em> execute if the expression was true. The curly braces surround all of the code that should be executed if, and only if, the expression was true.  Otherwise, the entire section of code encapsulated in the if statement is <em>skipped</em>.
</p>

<p><span style="font-weight: bold; color: #00adbc; font-size: 150%;">4.</span>
Execution picks up here, on the first line after the closing curly brace of the if-statement.  This line will <em>always</em> execute, but notice that if the user entered an age less than 18, the entire if statement would be skipped, and it would just say "Thanks for verifying".


<img src=”https://images.code.org/31c05927767cf9ec175c3fab5c658404-image-1446430205650.09.17.png”>

The following links provide additional links and information about booleans.  Many of these links are also found in the curriculum, but are consolidated here for convenience.

**Stage 8**

- <a href = “https://levelbuilder-studio.code.org/s/csp5/stage/8/puzzle/6” target=_blank> Understanding Program Flow <i class="fa fa-external-link-square"/></a>
- <a href = “https://levelbuilder-studio.code.org/s/csp5/stage/8/puzzle/11” target=_blank> How If-Else Statements Work <i class="fa fa-external-link-square"/></a>
- <a href = “https://levelbuilder-studio.code.org/s/csp5/stage/8/puzzle/5” target=_blank> Video: Introduction to Conditionals (part a)<i class="fa fa-external-link-square"/></a>
- <a href = “https://levelbuilder-studio.code.org/s/csp5/stage/8/puzzle/10” target=_blank> Video: Introduction to Conditionals (part b)<i class="fa fa-external-link-square"/></a>

**Stage 9**

- <a href = “https://studio.code.org/s/csp5/stage/9/puzzle/3” target=_blank> How if-else-if Works (part b)<i class="fa fa-external-link-square"/></a>

MARKDOWN
