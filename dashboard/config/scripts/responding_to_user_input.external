name 'Responding to User Input'
markdown <<MARKDOWN
# Responding to User Input

Design Mode makes it really easy to lay out the User Interface for your app, but we'll need to dive into Code Mode to make it actually respond to users.

In Game Lab the Draw loop just constantly ran code, using conditionals to check for interactions from the user. App Lab, on the other hand, waits to respond to certain **events** that occur in a program. It's App Lab's way of saying "Hey! something just happened!". This means that there doesn't need to be any code running when you aren't directly interacting with an app, and your code can respond to each of these events as they happen.

Collectively, the coding tasks involved in making your app respond to events by triggering functions are called **Event Handling**.  

In App Lab all event handling starts by adding a special block of code called `onEvent`.  Here is how to do it:

<br><br>

<div style="column-count: 4; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 4; width: 100%">

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
Switch into Code Mode</p>

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>
Drag an <code>onEvent</code> block from the toolbox into the workspace.</p>

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">3.</span>
Use the pulldown menu to select the <em>ID</em> of the UI element you want to setup to respond to some event. The IDs of all UI elements added in design mode will be listed here.</p>
<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">4.</span>
Use the pulldown menu to select the <em>type</em> of event you want to respond to. (Just use "click" for now).</p>

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">5.</span>
Add code inside the function that you want to run <em>when</em> the user triggers the event.  The function will run once every time the user triggers the specific event.</p>

</div>

![](https://images.code.org/9b506faaaadf61338dc738a4eafb66b2-image-1476740205599.png)

### Changing Screens with a "Click"

It's important to understand in Event-Driven programming that:

* **Users trigger events** - Events occur when users click a button, tap the screen, move the mouse, type a key on the keyboard, etc.
* **Events trigger code** - When an event occurs or "fires" it can be used to trigger a particular javascript function.

App Lab's `onEvent` block is a type of event-handling function called an **Event Listener**. It wraps all of the setup up you need to do event handling into one command that has several parts. Here is an example with everything labeled:

<img src="//curriculum.code.org/images/applab/onEvent_diagram.png" style="display: block; margin: 20px auto">

<div style="column-count: 3; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%">

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
Code to execute when callback function is triggered when the user clicks <em>button1</em>.  In this case, simply move the turtle forward 25 pixels. Event handling code will typically be more than one line. This is just a simple example to start.</p>

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>
Notice that this function, unlike others weâ€™ve seen, does not have a name. It is also called a <em>callback function</em> which is an odd term. A callback function is only different from a normal function in that you don't call it directly from your code. Instead a callback function is <strong>called by the system</strong> at the time the specified event occurs. Callback functions are a common pattern in a lot of event-driven programming.</p>
</div>


### You'll try this next!

MARKDOWN

teacher_markdown <<MARKDOWN
#### Just the Facts

There's a lot to consume here and many of the details about how events work in App Lab are not totally necessary to understand for our needs in this unit. If students are struggling with how programming works in App Lab, focus on these essentials:

* There is no `draw` loop that runs forever
* The `onEvent()` block specifies:
	* an element ID
    * an event (such as "click" or "mouseover")
    * code that should be run when the event occurs (this code is technically an anonymous callback function, represented by the green block)
* Code inside `onEvent()` blocks runs any time the specified event occurs

#### Compared to Game Lab

In Game Lab, we might use the following code to check if a sprite named "button" was clicked and do something about it:

    function draw() {
    	if (mousePressedOver(button)) {
       		// Do something
       	}
    }


In App Lab, given a button with the ID "button", we could write the following code to achieve the same goal:


    onEvent("button", "click", function () {
    	// Do something
    });

In the App Lab example, the function is just another argument passed to the onEvent function, it just so happens that the argument must be a function itself. We could also define the function separately and write this same program as follows:

    function doSomething() {
    	// Do something
    }
    
    onEvent("button", "click", doSomething);


In the second example, notice that when we pass the function `doSomething` to the `onEvent` function we _don't_ include the parenthesis at the end. This is because we're actually passing the whole function as an object.
MARKDOWN
