name 'CSA U6 Assessment q10_2024'

wrong '`25`'
right '`35`'
wrong 'Nothing. The code segment will not compile because `addTen` cannot accept an `Integer` parameter.'
wrong 'Nothing. The code segment will not compile because the value returned by `addTen` cannot be assigned to `newNumber`.'
wrong 'Nothing. The code segment will not compile because the `int` variable `newNumber` cannot be assigned to the `Integer` variable `result`.'

markdown <<MARKDOWN
Consider the following method.

```
public int addTen(int n) {
   return n + 10;
}
```

The following code segment appears in a method in the same class as `addTen` method.

```
Integer aNumber = 25;
int newNumber = addTen(aNumber);
Integer result = newNumber;
System.out.print(result);
```

What, if anything, is printed as a result of executing the code segment?
MARKDOWN

allow_multiple_attempts true
teacher_markdown <<MARKDOWN
The `Integer` object `aNumber` is declared and assigned the value `25`.

The `int` variable `newNumber` is declared and assigned the result of calling the `addTen` method with `aNumber` as the argument.

The `addTen` method takes an `int` parameter `n` and returns `n + 10`. In this case, `addTen(aNumber)` is equivalent to `addTen(aNumber.intValue())`.

* Since `aNumber` is an `Integer` object, its `intValue()` method is called to retrieve its primitive `int` value, which is `25`.

* Therefore, `addTen(aNumber)` is equivalent to `addTen(25)`.

The `addTen` method adds 10 to the provided `int` value and returns the result, which is `35`.

The `int` value `35` is assigned to the `newNumber` variable.

The `Integer` object `result` is declared and assigned the value of `newNumber`.

* Since `newNumber` is an `int`, autoboxing occurs, converting the primitive `int` to its corresponding `Integer` object.

* Therefore, `result` is assigned the `Integer` object with the value `35`.
MARKDOWN
