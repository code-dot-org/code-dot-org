name 'CSPPD3-u3 chunk 3 concepts'
css 'unplugged'
markdown <<MARKDOWN
# Unit 3 Overview > Chunk 3: Introduction to Variables and Strings > Concepts

<img src="https://images.code.org/bc6a9eaac1db12b04e71f1fc2fa3e2ab-image-1446414947705.png" width="550" style="float:right; margin-left:30px">

## Content Overview

In the previous two chunks, students explored functions and event-driven programming. The third chunk picks up after students have created their own games that respond to the mouse, and introduces the concept of **variables** in the form a score tracker in a game. 

Variables are one way we control the computer’s memory in a program. They can store different types of data, including numbers (which is what we’ll look at in these early lessons).  In fact, we can do more than just store numbers for later use - we can actually do calculations and use the value stored in a variable to help make decisions!

By introducing variables into an app, we can begin to keep track of how many times a particular action occurs. For example, we could keep track of how many times a button is clicked by setting up a counter variable and increasing the value by one each time the button event handler is run. Students learn here that the value of a variable can change as the game is played, and you can even perform different actions based on the value of the variable. In this lesson we use a **very simple if-statement** to check to see if a particular score threshold has been reached to end the game (for example: you might win the game after accruing 25 points).

Once students have some experience with variables as numbers, they learn about **Strings**, which are another data type we use often in programming. Students focus on collecting string input from the user, storing that input in a variable, and combining (or concatenating) the different strings into one string. The use of concatenation gives students the ability to write programs that combine the user input with pre-written strings that are already defined in the program (for example: the program might ask the user to input a name, then customize messages with the user’s name.)

## What it looks like

<img src="https://images.code.org/177fb6b67dc1a09d0e30a6f6c800b0b3-image-1446470853676.gif" width=“175px” style="float:left; margin-right:30px">

In this chunk of lessons students work on two projects— the first one helps introduce variables in a way that’s based on the popular genre of apps generally called “clicker games”. Clicker games are a genre where the user clicks some item on the screen and gets points for each time they successfully click the the item. Sometimes the player loses points or lives if they don’t click the right thing on the screen. In this project, students will create an app with 4 screens (welcome, main game, win screen, lose screen), they will keep track of how many times the item is successfully clicked (these are the user’s points), and how many times the user clicks the wrong thing (this action costs lives). Check out this behavior in the demo app on the left.

<img src="https://images.code.org/c0906418ae1dfacbf550c3b901fb794e-image-1446471147148.gif" width=“175px” style="float:right; margin-left:30px">

The second App students build in this chunk is focused on teaching how to use strings, which is another type of variable that can be implemented in JavaScript programs. This project is based on Mad Libs, which prompts users to input a word that is a specific part of speech, and puts the users' input into a pre-written statement to make a silly phrase. In this project students learn how to concatenate, or join together, two strings. Check out a demo app on the right.


### Introduction to Variables

In these two lessons, students learn how to use variables to control the computer’s memory and implement a simple if-statement to control the program flow based on the value of the variables. **Note that students learn about conditional statements in much more detail in the next chunk of lessons, and we’re looking here at conditionals as a way to talk about the differences between assigning a value to a variable and checking to see if a variable currently contains a particular value.** This is the difference between the `=` operator and the `==` operator. The key pieces here are understanding that when a variable is assigned a value, we say the the variables GETS the value and we use the = operator (for example: `x = 5;` assigns the value of 5 to the variable x). When we want to check to see if the current value of a variable is some particular value, we use the == operator (for example: `x == 10;` is a boolean expression that will evaluate to true if x is currently 10, and otherwise will evaluate to false).

>**CS Concepts:** What are variables and how are they used?

>- **Variables** can be used in a program to store information like numeric values 
- Variables can be used to store the value returned by a function (for example: randomNumber, promptNum), values inputted by the user, specific values set manually in the code (for example: x = 5), or the result of an operation carried out in the program (for example x = 5+7) 
- The value stored in a variable can change, or be **reassigned**, as the program runs 
- The data stored in a variable is available in different parts of the program depending on where the variable is declared (this is called **scope**)
- In programming a variable is assigned a value using the “**=**“ operator
- In programming we evaluate an equality using the “**==**“ operator 
- Simple if-statements (or **conditionals**) can be used to make your program behave differently given different conditions

### User Interaction and Data Types

In this lesson students develop a program that collects string input from the user and drops that input into a Mad Libs-style game. The focus of this lesson is to teach how to store string values for later use in a program, and how to concatenate strings.

>**CS Concepts:** What are strings and how are they used?

>- **Strings** are a data type made up of a sequence of ASCII characters
- Variables can be assigned strings
- Strings can be **manipulated** in a program to generate **dynamic output**
MARKDOWN
