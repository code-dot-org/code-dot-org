name 'How If-Else Statements Work'
title 'title'
css 'unplugged'
description 'description here'
href 'path/to/html/in/asset/folder'
markdown <<MARKDOWN
## How If-Else Statements work

<img src="https://images.code.org/73eb353de3b62582617e66bfcf4208a7-image-1479490636331.png" style="float: right">

With an *if-else* statement you are giving an **either-or** command: 

**either** the lines of code inside the *if* will execute **or** the lines inside the *else* will execute. Those are the options.

You saw in the video how to add an *else* clause to an if-statement -- hit the little `+` symbol on the tail of the *if* statement.

Inside the curly braces for the *else* clause you put lines of code that you want to run if the Boolean condition from the *if* statement is *false*.

Some important notes about the else clause:

* The `else` must come *immediately* after the closing curly brace of an *if* statement
* The `else` also has its own set of opening and closing curly braces to encapsulate lines of code

<br><br>

<img src="https://images.code.org/b7711c7851e5cc9bd08fa53500d692ce-image-1479495721089.png" style="float: right; width: 275px">

Considering our flow chart from before, until now we haven't had a way to make the program do something different if the condition was *false*.  With an `if-else` statement we do. 

We can now write a program that "branches" at a particular point, running one of two possible sections of code.

<div style="clear: both">&nbsp;</div>

## A Worked Example

<div style="clear: both">&nbsp;</div>

<img src="https://images.code.org/2e05fc16d828eda2cc4ef5db036d635a-image-1479496055965.png" style="float: right;">

<span style="color: #00adbc; font-size: 150%">1.</span>
Lines of code execute sequentially as usual. Prompt the user to enter their age.

<span style="color: #00adbc; font-size: 150%">2.</span>
The <code>if</code> statement and Boolean expression are also the same as before. The expression evaluates to either <em>true</em> or <em>false.</em>

<span style="color: #00adbc; font-size: 150%">3.</span> With an <code>if-else</code> statement you are guaranteeing that exactly one of these two sections of code <strong>will</strong> execute.  If the condition is <em>true</em> (age is 18 or greater) then the lines of code inside the if-statement's curly braces are executed. If the condition is <em>false</em> it jumps to the else clause and executes any lines of code it finds between the else clause's curly braces.

<span style="color: #00adbc; font-size: 150%">4.</span> Finally the program picks up normal execution directly after the <code>if-else</code> block. At this point in the program, we know that <em>either</em> the code in the if-block <em>or</em> the else block has executed.

## Optional: What if you wanted to type the code instead of using blocks?
<img src="https://images.code.org/d873962609e99f821249fde2007ca1bb-image-1479494721725.gif" style="float: right; margin-left: 10px">

You can always type any of the code we compose in blocks.  Here is an animation showing a programmer adding an `else` clause to an if-statement. Notice that you can freely go back and forth between blocks and text. With text you also have a bit more leeway with formating.  

**In JavaScript, spaces and line breaks are the treated the same - 1 space is the same as 2 or 10 or 20**.  

There are certain stylistic conventions that programmers can get in heated arguments about, but there actually are no rules about style that will make your code run any differently.  JavaScript looks for keywords, parentheses, curly braces and so on, but ignores extra spaces.

You usually use white space to make your code more readable.  

Here are some examples of the exact same program, but formatted differently.  They all work and run the same.

<img src="https://images.code.org/541d98fcb419eedb0920603509a63719-image-1479495748314.png" style="float: left; margin-right: 20px">
<br><br>
<span style="color: #00adbc; font-size: 150%">1.</span>
This is the format that is used by the block-based version of code in app lab.  It's trying to save on space because the blocks take up a lot of space on their own.

<div style="clear: both">&nbsp;</div>

<img src="https://images.code.org/dae61cab9a0c71fa0d9b6e819873a2b8-image-1479495762083.png" style="float: left; margin-right: 20px">
<br><br>
<span style="color: #00adbc; font-size: 150%">2.</span>
Here is the formatting that's similar to the *AP* pseudocode with `if`, `else`, and all of the curly braces, each on their own line. This is a perfectly valid way to format code as well.

<div style="clear: both">&nbsp;</div>

<img src="https://images.code.org/8ba7bfba9d18534f07f2c83801817cdf-image-1479495773146.png" style="float: left; margin-right: 20px">
<br><br>
<span style="color: #00adbc; font-size: 150%">3.</span>
Here, the programmer used line breaks to add some white space for readability. People sometimes use blank lines to separate portions of a program so that lines of code that are visually clumped together are related to each other in some way.

<div style="clear: both">&nbsp;</div>

MARKDOWN
