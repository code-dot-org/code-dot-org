name '3.4 - 3.6 Lesson Connections'
css 'unplugged'

markdown <<MARKDOWN
# Unit 3 Lessons 4 - 6 Connections


In these lesson, students are introduced to the App Lab programming environment by writing programs to control a “turtle”, a small visual character that moves around the screen and can be used to create drawings. Students learn features of the JavaScript language by going through a series of short tutorials that introduce the environment and new programming concepts. There is a heavy emphasis on writing procedures (functions in JavaScript), and using top­-down program design— ­ a process by which a large problem is broken down into smaller and more manageable parts. 


> These lessons highlight the way multiple levels of abstraction are used to write programs (2.2 in the framework).


## Lesson 4: Using Simple Commands

**Lesson Type:** Turtle Programming | Pair Problem Solving


<a href = “https://curriculum.code.org/csp/unit3/4/” target=_blank> Lesson Plan Link <i class="fa fa-external-link-square"/></a>

<img src="https://images.code.org/d6819c3fb66a615f08e7a07f347b4506-image-1479787011340.png" style="float:right; margin-left:30px; width:200px">
The main purpose of this lesson is start students on their programming journey in such a way that the focus is more on problem-solving than learning syntax. Like the previous lessons about algorithms, by limiting the number of available commands students have to come up creative solutions that they might not come up with otherwise. 


One reason to introduce programing in this way is because at its core, a computer can really only do a few simple things, and the more complex thing we do on a computer are the result of combining these simple instructions to do more and more sophisticated things. Students in this class will embark on a similar journey, building up complexity from only a few primitive sets of commands. As students are presented with increasingly complex tasks, we will progressively expose more commands as a matter of convenience.


<br><br>
<hr />


## Lesson 5: Creating Functions

**Lesson Type:** Turtle Programming | Pair Problem Solving

<a href = “https://curriculum.code.org/csp/unit3/5/” target=_blank> Lesson Plan Link <i class="fa fa-external-link-square"/></a>

<img src="https://images.code.org/ae25372e0d9c6f969791b1ab35a07100-image-1479787011339.png" style="float:right; margin-left:30px; width:200px">
Programming languages must define the meaning of a set of commands which are generally useful and applicable. In order to extend their functionality, nearly all programming languages provide a means for defining and calling new commands which programmers design to fit the needs of the problems they are trying to solve. This process takes the form of defining functions, and is an example of how computer scientists use *abstraction* to solve problems. A programmer will design a solution to a small, well-defined portion of the task and then give a name to the associated code. Whenever that problem arises again, the programmer can invoke the new function by name, without having to solve the problem again. This ability to refer to complex functionality by simple, meaningful names allows for programs to be written in more intuitive ways that reflect the relationships between different blocks of code.


In the previous lesson students had need for, but no ability to use/create, a turnRight function.  This was likely a source of frustration for them as they completed each level and worked to problem solve a solution to the given problems.  The value of this frustration is that it creates a desire to define and repeat a set of commands, helping students understand why the function command is valuable.


<br><br>
<hr />


## Lesson 6: Functions and Top-Down Design

**Lesson Type:** Turtle Programming | Pair Problem Solving

<a href = “https://curriculum.code.org/csp/unit3/6/” target=_blank> Lesson Plan Link <i class="fa fa-external-link-square"/></a>

<img src="https://images.code.org/e32d060d8648fd75ae0cfa2de5c3b41a-image-1479787011337.png" style="float:right; margin-left:30px; width:200px">

The main purpose here is to familiarize students with the concept of developing “procedural abstractions.” One of the main learning objectives in the CSP framework is: 2.2.1 Develop an abstraction when writing a program or creating other computational artifacts.

Furthermore the Create Performance Task requires students to “develop an abstraction to manage complexity of your program.” For all intents and purposes, developing abstractions starts with writing reusable functions (or procedures) in your code that encapsulate and give a name to multi-line segments of code that other parts of your code calls upon.

A technique for deciding what functions you should write is to look at the problem with a “top-down design” perspective, which students will learn in this lesson. The process of creating software begins long before the first lines of code are written. Breaking a problem down into layers of sub-tasks, and writing well-named functions that solve those tasks is a creative act of abstraction. Students will refine their understanding of functions from the previous lesson to help them write good code that is more efficient, easier to read, and therefore easier to debug when problems arise.  



MARKDOWN
