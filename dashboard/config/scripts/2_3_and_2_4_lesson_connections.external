name '2.3 and 2.4 Lesson Connections'
markdown <<MARKDOWN
# 2.3 and 2.4 Lesson Connections

The main purpose of these lessons is for students to exhibit creativity while getting some hands-on experience manipulating binary data that represents something other than plain numbers or text. 

## Lesson 3: Encoding Black and White Images
**Lesson Type:** Widget - Pixelation | Concept Invention | Individual Creation

<a href = “https://curriculum.code.org/csp/unit2/3/” target=_blank> Lesson Plan Link <i class="fa fa-external-link-square"/></a>

<img src="https://images.code.org/7400174cc3e6b1b93c4f79ae93333a36-image-1475947402675.png" style="float:right; margin-left:30px; width:200px">

While this lesson is about creativity and creation, strong ties can also be made back to data abstraction. Image file types have some similarities to data packets we saw in the Internet unit – because images must include metadata, or data about the data. The data of a black-and-white image is the list of bits that represent whether each pixel is on or off. To render the image, however, we must also know how wide and tall the image is in order to organize the pixels. This necessitates the creation of a file format which clearly define how this metadata will be encoded, since it is crucial for interpreting the subsequent data of the image. It is similar to how an internet packet doesn’t only contain the data you need to send, but must also include metadata like the to and from addresses and packet number.

Connections can be made back to file sizes and file formats here as well - e.g. how many bytes does it take to store an image v. text? If you want to broach the subject, the concept of data compression can come in here too - it is interesting to think about how a black and white image might be compressed. **You should not feel the need to get too caught up in compression though; this lesson largely acts a stepping stone to the next lesson which addresses how RGB colors are represented in binary.**

## Lesson 4: Encoding Color Images
**Lesson Type:** Widget - Pixelation | Individual Creation

<a href = “https://curriculum.code.org/csp/unit2/4/” target=_blank> Lesson Plan Link <i class="fa fa-external-link-square"/></a>

<img src="https://images.code.org/ec880f588a516c0d85e5eb5a2a66d5d2-image-1475947402674.png" style="float:right; margin-left:30px; width:200px">
Similar to the B&W pixelation activity, the purpose of this lesson is for students to get hands-on  with bits. A major outcome is an understanding the relationship between hexadecmial (base-16) and binary (base-2), and how useful it is to use hex to represent groups of 4 bits. It’s important to realize that using hex is not a form of data compression, it’s simply a different view into the bits.

Students should also make connections to the first two lessons of this unit. Working with color images, they will realize that (uncompressed) image file sizes can become quite large. For example, even a relatively small image of 250x250 pixels is a total of 62,500 pixels, each requiring up to three bytes (24 bits) or color information, resulting in a total of 1.5 million bits to store one image! Thus, interesting connections to compression can be made here, but note that _lossy compression_ and image formats like .jpg are covered in the next lesson.



MARKDOWN
