name 'Using Output from Functions: The return Command'
css 'unplugged'
markdown <<MARKDOWN
# Using Output from Functions

We already know that **parameters provide input values** to our functions. It is also possible for functions to **generate output values which can be used to change the logical flow of the program.**

We have already seen many examples of **functions that generate output**, including:

* `randomNumber` 
* `includes`
* `promptNum`
* `getText`
* `toUpperCase`
* `toLowerCase`
 
You may not have thought of it at the time, but when you called these functions you treated them **as if they were a value**. In reality you were using the **value returned by these functions**. 

### Examples of Return Functions Used as Values

**Using the `randomNumber` function as a number** 

![](https://images.code.org/2b600bb438230da22acc3b74693bf386-image-1447697995804.19.17 PM.png)

**Using the `getText` function as a string** 

![](https://images.code.org/cd6e2a40b398fc097a415221ff89b117-image-1447698000658.19.44 PM.png)

Let's have a look at how we can write functions like this ourselves.

# The *return* Command

When you call a function, you are telling the computer to run a piece of code elsewhere in your program. When that function is finished running, execution of the program **returns to the point in the code where the function was called**. In some programming languages you must explicitly tell the program to return at the end of a function, but in JavaScript this just happens automatically when you reach the closing `}` of your function.

It is possible to make your program return at any point using the `return` command. This command tells the function to stop executing immediately, skipping any commands that appear afterwards within the function. This example shows how a `console.log` statement after a `return` is never executed. It will even generate a warning in your program.

![](https://images.code.org/632c3875d47bb6fd54130b9874c44552-image-1447778563981.gif)

Most of the time we want every line of our functions to run, and so we wouldn't write functions with commands after a `return` statement. If we had ever used `return`, it would have been as the last line in our functions, and since reaching the closing curly brace will automatically do the same thing as a `return` command, there's been no reason to use it at all.



# Returning Values

There is one critical difference between reaching the last line of your function and using `return`. When you use `return` you are also able to **specify a single value** that will be "returned" to whatever code called the function in the first place. The effect is that the function acts like any expression that evaluates to a single value. You can think of it as though the value simply replaces the function where it was called in the code.

When your function is done executing it will be replaced by whatever value you return, just like `randomNumber` is replaced by a randomly generated number and `getText` is replaced by the text of one of your UI elements. This is how your functions can generate output that other parts of your program can use.

![](https://images.code.org/932db65300a4117b7e1b92fd07283884-image-1447732356725.50.34 PM.png)

Notice that we need to place our new function inside of a `console.log` statement in order to display the value it returned. Without this statement, the value would be calculated, but it would not be used anywhere in your program. This is no different than if you were to call `randomNumber` and not use the value generated. It is up to you, the programmer, to decide how this returned value will be used in the rest of your program.

You will typically write a function that returns a value when you have **a calculation that you perform many times in your code** (for example, finding the minimum value in an array). Your function would use parameters to provide inputs, would calculate a result, and would return that result as output. To help you get started writing your own functions that return values, here are some simple guidelines to follow.

**Guidelines for Writing Functions with Return Values**

* Decide what values you need as input to your computation. Make these **parameters of your function**.
* Use your parameters to calculate your result **and save that result in a single variable**.
* **Return that variable** on the last line of your function.

<a class="btn btn-large btn-primary next-stage submitButton">Continue</a>
MARKDOWN