name 'Processing Arrays'
css 'unplugged'
markdown <<MARKDOWN

# Processing Arrays Overview and How To Guide

In previous lessons, students used arrays simply to store information.  In reality, however, arrays are a powerful tool that can be used for much more complex tasks.  In this lesson, students begin to work with arrays in a more complex way.

## Using loops to process arrays

<img src="https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png" style="float:right; margin-left:30px">

**For Loop**: A *for loop* is typically used to execute a block of code some number of times.  It does this by doing 3 things:

 * Creates a counter variable to keep track of the number of times through the loop.
 * Defines a looping condition.
 * Defines how to change the looping variable after each iteration.

The most common setup is shown on the right.

The `for` loop repeats statements like a `while` loop, but adds an initialization and final expression step, like this:

`for (initialization; condition; final expression){`
<br>
`	code to execute`
    <br>
`}`

<img src="https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png"style="float:right; margin-left:30px">

**for** loops are a convenient way to wrap up into one statement these three things you need to do to make a repeat loop.  You can achieve the same thing with a while loop but the code gets spread out (as shown on the right).

>As we’ll see in this chunk, `for` loops are particularly useful for situations where we want to use a loop to visit, read, or update, every item in an array. This is the case because we can use the looping variable as an index into the array.

Arrays also carry around with them a `length` variable that holds the number of items currently in the array.  You access it like this: `myArray.length`

Combining for loops and arrays, you can write a loop in a few lines of code to visit every element of a list. Here is an example that will simply display all the values in an array:

![](https://images.code.org/930923a746004603ee9f68f8807c3e70-image-1447948267650.png)

The following links provide additional links and information about booleans.  Many of these links are also found in the curriculum, but are consolidated here for convenience.<br>
**Stage 13:**

- <a href = “https://studio.code.org/s/csp5/stage/13/puzzle/2” target=_blank> Video - Introduction to Lists part 1 <i class="fa fa-external-link-square"/></a>
- <a href = “https://studio.code.org/s/csp5/stage/13/puzzle/5” target=_blank> Video - Introduction to Lists part 2 <i class="fa fa-external-link-square"/></a>
- <a href = “https://studio.code.org/s/csp5/stage/13/puzzle/8” target=_blank> Video - Introduction to Lists part 3 <i class="fa fa-external-link-square"/></a>
- <a href = “https://studio.code.org/s/csp5/stage/13/puzzle/16” target=_blank> Video - Introduction to Lists part 4 <i class="fa fa-external-link-square"/></a>

**Stage 15:**

- <a href = “https://studio.code.org/s/csp5/stage/15/puzzle/2” target=_blank> Video - Processing Lists with Loops <i class="fa fa-external-link-square"/></a>



MARKDOWN
