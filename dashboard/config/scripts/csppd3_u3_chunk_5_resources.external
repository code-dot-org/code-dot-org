name 'CSPPD3-u3 chunk 5 resources'
css 'unplugged'
markdown <<MARKDOWN
# Unit 3 Overview > Chunk 5: Introduction to Loops and Arrays > Resources

Here are a few resources to help you get started with understanding these CS concepts. Please share any resources you find in the <a href=“http://forum.code.org/c/csp-unit3” target=_blank>forum!</a>

## Introduction to While Loops

### Vocabulary

**While Loop**: a looping structure that evaluates a conditional expression and repeats the body of the loop until the expression is no longer true. For example, you might dig through your writing utensils until you find a blue pen. You don’t know how many pens you’ll need to look at before you find a blue one, so you will keeping digging **while** you haven't found one.

One thing that's tricky for the first timer is that while loops require you state the looping condition in the positive, but many times you intuitively think about loops in the opposite way: I want to loop **until** some condition is true.  JavaScript does not have a a "repeat until" structure so you have to use a while loop.  This means that sometimes you need to state things in ways that would be awkward in English. It we look back at the blue pen example from before. In English you might *say*: "dig through the drawer **until** you find a blue pen."  But when you write a while loop, you need to invert the condition: "**while** I have *not* found a blue pen, keep digging."  This distinction is subtle but important.

<img src="https://images.code.org/3a2fcfa49c6918dee9b7877d6d669e55-image-1447991716637.gif" width="450" style="float:right; margin-left:30px">
Let’s consider another example, but this time look at the code. 

Imagine you wanted to simulate flipping a coin, and you want to keep track of how many heads in a row you flip. You won’t know ahead of time how many times in a row heads will come up, so you want to keep flipping the coin **while** it comes up heads. 

In english: “while the coin is showing heads, flip the coin, and add one to a count of the number of times heads has come up.” Check out the short program on the right, which shows how you might write a program that uses a while loop for this coin flipping simulation.

### Lessons in Code Studio

 * <a href="https://docs.google.com/document/d/11D6yAmkVimOvgvz31S8cIsHbC2jtZMF2K-YHaUyQtHs/edit" target=_blank>Lesson 22 - Introduction to While Loops</a>
 * <a href="https://docs.google.com/document/d/11D6yAmkVimOvgvz31S8cIsHbC2jtZMF2K-YHaUyQtHs/edit" target=_blank>Lesson 23 - Counting flips: loops and simulation</a>

### External Resources

- <a href="http://www.w3schools.com/js/js_loop_while.asp" target=_blank>JavaScript While Loop- W3Schools</a>
- <a href="https://youtu.be/F8H-41bpJ6E" target=_blank>Video: While Loop - (Code Studio video from other courses) </a> Note that this video references the block-only environment used by our Intro to Computer Science courses intended for younger students, but still describes the basic concept of a loop, which is shared across all programming languages.

## Introduction to Arrays

### Vocabulary

**Array**: a data type that holds a list of items.  While the word 'list' is a generic term, and 'array' is a specific kind of list, we often use these words interchangably.   All programming languages have many ways of constructing and processing list of information.  An 'array' in most languages is usually the most primitive kind of list structure.

>An array can be used like any other variable and gives us the ability to store information for use while the program is running. With an array we can keep track of lots of pieces of information all under one name. 

When creating an array we often add some initial items to the list. For example, `var numList = [2,4,8,16,32]`.  You can also store string in an array `var studentNames = ["Nancy", "Bill", "Marcus"]` Note that although this is common practice, it is not required to pass values into the array when we create it. We could just as easily create `var studentNames = [ ]` and add the names in later in our program.

The elements stored in an array are each assigned an `index`, or numeric value related the position of the item relative to the list. Indexes start at 0. In the example above, `Nancy` is stored at index 0 and `Bill` is at index 1.

<img src="https://images.code.org/b5a8a013306d4ec5aa1ec7286ee6f369-image-1446446698823.gif" width="450px" style="float:left; margin-right:15px">

If we want to **retrieve the value of an element** in the array, we just need to reference the index of the item. For example, if we wanted to print the word “Nancy” from the array, we could do this: `write(studentNames[0]);`

Let’s looks at an example in code. Imagine we’re back to flipping the coin from earlier.  We can use a two-element array in a clever way to make a custom message for heads or tails. This example is essentially just generating a 0 pr 1 randomly, and using that values as an index into the array.

>**Each individual item in a array can be used like a variable of that type.** We can **reassign the value of an element of an array** by referencing a specific index and giving that index a new value.

Looking back at the list of student names from earlier, `studentNames[0]=“Brook”;` would change the value of `studentNames[0]` from “Nancy” to “Brook”.

>We can also **add elements** to the array by using the `appendItem` function.  `appendItem` is a function added to App Lab because it is a function students will see on the AP exam.  There are actually many ways to add items to arrays in JavaScript, but we will use `appendItem` in this course.

`appendItem` adds a given element to the "end" of the array.  It takes to parameters: the array to append to, and the item to append.  This line of code will add "Caley" to the list of names: `appendItem(studentNames, "Caley")` After this operation `studentNames` will have 4 values in it: `["Nancy", "Bill", "Marcus", "Caley"] and *Caley* will be at index 3 - the last index.

### Lessons in Code Studio

 * <a href="https://docs.google.com/document/d/1AvUPCsEuj2i7iouPX8O6812_z-FQ6jyo8D9m2zfVoSY/edit" target=_blank> 24 - Introduction to Arrays </a>
 * <a href="https://docs.google.com/document/d/1bx6DoQfxQHemLTpaYodyvJ_9FbUJZcTKW1Q7NvF5FUI/edit" target=_blank>25 - Using Arrays in Apps</a>

### External Resources

- <a href="http://www.w3schools.com/js/js_arrays.asp" target=_blank>JavaScript Arrays- W3Schools</a>
- <a href="https://en.wikipedia.org/wiki/Array_data_type" target=_blank>Array data type- Wikipedia</a>
- <a href="http://www.w3schools.com/js/js_arrays.asp" target=_blank>JavaScript Arrays- W3Schools</a>

## Using loops to process arrays

<img src="https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png" style="float:right; margin-left:30px">

**For Loop**: A *for loop* is typically used to execute a block of code some number of times.  It does this by doing 3 things:

 * Creates a counter variable to keep track of the number of times through the loop.
 * Defines a looping condition.
 * Defines how to change the looping variable after each iteration.

The most common setup is shown on the right.

The `for` loop repeats statements like a `while` loop, but adds an initialization and final expression step, like this:

`for (initialization; condition; final expression){`
<br>
`	code to execute`
    <br>
`}`

<img src="https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png"style="float:right; margin-left:30px">

**for** loops are a convenient way to wrap up into one statement these three things you need to do to make a repeat loop.  You can achieve the same thing with a while loop but the code gets spread out (as shown on the right).

>As we’ll see in this chunk, `for` loops are particularly useful for situations where we want to use a loop to visit, read, or update, every item in an array. This is the case because we can use the looping variable as an index into the array.

Arrays also carry around with them a `length` variable that holds the number of items currently in the array.  You access it like this: `myArray.length`

Combining for loops and arrays, you can write a loop in a few lines of code to visit every element of a list. Here is an example that will simply display all the values in an array:

![](https://images.code.org/930923a746004603ee9f68f8807c3e70-image-1447948267650.png)

### Lessons in Code Studio

* <a href="https://docs.google.com/document/d/1jKO5uXPejGPdN0yRIrt3yobxXG3SM9-OpUVuE-5NIE0/edit" target =_blank>26 - Processing Arrays</a>

### External Resources

- <a href="http://www.w3schools.com/js/js_loop_for.asp" target=_blank>JavaScript For Loop- W3Schools</a>
- <a href ="https://youtu.be/G8hfAk4PfOM" target=_blank>Video: For Loops in App Lab (from the curriculum)</a>

## Functions with Return Values

**Using output from functions:** We already know that **parameters provide input values** to our functions. It is also possible for functions to **generate output values which can be used to change the logical flow of the program.**

We have already seen many examples of **functions that generate output**, including:

* `randomNumber()`
* `includes()`
* `promptNum()`
* `getText()`
* `toUpperCase()`
* `toLowerCase()`

You may not have thought of it at the time, but when you called these functions you treated them **as if they were a value**. In reality you were using the **value returned by these functions**. For example using `randomNumber`: <img src="https://images.code.org/2b600bb438230da22acc3b74693bf386-image-1447697995804.19.17 PM.png" width="200">
or using `getText`: <img src="https://images.code.org/cd6e2a40b398fc097a415221ff89b117-image-1447698000658.19.44 PM.png" width="200">

**The "return" command**:When you call a function you are telling the computer to run a piece of code elsewhere in your program. When that function is finished running, execution of the program **returns to the point in the code where the function was called**. In some programming languages you must explicitly tell the program to return at the end of a function, but in JavaScript this just happens automatically when you reach the closing `}` of your function.

<img src="https://images.code.org/632c3875d47bb6fd54130b9874c44552-image-1447778563981.gif" width="300" style="float:right; margin-left:30px">

It is possible to make your program return at any point using the `return` command. This command tells the function to stop executing immediately, skipping any commands that appear afterwards within the function. This example shows how a console.log statement after a return is never executed. It will even generate a warning in your program (shown on the right).

Most of the time we want every line of our functions to run, and so we wouldn't write functions with commands after a return statement. If we were ever going to use `return` it would have been as the last line in our functions, and since reaching the closing curly brace will automatically do the same thing as a `return` command, there's been no reason to use it at all.

>**Returning Values**

>When you use `return` you are also able to specify a single value that will be "returned" to whatever code called the function in the first place.  The effect is that the function acts like any expression that evaluates to a single value.  You can think of it as the though the value simply replaces the function where it was called in the code.

Just like `randomNumber` is replaced by a randomly generated number and `getText` is replaced by the text of one of your UI elements, when your function is done executing it will be replaced by whatever value you return. This is how your functions can generate output that other parts of your program can use. 

<img src="https://images.code.org/932db65300a4117b7e1b92fd07283884-image-1447732356725.50.34 PM.png" width="300" style="float:left; margin-right:15px">

The trivial (but illustrative) example on the left shows a single function that accepts a number as input, multiplies it by two, and then uses `return` to provide the result back to the calling location. We can then use our function to calculate the double of any number we wish.

Notice that we need to place our new function inside of a `console.log` statement in order to display the value it returned. Without this statement, the value would be calculated, but give how the program is written right now, it would not be used anywhere in your program. This is no different than if you were to call `randomNumber` and not use the value generated. It is up to you, the programmer, to decide how this returned value will be used in the rest of your program.

You will typically write a function that returns a value when you have **a calculation that you perform many times in your code**. Your function would use parameters to provide inputs, would calculate a result, and would return that result as output. To help you get started writing your own functions that return value, here are some simple guidelines to follow.

**Guidelines for Writing Functions with Return Values**

* Decide what values you need as input to your computation. Make these **parameters of your function**.
* Use your parameters to calculate your result **and save that result in a single variable**
* **Return that variable** on the last line of your function

### Lessons in Code Studio

* <a href="https://docs.google.com/document/d/1rAba-igOINMnxYWMOUkjIlPVj8npp9AsgdiqFeinqoQ/edit" target=_blank> 27 - Functions with return values</a>
* <a href="https://docs.google.com/document/d/1-VuUCUasA-APSMWX6UQ_3wdT79d_h7psud9rDMQLLHg/edit" target=_blank> 28 - Canvas: using arrays in drawing</a>

### External Resources

- <a href="http://www.w3schools.com/js/js_functions.asp" target= _blank>Functions that return values- W3Schools</a>
- <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API" target=_blank>The HTML Canvas </a> Note that App Lab has a number of library functions for doing canvas drawing that differ slightly from the real API to simplify some of the process.
MARKDOWN
