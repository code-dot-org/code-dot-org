name 'CSA Playground Overview'
title 'The Playground'
description 'description here'

markdown <<MARKDOWN
#The Playground
The Neighborhood is a non-interactive environment where the student writes code to achieve a goal. The Neighborhood consists of a rectangular grid of spaces that can contain obstacles or items, with a `Painter` object that can move around on the grid. Paint can be picked up or placed by a `Painter` object, and there is a destination that a `Painter` object can be navigating toward or the level can be open-ended to encourage creative "painted" designs.

##Board Class
The following are the constructors and methods in the `Board` class.

###Methods
| Method      |Description |
| ----------- |----------- |
|  | &nbsp; |
| `public int getWidth()` | **Returns:** the width of the board in pixels - this will always be 400      |
| | &nbsp; |
| `public int getHeight()`  | **Returns:** the height of the board in pixels - this will always be 400        |
| | &nbsp; |
| `public void setBackgroundImage(String filename) throws FileNotFoundException`  | Sets the background of the board to the provided image. The image will be scaled to fit the full board, which may distort the image if it is not square.     |
| | **Parameters:** |
| | * `filename` — the name of the file from the asset manager to put in the background |
| | **Exceptions:** |
| | * `FileNotFoundException` — if the file cannot be found in the asset manager |
| | &nbsp; |
| `public void addClickableImage(ClickableImage image)`  | adds a `ClickableImage` to the board      |
| | **Parameters:** |
| | * `image` — the image to add. If the image is already on the board, this method does nothing. |
| | &nbsp; |
| `public void removeClickableImage(ClickableImage image)`  | removes the `ClickableImage` from the board   |
| | **Parameters:** |
| | * `image` — the image to remove. If the image is not on the board, this method does nothing. |
| | &nbsp; |
| `public void addImageItem(ImageItem item)`  | adds an `ImageItem` to the board       |
| | **Parameters:** |
| | * `image` — the image item to add. If the item is already on the board, this method does nothing. |
| | &nbsp; |
| `public void addTextItem(TextItem item)`  | adds a `TextItem` to the board   |
| | **Parameters:** |
| | * `image` — the text item to add. If the item is already on the board, this method does nothing. |
| | &nbsp; |
| `public void removeItem(Item item)`  | removes the `Item` from the board   |
| | **Parameters:** |
| | * `image` — the item to remove. If the image is not on the board, this method does nothing. |
| | &nbsp; |
| `public void playSound(String filename) throws FileNotFoundException`  | plays a sound from the asset manager    |
| | **Parameters:** |
| | * `filename` — the name of the sound file from the asset manager to play |
| | **Exceptions:** |
| | * `FileNotFoundException` — if the sound file cannot be found in the asset manager |
| | &nbsp; |
| `public void start() throws PlaygroundException` | Starts the playground game, waiting for the user to click on images and executing the appropriate code. To end the game, call the end() method. The start() method may only be called once per execution of a program.    |
| | **Exceptions:** |
| | * `PlaygroundException` — if the `start()` method has already been called |
| | &nbsp; |
| `public void end(String endingSound) throws PlaygroundException, FileNotFoundException`  | ends the game, plays the sound supplied, and stops program execution   |
| | **Parameters:** |
| | * `endingSound` — the name of a sound file in the asset manager to play at the end of the game |
| | **Exceptions:** |
| | * `PlaygroundException` — if the `start()` method has not been called |
| | * `FileNotFoundException` — if the sound file cannot be found |
| | &nbsp; |
| `public void end() throws PlaygroundException`  | ends the game and stops program execution    |
| | **Exceptions:** |
| | * `PlaygroundException` — if the `start()` method has not been called |


##ClickableImage Class

An abstract class to extend in order to add a click handler for interactions in The Playground.

The following are the constructors and methods in the `ClickableImage` class.

###Constructors
| Constructor      |Description |
| ----------- |----------- |
| | &nbsp; |
| `public ClickableImage(String filename, int x, int y, int width, int height)` | Creates an item that can be displayed in the Playground and responds to click events. An item consists of an image, referenced by the name of the image file in the asset manager. The image for the item will be scaled to fit the width and height provided, which may distort the image.   |
| | &nbsp; |
| | **Parameters:** |
| | * `filename` — the file name of the image for this item in the asset manager |
| | * `x` — the distance, in pixels, from the left side of the board |
| | * `y` — the distance, in pixels, from the top of the board |
| | * `width` — the width of the item, in pixels |
| | * `height` — the height of the item, in pixels |
| | **Exceptions:** |
| | * `FileNotFoundException` — if the file specified is not the in the asset manager |

###Methods
| Method      |Description |
| ----------- |----------- |
|  | &nbsp; |
| `public abstract void onClick()` | Called when this item is clicked. Implement this method in a subclass to control what happens when the user clicks on the item.      |


##Item Class
The base class that `ImageItem` and `TextItem` inherits from to enable common capabilities for items in The Playground.

The following are the methods in the `Item` class.

###Methods
| Method      |Description |
| ----------- |----------- |
|  | &nbsp; |
| `public void setX(int x))` | set the X position for the item    |
| | **Parameters:** |
| | * `x` — the distance, in pixels, from the left side of the board |
| | &nbsp; |
| `public int getX()`  | **Returns:** the distance, in pixels, from the left side of the board   |
| | &nbsp; |
| `public void setY(int y)`  | set the Y position for the item     |
| | **Parameters:** |
| | * `y` — the distance, in pixels, from the top of the board |
| | &nbsp; |
| `public int getY()`  | **Returns:** the distance, in pixels, from the top of the board     |
| | &nbsp; |
| `public void setHeight(int height)` &nbsp;&nbsp;&nbsp;&nbsp;  | set the height for the item    |
 | **Parameters:** |
| | * `height` — the height of the item, in pixels |
| | &nbsp; |
| `public int getHeight()`  | **Returns:** the height of the item, in pixels   |


##ImageItem Class

**extends Item**

Inherits from `Item` and represents an image that can be displayed on the Playground.

The following are the constructors and methods in the `ImageItem` class.

###Constructors
| Constructor      |Description |
| ----------- |----------- |
| | &nbsp; |
| `public ImageItem(String filename, int x, int y, int width, int height) throws FileNotFoundException` | Creates an item that can be displayed in The Playground. An item consists of an image, referenced by the name of the image file in the asset manager. The image for the item will be scaled to fit the width and height provided, which may distort the image. |
| | &nbsp; |
| | **Parameters:** |
| | * `filename` — the file name of the image for this item in the asset manager |
| | * `x` — the distance, in pixels, from the left side of the board |
| | * `y` — the distance, in pixels, from the top of the board |
| | * `width` — the width of the item, in pixels |
| | * `height` — the height of the item, in pixels |
| | **Exceptions:** |
| | * `FileNotFoundException` — if the file specified is not the in the asset manager |

###Methods
| Method      |Description |
| ----------- |----------- |
|  | &nbsp; |
| `public String getFilename()` | **Returns:** the filename in the asset manager for the image associated with this item   |
| | &nbsp; |
| `public void setFilename(String filename) throws FileNotFoundException`  | sets the filename for this item     |
| | **Parameters:** |
| | * `filename` — the filename in the asset manager for the image to associate with this item |
| | **Exceptions:** |
| | * `FileNotFoundException` — if the file specified is not the in the asset manager |
| | &nbsp; |
| `public void setWidth(int width)`  | set the width for the item       |
| | **Parameters:** |
| | * `width` — the width of the item, in pixels |
| | &nbsp; |
| `public int getWidth()`  | **Returns:** the width of the item, in pixels    |


##TextItem Class

**extends Item**

The following are the constructors and methods in the `TextItem` class.

###Constructors
| Constructor      |Description |
| ----------- |----------- |
| | &nbsp; |
| `public TextItem( String text, int x, int y, Color color, Font font, FontStyle fontStyle, int height, double rotation)` | creates a `TextItem` that can be placed on the board   |
| | &nbsp; |
| | **Parameters:** |
| | * `text` — the text content |
| | * `x` — the distance from the left side of the board |
| | * `y` — the distance from the top of the board |
| | * `color` — the color to draw the text |
| | * `font` — the name of the font to draw the text |
| | * `fontStyle` — the style of the font |
| | * `height` — the height of the text in pixels |
| | * `rotation` — the rotation or tilt of the text, in degrees |
| | &nbsp; |
| `public TextItem(String text, int x, int y, Color color, Font font, int height, double rotation)` | creates a `TextItem` that can be placed the board in a normal font style.    |
| | &nbsp; |
| | **Parameters:** |
| | * `text` — the text content |
| | * `x` — the distance from the left side of the board |
| | * `y` — the distance from the top of the board |
| | * `color` — the color to draw the text |
| | * `font` — the name of the font to draw the text |
| | * `height` — the height of the text in pixels |
| | * `rotation` — the rotation or tilt of the text, in degrees |



###Methods
| Method      |Description |
| ----------- |----------- |
|  | &nbsp; |
| `public void setText(String text)` | set the text content for the item    |
| | **Parameters:** |
| | * `text` — the content for the item |
| | &nbsp; |
| `public String getText()`  | **Returns:** the text content for the item    |
| | &nbsp; |
| `public void setColor(Color color)`  | set the text color for the item       |
| | **Parameters:** |
| | * `color` — the text color |
| | &nbsp; |
| `public void setRed(int colorRed)`  | Set the amount of red (ranging from 0 to 255). Values below 0 will be ignored and set to 0, and values above 255 will be ignored and set to 255.      |
| | **Parameters:** |
| | * `colorRed` —  the amount of red (ranging from 0 to 255) in the color of the text |
| | &nbsp; |
| `public void setGreen(int colorGreen)` &nbsp;&nbsp;&nbsp;&nbsp;  | Set the amount of green (ranging from 0 to 255). Values below 0 will be ignored and set to 0, and values above 255 will be ignored and set to 255.   |
| | **Parameters:** |
| | * `colorGreen` —  the amount of green (ranging from 0 to 255) in the color of the text |
| | &nbsp; |
| `public void setBlue(int colorBlue)`  | Set the amount of blue (ranging from 0 to 255). Values below 0 will be ignored and set to 0, and values above 255 will be ignored and set to 255.     |
| | **Parameters:** |
| | * `colorBlue` —  the amount of blue (ranging from 0 to 255) in the color of the text |
| | &nbsp; |
| `public Color getColor()`  | **Returns:** the text color for the item       |
| | &nbsp; |
| `public void setFont(Font font)`  | set the font for the text   |
| | **Parameters:** |
| | * `font` —  the font for the text |
| | &nbsp; |
| `public Font getFont()`  | **Returns:** the font for the text      |
| | &nbsp; |
| `public void setFontStyle(FontStyle fontStyle)` | set the font style for the text     |
| | **Parameters:** |
| | * `fontStyle` —  the font style for the text |
| | &nbsp; |
| `public FontStyle getFontStyle()`  | **Returns:** the font style for the text |
| | &nbsp; |
| `public void setRotation(double rotation)`  | set the rotation for the text |
| | **Parameters:** |
| | * `rotation` —  the rotation for the text, in degrees |
| | &nbsp; |
| `public double getRotation()`  | **Returns:** the rotation for the text, in degrees       |
MARKDOWN
