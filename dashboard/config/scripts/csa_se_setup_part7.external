name 'csa-se-setup-part7'
title 'Step 7: TensorFlow Setup (Mac Only)'

markdown <<MARKDOWN
# Step 7: TensorFlow Setup (Mac Only)

If you try to use Tensorflow on Apple Silicon (M1, M2, etc), you will likely run into: `Cannot find TensorFlow native library for OS: darwin, architecture: aarch64`.

This is [**because**](https://github.com/tensorflow/java/blob/master/CONTRIBUTING.md#apple-silicon):

> The TensorFlow Java project relies on GitHub-hosted runners to build and distribute the native binaries for TensorFlow. Unfortunately at the moment, GitHub Actions still does not support runners with a Apple Silicon chip (such as M1). Therefore, we cannot distribute the binaries for this platform, so they must be compiled and installed locally on such systems.

Note that there are two different TensorFlow for Java:

* A deprecated legacy Java API
* And an alpha version of TF-Java

There is a [**repo**](https://github.com/DevinTDHa/precompiled-tf-jni-m1) of uploaded jars for Apple Silicon for TF-Java. However, this version is not compatible with the legacy Java API currently used in the computer vision lessons.

To check if you are running Apple Silicon, check "About this Mac". If "Chip" starts with "Apple …", you are running Apple Silicon.

![](https://images.code.org/1624f04b742e78050ffaf723e85a62e5-image-1691890759361.png)

## Build from source

To build from source for legacy Java API:

### Part 1: Install Homebrew

[**Install Homebrew**](https://brew.sh/) if you don't have it already.

### Part 2: Install bazel with bazelisk

Install [**bazel**](https://bazel.build/install) with [**bazelisk**](https://bazel.build/install/bazelisk):

```
$ brew install bazelisk
```

### Part 3: Clone TensorFlow

Enter the following commands one at a time:

```
$ git clone https://github.com/tensorflow/tensorflow.git

$ cd tensorflow

$ ./configure
```

You should be able to accept all defaults during the configure process.

### Part 4: Install XCode

Install [**XCode**](https://apps.apple.com/us/app/xcode/id497799835?mt=12) if you don't have it already. After it installs, be sure to manually run Xcode and accept any terms and conditions. Otherwise, you may run into the error `"Xcode version must be specified to use an Apple CROSSTOOL"`.

### Part 5: Configure TensorFlow

**⚠️ WARNING! The last step in this part of the process will take hours and sometimes all the memory, which will make your computer very slow. We recommend that you do this overnight.**

Try entering the following command:

```
$ realpath --help
```

If you get the message `"realpath: illegal option -- -"`, then enter the following command:

```
$ brew install coreutils
```

Check what shell you are running by entering the following command:

```
$ echo $SHELL
```

**If you are running bash**

Enter the following commands:

```
$ touch ~/.bash_profile

$ open ~/.bash_profile
```

**If you are running zsh**

Enter the following commands:

```
$ touch ~/.zshenv

$ open ~/.zshenv
```

Add this line to the file and save:

```
PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
```

Then enter the following command:

```
$ bazel build --config opt --cpu=darwin_arm64 --host_cpu=darwin_arm64 //tensorflow/java:tensorflow
//tensorflow/java:libtensorflow_jni
```

### Part 6: Using TensorFlow in your project

In the `pom.xml` file of the computer vision apps:

Update the TensorFlow dependency, where `pathtolibtensorflowjarfile` will be `bazel-bin/tensorflow/java/libtensorflow.jar` from the `tensorflow` directory.

```
<dependency>
   <groupId>org.tensorflow</groupId>
   <artifactId>tensorflow</artifactId>
   <version>1.15.0</version>
   <scope>system</scope>
   <systemPath>{pathtolibtensorflowjarfile}</systemPath>
</dependency>
```

Update the `plugins` section, where `pathtodirectorycontaininglibtensorflowjar` will be `bazel-bin/tensorflow/java/` from the `tensorflow` directory.

```
<plugin>
   <groupId>org.openjfx</groupId>
   <artifactId>javafx-maven-plugin</artifactId>
   <version>${javafx.maven.plugin.version}</version>
   <configuration>
      <mainClass>com.codedotorg.App</mainClass>
      <options>
         <option>-Djava.library.path={pathtodirectorycontaininglibtensorflowjar}</option>
      </options>
   </configuration>
</plugin>
```
MARKDOWN
