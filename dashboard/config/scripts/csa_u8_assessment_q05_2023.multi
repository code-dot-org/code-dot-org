name 'CSA U8 Assessment q05_2023'

wrong '1'
right '2'
wrong '3'
wrong '4'
wrong '5'

markdown <<MARKDOWN
Consider the following implementation of the selection sort algorithm.

```
public static void selectionSort(int[] elements) {
  for (int j = 0; j < elements.length - 1; j++) {
    int minIndex = j;
 
    for (int k = j + 1; k < elements.length; k++) {
      if (elements[k] < elements[minIndex]) {
        minIndex = k;
      }
    }
 
    if (j != minIndex) {
      int temp = elements[j];
      elements[j] = elements[minIndex];
      elements[minIndex] = temp;    // Line 19
    }
  }
}
```
 
The following declaration and method call appear in a method in the same class as `selectionSort`.

```
int[] ss = {10, 9, 8, 7, 6};
selectionSort(ss);
```
 
How many times is the statement `elements[minIndex] = temp;` in Line 19 of the method executed as a result of the call to `selectionSort`?
MARKDOWN

allow_multiple_attempts true
teacher_markdown <<MARKDOWN
Let's step through the code:

1. The `selectionSort` method is called with the array `ss` containing the values `{10, 9, 8, 7, 6}`.

2. The outer loop iterates from `j = 0` to `j < elements.length - 1`, which means it will run for indices 0, 1, 2, and 3.

3. In the first iteration (`j = 0`):
   - The variable `minIndex` is initialized to `0`.
   - The inner loop iterates from `k = j + 1` to `k < elements.length`, which means it will run for indices 1, 2, 3, and 4.
   - In each iteration of the inner loop, it checks if the value at index `k` (9, 8, 7, 6) is less than the value at index `minIndex` (10). Since the condition is satisfied, `minIndex` is updated to the current `k` value.
   - After the inner loop, it checks if `j` is not equal to `minIndex`. Since `0` is equal to `minIndex` (`0`), the condition is not satisfied, and no swap is performed.
   
4. In the second iteration (`j = 1`):
   - The variable `minIndex` is initialized to `1`.
   - The inner loop iterates from `k = j + 1` to `k < elements.length`, which means it will run for indices 2, 3, and 4.
   - In each iteration of the inner loop, it checks if the value at index `k` (8, 7, 6) is less than the value at index `minIndex` (`9`). Since the condition is satisfied, `minIndex` is updated to the current `k` value.
   - After the inner loop, it checks if `j` is not equal to `minIndex`. Since `1` is not equal to `minIndex` (`2`), the condition is satisfied, and a swap is performed. The values at indices 1 and 2 are swapped, resulting in the array `{10, 8, 9, 7, 6}`.
   
5. In the third iteration (`j = 2`):
   - The variable `minIndex` is initialized to `2`.
   - The inner loop iterates from `k = j + 1` to `k < elements.length`, which means it will run for indices 3 and 4.
   - In each iteration of the inner loop, it checks if the value at index `k` (7, 6) is less than the value at index `minIndex` (`9`). Since the condition is satisfied, `minIndex` is updated to the current `k` value.
   - After the inner loop, it checks if `j` is not equal to `minIndex`. Since `2` is equal to `minIndex` (`2`), the condition is not satisfied, and no swap is performed.

6. In the fourth iteration (`j = 3`):
   - The variable `minIndex` is initialized to `3`.
   - The inner loop iterates from `k = j + 1` to `k < elements.length`, which means it will run for index 4.
   - In this iteration of the inner loop, it checks if the value at index `k` (`6`) is less than the value at index `minIndex` (`7`). Since the condition is satisfied, `minIndex` is updated to the current `k` value.
   - After the inner loop, it checks if `j` is not equal to `minIndex`. Since 3 is not equal to `minIndex` (4), the condition is satisfied, and a swap is performed. The values at indices 3 and 4 are swapped, resulting in the array `{10, 8, 9, 6, 7}`.

After the completion of the `selectionSort` method, the array `ss` will contain the sorted values `{10, 8, 9, 6, 7}`.
MARKDOWN
