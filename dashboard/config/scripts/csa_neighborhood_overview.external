name 'CSA Neighborhood Overview'
title 'The Neighborhood'
description 'The Neighborhood is a non-interactive environment where the student writes code to achieve a goal. The Neighborhood consists of a rectangular grid of spaces that can contain obstacles or items, with a Painter object that can move around on the grid. Paint can be picked up or placed by a Painter object, and there is a destination that a Painter object can be navigating toward or the level can be open-ended to encourage creative "painted" designs.'

markdown <<MARKDOWN
#The Neighborhood
The Neighborhood is a non-interactive environment where the student writes code to achieve a goal. The Neighborhood consists of a rectangular grid of spaces that can contain obstacles or items, with a `Painter` object that can move around on the grid. Paint can be picked up or placed by a `Painter` object, and there is a destination that a `Painter` object can be navigating toward or the level can be open-ended to encourage creative "painted" designs.

The following are the constructors and methods in the `Painter` class.

##Constructors
| Constructor      |Description |
| ----------- |----------- |
| | &nbsp; |
| `public Painter()` | Creates a `Painter` object at (0, 0), facing east, with no paint       |
| | &nbsp; |
| `public Painter(int x, int y, String direction, int paint)` &nbsp;&nbsp;&nbsp;&nbsp; | Creates a `Painter` object        |
| | &nbsp; |
| | **Parameters:** |
| | * `x` — the x location of the `Painter` on the grid |
| | * `y` — the y location of the `Painter` on the grid |
| | * `direction` — the direction the `Painter` is facing |
| | * `paint` — the amount of paint the `Painter` has to start |




##Methods
| Method      |Description |
| ----------- |----------- |
|  | &nbsp; |
| `public void turnLeft()` | Turns the `Painter` one compass direction left (i.e. north -> west)      |
| | &nbsp; |
| `public void move()`  | Move the `Painter` one square forward in the direction the `Painter` is facing        |
| | &nbsp; |
| `public void paint(String color)`  | Add paint to the grid at the `Painter`'s location        |
| | **Parameters:** |
| | * `color` — the color of the paint being added |
| | &nbsp; |
| `public void scrapePaint()`  | Removes all paint on the square where the `Painter` is standing       |
| | &nbsp; |
| `public int getMyPaint()`  | **Returns:** the units of paint in the `Painter`'s bucket       |
| | &nbsp; |
| `public void takePaint()`  | The `Painter` adds a single unit of paint to their paint bucket. The counter on the bucket on the screen goes down. If the `Painter` is not standing on a paint bucket, nothing happens.       |
| | &nbsp; |
| `public boolean isOnPaint()`  | **Returns:** `true` if there is paint in the square where the `Painter` is standing        |
| | &nbsp; |
| `public boolean isOnBucket()`  | **Returns:** `true` if there is a paint bucket in the square where the `Painter` is standing       |
| | &nbsp; |
| `public boolean hasPaint()`  | **Returns:** `true` if the `Painter`'s personal bucket has paint in it        |
| | &nbsp; |
| `public boolean canMove(String direction)`&nbsp;&nbsp;&nbsp; | **Returns:** `true` if there is no barrier one square ahead in the requested direction       |
| | &nbsp; |
| `public boolean canMove()`  | **Returns:** `true` if there is no barrier one square ahead in the current direction       |
| | &nbsp; |
| `public String getColor()`  | **Returns:** the color of the square where the `Painter` is standing        |
| | &nbsp; |
| `public boolean facingNorth()`  | **Returns:** `true` if facing north       |
| | &nbsp; |
| `public boolean facingEast()`  | **Returns:** `true` if facing east       |
| | &nbsp; |
| `public boolean facingSouth()`  | **Returns:** `true` if facing south        |
| | &nbsp; |
| `public boolean facingWest()`  | **Returns:** `true` if facing west        |
MARKDOWN
