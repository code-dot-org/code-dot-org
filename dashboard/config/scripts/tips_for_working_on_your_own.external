name 'Tips For Working on Your Own'
title 'title'
description 'description here'
href 'path/to/html/in/asset/folder'
markdown <<MARKDOWN
# Tips for working on your own

As you are about to embark on your first solo project we thought it would be a good time to give you some tips.

## Tip 1: Have a "coding buddy" and "thought partner"

Working on your own doesn't mean working by yourself.  It's very useful to have someone nearby who you can use as a "thought partner". Many professionals work at the same table or desk, even if they are working on completely different projects, because of the benefits of having someone nearby.  There's a lot to remember and a lot to try to keep straight, so it's helpful to have someone nearby who provide another perspective.


<table style="width: 600px; display: block; margin: auto;">
<tr><th> What Thought Partners Do </th><th> How it might sound </th></tr>

<tr>
	<td> <br>Bounce ideas off each other<br></td>
    <td>"Hey, would it be cool if I tried x, y, or z?"</td></tr>

<tr>
	<td> <br>Share insights or discoveries they've made through their own programming<br></td>
    <td> "Whoa! I didn't know it could do that!  Check it out!"</td></tr>
<tr>
	<td> <br>Answer each other's questions in the moment<br> </td>
    <td> "What's the command to change the location of an object again?”</td></tr>
<tr>
	<td> <br>Help Double-check code and provide a second pair of eyes for debugging<br></td>
    <td> "Gah! This is driving me nuts.  Can you look at this? What am I not seeing?”</td>
    </tr>
</table>

## Tip 2. Persistence Pays off

When you are learning to program, you will inevitably run into problems.

As you get better, this doesn't change :)  Only the types of problems do.  Like anything else, over time you stop making the same mistakes you made as a novice, and in fact, you don't even think about them as mistakes.

**Remember**: 

1. No program ever works correctly the first time
2. The whole point is to build something up in small increments
3. You can't break anything. Add code, try it out.  Doesn't work? Get rid of it. Try something else. No big deal.
4. Add. Run. Test. Debug.

**Got problems?**:

* If you run into a snag where something isn't working stay calm and **work the problem** -- This is where having a program buddy and thought partner really helps.
* **There is a reason** why it's not working, you just have to find it.
* Once you've solved a problem or bug, **you've learned something** and you're less likely to make that same kind of mistake again.

**Stick with it.  It pays off!**



## Tip 3. Use online documentation - some new commands

You'll see we've included a more full toolbox of commands for you to use and experiment with.  Some of the commands may be new to you, but you can probably figure out how to use them if you **read the documentation**.

<img src="https://images.code.org/9214289573bee13904597e374ece8d15-image-1477513058922.png" style="width: 650px; display: block; margin: auto">

<div style="column-count: 2; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 2; width: 650px; margin: auto;">

<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">1.</span>
Hover your mouse over a block and it will show a tool tip with a brief explanation.</p>
<p><span style="font-weight: bold; color: #00adbc; font-size: 200%;">2.</span>
Click on "see examples" to expand the documentation. It gives more explanation plus code examples that show how it works.</p>
</div>

### With those lessons learned...click continue to start making your own app!
MARKDOWN

teacher_markdown <<MARKDOWN
### Teaching Tip

You may want to review the 3 things on this page as a whole class to kickoff to the upcoming project.

Especially true for talking about "coding buddies" which is a form of collaboration.

For this and future projects it's worth pointing out that *even if you're doing independent work, you can have a buddy to help you with technical problems and to bounce ideas off of.*  Remind students that:

  * It's not a competition!
  * Work on your own ideas, be generous when helping others. 
  * You should *always write your own code* but you can have a friend help you spot problems.

Plagiarism can present a gray area for students here.  

"Help" means:

  * Helping a friend work through their ideas
  * Helping a friend get "unstuck" from a bug of a particular kind.
  * Suggesting a strategy for getting something done.
  * Pointing out a cool idea

"Help" **does not** mean:

  * Writing code for a friend
  * Giving your project to a friend to use as a starting point
  * Telling your friend what to do
MARKDOWN
