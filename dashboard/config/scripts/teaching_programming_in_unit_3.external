name 'Teaching Programming in Unit 3'
css 'unplugged'
markdown <<MARKDOWN
# Teaching Programming in Unit 3
This unit has two basic teaching strategies which can feel very different: unplugged activities which are very kinesthetic and interactive, followed by learning to program for the first time in App Lab.    

We use unplugged activities to introduce algorithms to highlight the connection between algorithms, programming languages, and programming.  These activities will involve the whole class working in small groups to solve problems using playing cards and Legos(tm).

We then start using the App Lab programming environment to learn programming concepts through “turtle” programming. The turtle is a character that moves around the screen and can create drawing.  In the lessons students learn features of the JavaScript language by going through a series of short tutorials to get familiar with the environment and new concepts.  Typically, lessons are structured built with the following progression:

1. **Introduction to a new concept.** Here, students will typically watch a video and complete a simple level that introduces a concept or feature of JavaScript and App Lab. 
2. **Skill building with the new concept.** A handful of levels in the middle of the lesson that give students space to build their skills with the new concept or feature.
3. **Apply new knowledge to solve a problem.** These are typically the final levels of a lesson, and often present a more open ended challenge where students will need to apply what they've learned. 

While sometimes dictated by the lesson or problem itself, it is highly encouraged that you have students work in pairs, or with a programming “buddy”, at least as much if not more than they do working individually.  Not only do we want to build toward some enduring understandings (1.1 and 1.2) about collaboration and creativity, but it will also help you manage the classroom. 

## Philosophy of Programming in Unit 3

The setup of App Lab used here in unit 3  is very intentional, and it’s motivated by our philosophy of teaching programming. Since students are just being introduced to programming (in some cases for the first time), we strive to reduce the extraneous cognitive load - the stuff that could serve as a distraction or make it harder for the learner to access the material that is actually being taught. This is why we scope the toolbox, for example. When students are just getting started with a concept, we don’t want them to have to hunt for the right blocks or to get caught up with the syntax; instead we want them to be able to focus on the primary task of learning the new concept.

Here in unit 3 we focus on students gaining a basic understanding of how core concepts works and are implemented. Later, in unit 5 we will shift focus and begin to build open-ended projects that allow students to apply the knowledge in novel contexts.

## Teaching with Code Studio and App Lab

When students are working on lessons in App Lab teachers might sense a big shift in the feel of the classroom.  The lessons are delivered through a “level progression” in Code Studio - a series of small problems and exercises intended to teach new concepts and have students develop new skills.  Much of the presentation of new material, then, is done through Code Studio.  This approach is meant to allow students a bit more autonomy to learn and experiment with concepts, and to free the teacher to give individual attention where needed.  However, some teachers might feel a loss of control as students work at different paces and there are not obvious stopping or re-grouping points.  

When using an environment like Code Studio for the first time it can be easy to think or worry about the computer “doing the teaching” for you.  While it’s true that the lessons in Code studio were designed so that a student could proceed from beginning to end to learn each concept, it was built this way as a support for teachers. It allows a teacher who is not yet comfortable with teaching programming content or a particular concept to reasonably still deliver the lesson as they learn in parallel.  You should view Code Studio as a teaching resource, not the teacher.

It takes a little practice and time to understand the overall goals of each programming lesson but they tend to follow a pattern: 1. Introduce a concept, 2. Mimic some code 3. Build skills and practice with the concept 4. Apply the concept to solve a problem or create something new.  As a teacher, depending on your own comfort level with the content, you might “gain control” by:

* Introducing and demonstrating a concept yourself and having students skip to the problem or project at the end (and have students use the intermediary levels to get what they need “on demand”).
* Learn a new concept together as a group before breaking off into the skill building.
* Have students work in groups and check in with each other at each stage.
* Have students teach other students.
* Blaze your own trail and use Code Studio for remediation.

At a high level what you are trying to do is **establish a collaborative problem solving tone in the classroom**, cultivating an environment in which supportive ad-hoc collaboration starts to occur naturally.  When a student or pair comes up with a solution to a problem, or runs into a stumbling block, we want them to instinctively seek out others to check their thinking or review their code.  Doing this early will pay huge dividends down the line.

Part of establishing this environment is for you to model and convey things to help break certain stereotypes about programming and the nature of the work.  Especially early on you should convey as much as possible that there are **many right answers to every problem**. In the real world even if programs produce the desired output that is rarely the end of the story.  You need to ask, did I go about solving this well or efficiently?  Does my code make sense? Are there ways to break it? 

Students who are anxious about programming will ask if they got it “right” and by the same token many teachers are concerned about students cheating (copying and pasting code) to get the “right” answer.  This anxiety and fear is mitigated if there are always many different kinds of right answers.  Resist the urge to give them answers and rather suggest they do what programmers in the real world do: ask a friend or colleague. 

Still the line between on student “helping” another and cheating can be difficult to define at times.  Short of solving a problem themselves, we want students to be capable of writing their own code if a solution is described to them.  One mantra is: **“share ideas not code”.**


MARKDOWN
