name 'VPL - CSD - Module 7 - CI_2024'
editor_experiment ''
display_name 'Introduction to Debugging'

title 'Debugging Session'
markdown <<MARKDOWN
# Creating Apps with Devices - Lesson 4: Updating Screen Elements

<div style="background-color: #F7F8FA; border-radius: 40px; color: #000000; width: 95%; padding: 10px 10px 10px 10px;"> <p style="line-height: 1.5; margin-left: 10px; margin-right: 10px; margin-top: 20px; margin-bottom: 20px; font-size: 18px;">

#### <a href="https://studio.code.org/s/csd6a-2024/lessons/4" target="blank">U6AL4 Lesson Plan: Updating Screen Elements</a> (Circuit Playground)

#### <a href="https://studio.code.org/s/csd6b-2024/lessons/4" target="blank">U6BL4 Lesson Plan: Updating Screen Elements</a> (micro:bit)

##### **Note**: The level **types** below are the same across the Circuit Playground and the micro:bit versions of this lesson. The content in the levels, however, are different. Please make sure you are looking through the correct versions of the lesson plan.

</p></div>

## App Lab

#### Let's revisit App Lab and put on our ‚Äúteacher hat‚Äù here as we identify the level types students will encounter in Lesson 4. Then, we will wear our "student hat" during the following investigation in order to prepare supporting students as they engage with App Lab.
<br>

##### **Note:** You may feel more comfortable with App Lab if you have taught or plan to teach Unit 4 - The Design Process. If you need more practice using App Lap, consider taking more time during the next levels as well as going back to levels from Unit 4 - The Design Process on Code Studio. Share any questions you want your facilitator to address in the synchronous workshop in the ‚ÄúQuestions from Asynchronous Work‚Äù slide.
___

## Level Types in Lesson 4

#### Let's read about the different level types included in Lesson 4. Much of this is review from the <a href="https://docs.google.com/document/d/1fwXnkosoiHTJJuc2CGF9zEwl0NsUa20Z7THRk8cuZwg/edit?usp=drive_link" target="blank">CSD Guide to Programming Levels</a>, so feel free to skim through this content as you see fit.
<br>

#### ü§î **Predict Level - Level 1** 
* #### Students read working code, discuss the code with a partner, and then **predict** what the code will do before running it themselves. 
* #### Students aren‚Äôt expected to know the correct answer when first introduced to the code, but after seeing the code run and discussing the outcome, students can gain a stronger understanding of how the code works. 
<br>

#### üî® **Programming Level - Skill Building - Levels 2 - 6**
* #### **Skill Building levels** are designed to continue teaching new skills and blocks through exploration, trial-and-error, and using worked examples from pre-supplied code.
<br>
 
#### üèÉ **Programming Level - Practice - Level 7**
* #### **Practice levels** are designed for students to apply their knowledge from the previous levels and develop fluency in using the new blocks of code to solve problems. 
* #### Students can choose which practice levels they would like to complete, and it‚Äôs not necessary for a student to complete each practice level before continuing.
<br>

#### üìã **Assessment Level - Level 8**
* #### **Assessment levels** contain a single task that requires applying the skills and concepts from the level in order to solve.
* #### Students should complete these levels individually and you can use your judgment of how much external help students should have. 
* #### Mini rubrics are provided in the "Rubrics" tab.
<br>

#### üí™ **Programming Level - Challenge - Level 9**
* #### **Challenge levels** are designed as extensions to the concepts and skills students learn throughout a lesson. 
* #### Any new skills or coding commands introduced in these levels are not required for future lessons, but are offered as enrichment and additional practice. 
MARKDOWN
