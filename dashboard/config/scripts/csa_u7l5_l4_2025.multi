name 'CSA U7L5-L4_2025'
title 'Check for Understanding'

wrong 'Both objects will have the same quantity.'
wrong 'The `Product` object will have a lower quantity than the `LimitedProduct` object.'
right 'The `LimitedProduct` object will have a lower quantity than the `Product` object.'
wrong 'The `Product` object will have a lower quantity than the `LimitedProduct` object only if the limit for the `LimitedProduct` object is greater than the quantity of the `Product` object.'
wrong 'The `LimitedProduct` object will have a lower quantity than the `Product` object only if the limit for the `LimitedProduct` object is greater than the quantity of the `Product` object.'

allow_multiple_attempts true

markdown <<MARKDOWN
A company wants to create a system that tracks inventory levels for their products. The following code is used:

```
public class Product {
    private String name;
    private int quantity;

    public Product(String name, int quantity) {
        this.name = name;
        this.quantity = quantity;
    }

    public int getQuantity() {
        return quantity;
    }

    public void decreaseQuantity(int amount) {
        quantity -= amount;
    }
}

public class LimitedProduct extends Product {
    private int limit;

    public LimitedProduct(String name, int quantity, int limit) {
        super(name, quantity);
        this.limit = limit;
    }

    public void decreaseQuantity(int amount) {
        if (quantity - amount >= limit) {
            quantity -= amount;
        }
    }
}
```

Which of the following best describes the output of the code segment when a `Product` object and a `LimitedProduct` object are created with the same quantity and limit values?
MARKDOWN

teacher_markdown <<MARKDOWN
The `LimitedProduct` object will have a lower quantity than the `Product` object because the `decreaseQuantity()` method is overridden in the `LimitedProduct` class to enforce a limit on the quantity that can be decreased. If the new quantity after the decrease is less than the limit, the decrease is not performed. Therefore, the `LimitedProduct` object will always have a lower quantity than the `Product` object with the same quantity and limit values.
MARKDOWN