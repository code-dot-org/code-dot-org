name 'Adding Functionality to your App'
markdown <<MARKDOWN
# Adding Functionality to your App

Now that you've seen several ways to spice up an app with a bit of functionality, it's time to apply those techniques to your own app.

## Team Brainstorm

With your team, brainstorm ways that you could incorporate some of the techniques you've learned here into your app. As you are brainstorming consider:

* Duplicate screens that could be combined
* Places where users input information
* Elements that could be hidden or shown to simulate more advanced functionality

Once your team has come up with a list of potential functionality, choose one or two for each team member to attempt. Feel free to have multiple people try the same thing, or to try a wider variety across multiple team members.
MARKDOWN

teacher_markdown <<MARKDOWN
#### It's Okay to Break Things

Introducing new features or functionality always brings with it the risk of introducing new bugs, or breaking things entirely. Running into these problems is a natural part of software development, but it can be scary for students who have a deeply seeded fear of failure. As the lead learner you are in a position to model a healthy attitude towards these challenges. When students run into problems trying to add new functionality, encourage them to:

* Explain what has and has not changed since the app last worked
* Talk through any new code or design elements as if speaking to a non-technical user
* If there is a remix from the last working copy, open and compare
* If necessary, use version history to roll back to a previous working copy

#### Setting Limits

This lesson (like most programming project lessons) has the potential to take up as much time as you allow it to. If you have the time (and students have the interest) you can certainly make this a multi day lesson, but regardless of how much time you choose to give students to work on their apps, it's good to keep them focused on implementing small, discrete changes one at a time.

Implementing new features in small chunks is a good programming practice for students to learn, as it helps ensure that A) you are less likely to introduce a new bug and B) if you do introduce a bug, there's a much smaller range of changes where that bug could have come up. That alone is a good enough reason to keep your students working on small chunks of functionality, but it also has a classroom management benefit in that it's easier to stop the lesson and move on without worrying that too many loose threads are being left. It's much easier to stop (or wrap up) developing a 10 minute feature than it is to stop half way through a multi day feature.
MARKDOWN
