<GamelabJr>
  <config><![CDATA[{
  "game_id": 64,
  "created_at": "2022-02-23T21:02:02.000Z",
  "level_num": "custom",
  "user_id": 9,
  "properties": {
    "skin": "gamelab",
    "show_debug_watch": "true",
    "embed": "false",
    "instructions_important": "true",
    "submittable": "false",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "disable_procedure_autopopulate": "false",
    "top_level_procedure_autopopulate": "false",
    "use_modal_function_editor": "true",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "hide_share_and_remix": "true",
    "disable_if_else_editing": "false",
    "free_play": "false",
    "hide_animation_mode": "false",
    "start_in_animation_tab": "false",
    "all_animations_single_frame": "true",
    "hide_view_data_button": "false",
    "expand_debugger": "false",
    "debugger_disabled": "false",
    "pause_animations_by_default": "false",
    "edit_code": "false",
    "helper_libraries": [
      "NativeSpriteLab"
    ],
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "hide_custom_blocks": "true",
    "use_default_sprites": "false",
    "auto_run_setup": "DRAW_LOOP",
    "parent_level_id": 21663,
    "long_instructions": "*Now, let's use a new \"when touching\" event block to make your pet grow when it eats!*\r\n<xml><block type=\"gamelab_checkTouching\">\r\n      <title name=\"CONDITION\">\"when\"</title>\r\n      <value name=\"SPRITE1\">\r\n        <block type=\"gamelab_allSpritesWithAnimation\">\r\n          <title name=\"ANIMATION\">\"cuteanimals_bunny2_1\"</title>\r\n        </block>\r\n      </value>\r\n      <value name=\"SPRITE2\">\r\n        <block type=\"gamelab_allSpritesWithAnimation\">\r\n          <title name=\"ANIMATION\">\"face_carrot_1\"</title>\r\n        </block>\r\n      </value>\r\n    </block></xml>\r\n\r\n<div style=\"float:right\">\r\n\r\n![expandable](https://images.code.org/0446ed8942706d06824e9a79c35db5a6-image-1620760396986.2021-05-11 14_28_30.gif)\r\n\r\n</div>\r\n\r\n## Do This\r\n1. Drag out a `when touches` event block. Select your two sprites.\r\n2. Use a `change size` block below this event to make your pet grow.\r\n\r\n**Optional Challenge:**\r\n* Play a sound when your pet eats its food.",
    "show_type_hints": "true",
    "project_template_level_name": "Virtual Pet Template_2022_pilot",
    "include_shared_functions": "false",
    "block_pool": "gamelab",
    "block_pools": [
      "GamelabJr"
    ],
    "name_suffix": "_2022_pilot",
    "encrypted": "false",
    "mini_rubric": "false",
    "encrypted_examples": "t0FIJjGQtZaBtsn6jDfadoEG5fDoOl7jvOgR/w7UaiNEsl/cNaeD7b05uJnz\n+xCfF5nT8zP/EhMx0IZ1vPElm9QlMSTOi8/0RKeIv9MS/irG45OEuhdAY5z6\naA095j9dbUwi87qSDb0l7F5Z4BJ7og==\n",
    "teacher_markdown": "This lesson contains a **mini-project** called *Virtual Pet*. This progression may feel very different from what has come earlier in the course for you as well as your students. These levels have some new characteristics you may want to explore before starting. \r\n\r\n* The code your students write in one level will automatically transfer over to the other levels. This allows them to build gradually and iterate on their ideas as they learn.\r\n* These levels allow for more open-ended creativity. Empower your students to determine for themselves when they have completed each task. There is no one right answer! \r\n* Example solutions are available for this step of the progression which can be viewed by opening the teacher panel to the right.\r\n",
    "tts_long_instructions_override": "Now, let's use a new \"when touching\" event block to make your pet grow when it eats!",
    "hint_prompt_attempts_threshold": "1",
    "short_instructions": "Now, let's use a new \"when touching\" event block to make your pet grow when it eats!",
    "validation_enabled": "false",
    "validation_code": "if (!validationProps.successCriteria) {\r\n  validationProps.successCriteria = {\r\n    threeSprites: false,\r\n    uniqueCostumes: false,\r\n    hasFood: false,\r\n    hasPet: false,\r\n    initialSpritesNotTouching: true,\r\n    foodTouchedPet: false,\r\n    petGrewByTouch: false,\r\n    hasTouchEventBlock: false,\r\n    spritesTouched: false\r\n  };\r\n}\r\n\r\nif (!validationProps.previous) {\r\n  validationProps.previous = {};\r\n}\r\n\r\n// Helper function\r\nfunction checkEventLog(eventLog, eventType) {\r\n  for (var i = 0; i < eventLog.length; i++) {\r\n    if (eventLog[i].includes(eventType)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n// Helper variables\r\nvar spriteIds = getSpriteIdsInUse();\r\nvar eventLog = getEventLog();\r\n\r\n// Check for at least 2 sprites\r\nif (spriteIds.length >= 2) {\r\n  validationProps.successCriteria.twoSprites = true;\r\n}\r\n\r\n// Check for a draggable and non-draggable sprite\r\nfor (var i = 0; i < spriteIds.length; i++) {\r\n  var spriteId = spriteIds[i];\r\n\r\n  // checks if sprite is draggable\r\n  var behaviors = getBehaviorsForSpriteId(spriteId);\r\n  var draggable = behaviors.toString().includes(\"draggable\");\r\n\r\n  // if sprite draggable\r\n  if (draggable) {\r\n    // at least one sprite is draggable\r\n    validationProps.successCriteria.hasFood = true;\r\n\r\n  } else {\r\n    // at least one sprite is not draggable\r\n    validationProps.successCriteria.hasPet = true;\r\n  }\r\n}\r\n\r\n// Checks to see if sprites are touching\r\nif (World.frameCount == 1) {\r\n  for (var i = 0; i < spriteIds.length; i++) {\r\n    var outer = spriteIds[i];\r\n\r\n    for (var j = i+1; j < spriteIds.length; j++) {\r\n      var inner = spriteIds[j];\r\n      \r\n      if (isTouchingSprite({ id: outer }, { id: inner })) {\r\n        validationProps.successCriteria.initialSpritesNotTouching = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Check for whenTouch event\r\nif (checkEventLog(eventLog, \"whenTouch\")) {\r\n  validationProps.successCriteria.hasTouchEventBlock = true;\r\n\r\n  var currentEvent = eventLog[eventLog.length - 1] || \"\";\r\n  var spriteId = parseInt(currentEvent.split(\" \")[1]);\r\n  var targetId = parseInt(currentEvent.split(\" \")[2]);\r\n\r\n  var spriteBehaviors = getBehaviorsForSpriteId(spriteId);\r\n  var targetBehaviors = getBehaviorsForSpriteId(targetId);\r\n\r\n  var spriteDraggable = spriteBehaviors.toString().includes(\"draggable\");\r\n  var targetDraggable = targetBehaviors.toString().includes(\"draggable\");\r\n\r\n  // checks that exactly one sprite in the event is draggable\r\n  if (spriteDraggable && !targetDraggable) {\r\n    // spriteId is the draggable sprite\r\n    validationProps.successCriteria.foodTouchedPet = true;\r\n\r\n    var currentScale = getProp({ id: targetId  }, \"scale\");\r\n    var previous = validationProps.previous[targetId];\r\n\r\n    if (previous && currentScale != previous) {\r\n      validationProps.successCriteria.petGrewByTouch = true;\r\n    }\r\n  } else if (targetDraggable && !spriteDraggable) {\r\n    // targetId is the draggable sprite\r\n    validationProps.successCriteria.foodTouchedPet = true;\r\n\r\n    var currentScale = getProp({ id: spriteId  }, \"scale\");\r\n    var previous = validationProps.previous[spriteId];\r\n\r\n    if (previous && currentScale != previous) {\r\n      validationProps.successCriteria.petGrewByTouch = true;\r\n    }\r\n  }\r\n}\r\n\r\n// Do handshake if no whenTouch event in eventLog\r\nif (!validationProps.successCriteria.hasTouchEventBlock) {\r\n  // See if sprites touched\r\n  for (var i = 0; i < spriteIds.length; i++) {\r\n    var outer = spriteIds[i];\r\n    var outerBehaviors = getBehaviorsForSpriteId(outer);\r\n    var outerDraggable = outerBehaviors.toString().includes(\"draggable\");\r\n\r\n    // This doesn't check that one of the sprites is draggable and the other is not\r\n    for (var j = 0; j < spriteIds.length; j++) {\r\n      var inner = spriteIds[j];\r\n      var innerBehaviors = getBehaviorsForSpriteId(inner);\r\n      var innerDraggable = innerBehaviors.toString().includes(\"draggable\");\r\n\r\n      if (outer != inner && isTouchingSprite({ id: outer }, { id: inner })) {\r\n        validationProps.successCriteria.spritesTouched = true;\r\n\r\n        if (innerDraggable != outerDraggable) {\r\n          validationProps.successCriteria.foodTouchedPet = true;\r\n        }\r\n      }\r\n    }\r\n  } \r\n}\r\n\r\n// Storing sprite's scale\r\nfor (var i = 0; i < spriteIds.length; i++) {\r\n  validationProps.previous[spriteIds[i]] = getProp({ id: spriteIds[i] }, \"scale\");\r\n}\r\n\r\n// Set success time if success\r\nif (validationProps.successCriteria.hasFood &&\r\n    validationProps.successCriteria.hasPet &&\r\n    validationProps.successCriteria.initialSpritesNotTouching &&\r\n    validationProps.successCriteria.hasTouchEventBlock && \r\n    validationProps.successCriteria.petGrewByTouch &&\r\n   !validationProps.successTime)\r\n{\r\n  validationProps.successTime = World.frameCount;\r\n}\r\n\r\n// Delay fail time (so student can observe the wrong animation)\r\nvar earlyFailTime = 10;\r\nvar failTime = 150;\r\n\r\n// Check criteria and give failure feedback\r\nif (World.frameCount > earlyFailTime) {\r\n  if (!validationProps.successCriteria.twoSprites) {\r\n    console.log(\"You need to have two sprites. Make two sprites under the `when run` block.\");\r\n    levelFailure(3, \"createAtLeastTwoSprites\");\r\n  } else if (!validationProps.successCriteria.initialSpritesNotTouching) {\r\n    console.log(\"To start, make sure none of your sprites are touching. Use the pin on the location block to give them different locations.\");\r\n    levelFailure(3, \"startingSpritesShouldNotTouch\");\r\n  } else if (!validationProps.successCriteria.hasFood) {\r\n    console.log(\"Your pet's food sprite needs to begin the `being draggable` behavior.\");\r\n    levelFailure(3, \"createDraggableSprite\");\r\n  } else if (!validationProps.successCriteria.hasPet) {\r\n    console.log(\"Only the food sprite should be draggable. Remove the behavior from your pet.\");\r\n    levelFailure(3, \"createNotDraggableSPrite\");\r\n  }\r\n}\r\n\r\nif (World.frameCount > failTime) {\r\n  if (!validationProps.successCriteria.spritesTouched || !validationProps.successCriteria.foodTouchedPet) {\r\n    console.log(\"Drag your food sprite so it touches your pet sprite.\");\r\n    levelFailure(3, \"foodNotTouchPet\");\r\n  } else if (validationProps.successCriteria.spritesTouched && !validationProps.successCriteria.hasTouchEventBlock) {\r\n    console.log(\"Add a `when touching` event block and make your pet grow when it eats.\");\r\n    levelFailure(3, \"addWhenTouchesEvent\");\r\n  } else if (!validationProps.successCriteria.petGrewByTouch) {\r\n    console.log(\"Your food and pet touched, but your pet did not grow. Add the `change size` block to the `when touching` event block for your food and pet.\");\r\n    levelFailure(3, \"petNotGrowOnTouch\");  \r\n  }\r\n}\r\n\r\n// Pass 60 frames after success\r\nvar waitTime = 60;\r\nif (World.frameCount - validationProps.successTime >= waitTime && !mouseDown('left')) {\r\nconsole.log(\"Generic success\");\r\nlevelFailure(0, \"genericSuccess\");\r\n}\r\n\r\npush();\r\nstroke(\"white\");\r\nif (!validationProps.successCriteria.hasFood ||\r\n    !validationProps.successCriteria.hasPet ||\r\n    !validationProps.successCriteria.initialSpritesNotTouching ||\r\n    !validationProps.successCriteria.hasTouchEventBlock || \r\n    !validationProps.successCriteria.petGrewByTouch) {\r\nfill(rgb(118,102,160));\r\nrect(0,390,(World.frameCount*400/failTime),10);\r\n} else {\r\nfill(rgb(0,173,188));\r\nrect(0,390,((World.frameCount-validationProps.successTime)*400/waitTime),10);\r\n}\r\npop();\r\n",
    "mini_toolbox": "false",
    "hide_pause_button": "false",
    "instructions_icon": "dog",
    "soft_buttons": [
      "leftButton",
      "rightButton",
      "downButton",
      "upButton"
    ],
    "preload_asset_list": null
  },
  "published": true,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2022-02-23T21:02:02.632+00:00\",\"changed\":[\"cloned from \\\"Virtual Pet 52022\\\"\"],\"cloned_from\":\"Virtual Pet 52022\"}]",
  "level_concept_difficulty": {
    "sequencing": 4,
    "events": 2
  }
}]]></config>
  <blocks/>
</GamelabJr>