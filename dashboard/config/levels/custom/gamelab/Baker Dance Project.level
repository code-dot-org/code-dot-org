<Gamelab>
  <config><![CDATA[{
  "game_id": 50,
  "created_at": "2018-08-24T15:33:09.000Z",
  "level_num": "custom",
  "user_id": 53,
  "properties": {
    "skin": "gamelab",
    "code_functions": {
      "draw": null,
      "drawSprites": null,
      "playSound": null,
      "stopSound": null,
      "keyDown": null,
      "keyWentDown": null,
      "keyWentUp": null,
      "mouseDidMove": null,
      "mouseDown": null,
      "mouseIsOver": null,
      "mouseWentDown": null,
      "mouseWentUp": null,
      "mousePressedOver": null,
      "showMobileControls": null,
      "World.mouseX": null,
      "World.mouseY": null,
      "World.frameRate": null,
      "World.frameCount": null,
      "World.seconds": null,
      "World.width": null,
      "World.height": null,
      "World.allSprites": null,
      "camera.on": null,
      "camera.off": null,
      "camera.isActive": null,
      "camera.mouseX": null,
      "camera.mouseY": null,
      "camera.x": null,
      "camera.y": null,
      "camera.zoom": null,
      "comment_GameLab": null,
      "var sprite = createSprite": null,
      "setAnimation": null,
      "x": null,
      "y": null,
      "velocityX": null,
      "velocityY": null,
      "scale": null,
      "sprite.height": null,
      "sprite.width": null,
      "visible": null,
      "rotation": null,
      "rotationSpeed": null,
      "rotateToDirection": null,
      "debug": null,
      "isTouching": null,
      "collide": null,
      "displace": null,
      "overlap": null,
      "bounce": null,
      "bounceOff": null,
      "bounciness": null,
      "setCollider": null,
      "createEdgeSprites": null,
      "shapeColor": null,
      "tint": null,
      "setVelocity": null,
      "getDirection": null,
      "getSpeed": null,
      "setSpeedAndDirection": null,
      "pointTo": null,
      "mirrorX": null,
      "mirrorY": null,
      "getScaledWidth": null,
      "getScaledHeight": null,
      "lifetime": null,
      "nextFrame": null,
      "pause": null,
      "play": null,
      "setFrame": null,
      "depth": null,
      "destroy": null,
      "comment_Sprites": null,
      "var group = createGroup": null,
      "add": null,
      "remove": null,
      "clear": null,
      "contains": null,
      "get": null,
      "group.isTouching": null,
      "group.bounce": null,
      "group.bounceOff": null,
      "group.collide": null,
      "group.displace": null,
      "group.overlap": null,
      "maxDepth": null,
      "minDepth": null,
      "destroyEach": null,
      "pointToEach": null,
      "setAnimationEach": null,
      "setColorEach": null,
      "setColliderEach": null,
      "setDepthEach": null,
      "setHeightEach": null,
      "setLifetimeEach": null,
      "setMirrorXEach": null,
      "setMirrorYEach": null,
      "setRotateToDirectionEach": null,
      "setRotationEach": null,
      "setRotationSpeedEach": null,
      "setScaleEach": null,
      "setSpeedAndDirectionEach": null,
      "setTintEach": null,
      "setVelocityEach": null,
      "setVelocityXEach": null,
      "setVelocityYEach": null,
      "setVisibleEach": null,
      "setWidthEach": null,
      "comment_Groups": null,
      "background": null,
      "fill": null,
      "noFill": null,
      "stroke": null,
      "strokeWeight": null,
      "noStroke": null,
      "rgb": null,
      "rect": null,
      "ellipse": null,
      "text": null,
      "textAlign": null,
      "textFont": null,
      "textSize": null,
      "arc": null,
      "line": null,
      "point": null,
      "regularPolygon": null,
      "shape": null,
      "comment_Drawing": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "comment_Control": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRound": null,
      "mathAbs": null,
      "mathMax": null,
      "mathMin": null,
      "mathRandom": null,
      "comment_Math": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "console.log": null,
      "declareAssign_str_hello_world": null,
      "substring": null,
      "indexOf": null,
      "includes": null,
      "length": null,
      "toUpperCase": null,
      "toLowerCase": null,
      "declareAssign_list_abd": null,
      "listLength": null,
      "comment_Variables": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null,
      "comment": null
    },
    "show_debug_watch": "true",
    "helper_libraries": [
      "DanceLab"
    ],
    "embed": "false",
    "instructions_important": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "submittable": "false",
    "text_mode_at_start": "true",
    "hide_view_data_button": "false",
    "expand_debugger": "false",
    "debugger_disabled": "false",
    "hide_animation_mode": "false",
    "start_in_animation_tab": "false",
    "all_animations_single_frame": "false",
    "pause_animations_by_default": "false",
    "start_blocks": "var lineHeight = World.height;\r\nvar kickSize, snareSize, hatSize, fooSize;\r\n\r\n//setup Integer constants that represent each joint of the body\r\n// we will use these as indecies into an array of vectors representing each point\r\nvar PELVIS=0, LEFTKNEE=1, RIGHTKNEE=2, LEFTFOOT=3, RIGHTFOOT=4, CHEST=5, HEAD=6;\r\nvar LEFTSHOULDER=7, RIGHTSHOULDER=8, LEFTELBOW=9, RIGHTELBOW=10, LEFTHAND=11, RIGHTHAND=12;\r\n\r\n//Arrays of vectors for holding properties of each body point\r\n// note these are parallel arrays so...\r\n// bodyPoints[RIGHTFOOT] holds the actual x,y coordinate for the left foot\r\n// sizes[RIGHFOOT] uses the vector's x,y values as the size that the foot should be\r\n// etc.\r\nvar bodyPoints = [];\r\nvar offsets = [];\r\nvar targets = [];\r\nvar sizes = [];\r\n\r\nvar easing = [];  //each body part will have it's own easing factor as well.\r\nvar numParts = 13;\r\nvar DRAG_TARGET = PELVIS;\r\n\r\nvar moveCode=-1;\r\n\r\nfunction preload() {\r\n  Dance.song.load('https://s3.amazonaws.com/cdo-curriculum/media/uploads/chu.mp3');\r\n  //Dance.song.load('/api/v1/sound-library/category_background/jazzy_beats.mp3');\r\n}\r\n\r\nfunction setup() {\r\n  kickSize = snareSize = hatSize = fooSize = 16;\r\n  \r\n  for (var i=0; i<numParts; i++) {\r\n    bodyPoints[i] = createVector(0,0);\r\n    offsets[i] = createVector(0,0);\r\n    targets[i] = createVector(0,0);\r\n    easing[i] = 0.2;\r\n    sizes[i] = createVector(20,20);\r\n  }\r\n  \r\n  easing[HEAD] = 0.50;\r\n  easing[PELVIS] = 0.3;\r\n  sizes[HEAD] = createVector(40,40);\r\n  easing[RIGHTHAND] = 0.5;\r\n  easing[LEFTHAND] = 0.5;\r\n  \r\n    \r\n  \r\n  //SETUP targets for each body point\r\n  // The key to understanding the rag-doll character is to understand that each body\r\n  // part is ALWYAYS trying to move towards the body part it is connected to.\r\n  // For example the right foot is always trying to move toward the right knee.  So we\r\n  // say that the right foot's TARGET is the right knee.  When we animate, each body part\r\n  // tries to move (with some easing factor) toward its target.\r\n  targets[PELVIS] = bodyPoints[CHEST]; //note: this will be over-written by mouseX,mouseY in the draw loop\r\n  targets[LEFTKNEE] = bodyPoints[PELVIS];\r\n  targets[LEFTFOOT] = bodyPoints[LEFTKNEE];\r\n  \r\n  targets[RIGHTKNEE] = bodyPoints[PELVIS];\r\n  targets[RIGHTFOOT] = bodyPoints[RIGHTKNEE];\r\n  \r\n  targets[CHEST] = bodyPoints[PELVIS];\r\n  targets[HEAD] = bodyPoints[CHEST];\r\n  \r\n  targets[LEFTSHOULDER] = bodyPoints[CHEST];\r\n  targets[RIGHTSHOULDER] = bodyPoints[CHEST];\r\n  \r\n  targets[LEFTELBOW] = bodyPoints[LEFTSHOULDER];\r\n  targets[RIGHTELBOW] = bodyPoints[RIGHTSHOULDER];\r\n  \r\n  targets[LEFTHAND] = bodyPoints[LEFTELBOW];\r\n  targets[RIGHTHAND] = bodyPoints[RIGHTELBOW];\r\n  \r\n  \r\n  targets[DRAG_TARGET] = createVector(World.width/2, World.height/2);\r\n\r\n  \r\n  //Define offsets for each body point relative to its target\r\n  setDefaultOffsets();\r\n  \r\n  smooth();\r\n\r\n  /*\r\n  Dance.song.processPeaks(0, function(peaks) {\r\n    console.log(peaks);\r\n    processed_peaks = peaks;\r\n  });\r\n  */\r\n  Dance.fft.createPeakDetect(20, 200, 0.8, Math.round((60 / song_meta.bpm) * World.frameRate));\r\n  Dance.fft.createPeakDetect(400, 2600, 0.4, Math.round((60 / song_meta.bpm) * World.frameRate));\r\n  Dance.fft.createPeakDetect(2700, 4000, 0.5, Math.round((60 / song_meta.bpm) * World.frameRate));\r\n  Dance.song.start();\r\n}\r\n\r\n\r\nfunction setDefaultOffsets(){\r\n // So every body point is trying to move toward it's target MINUS\r\n // the offset given here.  For example, the Left knee should settle\r\n // at x=-30 and y=50 away from it's target (the pelvis).  These offsets\r\n // are what prevents the body points from all collapsing to a single point.\r\n // this basically defines the relative distance between each body part\r\n  offsets[LEFTKNEE] = createVector(-30,50);\r\n  offsets[RIGHTKNEE] = createVector(30,50);\r\n  offsets[LEFTFOOT] = createVector(0,50);\r\n  offsets[RIGHTFOOT] = createVector(0,50);\r\n\r\n  offsets[CHEST] = createVector(0,-50);\r\n  offsets[HEAD] = createVector(0,-32);\r\n  offsets[PELVIS] = createVector(0,0);\r\n  \r\n  offsets[LEFTSHOULDER] = createVector(-20,0);\r\n  offsets[RIGHTSHOULDER] = createVector(20,0);\r\n  \r\n  offsets[LEFTELBOW] = createVector(-20,30);\r\n  offsets[RIGHTELBOW] = createVector(20,30);\r\n\r\n  offsets[LEFTHAND] = createVector(-10,40);\r\n  offsets[RIGHTHAND] = createVector(10,40);\r\n  \r\n}\r\n\r\n\r\n\r\nfunction draw() {\r\n  Dance.fft.analyze();\r\n  colorMode(HSB);\r\n  background(Math.floor(map(Dance.fft.getCentroid(), 0, 4000, 0, 260)), 100, 100);\r\n  \r\n  //make Pelvis's target the mouse x,y\r\n  targets[DRAG_TARGET] = createVector(World.mouseX, World.mouseY);\r\n  \r\n  //reset all offsets back to their original values\r\n  setDefaultOffsets();\r\n  \r\n  // make a dance move based on the beat\r\n  var beatCount = 0;\r\n  if ( Dance.fft.isPeak(0) ){ beatCount++; danceMove('1'); }\r\n  if ( Dance.fft.isPeak(1) ){ beatCount++; danceMove('6'); }\r\n  if ( Dance.fft.isPeak(2) ){ beatCount++; danceMove('4'); }\r\n  if (beatCount >= 1){    danceMove('5'); }\r\n  \r\n  // Make a dance move based on a key press\r\n  //if(keyPressed){\r\n  //   danceMove(key);    \r\n  //}\r\n  \r\n  //update all the body points\r\n  updateBodyPoints();\r\n  \r\n  //draw all the points and lines\r\n  drawBody();\r\n}\r\n\r\nfunction keyPressed() {\r\n  danceMove(keyCode);\r\n}\r\n\r\nfunction danceMove(moveCode){\r\n  // A dance move effectively, temporarily, changes a body point's\r\n  // offset from its target.  Since the offset is reset with each iteration\r\n  // of the draw loop, the effect is that it allows a body part to move to a new location\r\n  // and then ease back to its original offset position.  \r\n if (moveCode=='8'){\r\n    offsets[HEAD].y+=15;\r\n    var amt = randomNumber(-1,1)*30;\r\n    targets[DRAG_TARGET].x += amt;\r\n    targets[DRAG_TARGET].x %= World.width;  \r\n    targets[DRAG_TARGET].x = Math.abs(targets[DRAG_TARGET].x);\r\n    offsets[LEFTHAND].x += amt*3;\r\n    offsets[LEFTELBOW].x +=amt*2;\r\n    offsets[RIGHTHAND].x += amt*3;\r\n    offsets[RIGHTELBOW].x +=amt*2;\r\n  }\r\n  else if(moveCode=='5'){\r\n    offsets[DRAG_TARGET].y +=40;\r\n    //offsets[DRAG_TARGET].x += 10;\r\n  }\r\n  else if(moveCode=='7'){\r\n    offsets[LEFTSHOULDER].y -= 10;\r\n    offsets[HEAD].x+=5;\r\n    offsets[HEAD].y+=2;\r\n\r\n  }\r\n  else if(moveCode=='6'){\r\n    offsets[RIGHTHAND] = createVector(10,-40);\r\n    offsets[RIGHTELBOW] = createVector(40,0);\r\n  }\r\n   else if(moveCode == '4'){\r\n    offsets[LEFTHAND] = createVector(-10,-40);\r\n    offsets[LEFTELBOW] = createVector(-40,0);\r\n  }\r\n  else if(moveCode=='1'){\r\n     offsets[LEFTFOOT] = createVector(0,30); \r\n  }\r\n}\r\n\r\nfunction drawBody(){\r\n  //draw lines between body points first\r\n  stroke(0);\r\n  for(var i=0; i<numParts; i++){\r\n    if(i!=DRAG_TARGET){\r\n     line(bodyPoints[i].x, bodyPoints[i].y, targets[i].x, targets[i].y);\r\n    }\r\n  }\r\n  //then draw the points points\r\n  for(var i=0; i<numParts; i++){\r\n    ellipse(bodyPoints[i].x, bodyPoints[i].y, sizes[i].x,sizes[i].y);\r\n  }\r\n}\r\n\r\nfunction updateBodyPoints(){\r\n  \r\n  // for each body part move it towards its target minus the offset\r\n  // NOTE: multiply by the easing factor so that it doesn't just jump to it's final\r\n  // location.  What we're doing is moving it some percentage of the way towards its\r\n  // target,\r\n  for(var i=0; i<numParts; i++){\r\n     bodyPoints[i].x += (targets[i].x-bodyPoints[i].x+offsets[i].x)*easing[i];\r\n     bodyPoints[i].y += (targets[i].y-bodyPoints[i].y+offsets[i].y)*easing[i]; \r\n  }\r\n  //console.log(offsets[LEFTSHOULDER]);\r\n}\r\n",
    "parent_level_id": 14474,
    "contained_level_names": null,
    "encrypted_examples": [

    ]
  },
  "published": true,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2018-08-16 17:16:00 +0000\",\"changed\":[\"notes\",\"code_functions\",\"show_debug_watch\",\"contained_level_names\"],\"changed_by_id\":53,\"changed_by_email\":\"test5@code.org\"},{\"changed_at\":\"2018-08-16 21:29:36 +0000\",\"changed\":[\"code_functions\",\"text_mode_at_start\",\"contained_level_names\"],\"changed_by_id\":53,\"changed_by_email\":\"test5@code.org\"},{\"changed_at\":\"2018-08-16 21:40:38 +0000\",\"changed\":[\"code_functions\",\"contained_level_names\",\"encrypted_examples\",\"start_blocks\"],\"changed_by_id\":53,\"changed_by_email\":\"test5@code.org\"},{\"changed_at\":\"2018-08-24 15:35:35 +0000\",\"changed\":[\"code_functions\",\"contained_level_names\"],\"changed_by_id\":1,\"changed_by_email\":\"josh@code.org\"},{\"changed_at\":\"2018-08-24 17:21:13 +0000\",\"changed\":[\"code_functions\",\"start_blocks\",\"contained_level_names\",\"encrypted_examples\"],\"changed_by_id\":1,\"changed_by_email\":\"josh@code.org\"},{\"changed_at\":\"2018-08-24 18:00:46 +0000\",\"changed\":[\"code_functions\",\"start_blocks\",\"contained_level_names\",\"encrypted_examples\"],\"changed_by_id\":1,\"changed_by_email\":\"josh@code.org\"},{\"changed_at\":\"2018-08-24 18:41:19 +0000\",\"changed\":[\"code_functions\",\"start_blocks\",\"contained_level_names\",\"encrypted_examples\"],\"changed_by_id\":1,\"changed_by_email\":\"josh@code.org\"}]",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Gamelab>