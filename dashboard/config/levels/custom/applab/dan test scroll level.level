<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2023-09-05T23:25:46.000Z",
  "level_num": "custom",
  "user_id": 14639,
  "properties": {
    "encrypted": "false",
    "skin": "applab",
    "validation_enabled": "true",
    "code_functions": {
      "onEvent": null,
      "button": null,
      "textInput": null,
      "textLabel": null,
      "dropdown": null,
      "getText": null,
      "setText": null,
      "getNumber": null,
      "setNumber": null,
      "checkbox": null,
      "radioButton": null,
      "getChecked": null,
      "setChecked": null,
      "image": null,
      "getImageURL": null,
      "setImageURL": null,
      "playSound": null,
      "stopSound": null,
      "playSpeech": null,
      "showElement": null,
      "hideElement": null,
      "deleteElement": null,
      "setPosition": null,
      "setSize": null,
      "setProperty": null,
      "getProperty": null,
      "write": null,
      "getXPosition": null,
      "getYPosition": null,
      "setScreen": null,
      "rgb": null,
      "open": null,
      "createCanvas": null,
      "setActiveCanvas": null,
      "line": null,
      "circle": null,
      "rect": null,
      "setStrokeWidth": null,
      "setStrokeColor": null,
      "setFillColor": null,
      "drawImageURL": null,
      "getImageData": null,
      "putImageData": null,
      "clearCanvas": null,
      "getRed": null,
      "getGreen": null,
      "getBlue": null,
      "getAlpha": null,
      "setRed": null,
      "setGreen": null,
      "setBlue": null,
      "setAlpha": null,
      "setRGB": null,
      "getColumn": null,
      "startWebRequest": null,
      "setKeyValue": null,
      "getKeyValue": null,
      "createRecord": null,
      "readRecords": null,
      "updateRecord": null,
      "deleteRecord": null,
      "onRecordEvent": null,
      "getUserId": null,
      "drawChart": null,
      "drawChartFromRecords": null,
      "getPrediction": null,
      "moveForward": null,
      "moveBackward": null,
      "move": null,
      "moveTo": null,
      "dot": null,
      "turnRight": null,
      "turnLeft": null,
      "turnTo": null,
      "arcRight": null,
      "arcLeft": null,
      "getX": null,
      "getY": null,
      "getDirection": null,
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "penRGB": null,
      "show": null,
      "hide": null,
      "speed": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "setTimeout": null,
      "clearTimeout": null,
      "timedLoop": null,
      "stopTimedLoop": null,
      "getTime": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "moduloOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRound": null,
      "mathAbs": null,
      "mathMax": null,
      "mathMin": null,
      "mathRandom": null,
      "mathPow": null,
      "mathSqrt": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "declareAssign_x_prompt": null,
      "declareAssign_x_promptNum": null,
      "console.log": null,
      "console.clear": null,
      "declareAssign_str_hello_world": null,
      "substring": null,
      "indexOf": null,
      "includes": null,
      "length": null,
      "toUpperCase": null,
      "toLowerCase": null,
      "declareAssign_list_abd": null,
      "declareAssign_list_123": null,
      "accessListItem": null,
      "listLength": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "join": null,
      "declareAssign_object": null,
      "getValue": null,
      "addPair": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null,
      "comment": null,
      "pinMode": null,
      "digitalWrite": null,
      "digitalRead": null,
      "analogWrite": null,
      "analogRead": null,
      "boardConnected": null,
      "var myLed = createLed": null,
      "var myButton = createButton": null,
      "var mySensor = createCapacitiveTouchSensor": null,
      "__.on": null,
      "__.off": null,
      "__.toggle": null,
      "__.blink": null,
      "__.pulse": null,
      "colorLeds[0].on": null,
      "colorLeds[0].off": null,
      "colorLeds[0].toggle": null,
      "colorLeds[0].blink": null,
      "colorLeds[0].pulse": null,
      "stop": null,
      "color": null,
      "intensity": null,
      "led.on": null,
      "led.off": null,
      "led.blink": null,
      "led.toggle": null,
      "led.pulse": null,
      "buzzer.frequency": null,
      "buzzer.note": null,
      "buzzer.stop": null,
      "buzzer.playNotes": null,
      "buzzer.playSong": null,
      "accelerometer.getOrientation": null,
      "accelerometer.getAcceleration": null,
      "isPressed": null,
      "holdtime": null,
      "soundSensor.value": null,
      "soundSensor.getAveragedValue": null,
      "soundSensor.setScale": null,
      "soundSensor.threshold": null,
      "lightSensor.value": null,
      "lightSensor.getAveragedValue": null,
      "lightSensor.setScale": null,
      "lightSensor.threshold": null,
      "tempSensor.F": null,
      "tempSensor.C": null,
      "toggleSwitch.isOpen": null,
      "onBoardEvent": null,
      "ledScreen.on": null,
      "ledScreen.off": null,
      "ledScreen.toggle": null,
      "ledScreen.display": null,
      "ledScreen.clear": null,
      "ledScreen.scrollNumber": null,
      "ledScreen.scrollString": null,
      "compass.getHeading": null
    },
    "embed": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "never_autoplay_video": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "hide_view_data_button": "false",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "fail_on_lint_errors": "false",
    "debugger_disabled": "false",
    "widget_mode": "false",
    "libraries_enabled": "true",
    "ai_enabled": "false",
    "start_html": "<div id=\"designModeViz\" class=\"appModern\" tabindex=\"1\" data-radium=\"true\" style=\"display: none; width: 320px; height: 450px;\"><div class=\"screen\" tabindex=\"1\" data-theme=\"default\" id=\"screen1\" style=\"display: block; height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255);\"></div></div>",
    "start_libraries": "[{\"name\":\"ScrollableScreen\",\"description\":\"Library for making scrollable screens in AppLab\",\"functions\":[\"makeScrollableScreen\",\"resetScroll\"],\"dropletConfig\":[{\"func\":\"ScrollableScreen.makeScrollableScreen\",\"category\":\"Functions\",\"comment\":\"Sets up the screen data to convert design mode elements to scrollable elements\\nscreenIds is an array of screen ids (strings) to combine into one scrollable screen.\\nAll of the elements are copied to the first screen in the array, in the order specified in the array\\nfor example: [\\\"screen1\\\", \\\"screen3\\\", \\\"screen2\\\"] will make a scrollable screen from screen1 to screen3 to screen2\\nREQUIREMENT: the first screen needs a slider on it, and the id is provided to scollId.\\neltIds is an array of all the elements to be moved to the sliding screen. It can include elements on the first screen too\\nEach element id should be of the form \\\"screen_type_id\\\", where:\\n- \\\"screen\\\" is the id of the screen it is on\\n- \\\"type\\\" is either [\\\"label\\\", \\\"button\\\", \\\"input\\\", \\\"dropdown\\\", \\\"image\\\", \\\"checkbox\\\", \\\"radio\\\"]\\n- \\\"id\\\" is a typical id\\nFor example: \\\"screen2_label_header\\\" is a valid id for this to work\",\"type\":\"either\",\"params\":[\"screenIds\",\"eltIds\",\"scrollId\",\"defaultScreen\"],\"paletteParams\":[\"screenIds\",\"eltIds\",\"scrollId\",\"defaultScreen\"]},{\"func\":\"ScrollableScreen.resetScroll\",\"category\":\"Functions\",\"comment\":\"Used to reset the scroll; called within the library\",\"type\":\"either\"}],\"source\":\"//TRUE CONSTANTS\\nvar SCREEN = {};\\nSCREEN.width = 320;\\nSCREEN.height = 450;\\n\\nvar SCROLL = {};\\nSCROLL.x = 85;\\nSCROLL.y = 210;\\nSCROLL.width = SCREEN.height;\\nSCROLL.height = 25;\\n\\n//PROPERTY CONSTANTS FOR DESIGN ELEMENTS\\nvar PROPERTIES = {};\\nPROPERTIES.label = [\\\"width\\\", \\\"height\\\", \\\"x\\\", \\\"y\\\", \\\"text-color\\\", \\\"background-color\\\", \\\"border-width\\\", \\\"border-color\\\", \\\"border-radius\\\", \\\"font-family\\\", \\\"font-size\\\", \\\"text-align\\\", \\\"text\\\", \\\"hidden\\\"]; \\nPROPERTIES.button = [\\\"width\\\", \\\"height\\\", \\\"x\\\", \\\"y\\\", \\\"text-color\\\", \\\"background-color\\\", \\\"border-width\\\", \\\"border-color\\\", \\\"border-radius\\\", \\\"font-family\\\", \\\"font-size\\\", \\\"text-align\\\", \\\"text\\\", \\\"hidden\\\", \\\"image\\\"];\\nPROPERTIES.input = [\\\"width\\\", \\\"height\\\", \\\"x\\\", \\\"y\\\", \\\"text-color\\\", \\\"background-color\\\", \\\"border-width\\\", \\\"border-color\\\", \\\"border-radius\\\", \\\"font-family\\\", \\\"font-size\\\", \\\"hidden\\\", \\\"placeholder\\\"];\\nPROPERTIES.dropdown = [\\\"width\\\", \\\"height\\\", \\\"x\\\", \\\"y\\\", \\\"text-color\\\", \\\"background-color\\\", \\\"border-width\\\", \\\"border-color\\\", \\\"border-radius\\\", \\\"font-family\\\", \\\"font-size\\\", \\\"hidden\\\", \\\"options\\\", \\\"index\\\"];\\nPROPERTIES.image = [\\\"width\\\", \\\"height\\\", \\\"x\\\", \\\"y\\\", \\\"border-width\\\", \\\"border-color\\\", \\\"border-radius\\\", \\\"hidden\\\", \\\"image\\\", \\\"fit\\\", \\\"icon-color\\\"];\\nPROPERTIES.radio = [\\\"width\\\", \\\"height\\\", \\\"x\\\", \\\"y\\\", \\\"hidden\\\", \\\"group-id\\\", \\\"checked\\\"];\\nPROPERTIES.checkbox = [\\\"width\\\", \\\"height\\\", \\\"x\\\", \\\"y\\\", \\\"hidden\\\", \\\"checked\\\"];\\n\\n//OBJECT FOR SETTING UP SCREENS\\nvar MODEL = {};\\n\\n\\n//Sets up the screen data to convert design mode elements to scrollable elements\\n//screenIds is an array of screen ids (strings) to combine into one scrollable screen.\\n//All of the elements are copied to the first screen in the array, in the order specified in the array\\n//for example: [\\\"screen1\\\", \\\"screen3\\\", \\\"screen2\\\"] will make a scrollable screen from screen1 to screen3 to screen2\\n//REQUIREMENT: the first screen needs a slider on it, and the id is provided to scollId.\\n//eltIds is an array of all the elements to be moved to the sliding screen. It can include elements on the first screen too\\n//Each element id should be of the form \\\"screen_type_id\\\", where:\\n//  - \\\"screen\\\" is the id of the screen it is on\\n//  - \\\"type\\\" is either [\\\"label\\\", \\\"button\\\", \\\"input\\\", \\\"dropdown\\\", \\\"image\\\", \\\"checkbox\\\", \\\"radio\\\"]\\n//  - \\\"id\\\" is a typical id\\n//For example: \\\"screen2_label_header\\\" is a valid id for this to work\\nfunction makeScrollableScreen(screenIds, eltIds, scrollId, defaultScreen) {\\n  var homeScreen = screenIds[0];\\n  MODEL[homeScreen] = {}; //make an entry in our model, represented by \\\"home screen\\\" of the scrollable screens\\n  \\n  var SCREENDATA = {};\\n  var SCROLLDATA = {};\\n  var SCROLLABLE_ELTS = [];\\n  \\n  SCREENDATA.screenIds = screenIds;\\n  SCREENDATA.eltIds = eltIds;\\n  \\n  SCROLLDATA.value = 0;\\n  SCROLLDATA.scrollable = (SCREENDATA.screenIds.length - 1) * SCREEN.height; //1 screen --> 0 scrollable area\\n  SCROLLDATA.id = scrollId;\\n  setPosition(scrollId, SCROLL.x, SCROLL.y, SCROLL.width, SCROLL.height);\\n  setStyle(scrollId, \\\"transform: rotate(90deg);\\\");\\n  setProperty(scrollId, \\\"value\\\", SCROLLDATA.value);\\n  setProperty(scrollId, \\\"min\\\", 0);\\n  setProperty(scrollId, \\\"max\\\", SCROLLDATA.scrollable);\\n  \\n  onEvent(scrollId, \\\"input\\\", function() {\\n    MODEL[homeScreen].SCROLLDATA.value = getNumber(scrollId);\\n    for(var i = 0; i < MODEL[homeScreen].SCROLLABLE_ELTS.length; i++) {\\n      var elt = MODEL[homeScreen].SCROLLABLE_ELTS[i];\\n      setProperty(elt.id, \\\"y\\\", elt.screenY - MODEL[homeScreen].SCROLLDATA.value);\\n    }\\n  });\\n  \\n  for(var i = 0; i < SCREENDATA.eltIds.length; i++) {\\n    var elt = SCREENDATA.eltIds[i];\\n    var eltSplit = elt.split(\\\"_\\\"); //get array of terms\\n    var eltScreen = eltSplit[0]; //which screen it was on\\n    var eltType = eltSplit[1]; //what type of elt it is so we can copy properties\\n    //var eltId = eltSplit[2] //the remaining identifying label - may not be used\\n    \\n    var tempElt = {\\n      \\\"id\\\": elt\\n    };\\n    \\n    var screenNum = -1;\\n    for(var j = 0; j < SCREENDATA.screenIds.length; j++) {\\n      var curScreen = SCREENDATA.screenIds[j];\\n      if(curScreen == eltScreen) {\\n        screenNum = j;\\n      }\\n    }\\n    if(screenNum == -1) { //quick error check\\n      console.log(\\\"POSSIBLE SCREEN TYPO ON \\\" + elt);\\n      continue;\\n    }\\n    \\n    //creates the offset for when it's on new screen for scrolling\\n    tempElt.screenY = getProperty(elt, \\\"y\\\") + (screenNum * SCREEN.height);\\n    \\n    var props = [];\\n    if(PROPERTIES.hasOwnProperty(eltType)) {\\n      props = PROPERTIES[eltType]\\n      tempElt.type = eltType;\\n    } else {\\n      console.log(\\\"POSSIBLE ELT TYPO ON \\\" + elt);\\n      continue;\\n    }\\n    \\n    //so now I know what screen it's on, stored in screenNum\\n    //and now I know what props to look for, stored in props\\n    //populate with items needed for recreating elt and for scrolling\\n    \\n    //populate with other properties\\n    for(var j = 0; j < props.length; j++) {\\n      tempElt[props[j]] = getProperty(elt, props[j]);\\n    }\\n    SCROLLABLE_ELTS.push(tempElt);\\n  }\\n  \\n  //now time to delete elts and move them\\n  setScreen(SCREENDATA.screenIds[0]);\\n  for(var i = 0; i < SCROLLABLE_ELTS.length; i++) {\\n    var elt = SCROLLABLE_ELTS[i];\\n    deleteElement(elt.id);\\n    if(elt.type == \\\"label\\\") {\\n      textLabel(elt.id, \\\"\\\");\\n    } else if (elt.type == \\\"button\\\") {\\n      button(elt.id, \\\"\\\");\\n    } else if (elt.type == \\\"input\\\") {\\n      textInput(elt.id, \\\"\\\");\\n    } else if (elt.type == \\\"dropdown\\\") {\\n      dropdown(elt.id, \\\"\\\");\\n    } else if (elt.type == \\\"image\\\") {\\n      image(elt.id, \\\"\\\");\\n    } else if (elt.type == \\\"radio\\\") {\\n      radioButton(elt.id, \\\"\\\");\\n    } else if (elt.type == \\\"checkbox\\\") {\\n      checkbox(elt.id, \\\"\\\");\\n    }\\n    var props = PROPERTIES[elt.type];\\n    for(var j = 0; j < props.length; j++) {\\n      if(elt[props[j]] != null) {\\n        setProperty(elt.id, props[j], elt[props[j]]);\\n      }\\n    }\\n    \\n    //update y position to match offset\\n    //setProperty(elt.id, \\\"y\\\", elt.screenY);\\n    setPosition(elt.id, elt.x, elt.screenY, elt.width, elt.height);\\n  }\\n  setScreen(defaultScreen);\\n  MODEL[homeScreen].SCREENDATA = SCREENDATA;\\n  MODEL[homeScreen].SCROLLDATA = SCROLLDATA;\\n  MODEL[homeScreen].SCROLLABLE_ELTS = SCROLLABLE_ELTS;\\n}\\n\\n//Used to reset the scroll; called within the library\\nfunction resetScroll() {\\n  for(var k in MODEL) {\\n    var scrollable = MODEL[k];\\n    setProperty(scrollable.SCROLLDATA.id, \\\"value\\\", 0);\\n    scrollable.SCROLLDATA.value = 0;\\n    for(var i = 0; i < scrollable.SCROLLABLE_ELTS.length; i++) {\\n      var elt = scrollable.SCROLLABLE_ELTS[i];\\n      setProperty(elt.id, \\\"y\\\", elt.screenY - scrollable.SCROLLDATA.value);\\n    }\\n  }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"originalName\":\"ScrollableScreen\",\"versionId\":\"PgB.a2jsRO7ScAuE1QOCbsweFyjtbMvj\",\"channelId\":\"cSl_zodihANTKagyEL9h2w\",\"fromLevelbuilder\":true}]",
    "preload_asset_list": null
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-09-05 23:25:51 +0000\",\"changed\":[\"validation_enabled\",\"code_functions\",\"preload_asset_list\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-09-05 23:26:15 +0000\",\"changed\":[\"code_functions\",\"preload_asset_list\",\"encrypted_examples\",\"libraries_enabled\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2023-09-05 23:27:05 +0000\",\"changed\":[],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>