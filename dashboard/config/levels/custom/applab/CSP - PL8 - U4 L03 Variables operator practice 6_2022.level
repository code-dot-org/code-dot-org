<Applab>
  <config><![CDATA[{
  "properties": {
    "skin": "applab",
    "code_functions": {
      "console.log": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "comment": null,
      "onEvent": null,
      "playSound": null,
      "setProperty": null
    },
    "embed": "false",
    "instructions_important": "false",
    "long_instructions": "The counter pattern can be used with strings too.\r\n\r\n# Do This\r\n\r\n* Run the program to see how it runs now. Note a new block: `getText()` on line 14. \r\n* Add code so that each reminder is added to a different line of code. Remember the new line character is `\\n`.\r\n* Add code so that the reminder input is cleared out when you click the Remind! button.\r\n* If you need a refresher on your patterns you can always check \"Help & Tips\".\r\n\r\n<span style=\"color:red\"><i>Note: This is the same level as U4L3 - Level 7 in the CS Principles Curriculum. It is not expected that you as a teacher discuss these with a partner, but rather think through the answers independently.</i></span>",
    "submittable": "false",
    "start_blocks": "// Create and assign variables\r\n// Feel free to change the reminder\r\nvar allReminders = \"Feed the cats\";\r\nvar newReminder;\r\n\r\n// Put the first reminder on the screen\r\nsetProperty(\"reminderText\", \"text\", allReminders);\r\n\r\n// When the button is clicked, add the new reminder\r\n// to the screen on a new line. The reminder\r\n// input box should be cleared out for the next\r\n// reminder.\r\nonEvent(\"reminderButton\", \"click\", function() {\r\n  newReminder = getText(\"reminderInput\");\r\n  allReminders = allReminders + newReminder;\r\n  setProperty(\"reminderText\", \"text\", allReminders);\r\n  \r\n  \r\n  \r\n  \r\n  \r\n});\r\n",
    "never_autoplay_video": "false",
    "slider_speed": "0.1",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "true",
    "validation_enabled": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "true",
    "beginner_mode": "false",
    "hide_view_data_button": "false",
    "show_debug_watch": "true",
    "expand_debugger": "true",
    "watchers_prepopulated": "[\"allReminders\",\"newReminder\"]",
    "fail_on_lint_errors": "false",
    "debugger_disabled": "true",
    "makerlab_enabled": "false",
    "parent_level_id": 16675,
    "palette_category_at_start": "variables",
    "mini_rubric": "false",
    "start_html": "<div id=\"designModeViz\" class=\"appModern\" tabindex=\"1\" data-radium=\"true\" style=\"display: none; width: 320px; height: 450px;\"><div class=\"screen\" tabindex=\"1\" id=\"screen1\" style=\"display: block; height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255);\" data-theme=\"classic\"><img data-canonical-image-url=\"icon://fa-question\" data-object-fit=\"contain\" id=\"question2\" style=\"height: 215px; width: 280px; position: absolute; left: 20px; top: 165px; margin: 0px; border-style: solid; border-width: 0px; border-color: rgb(0, 0, 0); border-radius: 0px;\" data-icon-color=\"rgba(138,137,137,0.3)\"><img data-canonical-image-url=\"icon://fa-question\" data-object-fit=\"contain\" id=\"question5\" style=\"height: 215px; width: 280px; position: absolute; left: 80px; top: 375px; margin: 0px; border-style: solid; border-width: 0px; border-color: rgb(0, 0, 0); border-radius: 0px;\" data-icon-color=\"rgba(138,137,137,0.3)\"><img data-canonical-image-url=\"icon://fa-question\" data-object-fit=\"contain\" id=\"question1\" style=\"height: 215px; width: 280px; position: absolute; left: -115px; top: 195px; margin: 0px; border-style: solid; border-width: 0px; border-color: rgb(0, 0, 0); border-radius: 0px;\" data-icon-color=\"rgba(138,137,137,0.3)\"><img data-canonical-image-url=\"icon://fa-question\" data-object-fit=\"contain\" id=\"question4\" style=\"height: 215px; width: 280px; position: absolute; left: -85px; top: 350px; margin: 0px; border-style: solid; border-width: 0px; border-color: rgb(0, 0, 0); border-radius: 0px;\" data-icon-color=\"rgba(138,137,137,0.3)\"><img data-canonical-image-url=\"icon://fa-question\" data-object-fit=\"contain\" id=\"question3\" style=\"height: 215px; width: 280px; position: absolute; left: 145px; top: 240px; margin: 0px; border-style: solid; border-width: 0px; border-color: rgb(0, 0, 0); border-radius: 0px;\" data-icon-color=\"rgba(138,137,137,0.3)\"><label style=\"margin: 0px; padding: 2px; line-height: 1; font-size: 14px; overflow: hidden; overflow-wrap: break-word; color: rgb(51, 51, 51); max-width: 320px; width: 320px; height: 250px; position: absolute; left: 0px; top: 0px; background-color: rgb(228, 204, 204); text-rendering: optimizespeed; border-style: solid; border-width: 0px; border-color: rgb(0, 0, 0); border-radius: 0px; font-family: Arial, Helvetica, sans-serif;\" id=\"background1\"></label><label style=\"margin: 0px; padding: 2px; line-height: 1; font-size: 18px; overflow: hidden; overflow-wrap: break-word; color: black; max-width: 320px; width: 280px; height: 200px; position: absolute; left: 20px; top: 20px; background-color: rgba(255, 255, 255, 0.4); text-rendering: optimizespeed; border-style: solid; border-width: 0px; border-color: rgb(0, 0, 0); border-radius: 0px; font-family: Arial, Helvetica, sans-serif;\" id=\"reminderText\">Feed the cats</label><input id=\"reminderInput\" style=\"margin: 0px; width: 290px; height: 30px; color: rgb(0, 0, 0); position: absolute; left: 15px; top: 270px; border-style: solid; border-width: 1px; border-color: rgb(153, 153, 153); border-radius: 0px; font-family: Arial, Helvetica, sans-serif; padding: 5px; background-color: rgb(255, 255, 255);\" placeholder=\"Add a new reminder\"><button id=\"reminderButton\" style=\"padding: 0px; margin: 0px; height: 80px; width: 170px; font-size: 36px; color: rgb(255, 255, 255); background-color: rgb(113, 141, 175); position: absolute; left: 75px; top: 335px; border-style: solid; border-width: 0px; border-color: rgb(0, 0, 0); border-radius: 0px; font-family: Arial, Helvetica, sans-serif;\">Remind!</button></div></div>",
    "encrypted_examples": "eKf3uUmizqnkLkERnr0u4GrEI4Klu+9zCVFyuCgf/caluyGZCW6apCumfEuB\nFAlY6R5HwzlTpzmp5AbWLpmaqw==\n",
    "reference_links": [
      "/courses/vpl-csp-2022/guides/counter-patterns-with-event",
      "/courses/vpl-csp-2022/guides/variable-with-string-concatenation-pattern"
    ],
    "encrypted": "false",
    "widget_mode": "false",
    "libraries_enabled": "false",
    "ai_enabled": "false",
    "name_suffix": "_2022",
    "preload_asset_list": null
  },
  "level_num": "custom",
  "game_id": 41,
  "created_at": "2022-04-26T18:56:07.000Z",
  "user_id": 106,
  "published": true,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2022-04-26T18:56:07.528+00:00\",\"changed\":[\"cloned from \\\"CSP - PL8 - U4 L03 Variables operator practice 6\\\"\"],\"cloned_from\":\"CSP - PL8 - U4 L03 Variables operator practice 6\"}]"
}]]></config>
  <blocks/>
</Applab>