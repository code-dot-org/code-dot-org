<Applab>
  <config><![CDATA[{
  "published": true,
  "game_id": 41,
  "created_at": "2023-12-07T15:27:59.000Z",
  "level_num": "custom",
  "user_id": 18603,
  "properties": {
    "encrypted": "false",
    "skin": "applab",
    "validation_enabled": "true",
    "code_functions": {
      "onEvent": null,
      "button": null,
      "textInput": null,
      "textLabel": null,
      "dropdown": null,
      "getText": null,
      "setText": null,
      "getNumber": null,
      "setNumber": null,
      "checkbox": null,
      "radioButton": null,
      "getChecked": null,
      "setChecked": null,
      "image": null,
      "getImageURL": null,
      "setImageURL": null,
      "playSound": null,
      "stopSound": null,
      "playSpeech": null,
      "showElement": null,
      "hideElement": null,
      "deleteElement": null,
      "setPosition": null,
      "setSize": null,
      "setProperty": null,
      "getProperty": null,
      "write": null,
      "getXPosition": null,
      "getYPosition": null,
      "setScreen": null,
      "rgb": null,
      "open": null,
      "createCanvas": null,
      "setActiveCanvas": null,
      "line": null,
      "circle": null,
      "rect": null,
      "setStrokeWidth": null,
      "setStrokeColor": null,
      "setFillColor": null,
      "drawImageURL": null,
      "getImageData": null,
      "putImageData": null,
      "clearCanvas": null,
      "getRed": null,
      "getGreen": null,
      "getBlue": null,
      "getAlpha": null,
      "setRed": null,
      "setGreen": null,
      "setBlue": null,
      "setAlpha": null,
      "setRGB": null,
      "getColumn": null,
      "startWebRequest": null,
      "setKeyValue": null,
      "getKeyValue": null,
      "createRecord": null,
      "readRecords": null,
      "updateRecord": null,
      "deleteRecord": null,
      "onRecordEvent": null,
      "getUserId": null,
      "drawChart": null,
      "drawChartFromRecords": null,
      "getPrediction": null,
      "moveForward": null,
      "moveBackward": null,
      "move": null,
      "moveTo": null,
      "dot": null,
      "turnRight": null,
      "turnLeft": null,
      "turnTo": null,
      "arcRight": null,
      "arcLeft": null,
      "getX": null,
      "getY": null,
      "getDirection": null,
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "penRGB": null,
      "show": null,
      "hide": null,
      "speed": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "setTimeout": null,
      "clearTimeout": null,
      "timedLoop": null,
      "stopTimedLoop": null,
      "getTime": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "moduloOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRound": null,
      "mathAbs": null,
      "mathMax": null,
      "mathMin": null,
      "mathRandom": null,
      "mathPow": null,
      "mathSqrt": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "declareAssign_x_prompt": null,
      "declareAssign_x_promptNum": null,
      "console.log": null,
      "console.clear": null,
      "declareAssign_str_hello_world": null,
      "substring": null,
      "indexOf": null,
      "includes": null,
      "length": null,
      "toUpperCase": null,
      "toLowerCase": null,
      "declareAssign_list_abd": null,
      "declareAssign_list_123": null,
      "accessListItem": null,
      "listLength": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "join": null,
      "declareAssign_object": null,
      "getValue": null,
      "addPair": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null,
      "comment": null,
      "pinMode": null,
      "digitalWrite": null,
      "digitalRead": null,
      "analogWrite": null,
      "analogRead": null,
      "boardConnected": null,
      "var myLed = createLed": null,
      "var myButton = createButton": null,
      "var mySensor = createCapacitiveTouchSensor": null,
      "__.on": null,
      "__.off": null,
      "__.toggle": null,
      "__.blink": null,
      "__.pulse": null,
      "colorLeds[0].on": null,
      "colorLeds[0].off": null,
      "colorLeds[0].toggle": null,
      "colorLeds[0].blink": null,
      "colorLeds[0].pulse": null,
      "stop": null,
      "color": null,
      "intensity": null,
      "led.on": null,
      "led.off": null,
      "led.blink": null,
      "led.toggle": null,
      "led.pulse": null,
      "buzzer.frequency": null,
      "buzzer.note": null,
      "buzzer.stop": null,
      "buzzer.playNotes": null,
      "buzzer.playSong": null,
      "accelerometer.getOrientation": null,
      "accelerometer.getAcceleration": null,
      "isPressed": null,
      "holdtime": null,
      "soundSensor.value": null,
      "soundSensor.getAveragedValue": null,
      "soundSensor.setScale": null,
      "soundSensor.threshold": null,
      "lightSensor.value": null,
      "lightSensor.getAveragedValue": null,
      "lightSensor.setScale": null,
      "lightSensor.threshold": null,
      "tempSensor.F": null,
      "tempSensor.C": null,
      "toggleSwitch.isOpen": null,
      "onBoardEvent": null,
      "ledScreen.on": null,
      "ledScreen.off": null,
      "ledScreen.toggle": null,
      "ledScreen.display": null,
      "ledScreen.clear": null,
      "ledScreen.scrollNumber": null,
      "ledScreen.scrollString": null,
      "compass.getHeading": null
    },
    "embed": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "never_autoplay_video": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "text_mode_at_start": "false",
    "hide_view_data_button": "false",
    "show_debug_watch": "true",
    "expand_debugger": "false",
    "debugger_disabled": "false",
    "libraries_enabled": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "fail_on_lint_errors": "false",
    "widget_mode": "false",
    "ai_enabled": "false",
    "long_instructions": "## Scrolling Through the List\r\n\r\nWe have declared and initialized our lists in order to contain all three portions of our bird data: names, pictures, and ranges. Now let's add some user-interactivity to **Birds of a Feather**!\r\n\r\n<br>\r\n\r\n3Ô∏è‚É£ While on the **homeScreen**, find the <code style=\"color:black; background-color:#fef088\">onEvent()</code> for <i>right&lowbar;Button</i> and <i>left&lowbar;Button</i>, and make the following updates:\r\n\r\n* Implement the **List Scrolling Pattern** so that as the user clicks <i>right&lowbar;Button</i> or <i>left&lowbar;Button</i>, the program increments or decrements the <span style=\"color: #bb77c7\">index</span> variable, respectively.\r\n\r\n<br>\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nMake sure that the value of <strong>index</strong> never goes below <strong>0</strong>, nor goes higher than the <code style=\"color:white; background-color:#bb77c7\">.length</code> of the list <strong>- 1</strong>.\r\n</div>\r\n\r\n<br>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n<summary style=\"font-size: 1.2em; font-weight: bold;\">üîé Need help with your algorithm?</summary>\r\n<div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n<p>The reference for the <strong>List Scrolling Pattern</strong> discussed in the previous lesson can be seen below:\r\n\r\n<br>\r\n\r\n![](https://images.code.org/a8ad7568d74ea0670eaa6aa06fb621b8-image-1678479429205.png)\r\n\r\n<br>\r\n\r\nYou can see an example of how we might implement this for the <code style=\"color:black; background-color:#fef088\">onEvent()</code> for <i>right&lowbar;Button</i> below. In this case, we used an <code style=\"color:black; background-color:#64b5f6\">If-Else</code> statement in order to make sure that if the user did attempt to go past the last element in the list, that it would loop back around to 0\r\n\r\n<br>\r\n\r\n![](https://images.code.org/3c48e546faf7c7fbf2863a2ce25858d1-image-1678910815379.png)\r\n\r\n<br>\r\n\r\nImplement a similar design for the <code style=\"color:black; background-color:#fef088\">onEvent()</code> for <i>left&lowbar;Button</i>\r\n\r\n</p>\r\n\r\n</div>\r\n\r\n</details>\r\n\r\n\r\n<br>\r\n\r\nüñ•Ô∏è **Test your code!** Run the program and see you can properly use the left and right buttons in order to scroll through all of the birds.\r\n<br>\r\n\r\n<hr>\r\n\r\n<br>\r\n\r\nWhile we are creating List Scrolling Patterns, let's also implement this pattern for the left and right buttons that appear on the **favoritesScreen**.\r\n\r\n\r\n3Ô∏è‚É£ Find the <code style=\"color:black; background-color:#fef088\">onEvent()</code> for <i>favorites&lowbar;Right</i> and <i>favorites&lowbar;Left</i>, and make the following updates:\r\n\r\n* Implement the **List Scrolling Pattern** so that as the user clicks <i>favorites&lowbar;Right</i> or <i>favorites&lowbar;Left</i>, the program increments or decrements the <span style=\"color: #bb77c7\">favoritesIndex</span> variable, respectively.\r\n\r\n<br>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n<summary style=\"font-size: 1.2em; font-weight: bold;\">üîé Need help with your algorithm?</summary>\r\n<div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n<p>The reference for the <strong>List Scrolling Pattern</strong> discussed in the previous lesson can be seen below:\r\n\r\n<br>\r\n\r\n![](https://images.code.org/a8ad7568d74ea0670eaa6aa06fb621b8-image-1678479429205.png)\r\n\r\n<br>\r\n\r\nWe will implement this code almost exactly like the way that we implemented scrolling for <i>right&lowbar;Button</i> and <i>left&lowbar;Button</i> previously.\r\n\r\n</p>\r\n\r\n</div>\r\n\r\n</details>\r\n\r\n<br>\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\n<strong>Note</strong>: We will need to test our List Scrolling Pattern to assure that it is working correctly after we finish creating the Add to Favorites functionality.\r\n</div>\r\n\r\n<br>\r\n\r\n<hr>\r\n\r\n## Random Birds\r\n\r\nOur birds are scrolling nicely across the screen. But sometimes you just want a more random bird to fly into your life. In that case, let's create a functional random button (seen here as a dice icon) that can return any old from the lists.\r\n\r\n<br>\r\n\r\n4Ô∏è‚É£ Find the <code style=\"color:black; background-color:#fef088\">onEvent</code> that corresponds to the <i>random&lowbar;button</i> element and code the following within the event:\r\n\r\n* Implement the <strong>Random Access Pattern</strong> discussed at the end of the previous <i>Investigate</i> lesson. Using the <code style=\"color:black; background-color:#ffb74d\">randomNumber()</code> command, set <span style=\"color: #bb77c7\">index</span> equal to a random value that from within the range of the lists containing our bird data.\r\n\r\n<br>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n<summary style=\"font-size: 1.2em; font-weight: bold;\">üîé Need help with your algorithm?</summary>\r\n\r\n<div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n\r\n<p>The reference for the Random Access Pattern discussed in the previous lesson can be seen below:\r\n\r\n![](https://images.code.org/9448f58b36529dd5beb009c8b8a58ed8-image-1678476194731.png)</p>\r\n\r\n<br>\r\n\r\n<div style=\"background-color: #ffffff; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\n\r\nüêõ <strong>Bug Alert!</strong> When attempting to access a random element within our list using the <code style=\"color:black; background-color:#ffb74d\">randomNumber(min, max)</code> command, make sure that the max value you set is equal to <code style=\"color:white; background-color:#bb77c7\">.length</code> <strong> - 1</strong> of our lists so that the program doesn't attempt to reference an element that does not exist in the list. </div>\r\n</div>\r\n\r\n</details>\r\n\r\n<br>\r\n\r\nüñ•Ô∏è Test your code! Click the Random Button at the bottom of the screen in order to see if a random bird (*non-alphabetical*) is displayed.\r\n\r\n<br>\r\n",
    "project_template_level_name": "U6_L03_Lists Practice_Choice_1-Template",
    "thumbnail_url": "https://images.code.org/6fffcfdae928bdffb1d48baac9fc4226-BoaF_titleCard.png",
    "display_name": "Birds of a Feather Part 4",
    "bubble_choice_description": "Spice Level: üå∂\r\n\r\nImplement and encourage user interactivity through scrolling and random patterns.",
    "encrypted_examples": "GfFXAUzZ3cGgDPXUZSyAGLZbBP2UnXmGPDRcROzi1bCb4V4KFavsn51O+lJC\n0oLBWd4xZ8y9gKZPYXp1qcp15w==\n",
    "preload_asset_list": null
  },
  "audit_log": "[{\"changed_at\":\"2023-12-07T15:27:59.053+00:00\",\"changed\":[\"cloned from \\\"U6_L03_Lists Practice_Choice_1-4\\\"\"],\"cloned_from\":\"U6_L03_Lists Practice_Choice_1-4\"},{\"changed_at\":\"2023-12-07 15:28:54 +0000\",\"changed\":[\"code_functions\",\"encrypted_examples\",\"preload_asset_list\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>