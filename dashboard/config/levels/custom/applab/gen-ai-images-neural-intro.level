<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2024-04-06T17:40:52.000Z",
  "level_num": "custom",
  "user_id": 14639,
  "properties": {
    "encrypted": "false",
    "skin": "applab",
    "validation_enabled": "true",
    "code_functions": {
      "onEvent": null,
      "button": null,
      "textInput": null,
      "textLabel": null,
      "dropdown": null,
      "getText": null,
      "setText": null,
      "getNumber": null,
      "setNumber": null,
      "checkbox": null,
      "radioButton": null,
      "getChecked": null,
      "setChecked": null,
      "image": null,
      "getImageURL": null,
      "setImageURL": null,
      "playSound": null,
      "stopSound": null,
      "playSpeech": null,
      "showElement": null,
      "hideElement": null,
      "deleteElement": null,
      "setPosition": null,
      "setSize": null,
      "setProperty": null,
      "getProperty": null,
      "write": null,
      "getXPosition": null,
      "getYPosition": null,
      "setScreen": null,
      "rgb": null,
      "open": null,
      "createCanvas": null,
      "setActiveCanvas": null,
      "line": null,
      "circle": null,
      "rect": null,
      "setStrokeWidth": null,
      "setStrokeColor": null,
      "setFillColor": null,
      "drawImageURL": null,
      "getImageData": null,
      "putImageData": null,
      "clearCanvas": null,
      "getRed": null,
      "getGreen": null,
      "getBlue": null,
      "getAlpha": null,
      "setRed": null,
      "setGreen": null,
      "setBlue": null,
      "setAlpha": null,
      "setRGB": null,
      "getColumn": null,
      "startWebRequest": null,
      "setKeyValue": null,
      "getKeyValue": null,
      "createRecord": null,
      "readRecords": null,
      "updateRecord": null,
      "deleteRecord": null,
      "getUserId": null,
      "drawChart": null,
      "drawChartFromRecords": null,
      "getPrediction": null,
      "moveForward": null,
      "moveBackward": null,
      "move": null,
      "moveTo": null,
      "dot": null,
      "turnRight": null,
      "turnLeft": null,
      "turnTo": null,
      "arcRight": null,
      "arcLeft": null,
      "getX": null,
      "getY": null,
      "getDirection": null,
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "penRGB": null,
      "show": null,
      "hide": null,
      "speed": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "setTimeout": null,
      "clearTimeout": null,
      "timedLoop": null,
      "stopTimedLoop": null,
      "getTime": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "moduloOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRound": null,
      "mathAbs": null,
      "mathMax": null,
      "mathMin": null,
      "mathRandom": null,
      "mathPow": null,
      "mathSqrt": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "declareAssign_x_prompt": null,
      "declareAssign_x_promptNum": null,
      "console.log": null,
      "console.clear": null,
      "declareAssign_str_hello_world": null,
      "substring": null,
      "indexOf": null,
      "includes": null,
      "length": null,
      "toUpperCase": null,
      "toLowerCase": null,
      "declareAssign_list_abd": null,
      "declareAssign_list_123": null,
      "accessListItem": null,
      "listLength": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "join": null,
      "declareAssign_object": null,
      "getValue": null,
      "addPair": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null,
      "comment": null,
      "pinMode": null,
      "digitalWrite": null,
      "digitalRead": null,
      "analogWrite": null,
      "analogRead": null,
      "boardConnected": null,
      "var myLed = createLed": null,
      "var myButton = createButton": null,
      "var mySensor = createCapacitiveTouchSensor": null,
      "__.on": null,
      "__.off": null,
      "__.toggle": null,
      "__.blink": null,
      "__.pulse": null,
      "colorLeds[0].on": null,
      "colorLeds[0].off": null,
      "colorLeds[0].toggle": null,
      "colorLeds[0].blink": null,
      "colorLeds[0].pulse": null,
      "stop": null,
      "color": null,
      "intensity": null,
      "led.on": null,
      "led.off": null,
      "led.blink": null,
      "led.toggle": null,
      "led.pulse": null,
      "buzzer.frequency": null,
      "buzzer.note": null,
      "buzzer.stop": null,
      "buzzer.playNotes": null,
      "buzzer.playSong": null,
      "accelerometer.getOrientation": null,
      "accelerometer.getAcceleration": null,
      "isPressed": null,
      "holdtime": null,
      "soundSensor.value": null,
      "soundSensor.setScale": null,
      "soundSensor.threshold": null,
      "lightSensor.value": null,
      "lightSensor.setScale": null,
      "lightSensor.threshold": null,
      "tempSensor.F": null,
      "tempSensor.C": null,
      "toggleSwitch.isOpen": null,
      "onBoardEvent": null,
      "ledScreen.on": null,
      "ledScreen.off": null,
      "ledScreen.toggle": null,
      "ledScreen.display": null,
      "ledScreen.clear": null,
      "ledScreen.scrollNumber": null,
      "ledScreen.scrollString": null,
      "compass.getHeading": null
    },
    "embed": "false",
    "long_instructions": "![](https://images.code.org/83edc2f72e9e674ee5efd992a8c2cdef-image-1712425359888.png)\r\n\r\n![](https://images.code.org/c7071ffb99b3a4dd5c3d38af21b263c1-image-1712425363470.png)\r\n\r\n![](https://images.code.org/448b2951c35c59665fd99b602753c649-image-1712425365672.png)\r\n\r\n![](https://images.code.org/78555fd3ecc6840157ce673d08177578-image-1712425375177.png)\r\n\r\n![](https://images.code.org/2d8ee3798c8b521b6e3b334e632a1fae-image-1712425376863.png)\r\n\r\n![](https://images.code.org/35161866a802e36cb6faa4b2a1259141-image-1712425378449.png)\r\n\r\n![](https://images.code.org/46509e1a20d90e3579f8f8f322873bc5-image-1712425380114.png)\r\n\r\n![](https://images.code.org/396ff06bd015c624c1dca1b691897a2f-image-1712425381846.png)\r\n\r\n![](https://images.code.org/09ef3dce54fb1f8bf6d9b5b5563bbed3-image-1712425383568.png)\r\n\r\n![](https://images.code.org/9fe91edab93ee3b43059517fa1c7d774-image-1712425385277.png)\r\n\r\n![](https://images.code.org/9d5bc2a21cb61e7c4978e76051b5a39b-image-1712425387595.png)\r\n\r\n![](https://images.code.org/a28cebd8cf82d794ec50c9f8ac73d1e1-image-1712425389400.png)\r\n\r\n![](https://images.code.org/829ea625c167ab159cd37e99d676ce5a-image-1712425391120.png)\r\n\r\n![](https://images.code.org/80de27244e264a5f67ef1348198c3061-image-1712425392661.png)\r\n\r\n![](https://images.code.org/e7c483436eff23a94d955ffad34e4bd5-image-1712425394364.png)\r\n\r\n![](https://images.code.org/60f2e0ece8c5385b857148c9a7f50163-image-1712425396220.png)\r\n\r\n![](https://images.code.org/3d251f63aa5d4c8a0da0751fd3d6bc37-image-1712425398715.png)\r\n\r\n![](https://images.code.org/deea8aec9f070e1c75f779070fed04bf-image-1712425400491.png)\r\n\r\n![](https://images.code.org/7612ded2c3d0ddfe69f88bccfab42dd2-image-1712425402272.png)\r\n\r\n![](https://images.code.org/68357c0b7fdcd9e95077c363773f91dd-image-1712425403941.png)\r\n\r\n![](https://images.code.org/964cf26c22e9e5270a9ea0118679358e-image-1712425405597.png)\r\n\r\n![](https://images.code.org/1c1a9a3bdb1bc4242e8c1c7d1e514a1a-image-1712425408056.png)\r\n\r\n![](https://images.code.org/adb69ab07737da5764335539b60ed808-image-1712425409757.png)\r\n\r\n![](https://images.code.org/88c731cbce923b0bc9acb3bc4612347d-image-1712425411413.png)\r\n\r\n![](https://images.code.org/d6897b159354fdde45a510078314aca1-image-1712425412999.png)\r\n\r\n![](https://images.code.org/c75db9e1d87483984a3647bc7cb00a6a-image-1712425414733.png)\r\n\r\n![](https://images.code.org/4c0c2b6593ac5099fae52f9725d600ee-image-1712425416412.png)\r\n\r\n![](https://images.code.org/e385ace7f998d84089a5280e7b0ef9ed-image-1712425418107.png)\r\n\r\n![](https://images.code.org/03b82ab0d8d1217d6877d56a1da28a87-image-1712425420822.png)\r\n\r\n![](https://images.code.org/1fbc2d9b170409697fb9053287baf4a1-image-1712425422383.png)\r\n\r\n![](https://images.code.org/d01a1a6547e5a44b1c46633097266367-image-1712425423905.png)\r\n\r\n![](https://images.code.org/91525d617c207d99f14ae07019232134-image-1712425425465.png)\r\n\r\n![](https://images.code.org/018a6b0d1e2ade6b7a38c10bf4928e80-image-1712425427135.png)\r\n\r\n![](https://images.code.org/ea7ae80eaa7e127ae74b00c4d5a0bafe-image-1712425428937.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "never_autoplay_video": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "text_mode_at_start": "false",
    "hide_view_data_button": "false",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "debugger_disabled": "false",
    "libraries_enabled": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "fail_on_lint_errors": "false",
    "widget_mode": "false",
    "ai_enabled": "false",
    "start_blocks": "              [\r\n  {\r\n    \"group\": 1,\r\n    \"slidesArray\": [],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 2,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 3,\r\n        \"image\": \"https://images.code.org/78555fd3ecc6840157ce673d08177578-image-1712425375177.png\",\r\n        \"content\": \"<i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong>  Complete this mad-lib: The __________ was dancing in rain\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> Notice that most answers are likely nouns, like “dog” or “firefly” or “leaf”\"\r\n      },\r\n      {\r\n        \"position\": 4,\r\n        \"image\": \"https://images.code.org/2d8ee3798c8b521b6e3b334e632a1fae-image-1712425376863.png\",\r\n        \"content\": \"<i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> Complete this mad-lib: Dancing was ___________ in the rain\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> Notice that most of the answers are likely adjectives, like “fun” or “disastrous” or “difficult”\"\r\n      },\r\n      {\r\n        \"position\": 5,\r\n        \"image\": \"https://images.code.org/35161866a802e36cb6faa4b2a1259141-image-1712425378449.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> All languages have grammatical rules that help construct valid sentences. You can’t just put random words together - you need things like nouns and verbs and adjectives, and they need to be in a certain order so sentences make sense. These rules create certain relationships within sentences themselves, like how a noun usually follows the word “The”.\"\r\n      },\r\n      {\r\n        \"position\": 6,\r\n        \"image\": \"https://images.code.org/46509e1a20d90e3579f8f8f322873bc5-image-1712425380114.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Language models represent these relationships with a special kind of network called a Neural Network. Today we’re going to learn what neural networks are and how they function, and then tomorrow we’ll learn how they’re used with language models\"\r\n      },\r\n      {\r\n        \"position\": 7,\r\n        \"image\": \"https://images.code.org/396ff06bd015c624c1dca1b691897a2f-image-1712425381846.png\",\r\n        \"content\": \"\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/78555fd3ecc6840157ce673d08177578-image-1712425375177.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong>  Complete this mad-lib: The __________ was dancing in rain\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> Notice that most answers are likely nouns, like “dog” or “firefly” or “leaf”\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/2d8ee3798c8b521b6e3b334e632a1fae-image-1712425376863.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> Complete this mad-lib: Dancing was ___________ in the rain\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> Notice that most of the answers are likely adjectives, like “fun” or “disastrous” or “difficult”\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/35161866a802e36cb6faa4b2a1259141-image-1712425378449.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> All languages have grammatical rules that help construct valid sentences. You can’t just put random words together - you need things like nouns and verbs and adjectives, and they need to be in a certain order so sentences make sense. These rules create certain relationships within sentences themselves, like how a noun usually follows the word “The”.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/46509e1a20d90e3579f8f8f322873bc5-image-1712425380114.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Language models represent these relationships with a special kind of network called a Neural Network. Today we’re going to learn what neural networks are and how they function, and then tomorrow we’ll learn how they’re used with language models\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/396ff06bd015c624c1dca1b691897a2f-image-1712425381846.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      \\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 3,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 9,\r\n        \"image\": \"https://images.code.org/9fe91edab93ee3b43059517fa1c7d774-image-1712425385277.png\",\r\n        \"content\": \"<i class=\\\"fa fa-file-text-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Distribute:</strong>  Pass out the Neural Network Activity Guide\\n\\t\\t<br />\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/9fe91edab93ee3b43059517fa1c7d774-image-1712425385277.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-file-text-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Distribute:</strong>  Pass out the Neural Network Activity Guide\\n\\t\\t<br />\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 4,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 9,\r\n        \"image\": \"\",\r\n        \"content\": \"**Teaching Tip: Erasable Materials:** Students will be drawing their own neural network and iterating on the design. This means students will be doing some trial and error, which will involve lots of erasing. If your classroom has them available, consider using whiteboards for this activity instead of the activity guide so students can quickly and easily erase their work as the lesson progresses. Or if students have 1:1 devices, consider using a collaborative drafting software such as Figma or Miro or Freeform. If students are using the printed activity guide, encourage students to use pencil so they can easily erase.\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      \\t\\t<br />Teaching Tip: Erasable Materials\\n\\t\\t<br />Students will be drawing their own neural network and iterating on the design. This means students will be doing some trial and error, which will involve lots of erasing. If your classroom has them available, consider using whiteboards for this activity instead of the activity guide so students can quickly and easily erase their work as the lesson progresses. Or if students have 1:1 devices, consider using a collaborative drafting software such as Figma or Miro or Freeform. If students are using the printed activity guide, encourage students to use pencil so they can easily erase.\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": false\r\n  },\r\n  {\r\n    \"group\": 5,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 10,\r\n        \"image\": \"https://images.code.org/9d5bc2a21cb61e7c4978e76051b5a39b-image-1712425387595.png\",\r\n        \"content\": \"<i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Read the slide to the class, or ask the class to read it aloud.\\n\\t\\t<br />\\n\\t\\t<br />We are helping a computer design meals for an elementary school cafeteria. To start this process, we spent several days observing students during lunch and made the following observations:\\n\\t\\t<br />- Students will eat avocados\\n\\t\\t<br />- Students will eat ice cream\\n\\t\\t<br />- Students won’t eat raisins\\n\\t\\t<br />- Some students eat peanuts and some don’t\"\r\n      },\r\n      {\r\n        \"position\": 11,\r\n        \"image\": \"https://images.code.org/a28cebd8cf82d794ec50c9f8ac73d1e1-image-1712425389400.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We can represent this with a network. On the left side, we have our inputs - in this case, avocados, ice cream, raisins, and peanuts. \\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> On the right side, we have our output states: accept or reject.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We can draw lines that connect the inputs to the output. These connections represent our decisions - when the model sees avocados, it will accept the meal and eat it. And when it sees raisins, it will reject the meal and won’t eat it.\\n\\t\\t<br />\"\r\n      }\r\n    ],\r\n    \"table\": \"<table>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/9d5bc2a21cb61e7c4978e76051b5a39b-image-1712425387595.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Read the slide to the class, or ask the class to read it aloud.\\n\\t\\t<br />\\n\\t\\t<br />We are helping a computer design meals for an elementary school cafeteria. To start this process, we spent several days observing students during lunch and made the following observations:\\n\\t\\t<br />- Students will eat avocados\\n\\t\\t<br />- Students will eat ice cream\\n\\t\\t<br />- Students won’t eat raisins\\n\\t\\t<br />- Some students eat peanuts and some don’t\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/a28cebd8cf82d794ec50c9f8ac73d1e1-image-1712425389400.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We can represent this with a network. On the left side, we have our inputs - in this case, avocados, ice cream, raisins, and peanuts. \\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> On the right side, we have our output states: accept or reject.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We can draw lines that connect the inputs to the output. These connections represent our decisions - when the model sees avocados, it will accept the meal and eat it. And when it sees raisins, it will reject the meal and won’t eat it.\\n\\t\\t<br />\\n    </td>\\n  </tr>\\n\\n</table>\",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 6,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 11,\r\n        \"image\": \"\",\r\n        \"content\": \"**Teaching Tip: Structure vs Creativity:** The remainder of this activity uses these inputs, especially Avocados and Ice Cream, to teach new topics - we will frequently refer back to these inputs and iterate. Students will apply what they learn by adding new inputs and connections based on their personal preferences. This means student activity guides should look very similar around these inputs and what is presented on the slides, but will diverge quickly when students make these networks their own. Keep this in mind when looking over student shoulders and checking that students are on-task and following along.\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      \\t\\t<br />Teaching Tip: Structure vs Creativity\\n\\t\\t<br />The remainder of this activity uses these inputs, especially Avocados and Ice Cream, to teach new topics - we will frequently refer back to these inputs and iterate. Students will apply what they learn by adding new inputs and connections based on their personal preferences. This means student activity guides should look very similar around these inputs and what is presented on the slides, but will diverge quickly when students make these networks their own. Keep this in mind when looking over student shoulders and checking that students are on-task and following along.\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": false\r\n  },\r\n  {\r\n    \"group\": 7,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 12,\r\n        \"image\": \"https://images.code.org/829ea625c167ab159cd37e99d676ce5a-image-1712425391120.png\",\r\n        \"content\": \"<i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> \\n\\t\\t<br />1) Draw the network so far on your paper\\n\\t\\t<br />2) Since the data was inconclusive, decide how you want your network to handle peanuts - will your model accept or reject?\\n\\t\\t<br />3) Add two other foods to your network and decide if you want to accept or reject them\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Make sure students are representing the network correctly based on the last slide. Also make sure students decide how they want to handle peanuts and have added 2 more foods to their network. By the end of this section, students should have 6 inputs on their network.\"\r\n      },\r\n      {\r\n        \"position\": 13,\r\n        \"image\": \"https://images.code.org/80de27244e264a5f67ef1348198c3061-image-1712425392661.png\",\r\n        \"content\": \"<i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Read the slide to the class, or ask the class to read it aloud.\\n\\t\\t<br />\\n\\t\\t<br />While testing our network at the school, something unexpected happened: the network suggested an avocado covered in ice cream! And no one would eat it!!\\n\\t\\t<br />\\n\\t\\t<br />[Image credit: Created with DALL-E with the prompt “generate an image of an avocado covered in ice cream in a clip art style 100px by 100px”]\"\r\n      },\r\n      {\r\n        \"position\": 14,\r\n        \"image\": \"https://images.code.org/e7c483436eff23a94d955ffad34e4bd5-image-1712425394364.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Even though we might think this is unusual, our network thought this was very reasonable since our data showed everyone likes Ice Cream and everyone likes Avocados, so it thought everyone would like Ice Cream on Avocados.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> But it turns out, when these foods were combined, everyone had a different reaction and rejected them! With this new data, it’s time to update our network\"\r\n      },\r\n      {\r\n        \"position\": 15,\r\n        \"image\": \"https://images.code.org/60f2e0ece8c5385b857148c9a7f50163-image-1712425396220.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We’re going to start by erasing the connections we initially made…\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> And instead we’re going to add a column of circles in the middle of our network…\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> These circles are called nodes, and we can draw connections from our inputs to represent the relationships between our input foods. \\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> This is called a hidden layer in our network because it’s not part of the inputs or outputs we usually see when making a decision. It’s used to add extra information that helps make a decision and represent relationships between inputs.\"\r\n      },\r\n      {\r\n        \"position\": 16,\r\n        \"image\": \"https://images.code.org/3d251f63aa5d4c8a0da0751fd3d6bc37-image-1712425398715.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Let’s use this hidden layer to represent the relationship between ice cream and avocados\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Here’s how we can connect our network to represent what we knew from our initial data. When we just have avocados, or when we just have ice cream: we will eat those foods\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Here’s how we can connect our network to represent what we learned about avocados and ice cream combined. When we have both of these foods, we want to reject that meal since no one will eat it\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Since the hidden layers are “activated” by previous layers, it can feel similar to how our brains work and how some neurons can activate other neurons to create chain-reactions and complex thoughts. These hidden layers and how they activate is what makes this a Neural Network.\"\r\n      },\r\n      {\r\n        \"position\": 17,\r\n        \"image\": \"https://images.code.org/deea8aec9f070e1c75f779070fed04bf-image-1712425400491.png\",\r\n        \"content\": \"<i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong>\\n\\t\\t<br />1) Draw additional nodes in your hidden layer\\n\\t\\t<br />2) Update your network to represent different relationships and decisions\\n\\t\\t<br />  - What happens if every single food was on the same plate? \\n\\t\\t<br />  - Are some combinations still good? Are some combinations bad?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Make sure students are adding more nodes to their hidden layer and representing different combinations. Ask students what kind of relationships they are trying to represent with the network connections. Networks will start to get complex, which is okay since it can lead to students realizing how simple rules like “making a network” can lead to very complex behaviors. By the end of this section, students should have a hidden layer with multiple inputs and connections to the outputs.\"\r\n      },\r\n      {\r\n        \"position\": 18,\r\n        \"image\": \"https://images.code.org/7612ded2c3d0ddfe69f88bccfab42dd2-image-1712425402272.png\",\r\n        \"content\": \"<i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Read the slide to the class, or ask the class to read it aloud.\\n\\t\\t<br />\\n\\t\\t<br />While testing our network at the school, we found a weird bug: sometimes the network will freeze and won’t make any decision at all!  This tends to happen when both avocado and ice cream are suggested, even if they’re given individually instead of combined.\"\r\n      },\r\n      {\r\n        \"position\": 19,\r\n        \"image\": \"https://images.code.org/68357c0b7fdcd9e95077c363773f91dd-image-1712425403941.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We can try testing the network with just avocado…\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> And we see that one pathway is activated, so we know this is a meal students are likely to accept\"\r\n      },\r\n      {\r\n        \"position\": 20,\r\n        \"image\": \"https://images.code.org/964cf26c22e9e5270a9ea0118679358e-image-1712425405597.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We can also try testing the network with just ice cream…\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> And we see that one pathway is activated, so we know this is a meal students are likely to accept\"\r\n      },\r\n      {\r\n        \"position\": 21,\r\n        \"image\": \"https://images.code.org/1c1a9a3bdb1bc4242e8c1c7d1e514a1a-image-1712425408056.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> But when we try with both an avocado and ice cream…\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Multiple paths are lit up! And it looks like two different decisions are being made! This must be the bug we saw where the network would freeze - it doesn’t know which decision to make since both are activated!\"\r\n      },\r\n      {\r\n        \"position\": 22,\r\n        \"image\": \"https://images.code.org/adb69ab07737da5764335539b60ed808-image-1712425409757.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> One thing neural networks use to help solve this problem is adding numbers to connections, called Weights.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> For example, we can add lower weights to the “just avocados” and “just ice-cream” connections, and a higher weight to the “both” connection.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> When we combine the weights at the end, the network can look at the total weight and use that to make a final decision\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> In this case, the Reject decision has a higher weight, so that’s what the model would decide to do.\"\r\n      },\r\n      {\r\n        \"position\": 23,\r\n        \"image\": \"https://images.code.org/88c731cbce923b0bc9acb3bc4612347d-image-1712425411413.png\",\r\n        \"content\": \"<i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong>\\n\\t\\t<br />1) Add more weights to your network to represent different combinations and how to make decisions\\n\\t\\t<br />  - For example: maybe there’s one food in particular that, no matter what else is on the plate, makes you want to reject the meal.\\n\\t\\t<br />  - You can add up to 2 new inputs to your network if you’d like to represent additional food combinations\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Check in with students as they are adding weights. Ask students what they are trying to represent with their decisions, listening for intentional decisions behind certain weights and combinations. If students are stuck, cue them to consider situations where several items may “add up” to a positive meal (like just ice-cream isn’t enough, but ice-cream with peanuts is delicious). Or consider how things they dislike might outweigh everything else. By the end of this section, students should have weights on most of their connections to their outputs.\"\r\n      },\r\n      {\r\n        \"position\": 24,\r\n        \"image\": \"https://images.code.org/d6897b159354fdde45a510078314aca1-image-1712425412999.png\",\r\n        \"content\": \"<i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Read the slide to the class, or ask the class to read it aloud.\\n\\t\\t<br />\\n\\t\\t<br />The network is doing much better, but one area that’s still difficult is how the network recommends peanuts, since the initial data was inconclusive. So, a team decided to go out and interview students, where they learned that many students are allergic to peanuts! This means they need to avoid peanuts at all cost so they don’t have a fatal reaction!\"\r\n      },\r\n      {\r\n        \"position\": 25,\r\n        \"image\": \"https://images.code.org/c75db9e1d87483984a3647bc7cb00a6a-image-1712425414733.png\",\r\n        \"content\": \"<i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> Using what we’ve learned, how should we update our network to represent that any peanuts in a meal should be rejected?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> Students should apply what they’ve learned about hidden layers and weights to represent this situation, aiming for a representation where peanuts is connected to “Reject” with a very very high weight. One possible way to do this is to create a new node in the hidden layer with a single connection from peanuts to this node and then to “Reject”, and give this connection a high weight. This makes it so anytime peanuts appear, this node is activated, which causes a very high “Reject” signal to be sent through the network.\\n\\t\\t<br />\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/829ea625c167ab159cd37e99d676ce5a-image-1712425391120.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> \\n\\t\\t<br />1) Draw the network so far on your paper\\n\\t\\t<br />2) Since the data was inconclusive, decide how you want your network to handle peanuts - will your model accept or reject?\\n\\t\\t<br />3) Add two other foods to your network and decide if you want to accept or reject them\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Make sure students are representing the network correctly based on the last slide. Also make sure students decide how they want to handle peanuts and have added 2 more foods to their network. By the end of this section, students should have 6 inputs on their network.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/80de27244e264a5f67ef1348198c3061-image-1712425392661.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Read the slide to the class, or ask the class to read it aloud.\\n\\t\\t<br />\\n\\t\\t<br />While testing our network at the school, something unexpected happened: the network suggested an avocado covered in ice cream! And no one would eat it!!\\n\\t\\t<br />\\n\\t\\t<br />[Image credit: Created with DALL-E with the prompt “generate an image of an avocado covered in ice cream in a clip art style 100px by 100px”]\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/e7c483436eff23a94d955ffad34e4bd5-image-1712425394364.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Even though we might think this is unusual, our network thought this was very reasonable since our data showed everyone likes Ice Cream and everyone likes Avocados, so it thought everyone would like Ice Cream on Avocados.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> But it turns out, when these foods were combined, everyone had a different reaction and rejected them! With this new data, it’s time to update our network\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/60f2e0ece8c5385b857148c9a7f50163-image-1712425396220.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We’re going to start by erasing the connections we initially made…\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> And instead we’re going to add a column of circles in the middle of our network…\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> These circles are called nodes, and we can draw connections from our inputs to represent the relationships between our input foods. \\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> This is called a hidden layer in our network because it’s not part of the inputs or outputs we usually see when making a decision. It’s used to add extra information that helps make a decision and represent relationships between inputs.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/3d251f63aa5d4c8a0da0751fd3d6bc37-image-1712425398715.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Let’s use this hidden layer to represent the relationship between ice cream and avocados\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Here’s how we can connect our network to represent what we knew from our initial data. When we just have avocados, or when we just have ice cream: we will eat those foods\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Here’s how we can connect our network to represent what we learned about avocados and ice cream combined. When we have both of these foods, we want to reject that meal since no one will eat it\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Since the hidden layers are “activated” by previous layers, it can feel similar to how our brains work and how some neurons can activate other neurons to create chain-reactions and complex thoughts. These hidden layers and how they activate is what makes this a Neural Network.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/deea8aec9f070e1c75f779070fed04bf-image-1712425400491.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong>\\n\\t\\t<br />1) Draw additional nodes in your hidden layer\\n\\t\\t<br />2) Update your network to represent different relationships and decisions\\n\\t\\t<br />  - What happens if every single food was on the same plate? \\n\\t\\t<br />  - Are some combinations still good? Are some combinations bad?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Make sure students are adding more nodes to their hidden layer and representing different combinations. Ask students what kind of relationships they are trying to represent with the network connections. Networks will start to get complex, which is okay since it can lead to students realizing how simple rules like “making a network” can lead to very complex behaviors. By the end of this section, students should have a hidden layer with multiple inputs and connections to the outputs.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/7612ded2c3d0ddfe69f88bccfab42dd2-image-1712425402272.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Read the slide to the class, or ask the class to read it aloud.\\n\\t\\t<br />\\n\\t\\t<br />While testing our network at the school, we found a weird bug: sometimes the network will freeze and won’t make any decision at all!  This tends to happen when both avocado and ice cream are suggested, even if they’re given individually instead of combined.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/68357c0b7fdcd9e95077c363773f91dd-image-1712425403941.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We can try testing the network with just avocado…\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> And we see that one pathway is activated, so we know this is a meal students are likely to accept\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/964cf26c22e9e5270a9ea0118679358e-image-1712425405597.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We can also try testing the network with just ice cream…\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> And we see that one pathway is activated, so we know this is a meal students are likely to accept\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/1c1a9a3bdb1bc4242e8c1c7d1e514a1a-image-1712425408056.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> But when we try with both an avocado and ice cream…\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Multiple paths are lit up! And it looks like two different decisions are being made! This must be the bug we saw where the network would freeze - it doesn’t know which decision to make since both are activated!\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/adb69ab07737da5764335539b60ed808-image-1712425409757.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> One thing neural networks use to help solve this problem is adding numbers to connections, called Weights.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> For example, we can add lower weights to the “just avocados” and “just ice-cream” connections, and a higher weight to the “both” connection.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> When we combine the weights at the end, the network can look at the total weight and use that to make a final decision\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> In this case, the Reject decision has a higher weight, so that’s what the model would decide to do.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/88c731cbce923b0bc9acb3bc4612347d-image-1712425411413.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong>\\n\\t\\t<br />1) Add more weights to your network to represent different combinations and how to make decisions\\n\\t\\t<br />  - For example: maybe there’s one food in particular that, no matter what else is on the plate, makes you want to reject the meal.\\n\\t\\t<br />  - You can add up to 2 new inputs to your network if you’d like to represent additional food combinations\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Check in with students as they are adding weights. Ask students what they are trying to represent with their decisions, listening for intentional decisions behind certain weights and combinations. If students are stuck, cue them to consider situations where several items may “add up” to a positive meal (like just ice-cream isn’t enough, but ice-cream with peanuts is delicious). Or consider how things they dislike might outweigh everything else. By the end of this section, students should have weights on most of their connections to their outputs.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/d6897b159354fdde45a510078314aca1-image-1712425412999.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Read the slide to the class, or ask the class to read it aloud.\\n\\t\\t<br />\\n\\t\\t<br />The network is doing much better, but one area that’s still difficult is how the network recommends peanuts, since the initial data was inconclusive. So, a team decided to go out and interview students, where they learned that many students are allergic to peanuts! This means they need to avoid peanuts at all cost so they don’t have a fatal reaction!\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/c75db9e1d87483984a3647bc7cb00a6a-image-1712425414733.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> Using what we’ve learned, how should we update our network to represent that any peanuts in a meal should be rejected?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> Students should apply what they’ve learned about hidden layers and weights to represent this situation, aiming for a representation where peanuts is connected to “Reject” with a very very high weight. One possible way to do this is to create a new node in the hidden layer with a single connection from peanuts to this node and then to “Reject”, and give this connection a high weight. This makes it so anytime peanuts appear, this node is activated, which causes a very high “Reject” signal to be sent through the network.\\n\\t\\t<br />\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 8,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 25,\r\n        \"image\": \"\",\r\n        \"content\": \"**Formative Assessment: Neural Networks:** This prompt can be used as a formative assessment of how well students understand the lesson so far, specifically around how networks can represent decisions. You could decide to have students discuss in a group and then draw their decision on their network, allowing you to circulate and check how students are answering this question. Or you can have students discuss in small-groups and circulate to overhear conversations, then facilitate a class-wide discussion about different solutions to see how the class interprets and responds to each idea. Both of these are strategies that give signal on how well students are understanding the lesson so far and, if they struggle, can be an opportunity to clarify and reinforce concepts.\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      \\t\\t<br />Formative Assessment: Neural Networks\\n\\t\\t<br />This prompt can be used as a formative assessment of how well students understand the lesson so far, specifically around how networks can represent decisions. You could decide to have students discuss in a group and then draw their decision on their network, allowing you to circulate and check how students are answering this question. Or you can have students discuss in small-groups and circulate to overhear conversations, then facilitate a class-wide discussion about different solutions to see how the class interprets and responds to each idea. Both of these are strategies that give signal on how well students are understanding the lesson so far and, if they struggle, can be an opportunity to clarify and reinforce concepts.\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": false\r\n  },\r\n  {\r\n    \"group\": 9,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 26,\r\n        \"image\": \"https://images.code.org/4c0c2b6593ac5099fae52f9725d600ee-image-1712425416412.png\",\r\n        \"content\": \"<i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> The team working on this project is debating whether or not to make this change for peanuts. One engineer, Claire, says “If someone with an allergy eats a peanut, it could be life-threatening - we should not design any meals with them anymore”. Another engineer, Kim, says “They don’t have to eat the peanuts and can just pick them out. I don’t think we should change everything just for something they can avoid”. What should we do - remove peanuts completely? Or leave them in and accept some of the risk involved?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> This is an open-ended discussion hitting on some of the ethical considerations with machine learning. This particular discussion focuses on safety concerns and what an acceptable level of risk is when making decisions with machines like this. Some students may think the consequences - a life-threatening reaction - may necessitate removing this risk from the system altogether. Others may think that, since this is something where personal judgement can be applied by just a subset of users, it may be fine to let this network keep designing meals with peanuts. Focus the conversation on wrestling with both sides of the debate, elevating student voices to think critically and carefully about the scenario. It’s likely - and acceptable - for the discussion to end in a place of non-closure - instead, aim for students having come to their own decision that they can justify from the scenario and their lived experiences.\\n\\t\\t<br />\"\r\n      }\r\n    ],\r\n    \"table\": \"<table>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/4c0c2b6593ac5099fae52f9725d600ee-image-1712425416412.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> The team working on this project is debating whether or not to make this change for peanuts. One engineer, Claire, says “If someone with an allergy eats a peanut, it could be life-threatening - we should not design any meals with them anymore”. Another engineer, Kim, says “They don’t have to eat the peanuts and can just pick them out. I don’t think we should change everything just for something they can avoid”. What should we do - remove peanuts completely? Or leave them in and accept some of the risk involved?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> This is an open-ended discussion hitting on some of the ethical considerations with machine learning. This particular discussion focuses on safety concerns and what an acceptable level of risk is when making decisions with machines like this. Some students may think the consequences - a life-threatening reaction - may necessitate removing this risk from the system altogether. Others may think that, since this is something where personal judgement can be applied by just a subset of users, it may be fine to let this network keep designing meals with peanuts. Focus the conversation on wrestling with both sides of the debate, elevating student voices to think critically and carefully about the scenario. It’s likely - and acceptable - for the discussion to end in a place of non-closure - instead, aim for students having come to their own decision that they can justify from the scenario and their lived experiences.\\n\\t\\t<br />\\n    </td>\\n  </tr>\\n\\n</table>\",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 10,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 26,\r\n        \"image\": \"\",\r\n        \"content\": \"**Teaching Tip: Real-World Analogues:** From a food perspective, this scenario mirrors real considerations that kitchens take into account with food preparation. Some kitchens avoid nuts altogether so consumers can be sure they won’t have an allergic reaction. Others apply warnings saying “These items were baked in a facility that includes nuts” as a warning for people to use their own judgement and discretion. From a machine-learning perspective, this scenario is relatable to stories where an AI model or chatbot was released and then needed to be adjusted after the release to account for a bias or harm they had not considered or intended. This is often called rebalancing, resulting in different decisions being made based on the available inputs.\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      \\t\\t<br />Teaching Tip: Real-World Analogues\\n\\t\\t<br />From a food perspective, this scenario mirrors real considerations that kitchens take into account with food preparation. Some kitchens avoid nuts altogether so consumers can be sure they won’t have an allergic reaction. Others apply warnings saying “These items were baked in a facility that includes nuts” as a warning for people to use their own judgement and discretion. From a machine-learning perspective, this scenario is relatable to stories where an AI model or chatbot was released and then needed to be adjusted after the release to account for a bias or harm they had not considered or intended. This is often called rebalancing, resulting in different decisions being made based on the available inputs.\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": false\r\n  },\r\n  {\r\n    \"group\": 11,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 27,\r\n        \"image\": \"https://images.code.org/e385ace7f998d84089a5280e7b0ef9ed-image-1712425418107.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We’ve now constructed a basic neural network that helps us make a decision. Along the way, we’ve learned some of the key components like hidden layers and weights. We’ve also seen the role that relationships make in the structure of networks - that we can represent how combinations of inputs influence the result. This is important for large language models that need to represent the relationships between words to decide how to interpret sentences or which word to generate.\"\r\n      },\r\n      {\r\n        \"position\": 28,\r\n        \"image\": \"https://images.code.org/03b82ab0d8d1217d6877d56a1da28a87-image-1712425420822.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Neural Networks are how language models represent relationships between words in a sentence. These networks are created in such a way that they approximate common sentence structures like subject/noun or verb/object grammatical relationships, based on how the training data is structured.\"\r\n      }\r\n    ],\r\n    \"table\": \"<table>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/e385ace7f998d84089a5280e7b0ef9ed-image-1712425418107.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We’ve now constructed a basic neural network that helps us make a decision. Along the way, we’ve learned some of the key components like hidden layers and weights. We’ve also seen the role that relationships make in the structure of networks - that we can represent how combinations of inputs influence the result. This is important for large language models that need to represent the relationships between words to decide how to interpret sentences or which word to generate.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/03b82ab0d8d1217d6877d56a1da28a87-image-1712425420822.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Neural Networks are how language models represent relationships between words in a sentence. These networks are created in such a way that they approximate common sentence structures like subject/noun or verb/object grammatical relationships, based on how the training data is structured.\\n    </td>\\n  </tr>\\n\\n</table>\",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 12,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 30,\r\n        \"image\": \"https://images.code.org/d01a1a6547e5a44b1c46633097266367-image-1712425423905.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Today we saw how neural networks can represent relationships between inputs (like avocados and ice-cream) and use those relationships to make decisions. Language models do something similar, using relationships between words to help them understand the context of a sentence. For example:\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> The word “tea” on its own is a noun associated with drinks or fancy cups or British culture\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> The word “spill” on its own is a verb associated with liquids\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> But the phrase “spill the tea” is a slang term for gossiping and sharing secrets, which isn’t directly related to any of the individual words in the sentence\"\r\n      },\r\n      {\r\n        \"position\": 31,\r\n        \"image\": \"https://images.code.org/91525d617c207d99f14ae07019232134-image-1712425425465.png\",\r\n        \"content\": \"<i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> Think of a phrase where each word means something individually that is different from when the phrase is combined together. Using what we’ve learned today, describe how a neural network could be used to represent these different meanings.\"\r\n      },\r\n      {\r\n        \"position\": 32,\r\n        \"image\": \"https://images.code.org/018a6b0d1e2ade6b7a38c10bf4928e80-image-1712425427135.png\",\r\n        \"content\": \"\"\r\n      }\r\n    ],\r\n    \"table\": \"<table>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/d01a1a6547e5a44b1c46633097266367-image-1712425423905.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Today we saw how neural networks can represent relationships between inputs (like avocados and ice-cream) and use those relationships to make decisions. Language models do something similar, using relationships between words to help them understand the context of a sentence. For example:\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> The word “tea” on its own is a noun associated with drinks or fancy cups or British culture\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> The word “spill” on its own is a verb associated with liquids\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> But the phrase “spill the tea” is a slang term for gossiping and sharing secrets, which isn’t directly related to any of the individual words in the sentence\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/91525d617c207d99f14ae07019232134-image-1712425425465.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> Think of a phrase where each word means something individually that is different from when the phrase is combined together. Using what we’ve learned today, describe how a neural network could be used to represent these different meanings.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/018a6b0d1e2ade6b7a38c10bf4928e80-image-1712425427135.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      \\n    </td>\\n  </tr>\\n\\n</table>\",\r\n    \"isTable\": true\r\n  }\r\n]\r\n            ",
    "start_html": "<div id=\"designModeViz\" class=\"appModern\" data-radium=\"true\" style=\"display: none; width: 320px; height: 450px;\"><div class=\"screen\" tabindex=\"1\" data-theme=\"default\" id=\"screen1\" style=\"display: block; height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255);\"></div></div>",
    "preload_asset_list": null
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-04-06T17:40:52.192+00:00\",\"changed\":[\"cloned from \\\"gen-ai-images-neural-trained\\\"\"],\"cloned_from\":\"gen-ai-images-neural-trained\"},{\"changed_at\":\"2024-04-06 17:50:51 +0000\",\"changed\":[\"code_functions\",\"long_instructions\",\"preload_asset_list\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2024-04-07 02:49:42 +0000\",\"changed\":[\"code_functions\",\"preload_asset_list\",\"encrypted_examples\",\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2024-04-07 02:53:33 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>