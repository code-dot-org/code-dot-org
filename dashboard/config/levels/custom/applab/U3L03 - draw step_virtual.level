<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2020-03-17T16:56:01.000Z",
  "level_num": "custom",
  "user_id": 13,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "moveForward": {
        "params": [
          ""
        ],
        "paletteParams": [
          ""
        ]
      },
      "turnLeft": {
        "paramButtons": {
          "maxArgs": 0
        },
        "params": [
          ""
        ],
        "paletteParams": [
          ""
        ]
      },
      "penUp": null,
      "penDown": null,
      "functionParams_none": null,
      "callMyFunction": null,
      "comment": null
    },
    "edit_code": true,
    "embed": "false",
    "long_instructions": "We are going to walk you through a process that shows you the benefit of thinking about programming tasks in terms of writing functions.\r\n\r\n* Over the next 3 levels we are going to write a program that draws the figure shown at right which sort of looks like a jagged diamond shape. <img src=\"https://images.code.org/53679cc10ff90b6120184d93ad012797-image-1441770558200.png\" style=\"float:right\">\r\n\r\n* If you look at this image you might recognize elements that repeat: this is a 4-sided figure, and each side is made up of some zig-zag steps.\r\n\r\n* We're going to break the programming down into useable parts and then use those parts as building blocks to make this more complex drawing.\r\n\r\n* First let's **define** a function that *draws just one of these zig-zag steps.*  We've started you out with a definition of `right()` that you can use...\r\n\r\n# Do This:\r\n\r\n**Define** a function named `function drawStep()` which makes the turtle move forward and left as shown. \r\n\r\n**Note**: at the end the turtle should be facing the same direction it started.\r\n\r\n![](https://images.code.org/4fa605353695afa0cd01ec01a1e2c709-image-1441772033658.gif)",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "free_play": "true",
    "show_turtle_before_run": "true",
    "autocomplete_palette_apis_only": "true",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "true",
    "beginner_mode": "true",
    "short_instructions": "Write the drawStep function. (Click to see full instructions)",
    "project_template_level_name": "U3L03 - drawDiamond Template_virtual",
    "droplet_tooltips_disabled": "true",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "true",
    "encrypted_examples": "zkDI0HDKHo5c8J74y03IKljJJN88FpvWCVjolNR18sIy18c5dx0tu25snUyX\nRtR7\n",
    "lock_zero_param_functions": "true",
    "execute_palette_apis_only": "true",
    "log_conditions": [
      {
        "entries": [
          "[forTest]"
        ],
        "matchType": "exact",
        "minTimes": 0,
        "maxTimes": 0,
        "message": "Hey! You're using a programming construct - loops - we haven't (officially) learned about yet :).  Don't worry, your knowledge will come in handy later, but for now, try to stick to the constraints of this problem - no loops, please."
      },
      {
        "entries": [
          "turnLeft:1"
        ],
        "matchType": "exact",
        "minTimes": 0,
        "maxTimes": 0,
        "message": "You seem to have discovered that the turnLeft() function can accept the number of degrees to turn!  Clever.  You can use this knowledge later, but for now, try to stick to the constraints of this problem - use only turnLeft()."
      },
      {
        "entries": [
          "moveForward:1"
        ],
        "matchType": "exact",
        "minTimes": 0,
        "maxTimes": 0,
        "message": "You seem to have discovered that the moveForward() function can accept the number of pixels to move forward!  Clever.  You can use this knowledge later, but for now, try to stick to the constraints of this problem."
      },
      {
        "entries": [
          "turnRight"
        ],
        "matchType": "exact",
        "minTimes": 0,
        "maxTimes": 0,
        "message": "You seem to have found the turnRight function. You can use this knowledge later, but for now, try to stick to the constraints of this problem and just write a function named \"right\"."
      },
      {
        "entries": [
          "turnRight:1"
        ],
        "matchType": "exact",
        "minTimes": 0,
        "maxTimes": 0,
        "message": "You seem to have found the turnRight function. You can use this knowledge later, but for now, try to stick to the constraints of this problem and just write a function named \"right\"."
      },
      {
        "entries": [
          "drawStep"
        ],
        "matchType": "exact",
        "minTimes": 1,
        "message": "You need to define \"function drawStep()\" and then make a call to it. Did you spell and capitalize it the same way as the instructions? Did you call it?"
      },
      {
        "entries": [
          "right"
        ],
        "matchType": "exact",
        "minTimes": 1,
        "message": "Your code should be calling right(). We provided you with the code for it. You need to call it within drawStep."
      },
      {
        "entries": [
          "moveForward"
        ],
        "matchType": "exact",
        "minTimes": 2,
        "message": "You should be moving forward at least twice as part of drawStep."
      }
    ],
    "fail_on_lint_errors": "false",
    "instructions_important": "false",
    "makerlab_enabled": "false",
    "hide_share_and_remix": "false",
    "disable_if_else_editing": "false",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "teacher_markdown": "**MISCONCEPTION: Defining one function inside another**\r\n\r\nBe on the lookout for students trying to enclose one function definition within the other.  When an instruction says something like: \"Make sure to make a call to `right()` inside the `drawStep()` function\" some students might try to place the *definition* for right() inside the *definition* of drawStep(), like so...\r\n\r\n![](https://images.code.org/c2ba7f263cc6e153224054fc3394d94e-image-1496260598846.png)\r\n\r\nThis code will not work because even though `right` is defined it is never *called*.  There is another problem too -- while technically defining a function within another function definition is allowed in JavaScript it is odd and we will never have a construction like this in our course.  \r\n    \r\nThe intention is for each function definition to stand on its own.  And for other code to *call* those functions.  Here is the expected response (notice how `right()` is *called* from within `drawStep`).\r\n    \r\n![](https://images.code.org/ecd74618d21bbb6f4a4ce69bfb920411-image-1496260783203.png)",
    "parent_level_id": 16899,
    "name_suffix": "_virtual",
    "preload_asset_list": null
  },
  "published": true,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2017-05-31 19:42:41 +0000\",\"changed\":[\"code_functions\",\"markdown_instructions\",\"encrypted_examples\",\"log_conditions\",\"contained_level_names\"],\"changed_by_id\":684,\"changed_by_email\":\"audrey.clark@code.org\"},{\"changed_at\":\"2017-05-31 19:43:33 +0000\",\"changed\":[\"code_functions\",\"encrypted_examples\",\"log_conditions\",\"contained_level_names\",\"teacher_markdown\"],\"changed_by_id\":684,\"changed_by_email\":\"audrey.clark@code.org\"},{\"changed_at\":\"2017-05-31 19:48:23 +0000\",\"changed\":[\"code_functions\",\"encrypted_examples\",\"log_conditions\",\"contained_level_names\",\"teacher_markdown\"],\"changed_by_id\":684,\"changed_by_email\":\"audrey.clark@code.org\"},{\"changed_at\":\"2017-05-31 19:51:30 +0000\",\"changed\":[\"code_functions\",\"encrypted_examples\",\"log_conditions\",\"contained_level_names\",\"teacher_markdown\"],\"changed_by_id\":684,\"changed_by_email\":\"audrey.clark@code.org\"},{\"changed_at\":\"2017-05-31 19:56:17 +0000\",\"changed\":[\"code_functions\",\"encrypted_examples\",\"log_conditions\",\"contained_level_names\",\"teacher_markdown\"],\"changed_by_id\":684,\"changed_by_email\":\"audrey.clark@code.org\"},{\"changed_at\":\"2017-05-31 19:56:57 +0000\",\"changed\":[\"code_functions\",\"markdown_instructions\",\"encrypted_examples\",\"log_conditions\",\"contained_level_names\",\"teacher_markdown\"],\"changed_by_id\":684,\"changed_by_email\":\"audrey.clark@code.org\"},{\"changed_at\":\"2017-05-31 20:00:04 +0000\",\"changed\":[\"code_functions\",\"markdown_instructions\",\"encrypted_examples\",\"log_conditions\",\"contained_level_names\",\"teacher_markdown\"],\"changed_by_id\":684,\"changed_by_email\":\"audrey.clark@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>