<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2020-03-17T21:25:25.000Z",
  "level_num": "custom",
  "user_id": 13,
  "properties": {
    "skin": "applab",
    "edit_code": true,
    "embed": "false",
    "instructions_important": "false",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "project_template_level_name": "U5 ColorSleuth Template_virtual",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "text_mode_at_start": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "show_debug_watch": "true",
    "fail_on_lint_errors": "false",
    "debugger_disabled": "false",
    "makerlab_enabled": "false",
    "teacher_markdown": "**Common Mistakes**\r\n\r\nMost mistakes here are going to be related to:\r\n\r\n* Misspelling and capitalization. i.e. `\"score1_label\"` v. `\"score1_Label\"`\r\n* Mixing up strings and variables.  i.e. correct: `setText(\"score1_label\", p1Score)` - first param is a string second is variable holding the value.\r\n\r\n\r\nA working version of the code at this point looks like this:\r\n\r\n    var p1Score=0;\r\n    var p2Score=0;\r\n    var currentPlayer = 1;\r\n    var randButtonId;\r\n\r\n    setBoard();\r\n\r\n    function setBoard() {\r\n      var R = randomNumber(0,235);\r\n      var G = randomNumber(0,235);\r\n      var B = randomNumber(0,235);\r\n      var color = rgb(R, G, B);\r\n      setProperty(\"button1\", \"background-color\", color);\r\n      setProperty(\"button2\", \"background-color\", color);\r\n      setProperty(\"button3\", \"background-color\", color);\r\n      setProperty(\"button4\", \"background-color\", color);\r\n\r\n      R = R+20; \r\n      G = G+20;\r\n      B = B+20;\r\n      var diffColor = rgb(R, G, B);\r\n      randButtonId = \"button\"+randomNumber(1,4);\r\n      setProperty(randButtonId, \"background-color\", diffColor);\r\n      console.log(\"correct button is: \"+randButtonId);\r\n    }\r\n\r\n    function checkCorrect(buttonId) {\r\n      console.log(\"checking: \"+buttonId);\r\n      if( buttonId == randButtonId ) {\r\n          console.log(\"You got it right!\");\r\n          updateScoreBy(1);\r\n      } else {\r\n          console.log(\"WRONG\");\r\n          updateScoreBy(-3);\r\n      }\r\n      setBoard();\r\n      switchPlayer();\r\n    }\r\n\r\n    function updateScoreBy(amt){\r\n      if(currentPlayer==1){\r\n        p1Score += amt;\r\n      }\r\n      else{\r\n        p2Score += amt;\r\n      }\r\n      console.log(\"P1 Score: \"+p1Score);\r\n      console.log(\"P2 Score: \"+p2Score);\r\n      setText(\"score1_label\", p1Score);\r\n      setText(\"score2_label\", p2Score);\r\n    }\r\n\r\n    function switchPlayer(){\r\n      if(currentPlayer==1){\r\n        currentPlayer=2;\r\n        showElement(\"player2_highlight\");\r\n        hideElement(\"player1_highlight\");\r\n      } else {\r\n        currentPlayer=1;\r\n        showElement(\"player1_highlight\");\r\n        hideElement(\"player2_highlight\");\r\n      }\r\n      console.log(\"current player: \"+currentPlayer);\r\n    }\r\n\r\n    onEvent(\"button1\", \"click\", function() {\r\n      checkCorrect(\"button1\");\r\n    });\r\n    onEvent(\"button2\", \"click\", function() {\r\n      checkCorrect(\"button2\");\r\n    });\r\n    onEvent(\"button3\", \"click\", function() {\r\n      checkCorrect(\"button3\");\r\n    });\r\n    onEvent(\"button4\", \"click\", function() {\r\n      checkCorrect(\"button4\");\r\n    });\r\n\r\n\r\n",
    "hide_share_and_remix": "false",
    "disable_if_else_editing": "false",
    "expand_debugger": "false",
    "parent_level_id": 17264,
    "name_suffix": "_virtual",
    "long_instructions": "# Show the updated score in the app\r\n<img src=\"https://images.code.org/2614d8d57f91d9a29d86a0223ec35d63-image-1481221332835.gif\" style=\"float: right\">\r\n\r\nNotice that there are text labels for the player's scores called `score1_label` and `score2_label`.\r\n\r\n## Do this:\r\n\r\n* Add `setText` statements at the end of the `updateScoreBy` function (either replace the console.log statements, or just add after them).  \r\n  * The label for player 1 would look like this: `setText(\"score1_label\", p1Score);`\r\n\r\n**TEST IT OUT**\r\n\r\n* After adding the `setText` statements you should see the score being updated with each click (see animation).\r\n* You can actually play the game a little bit now!\r\n\r\n<details>\r\n\r\n<summary>Why set both text labels each time? [click to expand]</summary>\r\n\r\nYou might be wondering why we set <em>both</em> text labels each time <code>updateScoreBy</code> is called, rather than putting it inside the if-statement to set the text of the appropriate label.  After all, only one score is changing every time.<br>\r\n<li>The reason is basically: laziness.  Even though only one score will change with each click, it really doesn't hurt to set both text labels just to be safe.</li>\r\n<li>In the future, maybe you might change the app so that both player1 and player2's scores might change with a single click. Maybe, maybe not.</li>\r\n<li>But we can be lazy and just set both score text labels every time and not have to worry about it.</li>\r\n\r\n\r\n</details>\r\n\r\n",
    "mini_rubric": "false",
    "encrypted": "false",
    "widget_mode": "false",
    "libraries_enabled": "false",
    "preload_asset_list": null
  },
  "published": true,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2018-12-11 01:03:57 +0000\",\"changed\":[\"markdown_instructions\",\"contained_level_names\"],\"changed_by_id\":156,\"changed_by_email\":\"elijah@code.org\"},{\"changed_at\":\"2019-02-15 04:14:46 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\",\"preload_asset_list\"],\"changed_by_id\":832,\"changed_by_email\":\"hannah@code.org\"},{\"changed_at\":\"2020-04-20 16:58:25 +0000\",\"changed\":[\"long_instructions\",\"preload_asset_list\",\"contained_level_names\"],\"changed_by_id\":831,\"changed_by_email\":\"mike.harvey@code.org\"},{\"changed_at\":\"2020-04-22 21:44:19 +0000\",\"changed\":[\"long_instructions\",\"preload_asset_list\",\"contained_level_names\"],\"changed_by_id\":831,\"changed_by_email\":\"mike.harvey@code.org\"}]",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Applab>