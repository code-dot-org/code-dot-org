<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2020-03-17T21:25:03.000Z",
  "level_num": "custom",
  "user_id": 13,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "console.log": null
    },
    "edit_code": true,
    "embed": "false",
    "short_instructions": "Trace the code and predict what you think will be printed to the console. Then add a console.log statement at the end of the program to see the last value of someNum to see if your full prediction is correct. (click to see full Instructions)",
    "long_instructions": "# Variable Re-assignment - Part 2: Updating Values\r\n\r\nAll of our examples so far have shown how to set the value of a variable by using combinations of numbers and other variables.  But what if you wanted to do something like **add 10 to the *current* value of a variable**? \r\n\r\nChanging the value of a variable based on its current contents is called **variable re-assignment**. To increase the value of num1 by 10 you actually need to do this:\r\n\r\n```num1 = num1 + 10;```\r\n\r\n<details>\r\n<Summary>\r\n<strong>Common Mistakes & Tips</strong> [click to expand]\r\n</Summary>\r\n\r\n<h3>\r\nMistake 1\r\n</h3>\r\n<p>To increase the value of variable by 10 (for example) a common mistake is to think that this statement alone will do the trick.\r\n</p><p>\r\n\r\n```\r\nnum1 + 10;\r\n```\r\n</p><p>\r\nIt doesn't. This tells the computer to add 10 to whatever the value of `num1` is.  And the computer will do that, and the result will go....nowhere.  It will be lost.\r\n</p><p>\r\nBecause you are trying assign a new value to a variable it should make sense that **the = sign must be involved somehow**.  \r\n</p>\r\n<h3>\r\nMistake 2\r\n</h3>\r\n<p>\r\nIf you were in math class this statment would make no sense:\r\n\r\n```\r\nnum1 = num1 + 10;\r\n```\r\n</p><p>\r\nBut **remember to read = as \"gets.\"** If you read the statement above as: \"num1 *gets* the value of num1's current value plus 10\" it might make more sense.  Get in the habit of using \"gets.\"\r\n</p>\r\n</details>\r\n\r\n# Do This:\r\n\r\n* Trace the code and predict what you think will be printed to the console. Then add a console.log statement at the end of the program to see the last value of someNum to see if your full prediction is correct.\r\n\r\n\t* **Add a `console.log` statement**.\r\n    \r\n\t* **Run the program** to see if your prediction is right.\r\n",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "droplet_tooltips_disabled": "false",
    "free_play": "true",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "true",
    "text_mode_at_start": "true",
    "design_mode_at_start": "false",
    "hide_design_mode": "true",
    "beginner_mode": "false",
    "submittable": "false",
    "hide_view_data_button": "true",
    "debugger_disabled": "true",
    "start_blocks": "var someNum = 7;\r\n\r\nsomeNum = someNum + 1;\r\nconsole.log(\"The value of someNum is now: \" + someNum);\r\n\r\nsomeNum = someNum + 1;\r\nconsole.log(\"The value of someNum is now: \" + someNum);\r\n\r\nsomeNum = someNum + 1;\r\nconsole.log(\"The value of someNum is now: \" + someNum);\r\n\r\nsomeNum = someNum * someNum;\r\n\r\n",
    "lock_zero_param_functions": "false",
    "execute_palette_apis_only": "false",
    "parent_level_id": 17141,
    "name_suffix": "_virtual",
    "instructions_important": "false",
    "hide_share_and_remix": "false",
    "show_debug_watch": "true",
    "expand_debugger": "false",
    "fail_on_lint_errors": "false",
    "makerlab_enabled": "false",
    "mini_rubric": "false",
    "encrypted": "false",
    "libraries_enabled": "false",
    "widget_mode": "false",
    "preload_asset_list": null
  },
  "published": true,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2018-09-19 20:45:05 +0000\",\"changed\":[\"notes\",\"code_functions\",\"markdown_instructions\",\"contained_level_names\"],\"changed_by_id\":568,\"changed_by_email\":\"meilani.eyre@code.org\"},{\"changed_at\":\"2019-02-15 03:49:40 +0000\",\"changed\":[\"code_functions\",\"long_instructions\",\"contained_level_names\",\"preload_asset_list\"],\"changed_by_id\":832,\"changed_by_email\":\"hannah@code.org\"},{\"changed_at\":\"2020-04-08 15:38:16 +0000\",\"changed\":[\"code_functions\",\"long_instructions\",\"preload_asset_list\",\"contained_level_names\"],\"changed_by_id\":831,\"changed_by_email\":\"mike.harvey@code.org\"}]",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Applab>