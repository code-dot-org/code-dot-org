<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2018-01-11T18:24:21.000Z",
  "level_num": "custom",
  "user_id": 324,
  "properties": {
    "skin": "applab",
    "code_functions": {
      "onEvent": null,
      "button": null,
      "textInput": null,
      "textLabel": null,
      "dropdown": null,
      "getText": null,
      "setText": null,
      "getNumber": null,
      "setNumber": null,
      "checkbox": null,
      "radioButton": null,
      "getChecked": null,
      "setChecked": null,
      "image": null,
      "getImageURL": null,
      "setImageURL": null,
      "playSound": null,
      "stopSound": null,
      "showElement": null,
      "hideElement": null,
      "deleteElement": null,
      "setPosition": null,
      "setSize": null,
      "setProperty": null,
      "getProperty": null,
      "write": null,
      "getXPosition": null,
      "getYPosition": null,
      "setScreen": null,
      "rgb": null,
      "createCanvas": null,
      "setActiveCanvas": null,
      "line": null,
      "circle": null,
      "rect": null,
      "setStrokeWidth": null,
      "setStrokeColor": null,
      "setFillColor": null,
      "drawImageURL": null,
      "getImageData": null,
      "putImageData": null,
      "clearCanvas": null,
      "getRed": null,
      "getGreen": null,
      "getBlue": null,
      "getAlpha": null,
      "setRed": null,
      "setGreen": null,
      "setBlue": null,
      "setAlpha": null,
      "setRGB": null,
      "startWebRequest": null,
      "setKeyValue": null,
      "getKeyValue": null,
      "createRecord": null,
      "readRecords": null,
      "updateRecord": null,
      "deleteRecord": null,
      "onRecordEvent": null,
      "getUserId": null,
      "drawChart": null,
      "drawChartFromRecords": null,
      "moveForward": null,
      "moveBackward": null,
      "move": null,
      "moveTo": null,
      "dot": null,
      "turnRight": null,
      "turnLeft": null,
      "turnTo": null,
      "arcRight": null,
      "arcLeft": null,
      "getX": null,
      "getY": null,
      "getDirection": null,
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "penRGB": null,
      "show": null,
      "hide": null,
      "speed": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "setTimeout": null,
      "clearTimeout": null,
      "timedLoop": null,
      "stopTimedLoop": null,
      "getTime": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRound": null,
      "mathAbs": null,
      "mathMax": null,
      "mathMin": null,
      "mathRandom": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "declareAssign_x_prompt": null,
      "declareAssign_x_promptNum": null,
      "console.log": null,
      "declareAssign_str_hello_world": null,
      "substring": null,
      "indexOf": null,
      "includes": null,
      "length": null,
      "toUpperCase": null,
      "toLowerCase": null,
      "declareAssign_list_abd": null,
      "accessListItem": null,
      "listLength": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null,
      "comment": null,
      "pinMode": null,
      "digitalWrite": null,
      "digitalRead": null,
      "analogWrite": null,
      "analogRead": null,
      "boardConnected": null,
      "var myLed = createLed": null,
      "on": null,
      "off": null,
      "toggle": null,
      "blink": null,
      "stop": null,
      "color": null,
      "intensity": null,
      "led.on": null,
      "led.off": null,
      "led.blink": null,
      "led.toggle": null,
      "led.pulse": null,
      "buzzer.frequency": null,
      "buzzer.note": null,
      "buzzer.stop": null,
      "buzzer.playNotes": null,
      "buzzer.playSong": null,
      "accelerometer.getOrientation": null,
      "accelerometer.start": null,
      "accelerometer.getAcceleration": null,
      "isPressed": null,
      "holdtime": null,
      "soundSensor.value": null,
      "soundSensor.getAveragedValue": null,
      "soundSensor.setScale": null,
      "lightSensor.value": null,
      "lightSensor.getAveragedValue": null,
      "lightSensor.setScale": null,
      "tempSensor.F": null,
      "tempSensor.C": null,
      "toggleSwitch.isOpen": null,
      "onBoardEvent": null,
      "buzzer.off": null,
      "soundSensor.start": null,
      "lightSensor.start": null
    },
    "edit_code": true,
    "embed": "false",
    "long_instructions": "Template Level.",
    "instructions_important": "false",
    "submittable": "false",
    "start_blocks": "// create the array of star colors so we can use them later\r\nvar starArray = [\"red\", \"blue\", \"green\", \"violet\"];\r\n// create the target that the player will chase\r\nvar target = \"red\";\r\nvar score = 0;\r\n//randomly choose a star color from the star array to be the target\r\nchooseTarget();\r\n//run the program as the accelerometer updates\r\nonBoardEvent(accelerometer, \"data\", function() {\r\n  movePlayer();\r\n  loopStars();\r\n  checkRedStar();\r\n});\r\n// loops all the stars around the screen\r\nfunction loopStars() {\r\n  loopRedStar();\r\n}\r\n// send the red star down the screen, then loop it back to the top\r\nfunction loopRedStar() {\r\n  // move the star down the screen\r\n  setProperty(\"red\", \"y\", getProperty(\"red\", \"y\") + 1);\r\n  // if the star is off the bottom of the screen, move it to the top\r\n  if (getProperty(\"red\", \"y\") > 450) {\r\n    setProperty(\"red\", \"y\", -50);\r\n  }  \r\n}\r\n// check the red star for whether the player has reached it\r\nfunction checkRedStar() {\r\n  // if the player is touching the star, move the star\r\n  if (detectHit(\"red\")) {\r\n    moveRedStar();\r\n    // if the star is the target star, add a point to the score and choose a new target\r\n    if (target == \"red\") {\r\n      getOnePoint();\r\n      chooseTarget();\r\n    }\r\n  }\r\n}\r\n//  move the red star to a random location on the screen\r\nfunction moveRedStar() {\r\n  setProperty(\"red\", \"x\", randomNumber(0,275));\r\n  setProperty(\"red\", \"y\", randomNumber(0,200));\r\n} \r\n// choose a new target and change the LED color\r\nfunction chooseTarget() {\r\n  // randomly choose one target color from the list\r\n  target = starArray[randomNumber(0, starArray.length - 1)];\r\n  // make all the color LEDs the target color\r\n  for (var i=0; i<colorLeds.length; i++) {\r\n    colorLeds[i].color(target);\r\n  }\r\n}\r\n//detect whether the player is hitting the star of the given color\r\nfunction detectHit(color) {\r\n  return (Math.abs(getProperty(\"player\",\"x\") - getProperty(color, \"x\")) < 50) && (Math.abs(getProperty(\"player\",\"y\") - getProperty(color, \"y\")) < 50);\r\n}\r\n// add a point and update the score board\r\nfunction getOnePoint() {\r\n  score = score + 1;\r\n  setProperty(\"score\", \"text\", score);\r\n}\r\n// moves the player according to the accelerometer data\r\nfunction movePlayer() {\r\n  setProperty(\"player\", \"x\", accelerometer.getOrientation(\"roll\") + getProperty(\"player\", \"x\"));\r\n  setProperty(\"player\", \"y\", accelerometer.getOrientation(\"pitch\") + getProperty(\"player\", \"y\"));\r\n}",
    "is_k1": "false",
    "skip_instructions_popup": "false",
    "never_autoplay_video": "false",
    "disable_param_editing": "true",
    "disable_variable_editing": "false",
    "disable_procedure_autopopulate": "false",
    "top_level_procedure_autopopulate": "false",
    "use_modal_function_editor": "false",
    "use_contract_editor": "false",
    "contract_highlight": "false",
    "contract_collapse": "false",
    "examples_highlight": "false",
    "examples_collapse": "false",
    "examples_required": "false",
    "definition_highlight": "false",
    "definition_collapse": "false",
    "disable_examples": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "disable_if_else_editing": "false",
    "free_play": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "start_html": "<div id=\"designModeViz\" class=\"appModern\" data-radium=\"true\" style=\"display: none; width: 320px; height: 450px;\"><div class=\"screen\" tabindex=\"1\" id=\"screen1\" style=\"display: block; height: 451px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0;\"><img data-canonical-image-url=\"icon://fa-smile-o\" data-object-fit=\"fill\" id=\"player\" style=\"height: 50px; width: 50px; position: absolute; left: 100px; top: 240px; margin: 0px;\"><img data-canonical-image-url=\"icon://fa-star\" data-object-fit=\"contain\" id=\"red\" style=\"height: 50px; width: 50px; position: absolute; left: 160px; top: 75px; margin: 0px;\" data-icon-color=\"red\"><img data-canonical-image-url=\"icon://fa-star\" data-object-fit=\"contain\" id=\"blue\" style=\"height: 50px; width: 50px; position: absolute; left: 40px; top: 40px; margin: 0px;\" data-icon-color=\"blue\"><img data-canonical-image-url=\"icon://fa-star\" data-object-fit=\"contain\" id=\"green\" style=\"height: 50px; width: 50px; position: absolute; left: 230px; top: 260px; margin: 0px;\" data-icon-color=\"green\"><label style=\"margin: 0px; padding: 2px; line-height: 1; font-size: 18px; overflow: hidden; word-wrap: break-word; color: rgb(51, 51, 51); max-width: 320px; width: 60px; height: 22px; position: absolute; left: 25px; top: 10px;\" id=\"scoreLabel\">Score:</label><label style=\"margin: 0px; padding: 2px; line-height: 1; font-size: 18px; overflow: hidden; word-wrap: break-word; color: rgb(51, 51, 51); max-width: 320px; height: 22px; position: absolute; left: 90px; top: 10px; width: 50px;\" id=\"score\">0</label><img data-canonical-image-url=\"icon://fa-star\" data-object-fit=\"contain\" id=\"violet\" style=\"height: 50px; width: 50px; position: absolute; left: 80px; top: 145px; margin: 0px;\" data-icon-color=\"violet\"></div></div>",
    "hide_view_data_button": "false",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "fail_on_lint_errors": "false",
    "debugger_disabled": "false",
    "makerlab_enabled": "true",
    "contained_level_names": null
  },
  "published": true,
  "notes": "",
  "audit_log": "[{\"changed_at\":\"2018-01-11 18:42:17 +0000\",\"changed\":[\"notes\",\"code_functions\",\"contained_level_names\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2018-01-11 18:49:22 +0000\",\"changed\":[\"code_functions\",\"contained_level_names\",\"encrypted_examples\",\"start_blocks\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2018-01-11 18:50:17 +0000\",\"changed\":[\"code_functions\",\"contained_level_names\",\"encrypted_examples\",\"start_blocks\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2018-01-11 18:50:18 +0000\",\"changed\":[\"code_functions\",\"contained_level_names\",\"encrypted_examples\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2018-01-11 18:51:07 +0000\",\"changed\":[\"code_functions\",\"contained_level_names\",\"encrypted_examples\",\"start_blocks\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"},{\"changed_at\":\"2018-01-11 19:06:31 +0000\",\"changed\":[\"code_functions\",\"contained_level_names\",\"encrypted_examples\",\"start_blocks\"],\"changed_by_id\":324,\"changed_by_email\":\"elizabeth@code.org\"}]",
  "level_concept_difficulty": {
  }
}]]></config>
  <blocks/>
</Applab>