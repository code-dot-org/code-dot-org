<Applab>
  <config><![CDATA[{
  "game_id": 41,
  "created_at": "2024-04-07T03:04:16.000Z",
  "level_num": "custom",
  "user_id": 14639,
  "properties": {
    "encrypted": "false",
    "skin": "applab",
    "validation_enabled": "true",
    "code_functions": {
      "onEvent": null,
      "button": null,
      "textInput": null,
      "textLabel": null,
      "dropdown": null,
      "getText": null,
      "setText": null,
      "getNumber": null,
      "setNumber": null,
      "checkbox": null,
      "radioButton": null,
      "getChecked": null,
      "setChecked": null,
      "image": null,
      "getImageURL": null,
      "setImageURL": null,
      "playSound": null,
      "stopSound": null,
      "playSpeech": null,
      "showElement": null,
      "hideElement": null,
      "deleteElement": null,
      "setPosition": null,
      "setSize": null,
      "setProperty": null,
      "getProperty": null,
      "write": null,
      "getXPosition": null,
      "getYPosition": null,
      "setScreen": null,
      "rgb": null,
      "open": null,
      "createCanvas": null,
      "setActiveCanvas": null,
      "line": null,
      "circle": null,
      "rect": null,
      "setStrokeWidth": null,
      "setStrokeColor": null,
      "setFillColor": null,
      "drawImageURL": null,
      "getImageData": null,
      "putImageData": null,
      "clearCanvas": null,
      "getRed": null,
      "getGreen": null,
      "getBlue": null,
      "getAlpha": null,
      "setRed": null,
      "setGreen": null,
      "setBlue": null,
      "setAlpha": null,
      "setRGB": null,
      "getColumn": null,
      "startWebRequest": null,
      "setKeyValue": null,
      "getKeyValue": null,
      "createRecord": null,
      "readRecords": null,
      "updateRecord": null,
      "deleteRecord": null,
      "getUserId": null,
      "drawChart": null,
      "drawChartFromRecords": null,
      "getPrediction": null,
      "moveForward": null,
      "moveBackward": null,
      "move": null,
      "moveTo": null,
      "dot": null,
      "turnRight": null,
      "turnLeft": null,
      "turnTo": null,
      "arcRight": null,
      "arcLeft": null,
      "getX": null,
      "getY": null,
      "getDirection": null,
      "penUp": null,
      "penDown": null,
      "penWidth": null,
      "penColor": null,
      "penRGB": null,
      "show": null,
      "hide": null,
      "speed": null,
      "forLoop_i_0_4": null,
      "ifBlock": null,
      "ifElseBlock": null,
      "whileBlock": null,
      "setTimeout": null,
      "clearTimeout": null,
      "timedLoop": null,
      "stopTimedLoop": null,
      "getTime": null,
      "addOperator": null,
      "subtractOperator": null,
      "multiplyOperator": null,
      "divideOperator": null,
      "moduloOperator": null,
      "equalityOperator": null,
      "inequalityOperator": null,
      "greaterThanOperator": null,
      "greaterThanOrEqualOperator": null,
      "lessThanOperator": null,
      "lessThanOrEqualOperator": null,
      "andOperator": null,
      "orOperator": null,
      "notOperator": null,
      "randomNumber_min_max": null,
      "mathRound": null,
      "mathAbs": null,
      "mathMax": null,
      "mathMin": null,
      "mathRandom": null,
      "mathPow": null,
      "mathSqrt": null,
      "declareAssign_x": null,
      "declareNoAssign_x": null,
      "assign_x": null,
      "declareAssign_x_prompt": null,
      "declareAssign_x_promptNum": null,
      "console.log": null,
      "console.clear": null,
      "declareAssign_str_hello_world": null,
      "substring": null,
      "indexOf": null,
      "includes": null,
      "length": null,
      "toUpperCase": null,
      "toLowerCase": null,
      "declareAssign_list_abd": null,
      "declareAssign_list_123": null,
      "accessListItem": null,
      "listLength": null,
      "insertItem": null,
      "appendItem": null,
      "removeItem": null,
      "join": null,
      "declareAssign_object": null,
      "getValue": null,
      "addPair": null,
      "functionParams_none": null,
      "functionParams_n": null,
      "callMyFunction": null,
      "callMyFunction_n": null,
      "return": null,
      "comment": null,
      "pinMode": null,
      "digitalWrite": null,
      "digitalRead": null,
      "analogWrite": null,
      "analogRead": null,
      "boardConnected": null,
      "var myLed = createLed": null,
      "var myButton = createButton": null,
      "var mySensor = createCapacitiveTouchSensor": null,
      "__.on": null,
      "__.off": null,
      "__.toggle": null,
      "__.blink": null,
      "__.pulse": null,
      "colorLeds[0].on": null,
      "colorLeds[0].off": null,
      "colorLeds[0].toggle": null,
      "colorLeds[0].blink": null,
      "colorLeds[0].pulse": null,
      "stop": null,
      "color": null,
      "intensity": null,
      "led.on": null,
      "led.off": null,
      "led.blink": null,
      "led.toggle": null,
      "led.pulse": null,
      "buzzer.frequency": null,
      "buzzer.note": null,
      "buzzer.stop": null,
      "buzzer.playNotes": null,
      "buzzer.playSong": null,
      "accelerometer.getOrientation": null,
      "accelerometer.getAcceleration": null,
      "isPressed": null,
      "holdtime": null,
      "soundSensor.value": null,
      "soundSensor.setScale": null,
      "soundSensor.threshold": null,
      "lightSensor.value": null,
      "lightSensor.setScale": null,
      "lightSensor.threshold": null,
      "tempSensor.F": null,
      "tempSensor.C": null,
      "toggleSwitch.isOpen": null,
      "onBoardEvent": null,
      "ledScreen.on": null,
      "ledScreen.off": null,
      "ledScreen.toggle": null,
      "ledScreen.display": null,
      "ledScreen.clear": null,
      "ledScreen.scrollNumber": null,
      "ledScreen.scrollString": null,
      "compass.getHeading": null
    },
    "embed": "false",
    "long_instructions": "![](https://images.code.org/040cd59ed9741d33a6ee9f4d50f64e84-image-1712459104771.png)\r\n\r\n![](https://images.code.org/304bd6629d5fb68f70be448110fc3e73-image-1712459107846.png)\r\n\r\n![](https://images.code.org/527147a412b7c5695c59e6e5a08aeccb-image-1712459110421.png)\r\n\r\n![](https://images.code.org/3e8a2e18a549e2cc039e180101321e1b-image-1712459112478.png)\r\n\r\n![](https://images.code.org/9232783dafbc939dd90986f2cf63f70e-image-1712459115277.png)\r\n\r\n![](https://images.code.org/405a50fd1fd01b68414bee995871611b-image-1712459117530.png)\r\n\r\n![](https://images.code.org/de0b7d3ea7b320861fb1db4aba90d60a-image-1712459119795.png)\r\n\r\n![](https://images.code.org/abd871a980b388e197d8da57e9c34386-image-1712459122077.png)\r\n\r\n![](https://images.code.org/52c2d30d012ee81cf2d69a0cc38a1671-image-1712459123953.png)\r\n\r\n![](https://images.code.org/3fc75c9223bcde7c6f783953cc2d7a9e-image-1712459126245.png)\r\n\r\n![](https://images.code.org/a23e2656c89066691a8d89038a272e2e-image-1712459130129.png)\r\n\r\n![](https://images.code.org/f1daaa7d921d35c5457fdc9e8662d0c2-image-1712459132263.png)\r\n\r\n![](https://images.code.org/48983641df9c1d85184a03eb51f80041-image-1712459134850.png)\r\n\r\n![](https://images.code.org/c816c6ed95b51ae2dbe0101ecdf67211-image-1712459136853.png)\r\n\r\n![](https://images.code.org/a3a6ad11d86c016550c0ce9e8e0e9767-image-1712459139190.png)\r\n\r\n![](https://images.code.org/fc5e99d70527f8b149b444ec7255db42-image-1712459141589.png)\r\n\r\n![](https://images.code.org/fa50a66cec81389eac009585ad285faa-image-1712459144626.png)\r\n\r\n![](https://images.code.org/83f036f4c08b74619dc7a48d64e00f8e-image-1712459146760.png)\r\n\r\n![](https://images.code.org/41326954bfdc191a4c86c3ef7fd3f9aa-image-1712459149082.png)\r\n\r\n![](https://images.code.org/5333cc44cc1602f2f02d36646d088ce8-image-1712459151007.png)\r\n\r\n![wrap up](https://images.code.org/29521ad821bd3fcb9d885ccf39550b1b-image-1712459153550.png)\r\n\r\n![](https://images.code.org/7eecf1e752f7a105d8e6d38123c82445-image-1712459164355.png)\r\n\r\n![](https://images.code.org/ff738414aede36ac3a6e84e34b4d576b-image-1712459166583.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "never_autoplay_video": "false",
    "hide_share_and_remix": "false",
    "droplet_tooltips_disabled": "false",
    "lock_zero_param_functions": "false",
    "free_play": "false",
    "text_mode_at_start": "false",
    "hide_view_data_button": "false",
    "show_debug_watch": "false",
    "expand_debugger": "false",
    "debugger_disabled": "false",
    "libraries_enabled": "false",
    "show_turtle_before_run": "false",
    "autocomplete_palette_apis_only": "false",
    "execute_palette_apis_only": "false",
    "design_mode_at_start": "false",
    "hide_design_mode": "false",
    "beginner_mode": "false",
    "fail_on_lint_errors": "false",
    "widget_mode": "false",
    "ai_enabled": "false",
    "start_blocks": "              [\r\n  {\r\n    \"group\": 1,\r\n    \"slidesArray\": [],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 2,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 3,\r\n        \"image\": \"https://images.code.org/3e8a2e18a549e2cc039e180101321e1b-image-1712459112478.png\",\r\n        \"content\": \"<strong>Prepare:</strong> There are two versions of the How Embeddings are Made activity guide. The first page of both versions are identical, but the second page contains different passages. Try to distribute different versions of the guide without students noticing they are different. You can accomplish this by intermixing the two versions, or purposefully giving one group Version A and another group Version B. Don’t call out that the guides are different - this will be revealed later as part of the lesson.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-file-text-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Distribute:</strong> Make sure each student has a copy of the How Embeddings are Made activity guide. Students need a writing utensil to write in the activity guide.\"\r\n      },\r\n      {\r\n        \"position\": 4,\r\n        \"image\": \"https://images.code.org/9232783dafbc939dd90986f2cf63f70e-image-1712459115277.png\",\r\n        \"content\": \"This paragraph is written in a made-up language called called Klempin. Read it and then answer the questions about the language.\\n\\t\\t<br />In the glimmering glump of Flimflam, every blibber clutched their flagress blibbertwig. These blibbertwigs, flagress in the glump's gleam, zibbled flagressly under the Flimflam sky. During the flagress festival, blibbers and blibbertwigs zibbled in flagress sync, weaving a dance of flagress jaggleshot.\\n<br />\\n\\t\\t<br /><i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Read the instructions and paragraph from the activity guide and available on the slides. Then direct students to their activity guide to answer four questions about the text:\\n\\t\\t<br />\\n\\t\\t<br />1) Where is the glimmering glump? \\n\\t\\t<br />2) What did the blibber clutch?\\n\\t\\t<br />3) What did the blibbertwigs do under the Flimflam sky?\\n\\t\\t<br />4) What happened during the flagress festival?\\n\\t\\t<br />\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/3e8a2e18a549e2cc039e180101321e1b-image-1712459112478.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <strong>Prepare:</strong> There are two versions of the How Embeddings are Made activity guide. The first page of both versions are identical, but the second page contains different passages. Try to distribute different versions of the guide without students noticing they are different. You can accomplish this by intermixing the two versions, or purposefully giving one group Version A and another group Version B. Don’t call out that the guides are different - this will be revealed later as part of the lesson.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-file-text-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Distribute:</strong> Make sure each student has a copy of the How Embeddings are Made activity guide. Students need a writing utensil to write in the activity guide.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/9232783dafbc939dd90986f2cf63f70e-image-1712459115277.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      This paragraph is written in a made-up language called called Klempin. Read it and then answer the questions about the language.\\n\\t\\t<br />In the glimmering glump of Flimflam, every blibber clutched their flagress blibbertwig. These blibbertwigs, flagress in the glump's gleam, zibbled flagressly under the Flimflam sky. During the flagress festival, blibbers and blibbertwigs zibbled in flagress sync, weaving a dance of flagress jaggleshot.\\n<br />\\n\\t\\t<br /><i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Read the instructions and paragraph from the activity guide and available on the slides. Then direct students to their activity guide to answer four questions about the text:\\n\\t\\t<br />\\n\\t\\t<br />1) Where is the glimmering glump? \\n\\t\\t<br />2) What did the blibber clutch?\\n\\t\\t<br />3) What did the blibbertwigs do under the Flimflam sky?\\n\\t\\t<br />4) What happened during the flagress festival?\\n\\t\\t<br />\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 3,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 4,\r\n        \"image\": \"\",\r\n        \"content\": \"**Teaching Tip: Lean Into the Absurdity:** Consider ways you can engage students in engaging with this text in a playful way, such as having them read the text aloud or a version of a call-and-response where you read the paragraph and students shout-out the bolded silly words. It can also be fun to pretend to take the text and questions very seriously, for example by pretending that “this passage will be part of a quiz later”. In general, leaning into the absurdity in a playful way can help keep the task engaging and make it easier to shift to the debrief later that leads into the rest of the lesson.\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      \\t\\t<br />Teaching Tip: Lean Into the Absurdity\\n\\t\\t<br />Consider ways you can engage students in engaging with this text in a playful way, such as having them read the text aloud or a version of a call-and-response where you read the paragraph and students shout-out the bolded silly words. It can also be fun to pretend to take the text and questions very seriously, for example by pretending that “this passage will be part of a quiz later”. In general, leaning into the absurdity in a playful way can help keep the task engaging and make it easier to shift to the debrief later that leads into the rest of the lesson.\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": false\r\n  },\r\n  {\r\n    \"group\": 4,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 5,\r\n        \"image\": \"https://images.code.org/405a50fd1fd01b68414bee995871611b-image-1712459117530.png\",\r\n        \"content\": \"<i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> Ask students to answer the questions. Don’t ask any follow-up questions yet about “how do you know?” - wait for the next discussion to expand on how students were able to answer these questions\\n\\t\\t<br />\\n\\t\\t<br />1) Where is the glimmering glump? <strong>Flimflam</strong>\\n\\t\\t<br />2) What did the blibber clutch? <strong>Flagress blibbertwig</strong>\\n\\t\\t<br />3) What did the blibbertwigs do under the Flimflam sky? <strong>Zibbled flagressly</strong>\\n\\t\\t<br />4) What happened during the flagress festival? <strong>Blibbers and blibbertwigs zibbled in flagress sync</strong>\"\r\n      },\r\n      {\r\n        \"position\": 6,\r\n        \"image\": \"https://images.code.org/de0b7d3ea7b320861fb1db4aba90d60a-image-1712459119795.png\",\r\n        \"content\": \"<i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> How were you able to figure out the Klempin words?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> Guide students to notice how the other words in the sentence helped them respond to the questions. This is sometimes called using “context clues”, where the context of the sentence helps you learn new words. Some students may try to say they “understand” or “know” these new words - if this comes up, consider asking some leading questions about whether or not this is really true. Just because we could answer some very direct questions about the text, does that mean we truly “understand” it? Digging into this may reveal that regurgitating responses from the text doesn’t always mean we know what we’re talking about. You can also relate this to student experiences where they may have earned a high-score on a test, but never really feel like they “learned” the material - a similar phenomenon has happened in the warm up.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Even without really understanding any of the words in this paragraph, we were able to figure out how to use the words from context and answer some questions. This is what a Large Language Model does as well - they figure out how to use words from the context around them rather than somebody telling the model explicitly what the word means.\"\r\n      },\r\n      {\r\n        \"position\": 7,\r\n        \"image\": \"https://images.code.org/abd871a980b388e197d8da57e9c34386-image-1712459122077.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Last class we explored how computers represent words as a group of numbers, called embeddings, and can use those numbers to represent the “meaning” of words. In this class, we will explore how computers create those embeddings in the first place.\"\r\n      }\r\n    ],\r\n    \"table\": \"<table>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/405a50fd1fd01b68414bee995871611b-image-1712459117530.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> Ask students to answer the questions. Don’t ask any follow-up questions yet about “how do you know?” - wait for the next discussion to expand on how students were able to answer these questions\\n\\t\\t<br />\\n\\t\\t<br />1) Where is the glimmering glump? <strong>Flimflam</strong>\\n\\t\\t<br />2) What did the blibber clutch? <strong>Flagress blibbertwig</strong>\\n\\t\\t<br />3) What did the blibbertwigs do under the Flimflam sky? <strong>Zibbled flagressly</strong>\\n\\t\\t<br />4) What happened during the flagress festival? <strong>Blibbers and blibbertwigs zibbled in flagress sync</strong>\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/de0b7d3ea7b320861fb1db4aba90d60a-image-1712459119795.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> How were you able to figure out the Klempin words?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> Guide students to notice how the other words in the sentence helped them respond to the questions. This is sometimes called using “context clues”, where the context of the sentence helps you learn new words. Some students may try to say they “understand” or “know” these new words - if this comes up, consider asking some leading questions about whether or not this is really true. Just because we could answer some very direct questions about the text, does that mean we truly “understand” it? Digging into this may reveal that regurgitating responses from the text doesn’t always mean we know what we’re talking about. You can also relate this to student experiences where they may have earned a high-score on a test, but never really feel like they “learned” the material - a similar phenomenon has happened in the warm up.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Even without really understanding any of the words in this paragraph, we were able to figure out how to use the words from context and answer some questions. This is what a Large Language Model does as well - they figure out how to use words from the context around them rather than somebody telling the model explicitly what the word means.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/abd871a980b388e197d8da57e9c34386-image-1712459122077.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Last class we explored how computers represent words as a group of numbers, called embeddings, and can use those numbers to represent the “meaning” of words. In this class, we will explore how computers create those embeddings in the first place.\\n    </td>\\n  </tr>\\n\\n</table>\",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 5,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 9,\r\n        \"image\": \"https://images.code.org/3fc75c9223bcde7c6f783953cc2d7a9e-image-1712459126245.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Today we’ll explore how language models create their own embeddings to try and represent the meaning of words. We’re going to start with a simple sentence: “Dogs are loyal. Cats are mysterious. I like dogs. I like cats.”. Our goal is to create embeddings in the same way language models would, which could be used by a model in the same way we use “context clues” to understand sentences. \\n\\t\\t<br />\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/3fc75c9223bcde7c6f783953cc2d7a9e-image-1712459126245.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Today we’ll explore how language models create their own embeddings to try and represent the meaning of words. We’re going to start with a simple sentence: “Dogs are loyal. Cats are mysterious. I like dogs. I like cats.”. Our goal is to create embeddings in the same way language models would, which could be used by a model in the same way we use “context clues” to understand sentences. \\n\\t\\t<br />\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 6,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 9,\r\n        \"image\": \"\",\r\n        \"content\": \"**Teaching Tip: Simplicity**: This sentence may seem very simple, which is partially due to the lesson needing a simple sentence as a first example. However, sentences like this are also similar in structure and complexity to popular children’s books, which serve a similar purpose to what we’re doing here: helping children learn new words and define their meaning. This is a useful comparison to imagine the type of text language models are able to represent at this point - understanding simple children’s books before advancing to more complex sentences and structures.\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      \\t\\t<br />Teaching Tip: Simplicity\\n\\t\\t<br />This sentence may seem very simple, which is partially due to the lesson needing a simple sentence as a first example. However, sentences like this are also similar in structure and complexity to popular children’s books, which serve a similar purpose to what we’re doing here: helping children learn new words and define their meaning. This is a useful comparison to imagine the type of text language models are able to represent at this point - understanding simple children’s books before advancing to more complex sentences and structures.\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": false\r\n  },\r\n  {\r\n    \"group\": 7,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 10,\r\n        \"image\": \"https://images.code.org/a23e2656c89066691a8d89038a272e2e-image-1712459130129.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> To make our embeddings, we want to track of how often a word appears within a few words of other words. We’ll keep track of this in a table that contains all the words in these sentences, and we’ll add dots whenever words are close together. Eventually, each row of the table will become our word embedding for how we represent the meaning of each word.\"\r\n      },\r\n      {\r\n        \"position\": 11,\r\n        \"image\": \"https://images.code.org/f1daaa7d921d35c5457fdc9e8662d0c2-image-1712459132263.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> In the warm-up, we used “context clues” to answer the questions in the Klepin language. Thinking about this in a more step-by-step fashion, that means we looked at words that were “close” to other words in the sentence. Let’s try that here too.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> For each word in the sentence, we’re going to look at the 2 closest words in either direction. For example, if we looked at the word mysterious, we’d look 2 words behind and 2 words ahead\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> And then in the table, we’ll find find the row with that word and add dots for each other word we find\"\r\n      },\r\n      {\r\n        \"position\": 12,\r\n        \"image\": \"https://images.code.org/48983641df9c1d85184a03eb51f80041-image-1712459134850.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Let‘s do the first few together. The first word doesn’t have 2 words before, so we’ll just count the 2 words after. \\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Next I’ll go to the row in my table with that word\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> And then I’ll mark a dot for each word close to it\"\r\n      },\r\n      {\r\n        \"position\": 13,\r\n        \"image\": \"https://images.code.org/c816c6ed95b51ae2dbe0101ecdf67211-image-1712459136853.png\",\r\n        \"content\": \"<i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Ask the class to assist you with the next step in the process. Consider this set of questions to help assist with this part of the process:\\n\\t\\t<br />- Which word are we going to look at next? “Are”\\n\\t\\t<br />- Which words should we highlight around this word? “Dogs” behind the word, “loyal” and “cats” in front of the word\\n\\t\\t<br />- Once we have these words, what do we do in the table? Go to the “Are” row and put dots in the boxes for the other words\\n\\t\\t<br />\\n\\t\\t<br />Once students have answered, click the animation to show the answer.\"\r\n      },\r\n      {\r\n        \"position\": 14,\r\n        \"image\": \"https://images.code.org/a3a6ad11d86c016550c0ce9e8e0e9767-image-1712459139190.png\",\r\n        \"content\": \"<i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Continue down the sentence. For each word in the sentence, fill in the corresponding row in the table\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Monitor students as they work independently. Students may struggle keeping track of which word they’re currently looking at - in these cases, you can suggest students underline words or use a highlighter to show how far in the sentence they’ve moved.\\n\\t\\t<br />\\n\\t\\t<br />As students progress and get about halfway through, show the next slide as a way for students to check their progress.\"\r\n      },\r\n      {\r\n        \"position\": 15,\r\n        \"image\": \"https://images.code.org/fc5e99d70527f8b149b444ec7255db42-image-1712459141589.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We’ve been working for a while - let’s pause and check in. Here’s what your table should look like when you’ve processed the first half of the phrase “Dogs are loyal. Cats are”. Your table may not look exactly like this, but it should be similar. If yours looks completely different, let’s chat!\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Continue to check-in with students as they complete their table\"\r\n      },\r\n      {\r\n        \"position\": 16,\r\n        \"image\": \"https://images.code.org/fa50a66cec81389eac009585ad285faa-image-1712459144626.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Here’s our completed table. Let’s check and see how we did.\\n\\t\\t<br />\\n\\t\\t<br />Give students a chance to check their work before continuing to the next slide.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Let’s remind ourselves what we’ve done: each row in this table is an example of an embedding that language models create to represent the meaning of words and how they are related.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i><strong>Say:</strong> For example, if we wanted to know “Which pets are mysterious?”, the table already gives us some signal that cats are mysterious.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Or if we wanted to know “how would you describe a dog?”, we already have some signal that dogs are loyal\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We can also already start to see which words are “similar”. For example, since “cats” and “dogs” are both animals and are used in similar ways in sentences, their embeddings will start to look similar too. This means these words are “close” to each other in how a language model represents language.\"\r\n      },\r\n      {\r\n        \"position\": 17,\r\n        \"image\": \"https://images.code.org/83f036f4c08b74619dc7a48d64e00f8e-image-1712459146760.png\",\r\n        \"content\": \"<i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Let’s build our own embeddings. In this case, we will not be looking at every word of the paragraph, just a few specific words, which have been bolded. The method for filling out the table will be the same, but just counting specific words.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Have students flip to the back of their activity guide. Use the passage and table to create a new set of embeddings.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Make sure students are working on the correct paragraph. Help students count words if they are struggling to do so; it may help to encourage them to draw in the bounds of which words should be counted. It may help to have a few different colored pencils to draw boxes with.\\n\\t\\t<br />\"\r\n      }\r\n    ],\r\n    \"table\": \"<table>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/a23e2656c89066691a8d89038a272e2e-image-1712459130129.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> To make our embeddings, we want to track of how often a word appears within a few words of other words. We’ll keep track of this in a table that contains all the words in these sentences, and we’ll add dots whenever words are close together. Eventually, each row of the table will become our word embedding for how we represent the meaning of each word.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/f1daaa7d921d35c5457fdc9e8662d0c2-image-1712459132263.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> In the warm-up, we used “context clues” to answer the questions in the Klepin language. Thinking about this in a more step-by-step fashion, that means we looked at words that were “close” to other words in the sentence. Let’s try that here too.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> For each word in the sentence, we’re going to look at the 2 closest words in either direction. For example, if we looked at the word mysterious, we’d look 2 words behind and 2 words ahead\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> And then in the table, we’ll find find the row with that word and add dots for each other word we find\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/48983641df9c1d85184a03eb51f80041-image-1712459134850.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Let‘s do the first few together. The first word doesn’t have 2 words before, so we’ll just count the 2 words after. \\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Next I’ll go to the row in my table with that word\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> And then I’ll mark a dot for each word close to it\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/c816c6ed95b51ae2dbe0101ecdf67211-image-1712459136853.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Ask the class to assist you with the next step in the process. Consider this set of questions to help assist with this part of the process:\\n\\t\\t<br />- Which word are we going to look at next? “Are”\\n\\t\\t<br />- Which words should we highlight around this word? “Dogs” behind the word, “loyal” and “cats” in front of the word\\n\\t\\t<br />- Once we have these words, what do we do in the table? Go to the “Are” row and put dots in the boxes for the other words\\n\\t\\t<br />\\n\\t\\t<br />Once students have answered, click the animation to show the answer.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/a3a6ad11d86c016550c0ce9e8e0e9767-image-1712459139190.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Continue down the sentence. For each word in the sentence, fill in the corresponding row in the table\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Monitor students as they work independently. Students may struggle keeping track of which word they’re currently looking at - in these cases, you can suggest students underline words or use a highlighter to show how far in the sentence they’ve moved.\\n\\t\\t<br />\\n\\t\\t<br />As students progress and get about halfway through, show the next slide as a way for students to check their progress.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/fc5e99d70527f8b149b444ec7255db42-image-1712459141589.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We’ve been working for a while - let’s pause and check in. Here’s what your table should look like when you’ve processed the first half of the phrase “Dogs are loyal. Cats are”. Your table may not look exactly like this, but it should be similar. If yours looks completely different, let’s chat!\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Continue to check-in with students as they complete their table\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/fa50a66cec81389eac009585ad285faa-image-1712459144626.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Here’s our completed table. Let’s check and see how we did.\\n\\t\\t<br />\\n\\t\\t<br />Give students a chance to check their work before continuing to the next slide.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Let’s remind ourselves what we’ve done: each row in this table is an example of an embedding that language models create to represent the meaning of words and how they are related.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i><strong>Say:</strong> For example, if we wanted to know “Which pets are mysterious?”, the table already gives us some signal that cats are mysterious.\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Or if we wanted to know “how would you describe a dog?”, we already have some signal that dogs are loyal\\n\\t\\t<br />\\n\\t\\t<br /><img src=\\\"https://curriculum.code.org/media/uploads/animation.png\\\" /> Click the animation\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> We can also already start to see which words are “similar”. For example, since “cats” and “dogs” are both animals and are used in similar ways in sentences, their embeddings will start to look similar too. This means these words are “close” to each other in how a language model represents language.\\n    </td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/83f036f4c08b74619dc7a48d64e00f8e-image-1712459146760.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> Let’s build our own embeddings. In this case, we will not be looking at every word of the paragraph, just a few specific words, which have been bolded. The method for filling out the table will be the same, but just counting specific words.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-check-square-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Do This:</strong> Have students flip to the back of their activity guide. Use the passage and table to create a new set of embeddings.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i> <strong>Circulate:</strong> Make sure students are working on the correct paragraph. Help students count words if they are struggling to do so; it may help to encourage them to draw in the bounds of which words should be counted. It may help to have a few different colored pencils to draw boxes with.\\n\\t\\t<br />\\n    </td>\\n  </tr>\\n\\n</table>\",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 8,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 17,\r\n        \"image\": \"\",\r\n        \"content\": \"**Teaching Tip: Different Passages:** Be sure to have distributed different versions of the activity guide, but don’t tell students. If this starts to come up or students discover this naturally, feel free to start regrouping the class early to have a discussion about the discrepancy.\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      \\t\\t<br />Teaching Tip: Different Passages\\n\\t\\t<br />Be sure to have distributed different versions of the activity guide, but don’t tell students. If this starts to come up or students discover this naturally, feel free to start regrouping the class early to have a discussion about the discrepancy.\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": false\r\n  },\r\n  {\r\n    \"group\": 9,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 18,\r\n        \"image\": \"https://images.code.org/41326954bfdc191a4c86c3ef7fd3f9aa-image-1712459149082.png\",\r\n        \"content\": \"<i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> These questions are available on the activity guide as well:\\n\\t\\t<br />What word do we know the most about?\\n\\t\\t<br />What word do we know the least about?\\n\\t\\t<br />In the embedding, what words are “Bat” most related to? Could you construct a simple definition of “bat” using just the embedding?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> These answers change depending on the passage students were given, which will come up in this group exercise. In Passage 1, students will know the most about “team” and the least amount “park”, where Passage 2 will be the opposite. In Passage 1, “bat” is associated with the sports equipment baseball bat; in Passage 2, “bat” is associated with the flying animal. In the discussion, students may initially be surprised by these answers and feel like they “did something wrong” - if this happens, move quickly to the next slide to reveal that there are two different passages.\\n\\t\\t<br />\"\r\n      }\r\n    ],\r\n    \"table\": \"<table>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/41326954bfdc191a4c86c3ef7fd3f9aa-image-1712459149082.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> These questions are available on the activity guide as well:\\n\\t\\t<br />What word do we know the most about?\\n\\t\\t<br />What word do we know the least about?\\n\\t\\t<br />In the embedding, what words are “Bat” most related to? Could you construct a simple definition of “bat” using just the embedding?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> These answers change depending on the passage students were given, which will come up in this group exercise. In Passage 1, students will know the most about “team” and the least amount “park”, where Passage 2 will be the opposite. In Passage 1, “bat” is associated with the sports equipment baseball bat; in Passage 2, “bat” is associated with the flying animal. In the discussion, students may initially be surprised by these answers and feel like they “did something wrong” - if this happens, move quickly to the next slide to reveal that there are two different passages.\\n\\t\\t<br />\\n    </td>\\n  </tr>\\n\\n</table>\",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 10,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 18,\r\n        \"image\": \"\",\r\n        \"content\": \"**Formative Assessment:** Evaluating how students respond to these questions and apply their knowledge of embeddings can act as a formative assessment.\"\r\n      }\r\n    ],\r\n    \"table\": \"\\n<table>\\n  <tr>\\n    <td style=\\\"width: 25%\\\">Slide</td>\\n    <td style=\\\"width: 75%\\\">Lesson Guide</td>\\n  </tr>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      \\t\\t<br />Formative Assessment:\\n\\t\\t<br />Evaluating how students respond to these questions and apply their knowledge of embeddings can act as a formative assessment.\\n    </td>\\n  </tr>\\n\\n</table>    \\n    \",\r\n    \"isTable\": false\r\n  },\r\n  {\r\n    \"group\": 11,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 19,\r\n        \"image\": \"https://images.code.org/5333cc44cc1602f2f02d36646d088ce8-image-1712459151007.png\",\r\n        \"content\": \"<i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> What do you notice? What do you wonder?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> Students should notice that the words contain the same bolded words, but the subject of the passages are different. Specifically, the word “bat” is being used differently in each passage. As students notice this, point out that this also manifests in the embeddings that were created - one set was capturing bat as an animal while the other was capturing bat as the sporting equipment.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> This exercise highlights why it’s important to have lots and lots of data when making language models - in order to capture the full meaning of words, especially words with multiple meanings, a language model needs to see data that uses those words in the appropriate context. However - this also highlights a new question: how does a language model know which meaning of the word to use? This is something we’ll learn about in the next few lessons!\"\r\n      }\r\n    ],\r\n    \"table\": \"<table>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/5333cc44cc1602f2f02d36646d088ce8-image-1712459151007.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      <i class=\\\"fa fa-comments\\\" aria-hidden=\\\"true\\\"></i> <strong>Discuss:</strong> What do you notice? What do you wonder?\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i> <strong>Discussion Goal:</strong> Students should notice that the words contain the same bolded words, but the subject of the passages are different. Specifically, the word “bat” is being used differently in each passage. As students notice this, point out that this also manifests in the embeddings that were created - one set was capturing bat as an animal while the other was capturing bat as the sporting equipment.\\n\\t\\t<br />\\n\\t\\t<br /><i class=\\\"fa fa-microphone\\\" aria-hidden=\\\"true\\\"></i> <strong>Say:</strong> This exercise highlights why it’s important to have lots and lots of data when making language models - in order to capture the full meaning of words, especially words with multiple meanings, a language model needs to see data that uses those words in the appropriate context. However - this also highlights a new question: how does a language model know which meaning of the word to use? This is something we’ll learn about in the next few lessons!\\n    </td>\\n  </tr>\\n\\n</table>\",\r\n    \"isTable\": true\r\n  },\r\n  {\r\n    \"group\": 12,\r\n    \"slidesArray\": [\r\n      {\r\n        \"position\": 21,\r\n        \"image\": \"https://images.code.org/7eecf1e752f7a105d8e6d38123c82445-image-1712459164355.png\",\r\n        \"content\": \"\"\r\n      }\r\n    ],\r\n    \"table\": \"<table>\\n\\n  <tr>\\n    <td style=\\\"width: 25%\\\"><img src=\\\"https://images.code.org/7eecf1e752f7a105d8e6d38123c82445-image-1712459164355.png\\\"></td>\\n    <td style=\\\"width: 75%\\\">\\n      \\n    </td>\\n  </tr>\\n\\n</table>\",\r\n    \"isTable\": true\r\n  }\r\n]\r\n            ",
    "start_html": "<div id=\"designModeViz\" class=\"appModern\" data-radium=\"true\" style=\"display: none; width: 320px; height: 450px;\"><div class=\"screen\" tabindex=\"1\" data-theme=\"default\" id=\"screen1\" style=\"display: block; height: 450px; width: 320px; left: 0px; top: 0px; position: absolute; z-index: 0; background-color: rgb(255, 255, 255);\"></div></div>",
    "preload_asset_list": null
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-04-07T03:04:16.865+00:00\",\"changed\":[\"cloned from \\\"gen-ai-images-neural-intro\\\"\"],\"cloned_from\":\"gen-ai-images-neural-intro\"},{\"changed_at\":\"2024-04-07 03:12:01 +0000\",\"changed\":[\"code_functions\",\"long_instructions\",\"start_blocks\",\"preload_asset_list\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"},{\"changed_at\":\"2024-04-07 03:16:57 +0000\",\"changed\":[\"start_blocks\"],\"changed_by_id\":14639,\"changed_by_email\":\"dan+teacher@code.org\"}]"
}]]></config>
  <blocks/>
</Applab>