<Pythonlab>
  <config><![CDATA[{
  "game_id": 72,
  "created_at": "2024-09-15T22:29:47.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "properties": {
    "encrypted": "false",
    "long_instructions": "# Part-Time Job\r\n\r\n::: details [**✅ Step 1**]\r\nLoad the data and print a summary using `info()` and `describe()`.\r\n:::\r\n\r\n::: details [**✅ Step 2**]\r\nConvert the following attributes:\r\n- **StudentID** to *int64*\r\n- **WeeklyWorkHours** to *float*\r\n- **DateHired** to *datetime*\r\n:::\r\n\r\n::: details [**✅ Step 3**]\r\nPrint a new summary using `info()` to verify your changes worked.\r\n:::\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "import pandas as pd \nimport matplotlib.pyplot as plt \n\n# STEP 1\n\n# STEP 2\n\n# STEP 3\n\n\n#Visualized data as a bar graph\nplt.figure()\nmean_satisfaction = survey_data.groupby('PartTimeJob')['SatisfactionRating'].mean()\nplt.bar(mean_satisfaction.index, mean_satisfaction.values, color='blue')\nplt.title('Mean Satisfaction Rating by Part-Time Job')\nplt.xlabel('Part-Time Job')\nplt.ylabel('Average Satisfaction Rating')\nplt.show()",
          "folderId": "0",
          "active": true,
          "open": true
        },
        "1": {
          "id": "1",
          "name": "job_data.csv",
          "language": "csv",
          "contents": "StudentID,PartTimeJob,WeeklyWorkHours,SatisfactionRating,DateHired\n7284656,Tutoring,4,8.59,5/27/2024\n3270231,Fast Food,5,4.25,4/3/2023\n4151022,Babysitting,4,4.3,2/27/2023\n4176666,Lifeguard,2,3.7,4/21/2023\n5945893,Fast Food,12,4.29,11/3/2022\n6228863,Tutoring,9,9.4,10/17/2023\n6797835,Dog Walking,12,3.02,3/1/2024\n9057633,Fast Food,20,3.99,8/6/2023\n8077665,Fast Food,0,4.68,2/27/2024\n6010972,Lifeguard,15,3.18,10/10/2023\n5444073,Retail,13,3.72,12/7/2022\n4567098,Tutoring,4,9.06,2/20/2024\n8261900,Dog Walking,13,4.47,6/15/2024\n2719900,Retail,6,5.73,11/5/2022\n2688086,Dog Walking,6,3.91,4/11/2024\n8586783,Dog Walking,12,4.27,4/4/2023\n5987418.1,Tutoring,9,8.08,11/14/2022\n4241927,Retail,5,3.83,7/7/2023\n7453979,Tutoring,3,8.52,4/3/2023\n9726836,Tutoring,5,9.58,1/6/2023\n9266534,Fast Food,17,5.62,12/29/2022\n9649109,Dog Walking,9,3.82,10/29/2022\n5862218,Lifeguard,7,3.06,6/11/2024\n2360838,Lifeguard,15,3.31,9/24/2022\n1132625,Tutoring,2,10,12/15/2022\n1641532,Lifeguard,19,5.8,11/20/2022\n4162599,Retail,8,3.73,2/16/2024\n8317725,Tutoring,14,9.04,1/17/2023\n8897109,Lifeguard,18,3.56,2/9/2023\n6973831,Fast Food,11,6.17,10/28/2023\n2505733,Retail,10,3.42,4/12/2023\n2694873,Dog Walking,6,3.89,4/21/2023\n7319087,Lifeguard,15,4.5,11/9/2022\n7987275,Babysitting,16,4.28,1/17/2024\n7063897,Babysitting,20,3.31,7/8/2024\n3012723,Fast Food,12,3.15,8/18/2022\n6822214,Fast Food,3,5.56,9/21/2023\n7658441,Fast Food,9,5.86,7/21/2023\n8070178,Lifeguard,11,4.91,1/30/2023\n6672815,Lifeguard,10,6.46,1/31/2024\n4251885,Babysitting,20,3.62,6/18/2024\n7591749,Fast Food,11,5.24,1/9/2023\n5477480,Lifeguard,9,4.27,10/17/2022\n3380570,Tutoring,8,9.67,5/22/2023\n1715268,Tutoring,18,9.97,2/18/2024\n9419492,Babysitting,16,6.23,7/7/2023\n6586133,Retail,2,5.83,4/22/2023\n7542101,Babysitting,10,5.9,11/25/2023\n1896644,Lifeguard,17,3.13,12/15/2023\n6397389,Babysitting,1,6.55,6/2/2023\n7433075,Lifeguard,15,3.36,5/4/2023\n9495671,Dog Walking,3,3.98,1/11/2023\n4165038,Dog Walking,19,4.57,11/12/2023\n6192099,Tutoring,3,8.56,9/21/2022\n1073755,Lifeguard,12,6.66,6/15/2023\n6628791,Dog Walking,0,6.01,8/5/2023\n4261321,Dog Walking,8,6.56,5/9/2023\n5157533,Babysitting,2,5.9,5/29/2024\n8676824,Fast Food,8,6.58,9/10/2023\n2537817,Retail,2,5.17,11/19/2022\n8215599,Retail,14,3.75,4/12/2024\n3683982,Fast Food,9,4.2,1/20/2024\n2909501,Babysitting,0,4.34,10/24/2023\n3457976,Fast Food,17,6.56,3/22/2024\n5500319,Dog Walking,17,6.02,3/5/2024\n9678430,Retail,15,5.51,12/2/2023\n3211762,Dog Walking,18,4.68,8/12/2022\n3025971,Retail,3,3.87,1/3/2024\n5848393,Babysitting,2,4.94,1/19/2023\n7795961,Retail,3,4.91,9/29/2022\n4123907,Fast Food,0,6.86,4/29/2023\n9916569,Dog Walking,7,6.18,9/6/2022\n1875746,Retail,3,6.66,5/5/2024\n3540946,Fast Food,3,5.03,1/17/2024\n9932693,Dog Walking,15,4.56,6/2/2023\n7423480,Lifeguard,1,3.99,9/26/2023\n9724174,Tutoring,1,8.55,3/29/2024\n5711840,Retail,18,4.03,8/11/2023\n1103325,Babysitting,18,5.33,12/28/2023\n4468096,Retail,14,6.53,4/28/2023\n7065086,Retail,11,6.13,11/1/2023\n7008079,Tutoring,1,8.93,8/4/2023\n9242793,Retail,5,4.81,1/2/2024\n6590590,Fast Food,11,5.38,11/20/2022\n8419646,Babysitting,16,6.86,7/11/2024\n1490530,Lifeguard,20,5.22,5/24/2023\n8129276,Tutoring,3,9.47,2/23/2024\n6642854,Retail,0,3.85,10/27/2022\n5637936,Retail,6,5.9,1/31/2024\n5054308,Babysitting,20,3.92,5/15/2024\n5757844,Lifeguard,20,6.5,4/1/2023\n7450551,Retail,14,5.71,10/24/2023\n6435182,Lifeguard,8,6.66,2/19/2024\n2652964,Retail,19,5.76,5/1/2023\n7928450,Babysitting,7,3.06,2/7/2023\n4561803,Dog Walking,19,5.19,12/7/2023\n9373341,Retail,9,5.01,12/3/2023\n7899083,Dog Walking,5,5.53,11/29/2022\n3487629,Tutoring,20,9.31,6/4/2023\n9061106,Retail,20,4.47,12/3/2023\n",
          "folderId": "0",
          "active": false,
          "open": true
        }
      },
      "folders": {
      },
      "openFiles": [
        "0",
        "1"
      ]
    },
    "display_name": "Job Survey",
    "teacher_markdown": "This level practices and assesses students' ability to convert data types using .astype() and to_datetime() as well as loading data and looking at info() about the data.",
    "bubble_choice_description": "Practice converting data types with a survey about students' part-time jobs, hours worked, and satisfaction. ",
    "thumbnail_url": "https://images.code.org/179262269eb6669d52368cc01b36ddd1-job.png",
    "validation_file": {
      "id": "2",
      "name": "test.py",
      "language": "py",
      "contents": "import unittest\nfrom io import StringIO\nimport sys\nimport ast\nimport pandas as pd\n\nclass TestWorkHoursDataModifications(unittest.TestCase):\n\n    def setUp(self):\n        # Setup to capture the print output if needed later\n        self.captured_output = StringIO()\n        sys.stdout = self.captured_output\n\n    def tearDown(self):\n        # Reset redirect and clear print capture\n        sys.stdout = sys.__stdout__\n\n    def test_step_1(self):\n        \"\"\"Test Step 1: Check that a DataFrame is loaded and both 'info()' and 'describe()' are called\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Parse the script to check for 'info()' and 'describe()' being called using AST\n        tree = ast.parse(script_content)\n\n        # Traverse the AST to look for 'info()' and 'describe()' method calls on a DataFrame\n        info_called = False\n        describe_called = False\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'info':\n                    info_called = True\n                elif node.func.attr == 'describe':\n                    describe_called = True\n\n        # Assert that both info() and describe() are called at least once\n        self.assertTrue(info_called, \"The code should call 'info()' on a DataFrame in Step 1.\")\n        self.assertTrue(describe_called, \"The code should call 'describe()' on a DataFrame in Step 1.\")\n        self.assertTrue(info_called and describe_called, \"The code should call both 'info()' and 'describe()' on a DataFrame in Step 1.\")\n\n    def test_step_2(self):\n        \"\"\"Test Step 2: Check that 'StudentID', 'WeeklyWorkHours', and 'DateHired' attributes are converted correctly\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access the modified DataFrame\n        local_vars = {}\n        exec(script_content, local_vars)\n\n        # Search for any DataFrame in the global variables\n        df_detected = None\n        for var in local_vars.values():\n            if isinstance(var, pd.DataFrame):\n                df_detected = var\n                break\n\n        # Ensure a DataFrame is detected\n        self.assertIsNotNone(df_detected, \"A DataFrame should be loaded and modified in Step 2.\")\n\n        # Check if the 'StudentID' attribute has the correct type 'int64'\n        self.assertIn('StudentID', df_detected.columns, \"The DataFrame should contain a 'StudentID' column.\")\n        self.assertEqual(df_detected['StudentID'].dtype, 'int64', \"The 'StudentID' column should be converted to 'int64'.\")\n\n        # Check if the 'WeeklyWorkHours' attribute has the correct type 'float64'\n        self.assertIn('WeeklyWorkHours', df_detected.columns, \"The DataFrame should contain a 'WeeklyWorkHours' column.\")\n        self.assertEqual(df_detected['WeeklyWorkHours'].dtype, 'float64', \"The 'WeeklyWorkHours' column should be converted to 'float64'.\")\n\n        # Check if the 'DateHired' attribute has the correct type 'datetime64[ns]'\n        self.assertIn('DateHired', df_detected.columns, \"The DataFrame should contain a 'DateHired' column.\")\n        self.assertEqual(df_detected['DateHired'].dtype, 'datetime64[ns]', \"The 'DateHired' column should be converted to 'datetime64[ns]'.\")\n\n    def test_step_3(self):\n        \"\"\"Test Step 3: Check that 'info()' is called again to verify the changes\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Parse the script to check for multiple 'info()' calls using AST\n        tree = ast.parse(script_content)\n\n        # Traverse the AST to count the number of 'info()' calls\n        info_count = 0\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'info':\n                    info_count += 1\n\n        # Assert that info() is called more than once (before and after changes)\n        self.assertGreaterEqual(info_count, 2, \"The code should call 'info()' at least twice to verify changes in Step 3.\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
      "folderId": "0",
      "active": false,
      "open": false,
      "type": "validation"
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-09-15T22:29:47.540+00:00\",\"changed\":[\"cloned from \\\"datascience-U2L5-L8b_2024-pilot\\\"\"],\"cloned_from\":\"datascience-U2L5-L8b_2024-pilot\"},{\"changed_at\":\"2024-09-15 22:33:49 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\",\"bubble_choice_description\",\"thumbnail_url\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-15 22:34:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-15 22:43:34 +0000\",\"changed\":[\"predict_settings\",\"display_name\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 19:12:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 19:12:05 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 19:12:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 19:12:41 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 19:16:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 19:16:49 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-03 16:17:42 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18753,\"changed_by_email\":\"molly+levelbuilder@code.org\"}]"
}]]></config>
</Pythonlab>
