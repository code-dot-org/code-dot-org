<Pythonlab>
  <config><![CDATA[{
  "game_id": 72,
  "created_at": "2024-09-16T17:17:22.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "properties": {
    "encrypted": "false",
    "long_instructions": "# DC Air Pollution\r\n\r\n::: details [**✅ Step 1**]\r\nLoad the data and print the `head()`.\r\n:::\r\n\r\n::: details [**✅ Step 2**]\r\nYou'll notice there's a missing value in these rows. Replace the value of the empty element with **14.5** and then print the `head()` again to confirm the value update.\r\n:::\r\n\r\n::: details [**✅ Step 3**]\r\nUse the indexing operator to create a new DataFrame that contains entries where **Nitrogen Dioxide < 2**.  Print this subgroup.\r\n:::\r\n\r\n::: details [**✅ Step 4**]\r\n- Group data by the **Year** attribute. \r\n- Determine the maximum Nitrogen Dioxide value for each year. \r\n- Print these values.\r\n:::\r\n\r\n\r\n\r\n\r\n\r\n",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "import pandas as pd\n\n\n# Step 1\n\n\n# Step 2\n\n\n# Step 3\n\n\n# Step 4\n",
          "folderId": "0",
          "active": true,
          "open": true
        },
        "1": {
          "id": "1",
          "name": "ozone_dc.csv",
          "language": "csv",
          "contents": "Month,Year,Location,Nitrogen Dioxide,Ozone\nOctober,2004,Washington DC,12.2131,355.987\nNovember,2004,Washington DC,11.6196,334.066\nDecember,2004,Washington DC,11.1282,367.099\nJanuary,2005,Washington DC,,392.404\nFebruary,2005,Washington DC,18.1599,400.551\nMarch,2005,Washington DC,13.0492,442.458\nApril,2005,Washington DC,13.0376,429.951\nMay,2005,Washington DC,6.82125,444.438\nJune,2005,Washington DC,5.16403,393.556\nJuly,2005,Washington DC,4.68664,383.421\nAugust,2005,Washington DC,5.37492,372.04\nSeptember,2005,Washington DC,7.52979,355.608\nOctober,2005,Washington DC,10.6355,335.429\nNovember,2005,Washington DC,9.19919,332.716\nDecember,2005,Washington DC,14.2007,385.137\nJanuary,2006,Washington DC,11.0673,368.579\nFebruary,2006,Washington DC,11.5094,397.971\nMarch,2006,Washington DC,11.896,420.918\nApril,2006,Washington DC,9.90262,416.349\nMay,2006,Washington DC,6.47554,436.827\nJune,2006,Washington DC,5.10201,413.22\nJuly,2006,Washington DC,3.86844,394.113\nAugust,2006,Washington DC,4.37322,381.408\nSeptember,2006,Washington DC,5.80123,368.638\nOctober,2006,Washington DC,9.28135,370.884\nNovember,2006,Washington DC,10.7281,363.358\nDecember,2006,Washington DC,11.1112,359.512\nJanuary,2007,Washington DC,8.82527,389.8\nFebruary,2007,Washington DC,10.46,425.148\nMarch,2007,Washington DC,8.80684,415.767\nApril,2007,Washington DC,9.73028,436.793\nMay,2007,Washington DC,6.20694,425.767\nJune,2007,Washington DC,4.39904,405.198\nJuly,2007,Washington DC,3.61329,396.667\nAugust,2007,Washington DC,4.67007,376.833\nSeptember,2007,Washington DC,5.22499,358.323\nOctober,2007,Washington DC,9.20243,322.983\nNovember,2007,Washington DC,10.2689,348.328\nDecember,2007,Washington DC,9.62402,345.198\nJanuary,2008,Washington DC,10.1515,381.642\nFebruary,2008,Washington DC,10.3243,393.799\nMarch,2008,Washington DC,8.38254,405.056\nApril,2008,Washington DC,10.1716,395.759\nMay,2008,Washington DC,4.61446,418.554\nJune,2008,Washington DC,3.9675,392.862\nJuly,2008,Washington DC,4.03165,387.637\nAugust,2008,Washington DC,3.61338,385.427\nSeptember,2008,Washington DC,4.83009,353.443\nOctober,2008,Washington DC,7.81769,360.231\nNovember,2008,Washington DC,7.98547,350.726\nDecember,2008,Washington DC,8.25251,360.477\nJanuary,2009,Washington DC,8.32068,391.275\nFebruary,2009,Washington DC,8.34482,413.207\nMarch,2009,Washington DC,10.4253,392.723\nApril,2009,Washington DC,6.49673,428.488\nMay,2009,Washington DC,4.12271,406.176\nJune,2009,Washington DC,4.19386,397.034\nJuly,2009,Washington DC,3.27765,394.489\nAugust,2009,Washington DC,3.22723,374.551\nSeptember,2009,Washington DC,4.03502,364.8\nOctober,2009,Washington DC,3.86504,337.181\nNovember,2009,Washington DC,7.55413,333.75\nDecember,2009,Washington DC,7.55573,383.162\nJanuary,2010,Washington DC,10.1085,435.653\nFebruary,2010,Washington DC,6.85647,467.257\nMarch,2010,Washington DC,8.55552,440.512\nApril,2010,Washington DC,6.91236,442.869\nMay,2010,Washington DC,4.10722,414.231\nJune,2010,Washington DC,3.5522,394.693\nJuly,2010,Washington DC,3.83396,395.25\nAugust,2010,Washington DC,4.02228,381.089\nSeptember,2010,Washington DC,4.43518,360.888\nOctober,2010,Washington DC,5.591,364.95\nNovember,2010,Washington DC,6.54402,348.474\nDecember,2010,Washington DC,10.5704,401.363\nJanuary,2011,Washington DC,9.12193,403.493\nFebruary,2011,Washington DC,9.31118,383.574\nMarch,2011,Washington DC,7.19456,416.816\nApril,2011,Washington DC,4.50827,394.618\nMay,2011,Washington DC,3.97519,407.943\nJune,2011,Washington DC,3.47127,392.143\nJuly,2011,Washington DC,3.77493,381.071\nAugust,2011,Washington DC,3.30619,375.06\nSeptember,2011,Washington DC,3.99705,354.869\nOctober,2011,Washington DC,6.32447,352.193\nNovember,2011,Washington DC,8.16261,332.964\nDecember,2011,Washington DC,6.41462,346.06\nJanuary,2012,Washington DC,6.54798,404.665\nFebruary,2012,Washington DC,6.53737,395.755\nMarch,2012,Washington DC,6.92729,392.45\nApril,2012,Washington DC,5.44075,420.089\nMay,2012,Washington DC,4.58133,407.66\nJune,2012,Washington DC,3.5653,405.335\nJuly,2012,Washington DC,2.83407,384.096\nAugust,2012,Washington DC,3.72251,379.82\nSeptember,2012,Washington DC,4.87417,363.12\nOctober,2012,Washington DC,6.18579,340.72\nNovember,2012,Washington DC,7.80773,362.394\nDecember,2012,Washington DC,8.06721,364.426\nJanuary,2013,Washington DC,7.03775,345.714\nFebruary,2013,Washington DC,6.74574,401.649\nMarch,2013,Washington DC,6.31173,453.935\nApril,2013,Washington DC,6.70405,427.185\nMay,2013,Washington DC,3.21508,428.225\nJune,2013,Washington DC,3.2407,398.042\nJuly,2013,Washington DC,2.4925,388.975\nAugust,2013,Washington DC,2.09844,379.13\nSeptember,2013,Washington DC,4.45225,376.168\nOctober,2013,Washington DC,6.50503,353.017\nNovember,2013,Washington DC,7.224,350.065\nDecember,2013,Washington DC,6.26902,380.375\nJanuary,2014,Washington DC,9.24277,410.125\nFebruary,2014,Washington DC,8.20571,436.31\nMarch,2014,Washington DC,6.71593,431.103\nApril,2014,Washington DC,5.35157,415.981\nMay,2014,Washington DC,2.83004,420.602\nJune,2014,Washington DC,3.26589,398.409\nJuly,2014,Washington DC,2.41226,399.79\nAugust,2014,Washington DC,2.91158,385.054\nSeptember,2014,Washington DC,3.75002,360.519\nOctober,2014,Washington DC,6.40769,363.092\nNovember,2014,Washington DC,6.12224,353.042\nDecember,2014,Washington DC,6.32508,363.888\nJanuary,2015,Washington DC,8.39085,410.724\nFebruary,2015,Washington DC,7.17873,445.487\nMarch,2015,Washington DC,5.76982,411.836\nApril,2015,Washington DC,4.49881,427.169\nMay,2015,Washington DC,3.43737,413.147\nJune,2015,Washington DC,2.67779,401.875\nJuly,2015,Washington DC,2.56723,395.577\nAugust,2015,Washington DC,2.77793,387.892\nSeptember,2015,Washington DC,3.95335,364.704\nOctober,2015,Washington DC,6.64008,357.809\nNovember,2015,Washington DC,4.82348,328.75\nDecember,2015,Washington DC,6.95833,338.006\nJanuary,2016,Washington DC,6.47539,408.66\nFebruary,2016,Washington DC,7.66623,428.049\nMarch,2016,Washington DC,4.83749,412.368\nApril,2016,Washington DC,5.39971,445.072\nMay,2016,Washington DC,3.9749,431.969\nJune,2016,Washington DC,3.2201,388.529\nJuly,2016,Washington DC,2.45677,378.449\nAugust,2016,Washington DC,2.5928,372.327\nSeptember,2016,Washington DC,3.3387,352.281\nOctober,2016,Washington DC,3.55327,350.842\nNovember,2016,Washington DC,3.73517,335.401\nDecember,2016,Washington DC,4.99658,356.967\nJanuary,2017,Washington DC,3.67986,383.079\nFebruary,2017,Washington DC,3.82165,408.537\nMarch,2017,Washington DC,5.68814,422.029\nApril,2017,Washington DC,2.99323,396.033\nMay,2017,Washington DC,2.6987,425.22\nJune,2017,Washington DC,1.69673,405.368\nJuly,2017,Washington DC,1.86692,385.69\nAugust,2017,Washington DC,2.55511,376.403\nSeptember,2017,Washington DC,2.83089,351.7\nOctober,2017,Washington DC,3.77558,345.526\nNovember,2017,Washington DC,5.65098,348.354\nDecember,2017,Washington DC,5.61837,364.539\nJanuary,2018,Washington DC,5.07898,410.472\nFebruary,2018,Washington DC,5.823,386.243\nMarch,2018,Washington DC,6.11616,480.244\nApril,2018,Washington DC,3.01788,456.25\nMay,2018,Washington DC,2.91515,411.625\nJune,2018,Washington DC,2.00961,399.175\nJuly,2018,Washington DC,2.81876,391.011\nAugust,2018,Washington DC,3.29064,379.375\nSeptember,2018,Washington DC,2.06079,347.362\nOctober,2018,Washington DC,3.5795,347.23\nNovember,2018,Washington DC,3.16677,353.335\nDecember,2018,Washington DC,4.87366,364.178\nJanuary,2019,Washington DC,5.69619,374.588\nFebruary,2019,Washington DC,6.73285,345.081\nMarch,2019,Washington DC,6.01677,430.5\nApril,2019,Washington DC,5.09018,409.237\nMay,2019,Washington DC,2.6205,402.214\nJune,2019,Washington DC,1.7681,417.006\nJuly,2019,Washington DC,3.11829,389.467\nAugust,2019,Washington DC,3.22197,383.951\nSeptember,2019,Washington DC,3.41414,358.476\nOctober,2019,Washington DC,3.66965,337.219\nNovember,2019,Washington DC,3.39731,381.79\nDecember,2019,Washington DC,6.42612,382.694\nJanuary,2020,Washington DC,7.72931,399.296\nFebruary,2020,Washington DC,5.5032,412.963\nMarch,2020,Washington DC,4.0772,417.454\nApril,2020,Washington DC,2.85297,441.79\nMay,2020,Washington DC,1.61216,423.579\nJune,2020,Washington DC,1.75505,402.014\nJuly,2020,Washington DC,2.43375,388.75\nAugust,2020,Washington DC,3.02074,369.393\nSeptember,2020,Washington DC,3.08665,355.75\nOctober,2020,Washington DC,3.40778,349.099\nNovember,2020,Washington DC,4.9679,350.599\nDecember,2020,Washington DC,6.22114,352.721\nJanuary,2021,Washington DC,7.44778,412.676\nFebruary,2021,Washington DC,10.1649,379.368\nMarch,2021,Washington DC,4.47208,405.454\nApril,2021,Washington DC,4.62687,446.586\nMay,2021,Washington DC,2.29184,419.278\nJune,2021,Washington DC,4.0121,399.331\nJuly,2021,Washington DC,2.66062,398.62\nAugust,2021,Washington DC,3.35491,381.648\nSeptember,2021,Washington DC,2.30047,364.406\n,,,,\n,,,,\n,,,,\n",
          "folderId": "0",
          "active": false,
          "open": true
        }
      },
      "folders": {
      },
      "openFiles": [
        "0",
        "1"
      ]
    },
    "display_name": "DC Air Pollution",
    "teacher_markdown": "When modifying data with iloc, students might accidentally reference the wrong position– remind students that rows and column indices begin at 0.\r\n\r\nWhen filtering data, it’s helpful to print out parts of the DataFrame before and after filtering to understand the changes.",
    "bubble_choice_description": "Practice accessing and grouping data to determine the average air pollution each year in New Washington DC.",
    "thumbnail_url": "https://images.code.org/bf9e0f9303ea1b1941253757d289a41f-capitol.png",
    "validation_file": {
      "id": "2",
      "name": "test.py",
      "language": "py",
      "contents": "import unittest\nfrom io import StringIO\nimport sys\nimport pandas as pd\nimport ast\n\nclass TestNitrogenDioxideAnalysis(unittest.TestCase):\n\n    def setUp(self):\n        # Setup to capture the print output if needed later\n        self.captured_output = StringIO()\n        sys.stdout = self.captured_output\n\n    def tearDown(self):\n        # Reset redirect and clear print capture\n        sys.stdout = sys.__stdout__\n\n    def test_step_1(self):\n        \"\"\"Load the data and call .head() to confirm it is read successfully.\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Step 1: Parse the script using AST to check for the .head() call\n        tree = ast.parse(script_content)\n\n        # Track if a DataFrame and .head() call are detected\n        df_loaded = False\n        head_called = False\n\n        # Traverse the AST to find DataFrame creation and .head() call\n        for node in ast.walk(tree):\n            # Check for DataFrame creation by reading a CSV file\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'read_csv':\n                    df_loaded = True\n\n            # Check for .head() method calls on a DataFrame\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'head':\n                    head_called = True\n\n        # Validate that a DataFrame is created and .head() is called\n        self.assertTrue(df_loaded, \"The data should be loaded into a DataFrame.\")\n        self.assertTrue(head_called, \"The .head() method should be called to confirm the data is read successfully.\")\n\n    def test_step_2(self):\n        \"\"\"Replace the value of the empty element at [3, 3] with 14.5.\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script once and capture all variables in a single context\n        local_vars = {}\n        exec(script_content, local_vars)\n\n        # Check if a DataFrame is present after execution\n        df = None\n        for var_name, var_value in local_vars.items():\n            if isinstance(var_value, pd.DataFrame):\n                df = var_value\n                break\n\n        # Ensure a DataFrame exists\n        self.assertIsNotNone(df, \"A DataFrame should be created and loaded with data.\")\n\n        # Check if the value at [3, 3] is replaced with 14.5\n        self.assertEqual(df.iloc[3, 3], 14.5, \"The value at location [3, 3] should be replaced with 14.5.\")\n        \n        # Ensure no other replacements with 14.5 occurred\n        count_14_5 = (df == 14.5).sum().sum()\n        self.assertEqual(count_14_5, 1, \"Only one element should be replaced with 14.5.\")\n\n    def test_step_3(self):\n        \"\"\"Create a new DataFrame that contains rows where 'Nitrogen Dioxide' < 2 and print this subgroup.\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the student code and capture the variables\n        local_vars = {}\n        exec(script_content, local_vars)\n\n        # Locate all DataFrames in the student script\n        low_nitrogen_df = None\n        original_df = None\n\n        # Identify the original DataFrame and the filtered low nitrogen DataFrame\n        for var_name, var_value in local_vars.items():\n            if isinstance(var_value, pd.DataFrame):\n                if 'Nitrogen Dioxide' in var_value.columns:\n                    if (var_value['Nitrogen Dioxide'] < 2).any():\n                        low_nitrogen_df = var_value\n                    else:\n                        original_df = var_value\n\n        # Ensure that a filtered DataFrame was created\n        self.assertIsNotNone(low_nitrogen_df, \"Create a new DataFrame that contains rows where 'Nitrogen Dioxide' < 2 and print this subgroup.\")\n\n        # Ensure that the filtered DataFrame only contains rows with 'Nitrogen Dioxide' < 2\n        self.assertTrue((low_nitrogen_df['Nitrogen Dioxide'] < 2).all(), \"All rows in the new DataFrame should have 'Nitrogen Dioxide' values less than 2.\")\n\n    def test_step_4(self):\n        \"\"\"Group data by the ‘Year’ attribute and determine the maximum Nitrogen Dioxide value for each year. Print these values.\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Parse the script using AST for structural analysis\n        tree = ast.parse(script_content)\n\n        # Flags for detecting groupby and max operations\n        groupby_detected = False\n        max_detected = False\n\n        # Traverse the AST to identify `groupby` and `max` operations\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                # Check for groupby('Year')\n                if node.func.attr == 'groupby':\n                    # Ensure it is grouping by 'Year'\n                    if len(node.args) > 0 and isinstance(node.args[0], ast.Str) and node.args[0].s == 'Year':\n                        groupby_detected = True\n\n                # Check for .max() applied on Nitrogen Dioxide\n                if node.func.attr == 'max':\n                    max_detected = True\n\n        # Validate that both `groupby` and `max` operations are detected in the correct order\n        self.assertTrue(groupby_detected, \"Group data by the ‘Year’ attribute.\")\n        self.assertTrue(max_detected, \"Determine the maximum Nitrogen Dioxide value for each year and print these values.\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
      "folderId": "0",
      "active": false,
      "open": false,
      "type": "validation"
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-09-16T17:17:22.026+00:00\",\"changed\":[\"cloned from \\\"datascience-U2L6-L8c_2024-pilot\\\"\"],\"cloned_from\":\"datascience-U2L6-L8c_2024-pilot\"},{\"changed_at\":\"2024-09-16 17:19:13 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\",\"display_name\",\"bubble_choice_description\",\"thumbnail_url\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-16 17:20:05 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-16 17:20:11 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-29 19:26:17 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-29 19:26:39 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-29 19:36:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-29 19:37:05 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-03 16:25:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18753,\"changed_by_email\":\"molly+levelbuilder@code.org\"}]"
}]]></config>
</Pythonlab>
