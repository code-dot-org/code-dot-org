<Pythonlab>
  <config><![CDATA[{
  "game_id": 72,
  "created_at": "2024-09-17T23:04:14.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "properties": {
    "encrypted": "false",
    "long_instructions": "# Magic Potion\r\n\r\n::: details [**✅ Step 1**]\r\nConvert **ExpirationDate** to a **datetime** type\r\n:::\r\n\r\n::: details [**✅ Step 2**]\r\nFilter for all ingredients for the following conditions: \r\n- Expiration date is *after* **2024-01-01**\r\n- Rarity ends in **\"e\"**\r\n- Category is either **herb** or **essence**. \r\n:::\r\n\r\n::: details [**✅ Step 3**]\r\nPrint the resulting filter visualization.\r\n:::\r\n\r\n\r\n",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndf_ingredients = pd.read_csv('magical_potion_ingredients.csv')\n\n\n# Step 1\n\n\n# Step 2\nfiltered_data = df_ingredients[]\n\n\n# ----- Graphing the data -----------\n# Plot the data\nplt.figure(figsize=(10, 8))\n\n\n# Bar chart for QuantityAvailable\nplt.bar(filtered_data['IngredientName'], filtered_data['QuantityAvailable'], color='blue', label='Quantity Available')\n\n\n# Set labels and title\nplt.xlabel('Ingredient Name')\nplt.ylabel('Quantity Available')\nplt.title('Quantity Available of Rare Herbs Expiring After 2024')\nplt.xticks(rotation=45)\nplt.legend()\n\n\n# Show the plot\nplt.show()",
          "folderId": "0",
          "active": false,
          "open": true,
          "type": "locked_starter"
        },
        "1": {
          "id": "1",
          "name": "magical_potion_ingredients.csv",
          "language": "csv",
          "contents": "IngredientName,Category,Effect,QuantityAvailable,Source,Rarity,ExpirationDate\nMoonshade Blossom,mineral,healing,50,desert,rare,10/18/2023\nDragonfire Root,mineral,invisibility,10,desert,rare,9/6/2023\nStarlight Dust,herb,strength,33,swamp,rare,10/10/2023\nWhispering Leaf,essence,wisdom,27,sea,uncommon,12/27/2024\nPhoenix Feather,herb,speed,27,swamp,rare,7/1/2024\nMystic Crystal,essence,transformation,46,forest,uncommon,9/29/2023\nShadow Vine,root,levitation,3,sea,common,2/12/2023\nEldertree Bark,mineral,fire resistance,26,swamp,rare,3/19/2024\nMermaid Scale,essence,water breathing,86,desert,epic,11/5/2024\nSunstone Shard,essence,night vision,3,swamp,rare,2/28/2023\nNightshade Berry,flower,teleportation,59,forest,epic,7/31/2024\nFrostflower,root,mind control,5,,uncommon,8/14/2023\nThunderclap Seed,herb,clairvoyance,33,mountain,rare,8/20/2023\nGolden Nectar,mineral,shielding,84,forest,common,8/29/2023\nSilverthorn,essence,regeneration,2,sea,common,10/14/2023\nCrimson Petal,essence,shape-shifting,83,swamp,common,11/15/2024\nSpirit Essence,,enhanced hearing,75,forest,common,7/31/2025\nGoblin Ear,root,enhanced sight,2,forest,common,6/28/2024\nFairy Wing,herb,truth serum,88,mountain,uncommon,2/6/2024\nGriffin Claw,herb,fear inducement,18,mountain,common,3/11/2024\nWraithbone,flower,dream manipulation,79,swamp,rare,11/16/2025\nTroll Moss,essence,healing,93,sea,epic,6/8/2023\nBasilisk Scale,flower,invisibility,5,desert,common,10/13/2024\nCelestial Dew,mineral,strength,87,mountain,common,1/23/2024\nAbyssal Pearl,mineral,wisdom,93,,uncommon,12/15/2024\nSiren's Song,mineral,speed,75,desert,epic,1/31/2025\nDragon's Breath,essence,transformation,21,desert,common,10/21/2024\nSylvan Leaf,root,levitation,4,desert,uncommon,9/16/2025\nSpectral Mist,,fire resistance,95,,rare,6/21/2023\nInferno Gem,mineral,water breathing,100,,uncommon,2/19/2024\nEchoing Stone,herb,night vision,32,swamp,uncommon,12/10/2023\nLuminous Dewdrop,herb,teleportation,24,swamp,epic,12/17/2024\nArcane Powder,essence,mind control,86,forest,rare,11/13/2024\nPhantom Silk,herb,clairvoyance,24,desert,common,1/16/2024\nTitan's Blood,herb,shielding,95,swamp,common,2/10/2025\nFae Dust,herb,regeneration,66,mountain,rare,2/29/2024\nGlacial Ice,herb,shape-shifting,68,mountain,rare,11/4/2025\nVolcanic Ash,herb,enhanced hearing,6,mountain,rare,12/31/2024\nDwarven Beard,essence,enhanced sight,67,desert,common,10/30/2023\nEnchanted Root,mineral,truth serum,58,desert,uncommon,3/24/2025\nMoonlit Water,flower,fear inducement,15,,uncommon,9/9/2025\nElven Hair,essence,dream manipulation,95,forest,common,11/21/2023\nNecrotic Bone,flower,healing,96,forest,legendary,6/5/2025\nRadiant Shard,herb,invisibility,13,swamp,uncommon,5/17/2025\nWolfsbane,root,strength,6,sea,epic,3/21/2023\nEtherial Mist,mineral,wisdom,64,sea,uncommon,7/18/2024\nStormbringer,essence,speed,47,mountain,uncommon,7/6/2025\nLeviathan Scale,mineral,transformation,10,desert,rare,12/21/2025\nMystic Mushroom,root,levitation,3,,epic,6/9/2023\nGlimmerweed,root,fire resistance,4,desert,,7/14/2024\nHallowed Petal,mineral,water breathing,69,forest,common,6/21/2023\nCinder Blossom,flower,night vision,48,forest,uncommon,4/20/2024\nVampire Blood,herb,teleportation,93,desert,uncommon,7/25/2023\nAzure Feather,essence,mind control,82,desert,uncommon,11/30/2024\nObsidian Shard,root,clairvoyance,2,mountain,rare,8/3/2024\nRunic Stone,mineral,shielding,14,forest,rare,5/3/2024\nGolden Apple,essence,regeneration,52,swamp,epic,7/31/2023\nStardust,root,shape-shifting,3,mountain,rare,6/3/2023\nMystic Root,essence,enhanced hearing,16,desert,rare,12/13/2025\nShadow Essence,root,enhanced sight,7,mountain,,11/12/2025\nCelestial Herb,root,truth serum,5,sea,rare,7/1/2023\nFrostbite,root,fear inducement,11,sea,rare,3/6/2024\nThunder Seed,herb,dream manipulation,81,mountain,common,1/17/2024\nMoonstone,root,healing,2,swamp,rare,12/18/2023\nSpecter Leaf,herb,invisibility,33,desert,common,4/14/2023\nPhoenix Down,flower,strength,31,desert,,11/9/2024\nElderberry,mineral,wisdom,19,forest,uncommon,12/15/2023\nGiant's Toe,,speed,56,sea,,2/18/2023\nAngel's Tear,essence,transformation,58,forest,legendary,11/21/2024\nMermaid Tear,herb,levitation,17,mountain,common,10/10/2025\nDragon Heart,root,fire resistance,2,mountain,rare,6/1/2023\nWhispering Moss,mineral,water breathing,89,,rare,5/20/2024\nSilver Bloom,flower,night vision,78,,rare,11/11/2025\nCrystal Petal,essence,teleportation,27,desert,common,1/9/2023\nGoblin Tooth,herb,mind control,33,swamp,rare,5/27/2025\nFairy Dust,flower,clairvoyance,4,,rare,12/7/2023\nGriffin Feather,root,shielding,3,sea,common,7/17/2025\nWraith Essence,root,regeneration,5,desert,rare,11/7/2024\nTroll's Blood,,shape-shifting,65,desert,rare,11/7/2023\nBasilisk Tooth,herb,enhanced hearing,87,desert,,8/10/2024\nCelestial Herb,herb,enhanced sight,16,mountain,epic,4/3/2024\nAbyssal Root,root,truth serum,2,mountain,common,2/10/2023\nSiren's Hair,root,fear inducement,1,swamp,uncommon,3/23/2024\nDragon Scale,flower,dream manipulation,41,desert,rare,7/17/2024\nSylvan Petal,mineral,healing,4,sea,epic,5/15/2023\nSpectral Shard,essence,invisibility,60,swamp,common,4/18/2023\nInferno Seed,root,strength,5,mountain,rare,12/20/2025\nEchoing Feather,herb,wisdom,36,forest,legendary,12/8/2025\nLuminous Petal,essence,speed,34,mountain,rare,1/12/2023\nArcane Gem,essence,transformation,63,swamp,,1/12/2023\nPhantom Powder,herb,levitation,5,swamp,common,5/26/2024\nTitan's Bone,root,fire resistance,2,sea,uncommon,2/5/2024\nFae Feather,herb,water breathing,49,swamp,common,2/20/2023\nGlacial Shard,essence,night vision,49,swamp,rare,6/11/2024\nVolcanic Stone,essence,teleportation,80,mountain,epic,10/8/2023\nDwarven Root,herb,mind control,65,forest,uncommon,3/20/2024\nEnchanted Berry,essence,clairvoyance,14,swamp,epic,3/4/2025\nMoonlit Petal,root,shielding,3,forest,uncommon,9/20/2023\nElven Root,flower,regeneration,88,sea,epic,10/13/2025\nNecrotic Shard,herb,shape-shifting,14,forest,rare,7/6/2025\nRadiant Petal,flower,enhanced hearing,56,desert,common,4/2/2025\nWolfsbane Root,essence,enhanced sight,71,desert,,4/15/2024\nEtherial Leaf,root,truth serum,5,forest,epic,1/4/2025\nDragon's Claw,root,fear inducement,3,swamp,epic,10/14/2024\n",
          "folderId": "0",
          "active": false,
          "open": true
        }
      },
      "folders": {
      },
      "openFiles": [
        "0",
        "1"
      ]
    },
    "display_name": "Magic Potion Ingredients",
    "bubble_choice_description": "Practice converting data types and applying more filtering conditions with the magical potion dataset.",
    "thumbnail_url": "https://images.code.org/6bce4a9a1e6e864045e7fccf95d57a10-potion.png",
    "teacher_markdown": "**Student Takeaways:**\r\n- Students learn how to convert a column to datetime format in pandas, which is essential for performing date-related operations and comparisons.\r\n- Students understand how to apply multiple filtering conditions based on date, string patterns, and categorical data to focus on specific subsets of ingredients.\r\n\r\n\r\n**Possible Misconceptions and/or Difficulties:**\r\n-  Students might struggle with the syntax and methods for converting a column to datetime format, particularly if they are unfamiliar with date handling in pandas.\r\n- There could be challenges in combining multiple filtering conditions, especially when working with different data types like dates, strings, and categories.\r\n\r\n",
    "validation_file": {
      "id": "2",
      "name": "test.py",
      "language": "py",
      "contents": "import unittest\nimport ast\n\nclass TestMagicalPotionIngredients(unittest.TestCase):\n    def setUp(self):\n        # Set up the initial context and parse the AST of the student's code.\n        with open('main.py', 'r') as f:\n            self.tree = ast.parse(f.read())\n\n    def detect_datetime_conversion(self, column_name):\n        \"\"\"Detects conversion of a specified column to datetime type.\"\"\"\n        for node in ast.walk(self.tree):\n            if isinstance(node, ast.Assign):\n                if isinstance(node.value, ast.Call) and isinstance(node.value.func, ast.Attribute):\n                    if node.value.func.attr == 'to_datetime':\n                        if isinstance(node.value.args[0], ast.Subscript):\n                            if isinstance(node.value.args[0].slice, ast.Constant) and node.value.args[0].slice.value == column_name:\n                                return True\n        return False\n\n    def detect_combined_filter_conditions(self):\n        \"\"\"Detects the combination of filtering conditions:\n        Expiration date > 2024-01-01, Rarity ends in 'e', and Category is 'herb' or 'essence'.\"\"\"\n        date_condition = False\n        rarity_condition = False\n        category_condition = False\n\n        for node in ast.walk(self.tree):\n            # Check for comparison operations (e.g., ExpirationDate > '2024-01-01')\n            if isinstance(node, ast.Compare):\n                if isinstance(node.left, ast.Subscript) and node.left.slice.value == 'ExpirationDate':\n                    if isinstance(node.comparators[0], ast.Constant) and node.comparators[0].value == '2024-01-01':\n                        date_condition = isinstance(node.ops[0], ast.Gt)\n\n            # Check for string method calls (e.g., Rarity.endswith('e'))\n            elif isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'endswith' and isinstance(node.func.value, ast.Attribute):\n                    if isinstance(node.func.value.value, ast.Subscript) and node.func.value.value.slice.value == 'Rarity':\n                        if isinstance(node.args[0], ast.Constant) and node.args[0].value == 'e':\n                            rarity_condition = True\n\n            # Check for category conditions (e.g., Category == 'herb' or Category == 'essence')\n            if self.check_category_condition(node):\n                category_condition = True\n\n        # Debug output to see which conditions are being detected\n        print(f\"Date Condition Detected: {date_condition}\")\n        print(f\"Rarity Condition Detected: {rarity_condition}\")\n        print(f\"Category Condition Detected: {category_condition}\")\n\n        # All three conditions must be true\n        return date_condition and rarity_condition and category_condition\n\n    def check_category_condition(self, node):\n        \"\"\"Detects Category conditions using various patterns.\"\"\"\n        if isinstance(node, ast.Compare):\n            # Handle single comparison, e.g., `Category == 'herb'`\n            if isinstance(node.left, ast.Subscript) and node.left.slice.value == 'Category':\n                if isinstance(node.comparators[0], ast.Constant):\n                    return node.comparators[0].value in {'herb', 'essence'}\n        elif isinstance(node, ast.BoolOp) and isinstance(node.op, ast.Or):\n            # Handle OR conditions, e.g., `Category == 'herb' or Category == 'essence'`\n            category_values = set()\n            for sub_node in node.values:\n                if isinstance(sub_node, ast.Compare):\n                    if isinstance(sub_node.left, ast.Subscript) and sub_node.left.slice.value == 'Category':\n                        if isinstance(sub_node.comparators[0], ast.Constant):\n                            category_values.add(sub_node.comparators[0].value)\n            return category_values == {'herb', 'essence'}\n        elif isinstance(node, ast.BoolOp) and isinstance(node.op, ast.And):\n            # Handle AND conditions that include category checks\n            for sub_node in node.values:\n                if self.check_category_condition(sub_node):\n                    return True\n        return False\n\n    def test_step_1_datetime_conversion(self):\n        \"\"\"Convert ExpirationDate to a datetime type.\"\"\"\n        datetime_conversion_detected = self.detect_datetime_conversion('ExpirationDate')\n        self.assertTrue(datetime_conversion_detected, \"Convert ExpirationDate to a datetime type.\")\n\n    def test_step_2_combined_filter_conditions(self):\n        \"\"\"Filter for Expiration date after 2024-01-01, Rarity ends in 'e', and Category is either herb or essence.\"\"\"\n        filter_conditions_detected = self.detect_combined_filter_conditions()\n        self.assertTrue(filter_conditions_detected, \"Filter for Expiration date after 2024-01-01, Rarity ends in 'e', and Category is either herb or essence.\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
      "folderId": "0",
      "active": false,
      "open": false,
      "type": "validation"
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-09-17T23:04:14.975+00:00\",\"changed\":[\"cloned from \\\"datascience-U2L10-L8a_2024-pilot\\\"\"],\"cloned_from\":\"datascience-U2L10-L8a_2024-pilot\"},{\"changed_at\":\"2024-09-17 23:07:59 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\",\"bubble_choice_description\",\"teacher_markdown\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-17 23:09:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-17 23:10:15 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 18:02:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 18:02:17 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 18:21:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 18:21:17 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 18:21:24 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-03 16:42:23 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18753,\"changed_by_email\":\"molly+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-21 16:52:29 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18914,\"changed_by_email\":\"samantha.schwartz+levelbuilder@code.org\"}]"
}]]></config>
</Pythonlab>
