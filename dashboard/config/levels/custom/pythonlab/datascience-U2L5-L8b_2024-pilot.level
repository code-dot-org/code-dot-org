<Pythonlab>
  <config><![CDATA[{
  "game_id": 72,
  "created_at": "2024-09-15T22:25:04.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "properties": {
    "encrypted": "false",
    "long_instructions": "# Technology\r\n\r\n::: details [**✅ Step 1**]\r\nLoad the data and print a summary using `info()` and `describe()`.\r\n:::\r\n\r\n::: details [**✅ Step 2**]\r\nConvert the following attributes:\r\n- **StudentID** to *int64*\r\n- **InternetSpeedMbps** to *float*\r\n- **LastPost** to *datetime*\r\n:::\r\n\r\n::: details [**✅ Step 3**]\r\nPrint a new summary using `info()` to verify your changes worked.\r\n:::\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "import pandas as pd \nimport matplotlib.pyplot as plt \n\n# STEP 1\n\n# STEP 2\n\n# STEP 3\n\n\n#Visualized data as a bar graph\nplt.figure()\nfavorite_social_counts = survey_data['FavoriteSocialMediaPlatform'].value_counts()\nplt.bar(favorite_social_counts.index, favorite_social_counts.values, color='red')\nplt.title('Favorite Social Media Platform Choices')\nplt.xlabel('Favorite Platform')\nplt.ylabel('Count')\nplt.show()",
          "folderId": "0",
          "active": true,
          "open": true
        },
        "1": {
          "id": "1",
          "name": "technology_survey.csv",
          "language": "csv",
          "contents": "StudentID,DailyScreenTimeHours,LastPost,FavoriteSocialMediaPlatform,InternetSpeedMbps\n5481623,0.75,8/4/2023,Instagram,576\n3657787,8.42,7/6/2024,Instagram,668\n5199253,5.57,2/10/2024,YouTube,824\n3734169,5.06,11/12/2023,Snapchat,972\n5671029,8.08,9/28/2023,Twitter,516\n5377932,8.21,6/2/2024,YouTube,468\n5314608,4.7,11/10/2023,Snapchat,666\n6432961,8.82,6/22/2024,Snapchat,909\n6948703,10.02,1/25/2024,Instagram,51\n4203351,5.45,8/29/2023,YouTube,556\n6555172,6.4,7/30/2023,Facebook,211\n8033834,9.97,10/28/2023,YouTube,66\n6864974,11.24,2/24/2024,TikTok,369\n8632840,2.13,1/24/2024,Instagram,67\n2703935,3.04,3/30/2024,Instagram,190\n9633337,0.02,6/18/2024,Instagram,677\n4767685,1.57,4/19/2024,Instagram,665\n2418393,5.59,7/9/2024,Instagram,129\n5072428,3.62,5/9/2024,TikTok,572\n8887344,11.97,10/29/2023,Instagram,106\n3551783,2.53,3/13/2024,Twitter,159\n6068768,3.94,1/27/2024,Snapchat,610\n9778390.1,10.46,8/9/2023,Facebook,804\n9391686,1.03,9/29/2023,Instagram,670\n7129190,6.07,11/8/2023,YouTube,497\n9085709,1.92,12/24/2023,Facebook,474\n4086723,11.79,9/19/2023,Instagram,329\n7276463,3.25,12/8/2023,Twitter,485\n8039622,10.9,5/15/2024,Facebook,579\n4835465,8.1,6/11/2024,TikTok,267\n8989190,0.4,9/4/2023,Facebook,1000\n7969567,1.43,2/16/2024,Instagram,144\n7977260,11.65,3/25/2024,Instagram,377\n1971818,4.69,9/30/2023,Instagram,756\n7454774,11.16,11/14/2023,YouTube,274\n7285364,11.72,2/14/2024,Twitter,685\n7713613,10.22,10/6/2023,Instagram,284\n4176171,0.58,1/7/2024,YouTube,179\n7610476,0.66,6/26/2024,Instagram,367\n1689862,1.13,7/12/2024,Instagram,178\n4807485,9.09,8/8/2023,Instagram,354\n2792616,11.34,3/8/2024,Twitter,600\n3428155,1.95,4/28/2024,Instagram,903\n5217886,0.78,1/23/2024,YouTube,831\n1361789,2.76,3/21/2024,YouTube,861\n6526634,6.43,9/25/2023,YouTube,176\n7712245,9.8,7/15/2024,Instagram,286\n2403985,8.11,12/15/2023,Twitter,4\n1058776,0.41,6/12/2024,Facebook,979\n7829714,10.5,9/2/2023,Facebook,739\n4287679,7.81,6/16/2024,Snapchat,924\n4008851,7.07,6/24/2024,Facebook,434\n7986410,3.73,8/22/2023,Instagram,90\n3257172,8.51,3/25/2024,Facebook,533\n4912231,5.57,4/29/2024,Instagram,373\n3129076,5.97,10/29/2023,Snapchat,657\n5128262,11.76,4/7/2024,YouTube,949\n8443039,1.57,1/24/2024,Snapchat,576\n5780259,10.47,5/7/2024,YouTube,610\n6659053,9.88,3/27/2024,TikTok,280\n1996328,11.92,2/28/2024,YouTube,224\n7266283,9.65,5/8/2024,Snapchat,298\n5172244,1.48,12/26/2023,Snapchat,996\n8118814,6.08,6/15/2024,YouTube,149\n8491715,2.56,8/12/2023,Twitter,451\n9730140,8.69,4/24/2024,TikTok,526\n3659804,1.51,2/4/2024,Snapchat,110\n3389370,2.63,11/14/2023,Instagram,600\n7573222,0.62,11/3/2023,YouTube,87\n8164265,1.18,12/16/2023,YouTube,620\n9667948,0.56,12/28/2023,Instagram,101\n2116018,10.85,6/17/2024,YouTube,126\n9760791,11.93,4/27/2024,Facebook,756\n9411669,4.99,10/30/2023,Twitter,12\n6978281,9.28,4/11/2024,TikTok,605\n7923042,8.24,3/12/2024,TikTok,114\n4583667,5.16,12/10/2023,Snapchat,116\n9927763,4.42,9/19/2023,TikTok,430\n3068440,11.89,2/23/2024,Facebook,768\n6830302,0.73,1/27/2024,YouTube,880\n2032931,3.53,12/12/2023,Instagram,899\n2473298,1.62,6/19/2024,TikTok,803\n1882379,11.23,1/30/2024,Instagram,622\n7605109,11.6,8/16/2023,Snapchat,257\n7312017,0.23,10/5/2023,TikTok,880\n1070617,5.72,5/20/2024,Facebook,869\n5216731,7.24,1/29/2024,Snapchat,166\n1178710,3.54,2/20/2024,YouTube,692\n2325498,5.93,7/9/2024,Facebook,553\n2359470,0.48,12/23/2023,YouTube,481\n4852077,5.79,5/21/2024,YouTube,310\n9154861,8.07,12/21/2023,Snapchat,876\n6101714,4.47,10/23/2023,TikTok,808\n4699988,2.82,10/25/2023,Snapchat,380\n9198779,11.68,7/19/2024,YouTube,697\n8143959,1.9,9/15/2023,YouTube,939\n4838423,2.5,10/20/2023,Snapchat,889\n8862464,8.56,11/25/2023,Snapchat,398\n7218932,9.82,8/16/2023,TikTok,969\n2994682,0.73,9/29/2023,Snapchat,967\n",
          "folderId": "0",
          "active": false,
          "open": true
        }
      },
      "folders": {
      },
      "openFiles": [
        "0",
        "1"
      ]
    },
    "display_name": "Technology Survey",
    "teacher_markdown": "This level practices and assesses students' ability to convert data types using .astype() and to_datetime() as well as loading data and looking at info() about the data.",
    "bubble_choice_description": "Practice converting data types with a survey about favorite social media platforms, posting history, and internet speed.",
    "thumbnail_url": "https://images.code.org/2f7af6b68d9f6f0131bac277f471c147-internet.png",
    "validation_file": {
      "id": "2",
      "name": "test.py",
      "language": "py",
      "contents": "import unittest\nfrom io import StringIO\nimport sys\nimport ast\nimport pandas as pd\n\nclass TestStudentDataModifications(unittest.TestCase):\n\n    def setUp(self):\n        # Setup to capture the print output if needed later\n        self.captured_output = StringIO()\n        sys.stdout = self.captured_output\n\n    def tearDown(self):\n        # Reset redirect and clear print capture\n        sys.stdout = sys.__stdout__\n\n    def test_step_1(self):\n        \"\"\"Test Step 1: Check that a DataFrame is loaded and 'info()' and 'describe()' is called\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Parse the script to check for 'info()' and 'describe()' being called using AST\n        tree = ast.parse(script_content)\n\n        # Traverse the AST to look for 'info()' and 'describe()' method calls on a DataFrame\n        info_called = False\n        describe_called = False\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'info':\n                  info_called = True\n                elif node.func.attr == 'describe':\n                  describe_called = True \n\n        # Assert that both info() and  describe() are called at least once\n        self.assertTrue(info_called, \"The code should call 'info()' on a DataFrame in Step 1.\")\n        self.assertTrue(describe_called, \"The code should call 'describe()' on a DataFrame in Step 1.\")\n        self.assertTrue(info_called and describe_called, \"The code should call both 'info()' and 'describe()' on a DataFrame in Step 1.\")\n\n    def test_step_2(self):\n        \"\"\"Test Step 2: Check that 'StudentID', 'InternetSpeedMbps', and 'LastPost' attributes are converted correctly\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access the modified DataFrame\n        local_vars = {}\n        exec(script_content, local_vars)\n\n        # Search for any DataFrame in the global variables\n        df_detected = None\n        for var in local_vars.values():\n            if isinstance(var, pd.DataFrame):\n                df_detected = var\n                break\n\n        # Ensure a DataFrame is detected\n        self.assertIsNotNone(df_detected, \"A DataFrame should be loaded and modified in Step 2.\")\n\n        # Check if the 'StudentID' attribute has the correct type 'int64'\n        self.assertIn('StudentID', df_detected.columns, \"The DataFrame should contain a 'StudentID' column.\")\n        self.assertEqual(df_detected['StudentID'].dtype, 'int64', \"The 'StudentID' column should be converted to 'int64'.\")\n\n        # Check if the 'InternetSpeedMbps' attribute has the correct type 'float'\n        self.assertIn('InternetSpeedMbps', df_detected.columns, \"The DataFrame should contain an 'InternetSpeedMbps' column.\")\n        self.assertEqual(df_detected['InternetSpeedMbps'].dtype, 'float64', \"The 'InternetSpeedMbps' column should be converted to 'float64'.\")\n\n        # Check if the 'LastPost' attribute has the correct type 'datetime64[ns]'\n        self.assertIn('LastPost', df_detected.columns, \"The DataFrame should contain a 'LastPost' column.\")\n        self.assertEqual(df_detected['LastPost'].dtype, 'datetime64[ns]', \"The 'LastPost' column should be converted to 'datetime64[ns]'.\")\n\n    def test_step_3(self):\n        \"\"\"Test Step 3: Check that 'info()' is called again to verify the changes\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Parse the script to check for multiple 'info()' calls using AST\n        tree = ast.parse(script_content)\n\n        # Traverse the AST to count the number of 'info()' calls\n        info_count = 0\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'info':\n                    info_count += 1\n\n        # Assert that info() is called more than once (before and after changes)\n        self.assertGreaterEqual(info_count, 2, \"The code should call 'info()' at least twice to verify changes in Step 3.\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
      "folderId": "0",
      "active": false,
      "open": false,
      "type": "validation"
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-09-15T22:25:04.671+00:00\",\"changed\":[\"cloned from \\\"datascience-U2L5-L8a_2024-pilot\\\"\"],\"cloned_from\":\"datascience-U2L5-L8a_2024-pilot\"},{\"changed_at\":\"2024-09-15 22:27:14 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\",\"display_name\",\"bubble_choice_description\",\"thumbnail_url\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-15 22:29:24 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 18:46:29 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 18:46:34 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 18:46:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 18:46:54 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 18:57:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 18:57:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 18:58:17 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 19:10:46 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-03 16:15:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18753,\"changed_by_email\":\"molly+levelbuilder@code.org\"}]"
}]]></config>
</Pythonlab>
