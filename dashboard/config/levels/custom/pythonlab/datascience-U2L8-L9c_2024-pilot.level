<Pythonlab>
  <config><![CDATA[{
  "game_id": 72,
  "created_at": "2024-09-17T19:19:07.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "properties": {
    "encrypted": "false",
    "long_instructions": "# Airline Quality\r\n\r\n::: details [**✅ Step 1**]\r\n**Explore the Dataset**\r\n- Run the starter code to explore the dataset using `info()`, `describe()` and `head()`.\r\n- Begin thinking about which of the attributes you might want to use to uncover insights into the question: ***How does the distribution of passengers across different classes relate to their satisfaction levels within those classes?***\r\n:::\r\n\r\n::: details [**✅ Step 2**]\r\n**Group the data:**\r\n- Consider how passenger satisfaction might vary by class. How can you use a stacked bar chart to visualize the distribution of satisfaction levels within each class?\r\n:::\r\n\r\n::: details [**✅ Step 3**]\r\n**Generate the Stacked Bar Chart:**\r\n- Use `stacked_data.plot` to create the chart\r\n- Use `plt.legend`, `plt.xticks`, `plt.xlabel`, `plt.ylabel`, and `plt.title` to label the chart\r\n- Use `plt.show` to display the chart\r\n:::\r\n\r\n::: details [**✅ Step 4**]\r\n**Interpret the Stacked Bar Chart:**\r\n- What does the chart reveal about the variation in satisfaction levels by class?\r\n- Are there specific classes where passengers report higher or lower satisfaction?\r\n:::\r\n\r\n\r\n",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read the dataset\ndata = pd.read_csv('Airline_Ratings.csv')\n\n# Explore the dataset\nprint(data.info())\nprint(data.describe())\nprint(data.head())\n\n\n# Step 2 - Group the data\n\n\n# Step 3 - Generate a stacked bar chart\n\n\n\n",
          "folderId": "0",
          "active": false,
          "open": true
        },
        "1": {
          "id": "1",
          "name": "Airline_Ratings.csv",
          "language": "csv",
          "contents": "Class,Satisfaction,Count\nBusiness,Neutral or Dissatisfied,18994\nBusiness,Satisfied,43166\nEconomy,Neutral or Dissatisfied,47366\nEconomy,Satisfied,10943\nEconomy Plus,Neutral or Dissatisfied,7092\nEconomy Plus,Satisfied,2319\n",
          "folderId": "0",
          "active": false,
          "open": true
        }
      },
      "folders": {
      },
      "openFiles": [
        "0",
        "1"
      ]
    },
    "teacher_markdown": "**What Students Should Take Away:**\r\n- Visualizing Passenger Satisfaction: Students should understand how to use groupby() and sum() to analyze and visualize passenger satisfaction across different airline classes.\r\n- Interpreting Stacked Bar Charts: Students should be able to interpret the stacked bar chart to draw conclusions about how class influences passenger satisfaction levels.\r\n\r\n\r\n**Misconceptions Students Might Have or Points They Might Struggle With and Tips to Assist:**\r\n-  Students might think that satisfaction is evenly distributed across classes without considering the factors that influence satisfaction levels.\r\n  - Tip: Encourage students to think about the factors that might affect passenger satisfaction, such as service quality and comfort. Discuss how these factors could vary by class and how this is reflected in the data.\r\n- Students may have difficulty understanding how to sum passenger counts in each satisfaction level and how this relates to class.\r\n  - Tip: Guide students through the grouping and summing process, helping them see how different satisfaction levels contribute to the overall picture of passenger experience by class\r\n\r\n",
    "display_name": "Airline Quality Ratings",
    "bubble_choice_description": "Practice creating a **stacked bar chart** to answer a question about airline quality!",
    "thumbnail_url": "https://images.code.org/3a1eb30553b7e33e5e4bf26c8b929dd6-dashboard.png",
    "validation_file": {
      "id": "2",
      "name": "test.py",
      "language": "py",
      "contents": "import unittest\nimport ast\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nclass TestAirlineSatisfactionStackedBarChart(unittest.TestCase):\n    def setUp(self):\n        # Read the student's code from 'main.py' and parse it into an AST\n        with open('main.py', 'r') as f:\n            self.tree = ast.parse(f.read())\n        \n        # Load the dataset for functional testing\n        self.data = pd.read_csv('Airline_Ratings.csv')\n\n    def detect_groupby(self):\n        \"\"\"Detect if the data is grouped by 'Class' and 'Satisfaction' with sum of 'Count'.\"\"\"\n        for node in ast.walk(self.tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'groupby' and isinstance(node.args[0], ast.List):\n                    # Look for 'Class' and 'Satisfaction' as grouping keys\n                    grouping_keys = [arg.value for arg in node.args[0].elts if isinstance(arg, ast.Constant)]\n                    if 'Class' in grouping_keys and 'Satisfaction' in grouping_keys:\n                        return True\n        return False\n\n    def detect_stacked_bar_chart(self):\n        \"\"\"Detect if a stacked bar chart is created using pandas plot with kind='bar' and stacked=True.\"\"\"\n        for node in ast.walk(self.tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'plot':\n                    for keyword in node.keywords:\n                        if keyword.arg == 'kind' and keyword.value.s == 'bar':\n                            if any(k.arg == 'stacked' and k.value.value for k in node.keywords):\n                                return True\n        return False\n\n    def test_step_1_group_data(self):\n        \"\"\"Test if the data is grouped by 'Class' and 'Satisfaction', summing the 'Count'.\"\"\"\n        self.assertTrue(self.detect_groupby(), \"Data grouping by 'Class' and 'Satisfaction' with sum of 'Count' is missing.\")\n        \n        # Additional functional test\n        grouped_data = self.data.groupby(['Class', 'Satisfaction'])['Count'].sum().unstack()\n        self.assertIsInstance(grouped_data, pd.DataFrame, \"The result should be a DataFrame.\")\n        self.assertTrue(grouped_data.notnull().all().all(), \"There should be no missing values in the grouped data.\")\n        \n    def test_step_2_create_stacked_bar_chart(self):\n        \"\"\"Test if a stacked bar chart is generated correctly.\"\"\"\n        self.assertTrue(self.detect_stacked_bar_chart(), \"Stacked bar chart creation is missing or incorrect.\")\n        \n        # Additional functional test\n        ax = self.data.groupby(['Class', 'Satisfaction'])['Count'].sum().unstack().plot(kind='bar', stacked=True)\n        self.assertTrue(ax.get_legend() is not None, \"The plot should have a legend.\")\n        \n    def test_step_3_labels_and_titles(self):\n        \"\"\"Test if labels and title are added to the plot.\"\"\"\n        title_set, xlabel_set, ylabel_set = False, False, False\n        for node in ast.walk(self.tree):\n            if isinstance(node, ast.Expr) and isinstance(node.value, ast.Call):\n                if isinstance(node.value.func, ast.Attribute):\n                    if node.value.func.attr == 'title':\n                        title_set = True\n                    elif node.value.func.attr == 'xlabel':\n                        xlabel_set = True\n                    elif node.value.func.attr == 'ylabel':\n                        ylabel_set = True\n        \n        self.assertTrue(title_set, \"Chart title is missing.\")\n        self.assertTrue(xlabel_set, \"X-axis label is missing.\")\n        self.assertTrue(ylabel_set, \"Y-axis label is missing.\")\n\n    def test_step_4_display_chart(self):\n        \"\"\"Check if plt.show() is called to display the plot.\"\"\"\n        show_detected = any(\n            isinstance(node, ast.Expr) and\n            isinstance(node.value, ast.Call) and\n            isinstance(node.value.func, ast.Attribute) and\n            node.value.func.attr == 'show'\n            for node in ast.walk(self.tree)\n        )\n        self.assertTrue(show_detected, \"plt.show() is missing to display the plot.\")\n\nif __name__ == '__main__':\n    unittest.main()\n",
      "folderId": "0",
      "active": false,
      "open": false,
      "type": "validation"
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-09-17T19:19:07.471+00:00\",\"changed\":[\"cloned from \\\"datascience-U2L8-L9b_2024-pilot\\\"\"],\"cloned_from\":\"datascience-U2L8-L9b_2024-pilot\"},{\"changed_at\":\"2024-09-17 19:24:54 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\",\"teacher_markdown\",\"display_name\",\"bubble_choice_description\",\"thumbnail_url\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-17 19:25:59 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-17 20:44:05 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\",\"bubble_choice_description\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-14 04:16:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":1574,\"changed_by_email\":\"ken.akiha@code.org\"}]"
}]]></config>
</Pythonlab>
