<Pythonlab>
  <config><![CDATA[{
  "published": true,
  "game_id": 72,
  "created_at": "2024-09-15T22:34:49.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "properties": {
    "encrypted": "false",
    "long_instructions": "# Reading\r\n\r\n::: details [**✅ Step 1**]\r\nLoad the data and print a summary using `info()` and `describe()`.\r\n:::\r\n\r\n::: details [**✅ Step 2**]\r\nConvert the following attributes:\r\n- **StudentID** to *int64*\r\n- **BooksReadPerMonth** to *float*\r\n- **LastBookRead** to *datetime*\r\n:::\r\n\r\n::: details [**✅ Step 3**]\r\nPrint a new summary using `info()` to verify your changes worked.\r\n:::\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "import pandas as pd \nimport matplotlib.pyplot as plt \n\n# STEP 1\n\n# STEP 2\n\n# STEP 3\n\n\n#Visualized data as a bar graph\nplt.figure()\nfavorite_genre = survey_data['FavoriteBookGenre'].value_counts()\nplt.bar(favorite_genre.index, favorite_genre.values, color='red')\nplt.title('The Popularity of Favorite Book Genres')\nplt.xlabel('Genre')\nplt.ylabel('Count')\nplt.show()",
          "folderId": "0",
          "active": false,
          "open": true
        },
        "1": {
          "id": "1",
          "name": "reading_data.csv",
          "language": "csv",
          "contents": "StudentID,BooksReadPerMonth,FavoriteBookGenre,PreferredReadingStyle,LastBookRead\n3791236,3,Fantasy,Digital,11/24/2023\n1968375,9,Non-Fiction,Physical,9/28/2023\n1060573,10,Horror,Digital,11/12/2023\n8497768,7,Science Fiction,Physical,5/29/2024\n6877134,0,Thriller,Digital,9/10/2023\n7744135,6,Mystery,Digital,7/6/2024\n8827738,7,Thriller,Physical,11/23/2023\n6367867,4,Fantasy,Digital,8/19/2023\n5791221,9,Fantasy,Physical,6/3/2024\n8143775,3,Mystery,Physical,7/2/2024\n5105892,5,Romance,Physical,9/5/2023\n7414345,4,Fantasy,Physical,7/11/2024\n2909453,1,Non-Fiction,Digital,8/31/2023\n4275942,3,Mystery,Digital,8/19/2023\n3786731,6,Science Fiction,Digital,12/5/2023\n1093072,3,Romance,Digital,10/8/2023\n1264419,5,Science Fiction,Digital,9/20/2023\n4371322.1,9,Fantasy,Digital,7/5/2024\n2075129,9,Horror,Physical,6/20/2024\n8756899,3,Romance,Physical,3/27/2024\n1613015,2,Historical Fiction,Physical,8/5/2023\n2503009,8,Fantasy,Digital,10/23/2023\n4455048,10,Horror,Physical,4/17/2024\n3790597,4,Thriller,Digital,7/8/2024\n4918337,2,Historical Fiction,Digital,8/17/2023\n9680840,7,Science Fiction,Digital,3/13/2024\n2624437,8,Romance,Physical,8/5/2023\n9726993,3,Fantasy,Physical,12/31/2023\n8274250,9,Science Fiction,Physical,11/1/2023\n6862044,10,Mystery,Physical,1/16/2024\n3341338,9,Science Fiction,Digital,2/6/2024\n7780041,5,Science Fiction,Physical,7/23/2024\n6816484,6,Science Fiction,Physical,2/8/2024\n2301749,3,Historical Fiction,Digital,1/4/2024\n7323049,9,Fantasy,Physical,10/30/2023\n7161229,0,Fantasy,Physical,5/24/2024\n4694569,4,Science Fiction,Physical,5/28/2024\n2490422,8,Thriller,Digital,5/11/2024\n3559698,2,Science Fiction,Physical,6/10/2024\n9549863,8,Fantasy,Digital,1/14/2024\n7789165,9,Fantasy,Digital,4/2/2024\n6858159,8,Thriller,Physical,11/10/2023\n3640294,5,Science Fiction,Digital,6/15/2024\n5504782,2,Science Fiction,Digital,8/7/2023\n6352216,3,Non-Fiction,Digital,12/12/2023\n9289775,2,Fantasy,Physical,3/13/2024\n2202823,2,Science Fiction,Physical,7/27/2024\n8060372,9,Science Fiction,Physical,10/17/2023\n5145473,8,Mystery,Digital,10/31/2023\n3732192,5,Thriller,Digital,6/14/2024\n2969897,3,Science Fiction,Physical,9/21/2023\n5039543,8,Science Fiction,Digital,6/1/2024\n4070929,10,Fantasy,Digital,2/3/2024\n8175393,6,Mystery,Digital,3/31/2024\n5851782,2,Non-Fiction,Physical,10/23/2023\n5902933,8,Non-Fiction,Physical,12/9/2023\n7589269,2,Non-Fiction,Physical,11/28/2023\n4470828,2,Thriller,Physical,5/11/2024\n9023044,6,Thriller,Digital,7/3/2024\n6551872,4,Thriller,Physical,4/6/2024\n6620968,7,Historical Fiction,Physical,7/23/2024\n3647256,4,Fantasy,Digital,11/17/2023\n1662546,7,Science Fiction,Digital,4/24/2024\n2966828,2,Fantasy,Physical,9/8/2023\n1114110,4,Fantasy,Digital,3/4/2024\n1838017,6,Fantasy,Digital,4/5/2024\n7291623,10,Science Fiction,Physical,10/31/2023\n6134565,10,Science Fiction,Digital,11/17/2023\n7321866,1,Science Fiction,Physical,12/19/2023\n1312029,10,Science Fiction,Digital,7/15/2024\n5874662,4,Thriller,Physical,7/3/2024\n2810810,10,Romance,Digital,5/26/2024\n3287115,9,Fantasy,Physical,2/15/2024\n6780715,1,Science Fiction,Physical,6/5/2024\n5169928,0,Mystery,Digital,6/9/2024\n8708516,0,Fantasy,Digital,4/19/2024\n3402019,10,Science Fiction,Physical,1/17/2024\n2744407,5,Mystery,Digital,8/16/2023\n6415729,1,Thriller,Digital,5/8/2024\n2244192,7,Mystery,Digital,4/9/2024\n5765512,2,Science Fiction,Digital,6/20/2024\n3702981,0,Fantasy,Digital,9/18/2023\n1807630,4,Fantasy,Physical,5/5/2024\n4755012,2,Fantasy,Physical,7/11/2024\n5098868,7,Horror,Physical,5/5/2024\n1355232,0,Fantasy,Physical,6/10/2024\n7381832,5,Mystery,Physical,9/11/2023\n2119763,3,Fantasy,Digital,10/7/2023\n6580655,1,Fantasy,Digital,6/16/2024\n1006671,8,Science Fiction,Physical,2/11/2024\n2593995,5,Romance,Digital,11/12/2023\n6224054,0,Historical Fiction,Physical,2/15/2024\n4771922,3,Romance,Physical,10/22/2023\n7934602,9,Historical Fiction,Digital,2/26/2024\n1426475,5,Science Fiction,Digital,9/15/2023\n5160195,7,Non-Fiction,Digital,3/28/2024\n4269631,5,Historical Fiction,Digital,6/17/2024\n4779589,2,Science Fiction,Physical,3/27/2024\n7625134,10,Science Fiction,Digital,9/23/2023\n4700062,7,Historical Fiction,Physical,9/12/2023\n",
          "folderId": "0",
          "active": false,
          "open": true
        },
        "2": {
          "id": "2",
          "name": "test.py",
          "language": "py",
          "contents": "import unittest\nfrom io import StringIO\nimport sys\nimport ast\nimport pandas as pd\n\nclass TestBooksReadDataModifications(unittest.TestCase):\n\n    def setUp(self):\n        # Setup to capture the print output if needed later\n        self.captured_output = StringIO()\n        sys.stdout = self.captured_output\n\n    def tearDown(self):\n        # Reset redirect and clear print capture\n        sys.stdout = sys.__stdout__\n\n    def test_step_1(self):\n        \"\"\"Test Step 1: Check that a DataFrame is loaded and both 'info()' and 'describe()' are called\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Parse the script to check for 'info()' and 'describe()' being called using AST\n        tree = ast.parse(script_content)\n\n        # Traverse the AST to look for 'info()' and 'describe()' method calls on a DataFrame\n        info_called = False\n        describe_called = False\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'info':\n                    info_called = True\n                elif node.func.attr == 'describe':\n                    describe_called = True\n\n        # Assert that both info() and describe() are called at least once\n        self.assertTrue(info_called, \"The code should call 'info()' on a DataFrame in Step 1.\")\n        self.assertTrue(describe_called, \"The code should call 'describe()' on a DataFrame in Step 1.\")\n        self.assertTrue(info_called and describe_called, \"The code should call both 'info()' and 'describe()' on a DataFrame in Step 1.\")\n\n    def test_step_2(self):\n        \"\"\"Test Step 2: Check that 'StudentID', 'BooksReadPerMonth', and 'LastBookRead' attributes are converted correctly\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access the modified DataFrame\n        local_vars = {}\n        exec(script_content, local_vars)\n\n        # Search for any DataFrame in the global variables\n        df_detected = None\n        for var in local_vars.values():\n            if isinstance(var, pd.DataFrame):\n                df_detected = var\n                break\n\n        # Ensure a DataFrame is detected\n        self.assertIsNotNone(df_detected, \"A DataFrame should be loaded and modified in Step 2.\")\n\n        # Check if the 'StudentID' attribute has the correct type 'int64'\n        self.assertIn('StudentID', df_detected.columns, \"The DataFrame should contain a 'StudentID' column.\")\n        self.assertEqual(df_detected['StudentID'].dtype, 'int64', \"The 'StudentID' column should be converted to 'int64'.\")\n\n        # Check if the 'BooksReadPerMonth' attribute has the correct type 'float64'\n        self.assertIn('BooksReadPerMonth', df_detected.columns, \"The DataFrame should contain a 'BooksReadPerMonth' column.\")\n        self.assertEqual(df_detected['BooksReadPerMonth'].dtype, 'float64', \"The 'BooksReadPerMonth' column should be converted to 'float64'.\")\n\n        # Check if the 'LastBookRead' attribute has the correct type 'datetime64[ns]'\n        self.assertIn('LastBookRead', df_detected.columns, \"The DataFrame should contain a 'LastBookRead' column.\")\n        self.assertEqual(df_detected['LastBookRead'].dtype, 'datetime64[ns]', \"The 'LastBookRead' column should be converted to 'datetime64[ns]'.\")\n\n    def test_step_3(self):\n        \"\"\"Test Step 3: Check that 'info()' is called again to verify the changes\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Parse the script to check for multiple 'info()' calls using AST\n        tree = ast.parse(script_content)\n\n        # Traverse the AST to count the number of 'info()' calls\n        info_count = 0\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'info':\n                    info_count += 1\n\n        # Assert that info() is called more than once (before and after changes)\n        self.assertGreaterEqual(info_count, 2, \"The code should call 'info()' at least twice to verify changes in Step 3.\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
          "folderId": "0",
          "active": true,
          "open": true,
          "type": "validation"
        }
      },
      "folders": {
      },
      "openFiles": [
        "0",
        "1",
        "2"
      ]
    },
    "display_name": "Reading Survey",
    "teacher_markdown": "This level practices and assesses students' ability to convert data types using .astype() and to_datetime() as well as loading data and looking at info() about the data.",
    "bubble_choice_description": "Practice converting data types with a survey about books read per month, favorite genre, preferred reading style and the date of the last book read.",
    "thumbnail_url": "https://images.code.org/87b0260d2086d126df75e4122b85ec77-stack-of-books.png"
  },
  "audit_log": "[{\"changed_at\":\"2024-09-15T22:34:49.486+00:00\",\"changed\":[\"cloned from \\\"datascience-U2L5-L8b_2024-pilot\\\"\"],\"cloned_from\":\"datascience-U2L5-L8b_2024-pilot\"},{\"changed_at\":\"2024-09-15 22:37:03 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\",\"bubble_choice_description\",\"thumbnail_url\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-15 22:37:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-15 22:43:57 +0000\",\"changed\":[\"predict_settings\",\"display_name\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 19:18:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 19:18:26 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 19:18:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-28 19:18:48 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"}]"
}]]></config>
</Pythonlab>
