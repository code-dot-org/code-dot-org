<Pythonlab>
  <config><![CDATA[{
  "game_id": 72,
  "created_at": "2024-09-14T00:11:01.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "properties": {
    "encrypted": "false",
    "long_instructions": "# Fitness!\r\n\r\n::: details [**✅ Step 1**]\r\nDeclare variables for the information we know:\r\n- `exercise_duration`, which is **30**\r\n- `calories_burned_per_minute`, which is **10**\r\n:::\r\n\r\n::: details [**✅ Step 2**]\r\n- To find out the total calories burned, write an expression that multiplies the `exercise_duration` by the `calories_burned_per_minute`. \r\n- Store the result in a variable called `total_calories_burned`.\r\n:::\r\n\r\n::: details [**✅ Step 3**]\r\nPrint a message that contains the time spent exercising and the calories burned. For example: *\"You exercised for 30 minutes and burned 300 calories.\"*\r\n:::\r\n\r\n",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "# Step 1\n\n\n# Step 2\n\n\n# Step 3\nmessage = \"\"\nprint(message)",
          "folderId": "0",
          "active": true,
          "open": true,
          "type": "locked_starter"
        }
      },
      "folders": {
      },
      "openFiles": [
        "0"
      ]
    },
    "display_name": "Fitness Tracker",
    "bubble_choice_description": "Practice python by calculating the total calories burned based on the duration of the activity and the calories burned per minute.",
    "thumbnail_url": "https://images.code.org/592f127678d4a4e31a6737a21561cbf4-heart-rate.png",
    "validation_file": {
      "id": "1",
      "name": "test.py",
      "language": "py",
      "contents": "import unittest\nfrom io import StringIO\nimport sys\n\nclass TestCaloriesBurned(unittest.TestCase):\n\n    def setUp(self):\n        # Setup to capture the print output if needed later\n        self.captured_output = StringIO()\n        sys.stdout = self.captured_output\n\n    def tearDown(self):\n        # Reset redirect.\n        sys.stdout = sys.__stdout__\n\n    def test_step_1(self):\n        \"\"\"Test Step 1: Check that exercise_duration and calories_burned_per_minute are defined\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access variables\n        exec(script_content)\n\n        # Check if the variables are defined\n        self.assertIn('exercise_duration', locals(), \"Variable 'exercise_duration' should be defined in Step 1.\")\n        self.assertIn('calories_burned_per_minute', locals(), \"Variable 'calories_burned_per_minute' should be defined in Step 1.\")\n\n        # Check if the variables have the correct values\n        self.assertEqual(locals()['exercise_duration'], 30, \"Variable 'exercise_duration' should be 30 in Step 1.\")\n        self.assertEqual(locals()['calories_burned_per_minute'], 10, \"Variable 'calories_burned_per_minute' should be 10 in Step 1.\")\n\n    def test_step_2(self):\n        \"\"\"Test Step 2: Check that total_calories_burned is correctly calculated\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access variables\n        exec(script_content)\n\n        # Check if the variable 'total_calories_burned' is defined\n        self.assertIn('total_calories_burned', locals(), \"Variable 'total_calories_burned' should be defined in Step 2.\")\n\n        # Check if 'total_calories_burned' is correctly calculated\n        expected_total_calories_burned = 30 * 10\n        self.assertEqual(locals()['total_calories_burned'], expected_total_calories_burned, \"Variable 'total_calories_burned' should be the result of exercise_duration * calories_burned_per_minute.\")\n\n    def test_step_3(self):\n        \"\"\"Test Step 3: Check that message is defined and is not empty\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access variables\n        exec(script_content)\n\n        # Check if the 'message' variable is defined\n        self.assertIn('message', locals(), \"Variable 'message' should be defined in Step 3.\")\n\n        # Ensure 'message' is not an empty string (we are not checking the exact content)\n        self.assertNotEqual(locals()['message'], \"\", \"Variable 'message' should not be an empty string.\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
      "folderId": "0",
      "active": false,
      "open": false,
      "type": "validation"
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-09-14T00:11:01.707+00:00\",\"changed\":[\"cloned from \\\"datascience-U2L2-L8b_2024-pilot\\\"\"],\"cloned_from\":\"datascience-U2L2-L8b_2024-pilot\"},{\"changed_at\":\"2024-09-14 00:12:31 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-14 00:33:27 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 18:47:58 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 18:49:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 18:49:43 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 20:23:35 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 20:25:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 20:26:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 20:26:07 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-27 20:15:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-03 16:08:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18753,\"changed_by_email\":\"molly+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-21 17:45:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18753,\"changed_by_email\":\"molly+levelbuilder@code.org\"}]"
}]]></config>
</Pythonlab>
