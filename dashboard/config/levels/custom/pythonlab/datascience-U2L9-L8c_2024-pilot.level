<Pythonlab>
  <config><![CDATA[{
  "published": true,
  "game_id": 72,
  "created_at": "2024-09-17T22:05:50.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "properties": {
    "encrypted": "false",
    "long_instructions": "# Arctic Sea Ice\r\n\r\n::: details [**✅ Step 1**]\r\n**Evaluate the Dataset:**\r\n- Run the code to see information and statistics for the dataset about the sea ice extent over time.\r\n- Use `min()` , `max()` and `sum()` to identify the minimum, maximum and total sea ice extent.\r\n:::\r\n\r\n::: details [**✅ Step 2**]\r\n**Summarize the Data:**\r\n- Use the `agg()` function to calculate the total, average, minimum, and maximum ssea ice extent for each date.\r\n- Use `groupby()` if applicable to summarize the data over time. \r\n:::\r\n\r\n::: details [**✅ Step 3**]\r\n**Interpret the Data:**\r\nDiscuss with a partner what the calculated statistics reveal about sea ice extent in the Arctic. Are there any significant trends or anomalies?\r\n:::\r\n\r\n::: details [**✅ Step 4**]\r\n**Form a Hypothesis:**\r\nDiscuss with a partner and create a brief hypothesis about the data. Consider what factors or broader events might be influencing the data and the trends, patterns or anomalies you identified.\r\n:::\r\n",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndata = pd.read_csv('Arctic_Sea_Ice.csv')\n\n# Display basic information and statistics about the dataset \nprint(data.info()) \nprint(data.describe())\n\n",
          "folderId": "0",
          "active": true,
          "open": true
        },
        "1": {
          "id": "1",
          "name": "Arctic_Sea_Ice.csv",
          "language": "csv",
          "contents": "ID,Year,Month,Extent (million km2),Area (million km2)\n0,1979,9,7.05,4.58\n1,1980,9,7.67,4.87\n2,1981,9,7.14,4.44\n3,1982,9,7.3,4.43\n4,1983,9,7.39,4.7\n5,1984,9,6.81,4.11\n6,1985,9,6.7,4.23\n7,1986,9,7.41,4.72\n8,1987,9,7.28,5.64\n9,1988,9,7.37,5.36\n10,1989,9,7.01,4.86\n11,1990,9,6.14,4.55\n12,1991,9,6.47,4.51\n13,1992,9,7.47,5.43\n14,1993,9,6.4,4.58\n15,1994,9,7.14,5.13\n16,1995,9,6.08,4.43\n17,1996,9,7.58,5.62\n18,1997,9,6.69,4.89\n19,1998,9,6.54,4.3\n20,1999,9,6.12,4.29\n21,2000,9,6.25,4.35\n22,2001,9,6.73,4.59\n23,2002,9,5.83,4.03\n24,2003,9,6.12,4.05\n25,2004,9,5.98,4.39\n26,2005,9,5.5,4.07\n27,2006,9,5.86,4.01\n28,2007,9,4.27,2.82\n29,2008,9,4.69,3.26\n30,2009,9,5.26,3.76\n31,2010,9,4.87,3.34\n32,2011,9,4.56,3.21\n33,2012,9,3.57,2.41\n34,2013,9,5.21,3.78\n35,2014,9,5.22,3.74\n36,2015,9,4.62,3.42\n37,2016,9,4.53,2.91\n38,2017,9,4.82,3.35\n39,2018,9,4.79,3.35\n40,2019,9,4.36,3.17\n41,2020,9,4,2.83\n42,2021,9,4.95,3.47\n43,2022,9,4.87,3.43",
          "folderId": "0",
          "active": false,
          "open": true
        },
        "2": {
          "id": "2",
          "name": "test.py",
          "language": "py",
          "contents": "import unittest\nimport ast\n\nclass TestSeaIceExtent(unittest.TestCase):\n    def setUp(self):\n        # Set up the initial context and parse the AST of the student's code.\n        with open('main.py', 'r') as f:\n            self.tree = ast.parse(f.read())\n\n    def detect_min_max_sum(self, column_name):\n        \"\"\"Detects min(), max(), and sum() calls on a specific DataFrame column.\"\"\"\n        min_detected = False\n        max_detected = False\n        sum_detected = False\n\n        for node in ast.walk(self.tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                # Check for min, max, or sum function calls\n                if node.func.attr in {'min', 'max', 'sum'}:\n                    if isinstance(node.func.value, ast.Subscript):\n                        # Ensure it's applied to the correct column in the DataFrame\n                        if isinstance(node.func.value.value, ast.Name) and node.func.value.value.id == 'data':\n                            if isinstance(node.func.value.slice, ast.Constant) and node.func.value.slice.value == column_name:\n                                if node.func.attr == 'min':\n                                    min_detected = True\n                                elif node.func.attr == 'max':\n                                    max_detected = True\n                                elif node.func.attr == 'sum':\n                                    sum_detected = True\n        return min_detected, max_detected, sum_detected\n\n    def detect_agg_function(self, group_column, agg_column):\n        \"\"\"Detect if the agg() function is used with specific operations on a grouped DataFrame column.\"\"\"\n        for node in ast.walk(self.tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'agg':\n                    # Check if agg is applied on a groupby operation\n                    if isinstance(node.func.value, ast.Subscript):\n                        if isinstance(node.func.value.value, ast.Call) and isinstance(node.func.value.value.func, ast.Attribute):\n                            if node.func.value.value.func.attr == 'groupby':\n                                # Check that the groupby is applied to the correct group column\n                                if isinstance(node.func.value.value.args[0], ast.Constant) and node.func.value.value.args[0].value == group_column:\n                                    # Ensure the aggregation operations are ['sum', 'mean', 'min', 'max']\n                                    if isinstance(node.args[0], ast.List):\n                                        operations = {elt.value for elt in node.args[0].elts if isinstance(elt, ast.Constant)}\n                                        if {'sum', 'mean', 'min', 'max'}.issubset(operations):\n                                            return True\n        return False\n\n    def test_a_min_max_sum_on_sea_ice_extent(self):\n        \"\"\"Use min(), max(), and sum() to identify the minimum, maximum, and total sea ice extent.\"\"\"\n        min_detected, max_detected, sum_detected = self.detect_min_max_sum('Extent (million km2)')\n\n        # Debug information for identifying what was or wasn't detected\n        print(f\"Min Detected: {min_detected}, Max Detected: {max_detected}, Sum Detected: {sum_detected}\")\n\n        # Check that all three functions are detected\n        self.assertTrue(min_detected, \"The code should use min() to identify the minimum sea ice extent in 'Extent (million km2)'.\")\n        self.assertTrue(max_detected, \"The code should use max() to identify the maximum sea ice extent in 'Extent (million km2)'.\")\n        self.assertTrue(sum_detected, \"The code should use sum() to calculate the total sea ice extent in 'Extent (million km2)'.\")\n\n    def test_b_agg_on_sea_ice_extent(self):\n        \"\"\"Use the agg() function to calculate the total, average, minimum, and maximum sea ice extent for each date.\"\"\"\n        agg_detected = self.detect_agg_function('Year', 'Extent (million km2)')\n\n        # Debug information for identifying if agg was correctly detected\n        print(f\"agg() Detected: {agg_detected}\")\n\n        # Check that the agg() function is used correctly\n        self.assertTrue(agg_detected, \"The code should use the agg() function to calculate total, average, minimum, and maximum sea ice extent for each date.\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
          "folderId": "0",
          "active": false,
          "open": true,
          "type": "validation"
        }
      },
      "folders": {
      },
      "openFiles": [
        "0",
        "1",
        "2"
      ]
    },
    "display_name": "Arctic Sea Ice",
    "bubble_choice_description": "Practice using pandas functions to identify important statistics about the sea ice extent over time and uncover initial insights.",
    "thumbnail_url": "https://images.code.org/6f0b03f2ffb52431556f53ea02516ea2-glacier.png",
    "teacher_markdown": "**What Students Should Take Away:**\r\n- Students practice using min() and max() to find the lowest and highest sea ice extents, providing a clear picture of the dataset’s extremes.\r\n- Students learn to use the sum() function to calculate total sea ice extent, reinforcing their understanding of cumulative data analysis.\r\n- By using agg() and groupby() together, students practice summarizing sea ice data across different time periods, which helps them see broader trends.\r\n\r\n**Misconceptions Students Might Have or Points They Might Struggle With and Tips to Assist:**\r\n- Students might think that only one statistic (e.g., mean) is important, neglecting the significance of other statistics.\r\n  - Tip: Encourage students to consider how each statistic offers a different perspective. For instance, the mean shows overall trends, while min and max highlight extremes.\r\n- Students may have difficulty seeing the significance of gradual changes in the data.\r\n  - Tip: Guide students to look for long-term trends and discuss how even small, gradual changes can have significant impacts over time."
  },
  "audit_log": "[{\"changed_at\":\"2024-09-17T22:05:50.511+00:00\",\"changed\":[\"cloned from \\\"datascience-U2L9-L8b_2024-pilot\\\"\"],\"cloned_from\":\"datascience-U2L9-L8b_2024-pilot\"},{\"changed_at\":\"2024-09-17 22:15:31 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\",\"display_name\",\"bubble_choice_description\",\"thumbnail_url\",\"teacher_markdown\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-17 22:16:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 00:31:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 00:31:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 00:31:41 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 00:32:50 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 00:34:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 00:34:55 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"}]"
}]]></config>
</Pythonlab>
