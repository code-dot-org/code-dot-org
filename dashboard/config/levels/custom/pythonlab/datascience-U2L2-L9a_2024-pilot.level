<Pythonlab>
  <config><![CDATA[{
  "published": true,
  "game_id": 72,
  "created_at": "2024-09-14T16:24:50.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "properties": {
    "encrypted": "false",
    "long_instructions": "# Follower Count\r\n\r\n::: details [**✅ Step 1**]\r\nCreate a list named `social_networks` that contains the names of the top three social platforms, and a list named `follower_counts` that contains the associated followers on those platforms. \r\n:::\r\n\r\n::: details [**✅ Step 2**]\r\nCreate an expression that calculates `total_followers` which sums all of the elements within the `follower_counts` list.\r\n:::\r\n\r\n::: details [**✅ Step 3**]\r\nCreate and print a message variable that will concatenate the names of the three social platforms and the `total_followers`. For example: *“The total number of followers across Facebook, Instagram, and Twitter is 800.”*\r\n:::\r\n\r\n",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "# Step 1\n\n\n# Step 2\ntotal_followers = 0\n\n# Step 3\nmessage = \"\"\nprint(message)",
          "folderId": "0",
          "active": true,
          "open": true
        },
        "1": {
          "id": "1",
          "name": "validation.py",
          "language": "py",
          "contents": "import unittest\nfrom io import StringIO\nimport sys\n\nclass TestSocialFollowers(unittest.TestCase):\n\n    def setUp(self):\n        # Setup to capture the print output if needed later\n        self.captured_output = StringIO()\n        sys.stdout = self.captured_output\n\n    def tearDown(self):\n        # Reset redirect.\n        sys.stdout = sys.__stdout__\n\n    def test_step_1(self):\n        \"\"\"Test Step 1: Check that social_networks and follower_counts are defined\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access variables\n        exec(script_content)\n\n        # Check if the lists are defined\n        self.assertIn('social_networks', locals(), \"List 'social_networks' should be defined in Step 1.\")\n        self.assertIn('follower_counts', locals(), \"List 'follower_counts' should be defined in Step 1.\")\n\n        # Check that both lists contain values (since we don't know the exact contents)\n        self.assertGreater(len(locals()['social_networks']), 0, \"'social_networks' list should not be empty.\")\n        self.assertGreater(len(locals()['follower_counts']), 0, \"'follower_counts' list should not be empty.\")\n\n    def test_step_2(self):\n        \"\"\"Test Step 2: Check that total_followers is correctly calculated\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access variables\n        exec(script_content)\n\n        # Check if the variable 'total_followers' is defined\n        self.assertIn('total_followers', locals(), \"Variable 'total_followers' should be defined in Step 2.\")\n\n        # Ensure total_followers is an integer or float and has some value\n        self.assertIsInstance(locals()['total_followers'], (int, float), \"'total_followers' should be a number.\")\n        self.assertGreater(locals()['total_followers'], 0, \"'total_followers' should have a positive value.\")\n\n    def test_step_3(self):\n        \"\"\"Test Step 3: Check that message is defined, is not empty, and contains platform names\"\"\"\n        with open('main.py') as f:\n            script_content = f.read()\n\n        # Execute the script to access variables\n        exec(script_content)\n\n        # Check if the 'message' variable is defined\n        self.assertIn('message', locals(), \"Variable 'message' should be defined in Step 3.\")\n\n        # Ensure 'message' is not an empty string\n        self.assertNotEqual(locals()['message'], \"\", \"Variable 'message' should not be an empty string.\")\n\n        # Optionally check if the message contains the names of the platforms (flexible check)\n        platforms = locals()['social_networks']\n        for platform in platforms:\n            self.assertIn(platform, locals()['message'], f\"The platform name '{platform}' should appear in the 'message'.\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
          "folderId": "0",
          "active": false,
          "open": true,
          "type": "validation"
        }
      },
      "folders": {
      },
      "openFiles": [
        "0",
        "1"
      ]
    },
    "display_name": "Social Media Counts",
    "bubble_choice_description": "Practice python by calculating the total number of followers across different social media platforms. ",
    "thumbnail_url": "https://images.code.org/965a6112d897553ea4b54c94411ce715-social-media.png"
  },
  "audit_log": "[{\"changed_at\":\"2024-09-14T16:24:50.198+00:00\",\"changed\":[\"cloned from \\\"datascience-U2L2-L8a_2024-pilot\\\"\"],\"cloned_from\":\"datascience-U2L2-L8a_2024-pilot\"},{\"changed_at\":\"2024-09-14 16:27:53 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\",\"display_name\",\"bubble_choice_description\",\"thumbnail_url\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-14 16:28:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-14 16:38:17 +0000\",\"changed\":[\"predict_settings\",\"display_name\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 20:32:40 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 20:33:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 20:33:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 20:33:35 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 20:35:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-26 20:35:48 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"}]"
}]]></config>
</Pythonlab>
