<Pythonlab>
  <config><![CDATA[{
  "game_id": 72,
  "created_at": "2024-09-17T22:50:00.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "properties": {
    "encrypted": "false",
    "long_instructions": "# Fabric Dying\r\n\r\n::: details [**✅ Step 1**]\r\nFilter for all dyes that include **Indigo** as the first ingredient and that have a non-null second ingredient. Print the filtered DataFrame.\r\n:::\r\n\r\n::: details [**✅ Step 2**]\r\nFilter for all color results that end in **\"k\"**. Print the filtered DataFrame.\r\n:::\r\n\r\n::: details [**✅ Step 3**]\r\nFilter for all dyes that use **Black Tea** as a second ingredient, that use **linen**, and that take longer than **100** min to dye. Print the filtered DataFrame.\r\n:::\r\n\r\n::: details [**✅ Step 4**]\r\nCalculate the **count** and **median** *\"Time to Dye\"* for each *\"Color Result\"* for all dyes that require two ingredients only.\r\n:::\r\n",
    "ai_tutor_available": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "predict_settings": {
      "isPredictLevel": false
    },
    "start_sources": {
      "files": {
        "0": {
          "id": "0",
          "name": "main.py",
          "language": "py",
          "contents": "import pandas as pd\n\n\ndf = pd.read_csv('fabric_dye_log.csv')\n\n# Step 1\n\n\n# Step 2\n\n\n# Step 3\n\n\n# Step 4\n\n",
          "folderId": "0",
          "active": true,
          "open": true,
          "type": "locked_starter"
        },
        "1": {
          "id": "1",
          "name": "fabric_dye_log.csv",
          "language": "csv",
          "contents": "Ingredient One,Quantity One,Ingredient Two,Quantity Two,Time to Dye,Color Result,Fabric Type\nWalnut Hulls,47,,0,176,Brown,Rayon\nCochineal,66,Onion Skins,45,63,Purple,Silk\nMadder,51,Onion Skins,124,68,Red,Hemp\nIndigo,15,,0,167,Blue,Rayon\nPomegranate,71,Pomegranate,142,216,Yellow,Nylon\nTurmeric,41,,0,225,Orange,Nylon\nWalnut Hulls,10,,0,236,Brown,Linen\nIndigo,115,Black Tea,131,224,Blue,Linen\nTurmeric,109,,0,183,Orange,Wool\nTurmeric,32,Brazilwood,115,87,Pink,Polyester\nWeld,16,,0,65,Yellow,Rayon\nCochineal,21,Onion Skins,53,141,Purple,Wool\nBlack Tea,118,,0,86,Brown,Polyester\nIndigo,24,Pomegranate,140,105,Blue,Polyester\nBrazilwood,27,,0,70,Pink,Hemp\nTurmeric,72,,0,122,Orange,Nylon\nSaffron,73,,0,201,Yellow,Silk\nSaffron,73,,0,194,Yellow,Linen\nTurmeric,11,Black Tea,162,229,Brown,Rayon\nOnion Skins,24,Madder,94,110,Red,Nylon\nMadder,109,Pomegranate,74,172,Red,Silk\nCochineal,86,Pomegranate,82,82,Purple,Hemp\nCochineal,52,Cutch,115,124,Purple,Polyester\nCutch,41,Logwood,42,125,Black,Polyester\nOnion Skins,52,Cutch,127,104,Brown,Cotton\nLogwood,190,Logwood,115,140,Black,Rayon\nLogwood,156,Black Tea,165,183,Black,Silk\nRed Sandalwood,108,Henna,162,100,Red,Linen\nHenna,73,,0,118,Brown,Linen\nOnion Skins,191,,0,65,Yellow,Polyester\nWalnut Hulls,35,,0,219,Brown,Nylon\nCutch,16,Brazilwood,162,51,Brown,Hemp\nMadder,95,,0,180,Red,Hemp\nPomegranate,96,,0,150,Yellow,Hemp\nBlack Tea,85,Red Sandalwood,162,157,Red,Polyester\nIndigo,69,,0,229,Blue,Hemp\nCutch,17,,0,211,Brown,Wool\nCochineal,51,Logwood,178,109,Black,Wool\nIndigo,98,,0,173,Blue,Rayon\nPomegranate,35,,0,152,Yellow,Wool\nMadder,97,,0,153,Red,Linen\nIndigo,101,Madder,91,196,Blue,Nylon\nRed Sandalwood,30,,0,168,Red,Nylon\nRed Sandalwood,97,,0,121,Red,Nylon\nIndigo,17,Saffron,54,188,Blue,Polyester\nHenna,54,Turmeric,13,229,Brown,Wool\nSaffron,192,Red Sandalwood,164,44,Red,Nylon\nHenna,194,,0,227,Brown,Cotton\nCutch,95,Cutch,70,103,Brown,Cotton\nCutch,46,Cochineal,104,161,Purple,Polyester\nMadder,146,Turmeric,179,97,Red,Nylon\nWalnut Hulls,12,Turmeric,128,57,Brown,Nylon\nMadder,112,Logwood,200,201,Black,Polyester\nCochineal,171,Indigo,124,52,Purple,Rayon\nWeld,68,Logwood,82,57,Black,Silk\nCochineal,41,Logwood,158,89,Black,Polyester\nMadder,42,,0,162,Red,Silk\nIndigo,68,,0,134,Blue,Hemp\nOnion Skins,106,Red Sandalwood,25,54,Red,Rayon\nMadder,21,Cutch,122,139,Red,Rayon\nWeld,16,,0,114,Yellow,Linen\nWalnut Hulls,173,Black Tea,137,175,Brown,Cotton\nPomegranate,190,,0,32,Yellow,Polyester\nSaffron,48,,0,174,Yellow,Cotton\nMadder,187,,0,134,Red,Linen\nTurmeric,50,,0,31,Orange,Nylon\nHenna,110,,0,150,Brown,Linen\nWeld,85,Weld,50,164,Yellow,Silk\nWeld,159,,0,143,Yellow,Linen\nRed Sandalwood,112,,0,113,Red,Linen\nBrazilwood,192,,0,229,Pink,Rayon\nRed Sandalwood,197,,0,216,Red,Nylon\nLogwood,19,Logwood,24,219,Black,Silk\nRed Sandalwood,117,,0,157,Red,Silk\nOnion Skins,173,,0,234,Yellow,Nylon\nWalnut Hulls,14,Black Tea,47,67,Brown,Polyester\nWalnut Hulls,61,Pomegranate,23,226,Brown,Silk\nMadder,151,Black Tea,75,131,Red,Hemp\nPomegranate,150,Black Tea,34,184,Brown,Linen\nTurmeric,184,,0,175,Orange,Polyester\nWalnut Hulls,32,Henna,132,67,Brown,Linen\nIndigo,28,,0,213,Blue,Polyester\nTurmeric,181,,0,103,Orange,Polyester\nLogwood,119,,0,236,Black,Cotton\nWeld,109,Black Tea,63,89,Brown,Linen\nCutch,17,Saffron,135,239,Brown,Wool\nWalnut Hulls,199,,0,153,Brown,Wool\nCutch,67,Madder,135,66,Red,Silk\nHenna,41,Saffron,100,155,Brown,Nylon\nSaffron,69,,0,35,Yellow,Linen\nRed Sandalwood,78,,0,154,Red,Nylon\nPomegranate,47,Turmeric,20,216,Orange,Rayon\nSaffron,55,,0,218,Yellow,Linen\nRed Sandalwood,123,,0,108,Red,Linen\nIndigo,192,Cochineal,82,138,Purple,Wool\nMadder,175,,0,79,Red,Polyester\nMadder,122,,0,70,Red,Hemp\nBrazilwood,195,Saffron,68,37,Pink,Silk\nIndigo,116,Cutch,171,109,Blue,Wool\nTurmeric,50,,0,78,Orange,Rayon\n",
          "folderId": "0",
          "active": false,
          "open": true
        }
      },
      "folders": {
      },
      "openFiles": [
        "0",
        "1"
      ]
    },
    "display_name": "Fabric Dying Log",
    "bubble_choice_description": "Practice using pandas functions to filter a dataset that contains information that tracks how mixing natural ingredients creates dyes for fabrics.",
    "thumbnail_url": "https://images.code.org/456d687aab78042eea2a2e453ab82c07-colorant.png",
    "teacher_markdown": "**Student Takeaways:**\r\n- Students learn how to filter a dataset based on multiple conditions, including non-null values, specific string patterns, and categorical attributes. \r\n- Students understand how to calculate and interpret aggregate measures such as total and median values within specific categories, which is essential for summarizing data.\r\n\r\n**Possible Misconceptions and/or Difficulties:**\r\n- Students might struggle with filtering based on the position of an ingredient in a list or sequence within the dataset.\r\n- There may be confusion about how to apply aggregation functions like count() and median() correctly, especially when the filtering criteria involve multiple columns or conditions.",
    "validation_file": {
      "id": "2",
      "name": "test.py",
      "language": "py",
      "contents": "import unittest\nimport ast\n\nclass TestFabricDyeLog(unittest.TestCase):\n    def setUp(self):\n        # Parse the AST of the student's code.\n        with open('main.py', 'r') as f:\n            self.tree = ast.parse(f.read())\n\n    def detect_filter_condition(self, column_name, comparison_value, comparison_operator='=='):\n        \"\"\"Generic detector for comparison filters with a specified column and value.\"\"\"\n        for node in ast.walk(self.tree):\n            if isinstance(node, ast.Compare):\n                if isinstance(node.left, ast.Subscript) and node.left.slice.value == column_name:\n                    if isinstance(node.comparators[0], ast.Constant) and node.comparators[0].value == comparison_value:\n                        if isinstance(node.ops[0], ast.Eq) and comparison_operator == '==' or isinstance(node.ops[0], ast.Gt) and comparison_operator == '>':\n                            return True\n        return False\n\n    def detect_notnull_condition(self, column_name):\n        \"\"\"Detects a notnull() filter on a specific column.\"\"\"\n        for node in ast.walk(self.tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'notnull' and isinstance(node.func.value, ast.Subscript):\n                    if node.func.value.slice.value == column_name:\n                        return True\n        return False\n\n    def detect_logical_and(self, conditions):\n        \"\"\"Detects a logical AND operation combining specified conditions.\"\"\"\n        for node in ast.walk(self.tree):\n            if isinstance(node, ast.BoolOp) and isinstance(node.op, ast.And):\n                # Check if all specified conditions are found in the same AND operation\n                found_conditions = [self.match_condition_in_node(condition, node) for condition in conditions]\n                if all(found_conditions):\n                    return True\n        return False\n\n    def match_condition_in_node(self, condition, node):\n        \"\"\"Helper function to match specific condition in the node.\"\"\"\n        column_name, comparison_value, comparison_operator = condition\n        for comp in node.values:\n            if isinstance(comp, ast.Compare) and isinstance(comp.left, ast.Subscript):\n                if comp.left.slice.value == column_name:\n                    if isinstance(comp.comparators[0], ast.Constant) and comp.comparators[0].value == comparison_value:\n                        if isinstance(comp.ops[0], ast.Eq) and comparison_operator == '==' or isinstance(comp.ops[0], ast.Gt) and comparison_operator == '>':\n                            return True\n        return False\n\n    def detect_groupby_aggregation(self, groupby_column, target_column, operations):\n        \"\"\"Detects groupby and aggregation operations.\"\"\"\n        for node in ast.walk(self.tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'agg':\n                    if isinstance(node.func.value, ast.Subscript) and isinstance(node.func.value.value, ast.Call):\n                        # Check if it's a groupby operation on a specified column\n                        if isinstance(node.func.value.value.func, ast.Attribute) and node.func.value.value.func.attr == 'groupby':\n                            if isinstance(node.func.value.value.args[0], ast.Constant) and node.func.value.value.args[0].value == groupby_column:\n                                # Check if the specified aggregation operations are used\n                                if isinstance(node.args[0], ast.List):\n                                    detected_operations = {elt.value for elt in node.args[0].elts if isinstance(elt, ast.Constant)}\n                                    if set(operations).issubset(detected_operations):\n                                        return True\n        return False\n\n    def test_step_1_indigo_filter(self):\n        \"\"\"Filter for all dyes that include Indigo as the first ingredient and that have a non-null second ingredient.\"\"\"\n        indigo_condition = self.detect_filter_condition('Ingredient One', 'Indigo')\n        notnull_condition = self.detect_notnull_condition('Ingredient Two')\n        indigo_filter_detected = indigo_condition and notnull_condition\n        self.assertTrue(indigo_filter_detected, \"Filter for all dyes that include Indigo as the first ingredient and that have a non-null second ingredient.\")\n\n    def test_step_2_color_result_endswith_filter(self):\n        \"\"\"Filter for all color results that end in 'k'.\"\"\"\n        color_filter_detected = False\n        for node in ast.walk(self.tree):\n            if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):\n                if node.func.attr == 'endswith':\n                    if isinstance(node.func.value, ast.Attribute):\n                        if isinstance(node.func.value.value, ast.Subscript) and node.func.value.value.slice.value == 'Color Result':\n                            if isinstance(node.args[0], ast.Constant) and node.args[0].value == 'k':\n                                color_filter_detected = True\n                                break\n        self.assertTrue(color_filter_detected, \"Filter for all color results that end in 'k'.\")\n\n    def test_step_3_advanced_black_tea_linen_filter(self):\n        \"\"\"Filter for all dyes that use Black Tea as a second ingredient, that use linen, and that take longer than 100 min to dye.\"\"\"\n        # Improved condition detection for all three filters.\n        ingredient_condition = self.detect_filter_condition('Ingredient Two', 'Black Tea')\n        fabric_condition = self.detect_filter_condition('Fabric Type', 'Linen')\n        time_condition = self.detect_filter_condition('Time to Dye', 100, comparison_operator='>')\n        advanced_filter_detected = ingredient_condition and fabric_condition and time_condition\n        self.assertTrue(advanced_filter_detected, \"Filter for all dyes that use Black Tea as a second ingredient, use linen, and take longer than 100 min to dye.\")\n\n    def test_step_4_two_ingredient_aggregation(self):\n        \"\"\"Calculate the count and median 'Time to Dye' for each Color Result for all dyes that require two ingredients only.\"\"\"\n        aggregation_detected = self.detect_groupby_aggregation('Color Result', 'Time to Dye', ['count', 'median'])\n        self.assertTrue(aggregation_detected, \"Calculate the count and median 'Time to Dye' for each Color Result for all dyes that require two ingredients only.\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
      "folderId": "0",
      "active": false,
      "open": false,
      "type": "validation"
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-09-17T22:50:00.670+00:00\",\"changed\":[\"cloned from \\\"datascience-U2L10-L8b_2024-pilot\\\"\"],\"cloned_from\":\"datascience-U2L10-L8b_2024-pilot\"},{\"changed_at\":\"2024-09-17 22:54:07 +0000\",\"changed\":[\"long_instructions\",\"predict_settings\",\"display_name\",\"bubble_choice_description\",\"thumbnail_url\",\"teacher_markdown\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-09-17 22:55:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 17:41:20 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 17:41:24 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 17:51:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 17:51:13 +0000\",\"changed\":[\"predict_settings\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-03 16:41:41 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18753,\"changed_by_email\":\"molly+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-21 16:54:23 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18914,\"changed_by_email\":\"samantha.schwartz+levelbuilder@code.org\"}]"
}]]></config>
</Pythonlab>
