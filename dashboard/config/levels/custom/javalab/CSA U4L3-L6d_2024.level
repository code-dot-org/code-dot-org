<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:58:33.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "‚úÖ **TO DO:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SadBeeScene.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getDistance()</code> method to calculate and return the distance between two <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SadBee</code> objects. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getDistance()</code> method should:\r\n\r\n1. Calculate the absolute value of the second <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SadBee</code> object's x location minus the first <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SadBee</code> object's x location.\r\n\r\n2. Return the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math.abs()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Sad Bees",
    "bubble_choice_description": "Find the distance between two `SadBee` objects.",
    "thumbnail_url": "https://images.code.org/b3c28948786b230a06f44da13ddcee2a-sadbee.png",
    "starter_assets": {
      "sadbee.png": "aab82357-afef-4d4a-a251-5ff7952f393b.png"
    },
    "encrypted_validation": "n+k+p4rjAIyk3A/JsqU0FLh/4YqxTXIEuJdqkIvYXU68RC5xlxr20xwgmTtn\nsBW5REyyahsgcj86bfPb0tcS/Kz0su7oTBP1PF4Qe/d7pPEu0RtLklWoo4an\noKppvDIJ4P/0oubqAqDzpjyx2e8P4Mk78gAapT72QVncl1Tz+H603BGoj7Sz\ng6Q3bdzPV5MijKdLY9KBbBUUdv1MWJxsVDymM4p2C+HyzytXbRQD2BboBt6H\n3jTPYbGDcC9q9CuB5zKfw8Y3ppvF7z1VVOM2mViG8t+3945jMY77AoF2mrMa\n57A8mLjlnOBUiWkkax1gCNdGRg+7Pz0tF8GSASJZF11v1apKXlfIRYtMwmlr\nPlfiCQdX/OIK9rpAfYHBOijLdXEwK3LXP6SnFuAgjEA+JB62cbIAKdcjw9Ic\ntb+IJs1Qsy/3aOrMVLf8ACaGyBpjrIweTrxtSih3Aj7SJvQRL09ZOSONM1hU\nCeJP6Nq0fYclcuq5nA+Mn3qaNk1xzkS07A9sRdDTo8hsX/ic8E89xPi/rSMB\nKqPMKwLyONaNoLnhzlBFit0CDrBFQ1F1JviAZZoeB5LuwrA8Ok+A+vxxNdR/\n6esTHkc8mFAdDjF3T+3aOrbo8GVUoUq8EDTzooHk8lIVnWx+cLm34NOkZ4F0\neYUh/IJGbvJkzxI424RFP3vpHpMXmk6tvjjG6RdtcVHc7FGf/iSKKWIiSkXC\nZH3oCmqPYcc6Qp19I0wlMd2rXNbpdnyg3G8AE1k6QksDDszNAgiQSBzSohTE\nznvlkYrEgAbet1W72999btX3NdTWLL/frLhrQswbjkXVmhRivFe3LonRAfcw\nmjF2sbF3zl+wtKfbVJdVsBdJN7hrh43N+Kv2D1ZbCuOomQg75IhbLrgqhHrh\nuVFShHrsBOYsFekpndfcACAVSGQCEpSJY9VswH+6R2M00LnT+dP5CFvtS1it\nzjY7HBkE56dwrPBz6W6n4rpBFC7FXcbFwR7Qu/rYjOhTdsBVu8pz2adjFOUB\nxx6A+fxi95z5ODXy7gKpmgS3BHHBrV71lej9rsl/B2PGO2SKJxTHILi5vdGY\nqBiEiBRT1sUnUjqa/48FerqpnPNNvgSoTu1VMdSzdp1V3lRYmmbT1xKYCus6\n1UY/wNQHyDZ4op2VdjOFWY91XTLbqML+cCIKnQSNwXa6ffkDHOpIKhIAVDpB\n3eGwHR/iR0VR361fGFublvi/HveKjxRcBJjRrFVfkkigOYf29jpBGf5ixqgT\nBYQ7+86uyRcRGw8fbIFr7siHb1pBo8rD4pidAgwuuaKFKhb7Cy9TCDapkuI+\neXGGyOAJdEDJdJstSOocwlzgv+F4HAcn7p+4Ek+yOGtcYTkT2Ir+MtVCVqsF\n5AaulFC4zzxAh5JxMR2yIXllQo7sUB+5qAP4VMg1JQkSJvt7q3XrbD/1H4ol\na/SARE9nbLZAjJ8rcqaCpe/bE+xGPAf9RH4hTVmN5H3SYqi+5NIiWqEtvqOc\nDo8ugYsy9GaMLLtbdpsuSEMdPppTEQ76IyF9fvMfQtrQNbo4eEH5gXARemgP\ng3wJdKg0ouqCujJNapzJylZR22/eISBEWjRXtTDdMqjApoUxIWXCwhCJASHv\naEJfWyQ3dBE19YqVmU3CVVSCF02MMeW8s+kFJuJ3sAgNqAEjvM+9hc9wusJr\nceXEsu/GLJ5tWkYIgm57RywGK/66PPQ+OkcJw0u5SnD9Ho3N1hKCVgNxn66P\nU6c8DkS5B3XbXGBfJwIegobRZ1TVm3WKnkaSlg6GkK2Vpc5fMKBgcPiTmsiV\nbTWitbtroIoyJrh/BbeBOfvq4rc2vAQMclWhWz01c8RX8MGFA35c03ba\n",
    "encrypted_exemplar_sources": "YyRhf5XQ7GbGqjh3pQacF8EMMpqOQsu168sBLGi5TMsCLs62Sm4Wtp6CkkAm\nN2eWdGQdPnhnEv63E2uSW1+Llu/oBqZLkwnlz4Aksgf/L3l+DAtwgvjI+s6g\n/c/I42QJ13MrOkeqVugaggQJAg+1vDmYnRIIAFSwb3JRa1hKd+bpb42wntz0\n03i0DKbT4xT5bJdNFSsAKfc9g3djM/VmDP4eb3fJBLi33ZtpOALKBdNP8Wqm\nmT8lSkXrw8ByzoBhG5gWjWnxdXde6D39Y5EbOkPXAuVkLovkZgqNVGyMaJsb\nRHp8kE/fRrhrued44EheoC8TzKWvg4czhvuai6BlFhqM5i9l8HR0zFgtjrLE\nJR7j9VVem6zPUJx5YE2QXV/rjhSkcm7KiyDqM8RSBZIf1HxR8eUH6JfrvClI\nAbSiX5VrEuQUwX05Ttrw6zFjbhjOyfJQRfUmCBuiXooInFF9hpvrldd7ZSaN\nJyUViWxz06mc7ueLGdGZhtFuvIwZVdEZ0eN+QDy/kFopWlr+BNmJ7rA9lilL\n1AMXhvBQlTjguPyTLxYLkqqfUH+heEVVbCTOyAFfplB9z0E0Lk46XEJgKF3L\niN3dzhXGjoO3KK6VPEobBVaXn9M79/QuT2OU443lXBPbbppbhqJDpPCaLU8G\nRkG4wzTMs91D0jrxKn+/gB7PRJKd8r5rvG6MMotyK+pStb8P2F6Wo4DVpo0z\nGGA+TfBdKgabCpsx3AzNFzcNIjeuSmzsaLht6lILse0HvSy9SUrYBzY9BIkt\nqTGa/CMR1idzdAK1QfAJDbXFXoTxU+nS2KXFxvCXfnvUNIBMr1ngN3/mAU+l\nGox9ug87eXkA1AurIpTz/Y005DwgAZLfzQEtZPGxgjhSiX9B51y8l4x64E9v\nutE3YnJe2QFmIYA8dnnfnjcdSYsyAFooBnOkllRdHsKOKi15jUzZDsE4Pfw/\nAw6CAUYiHcwQbx8uPy5pGzevJ8mNN4wHKgh3IJdPglSUVUbMGInbWlycVLDE\naI6+SBwNDO4GjpQ1+tMCT8eBTv6p6RZqjtGW8AtLKuL/oeX85r3aPJVQdm65\nnRvL1a7kBR+MW8LvK00F4g1jY7q3iTKiiDu87vdy/nG0hiKk3m/e3SkUvH3r\n5t+cxQIc4o05sLebrC7PtCRQTwklWY9186Cf7+LyrKOncguJc+QdaVM2ewW3\nh9mBIDz7ZLvv7cLDo1lPxMtZ4q+cR8FA98z9YMd0v/CwDUUyPYuNW74Sn+rj\n7qdmcL0TEXCvcU10Mcfh6t2iNQk4EEOSjuFMy9gyIP0DtweAeVY7hJqxBvw9\nzGkraNKUtev6+94wQor9CqvHxk0K56MLm+Q5UW/2SaVcBcqP7HOrQFkoff2H\nLEd2uh0XvNQWGl6XQOmQrsG8BFCsvPr3wcmBarmWtrgDIFEOtPXXZIbIrZJt\nJJIWGFP7ZGfVrR8t92NxgtEURYT6og8I9XXuae9Ir8YvLr94BT7mokV3grRm\nEzHtf1JAi1/0IsM9FoCutWKeSb2mcPMDJXQAr05WYBNzl/EKrMlKdW+r5NDi\nAwzUMqAJaBVKT8asswPy7ap0tWgcCYA9RVvcUWjScI2GpZ8qVa8prbzY0lVX\nPn6EcRHaQWaspl0iCwlWPClSUP3FUjU6mc+f7cS5i5darKt5mrlYv/0kmfiw\ndglxpHJlqZmRfaOVCgXqLq4mWx1pcU9k6wlWKBMfhNWE+TqmfdloIu4yYMXP\nSU4hODjtQwiR524/d8gQZwkJxRnhjYdtpegGEaHlqFYja6F8g9jQi8h0w109\naWNuByxSwjCb8ozqW/ppBz6aiXixWrAAZWLybx46/a2sCxATdbNScZiGNE3r\nJMDu6fTUPj0UGtYhaAKmRIi0pZhVu/JCfUWqFvqbS7SCCcS4IqAYCBk4kdXF\nOpqoRGfo2lUX4AT53d+6d0LEcWUpKgw/RXwXC5s5vR72PFIzCQbh/8rLJfnV\nuHFIoaCvLIte5BNbUJPDeLxeqVEqivYuNih8qqASKxvyN7+r7J76YktCb4qA\n65A/8+JElrX/7StGyB0oSbH9st+df8YpF0xP47Cgzm2fwPVEpX3Dmo0k8JVr\naFKASJKU9Q7lr83VxDPaebqTrOC5eqhRYTX0aK22RQ7Cx1vJySlo4gpdaw61\na7GMsvg4QTisybf6pPGosldhj0EjPzb6B77zR9MJVyep1BDMcyh+3rS+q36h\nwnN6ONZypGdpNrDgztpgcLueCV4xxtZ7W3IHsv3AV52ZQB+KQx9WIDmwIfpZ\nj1BRnN4KSe6Ybd0yf6I5V4nmXwVtvDfICArQ7hJ0Uw9hRAgJp9oeYD9bHVAd\nD0fOREv584tlZLuAYb2H80Q5xWnbQYSj2LHeEKgMui9a/C2qzad5t4lgEbk1\nrOSM6fXcEQ4tptoXKLwJTUjDXZLZdYHLPBu7Us3yUdJgSHFtt+HRG4UeO0S4\nT472WBRtj2lkXha6Jb2DxgcqwYUAmZANJFbLMUxf8Owks9fTDo/11QCriDrz\nskrAiA2yIK3tmwe6og5eGlZw/p+e/VkpcN9/Y7k479aG2tU4UkTkD9j+edAz\nTjV3ncCKsruBoXgM530oV9n2V9LKbCRon2VhMIEL1BvJ5DUAJPAayeDEj7RM\n5J8grOoq16bGExSPiCiK9B/F0mp3g2EABN9+K5DSt+QdCgIdvSCvaH49AOh1\nRs34UhaOgm+2UJAlec3m1q+QDZvMHcMu/Sqvs5Vx+J3kbPCz+GsEhyZ09ji4\nKZXXxOwsTdYm5dsjrvaQcvg0rSyjXWtNsdRqp8u0ko6a/RGiPyjDYQ9NNS9I\nhQqidJK/rRP+utfUYbPA1euR0j37X8/fgAcCepR4/K3u2ZlZUrHgysUYt8H0\n5xBGoePx10d5tUo+srwgvJVOjESKj2hvH0NuN4QUVvCUBbrJ0y55pdO27v4j\nNLViReU+plCsT94SP1AyFp9oIfMYywfeGJMvWFh7wBPxMtV/f+JDk6YtEPPM\nRVa/1SJVqRe6s+fP7bc//HOlP0NWMt3vH0Wk4F1zoGjL3fe+xonpcjduqIEv\nZSyndl6cJtJ4KNuY119FFLtFcFtngytLXpNqg33+DXge+vFNzHYZAMdTk0yV\nDOQImukJIiQPJjgIirwW/xFpdAnw52oJyETftpl4ubz3nMYitOYlZXXWHbKv\n+BgOlV3u50uCC2Q3/e6xaluqUYrv9NMUO4+qEvVxh/0l/AtERhashDhjDOvO\no4u4Hu+A1g0mCqCBgZOQJqp8q5vWAdSZ1rZTzwca9YE5YexD4QLRkvzmyRks\nrBb++xdLKn0OR6iQsTOVqd+NXl92Rwc6M3ZxahXdqbbm1N7nDdS/1B+qDx3H\nC3ItHHttDNLNp+o3JmmOdc0FP0POY061cuUlVION7rWWwpdCg9mTQCvD1x2O\nimbNTh2ybG1HNH2PoJo3oOPfS4Yx+R8Toz9g7Gksrylvy06qdSbUi35HfcgI\nRvxQ+wxgelGtairrWswRPcaaSgGYgK8zzX6XpBCvZr4C5viC7Vr8QGWzF7jy\nz396o7o2pQPU6JEqDwml1InfHdKRVMOVBIe7Lw0Lgczh0RrYHhW1WhXS6bG9\nxl73mif185evhZqUTrg1RHZbeRBprmUjQ+D7eiHw5V6EXWy8VxG3J2owahJa\nE5dn6GeuFmIzP5Aayo3rk/YmZ4Xxy/44KY6ipib8jd2A/euJikwgKjnxJ6S/\noVvdpxW87rx9+FnQPfq86Dx3/nQG2bkjm2ople+wbnYqJ8R1LgjJrhVOVQle\nXU1NTikiiSnLbGnjG/Kb0x847UmylY694BUGFq1CJsDJ7caGck6bzmx0lPR5\n/EtSLUxB5wbgrUOjeYZ3n6haSKQtIP4jnUIAnx4xKCsFV9Q6lnCvvMbplAnE\nOIhcAdKdJj/FjoNaCCmYzjhdDmcF339MpeYpQ/1mwegsl1ONrCWCJcH6YXIw\nibG8pbe5FUbo3SNT/luKvKUxK65ZGxliWc3USYG/Cd6N/GFDzR3yhYwB86RJ\nUMw6vyZBZQEJY+PwdNgXGmexqT28fYQyKhXkx99L0b7Y6Fv/05Tv34Dn1soG\n4E+xJWMtT5P7G9XK4aJ7+XfmlJXTOZqbNB2LjHadkKp0LlnBwoXtq0A+2xP1\nj3YVoL2T3V7AMeIv2M+Z/CYO/DrNM+RQifv/sBGVqe8gcBieEhPa5QpRyeSB\ndJM58MsiToKvihYyB8n0C+ErJ8AjjPCIouPUXamg+UaueMRfIDt8yWgcIlHI\nIhDj70jxZC4goXSYkr8ONOJaaIKmt87HmLoX30M8rPZehCNyxS6Aj8SCi8Or\nb8EF/uws1jE=\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of SadBee objects\n    SadBee[] bees = {new SadBee(20, 20), new SadBee(200, 20), new SadBee(200, 40), new SadBee(80, 100),\n                     new SadBee(100, 45), new SadBee(200, 75), new SadBee(220, 150), new SadBee(60, 35)};\n\n    // Creates a SadBeeScene object\n    SadBeeScene scene = new SadBeeScene(bees);\n\n    // Calls the drawResults() method\n    scene.drawResults();\n\n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "SadBeeScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Creates a scene with sad bee avatars and displays\n * their distance from each other as they move\n */\npublic class SadBeeScene extends Scene {\n\n  private SadBee[] sadbees;     // The 1D array of SadBee objects\n\n  /*\n   * Initializes sadbees to the specified 1D array\n   */\n  public SadBeeScene(SadBee[] sadbees) {\n    this.sadbees = sadbees;\n  }\n\n  /*\n   * Returns the 1D array of sadbees\n   */\n  public SadBee[] getSadbees() {\n    return sadbees;\n  }\n\n  /*\n   * Returns the distance between the first SadBee and the second SadBee\n   */\n  public int getDistance(SadBee first, SadBee second) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return the absolute value of the second bee's x location minus the \n     * first bee's x location.\n     * -----------------------------------------------------------------------------\n     */\n    \n    return 0;\n  }\n\n  /*\n   * Draws the sad bee avatars two at a time in the scene\n   */\n  public void drawResults() {\n    for (int index = 0; index < sadbees.length - 1; index += 2) {\n      drawImage(SadBee.SAD_BEE_IMAGE, sadbees[index].getXLocation(), sadbees[index].getYLocation(), SadBee.SIZE);\n      drawImage(SadBee.SAD_BEE_IMAGE, sadbees[index + 1].getXLocation(), sadbees[index + 1].getYLocation(), SadBee.SIZE);\n      drawText(\"Distance between the sad bees is \" + getDistance(sadbees[index], sadbees[index + 1]), 40, 330);\n      \n      pause(1);\n      clear(\"white\");\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "SadBee.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Represents a sad bee avatar\n */\npublic class SadBee {\n\n  private int xLocation;\n  private int yLocation;\n  public static final int SIZE = 150;\n  public static final String SAD_BEE_IMAGE = \"sadbee.png\";\n\n  /*\n   * Sets the xLocation and yLocation to the specified values\n   */\n  public SadBee(int xLocation, int yLocation) {\n    this.xLocation = xLocation;\n    this.yLocation = yLocation;\n  }\n\n  /*\n   * Returns the x location of the sad bee avatar\n   */\n  public int getXLocation() {\n    return xLocation;\n  }\n\n  /*\n   * Returns the y location of the sad bee avatar\n   */\n  public int getYLocation() {\n    return yLocation;\n  }\n\n  /*\n   * Sets the x location to the newXLocation\n   */\n  public void setXLocation(int newXLocation) {\n    xLocation = newXLocation;\n  }\n\n  /*\n   * Sets the y location to the newYLocation\n   */\n  public void setYLocation(int newYLocation) {\n    yLocation = newYLocation;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "name_suffix": "_2024",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:58:33.296+00:00\",\"changed\":[\"cloned from \\\"CSA U4L3-L6d_2023\\\"\"],\"cloned_from\":\"CSA U4L3-L6d_2023\"}]"
}]]></config>
</Javalab>
