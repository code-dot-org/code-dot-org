<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T21:30:51.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">CodeSchool</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of of courses available in an online learning platform.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">CodeSchool</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Course</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Course</code> objects\r\n\r\n* a method called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addCourse()</code> that adds a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Course</code> to the list\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SchoolRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">CodeSchool</code> object.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addCourse()</code> method to add courses to the list.\r\n\r\n3. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> and using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">add()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Online Learning",
    "bubble_choice_description": "Create a `CodeSchool` class that contains an `ArrayList` that stores the courses available in an online learning platform.",
    "thumbnail_url": "https://images.code.org/fc419d6b79b2e64018e67f2f1bf17bba-online-lesson.png",
    "encrypted_validation": "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\nyKYhYf7v\n",
    "start_sources": {
      "SchoolRunner.java": {
        "text": "public class SchoolRunner {\n  public static void main(String[] args) {\n\n    // Creates a Course object\n    Course course = new Course(\"Java\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a CodeSchool object, then call the addCourse() method to add\n     * a Course object to the list. Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "CodeSchool.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a CodeSchool\n */\npublic class CodeSchool {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Course objects, then\n   * write a no-argument constructor that initializes the list to an empty list.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /*\n   * Returns the list of courses\n   */\n  public ArrayList<Course> getCourses() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return the list of Course objects.\n     * -----------------------------------------------------------------------------\n     */\n    \n    return null;\n  }\n\n  /*\n   * Adds a course to the list of courses\n   */\n  public void addCourse(Course newCourse) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Add the parameter newCourse to the list of Course objects.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Course.java": {
        "text": "/*\n * Represents a course\n */\npublic class Course {\n  \n  private String name;    // The name of a course\n\n  /*\n   * Sets name to the specified name of a course\n   */\n  public Course(String name) {\n    this.name = name;\n  }\n\n  /*\n   * Returns a String containing the name of the course\n   */\n  public String toString() {\n    return name;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "encrypted_exemplar_sources": "5cPjb+LQgazvQsszKqYzUdTDYwbORBqt48HEeu8g9tyrmDUjom1jSJt+x1Kn\nGlW974+CzRWEq0QvCfyqn8zT0D0rt3Xeyf45JVhuKMj4TVjcDPNTTD1kbTVT\n/NqPBCPcdvu2dISge3G9b4kO6Y53VAl5ED6ORkFuz3eWeucbtEBMgfX/U9fR\nKqPWvPauvP+s/3agoqAzTpiSZzx15EMdDEIwGqPCudoT0URiYEoTcjeFWDhZ\nTI7PXnmaNM5WhmAFA9jgvHjPoTmigTVyaKhAa2cpUDiyyuyDWa8ZBw+ufYml\n//D3IHET+Cn5/84gK/5giBSlE+0IhRGmaT92uwUd/ugctnKXHyQCzk+hyN9B\n4sFV606zT41KZWtmy0gb4+IZ0XGMOyy7lLrHGdM5b9BdCNMfbgvuG2XuHE+/\nVWXikk7Y19/8L/dzd1K8pGqqwK3NdDIiHSBU0XQyhtYFs63h+qnN7ILoX3ZC\n1nBpBQ+8hcAog1/AAVFr4xrAp2SUEXKWV+2Sil41gN+xwRrMLQB72TDgjsMN\nohlhTura8TVI7EfJwnXJzMno2I32z/Pec/Amo8v9FWMHxTHOaysF1Y95Fi5x\nE5lblzY+LtpeaJal+oud5IVG3aXPq6W8ke0A7Q2CM30t5gvbV3FyGUucksuu\niJtSwugY8fxeYAKDkLzV/7K2ZRr7Kn3uHYKiaLSM4LWo71+iEGcRkXbMiDKs\nrDLNNwT7mmSNp+0I/+TBB/0zqDhlinxLlBx5l3vlAgeglE8I3BlGKU42aEfM\n0BkqQl4tWyNS3gPXsRF9rSL4nRoRUP6oYgNM3ZzFBcJ8CEOCO+3qmKEzqkgr\n+6TlfWHFJH7WFGqv0omCIa+QR9TA4npgCk0girV//HOSHkzA1jzeI15EIbnD\n/OhCpYwpT4GmXhhuSGG/+MwOl7ut0cxyeesqPui4mDzbBJm2Q0oQaNhrCmft\nsXiY7kKBKXQ/Zy8Rk9yBeH4cbzUHuvouThwvbhCsX9uvqAmwqXpoTYIn6lJE\nw/0BcxUeNdBJGGskjtS60GLz1TZGl6nWEf24t1IK0z63CKGfNJkyC8TRg8oH\nt7JOOGWnlRuhEBcLhWbhOdGK1+g1lO+o7MrBhRj5Bawf9osb0dumkkEJ4ecI\n0B00euEN57fttNsvEfDMDFOxb6bxMMxYZng2AE+FqBhkNnsIcJBBwkD8yny6\ndeo90oELGz9LVnTXXoev94jbzLHO7tzKFW9ZDzqQamrJ4TG0+Xfr/qvU5vZD\nzwCuY0DrowcZvw717a85s+HJIKn52mRkxip+KAixLFFzLt9mq9R3tNnM5AkW\n+md95LtVdGS3077aYP8jxQIklGnz0Mfh6OVn2nnX2q7grvsyRvdGjB9ZZD7u\np8S6miu/lAT+Y6SzLJS8MYBzludJQVhJqgCt1IKLQOBpSPL2DAwnK7NOMHg2\n/VvzWNFbtNo4GCPMYQPJHI7fGFblx8RRGo2kqZOh72LhoSJhpbiKvcZoZnYH\nWLlOqxwI/i/+eLwQNOT5zXL2F9slISjwISEFsRY9B17w/z/Knxxk8f8BouCR\nYLpt3yXiaewSYogsiO+zY613UTWiTw1wWxykQvmG5gemx+eSQN0sTeYAhSwj\n+7Ducp39Ejt5RL9oLJxDsK5o94li+FLC9fBQfBs+Txxle9OBjxWxtuAA6/8h\n2GxFm7SkMwlJ7uh4BG6uPp6Kwzp9ycTQR6AIp8kpfuTwXfSFI5nGgeJ6R7wQ\nT8ZDG7c3wKV0L0O8H6/MU2FBZ/1W3+CwEDFtcTr4v2bWpeLZ+oy9nQSq/FHP\n4M7dRxco8UYb34fEJP4lkFCcQiptlODA5xB9/2O5/33SjyYpaIZf5elLzB0g\nDRxtadiWrHSFny60+u75pXD01xELj5JxFR8eYCTXburmtMsz3m/rrSe4cczf\nrHuxEx+IAZPmn/S7mwfKtn/Z/NI5qibxzl5mQXiSkzxmdO1/ZiJd0uFaNmRX\nGbNuHMp7gFSLiz0QH8a3pzne5gL0r9LtbPzm3WGHDNA75oTILo4E6MofVPNt\nYxqBWB4TrZROGVeQltHkMX460wCe3kbJqpsDDouH44eCxAbZNQ1BqQRnL9HJ\neeJ8ktj8gjtcCIAukbH5mVAx+1h/glouyPY9FcRN1FmgED0ecqWrfY6r0Je1\njmAiSaPOPuf2vMJqMJUHHLxldAm6W3666eg+z5bqZlm9t0A9CBgbOspDkXtv\nFEiAi3pG2pPDJ544nc4ALENeliWjwrdMeAZ8ttqCdWwmIlweep8zauLgmGsx\nkILOm9qQm3igZ9KJ/aW2urK7OH2Cz/g243AaD9EL/vgfUZqqoc9sboVyG307\nM3kZ6/WOf/wdzHQSIZqDYm8IqkchYipBXXejTlSMJsQ7fn1K4cSN1e8VEXR1\neCqifjGiMRhH8SKJXzgu/uY3vQ7pCv4PnPOGW32e++gwus6uS0mSmAgqU70L\ngsuH5+w0tfwK2xdrb+3p/DvaitjUs3yDNoWP6Fit3zp9wgxYARgjTNv7tN+z\nqKGozLJhPEouLb/xL7f0lxolkz8sak0pArOxGcCC6Mg8Kpiw51AhI54RTSHd\n3XW+LdLY7COn+pFSrQgO7cmY3wrOhWjti5EwG72ZivPhkthqXR5EZC+n6Rez\nkrw/BjYB9lZgZYNt7e5ZfCEmptTP7gC60MHeZ3UJTmxT3NbrGF+AsGFqHFjD\nqKFQ1/FLKjeL+Wx7jEEvCmfLPNxfx8wbrw6jlAQ0IiT/zRcgxGbLLVzPpI9P\nB4E0VsagfF8CRjO5GBFBrLmOzCkzjd3CxnFFW+0DxrlOV0Tnt34Y/cNPuWTW\nypYxZ2H54WGEezMTZhYBVnnMhcBiQgh+RTtioCndhHOtCAcH9vcbLHtKyL5x\nXczbvTGUXk+4R15FNUopUt7fvSk/IxHuJQfzu9klRtGHe11qHVaiL2MAH8Ga\nzTlOLzehL3qgBreJxqDscHBUl1I085I6uh59G0v1pie45J0u3UESgdqrqkuY\n8qbXracHqEiCAJh/L53rjqMdPPBBoOAVvpOaHLxTYhmlbvxYgWkLxMePVeOU\nDLCBkHlp2AQEpNgAfrnpOn86EHVrJy6NJP7NdQ2He0kjaIWtQ2xLPBN9wTnz\n8+7+UIFgDGGSWMCu/CJ04OZQz8Y8DgvbDhW7BImB+PMl/3oIXt6QZxuajIZr\neI1JxE+Yv8JbRSfNiOVp7GFoEi1P9zApGn14Z0LyiMIYGVjC+dwVhN9LQIUi\nptceDdmBLkF/kE34f/aIBgfs7wxEd7ZcFOnGYxTkdp9cZc/RbdJkiVcIfe3y\n6149eqSQ2YDNgG+0PGwBXjNLGdvQGkiyOWpXiC/HWp7MnF82s4JfuLjVX95G\nu1RJ56F5GOofFIx4YA/H3n0mfYpFBUq6DVBuZ88eQYw77fHgBkOu5wA6qceV\nXjhE2AgkycDZd2FLZSmPq0jvptNjIetXkfg28LienhjonRMmfiLKGDOxEbKW\nZNxKY7Lt8fTqHTZgXFFvmiv3l2svbwkXXy2MymXD8iO/kT8PjtCLHasYiJpX\nqszyoe8Ofe9H6IamTtRwxKpT6E7UAXtzk1rduBrlKFWCuLqTKz/nu76GOf1D\nWLEiKWWAevDm6yZPSlWxlGmuv+gxriszQXG3zOalKj5ZC0owrWISjyStMBdp\nx40wQGnZqdD8RxnhL2D6XJYRlpF7kreuAx71C13LP+BcoMnJUGsaNfZAnnEA\nGnabNq4AdLU59bZqA7Jocha7e8OOU4caxwWs6k7uQWey8+Pqj1jCQeMsfy0V\njADQq3zAvR3Z6sit5d8eiXsSKNllG6XQjPI/KrEvaHNWSTLxI9urlBSXXci2\nQMDycvkMEjXbGHMaXanx0im016UT9nG317+6npipPqU6KwYyNl6+liZyj9ot\n1LCtBkyAzYjYHkaD1SRAV2DmbF8+UVXWrFJjAC4BXAE7QwTAI2pg/ZxJQ1e0\nFER/jJ1RZmjTStu94NLJ8dbiLzgp7BmYDpnsRVQPimK5lKjE2Mgu+FG09z1w\nyHyaS+CPeZ3CuAPLHRBUS/p+MeV2M+mXSa8uilosb1xpKHnd1YSg8inDH4PN\ndGhxeVt5K601gRpkaXXYjUQRAjsP5cWJ+LQycmaDG3gqNPhZMqpx3J0DVqps\nOCHVKfAxuRT1R3On40ZiW8JJ9i+f3Rm9GVe+yuIm9tq7yLYBGkIcpQ6eGB/j\nlQzEn9ickIVoexJyI0CRvoMhQe/t+C1xCtTgGkJBrVLI8NI10Y2ErI/odwm1\nGEOVilIexED5xbPXxLFmOAr9Yk4R/rK+25PUTifMOLv+RJzV219vhr6J/7ft\nsNfVm35SCrm6AsfqNkzyBQkGTSLRS1eeQhGIMvGYwy2vcBKq60lS8iV5SsZ6\nlSHdptCt+K6o+Fe3ugKA9KzhTlQ9N1ckE+zJLGVez332Bu3WTsIf7cgUZt4N\nnA6Q6ZZcxk6X0QpmDZk6ClbQrqPM2zJBqMjy/oXBX49UT8RTGTjosk5Vg9R/\nVUkrPTyhbehJMIrR3HCmh7a2hzS1yMVDXWhrNdmUBQecp9bo8bnrVdnuYlmu\nfKukNgmLJZwE6snFS2m052PgKbq4x96LkyWDJ+57gjb3Jc/cr5JWAFHrZxdy\n90i7zULZltL37Y9ed+T21m7G2+Smark8PtdcNNgXZHhsP4fFbfv78rBZP/3g\n6ccjZLo1gYDUcNNIjmvw2hecbXnhivGcebv0EqTJRCVM8oDYY9qYWD1TG2T0\ntIa8Yt689tVmzvQWt7IBQIwbST+p9WllrAcLzniQFwG3sp/AqpDBoeVPZcQE\nnBzESU+e1i3ySikw28DMGNyGmV/Toal/BKmKXp+vv0+ks5AP7XzJ3dMRXT32\nj65ij9f0dDTxhdzQtz+5fjfRiavlDvC6544yvAexB6N5rMdfLfjq1HoaZSyA\nXMZIPCaI5Jqcecc6i5sLiW4ER9ZSBNZjulJxz1GCXB6YyVuUXP6D3qWWdXHj\nbY5eRtAk6xDSxMJNWC3PY0ExGkdACjzc8rynGLirW0qJizM10GxfM5EJWdHA\ngBGIyef2erBZKZWR2+fKAT2gqzfEuMhyvIcRfYqbR4+nT4rydMQxXxhg8Jkb\n5vx9hLRiRbZarsbsTPOiyG7K5StweWMhXP14UsHQYZ3DajSfjjZcUtc5HQzB\nDsmgF4EUPdQk0BS2DGGFZhqpX1vcC/EYmDbbvZ0o7kPbRvnfdY5XyCAcX6qA\n2sgc7FOz1Z45RZMXWNS3ZcUMhIBz3g9m4/66HOt2UI5gLRWt/vgi2eb8JktG\nBcRFBD8SoKQd7rWqoylQpsVcRp0R1Hm56/jngzh0kxOXEGJuKiRPe6CH/u2A\nFDBjoUfTCFeTwaEiH8a7yEdCov91eSYE5ecwgFnBGwH1Fwsk79iehFBtaDcf\nwlj+k6TbiB35zCQyhXA2uVdRsfSRXfFQnZZz0ZyjnZVYRNXyTQkOSZt5AV0b\nW/X6FJSdxkYpNyUvSsqTXX8ZCEAnM4vikw6Rj6zBcG/9+BURaIu/M99Chm8o\n19TfWigWdxPmsvQ4m6SiYKDDwrFyxgLstcEohi++PJB7MhAemS3Pv33i8CKS\nzu0pIgLw/I16vHPsCEbTQcbI6tDKAxJCMvo4OSzJxw+WI3z5jyL6NxkNO+A2\nuvcm/nkdqbn9FwiEwi9AY6RVvEzD0uh6rPjl/mbQp0ydoJ1FxDEV2o2T5s0X\niDzgTXZ73fzIGPpqfYVYlyWKUIl/bB4KwOpN/qccsYBzmhq4klY3MtfVe5dy\nvKdN1OZbWowYC4zYh1Zh+t7KfXibL1LS64FVIa5CIO/ClMQlVDqjgaHhUk0l\nMlf5d/M55QAptumI+pPz6cYmMPob/rOH/VW/45ip6mDKPgm8bN4f30O6vAPQ\nGQPv7Dn0/SKwJDtbOaNzzW/OlBpgNOPRg1D3GHRgC911ZBWzSi1zKREI9ver\nDEByxCG0Itl5ZxqGOo+vXLsGX5Q4xM49yhGkQfiUEcb6kCkj1GlqCt0XDDkP\novPDCfvaFHLhVbDWwWo84r8zAiqYEDxmCiDDF0kpUw2V1e7DbYeLAltoYsS+\nvGvfl1e+im1pTNIvqMXA+4CSTDs5Ypsvdy3gjGEhIJb1vm1dTNQV9H1IWpDY\n3FMQVRUAq3g8MZHJnT473d8pGotoyd53mVd0/cw5wESIBqGvSOY+ft9lmSYL\nos8XPEx7SRE37+G6/RUtuOIQmBZuojnYaCocQRSVv1X0gf2bK72ygS3XCKnu\nopYA51SF/8fCQemfoqFgMX9PzJyu5e618z5TalUgYomPQKTSZsvILEwl39VE\nwe4JjEhhSnZ7AD7YYC88UWXqdeSyKBOTOsMn3Opu9mucNR2o2q41tqMS06Hk\nisv6XSkpQp09QLGR4etFN6Z51dgwW9bMPeQ7T7JL4baBW06deLb3AxDYhb29\nHWAtAo5Oy5kjDpK8SoyDRm8zx/YQ7TLMSP05zz4YRgGHw7U2/kvRKfFriwgf\nD/czdTCtqHlPt9/VquFydY7atAhxIlHeAEStKdekyK0MmeicwPVHakwi3ZjH\nBJ7/RsniJSYY6V52Uff7LuHG7sa6HQevjUbSrRCPF0ETa7YXNbMoRdrkDETk\nq3df1vKbLVX8muN6CQYIsH2W4Tc33wboHnIeOcKXPmMNSN7Dx2d0ZrPJhnOw\ncyj/wPLQ5Ev+LyaL/Mwmh7XiY+yJmS3GX7nq6uKdO77AU6Zcs3J3e7wgqwnB\n3VSiEX/G63fbiHaIGHd+Ok3PGRSB/jBrRrvSHYr2FXuHMvLJ1CJ8iHKKj6rG\nA1MjzfG7cTzlbjTrxfyPQfiZRQ1rzXhoYiIxdEflFrS+sTIz5xsp02deMjm7\nDlvuWgzGaVQoofiQAIHbU2yP8XBrq7W66JgwCaH23w6uQDgVcwMUQbgyy7Lp\nv05TcZJVxvvpyztpo6lRro+HdxQDxzOo+PO3DT4Z3POfgiQqjr3yUUNA2ldS\nn12ZlBVTYReiBXzwcF3xpfCE0jgck/a0SS+FLsdw7Vjn90LL0wDVChNq0L7T\nyV05jzLHWzoTlDETCxqHwLJTQ2gDnCHMPmJ8McQfqukKhxsp80chcZnD2gZj\nTSl9avOcR+hrcnGGfTwiq6MqpEFxGJvty0BY5yniiJKAFWHmO06xnfo9Oenq\n+ePFmi/gv+X55eMMaH+9bpsDTOl3Jrt1n57u/pTnbM68VT6V/fkU7mas6K/z\nqDlzE2SlE0s7KD14GIXt1gNon9l2ZIj1sKhiHAVSYzMLcl0GmG/1RVjOYiwZ\nkl7dXrUfz6L9gY4XFvu9AgxxXDWoTQ/2/AxVGuG3+glfj61LNkc96CYbyZE6\ng5EksIjHoqHnF1oBdKpfN20n6RBMn/Hh1+0Tc6ZNY0NDwfv5xeWNvyo8aVnp\nTDdLzITkKk3IwcyhmcvG8tP1nXeMyO/hqkL9hd0R8IZw9aQO+XpMFqnKqnTu\n0yVhB6FIDYJ4PqHty51BLiJp7Tm0quFeGKjxwDCEMi8vFcce5Kx0Z95F7ckG\nI7CZ9e24vU9JQZXTx/Hfg8jwhCaBf+59epyJkODLdPsqlVCYv/B4s20RXTtd\nZ5WU11IDIp8OTkSCm5kpq466QUaq7HtX/22LNJhsJKUTCthEVix5ao6qh54R\nX228dTeW+zqyslqu1ja6EjrfTTlGCffW2E/co+tD1pamgM57eAl3ooPJaDnm\npOBS4qhE8M6F2pvsRpgTJQQ5aVT5mf72mOgg1+r55uOOJPnkB07iKdMLhxJp\nHiKi8BlJhSE6elotAu5gmEFhdyc+7b1aqDTRKrxmKAENtxV4O6YA+pUIT4Hn\nu51U3gXUIDOH3vgxDQIGhLRHsttdePqtoQNr7sDtPYK1nT3b17XwW0X5pB/O\nof5T1d6/JgCVtClQWsquTKw4iCjDZ2swctisZlTzYeRrYhHchgxbrxsGSIUT\nZuCefSOyKn6kfqWKLFo8Gqr/TjmEXRlAAtB5WJooWEsIntna9ATIKhYlQzem\ntVBjJK31emoonpswjzIi+QIZznxLR5jUbZnZRzGT01U7T4BAgbJDcvgDzJDc\n1tFk+e+O1W9n9+Gaa3OVU2EbtvWy/wBML0wr/EYYlhpoufpMBoWl/8cn4i+a\nBRvAcV6OQetAtGBLE2NOqBLG0JRycC2ZfvY+DIEXxwlGLS2vK1gUIaLVuzq0\nMAISQoUaJ9/QPZ5x17/v9f06D1muqglp85/9IRe1eIioJNHM4J37ZwOP0KYE\ncFI+yy8T9953AKKzW6Gu2t3B9jvLVkuS7Yeabr9v0e9I4XBoOAYpNU2RsBXo\n+kzMJ1VyI3hZE7BuDhClXXuZJdmoye/Ck7Y4yj7HWIDITpd03haAW1k+ydIY\nJmzPPXDyiRkqoNsGgTp51uOfWQBA0CnUBKSXJtoBeXdI8nLgXrth6Fh2yDA2\n9plsIz1lN3PriRHAl+nXEcmKSgWvXso3V8g+pcoNdVsn1Nzxsy3/q4GbYIFP\nIZo65ikvIV976de4mkC3f7GBMkFjM3wRIdMHCWB3lYDLxl0drXKnFDaTtbjc\nSFfl4EZ4tHi5/LtMDRFbrdOwCYd8g+F1Fq6juiRfZ+3nL52u1RkSxkaVCdQR\nEQTxnRIxta4r1xj+JofvVx+7fxwInukKmpLhsqeUxiN66+6e8wBQDbS70A24\nNhzCjWV1WsWMKV5yvq9egz3FpFzfIwGuyIQWl/G5K59azV1xaguZ1GVTXrxs\nYleoyVkGNPlLuAhIOvhFh/uSVi+E3cQOQlND2NPAmE0Y3t3388FZBFFq+szu\n3RlrqC29WWA2C9NgFzqrtZSTseSVLhPGnyzXjjhcJoegXHOA9nRWZoYGm9oP\nGrZbwSzeez1MGT7fEf+wiLaj2mM6Lu4LtNuRNxm9Hqrx9IDWNN4C9QIm9oSf\nM/WY/5nIiiEYMO63IBfgbqc3+os2sJ2r67+be7W3ee++nMRgNecOm+B0GUb5\nysrUl6zRUR0eeFbyZebYtBBiqD7xC2O+N2PXtl/yA+kKj71CCj9aX6pQwITe\nSPKjZJN6JnX8iAMqOSSXLX+Zv6mUfpofv1fYOG9202KN0239n67qN6ziIH/Q\nV7EgQsHI2+3uT60GVTcPxqYpR9X+8NIf95CiNGm82eH+0JSg4o5I+IqCZ3ub\nAEfZA3cT//3Bf/FnsIaazmFENx9XilClsjdS2c9/soPcUd3UQaypzmRV3VO5\ngCABJk/i3R2ZwuOsMrkJScjI8l9exB1wmFjKW9EJywKVRo2vfFvmcMs28gk4\n83RTUUxjKcqKGv69yZgy8faencB5aqlcYMRL6FNbtKjH5dyclkvEVz2F7EOF\nwhJ1hrO+t5JcA2prsVUYFwoVxltLXOX75rVaHu3BjM2CcWFNPIGLJtiphPSr\nk880ILNnbf24qSE3DEhjeVVMefuXcTF5EfcUYYh7I/ZowkElS5Nupwq+kwY5\n/tZhfCQJ0m047DEqRsTZet5Vjx1X3EOOHUbbe3i9USwBEI6JwjpRUqRcDYyz\nD4LJH1QjPFhnujRQ+sNibyDlrox4oZUEgEnO7aDpzvEyC42Y3w4mtkNKXeDZ\nK3vqa3hKkOvf6SF9ys2LFa0SA6zhCZrsrOS/H8AJVZ9bYHrf6rT/vDI2Ew6O\n5BIPXjm+4pP+wXqJUjdagSrGPOQFtl99z9/gm4Q8IxSgiCvK5sG/AznTlCgI\nCc+UAvs50z4xNMfIHlheY+2Jgc6xgWn+LGUpViVgcalf2hpQuUUkE3/jkBzg\nO9G3Brfd4uJYkfQsR6cYrB0S7+ODc1A6PPjs2CFxgI7AKJSUdPl9r2zSK3yp\njxId44tt8g0MMl1bvxwY8d/9ps7T6KP6H+txXNiLl/86O/pd6jyt2UdowqL7\nICZEzKfXfHSnT/jMxcn+GP29bZIAqVJphqF/eDTNy8m7jUsmopSsSAH3M1OL\nSRpvu9XEvUYMf7h92MO6O4GynKI8EimQeEXadDCfqwx0Pbj9TOSjLQMIXXtP\nsmNZJKP4ONA3OzkC2lhyYRcITsd/26QZ/1FRkNdvBqmc2OBJBtVv+lns6V+Q\nbYT9L1rBAGoOgS+uRH1ITsBWj3TAuOtDMHZbfTanGLLUBQ0iii84zR9o3rKN\n80UXHeiVXPpsNqOj9IBQsazO9+EkO6UvDu1p+g4mMHgcz0VBplTEpk6PVC3H\n/o9ed/+BgFt/J04nhMYelqCCn9+HyGtmI0uIBdpD0C3MF9OWARMWxG4oKlAN\nCHhiNgwmSOvUDF/kr/6GVNm8I+ah98yzPu5vOP9hHZFr8l4yi23XaovebYCR\nN9uaZ479Z35pjd72etLjxqh2LP7ZkuSVgSV0HPOvhY3RyKXMJvakb+5DRUWr\njWgQFUocYlF2fKX1R8S8iEpIh+zb67+Cfuu8cKDMPBHH3fmEBuLv1Pw9EcyZ\nPFAHjNsBZCiTeN+prKxe52gxYYvb2kM4lCEhUrHNEGQVs6NdkCmcPFlv2efv\nE4ui+KkRuvfPf9k9snGZvPNqdsHphm5SpL1BZ4dtQmFFREjWsJiPPw3xABtg\nixYIJ3uuO1+dQuc3kgATCkt555+u9qsgbfRBURh1eAfcweL7piD8AfUjPiQE\nwIBRoCiaaQLC4mI16mtEibtbxR2i4/0mCqHBpFz++5rsdo7oTL02eQwsO9IQ\nmRj4HErgR3CCnCAuTvqg9wMwvoepmzwPZU5Ip/ZRtUXBlKRHenz7jFytIpch\nooZ2GIYINnhyuPXNytnHpQE+RWsAukp0q6J4OcPNGBTpCh9wj2uIbN9b+7kv\nGdXo4WHSDiHjxjd5W7kNDJparKtIuCX4fChm5AdsHNn2+Gv1JdVLw5GX3bvC\npK1zLhdoDLKx4h1T+JANb1bq+cYdgGjT05T8bg5/+yMJe8HuaMpmg3xg1iDe\nBKxe1ee549W+/il6Sc4cqhjO2ugGZNuKYtvGwvxj1JcUpfdU/HdasdoSVo/G\n0Ina/8Y+9C+nVLjoGx6tcV/XWkBP1cC25DuZPbC2vuHR1WHs3JihF8d7A+Wl\n2AEf5bZjlzdC5Se8RRxd8MtX4qwfwOXhoCzi0BqCs+kpkty92MMh6fuOOfvz\nUsGyZsR8/9sdL1Zj1id5T8VSpeDDFiM9x7jTZG4zVX5DLKnyE/rZ6pO0uUTr\nuWJsujmnptb482rKpzKGafjUQQ8eyBjiXsffZHHA5kjHRmdvzO5XVJeAPghL\n5UaUKQHf0nnS/KbkGtVY9vPwfNpaWKyp8sn5mO2UAvAkXtR3QY1+8cSWwLXO\nVNfsl4UC92Q9kw1Oodk2jpKGxdaX/BtfFDyKRn8jCz8oiBk9zXLdM7LMPe1T\nXyOBYNEd9XLazkw1KCe47u3r3GAfvyI5SRwitq9AektkQ1Yy73mLGiYeEUVl\nWgqCv0I+c89cr8qQ9X1jlo9Vn/k+z8XfA29JyXBr+vr7cPDR4piXTLtTczyh\nfDhpeqzPIUoR57JAI+BWVZeikN9L4rQIVtw2KsSuMGJCiMcxsxKcGf2nTL5X\n6ackY8z4iW6x18EFOuRWwDo1s33dT1ghHSXWtjrjfk8XKVa0uUT3LvzJ9Fu+\nggc9Ep47u6WMu4KGGrQMmyhqNXZixHbjwlmG8h3A5giL2y/X6bHYpvQbsY+o\nI0lRXZfby0FBZr+IWWx3RlIHn06DS+47lrxCO54T8yCpM2rqCrUZwwFUamwQ\nODl8LFSnN9PCurt1Vxuk5uLZW4puKsqgymvJeMN6WQLK2RUexA1kv508Fm3A\n1DHGOXHFvUsvG5KvSXL4U383xLB7BxNXyRvjXorysiTjMFfFr/zZyLWdQu7R\n6i9YmiMmCNj1zwWKpoiwlcUCndTryD9Mf27RWZT/NbyNxr/n8U3NIqYHEHdM\nEgjsev5TgTsIPy+5BuN/ax7rMwbyCcWXEoFznF4T8dnXMrxR0Lk+Z0VJAAxw\nqrSyeUtjfuDgUoTHPfbeTv9si6Fwv98Fc0HcunQmAwdTcbQMW5yzXDjdWSTh\nWquh378YrQu1HX7oww1K3wGBRhDinifjcZxBbvnjeXLMsYHpiThxuyW6Nu2j\ncp7lUWn2HX5sPM4k7i2Jo5/4c2Pzx3j1GHqhE3laYADerjrqzF5sdP3qoLC6\nWV/5KyZj5L325fRamkX4PwetSuTk77RUucWdhuuZ3nkzBqf0ZzZK1UhFH6QA\nJlz1cyzZKTsqfB/gnLkDRU7JnmBhnEsw0KEWMscXTLPoq5I+UhnqP4yS2Gmw\nxXjUbSsOhz05aIMBQSKXi3v2dARnDU/W1GTeCizoLLoLKORcpp9wbdJU1cFr\nMTcpPt2Lm9AXB+QOu3kIcX6pf7lXbQ9vBBHJJXuXUHFf5DSliuGcRxgl6dDQ\neFpEOtLyOwv6LWZEtGXDYxcawMrkNYUZggzANVqWhSF0mUw9EJYqgsI/9h4h\nqwCzwG0D5KeXH7AP8oowb/PU0IKTaETeuW1ZxC350KkDiVXBemjPA0uIzHcN\n8lAXOAvn/RDP3OyFT8z9CRNnnDqrLbpaoU5tEKpeRwqynzkOcBCXjbjpBx92\nxtesHQkbCoKPbFoRIfw/0HbIO7NRD6RgSKklZwnMmuLvZYUqN1JbYUrC+9ns\nhT3ObkxWncLLeU++/2Iub4sPZ2ZEQFD4vGHAWtFBw1DYqJVyDR5iw0+JOVJj\nXLUglti3V9Sf973UqOZClU0l/bEQEDLJSAWmTPGUr4lUpV65fXwZOrTqnhf5\nzCFZPSQ2sCnK0TrcjMDpjpD3dr/RMpxwa1SJuuN8atMwwXI3eHwfVMK7UhXL\ncqkgLv84bPmFCmfTZZ4R4SuZzRrSxQV4gmsUQrdD9aaAudaDDOh01jzLSUgs\nz2oM85uwo+SDmMnlonhWq47hJHtu9zcz/IT0BZzFVVDokjrNAkWTTNneaC7M\nt+eJXMum26s4WlC3VoADpeQLMQfrboSO425H7ASAt9i1tHq+jGOoLLHGvEEH\nqulvQP+idlrVeLgc5GXTORBP1duwGHEvE7AKgd0/NAcjaHg4nhBrZ/2ing8q\ngsNkvJtggUMCXpu0qrDz1AR1l9cCPR4fgC8EKd5ZLNnxZKF4XhV/r4RMIKf+\nvBGxAmXN5CHFG7XHSAOt3KIjQp0YlL24n4ps+BCyJt2kuuVaqm9DFe3kDN3y\nZaXe13dQxHc1R0mHkMlQVhMGNcAfJ5+J9/tmnzMxBdIU3uEcw7vnnTIDY/AK\nGS+WslvA8EN+itLCY6FZdAbMBFq+r+0qaUKnSrlCyI7VJNv9kfnVkREsnUS9\nvfxpSkct6KJ3nzQ9FVMZtACIfRkQKuGyLv6RDsp4xJCxGLqF1Mi/DVQ6LvbI\nya9pcZQeDelBFeJtfBEfEaKhZfFd1ha8hghPOz/0WlLk/HrI70NOoshqFkBw\n4t3HCFHkUKckFL721TqtGNjIr3SpFGCaOuLMTfHSBGNOrl3i5EjnZyS3NRQ4\nY9RXRk12Hp79FZLAdZep9thRHPjS3sH702pb4oTWXBJvz/AegIzN8+O/EizC\n6O2C31U6PozZeAF7dcxZ+P8wVxIEu80qjlXKApSfC7xbBjRdA2tNcSOu8eZM\nPkjB4I51xpYAU8vJRuFHh1MXwg/hO894Met13Gyn0j7x9BpajgTmgIl5O4E0\nJdeTVq9yzFF7oCzixdc21gmeNL/GsC7j36/YypAMqEPIyt1IqzrqLbe4/zDh\nlXWk4Q8Is+ccnrD7LI94L02Taja/RWdJEM9J2ZViEy7QqNxNGc2xuW6LLaVD\nFfHE1u0u8cKK5Op1HXlxZk/r6LUhyCXdhFj4/r39TagrYZD0mxm+iOHeTZXL\n7jeluvpRmpXVHOeaCpNqppZi2g8Sf9Qn4E9J/848XmRrqU2ZX0jE5F9BwNpj\nH6dLG1L6az4Q4HhJqDnUtVa+qLx/3NQIlpZjzbqXLBK2v0FlUpU63r3gpznQ\nBG91sPBsDiupA25uq4EkeZHeRGOwfAeWi4lUZWp/leCMTWH17egr7Dg8Zbct\nafj4L3kkJU/MRibB00GjJKZWY4sqq1YIDLh0sabVAKsZrXG/Yq488VQZ46du\nlJo9FJfUGUhcPVTTVMCE8agFMiKgSrQ8Ub8OJ7M9jmk/uRUK2xxu9o0FxfTt\njU25BSchM2f32NTynizUM9/W0pJ2ShdR8ukdpho5CqEOZicz4ZNoId742DV9\nYeZDRZ9S5LXJiTLe4z+2RXmK1cuggcUisKcXAwRMhv1KWbdPswFlQjNa9TWi\nkT4u2MvywUOdY6oDBr6C2fP5Zj/4rym61WzbAsryq85T1su87orGJLdd7lEu\nIbyre8S7mb8CYZzgBrYZAWHDz4jzp+w7wACk3Q+FtAAGPBxSeCZFbMviy9CD\n4yy6I8v7IIOjflgBUCTiesPDVHUWCrZZUoBjpDEPQITstZ/6IojGmE8bEGv0\ne421HSLf/IcZ9a9ntcAFsff+lXdnYR0XnDQnbPstIhX4tzapW5JJ/2G8I+kw\nr68NxNtIM579GuAUj/FkhDMdXigvY6EQtxy9A69bjt8AJB44qWoud0XSfUAN\nJztH547PMvqCc9eXch9Or7D3R1zn234GZPBfLqxSWqR6jTx2Z5YlWCfDgfmZ\nxwchtwKnMDGUc4O1lPBgzRdObyvTNeMi8yIaR7eUl1eFKvk7qpigR8S/aWW8\nOVmWBqjqvHq7Uak/quotKSQg8bAzRgLVTkIGXrTxGvQ5nWKHGkQtr+o9pM02\n/WKgc5lYjegpMRxMJZsvW76GodxnzVoBQPmEjsopg86WZ1ssX20Pf/5Z4Nm9\n7verPRDJGNkjjxYZzL1mpbfEPN18eq6+Cn1+Lqqenx1/X/NhDs29mRjpYQBp\nrQfyLld7e6f48TxAB0IafwVJIkzh7jqss/Lbn7oL96bVhirpiZ4noBSgnmO/\n5RCkUgo9RlAOg/QrAxMU6/H2Ze3zeXOPOzwhXhVKQtSgy78c+CNBS6MiDqzS\nQGJEpzJkkekIY8I4zPijp73YP0UNIbWe256Yv7pApc17mlfIWObWEw1VNzeR\nkRB4zynv5Tievtlx87eMTSHOLW3BEyVCNlU/z8xjGgqkhNWkwyDEQx/5gW4Q\n9Wmp6d2sxw4JRvdRrxCjYKZHL0yiWApUcefvwFARNdsfQUH1WnyU/lvnSdVD\n5EoIzS5LAathdOrfeBhnbnPv0UGYA3Eac3QL4kzAWwPFSJux+BAePIivc8cp\nZed8D3z5wW1u5t1WpQfPKMkh9bAcV2s5U9KyIHhnHom3H5Not+jvTzDA0l0Y\nYcJZ5QMwVEuMyqZ79aSSaZzSTk2mGljMC1rzQKOBRXR75qTJCNzeGpr9naIc\nYJ0KYynoVEHTw7EPFPbgoQHN5yOuXDLXomiZC6hjwyKNPz32p6pIbGq9toq6\nqI+xzHlJi+YH8cGHsnBErkWNm4ZVrwWnxSbqoq11VzfRa4L9id/S9xSDCLgb\nFWuzdtWFGw7xHCzvJL16kjZGYW/QQVL6sGcZ8ntzHwhWyxNhA6g7mTjcdLMl\nnh0aQS9ZW4yjwvc6D/lF8BsvjCmWp4B+kigBJeXytTBRJpXgvtjjrmk3TTpW\nM0I0ZyNYFqV0MLDMywapQaUPT051mG3utQwe4Lad8JdJ7CTfH6Zb/RGEVCjE\n1zc1UqwTl8Se2TKX5jFRUAs47wHZxstNM43lzJKmRgDppJ+OyAnztf9TrSC0\nFPuFxLxEci5B2h3oPl7IaKVMezPJVV+2SBsBCdw+20N+gT4aj3RYvKyi0R++\nNpFjAZjFYgsRwNnjQ6JwRADVYMjzIMSf7oNdHnSvKaterMbfJ9ZSTVMbpCqm\ntVWqexibBume1membsOdHO/980vdMeMFlYzbui+TSFIi1E0MNwzUiiH+/1fd\njzW4oOyoSxFbG78E71uJwoLkH+E0b4rv8Tm3PTTXi3+9qY8Vdu5CD5N3WNop\nvOG+9rzRvIoUOgrWA/eoSpBFNh6FCdukYj6/QQe+wksOQM/yBj77zJ6PUKOH\n5vBNyeBk6MYVaHFB0CKtrjB7emIVGbzdoaIV/RJEeHUcTL4ubYzpJdo1GIzG\nlSAWzjCZqAvkQE/JcOkBZ8PesEO7UXxf5PgKJ2qTqrk8WXRmneorjLdFyINi\noEWcbW8EOj/mzWvNr3N/DCuoKRrnTFOuU3RbBUmyzsP3Qe3cNri47CW1VRwL\nEjm7dfyhwN80ls4k8ELWg1Sb0aViBPL8JIusHpa+x3XE3TB5xtmA3f/+CLMo\nQ0t6pYA/U9/GqOzx3SITallx0s9REw+Hz5F9Ady8EZigpmDZDHGRkl7zTOLv\nIjLmEiSnwYwwmuy9318379tsG+MTglzKYYdan/+3KNB2mPTAQQDKkOZUKoFX\nbiFHVDHVvYvK7zGs5j32iDzc8yRnjsoHZGN5rOfMoRQO/EkVdoR+vON6CBGA\nM2RgIcDh/vWorUPd6DZR5JXW4X78tTrWRatIeiLuJVtooOoL/kB1rVORYNXr\nIXXm+O9gHolPsDWT7hca9C6n0FurZbB50ENQoI41DGaq2qfLPeqzawJa45RM\nHwo3PATInYBG0KgSNFlR8TLG7N1ULtgUvI2kl6LbUeAFxcEGW8reUWN16YjA\nAKiEblz+SUW8E0HmNfxiDTuZdEJEzWpI2WwpF64p6BwWyU6OdZaw3s4ChNtM\n3VjnSXZ/JssoCuFaGcDT7qVA355z4JBkHjqc7BGv9sZ5n87rgw20M/b3XML7\naErauX0GMuKxs4v32JDLSL/bXS3qwXIROPErjV+RtvB1bP9KD7Ntahzkw47O\nItsHGrDaznO4WnCAuVKxenJ5T0RTtspSCVGP3ctJJY6uaiWkT7zq/DztctLN\nxtIKftypJfRvhnc4pQ3thyV4hqvwQ6NgHMEHMxfsJp8QsRqwEECup+yU0vSG\nFWGkA/T5LRYaPzlpln5JQB+M5/kJ60izwKFGc+ZCDPV32X5JdmD+DvmQrFqx\nx8L7yyU4jU86OS1Q4WxzYhsZCyymeQcBkFl1fJfgPvhUWDZ8NInMVoK0AGzJ\nk6xfafbq8mzWVAph6vo3NIlDCelAcWslerhCtqG72sBgKZhPNrrfKQrAhw1A\nfF8eUluk04zY/WtY3fuCcU7DVMd5uVBJAJAWkXM18PcADrG/sPZtOwn+ArrO\nrtU2IJ8eRo04fW6wDA6jpH5HCN/wKPAdQ1iRfnw1BGbznj8Zq4TFYcIz63Bx\nIr5V/d/7WvJa+ju1wKXj8T55ilpacS+r6yH1RgmVv9YhRNQFjPGLrAVyh6Mg\n9XPZedRJ33eT2kJpMp674ZMCiYGIalYSpYnHx5S6b79/YUoppfsC9TAmhmKe\nEoy8pNb3i3dm7gY8j4iE8LPZW5N8QX7BoXplR3m6UrdjNndpajnUmFaH33AG\nvZLiamlN4qQyXPGa+ZWddv/pubVR0D3vHZtukB3dOt+3mSuuBxjQORnztbR1\n3t5rPgjIagSoU7FU4tuF/VVVu5cVacKTui0ex8suq145dd2r1kQ2M40QBoaI\nS9M5vmZLZcn+3axGD3raWZNatdh3tL6nUk8aDI3QMPqAyIw4YWY4aE43d1GI\nx+li/X9+9rfoT7GKOQm5nop2KOiGg/pwl3hnR5AArU0KWfUqZ+k3FumIqBFW\nQdm1Mk7AdbwpkJMk/jovIAnSuE1BL2JZBCbSrat2qoa8b/qbC+xPIKIus/CR\nXPm5ZA/TB0MWyyQ/n4c44kMu4bf54Gsqkn+1qDsKFa5k0t2lmjl2D9Zvw2X7\nJNCMlidW5udhCzhyNrRBDTgg/HIVIP/J7CReBMIPFo8qDLqGHbCmSNzjaEvV\nFd4eWdFpserI0LGvAfP5RG6OG6WOTaF0KefwEndLcQA5lkK/DfYeyU0C7B1K\ncJl9Mji+XWesBTF+nxet0Q0gmckr3Li7idjkMZQeHWEAOkvoXTr9hy4JPFLW\n7UzyPYpB6+ZPohlxguGtmEnr/cZwbfkxyC0WIoKFF+2QvBGvCgxDwfj1G8+l\nQcyHKFkMP0GCCJnKvjJK5mfO7NtpSL7SOQO5QDNJiLsT+03cnXE1HuYb9uj/\nAmav100cNNzUrM9P5sdfNYtW+v7hI/RWNLyGuNBnPY7TNNCEkYvRij0VeTpF\nEU6LU2zBvmoRs+ifPEEX+qjNaYRUIE7Ndm6Aqa7cE5HUQkkBg89E4x6AcR7e\nNtnhF+bYQ4lkBbXNQ9qXV1waDjg9v0I6htPO4FWbAQGuIB4vxY9FQi27z8Jd\nY39fcsyM5PNB3Sd2IUkEZUEBHQtAIdtRxRtQDY4zThFOrB4alGYwtXB3GD7c\nIgGWzYcNO1uRR0dFV6s4R2bYkqfpvygb+qennrIViVbwmJuaRdMLoWWAzoiG\n2FihFV5Q+mFeE14h2OBNhACjhc2gBwdE8XbpU3XtRg2VS6oN1EV7wgDb01WI\n1nM0S6LIu5EoI/wFbGFxChUxeZYgMzAJmgACqU9p3rriycuoLh5UIIsXJXCq\nYPGascFlSKq6c3KVVQMvUJF6P1R8UptjeXStYSTUeK1iDP5whuyvG1C1OGRF\nNMx1lsSNtWqUhHCBLKK6Aqx8Gs/RUZeoI8Y/Knx8Og4Q7DFez5H65xQ=\n",
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T21:30:51.744+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L7c_2025\\\"\"],\"cloned_from\":\"CSA U6L4-L7c_2025\"}]"
}]]></config>
</Javalab>
