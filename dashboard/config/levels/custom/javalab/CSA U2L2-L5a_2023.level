<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-11-03T19:22:55.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A student wants to create a playlist to listen to while they study, and they need help creating a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Song</code> class to represent a song.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Song</code> class, declare <code style=\"background-color: #ececec; color: black; font-weight: bold;\">private</code> instance variables named <code style=\"background-color: #ececec; color: black; font-weight: bold;\">title</code> (of type *String*) and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">rating</code> (of type *int*) for the title of a song and its rating.\r\n\r\n‚úÖ **TO DO #2:** Write a no-argument constructor to assign default values to the instance variables, such as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"new song\"</code> for the title and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> for the rating.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">PlaylistRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Song</code> object.\r\n\r\n‚úÖ **TO DO #4:** Print the constructor and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Song</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a no-argument constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n    <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getTitle()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getRating()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Song</code> class to get the current values assigned to the instance variables. For example:</p>\r\n    <pre style=\"background-color: #333333; color: white;\">\r\nSong hitSong = new Song();\r\nSystem.out.println(\"Title: \" + hitSong.getTitle());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Song Class",
    "bubble_choice_description": "A student wants to create a playlist to listen to while they study, and they need help creating a `Song` class to represent a song.",
    "thumbnail_url": "https://images.code.org/45cfd82b184e9f10f9e39ad694a02cbc-song.png",
    "encrypted_exemplar_sources": "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\nZT119YgSWI6bOHtvMDw=\n",
    "encrypted_validation": "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\n",
    "start_sources": {
      "PlaylistRunner.java": {
        "text": "public class PlaylistRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Song object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject) and the values assigned\n     * to the instance variables using the methods in the Song class.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Song.java": {
        "text": "/*\n * Represents a song on a playlist\n */\npublic class Song {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Declare instance variables for the title of a song and its rating.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a no-argument constructor to assign default values to the instance\n   * variables for the title of a song and its rating.\n   * -----------------------------------------------------------------------------\n   */\n\n  \n\n\n  /*\n   * Returns the current value assigned to title\n   */\n  public String getTitle() {\n    return title;\n  }\n\n  /*\n   * Returns the current value assigned to rating\n   */\n  public int getRating() {\n    return rating;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    ArrayList<String> fieldsList = fieldsToList(Arrays.toString(classFields));\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    fieldsAsText = fieldsAsText.substring(1, fieldsAsText.length() - 1);\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:22:55.676+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L3d_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L3d_2023\"},{\"changed_at\":\"2022-11-03 19:22:57 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 13:36:21 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:56:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:56:25 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:56:34 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:00:59 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:05:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:05:57 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:07:06 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:21:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:21:34 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:21:38 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:22:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:26:33 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:26:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 16:49:00 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 21:46:39 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:26:52 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:53:40 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:53:44 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:53:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:54:51 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:53:28 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:43:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:43:10 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:44:11 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:46:36 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 17:09:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 17:09:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 17:09:58 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:39:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:57:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-14 19:23:39 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 18:36:26 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2024-01-11 15:53:23 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
