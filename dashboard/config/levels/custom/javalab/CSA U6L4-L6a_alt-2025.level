<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T22:51:15.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">User</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to store a user's friends on a social media platform.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">User</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Friend</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Friend</code> objects\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">UserRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">User</code> object.\r\n\r\n2. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code>.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Social Media",
    "bubble_choice_description": "Create a `User` class that contains an `ArrayList` to store a user's friends on a social media platform.",
    "thumbnail_url": "https://images.code.org/e4239a039e760c22f3cf469cea4b1824-add-user.png",
    "encrypted_exemplar_sources": "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\n",
    "encrypted_validation": "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\naeXoyWhmuUYs5dGIHYdZ\n",
    "start_sources": {
      "UserRunner.java": {
        "text": "public class UserRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a User object, then call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "User.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a User\n */\npublic class User {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Friend objects and a\n   * no-argument constructor that initializes the list to an empty list.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n\n  /*\n   * Returns the list of friends\n   */\n  public ArrayList<Friend> getFriends() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return the list of Friend objects.\n     * -----------------------------------------------------------------------------\n     */\n\n    return null;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 3
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "Friend.java": {
        "text": "/*\n * Represents a friend\n */\npublic class Friend {\n  \n  private String name;     // The name of a friend\n\n  /*\n   * Sets name to the specified name of a friend\n   */\n  public Friend(String name) {\n    this.name = name;\n  }\n\n  /*\n   * Returns the name of the friend\n   */\n  public String getName() {\n    return name;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 5
      }
    },
    "name_suffix": "_alt-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T22:51:15.751+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L6a_pilot-2025\\\"\"],\"cloned_from\":\"CSA U6L4-L6a_pilot-2025\"}]"
}]]></config>
</Javalab>
