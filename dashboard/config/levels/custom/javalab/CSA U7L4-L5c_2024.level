<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T21:06:42.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A recipe website wants to implement a system that recommends recipes based on the user's ingredient preferences.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">private</code> method <code style=\"background-color: #ececec; color: black; font-weight: bold;\">resultsToString()</code> in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Website</code> that has a parameter for an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Recipe</code> objects and returns a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> that contains each <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Recipe</code> object's information on separate lines.\r\n\r\n‚úÖ **TO DO #2:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">public</code> method <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getRecommendedRecipes()</code> in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Website</code> class that has a parameter for an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> objects for the list of preferred ingredients. The method should find all <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Recipe</code> objects that have any ingredients that match the ingredients in the list of preferred ingredients, and it should call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">resultsToString()</code> method to return the results as a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code>.\r\n\r\n‚úÖ **TO DO #3:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">RecipeRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getRecommendedRecipes()</code> method and print the results.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing <code style=\"background-color: #ececec; color: black; font-weight: bold;\">private</code> methods.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_private_methods",
    "reference_links": [
      "/courses/csa-2023/guides/private-methods"
    ],
    "display_name": "Recipe Preferences",
    "bubble_choice_description": "A recipe website wants to implement a system that recommends recipes based on the user's ingredient preferences.",
    "thumbnail_url": "https://images.code.org/7f5708cd01ea7ba23476cfa92256dd4a-recipe.png",
    "encrypted_validation": "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\nAg==\n",
    "start_sources": {
      "RecipeRunner.java": {
        "text": "import java.util.ArrayList;\n\npublic class RecipeRunner {\n  public static void main(String[] args) {\n\n    // Creates an ArrayList of recipes\n    ArrayList<Recipe> allRecipes = new ArrayList<Recipe>();\n    allRecipes.add(new Recipe(\"Spaghetti Bolognese\", FileReader.toStringList(\"recipe1.txt\")));\n    allRecipes.add(new Recipe(\"Chicken Curry\", FileReader.toStringList(\"recipe2.txt\")));\n    allRecipes.add(new Recipe(\"Beef Stroganoff\", FileReader.toStringList(\"recipe3.txt\")));\n    allRecipes.add(new Recipe(\"Vegetable Stir-Fry\", FileReader.toStringList(\"recipe4.txt\")));\n    allRecipes.add(new Recipe(\"Salmon with Asparagus\", FileReader.toStringList(\"recipe5.txt\")));\n\n    // Creates an ArrayList of preferred ingredients\n    ArrayList<String> preferred = new ArrayList<String>();\n    preferred.add(\"chicken\");\n    preferred.add(\"curry powder\");\n    preferred.add(\"coconut milk\");\n\n    // Creates a Website object\n    Website recipeWebsite = new Website(allRecipes);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the getRecommendedRecipes() method and print the results.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Recipe.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a recipe\n */\npublic class Recipe {\n  \n  private String name;                        // The name of a recipe\n  private ArrayList<String> ingredients;      // The list of ingredients\n\n  /*\n   * Sets name to the specified name and initializes\n   * ingredients to the specified list of ingredients\n   */\n  public Recipe(String name, ArrayList<String> ingredients) {\n    this.name = name;\n    this.ingredients = ingredients;\n  }\n\n  /*\n   * Returns the name of the recipe\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the list of ingredients\n   */\n  public ArrayList<String> getIngredients() {\n    return ingredients;\n  }\n\n  /*\n   * Returns a String containing the recipe's information\n   */\n  public String toString() {\n    String result = name + \"\\n----------\\n\";\n\n    for (String ingred : ingredients) {\n      result += ingred + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Website.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a recipe website\n */\npublic class Website {\n\n  private ArrayList<Recipe> recipes;    // The list of recipes\n\n  /*\n   * Initializes recipes to the specified list of recipes\n   */\n  public Website(ArrayList<Recipe> recipes) {\n    this.recipes = recipes;\n  }\n\n  /*\n   * Returns the list of recipes\n   */\n  public ArrayList<Recipe> getRecipes() {\n    return recipes;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write the private method resultsToString() with a parameter for an\n   * ArrayList of Recipe objects. The method should return each recipe in the list\n   * on separate lines.\n   * -----------------------------------------------------------------------------\n   */\n  \n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write the public method getRecommendedRecipes() with a parameter for an\n   * ArrayList of preferred ingredients. Find all recipes that contain a\n   * preferred ingredient and add each recipe that matches to a new ArrayList.\n   * Return a String containing the results using the resultsToString() method.\n   * -----------------------------------------------------------------------------\n   */\n  \n\n\n  \n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "recipe1.txt": {
        "text": "spaghetti\nground beef\ntomato sauce\nonion\ngarlic",
        "isVisible": true,
        "tabOrder": 4
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static ArrayList<String> toStringList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    return temp;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Integer> toIntList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Integer> data = new ArrayList<Integer>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Integer.parseInt(currentValue));\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Double> toDoubleList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Double> data = new ArrayList<Double>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Double.parseDouble(currentValue));\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      },
      "recipe2.txt": {
        "text": "chicken\ncurry powder\ncoconut milk\nonion\ngarlic",
        "isVisible": true,
        "tabOrder": 5
      },
      "recipe3.txt": {
        "text": "beef\nsour cream\nmushrooms\nonion\nnoodles",
        "isVisible": true,
        "tabOrder": 6
      },
      "recipe4.txt": {
        "text": "vegetables\nsoy sauce\nginger\ngarlic",
        "isVisible": true,
        "tabOrder": 7
      },
      "recipe5.txt": {
        "text": "salmon\nasparagus\nlemon\ngarlic",
        "isVisible": true,
        "tabOrder": 8
      }
    },
    "encrypted_exemplar_sources": "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\nfA==\n",
    "name_suffix": "_2024"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T21:06:42.696+00:00\",\"changed\":[\"cloned from \\\"CSA U7L4-L5c_2023\\\"\"],\"cloned_from\":\"CSA U7L4-L5c_2023\"}]"
}]]></config>
</Javalab>
