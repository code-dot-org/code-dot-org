<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "In `Dice.java`, update the `setCurrentSide()` method to get the correct dice image to match the value of the dice.\r\n\r\nFor example, if a **1** is rolled, the dice image located at index `0` should be displayed. If a **6** is rolled, the dice image located at index `5` should be displayed.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "playground",
    "project_template_level_name": "CSA U4 Template",
    "encrypted_examples": "f0IsrdHx9oayOAswvXWYgoG/TL5XtGZ+9azHHlFb/tOOKutcoECsKgbm95L5\nRfnP5oy3OUMKmd+J9X+kJGH4dyyPYqLN1YGCId27RUhTXaI=\n",
    "start_sources": {
      "MyPlayground.java": {
        "text": "public class MyPlayground {\n  public static void main(String[] args) {\n\n    PopBalloonsGame.play();\n    \n  }\n}",
        "isVisible": true
      },
      "PopBalloonsGame.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\n\npublic final class PopBalloonsGame {\n\n  private static Board myBoard = Playground.board;\t\t// the board to display the game\n  private static int diceLeftValue;\t\t\t\t\t\t\t\t\t\t// the value of the left dice\n  private static int diceRightValue;\t\t\t\t\t\t\t\t\t// the value of the right dice\n  private static int totalRollValue;\t\t\t\t\t\t\t\t\t// the total value rolled\n\n  // initiates gameplay of the Pop the Balloons game\n  public static void play() {\n    GameDisplay.displayGame();\t\t\t\t\t// displays the game components on the board\n\n    \n    \n    GameControl.startPlayground();  \t\t// starts gameplay\n  }\n\n  ////////// TO DO: Develop the logic for the game below this line. \\\\\\\\\\\\\\\\\\\\\n\n  // rolls the dice to get new values for each dice and the total roll value\n  public static void rollDice() {\n    diceLeftValue = 2;\n    updateDice(1, diceLeftValue);\n    \n    diceRightValue = 3;\n    updateDice(2, diceRightValue);\n    \n    totalRollValue = diceLeftValue + diceRightValue;\n\n    System.out.println(\"Total roll is \" + totalRollValue);\n  }\n\n  // updates the display of the dice to match the value rolled\n  public static void updateDice(int dice, int value) {\n    // TO DO: Check if 1st dice and update it.\n    \n\n    // TO DO: Check if 2nd dice and update it.\n    \n  }\n}",
        "isVisible": true
      },
      "GameControl.java": {
        "text": "import org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class GameControl {\n\n  private static Board myBoard = Playground.board;\n  private static ImageItem temp;\n  private static RollButton tempButton;\n\n  public static void startPlayground() {\n    try {\n      myBoard.start();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error starting The Playground.\");\n    }\n  }\n\n  public static void stopPlayground() {\n    try {\n      myBoard.end();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error starting The Playground.\");\n    }\n  }\n\n  public static ImageItem createImage(String filename, int x, int y, int width, int height) {\n    try {\n      temp = new ImageItem(filename, x, y, width, height);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return temp;\n  }\n\n  public static RollButton createButton(String filename, int x, int y, int width, int height) {\n    try {\n      tempButton = new RollButton(filename, x, y, width, height);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating button: \" + filename);\n    }\n\n    return tempButton;\n  }\n\n  public static void playSoundEffect(String filename) {\n    try {\n      myBoard.playSound(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error playing sound: \" + filename);\n    }\n  }\n}",
        "isVisible": true
      },
      "GameDisplay.java": {
        "text": "import org.code.playground.*;\n\npublic final class GameDisplay {\n\n  private static Board myBoard = Playground.board;\t\t// the board to display the game\n  private static Dice leftDice;\t\t\t\t\t\t\t\t\t\t\t\t// the left dice\n  private static Dice rightDice;\t\t\t\t\t\t\t\t\t\t\t// the right dice\n  private static RollButton button;\t\t\t\t\t\t\t\t\t\t// the roll button\n\n  // displays all the visual components of the game on the board\n  public static void displayGame() {\n    showIntro();\n    showDice();\n    showRollButton();\n  }\n  \n  // prints an introductory message to the console\n  public static void showIntro() {\n    System.out.println(\"Pop the Balloons!\");\n    System.out.println(\"---------------------\");\n    System.out.println(\"This game involves balloons that are numbered 1 through 10.\");\n    System.out.println(\"Your goal is to pop all of them!\");\n    System.out.println(\"You may pop any combination of unpopped ballons to add up to the sum on the dice.\\n\");\n  }\n\n  // creates the dice and displays them on the board\n  public static void showDice() {\n    // array of image files for each side of a dice\n    String[] diceImageFiles = {\"dice1.png\", \"dice2.png\", \"dice3.png\", \"dice4.png\", \"dice5.png\", \"dice6.png\"};\n\t\t\n    int diceSize = 70;\t\t\t// the width and height of the dice\n    int diceXPos = 120;\t\t\t// the starting x position of the dice\n    int diceYPos = 240;\t\t\t// the y position of the dice\n    leftDice = new Dice(diceImageFiles, diceXPos, diceYPos, diceSize, diceSize);\n    rightDice = new Dice(diceImageFiles, diceXPos + diceSize + 20, diceYPos, diceSize, diceSize);\n\n    myBoard.addImageItem(leftDice.setCurrentSide(0));\n    myBoard.addImageItem(rightDice.setCurrentSide(0));\n  }\n\n  // creates the roll button and displays it on the board\n  public static void showRollButton() {\n\t\tint buttonWidth = 200;\t\t// the width of the button\n    int buttonHeight = 50;\t\t// the height of the button\n    int buttonXPos = 100;\t\t\t// the x position of the button\n    int buttonYPos = 320;\t\t\t// the y position of the button\n    \n    button = GameControl.createButton(\"rollButton.png\", buttonXPos, buttonYPos, buttonWidth, buttonHeight);\n    myBoard.addClickableImage(button);\n  }\n\n  // gets the left dice\n  public static Dice getLeftDice() {   \n    return leftDice;\n  }\n\n  // gets the right dice\n  public static Dice getRightDice() {\n    return rightDice;\n  }\n}",
        "isVisible": true
      },
      "Dice.java": {
        "text": "// TO DO: Import The Playground.\n\n\npublic class Dice {\n\n  private ImageItem[] diceImages;\t\t// array to represent each side of a die\n  private int currentValue;\t\t\t\t\t// the current value displayed on the dice\n\n  // TO DO: Write the constructor.\n  public Dice(String[] filenames, int xPos, int yPos, int width, int height) {\n    \n    }\n  }\n\n  \t// gets an image from the array representing a side of the dice\n  public ImageItem setCurrentSide(int value) {\n    this.currentValue = value;\n    return diceImages[value];\n  }\n}",
        "isVisible": true
      },
      "RollButton.java": {
        "text": "// TO DO: Import The Playground.\n\nimport java.io.FileNotFoundException;\n\npublic class RollButton {\n\n  // TO DO: Complete the constructor.\n  public RollButton() throws FileNotFoundException {\n    super();\n  }\n\n  // rolls the dice when the button is clicked\n  public void onClick() {\n    // TO DO: Play a dice roll sound.\n\t\t\n\n    // TO DO: Call rollDice() from PopBalloonsGame.\n\t\t\n    \n  }\n}",
        "isVisible": true
      }
    },
    "reference_links": [
      "https://docs.google.com/document/d/e/2PACX-1vQ6YPm9xmVzH4K0_nWvGWdQLFbxoJ8Gurd4jwzOnOFqTCw-7ymPLmuRqBvxprqsz-qR3SKyBakHsuSh/pub"
    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2021-09-02T14:51:11.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "audit_log": "[{\"changed_at\":\"2021-09-02 14:51:30 +0000\",\"changed\":[\"encrypted_examples\",\"serialized_maze\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-09-03 16:02:47 +0000\",\"changed\":[\"long_instructions\",\"csa_view_mode\",\"serialized_maze\",\"contained_level_names\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-09-03 16:08:00 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-09-17 15:02:12 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 15:46:30 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 16:05:49 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-15 19:11:44 +0000\",\"changed\":[\"encrypted_examples\",\"contained_level_names\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"}]"
}]]></config>
</Javalab>
