<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:49:17.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A theatre director is casting for the characters in their play.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Character</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">isLeadRole</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">CharacterRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Character</code> object using the parameterized constructor. \r\n\r\n‚úÖ **TO DO #3:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Character</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">hasLeadRole()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Character</code> class to get the current values assigned to the instance variables. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nCharacter hamlet = new Character();\r\nSystem.out.println(\"Name: \" + hamlet.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "CharacterRunner.java": {
        "text": "public class CharacterRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Character object using the parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Character.java": {
        "text": "/*\n * Represents a character in a play\n */\npublic class Character {\n\n  private String name;          // The name of a character\n  private boolean isLeadRole;   // Whether or not a character is a lead role\n\n  /*\n   * Sets the name to \"unknown\" and isLeadRole to false\n   */\n  public Character() {\n    name = \"unknown\";\n    isLeadRole = false;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the name and isLeadRole instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to isLeadRole\n   */\n  public boolean hasLeadRole() {\n    return isLeadRole;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "display_name": "Characters",
    "bubble_choice_description": "A theatre director is casting for the characters in their play.",
    "encrypted_exemplar_sources": "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\nRqmWbwhRm+Wu1HOLbkYVl+gxAabuC9xf5A==\n",
    "thumbnail_url": "https://images.code.org/4b71865dbb6054f7fdf93794dcbdb12d-theater.png",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_validation": "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\nZ8NONQR06xnic0iCswyZNiR7TMeOvPRF\n",
    "video_key": "csa_overloaded_constructors",
    "name_suffix": "_2024",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:49:17.850+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L3c_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L3c_2023\"}]"
}]]></config>
</Javalab>
