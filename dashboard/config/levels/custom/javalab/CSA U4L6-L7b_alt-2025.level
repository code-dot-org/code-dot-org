<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T22:18:08.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "‚úÖ **TO DO:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Poem.java</code>, override the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">equals()</code> method to check if two <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Poem</code> objects have the same author. If the authors are the same, return <code style=\"background-color: #ececec; color: black; font-weight: bold;\">true</code>, otherwise return <code style=\"background-color: #ececec; color: black; font-weight: bold;\">false</code>.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Object</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help overriding and using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">equals()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Poems",
    "bubble_choice_description": "Override the `equals()` method in the `Poem` class to check if two `Poem` objects have the same author.",
    "thumbnail_url": "https://images.code.org/c8b23407aae3bebc98e12a1d8dc93c8b-poem.png",
    "encrypted_validation": "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\n",
    "start_sources": {
      "LibraryRunner.java": {
        "text": "public class LibraryRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of Poem objects\n    Poem[] poems = {new Poem(\"T.S. Eliot\", \"The Waste Land\"), new Poem(\"Edgar Allan Poe\", \"The Raven\"),\n                    new Poem(\"T.S. Eliot\", \"The Love Song of J. Alfred Prufrock\"), new Poem(\"John Keats\", \"Ode to a Nightingale\"),\n                    new Poem(\"William Wordsworth\", \"I Wandered Lonely as a Cloud\")};\n\n    // Creates a Library object\n    Library catalog = new Library(poems);\n\n    // Creates a new Poem object\n    Poem another = new Poem(\"T.S. Eliot\", \"Four Quartets\");\n\n    // Calls the getSimilarPoems() method and prints the results\n    System.out.println(catalog.getSimilarPoems(another));\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Library.java": {
        "text": "/*\n * Represents a library\n */\npublic class Library {\n\n  private Poem[] poems;    // The 1D array of Poem objects\n\n  /*\n   * Initializes poems to the specified 1D array of Poem objects\n   */\n  public Library(Poem[] poems) {\n    this.poems = poems;\n  }\n\n  /*\n   * Returns the 1D array of Poem objects\n   */\n  public Poem[] getPoems() {\n    return poems;\n  }\n\n  /*\n   * Returns a String containing the title of each poem by\n   * the same author as other\n   */\n  public String getSimilarPoems(Poem other) {\n    String result = \"\";\n\n    for (int index = 0; index < poems.length; index++) {\n      if (poems[index].equals(other)) {\n        result += poems[index] + \"\\n\";\n      }\n    }\n\n    if (result.equals(\"\")) {\n      result = \"No poems found.\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Poem.java": {
        "text": "/*\n * Represents a poem\n */\npublic class Poem {\n\n  private String author;      // The author of a poem\n  private String title;       // The title of a poem\n\n  /*\n   * Sets author and title to the specified values\n   */\n  public Poem(String author, String title) {\n    this.author = author;\n    this.title = title;\n  }\n\n  /*\n   * Returns the author of the poem\n   */\n  public String getAuthor() {\n    return author;\n  }\n\n  /*\n   * Returns the title of the poem\n   */\n  public String getTitle() {\n    return title;\n  }\n\n  /*\n   * Returns true if the other Poem has the same author as this Poem\n   */\n  public boolean equals(Object other) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return true if other points to the same object as this object, and\n     * return false if other is not a Poem. If neither of these conditions\n     * are true, cast other as a Poem and return true if this object's author\n     * is the same as the other object's author. Otherwise, return false.\n     * -----------------------------------------------------------------------------\n     */\n\n    return false;\n  }\n\n  /*\n   * Returns a String containing the title and author of the poem\n   */\n  public String toString() {\n    return title + \" by \" + author;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "encrypted_exemplar_sources": "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\nI10=\n",
    "video_key": "csa_the_equals_method",
    "name_suffix": "_alt-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T22:18:08.311+00:00\",\"changed\":[\"cloned from \\\"CSA U4L6-L7b_pilot-2025\\\"\"],\"cloned_from\":\"CSA U4L6-L7b_pilot-2025\"}]"
}]]></config>
</Javalab>
