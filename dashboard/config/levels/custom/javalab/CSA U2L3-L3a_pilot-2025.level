<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-01T22:19:09.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A theme park manager wants to keep track of the roller coasters they have at the park.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Rollercoaster.java</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">speed</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">RollercoasterRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Rollercoaster</code> object using the parameterized constructor. \r\n\r\n‚úÖ **TO DO #3:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Rollercoaster</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getSpeed()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Rollercoaster</code> class to get the current values assigned to the instance variables. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nRollercoaster comet = new Rollercoaster();\r\nSystem.out.println(\"Name: \" + comet.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Rollercoasters",
    "bubble_choice_description": "A theme park manager wants to keep track of the rollercoasters they have at the park.",
    "encrypted_exemplar_sources": "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\nSuuyPQM1\n",
    "thumbnail_url": "https://images.code.org/49e12feb3c5bb9ebf326ef694ef2f68e-rollercoaster.png",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_validation": "MWvyOCr1U5dWjIX9TJ56YvKesW+z/iZ2IGpRg3llEWD4w045ft2g9sNB9n+6\nEmkFE2qsf42nn4wRVZ2UAT0tfMn9DF2csE00OSoNLT9e1niZ14UP5aHWzBV4\nKhSrXF3srFW5lEKYDpX8YNqnxRKyBxYLHK2cS8l3R8pFSM+lfl8Qr7adz/7h\nUT06cCaysLl6DB1EgYey2FE3wsUBntvm6vRdVfetrONk+jDlKLcat/IJ3kjs\nsGB+tJwB/r2IBb1hlAyhgkKhCXmjnCXI6dDJhsVaaPrBi9r6kDr+07el4I5o\nzv4jRy3IYRNZniZLinbIUMnszqwz/25K/udYKr3U5Fw7CtDRAPOoroAsgwEF\nErPxOZLhSayGb2aTAhl923afoZarr0lTDh4dxxvHOutUG7Xk403V3i1+MBr7\nZJaPAJPPKfE9dAXl1uMYXlwteBm1EwYIGrEoSUKi5Vnste4+3DuqrILU3a+u\nI7YWs4gUU9HGdRVlxyvuvf9uVRF9e8Tk3kAU3s7IQbppTJEin4Kr6MAN3fiL\nKis3Yl9I/IiJLDDFVKhAM2mjay3RLf+9zON6IEg5dYDps8b2q8qlE9A2+UIS\njghpY5G5Jmr+aZpvOxsxxRUQXpe5biG9PafRTtfyOM5Q/dFgzSS6KmlpfLRc\nHebZSLxP+bThHhyR4vjz07sIYkrQ0hA/646DFyUiINRAdXV5Xo2pyMEYAoGz\nKufaB4cB5QRu2hnxnzJ+wu6TDSmTf4jtDdsNEcEkQBPvPRGnkxqkmS+kehTl\nDIPJc9mEUtQs5vxZpCUqL+0nn8FvUgEIT1rrdcyLbrqVMkUpZiHVfcLgm96W\nzW71LXb6fF0yXlart1MnwwVKZ/uwGlppOZuqK1AEtTWNH9sIuasTDaG646fA\nFtpuyuKTk07C0gZlmLInpSsAlY5rFSPzq7KlNQTNx5j5IXtHaNEtw/qWVc3k\nf4IfY6JoCHLR9XZQYmP9iwwPzPUl0W/gXYrFycy+ZwNq26tIH1zY3j0LDfOy\neAwi0e71xKLVi5rPPPThn7geSx7ZpwPitY3dpoc0B+AI2o0zaI3ciJXFgIST\nIi0K7k4VCLh3FjS3ZBU28TITCv/rXU5Vvgo3rwrc534ZXCSfu12aZBHQkdfT\nKJI8eDQ8a6TpBk0HXfdSx9YxZjwXL4Gxe2ONpQHLyGLf5zW4ygATF5k5J1t1\n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\n6L+XkwvTBjAS\n",
    "video_key": "csa_overloaded_constructors",
    "start_sources": {
      "RollercoasterRunner.java": {
        "text": "public class RollercoasterRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Rollercoaster object using the parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Rollercoaster.java": {
        "text": "/*\n * Represents a rollercoaster at a theme park\n */\npublic class Rollercoaster {\n\n  private String name;     // The name of a rollercoaster\n  private int speed;       // The speed of a rollercoaster\n\n  /*\n   * Sets the name to \"unknown\" and speed to 20\n   */\n  public Rollercoaster() {\n    name = \"unknown\";\n    speed = 20;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the name and speed instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n  \n\n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to speed\n   */\n  public int getSpeed() {\n    return speed;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    int end = currentConstructor.indexOf(\")\");\n    \n    if (start < 0 || end < 0 || end < start) {\n        return parametersList;\n    }\n    \n    currentConstructor = currentConstructor.substring(start, end).trim();\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma).trim();\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1).trim();\n        comma = currentConstructor.indexOf(\",\");\n    }\n    \n    if (!currentConstructor.isEmpty()) {\n        parametersList.add(currentConstructor);\n    }\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n  public static String findConstructorWithParameters(ArrayList<String> constructorsList, int expectedParamCount, String... expectedParamTypes) {\n    for (String constructor : constructorsList) {\n        ArrayList<String> actualParameters = getParameters(constructor);\n        if (actualParameters.size() == expectedParamCount) {\n            boolean allParamsMatch = true;\n            for (String expectedParamType : expectedParamTypes) {\n                if (!actualParameters.contains(expectedParamType)) {\n                    allParamsMatch = false;\n                    break;\n                }\n            }\n            if (allParamsMatch) {\n                return constructor;\n            }\n        }\n    }\n    return null;\n  }\n\n  public static boolean hasConstructor(Class<?> clazz, Class<?>... parameterTypes) {\n        try {\n            clazz.getConstructor(parameterTypes);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n  public static Object createInstance(Class<?> clazz, Object... initargs) {\n        try {\n            Class<?>[] parameterTypes = new Class<?>[initargs.length];\n            for (int i = 0; i < initargs.length; i++) {\n                parameterTypes[i] = initargs[i].getClass();\n            }\n            Constructor<?> constructor = clazz.getConstructor(parameterTypes);\n            return constructor.newInstance(initargs);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-01T22:19:09.461+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L3a_2025\\\"\"],\"cloned_from\":\"CSA U2L3-L3a_2025\"}]"
}]]></config>
</Javalab>
