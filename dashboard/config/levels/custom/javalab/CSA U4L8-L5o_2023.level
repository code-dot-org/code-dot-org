<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "## Finding Patterns\r\n\r\nComplete the <a href=\"https://docs.google.com/document/d/1OJIjB4GPp5eqri8qIIceuUGUYl8bzEYXbH3qXIpcg9I/edit?usp=sharing\" target=\"_blank\"><strong>Finding Patterns</strong></a> activity guide to identify the patterns and relationships you notice in this dataset.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "DataRunner.java": {
        "text": "public class DataRunner {\n  public static void main(String[] args) {\n\n    String[] textFiles = {\"name.txt\", \"calories.txt\", \"protein.txt\", \"fat.txt\", \"sodium.txt\", \"fiber.txt\", \"carbs.txt\", \"sugar.txt\", \"cups.txt\"};\n\n    DataManager data = new DataManager(textFiles);\n    \n    System.out.print(data.showDataset());\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 1
      },
      "DataManager.java": {
        "text": "/*\n * Reads and displays data from text files\n */\npublic class DataManager {\n\n  private String[] textFiles;    // The 1D array of text files\n  private Data[] dataset;        // The 1D array of Data objects\n\n  /*\n   * Sets textFiles to the specified text files and initializes\n   * dataset to store Data objects for each text file\n   */\n  public DataManager(String[] textFiles) {\n    this.textFiles = textFiles;\n    dataset = new Data[textFiles.length];\n  }\n\n  /*\n   * Creates the datasets and returns the dataset values\n   */\n  public String showDataset() {\n    createData();\n    return getDatasetValues();\n  }\n\n  /*\n   * Instantiates each Data object in the 1D array dataset\n   * using each text file from the 1D array textfiles\n   */\n  public void createData() {\n    for (int index = 0; index < dataset.length; index++) {\n      dataset[index] = new Data(textFiles[index]);\n    }\n  }\n\n  /*\n   * Returns a String containing the values from each Data object\n   */\n  public String getDatasetValues() {\n    String result = \"\";\n\n    // Gets the length of the first Data object's 1D array of values\n    int valuesLength = dataset[0].getNumValues();\n\n    // Outer loop repeats from the first value to the last value of the first Data object's 1D array of values\n    for (int index = 0; index < valuesLength; index++) {\n\n      // Inner loop goes through each Data object to get the corresponding value from each 1D array of values\n      for (Data values : dataset) {\n        \n        // String.format() formats a String using format specifiers. In \"%-30s\", the \"%\" indicates the start of the format specifier,\n        // the \"-\" means the String is left-justified, \"30\" indicates the width of the field, and \"s\" indicates a String\n        result += String.format(\"%-30s\", values.getValue(index));\n      }\n\n      // Adds a new line character after getting a row of data\n      result += \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Data.java": {
        "text": "/*\n * Manages data from a text file\n */\npublic class Data {\n\n  private String filename;    // The name of a text file\n  private String[] values;    // The 1D array containing the values from a text file\n\n  /*\n   * Sets filename to the specified filename and initializes\n   * values to store the values from the file\n   */\n  public Data(String filename) {\n    this.filename = filename;\n    values = FileReader.toStringArray(filename);\n  }\n\n  /*\n   * Returns the 1D array of values\n   */\n  public String[] getValues() {\n    return values;\n  }\n\n  /*\n   * Returns a value at a specified index from values\n   */\n  public String getValue(int index) {\n    return values[index];\n  }\n\n  /*\n   * Returns the number of elements in values\n   */ \n  public int getNumValues() {\n    return values.length;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "name.txt": {
        "text": "NAME\n------\n100% Bran\nAll-Bran\nAll-Bran with Extra Fiber\nAlmond Delight\nApple Cinnamon Cheerios\nApple Jacks\nBasic 4\nBran Chex\nBran Flakes\nCap'n'Crunch\nCheerios\nCinnamon Toast Crunch\nClusters\nCocoa Puffs\nCorn Chex\nCorn Flakes\nCorn Pops\nCount Chocula\nCracklin' Oat Bran\nCrispix\nCrispy Wheat & Raisins\nDouble Chex\nFroot Loops\nFrosted Flakes\nFrosted Mini-Wheats\nFruit & Fibre\nFruitful Bran\nFruity Pebbles\nGolden Crisp\nGolden Grahams\nGrape Nuts Flakes\nGrape-Nuts\nGreat Grains Pecan\nHoney Graham Ohs\nHoney Nut Cheerios\nHoney-comb\nJust RIght\nJust Right Fruit & Nut\nKix\nLife\nLucky Charms\nMaypo\nMulti-Grain Cheerios\nNut&Honey Crunch\nNutri-grain Wheat\nOatmeal Raisin Crisp\nProduct 19\nPuffed Rice\nPuffed Wheat\nQuaker Oat Squares\nRaisin Bran\nRaisin Nut Bran\nRaisin Squares\nRice Chex\nRice Krispies\nShredded Wheat\nShredded Wheat 'n'Bran\nSmacks\nSpecial K\nStrawberry Fruit Wheats\nTotal Raisin Bran\nTotal Whole Grain\nTriples\nTrix\nWheat Chex\nWheaties\nWheaties Honey Gold",
        "isVisible": true,
        "tabOrder": 4
      },
      "calories.txt": {
        "text": "CALORIES\n------\n70\n70\n50\n110\n110\n110\n130\n90\n90\n120\n110\n120\n110\n110\n110\n100\n110\n110\n110\n110\n100\n100\n110\n110\n100\n120\n120\n110\n100\n110\n100\n110\n120\n120\n110\n110\n110\n140\n110\n100\n110\n100\n100\n120\n90\n130\n100\n50\n50\n100\n120\n100\n90\n110\n110\n80\n90\n110\n110\n90\n140\n100\n110\n110\n100\n100\n110",
        "isVisible": true,
        "tabOrder": 5
      },
      "protein.txt": {
        "text": "PROTEIN\n------\n4\n4\n4\n2\n2\n2\n3\n2\n3\n1\n6\n1\n3\n1\n2\n2\n1\n1\n3\n2\n2\n2\n2\n1\n3\n3\n3\n1\n2\n1\n3\n3\n3\n1\n3\n1\n2\n3\n2\n4\n2\n4\n2\n2\n3\n3\n3\n1\n2\n4\n3\n3\n2\n1\n2\n2\n3\n2\n6\n2\n3\n3\n2\n1\n3\n3\n2",
        "isVisible": true,
        "tabOrder": 6
      },
      "fat.txt": {
        "text": "FAT\n------\n1\n1\n0\n2\n2\n0\n2\n1\n0\n2\n2\n3\n2\n1\n0\n0\n0\n1\n3\n0\n1\n0\n1\n0\n0\n2\n0\n1\n0\n1\n1\n0\n3\n2\n1\n0\n1\n1\n1\n2\n1\n1\n1\n1\n0\n2\n0\n0\n0\n1\n1\n2\n0\n0\n0\n0\n0\n1\n0\n0\n1\n1\n1\n1\n1\n1\n1",
        "isVisible": true,
        "tabOrder": 7
      },
      "sodium.txt": {
        "text": "SODIUM\n------\n130\n260\n140\n200\n180\n125\n210\n200\n210\n220\n290\n210\n140\n180\n280\n290\n90\n180\n140\n220\n140\n190\n125\n200\n0\n160\n240\n135\n45\n280\n140\n170\n75\n220\n250\n180\n170\n170\n260\n150\n180\n0\n220\n190\n170\n170\n320\n0\n0\n135\n210\n140\n0\n240\n290\n0\n0\n70\n230\n15\n190\n200\n250\n140\n230\n200\n200",
        "isVisible": true,
        "tabOrder": 8
      },
      "fiber.txt": {
        "text": "FIBER\n------\n10\n9\n14\n1\n1.5\n1\n2\n4\n5\n0\n2\n0\n2\n0\n0\n1\n1\n0\n4\n1\n2\n1\n1\n1\n3\n5\n5\n0\n0\n0\n3\n3\n3\n1\n1.5\n0\n1\n2\n0\n2\n0\n0\n2\n0\n3\n1.5\n1\n0\n1\n2\n5\n2.5\n2\n0\n0\n3\n4\n1\n1\n3\n4\n3\n0\n0\n3\n3\n1",
        "isVisible": true,
        "tabOrder": 9
      },
      "carbs.txt": {
        "text": "CARBS\n------\n5\n7\n8\n14\n10.5\n11\n18\n15\n13\n12\n17\n13\n13\n12\n22\n21\n13\n12\n10\n21\n11\n18\n11\n14\n14\n12\n14\n13\n11\n15\n15\n17\n13\n12\n11.5\n14\n17\n20\n21\n12\n12\n16\n15\n15\n18\n13.5\n20\n13\n10\n14\n14\n10.5\n15\n23\n22\n16\n19\n9\n16\n15\n15\n16\n21\n13\n17\n17\n16",
        "isVisible": true,
        "tabOrder": 10
      },
      "sugar.txt": {
        "text": "SUGAR\n------\n6\n5\n0\n8\n10\n14\n8\n6\n5\n12\n1\n9\n7\n13\n3\n2\n12\n13\n7\n3\n10\n5\n13\n11\n7\n10\n12\n12\n15\n9\n5\n3\n4\n11\n10\n11\n6\n9\n3\n6\n12\n3\n6\n9\n2\n10\n3\n0\n0\n6\n12\n8\n6\n2\n3\n0\n0\n15\n3\n5\n14\n3\n3\n12\n3\n3\n8",
        "isVisible": true,
        "tabOrder": 11
      },
      "cups.txt": {
        "text": "CUPS PER SERVING\n------\n0.33\n0.33\n0.5\n0.75\n0.75\n1\n0.75\n0.67\n0.67\n0.75\n1.25\n0.75\n0.5\n1\n1\n1\n1\n1\n0.5\n1\n0.75\n0.75\n1\n0.75\n0.8\n0.67\n0.67\n0.75\n0.88\n0.75\n0.88\n0.25\n0.33\n1\n0.75\n1.33\n1\n0.75\n1.5\n0.67\n1\n1\n1\n0.67\n1\n0.5\n1\n1\n1\n0.5\n0.75\n0.5\n0.5\n1.13\n1\n1\n0.67\n0.75\n1\n1\n1\n1\n0.75\n1\n0.67\n1\n0.75",
        "isVisible": true,
        "tabOrder": 12
      }
    },
    "display_name": "Cereal Nutrition",
    "bubble_choice_description": "Dataset containing cereal nutrition facts of the top selling cereals.",
    "thumbnail_url": "https://images.code.org/bf5732eb11a4eec8b833fd170666dcc4-cereals.png"
  },
  "game_id": 68,
  "created_at": "2023-02-17T19:15:06.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-02-17T19:15:06.948+00:00\",\"changed\":[\"cloned from \\\"CSA U4L8-L5n_2023\\\"\"],\"cloned_from\":\"CSA U4L8-L5n_2023\"},{\"changed_at\":\"2023-02-17 19:15:08 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 13:49:44 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 14:38:58 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 15:44:57 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 16:27:31 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 16:28:18 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
