<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-17T00:13:45.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A library has recorded the number of times different books have been borrowed in a 2D array, where each row represents a book genre and each column represents a specific book.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Library</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getMostBorrowed()</code> method using enhanced <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loops to find and return the most number of times a book has been borrowed.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">LibraryRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getMostBorrowed()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with traversing a two-dimensional (2D) array using an enhanced <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loop.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_enhanced_for_loops_and_2d_arrays",
    "reference_links": [
      "/courses/csa-2023/guides/two-dimensional-arrays"
    ],
    "display_name": "Library Book Popularity",
    "bubble_choice_description": "Find the most borrowed book across all genres.",
    "thumbnail_url": "https://images.code.org/4b890e5b7019a0eb6970f75f6216bc55-bc08fc9cbd7833154763208460ade3a9-books.png",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "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\n",
    "start_sources": {
      "LibraryRunner.java": {
        "text": "public class LibraryRunner {\n  public static void main(String[] args) {\n\n    // Creates a 2D array containing the number of times books have been borred\n    int[][] bookBorrowCount = { {3, 5, 2}, {1, 4, 6}, {2, 5, 3} };\n\n    // Creates a Library object\n    Library library = new Library(bookBorrowCount);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the getMostBorrowed() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Library.java": {
        "text": "/*\n * Represents a library\n */\npublic class Library {\n\n  private int[][] bookCount;      // The 2D array containing the number of times books have been borrowed\n\n  /*\n   * Initializes bookCount to the specified 2D array containing\n   * the number of times books have been borrowed\n   */\n  public Library(int[][] bookCount) {\n    this.bookCount = bookCount;\n  }\n\n  /*\n   * Returns the 2D array bookCount\n   */\n  public int[][] getBookCount() {\n    return bookCount;\n  }\n\n  /*\n   * Returns the most number of times a book has been borrowed\n   */\n  public int getMostBorrowed() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Find and return the value in the 2D array bookCount that is the highest.\n     * -----------------------------------------------------------------------------\n     */\n    \n    \n    \n    return -1;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "name_suffix": "_2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-17T00:13:45.525+00:00\",\"changed\":[\"cloned from \\\"CSA U5L5-L6a_2023\\\"\"],\"cloned_from\":\"CSA U5L5-L6a_2023\"}]"
}]]></config>
</Javalab>
