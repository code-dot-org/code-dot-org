<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T22:55:27.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A Gaussian blur is a type of image blur that applies a weighted average to the neighboring pixels of each pixel in the image. The result is a blurred version of the original image that reduces noise and smooths out fine details.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">BlurImage</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">applyBlur()</code> method to apply a Gaussian blur filter to each <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> object. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">applyBlur()</code> method should:\r\n\r\n1. Traverse the 2D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> objects.\r\n\r\n2. Find the average of the red, green, and blue color values of the current Pixel object and its top-left neighboring <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> object using a weighted average.\r\n\r\n3. Set the current <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> object to the result.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner</code> class,\r\n\r\n1. Instantiate an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">BlurImage</code> object with an image in the Asset Manager, then draw the image in the scene without any filters. You can also upload and use your own image.\r\n\r\n2. Add a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">pause()</code> after drawing the image.\r\n\r\n3. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">applyBlur()</code> method on your image, then draw the image with the filter in the scene.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with getting and setting color values for a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> object.\r\n</div>\r\n\r\n## üéØ Goal\r\n\r\n![](https://images.code.org/dc9a07562e97744be40fabd29adffb5a-image-1682903182244.gif)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Gaussian Blur",
    "bubble_choice_description": "A Gaussian blur is a type of image blur that applies a weighted average to the neighboring pixels of each pixel in the image. The result is a blurred version of the original image that reduces noise and smooths out fine details.",
    "starter_assets": {
      "track.jpg": "d14dbd63-0c09-4a07-bc11-5619dceea1f0.jpg",
      "starwars.jpg": "402bf3ed-e1b9-43e6-b47f-b9ee4f52e656.jpg",
      "speakers.jpg": "d30dd3d3-272b-427a-90c2-1f0941c69d9e.jpg",
      "soccer.jpg": "9789dcd3-f18e-41be-bde0-15bac35201ad.jpg",
      "paintbrushes.jpg": "5a4020b7-73cf-482b-8681-7bf04776cd0b.jpg",
      "nature.jpg": "9edaa647-8a18-49c4-aa8d-d9974002672a.jpg",
      "motivation.jpg": "032607c4-62b9-499d-aa0c-7bc991934dd2.jpg",
      "laptop.jpg": "762f668a-41ff-4790-b5a0-9b5d3a92fa2d.jpg",
      "guitar.jpg": "a6b1e24c-c82d-4787-b2d3-f114008eb385.jpg",
      "games.jpg": "5e216001-1c20-474f-a08e-b62307f75322.jpg",
      "football.jpg": "241ec775-abf4-444c-a19f-b58eacd7b2b0.jpg",
      "fashion.jpg": "cdffdf58-ae3c-4c86-869e-cae1ea4b1474.jpg",
      "electricguitars.jpg": "8f9cbb67-e72d-4f3d-b2e2-4c62491c09b4.jpg",
      "donut.jpg": "a7de1929-0093-4606-8d79-6478e8f060d5.jpg",
      "dog.jpg": "4d4af9b6-27cf-4be9-ac72-cd02c02718dc.jpg",
      "cellphone.jpg": "6ddb8bdd-d47f-4613-ae22-f8cc23860ebc.jpg",
      "basketball.jpg": "5e0533a5-2f65-4d29-b6fa-5d1d3fb9276c.jpg",
      "baseball.jpg": "71fffd83-01bb-4756-a006-7ff6211a6de0.jpg",
      "astronaut.jpg": "11305fd3-0093-42b8-b89b-c3d246947faf.jpg"
    },
    "encrypted_validation": "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\niUPgHjWr4M57lA==\n",
    "encrypted_exemplar_sources": "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\nf4xRic84NCN1y4cDLCRrP18qfuPutYWztMF+\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a Scene object\n    Scene images = new Scene();\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a BlurImage object, then draw the image in the scene with no\n     * filter. Then call the applyBlur() method, and draw the image in the scene\n     * again with the filter.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n\n    // Plays the scene\n    Theater.playScenes(images);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ImagePlus.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Represents an image that can be modified with filters and effects\n */\npublic class ImagePlus extends Image {\n\n  private Pixel[][] pixels;    // The 2D array of pixels\n\n  /*\n   * Sets the superclass filename to the specified filename\n   * and calls the getPixelsFromImage() method to initialize\n   * the 2D array of Pixel objects that make up the image\n   */\n  public ImagePlus(String filename) {\n    super(filename);   // Calls the Image class constructor\n\n    // Initialize the pixels array by getting the pixels from the image\n    pixels = getPixelsFromImage();\n  }\n\n  /*\n   * Returns the 2D array of pixels\n   */\n  public Pixel[][] getImagePixels() {\n    return pixels;\n  }\n\n  /*\n   * Returns the pixels in the image as a 2D array of Pixel objects\n   */\n  public Pixel[][] getPixelsFromImage() {\n    Pixel[][] tempPixels = new Pixel[getHeight()][getWidth()];\n    \n    for (int row = 0; row < tempPixels.length; row++) {\n      for (int col = 0; col < tempPixels[0].length; col++) {\n        tempPixels[row][col] = getPixel(col, row);\n      }\n    }\n\n    return tempPixels;\n  }\n\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "BlurImage.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Represents a blurred image\n */\npublic class BlurImage extends ImagePlus {\n\n  /*\n   * Calls the superclass constructor to initialize pixels\n   */\n  public BlurImage(String filename) {\n    super(filename);\n  }\n\n  /*\n   * Applies a Gaussian blur by finding the average of the red,\n   * green, and blue color values of the current Pixel object and\n   * its top-left neighboring Pixel object using a weighted average\n   */\n  public void applyBlur() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Get the pixels from the image, then traverse the 2D array of pixels. Use\n     * the provided calcWeightedRed(), calcWeightedGreen(), and calcWeightedBlue()\n     * methods to get the weighted averages and set each Pixel color to the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n  }\n\n  /*\n   * Returns a weighted red average of the pixels around the specified row and col\n   */\n  public int calcWeightedRed(Pixel[][] pixels, int row, int col) {\n    int avgRed = (pixels[row-1][col-1].getRed() + pixels[row-1][col].getRed() + pixels[row-1][col+1].getRed() +\n                  pixels[row][col-1].getRed() + pixels[row][col].getRed() + pixels[row][col+1].getRed() +\n                  pixels[row+1][col-1].getRed() + pixels[row+1][col].getRed() + pixels[row+1][col+1].getRed()) / 9;\n    return avgRed;\n  }\n\n  /*\n   * Returns a weighted green average of the pixels around the specified row and col \n   */\n  public int calcWeightedGreen(Pixel[][] pixels, int row, int col) {\n    int avgGreen = (pixels[row-1][col-1].getGreen() + pixels[row-1][col].getGreen() + pixels[row-1][col+1].getGreen() +\n                    pixels[row][col-1].getGreen() + pixels[row][col].getGreen() + pixels[row][col+1].getGreen() +\n                    pixels[row+1][col-1].getGreen() + pixels[row+1][col].getGreen() + pixels[row+1][col+1].getGreen()) / 9;\n    return avgGreen;\n  }\n\n  /*\n   * Returns a weighted blue average of the pixels around the specified row and col\n   */\n  public int calcWeightedBlue(Pixel[][] pixels, int row, int col) {\n    int avgBlue = (pixels[row-1][col-1].getBlue() + pixels[row-1][col].getBlue() + pixels[row-1][col+1].getBlue() +\n                   pixels[row][col-1].getBlue() + pixels[row][col].getBlue() + pixels[row][col+1].getBlue() +\n                   pixels[row+1][col-1].getBlue() + pixels[row+1][col].getBlue() + pixels[row+1][col+1].getBlue()) / 9;\n    return avgBlue;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "thumbnail_url": "https://images.code.org/2bf9dc76b27545ce454cb5c436c6989e-optionA.gif",
    "name_suffix": "_alt-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T22:55:27.720+00:00\",\"changed\":[\"cloned from \\\"CSA U5L8-L4a_pilot-2025\\\"\"],\"cloned_from\":\"CSA U5L8-L4a_pilot-2025\"}]"
}]]></config>
</Javalab>
