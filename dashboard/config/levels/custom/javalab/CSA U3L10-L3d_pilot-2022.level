<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-08-23T20:25:44.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "project_template_level_name": "CSA U3L10-L3d PBT_pilot-2022",
    "long_instructions": "##In Netflix.java:\r\n\r\n1. Write the `hasDuplicates()`(#e7e8ea) method to return `true`(#e7e8ea) if there are duplicate elements in the `subscriptionFees`(#e7e8ea) array.\r\n\r\n##In MyConsole.java:\r\n\r\n2. Print the result of a call to the `hasDuplicates()`(#e7e8ea) method on the `myNetflixStats`(#e7e8ea) object to check the array for duplicates.\r\n\r\n***Curious about this dataset?*** *Learn more about it [**here**](https://www.kaggle.com/datasets/prasertk/netflix-subscription-price-in-different-countries)!*\r\n\r\n![](https://images.code.org/8c652e05a2465e540f056182394085a0-image-1648761592999.png)",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "submittable": "false",
    "csa_view_mode": "console",
    "display_name": "Netflix",
    "bubble_choice_description": "Find out if there are duplicate subscription fee prices for a list of countries.",
    "thumbnail_url": "https://images.code.org/5d5bc5796da6a2b3fda502b30994a6be-image-1648760433180.png",
    "encrypted_exemplar_sources": "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\nvElQOigHnFUfz9tVhFsTS3c=\n",
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "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\nkaookNFGPZJv+BoNP4EcdUCbSIPf7HA4ZVM=\n",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"countries.txt\");\n    String[] countries = myFileReader.getStringData(65);\n\n    myFileReader.setFile(\"fees.txt\");\n    double[] fees = myFileReader.getDoubleData(65);\n\n    Netflix myNetflixStats = new Netflix(countries, fees);\n\n    // TO DO #2: Print the result of a call to hasDuplicates().\n\n\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "countries.txt": {
        "text": "Argentina\nAustralia\nAustria\nBelgium\nBolivia\nBrazil\nBulgaria\nCanada\nChile\nColombia\nCosta Rica\nCroatia\nCzechia\nDenmark\nEcuador\nEstonia\nFinland\nFrance\nGermany\nGibraltar\nGreece\nGuatemala\nHonduras\nHong Kong\nHungary\nIceland\nIndia\nIndonesia\nIreland\nIsrael\nItaly\nJapan\nLatvia\nLiechtenstein\nLithuania\nMalaysia\nMexico\nMoldova\nMonaco\nNetherlands\nNew Zealand\nNorway\nParaguay\nPeru\nPhilippines\nPoland\nPortugal\nRomania\nRussia\nSan Marino\nSingapore\nSlovakia\nSouth Africa\nSouth Korea\nSpain\nSweden\nSwitzerland\nTaiwan\nThailand\nTurkey\nUkraine\nUnited Kingdom\nUnited States\nUruguay\nVenezuela",
        "isVisible": true
      },
      "fees.txt": {
        "text": "6.3\n12.12\n14.67\n15.24\n10.99\n7.11\n11.29\n11.87\n9.91\n6.86\n12.99\n11.29\n11.49\n15.04\n10.99\n11.29\n13.54\n15.24\n14.67\n14.67\n12.42\n10.99\n10.99\n10\n10.71\n14.67\n6.61\n10.66\n14.67\n15.05\n14.67\n13.13\n11.29\n20.46\n11.29\n10.65\n10.43\n11.29\n13.54\n13.54\n12.53\n12.17\n11.49\n8.56\n9.14\n10.58\n13.54\n11.29\n10.84\n14.67\n12.81\n11.29\n10.05\n11.47\n14.67\n14.2\n20.46\n11.9\n10.43\n3\n8.46\n13.2\n13.99\n12.99\n10.99",
        "isVisible": true
      },
      "Netflix.java": {
        "text": "/*\n * Analyzes data about Netflix subscription fees in different countries\n */\npublic class Netflix {\n\n  private String[] countries;\n  private double[] subscriptionFees;\n\n  /*\n   * Constructor to create an Netflix object with the\n   * specified arrays of countries and their subscription fees\n   */\n  public Netflix(String[] countries, double[] subscriptionFees) {\n    this.countries = countries;\n    this.subscriptionFees = subscriptionFees;\n  }\n\n  /*\n   * Returns true if there are duplicate years in\n   * the subscriptionFees array, otherwise returns false\n   */\n  public boolean hasDuplicates() {\n    // TO DO #1: Traverse the subscriptionFees array to determine if there\n    // are duplicate values and return the result.\n\n\n    return false;\n  }\n  \n}",
        "isVisible": true
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:25:44.774+00:00\",\"changed\":[\"cloned from \\\"CSA U3L10-L3d_2022\\\"\"],\"cloned_from\":\"CSA U3L10-L3d_2022\"},{\"changed_at\":\"2022-09-09 19:53:35 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 19:56:04 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 19:59:21 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 19:59:24 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
