<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T16:56:05.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A researcher is analyzing real estate trends in Connecticut to compare the number of homes that were sold that were single family, two family, three family, four family, or condo homes.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">RealEstate.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getHomesByType()</code> method to traverse the 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Home</code> objects and return the number of homes that were sold of the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">type</code> where the length of the name of the town is greater than <code style=\"background-color: #ececec; color: black; font-weight: bold;\">4</code>.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawResult()</code> method with the 1D array returned from calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getHomesByType()</code> method.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing nested <code style=\"background-color: #ececec; color: black; font-weight: bold;\">if</code> statements.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Real Estate Trends",
    "bubble_choice_description": "A researcher is analyzing real estate trends in Connecticut to compare the number of homes that were sold that were single family, two family, three family, four family, or condo homes.",
    "thumbnail_url": "https://images.code.org/e46468728fdc2889380b5fba673615dd-house.png",
    "starter_assets": {
      "house.png": "34582f77-2d3a-4245-9be9-c17112888937.png"
    },
    "encrypted_validation": "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\nGnXC796Qt+RCjwPscB5wO8Vpf9AOcw==\n",
    "encrypted_exemplar_sources": "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\nk1n+BDUEwSWSEVL1MEduoq+PC2Z+wqXCwYT0P1B8NTFz8dAj1BwBwJ5k1VqP\nkzz9qEajk+RqkWG/ySbEB3xRD98V7yVTYlZSeRDwBjjk6aAgA4EPJPQiJTGv\nP9jsFW8qtYysTuEmpbf0YNgqBOYGQ7eKMXpJ0gg9Ez8elpkNC8uW3INV0kzF\nmuRaqQ8Cp31FN5MLZJw9DM10uSrWAKBXR6BvjVYiDdektByS0YdRfWSnJWCK\nLDTU2kT3FdM4WxZ6zaRZC2PXnxv6PGMDSdnFivQ0yr2cvUOtpk13lIan3eo3\nHgi8naq7PebNFoIpggJXTV4AG1etR1JiqCEYAiZ5H0OfGNDPYf71PAHxfQhl\nv1Y5qSQH2V75f6DejxPVY8Jn2ZTnbav+PsTqElLqxBTyFZ9X1CKFND2kEwgr\nLhSK6XfDHj+tJzfdrRckmN9k2l9q/0SLWltl2rdaooU02RMCvzsGngw+d+Dn\nhDzwJ6Medr5HPnh6gTvGWYhtjdZi2Tso1iNLz4u7JtNoC+YJTgn+Ntth90fN\nWIr2P2k4qkMV2WmehNCYJg5B3aJqog118TppjTiZDagGNTqSPwQeVpIP1LWO\nUsvJWaeUkknRo3busBae+4zuN9MGaaW8b+8DF3Mla0QxYdm8QtCWsW8vuA3N\n85YnyyqY8Dh9QsnlzcQWKk2VmEUYaithqvLNFUCFIdy7ibJBkR/w76xkcO6w\nHxCHk3nQqZayEJSEzHMubRemxSo88VN7+KdJwUhhMHWTewOu2SQ4bOvYioVy\n0GGxyNysZQNG/QQH6akxgOlR5GfT5TbtEhfiNKxaOinw59YG9SRqj2ve4a2k\nn//ugGwtAfiB6jlT7C94hsswxLzWBnpGeWQWGnN4jutWbRvoxjtjt1SJ19T/\nrEk8jESHHSxG7+so5+pmqdYYUVq4BYYgtjzTsnA8ZtEQHtVwbZP1lOnHEWrZ\n1TiPEHiV9jl7WyH8N7v4n0hRoBziN5+2MYtYyZSLtnDY49tDOjKR1NR4EyOV\nD8ueSRv+5J1nRamHFti91RXHidb4srxznWABjKu+l6uTSe6VA4hYdiVakvlL\nvLs3Mz0bBmAUwZSHIu1K4KwwkjQK5s7tgmNbLsCB0XwUKLeWn5xaTLyME0cR\n8timWBL7L6MpBJLYyDM24KATUjP9mEtqVIHYJGHBjVu5VNeQ9TeC162LfzRe\n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\nqBriLoBqua8s9w==\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Reads the data from the text files into a 1D array of Home objects\n    Home[] homes = Home.createHomes(\"towns.txt\", \"types.txt\", \"prices.txt\");\n\n    // Creates a RealEstate object\n    RealEstate scene = new RealEstate(homes);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the getHomesByType() method then pass the result to a call to the\n     * drawResult() method.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "RealEstate.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Creates a visualization for real estate data\n */\npublic class RealEstate extends Scene {\n\n  private Home[] sales;     // The 1D array of Home objects\n\n  /*\n   * Initializes sales to the 1D array of Home objects\n   */\n  public RealEstate(Home[] sales) {\n    this.sales = sales;\n  }\n\n  /*\n   * Returns the 1D array of Home objects\n   */\n  public Home[] getSales() {\n    return sales;\n  }\n\n  /*\n   * Returns the number of homes sold of the parameter type where\n   * the length of the name of the town is greater than 4\n   */\n  public int getHomesByType(String type) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Count and return the number of homes sold of the parameter type where\n     * the length of the name of the town is greater than 4.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return -1;\n  }\n\n  /*\n   * Draws the result in the scene\n   */\n  public void drawResult(String type, int count) {\n    int numHomes = count;\n    while (numHomes > 0) {\n      int randomX = (int)(Math.random() * getWidth());\n      int randomY = (int)(Math.random() * getHeight());\n      drawImage(\"house.png\", randomX, randomY, 100);\n      pause(0.1);\n      numHomes--;\n    }\n\n    pause(0.5);\n    drawText(\"There were \" + count + \" homes\", 50, 100);\n    drawText(\"sold of type \" + type, 50, 125);\n    drawText(\"where the length of the town's name\", 50, 150);\n    drawText(\"is greater than 4.\", 50, 175);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Home.java": {
        "text": "/*\n * Represents a home sold\n */\npublic class Home {\n\n  private String town;     // The name of the town a home is in\n  private String type;     // The type of a home\n  private int price;       // The sale amount a home was sold at\n\n  /*\n   * Sets town, type, and price to the specified values\n   */\n  public Home(String town, String type, int price) {\n    this.town = town;\n    this.type = type;\n    this.price = price;\n  }\n\n  /*\n   * Returns the name of the town\n   */\n  public String getTown() {\n    return town;\n  }\n\n  /*\n   * Returns the type of the home\n   */\n  public String getType() {\n    return type;\n  }\n\n  /*\n   * Returns sale amount of the home\n   */\n  public int getPrice() {\n    return price;\n  }\n\n  /*\n   * Returns a 1D array of Home objects using the data in the specified files\n   */\n  public static Home[] createHomes(String townsFile, String typesFile, String pricesFile) {\n    String[] townsData = FileReader.toStringArray(townsFile);\n    String[] typesData = FileReader.toStringArray(typesFile);\n    int[] pricesData = FileReader.toIntArray(pricesFile);\n    Home[] homesData = new Home[townsData.length];\n\n    for (int index = 0; index < homesData.length; index++) {\n      homesData[index] = new Home(townsData[index], typesData[index], pricesData[index]);\n    }\n\n    return homesData;\n  }\n\n  /*\n   * Returns a String containing information about the home\n   */\n  public String toString() {\n    return town + \" - \" + type + \" ($\" + price + \")\";\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      },
      "towns.txt": {
        "text": "Greenwich\nGreenwich\nGreenwich\nBeacon Falls\nGreenwich\nGreenwich\nGreenwich\nAvon\nGreenwich\nGreenwich\nGreenwich\nBranford\nGreenwich\nDarien\nGreenwich\nGreenwich\nGreenwich\nGreenwich\nGreenwich\nGreenwich\nDarien\nWestport\nStamford\nGreenwich\nGreenwich\nGreenwich\nGreenwich\nGreenwich\nGreenwich\nWestport\nFairfield\nGreenwich\nGreenwich\nGreenwich\nGreenwich\nGreenwich\nGreenwich\nEast Hartford\nGreenwich\nGreenwich\nGreenwich\nBrookfield\nWestport\nHartford\nGreenwich\nGreenwich\nGreenwich\nStamford\nFairfield\nGreenwich",
        "isVisible": true,
        "tabOrder": 4
      },
      "types.txt": {
        "text": "Single Family\nSingle Family\nSingle Family\nCondo\nSingle Family\nSingle Family\nSingle Family\nCondo\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nTwo Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nSingle Family\nCondo\nSingle Family\nCondo\nSingle Family\nSingle Family\nSingle Family\nCondo\nSingle Family\nSingle Family",
        "isVisible": true,
        "tabOrder": 5
      },
      "prices.txt": {
        "text": "48000000\n45000000\n42175000\n27927556\n26000000\n25000000\n24000000\n22250000\n22000000\n21750000\n21750000\n21500000\n21000000\n20500000\n20377000\n20000000\n19907000\n19250000\n19000000\n18600000\n18000000\n18000000\n17900000\n17500000\n17300000\n17100000\n17000000\n17000000\n17000000\n16000000\n16000000\n16000000\n15850000\n15088000\n15000000\n14900000\n14875000\n14820000\n14685000\n14500000\n14500000\n14500000\n14400000\n14325000\n14100000\n14000000\n14000000\n13978066\n13900000\n13666125",
        "isVisible": true,
        "tabOrder": 6
      }
    },
    "name_suffix": "_pilot-2024",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T16:56:05.523+00:00\",\"changed\":[\"cloned from \\\"CSA U4L7-L5b_2025\\\"\"],\"cloned_from\":\"CSA U4L7-L5b_2025\"}]"
}]]></config>
</Javalab>
