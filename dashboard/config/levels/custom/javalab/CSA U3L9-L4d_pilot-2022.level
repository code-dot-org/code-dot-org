<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "project_template_level_name": "CSA U3L9-L4d PBT_pilot-2022",
    "long_instructions": "##In Cats.java:\r\n\r\n1. Write the `reverse()`(#e7e8ea) method to reverse the elements in the `catBreeds`(#e7e8ea) array.\r\n\r\n##In MyConsole.java:\r\n\r\n2. Call the `reverse()`(#e7e8ea) method on the `myCats`(#e7e8ea) object to reverse the array.\r\n\r\n3. Call the `printCatBreeds()`(#e7e8ea) method on the `myCats`(#e7e8ea) object to print the updated array.\r\n\r\n***Curious about this dataset?*** *Learn more about it [**here**](https://thecatapi.com)!*",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "submittable": "false",
    "csa_view_mode": "console",
    "display_name": "Cat Breeds",
    "bubble_choice_description": "Reverse the array of cat breeds to display them in A-Z order.",
    "thumbnail_url": "https://images.code.org/7af862142f7265abfd076aef58b2723d-image-1648753568196.png",
    "encrypted_exemplar_sources": "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\nco0gIx5AraTuy5rcass=\n",
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "CFnif/Ei2MgO/TPUdQzOdr18FGVnzO520+IGgEnBjNIW1oiGfbwjqUj0kQCT\nyIWIf7wCtHos+iDcfo9VyUWcFi1LRon3qFrOzPgWBosqbrnz/4UHbl3JxuSh\njKlR1K2AWJrdr0KBIM+adyBX3rOekRDse84DB16dphR0oZ8L/G/xGRvWGxT/\nGUpbPTyBXJVi/dtzTva73IM8pWakfcddzhqxgKv+OlW6Ff93WVz+9MXrQROo\n04lqaflsPUN8QA0LYT55i1SdEC1Vea2ook1SkgqmQml0DCAo3p2hsQzZa+p/\nNGEYzRD1y80/ek2T/+YxtiWd7oR7k7PKOzPPgd2Z8PbAl/01pJYuOB+2+ZDA\nvo4EaGxIoURUxBkix6bV9bQ74Nqz3S6zuY+7K1CNfD7ZpFSBU6fW+46MyEW9\nOOuxgLxPmqd2uDoAa3SPpOZsIgZeifZ9bNO9cJNejIPTzstDuspzOO3KtScd\nqulSYWeSaYqVq2nUiQe3HIC5wBrPye2AJF0crBzE7lzNmpOAvGxWdFF8Fol0\nXJhob5TLin9C11DxjkvLNiyAw9ikqC0IcGZ1TTLSxCWTNOBJ0EeR2sLdOZnj\n5TJvDx8ot6o3DVCFOdL0HRvJY1HIODg9VrXIH6rgR/w02797LgfiVLkp1sjl\nLNiemSnTJXFKtW5hm3/MEwnBKGWLfrRKpoqae6WZxSPxDhwQFJLkF5KotqkE\n5umDVNF7c0SnUYhtJpFLwqZva4Ocu9zSjQh1z2AjtzdhrtqF1eq3SftwLhH+\nk1MWTz7CWDm/SeJGW3Z5hXacT1dwZhXKQydmQccO/1SHv8eyLm/xk0MAiv/G\nxE4ud0mLJ/7Si2Hg/Wu2WyX0+/euyWhUv01LJkkyY3l1CCNqCCTjNbtYLKYt\n0Fy/6lMHlFCfUGuy5rr9W5+RbO5QWfyZm5IMY7ck9j/LCmc0T8c+w3dJtv+U\nqSDBvjoWZZP8MdPWknT0CQOm5R6apBTL2vom4LWdjaY0PfutGcPcjQENf/Pw\nLlbis8mJCYPIA1BBn/L5D+kLSeEqyc+QlFm2PrfoomjYOhEjXYMN0s3e1Lxr\nVpO4AoRwh53EkCg/hH35aDhTZqBV0qaQ46ZvIbbGde4FoFKmZd4Gbv1LL9QO\nQto8QUQCrHC4Jiehf9hIqGdwEDEd5lZVBbA9iWq2dxF0cjbPDUMniDTV9P+p\ngLEJDDJ5GS8qVnn8Q50x6qqrz4eJ/08hACPRKjuTN7uuWFfQVI6tDLl/NL+z\nJc8r4DzaHCCvJUR1clq9LZtKkQexeVOs7j9JZkQU9tpakGrpCpTIzdIOL3yc\n6A5+aiOunc45hf3fXmq9XnDCdsDyOaWDhu6CCvLNBn3PSh+CuXhWZk210O2D\nS4a9ILMrHAplbqVs/+h6qPcP3EALAsn5BkQ7IFjft/k4upDfTonu1Z06pKTi\nqsVnb8mIcbjdzzyPuN8PSg/i+kMgnRgqDqAISvwfL0vSOxcjyFnSpiOznfn1\n5ezVaYo0iI9st+nDob6VMm7a2aFg7boDpMgvog2DcV40OtZRoog6Q1iyDFXx\nmR0vtO2aZE70bcY2Ari9AvdpLUk4Q0IgzcqgXEgMjmUqt/A/9+dXn9y3dO6j\n0KAyCOQGsd+JXq2n/b11CN0Bin3OHjzekYU0FCWtVJXhn/U8qVuLFumSoc8Q\ngl8HDEwDuRFutXAdolITL/FCS5IKoCVatWtew/HMHzqWTmgN6piUvcQ3CoJB\nrpH+7AZtisFUhj86VuFaLZb/wMvVK0IMZEIouNQIVwPuJsN+8qWnab/GWZw0\nf1PDjwjsI3gI7E15KyUlL8W31HmX+ZV63DPfrsHzED5RU8S0gcygik4FmxpV\nycYpM6Q4vHN9YKtbEj3RYVq6w09endfLXeuPaaU=\n",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"catbreeds.txt\");\n    String[] breeds = myFileReader.getStringData(67);\n\n    Cats myCats = new Cats(breeds);\n    \n    myCats.printCatBreeds();\n\n    // TO DO #2: Call the reverse() method to reverse the array.\n\n\n    // TO DO #3: Call the printCatBreeds() method to print the array.\n    \n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "Cats.java": {
        "text": "/*\n * Processes cat breeds in a String array\n */\npublic class Cats {\n\n  private String[] catBreeds;   // The 1D array of cat breeds\n\n  /*\n   * Constructor to create a Cats object with\n   * a specified list of cat breeds\n   */\n  public Cats(String[] catBreeds) {\n    this.catBreeds = catBreeds;\n  }\n\n  /*\n   * Returns the array catBreeds\n   */\n  public String[] getCatBreeds() {\n    return catBreeds;\n  }\n\n  /*\n   * Prints the names of the parks in the catBreeds array\n   */\n  public void printCatBreeds() {\n    for (String cat : catBreeds) {\n      System.out.println(cat);\n    }\n  }\n\n  /*\n   * Reverses the catBreeds array\n   */\n  public void reverse() {\n    // TO DO #1: Reverse the elements in the catBreeds array.\n\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "catbreeds.txt": {
        "text": "York Chocolate\nTurkish Van\nTurkish Angora\nToyger\nTonkinese\nSphynx\nSomali\nSnowshoe\nSingapura\nSiberian\nSiamese\nSelkirk Rex\nScottish Fold\nSavannah\nRussian Blue\nRagdoll\nRagamuffin\nPixie-bob\nPersian\nOriental\nOcicat\nNorwegian Forest Cat\nNebelung\nMunchkin\nManx\nMalayan\nMaine Coon\nLaPerm\nKurilian\nKorat\nKhao Manee\nJavanese\nJapanese Bobtail\nHimalayan\nHavana Brown\nExotic Shorthair\nEuropean Burmese\nEgyptian Mau\nDragon Li\nDonskoy\nDevon Rex\nCyprus\nCymric\nCornish Rex\nColorpoint Shorthair\nCheetoh\nChausie\nChartreux\nChantilly-Tiffany\nCalifornia Spangled\nBurmilla\nBurmese\nBritish Shorthair\nBritish Longhair\nBombay\nBirman\nBengal\nBambino\nBalinese\nAustralian Mist\nArabian Mau\nAmerican Wirehair\nAmerican Shorthair\nAmerican Curl\nAmerican Bobtail\nAegean\nAbyssinian",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-08-23T20:25:38.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:25:38.573+00:00\",\"changed\":[\"cloned from \\\"CSA U3L9-L4d_2022\\\"\"],\"cloned_from\":\"CSA U3L9-L4d_2022\"},{\"changed_at\":\"2022-09-09 00:55:09 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 00:56:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 00:56:55 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
