<Javalab>
  <config><![CDATA[{
  "published": true,
  "game_id": 68,
  "created_at": "2023-09-30T14:38:18.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A hairstylist wants to keep track of the products they use to style their clients' hair.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">HairProduct</code> class to assign specific values to the instance variables using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">this</code> keyword.\r\n\r\n‚úÖ **TO DO #2:** Write a no-argument constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">HairProduct</code> class to assign default values to the instance variables using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">this</code> keyword.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">StylistRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">HairProduct</code> objects using each constructor.\r\n\r\n‚úÖ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">HairProduct</code> objects.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing parameterized constructors, using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">this</code> keyword, and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n      \r\n      <p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n\t  <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getType()</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getPrice()</code>, and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getIsCurly()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">HairProduct</code> class to get the current values assigned to the instance variables. For example:\r\n      </p>\r\n      \r\n              <pre style=\"background-color: #333333; color: white;\">\r\nHairProduct hairGel = new HairProduct();\r\nSystem.out.println(\"Type: \" + hairGel.getType());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-this-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Hair Products",
    "bubble_choice_description": "A hair stylist wants to keep track of the products they use to style their clients' hair. Help the hair stylist by writing the `HairProduct` class with no-argument and paramterized constructors.",
    "thumbnail_url": "https://images.code.org/621d6b76d105dbeba2e49b8c566d2c21-hairstylist.png",
    "encrypted_exemplar_sources": "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\nZvpJtjyTBA==\n",
    "encrypted_validation": "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\n",
    "start_sources": {
      "StylistRunner.java": {
        "text": "public class StylistRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate HairProduct objects using the no-argument and parameterized constructors,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "HairProduct.java": {
        "text": "/*\n * Represents a hair product used by a hair stylist\n */\npublic class HairProduct {\n\n  private String type;      // The type of hair product\n  private double price;     // The price of a hair product\n  private boolean isCurly;  // Whether or not a hair product is for curly hair\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a no-argument constructor to assign default values to the instance\n   * variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specified values to the\n   * instance variables using the this keyword.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /*\n   * Returns the current value assigned to type\n   */\n  public String getType() {\n    return type;\n  }\n\n  /*\n   * Returns the current value assigned to price\n   */\n  public double getPrice() {\n    return price;\n  }\n\n  /*\n   * Returns the current value assigned to isCurly\n   */\n  public boolean getIsCurly() {\n    return isCurly;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "encrypted_examples": [

    ]
  },
  "audit_log": "[{\"changed_at\":\"2023-09-30T14:38:18.314+00:00\",\"changed\":[\"cloned from \\\"CSA U2L4-L6b_2023\\\"\"],\"cloned_from\":\"CSA U2L4-L6b_2023\"},{\"changed_at\":\"2023-09-30 14:38:28 +0000\",\"changed\":[],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
