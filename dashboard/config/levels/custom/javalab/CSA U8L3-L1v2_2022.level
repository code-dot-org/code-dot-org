<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-04-18T19:38:28.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "##Investigate and Modify\r\n\r\nRun the program to observe the results.\r\n\r\nThen, experiment with the program by making the following modifications. Change one line at a time, then run the program after each change to observe the results.\r\n\r\n1. How many checks are done if `target`(#e7e8ea) is the first item in the list? In `MyConsole.java`(#e7e8ea), try changing the value to find to the first value in the list.\r\n\r\n2. Look at the `binarySearch()`(#e7e8ea) method in `Searcher.java`(#e7e8ea). What do you notice about the code? What do the variables `left`(#e7e8ea) and `right`(#e7e8ea) represent? Add print statements at the beginning of the `while`(#e7e8ea) loop to print the elements that are located at indexes `left`(#e7e8ea) and `right`(#e7e8ea) then run the program to observe the output.\r\n\r\n3. In `MyConsole.java`(#e7e8ea), add the following code:\r\n\r\n```\r\nint secondLocation = Searcher.binarySearch(secondSet, 45);\r\nSystem.out.println(\"Second set: \" + secondLocation);\r\n```\r\n\r\nRun the program. What do you notice about the output? Why do you think this happened?",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    int[] firstSet = {10, 20, 30, 40, 50, 60};\n    int[] secondSet = {67, 45, 72, 23, 38, 81};\n\n    int firstLocation = Searcher.binarySearch(firstSet, 50);\n    System.out.println(\"First set: \" + firstLocation);\n    \n  }\n}",
        "isVisible": true
      },
      "Searcher.java": {
        "text": "public final class Searcher {\n\n  public static int binarySearch(int[] numbers, int target) {\n    int left = 0;\n    int right = numbers.length - 1;\n    int totalChecks = 0;\n    \n    while (left <= right) {\n      totalChecks++;\n      System.out.println(\"Total checks: \" + totalChecks);\n      \n      int mid = (left + right) / 2;\n      System.out.println(\"Middle value: \" + numbers[mid]);\n\n      if (numbers[mid] < target) {\n        left = mid + 1;\n      }\n      else if (numbers[mid] > target) {\n        right = mid - 1;\n      }\n      else {\n        return mid;\n      }\n    }\n\n    return -1;\n  }\n  \n}",
        "isVisible": true
      }
    },
    "teacher_markdown": "1. If the `target`(#e7e8ea) is the first item in the list, then there will be two checks performed. In the first instance, the `left`(#e7e8ea) index = `0`, the `right`(#e7e8ea) index = `5`, and the `mid`(#e7e8ea) value = `(0 + 5) / 2`. This equals `2.5`, but since it is of type `int`(#e7e8ea), it will round down to `2`. `firstSet[2] = 30`(#e7e8ea), so we reset  `right`(#e7e8ea) to `mid - 1` and rerun the algorithm. This time, `left`(#e7e8ea) = `0`, `right`(#e7e8ea) = `1`, and our new `mid`(#e7e8ea)  = `(0 + 1) / 2` = `0.5` which evaluates to `0`. That is the first index of the array and `binarySearch()`(#e7e8ea) will return this value.\r\n\r\n2. The variables `left`(#e7e8ea) and `right`(#e7e8ea) represent the index values that are the bounds of our binary search. Based upon the value of the number for which we are searching, we can observe that either `right`(#e7e8ea) or `left`(#e7e8ea) can change values based on how the algorithm is dividing the array.\r\n\r\n3. When this code is inserted and run, we notice that the `binarySearch()`(#e7e8ea) method returns `-1`, or not found. At first glance, this might seem counterintuitive since the number `45` is clearly contained within `secondSet`(#e7e8ea). However, a binary search algorithm relies on the list to be *sorted* properly in order to function. ",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-18T19:38:28.852+00:00\",\"changed\":[\"cloned from \\\"CSA U8L2-L1v2_2022\\\"\"],\"cloned_from\":\"CSA U8L2-L1v2_2022\"},{\"changed_at\":\"2022-04-18 19:38:30 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-14 00:41:34 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-14 01:19:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-14 01:24:33 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-07 18:52:30 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-12-07 19:18:33 +0000\",\"changed\":[\"encrypted_examples\",\"teacher_markdown\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
