<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Evaluate and test this program using the guiding questions and prompts on the **Secure Coding Practices** activity guide.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "The Teacher",
    "bubble_choice_description": "Evaluate and test a teacher's program for managing students.",
    "thumbnail_url": "https://images.code.org/ead6bdfe0203fece62887a108a3f31df-image-1641833592705.png",
    "start_sources": {
      "MyConsole.java": {
        "text": "import java.util.ArrayList;\n\npublic class MyConsole {\n  public static void main(String[] args) {\n\n    ArrayList<Student> studentList = new ArrayList<Student>();\n\n    Student liz = new Student(\"Liz Stanley\", \"8745\", \"362-59-3412\", 3.2);\n    Student joelle = new Student(\"Joelle McRae\", \"8523\", \"300-26-0643\", 2.8);\n    Student adam = new Student(\"Adam Mateus\", \"8608\", \"380-56-2330\", 3.5);\n    Student sophie = new Student(\"Sophie Martel\", \"8051\", \"355-43-8338\", 3.1);\n    Student charles = new Student(\"Charles Henryson\", \"8846\", \"326-83-6668\", 2.7);\n\n    studentList.add(liz);\n    studentList.add(joelle);\n    studentList.add(adam);\n    studentList.add(sophie);\n    studentList.add(charles);\n\n    Teacher annie = new Teacher(\"Annie Easley\", \"105888\", \"#1T3@ch3r\", studentList);\n    \n    String student = annie.findStudentWithHighestGPA();\n    System.out.println(\"Searching for student with highest GPA...\");\n    System.out.println(\"The student is \" + student);\n    \n  }\n}",
        "isVisible": true
      },
      "Student.java": {
        "text": "public class Student {\n\n  /**\n   * the student's first and last name\n   */\n  private String name;\n\n  /**\n   * the student's ID number\n   */\n  private String studentID;\n\n  /**\n   * the student's social security number\n   */\n  private String socialSecurityNumber;\n\n  /**\n   * the student's GPA\n   */\n  private double gpa;\n\n  /**\n   * Creates a Student\n   * @param name the first and last name of the student\n   * @param studentID the student's ID\n   * @param socialSecurityNumber the student's social security number\n   * @param gpa the student's gpa\n   */\n  public Student(String name, String studentID, String socialSecurityNumber, double gpa) {\n    this.name = name;\n    this.studentID = studentID;\n    this.socialSecurityNumber = socialSecurityNumber;\n    this.gpa = gpa;\n  }\n\n  /**\n   * Gets the student's first and last name\n   * @return the student's first and last name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /**\n   * Gets the student's ID number\n   * @return the student's ID number\n   */\n  public String getStudentID() {\n    return studentID;\n  }\n\n  /**\n   * Gets the student's social security number\n   * @return the student's social security number\n   */\n  public String getSocialSecurity() {\n    return socialSecurityNumber;\n  }\n\n  /**\n   * Gets the student's GPA\n   * @return the student's GPA\n   */\n  public double getGPA() {\n    return gpa;\n  }\n\n  /**\n   * Changes the student's GPA\n   * @param newGPA the new GPA to set\n   */\n  public void setPassword(double newGPA) {\n    gpa = newGPA;\n  }\n\n  /**\n   * Gets the student's information\n   * @return a String containing the student's information\n   */\n  public String toString() {\n    return name + \" (\" + studentID + \"): Social Security Number = \" + socialSecurityNumber + \", GPA = \" + gpa;\n  }\n}",
        "isVisible": true
      },
      "Teacher.java": {
        "text": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Teacher {\n\n  /**\n   * the first and last name of the teacher\n   */\n  private String name;\n\n  /**\n   * the teacher's id number used for logging into roster\n   */\n  private String teacherID;\n\n  /**\n   * the teacher's password used for logging into roster\n   */\n  private String password;\n\n  /**\n   * the list of students in the class\n   */\n  private ArrayList<Student> studentRoster;\n\n  /**\n   * Creates a Teacher\n   * @param name the name of the teacher\n   * @param studentRoster the list of students\n   */\n  public Teacher(String name, String teacherID, String password, ArrayList<Student> studentRoster) {\n    this.name = name;\n    this.teacherID = teacherID;\n    this.password = password;\n    this.studentRoster = studentRoster;\n  }\n\n  /**\n   * Used to find student with highest GPA in roster.\n   * @return the name of the student with highest GPA\n   */\n  public String findStudentWithHighestGPA(){\n    String student = \"\\\"UNKNOWN\\\"\\n***Log in error prevented student search.***\";\n    if(logIn() && studentRoster.size()>0){\n      double maxGPA =studentRoster.get(0).getGPA();\n      for(Student s : studentRoster){\n        if(s.getGPA()>maxGPA){\n          maxGPA = s.getGPA();\n          student = s.getName();\n        }\n      }\n    }\n    return student;\n  }\n\n  /**\n   * Used to log teacher in and allow roster access\n   * @return a boolean that returns true if the log in\n   *         was successful, and false otherwise.\n   */\n  private boolean logIn(){\n    boolean login = false;\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Please log in by entering your teacher ID number: \");\n    String id = sc.nextLine();\n    System.out.print(\"Next, enter your password: \");\n    String pass = sc.nextLine();\n    int attempts = 3;\n    while((!id.equals(teacherID)||!pass.equals(password)) && attempts>0){\n      System.out.println(\"Sorry, invaild entry. Please try again. (\"+attempts+\" attempts remaining)\");\n      System.out.print(\"\\nID Number: \");\n      id = sc.nextLine();\n      System.out.print(\"Password: \");\n      pass = sc.nextLine();\n      attempts--;\n    }\n    if(id.equals(teacherID)&&pass.equals(password)){\n      System.out.println(\"Successful Login!\\n\\n\");\n      login=true;\n    }\n    return login;\n  }\n  /**\n   * Gets the information of all students in the list\n   * @return a String containing the information of all\n   *         students in the list\n   */\n  public String toString() {\n    String allStudents = \"\";\n    \n    for (int index = 0; index < studentRoster.size(); index++) {\n      allStudents = allStudents + studentRoster.get(index) + \"\\n\";\n    }\n\n    return allStudents;\n  }\n}",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2021-12-12T16:11:14.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2021-12-12 16:11:59 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 14:02:06 +0000\",\"changed\":[\"csa_view_mode\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 14:03:10 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 16:53:37 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 16:54:32 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 16:57:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 17:29:02 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 22:15:11 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 22:17:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 22:23:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-14 01:11:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18413,\"changed_by_email\":\"joshua.joyner@code.org\"},{\"changed_at\":\"2022-03-14 01:43:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18413,\"changed_by_email\":\"joshua.joyner@code.org\"},{\"changed_at\":\"2022-03-14 01:43:35 +0000\",\"changed\":[],\"changed_by_id\":18413,\"changed_by_email\":\"joshua.joyner@code.org\"},{\"changed_at\":\"2022-03-14 01:43:53 +0000\",\"changed\":[],\"changed_by_id\":18413,\"changed_by_email\":\"joshua.joyner@code.org\"},{\"changed_at\":\"2022-03-14 01:43:54 +0000\",\"changed\":[],\"changed_by_id\":18413,\"changed_by_email\":\"joshua.joyner@code.org\"}]"
}]]></config>
</Javalab>
