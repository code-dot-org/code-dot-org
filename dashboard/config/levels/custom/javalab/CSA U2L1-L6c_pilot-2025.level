<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-01T22:17:17.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "long_instructions": "Create the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class by declaring instance variables for the specified attributes, and refactor the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Donut</code> class to be a subclass of the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class, declare instance variables for the following attributes:\r\n\r\n   * the flavor of a dessert\r\n   \r\n   * the price of a dessert\r\n\r\n‚úÖ **TO DO #2:** Refactor the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Donut</code> class to be a subclass of the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FoodTruckRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> object and a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Donut</code> object, then print the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Donut</code> objects by calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">AttributesHelper.printAttributes(nameOfObject)</code> method.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with declaring instance variables, creating a subclass, and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ What is <code style=\"background-color: #ececec; color: black; font-weight: bold;\">AttributesHelper.printAttributes()</code>?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    <p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">AttributesHelper.printAttributes()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nAttributesHelper.printAttributes(fido);\r\n\t  </pre>\r\n      \r\n      <p>This method (along with the tests) will help you check that you declared your instance variables correctly.</p>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/inheritance",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Desserts and Donuts",
    "bubble_choice_description": "Create the `Dessert` class by declaring instance variables for the specified attributes, and refactor the `Donut` class to be a subclass of the `Dessert` class.",
    "thumbnail_url": "https://images.code.org/f9692b1a8d6f5fcb61cc40fe879a2a18-donut.png",
    "encrypted_exemplar_sources": "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\nYgNpsDVU791ahKA1lmx3o95Z+O+mXTTOHOurxPfOsjcb51Tv2kqq7v7wDHeE\nkvaNuWmvNfIFm7pG+euLn8lNru4sP+eIvSvqzUMI42+WnlPubT5Yf4ibZCma\nSN/sz55XvBkCW8s5mZNqGyDasnCNr69+ztYTG99fUNJU0RjXVtPgb/awKapp\n9evynmoYpy7gHs9PsjtlgJ4v8c2mad+G79Gs1M0CGL/Lcm28YQlhnrrqryCc\nGa6wpNq1NhnBwbVirkX3O8wcTM4heCi8kWo67lKwJUt4Lwxwcpt679TV8o2I\nn49zvjd1rgi1Uo4j36YlT5FmFot1o1edIkH9UAsqP9yEKkE/9v5/ajQZhg+w\ndyGdO7qow6tcy6+V9ns5aHPqscBjCwBDHoNrbNe3WnfqvEqeVmUhgwnO8WmI\nbfpqUvjQmVFhb5+mddzH7IHr8IO+MDlIFVrL7rd5cqXan8Sl6AywGEeTXv8R\nrR0dez84rf0MrqD87cqGXXNq6UHn7jlbDn4lT6AGdSaMtgjnKsj2VKAhvUH0\n2V79VMRRI08FtI1Q7nPPigDUuJ6yzmbiy1SWDrCZ0N1npuP0X6JVgQObzNDa\nNW/M8DOKm2TG7UxcIAw8/L8DNFmCAAcspIhnuNTYDLiv1/hcHxADMSxHcmgZ\nM8RN6VSTkGdDXeoya0o6U5ggpXecDTW5KOK8PKtjg8RVcq5YySnGi/EsP6Bp\n3LEdaAkD7kMyVbjTAL/ZL6jAzGij8Os4IgLUd62av1tmHLUrlMtHzlNEO+Xx\nJvt+oSDhOOW4bxUUnzKOUPonOuDJT8Mc0kaBsk11ycqL4gkh7PQHgUTw4+jL\nR+2C7icR5pCCBp5mYd657Q5k6mkMH4XPZyM+1Wolcb5f2KzJgE2hAvZU9Wsk\ntbO016HKaUbLH9W+mSNGFWlNgE4JgI+0nSysmWmtc0jtV2QIinb1ElPOg3Fj\nkgVxg3Y/vWvjJd5+ReQePgblNU/yfq6ZWA61U0seDw1jCjUIay0kO4forMsv\nM7d5dmkqkuab8gjl1Z8xHK6fE4eITG/2SKK+2YQWKRbOPFB8MyZOpmp79+2P\nrZAsql1rZbsiytQ5MTnlBgdxVFb8GtBDndQh7/yclZpgDA6f/2qzenvBPsQ/\nrUTGo/hVlgOkY6LYTUao9ajfy5QgJjNejAa/ZBbfgpZXqVMsGd9q09ah4wWG\n671YNxOx7a2TllD5MBZGTMmc4yjQJ69QqEpnOiWuJ5r3mtcLnhF4Y9UClqur\nfzBlwGcGclUDvnT0GwsQQf3LVt9MRX+Merh4aqSuDgLSG+zDFjpluoDY8I7P\n7WBN5JVU6+zH13Yj4VsMxMYdH7zjmenrQg1YJxh/ty5FeNs7ynMxlBvbySq7\nhxi23PTP3tv5+WEBTuI8s3A23viy99epj3nRwxKHx2MMz4aCAmmY4dR4qu0+\n9knSaNudLRcueIKF12NvEe+BaTuRKH/vYVVojnikNfJnFeHzklO0TmAIfO6a\nc0ygEnoRs/GFNr1Bw+ckZwtJ35jiymdcR38cRU6TL3uku16Qt8yc6vw8oInm\nUhCBA6c5FBDaJvsl5n15dSOfNJyyOKqY05x9dwySXgLV0ENVVyuvJDHQLD/7\nbv9bNMHOdLOX0bwk7mT2cllg1V9rEnV1C3xSUcI4SGM59jhbzg3FR3YLHZkc\nzCXmx8qaZUIkfy24CKlm7Wok9gOqDvFMoNQiZ5WSUwTaG8JP1kd8QJGnNaLY\nOd1s4ZWwt5Yts8uizp3slY9ONwAHjST9lVSe6V0vyG4QP6EqttDcaeY+fMt8\nCcUa7b5DRg3miAAk6HMTrE2OhBYttgxeWSH6aXsWmFp9hDvorDYMcvvVT62M\n6sGQ48MK08RkXzuCJ52JjR1CVy3J5yzkTV+smA3T8k26qSY+aDED7roT40AU\n5UIPoFlGGAe6GcXlUNjWDyD01t8ZWujc3y/A9+bNaWURksfEhTzsa5qpfMZh\n+0aYlN77BEAbjZRyJMKGwfRScTgObJMVxddkLQFfbznnQn+MSGtWA6MdOsPm\nuKNS5vUmj2RcGulJxNc0m8VXbyYlnP4Gh1Kj7WMb6gojKq5ovb0O4u74r9so\noR1cskd8rAIEavbGsJPibawazzDU/W/XoCTtVarBSApME84txvB3udBZe/lq\nx74SgYTwE33EFvXt8uvC3DBrKwOWXJ4yRsPq0a29YL+/yPXk4Ms75QrpV4tL\nFTc3vR30cJsASRyqtWYi2TpCkRwciZG4nQBhWo1lWjjCNOIBOByUX2mn3IPl\ndl04BOyd7KAXvGMIRxt2w6zpFroXEA5VCTidPUN57hUvKBuRtHKw+dToX/EN\nE3mLVhAZS+SSpGAePyMDB7w6Xr8wz0gRK3kluIX4TNJNrZRR7c8I/EBq5tGb\nAGg7wC2S7S6RVKbmwfY4N4ldSYPAoxrnUgLlil/3WB4ji31cj8jCSOxzPToX\nIKqvDdlUGL0BX9GmwhOAXy4Wljcl3rubeq6lJ6SqYUBurUJQJa9dempWINqe\n9n9NE9rlYbGIexQH+asRaG/ZX8AF+L7Gr05D1pbAFDoCL2R+kET9JHaFn3k7\nj64KWcNtajmlL1+76U/ZU3E9CWWyIyrnn+LlSgvxTA4jXtASH8+EbnmqazQW\nmzct2say5uC8fy64HoA3w/rccS8JOXY5FNSOKXiqY1vusotN4TplPyl/oqNF\nrOqwnV9FffIliTCtKSYFB95K6p0t2YKJAGZToB3IJ4a12itL9CdWYAftS8nj\nZtmPrjyV9JRtOtuEfL1JdsBrOoSayjvZRXl1Dg7C/k0SWQIRsFEGTveAneep\nKrCNaLOIS1Ym/104qEBPdE0ifjGe7PoiYZa/4e1gxMjqlpFCRLPZSrGt8Teb\nlnco8sw/93F3D7on9af3zEchR6Avpd2lT+dqu/L+AWWNGXhmjZK4sME5y5em\npBt+botxazrhwBgie/gAlgPGMlDp7LMvIcOcBoH03pjdscV/E5ltCRihQ0/l\n0qY2xYOFbWweSlfUCxV+05KW2j/SFXAZJo9k/QXVGWNWjrKjJ3yZuHoVX8kD\ndRNtH5wDxeqrYXMb7l9sTBIfUsy/8coqpVMBlgi1ZZrijh4uKTePFYa6a/Pm\noqpXHV3mgPRQ9vF6NinFFWm3abi/aJqevAm3i2mwLmgAAk1rzY8yG9JhXDD+\n7gFoH1A2qkpKiabB6z/u7fWSYFoI5IbQgE66nhZlZDJDnT4q9mzfEo9VQu2a\nkv97Z74KTRKhmWmKxxuqHBJkOsKPrca5Vq2V/QxH+iO3fn8zVqLk3nWFdX6C\nvOMffwqkzzZ5zoEB2wVMQpPbl5JiVg0yW/MBHhM4KggCU1OMVt180IFuz4G5\nHaCAcNWqtAQ3bgrY5Ef8tg5XO3wU5LpBXzoKoV0L/Wou67K43C/puP8hJbo0\nibM3yxP4GV3l5U5NzGivYE3SjByDef44bJvKVjjzd/8UcKxR5IUmCMleJzMb\nGesaK+Hx73FarFzNfEIi6gLIt0vcW34b5NChgZiZ+80GIHaJL/e/ahdow+Jh\n/1Sdr6oMRBB/+b9dpa4UK9WO6bNpvnHHZV2Tfm3n5vnTCmvnN1z508OhX5fI\nSEPTE5nipIaxtsKrokGH5ZyMiciQMDe+c3o+TcDtLQN/eou4cy+/ho/SFvby\nADopOuXf08fTMMof52FyHbXFpFvn1SgC8RnybaNRxNLdJh6Yal4TVjAk3yFh\nv7UrDcIJwSADBh3GzdcmpQtxJWo/Xa4eTV+YqLXpkZhXdcdQJsbgvpM5iwqi\nnbHs/f2PF0knMeltoNjokAO+r7QIIjucz08qG0VfVlKB9oyJZ5d1pfnwtRj/\nyYSUbX13x+A=\n",
    "encrypted_validation": "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\ncIGzuaD/vyNY/Sit6tUY4wmuPtIz\n",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ------------------------------------- TO DO -------------------------------------\n     * ‚úÖ Instantiate Dessert and Donut objects, then print the instance variables for\n     * the Dessert and Donut objects to the console using AttributesHelper.printAttributes().\n     * ---------------------------------------------------------------------------------\n     */\n\n    \n\n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Dessert.java": {
        "text": "/*\n * Represents a dessert that can be sold at a food truck\n */\npublic class Dessert {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ‚úÖ Declare instance variables for the flavor and price of a dessert.\n   * -------------------------------------------------------------------\n   */\n\n\n\n  \n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Donut.java": {
        "text": "/*\n * Represents a donut that can be sold at a food truck\n * Donut is a type of Dessert\n */\npublic class Donut {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ‚úÖ Refactor the Donut class to be a subclass of Dessert.\n   * -------------------------------------------------------------------\n   */\n\n  private String flavor;          // The flavor of a donut\n  private double price;           // The price of a donut\n  private boolean hasSprinkles;   // Whether or not a donut has sprinkles\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    ArrayList<String> fieldsList = fieldsToList(Arrays.toString(classFields));\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    fieldsAsText = fieldsAsText.substring(1, fieldsAsText.length() - 1);\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "video_key": "csa_constructors",
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-01T22:17:17.259+00:00\",\"changed\":[\"cloned from \\\"CSA U2L1-L6c_2025\\\"\"],\"cloned_from\":\"CSA U2L1-L6c_2025\"}]"
}]]></config>
</Javalab>
