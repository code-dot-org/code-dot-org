<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T21:06:33.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A restaurant wants to keep track of its orders, including the customer's name and the items ordered.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">OrderScene</code> class constructor to take a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Customer</code> object and a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Item</code> object as parameters.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner</code> class,\r\n\r\n1. Instantiate an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">OrderScene</code> object and call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawScene()</code> method.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">changePrice()</code> method, then call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawScene()</code> method again.\r\n\r\n3. Print the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Item</code> object to confirm it was not modified.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with using object references as parameters.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "reference_links": [
      "/courses/csa-2023/guides/object-references-as-parameters"
    ],
    "display_name": "Restaurant Orders",
    "bubble_choice_description": "A restaurant wants to keep track of its orders, including the customer's name, the items ordered, and the total price.",
    "starter_assets": {
      "plate.png": "48a72439-9a24-4dcd-bb35-f09622fe0c7f.png",
      "background.jpg": "cd8cb1dd-20b5-4fcd-91ed-688994bd9c11.jpg"
    },
    "encrypted_validation": "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\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a Customer object\n    Customer amirah = new Customer(\"Amirah\");\n\n    // Creates an Item object\n    Item burger = new Item(\"Cheeseburger\", 9.99);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate an OrderScene object and call the drawScene() method. Then call\n     * the changePrice() method and call the drawScene() method again. Print the\n     * Item object to confirm it was not modified.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    // Plays the scene\n    Theater.playScenes(meal);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Customer.java": {
        "text": "/*\n * Represents a customer\n */\npublic class Customer {\n  \n  private String name;    // The name of a customer\n\n  /*\n   * Sets name to the specified name\n   */\n  public Customer(String name) {\n    this.name = name;\n  }\n\n  /*\n   * Returns the customer's name\n   */\n  public String getName() {\n    return name;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Item.java": {
        "text": "/*\n * Represents a menu item\n */\npublic class Item {\n  \n  private String type;    // The type of item\n  private double price;   // The price of an item\n  \n  /*\n   * Sets type to the specified type and price to the specified price\n   */\n  public Item(String type, double price) {\n    this.type = type;\n    this.price = price;\n  }\n\n  /*\n   * Returns the type of the item\n   */\n  public String getType() {\n    return type;\n  }\n\n  /*\n   * Returns the price of the item\n   */\n  public double getPrice() {\n    return price;\n  }\n\n  /*\n   * Sets the price of the item to newPrice\n   */\n  public void setPrice(double newPrice) {\n    price = newPrice;\n  }\n\n  /*\n   * Returns a String containing the item's information\n   */\n  public String toString() {\n    return type + \" - $\" + price;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "OrderScene.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Represents an order\n */\npublic class OrderScene extends Scene {\n  \n  private Customer customer;   // The customer the order is for\n  private Item item;           // The item the customer has selected\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write the OrderScene constructor with a parameter for a Customer object,\n   * and a parameter for an Item object. Instantiate the Customer and Item objects\n   * using the values assigned to their instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /*\n   * Returns the customer\n   */\n  public Customer getCustomer() {\n    return customer;\n  }\n\n  /*\n   * Returns the item the customer has selected\n   */\n  public Item getItem() {\n    return item;\n  }\n\n  /*\n   * Changes the price of the item\n   */\n  public void changePrice(double newPrice) {\n    item.setPrice(newPrice);\n  }\n\n  /*\n   * Draws the order information in the scene\n   */\n  public void drawScene() {\n    drawImage(\"background.jpg\", 0, 0, getWidth());\n    drawImage(\"plate.png\", 50, 50, 100);\n    formatText(30, Color.MAROON);\n    drawText(customer.getName() + \"\", 180, 100);\n    formatText(24, Color.WHITE);\n    drawText(item + \"\", 50, 225);\n    pause(2);\n  }\n\n  /*\n   * Formats the text\n   */\n  private void formatText(int size, Color color) {\n    setTextStyle(Font.SANS, FontStyle.BOLD);\n    setTextHeight(size);\n    setTextColor(color);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "thumbnail_url": "https://images.code.org/849d562901e2a0055e1eb069722a5f3c-u7l2-l7c.png",
    "name_suffix": "_2024",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T21:06:33.701+00:00\",\"changed\":[\"cloned from \\\"CSA U7L2-L7c_2023\\\"\"],\"cloned_from\":\"CSA U7L2-L7c_2023\"}]"
}]]></config>
</Javalab>
