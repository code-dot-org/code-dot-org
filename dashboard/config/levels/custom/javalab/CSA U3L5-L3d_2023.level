<Javalab>
  <config><![CDATA[{
  "published": true,
  "game_id": 68,
  "created_at": "2023-01-12T17:53:42.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The <a href=\"https://www.imdb.com/title/tt8111088/episodes?ref_=tt_eps_sm\" target=\"_blank\">**TV Episodes dataset**</a> includes the number of minutes for each TV episode in a season. The number of minutes for each episode is stored in an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> array called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">episodeLengths</code>.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TVEpisodes.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcTotalLength()</code> method to calculate and return the total number of minutes for all TV episodes.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">DataRunner.java</code>,\r\n\r\n1. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader.toIntArray()</code> method with the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"episodes.txt\"</code> file and store the result in a 1D array.\r\n\r\n2. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TVEpisodes</code> object with the 1D array containing the episodes data.\r\n\r\n3. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcTotalLength()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with traversing a 1D array using a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loop.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ntotalMins = 0\r\nloop from 0 to end of episodeLengths\r\n  totalMins += episodeLengths[index]\r\nreturn totalMins\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ What is the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \r\n    <p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class is a hidden support class that has methods for reading data from a text file into a 1D array. It has the following methods:</p>\r\n\t\t<ul>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toStringArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> objects containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toIntArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> values containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toDoubleArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> values containng the data</li>\r\n\t\t</ul>\r\n    \t<p>For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nString[] names = FileReader.toStringArray(\"names.txt\");\r\n \r\nint[] numbers = FileReader.toIntArray(\"numbers.txt\");\r\n \r\ndouble[] prices = FileReader.toDoubleArray(\"prices.txt\");</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "TV Episodes Length",
    "bubble_choice_description": "The TV Episodes dataset includes the number of minutes for each TV episode in a season. Write the `calcTotalLength()` method to calculate and return the **total** number of minutes for all TV episodes in a season.",
    "thumbnail_url": "https://images.code.org/4218bd68e53670826f512854e04a7535-tv.png",
    "reference_links": [
      "/courses/csa-2023/guides/for-loops"
    ],
    "project_template_level_name": "CSA U3L5-ChoiceD_2023",
    "encrypted_validation": "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\n",
    "start_sources": {
      "DataRunner.java": {
        "text": "public class DataRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the FileReader.toIntArray() to read the episodes.txt file and\n     * store the result in a 1D array. Instantiate a TVEpisodes object with the 1D\n     * array, then call the calcTotalLength() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the calcAverageLength() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "TVEpisodes.java": {
        "text": "/*\n * Manages data about episodes in a TV series\n */\npublic class TVEpisodes {\n\n  private String title;              // The title of a TV show\n  private String[] episodeTitles;    // The 1D array of episode titles\n  private int[] episodeLengths;      // The 1D array of the number of minutes in each episode\n\n  /*\n   * Sets title to the specified title of the TV show and initializes episodeTitles\n   * to the specified 1D array of the episode titles and episodeLengths to the 1D\n   * array of the number of minutes in each episode\n   */\n  public TVEpisodes(String title, int[] episodeLengths) {\n    this.title = title;\n    episodeTitles = FileReader.toStringArray(\"titles.txt\");\n    this.episodeLengths = episodeLengths;\n  }\n\n  /*\n   * Returns the name of the TV show\n   */\n  public String getTitle() {\n    return title;\n  }\n\n  /*\n   * Returns the episode title and its number of minutes at the specified index\n   */\n  public String getEpisodeInfo(int index) {\n    return episodeTitles[index] + \": \" + episodeLengths[index] + \" minutes\\n\";\n  }\n\n  /*\n   * Returns the total number of minutes for all episodes\n   */\n  public int calcTotalLength() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Traverse episodeLengths to calculate and return the total number of\n     * minutes for all TV episodes.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    return -1;\n  }\n\n  /*\n   * Returns the average number of minutes for each episode\n   */\n  public int calcAverageLength() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Calculate and return the average number of minutes for each TV episode.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    return -1;\n  }\n\n  /*\n   * Returns a String containing the name and length of each episode\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (int index = 0; index < episodeTitles.length; index++) {\n      result += episodeTitles[index] + \": \" + episodeLengths[index] + \" minutes\\n\";\n    }\n\n    return result;\n  }\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "titles.txt": {
        "text": "Chapter 1: The Mandalorian\nChapter 2: The Child\nChapter 3: The Sin\nChapter 4: Sanctuary\nChapter 5: The Gunslinger\nChapter 6: The Prisoner\nChapter 7: The Reckoning\nChapter 8: Redemption\nChapter 9: The Marshal\nChapter 10: The Passenger\nChapter 11: The Heiress\nChapter 12: The Siege\nChapter 13: The Jedi\nChapter 14: The Tragedy\nChapter 15: The Believer\nChapter 16: The Rescue",
        "isVisible": true,
        "tabOrder": 2
      },
      "episodes.txt": {
        "text": "37\n30\n34\n38\n32\n41\n37\n45\n50\n38\n32\n36\n43\n30\n35\n44",
        "isVisible": true,
        "tabOrder": 3
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\nOocNkVAtZT0R3qv3Lp4bPKsNGDpH0rqRq6Nrw7XhwBom/1UUHbva65D3e7Kw\nhzMO/JN1VQRGEvlySTArBn59lAq4NSYS1lQqRgQQUTf+IGQPPN/2eD6C4rR5\n5qLXZyzZ9LXpabeJsoMegBFVcP7GnXlxBn63DnkNWGkA7xxyaDw5qlNFX8GE\n0ZLHBDfF4S9Q1lJbR/loiq91Yq9PGCEkd9HG3k8P4WU0VUu743YO12ai+Zr0\nSl4FW8M5Wf00TxDyxjnDDdZ5LE7vCIhzBt+V6lEnT3tKHYSqg4PbdVhHBudm\nyn4baa+YWzV+a1LlZzObkABB5KHpOjPXb5QHeYgdww1Eh/3zhDiOIOs73lAm\n10pqlyb6i4niZ8qyC1r4CtzUbuP0C9j4SWIOp77fnYGhuAP2rUBkJX4zj8BF\ni8tK4I8r0c3kCef+mGVd3pJrY14Mqzp5T/EQHgpxZF1cM2hLDqxXxUlqPUtr\n4kWYxcIaUyY2PQh1e8JXBWaTCV7CyfjUu11YxYK89t0CiKRGNvx/liMeqNTO\nlJX6gMDkmhxB07r50NNc2aVFsRiZ737xVc3mUtQdrCwsYonOEaYfKG1W8ZBY\nX7u2jwZs2XqTwdNbe71wSQ+Qym8AqDkzENdpz1CnA4vT12Dj7PGk/BvquQIO\nRT74ohCmiXlPxt9GBBr7aK5IpURBhK4nbOE9YPqo2I6Swbxw5lEvH/Kb5rGn\nKCJN4/2ZIR+HgpytHNfgLa3kPJzhzu4A+WzsTnxhFHUKEZKuRYp+xZ5N/NI=\n",
    "encrypted_examples": [

    ]
  },
  "audit_log": "[{\"changed_at\":\"2023-01-12T17:53:42.322+00:00\",\"changed\":[\"cloned from \\\"CSA U3L5-L3c_2023\\\"\"],\"cloned_from\":\"CSA U3L5-L3c_2023\"},{\"changed_at\":\"2023-01-12 17:53:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 00:04:43 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 02:01:10 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 02:04:24 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 17:21:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 17:21:38 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 17:21:50 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-23 17:24:32 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-31 01:37:42 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-31 01:50:48 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-31 01:56:31 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 20:19:33 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 21:10:59 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-07-12 14:16:58 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
