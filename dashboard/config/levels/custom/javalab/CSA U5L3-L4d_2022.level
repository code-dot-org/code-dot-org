<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "A students wants to store data about the bestselling books to create a visual of the books that received the most reviews each year. They have a 2D array of `Book`(#e7e8ea) objects, where each row represents fiction books and non-fiction books, respectively. Each column represents 2017, 2018, and 2019, respectively.\r\n\r\n##In BookScene.java:\r\n\r\n1. Write the `findMostReviews()`(#e7e8ea) method to return a 1D `Book`(#e7e8ea) array containing the `Book`(#e7e8ea) objects that had the most reviews each year.\r\n\r\n   * Create a 1D `Book`(#e7e8ea) array that is the same length as the number of columns in `bestsellers`(#e7e8ea).\r\n   \r\n   * Traverse the `bestsellers`(#e7e8ea) array to find the book with the most reviews each year.\r\n   \r\n   * Add the `Book`(#e7e8ea) object with the most reviews each year to the 1D `Book`(#e7e8ea) array.\r\n   \r\n   * Return the 1D `Book`(#e7e8ea) array.\r\n\r\n2. Write the `createScene()`(#e7e8ea) method to draw the book cover that had the most reviews each year.\r\n\r\n   * Call the `findMostReviews()`(#e7e8ea) method to get the 1D array of `Book`(#e7e8ea) objects.\r\n\r\n   * Traverse the 1D array and draw the book cover for each `Book`(#e7e8ea) object.\r\n   \r\n   * Use the `pause`(#e7e8ea) and `clear()`(#e7e8ea) methods in the `Scene`(#e7e8ea) class to pause and clear the scene before drawing the next book cover.\r\n\r\n::: details [**Show Me How**]\r\nTraversing a 2D array in column-major order uses the following syntax:\r\n  \r\n  ```\r\n  for (int col = 0; col < arrayName[0].length; col++) {\r\n    for (int row = 0; row < arrayName.length; row++) {\r\n      // code to execute\r\n    }\r\n  }\r\n  ```\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Bestselling Books",
    "bubble_choice_description": "Write a method to find which Book objects had the most number of reviews each year and create a scene to visualize the results.",
    "thumbnail_url": "https://images.code.org/3511c1087ebe7ce6b7afe029aef78cdd-image-1650997669413.png",
    "starter_assets": {
      "1984.jpg": "fb541b01-9239-4eae-8bc7-65df1c96637f.jpg",
      "fahrenheit.jpg": "ce8f3910-fcd0-43b7-8a3c-9dd5bea71067.jpg",
      "gobletoffire.jpg": "fe24e889-cba4-4ba0-b8b3-bb96bcf2c427.jpg",
      "winfriends.jpg": "8b14d432-d0c2-422a-8bf7-677ff28f74a5.jpg",
      "agreements.jpg": "352a52fb-2f05-4c88-b06a-afcd4b2dab6c.jpg",
      "gratitude.jpg": "bf10283d-d23e-4bc7-bddb-183381f589f0.jpg"
    },
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    // Creates the Book objects\n    Book orwell = new Book(\"1984.jpg\", 21424);\n    Book fahrenheit = new Book(\"fahrenheit.jpg\", 10721);\n    Book gobletoffire = new Book(\"gobletoffire.jpg\", 7758);\n    Book winFriends = new Book(\"winfriends.jpg\", 25001);\n    Book agreements = new Book(\"agreements.jpg\", 23308);\n    Book gratitude = new Book(\"gratitude.jpg\", 10141);\n\n    // Stores the Book objects in a 2D array\n    Book[][] bestsellers = {{orwell, fahrenheit, gobletoffire},\n                            {winFriends, agreements, gratitude}};\n\n    // Creates the BookScene\n    BookScene myScene = new BookScene(bestsellers);\n    myScene.createScene();\n\n    // Plays the BookScene\n    Theater.playScenes(myScene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "BookScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Creates a scene based on which books have at least 10,000 reviews\n */\npublic class BookScene extends Scene {\n\n  private Book[][] bestsellers;   // The 2D array of Books\n\n  /*\n   * Constructor to create a BookScene with\n   * the specified 2D array of Books\n   */\n  public BookScene(Book[][] bestsellers) {\n    this.bestsellers = bestsellers;\n  }\n\n  /*\n   * Returns a 1D array of Book objects containing\n   * the books that had the most reviews each year\n   */\n  public Book[] findMostReviews() {\n    // TO DO #1: Create and return a 1D Book array containing\n    // all Book objects that had the most reviews each year.\n\n    \n\n    return null;\n  }\n\n  /*\n   * Creates a scene that draws the book cover for\n   * each book that had the most reviews each year\n   */\n  public void createScene() {\n    // TO DO #2: Call the findMostReviews() method and draw the book cover for each Book object.\n    \n    \n    \n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Book.java": {
        "text": "/*\n * Represents a book\n */\npublic class Book {\n\n  private String bookCover;   // The image file of the book cover\n  private int numReviews;     // The number of reviews\n\n  /*\n   * Constructor to create a Book with\n   * a specified bookCover and number of reviews\n   */\n  public Book(String bookCover, int numReviews) {\n    this.bookCover = bookCover;\n    this.numReviews = numReviews;\n  }\n\n  /*\n   * Returns the image file of the book cover\n   */\n  public String getBookCover() {\n    return bookCover;\n  }\n\n  /*\n   * Returns the number of reviews\n   */\n  public int getNumReviews() {\n    return numReviews;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "encrypted_exemplar_sources": "OR81i1XeMoA+h9NKvwJ6U3ucQlscu5wXTxz+pTg0aOQcVnCpNhZk1BFOKjoj\n+1uW++3on4ykloWoa2DqRHemXqp+IB/TleNyfwjpsoCs2NRJ4JFjyjnGxBa6\nFKI+XrZbMkmqZLzsAsXvCbHGYaRGhwenjUGcraqPdHxOMfV7sH8FUd2mvSSm\ni9JoAcSMR0r8PxfE9vVBTYE4DEl0Ak+rlEC0OD0qhUCDV42cmsFsYlTIpTX3\nuiHVRTZ4kI8edSvlCbZkSHsWylDIQJ17Xbs+mbU5GyllDElAFcrDn9cA/ahC\n/J/W63yAsQn95tEkohht2hYaWlpzKcIZOByQEbyPox1RVSeHlppl68DZZS5o\nb3gzIb2BCS4fLbvS44je1OCj5VJ/6O4Zjgoa+mRaAIv3sAgEmPXkegt1vVR4\nD1eihoqyJQ2o5LGgetmyt2inb8vR8puNS47g/PG0Jc71/tItemeShsMo7hUl\nt7WR2lFXtzFZfpNy/yQh4RSeI7pBkDyOKU5CbMWjEhSF1xCUw3I7bfLd+FEL\nK6E1OiWIZBhXOuDkvcYIPrTguMMCAXN0O7g5zUYOq2LtvOG6t/GVXi1AmFg2\n2NoyBEr/v02sH3fZOZIuAY9HrBVL+pPtV7h4v/zqT2VRCxQyJBe/0u3At1rl\nrXHG/NUr1+FTLrejaCwPiIRf7hT9c1E/XZtyx6J6eW9zT0JP+mJ6aUDVasaN\nJeKxugb3CizPrmStMYWy4+MyAfrokAEaVe6bdZjUu/tsDApZ6tf8UfFh6Ql8\n3y1Ez3UsIQy31e7AGUpTd7X9fhsKoqKx1K6oMZsFbRhrrKzaNnCVJxtAt8kH\nYJLAxTBJtF3qsCVvP0Ag2kIjavOxouANbNv6wucA8QxaClowlxNKzabRCwgF\nQ5j2KRI6NNYhk9pbvPi6T6jNIbRdhGbeCXBHQYj/1wS5gMEpYiM+hrMG9wgN\nUy1Etqcfy7iEcgupebcTuytwX5F3JXM8hRSzsx8fQB6UJkyywHdNfSkBD7kK\ngdlgg90WZeIDZJwXlZawnre4LGxk3OzVoVPLCaAa7uZBOMYxeX8KSKEbKvF/\n3qncPScDZ4KXjF0b2HLj77h9MQaZK0+9AY2ajy2i02fWBwwPDXjHjwAVIKJ0\nw3vDt+FO9cpsHYLPsB9iao/SLnWl5ihdIYbCKEX6p+Ur8x6Bd3xs7q+M72mz\n3AC03ftm13Fy7WSSXbpsWp8E35qGkxpaqAdFEqts3BY/JNNjQZzDcp9xC7oT\n1zkrdl8eN1vo4fg4AteRi+F9z4lzfI+DsW+XXJ7nIZaNLTbo7gAudkw5uSQP\nJgPT/S4xP8C6fnbA0pkxDHfBMZHCerq+KNj1s1uFEa4VXEZfUt7bWdoI/v+3\nwiKMr9+6VtrSxTnd/gwU6SyGywh3a5sEA4QV8p/vsITh9BrAN2rjspNHdjzc\nnRM6BgGqLSNjBBNNBET8+QIdPD+86si3bZp+FVTzKV8eT8a72YV6hI/dJRmn\ngHZEpoNHilCtZTPFfHPtR1s+wo9y9jWlUrxCCeZC/lFuFlr3+BnJAi36ElSd\nzB4oj1fJilZ6tsz/9MrAQ2b5Bc2l0txJJYbpy9uLI6DvDxBf/wyPQKfKdCSy\nfbrKCsR/nZnnyj1eapps4czV5mMOmQF6H5GdhX4LJPXNKvxvIUou3rOSIstQ\n7UpwkiK4bjWOpHhnjqARiNApBXlu+8tabg+pO/eZhTmRNkoM29Ud4QytI7Ot\n4btxivIiA/KvLMafLoaVRgSAL4yad2CDP9OETRQRw9U5szVtyQ/uu+aHPYVG\nwzw41jgnrnONLOFzRq/1USVX+xjwoc42UPH7BhCCAATeVFYwIaOl2oHq8/yX\nNulKDgSi33aAKQiL2M/jhoUSJA8SirmSyPtt5iLAU69SLOMovUDGfZWpGZyu\njrfLPNgwrWGMfK20k+Nd2QbLYElwKm7KRgX9Pig/bZckJMnY5TanP9pYH+3J\nCjWViU1W/dUjEAW56KU/a78kYx4vniZ6ZoPR8uau1wnXBlmT8Y8Rg8Nh3jtO\nocj8mnbs1n4YqhaBpM/m7J+BmumA3GPW5MpFa90cmY4Q5DarYv29anV8H6C/\n6XR4wtgmbLgoOUpN/epY1OxCkIdlxFWkwXOvlCps3834+RZBEzRrBkfZP4fv\nsrHOVloJgwduO/wtvLpWzCsVGpUzZ3ggKPxUm0hmqRsCFCHUocn1JOSpmhWM\nHL1qZrvB1z6g3/dz9+FeSIDjM8o3UKbpHYiN06VTXcH2aHk0L30TCjIdXzUO\n+E2gBqHVyNax8hF0ciOdBlfwoHhoBHllf3BV+/N9Lc/o5f6ModGeA6bzRYvE\nWznw+4lF1qDlbaoACpNhKcj9G8+DxgpOQJlZBwtYpuUCrtsuF7h8hu1R6Y7D\n1CnXhh9XB6gpdhg1KEqOD9iepG1QeCyJxLymjDY46MGyi4UCpQepLnqvzXVW\n78ZplPzFHh0WnA4+1bfjq+bBRdXX0li1TehSiW7UE3wu5Woi4z0MLme+UK/x\npHxRj640kV4unNrxhZtD098fQqi2WGuwOwqCzNcoOkoEDYaP88sbGZDxasU8\nawUNcILKvj0q1Und4SfDCJlg9PUo/SRJaj4P9t2y+mmqfKR6a220nG5v/AY9\nm8Q7gKPquZ9+w1R46LLP1YH2jZt7SEUItClnICj7KZabL4d1KoaQH1oyWimt\n932Tr8mnOTlcAl9c1dR4JFNVL04aNJSCiEKxsb5e2VzxjS4h2zJ8Cfu2M0ph\n60Y3RshAF9EWHrUe/LF8E+b92t3Zp29ImgDDVa+ky0EdDanYJfPbeKqlIT6Y\nyzGwlEXDMNv5RLX1PTHv8dVSzoz/cuTFiEVjArSTK0FZAJfGKUfv6fQMXeJD\n6HxFuZcGzug0IwXw08IrqVGFbvdd7GSdoS9Y9TGrH2eRmgCSvJ16rb0hOwDS\naPqelF4C7Jbwzj06Ab1kmckbOf7Zpk9cGfCzdYIM25ffbAFpAoNe5YSv/SLw\nFba2rCgaB5UHDIm2ndJCREHP50RVGCSuEUXRRS13I8ohDz/OTzLPuZ98krcc\na61AuJLduTqS8zBMde3zv9VQlGwGbGorggneqxdhBFL7xKmI/+TDJzktCrev\nMy33cvP2A8Ax94ggScdBQaTMAmD2Lu/wGlYIBoJgzioqu6o1cNCMPVc+qwwM\nDa4pkM0OBJgFePolHRYlXSyJd+dPuSrApuWf3469IoJ7TiVzErnQh3fmJ6r1\nX+P0eNIw/qkb9Hu0Sd01i4kV12R32px644SWH0NvPrf3bvv/2NFepa0cvJeA\nqiLs64ZFqFmklkczglWhMObqyxfGuYu0CbXdIoJ4G8FQgkwUUNLJ5EnEclxk\nm1e55/YwvOstshUbhSBFmx4klR13hru8vaOve/mG3jLG6r5ZIb6ptLOFoaJ/\nQ76FH/pr85qBo9DBa208NJoPN3LMb2uYsMzCaG5bDe94qqpJFEJhKOG1jWGM\nI4sNz5DehzbRgFaruwiuBoSSOxRJd7Ctzwh8UNr5KNxgBhOH4ZUoLcuoe7Ha\ngv6MhAgAr4OjTqWUUorZHxvIhRe2ouO3vnOovw0MGDSomOr+0GrJO6ZztFUg\nqZsXt5yehx3k1rFh479SCBlyIC+FLyPFH6/jK5cve/jDJCwGxBO/ecgPekhT\nsx3IFvxH7K/LDI17gRCzZ5zp8gAr4KuUC6uOwhl/5TtHXLXJmOvbu1VoKaiE\ntCUpDeZs/057hGdXlyKeM4LE1dRIWshQoeNacnPOtLRzyjp5Kb4YnSeeYXPI\n8yqGau76IEja4cyX0zG6IFuvBBB1p6t7skOXHIlV+rOz2kihyz+ksEfh3M+/\nykaU1EZRQTcR0Fiq+rzv8GY3yzPde22G6ygqBIUSeVSuk18drTL+kuhBAcRh\nOxEyaP0VXKTxiy1T6c0A2d67umvoheOjI/w3QRYpCFwJHYORkMociIsxyKog\n/+ZvVBZXYTucbGrtXsq0LezYONUlFER3m/m03kJLOK0yc4wfBElJxFDHBLh2\nLl8d6nvns3e4Jnm3w+1XPN4888DnhGZmOPVhbri5ackEo0sHqoRceTLJC5f8\nUHGkIDd9iMa8oZVWGH5ylc/ZOFygGncI3vM6Lk/kgaRZ599cdPrhW8lEjS3S\nj5Lyk7ovrjtIsDQN8ZRpQC+EvB8LanSBAe7xawdoOIJ1GFFYMa/zCMRx9dT8\nqpA=\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-04-12T19:08:34.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-04-12T19:08:34.940+00:00\",\"changed\":[\"cloned from \\\"CSA U5L3-L4c_2022\\\"\"],\"cloned_from\":\"CSA U5L3-L4c_2022\"},{\"changed_at\":\"2022-04-12 19:08:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-27 16:23:03 +0000\",\"changed\":[\"long_instructions\",\"csa_view_mode\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-27 16:58:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-27 18:21:18 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-27 18:24:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-09 18:16:23 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-09 18:16:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-09 18:16:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-09 18:20:24 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 23:32:50 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
