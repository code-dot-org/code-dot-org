<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T21:01:27.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A students wants to store data about the bestselling books to create a visual of the books that received the most reviews each year. They have a 2D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Book</code> objects, where each row represents fiction books and non-fiction books, respectively. Each column represents 2017, 2018, and 2019, respectively.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">BookScene</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findMostReviews()</code> method to return a 1D <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Book</code> array containing the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Book</code> objects that had the most reviews each year.\r\n\r\n1. Create a 1D <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Book</code> array that is the same length as the number of columns in <code style=\"background-color: #ececec; color: black; font-weight: bold;\">bestsellers</code>.\r\n\r\n2. Traverse the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">bestsellers</code> array to find the book with the most reviews each year.\r\n\r\n3. Add the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Book</code> object with the most reviews each year to the 1D <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Book</code> array.\r\n\r\n4. Return the 1D <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Book</code> array.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">createScene()</code> method with the 1D array returned from calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findMostReviews()</code> method.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with traversing a two-dimensional (2D) array in column-major order.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "video_key": "csa_column_major_traversal",
    "reference_links": [
      "/courses/csa-2023/guides/two-dimensional-arrays"
    ],
    "display_name": "Bestselling Books",
    "bubble_choice_description": "Write a method to find which Book objects had the most number of reviews each year and create a scene to visualize the results.",
    "thumbnail_url": "https://images.code.org/3511c1087ebe7ce6b7afe029aef78cdd-image-1650997669413.png",
    "starter_assets": {
      "1984.jpg": "68ba0b6a-870a-453e-ac6f-22ba1c1a9fdd.jpg",
      "agreements.jpg": "8bdfa4cf-c122-4bd9-bd04-bce43330e961.jpg",
      "fahrenheit.jpg": "9b3fd67c-4912-4107-9e76-94bc11db48af.jpg",
      "gobletoffire.jpg": "64e7a076-7337-4671-b6b0-a0c8fea2d407.jpg",
      "gratitude.jpg": "82eba262-89d8-4878-950d-056823a0e77c.jpg",
      "winfriends.jpg": "765a6b08-78eb-47d5-aced-5a99217e818d.jpg"
    },
    "encrypted_validation": "9m9KECCkwXcKX96bbSvzH0NrIRVkTs5keVfcTU/hG1xjLH8iAK8EHUjioLYL\nRQ8U1KxKUypBGX6KqC730rq+AQWDHBvoP60jOsIymLxw0jxZQjuIBms2RyeB\n6j0peEfJNIwZiuKk8+z4yeH2QUeGQRb3uShD/NYfyJuYEhH7Bn7OfqTlrycZ\nKTEmTb8YHX4Lbq+R4Ff64frZakgKVTxKB3yR7c/mzwrVckrCyTKl9tmC/R1r\njQgGbeLdwIH4jCX652Xg5T9dLlWJns+ye1JtgPqWdBPIGGfm8NcwrDnJkrYp\nl+4K/L5IhQng12tBQFwc/jfqcpPuC1loF34f+rxqZ+79X+KHZ8txIWohj1B6\nfo2xfX4gWIt57mvIBs8HslEQUVQ7jLeND0ZcFz6ALhGlGbwr9usWQyoOoQ/1\nonBvgE3UIKFLa/TyFYmeYHwuuzIYKmLiFgdDLzzheoS+IdYVjPvrEK/waysv\nXnYdrC6v3UISErq/PESuKDlRVxWOQlzUr2HM7wcIRPnpbHmymGBr7ZAn/S72\nctVgYg8IIJf0zl5qTKK/m5JxHsur2eJ7gzF5hKI8g7PkgCPGqZf9skykGQou\nKHzQY0PDsYa8vuGMNDOvz9DXEK/8mSPoVjdkPtWEA0W3rU2UiejFxOV8xhSa\nYbBDyUOmV53Zmz6+Zja1bAVNLV6MI+QIt+VjDKUWvrTl31i6ggp2xKd/FXky\npJh0ohal4Y1Yf0370aIggCpAnCEMo/Gpdeq91EcXNGnSZKDjqgUtlTjZdVzb\nS627DrEh5ceqYJhC032thO6JsAynFYc/1k+a5NFZgipoy3rBWaYs1eNaais+\nchx01eLcjAXESkiJ19DIDb/jE6iGnIUsai+m7pfAMBM4Ja+IdNCBrUL6X6WL\nSUgy7D7wcdqwr1ul0Q2ApJMEKi/LZlUgISkb3ou9HwBTT3oFcFIPxxwlFFXh\nE9ThREpiQVs94Fuex0LVoJmkMmlaT0x3fwGSWVxgXko8wNdkJiKQEeQwI+2B\nIPUnspwh3b03XnKQprZGb45YLPG2lDqEExso4kVvvpNvgjUPGdFhdBjdgpsB\nn5cUehNdTc0KOJa2t8pCs4FAQrQB6XRe21uTU+5rXFf50yBaOSFG7KD76gXH\nEYtqOiQIL20JqBxWRpEb542/YKD3UMbYgt1jeWccowzSckhI5C5x+u9l1Hin\na/HFoMHb4nu5YWTgsV4i5+gpwqpTW4HvqADYDdOIEbFGO//2PLoQBhInGTEx\nRnz3d1EbQEelqruNsEBqlmCkyMcIF+ON3QaFY5/TMhTI5YUcPcihU6TWTmGh\ntpmKySC0EgBTbixlaiQQ07+fQpBPzvyvfwuKcdN4iqMcJh+T1eLngfZYsQi7\nQi8nOR+xpyS005zG4esstW668PpWdEAQZzKbFAu4qgsGbObc6qcN5mVQDSKc\nWxNw3FNHi0D5KToQSubno54YdP47mjPUBntFvoziItdcadL0Kvl3LRxvkPx+\nM9QYVpGr7XXXd7SaH5eWhUoRDN3XrX57LQZRJHve3jlOIbo0Ciql9Wl+IPEI\n3kMBlYy6Xq3k/y+t2DLrippo3X2Tq9G4J+pUloP949IxqDd8ZEgOUBxBVwha\nv8OaIZTfLRVRfE0JZck9MWzmGQLFLqxbiIzQPbuOznyIO4ZLEcKnFAolW1cf\nCSbjmRdWvO89STfKMktAeB063x2BkmJNwpDW1lPkROGEpPCSDWt1sbyBXoat\nu8xPo0Qsfi9XTfkhNSQe5ntq9kKT4uhmz/QtWa4RBddFAAcO6RXzlwb5pHkU\nhAkUsPjGMC5FCBmykepYnwkFfrYpi30yXMmuxLKRbuM47rdQEpRwJoVsrUkL\nKe8xIoujlioL+7PG1YDvax4guHSr/r5sb4tEAjrwE+zJUU5SZ7DufpeQpt3b\n5/oUD/Jnz7O1ueRcjVsRkzNknQnvyPD1DPnyWjGkTwdaPfwnXIbtxhuk+WgN\n21bsd1PI/IwUXWno8R1Y26zGYBDfDyNoGMcCSq7MICzMCQbKm3z9bNJOglL4\nHpVx4WhNkNeUq6L4o3GOrgG9FIltM5IGv8tqyL62udLKb9FfzQnWons6Da7Z\nXyZ9nN6iOD6vWnpSXVHxepYqC8wU+VM0OtScOqxNr7Zs5ofdqZuvIDFXvdlE\nA45WZ4HIFlTGlpPPUyE8EzUPQOh8QvhiKt55xvH+fSY8GbmqRVKjVC1Wr3k8\n7HGyAikbaEXygixkHB28exVCSZ+C+8DX1t9GmRQFQm4fzU833M58GYKQcK/d\n+Aa2H5UEeDRdmCbsVHOLt+TjowsBt1IUQSyrGAPBRurtGGXRBV/jarCcd0+T\nYudPC8q+FZxt7jqU8f8U7NvY6mLUXOm1E9Ye6EhoSgquFmY5pjC9P2nDuJlH\nXHWFaBy2nJ7ZcY3Unet+KPJMjPIvJi6o6N7zdxiCSSX2DcViKMR/VRsA8f28\ntdh+DBloHdZHhxRusDfo6VyefcMo3vQinJn0BrzEyKRWb5PSklLypaHtjsnm\nU/TcPLP7n8z9tZHdUKhTqfpbsh53nBp1wuDd9e3tjj3IcQwxs4ST9+OAfeHO\nlzJ42VW1DitOnZn/qbspKyKi6svyLB0xDq8J8Gb62MWzED2+B1x+PlmLh4Nh\nThr4fe6ZZk3mf6pwiv+T1YwKi7dP27I/jAnUNF+ky4NyeCHHPG3vvXxNWSmZ\nVFpeGKZnmxHM4ip/WWeUSNZiUGqqC2V8CbS1GnTOY5XF1IcY8Rq3gQvy3TxP\nulUFwTy+hcsBT0MdKOaJbG2MZlUmylu5Mz/cbQV6S4ChENBr2CxgS+fwyzwd\ndh5TTd83FdQ+oOQclqMW2qOAOQkhcFh6w7JWRlwJkZVokQcn/9ubJFiOXZ+p\nfLOMNFgD8GU6LNzn3df3C4gFNCNOybEJVuagMjRw+VkBJEyKexntfVbiMsOo\njQvkM1Cwk4P2YMSn8cHTQr1JgshLAM2Nqxi5TZY82mItVhLZlO8wzTO5Bfai\nAJ8H3PykmgD4YHgv4b0LRdOZrlEJOQ==\n",
    "encrypted_exemplar_sources": "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\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates the Book objects\n    Book orwell = new Book(\"1984.jpg\", 21424);\n    Book fahrenheit = new Book(\"fahrenheit.jpg\", 10721);\n    Book gobletoffire = new Book(\"gobletoffire.jpg\", 7758);\n    Book winFriends = new Book(\"winfriends.jpg\", 25001);\n    Book agreements = new Book(\"agreements.jpg\", 23308);\n    Book gratitude = new Book(\"gratitude.jpg\", 10141);\n\n    // Stores the Book objects in a 2D array\n    Book[][] bestsellers = {{orwell, fahrenheit, gobletoffire},\n                            {winFriends, agreements, gratitude}};\n\n    // Creates a BookScene object\n    BookScene scene = new BookScene(bestsellers);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the createScene() method with the 1D array that is returned from\n     * calling the findMostReviews() method.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n\n    // Plays the BookScene\n    Theater.playScenes(scene);\n\n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "BookScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Creates a scene based on which books have at least 10,000 reviews\n */\npublic class BookScene extends Scene {\n\n  private Book[][] bestsellers;      // The 2D array of Book objects\n\n  /*\n   * Initializes bestsellers to the specified 2D array of Book objects\n   */\n  public BookScene(Book[][] bestsellers) {\n    this.bestsellers = bestsellers;\n  }\n\n  /*\n   * Returns a 1D array of Book objects containing\n   * the books that had the most reviews each year\n   */\n  public Book[] findMostReviews() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Traverse the bestsellers array to find all Book objects with the most\n     * reviews each year. Add each Book object with the most reviews to a 1D array\n     * of Book objects that is the same length as the number of columns in \n     * bestsellers and return the 1D array.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    return null;\n  }\n\n  /*\n   * Creates a scene that draws the book cover for\n   * each book that had the most reviews each year\n   */\n  public void createScene(Book[] results) {\n    for (int index = 0; index < results.length; index++) {\n      drawImage(results[index].getBookCover(), 50, 50, 250);\n      pause(0.5);\n      clear(\"white\");\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Book.java": {
        "text": "/*\n * Represents a book\n */\npublic class Book {\n\n  private String bookCover;     // The image file of the book cover\n  private int numReviews;       // The number of reviews\n\n  /*\n   * Sets bookCover to the specified image file and\n   * numReviews to the given number of reviews\n   */\n  public Book(String bookCover, int numReviews) {\n    this.bookCover = bookCover;\n    this.numReviews = numReviews;\n  }\n\n  /*\n   * Returns the image file of the book cover\n   */\n  public String getBookCover() {\n    return bookCover;\n  }\n\n  /*\n   * Returns the number of reviews\n   */\n  public int getNumReviews() {\n    return numReviews;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "name_suffix": "_2024"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T21:01:27.265+00:00\",\"changed\":[\"cloned from \\\"CSA U5L4-L3d_2023\\\"\"],\"cloned_from\":\"CSA U5L4-L3d_2023\"}]"
}]]></config>
</Javalab>
