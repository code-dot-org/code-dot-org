<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-11-03T19:21:06.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "An artist wants to sell their work on an app, and the software engineer has created a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Painting</code> class to represent the paintings.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Painting</code> class, write a no-argument constructor to assign default values to the instance variables:\r\n\r\n   * Assign a default name to the instance variable <code style=\"background-color: #ececec; color: black; font-weight: bold;\">title</code>, such as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"new painting\"</code>\r\n\r\n   * Assign a default value to the instance variable <code style=\"background-color: #ececec; color: black; font-weight: bold;\">year</code>, such as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">2023</code>\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArtRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Painting</code> object.\r\n\r\n‚úÖ **TO DO #3:** Print the constructor and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Painting</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a no-argument constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n    <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getTitle()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getYear()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Painting</code> class to get the current values assigned to the instance variables. For example:</p>\r\n    <pre style=\"background-color: #333333; color: white;\">\r\nPainting picasso = new Painting();\r\nSystem.out.println(\"Title: \" + picasso.getTitle());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Painting Class",
    "bubble_choice_description": "An artist wants to sell their work on an app, and the software engineer has created a `Painting` class to represent the paintings.",
    "thumbnail_url": "https://images.code.org/74d20a08c9c353e657eadf25651b413f-artwork.png",
    "encrypted_exemplar_sources": "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\nVfFqWwKW+H903SKC32HVB4teYZaWMhQ=\n",
    "encrypted_validation": "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\n",
    "start_sources": {
      "ArtRunner.java": {
        "text": "public class ArtRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Painting object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject), and print the values\n     * assigned to the instance variables using the methods in the Painting class.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Painting.java": {
        "text": "/*\n * Represents a painting\n */\npublic class Painting {\n\n  private String title;    // The title of a painting\n  private int year;        // The year a painting was created\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a no-argument constructor to assign default values to the\n   * title and year instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n\n\n  \n\n  /*\n   * Returns the current value assigned to title\n   */\n  public String getTitle() {\n    return title;\n  }\n\n  /*\n   * Returns the current value assigned to year\n   */\n  public int getYear() {\n    return year;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-03T19:21:06.801+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L3b_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L3b_2023\"},{\"changed_at\":\"2022-11-03 19:21:08 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-06 21:23:02 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:42:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:42:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:43:25 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:44:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-07 15:44:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-10 21:42:13 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 14:27:57 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:10:26 +0000\",\"changed\":[\"encrypted_validation\",\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 15:10:41 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:52:55 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:17:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:17:37 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:18:24 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:18:50 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:19:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:32:19 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:32:23 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:32:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-12 16:45:34 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:38:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:56:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-14 19:27:04 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
