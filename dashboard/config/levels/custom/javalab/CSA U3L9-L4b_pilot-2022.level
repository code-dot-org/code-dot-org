<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-08-23T20:25:37.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "project_template_level_name": "CSA U3L9-L4b PBT_pilot-2022",
    "long_instructions": "##In Languages.java:\r\n\r\n1. Write the `reverse()`(#e7e8ea) method to reverse the elements in the `mostSpoken`(#e7e8ea) array.\r\n\r\n##In MyConsole.java:\r\n\r\n2. Call the `reverse()`(#e7e8ea) method on the `mostSpokenLanguages`(#e7e8ea) object to reverse the array.\r\n\r\n3. Call the `printLanguages()`(#e7e8ea) method on the `mostSpokenLanguages`(#e7e8ea) object to print the updated array.\r\n\r\n***Curious about this dataset?*** *Learn more about it [**here**](https://www.ethnologue.com/statistics/size)!*",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "submittable": "false",
    "csa_view_mode": "console",
    "display_name": "Most Spoken Languages",
    "bubble_choice_description": "Reverse the array of most spoken languages to display them in ranking order.",
    "thumbnail_url": "https://images.code.org/a1c76c5d11cb9c1657d494ee8ecdce05-image-1648752702625.png",
    "encrypted_exemplar_sources": "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\n",
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "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\nkZdFACBt\n",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"languages.txt\");\n    String[] languages = myFileReader.getStringData(91);\n\n    Languages mostSpokenLanguages = new Languages(languages);\n    \n    mostSpokenLanguages.printLanguages();\n\n    // TO DO #2: Call the reverse() method to reverse the array.\n\n\n    // TO DO #3: Call the printLanguages() method to print the array.\n    \n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "Languages.java": {
        "text": "/*\n * Processes languages in a String array\n */\npublic class Languages {\n\n  private String[] mostSpoken;   // The 1D array of park names\n\n  /*\n   * Constructor to create a Languages object with\n   * a specified list of most spoken languages\n   */\n  public Languages(String[] mostSpoken) {\n    this.mostSpoken = mostSpoken;\n  }\n\n  /*\n   * Returns the array mostSpoken\n   */\n  public String[] getMostSpoken() {\n    return mostSpoken;\n  }\n\n  /*\n   * Prints the languages in the mostSpoken array\n   */\n  public void printLanguages() {\n    for (String language : mostSpoken) {\n      System.out.println(language);\n    }\n  }\n\n  /*\n   * Reverses the mostSpoken array\n   */\n  public void reverse() {\n    // TO DO #1: Reverse the elements in the mostSpoken array.\n\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "languages.txt": {
        "text": "#91: Sylheti\n#90: Min Dong Chinese\n#89: Uyghur\n#88: Taʽizzi-Adeni Arabic\n#87: Czech\n#86: Rundi\n#85: Southern Pashto\n#84: Min Bei Chinese\n#83: Sanaani Spoken Arabic\n#82: Tunisian Arabic\n#81: South Levantine Arabic\n#80: Zulu\n#79: Kinyarwanda\n#78: Hungarian\n#77: Deccan\n#76: Kazakh\n#75: Chittagonian\n#74: Greek\n#73: South Azerbaijani\n#72: Bavarian\n#71: Nigerian Fulfulde\n#70: Hejazi Arabic\n#69: Northern Kurdish\n#68: Sinhalese\n#67: Assamese\n#66: Mesopotamian Arabic\n#65: Nepali\n#64: Cebuano\n#63: Malay (Malaysian Malay)\n#62: Somali\n#61: Chhattisgarhi\n#60: Khmer\n#59: Saraiki\n#58: Thai\n#57: Magahi\n#56: Northern Pashto\n#55: Amharic\n#54: Gan Chinese\n#53: Saʽidi Arabic\n#52: Dutch\n#51: Tagalog\n#50: Romanian\n#49: North Levantine Arabic\n#48: Sindhi\n#47: Northern Uzbek\n#46: Igbo\n#45: Ukrainian\n#44: Moroccan Arabic\n#43: Algerian Arabic\n#42: Sudanese Arabic\n#41: Sunda\n#40: Eastern Punjabi\n#39: Burmese\n#38: Maithili\n#37: Odia\n#36: Malayalam\n#35: Xiang Chinese\n#34: Yoruba\n#33: Polish\n#32: Indonesian (Indonesian Malay)\n#31: Kannada\n#30: Hausa\n#29: Jin Chinese\n#28: Hakka Chinese\n#27: Min Nan Chinese\n#26: Bhojpuri\n#25: Iranian Persian\n#24: Gujarati\n#23: Egyptian Arabic\n#22: Italian\n#21: Javanese\n#20: Urdu (Persianised Hindustani\n#19: Yue Chinese\n#18: Tamil\n#17: Vietnamese\n#16: German\n#15: French\n#14: Korean\n#13: Turkish\n#12: Wu Chinese\n#11: Telugu\n#10: Marathi\n#9: Western Punjabi\n#8: Japanese\n#7: Russian\n#6: Portuguese\n#5: Bengali\n#4: Hindi (Sanskritised Hindustani)\n#3: English\n#2: Spanish\n#1: Mandarin Chinese",
        "isVisible": true
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:25:37.989+00:00\",\"changed\":[\"cloned from \\\"CSA U3L9-L4b_2022\\\"\"],\"cloned_from\":\"CSA U3L9-L4b_2022\"},{\"changed_at\":\"2022-09-09 00:35:59 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 00:36:08 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 00:36:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-09 00:37:08 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
