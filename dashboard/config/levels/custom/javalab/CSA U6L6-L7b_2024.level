<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T21:04:36.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A student writing a research paper needs to check their spelling before submitting it to their teacher.\r\n\r\nâœ… **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Essay</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">checkSpelling()</code> method that takes a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> parameter representing the word to be checked. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">checkSpelling()</code> method should:\r\n\r\n1. Traverse the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">dictionary</code> list.\r\n\r\n2. Compare each letter of a word in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">dictionary</code> list to each letter of the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">wordToCheck</code>.\r\n\r\n3. Return <code style=\"background-color: #ececec; color: black; font-weight: bold;\">true</code> if each letter of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">wordToCheck</code> matches each letter of a word in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">dictionary</code> list, otherwise return <code style=\"background-color: #ececec; color: black; font-weight: bold;\">false</code> if no matches are found.\r\n\r\nâœ… **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">EssayRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">checkSpelling()</code> method and print the result.\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">ðŸ”¦ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nloop through the list of dictionary words\r\n  get the current dictionary word\r\n  set status to true\r\n&nbsp;\r\n  loop from first letter to length of current word\r\n    get letter at letterIndex to letterIndex+1 of current word\r\n&nbsp;\r\n  if letterIndex less than length of wordToCheck\r\n    current letter at letterIndex to letterIndex+1 of wordToCheck\r\n&nbsp;\r\n    if wordToCheckLetter does NOT equal currentWordLetter\r\n      set status to false\r\n&nbsp;\r\n  if status is true\r\n    return status\r\n&nbsp;\r\nreturn false\r\n</pre>\r\n    </div>\r\n</details>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Spell Checker",
    "bubble_choice_description": "A student writing a research paper needs to check their spelling before submitting it to their teacher.",
    "thumbnail_url": "https://images.code.org/e658d98bf401010d87fc3f48c5c5b5e9-contract.png",
    "encrypted_validation": "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\nQLSCEVdIvXg0RlaECdrigYI5Pd0kcw==\n",
    "encrypted_exemplar_sources": "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\n0M/fdy0fa+6qWoxtL2JO9FXM4b4cf6SNAQ==\n",
    "start_sources": {
      "Essay.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Analyzes the text in an essay\n */\npublic class Essay {\n\n  private ArrayList<String> dictionary;    // The list of dictionary words\n\n  /*\n   * Initializes dictionary by reading words from a text file\n   */\n  public Essay() {\n    this.dictionary = FileReader.toStringList(\"words.txt\");\n  }\n\n  /*\n   * Returns the list of dictionary words\n   */\n  public ArrayList<String> getDictionary() {\n    return dictionary;\n  }\n\n  /*\n   * Returns true if each letter of wordToCheck matches each letter\n   * of a word in the dictionary list, otherwise returns false\n   */\n  public boolean checkSpelling(String wordToCheck) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Traverse the dictionary list. Use the substring() method to compare each\n     * letter of a dictionary word to each letter in wordToCheck. If all letters\n     * of wordToCheck match a dictionary word, return true. Otherwise, return false\n     * if no matches are found.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n\n    return false;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static ArrayList<String> toStringList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    return temp;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Integer> toIntList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Integer> data = new ArrayList<Integer>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Integer.parseInt(currentValue));\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Double> toDoubleList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Double> data = new ArrayList<Double>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Double.parseDouble(currentValue));\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "words.txt": {
        "text": "activity\nafterthought\napartment\nappoint\napprove\nbeginner\nboundary\nbreathe\ncalendar\ncaption\nclothe\ncolony\ncompetition\nconcern\ncondition\ncreature\ncrouton\ncurrency\ncycle\ndevotion\ndisguise\ndishonest\ndistance\ndisuse\neager\neducation\nexist\nfamous\nfeather\nfeature\nfiction\nfragile\nfriction\ngrateful\nguardian\nhousehold\nincrease\nindustry\ninvention\njunction\njunior\nlawyer\nmanagement\nmayor\nmeanwhile\nmemorable\nmention\nmetal\nmightily\nnature\nneither\noption\npardon\npassenger\npicture\npopular\nproceed\nproduce\nprofessor\nproperty\nquartet\nreason\nrecess\nreduce\nreduction\nreply\nroute\nscene\nscent\nstolen\nsupporter\nsweater\nteachable\ntelevise\nthough\nthread\ntidal\ntriple\nvictory\nvolcano\nwealth\nweather\nweird\nwilderness\nwrist",
        "isVisible": true,
        "tabOrder": 3
      },
      "EssayRunner.java": {
        "text": "public class EssayRunner {\n  public static void main(String[] args) {\n\n    // Creates an Essay object\n    Essay wordChecker = new Essay();\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Call the checkSpelling() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      }
    },
    "name_suffix": "_2024"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T21:04:36.214+00:00\",\"changed\":[\"cloned from \\\"CSA U6L6-L7b_2023\\\"\"],\"cloned_from\":\"CSA U6L6-L7b_2023\"}]"
}]]></config>
</Javalab>
