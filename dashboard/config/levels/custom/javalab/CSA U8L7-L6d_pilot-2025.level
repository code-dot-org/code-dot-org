<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-01T21:21:45.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "You are developing a search engine for a large collection of books. The search engine uses an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Book</code> objects to store the details of each book. Another <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> is used to store the search queries submitted by users.\r\n\r\n✅ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SearchEngine</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findSearchResults()</code> method to find the first occurrence of each search query in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Book</code> objects. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findSearchResults()</code> method should:\r\n\r\n* Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">matchQuery()</code> method to check if the title, author, or ISBN matches the query.\r\n\r\n* Return an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> containing the indexes where each matching <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Book</code> object is found in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">books</code> list.\r\n\r\n* If the search query is not found in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">books</code> list, add <code style=\"background-color: #ececec; color: black; font-weight: bold;\">-1</code> to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to return.\r\n\r\n✅ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SearchRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findSearchResults()</code> method and print the results.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Search Engine",
    "bubble_choice_description": "Users need to find relevant information quickly and easily within a collection of books. Find the locations of search queries in a list of books.",
    "thumbnail_url": "https://images.code.org/bc08fc9cbd7833154763208460ade3a9-books.png",
    "encrypted_validation": "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\n2EAxDgKccJc=\n",
    "start_sources": {
      "SearchRunner.java": {
        "text": "import java.util.ArrayList;\n\npublic class SearchRunner {\n  public static void main(String[] args) {\n\n    // Creates a list of books\n    ArrayList<Book> books = new ArrayList<Book>();\n    books.add(new Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", \"978-0743273565\"));\n    books.add(new Book(\"To Kill a Mockingbird\", \"Harper Lee\", \"978-0446310789\"));\n    books.add(new Book(\"The Catcher in the Rye\", \"J.D. Salinger\", \"978-0316769488\"));\n    books.add(new Book(\"Pride and Prejudice\", \"Jane Austen\", \"978-0141439518\"));\n\n    // Creates a SearchEngine object\n    SearchEngine search = new SearchEngine(books);\n\n    // Creates a list of search queries\n    ArrayList<String> searchQueries = new ArrayList<String>();\n    searchQueries.add(\"Catcher\");\n    searchQueries.add(\"Hamlet\");\n    searchQueries.add(\"Prejudice\");\n    searchQueries.add(\"Gatsby\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Call the findSearchResults() method and print the results using the\n     * resultsToString() method.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "SearchEngine.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a search engine for a collection of books\n */\npublic class SearchEngine {\n\n  private ArrayList<Book> books;         // The list of books in the collection\n\n  /*\n   * Initializes books to the specified list of Book objects\n   */\n  public SearchEngine(ArrayList<Book> books) {\n    this.books = books;\n  }\n\n  /*\n   * Returns an ArrayList containing the location of the first occurence of\n   * each search query in the searchQueries list\n   */\n  public ArrayList<Integer> findSearchResults(ArrayList<String> searchQueries) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Find the first occurence of each search query in the list of books and\n     * add the index where the Book object was found to a new ArrayList. Return the \n     * new ArrayList containing the locations of each search query.\n     * -----------------------------------------------------------------------------\n     */\n    \n    \n    \n    return null;\n  }\n\n  /*\n   * Returns true if the text contains the query\n   */\n  public boolean matchQuery(String text, String query) {\n    int space = text.indexOf(\" \");\n\n    while (space >= 0) {\n      String word = text.substring(0, space);\n\n      if (word.equals(query)) {\n        return true;\n      }\n\n      text = text.substring(space + 1);\n      space = text.indexOf(\" \");\n    }\n\n    if (text.equals(query)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /*\n   * Returns a String containing the list of results\n   */\n  public String resultsToString(ArrayList<Integer> results) {\n    String text = \"\";\n\n    for (int index = 0; index < results.size(); index++) {\n      int currentIndex = results.get(index);\n\n      if (currentIndex == -1) {\n        text += \"No result found.\\n\";\n      }\n      else {\n        Book currentBook = books.get(currentIndex);\n        text += \"(\" + currentIndex + \") \" + currentBook + \"\\n\";\n      }\n    }\n\n    return text;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Book.java": {
        "text": "/*\n * Represents a book\n */\npublic class Book {\n  \n  private String title;      // The title of a book\n  private String author;     // The author of a book\n  private String isbn;       // The ISBN of a book\n\n  /*\n   * Sets title, author, and isbn to the specified values\n   */\n  public Book(String title, String author, String isbn) {\n    this.title = title;\n    this.author = author;\n    this.isbn = isbn;\n  }\n\n  /*\n   * Returns the title of the book\n   */\n  public String getTitle() {\n    return title;\n  }\n\n  /*\n   * Returns the author of the book\n   */\n  public String getAuthor() {\n    return author;\n  }\n\n  /*\n   * Returns the ISBN of the book\n   */\n  public String getIsbn() {\n    return isbn;\n  }\n\n  /*\n   * Returns a String containing the information about the book\n   */\n  public String toString() {\n    return title + \" by \" + author + \" [ISBN: \" + isbn + \"]\";\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "encrypted_exemplar_sources": "66A5yr5cNcZWYNhPRQU7eBA1zRfkckleyNHMAaTmgjp3AHLC1OauoDKymnVB\nEzm2EfP901lgZXn2JJEbMpvO3KrNHFSLFnold7idXeL0Ij6yeWFBnyJYDBDW\niOTbDpJfogyn1glQyEmAmVP1l4F+5yNpYFmdkLF6JZ3GvquOKAYW9j4g6xjB\n0TwaUC5x7XeO1NoWyMfiTMfxwQ1kUoTuRvYkmL5Bi1YwSlRXXUqKaUpZmoeB\nKM6ag6NhCVvBF9DqgMCuq7LVEzHLgvPutjRAM28kLFXr1dEoxFP2tg43nSzZ\n67gzsHYOcFGAnYShbnT1+/otGGdzQZsUj85HsFPYPEYEZXCdsHLosxMwtJWx\nmPl3CYhvWRfyCZjpgFjTvLxBlZ+5d6iGVJ9SNbPGjXP56gpQQIB3cbL/UHs2\nkV2afI5iPmr5jqKYA5tC+kq/aJQ1obxTvvvSIUHoVWRlZRBacyiFOq/Lcg2r\nhLidAnTOXZaAq6K23DGZWV8Kn6gaS3Bzy70PFT0YlCaQjOHNDSQHR87KamFR\nhDnSvDkkhWq8pKMalh1SrBBvBo0F1lqMAQA8dxvkomYy76B097fqGKhIytkg\nZ7QeG7KzFj2YnmJ3KByZZpK+d3E2dAAM3CjWCWkrXN3TCIbtbQBHiAzG32WR\nx7XLtAMVKsOVNeVlkxMZPLAeh4RrwjvuLO6BSAaCN7EjtvoRYNyzf/xz37j2\nqInu9IA5GsZ49w6U6mYqB4uEpk/vlhKO1QNQUOTADEMVMfLyucWXvksuRldQ\nIvDEpjfQEzOPl7BpPwNpp4WvMkAGbGWpPjBaLH66tcf9GFxMzzW6ZKsCmlR8\nJwWFC9wmHmGg61L4XZB8vfG0JBwRdhkevvhLwqeN6qW3n2sc7LOPKMH16F2a\nJQ0ihK9TgARY9PyTYPv09b3Ca5PLcbo1WxIcwW/U5TfFFhxNbhsBzEa7eBGN\nwn51r2VMjtfVOSHqsxmTMuvqu7GAspHY+TJ53g9l9aPqazGKA86QTxIDVB8E\ngjhoELJRyOK2qk2MXwSUodo0SaExLr0wO1wUbYErpDX+x7+VoipST15WSixM\n6qMQcLv8tN7swc3pNlyttxjX+p/j0kxQgEl/5/4aM+DE7Jjr7Ylw3QGwY6rY\nQopTLtSQ2qZrSpuM/r8GFgH3VL3gMM6q858T8XIlFw/tJ7z5VeV54BFyF2aH\nKZosvscRpn1Hxat9OQ8cKuMPlPfjfQrlQ2yB6dQHBtMTlcS4cVbcgvM0MzfM\n7dIEFGlinyJ0a5yx+QTb/8cx4SvResbGBfwnQ9NmW21paYj371HwkODTghX6\nKz6CUa+7rRFD29fAFYnKF+AWqCMNtCpmQ/ezXF4W+zFgSHumBih3TYKXmuEt\nBuJ3GmipI6d6QFM18QbU4PO52SiO1hWp7Joyza+fgfDCebDF2KmbWC0xhm3P\nrH/dx3ubd+/zCye8Cm/YWx/T2qHLVK2S5qohV6E20iZsExvwkiWGwZ5l9SD0\nSfmVY404rFv2DQBJIqKaQSMXLl/QuV7L5B/UHgituBvWdPxDLA0+cM10fVi0\nRsL8t44K8TmNw4mpjLtmcSTrIvMiGnd/yBoPmKTjfxVl5zLlidNelvvJNSkZ\nN6BAtt7S9wCj3Z4UbxLlZNLLU6ZnGQZsAq0DMs3gV+jfwdzoA7G56XpdBU3Y\ninzfZHgd9t4I9sAxZX5DFm9/0VOe2jQMdgCgoE8aM3Opmp3R80YpYCjWzyYV\naAh+Z3MTsJxaE8zplSsdP/TEpFrx/9FZRbRqhbe/rkeS+vs4f3O4g8cz7c85\nEYvSelzyBN8nqoQS4mNBXrEMAC4xabB1lS0W5PnKvQ4A16xZvcCDNIUDysqb\nVGopfENG8IbqeP9UtSaAEVXmBod6x5DKtqz7gaY6Cu06du6kwKPIDKUkuEOP\nWx5kJtKHXQhkxVbYLL9VS2aeHFtIf8H7Fi6VYcit99eaju3c4ybmU3+DTSfS\ncDBrj41ENyVs00rhgyhRt0+3DiQQuZXlGC/EOcBrbwG/iR3J0kwa+A2jfCAX\n3wS77ROZEVQd/MNYu+W295SMeSwI5qc2q0jv87WIPl56DSEtcG6Wr26AHQSf\nyG2izMTuv1gC7NhYJ676D75WQHY0LNHqrPzG+LKmzgktvC7foTWaui3APsyQ\ni6Lei+zc+tgn5tmR3abPuGg8dLhnZbMcAXFtsKhE1mJSSE+p7HJcVFsp5zbN\niHedzD96s6JBRuY6DX7zDsPcVrvZfBjM3N5np5fBfZ3/lEnhITnBGx/NL+zu\nXVf0zRXWk2j3ChwbE0HXxqOpK5kqZuUR2CDDH3yrIU8tvPNO1FEEuuN9vGYq\nP47KgeIVWeMI0gwoHvyx+rusVYVf9xAa2fWmZCqvTri/+jtAqQoJPG/VcBjU\nsqTcAeRA4Vyh2JEwZMusHrd908C6vv8IZBhHmkHKuWIYuZdAk97wdLC/nws8\nhhVACW7Bq5AsqVOD1FLjOS+EyM6RqerxEVE+q3wH2gKW6yNoWj7Iv8xwiP3O\nkquW3nG4R6qFd6Zl4bgO2G9UmwA1SVEUUGpnwLNgkYtvDutTR1cRVylspTrm\nQ+VvOSlHbSve8b31vOBNQfOFPs99qoFP1zzjqp6JRIFDP/mwfocSNbWcm+g0\nX3XjJcecA0xkv8xuCXU/ifhFY1FiiKh6XEO3gBXj54fuEDTZWRWL3lcUr2LW\niFotJnqaXhVrKpF7Ih6c+dZ6ZOOwSFA0Qoa8EwiOWu9nGt/f2bshZ/rbInGg\n2f395PBWff9w793uwGh6yJPg70fIvEWdU8SBisKtJUICF3jTJIcMJh2f8Um9\nzuqs2YsavV/h7SOxqXDFKCptf5d9DI0PJ0box3xaNDvcutHGLpPxMOAQdQmS\nQjfHP/bi1eCPB/BdUMfUolyI6wCpuTi5+5zO1st70uDrkfUeodWIGge5cCKT\nMfEhtrCmWLq0OZlw959rg0pwVcOGh/toGKw6f+AqTS87t/iK1pCagNvTKipF\nAH/xZp3wfY4eA90gqoCgXXvEXTvP4Zp48quI0l/JKmiqqqE5Ov+U8m8IayVy\nisEdjk4DPB4dJC5DLw7BuqgKEQszh5KjKk516FSJKeMN+/C+EQnMe+X6BCSL\ngIuoi6vAaeAU3AWlbpzlK9HNKOL1jjc5W/oryhghJNaXXXU2pNvWzs0CWvqT\nSA/Ay8a5eJClbirfVzuO0DRAL3Lf5vGw7Kmch+rd1x3L4L5nag7nBrZpdqCC\nLgno0R0pkO32AyCFPw7DTqi5qeavIAAXXVQV+jpWosIXqIlOwheXal5ti3XB\nXaPELLVRO2iF5Rt3oxtinnSAPJqJUduV7KMlGVAIqSSL4a4A0YIR/lR51Iqq\nulOHk1OWMLCSf5+TMOnrm7MqPzmJ0jKQvj5inT63sPVKaNjB1bEhWQTv3umR\nBk7gxapNfuwh7YErPhTrjAsHHv3PKmim42iWhMwe6d6B5bknZMuPjI5IwF4o\nvMd6qc1GmKp5KIcMYrMOa3pcRotpXjA/1xXzxJ3iBmBUyYAuZ1PCPFpvRbCq\n31JfJILv26y6MPDOP4X95YS4I6aA3f+8y7XrxYUoBQiHH2lUWwO2iD9UVCEg\nJXgrbvQ77pzTY6BbnNQvmCyBI4/hV/ZWAqmDpsnVfMbCQaTZjU9o7C43Q17U\nNxsKNhPlBl4I63+WwVpZY2wx8sXXwMGGTPpjhlKvuVYjA+JIWrqeEQgFHqu5\nLigP51w5KIO7IZ7TYALiESTV1hgeM3koVFflJGgch1hUdMZGUXXD3UDG2PFy\n+95a3HH0U9ovjSrX089E8+yyGAVPbDmnxfBLJoEvR9yJjfR8cF3fzkOigikJ\nI7s6r11JUEp3fNsoeiheDWIE+lS5hlEXSixX07y4V5FCTHOHmuk+C5iQeGzM\n5wFgOWx+cHswk3B6LaJagPkyjn6iVNWEgDPpZRDNB8KSuYQN4IDKeVQgl/Xl\ntL6ez9zEH75c6P1xQ+XUY5XNBJWozZnOXPLa5DC21V1SwVBchn1d3zUBGPcq\nGw3Jq1xFZ04NU0iVsAb+MWKogqzNdK8heXAKalbJSsfissOSPPBps3wf/qc2\nJ0P5QtkdhCBzXjcUYlkMpH7jW7Dk08Dz9txAXX8z26WFLasq+m1BA6XBdiA6\nquj/nolWc20h4DhwEYMQFPK6eHnwCRj034Nzyq4klSC9ITih/Sbd+aPjf/Ed\n3/+hZSXOmAORhisCPZHu1MlNds3VAyaAculh5J4yo+O7OhdS6rhsfdd81gkV\nLmjte7gFKgzIRf4CVw5yOuvu2QNMkkbI8iaEU6nspIcLHXEDifjins+7ZykY\nn3VWDnXS65grqop6B4uMHTD7RasAiP7rZ34RdXVvb2bkdMP11IBeHXAAyD4Y\nU7mx1zlGzqZ9RVvFBpU2XbeV+Syv8mhB5a/vbMzhXGqEi6UXe+q4dl2sIs9O\noZ/AC1P0dbohRyqCpTQfNnEQWIBra2vlXBHSHC28cQ97eE6QPITqfgGHsnRV\nfKFmYfLCdNTS5VCU+/nKZtzx240haYlDh67zoub+L21I2TOx21bOlfEV7p/g\noAfUcSwOfF8NUAPp1njxr9vCMMcCKDAk5YFp8uvR6yD+DSiTmRaeyJu7Ipqk\nuraIZ34ZyKnNpPnwRKApHe73pz5o5X6iYfby6nqCTeURmQwJsO0roOqDHVG3\nQcOp7Hc9z6Gn6jUJrNrfYCEjZxuI8PMfZcNqS80ozda+BSAikfuJ+524mNHu\n+CL4NIg6B5b3W9vPMUkMOiKbKTBqCytYWdqOxBSe810PbQw6lJLe/l4FeNru\nyxCHM5f2THKbad4dgZVSeJ7QeNYWZoX53Xe1mhoSoPbYFicMVlucxBYzenTE\nl7GJow3YNbxibwfpSzBwQhKOUmcsgqSiaY0crBnVp99QWRJl48h0lxpkvWFY\n84MONXJiWKI+jcUAeTzlEZdxPEwWsm5nYfbA1IPwlHzdrueJAhWgbJL1i06o\nTOy/vJJzv62lUhU/zPTmdsTulHxgYkynH+yTR2fLiovNfWWnnjcs+6o3qBG3\nugn8nNBcSS08IeEfUc1/tUwI46MJhv13LWjwgfxlu+9LKf9DTkkUJBtUMV9T\nkRjYgLUMQtR9QoxS6ZidNS3ICcWH7cK0DS1wJD5Xegbec8cC+KeQJyOILWc9\n8k/wwgBSE3bnQeW/Q7DmxT0wu4nggyv2bSnqvbmlI/cHZjQSToLIRVHfOed9\nE0zfbDM0tUgCFBb0dBweuIAl7Y8VZY6hVv32gb+4dkYTF3M82WbxPHdba801\nIN/ad1NuuZAZMjsRjQr06MYgTib19e608DTlqGKS9LlUtydYdAMe2J1J4HHp\nwYL1Hc12HuZqWDrTQyTQb2HizWKEuInYflU9PIae3g1TiEkQibonqqjguZCa\n5SjMTsxMlQWqErFoanr2wMskq6Un5VWLRZwrFzOhhAsJyvyVghDx9gvwgwIm\nAEz8FSNI9EXZrKidyPNMAiv5VUYNdxKE9Wt5STULFG7tX/3qhniN6kPuSKLT\n6zqrgDpSPXvVTfu7md8Mk0ELoz1UwBNiMRqkC9xVHPEyJlM7niT5XuSVmaJP\nD6X4uUjvnVPrytC27pi84d61rL0oU7q3pk6LliLEN30EWlZoct48qvq+fLc+\n2YbCVBbqi+QVJmQPhFnh+cFJttbG+pKUJrB8x7eqHoN/Q5yzDGzFXwi1nhhy\nh5cQK/I/TVn/Py5vFeR9AladOzFpnSysOK48wqreQS2CHw4BLvFWoM5PT0LI\nqD4woYv4/pc6ma8+b3Fdge5XEDzW5yBmnkVWFXOy7mtC9It3fqFCC/5gJiVx\njqeaNdyna+w059N6eVwnOLACmXuPWOdZWiLctQZGjL4ERkR9yGW8UdwZrd3q\nQLGcTWBJE8pmuhfw3oUAa483MdVWkk+xZwiaZtfAeVl9wpKfp85A+g71Gj5j\nLCL8Kbp10N9QsTycmXafiuGO6Ji5pT9c8l6qiT3QX96inkX5Ja9jlGNmrh+h\n7QkvEBsJFhSiLBKd4eQ/Fb4Di775SHxHhmj9Sxz9uvdCaz3UorddcQq8+inM\neB3U9ZDRjoPt6u0cgw4ow7uZZx5XL/SupNmD+kNvSj1VQLSqJuwuGD+i+dOk\nz9VPsU0gYEQ2/e7t875tgU544q+WGao5Om7cfCQelaj7HG/kSzQg3Kux8jmk\njneItVynB4M5WWmUWeU2CS1+L5LplNXkuNS2Ob1s+Dq2nXQzThjJkmuv6iYx\nu9iyJvfd/Gi4+ECgk4D6XXNOBk/v/EQy1SFpFHTGrsIB26ig86xauemGYN9+\nJwI1jAOeUsrz8FraKnziAk9kMub2zIQ5nt1iMx0DxNAFT3dNl8PKhjvKXdWW\nbnFe+FvXtnusIC/kMsC0NlsPm6RJ936vvCJBkSJ+ecwmTLTykleu1Z4eiRAL\nSkv66ufoX9fTJNB80XR7vCF8YbVXG/V9/ehGUKF+yn4T\n",
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-01T21:21:45.057+00:00\",\"changed\":[\"cloned from \\\"CSA U8L7-L6d_2025\\\"\"],\"cloned_from\":\"CSA U8L7-L6d_2025\"}]"
}]]></config>
</Javalab>
