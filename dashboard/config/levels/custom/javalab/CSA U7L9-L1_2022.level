<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    String loopVersion = StringEditor.loopVersion(\"Computer Science\");\n    String recursiveVersion = StringEditor.recursiveVersion(\"Computer Science\");\n\n    System.out.println(\"Loop version: \" + loopVersion);\n    System.out.println(\"Recursive version: \" + recursiveVersion);\n    \n  }\n}",
        "isVisible": true
      },
      "StringEditor.java": {
        "text": "public final class StringEditor {\n\n  public static String loopVersion(String text) {\n    String reversed = \"\";\n\n    for (int index = text.length() - 1; index >= 0; index--) {\n      reversed = reversed + text.substring(index, index + 1);\n    }\n\n    return reversed;\n  }\n\n  public static String recursiveVersion(String text) {\n    if (text.length() == 0) {\n      return \"\";\n    }\n\n    return recursiveVersion(text.substring(1)) + text.substring(0, 1);\n  }\n}",
        "isVisible": true
      }
    },
    "name_suffix": "_2022",
    "long_instructions": "##Investigate and Modify\r\n\r\nRun the program to observe the results.\r\n\r\nThen, experiment with the program by making the following modifications. Change one line at a time, then run the program after each change to observe the results.\r\n\r\n1. Look at the `loopVersion()`(#e7e8ea) and `recursiveVersion()`(#e7e8ea) methods in `StringEditor.java`(#e7e8ea). What similarities do you notice in both methods? What differences do you notice?\r\n\r\n2. What is the purpose of the `return`(#e7e8ea) statement in the `recursiveVersion()`(#e7e8ea) method? Try changing this to a print statement or removing the `\"\"`(#e7e8ea) then run the program to observe the results.\r\n\r\n3. What do you notice about the recursive call in the `recursiveVersion()`(#e7e8ea) method? What does this correlate to in the `loopVersion()`(#e7e8ea) method? Trace the `recursiveVersion()`(#e7e8ea) method.",
    "encrypted_examples": [

    ],
    "teacher_markdown": "##Investigate and Modify\r\n\r\n1. Both of the methods are relying on the `substring()`(#e7e8ea) method for the `String`(#e7e8ea) class in order to rebuild the original `String`(#e7e8ea) one `char`(#e7e8ea) at a time in reverse. They are different in their approach: the `loopVersion()`(#e7e8ea) method traverses the whole `String`(#e7e8ea) in reverse and cuts the last char out, saving it to the temporary String `reversed`(#e7e8ea), which is returned after the argument `String text`(#e7e8ea) is traversed in its entirely. The recursive method, `recursiveVersion()`(#e7e8ea), uses `substring()`(#e7e8ea) to remove the first char from the argument `String text`(#e7e8ea), adding it to the end of a `return`(#e7e8ea) statement that it is constructing, while recursively calling itself with an argument that consists of a new `String`(#e7e8ea) minus that first char. It will continue to call itself until there are no more chars in the modified String argument, at which point it will return the reversed String.\r\n\r\n2. This is a way to stop the recursive loop when the `String`(#e7e8ea) has already been dissected `char`(#e7e8ea) by `char`(#e7e8ea) in its entirety. If we attempt to simply use an empty `return`(#e7e8ea) statement, we get an error since this method is not `void`(#e7e8ea) and is expecting a `String`(#e7e8ea) to return. If we use a `System.out.println()`(#e7e8ea) statement instead, we will get a `StringIndexOutOfBoundsException`(#e7e8ea) since it will continue trying to subdivide a `String`(#e7e8ea) that cannot be further divided.\r\n\r\n3. This recursive call is essentially traversing the entire `String`(#e7e8ea) by removing one `char`(#e7e8ea) at a time and then processing that smaller `String`(#e7e8ea) as its new argument. In this way, it might be compared to the way that the `for`(#e7e8ea) loop in `loopVersion()`(#e7e8ea) traverses each `char`(#e7e8ea) one at a time in order to build out the new reversed `String`(#e7e8ea)."
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-02-26T00:32:25.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-02-26T00:32:25.974+00:00\",\"changed\":[\"cloned from \\\"CSA U7L9-L1\\\"\"],\"cloned_from\":\"CSA U7L9-L1\"},{\"changed_at\":\"2022-05-11 14:40:43 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-11 16:28:22 +0000\",\"changed\":[\"encrypted_examples\",\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-08 16:53:34 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-11-08 20:58:47 +0000\",\"changed\":[\"encrypted_examples\",\"teacher_markdown\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-11-08 20:59:28 +0000\",\"changed\":[\"encrypted_examples\",\"teacher_markdown\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
