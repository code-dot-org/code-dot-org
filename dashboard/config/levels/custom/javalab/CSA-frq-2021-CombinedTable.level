<Javalab>
  <config><![CDATA[{
  "published": true,
  "game_id": 68,
  "created_at": "2023-06-20T13:08:50.000Z",
  "level_num": "custom",
  "user_id": 19026,
  "properties": {
    "encrypted": "false",
    "long_instructions": "##CombinedTable FRQ\r\nThe class `SingleTable` represents a table at a restaurant. \r\n\r\n```\r\npublic class SingleTable \r\n{ \r\n\t/** Returns the number of seats at this table. The value is always greater than or equal to 4. */\r\n\tpublic int getNumSeats() \r\n\t{ /* implementation not shown */ } \r\n\r\n\t/** Returns the height of this table in centimeters. */ \r\n\tpublic int getHeight() \r\n\t{ /* implementation not shown */ } \r\n\r\n\t/** Returns the quality of the view from this table. */ \r\n\tpublic double getViewQuality() \r\n\t{ /* implementation not shown */ } \r\n\r\n\t/** Sets the quality of the view from this table to value . */ \r\n\tpublic void setViewQuality(double value) \r\n\t{ /* implementation not shown */ } \r\n\r\n\t// There may be instance variables, constructors, and methods that are not shown. \r\n} \r\n```\r\n\r\nAt the restaurant, customers can sit at tables that are composed of two single tables pushed together. You will write a class `CombinedTable` to represent the result of combining two `SingleTable` objects, based on the following rules and the examples in the chart that follows. \r\n* A `CombinedTable` can seat a number of customers that is two fewer than the total number of seats in its two `SingleTable` objects (to account for seats lost when the tables are pushed together). \r\n* A `CombinedTable` has a desirability that depends on the views and heights of the two single tables. If the two single tables of a `CombinedTable` object are the same height, the desirability of the `CombinedTable` object is the average of the view qualities of the two single tables. \r\n* If the two single tables of a `CombinedTable` object are not the same height, the desirability of the `CombinedTable` object is 10 units less than the average of the view qualities of the two single tables.\r\n\r\nAssume `SingleTable` objects `t1`, `t2`, and `t3` have been created as follows. \r\n* `SingleTable t1` has 4 seats, a view quality of 60.0, and a height of 74 centimeters. \r\n* `SingleTable t2` has 8 seats, a view quality of 70.0, and a height of 74 centimeters. \r\n* `SingleTable t3` has 12 seats, a view quality of 75.0, and a height of 76 centimeters. \r\n\r\nThe chart contains a sample code execution sequence and the corresponding results.\r\n\r\n![](https://images.code.org/f4562dc3619e740ed6fc023856e0f2a0-image-1687368547601.28.59 PM.png)\r\n\r\nThe last line of the chart illustrates that when the characteristics of a `SingleTable` change, so do those of the `CombinedTable` that contains it. \r\n\r\nWrite the complete `CombinedTable` class. Your implementation must meet all specifications and conform to the examples shown in the preceding chart.\r\n",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "encrypted_validation": "ZJ+6pxzZmd6ORSZESKddS1HvMCime0fk4pjTVWUBhoglKCUdYqBdTqaGlc2T\nsqeTFdi064TTbdD+Z0Gv7lOVovWer5cW5klEl55UOdY+dUE=\n",
    "start_sources": {
      "CombinedTable.java": {
        "text": "public class CombinedTable\n{\n  \n}",
        "isVisible": true,
        "tabOrder": 0
      }
    },
    "encrypted_exemplar_sources": "7afUpYrXL8cx72ExptA398C9uaelDLoRKfxVoPMsz5M1oHdT9oq6YEp+/SaU\n3HY/7CXp32dcQd2iYM8Yro6OgeT145yWQ8QEosAWAzgWYm+jcDcAynrT62Jk\nGMiWVONtsZKoecwVmDMgOTi6XVqIEa+PNwh4YUA295MAgYzuJ4xjpA56ONrA\nhuhgc4mnqGy7CXbDD+NBBbgW9lGqrMA2RUvItt9fjEk8dMqXfgIsID+nbVxA\ne2tJXPM0IciA7ZOR3uCFFRoXOBpImoT9PI0T+m0qKfmwFek7JuCYeTQMyuDZ\np9a90LCPByyyZM4nGDIFsyeCLBopHhe6c10zAos/tLuMKnIB1ujBWgkau7gy\n0CuHuPp0ugAQaCPMznP831pflGOwT528XP8tkNmTdGoujCXqueaFYmhawXPx\ngQDKlTBNXeJTbf7JxMU+6h3fPfQ7dbyjS7Lpk6s8ntITiFBe9gGWIMzbrOyA\nSPlk8Ge1a1BCGSX2v0AQvGnvdc4fAIvgGpux/7AxFHj1HZmjv8iHt6Tlrg50\nLWvRpIJw13IcQe1RjpkXuHAnvf16jSMM85/hcJZ5phBLYeJjKbvqR8Zx5+Hw\nOLFjBfyhCFxWGO9INv9oKrIFCrG3kNN2ldjYOBUCMpfGtutiGrp47SXvt+Wi\nwudspMZ7BG2xP1J0qz+yyFi294F7W7biB2bLDIOfdDMrkka0uTrrIBq6FXNG\nIiWdefhiy1/hFGjrHn9qbU7k4+k6td7a4/xADvwSxl2gT/27TmWJ/1LkHMqK\nZ5A4mnGc1Cfjb+PRmSD3le4528tQOmjLr/gV6NCYAVirmRqB9SXHkLeEI7rB\nrXP8gx+EeozFUjb80n7PKt2SBAyRWrqkBLa6hi/nJ5F3XJw1qQL9MdnJq5hR\nGH7uiajiAYyf3f5H/Q==\n",
    "encrypted_examples": [

    ]
  },
  "audit_log": "[{\"changed_at\":\"2023-06-20 13:12:57 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 13:14:00 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 13:14:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 13:14:33 +0000\",\"changed\":[],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-20 17:22:45 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"},{\"changed_at\":\"2023-06-21 17:29:23 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":19026,\"changed_by_email\":\"brandon.spellman@code.org\"}]"
}]]></config>
</Javalab>
