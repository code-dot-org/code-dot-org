<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-11-09T21:24:35.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A hiker wants to keep track of the national parks they visit.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">NationalPark</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">area</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ParkRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">NationalPark</code> object using the parameterized constructor. \r\n\r\n‚úÖ **TO DO #3:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">NationalPark</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getArea()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Character</code> class to get the current values assigned to the instance variables. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nNationalPark yellowstone = new NationalPark();\r\nSystem.out.println(\"Name: \" + yellowstone.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "National Parks",
    "bubble_choice_description": "A hiker wants to keep track of the national parks they visit.",
    "encrypted_exemplar_sources": "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\n",
    "thumbnail_url": "https://images.code.org/5d0890086e735d8cd65312ea190e8da3-park.png",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_validation": "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\niacBur7ShRjX0M4=\n",
    "start_sources": {
      "ParkRunner.java": {
        "text": "public class ParkRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a NationalPark object using the parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "NationalPark.java": {
        "text": "/*\n * Represents a national park\n */\npublic class NationalPark {\n\n  private String name;     // The name of a national park\n  private int area;        // The area in acres of a national park\n\n  /*\n   * Sets the name to \"unknown\" and area to 100\n   */\n  public NationalPark() {\n    name = \"unknown\";\n    area = 100;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the name and area instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to area\n   */\n  public int getArea() {\n    return area;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "video_key": "csa_overloaded_constructors",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:24:35.756+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L3a_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L3a_2023\"},{\"changed_at\":\"2022-11-09 21:24:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-11 23:58:04 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:02:34 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:17:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:17:13 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:19:54 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:33:37 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:45:47 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:48:15 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:55:09 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:40:18 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:47:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:47:52 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:36:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:41:10 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:41:23 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:41:26 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:58:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-02-02 14:27:32 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-14 18:39:10 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
