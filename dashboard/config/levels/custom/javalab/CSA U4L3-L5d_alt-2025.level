<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T22:03:26.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A content creator wants to know how much a post could potentially spread on a social media app.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Creator.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcReach()</code> method to calculate and return a 1D array containing the number of people a post could potentially reach. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcReach()</code> method should:\r\n\r\n1. Have a parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numLevels</code> for the number of levels to estimate.\r\n\r\n2. Create a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> values to store <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numLevels</code> elements.\r\n\r\n3. Set the first element in the array to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">startNum</code>.\r\n\r\n4. Set the remaining elements in the array (starting at index <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code>) to the result of the previous element raised to the power of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">index + 1</code>.\r\n\r\n5. Return the array.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner.java</code>,\r\n\r\n1. Declare and initialize a 1D array that stores the 1D array returned from calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcReach()</code> method.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawResults()</code> method with the 1D array.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math.pow()</code> method.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ncreate int array that is the length of numLevels\r\nset results[0] to startNum\r\n&nbsp;\r\nloop from 1 to results.length\r\n  results[index] = Math.pow(results[index - 1], index + 1)\r\n&nbsp;\r\nreturn results\r\n</pre>\r\n    </div>\r\n</details>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Viral Marketing",
    "bubble_choice_description": "A content creator wants to know how much a post could potentially spread on a social media app.",
    "thumbnail_url": "https://images.code.org/ec3d760998fac03d29ad7c4d338984f6-social-media.png",
    "starter_assets": {
      "message.png": "da9e98b8-e781-4580-b2ad-b47fed4229ca.png"
    },
    "encrypted_validation": "mBvTN1QDD6UuNEgIDJjV2WW7fbiXMjdqHSmb+jtHg7GtTu5IG++SIWwZK6ij\nLQ4uP/sLOlCM4bCUWbWqUIxMozHDmBRgpN2d2l0xQTXqRbLrcHXaBLQs1N/l\ndeYAnMSFcWTUzVS2UZVKL/9zBiaDUGadY6GrfUn7vfXozU/vPSgIIlwUFt2e\n/uBSFbzfvyRwh6JU4h1UDNvpxv8ltB6l0Ze4SFZ1xZOaodVzME5uU2bcWeSY\nOs9UfduDn+oZH8V3+pe0Ygp+RGGacyR821RyxmIyEgBcsJAa4slxih/M3tBM\nlPnCjCxydqZEwfCw0m0fU7X/oYD0kzL9Wr9YHQX+cNWTJ6xf2AcEItMByq+G\nF2B0th8brQcY7k1G3fzfqHjZiCl3SUaQkk/mEV8Wwm9+T0QetaiL+535ABK6\nl4gD1bJ86YdcU2sOChM4cXnaxJF/A1Phl6EZ7nFEta6QcgqnUdcHoIbpgWkc\nfBgsh6103Z+rd+GeL4LLQUXJxUU7ugZVf38TOs5HvSIW968V4LXPyTCog0cx\n/qG/+PFj9/H97A0P6lAAWwguvrjY4zd4W3S3C5S4o0bs/lh0qEbohbE+0Ogv\nNyTmAkxO7qnaZ2+ysk2LvrbWg+qj3WLg7nk7dOZjwnsdhBJsAhkk2gN0Vd2p\n7h9GQi+ZEskqYUSO663VrxzY4MHyyZ7BjmXdcZ9n9Ex3vXee0XELeU2GAnIZ\nUTMuoGtHaZWRUNuENNHsH9G28/bi5++LB9VFAAzwBXDSBI5vgKUPYe/pxlr5\ncNhtKlafs3Jn3Ebxmu0dvd5U9k5KGAYfZCKYV3RtLwzAXSyTz4X8dm3D0lS8\nCRmHKY1df3bnC6iQoEADqJh1dOyAZDCvHz+p/valwLdvXqP0YHct4jFWGKnX\nm40wny6oe0rfBf0xp2MWqsitn2C0muIpKA46lIzS3JR7Ytd+OCF8iTimGBQ2\n02Ax7S0aXQjLUQakji5LDC4djYuh5R4MZLOTiU8iCcmiZOUMqN3tzubcK1Bt\n/PX820CaxmSCRvvXy6Om7CyOF/OSlc1H6rk9mYJz5buiLQwlykbRLDln1/Pg\n3acLqLB3v3hW2zS9aiqfQDCxALnjf16n5y9hXvuMaMxjxf+0sTiEKCO6bOrM\nWQUD9Z40HhD2hRA54ZDc8rbwaGXRouYyCGNlKmEQMFv9Yfljw/XZhNgtEFHS\nPw4+XFtOFsGG8vplkLMgcFmEPRiBYXiVNYUWWvPyGhhikHk43uE8pKZC65hs\nsUaGpWeJ8ByoOaSSN7I+abmingK/GBV8BYyY0kcrB0dXtoP6J3rsXCy6T8sG\nLHOxQ21EaPUUVYdB13JIs83Y54wUNoiWKiGcyV3PXgZW94ZrvSzj1A9LfCH8\nJmPui+DjjDYiiq7T7rXTG7X1XdSXsWObF4shtt2rr6PQHVZ21Bfr7ATbtfpL\nU8CgvIuawxd00PfBuj2aSb6KuoJYTtoUV7I4NEES0lZEjDs3GoE7/IGLKVGD\norziAptEY5b3hBKRlemzK6zxpXA9rDqdTtlvAnuMqMNxJ+COuWSMSXjebpQO\nvJwHCozde7su6htgVu4pzA5FqqOWfZuXyroyqUc5pe1BLmAhChbrPmgjLUPy\nD7cyFl+eaAUOMX3xaB+peGxVua9NXXozRHe2G7LEq6XPNJTLk3KWOL/TMNVa\nuEWKwch06S5jNgHBqaMBn3440Gleq0x5U+9nRA6hKUXRIfnQS2L3qeIlawQQ\nOSivPiRtv0N6i+wjxIWQd0NeuiD8IzxFFToXKL93XVJRK+1Gvdj+Ar4eSCyO\nl936m2PBvCePXKQZ51RdO5nXdmW8HCEzFrUTA+rPFmH4ueqnhWgyltsx7KYW\ntjU3VftauySDaH4U6M8PWflku70IhGw5R33WrDdpjuYNKXi4ZKvyqsnDk0BV\n",
    "encrypted_exemplar_sources": "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\nY/fBxxNI9hv8TJkyr0K3SchT3XHaNEDkulspbGI=\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a Creator object\n    Creator reach = new Creator(10);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the calcReach() method, then call the drawResults() method with\n     * the 1D array returned.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n\n    \n\n    // Plays the scene\n    Theater.playScenes(reach);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Creator.java": {
        "text": "import org.code.theater.*;\n\npublic class Creator extends Scene {\n\n  private int startNum;      // The starting number of people\n\n  /*\n   * Sets startNum to the specified value\n   */\n  public Creator(int startNum) {\n    this.startNum = startNum;\n  }\n\n  /*\n   * Returns the starting number of people\n   */\n  public int getStartNum() {\n    return startNum;\n  }\n\n  public double[] calcReach(int numLevels) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Calculate and return a 1D array containing the number of people a post\n     * could potentially reach.\n     * -----------------------------------------------------------------------------\n     */\n    \n    \n    \n    return null;\n  }\n\n  /*\n   * Draws the results in the scene\n   */\n  public void drawResults(double[] results) {\n    int xLocation = 50;\n    int yLocation = 50;\n    \n    for (int index = 0; index < results.length; index++) {\n      drawImage(\"message.png\", xLocation, yLocation, 50);\n      drawText(results[index] + \" people reached\", xLocation + 60, yLocation + 30);\n      yLocation += 50;\n      pause(0.1);\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "name_suffix": "_alt-2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T22:03:26.788+00:00\",\"changed\":[\"cloned from \\\"CSA U4L3-L5d_pilot-2025\\\"\"],\"cloned_from\":\"CSA U4L3-L5d_pilot-2025\"}]"
}]]></config>
</Javalab>
