<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T21:30:51.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Community</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of players that are part of a gaming community.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Community</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Player</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Player</code> objects\r\n\r\n* a method called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addPlayer()</code> that adds a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Player</code> to the list\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">CommunityRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Community</code> object.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addPlayer()</code> method to add players to the list.\r\n\r\n3. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> and using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">add()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Gaming Community",
    "bubble_choice_description": "Create a `Community` class that contains an `ArrayList` to store players that are part of a gaming community.",
    "thumbnail_url": "https://images.code.org/6bf6017b43db174d2b2e91d7f3a85536-game-console.png",
    "encrypted_validation": "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\nvW/6hfY2UyMgfvnJm7Q51y5iFg==\n",
    "start_sources": {
      "CommunityRunner.java": {
        "text": "public class CommunityRunner {\n  public static void main(String[] args) {\n\n    // Creates a Player object\n    Player player = new Player(\"Jessica\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Community object, then call the addPlayer() method to add\n     * a player to the list. Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Community.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a gaming community\n */\npublic class Community {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Player objects, then\n   * write a no-argument constructor that initializes the list to an empty list.\n   * -----------------------------------------------------------------------------\n   */\n\n  \n\n  /*\n   * Returns the list of players\n   */\n  public ArrayList<Player> getPlayers() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return the list of Player objects.\n     * -----------------------------------------------------------------------------\n     */\n\n    return null;\n  }\n\n  /*\n   * Adds a player to the list of players\n   */\n  public void addPlayer(Player newPlayer) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Add the parameter newPlayer to the list of Player objects.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Player.java": {
        "text": "/*\n * Represents a player\n */\npublic class Player {\n  \n  private String name;    // The name of a player\n\n  /*\n   * Sets name to the specified name of a player\n   */\n  public Player(String name) {\n    this.name = name;\n  }\n\n  /*\n   * Returns a String containing the name of the player\n   */\n  public String toString() {\n    return name;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "encrypted_exemplar_sources": "+/pLidk8bp7sOZ6iddoRU78PFD2miMUwuTXTkhyp7hBYKBksLwXjZlfUQB3S\nq6oJm002h/7spGGYlKsNoIplSn3FMYcbiNQFYyl4Z4F6+wCeFqlp+DYW8iTu\nKHKn4u9aEcyUG7h3EcyQyKYPn4mTebZXwCl0C7AHKxEZS6Ctr8KGLxYGvW60\nR38lhLTQQm76b14AJMCPA8b9IvzC1nltOnGO0HL9A3f/B130C/pWWmVmV50K\nv3UedPBQS72557FeiJnF6L79gic/ThHNnlpA9vbldB/19GNP8nypKXCUz5P1\n+zpI3kU6U8lVh/Bqwoi/aWk488QLQXRu+bpK/gQnM+ORmHNLN5NkblBiRiiT\nta9Ch2lkneXW7kG/A6IXbCp89NLZme1DZWHZQ4eAQqkpjBP3Nj1MOnJoxbTV\ngyHOSs0dfo0vqdSux5oCisKY0i0rS8QYDPjm+MITV3O1TCdoKcLzuIP1XjpI\nQTyzLMf1Guc5SgSLMjibYEF2h9MFhaK+nhE4l2YeHjB4W9oyq7SOQ1xDPFkC\nQskDprVovZuN5kFWqYUclIWrI3GYa7vHY7YU01nGS4PUFexMIUgiDPot8MVd\nVfuSVIiCn3aTBejXgwidhxrrSFLV05mfsqk3KoOVJ+ltbu5REWz+3Vfp3OW2\nJmxSuad+iWagf8KyBf5AOxuEYqLFkjv982kArGCIcptkCzozgxdQI+8VjXPY\nGj1dt7XW1Mj1+/9Xn8ShFHYDYIjCIdJldzlL0r05RjpO6P5P53fOQC6t32N+\nFObx2x0O77FEtTh01xsKJ+zDRekj/KoOEPS6X7T9ZM15Txpy7J6d/DbVqRNk\nX4gtCZgB0kTLBAxJ/0qq0Ig8x9ZiMGecbXHYd561Fkf4ezWZ14tp18wGTeF5\ntsW4nDZkSSG3nlol8+2Oo8Px5+0m64Pxx1zz8s++imVd2OeaRKXGOiGvt0sh\nFtc/NdixP4hEFIiLdgH6YC3RIP1iqRjZVc6PKZE9suKCaevyZOzAmMVHAeL1\nkCytnC5FMEsxAt6OitzQkT8C6u+TR7jQP9Y7PFLrzeSGGYZtTU5PrWV/Q7Ro\nFCBI6lwVT4/WDyXcRCZZP2PXqrmsMmpF2NcG6J8hhABjsxGi/KQvak8iIsRU\nWQ+TFizqjGH/KBx7L1QMG9GZanqjhPX7SVAoZEtpcZacU7jD95cYWde9pPjp\npNuEDbhucp+gaQ9nar0YvV++VqCChi4sqv88vMTFWpka/uaBAbrq4HMSZMnl\nsbt+tk76km3FKIMSFwhwUS6T6C2bnOfstYEHvR4gKTruHH7/Dh3M8MixR2y0\nTatQV3rXz746HFqol8ouBUylt3NDNTRb7eg9NC4AMme5doYBU08qBWCqES5e\n56c70dQaKAI9sO7gWmfHbF7GMAXbEuIISDXeWEB2qxPapjg2dGxXbmlBble3\nJ2sxkUN3rdzsycChW/0oQ+swvr+Sfn+vQScMrtstR870WEDGvTb5tjVWkOe1\nq5Ky/QeNt1IVDAu82d1qgLdlQA0titq6QRq9s7vn36C16xlCUCfbTE2g+i8/\nn2DIK0AuZu9GFJE0+Mhguj3yvvyzc0kFRDHDGKPHZXITtZeVDYcDIXu9U+6W\nvyRth8MNvhDHaulse3SFni/Vi/LDcngNRzBB8kZ+FVDyKE3RNysRG8ESbq1y\ncGm3nWtkyP2Gf5J/qJxOJzmggbICvJsRS9NipkLsloy3frQivor35dia6/+c\nCUH0OtxUFwVQWzHaqoG/lr0lZrKoDJAgMZOji9AIsH7e4QngpMMvmSncZhme\n1uysGd5WFOlVdRztpqPtlG4tQ5AnwLEKmlNLk8RGoyzB2jsFAFjKo6eyf3Zx\noVTD1TQR5vROiDruzTART50//eCeMJIwlaq2FQJ1RWMB8BBTN83e1/7KcdDC\nDIXA631osho7aTNVl6RB5rI1/cLUE07l/l7QtItvkMUmqTI/IHlUVENok0GF\njUs4nHW+6+185rRg54rDjydwGPEineJ4WwohRz2Vh14fjVYEvA7fu4SrJ0kY\nyJZ2pFyNFqG2khXGN1K+iG3nkk+dfxAORXTfGKf0dCEX2j84gEEKaxTaWYmD\nOiiPpZnsKepcTDuuGKydg0EmkVOJGJfkLGeznRbG6I8J9y293zJR9Djg7c1N\npxmjEDiS3aW0aJUh6z7I2X6OTrgCbCdnds198ugUwzlcucUMvnVWYGQ7bIAX\nxdM3ydldQ2G9z4htN/bDlihFKt2p1qi1Q2zhto3XG97m9J7BO2oNJgBChVcP\nVArmj3zTI1geb0BEoX7zq6g7GfjdwRTXaqlRdFqZh0c7H062sjnOdzwPpMKF\nXbfBpvxh68MpcjO4ovK0easBfAnpfufiqCSBnJO5WYeG2lgTdOvJigyZWXJ7\n/kY4xNHMeozDKja6+rOFZxVDU9gZ5eHswE0byQ/eGQeCLXsyAjwC8egp3EeI\nchzjhpvSUBoD/sNo/jNjzgWZ/tyZTdXLCklEny+v4q5jDMVHxWnD3zjztvyC\n7ReJrXCLjbl559FuD3PfDAS0waDRJZ83u6qzYVUupukxiFKL9SbxxXpBpN5W\nVOmi9PBs45QNzCYWehh0rwqt1nXp4tUBKMxcRuA3JSrM2qUVsFS9r6nsgS+E\nlbXt3RcARuWuEkslDGYbQaYrUVC035nLOCPJq7rOBVVyXPGxe6HbjlmvJsGN\nNk6/hDPs3aX26jr25etjNowmoRhAMBHlEx2tCHbiNt6yR/MA4oVq+oXX9CN5\n+9VXr4pGhYh0CtKEVv6lrVkm7Gd2KeYZSLtRfKqUS5LsibryIU5oyC7u1O5J\nc8pnSfq7SYcd2ATfNfeFZeruWcgARi7bKZBKW5YvrH4KKX0b2lrVexSXI+ti\n4lB01qJsYXiD+F4C37RSSRp+Db98E4Yy1Yv/ZJEwSzxrtvYLSsq5/PD6nBJm\niNc7+OBRfmwvX/+//bfqVxLYf22PzrpoTupl9h04nv1PanQkikT3XqYbl4mi\nQjYdPiTcntqVB+J2OpCeboHt+anObVjShEtyqqRhDbmoB2sjVR7c+zt9Z2oD\naeZcplzRjX8+Me3NJymBQDtoVqUdpGAZY/OtdYpcmf4dCMuOHAI28V52/3yf\nqEkuVJGg2teBY2zFfn9JVlY3iR4S9AAtU/mtrxuqfCF6Q2GyX+QOO4hJZbT/\nUtzLrnc+pvH28NTLbd4ou9Qc6fdE/YTawDSXAczI6KeF0Hj9N3HsFmjwxfYN\nBHMFX49WXkPLZmHhwmxJ3+x6xVJ1URscm2PT8urPDg5aoRzA0cJhkJfnbAhi\ngT3eF7cWrsNfMcne26dUZ4lXMja3e0vQFID4mFdJ3QiFXcZ2NMQpbmcnMoTu\naEeDfk1Dv4j0KQi/yPr4w39nekjLn8h35TzMfs+jOQmeP+I1zM6DLLKpegHR\nLD+G/Fm4pnvSOZ6Xla6Qpnb9Cz0kV9pBHLChGgeC6QmCrrvKBzQEiQdg9GrF\nCm004jHywUL7EhiEpJU4PGGQojb3iz1e0bGMauxHB3aN8ptNlrnodbHt50Ht\nfRweM950Y40hG+SXdV/MBpbSZDJ4u+mIuXzuTzcUa1qNujwsPSiAu21F26YM\nH/QJVH+qwt1cgPpagBleY5ROAD64imG6i0Vhppr5+x1TYraomqe4Y+51vY6y\nVssOaHmaPurTxoEFKELyOFVys7em8wuAqAuIRHjsDq+FhHwD3vIkE+Uzym++\nq6ZC5xSMPf4QBgCqoOGSNs58+WrGiERkueaj8wJ8V2l8gIdl1SyvT0V+MZVd\n4mEraiYqRUh2KWsJtnA4yay6KA6EElUYxEQ6FTykVTlIabCyij3jEVx4kIBO\n7lRyski0UnPl69xUwgCRYAnDAqY/ENdCwfmQyOvPaz4tlEx1Ns/pgrIhF8kP\nMTZ2AhXDiQO/KG8/gTSaIlH8goybswIY23rr/UvXvZEVCKAmvIaJVYiF1ukf\ngqpuSki2UZbQIzdotiHQ+b2VJdwzHcKpusEkrDzmXDw4jAsfFbRa/mlVq2tt\niCPfiskHtRr05jiMhGvTumXdggGrN6gzn9IxyqIdzUMknHMTry481/EyS6ER\noLhTdB8CuyqqjERu8GYdulzw7n5z4WmXuFLsIINZW5uVKzP7yy3zIkB/+2NN\npFrj9UXkC6qTnLrbYtLhSQYemwEXqXwE30duNqHB8cJMJW5xCDqjZfptvyXM\n+OSo6KMOQtWjcOfuzpnipaiS2lJZaWr6eIy09u/YgRk1JQ5oMMEbc942bL0q\nETU5JxdlLfnYzl+PVsaeMkeN6q+hJ0snavf42hKKTY2TdMbllPvRpLdXlDyf\nupKW9/EERgf4St91VfDSZFha2zLfgzklfBxNEBTPUO/nr4Qodme5XycdyJU/\nMqWIBrxgXxrZDZaQHKX6W0JJYtWsasI6jFHo6kf9ZA1PgwqQuhVDfsPOhJ0s\nwFvhJ/MVwxgLJWPoRYmwecChb8zgPfbDorMMvyIz7yhxbHU0FuYJ/a6R0qVI\nEgmBULNhUmKyvUgaLEeX9e7uA0WZeD7b7Fcj/DDW1QFrQ1uHLKqPbZ3QHXTb\nvjOT8Ps/MU8Lad8p7drjNLm1GHSMTtAJYC52NUcxy37/5iNmnOVq3P4TePLn\ndSAJXFumCbF3EqxpvyUvj1sGR62guSkczA2GiAP/+9UweYX61dld2wCT4hgy\nneVHm3UnS3kx+BC9mshNZqjAAhclLWIyFjDpFjHorUHaxvlUNfzHonjcV3x6\nKGYaeqvwg+OZpu7absSdqFpIypaBKdghSYkmzErCPtgVEM/DGNgnqLXY7nN8\nJZCnRvYS9k8tzSqJDaTXLmnm+hw/gjGoVGruBYqVcyR/tqn41KUmJsIVR237\ng20EH8RCMmnOSgFRp6IdYIMHQAgesK0iV6DLLLfLz6GTr9jXIwiSoHpc8+fN\nOnUL9DZvuxC/YcN3If+FnNTH5RcY82E8Qq8TB7O0Ku6BCA9BZVNlaX39F/LM\nE7KcR4turge44sOoFcSj5uhHLwKLT+RqH25nlmx6XuPqRrIZbvhXlZJefXxV\nFfqtPGy5W4wBPnBK+UYoX3zUVE4lLuc53ayEVe4Jr1EocjyBT2F9ZvFSZ75Z\nL8fvsktWAt2P8fjIRfYIYCgnnDR1i5mlJ1IHOPVN428yp1Ib6DNuMxpms+zT\nK74d+KPKvz/rE5v55W52r3Bl88sStwDGd4WbZ16iuBWfzgOeLGJ0nbJHIb73\n52gxCToDz4Mcl+5lPMGeZ1ItBcePRALNvftSQWNwmP4xbjb8mt3eG+RakxDB\nFYWydXkXcNPDhibaY2/ZASnxkSRJJEUrA44L4OMRnGELVtjlhMX9EWCLxCnH\np9bxuuGnZ2Z2lIl6MGNE05XZWJijWe29po+F2O6NaaowEkS8oyHh5AWUTkQf\n8aBqEP595wbLIzdM91irGloedAvglG+laUGHIsCq0009vOhhBkCXRiHH0JyM\n33SBHsqheL3pRwYyOmuCc4NsWOEOw7XpV/3lyMRptm1hpeFEvtQW1S3PYmFj\nuPLa3Hgr0LReMcYBc8QOj4lhk3rLLZyXEWcNfdhsQAHnhsbjddwUlvWh6hQE\npE2mzARbVyv3I+P+5MefO5qOW+7V2Xzt5Cit650qoarqFZY9/Q8ZAkTQzJzJ\nPERdvbRjicaz7t5N3nXaLOk3OgqIq+tvaxRmP5fZg4W9oxE0lAnM3bjj3gy9\nLjFswwoHB8vW6fcecF0mKkH9dgyZIAKsmmelMrwuJrCU7Le+VhYLj2nrkamr\niNlWLDXhkE/HWiOLdxjclZaLNj5dKTsAqglCm0IVmiJAUpDyJIYLfVT4KUXm\nQMPIQcheHk2xxXVC+dhDI2jAaaDMGo86gMHnsOasPXck1ncsMncOakOL1wrP\nxzKAbJ5GedKjtJxSViVAnWE+nYTz6CbVpcTZLCvx0iEiilZQcAWdCZOwMzOR\nTEaOGHmTRPaj+3ASu9Qn6RQrGBf4GoaWDxBOIIpd3kwm2gsJUl2+wRp2B8ie\nTWETIrzslHiCu7NZf3kQkFabSefPa62OhEaETtCwyF0XDur1LVCdCWycC1h3\niso8HZ5UwMMT6dzxG3voHKSzIeNUAGU5/JzDgs1qMaxYv8dE8K1sHb7Ps/ix\nwuETxw7OsB9ZfzFqoMt0WYgzf2F2TE4o2WxKdXaLS6Rx6HtfaOKmhqwZnd4R\n9COQK+sq+gWXViEHiYSj9Ev9zta21aoyh6wvHAfIoGAVgWSL4SsZzgvpFiVi\n12rfDQf9f4gQFulQqGjzMqNopUNmPulEiL/NoCP1y2M/6aEh14l92BhZHKCd\nMn08nQ+RuV+ckFhirteRYITFakodqjfhIvZ9FC1spGqS9ghV5ZUQKRbceLGS\nWEgdysAUQL2VcjpxY6FjdUaEzGXYryztr1ag0qlHYgzGuPf9il0VRYgpxRa1\nec+rQT3t9YD8NSB+ycDe2CpSxCqmYl8cAzDKywrGHzBp4jwv+zojarp/2N40\nKIM+c/DktmHeLHkMrh8YBD62a75igQFDJYycFgGxhT+9JbsWCFnXD6e2S1Wf\nvDHeExq/qKnmMgcW+9Oz51daJyiwZYgucl9CTTxD5cA+K6HQtQkwM6u0en0s\nstB9lfeR0Slz1jRigjl+ns2fneNiSKfW/Nz+UPBroP0u+SWcn+Y+i3yREaao\nkVIJi4wAF3MdLZY0h/IXrtEIYzCyMolx9ZasiRw+8+dWTmNQoNLE7yVUr0Bc\nI9aIjvDovWkBxD48f5S4O8u9Cr16Dsatpnc5gJ+qoUns+WXhKOshVxBTsQFo\nBk5vB8uVrtIqhj6f7vIZjQ9QtBYq+73IFSo262fgmn9GOPg7TMlOxvawbVkH\nmoqsgNNlCNdaNyON8WSPhwJB/AaKTc1cayTOqMTHpUcOvd3rvcGL69SAGize\nRd2ustBfMX51GosaZ4J+3mh39ZiIYgvnceCv7Yu/xfNrciwGgDsUiBXEjWfG\nS1Hg/1RHdNIMss3UeSvwxGlhMZ00qzF3O1Uz3Upq3UGyAVfjGzevQuC49VcT\nO6nHFfa0mhRenRtCVNrPoduyca8cCSSITzucSSzKIdl8KMG/rchDeS/OSy6C\n9nYPcgl/KmfNvjTtz8GYk7gwk6/hATcOkVFzv0vMgQ5KqKRwjh7ZRlQn6gOB\nUrsrjh2cQTerVAznzetz3nHLoyTUN2sZhnfW21sXGbKIyvY6t4Lqs79+acbQ\nLAqXCUMC3u+6sJUxq/q++V7xZqriqXyaX3bP5NM+Is+Ed21zsHi29clV4mQK\nxseVTuWqiLFMR58we8SrtjmAxFJmWD+NNRcmxlVXL+Gr6O0u+MFVo/yzVYgg\ngXoqBtriHArT0wd3hHQm/ijtW6UTGiPOQzaDG6NAHOyVsIavlG85UUiQbVTG\nPsnbHqzsVS6lZaGRgqpGaa0RJ4fX9teFqAM6F/qEqos19q8jT7a88ah2lqBV\nAHDcRiYARVOethUbIvOxGP2IHdRWyDKMLphtqHYiiFRJT+kNqCB4dUbvURCl\nFs2yfbykch3C/yAjwvIix1PnvQBiJHf8qDWR8yXX3x8AkCQnMEIag+tyd5On\nQcQGjUDcUeIzaABi8tWL3/uRGu7RuHEgtGLU41gdH5m8fuQy4VUnrVcecgM7\nxdenUjDrhwHRAdSfa86Jmzi0hqPJRAfjFCnKiQFBRPr5yWIfOywngbaY1f+/\nB44hX8g1+pdZMWz9Cele++/zacON+Q5ZONRDKWe7Xjl3q4PPIDvKbkDMlHJS\n1nuhm03NgdwNN6Ok/UzKcBubAYK/TkYE0o3IQSF43LXVI7V5QL5aEhrOkz/D\nzAHG44+do7yvCoGRLi4kfrCee7OQJZtekijd3zs/sO8yGh/CdbtzNzeSEksE\n9HXk83JuVhyMjslwpINVV2sBtIbrh1mAAykhyxLvcGS+lnCT9w4j9+TM7w9w\n9RmohbyN0bhT+xxGYHg3UXCWlwYxqSywcrzpxMI7DweBY+vL3n35lbOVGQcT\ndtFGKsTQSV9J1mioEJ4EOrWRQ1Xg/zwyhnaPCyTi2cxLeBAssZfBhtPee1fB\nzgB+gEwzWxzcgCAu2ZoMDheIqH+v/CUAqJrfbRAfiZYE2OyimmtLg6dVV5fz\nyKAQz8e436LodnvxNmZnv/w5tAN0Vv+ewlIpYET5H6QoCA09018idmqn1Xnb\nnSFvmf8gsCl6EFF3kPfea6ZLWZNdKGFu0Js85McuIgkbEvJz8v0VWn+zVAbx\n81YSL8SHYIiFmDPrWY6v19BzY1E5p2+fgFEjb9cHV6/31EWgjwxruBVkl5iG\nIbJrdnqZTlppfPEslH2SZEUtNUmANc5IjN9JmYZd2pW84yOd9mrmyTyVys1+\nUBaHd75cd1tC8SzEBDzXa3YqqjLl6XA33uuHnAdz2ISPCFMbflgvQnRFATAu\nELt+ad0RGjCXx3vxfmqyG1106e/u8mOPemX6jQA4XT7WKEFWGXQ3rH1fJCJX\nRtzyUfAI+pQxYSh1X4kyoATdOlEr0lHuTBnEyyvs9WsLeiYwKh/EXAp2ufen\ngMXSJ3477iXGuZE4eMTWfhTxSCHeQbw2tceJ9lgmEFIEjqBCJzDcTHxozCv/\nxtRCLExjvyYrFm6iFWEVuVFlNwNJPmlC7UFMrvOkfvaQbZDany5FLaPAidFc\nZyoSSNauuoZCX5B0OvXfqqCSYPJ66jvAvncN32yFtGqq6fo69plcQVLZ0Us9\nVXqNsNVeNVmSY46i/vlcAuDNInFDb88VxAe2eIGwH/bIUnEyLFbKFfM1uWeq\nAJUyXMwwNEmxtcsKVHego0KWiPbIePKvHXi39Hk7exFAopJRU9tbwZSwp59q\nVQa+hXeXbhL2FKWI5JouNm08zDudPIErVEiHjxKQPZn1SiwhRy2688zaoX5u\niTkYemnY/baevkkgXKZRkQMxzkNEmAkf5rh8mb8FSnYCsYFupjKpT1kdJgiw\nmzUEquIueTK0Cck2/PS+0Beksj/Ew1GJbjjq7V1fPnwRtYpHmt/SpXK6l9Af\nl0Vn4xAF9FX3fD6ai9pbntRrUkM8NKm5WAcnWWJaNfYuBqcHyJ1uML9SH/Jv\nvMCZmoRcj0qmGC8HPMdDNE74QFyHCqmUkB2Ad68HlWk1UkHlEOW0IacZagQo\nb01/40c6ilLKQ3ztpOLzMk9EOGss77Y1QFHi+jEU2ZYArYInY+nlkmEh2D5f\n+RLmYWsIgcZwQCkMEjr0FXbK8g4qic7QZBfxxO04mA8xOv5kI2x2oQZ6oEv2\nOIMM/mo26PRR7WzKi0cWwVNt/TLmBkVBLsvh2cyfL+8TCcnkovr8MDgerO68\nttJnJDB1CKGGz2nAPNFLiHsfZxgNNaBxd6P3hbUrJFfdn45jMnLPK9qHfYjq\n1y4aTHXhuV1IGWl9+tSzm2x/ak3OZjymuhRTz9LLpiErN/XIfUeWTJxqA2nx\nj9Ep7LmLeXScodOFdl2kk/SATJuslg35/fC9OehjJYz/yhmJuUqASDXu/UkK\n1+ZFbrbZfDoDewKoolLnMpIG4yYG81FC/0PPAxQhzzQBxY1uYONkhd5vHlKN\nq3IQwu8vRUNwn9G+j4QrU/nVYOKEV0Sqe3EDcqWJQI5B6rE/t2hhAC6CivKk\nZUoP5CzdPs2YJzrXK/z2L5RbvulydhHhC+lnUsBwjYaAlIjKDSYvJhc5CSIq\n4/7nReHJ2rnEJKYb/jjnUQyrNoyxp5BNAx6Koh52QTJ354bu/ZN2GZNNtXr8\n0ld8LSA5sxAWzKgwXJTHWEskUZa+UzxZMhFLZsRysm8eBjSezAja+fbYoQni\nQNpDgJ9Bw9tCqJjk309GuFF6sbU6xWJUPgjK6sx3+sb3DVT5nNVDsOliSCsb\nkrYnyMNaDnVqihAoWmJOhRiHT/1H62Z9Nwnvjj3dccgG5DTmc1KdWz9MGKUT\nwWt0LyNBuXjk+gNEiOWJZsYnVPnsZQLs8B5IS4q/agWStMArC/Ycjbm54GyR\noo70IWSXl5E/qDZFexSWP//2iFuJe8H3dV1dgPUp9MhkAEXzxpAjNTa188FV\nx8/snmwmjA+Rzgoap7ifNCfKnzqNB7mXcPSByNdc/zH31FKsvCNFGNTlhASI\nKGQYBPdHv3R7h5tDyhQFpR5jNzJPCVWtOwL9Rl6KQu4TWMSJE2ZzhWYG/JIf\n4aQWIEJW50hpn/WuhwF/sN7dfodiETEcq1W4SK02163fPM48xcMRK75NXn3C\nReUnyEeTQBW1jLJoyKyJG12UAL9ptlUxm5YhLRsCuVnUEFB1OJXJg8lIv6Ki\nSrJLgZSETz1e5KoZ7nOrJ1wyEaeGWAWWJrC40e9DCnQykE2GqwQeWVGqzSyT\nNO9WBEfzxoLXpmwP2qBKyD6kABBmk695uZjITPWD8gdWis7eN4DVPCctD10w\nqXp54tEAWSJbKktD8Jndvb6wfaMASxMLe5oRqP++oFDLVq//DO7phY3VN2uV\n9+xz93U7GkPr3QstsRY6KHRPnzeQkeCL6hM2nEsrm2RwXOmti/bDRsbIMF0v\nPRBi7/bR0qTjJdYgur/Gsbyp87PU6oXiDjS0BO8VT/KYXnfTz9WX9t3Yjbnk\n5Xz126cm1pwakyBN/CLahpU+QAGjud7PJUvOuRAbjfAVbxdopKzik4L7KuJx\nPFu/M4+4kX0S5sl7edwLYasMOy8AbIoS94gHhw3UQycmhXJpUglnkC3w2ZxP\n0+qHvxdLiM6BXPs7UGMyzrisV9/WJahmtK3TH5DhdE/eamiWMIfpgexu8GO2\nXCO1vkD282WQZT2gkbgE/xGtzm4krGp91mhaUSWuUkEZkLGmmHLpnjdVj3Ck\nckYv/pVhJPPLx45FqM36COtLVMA7ktxo1I1eP68D+hXncPXWU1pMeiUKy+GQ\n/I0rWHX1pOJnA+H+Qfr45hnNkX0Q8n2ChG3CO1A+0DS212Tha/UfGgCcHsGx\n9V5bhxxfiy2oma6m+Pxs8drDUgqietG8xo0UTP7fW5ytAaefxo5lySwVH50B\n9alVWZ46aAqH05wJljlqQjTSfyarj36b0PgD5VjJL1/v1pvfrBgnPEtFQ3vP\nYTbWpG9E0KY00hOWPz+HouwrOyJlkM3asWNht4hwXifey9JweN5OAzcnBPuq\nlyd7ljaECcTVJl8QilV2OtXJCVG+nMo6I3JiaMyWcwxdDhscgSgBgywkMTo8\nW3C0t5seBotRcD7GIA360R3n1PDk+czEYjiFjH3h0JHZC+F4W0T72wmenpE7\n4i9PJahwj9eGo/QJMyFPi9mOwMeC9bToJPMEBxCj8O8P5QDF4N2H93ZTEQA5\nPe/KRwdjM1aJnrT4R//NAdPtZV3Ec2p1l7W4HV2V8bbTfHWzKW9zTTCYPwU0\nb+MHlM2NkObPzfmjSDwtXsVs89cypnJtOeInTT562d3oVjn3mO+Wzew5nC85\n6mTfyv01JIvpd8kpkgyvnlezddwl9XRfXsMLAxmAGjZraKiciZ11HBPHfINq\np0jwo1ej40wonGeAKrviucl9w6qKz4XzghCnoatvqLRvNEZDCPrlLRe5/H1q\nihF+K/jIDpJs+Xd2A3VPl7bh/OxIdet2w8HSRka/D0QcSXbKyiLM9W/bj7AP\ne1hlYLuUO7uWGTGXoIebvpW5ptyqRF4wYteadyDEP2+Q2EY9odPbTB/irro3\nomMuVGI/xnRQVoWEGI/GRVAnA24ooLlxUXJs8WlTdhoTTGEsi6HBqdNsZDme\nnj9+4Fn4G5pxng2rlpG6VjsltD4rnDNY1cENVDI2daIe9K9BSx80jFaT3XTQ\nDU06NAHo3J/eSSQXvUBDQSRGZR4AxHNCnCNr0aZAkZPyMtpesTLNObduOm/Q\nNj5+59afAA2QO9XRRMAygV6D2ijqH4RN9kdSeD9F6a8Z2BvE+LAHyRnoed5B\ngri+JAUVe/KUH2Ajrv5I0eRSj0AJoBS+yclFnG4GBeW+r3COuE5LWuLc60hb\n6QdecfcRnS7tTqbbMlGkMxP8qXMeKcopPVOU1Qb1ehhhMxSbxSJA1KrkFo53\n227Oq0uGvpO4yJ4g/5IfVzoMuzgQ9Px/cCLCoSqQCUXJItjCY58Nh7GoDfjB\nML0QiIBh4v7P3sVCnyTMfJhFDc1wpcVUAGVSOE+t2E9t7sY0WncTLKsIS3iI\ncgYX6mL7oXFj7LfanxrTvVrNOd3jMmnoRlcSwXc4nh9veTLyPHmyty61FfsP\n5a+4XRJVDU2CxTbEUES/VkR/KPvBWNjmSarnT7bCW4QT8aWGeHTw2t4I33cD\nN2ima4o/iRMuCAmGPgjSwZpTZxfYqxMyd2YUmJxf6EQA2CQJgZnOBD7uQ88W\nfumw23MzIgW+wrVjlUO+1T3/58I1aNsDIsK6mPMXPI2BGHQEpIrvxIAruT7R\nez+0XozCOf9A71u8GwIf0Yi38DphPWTTzOH7I0InhMU3CMSUZ46ODN4QmfOc\nl2DyiRAZmHEjKNxoZh2buvCZHzoVLV93/8L/Qie0LNlRwvoFt0u/bkTCD0a8\n5cx7ANeRSplKwbm2TLV4joSZ7DqCs03x3p1siARx2dCzunh5XsL8tb/kK8Up\n5R/4/gK2lvMoUU4+6WLo7Hqf0Z5BPyhbKeactdYc5dwUGTd/8OdyPvI2Rs77\n1ZtbsBtgpYggByfraKK/kyPLsKgcwE4rPfUi+ysD+dYfW/valuCR/Wf22+B6\nOdhTAdCD+KgJ7kd7sUX4S404RBkNZyd91YCvaxgWuuZHczbpulafMZFhvUR9\nkZgNzCHpW2bODTH03rMQV0kcQGM75D3RoDAKaEMZT8suTCXz4hQOMyOrVyxH\nZGI2iQR2NnVNQhpfXWRm6bCveGD44qdIzkCMOB8FjITwSTLPRZtgg1vp9UzB\n+toilyJQXgtDjrjy3qPrX4JAwUkkTgwf/rxU42oCWh0trzA17wV5QHJHrcsg\nmKskg5aBrVecqULUQnFgGWq6h587BA/ei49/uAHoOZbfhXZ0EiHxmum+UjMb\nypruUJQ8bJi7/xRpTrttJTZo3hhGeD9GGm09Z4wvnbnHbhxoToI7Iz06G3/t\nzWRfMvXySsKy5Cof8+CrcSLQi3JBkiCdb1fdUYvvZE/Dh54ir8zLp2aHGVPx\nux8cHedjaDUtEKmOTJRoJ07igNkb4zsZIIILm2fVGv47fS7vwAHf8JNzISfN\nMfZ5OBePwJ0NFBfWkAtlitcCWk5yRYFJyjUj7TfTEj5V1kS/53dhiegoaS2K\nsOCxnCwN38D8lFXtgr9/SwOzUVlfFtwN6/rq9siR7FeVInY87tQ742DmLgBk\nsPpjLtDELGQgKSEG/TYZphsW5T6xGxdlBjCYThqH+m7BZl9XyiOmZR90JdOn\nn3JBxVPJBnPTSkRSpW6z4NSFcb75/NeQBHn/vLfShnb0MPmPCQ1MXcWgYrT6\nOpS31N5QgAbkTKM09ghnUZknJF59OwMpJaiWYuxL86ZNBP8v8tG+LYdMq26W\nJUNd9Ro+Bf1mrc8lZQ4JVB5XBYcj/45dbqsIhVXvI68wvY/TAXsHv4sfZzVy\nIVXKTGRg0FNiLclCtyhSkpWcWLR2jp0HYmCb2AoLfJ0z8iW3zncN4TU5W6zJ\nTsoJwR1Mv7gRY5q+3s/wk6FoaJlFRlchYRE9A42tP0JQ25K272ij7qaBOaRM\nNDr1MmJLavoTF1t868Q4wkfpeUh1hyeanQBCP53GQd+QfnE6kp20VsTzI9j7\nzkGaWluChGLoj8j/Yk6prrJUIxD84XdlSCxZOePM5Lh4DKblRfbdw8E/l3x8\nPyKlESSGiDceHOYkX5BEhcIM7RLSZq4b3UBukz5pHANyhmDJHLMvbnafF89U\nntcYvPSa5M3NeXHZCfWvt+kUsdjGvY0uLaBky5oegjQBaulaaVdFn+PeTVpV\nLL8tFpQjQcwaM3tA1qlsunlrnxTyURPI93JpMIE31ALLt5IegUYBMOrZEHMf\nvqjXoajxm200xrcLscFE/1y5ZcyK9c1eRjZye4dpqgUa2Yw5DC5TE/w/UmBs\nMlHGrwVOipZYYPXwBZeQIT59pCNBu+l8PLC1Wcknu+VduA3SXgCOG1qOV8qU\nKmY3CSeTlXjxqqPsSqnrfg/WyPJAjtk4QUcpdYBXCsPUSVXz+gTIcfWnzFmp\nsp08ipsPxT+Y2ODfA48ppB+/9ChcpqiqfTEW3LSrDj3GjrAjvwXYJIHceP2h\n6pMXKq+fs6S7GmXoi0YiV1ZPcr6jFOV6KteHrqY+5fL39xvKef6HN3mSzJNi\ngeADEhXHxmQxDG3dVae8PZOVHCWeVN4xmev0Pdvrc8igzGAKultKjEL0H3no\nZ+JAAkVmHFvIThHQg9DU6z/+2Bi3THtHyRRrcm9j16BLiciVmhmVQ/7fkJn3\nPCsS1snxT+uylnavAMacAOzk1ZX37Es6jRMAxwq7ekOLtv73O3Z/aYDfcx1g\nV6wgJq1IwXa1r+7hQT7hHbxxR/xVikqERduT4AIyUk9AyBPEibH7H4lZFo4Q\nM1U2hntuxiPD3YQpb0Rf2cEfZel9RafzBiAEp2hO4xt2vPOYLbgjGJyUt9rg\nyaFjZrkpp7QuON84wVnfRqS+aN7keGHGJsUdtSgoqruEho3gHkcSDiea3oST\nq0kaHQMF13dio3LZAUMCkmIs6rVX79cU9BsnzshhoyKWqs4HDRFNPOtVYXID\nAT1S+FrxXXADNmHJC93vuGUt1z48o2H/gVwleAvetcSsWjjDqWtpKNdh3qRP\n6C7uo80kiwZ73j4sSq4KCDRnk2oPFZ4BN5s6SHCEAzJESeodoEB1wfkVFFbO\nMJoRqrXJ+mRXKnLilNOxpyGLrqZA7douhZ76GEEWMvZaMbb2hGhtE7jFkDJ/\ndmzBytXxMQznIWVfLybhm8O4FH5751nGszUm2hCvbQkmPSxhLAmFulglhXU0\nlYzqq0Z6bN8++V4H3Rqo/kuhjsxAD3L1n/2navqHE3RGTLx+5BmIjs7ihf4o\nhOy6alc7EIArqUFP5dfw8ZqbgkloVYBLvfAmGgq5XVd9rRfciJ3sbLnzghZz\nJvzgQTmJeF4yWaRSDWpEK0vSuTU0p0yjvaoT0VSyh+00+GnFE2rmD6Lt5Oln\nV8bwMUTmcrp34dfv5qoGgPRe1sFZ+63xH5r1x1qHYjutLhoMFpFJh35HLSjb\nNrfETMex15TK4XdBIv6PCZAUq58FqxYhweYOkhGwHyYX01czL2t2f8xyJwF8\nEZwTnyu3rpr38QxFc/xz0/Tx22kqI08j4S8rIL1TiDo1+KFw0retHbuRPW34\nHL92d/YI/z7YvmGZxoxtDNGKDCQJjgKzk2yNCv/rPyT9RjRw9uWFASbtJWTK\nM82N+g1SSVdlV6z+tbl2DDa3fJCrzawlYImmfhAF+olwgtdKgoXLhjoicQRw\nt4KltiecwB1xW3nI1G/kckiQ+r5NpWu5NytiPI5UA6v0LzHiit4LM87PCIym\ni1CkW9+e7fjHA3MUCoqOF1eaXa1r5PchQBau/QL89XZEr6lDYZEh8hwb3Ui3\nciCnadOo4KlWg1anhZd5oZPPVmMdN0R7zMok6e6HBsCIQh/x3gG9G9VlyByH\n4l9tMr0iqh36G/TeIDUdE4Vvw3x6R0hKijeiSuP6g/BLUuP482vAovWWPM5C\n4Jl+qepile0kxCiJZyAp8oJu0sDqzr9u3USkC7f9NKrll1e5zOakzD2Ddn8q\npa7oXJEibcf1M8xKxVH5VaY6HV78eqFyaIsj2b639tfGS0H3f8xVuQAG/Z/a\nie3L6FEOFcE/dgL4KCHtLn+3HOP2HP7ZBFPck2qMUiVT60LJMLxQztdbrTDe\nLwdMlHlBCSmAOZ3IySrplBjtCuxEPY6SJlwWib0uGJ7gzZBuwykoenQLf/ON\n8Km9glVHomfqiXT1FyGfgEKTEcIBlLqD9BpZJN4Y9jgjL2YXmp/v/LvG7Fm1\nQgysN3T4qNGiFRZ2WrRsFVxPL4WC19BkhjpU+F25f3SLsZsjCbMwYVFRJsZv\neyjLvCSNQqtrGik0bknC+qlDEg6ec443YAHKAcCPUF9SoWWxOXIaVA6TCxu7\nsPXZKmg6d4AcoWv8YEv2lUdOOigfvBRYHfHbvdiX6xha8Xabl14gWXDU/tsH\nCJzH9fbZsMg66RWR+GAo8kfl6LLO2Ai1MoQNfEQauQmfkAJ8ebB2fe0TKAZ2\nBoyV/pGu8tywZ2KaS4mGGnxb0Atjp456TtjDXI6rSJ8l0TNGsOAlopuGyeGh\nexNfa1JDKb8TKwEjk5WYoDBBPzqnmHb23z0rz1+mqIwJpJUxE1qSR78mmI/G\nLrQR7s9jUyPp0r8MzXFrspKy65cTiGRyV5Akxkd6RGwk4rrVuX7CBiYnRYW0\nzphgWFGVRauZdpkvsrlRu0foG4alg9hBr4SRqDm8YOKw7L4HJ54TUEC/khi6\n2e1IwHblM/9trgS5Gb2poa8YCoelbf4qsUPVC4oawRlxKS4kt5OlxclhKeRe\nEWSYm9mIhRu+j710uo7S3SEegpxzSkYtQCavNlWKU17GyLzsvXVTsHUScLdv\nxQjhSXfNOuasrPfAUtKaBPi/IO5RW0lTlN+DkbhmFQkaWtVjSFCfDn9ZX9el\nCtIaAdMq6Bgr6AEpojcVc8QM30JvF40ME7XRrIrTw/dBrIcoxMabj1AsrGh9\neLZXHdID2fN270TW/2VIRw4klbwWAQV2kKCjmHbw2Q3CObGRYIks93lKOqhR\n9AGXk0RmnGzXvAbCo2bU+pJY/Jhcdf8TUt3XCGt8JmpNHD0KPtlv5dvYj+00\n3hR/JMCcISXO2mu++VrvCT0tcPbxvOriRN4YXmXmMBO658venfUx7By08P8T\nA9r2t1LOg+PUOSfnaLetnwyvymG/Zo0q0HsvHyDMWGGdrdAJgsulo2jiYVHd\nhRfAuZL7NOJ4q/0pX07hD8cGq6yRto5rVrNPZnErYFCCDyOe6M1XXy0FKTBS\nsAtTfdnkP6tokjTOE9bU43ZJQSTMbe3Lk5GYSt1EmAlsnBU94LUPcokFW7yj\npUgzNns4Q3eNBwI7Loe/TNWuBLrLRTvneF0Tb+Ks57vpZ5JPy+eYPhxiZzq6\nhbyNzknKyo3kdtr9Nx/GWbpu8mTdQOgk8uGtXflkKiYTH2gfVFQPY0N8/f/y\nbBeESdKA4nUGNWCGM66zCDzz/qLzaINqcboIPPCOMSmky+7rjfPhZOgoPrjB\nVLFi6Zcxnm2faNRspugHqcFEo9zr0xUfzg0KYJMYGoHXzFiKdb1Md83VB/gD\nK8/dUG/AuLloosT211m3GKb7BfPwog9tv1Dw2cjK2fgc+LGG3yuGbxHzKPCU\npyShtp7QhrEjy47UvQ116c8Y/l34YFOkTrJ9JoHa3lAZ+r+gtnQL2KdwBdcx\nJ7gr1gk4k25wBcRt6pif1E1rirrJlrujRTHbtvrM53sSAvujug/uI/kksn34\nv8t+BllXoN/dcLpePreuhUXNeyZmQg7/hy9WZcAKwXJln2qugeD/RW8aCVwt\nMX2KZL0AY/XiJBh0mwpOog5HvcwZ8Q4qt+rQsg/KIErUnIhVwYZhyEDC1DpV\n1u7z3XqmzuoC3U4oIW7mdk4C3Fbd3Yz4mtxq+hani07VLXhR0TiJtXwEBxtf\nYznJ+RKwdOmeu3Ww5QNMiIb4Nj4r06LTYi26u9qXAXPKAE/nq2wsBJbvHJZ2\nQhNUKUVQcH8OaDbZbGs5njGX9iUCC+J+LJpkLpqq3MUN+aduywxFp2FfrjH4\n+u9Qs9mILLfgWXSOW4/nt3a5LA1n9T0OwrjWLO9phg9JrqGwb2Q6jelB8RGD\nAjkuFe+Cle/nzNxakiy5rEsF53AzO88bNLnVJZmFiWcu5N3weetIgvDDrisE\nIuHrc0rRBPbMFdieOAKKn52c2WZS16ZeWRlEP/kMYE2Y++OJYr2KbLNtBtOe\nAEqPmJwdY9nEhhuF5m8mF7/2KqiSwmwsEkPthQ8Z3lYdAsRGit0vUhqTDEFH\n/AW8pdaB5o9LYqegXUI+A8GVEouSniK93CPOEg5HUp+6xoplsp8BOaBUyzCn\nzMU9DNA5UzS+KHrG7r9qmL+pet2CrU0j/S/r3+fk2vPQH+lXddKp3xuZh9YY\n9HA6ABax3c2YMbeznHUCB/Fl6KBrPYrEPv5cWeIFDuJDKLwoWmK9nLk/MCKa\nTCk5FM+2rwR8ypYXqDAntBVMeK7Gw2HQ5iASaxT7bVeU1DH9S1qIBG/uH0vP\nsxtR9j0Nc8JM2Atga8BULzgjtJlhNVNKnT0jME0H3k0OzlxaEsSV24lm+27K\nu5gXFZTWIe0dqDwGO/olxd2nlt7o/0WAipiOIwdjY7c07n5aje/te6dqvy6I\nqLEBk99p7ounDL9G0xy08SWX5DSFUSZOjLjoqN5bm4w8Y/AMxOa5bjp46Uql\nIUkEk+PDXtzSQ0oYWeuzywZoPFNAP9zdvA18guBc5ZrVnT9cYzh39wGZm8Dy\np26pezMoru1d\n",
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T21:30:51.930+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L7d_2025\\\"\"],\"cloned_from\":\"CSA U6L4-L7d_2025\"}]"
}]]></config>
</Javalab>
