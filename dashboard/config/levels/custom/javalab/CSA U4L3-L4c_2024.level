<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:58:31.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The Global Climate Risk Index represents the extent to which countries have been affected by extreme weather events. Lower index scores indicate countries with high risk.\r\n\r\nA researcher wants to identify countries that have index scores that are less than or equal to 20. They need to update their program to specify the maximum index for high risk countries.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Climate.java</code>, declare and initialize a <i>double</i> constant called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MAX\\_HIGH\\_RISK</code> to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">20.0</code>.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getHighRiskCountries()</code> method, update the condition to use the constant.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing a constant.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/constants"
    ],
    "display_name": "Global Climate",
    "bubble_choice_description": "Use a constant to specify the maximum global climate risk index for high risk countries.",
    "thumbnail_url": "https://images.code.org/5ecfdb6b9d9c791590afd124376b1a8f-weather.png",
    "encrypted_validation": "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\ngcQIYwKgCcnk7g==\n",
    "start_sources": {
      "ClimateRiskRunner.java": {
        "text": "public class ClimateRiskRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of Country objects\n    Country[] countries = {new Country(\"Greece\", 6.7), new Country(\"Denmark\", 2.89), new Country(\"Italy\", 4.42), new Country(\"Dominica\", 28.47),\n                           new Country(\"Guatemala\", 20.88), new Country(\"Japan\", 12.99), new Country(\"Philippines\", 26.7)};\n\n    // Instantiates a ClimateRisk with the array of countries\n    ClimateRisk data = new ClimateRisk(countries);\n\n    // Calls the getHighRiskCountries() method and prints the result\n    System.out.println(data.getHighRiskCountries());\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ClimateRisk.java": {
        "text": "/*\n * Manages data about climate risk index for countries\n */\npublic class ClimateRisk {\n\n  private Country[] countries;    // The 1D array of countries\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Declare and initialize a constant called MAX_HIGH_RISK to 20.\n   * -----------------------------------------------------------------------------\n   */\n\n  \n\n  /*\n   * Initializes countries to the specified 1D array of countries\n   */\n  public ClimateRisk(Country[] countries) {\n    this.countries = countries;\n  }\n\n  /*\n   * Returns a String containing the name and climate risk index of each country\n   * that is less than or equal to the maximum index for high risk countries\n   */\n  public String getHighRiskCountries() {\n    String result = \"Countries Less Than the Maximum High Risk Index\\n---------------\\n\";\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Update the condition to use the constant.\n     * -----------------------------------------------------------------------------\n     */\n\n    for (Country country : countries) {\n      if (country.getIndex() <= 20) {\n        result += country + \"\\n\";\n      }\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Country.java": {
        "text": "/*\n * Represents a country\n */\npublic class Country {\n\n  private String name;       // The name of a country\n  private double index;      // The climate risk index of a country\n\n  /*\n   * Sets name and index to the specified name and index\n   */\n  public Country(String name, double index) {\n    this.name = name;\n    this.index = index;\n  }\n\n  /*\n   * Returns the index of the country\n   */\n  public double getIndex() {\n    return index;\n  }\n\n  /*\n   * Returns a String containing the name and index of the country\n   */\n  public String toString() {\n    return name + \": \" + index + \" Climate Risk Index\";\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "name_suffix": "_2024"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:58:31.203+00:00\",\"changed\":[\"cloned from \\\"CSA U4L3-L4c_2023\\\"\"],\"cloned_from\":\"CSA U4L3-L4c_2023\"}]"
}]]></config>
</Javalab>
