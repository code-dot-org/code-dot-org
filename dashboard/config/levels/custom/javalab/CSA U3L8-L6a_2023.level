<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-01-12T22:17:15.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MusicSurvey.java</code>, write the method <code style=\"background-color: #ececec; color: black; font-weight: bold;\">countStreaming()</code> to count the number of times the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">streamingService</code> appears in the survey responses.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MusicSurvey.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">promptUser()</code> method to prompt the user to enter a streaming service to find and return their response.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SurveyRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">promptUser()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">countStreaming()</code> methods and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Scanner</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with creating a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Scanner</code> object and using its methods!\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ncount = 0\r\nfor each answer in responses\r\n  if answer.getStreaming() equals target\r\n    count++\r\nreturn count\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I prompt the user?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ncreate Scanner object\r\nprint \"Enter a streaming service: \"\r\nchoice = nextLine()\r\nclose the Scanner object\r\nreturn choice\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üåü Challenge: How can I let the user continue searching?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ncreate Scanner object\r\nchoice = \"y\"\r\nwhile choice not equal \"n\"\r\n  streamingToFind = promptUser()\r\n  result = countStreaming(streamingToFind)\r\n  print result\r\n  prompt to enter \"y\" to search again or \"n\" to quit\r\n  choice = nextLine()\r\nclose Scanner object\r\nprint \"Goodbye!\"\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ What is the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \r\n    <p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class is a hidden support class that has methods for reading data from a text file into a 1D array. It has the following methods:</p>\r\n\t\t<ul>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toStringArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> objects containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toIntArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> values containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toDoubleArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> values containng the data</li>\r\n\t\t</ul>\r\n    \t<p>For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nString[] names = FileReader.toStringArray(\"names.txt\");\r\n \r\nint[] numbers = FileReader.toIntArray(\"numbers.txt\");\r\n \r\ndouble[] prices = FileReader.toDoubleArray(\"prices.txt\");</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Count Genres",
    "bubble_choice_description": "Write the `countStreaming()` method to count the number of times a streaming service appears in the survey responses.",
    "thumbnail_url": "https://images.code.org/1335c7f4ce34e57242bd82590f96048d-counter.png",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "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\n",
    "start_sources": {
      "SurveyRunner.java": {
        "text": "import java.util.Scanner;\n\npublic class SurveyRunner {\n  public static void main(String[] args) {\n\n    MusicSurvey responses = new MusicSurvey(\"ages.txt\", \"streaming.txt\");\n    System.out.println(responses);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the promptUser() and countStreaming() methods and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "MusicSurvey.java": {
        "text": "import java.util.Scanner;\n\n/*\n * Manages data about responses to a survey\n */\npublic class MusicSurvey {\n\n  private Respondent[] responses;    // The 1D array of Respondent objects\n\n  /*\n   * Reads the data from agesFile and streamingFile to initialize responses\n   */\n  public MusicSurvey(String agesFile, String streamingFile) {\n    responses = createResponses(agesFile, streamingFile);\n  }\n\n  /*\n   * Returns a 1D array of Respondent objects using the data from agesFile and streamingFile\n   */\n  public Respondent[] createResponses(String agesFile, String streamingFile) {\n    int[] agesData = FileReader.toIntArray(agesFile);\n    String[] streamingData = FileReader.toStringArray(streamingFile);\n    \n    Respondent[] tempResponses = new Respondent[streamingData.length];\n\n    for (int index = 0; index < tempResponses.length; index++) {\n      tempResponses[index] = new Respondent(agesData[index], streamingData[index]);\n    }\n\n    return tempResponses;\n  }\n\n  /*\n   * Counts the number of times a streaming service appears in the responses\n   */\n  public int countStreaming(String streamingService) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Count the number of times the parameter streamingService appears in the\n     * 1D array responses and return the count.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return -1;\n  }\n\n  /*\n   * Prompts the user to enter a streaming service and returns their response\n   */\n  public String promptUser() {\n    /* -------------------------------------- TO DO --------------------------------------\n     * ‚úÖ Prompt the user to enter a streaming service to find and return their response.\n     * -----------------------------------------------------------------------------------\n     */\n\n    \n    return \"\";\n  }\n\n  /*\n   * Returns a String containing each respondent's information\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (Respondent answer : responses) {\n      result += answer + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Respondent.java": {
        "text": "/*\n * Represents a respondent to a survey\n */\npublic class Respondent {\n\n  private int age;              // The age of a respondent\n  private String streaming;     // The streaming service a respondent uses\n\n  /*\n   * Sets age and streaming to the specified values\n   */\n  public Respondent(int age, String streaming) {\n    this.age = age;\n    this.streaming = streaming;\n  }\n\n  /*\n   * Returns the age of the respondent\n   */\n  public int getAge() {\n    return age;\n  }\n\n  /*\n   * Returns the streaming service the respondent uses\n   */\n  public String getStreaming() {\n    return streaming;\n  }\n\n  /*\n   * Returns a String containing the age and streaming service of the respondent\n   */\n  public String toString() {\n    return age + \" years old: \" + streaming;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "streaming.txt": {
        "text": "Spotify\nPandora\nSpotify\nYouTube Music\nSpotify\nSpotify\nYouTube Music\nSpotify\nSpotify\nNone\nSpotify\nYouTube Music\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nApple Music\nSpotify\nNone\nSpotify\nOther\nSpotify\nSpotify\nYouTube Music\nSpotify\nApple Music\nApple Music\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nOther\nOther\nSpotify\nYouTube Music\nSpotify\nYouTube Music\nSpotify\nSpotify\nNone\nSpotify\nSpotify\nSpotify\nSpotify\nApple Music\nSpotify\nApple Music\nSpotify\nSpotify\nApple Music\nSpotify\nNone\nSpotify\nNone\nYouTube Music\nPandora\nOther\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nApple Music\nNone\nYouTube Music\nSpotify\nSpotify\nSpotify\nApple Music\nSpotify\nSpotify\nSpotify\nYouTube Music\nYouTube Music\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify\nNone\nSpotify\nSpotify\nSpotify\nNone\nSpotify\nYouTube Music\nYouTube Music\nSpotify\nSpotify\nSpotify\nSpotify\nSpotify",
        "isVisible": true,
        "tabOrder": 4
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 5
      },
      "ages.txt": {
        "text": "18\n63\n18\n61\n18\n18\n18\n21\n19\n18\n18\n19\n17\n19\n18\n17\n16\n16\n17\n15\n15\n17\n19\n18\n16\n18\n14\n18\n17\n17\n20\n19\n19\n17\n16\n18\n21\n17\n26\n20\n23\n18\n37\n17\n18\n17\n36\n24\n18\n19\n17\n16\n23\n23\n22\n16\n18\n42\n23\n23\n19\n22\n15\n25\n32\n36\n24\n29\n41\n36\n19\n31\n16\n26\n22\n16\n17\n19\n18\n18\n19\n19\n22\n16\n19\n37\n14\n33\n26\n32\n30\n43\n24\n36\n19\n22\n20\n31\n19\n15",
        "isVisible": true,
        "tabOrder": 3
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-01-12T22:17:15.640+00:00\",\"changed\":[\"cloned from \\\"CSA Practice Level Template\\\"\"],\"cloned_from\":\"CSA Practice Level Template\"},{\"changed_at\":\"2023-01-12 22:17:17 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:11:59 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:18:41 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 16:53:26 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\",\"bubble_choice_description\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 17:12:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 17:13:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 18:02:05 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:15:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:42:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:42:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:43:28 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:44:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:46:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:47:02 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:53:57 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 19:54:54 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:34:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:36:26 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:36:35 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:38:28 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:38:55 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 20:38:58 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 14:21:02 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 14:21:16 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 14:21:29 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-31 01:47:33 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 21:26:54 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-07-12 14:24:01 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
