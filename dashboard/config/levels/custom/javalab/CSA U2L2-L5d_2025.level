<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:49:54.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A teacher sponsors a club at the school, and they need help creating a program to manage the club roster.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Club</code> class, declare <code style=\"background-color: #ececec; color: black; font-weight: bold;\">private</code> instance variables named <code style=\"background-color: #ececec; color: black; font-weight: bold;\">sponsor</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numMembers</code> for the club sponsor's name and the number of club members.\r\n\r\n‚úÖ **TO DO #2:** Write a no-argument constructor to assign default values to the instance variables, such as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"new sponsor\"</code> for the club sponsor's name and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> for the number of club members.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ClubRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Club</code> object.\r\n\r\n‚úÖ **TO DO #4:** Print the constructor and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Club</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a no-argument constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n    <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getSponsor()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getNumMembers()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Club</code> class to get the current values assigned to the instance variables. For example:</p>\r\n    <pre style=\"background-color: #333333; color: white;\">\r\nClub bookClub = new Club();\r\nSystem.out.println(\"Sponsor: \" + bookClub.getSponsor());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Club Class",
    "bubble_choice_description": "A teacher sponsors a club at the school, and they need help creating a program to manage the club roster.",
    "thumbnail_url": "https://images.code.org/b89c8797888da4c8a9824798e2451122-book-club.png",
    "start_sources": {
      "ClubRunner.java": {
        "text": "public class ClubRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Club object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject) and the values assigned\n     * to the instance variables using the methods in the Club class.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Club.java": {
        "text": "/*\n * Represents a school club\n */\npublic class Club {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Declare instance variables for the sponsor's name and number of members.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a no-argument constructor to assign default values to the instance\n   * variables for the sponsor's name and number of members.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /*\n   * Returns the current value assigned to sponsor\n   */\n  public String getSponsor() {\n    return sponsor;\n  }\n\n  /*\n   * Returns the current value assigned to numMembers\n   */\n  public int getNumMembers() {\n    return numMembers;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    ArrayList<String> fieldsList = fieldsToList(Arrays.toString(classFields));\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    fieldsAsText = fieldsAsText.substring(1, fieldsAsText.length() - 1);\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_validation": "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\ncVs=\n",
    "name_suffix": "_2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:49:54.929+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L5d_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L5d_2023\"}]"
}]]></config>
</Javalab>
