<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T18:16:33.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A restaurant has recorded the total cost of customer orders in a 2D array, where each row represents a table in the restaurant and each column represents a a specific customer's order at each table.\r\n\r\n✅ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Restaurant</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getHighestCost()</code> method using enhanced <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loops to find and return the largest customer order.\r\n\r\n✅ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">RestaurantRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getHighestCost()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\n💡 <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ⬆️ for help with traversing a two-dimensional (2D) array using an enhanced <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loop.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_enhanced_for_loops_and_2d_arrays",
    "reference_links": [
      "/courses/csa-2023/guides/two-dimensional-arrays"
    ],
    "display_name": "Customer Orders",
    "bubble_choice_description": "Find the highest total cost of all customer orders.",
    "thumbnail_url": "https://images.code.org/f27ee0b0ece38437c4883b7e2a5020f6-85a5299d7c24b43059442a89234b7695-online-shopping.png",
    "encrypted_validation": "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\ncbNkXyUZe5zIP8BFx7ggiCkz\n",
    "encrypted_exemplar_sources": "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\nZyBbeQ==\n",
    "start_sources": {
      "RestaurantRunner.java": {
        "text": "public class RestaurantRunner {\n  public static void main(String[] args) {\n\n    // Creates a 2D array containing the costs of customer orders\n    double[][] orderCost = {{25.5, 15.25, 12.75}, {18.5, 20.0, 16.75}, {14.25, 21.5, 19.75}};\n\n    // Creates a Restaurant object\n    Restaurant restaurant = new Restaurant(orderCost);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Call the getHighestCost() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Restaurant.java": {
        "text": "/*\n * Represents a restaurant\n */\npublic class Restaurant {\n  \n  private double[][] orders;     // The 2D array containing the cost of several customer orders\n\n  /*\n   * Initializes orders to the specified 2D array containing\n   * the cost of several customer orders\n   */\n  public Restaurant(double[][] orders) {\n    this.orders = orders;\n  }\n\n  /*\n   * Returns the 2D array orders\n   */\n  public double[][] getOrders() {\n    return orders;\n  }\n\n  /*\n   * Returns the largest customer order\n   */\n  public double getHighestCost() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Traverse the 2D array orders to find and return the largest customer order.\n     * -----------------------------------------------------------------------------\n     */\n    \n    \n    \n    return -1;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T18:16:33.568+00:00\",\"changed\":[\"cloned from \\\"CSA U5L5-L6c_2025\\\"\"],\"cloned_from\":\"CSA U5L5-L6c_2025\"}]"
}]]></config>
</Javalab>
