<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "## Finding Patterns\r\n\r\nComplete the <a href=\"https://docs.google.com/document/d/1OJIjB4GPp5eqri8qIIceuUGUYl8bzEYXbH3qXIpcg9I/edit?usp=sharing\" target=\"_blank\"><strong>Finding Patterns</strong></a> activity guide to identify the patterns and relationships you notice in this dataset.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "DataRunner.java": {
        "text": "public class DataRunner {\n  public static void main(String[] args) {\n\n    String[] textFiles = {\"rank.txt\", \"name.txt\", \"age.txt\", \"influence.txt\", \"reach.txt\", \"twitter.txt\", \"sector.txt\", \"profession.txt\" };\n\n    DataManager data = new DataManager(textFiles);\n    \n    System.out.print(data.showDataset());\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 1
      },
      "DataManager.java": {
        "text": "/*\n * Reads and displays data from text files\n */\npublic class DataManager {\n\n  private String[] textFiles;    // The 1D array of text files\n  private Data[] dataset;        // The 1D array of Data objects\n\n  /*\n   * Sets textFiles to the specified text files and initializes\n   * dataset to store Data objects for each text file\n   */\n  public DataManager(String[] textFiles) {\n    this.textFiles = textFiles;\n    dataset = new Data[textFiles.length];\n  }\n\n  /*\n   * Creates the datasets and returns the dataset values\n   */\n  public String showDataset() {\n    createData();\n    return getDatasetValues();\n  }\n\n  /*\n   * Instantiates each Data object in the 1D array dataset\n   * using each text file from the 1D array textfiles\n   */\n  public void createData() {\n    for (int index = 0; index < dataset.length; index++) {\n      dataset[index] = new Data(textFiles[index]);\n    }\n  }\n\n  /*\n   * Returns a String containing the values from each Data object\n   */\n  public String getDatasetValues() {\n    String result = \"\";\n\n    // Gets the length of the first Data object's 1D array of values\n    int valuesLength = dataset[0].getNumValues();\n\n    // Outer loop repeats from the first value to the last value of the first Data object's 1D array of values\n    for (int index = 0; index < valuesLength; index++) {\n\n      // Inner loop goes through each Data object to get the corresponding value from each 1D array of values\n      for (Data values : dataset) {\n        \n        // String.format() formats a String using format specifiers. In \"%-30s\", the \"%\" indicates the start of the format specifier,\n        // the \"-\" means the String is left-justified, \"30\" indicates the width of the field, and \"s\" indicates a String\n        result += String.format(\"%-30s\", values.getValue(index));\n      }\n\n      // Adds a new line character after getting a row of data\n      result += \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Data.java": {
        "text": "/*\n * Manages data from a text file\n */\npublic class Data {\n\n  private String filename;    // The name of a text file\n  private String[] values;    // The 1D array containing the values from a text file\n\n  /*\n   * Sets filename to the specified filename and initializes\n   * values to store the values from the file\n   */\n  public Data(String filename) {\n    this.filename = filename;\n    values = FileReader.toStringArray(filename);\n  }\n\n  /*\n   * Returns the 1D array of values\n   */\n  public String[] getValues() {\n    return values;\n  }\n\n  /*\n   * Returns a value at a specified index from values\n   */\n  public String getValue(int index) {\n    return values[index];\n  }\n\n  /*\n   * Returns the number of elements in values\n   */ \n  public int getNumValues() {\n    return values.length;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "rank.txt": {
        "text": "RANK\n------\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100",
        "isVisible": true,
        "tabOrder": 4
      },
      "name.txt": {
        "text": "NAME\n------\nStacey Abrams\nNipsey Hussle\nLizzo\nSteven Canals\nOronike Odeleye\nColin Kaepernick\nIlhan Omar\nRodney Robinson\nJanet Mock\nKaren Attiah\nAlysia Montano\nCrystal Dunn\nJeremy O Harris\nLeBron James\nIbram X Kendi\nSerena Williams\nTomi Adeymei\nBeyonce\nJackie Aina\nJanelle Monae\nNikole Hannah-Jones\nStephen Curry\nBlair Imani\nDonald Glover\nKristen Clarke\nAllyson Felix\nLena Waithe\nAyanna Pressley\nVirgil Abloh\nCrissle West\nGlory Edim\nRitchie Torres\nJaime Harrison\nKid Fury\nRich Paul\nKarine Jean-Pierre\nJason Reynolds\nElaine Welteroth\nBrandon Bryant\nZach Stafford\nKerby Jean-Raymond\nJohn Henry\nLaw Roach\nAngelica Ross\nCardi B\nLauren Underwood\nLatoya Shauntay Snell\nMahershala Ali\nMelina Matsoukas\nMashama Bailey\nMatthew Cherry\nKawhi Leonard\nTanisha C Ford\nArlan Hamilton\nJordan Peele\nAdam Serwer\nRhiana Gunn-Wright\nKwame Onwuachi\nKiese Laymon\nJeffreen Hayes\nAmanda Williams\nTiffany Cross\nKezia Williams\nLatham Thomas\nManu Platt\nJohn Edmonds\nMicah McDonald\nJoy Buolamwini\nBassey Ikpi\nCandice Elder\nElie Mystal\nHenri Pierre-Jacque\nCandice Payne\nJemele Hill\nTa-Nehisi Coates\nWayman Banner\nLorin Crawford\nAkbar Cook\nMiAngel Cody\nBrittany K Barnett\nLauren Wesley Wilson\nMaya Rupert\nBrandi Collins-Dexter\nDantley Davis\nMeghan Markle\nKamilah Forbes\nChaedria LaBouvier\nDiamond Stingily\nAlexandra Bell\nDenise Woodard\nJarrid Tingle\nNaomi Washington-Leapheart\nMarcus Bullock\nKiki Ayers\nRaniyah Coperland\nDelano Dunn\nDorian Burton\nWilliam Tarpeh\nBrooke Obie\nElizabeth Lindsey",
        "isVisible": true,
        "tabOrder": 5
      },
      "profession.txt": {
        "text": "PROFESSION\n------\nPolitician\nRapper, Entrepreneur\nSinger, Flutist\nCo-creator, Executive producer of Pose\nActivist\nActivist\nUS Representative\nEducator\nWriter, Producer, Director\nJournalist\nTrack Champion\nSoccer Star\nPlaywright\nNBA Player, Entrepreneur, Philanthropist\nAuthor, Professor\nTennis Athlete, Entrepreneur\nAuthor\nEntertainer, Entrepreneur\nBeauty Expert, Advocate\nSinger, Actor, Activist\nJournalist\nNBA Player, Entrepreneur\nActivist\nActor, Musician\nPresident of National Lawyers' Committee for Civil Rights Under Law\nTrack Champion\nWriter, Producer, Director, Actor\nUS Representative\nArtistic Director, Louis Vuitton's menswear collection, CEO of Off-White\nCo-host of The Reader podcast\nFounder of Well-Read Black Girl\nCouncilman, Congressional Candidate\nSenatorial Candidate\nCo-host of The Reader podcast\nSports Agent\nChief Public Affairs Officer of Moveon.org\nAuthor, Poet\nAuthor\nVenture Partner at Harlem Capital\nEditor-in-Chief at the Advocate\nFounder of Pyer Moss, Artistic Director\nVenture Partner at Harlem Capital\nStylist\nActor, Writer, Producer\nRapper\nUS Representative\nMarathon Runner, Chef\nActor\nDirector\nExecutive Chef\nWriter, Director\nNBA Player\nWriter, Cultural Critic, Historian\nFounder of Backstage Capital\nEntertainer\nJournalist\nPolicy Director at New Consensus\nExecutive Chef\nAuthor, Professor\nExecutive Director at Threewalls\nArtist\nCo-founder of The Beat DC\nCEO at Black upStart\nDoula, Founder of Mama Glow\nProfessor\nPhotographer, Artist\nStylist\nComputer Scientist\nWriter, Author\nFounder at East Oakland Collective\nExecutive Editor of Above the Law\nManaging Partner at Harlem Capital\nEntrepreneur, Philanthropist\nJournalist, Podcast Host\nWriter, Author\nStylist\nSTEM\nPrincipal of a High School\nLawyer, Founder of Decarceration Collective\nLawyer, Co-Founder of Buried Alive Project\nCEO of ColorComm, Inc.\nCampaign Manager for Julian Castro\nSenior Campaign Director of Color of Change\nVice President of Design and Research at Twitter\nDuchess of Sussex\nExecutive Producer of the Apollo Theatre\nJournalist, Curator\nArtist, Poet\nMultimedia Artist\nFounder of Partake Foods\nVenture Capitalist, Entrepreneur\nFaith Work Director at the National LGBTQ Task Force\nApp Developer, Entrepreneur\nPublicist\nCEO of Black AIDS Institute\nVisual Artist\nAssistant Executive Director at William R Kenan Jr. Charitable Trust\nProfessor\nManaging Editor at Shadow & Act\nExecutive Director, ByteBack",
        "isVisible": true,
        "tabOrder": 6
      },
      "sector.txt": {
        "text": "SECTOR\n------\nPolitics\nEntertainment\nEntertainment\nEntertainment\nCommunity\nCommunity\nPolitics\nCommunity\nEntertainment\nMedia\nSports\nSports\nArts\nSports\nCommunity\nSports\nArts\nEntertainment\nCommunity\nEntertainment\nMedia\nSports\nCommunity\nEntertainment\nCommunity\nSports\nEntertainment\nPolitics\nBusiness\nEntertainment\nArts\nPolitics\nPolitics\nEntertainment\nSports\nPolitics\nArts\nMedia\nBusiness\nMedia\nBusiness\nBusiness\nEntertainment\nEntertainment\nEntertainment\nPolitics\nCommunity\nEntertainment\nEntertainment\nBusiness\nEntertainment\nSports\nArts\nSTEM\nEntertainment\nMedia\nPolitics\nBusiness\nArts\nArts\nArts\nMedia\nBusiness\nCommunity\nSTEM\nArts\nEntertainment\nSTEM\nArts\nCommunity\nMedia\nBusiness\nCommunity\nMedia\nArts\nEntertainment\nSTEM\nCommunity\nCommunity\nCommunity\nBusiness\nPolitics\nCommunity\nSTEM\nCommunity\nArts\nArts\nArts\nArts\nBusiness\nBusiness\nCommunity\nCommunity\nBusiness\nCommunity\nArts\nCommunity\nSTEM\nMedia\nSTEM",
        "isVisible": true,
        "tabOrder": 7
      },
      "age.txt": {
        "text": "AGE\n------\n45\n33\n31\n38\n39\n31\n37\n40\n36\n33\n33\n27\n30\n34\n37\n38\n26\n38\n32\n33\n43\n31\n25\n35\n44\n33\n35\n45\n38\n37\n36\n31\n43\n31\n37\n42\n35\n32\n28\n29\n32\n26\n40\n31\n26\n32\n34\n45\n38\n45\n37\n28\n40\n38\n40\n40\n30\n29\n45\n44\n45\n41\n37\n39\n40\n31\n33\n29\n43\n35\n41\n26\n34\n43\n43\n36\n28\n43\n39\n35\n33\n38\n38\n42\n38\n43\n34\n29\n36\n36\n27\n37\n39\n29\n34\n41\n37\n28\n33\n39",
        "isVisible": true,
        "tabOrder": 8
      },
      "influence.txt": {
        "text": "INFLUENCE\n------\n250.5\n247.6\n243.6\n234.8\n231.4\n224.8\n219.4\n218.5\n218.4\n213.3\n207.3\n204.4\n203.7\n203.4\n203.1\n202.5\n202.3\n200\n199.8\n199\n196.2\n193.4\n191.4\n190.4\n188.3\n188.3\n186.2\n185.5\n184.6\n182.6\n182.1\n181.9\n181.5\n179.7\n179.1\n178.9\n178\n176.7\n174.2\n173.3\n173.2\n178.2\n172.7\n171.1\n170.6\n170.5\n169\n168.9\n168.9\n168.7\n167.7\n167\n166.4\n166.4\n165.3\n162.3\n162.2\n161.9\n159.2\n159.1\n158.4\n158.4\n157.2\n155.6\n155.6\n153.7\n153.5\n153.4\n150.7\n150.2\n150\n148.2\n146.5\n146.6\n143.8\n143.6\n143.6\n141.4\n141.1\n141\n140.1\n140.1\n139\n138.8\n138.7\n138.4\n137.4\n135.4\n135.1\n135\n129.7\n128.7\n122.8\n122.2\n120.5\n119.3\n117.8\n111.5\n114.9\n107.4",
        "isVisible": true,
        "tabOrder": 9
      },
      "reach.txt": {
        "text": "REACH\n------\n15.31\n16.56\n13.12\n10.08\n9.79\n16.85\n16.05\n8.33\n13.56\n11.68\n11.61\n13.93\n10.65\n19.34\n12.36\n18.09\n12.27\n18.72\n14.06\n16.5\n9.4\n18.56\n11.57\n16.95\n9.58\n14.77\n14.44\n14.33\n15.94\n10.54\n10.48\n10.45\n11.6\n12.01\n13.36\n12.59\n13.19\n13\n10.68\n9.49\n11.16\n10.51\n12.42\n12.19\n18.48\n12.11\n9.03\n11.88\n11.88\n9.49\n11.71\n12.61\n8.76\n11.54\n16.28\n10.97\n9.26\n10.92\n10.55\n7.59\n7.93\n11.07\n9.2\n10.09\n5.91\n8.32\n7.45\n10.39\n9.45\n6.1\n9.38\n7.74\n5.24\n12.03\n9.68\n6.52\n6.51\n8.33\n8.29\n8.29\n8.17\n8.17\n6.11\n8.02\n8.01\n7.97\n7.87\n7.64\n8.53\n7.59\n5.93\n5.83\n7.05\n7.41\n6.05\n5.93\n5.76\n3.43\n6.18\n7.8",
        "isVisible": true,
        "tabOrder": 10
      },
      "twitter.txt": {
        "text": "TWITTER FOLLOWERS\n------\n548861\n929681\n1080757\n22921\n3697\n2169649\n473422\n5815\n189795\n143419\n17408\n128430\n10187\n43695389\n66489\n10943793\n62181\n15360340\n0\n1192873\n177442\n13716022\n72614\n2430070\n51375\n745781\n189690\n476465\n397324\n182946\n53274\n17034\n168417\n203050\n51950\n172248\n62407\n53783\n2034\n15420\n8386\n11640\n13028\n55775\n7357481\n76802\n1686\n0\n22262\n0\n142534\n404181\n11380\n64017\n1603520\n0\n21819\n6365\n28642\n0\n0\n63160\n4625\n4360\n1066\n0\n0\n19374\n28462\n717\n77809\n2106\n0\n1181178\n20375\n0\n539\n3670\n687\n5717\n1916\n16422\n1350\n7451\n0\n1596\n7006\n565\n1862\n523\n0\n1140\n790\n21111\n106\n135\n1962\n1019\n6388\n1449",
        "isVisible": true,
        "tabOrder": 11
      }
    },
    "display_name": "Influential",
    "bubble_choice_description": "Dataset containing information about the top 100 most influential African-Americans between ages 25-45.",
    "thumbnail_url": "https://images.code.org/51a21099f28a5dd47295c2c28fcceed0-girl.png"
  },
  "game_id": 68,
  "created_at": "2023-02-17T19:14:35.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-02-17T19:14:35.068+00:00\",\"changed\":[\"cloned from \\\"CSA U4L8-L5m_2023\\\"\"],\"cloned_from\":\"CSA U4L8-L5m_2023\"},{\"changed_at\":\"2023-02-17 19:14:36 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 13:49:42 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 14:37:58 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 15:44:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 16:40:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
