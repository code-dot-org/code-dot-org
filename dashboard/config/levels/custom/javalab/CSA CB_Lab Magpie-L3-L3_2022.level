<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "## Use the findKeyword() Method\r\n\r\n**Do This:**\r\n\r\nIn this level you will repeat the modifications you made in Lesson 2, this time using the new `findKeyword()`(#e7e8ea) method to detect keywords.\r\n\r\n1. Add to the `if`(#e7e8ea) statement in the `getResponse()`(#e7e8ea) method so that the program will respond: ***Tell me more about your pets*** when the user's statement contains the word ***dog*** or ***cat***.\r\n\r\n2. Add another conditional to the `getResponse()`(#e7e8ea) method so that the program will respond favorable when it sees the name of your teacher.\r\n\r\n3. Add on to the `getResponse()`(#e7e8ea) method so that the program will check if the user's statement has at least one character.\r\n\r\n\t_**Tip:** You will use the `trim()`(#e7e8ea) method again, not the new `findKeyword()`(#e7e8ea) method._\r\n\r\n4. Pick three more keywords to use in the `getResponse()`(#e7e8ea) method with the new `findKeyword()`(#e7e8ea) method. ",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyClass.java": {
        "text": "import java.util.Scanner;\n\n/**\n * A simple class to run the Magpie class.\n * @author Laurie White\n * @version April 2012\n */\npublic class MyClass{\n\n\t/**\n\t * Creates a Magpie, gives it user input, and prints its replies.\n\t */\n\tpublic static void main(String[] args) {\n\t\tMagpie3 maggie = new Magpie3();\n\t\t\n\t\tSystem.out.println (maggie.getGreeting());\n\t\tScanner in = new Scanner (System.in);\n\t\tString statement = in.nextLine();\n\t\t\n\t\twhile (!statement.equals(\"Bye\"))\n\t\t{\n\t\t\tSystem.out.println (maggie.getResponse(statement));\n\t\t\tstatement = in.nextLine();\n\t\t}\n\t}\n\n}\n\n",
        "isVisible": true
      },
      "Magpie3.java": {
        "text": "/**\n * A program to carry on conversations with a human user.\n * This version: \n * 1. Uses advanced search for keywords \n *    \n * @author Laurie White\n * @version April 2012\n */\npublic class Magpie3 {\n\t/**\n\t * Get a default greeting\n\t * \n\t * @return a greeting\n\t */\n\tpublic String getGreeting()\t{\n\t\treturn \"Hello, let's talk.\";\n\t}\n\n\t/**\n\t * Gives a response to a user statement\n\t * \n\t * @param statement\n\t *            the user statement\n\t * @return a response based on the rules given\n\t */\n\tpublic String getResponse(String statement)\t{\n\t\tString response = \"\";\n\t\tif (statement.length() == 0)\n\t\t{\n\t\t\tresponse = \"Say something, please.\";\n\t\t}\n\t\telse if (findKeyword(statement, \"no\") >= 0)\n\t\t{\n\t\t\tresponse = \"Why so negative?\";\n\t\t}\n\t\telse if (findKeyword(statement, \"mother\") >= 0\n\t\t\t\t|| findKeyword(statement, \"father\") >= 0\n\t\t\t\t|| findKeyword(statement, \"sister\") >= 0\n\t\t\t\t|| findKeyword(statement, \"brother\") >= 0)\n\t\t{\n\t\t\tresponse = \"Tell me more about your family.\";\n\t\t}\n      //**LESSON 3 - LEVEL 3**//\n      //ADD CODE TO HANDLE CAT AND DOG KEYWORDS HERE//\n\n\n      //ADD CODE TO HANDLE THE TEACHER'S NAME HERE//\n\n\n      //ADD CODE TO HANDLE AN EMPTY STRING HERE//\n\n\n      //ADD CODE TO HANDLE 3 MORE KEYWORDS OF YOUR CHOICE HERE//\n\n      \n\t\telse\n\t\t{\n\t\t\tresponse = getRandomResponse();\n\t\t}\n\t\treturn response;\n\t}\n\n\t/**\n\t * Search for one word in phrase. The search is not case\n\t * sensitive. This method will check that the given goal\n\t * is not a substring of a longer string (so, for\n\t * example, \"I know\" does not contain \"no\").\n\t *\n\t * @param statement\n\t *            the string to search\n\t * @param goal\n\t *            the string to search for\n\t * @param startPos\n\t *            the character of the string to begin the\n\t *            search at\n\t * @return the index of the first occurrence of goal in\n\t *         statement or -1 if it's not found\n\t */\n\tprivate int findKeyword(String statement, String goal, int startPos)\t{\n\t\tString phrase = statement.trim().toLowerCase();\n\t\tgoal = goal.toLowerCase();\n\n\t\t// The only change to incorporate the startPos is in\n\t\t// the line below\n\t\tint psn = phrase.indexOf(goal, startPos);\n\n\t\t// Refinement--make sure the goal isn't part of a\n\t\t// word\n\t\twhile (psn >= 0)\n\t\t{\n\t\t\t// Find the string of length 1 before and after\n\t\t\t// the word\n\t\t\tString before = \" \", after = \" \";\n\t\t\tif (psn > 0)\n\t\t\t{\n\t\t\t\tbefore = phrase.substring(psn - 1, psn);\n\t\t\t}\n\t\t\tif (psn + goal.length() < phrase.length())\n\t\t\t{\n\t\t\t\tafter = phrase.substring(\n\t\t\t\t\t\tpsn + goal.length(),\n\t\t\t\t\t\tpsn + goal.length() + 1);\n\t\t\t}\n\n\t\t\t// If before and after aren't letters, we've\n\t\t\t// found the word\n\t\t\tif (((before.compareTo(\"a\") < 0) || (before.compareTo(\"z\") > 0)) // before is not a letter\n\t\t\t\t\t&& ((after.compareTo(\"a\") < 0) || (after.compareTo(\"z\") > 0)))\n\t\t\t{\n\t\t\t\treturn psn;\n\t\t\t}\n\n\t\t\t// The last position didn't work, so let's find\n\t\t\t// the next, if there is one.\n\t\t\tpsn = phrase.indexOf(goal, psn + 1);\n\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Search for one word in phrase. The search is not case\n\t * sensitive. This method will check that the given goal\n\t * is not a substring of a longer string (so, for\n\t * example, \"I know\" does not contain \"no\"). The search\n\t * begins at the beginning of the string.\n\t * \n\t * @param statement\n\t *            the string to search\n\t * @param goal\n\t *            the string to search for\n\t * @return the index of the first occurrence of goal in\n\t *         statement or -1 if it's not found\n\t */\n\tprivate int findKeyword(String statement, String goal)\t{\n\t\treturn findKeyword(statement, goal, 0);\n\t}\n\n\t/**\n\t * Pick a default response to use if nothing else fits.\n\t * \n\t * @return a non-committal string\n\t */\n\tprivate String getRandomResponse()\t{\n\t\tfinal int NUMBER_OF_RESPONSES = 4;\n\t\tdouble r = Math.random();\n\t\tint whichResponse = (int) (r * NUMBER_OF_RESPONSES);\n\t\tString response = \"\";\n\n\t\tif (whichResponse == 0)\n\t\t{\n\t\t\tresponse = \"Interesting, tell me more.\";\n\t\t}\n\t\telse if (whichResponse == 1)\n\t\t{\n\t\t\tresponse = \"Hmmm.\";\n\t\t}\n\t\telse if (whichResponse == 2)\n\t\t{\n\t\t\tresponse = \"Do you really think so?\";\n\t\t}\n\t\telse if (whichResponse == 3)\n\t\t{\n\t\t\tresponse = \"You don't say.\";\n\t\t}\n\n\t\treturn response;\n\t}\n\n}",
        "isVisible": true
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-07-11T21:07:26.000Z",
  "level_num": "custom",
  "user_id": 18602,
  "audit_log": "[{\"changed_at\":\"2022-07-11 21:07:31 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-11 21:44:07 +0000\",\"changed\":[\"encrypted_examples\",\"long_instructions\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-11 21:45:42 +0000\",\"changed\":[],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-11 21:45:55 +0000\",\"changed\":[],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-11 21:46:10 +0000\",\"changed\":[],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-11 21:48:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-11 22:09:41 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-11 22:10:10 +0000\",\"changed\":[],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-11 22:14:22 +0000\",\"changed\":[],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2022-07-11 22:16:16 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
