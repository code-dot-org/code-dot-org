<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T21:30:50.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to store the players on a sports team.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Player</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Player</code> objects\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TeamRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> object.\r\n\r\n2. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code>.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Sports Team",
    "bubble_choice_description": "Create a `Team` class that contains an `ArrayList` to store the players on a sports team.",
    "thumbnail_url": "https://images.code.org/21d89b4a258f762f20915af8e121511c-sports.png",
    "encrypted_validation": "E+2k/sFrRMhTsCodHtF1yKCCjT7fD16ucUZqM0U4Xfq4phAlwuHTxgKlmCMh\nFhl9cwO7hA5cHv8UEM5viFmTFZGigv2wW8op6r6kNMBOYLTT+scney2l4FhO\nSe9ZRcCLTh+EZZzBoYMIN04H+RtXCYIG2oaSrDPoZtyKrU31lWaT6k5GQQQw\nyqexm4mNTnDKBmlbIZW92Z4STBDXj3pblaMfxM5V4/TK3ni10QtLIfek3SAb\n85KxgXS1uul4zBvJ9Erw/gNQ0NByIKrVfFC87CX84R4DkBDgyGlnOoGXvjlX\nE0mb8cMpQ88RJIBzMu8oMgNFlakKZHJYkDPTskJ/QFrDaSPzy8TvivOTjzCR\nhF18GxrEO6DpbKHp/kGkQQzybSkmFrfkbkuZYD+Lnn/KCCjLMyvWcclLOs7Q\nSjVRqIKr+gZfCzKW8qbOg1uk/ZM9Tr0r/mfYVGjmiPRfvuU29GlOEyUNCXbm\n37Gh15ONNXoC8b4SSymIxbU+E/PUZ3nXaLIoNIkgKx30XsNeGhiIS4fMOjWn\n/u/Q4snBN/EkApATylBzq0GkF/CueV0YzPm+JkI2l1S2zeV/IPxjJm4lNcq3\nHPSPt75cHWWUeF5SRRFHNGZNCOyRl0JO/yf/Ze1rKAwZovv4dnu4egFy1M1i\nj5zxbCWywC+Tu/nRSK6aMLGpLBfiXKxSyUXVtikhpp7OdwbS6b0415JmmZlS\nJiagL8ZTIGaMbaordXorOvW5yzZj5gOLGuh7cJN0xCPNw6MPvQpVcjFg3lre\nXdTusDjTT+VvAWsEBwOq85S2Ut00i6gPdhUWQKSXwOObYy31vZrupbbMJYAM\nyKKiKe1IjBKQ4R4xte+ZVDQc/KUjSZW1X80FWUIYNthx4VfwNfLKSQvpXi2d\nH4hkgtc0PZY7GoXLm1KOiT7pMEelNFRe2y7nEJjRL/HbUHoA7eowsQLpCALb\ndaI9t3ypJYqSOTkgZCjL3yiKaJwCa/mSU5+BJUzI8zeEQTH4H+Fwg69eI4Nk\nJQGUavKzSuYC6vceCz3nApPnbbaqt0pVk9OTu0h0Yqm87P541Fc8Z3IQrnJk\np4j8PbugcFfcL+VmKeD4Nwn/Bi6dix/c5KbbUWHULy/+3hhQyUXUY69sUH95\nCld+NC4u0AlAFUEOFVtP6SiBeLLAqyC9sCc0BzUIHxHBr20QAgjkHUw2O1/U\nhiEZL2ZOQarsUBHpnVgPkTh3jypC+WC7VUtJQY6wYGBfZVYmPfYk68MJFjOK\nG/uhcdDWoJFkc6D/V2IPUjjZdZYw6pohxTPCNrSLeF8GLtCcHBR6e/IO5t01\n217iU12nrtC9C36kj0hKgewPFTfbudKf10q4SBnkOyrdLaX1YLZXkqK8g4ot\nQbe31ywOimuGU44qOXeupy9PUgaMkZQHDqnOYt/d67KXh4h4iR3LJXaZ17hW\nxIwDocQ5FJg2Uw0d726PtgN0hF/hdWVkEYSLuSHlHOyKMQcmXSwZbv7SDnrG\n8/j98ruAYv+/lBVCOVl7HjHv5j/ff1H0EhC8oCZBXiJXdGcG0lKDFy/Nc0Cs\nnG1E8pRdbnPPGE60pidSt+ivLAKFqvNOWaVdPqIcAZUKWc+thv0X9EsXlTAW\nZLNITYFRI3qXIgND/P9fpYLgRtc1iRroUOJu985OjDhFNBoATC9VHnkkfTrX\nX/vaGSw2Oq51dYLibtg7HAqTKnfzNl0GiPpx14WGeRKR7e9TIrgsP2jOZRQ8\nei5AveyguFd2QIZrEPXnaRkOswP5UXZmuHT3R/6gSxvB7L7IZDrSaGAdLRHZ\nsiy8lt2B+v3RIJwPnwD20SoA+dv0vQviANcujSFR3cMFEUwzE2DxcNJ0Ye5Q\nSVe27dUCC4zeFTbNGTKOBBhPtFVMRsnCiLPQFApMz09rtXWJhNO9FC5tZW0i\nlKXTzhvX/bJAgGlfraokuFH7wZfHxeLCHLnHnN3L6qlzZJHMdUHpmVm07zTJ\nFRez0OrdMQaWLBNA4hXI0/uINwYI6hBd1mWIangCEl3xToby/yipuKry/6zo\nYclEaJ3RhXC6XxzFIvZ8BDsf4BbsNyyFosZ0gBdosmFLCbDxxog5605UFIIy\nx6c/xUkCuSz2Bx3Hrvew74y6R8fzKw6Qy72w0BiIELK3IFCPVQNcOf6AjYCo\nidX7aJAIk2unR2otPto61t87RenViC5juCbtnGItmRv/1h8izlrdOQHJ5lYC\nR55oXS44csUn57OwSGEbtM7N+mdRyPQwC4ANZjkIkIUSYDa6/tFNUmqBnty0\nPHatJkYtVVLpLD+luSAwlUozIwEsvC2GJwpG3WaNhZ59eh9CN8MpWwr0DWcW\n8k2jCVtB4FCtMHBLaHTyDwUKdceesw2s1VxII5KhZAuDGNCUQHEFhNojm9kS\nRHr15RWrGplMmRE7q7nmXIXhiyp1gh1vNr8nvccj8kV0P8ttRydi6B+bVtZk\nue6jiXiU0hQgOgSHKJF1kRptGTfXRr1Rr+WiqaWPFexs/+CpI3mWCZRTyeif\nUXsfousvuLk1zB2vG4GZj8p7U9N5VZ6vy2tUlC4NtPJG8QvCXFjogzpJrjxx\nWbRGCkTjpypyifWvd23HVc+Wlfkhc3Upb2l1Hu+71K1yYEjopwapvrccXYHL\nyDvoR+dMOQDrjdeGnGgyrP5tUSFwoEIcWfX+o6kKd1d/C2pzWUiMU97euWKi\nyvuDwuG1Bx9P5OGIchvGoJcwNSI/pMj5YgM/AU6pBswpB1pD7HsEtmwAaXJY\n4wdO1+o6IDyzX53P7i+YWPYqape28qhPtNpCPKhwlRhkEVpW9cmi4dsuHTxM\nLnYXaZdqhRFwvoLxNlczeCVfENQShF+VTemWzEZQPxjE1AjpQ931scv//7Wq\nJcAMyC6pJTrR3hLv8Z10alz3eWXFuxO8svHk3TfSDugfvnuvsx2AvrWDSxiz\nk17MseigBESMxOQTysU3jav+akVuDx6D9N0YqZ9eXV2Gt79FXKOx0lq0j8VB\nwleOxdmATKnRJVINOuhCZpofI5JyqrZSBe/437475nSVA9DSQe6d5OlKlOoT\nI+UlPTDnmq9zfBtwQwqsXWKnrJMQTEIsvWNaP1+ieRnil0O933M4IYovnFhu\nsUG6y3Nrj/sEnCab\n",
    "encrypted_exemplar_sources": "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\nVt2p9wsOE3S5+4Yf9vJjWIHdJe2rYABT9SgY4nwcOH8JsF8RE97siZaXOuMX\npYaLyZcLJZEcNldyjCKT9j52z3h3UWEG/uHP170XO8p6mkd0IkvDd3hbdBAA\nOt8C4+KzJ3awXqSg8j02zhdcBtTjjC4d42HsVn74VzXeIdHzYt6l4c9w2zrY\nrgVby5YEfv3gExKBdpMz33Z140BNt+8ILuBnsvfwlp74LldH8eTeijT4YTQH\n+RZMkL0+GcEp1qVapJpCJUJ/8YTUHlrOow973jomYGaxkNfRbxcMlsAuNatw\nGcgZLoeQpSe/B+2pmPnlefVklaWNP19A9iL6OE2Hf5aXA4q8nMQhHuBNEhfj\nYiXB/ad6yOCbIyn66zcWIbCY0TwuOj4hSFgJmcatYAF7kAZgQZ3LOpDqmo0q\ngdEPPT0iR+TZo+iGI6d8sglKv+lUtftZ+OjfHtjTqsTWiZi19lkIJCj08KGT\ni0U8F6UzVCloXnSNB0KcBnC2r/ASPhNGYB1Dqw+5YBvYafcB8P4IIH7fx0Qn\nuyFbsCqfnAkNZuYrPwBcPs1A2L21qMLsdsTtjX99dLfkz9UNXB8hKM7h3kOv\nDuSQb8irEUPaoduMGCLx5VSzpy1q41wB2dadTngaip94Jw7AGHSHZB1m8Cio\n98YOrs181yOynwBdlwUw5HII/HFiFkY3u5B60S0aUjrWK/yhGe9PCf2hIyKz\nNMxvZAKJ9ceg4+jcO8q3jJyvFxhOhLES/VQJ5f07/CX3mKHbw/2eTaiPRuII\nM/SeIekwj4ejlAiFrt1nxBUj6cy8KBtC9NRGeDmr2TbbpEeoPjWRXoJluyU7\nWP7YO6XVKkUrfwZFyZ7i22JubBIixB7PdSatBsY0sCmObjjglvt2gFVsg6T9\nwJBlTE/aaf0ODbRkC1VNS/lT5zQXMHiENEID6OFll//HgzPnEIdrlFFIeK7a\nD/WS5Vq/aoEusPwxzjneT185RDBmJt78XdXYucNXd+HgzGIt41tuAVism1uL\nNVJ42R3XGSTjkgr8dGBqaZTVgxgsYlk0Yh/EHkeRIbD1fdWmqGxipG5KAhwu\npifvB84i7q+FeEm8c4OvovLmlNaJI9R8TrQ34tX/vPzY4y0g8meRvkk12lkj\nMiM20PcgXclaI1b5mC77O17yLlPVzpr+RmhMbNLfSiLVVwsvbNsEJHgKATf4\n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\ngK7FJhJrKc32xvLfXAkzTCSiNPnyZr7YQqeapRYJfwYca3fk6nLTlNUjVcT4\naPCttlabACIdckoeXfecTLcoEPX9HLcSfwB2ERHDOxwJJeIYXoHKWKjLeWef\nh+VtNbaRq5wvtKzF6cpohvvAZu7fT0w0B4FMfb4MOZiVXjQGipj4b8YDK43a\n0dqcgaNzP0/IeksBPVdd9aDtWK6umWTNAOaIu+C+zOD8KoQ5qi4eOsMA9LaR\nVxB0IQhDsVk29DWnpQwY3MAy6h5koE91GYTNf/3cf4HxyZ9DBW7cMqMmw7mA\n2GZp9napjHkI5I+pFIh4mwxVcTa8/tq4ISgGIo05Ktb/1+JFHEhtMX8H9Beg\nHLWlstrQ7LBrKCUrqU9koPOtUkKpbH3XrwvxCH0tvFpMnL2ooNAkW7vt16cb\ntOEvtTGu0fhz1p3y4w9c+JNnhjrb9Dh5RjbCgMZn7W+PZyaI/5Kd9BSWK/v+\nH6/G1ury6f9E+Lkja4PvgIfapfO6/ZZfH/zq1zydz+LMyO9PlEK8NT5m6YVx\nxQsCFsZhtdMKvKU/r1Aipxoi0G1LSgRWIKjc04YSBox0uTJBenl2xUMFYNEk\nNd9whGJ5C6Ww8/DfQhQLWHc3XtE699iwTZVtOVxO7D1W1K2uLoJ37NV8rOi7\n9g+wymmlEX8xmrCuOM6r45Vz3cU+rU6kdrh7KtP5mLZQ9/3PPdViUyIAePpM\n+s9wVt32wNrbgUu9D+YseJkcXiyl0pYI8Vfw/iudQDg/Ibgi4Ke5qSswjK15\npCM2dGVchPs0h0f99sk7uLmdYO+4bA2Ae3VoqsBVr/bARZ4mjHpgV2B+xHaM\nqwg8XRLR5oggjpirgdOIkZmFI1QtVhMa2GLo0K4SQo2BL4pz+yioBVtbkwVn\nsmguDKsNzsLmAPp+aYTJPGkMYPx8o85SO6sc7up7eykDT0pI5hGtFa5eeJgL\n+iX2jyCxRnrPT5Zgoymg0qBXST8UXrRynRgJEyKRtqGu0g9lJKCAl2UJc8eI\nWeqLoJCcrgv4sQyKEvCP4G53gUEKAc78MftublHIqRowuMhBeej0mXS5y6el\nlzHFquuTmOh5dzANIVSa+r9usEpGxgl8dGIQiKJ1nKQBvjQ0NCjulPBvvWzC\nqrdZ3ZXreX9KyJ2723k5jnZxpay7TAz6yH+MZfGB80vCDVenI33EeIeo0iA3\n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\nHz5cHBii5Q==\n",
    "start_sources": {
      "TeamRunner.java": {
        "text": "public class TeamRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Team object, then call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Team.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a Team\n */\npublic class Team {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Player objects, then\n   * write a no-argument constructor that initializes the list to an empty list.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n\n  /*\n   * Returns the list of players\n   */\n  public ArrayList<Player> getPlayers() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return the list of Player objects.\n     * -----------------------------------------------------------------------------\n     */\n    \n    return null;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Player.java": {
        "text": "/*\n * Represents a player\n */\npublic class Player {\n  \n  private String name;    // The name of a player\n\n  /*\n   * Sets name to the specified name of a player\n   */\n  public Player(String name) {\n    this.name = name;\n  }\n\n  /*\n   * Returns the name of the player\n   */\n  public String getName() {\n    return name;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T21:30:50.455+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L6b_2025\\\"\"],\"cloned_from\":\"CSA U6L4-L6b_2025\"}]"
}]]></config>
</Javalab>
