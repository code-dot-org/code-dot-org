<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-08-23T20:57:03.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    int[] unsorted = {12, 11, 13, 5, 6, 7};\n    System.out.println(\"Original List\\n----------\");\n    MergeSorter.printList(unsorted);\n\n    int[] sorted = MergeSorter.sort(unsorted, 0, unsorted.length - 1);\n    \n    System.out.println(\"Sorted List\\n----------\");\n    MergeSorter.printList(sorted);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "MergeSorter.java": {
        "text": "public final class MergeSorter {\n\n  public static int[] sort(int[] numList, int left, int right) {\n    if (left < right) {\n      int middle = (left + right) / 2;\n\n      sort(numList, left, middle);\n      sort(numList, middle + 1, right);\n\n      merge(numList, left, middle, right);\n    }\n    return numList;\n  }\n\n  public static void merge(int[] numList, int left, int middle, int right) {\n    // create temporary arrays\n    int[] leftList = new int[middle - left + 1];\n    int[] rightList = new int[right - middle];\n\n    // copy numList into the temporary arrays\n    for (int index = 0; index < leftList.length; index++) {\n      leftList[index] = numList[left + index];\n    }\n\n    for (int index = 0; index < rightList.length; index++) {\n      rightList[index] = numList[middle + index + 1];\n    }\n\n    // current indexes of temporary arrays\n    int leftIndex = 0;\n    int rightIndex = 0;\n\n    // copy from leftList and rightList back into numList\n    for (int index = left; index <= right; index++) {\n      // if there are still uncopied values in leftList and\n      // rightList, copy the smallest value of the two\n      if (leftIndex < leftList.length && rightIndex < rightList.length) {\n        if (leftList[leftIndex] < rightList[rightIndex]) {\n          numList[index] = leftList[leftIndex];\n          leftIndex++;\n        }\n        else {\n          numList[index] = rightList[rightIndex];\n          rightIndex++;\n        }\n      }\n      else if (leftIndex < leftList.length) {\n        // if all values have been copied from\n        // rightList, copy the rest of leftList\n        numList[index] = leftList[leftIndex];\n        leftIndex++;\n      }\n      else if (rightIndex < rightList.length) {\n        // if all values have been copied from\n        // leftList, copy the rest of rightList\n        numList[index] = rightList[rightIndex];\n        rightIndex++;\n      }\n    }\n  }\n\n  public static void printList(int[] nums) {\n    for (int index = 0; index < nums.length; index++) {\n      System.out.print(nums[index] + \" \");\n    }\n    System.out.print(\"\\n \\n\");\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "contained_level_names": [
      "CSA U8L7-L1 Predict_pilot-2022"
    ],
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "Nr6EodoTr59pLNL1Tap0xvBGm8CYsSiPppZ9PAbeFyXCfzYG2XXZ0sEiUIhm\nBapOYYjT7sb9fkXFFkJR5FudkQilsb6zGP2zZ+PEj41kS8KrnasuPWbajV9b\nNzZOBNFPY91t2o19wM/pC44cQjReaOkFO8bEBp6SlDd9eFOES8CQ+gfJQNsQ\n9itGuJOXP5W+ahu+9RkCWkYnZoD2sa30UTs/S/wvelT88jeACfcnZ/8Jd4O0\npg/mBT6ASbMXaKFrHX05F9aB9TaASHXSm+ws6hx58Z/OiPRKBf4IHLmNrIU4\nKrxD+n1MKSanEGitpqG0rWT+Ibm2h/Gh7CfZsJ9OyfY15h2B59UJRS8TS+EW\nYDdxHsfADMG5jgmySkf3D2w5nhUDMa9bawvksM8A8gz+0y/Hbp9UeC/i3RH9\nCXN6SqPybxBoVFJU98kQkkSqNULA+8JCbmcZW5TEjRW7aFqXS24CcK5ozwtV\nyYRX+Jwoj6F72++RqADPi//s11Z1B9m1f9w1wcjdBEVoVgyQOSkpRnlUIKiO\n3NKTBpGrl6vuIad/5VouwcYovAo4QosE+qXKHTLnJqm4G/2VldYDYPM3glgw\nqJ8xk3hiq3P84mnveezAVazTQv/ZhWpJJexvNiF3ocOd1xaZ0H/rdDfKf+4z\nVZL2IWgppLfRtQiEyh1itM0oKIYRlb/01Qmo4dYWZinVVvhHJvMUP7JSuBCc\nRLwSu1BEZyO51yOitSEwlX5EUtkJApLr0f625I/vN/auBJot1DdxjNbrnhsV\nOIC+hgqOH11gjEKXS8G+Ix9eHbv66rxTA9FOYQ/Z8zspgdZrOZIdtpU/4B5i\nXXaPg3oaS7JsIcNYsxifHgLKuDeO66oL9kDjXsYO7DeMwLYVjfYjtOlcB3Lk\n58HchAuqubuS1txIO4pjzq4Lk/12duYVCfKxdoSuIPCN/lvlQF/n/pLZv+Ie\nHs8JbXBEZThTwNyW6/LQjUe7h8vouORLDAB2DOJQoyAPzsAUzEbXG6wzz4z1\nh9PA594FgPrUlPPj9mmGJMFpO9nzXG08IUTS5Y1He9xM4dPbyPtaD83soYFI\nZi26enseqk7Ld/BNDJVmtC7lL+Iv4b9mKssG9F1UIG+AtuyoRznsondas8di\nqhIieiYk1L/NBS2snQeEFmRjsnxLQwbCf23BC6PaGsChNwLETiiL7OTYtjd9\nJfbvQhPY+CVZtvPPLlKJSvktTobL/yHBkXoYtK0WGrTorMHUdc87gwUMRzFr\nJqkNPGvwje148CZWzR7ZWjVPyJ89G2101k/fjaUnr/1z23M1qiPpttj2Pc9n\nmNj6pQ1EP689g6aMOrWdeBrWeifOSFoW2z4MyRW7iBFFJESj3OaIRZhR/1ZU\nKRHLaXq/H/yp2lHsD+zbzR6hnCVrHXpXbLYdHclAQKXtlk21cg==\n",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:57:03.085+00:00\",\"changed\":[\"cloned from \\\"CSA U8L7-L1_2022\\\"\"],\"cloned_from\":\"CSA U8L7-L1_2022\"},{\"changed_at\":\"2022-10-18 18:34:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-10-18 18:37:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-10-18 18:46:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
