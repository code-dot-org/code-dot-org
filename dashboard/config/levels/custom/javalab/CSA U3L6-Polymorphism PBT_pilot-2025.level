<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T15:23:37.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "ShapeRunner.java": {
        "text": "public class ShapeRunner {\n  public static void main(String[] args) {\n\n    Shape poly = new Shape(\"Shape\", 4);\n    Rectangle rect = new Rectangle(\"Rectangle\", 3, 6);\n    Circle circ = new Circle(\"Circle\", 3);\n\n    Shape[] allShapes = {poly, rect, circ};\n    \n    ShapeManager manager = new ShapeManager(allShapes);\n\n    System.out.println(manager);\n    System.out.println(manager.calculateAllAreas());\n\n    /* ---- ðŸ”Ž ADD YOUR CODE BELOW THIS LINE ---- */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ShapeManager.java": {
        "text": "/*\n * Manages data about shapes\n */\npublic class ShapeManager {\n\n  private Shape[] allShapes;     // The 1D array of Shape objects\n\n  /*\n   * Initializes allShapes to the specified 1D array of Shape objects\n   */\n  public ShapeManager(Shape[] allShapes) {\n    this.allShapes = allShapes;\n  }\n\n  /*\n   * Sets allShapes to the specified 1D array of new shapes\n   */\n  public void setAllShapes(Shape[] newShapes) {\n    allShapes = newShapes;\n  }\n\n  /*\n   * Returns a String containing the type of shape and its area for\n   * all shapes in the 1D array allShapes\n   */\n  public String calculateAllAreas() {\n    String result = \"\";\n\n    for (Shape theShape : allShapes) {\n      result += \"Area of \" + theShape.getType() + \": \" + theShape.calculateArea() + \"\\n\";\n    }\n\n    return result;\n  }\n\n  /*\n   * Returns a String containing the information about each shape\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (Shape theShape : allShapes) {\n      result += theShape + \"\\n\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Shape.java": {
        "text": "/*\n * Represents a shape\n */\npublic class Shape {\n\n  private String type;      // The type of shape\n  private double width;     // The width of a shape\n\n  /*\n   * Sets type to the specified type\n   * and width to the specified width\n   */\n  public Shape(String type, double width) {\n    this.type = type;\n    this.width = width;\n  }\n\n  /*\n   * Returns the type of the shape\n   */\n  public String getType() {\n    return type;\n  }\n\n  /*\n   * Sets type to the new type\n   */\n  public void setType(String type) {\n    this.type = type;\n  }\n\n  /*\n   * Returns the width of the shape\n   */\n  public double getWidth() {\n    return width;\n  }\n\n  /*\n   * Sets width to the new width\n   */\n  public void setWidth(double width) {\n    this.width = width;\n  }\n\n  /*\n   * Calculates and returns the area of the shape\n   */\n  public double calculateArea() {\n    return width * width;\n  }\n\n  /*\n   * Returns a String containing the type of shape and its width\n   */\n  public String toString() {\n    return type + \"\\nWidth: \" + width;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Rectangle.java": {
        "text": "/*\n * Represents a rectangle that is a type of shape\n */\npublic class Rectangle extends Shape {\n\n  private double height;     // The height of a rectangle\n\n  /*\n   * Sets the type, width, and height to the specified values\n   */\n  public Rectangle(String type, double width, double height) {\n    super(type, width);\n    this.height = height;\n  }\n\n  /*\n   * Returns the height of the rectangle\n   */\n  public double getHeight() {\n    return height;\n  }\n\n  /*\n   * Sets height to the new height\n   */\n  public void setHeight(double height) {\n    this.height = height;\n  }\n\n  /*\n   * Calculates and returns the area of the rectangle\n   */\n  public double calculateArea() {\n    return getWidth() * height;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "Circle.java": {
        "text": "/*\n * Represents a circle that is a type of shape\n */\npublic class Circle extends Shape {\n\n  /*\n   * Sets type and width to the specified values\n   */\n  public Circle(String type, double width) {\n    super(type, width);\n  }\n\n  /*\n   * Calculates and returns the area of the circle\n   */\n  public double calculateArea() {\n    double radius = getWidth() / 2;\n    return 3.14 * (radius * radius);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 4
      }
    },
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T15:23:37.454+00:00\",\"changed\":[\"cloned from \\\"CSA U3L6-Polymorphism PBT_2025\\\"\"],\"cloned_from\":\"CSA U3L6-Polymorphism PBT_2025\"}]"
}]]></config>
</Javalab>
