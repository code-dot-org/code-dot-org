<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-14T13:58:45.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Look at this project example. What are some of its characteristics and features?\r\n\r\n*While this is an example of a project for this unit, it is not representative of the only way you can approach or develop the project.*",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "GameRunner.java": {
        "text": "public class GameRunner {\n  public static void main(String[] args) {\n\n    Game myGame = new Game();\n    myGame.playGame();\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Game.java": {
        "text": "import java.util.Scanner;\n\npublic class Game {\n\n  private Player mainPlayer;\n  private Enemy enemyPlayer;\n  private Player[] players;\n  private Enemy[] enemies;\n\n  public Game() {\n    this.players = createPlayerOptions();\n    this.enemies = createEnemies();\n\n    this.mainPlayer = choosePlayer();\n    this.enemyPlayer = enemies[0];\n  }\n\n  public Player[] createPlayerOptions() {\n    Player[] playerOptions = {new Spiderman(100), new Jedi(100), new Pikachu(100)};\n    return playerOptions;\n  }\n\n  public String showPlayers() {\n    String playersText = \"\";\n\n    for (Player playerOption : players) {\n      playersText += playerOption.getName() + \"\\n\";\n    }\n\n    return playersText;\n  }\n\n  public Player choosePlayer() {\n    String selection = promptForPlayer();\n    Player selectedPlayer = null;\n\n    while (selectedPlayer == null) {\n      selectedPlayer = getSelectedPlayer(selection);\n      \n      if (!isValidPlayer(selectedPlayer)) {\n        selection = promptForPlayer();\n      }\n    }\n\n    return selectedPlayer;\n  }\n\n  public Player getSelectedPlayer(String selection) {\n    Player chosenPlayer = null;\n\n    for (Player playerOption : players) {\n      if (selection.toLowerCase().equals(playerOption.getName().toLowerCase())) {\n        chosenPlayer = playerOption;\n      }\n    }\n\n    return chosenPlayer;\n  }\n\n  public Enemy[] createEnemies() {\n    Enemy[] enemyOptions = {new Voldemort(100), new Thanos(100)};\n    return enemyOptions;\n  }\n\n  public void printGameStatus() {\n    System.out.println(\"\\n--------------------\\n\");\n    System.out.println(mainPlayer);\n    System.out.println(enemyPlayer);\n    System.out.println(\"-------------------\\n\");\n  }\n\n  public void playGame() {\n    System.out.println(\"\\nIt's \" + mainPlayer.getName() + \" against \" + enemyPlayer.getName() + \"!\\n\");\n\n    while (mainPlayer.getHealth() > 0 && enemyPlayer.getHealth() > 0) {\n      playerMove();\n      enemyMove();\n    }\n\n    checkWinner();\n  }\n\n  public void playerMove() {\n    if (canMove(mainPlayer)) {\n      mainPlayer.move(enemyPlayer);\n      printGameStatus();\n    }\n  }\n\n  public void enemyMove() {\n    if (enemyPlayer.getHealth() > 0 && canMove(enemyPlayer)) {\n      enemyPlayer.move(mainPlayer);\n      printGameStatus();\n    }\n  }\n\n  public boolean canMove(Player currentPlayer) {\n    boolean status = true;\n\n    if (currentPlayer.isStunned()) {\n      status = false;\n      System.out.println(currentPlayer.getName() + \" cannot move.\\n\");\n      currentPlayer.setStun(false);\n    }\n\n    return status;\n  }\n\n  public void checkWinner() {\n    if (mainPlayer.getHealth() < 0) {\n      System.out.println(enemyPlayer.getName() + \" wins\");\n    }\n    else {\n      System.out.println(mainPlayer.getName() + \" wins!\");\n      nextLevel();\n    }\n  }\n\n  public void nextLevel() {\n    mainPlayer.increaseLevel();\n\n    if (mainPlayer.getLevel() == 2) {\n      System.out.println(\"Leveling up . . .\");\n      enemyPlayer = enemies[1];\n      playGame();\n    }\n    else {\n      System.out.println(\"You defeated all of the enemies!\");\n    }\n  }\n\n  private String promptForPlayer() {\n    Scanner input = new Scanner(System.in);\n    System.out.println(\"Which character do you want to play as? \");\n    System.out.print(showPlayers());\n    System.out.print(\"> \");\n    String selection = input.nextLine();\n    return selection;\n  }\n\n  private boolean isValidPlayer(Player selectedPlayer) {\n    boolean result = true;\n\n    if (selectedPlayer == null) {\n      System.out.println(\"\\nNot a valid player! Try again.\\n\");\n      result = false;\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Player.java": {
        "text": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Player {\n\n  private String name;\n  private int health;\n  private double energy;\n  private int level;\n  private boolean stun;\n  private ArrayList<String> moves;\n\n  public Player(String name, int health) {\n    this.name = name;\n    this.health = health;\n    this.energy = 1;\n    this.level = 1;\n    this.stun = false;\n    this.moves = createMovesList();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public int getHealth() {\n    return health;\n  }\n\n  public double getEnergy() {\n    return energy;\n  }\n\n  public int getLevel() {\n    return level;\n  }\n\n  public boolean isStunned() {\n    return stun;\n  }\n\n  public ArrayList<String> getMoves() {\n    return moves;\n  }\n\n  public void addMove(String newMove) {\n    moves.add(newMove);\n  }\n\n  public void removeMove(String move) {\n    moves.remove(move);\n  }\n\n  public void removeHealth(int damage) {\n    this.health = this.health - damage;\n  }\n\n  public void addHealth(int healthToAdd) {\n    this.health += healthToAdd;\n  }\n\n  public void setEnergy(double newEnergy) {\n    this.energy = newEnergy;\n  }\n\n  public void increaseLevel() {\n    this.level++;\n  }\n\n  public void setStun(boolean status) {\n    this.stun = status;\n  }\n\n  public String showMoves() {\n    String movesText = \"\";\n\n    for (String move : moves) {\n      movesText += move + \"\\n\";\n    }\n\n    return movesText;\n  }\n\n  public void move(Enemy enemyPlayer) {\n    System.out.println(\"Choose one of \" + name + \"'s moves:\");\n    System.out.println(showMoves());\n    String selection = promptForMove();\n    \n    while (!isValidMove(selection)) {\n      System.out.println(\"Invalid move, try again!\");\n      selection = promptForMove();\n    }\n\n    System.out.println(\"\\n\" + name + \" : \" + selection.toUpperCase());\n    System.out.println(makeMove(selection, enemyPlayer));\n  }\n\n  public String makeMove(String selection, Player otherPlayer) {\n    String moveMessage = \"\";\n\n    if (selection.equals(\"attack\")) {\n      moveMessage = attack(otherPlayer);\n    }\n    \n    if (selection.equals(\"heal\")) {\n      moveMessage = heal();\n    }\n\n    return moveMessage;\n  }\n\n  public String attack(Player otherPlayer) {\n    int damage = (int)(Math.random() * 20 + 20);\n    damage *= energy;\n    otherPlayer.removeHealth(damage);\n    return this.name + \"'s attack did \" + damage + \" damage to \" + otherPlayer.getName();\n  }\n\n  public String attack(Player otherPlayer, int damage) {\n    damage *= energy;\n    otherPlayer.removeHealth(damage);\n    return this.name + \"'s attack did \" + damage + \" damage to \" + otherPlayer.getName();\n  }\n\n  public String heal() {\n    int healthToAdd = (int)(Math.random() * 20 + 20);\n    healthToAdd *= energy;\n    this.health += healthToAdd;\n\n    if (health > 100) {\n      this.health = 100;\n    }\n    \n    return this.name + \" healed \" + healthToAdd;\n  }\n\n  private ArrayList<String> createMovesList() {\n    ArrayList<String> tempList = new ArrayList<String>();\n\n    tempList.add(\"attack\");\n    tempList.add(\"heal\");\n\n    return tempList;\n  }\n\n  public String toString() {\n    return name + \" health: \" + health;\n  }\n\n  private boolean isValidMove(String selection) {\n    boolean status = false;\n\n    for (String move : moves) {\n      if (selection.equals(move)) {\n        status = true;\n      }\n    }\n\n    return status;\n  }\n\n  private String promptForMove() {\n    Scanner input = new Scanner(System.in);\n    System.out.print(\"> \");\n    String selection = input.nextLine();\n    return selection;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Jedi.java": {
        "text": "public class Jedi extends Player {\n\n  private int specialMove;\n  \n  public Jedi(int health) {\n    super(\"Jedi\", health);\n    this.specialMove = 2;\n    createJediMoves();\n  }\n\n  public void createJediMoves() {\n    removeMove(\"attack\");\n    addMove(\"lightsaber slash\");\n    addMove(\"force whirlwind\");\n    addMove(\"battlemind\");\n  }\n\n  public String lightsaberSlash(Player otherPlayer) {\n    return attack(otherPlayer, 40);\n  }\n\n  public String forceWhirlwind(Player otherPlayer) {\n    String moveMessage = \"\";\n    moveMessage = attack(otherPlayer, 60);\n    specialMove--;\n\n    if (specialMove > 0) {\n      moveMessage += \"\\n\" + specialMove + \" time(s) left to use this move.\";\n    }\n    else {\n      removeMove(\"force whirlwind\");\n    }\n\n    return moveMessage;\n  }\n\n  public String battlemind() {\n    String moveMessage = \"\";\n\n    setEnergy(getEnergy() + 0.2);\n    addHealth(getHealth() + 10);\n\n    moveMessage += \"Meditation increases the concentration and willpower of \" + getName() + \".\\n\";\n    moveMessage += getName() + \" has increased energy for attacking and healing.\";\n\n    if (getEnergy() >= 1.8) {\n      removeMove(\"battlemind\");\n    }\n\n    return moveMessage;\n  }\n\n  public String makeMove(String selection, Player otherPlayer) {\n    String moveMessage = \"\";\n\n    moveMessage = super.makeMove(selection, otherPlayer);\n\n    if (selection.equals(\"lightsaber slash\")) {\n      moveMessage = lightsaberSlash(otherPlayer);\n    }\n    \n    if (selection.equals(\"force whirlwind\")) {\n      moveMessage = forceWhirlwind(otherPlayer);\n    }\n\n    if (selection.equals(\"battlemind\")) {\n      moveMessage = battlemind();\n    }\n\n    return moveMessage;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "Spiderman.java": {
        "text": "public class Spiderman extends Player {\n\n  private int specialMove;\n  \n  public Spiderman(int health) {\n    super(\"Spiderman\", health);\n    this.specialMove = 3;\n    createSpidermanMoves();\n  }\n\n  public void createSpidermanMoves() {\n    removeMove(\"attack\");\n    addMove(\"web throw\");\n    addMove(\"web shooter\");\n    addMove(\"web attack\");\n  }\n\n  public String webShooter(Player otherPlayer) {\n    int damage = (int)(Math.random() * 10 + 5);\n    String moveMessage = attack(otherPlayer, damage);\n    moveMessage += \"\\nSpiderman glued \" + otherPlayer.getName() + \" to the ground with web.\";\n    moveMessage += \"\\n\" + otherPlayer.getName() + \" misses the next turn.\";\n    otherPlayer.setStun(true);\n    return moveMessage;\n  }\n\n  public String webThrow(Player otherPlayer) {\n    String moveMessage = \"Spiderman yanks and throws \" + otherPlayer.getName() + \" into the ground.\\n\";\n    moveMessage += attack(otherPlayer, 40);\n    specialMove--;\n    moveMessage += \"\\n\" + specialMove + \" time(s) left to use this move.\";\n\n    if (specialMove == 0) {\n      removeMove(\"web throw\");\n    }\n\n    return moveMessage;\n  }\n\n  public String webAttack(Player otherPlayer) {\n    return attack(otherPlayer);\n  }\n\n  public String makeMove(String selection, Player otherPlayer) {\n    String moveMessage = \"\";\n\n    moveMessage = super.makeMove(selection, otherPlayer);\n\n    if (selection.equals(\"web throw\")) {\n      moveMessage = webThrow(otherPlayer);\n    }\n\n    if (selection.equals(\"web shooter\")) {\n      moveMessage = webShooter(otherPlayer);\n    }\n\n    if (selection.equals(\"web attack\")) {\n      moveMessage = webAttack(otherPlayer);\n    }\n\n    return moveMessage;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 4
      },
      "Pikachu.java": {
        "text": "public class Pikachu extends Player {\n  \n  public Pikachu(int health) {\n    super(\"Pikachu\", health);\n    createPikachuMoves();\n  }\n\n  public void createPikachuMoves() {\n    removeMove(\"attack\");\n    addMove(\"thundershock\");\n    addMove(\"power up\");\n    addMove(\"discharge\");\n    addMove(\"quick attack\");\n  }\n\n  public String quickAttack(Player otherPlayer) {\n    return attack(otherPlayer);\n  }\n\n  public String thundershock(Player otherPlayer) {\n    int damage = (int)(Math.random() * 40 + 10);\n    return attack(otherPlayer, damage);\n  }\n\n  public String powerUp(Player otherPlayer) {\n    String moveMessage = \"\";\n\n    if (getEnergy() >= 1.8) {\n      moveMessage = \"Maximum energy reached.\\n\";\n    }\n    else {\n      moveMessage = \"Pikachu powers up, gaining more energy!\\n\";\n    }\n\n    setEnergy(getEnergy() + 0.5);\n    moveMessage += getName() + \" energy level: \" + getEnergy();\n    return moveMessage;\n  }\n\n  public String discharge(Player otherPlayer) {\n    String moveMessage = \"\";\n    int damage = (int)(Math.random() * 20 + 10);\n    moveMessage = attack(otherPlayer, damage);\n    moveMessage += getName() + \"\\n's electric discharge paralyzed the enemy!\";\n    otherPlayer.setStun(true);\n    return moveMessage;\n  }\n\n  public String makeMove(String selection, Player otherPlayer) {\n    String moveMessage = \"\";\n\n    moveMessage = super.makeMove(selection, otherPlayer);\n\n    if (selection.equals(\"quick attack\")) {\n      moveMessage = quickAttack(otherPlayer);\n    }\n    \n    if (selection.equals(\"thundershock\")) {\n      moveMessage = thundershock(otherPlayer);\n    }\n\n    if (selection.equals(\"power up\")) {\n      moveMessage = powerUp(otherPlayer);\n    }\n\n    if (selection.equals(\"discharge\")) {\n      moveMessage = discharge(otherPlayer);\n    }\n\n    return moveMessage;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 5
      },
      "Enemy.java": {
        "text": "import java.util.ArrayList;\n\npublic class Enemy extends Player {\n\n  public Enemy(String name, int health) {\n    super(name, health);\n  }\n\n  public void move(Player mainPlayer) {\n    System.out.println(\"Computer's turn . . .\\n\");\n    String randomMove = getRandomMove();\n    System.out.println(makeMove(randomMove, mainPlayer));\n  }\n\n  private String getRandomMove() {\n    ArrayList<String> moves = getMoves();\n    int randomIndex = (int)(Math.random() * moves.size());\n    return moves.get(randomIndex);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 6
      },
      "Voldemort.java": {
        "text": "public class Voldemort extends Enemy {\n  \n  public Voldemort(int health) {\n    super(\"Voldemort\", 100);\n    createVoldemortMoves();\n  }\n\n  public void createVoldemortMoves() {\n    removeMove(\"attack\");\n    removeMove(\"heal\");\n    addMove(\"killing curse\");\n    addMove(\"regeneration\");\n    addMove(\"crucio\");\n  }\n\n  public String killingCurse(Player otherPlayer) {\n    String moveMessage = \"AVADA KEDAVRA!\\n\";\n    int damage = (int)(Math.random() * 40 + 10);\n    moveMessage += attack(otherPlayer, damage);\n    return moveMessage;\n  }\n\n  public String regeneration() {\n    return heal();\n  }\n\n  public String crucio(Player otherPlayer) {\n    int damage = (int)(Math.random() + 30 + 10);\n    return attack(otherPlayer, damage);\n  }\n\n  public String makeMove(String selection, Player otherPlayer) {\n    String moveMessage = \"\";\n\n    moveMessage = super.makeMove(selection, otherPlayer);\n\n    if (selection.equals(\"killing curse\")) {\n      moveMessage = killingCurse(otherPlayer);\n    }\n    \n    if (selection.equals(\"regeneration\")) {\n      moveMessage = regeneration();\n    }\n\n    if (selection.equals(\"crucio\")) {\n      moveMessage = crucio(otherPlayer);\n    }\n\n    return moveMessage;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 7
      },
      "Thanos.java": {
        "text": "public class Thanos extends Enemy {\n  \n  public Thanos(int health) {\n    super(\"Thanos\", 100);\n    createThanosMoves();\n  }\n\n  public void createThanosMoves() {\n    removeMove(\"attack\");\n    removeMove(\"heal\");\n    addMove(\"smash\");\n    addMove(\"Thanos Snap\");\n  }\n\n  public String smash(Player otherPlayer) {\n    int damage = (int)(Math.random() * 30 + 30);\n    return attack(otherPlayer, damage);\n  }\n\n  public String fingerSnap(Player otherPlayer) {\n    String moveMessage = getName() + \"' snap takes away half the health of \" + otherPlayer.getName() + \"!\\n\";\n    int damage = otherPlayer.getHealth() / 2;\n    moveMessage += attack(otherPlayer, damage);\n    return moveMessage;\n  }\n\n  public String makeMove(String selection, Player otherPlayer) {\n    String moveMessage = \"\";\n\n    moveMessage = super.makeMove(selection, otherPlayer);\n\n    if (selection.equals(\"smash\")) {\n      moveMessage = smash(otherPlayer);\n    }\n    \n    if (selection.equals(\"finger snap\")) {\n      moveMessage = fingerSnap(otherPlayer);\n    }\n\n    return moveMessage;\n  }\n\n}",
        "isVisible": true,
        "tabOrder": 8
      }
    },
    "display_name": "Character Battle Game",
    "bubble_choice_description": "An example project that creates a game where the player battles against another character.",
    "thumbnail_url": "https://images.code.org/09f5a3d547909bb2e16cf8413d0e973e-optionC.png",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-14T13:58:45.452+00:00\",\"changed\":[\"cloned from \\\"CSA U8L1-L1b_2023\\\"\"],\"cloned_from\":\"CSA U8L1-L1b_2023\"},{\"changed_at\":\"2023-04-14 13:58:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:45:34 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:47:29 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:53:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:53:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 17:53:31 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
