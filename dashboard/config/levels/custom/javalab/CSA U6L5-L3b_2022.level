<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "The `Song`(#e7e8ea) class represents a song and has instance variables for the title of the song and the lines in the song. The `lines`(#e7e8ea) list is created using the `FileReader.getStringData()`(#e7e8ea) method to read the contents of a file into the list.\r\n\r\n##In Song.java:\r\n\r\n1. Write the method `getAverageCharacters()`(#e7e8ea) to calculate and return the average length of the lines in `list`(#e7e8ea).\r\n\r\n##In MyConsole.java:\r\n\r\n2. Call the `getAverageCharacters()`(#e7e8ea) method and print the results.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    Song mySong = new Song(\"title\", \"song.txt\");\n\n    // TO DO #2: Call the getAverageCharacters() method and print the results.\n\n\n    \n  }\n}",
        "isVisible": true
      },
      "Song.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a song\n */\npublic class Song {\n\n  private String title;              // The title of the song\n  private ArrayList<String> lines;   // The lines of the song\n\n  /*\n   * Constructor to create a Song with the specified\n   * title and the file containing the lines\n   */\n  public Song(String title, String filename) {\n    this.title = title;\n    this.lines = FileReader.getStringData(filename);\n  }\n\n  /*\n   * Returns a string containing the average number\n   * of characters in each line of the song\n   */\n  public String getAverageCharacters() {\n    // TO DO #1: Calculate the average number of characters in each line of\n    // the song and return a string containing the information for each line.\n\n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\n/*\n * Reads data from a file\n */\npublic final class FileReader {\n\n  private static File myFile;          // The File containing the data\n  private static Scanner fileReader;   // The Scanner object to read the file\n\n  /*\n   * Returns an ArrayList of Strings from a file\n   */\n  public static ArrayList<String> getStringData(String filename) {\n    createFile(filename);\n    \n    ArrayList<String> tempList = new ArrayList<String>();\n    \n    while (fileReader.hasNextLine()) {\n      tempList.add(fileReader.nextLine());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of ints from a file\n   */\n  public static ArrayList<Integer> getIntData(String filename) {\n    createFile(filename);\n\n    ArrayList<Integer> tempList = new ArrayList<Integer>();\n\n    while (fileReader.hasNextInt()) {\n      tempList.add(fileReader.nextInt());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Returns an ArrayList of doubles from a file\n   */\n  public static ArrayList<Double> getDoubleData(String filename) {\n    createFile(filename);\n\n    ArrayList<Double> tempList = new ArrayList<Double>();\n\n    while (fileReader.hasNextDouble()) {\n      tempList.add(fileReader.nextDouble());\n    }\n\n    fileReader.close();\n    return tempList;\n  }\n\n  /*\n   * Creates the File and Scanner to read the specified filename\n   */\n  public static void createFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read a file or notifies the\n   * user if the file is not found\n   */\n  public static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException e) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n}",
        "isVisible": true
      },
      "song.txt": {
        "text": "",
        "isVisible": true
      }
    },
    "project_template_level_name": "CSA U6L5-L3b PBT_2022",
    "display_name": "Lines in a Song",
    "bubble_choice_description": "Find the average length of the lines in a song.",
    "thumbnail_url": "https://images.code.org/fd7e4e61c1695019a8abe44444b99e19-song.png",
    "encrypted_exemplar_sources": "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\n0uP7/x2Rj9s=\n"
  },
  "game_id": 68,
  "created_at": "2022-04-14T19:27:02.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-14T19:27:02.160+00:00\",\"changed\":[\"cloned from \\\"CSA U6L5-L3a_2022\\\"\"],\"cloned_from\":\"CSA U6L5-L3a_2022\"},{\"changed_at\":\"2022-04-14 19:27:04 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 20:44:06 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 21:11:02 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 23:00:57 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 23:04:56 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 23:05:23 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 12:17:14 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-05 13:18:20 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 16:02:48 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
