<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-12-14T20:35:37.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Now that Joyful Pastries food truck owner can create <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> objects with specific flavors and prices, they would like to create <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cookie</code> objects with specific values as well.\r\n\r\nüéí **IMPORT:** Import your <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cookie</code> classes from your **Backpack**.\r\n\r\n*Don't have it, or it doesn't work? That's ok! Copy the code from* <a href=\"https://studio.code.org/projects/javalab/TTB1mj-3ttbJMHuVg3FFROGMo8eDlIjuoVteNUkGFPQ\" target=\"_blank\">***here***</a> *and paste it into a new file in your project.*\r\n\r\n‚úÖ **TO DO #1:** Write a no-argument constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cookie</code> class.\r\n\r\n‚úÖ **TO DO #2:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cookie</code> class.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FoodTruckRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cookie</code> objects using each constructor.\r\n\r\n‚úÖ **TO DO #4:** Print the constructors for the objects.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing no-argument and parameterized constructors, using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">super</code> keyword, and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n      <p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-super-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_exemplar_sources": "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\n",
    "display_name": "The Cookie Class",
    "bubble_choice_description": "Import your `Cookie` class and write no-argument and parameterized constructors to assign values to its instance variables.",
    "thumbnail_url": "https://images.code.org/e688d070569125d60d6f484385684ccc-cookie.png",
    "encrypted_validation": "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\nIBnR7Qg=\n",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate objects using the no-argument and parameterized\n     * constructors. Then use ConstructorsHelper.printConstructors(nameOfObject)\n     * to print the constructors for the objects to the console.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 1
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-12-14T20:35:37.890+00:00\",\"changed\":[\"cloned from \\\"CSA U2L5-L7_2023\\\"\"],\"cloned_from\":\"CSA U2L5-L7_2023\"},{\"changed_at\":\"2022-12-14 20:51:01 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 21:54:16 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 21:54:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 21:57:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 21:57:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 21:57:56 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-14 16:56:16 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-09-19 19:59:32 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
