<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-17T00:15:39.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">School</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to store the clubs at a school.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">School</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Club</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Club</code> objects\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SchoolRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">School</code> object.\r\n\r\n2. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code>.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "School Clubs",
    "bubble_choice_description": "Create a `School` class that contains an `ArrayList` to store clubs at a school.",
    "thumbnail_url": "https://images.code.org/ce3f72344059da7b020d2a08dffaf47e-school.png",
    "encrypted_exemplar_sources": "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\n",
    "encrypted_validation": "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\nkdoNiJlbZ1GESlqCLZQe\n",
    "start_sources": {
      "SchoolRunner.java": {
        "text": "public class SchoolRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a School object, then call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "School.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a school\n */\npublic class School {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Club objects, then write\n   * a no-argument constructor that initializes the list to an empty list.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /*\n   * Returns the list of clubs\n   */\n  public ArrayList<Club> getClubs() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return the list of Club object.\n     * -----------------------------------------------------------------------------\n     */\n    \n    return null;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Club.java": {
        "text": "/*\n * Represents a club\n */\npublic class Club {\n  \n  private String name;    // The name of a club\n\n  /*\n   * Sets name to the specified name of a club\n   */\n  public Club(String name) {\n    this.name = name;\n  }\n\n  /*\n   * Returns the name of the club\n   */\n  public String getName() {\n    return name;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 3
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 4
      }
    },
    "name_suffix": "_2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-17T00:15:39.700+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L6c_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L6c_2023\"}]"
}]]></config>
</Javalab>
