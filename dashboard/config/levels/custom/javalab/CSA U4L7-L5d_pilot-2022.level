<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-08-23T20:32:08.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A researcher wants to determine an approximate width of the largest cities in the world by land area.\r\n\r\nThe researcher assumes that each city is shaped like a circle. To find the approximate width of each city, the researcher needs to find the square root of each value in `landAreas`(#e7e8ea) divided by `Math.PI`(#e7e8ea).\r\n\r\n##In CityData.java:\r\n\r\n1. Write the `calculateSizes()`(#e7e8ea) method.\r\n\r\n   * Traverse the `landAreas`(#e7e8ea) array. Divide each value by `Math.PI`(#e7e8ea) then use `Math.sqrt()`(#e7e8ea) to calculate the square root of this result to get the radius.\r\n   \r\n   * Multiply each radius by `2`(#e7e8ea) to get the total approximate width.\r\n\r\n   * Return a new array that contains the width.\r\n\r\n##In MyConsole.java:\r\n\r\n2. Declare and initialize a new array called `landSizes`(#e7e8ea) that stores the array returned from the `calculateSizes()`(#e7e8ea) method.\r\n\r\n3. Print the values stored in the `landSizes`(#e7e8ea) array.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "City Sizes",
    "bubble_choice_description": "A researcher wants to determine an approximate width of the largest cities in the world by land area.",
    "thumbnail_url": "https://images.code.org/5a69e413e8df7d42deec96c5384b717e-image-1650649001010.png",
    "encrypted_exemplar_sources": "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\n",
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "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\n",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    String[] cities = {\"New York\", \"Tokyo\", \"Chicago\", \"Atlanta\", \"Philadelphia\", \"Boston\",\n                       \"Los Angeles\", \"Dallas/Fort Worth\", \"Houston\", \"Detroit\"};\n    double[] cityAreas = {8683, 6993, 5498, 5083, 4661, 4497, 4320, 3644, 3355, 3267};\n    CityData myCities = new CityData(cityAreas);\n\n    // TO DO #2: Call the calculateSizes() method.\n\n\n    // TO DO #3: Print the values stored in the new array.\n\n    \n  }\n}",
        "isVisible": true
      },
      "CityData.java": {
        "text": "/*\n * Analyzes city data\n */\npublic class CityData {\n\n  private double[] landAreas;   // The list of land areas\n\n  /*\n   * Constructor to create a CityData object\n   * with the specified array of land areas\n   */\n  public CityData(double[] landAreas) {\n    this.landAreas = landAreas;\n  }\n\n  /*\n   * Returns an array containing the approximate\n   * width of each city\n   */\n  public double[] calculateSizes() {\n    // TO DO #2: Return an array containing the approximate width of each city.\n\n\n    return null;\n  }\n  \n}",
        "isVisible": true
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:32:08.949+00:00\",\"changed\":[\"cloned from \\\"CSA U4L7-L5d_2022\\\"\"],\"cloned_from\":\"CSA U4L7-L5d_2022\"},{\"changed_at\":\"2022-09-21 22:46:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 22:52:22 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-21 22:52:31 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
