<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "The Guess Who game contains a list of characters that the player can choose from. The computer randomly chooses questions when the **Ask a Question** button is clicked to eliminate characters from the board based on their traits (gender, hair color, eye color, and shirt color). Each `Character` object has a 1D array containing their traits.\r\n\r\nIn `GuessWho.java`, complete the `createCharacters()` method. This method returns a 2D array of `Character` objects that each contain their list of traits from the 2D array `imageFiles`. Each row in `imageFiles` contains the traits for one `Character`.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "playground",
    "encrypted_examples": "Y5oxU2saAYVgPIsEA2UtbgpirxPfyQgbuyBX978jkHY3jPzh5K4ZAIFMmCxg\nkN429Ki9Ovq4r36kfPT1AWENNLr3qehrC9WBlrjvEeGuTyPMP6VFEEvxpt3L\nMt+dLSoH\n",
    "display_name": "Guess Who",
    "starter_assets": {
      "character01.png": "83506304-b06e-4d45-a64b-14749077cc26.png",
      "character02.png": "9bd90dd5-ff4a-4a24-8807-98049b53f371.png",
      "character03.png": "706988d3-9747-4639-878b-52155c9bf986.png",
      "character04.png": "8e506273-f71f-4b82-9141-a9756850a355.png",
      "character05.png": "604d7021-3b91-48aa-b2ff-7adc87fc59ba.png",
      "character06.png": "09238587-7673-4d8a-82ef-5163f1d7f93b.png",
      "character07.png": "9d5d4900-211a-4ca3-9933-93b4bbf0dfa9.png",
      "character08.png": "b25646ac-9dc7-4a7e-bd3e-a42ab75f1185.png",
      "character09.png": "caa61390-cedb-4d26-8ea1-b7de683527b6.png",
      "askQuestion.png": "92b5bbad-2113-44ba-ae4b-4e959a150de5.png"
    },
    "start_sources": {
      "MyPlayground.java": {
        "text": "public class MyPlayground {\n  public static void main(String[] args) {\n\n    String[][] characters = {{\"character01.png\", \"girl\", \"red\", \"green\", \"blue\"},\n                             {\"character02.png\", \"girl\", \"brown\", \"brown\", \"pink\"},\n                             {\"character03.png\", \"girl\", \"blonde\", \"blue\", \"gray\"},\n                             {\"character04.png\", \"girl\", \"brown\", \"brown\", \"yellow\"},\n                             {\"character05.png\", \"girl\", \"brown\", \"brown\", \"purple\"},\n                             {\"character06.png\", \"boy\", \"brown\", \"brown\", \"yellow\"},\n                             {\"character07.png\", \"boy\", \"brown\", \"brown\", \"blue\"},\n                             {\"character08.png\", \"boy\", \"blonde\", \"blue\", \"blue\"},\n                             {\"character09.png\", \"boy\", \"brown\", \"brown\", \"green\"}};\n    \n    GuessWho myGame = new GuessWho(characters);\n    myGame.play();\n    \n  }\n}",
        "isVisible": true
      },
      "GuessWho.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\nimport java.util.ArrayList;\nimport java.io.FileNotFoundException;\n\npublic class GuessWho {\n\n  /**\n   * the board to display the game\n   */\n  private static Board myBoard = Playground.board;\n\n  /**\n   * the list of character cards\n   */\n  private static Character[][] characters;\n\n  /**\n   * the start button\n   */\n  private StartButton startButton;\n\n  /**\n   * Creates a GuessWho game\n   */\n  public GuessWho(String[][] characterImages) {\n    this.characters = createCharacters(characterImages);\n\n    try {\n      startButton = new StartButton(\"askQuestion.png\", 100, 20, 200, 40);\n    } catch(FileNotFoundException e) {\n      System.out.println(\"Error creating start button.\");\n    }\n  }\n\n  /**\n   * Starts the game\n   */\n  public void play() {\n    showGame();\n    printRules();\n\n    try {\n      myBoard.start();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error starting game.\");\n    }\n  }\n\n  /**\n   * Prints the rules of the game to the console\n   */\n  public void printRules() {\n    System.out.println(\"I will guess your character!\");\n    System.out.println(\"Choose one of the characters from the board.\");\n    System.out.println(\"Click the Ask a Question to be asked a question.\");\n    System.out.println(\"Based on your answer, I will eliminate characters\");\n    System.out.println(\"until I find the one you picked!\");\n  }\n\n  /**\n   * Places the game components on the board\n   */\n  public void showGame() {\n    // show the cards\n    for (int row = 0; row < characters.length; row++) {\n      for (int col = 0; col < characters[0].length; col++) {\n        myBoard.addImageItem(characters[row][col]);\n      }\n    }\n\n    // show the start button\n    myBoard.addClickableImage(startButton);\n  }\n\n  /**\n   * Creates the character cards from the image files\n   * @return a 2D array containing the character cards\n   */\n  public Character[][] createCharacters(String[][] imageFiles) {\n    // the temporary 2D array of Characters\n    Character[][] tempCards = new Character[3][3];\n\n    // a counter variable to track the row in imageFiles\n    int characterRow = 0;\n\n    // the initial x position of the card\n    int xPos = 20;\n\n    // the initial y position of the card\n    int yPos = 70;\n\n    // TO DO: Loop through the tempCards array.\n\n\n    // TO DO: Uncomment the code segment below and place inside\n    // the loop traversing the tempCards array. Inside the try\n    // block, assign the current position in the 2D array a new\n    // Character object using the appropriate row from imageFiles.\n    // Set the xPos and yPos and use 100x100 for width and height.\n\n    // try {\n    //   create the Character object at the current position in tempCards\n    // } catch (FileNotFoundException e) {\n    //  System.out.println(\"Error creating character: \" + imageFiles[characterRow]);\n    // }\n\n    // TO DO: Inside the inner loop, increment characterRow by 1 and xPos by 120.\n\n    // TO DO: Inside the outer loop, set xPos back to 20 and increment yPos by 100.\n\n\n    return tempCards;\n  }\n\n  /**\n   * Removes a character card from the board\n   */\n  public static void removeCharacter(Character toRemove) {\n    myBoard.removeItem(toRemove);\n  }\n\n  /**\n   * Gets the character cards\n   * @return the 2D array of character cards\n   */\n  public static Character[][] getCharacters() {\n    return characters;\n  }\n\n  /**\n   * Gets the board for the game\n   */\n  public static Board getBoard() {\n    return myBoard;\n  }\n}",
        "isVisible": true
      },
      "GuessWhoLogic.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\npublic final class GuessWhoLogic {\n\n  /**\n   * the character cards\n   */\n  private static Character[][] characterCards = GuessWho.getCharacters();\n\n  /**\n   * gets the player's input from the console\n   */\n  private static Scanner input;\n\n  /**\n   * the list of questions\n   */\n  private static ArrayList<String> questions = GuessWhoLogic.createQuestions();\n\n  /**\n   * \n   */\n  private static boolean player1Turn = true;\n\n  /**\n   * Creates the list of questions to ask  the player\n   * @return the list of questions\n   */\n  public static ArrayList<String> createQuestions() {\n    ArrayList<String> questionsList = new ArrayList<String>();\n\n    questionsList.add(\"Does your character have brown hair?\");\n    questionsList.add(\"Does your character have red hair?\");\n    questionsList.add(\"Does your character have blonde hair?\");\n    questionsList.add(\"Does your character have blue eyes?\");\n    questionsList.add(\"Does your character have brown eyes?\");\n    questionsList.add(\"Does your character have green eyes?\");\n    questionsList.add(\"Does your character have a blue shirt?\");\n    questionsList.add(\"Does your character have a pink shirt?\");\n    questionsList.add(\"Does your character have a gray shirt?\");\n    questionsList.add(\"Does your character have a yellow shirt?\");\n    questionsList.add(\"Does your character have a purple shirt?\");\n    questionsList.add(\"Does your character have a green shirt?\");\n    \n    return questionsList;\n  }\n\n  /**\n   * Asks the player clues\n   */\n  public static void askQuestion() {\n    input = new Scanner(System.in);\n\n    int randomIndex = (int)(Math.random() * questions.size());\n    String chosenQuestion = questions.get(randomIndex);\n    System.out.println(chosenQuestion);\n    System.out.print(\"Enter y for yes or n for no: \");\n\n    String answer = input.nextLine();\n    eliminateCharacters(chosenQuestion, answer);\n\n    questions.remove(randomIndex);\n\n    input.close();\n  }\n\n  /**\n   * Eliminates characters based on the player's answer\n   * @param question the question that was asked\n   * @param answer the answer from the player\n   */\n  public static void eliminateCharacters(String question, String answer) {\n    if (question.indexOf(\"hair\") > 0) {\n      checkHair(question, answer);\n    }\n    else if (question.indexOf(\"eyes\") > 0) {\n      checkEyes(question, answer);\n    }\n    else if (question.indexOf(\"boy\") > 0) {\n      checkGender(question, answer);\n    }\n    else {\n      checkShirt(question, answer);\n    }\n  }\n\n  /**\n   * Checks gender based on the player's answer\n   * @param question the question that was asked\n   * @param answer the answer from the player\n   */\n  public static void checkGender(String question, String answer) {\n    for (int row = 0; row < characterCards.length; row++) {\n      for (int col = 0; col < characterCards[0].length; col++) {\n        Character current = characterCards[row][col];\n        String currentGender = current.getGender();\n\n        if (answer.equals(\"y\") && question.indexOf(\"boy\") > 0 && !currentGender.equals(\"boy\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"y\") && question.indexOf(\"girl\") > 0 && !currentGender.equals(\"girl\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"boy\") > 0 && currentGender.equals(\"boy\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"girl\") > 0 && currentGender.equals(\"girl\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n      }\n    }\n  }\n\n  /**\n   * Checks hair based on the player's answer\n   * @param question the question that was asked\n   * @param answer the answer from the player\n   */\n  public static void checkHair(String question, String answer) {\n    for (int row = 0; row < characterCards.length; row++) {\n      for (int col = 0; col < characterCards[0].length; col++) {\n        Character current = characterCards[row][col];\n        String currentHairColor = current.getHairColor();\n\n        if (answer.equals(\"y\") && question.indexOf(\"brown\") > 0 && !currentHairColor.equals(\"brown\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"y\") && question.indexOf(\"red\") > 0 && !currentHairColor.equals(\"red\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"y\") && question.indexOf(\"blonde\") > 0 && !currentHairColor.equals(\"blonde\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"brown\") > 0 && currentHairColor.equals(\"brown\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"red\") > 0 && currentHairColor.equals(\"red\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"blonde\") > 0 && currentHairColor.equals(\"blonde\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n      }\n    }\n  }\n\n  /**\n   * Checks eyes based on the player's answer\n   * @param question the question that was asked\n   * @param answer the answer from the player\n   */\n  public static void checkEyes(String question, String answer) {\n    for (int row = 0; row < characterCards.length; row++) {\n      for (int col = 0; col < characterCards[0].length; col++) {\n        Character current = characterCards[row][col];\n        String currentEyeColor = current.getEyeColor();\n\n        if (answer.equals(\"y\") && question.indexOf(\"blue\") > 0 && !currentEyeColor.equals(\"blue\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"y\") && question.indexOf(\"brown\") > 0 && !currentEyeColor.equals(\"brown\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"y\") && question.indexOf(\"green\") > 0 && !currentEyeColor.equals(\"green\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"blue\") > 0 && currentEyeColor.equals(\"blue\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"brown\") > 0 && currentEyeColor.equals(\"brown\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"green\") > 0 && currentEyeColor.equals(\"green\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n      }\n    }\n  }\n\n  /**\n   * Checks shirt based on the player's answer\n   * @param question the question that was asked\n   * @param answer the answer from the player\n   */\n  public static void checkShirt(String question, String answer) {\n    for (int row = 0; row < characterCards.length; row++) {\n      for (int col = 0; col < characterCards[0].length; col++) {\n        Character current = characterCards[row][col];\n        String currentShirtColor = current.getShirtColor();\n\n        if (answer.equals(\"y\") && question.indexOf(\"blue\") > 0 && !currentShirtColor.equals(\"blue\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"y\") && question.indexOf(\"pink\") > 0 && !currentShirtColor.equals(\"pink\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"y\") && question.indexOf(\"gray\") > 0 && !currentShirtColor.equals(\"gray\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"y\") && question.indexOf(\"yellow\") > 0 && !currentShirtColor.equals(\"yellow\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"y\") && question.indexOf(\"purple\") > 0 && !currentShirtColor.equals(\"purple\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"y\") && question.indexOf(\"green\") > 0 && !currentShirtColor.equals(\"green\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"blue\") > 0 && currentShirtColor.equals(\"blue\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"pink\") > 0 && currentShirtColor.equals(\"pink\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"gray\") > 0 && currentShirtColor.equals(\"gray\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"yellow\") > 0 && currentShirtColor.equals(\"yellow\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"purple\") > 0 && currentShirtColor.equals(\"purple\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n        else if (answer.equals(\"n\") && question.indexOf(\"green\") > 0 && currentShirtColor.equals(\"green\")) {\n          current.setEliminated(true);\n          GuessWho.removeCharacter(current);\n        }\n      }\n    }        \n  }\n\n  /**\n   * Checks if only one character is left\n   * @return true if the game is over, otherwise false\n   */\n  public static boolean gameOver() {\n    boolean gameOver = true;\n    int charactersRemaining = 0;\n\n    for (int row = 0; row < characterCards.length; row++) {\n      for (int col = 0; col < characterCards[0].length; col++) {\n        if (!characterCards[row][col].getEliminated()) {\n          charactersRemaining++;\n        }\n      }\n    }\n\n    if (charactersRemaining > 1) {\n      gameOver = false;\n    }\n\n    return gameOver;\n  }\n\n  /**\n   * Ends the game and determines which player won\n   */\n  public static void endGame() {\n    \n    \n    try {\n      GuessWho.getBoard().end();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error ending the game.\");\n    }\n  }\n}",
        "isVisible": true
      },
      "Character.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class Character extends ImageItem {\n\n  /**\n   * the character's traits\n   */\n  private String[] characterTraits;\n\n  /**\n   * whether or not the character has been eliminated\n   */\n  private boolean isEliminated;\n\n  /**\n   * Creates a Character\n   * @param filename the name of the image file for the button\n   * @param characterTraits the array of character traits\n   * @param x the x position of the button\n   * @param y the y position of the button\n   * @param width the width of the button\n   * @param height the height of the button\n   */\n  public Character(String[] characterTraits, int x, int y, int width, int height) throws FileNotFoundException {\n    super(characterTraits[0], x, y, width, height);\n    this.characterTraits = characterTraits;\n    isEliminated = false;\n  }\n\n  /**\n   * Gets the character's gender\n   * @return the character's gender\n   */\n  public String getGender() {\n    return characterTraits[1];\n  }\n\n  /**\n   * Gets the character's hair color\n   * @return the character's hair color\n   */\n  public String getHairColor() {\n    return characterTraits[2];\n  }\n\n  /**\n   * Gets the character's eye color\n   * @return the character's eye color\n   */\n  public String getEyeColor() {\n    return characterTraits[3];\n  }\n\n  /**\n   * Gets the character's shirt color\n   * @return the character's shirt color\n   */\n  public String getShirtColor() {\n    return characterTraits[4];\n  }\n\n  /**\n   * Gets the character's elimination status\n   * @return true if the character has been eliminated,\n   *         otherwise false\n   */\n  public boolean getEliminated() {\n    return isEliminated;\n  }\n\n  /**\n   * Sets the character's elimination status\n   * @param eliminated whether or not the character is eliminated\n   */\n  public void setEliminated(boolean status) {\n    isEliminated = status;\n  }\n}",
        "isVisible": true
      },
      "StartButton.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class StartButton extends ClickableImage {\n\n  /**\n   * Creates a StartButton\n   * @param filename the image file for the button\n   * @param x the x position of the button\n   * @param y the y position of the button\n   * @param width the width of the button\n   * @param height the height of the button\n   */\n  public StartButton(String filename, int x, int y, int width, int height) throws FileNotFoundException {\n    super(filename, x, y, width, height);\n  }\n\n  /**\n   * Starts asking questions when clicked\n   */\n  public void onClick() {\n    if (!GuessWhoLogic.gameOver()) {\n      GuessWhoLogic.askQuestion();\n    }\n    else {\n      GuessWhoLogic.endGame();\n    }\n  }\n}",
        "isVisible": true
      }
    },
    "bubble_choice_description": "Use multiple lists in this Guess Who game to manage the list of traits for each character.",
    "thumbnail_url": "https://images.code.org/19ed0639a37b830520674380c439eaae-image-1641777159749.png"
  },
  "game_id": 68,
  "created_at": "2021-12-12T16:04:08.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2021-12-12 16:04:11 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 00:21:16 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 20:09:12 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 20:26:25 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 21:09:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 00:58:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 01:13:17 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 01:18:46 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 01:25:12 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
