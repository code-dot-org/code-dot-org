<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T18:15:48.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A family is trying to decide on which dog breed to adopt. They want to choose a dog breed that is less than or equal to 20 inches tall. They have the following values:\r\n\r\n<pre style=\"background-color: #333333; color: white;\">\r\nRow 1: 13, 15\r\nRow 2: 19, 23\r\nRow 3: 22, 24\r\nRow 4: 10, 12\r\n</pre>\r\n\r\nwhere each row represents a Beagle, Dalmation, Golden Retriever, and Pug, respectively. Each column represents the minimum height and maximum height of each dog breed, respectively.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">DogData</code> class, write the method <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findHeight()</code> to find the dog breed with a minimum height and the dog breed with a maximum height that is less than or equal to 20. Return a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> containing each value found that meets the criteria.\r\n\r\n1. If the value is less than or equal to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">maxHeight</code> and the column is <code style=\"background-color: #ececec; color: black; font-weight: bold;\">0</code>, concatenate the corresponding name of the breed from <code style=\"background-color: #ececec; color: black; font-weight: bold;\">breeds</code> based on the row that the value is found, the value found, and that it is the minimum height to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> to return.\r\n\r\n2. If the value is less than or equal to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">maxHeight</code> and the column is <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code>, concatenate the corresponding name of the breed from <code style=\"background-color: #ececec; color: black; font-weight: bold;\">breeds</code> based on the row that the value is found, the value found, and that it is the maximum height to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> to return.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with traversing a two-dimensional (2D) array in column-major order.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_column_major_traversal",
    "reference_links": [
      "/courses/csa-2023/guides/two-dimensional-arrays"
    ],
    "display_name": "Dog Breeds",
    "bubble_choice_description": "Write a method to find the dog breeds with a minimum and maximum height that meet a specific criteria and print the results.",
    "thumbnail_url": "https://images.code.org/88f3474433cfc656f10f5f9d39e325fc-image-1650999257527.png",
    "encrypted_validation": "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\nvYp0\n",
    "encrypted_exemplar_sources": "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\n",
    "start_sources": {
      "DogRunner.java": {
        "text": "public class DogRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of dog breeds\n    String[] breeds = {\"Beagle\", \"Dalmation\", \"Golden Retriever\", \"Pug\"};\n\n    // Creates a 2D array with the minimum and maximum heights of each breed\n    int[][] heights = {{13, 15}, {19, 23}, {22, 24}, {10, 12}};\n\n    // Creates a DogData object\n    DogData familyDog = new DogData(breeds, heights);\n\n    // Calls the findHeight() method and prints the result\n    System.out.println(familyDog.findHeight(20));\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "DogData.java": {
        "text": "/*\n * Analyzes data about dog breeds\n */\npublic class DogData {\n\n  private String[] breeds;  // The 1D array of dog breeds\n  private int[][] data;     // The 2D array of data to analyze\n\n  /*\n   * Initializes breeds to the specified 1D array of dog breeds,\n   * and initializes data to the specified 2D array of dog data\n   */\n  public DogData(String[] breeds, int[][] data) {\n    this.breeds = breeds;\n    this.data = data;\n  }\n\n  /*\n   * Returns a String containing the dog breed that has a minimum height and\n   * the dog breed that has a maximum height less than or equal to maxHeight\n   */\n  public String findHeight(int maxHeight) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return a String containing the dog breed that has a minimum height and\n     * the dog breed that has a maximum height less than or equal to maxHeight.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    return \"\";\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T18:15:48.204+00:00\",\"changed\":[\"cloned from \\\"CSA U5L4-L3b_2025\\\"\"],\"cloned_from\":\"CSA U5L4-L3b_2025\"}]"
}]]></config>
</Javalab>
