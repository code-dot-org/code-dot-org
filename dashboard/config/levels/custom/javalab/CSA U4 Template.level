<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "playground",
    "start_sources": {
      "MyPlayground.java": {
        "text": "public class MyPlayground {\n  public static void main(String[] args) {\n\n    PopBalloonsGame.play();\n    \n  }\n}",
        "isVisible": true
      },
      "PopBalloonsGame.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\n\npublic final class PopBalloonsGame {\n\n  private static Board myBoard = Playground.board;\t\t// the board to display the game\n  private static int totalRoll;\t\t\t\t\t\t\t\t\t\t\t\t// the total of both dice\n\n  // initiates gameplay of the Pop the Balloons game\n  public static void play() {\n    GameDisplay.displayGame();\t\t\t\t\t// displays the game components on the board\n    GameControl.startPlayground();  \t\t// starts gameplay\n  }\n\n  ////////// TO DO: Develop the logic for the game below this line. \\\\\\\\\\\\\\\\\\\\\n\n  // rolls the dice to get new values for each dice and the total roll value\n  public static void rollDice() {\n    // assigns a value for the left dice and updates the image\n    int diceLeftValue = 2;\n    updateDice(1, diceLeftValue);\n\n    // assigns a value for the right dice and updates the image\n    int diceRightValue = 3;\n    updateDice(2, diceRightValue);\n\n    // adds together the two dice and displays it on the board\n    totalRoll = diceLeftValue + diceRightValue;\n    GameDisplay.updateMessage(\"Pop balloons to total \" + totalRoll);\n  }\n\n  // updates the display of the dice to match the value rolled\n  public static void updateDice(int dice, int value) {\n    // TO DO: Check if 1st dice and update it.\n    \n\n    // TO DO: Check if 2nd dice and update it.\n    \n  }\n\n  // plays a pop sound and updates the balloon image to a popped balloon image\n  public static void popBalloon(int value) {\n    // TO DO: Create an array of popped sounds and choose a random sound to play.\n\n\n    // TO DO: Remove the clicked balloon and show the popped balloon image.\n\n    \n  }\n\n  // calculates the score and number of remaining balloons\n  public static void calculateScore() {\n    // TO DO: Set score and numRemaining to 0.\n    \n\n    // TO DO: Check the status of each balloon to determine whether to add to score.\n    \n  }\n\n  // checks if there are valid moves left on the board\n  public static boolean movesLeft() {\n    // TO DO: Create a flag variable to track if can continue.\n    \n\n    // TO DO: Write a nested loop to check each combination of balloons and update flag.\n    \n\n    // TO DO: Return the flag variable.\n    return false;\n  }\n\n  // informs the user the value to pop if there are moves\n  public static void checkMoves() {\n    // TO DO: Check if there are moves left and update message with total roll value.\n    \n  }\n\n  // checks whether the player's selection is valid\n  public static boolean isValidMove(int balloonValue) {\n    // TO DO: Create a flag variable to track if the move is valid.\n    \n\n    // TO DO: Check whether the balloonValue is greater than the totalRoll.\n    \n\n    // TO DO: Return the flag variable.\n    return false;\n  }\n\n  // plays a sound and displays a message based on whether or not the player won\n  public static void gameOver() {\n    // TO DO: Play a sound and display a message based on whether the player won.\n\t\t\n\n    // TO DO: Stop the Playground.\n    \n  }\n\n  // checks whether the player can roll both dice\n  public static boolean canRollBoth() {\n    // TO DO: Create a flag variable to track if can roll both dice.\n\n\n    // TO DO: Create Balloon variables for balloons 7, 8, and 9.\n    \n\n    // TO DO: Check if balloons 7, 8, and 9 are popped and remove right dice if true.\n    \n\n    // TO DO: Return the flag variable.\n    return false;\n  }\n}",
        "isVisible": true
      },
      "GameControl.java": {
        "text": "import org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class GameControl {\n\n  private static Board myBoard = Playground.board;\n  private static ImageItem temp;\n  // private static RollButton tempButton;\n  // private static Balloon tempBalloon;\n\n  public static void startPlayground() {\n    try {\n      myBoard.start();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error starting The Playground.\");\n    }\n  }\n\n  public static void stopPlayground() {\n    try {\n      myBoard.end();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error starting The Playground.\");\n    }\n  }\n\n  public static ImageItem createImage(String filename, int x, int y, int width, int height) {\n    try {\n      temp = new ImageItem(filename, x, y, width, height);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating image: \" + filename);\n    }\n\n    return temp;\n  }\n\n  // public static RollButton createButton(String filename, int x, int y, int width, int height) {\n  //   try {\n  //     tempButton = new RollButton(filename, x, y, width, height);\n  //   } catch (FileNotFoundException e) {\n  //     System.out.println(\"Error creating button: \" + filename);\n  //   }\n\n  //   return tempButton;\n  // }\n\n  // public static Balloon createBalloon(String filename, int x, int y, int width, int height, int value) {\n  //   try {\n  //     tempBalloon = new Balloon(filename, x, y, width, height, value);\n  //   } catch (FileNotFoundException e) {\n  //     System.out.println(\"Error creating balloon: \" + filename);\n  //   }\n\n  //   return tempBalloon;\n  // }\n\n  public static void playSoundEffect(String filename) {\n    try {\n      myBoard.playSound(filename);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error playing sound: \" + filename);\n    }\n  }\n}",
        "isVisible": true
      },
      "GameDisplay.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\n\npublic final class GameDisplay {\n\n  private static Board myBoard = Playground.board;\t\t// the board to display the game\n  private static Dice leftDice;\t\t\t\t\t\t\t\t\t\t\t\t// the left dice\n  private static Dice rightDice;\t\t\t\t\t\t\t\t\t\t\t// the right dice\n  // private static RollButton button;\t\t\t\t\t\t\t\t\t\t// the roll button\n  private static TextItem message;\t\t\t\t\t\t\t\t\t\t// message to display on the board\n  // private static Balloon[] balloons;\t\t\t\t\t\t\t\t// array of the balloon objects on the board\n  // private static ImageItem[] popped;\t\t\t\t\t\t\t\t// array of popped balloon images\n\n  // displays all the visual components of the game on the board\n  public static void displayGame() {\n    showIntro();\n    createMessage();\n    showDice();\n    // showRollButton();\n    // showBalloons();\n    // createPopped();\n  }\n  \n  // prints an introductory message to the console\n  public static void showIntro() {\n    System.out.println(\"Pop the Balloons!\");\n    System.out.println(\"---------------------\");\n    System.out.println(\"This game involves balloons that are numbered 1 through 10.\");\n    System.out.println(\"Your goal is to pop all of them!\");\n    System.out.println(\"You may pop any combination of unpopped ballons to add up to the sum on the dice.\\n\");\n  }\n\n  // creates the message to display on the board\n  public static void createMessage() {\n    int xPos = 70;\n    int yPos = 210;\n    \n    message = new TextItem(\"Welcome to Pop the Balloons!\", xPos, yPos, Color.BLACK, Font.SANS, 20, 0);\n    myBoard.addTextItem(message);\n  }\n\n  // update the message shown on the board\n  public static void updateMessage(String text) {\n    message.setText(text);\n    myBoard.addTextItem(message);\n  }\n\n  // creates the dice and displays them on the board\n  public static void showDice() {\n    // array of image files for each side of a dice\n    String[] diceImageFiles = {\"dice1.png\", \"dice2.png\", \"dice3.png\", \"dice4.png\", \"dice5.png\", \"dice6.png\"};\n\t\t\n    int diceSize = 70;\t\t\t// the width and height of the dice\n    int diceXPos = 120;\t\t\t// the starting x position of the dice\n    int diceYPos = 240;\t\t\t// the y position of the dice\n    leftDice = new Dice(diceImageFiles, diceXPos, diceYPos, diceSize, diceSize);\n    rightDice = new Dice(diceImageFiles, diceXPos + diceSize + 20, diceYPos, diceSize, diceSize);\n\n    myBoard.addImageItem(leftDice.setCurrentSide(1));\n    myBoard.addImageItem(rightDice.setCurrentSide(1));\n  }\n\n  // creates the roll button and displays it on the board\n  // public static void showRollButton() {\n\t\t// int buttonWidth = 200;\t\t// the width of the button\n  //   int buttonHeight = 50;\t\t// the height of the button\n  //   int buttonXPos = 100;\t\t\t// the x position of the button\n  //   int buttonYPos = 320;\t\t\t// the y position of the button\n    \n  //   button = GameControl.createButton(\"rollButton.png\", buttonXPos, buttonYPos, buttonWidth, buttonHeight);\n  //   myBoard.addClickableImage(button);\n  // }\n\n  // gets the left dice\n  public static Dice getLeftDice() {   \n    return leftDice;\n  }\n\n  // gets the right dice\n  public static Dice getRightDice() {\n    return rightDice;\n  }\n\n  // // creates the balloons and displays them on the board\n  // public static void showBalloons() {\n  //   balloons = new Balloon[10];\n  //   int balloonValue = 1;\n  //   int xPos = 10;\n  //   int yPos = 20;\n  //   int width = 60;\n  //   int height = 90;\n\n  //   for (int i = 0; i < balloons.length; i++) {\n  //     String balloonFile = \"balloon\" + balloonValue + \".png\";\n  //     balloons[i] = GameControl.createBalloon(balloonFile, xPos, yPos, width, height, balloonValue);\n  //     myBoard.addClickableImage(balloons[i]);\n\n  //     xPos += 75;\n  //     if (i == 4) {\n  //       yPos += 100;\n  //       xPos = 10;\n  //     }\n\n  //     balloonValue++;\n  //   }\n  // }\n\n  // // gets a balloon object from the board\n  // public static Balloon getBalloon(int value) {\n  //   return balloons[value - 1];\n  // }\n\n  // // creates the popped balloons to display on the board\n  // public static void createPopped() {\n  //   popped = new ImageItem[10];\n    \n  //   for (int i = 0; i < popped.length; i++) {\n  //     if (i == 0 || i == 5) {\n  //       popped[i] = GameControl.createImage(\"poppedTeal.png\", balloons[i].getX(), balloons[i].getY(), balloons[i].getWidth(), balloons[i].getHeight());\n  //     }\n  //     else if (i == 1 || i == 6) {\n  //       popped[i] = GameControl.createImage(\"poppedPurple.png\", balloons[i].getX(), balloons[i].getY(), balloons[i].getWidth(), balloons[i].getHeight());\n  //     }\n  //     else if (i == 2 || i == 7) {\n  //       popped[i] = GameControl.createImage(\"poppedOrange.png\", balloons[i].getX(), balloons[i].getY(), balloons[i].getWidth(), balloons[i].getHeight());\n  //     }\n  //     else if (i == 3 || i == 8) {\n  //       popped[i] = GameControl.createImage(\"poppedGreen.png\", balloons[i].getX(), balloons[i].getY(), balloons[i].getWidth(), balloons[i].getHeight());\n  //     }\n  //     else {\n  //       popped[i] = GameControl.createImage(\"poppedBlue.png\", balloons[i].getX(), balloons[i].getY(), balloons[i].getWidth(), balloons[i].getHeight());\n  //     }\n  //   }\n  // }\n\n  // // gets a popped balloon image\n  // public static ImageItem getPopped(int value) {\n  //   return popped[value - 1];\n  // }\n}",
        "isVisible": true
      },
      "Dice.java": {
        "text": "// TO DO: Import The Playground.\n\n\npublic class Dice {\n\n  private ImageItem[] diceImages;\t\t// array to represent each side of a die\n  private int currentValue;\t\t\t\t\t// the current value displayed on the dice\n\n  // TO DO: Write the constructor.\n  public Dice(String[] filenames, int xPos, int yPos, int width, int height) {\n    \n  }\n\n  // gets an image from the array representing a side of the dice\n  public ImageItem setCurrentSide(int value) {\n    this.currentValue = value;\n    return diceImages[value];\n  }\n\n\t// gets the dice image currently displayed on the board\n  public ImageItem getCurrentSide() {\n    return diceImages[currentValue - 1];\n  }\n}",
        "isVisible": true
      }
    },
    "starter_assets": {
      "balloon1.png": "7e51a750-4ebf-462c-a797-b9ad616cb4a3.png",
      "balloon2.png": "3cc48505-3309-46ba-ac2d-e61490c22235.png",
      "balloon3.png": "6651a9a6-d9fb-41e3-871e-86558eea2780.png",
      "balloon4.png": "3cef12f5-f565-4a78-85f7-656f672d6e75.png",
      "balloon5.png": "0f939dd6-e4c0-4370-ace6-f5b5da9d8923.png",
      "balloon6.png": "1babcfc8-0074-47dd-8991-544ad52f124d.png",
      "balloon7.png": "edafc3ab-d9b3-4e57-9413-5faa8e71501e.png",
      "balloon8.png": "67f55c7f-1d24-42ca-8949-a941f716df5e.png",
      "balloon9.png": "dec8b1ac-11f0-40a0-a65d-f8d1608b6758.png",
      "balloon10.png": "537fc704-97ef-4806-95ce-51d1220c02de.png",
      "dice1.png": "04733c58-b3b4-4e0b-8e1f-0b2c4c0522a2.png",
      "dice2.png": "ea3f9104-e1bf-4044-a7f7-e81d8bddd65d.png",
      "dice3.png": "17434a9d-0cc4-4108-81e5-118547d92551.png",
      "dice4.png": "10036352-5109-4654-947c-2bb15c6d7612.png",
      "dice5.png": "71cb7d07-5f72-4bc4-bf99-f00a3ab89b4f.png",
      "dice6.png": "8b4386cb-98d1-483a-ac2c-1fd155602569.png",
      "poppedBlue.png": "efdf222e-8526-4395-b05e-69e3ad64e74a.png",
      "poppedGreen.png": "ef644fab-7eba-4e3a-a3e7-6b02581fedbf.png",
      "poppedOrange.png": "09cd12b7-70b9-4308-9f29-569fbe2de935.png",
      "poppedPurple.png": "163b1f2d-fb06-46db-a6b6-8d2cfd18dffd.png",
      "poppedTeal.png": "9d18fce9-4841-4236-9049-ef177d4478e0.png",
      "rollButton.png": "5917984e-d2c3-46c1-aa3d-edf31af9adef.png",
      "diceRoll.wav": "f46951ca-9985-4faf-9364-bb41e8d1cf88.wav",
      "gameOver.wav": "57c22d3a-feff-4b7d-935e-176909523068.wav",
      "pop.wav": "93247b3d-bb26-4642-957f-a165ee54433c.wav",
      "win.wav": "c0cf0419-9373-492c-8d8b-6d8141372465.wav",
      "pop1.wav": "9c6c09ac-72ac-4223-820b-9a646e825d9b.wav",
      "pop2.wav": "c624cbfe-c3cc-47fa-a6e6-b1b2ab790ba7.wav",
      "pop3.wav": "8b171027-acb7-426f-8de8-d6195713172f.wav",
      "pop4.wav": "040a43a0-fcf6-4496-8cf3-4a98059ee432.wav",
      "pop5.wav": "8d95fa3d-b05a-4223-9ec0-c18bd682a07b.wav",
      "pop6.wav": "e5936119-cae9-46b5-b660-a77fd5c7d727.wav"
    }
  },
  "game_id": 68,
  "created_at": "2021-09-03T16:06:07.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2021-09-03 16:06:32 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-07 19:57:58 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-07 20:45:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-07 21:09:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-07 21:21:52 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 14:05:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 14:06:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 14:31:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 14:37:43 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 14:57:44 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 15:19:00 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 15:23:45 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 15:30:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 15:48:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-08 15:58:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-11 16:39:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-11 17:42:10 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-11 17:46:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-11 18:30:58 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-11 18:32:38 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-11 18:58:10 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-11 20:59:20 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-11 21:37:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-11 21:40:50 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-11 21:46:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-11 21:55:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-12 15:53:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-12 16:16:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-12 16:44:50 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-12 16:46:05 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-12 17:57:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-12 18:38:50 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-12 20:09:16 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-12 20:20:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-12 20:21:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-10-12 20:22:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-11-17 16:12:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2021-11-17 16:13:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
