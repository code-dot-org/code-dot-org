<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-01T22:19:11.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A scientist wants to analyze planets in the solar system.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Planet</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numMoons</code>, and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">hasRingSystem</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Planet</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numMoons</code> instance variables and a default value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">hasRingSystem</code> instance variable.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">PlanetRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Planet</code> objects using each parameterized constructor. \r\n\r\n‚úÖ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Planet</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>\r\n        Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getNumMoons()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Planet</code> class to get the current values assigned to the instance variables. For example:</p>\r\n                <pre style=\"background-color: #333333; color: white;\">\r\nPlanet earth = new Planet();\r\nSystem.out.println(\"Name: \" + earth.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Planets",
    "bubble_choice_description": "A scientist wants to analyze planets in the solar system.",
    "thumbnail_url": "https://images.code.org/f1532040bc5141e260cc64df5dd8ed76-solar-system.png",
    "encrypted_exemplar_sources": "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\n+iR6g+zk5gXoF84tRyXx+G0mEUnjrclhYw==\n",
    "encrypted_validation": "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\nfVsSR7SEaYUT0r1LrpMQRFunXgI=\n",
    "video_key": "csa_overloaded_constructors",
    "start_sources": {
      "PlanetsRunner.java": {
        "text": "public class PlanetsRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Planets object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    int end = currentConstructor.indexOf(\")\");\n    \n    if (start < 0 || end < 0 || end < start) {\n        return parametersList;\n    }\n    \n    currentConstructor = currentConstructor.substring(start, end).trim();\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma).trim();\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1).trim();\n        comma = currentConstructor.indexOf(\",\");\n    }\n    \n    if (!currentConstructor.isEmpty()) {\n        parametersList.add(currentConstructor);\n    }\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n  public static String findConstructorWithParameters(ArrayList<String> constructorsList, int expectedParamCount, String... expectedParamTypes) {\n    for (String constructor : constructorsList) {\n        ArrayList<String> actualParameters = getParameters(constructor);\n        if (actualParameters.size() == expectedParamCount) {\n            boolean allParamsMatch = true;\n            for (String expectedParamType : expectedParamTypes) {\n                if (!actualParameters.contains(expectedParamType)) {\n                    allParamsMatch = false;\n                    break;\n                }\n            }\n            if (allParamsMatch) {\n                return constructor;\n            }\n        }\n    }\n    return null;\n  }\n\n  public static boolean hasConstructor(Class<?> clazz, Class<?>... parameterTypes) {\n        try {\n            clazz.getConstructor(parameterTypes);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n  public static Object createInstance(Class<?> clazz, Object... initargs) {\n        try {\n            Class<?>[] parameterTypes = new Class<?>[initargs.length];\n            for (int i = 0; i < initargs.length; i++) {\n                parameterTypes[i] = initargs[i].getClass();\n            }\n            Constructor<?> constructor = clazz.getConstructor(parameterTypes);\n            return constructor.newInstance(initargs);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "Planet.java": {
        "text": "/*\n * Represents a planet\n */\npublic class Planet {\n\n  private String name;             // The name of a planet\n  private int numMoons;            // The number of moons a planet has\n  private boolean hasRingSystem;   // Whether or not a planet has a ring system\n  \n  /*\n   * Sets the name to \"unknown\", numMoons to 1,\n   * and hasRingSystem to false\n   */\n  public Planet() {\n    name = \"unknown\";\n    numMoons = 1;\n    hasRingSystem = false;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the name, numMoons, and hasRingSystem instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign a specific value to the name\n   * and numMoons instance variables and a default value to hasRingSystem.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to numMoons\n   */\n  public int getNumMoons() {\n    return numMoons;\n  }\n\n  /*\n   * Returns the current value assigned to hasRingSystem\n   */\n  public boolean getHasRingSystem() {\n    return hasRingSystem;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-01T22:19:11.069+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L4c_2025\\\"\"],\"cloned_from\":\"CSA U2L3-L4c_2025\"}]"
}]]></config>
</Javalab>
