<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "In `CharacterStory.java`, add the following to the `playUnicornMusic()` method:\r\n1. Create an `int` array called `notes` that stores at least five values. For example:\r\n\r\n```\r\nint[] notes = {55, 56, 57, 56, 55};\r\n```\r\n\r\n2. Play the `notes` array by using an enhanced `for` loop and `myStage.playNoteAndPause()`. Use `Instrument.BASS` for the instrument and play each note for `0.3` seconds.\r\n\r\n### Enhanced for Loop Syntax\r\n\r\n```\r\nfor (type variable : arrayName) {\r\n\r\n   // loop body\r\n\r\n}\r\n```\r\n\r\n---\r\n## Testing Your Concert\r\n\r\nIn `MyConcert.java`, test your `playUnicornMusic()` method by commenting the call to `playConcert()` and adding the following:\r\n```\r\n// myConcert.playConcert();\r\n\r\nmyConcert.playUnicornMusic();\r\nmyStage.play();\r\n```\r\n\r\nWhen you know it works, test your whole concert by uncommenting the call to `playConcert()` and deleting the calls to `playUnicornMusic()` and `play()`!",
    "mini_rubric": "false",
    "project_template_level_name": "CSA U3 Concert Template",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "parent_level_id": 29245,
    "encrypted_examples": "f0IsrdHx9oayOAswvXWYgoG/TL5XtGZ+9azHHlFb/tN7auHkLS870w3RdKAg\nly3NjoawUa3ILsGU5HHhhGAcQ4vbH87OE6hR4SLvvDc4KFo=\n",
    "reference_links": [
      "https://docs.google.com/document/d/e/2PACX-1vT9hI7CfPeweBqYhqYFj_Enz--AtabbyK2BVO5c6KsrDobWoaC42adeG1j_n6TzimzvQv9ZDVJZdjnl/pub"
    ],
    "submittable": "false",
    "start_sources": {
      "MyConcert.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class MyConcert {\n  public static void main(String[] args) throws FileNotFoundException {\n\n    Stage myStage = Theater.stage;\n\n    System.out.println(\"Welcome to The Theater!\");\n    \n    CharacterStory myConcert = new CharacterStory(\"yourCharacter.png\", \"characterHome.png\");\n\n    /* Test individual methods from CharacterStory by commenting\n\t   * out the myConcert.playConcert() below and then calling\n\t   * the method in your concert that you want to test.\n     */\n    \n    //myConcert.playConcert();\n\n\tmyConcert.showIntroduction();\n\tmyStage.play();\n    \n  }\n}",
        "isVisible": true
      },
      "CharacterStory.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class CharacterStory {\n  private Stage myStage = Theater.stage;\t\t\t// where images and drawings are displayed\n  private String myCharacter;\t\t\t\t\t\t// the main character of your story\n  private String characterHome;\t\t\t\t\t\t// the main character's home\n\n  public CharacterStory(String myCharacter, String characterHome) {\n    this.myCharacter = myCharacter;\n    this.characterHome = characterHome;\n  }\n\n  // LESSON 2 - SCENE 1\n  public void showIntroduction() throws FileNotFoundException {    \n    // TO DO: Display the image of your character's home.\n\n\n    // TO DO: Display the image of your character.\n    \n\n    // TO DO: Add more notes to the song.\n    int[] notes = {55, 56, 57, 56, 55};\n\n    // TO DO: Play the notes you added and modify how the notes are played.\n    myStage.playNoteAndPause(Instrument.PIANO, notes[0], 1);\n\n\tmyStage.playNoteAndPause(Instrument.PIANO, notes[0], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[1], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[0], 1);\n    \n    myStage.playNoteAndPause(Instrument.PIANO, notes[0], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[1], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[0], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[2], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[2], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[3], 0.3);\n    myStage.playNoteAndPause(Instrument.PIANO, notes[3], 1);\n  }\n  \n\n  // LESSON 4 - SCENE 2 PART A\n  public void drawShapes() {\n    // TO DO: Create an array of colors for the fill.\n\t\n\n    // TO DO: Create an array of colors for the stroke.\n\t\n\n    // TO DO: Set the stroke width.\n    \n    \n    // TO DO: Loop through one of the color arrays and draw rectangles and circles.\n\n  }\n  \n\n  // LESSON 4 - SCENE 2 PART B\n  public void showFavoriteFoods() throws FileNotFoundException {\n    myStage.drawImage(characterHome, 0, 0, myStage.getWidth(), myStage.getHeight(), 0);\n    myStage.drawImage(myCharacter, 100, 100, 200, 200, 0);\n    \n    // TO DO: Create an array of food images.\n\n    \n    // TO DO: Loop through the array of foods to display each food and play the sound effect.\n\n  }\n  \n\n  // LESSON 5 - SCENE 3\n  public void showFriends() throws FileNotFoundException {\n    // TO DO: Create an array of Animal objects.\n\n\n    // TO DO: Loop through the array of animals to display each animal and play their sound.\n\n  }\n  \n\n  // LESSON 6 - SCENE 4 PART A\n  public void playUnicornMusic() throws FileNotFoundException {\n    // TO DO: Create an array of notes.\n\n\n    // TO DO: Play the array of notes.\n\n  }\n  \n\n  // LESSON 6 - SCENE 4 PART B\n  public void showUnicorn() throws FileNotFoundException {\n    String[] unicornRunning = {\"unicornRunning01.png\", \"unicornRunning02.png\", \"unicornRunning03.png\", \"unicornRunning04.png\",\n                               \"unicornRunning05.png\", \"unicornRunning06.png\"};\n    \n    String[] unicornJumping = {\"unicornJumping01.png\", \"unicornJumping02.png\", \"unicornJumping03.png\", \"unicornJumping04.png\",\n                               \"unicornJumping05.png\", \"unicornJumping06.png\", \"unicornJumping07.png\"};\n\n    // TO DO: Refactor the loop as an enhanced for loop to display the unicorn running.\n    for (int i = 0; i < unicornRunning.length; i++) {\n      myStage.drawImage(\"gradient.png\", 0, 0, myStage.getWidth(), myStage.getHeight(), 0);\n      myStage.drawImage(unicornRunning[i], 125, 125, 150, 150, 0);\n      myStage.pause(0.1);\n    }\n\n    myStage.pause(0.5);\n\n    // TO DO: Refactor the loop as an enhanced for loop to display the unicorn jumping.\n    int index = 0;\n\n    while (index < unicornJumping.length) {\n      myStage.drawImage(\"gradient.png\", 0, 0, myStage.getWidth(), myStage.getHeight(), 0);\n      myStage.drawImage(unicornJumping[index], 125, 125, 150, 150, 0);\n      index++;\n      myStage.pause(0.1);\n    }\n  }\n\n  \n  // LESSON 7 - SCENE 5\n  public void showCity() throws FileNotFoundException {\n    // TO DO: Create an array of samples from a sound.\n\n\n    // TO DO: Display an image of a city during the day.\n\n\n    // TO DO: Display the image of your character.\n\n\n    // TO DO: Play the array of samples.\n\n\n    // TO DO: Increase the volume and play the samples again.\n\n\n    // TO DO: Display an image of a city at night.\n\n\n    // TO DO: Display the image of your character.\n\n\n    // TO DO: Decrease the volume twice and play the samples again.\n\n  }\n\n  \n  // LESSON 9 - SCENE 6\n  public void showOcean() throws FileNotFoundException {\n    // TO DO: Display an image of an ocean.\n    \n\n    // TO DO: Create an aray of samples from a sound.\n\n\n    // TO DO: Create an array of fish images.\n\n\n    // TO DO: Play the aray of samples.\n\n\n    // TO DO: Display the image of your character.\n    \n\n    // TO DO: Loop through the array of fish to display each fish.\n\n\n    // TO DO: Apply find() on the array of samples and play the samples again.\n    \n  }\n  \n\n  // LESSON 10 - SCENE 7\n  public void showSpace() throws FileNotFoundException {\n    // TO DO: Display an image of space.\n    \n\n    // TO DO: Create an array of samples from a sound.\n\n\n    // TO DO: Create an array of planet images.\n    \n\n    // TO DO: Display the image of your character.\n    \n    \n    // TO DO: Use nested loops to loop through the array of planets to\n    // play the sound and display each planet growing and rotating.r.\n\n\n    // TO DO: Apply shiftSound() on the array of samples and play the samples again.\n\n  }\n  \n\n  // LESSON 10 - SCENE 8\n  public void showHome() throws FileNotFoundException {\n    // TO DO: Display the image of your character's home.\n    \n\n    // TO DO: Create an array of samples from a sound.\n\n\n    // TO DO: Create an array of Animal objects.\n\n\n    // TO DO: Play the array of samples.\n\n\n    // TO DO: Display the image of your character.\n    \n    \n    // TO DO: Apply the reverseSound() effect on the sound and play again.\n\n\n    // TO DO: Loop through the array of animals to display each animal and play their sound.\n    \n  }\n  \n\n  public void playConcert() throws FileNotFoundException {  \n    // Scene 1\n    showIntroduction();\n\n    // Scene 2\n\tmyStage.pause(3);\n    myStage.clear(Color.WHITE);\n    drawShapes();\n    showFavoriteFoods();\n    \n    // Scene 3\n\tmyStage.pause(2);\n    showFriends();\n    \n    // Scene 4\n\tmyStage.pause(2);\n    playUnicornMusic();\n    showUnicorn();\n    \n    // Scene 5\n    myStage.pause(2);\n    showCity();\n    \n    // Scene 6\n\tmyStage.pause(2);\n    showOcean();\n    \n    // Scene 7\n    myStage.pause(2);\n    showSpace();\n\n    // Scene 8\n    myStage.pause(2);\n    showHome();\n\n    myStage.play();\n  }\n\n  public String getCharacterHome() {\n    return characterHome;\n  }\n\n  public String getCharacter() {\n    return myCharacter;\n  }\n  \n}",
        "isVisible": true
      },
      "SoundEffects.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic final class SoundEffects {\n\n  // TO DO: Create constants for volume.\n\n\n  public static final int SAMPLE_RATE = 44100;\n\n  // Gets the length of a sound in seconds.\n  public static int getSoundLength(double[] samples) {\n    int soundLength = samples.length / SAMPLE_RATE;\n    return soundLength;\n  }\n\n  // Decreases the volume of a sound.\n  public static void decreaseVolume(double[] samples) {\n    for (int i = 0; i < samples.length; i++) {\n      samples[i] *= 0.5;\n\n      // TO DO: Use if statements to make sure the volume is\n      // not less than MIN_VOLUME.\n      \n    }\n  }\n\n  // Increases the volume of a sound.\n  public static void increaseVolume(double[] samples) {\n    for (int i = 0; i < samples.length; i++) {\n      samples[i] *= 2;\n\n      // TO DO: Use if statements to make sure the volume is\n      // not greater than MAX_VOLUME.\n      \n    }\n  }\n\n  // Creates a new array containing the samples that are\n  // greater than 0 from the original array.\n  public static double[] find(double[] samples) {\n    double[] newSound = new double[1];\n    \n\n\n    System.out.println(\"Number of original samples: \");\n    System.out.println(\"Number of samples greater than 0: \");\n\n    return newSound;\n  }\n\n  // Shift the samples in the sound to the left by one place\n  public static double[] shiftSound(double[] samples) {\n    double[] newSound = new double[1];\n\n    \n\n    return newSound;\n  }\n\n  // Creates a new array containing the samples from\n  // the original array in reverse.\n  public static double[] reverseSound(double[] samples) {\n    double[] reversed = new double[1];\n\n    \n\n    return reversed;\n  }\n}",
        "isVisible": true
      },
      "Animal.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Animal { \n\n  private Image animalImage;\n  private String soundFile;\n  private String background;\n\n  public Animal(String imageFile, String soundFile) throws FileNotFoundException {\n    this.animalImage = new Image(imageFile);\n    this.soundFile = soundFile;\n    this.background = \"animalsBackground.png\";\n  }\n  \n  public Image getImage() {\n    return animalImage;\n  }\n\n  public String getSound() {\n    return soundFile;\n  }\n\n  public String getBackground() {\n    return background;\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 150;\n    int yPos = 250;\n\n    Theater.stage.drawImage(background, 0, 0, Theater.stage.getWidth(), Theater.stage.getHeight(), 0);\n    Theater.stage.drawImage(animalImage, xPos, yPos, 100, 100, 0);\n  }\n  \n  public void speak() throws FileNotFoundException {\n    Theater.stage.playSound(soundFile);\n  }\n}",
        "isVisible": false
      },
      "Chicken.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Chicken extends Animal {\n\n  public Chicken(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 20;\n    int yPos = 250;\n\n    while (xPos < Theater.stage.getWidth()) {\n      Theater.stage.drawImage(super.getBackground(), 0, 0, Theater.stage.getWidth(), Theater.stage.getHeight(), 0);\n      Theater.stage.drawImage(super.getImage(), xPos, yPos, 150, 150, 0);\n      xPos += 50;\n      Theater.stage.pause(0.5);\n    } \n  }\n}",
        "isVisible": false
      },
      "Cow.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Cow extends Animal {\n\n  public Cow(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 50;\n    int yPos = 250;\n    int rotation = -10;\n    int rotationCount = 1;\n\n    while (xPos < Theater.stage.getWidth()) {\n      Theater.stage.drawImage(super.getBackground(), 0, 0, Theater.stage.getWidth(), Theater.stage.getHeight(), 0);\n      Theater.stage.drawImage(super.getImage(), xPos, yPos, 150, 150, rotation);\n\n      xPos += 50;\n      rotationCount++;\n\n      if (rotationCount % 2 == 0) {\n        rotation = -10;\n      } else {\n        rotation = 10;\n      }\n\n      Theater.stage.pause(0.5);\n    }\n  }\n}",
        "isVisible": false
      },
      "Elephant.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Elephant extends Animal {\n\n  public Elephant(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 100;\n    int yPos = 100;\n    int width = 100;\n    int height = 100;\n\n    while (width <= 300) {\n      Theater.stage.drawImage(super.getBackground(), 0, 0, Theater.stage.getWidth(), Theater.stage.getHeight(), 0);\n      Theater.stage.drawImage(super.getImage(), xPos, yPos, width, height, 0);\n\n      width += 50;\n      height += 50;\n\n      Theater.stage.pause(0.5);\n    }\n  }\n}",
        "isVisible": false
      },
      "Horse.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Horse extends Animal {\n\n  public Horse(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int step = (int) (Math.PI * 2);\n\n    for (int i = 0; i < 20; i++) {\n      Theater.stage.drawImage(super.getBackground(), 0, 0, Theater.stage.getWidth(), Theater.stage.getHeight(), 0);\n      int angle = step * i;\n      Theater.stage.drawImage(super.getImage(), (int)((Math.sin(angle)*100)+100), (int)(200+(Math.cos(angle)*50)), 150, 150, 0);\n      Theater.stage.pause(0.2);\n    }\n  }\n}",
        "isVisible": false
      },
      "Monkey.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Monkey extends Animal {\n\n  public Monkey(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 100;\n    int yPos = 100;\n    int jumps = 0;\n\n    while (jumps < 10) {\n      Theater.stage.drawImage(super.getBackground(), 0, 0, Theater.stage.getWidth(), Theater.stage.getHeight(), 0);\n      Theater.stage.drawImage(super.getImage(), xPos, yPos, 100, 100, 0);\n\n      if (yPos != 100) {\n        yPos = 100;\n      } else {\n        yPos += 75;\n      }\n\n      jumps++;\n\n      Theater.stage.pause(0.5);\n    }\n  }\n}",
        "isVisible": false
      },
      "Pig.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Pig extends Animal {\n\n  public Pig(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 150;\n    int yPos = 100;\n    int width = 100;\n    int height = 100;\n    int oinks = 0;\n\n    while (oinks < 10) {\n      Theater.stage.drawImage(super.getBackground(), 0, 0, Theater.stage.getWidth(), Theater.stage.getHeight(), 0);\n      Theater.stage.drawImage(super.getImage(), xPos, yPos, width, height, 0);\n\n      if (width != 100) {\n        width = 100;\n        height = 100;\n      } else {\n        width += 75;\n        height += 75;\n      }\n\n      oinks++;\n\n      Theater.stage.pause(0.5);\n    }\n  }\n}",
        "isVisible": false
      },
      "Sheep.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Sheep extends Animal {\n\n  public Sheep(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 100;\n    int yPos = 100;\n    int rotation = 0;\n\n    while (rotation < 360) {\n      Theater.stage.drawImage(super.getBackground(), 0, 0, Theater.stage.getWidth(), Theater.stage.getHeight(), 0);\n      Theater.stage.drawImage(super.getImage(), xPos, yPos, 150, 150, rotation);\n\t  rotation += 10;\n      Theater.stage.pause(0.1);\n    }\n  }\n}",
        "isVisible": false
      },
      "Tiger.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Tiger extends Animal {\n\n  public Tiger(String imageFile, String soundFile) throws FileNotFoundException {\n    super(imageFile, soundFile);\n  }\n\n  public void show() throws FileNotFoundException {\n    int xPos = 20;\n    int yPos = 100;\n    int width = 100;\n    int height = 100;\n\n    while (xPos < Theater.stage.getWidth()) {\n      Theater.stage.drawImage(super.getBackground(), 0, 0, Theater.stage.getWidth(), Theater.stage.getHeight(), 0);\n      Theater.stage.drawImage(super.getImage(), xPos, yPos, width, height, 0);\n\n      if (width != 100) {\n        width = 100;\n        height = 100;\n      } else {\n        width += 75;\n        height += 75;\n      }\n      \n      xPos += 50;\n      \n      Theater.stage.pause(0.3);\n    }\n  }\n}",
        "isVisible": false
      }
    }
  },
  "game_id": 68,
  "created_at": "2021-07-22T15:35:35.000Z",
  "level_num": "custom",
  "user_id": 9271,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2021-07-22T15:35:35.111+00:00\",\"changed\":[\"cloned from \\\"CSA U3L5-L3\\\"\"],\"cloned_from\":\"CSA U3L5-L3\"},{\"changed_at\":\"2021-07-22 16:11:08 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-07-22 16:27:56 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-07-29 14:31:32 +0000\",\"changed\":[],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-05 18:13:33 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-05 18:25:43 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-05 18:59:14 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-05 19:04:50 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-10 18:07:14 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\",\"contained_level_names\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-11 19:27:21 +0000\",\"changed\":[\"long_instructions\",\"project_template_level_name\",\"encrypted_examples\",\"contained_level_names\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2021-08-24 17:32:23 +0000\",\"changed\":[\"encrypted_examples\",\"contained_level_names\"],\"changed_by_id\":832,\"changed_by_email\":\"hannah@code.org\"},{\"changed_at\":\"2021-10-01 21:27:43 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\",\"contained_level_names\"],\"changed_by_id\":9271,\"changed_by_email\":\"jamila@code.org\"},{\"changed_at\":\"2022-01-18 14:51:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
