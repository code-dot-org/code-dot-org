<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-11-09T21:25:50.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A commissioner wants to track the teams in their sports league.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numWins</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class to assign a specific value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> instance variable and a default value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numWins</code> instance variable.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TeamRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> objects using each parameterized constructor. \r\n\r\n‚úÖ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>\r\n        Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getNumWins()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class to get the current values assigned to the instance variables. For example:</p>\r\n                <pre style=\"background-color: #333333; color: white;\">\r\nTeam basketball = new Team();\r\nSystem.out.println(\"Name: \" + basketball.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Sports League",
    "bubble_choice_description": "A commissioner wants to track the teams in their sports league.",
    "thumbnail_url": "https://images.code.org/91a73752dbfe96c50b830c1dde7e984b-sports.png",
    "encrypted_exemplar_sources": "hTjCH07naH1pONdt+LfObM/lPDKdMUI17da6zBUF0UA22DEwrpHBf3Pfbdjy\nvcw2BK0OCclX6NQnM50pC/oyvMdsT90IhUXLBBNRMvJZDN00oudXIAVUW0eQ\nfH12wQRmPfy7Hqd24kdeLY0MQyOvuXsvvaNHnxTNsx9SkIDdtwvfzsRvhgLS\nrTKRdtWumXn04j5/vfE5Rq5lLEWOezqybgFbsYjDya+GNP0T/XrvOBlxcNmU\nb1XuyL+oS/N2oYDWVEauyvuYMbFa17/XrHOy4D24wMp4PaFSrjqIKSPbZkEl\nE+SHou2rOodmv1LsOd/jUXFMJluDHoBlESm7nDIPdvPWKrGRBDK5QutoofnL\n/s4VWGQOdG6x/NpJ7nvkbK3tI509CvgOJgGBkHKHldAvpbQidFNPRSVQJszf\nQmDom3dfvqxmsOjdDdDBX/NsKyVf7uRScXmehJJhsxxXUbkLP29oMcZADxEM\nyyLaIqZPBp4ivVbFLFbQmTuyYnJStxBZWCZyX0dZLl5mhJh9oARoC0OhpM5R\n0EnpBDQUv+LP1fUDl6xsQZbApVzkO1lHcqCqVSS7hYeKAbaYbDOI/+v8NweM\ntwxEvoSxXOwz3WmUqJMh82aXkNvKiHXzo5CftCyAWFNUHR2KD0xCmw4XgTZL\nU+wBMh3a6qD56AoGapwfjK0F1BOeG7KhMhey+e9HY953OI7MBkMOd511+l22\nZpeldQtQSo0KXbqQnDsfWxzf8Snb3oHAMHSerB+TSqyujEMbgH7LV2uW76bK\nzz59DfxgY/xU8BRueHldk4VXvuetmacUpQVaz69S+0Q6o9YkL/C2BhI5Kasf\nKHAZ2bS+fMHHPpPNOZUp9Z86FJmIyElDvyaO+VToJ3yNFLvmta7kSV79l+kP\nXaWne9740givVm8SoSD5HEoC6qVDlw4fmxkVAHMSHqmHU5xoIyBEdCRfNd/+\ngDl1EShmEwkKW129Kjt0ynqAt3uRbhr1hbHb97YBh7yd+6+phKA+ukYic/vd\nTPgVa+b65k3Hw0b1JbSu4smPWTzR33AMz5GAgSA0IHSg8i+w7lDvd6tIKMSq\nVGoCOQwdcFQmS0SY+KUEuMbc5zY7vAsSkLUovw0+bBJk7aHBMSNJfzVUVIHC\n5rSIRPLtZdDSgkMlNGpYcmFjUEBcfDwwHHo42UVp1+e0931afXN/V0CP979c\n+fTZjyZMbRb1Uz+SfIqHmvViSXsAu8/XNjoAT6Gxhu2DIyfdwCktjfhOzQaj\nD+qsqUTuATDKTlD2h6dgK2LzLo85Hx+PRnRSc3/mgUuF02+/wgRqVZUTwsFW\nS+oI5YoYH+WxgzGwWVfcgJY5m630WPvjW4GaDxGB7I/IK7Y4CqgIfIlOftFT\nsgDbqa1yyd5Czhryh2MVDvLmoj+YjvRzZdVeJ+kmw/Jw+HHoiS5lA65NEjsE\nfR/2hN3oRqyEWpDtvsV/91IVcgj2ULdULY7fO9Pww2F3zXGCxz4aXwtrEfEw\nFZ10qDfZPyRtkAsiLOzHfOv9RjKok1jPrfTDBPdjZ97ADKGJLk5LftYggdk7\nlnX2LhZJk1tm1YUd+MFgSBqGUi0W9YVqvkM10G/NOYzPvxxznEN9q5jVyiMH\nB8x9xfIaS7iJ31I7th8tLMeKxO0Orb9UOtNXJmVFm1yq3SUukU0B1H6hU/QQ\n3JMKUQ4TEcFgGMyPhkMbgLB7QcWLd4fL4/PN9Yo+ZCM1FLUZC2akzVbCjUxw\nwDmVNN2E+yyCMI5JrBCuMUWDufseBJOxR/Now+dLUnA8fXL+W396DEAu5ATN\nX4zEn1TMI6fihGm9/by3sM3la5u+eA6L5CupKkolwOKwZtIvhfVy7SLDqvTl\nHTNq1ZCq7QLjtRA/hBljz/2Xphnxbo23N9Pi7ML+LHVcvZFcj5y2Kz9BDyBc\nhhj2Rc4Dbucqm6SOiwmc/ss0TyvX99GFDZoAZysZrYBfIwwR0h/6QSJNSd8S\n2hayZ3WYipkI3dmbKm3cCUaNuYpO807njEP4ScllDhxOlainRrrtXjbMYUlC\nX++rMZVhvgHt2F9Eu99tfpGjNPJp9mnw8ShYQ77p0FCkgaIKrDt0ecrawMt8\npNc5UfjRXNnoMNNdnLMwHkfHS1DKkUr4vV9CZBTGOq+IE0OXn+zEqR/LMsjf\nVG2Ht6qtRGL2tuevrKsHrNRmpIcuBE+zrOi7aS9e4taCHo/829MlcSrkJSkB\niJZFGOEaAolirX+IdHcDM6c3mME7XNc6sbXuxWafQN3tVAWE2QGFmK8mcR6N\nKWQtzxdpxKB///GtnwmYjeMa2JQEmYpoFE6lqpqL1EaSdy5dCgR37mmTBEE2\n0BsfKRrdtJWmHY+QQpaMPvgFtmEDYrLVqGNP7fBh+/Pwb7Eg7LrYakZForFV\ng2YTXTh7dsRFLTwhSwtkoKkglTj2RCV1zlisdy4vk/rkpjH3eUyyDWhVIlXB\nE7PZ5P7UHUc1PtsGVfmUxTueDWPWZ4Qp6ISmD7uC5XmXOpPY2ri/kBLe5c2J\nKVjLWquTUMC81YVnZ8dnvVRfQh/I9RYIEE+Hj5UW2Y4ONcdbJx+3s77vIaMy\nB1HyxvROlIIbcLwu+UK0bxwDMia9YHsud3Nk/MCf9wjhAP/sEyzxgHusmNLK\nKa2L2C3b8eS4Ydx60EUhUbouKX3Unr9gU95fmOjoCP64IrT6r9UdHZ61s/hU\nL4uc9+a2LvinlU6vLLtZu2VUIA+L42nX96Xrd68QFH/3uSHgkWsLCf7hB7s0\nozahGZC6C5hRgo4et0/Kr3ENUe+osUOB+7zX8X7NrAZa92N394zs/wzF9YDx\nOc12P7cgwrQiiUSLjoJBM9+3QG/0VcF8FLKk4vhQzAZkE+hEC9DxmSN0BHVq\n9kwB9Lbf0klN3OytdarFufULaKe/2g6O9AafjMI0kQAJxpjWvMYWS10ZilDp\neJ7lfb2LI36JH3sgl2CtUXHm2npDfQMicmOtYtWn3zKH7mgA5heq1IjyeBLs\n5cnmWZ9WXY8EQ4FAUjfD0rDZj0e8UdA0T6AZKzyDqGC5Iri4lfebcsyo23Xl\nomDRSWxv4pSUQsMRlYWeoZxdj/Xepz/a3p07alIEfAVNzcf7zlRjf4X20fdP\nff4zMmHA66f8u4zxAZMV1qL8zfgKLGJpEryekvTDM9iMobU/W3fqvLfVzD1H\n81bS69lHBwtU3pFyBoH4upobWnYYgO55XSCijL89QwuF4lB9StJHQnWKwdpf\n8cY8L5ovY60/vJ802mK5Ehj4Ri5Dg+iZ/L+jt2TMkrCBdCp/XGKRdkv5W2lU\nMi2/OywMLGcjbaGDkiC5xZneMc10UIEOOpFBLHnmvUjOoQaYnmaXMO/6edWu\n4HIlczzN7Ff5PjNI0gFiUc4VWoAyhV9rT0Ru7bZxGT2jc91bKY4xnKLl7G7y\nbUpaxg0RMs2jh7iiNZPG1tkC4xFcUbSUHoQ4YcE2kBJjBsthl2PM5XmfcYwo\ntOZpk9cDeRTbk9Sp4o44DHiLH2LS0hId156Y8kCYbpUVXsUo6qpkPzhKtL/P\n012c9Uip1p9G3Yue+vBIZdXAtIf+6Wrm8hnvODYBe+qXNQUcXRa0Zh1Twhoa\n88jsOat16n12nzwvDFLy0JQgwv/sHRqUGfxADYwkIQM4MdDr8jiv+OYRLS2U\nEK7wFg5x30yK+8mbI7gbeFK4skPVx+8qJizeafjMS2Cb8zMUBvlEWOxoGUsM\n3kdkZYjLjdOjwgvh0ihTIJSfI/ad21+yqC4S1xK27lzIVv8LT01qogfsBLWI\noOM8wRGtrvwQHQvWyOkW/EHTt0ZL3WMXP16vUzy3WWQ2/IBGgBsVOmIVkybm\nSxd4yuID2tRqQnQEAnLbQnAfECg/H2xAdccKtBq6zwsC6P9Dbr5M+jv7Q/dW\nuKjGx4X5m3AilFD4ovFyJpcLh0GA5FrUnhYGzXWRZiVs4YNkxKJJViEYlwmW\nhYzM1V/ZO25KbGKDHOrbFFwzPXqXeT+j6lMSxcc94BCGQVDsA1DuTASelDsz\nFEFLO9fxVd71Rr+0N3z+oBu+xOjefe05bfmvr5jY2ccS/OhifGqMCbewWJWD\njhx+IelAI+soC5v7n6+mLRSLGVW8liJcf5WqSj2N67EPBn/EL4/WNcYlbWxu\nIgojUfRfCMeDTOqBhW/arm4O2k4x9rakBJAeJsMP2n2gKiV2zC8zumY0PW65\nsu3wTfQ+C1xd0+mCw0eSXY7S7mbkLRZ725a17w+NxnjG11xbluyJicm47IYy\n6LG7qhsj+PSwj7mnArQhiQjMw9oA7DR2tT701ISdy0nGqE8e4fCCUlBC7gFK\n2dy85pA2dlOd0gRr1faAoT0roPHF+rDf9zIwjeEFsJRn6IYmkfBJCLDBQ7FK\nj1g8MAOM5PwoTrzN2LSYlY7JrTvPBNlFjnQf9qaJC7OkCwuORdzKj447FoNk\nEnIjZuSuFblPc5AfqbH5MJIcfuU7sFYgm+64+xqDhTGP0s9g32PNnIIxsWzV\nqniLMO3DtNUtk592jqE94kfmVITRd9dVvmjJnETD7qxYL6bVL9yge9iB3XGj\nahQiehfGDvUCm//WJvE+0toYORaf1kvtSXxAFIp8vLFiwn1nPTtrhS8V1s+O\nsXs4UA1cJipMk/+e+e7HtQY9TV/mAxJQ+vEc9G1UfHeMqPBVVKKhqBBSl5Pj\nd1j1pJw5mXtDd5ewhcv4KuG3dtOvslT9uyAGvorXwG3xglVnd+s8P8r/+UDl\nf7R7nZ3aL9L1dwnCNcyrMbXG8jNQVpW+ODiUtZkkpaxq5PbRLhgwB6UnSFUo\n1Ue6OXdTFTkJT7VFVSKgnNn+5tGRRDssAk1oCNeaX7ibb6xmakDfBb1oE3uZ\nW48V0X66OTtd8WO2IGfvZwXmsCxW6jsFfXDC97aYwoPz1vB+jExIdoKSvyP3\nnYCfzQdqk5Y2WpPmRBwpLa/wRX18s4sRNNWccUbW6sgJzrBsmJJtyAW7yI3q\nlpBRCEon3TddNobEsDpT+8Rd2aveWgPQDFViWOe7VpIxuoiz15gRfvbfKV5S\nw5M6iqNLE+8ZxVYlsHCNgcAgikxWNIyCmL+veT7NYk0lbv16kySBMVa5401e\nkBT1YAxa6SFEQQLir14bgxXHbn4PJrfOLSpDSK2qkg1YaSIjKDDJKH9r4jtq\nUntfijRwrxa56FajImboFwiS9fSs4MNQNhGv+tici/i30gmhMSg4TmWgYMv3\n/JjfDm/dTJ21T3nwwzlvt4G3XFDKN+L+/iDNSd9kUSzsCfRGh1/mzR80XOkC\n37q17N3K0ff9jnf7qum3XP8UxLYUgDJwL/qXVL/DC95rjG5l+O/CtAUMfK/K\neam02eaCKfw3ovjyoQ6LcrJ3PWlMKDRboiOA8KMKSBSyKiSAg4oj70/dLrNc\nv+DZbv9XKNlyrH3N4rM5lpk45dvSN2s0MjxinagNWIf/8W5AFac+MBqMbb/K\nek2Nt8JipeH0S9OMo3y/uOXiiGmDJb8gIen+bx52OIsIkGffPH5yLI+VdlcS\nAplLx04jqxZV5AEBFDHfh/ksWZlRbHlgkJwTF8D32AKBGvA+kP6aPcuhDnn9\n/1X2pKJMQIuOuZmk4HaZ6+ux5QLrSiPX51Wubttw8R2xcdYqBht+aCfqr4EU\ntqE3SmoJnZMsTQTMvzOJkLQBYmk4ULCcMWRJ6DAZ1DMZ8ul4c+USOF7i9B2d\nQT3Lohal9C4kiq7m0ZsnqBNq97YcD2ofdPCnisxaSxgcQ1BLGaEFZ/0SWWKU\nfi0nJDh8qpp/bDOJVRnSMlFmyzEwlsn0689MDFda7MA3JevpE5U6jnM5J8Zm\nscKzuUKTY+TvIxpwaX8Kj1Tg9d0BsNPHsTqm98DUwzK/c7WUcyYqllLLniky\nzoVwwynZO1IkWr/9GfnZnlqiGCNENxFICtsk01F45osJJO+Mk+1/bwY1nMNN\n5lPdDeOOj3Caw30VhdgBxTJ7eipmdLF7Pj2ZxKECI7kaoQuN4G4pjfpl/LR1\ngEYKN9yS4zn0bs+TH1ukD/4CUQsar5pXke0FWoF7dux6t4Fk3Zw+D/v/4M06\n8Gjv1MepyuEGwMZb5TIcLh19c5b/B+9v83CWvedu2lMEBb6rUJw0QMzgAovO\nMHre84+rvnzx/73Scm9BZeFKlreWL2WoOOvSdAklRJKrl56u3E0DB2MnOsf7\nkpjlg38A7ZJOZpS6IfG6UN26fYzQsYpf1wuyi2t3TM7VqFEPxeV5VSHxDDIl\n6JETitXh+1fqIgR+iOxyVq7jsVKICAh44TNzA3iDT6IsZBrwfH0ay7t9QDaH\nXv+ibIuXe/TNDqMJddL7xr619r+kmLwaT79pOFWJsJs+VGm5XfDgbmRHK1vT\n+SnzSf267L4ZPJ9EpqZYGVG0cNJwWsxqhfl3IwitwiUpftF8WBjNtQpRbX9G\nYgTfn33r6MnsLj7SYDmpht1OekRaVjkxJ28q0YNcqEgH4n0XRJ+0AwpRxDTV\nUIJgLKqSrohIl/gzmskAWUN/APFmXrDcGE7dB3oYzET0gB3JilP9FC1o4EgS\np2Uq95864XybziONz+/b0LnnO4dZhwYgdcSWzGh9vRH2KvzcG6/TTyqGElz2\nBHrk6vVi1hZHpC0tyO/5Iv09wc7OVm5/7gZFGX/B2BCGlS/eYmaf4qzJsmVp\noyjbB4K3bmeQDXogfy2cOqgNawMFSje2o/5UHdOyob/E6yr7FPHZosU7Vtwk\njCc7dK514HE2lbNAv9i/CZdx2jn+XFm28p5wa3tkCEDMzZQO6fcAL/4MhH8n\nAA1Vk6NIRnYtOkaMBTfiJqWR3daF8WUI/5txjMVzcgOutTvcYLWAKRag4yap\nbULly2uHIYEKLsRr9iZiFT7G49cWVukS50/26yOiQwWo1v/whG8BHNj3/oei\nPVUQFysnOKfDCr0AG+CtU8Xu8hdQ50z4+Y/cRoZ4bVozQW21dfIV0ONstuUw\n3hOpZRdWQBJ0adPDEalqbyCYTWA/VSHJ5Mv0wbpwn9SVXGApZIY3JWPYONlj\nKWJqv7RiHPiaVbHP+6TL0Wq2LL9K/g4e/7oYjBL/x82a/x3qg5a8G5QA/pHE\nY/c6Ds+KlUCtZdnRJKjJLOwgLe1AISDZfkQeFormRL/mlvIAU04azYiPmNlh\nV+ZIEI3fXclyDeDLtPKyq7ekMyy9Gj3n5uRGUtkhFAOJmXWMlIaUDiP7MbF2\nrvy3E2Oxm3dDwLRnH1Fl0hhwQZWDltW2yzRLH0kBRknABIarC2qtP3t2O/8v\nhOFMOsgDqFPzA4TvA7OrveZ3ANLYqqNCuX3nB7FsE9zbonpl5HNe0pbqL4K9\nuKX/QG/juP6OLXgZF0cLCOg5kSeoQslHY5Je1TJ/FD5ww7prsgjohnpEarIZ\n3c+2BBwd5Vr+2VngVtHOejUtlLYj4u5jD4bKRChb7GTHCYQe3wY6F/mFsg29\nJDOUvb8BPD62V+8rcTBDReN0d/aVOtyLJ75G35J4YHMxxQmIEZ8i6fFWnvUF\nYkgagxqB8WRbBgdWruyi0LYIMN4Ut2Gk6pEqY29mpKW0YpvvINA0nmT3KlYh\nJyVOpPq3oj8RltbMBXnrka/hjkDmohaGhscZmENNTUxeK4NjRusFwI8fuOZj\nOSzCpqHfxz3Br6YMe21aOH+Pri1etAgp/qWXr1ej5vDGTQb+T/ysMIuDVm8G\ncAkaixoNfsQgaMQ/aJQ/whUaGsjFk6D0tKQu7u4K7fq4lgAcvWrYy+Ur+1ma\nwrldqu6AX1cLqD2p9Q1JZLbQ2xHjbqzHJ6RLkZTv7RtNEF/nAUyjwVSvaKTF\nEq3FrEH8grvTj+heFXwJpfRzf/xBXTV60YVmn9OvKr7THE1y811KRFKMG/9a\nLuzGkLuS7l/ezGnpAweUrnKuzdXfuUu4ItULvMUIIJ/FnCX8cy9J+4r4RE3R\nqFO11DHcgN9yuqSy3uVBnbJ2Qs8Uqo57LDIhvzLxHuP/uEheyW/d3D66I1QV\nuxkiNMSzVT01+IKcG6Y82YGDYMMNh8eguVg0DKrwukOs2CpRrPNQpu3+Xijv\nKhJ2WqL5lfbqKmdNwRCSqH5cXEKdHpQCnXfUssUllm7hvDh7Ckp8brgoows7\nsz4UcT/rRP5MueDXHb09hM62X2OFxBQ4jWrXIMZ2ZH2ChwRU3fdkCQlHtSz4\nrqEcZGaxnBhNeFSIgLajf5uVILfkZWnx/X5wZjSSh6pDNpkcAjLBFGpt/ueh\nanBVV/WdWLhsXkXDleACmyR6wRcgqWgTsbfrGq1zJgk0qjuoL7Mm0sLwrSgc\nvZsN6CT6ZBxjq1CQ9ftltUXg2k1AQpnmlxl2ZIowQ5bx0apQynrkLSockMBn\nn3HCP7K75Wsck3S9/j9sOl+ePaBBGRH5O4nMLQUvnfAuQ0ccS25qF2Xh9c45\nEEB5+Sh+8hVLWQCX7Q2/VpX48CBrbiWoryJNWEO27eVGiEYzJ8SKspNpR6LW\noi3qJ8DEaB2bkIayKQSKsgJDTGMc84Haq68T2MGJYf5HTeGOithx1ymmESGo\nBpTzIfZLv3p+9v1Dfpj8H4bU3oWqgGXe/CINC+IKBsMYrz80TKQ8UXAjzWtN\nOTuozPe6bv6gOjbwXzidjG5zdbZlmPbLvsPUxiUqbqil53O2jViEZHuhmg+J\nRIe4zqdsioOWw18lYu9UcHnDA9TsPn+6Y6iQ5UV4p/DJFn77DaWIhhL1TWqm\n/+P7Y7S/c/m3kW/ZXTWasuBkIS3StHilyl7V2YK9xR65I8HCvhJ7l8AUvTnG\nu426gYJDTh+x0FG5imWMLO2Dv0Zz8QC4MXxAluc/YGIKArNfscbcfghrJ4yx\nyIb28D9kPBZS1xgXyxo2kr7K8uBucdlGiXfOiSQ6mReQanpkbAy3+x0x2qf+\n4KD/ov7MAWqlVbFVELYlP2xcQnU3KvHs7BZh7CtJ3eSEgoV++9orAt06Nxjk\nwjqXTNBHdRbklEi3OOaXda72psBsAbXlqNy7xN/wWikt7/V6I62/SIs3eqer\nWeWmlvTLxKCWD+YYsHHWq87Ym3DNhkzXfeeYZKC9uLN4mdyxUYzWv+EMYO9E\nMltMO2yls0i5NnnwiFws+ouhBeenE2woNFBYMW2cqyGuu/XcADPp9bmqnw+P\nWrowxgiYeOpBVvd0s3h9skUaFYWg3C07Issvsjspe/RpIEMUGRB5ac+20/r1\nw2ggU3eD8AEHDY0Ow6IltjPmCF10tPR2jxv0i9/zHgDHp7axHoiRRf8j4t1z\ne/c0NXjUjrywuYnxhSqdnCQTcmI/Vj4b2XUP4KzqKZyy+xogODVNfhbo4nt+\niWg65gXo9eoWapib8BhkBXKLWrvBx+xRrKUqmCF1tr9ZEBUS0N4G8AleIhf/\nlFObk7vUhwKQtoQgsUiba1+BPdrdyUJtREo4vk7FiHsftkT2xP8W4XXB+wlb\nqDVrdGONZiK4BKK4e96FSNPZ+eQjo72UkD9USfsahukDJAU1ZM1a7kuIFczg\nocfbo7K6vYxrV0o/KCNR8Gj5k4CnXAXWezgYHCubZHocwFJBODTDTjtPssYl\neaB77F7fZd7mF60N2jd0W5pJxDlo/qqr9QDQ+iFK4pdX5uwy+zyXDSS4x8Ou\nvrQrZFKTDI1dMQ/IwNL8fNyXsUDFd6jYhMClCAuXrB23Os2hZwUkEypB9Yo4\n+hmMac1FSfARi2QeMkk08M5BOKZXYbZK6Xbg5cavx1RYZ07qbluq4cnNTEd6\nLxS+Cb2XjzKuQK7Vmu9P5rkAUspCwq+QAatunlwBQj75HeIApGaret3ZJiHr\ntZLD9ee5HG507iFhi7VjyXXgpqJT7jW3ycJk4ZGv1htAVTWgqCpyb6zAZKFq\nlqaxhHOql+MW7go9\n",
    "encrypted_validation": "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\n",
    "video_key": "csa_overloaded_constructors",
    "start_sources": {
      "TeamRunner.java": {
        "text": "public class TeamRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Team object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Team.java": {
        "text": "/*\n * Represents a team in a sports league\n */\npublic class Team {\n\n  private String name;     // The name of a team\n  private int numWins;     // The number of championship wins\n  \n  /*\n   * Sets the name to \"unknown\" and numWins to 0\n   */\n  public Team() {\n    name = \"unknown\";\n    numWins = 0;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the name and numWins instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign a specific value to the\n   * name instance variable and a default value to the numWins instance variable.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to numWins\n   */\n  public int getNumWins() {\n    return numWins;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    int end = currentConstructor.indexOf(\")\");\n    \n    if (start < 0 || end < 0 || end < start) {\n        return parametersList;\n    }\n    \n    currentConstructor = currentConstructor.substring(start, end).trim();\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma).trim();\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1).trim();\n        comma = currentConstructor.indexOf(\",\");\n    }\n    \n    if (!currentConstructor.isEmpty()) {\n        parametersList.add(currentConstructor);\n    }\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n  public static String findConstructorWithParameters(ArrayList<String> constructorsList, int expectedParamCount, String... expectedParamTypes) {\n    for (String constructor : constructorsList) {\n        ArrayList<String> actualParameters = getParameters(constructor);\n        if (actualParameters.size() == expectedParamCount) {\n            boolean allParamsMatch = true;\n            for (String expectedParamType : expectedParamTypes) {\n                if (!actualParameters.contains(expectedParamType)) {\n                    allParamsMatch = false;\n                    break;\n                }\n            }\n            if (allParamsMatch) {\n                return constructor;\n            }\n        }\n    }\n    return null;\n  }\n\n  public static boolean hasConstructor(Class<?> clazz, Class<?>... parameterTypes) {\n        try {\n            clazz.getConstructor(parameterTypes);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n  public static Object createInstance(Class<?> clazz, Object... initargs) {\n        try {\n            Class<?>[] parameterTypes = new Class<?>[initargs.length];\n            for (int i = 0; i < initargs.length; i++) {\n                parameterTypes[i] = initargs[i].getClass();\n            }\n            Constructor<?> constructor = clazz.getConstructor(parameterTypes);\n            return constructor.newInstance(initargs);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-09T21:25:50.219+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L3d_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L3d_2023\"},{\"changed_at\":\"2022-11-09 21:25:51 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:47:06 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 00:49:35 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:22:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:22:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 01:26:26 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-12 02:02:23 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-17 02:29:47 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-18 20:56:05 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:42:07 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:51:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 14:52:24 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:36:59 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:44:06 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:44:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:46:13 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:50:39 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:51:58 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:55:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 15:55:46 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-02-02 14:28:14 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-14 18:27:53 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-11-03 21:36:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-11-03 21:36:09 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
