<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T16:52:44.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Solver</code> represents a person that participated in the <a href=\"https://www.worldcubeassociation.org/\" target=\"_blank\">**World Cube Association**</a> competition and has instance variables for the name of the person and the time it took them to solve a Rubik's Cube in centiseconds.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Solver.java</code>,\r\n\r\n1. Declare and initialize a static variable called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">fastestTime</code> to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">0</code>.\r\n\r\n2. In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Solver</code> constructor, check if the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">time</code> is greater than <code style=\"background-color: #ececec; color: black; font-weight: bold;\">fastestTime</code>. If this is <code style=\"background-color: #ececec; color: black; font-weight: bold;\">true</code>, update <code style=\"background-color: #ececec; color: black; font-weight: bold;\">fastestTime</code> to the value passed to the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">time</code>.\r\n\r\n3. Write a static method called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getFastestTime</code> that returns a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> containing the text <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"The fastest time so far is {fastestTime}\"</code>, where <code style=\"background-color: #ececec; color: black; font-weight: bold;\">fastestTime</code> is the fastest time of all <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Solver</code> objects.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SolverRunner.java</code>, create several <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Solver</code> objects, such as:\r\n\r\n<pre style=\"background-color: #333333; color: white;\">\r\n* Name: Max Park\r\n  Time: 363\r\n\r\n* Name: Asher Kim-Magierek\r\n  Time: 389\r\n\r\n* Name: Max Siauw\r\n  Time: 403\r\n\r\n* Name: Patrick Ponce\r\n  Time: 424\r\n\r\n* Name: Tanzer Balimtas\r\n  Time: 464\r\n</pre>\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SolverRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getFastestTime()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing a constant and writing a static method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/constants",
      "/courses/csa-2023/guides/static-methods"
    ],
    "display_name": "Rubik's Cube Solvers",
    "bubble_choice_description": "Use static variables and methods to keep track of the fastest time it has taken someone to solve a Rubik's Cube.",
    "thumbnail_url": "https://images.code.org/396c695350dff06816a14f6f7df1470f-cube_of_rubik_1.png",
    "encrypted_validation": "N8CDLkI/yH1ie/vE6yI41IzEXzBgmHO5eux6JtUcUzTi73bGzxsuCcHmtufG\n6J09Vp57l5LDFlFZgLPy1iCs7n5OOlhP06IJYFerRB+X9F0uFEweTz2c3FR8\nUtzWgsIQN6Z00zNhd9/u2vzsIp65//8ibDHfyBsAF+f+Wft4z8cw/UJePFC9\nbcg6sGhfvSH0qVNyMqsHQ6YZQTUzzAsjzvRaRbfLwB/iqlnbI+HIUfqP5vuC\nxvLo/oHoEjPWK2ZU2mMORDQ2UPOsrhIU2V+AfsjZ9ApQST8xuT7nXFGbpFIJ\nk3FNIjlZERM3F8FMFyaiUGy2mVyixUEdKX+apfnerS7Ej2c2HdBamSS4LWjQ\nqoSRVT3JXDLjgslp7E/Wj8DevWeaH71Btp2M3ewzEko7bfBvnMw+tEvEnjbq\ncoh61zOThy8xFiyQ52TivKoue5OOZqEq80limWiJJvbhedknzHcZJgOUvvbL\nUmxo2mX6nJ3IFEcTq/mCZ4Ej3xlyElrV978fNgT7AVzbbNuGAP0+P++tcSGX\nsCGIzw2bA1iIiOMfNOIeCLmjcj1zUivSW2ysBAYxFIOxjoX56qvnlbszVxT/\nEnqzMnw1tXjIcpkUZv78DvX803HhSytgLfVx7a7ZgfVUEJqtqUkYX85e6iCW\n0uVE2bY10ZwMmvTinhbas1Y1dF5WIfsNp4Xc+sk4MpDMZl0IJVfCLhsXj1/9\nY+V0shbDcv2FszRnX9zZP31dWiJMcBCQQDY6y0G5irBZice8jkrcG8ku26cG\nPQrg60AhRIXqg+uD6GA1hBWqldlIR6A3cOiqsTNwyQBmsDESItJJ5iGsYV0K\nvd6K4qxKcZKT/fHpt9VHnDg30gZdr1gGg8YhRB39ZIvncITaxayyBSnSUcD+\n9Nu8JF/Iw0kTkeumsqT1bLf81kpIbqiJOkOBQcaZ2/tumOa2cenGwqQN8xkB\no25+zI2cfrSVfxvdoCE2Zc4sBw8ncOCDipu7b/6xdILRpg6NNOPBbjR/w+TY\nkboZoP6hNLSDS6lL3E2li340Uqh3lkeQ55+YfWeW1IAcFVxL/UJ7Tz0eDRoU\nNuuGdEXlxHHLRc0JPb1UDuo7/QvWY5zJybKAumlB3nTHgfiVLfzX8MMQbQkR\nU9ehf9TJulzwQ8LIoiacjh8sACBuaBwMpHF4TQ6Zewy9YBNggkfV96FtCPPq\ncs46a/dXvzc2vPujQpatb31eY/xwCZugghpCL6KTK/KZ+U6pC28Cnoy3NC+t\nCd39H76EJOVuwvjohVhSZ235N/zlHSvNa1zghwKJgxaw+Za2UXvq2EO7UzLK\nKhuXXrZLenqoQ2/XrE623YB+sDS5Kwq69rx10KeR3dZ00dYYfZ+c56QmPTm5\nT+Abl/MyjfiVLw7m7wuSGKjlPeT8lxF1WNXr7enxRPedcF/gp3mdy6usN8iE\n7qaddOQWlA+W56xeAOY1RDA+7vtkhoQa4PEquVKWvYUnT2yhbdqq6BbJxsbM\nRYWcV0CuUSxSsLvyMp50OR7AtXjA2S+8N+uziRG0sUG0JUJjmYUy/XOsDZjy\n0pJfse080579+2ZTM1CvGV9j7TOTcZcHv2FJTBVIgWRBvU6sTaT+PsccMIFq\neiVDronNxVCh/O83m96hWg0W7zOuvXLqzm3B9t+pTmK3n1kEvlZrLjNpWjna\nb0Wue/7Vgtro3bMNHigK4Ilmf2LDKFJz+tQ7ocAJihr3nISq2lwNDlRD1GWI\ndDea1DM9oO/AOXKe7x0pkXwX8/UYXHxWkb4L3vWNw+i3dCuw/BPmbunvsvLv\nZuWArkuf6mqix2ZU/1tsw2B5G7952LIgofUar/jKSVbxM1PIbuAQrnw5Cwkc\nswZFxplwNquZXTPT51iI8HKLQhPzircftEdbbsW6oaLKbK7UONnS6K5r2mVH\nhF+8dpO2wCD9d3+3Eo5vLBMyyUyiV8/KYR6dOC5ai46vJuJqu6X1kTHGlvuN\n4Lz6P+xSeKYtbX+pFh6+KwzeksWxJznYOquHhffBqCGK0rLLX5McV4JTRZ6x\n6vc2mZKuIEG9iZRMFh/wSQQT+K+NBb13g7IOnXJFk+VX2fTwZNx+xaP3bseY\nC6KpCIsxj/kDDkAkA5yGZZAW5fHg/+P/XwMyVy9aDSGPERbFaAqTcWGQPMRH\nX1umGCPklW1hHFHdDDScqHUxSQzvgTeTSbkEpWEVUJrd8LI3f8Pn27E6vhwV\nSJvqUGzdXDOZ7RDspspPCEpFs5rAq+f7OGd5wTNeakd7cCSdn9cH9y/d+vbs\nj6PkO0zzfs7x4KuhedtweT9Pby5QeurWnpl/3uiPVtGYlQ4E8d/UPPWdVkKU\nDBiA7YjYywi38jOahdV1ijIAJagDlYcujGxfKzRHoIbp39RlEfPAeBHtKZuY\nYAhBQWEh+GVm+rn5jVhB8doxqu4qRiQpvHc9ArV6TUBmjT8pQUzQvFJuWLEu\nGbI9eo2qlNeWcCjHPW+yHoYTCp+AUe7iIIcr6kA67r7BhhjBQJsWCQnEU7x1\nEpsthJR1s3BMxLnpUzROS+pe+TKejTG6/4L3fsI6WvAOWo5cLXGEuQuQYuWa\n1yxqf8UhUiZL0clHxahl/URyf7lNuoOZ8vdd7YThnCzSnhBgZqKWccJyuX1+\nZYJE+Iypegjcz1c11IkQtFcpqMJKZqhS0emqTzyaHl9GIN5myPVO2TnfFGmf\noGAWas3r3sJmmsaqlwMSatZMCeME8c2A4So9541ccxqJyLVAZXWiCKoI46OA\nbnvtx5BKoi/JOXUN9vvS2CKg7cnoBPC3T4e9G4jz7tLwlVNX9PZHk4zDy1bC\nSz0NsbDUwpPRIqahFd/MugihKwnxQcXGzlil+KRCDzEmoGN56JS9fAUsMCDA\nfgTWpk+ZYCvlyM5iakbrhFLafz9nhTIMze6Hf00vgIqX0dklcRVpc/nEK4Ci\nUm1OGxZ0sDGWPFdzy+2bgCXVPIr1y7WB/JAM+j5nBYZCCNwFmNvpEEvcOJIs\n7V6ASpJRN8Sf2/wGkILXAoykFFpeNgHVrxJcCl1OGGXvzuNKOKggqxvaTgT9\nOphhFUdAIjP6l96+1G0j/dKFDASa4UgGWUfJu+P7Z3/3FwwKyEMmluRv2GRV\nXMc1c7UbnM6doFX0sM64v9keK8sKz9xwEUiEGDdV9eQHpSh19SA0Ghqzs74z\nIPo9qsMfyP8AQySzrboc26Tx7B+I3iUjhAbhFhGuslMCs+Pe+t4Xf4xadvwK\nSaXXMhMqC4JhXGh7CexfStem8PHm+JViClZ4SPxCLDVdT5zJhgm0fLrlxLCT\nap7/go0ANrcTtiAt8sg3I3Fxt6DyoAw3ukVFeCQQtmMA6dMrZ8iU6duu372u\n3SAMJqQYPMVSaYASQUVlSTqCNx/Ly3a0xOg9Ix+6UHulBiaiIUMoEt74OIyP\ni6hAq5Zwu1AM5pJQfV2AxARlQ5pczhX63KZ3JbeSLZiIEukgpP2fMk9M3dFw\nvrJuXvNgcevSP8saAQsBzpoWxvulj6H2GMnBBHQ2Voe8/GkhFSQGGH9QFbE6\nuQR/M4l1XSO8UtIb1W2HRMgq/HJtbo9JqNtqTtJcRBpfgLiZjgMaru2fIF27\n7zIEYwBr/lgOLyGtUOUfE3hDGbRqQQbqpFz9EuDsol6yv24iq42JI+nZcxLo\nZyY1sRNqrXA3+MznnENmIV+oq+47jlz4qLYTmGo0ziFGi9dhgdUqa88Hqz+l\nLyirc0A5vI0R5QgMpdHWF+DUEZG8bRN/rxovFJhzAUyy2Fs8V7w35PywI+K5\nnbzKvlLb6h29+51j5AS/is+NjGZ65nvb6k7NONL2gsgpum1zFec9jxmYpf0Q\nqsQdHcZH6XQrtyqn0eJ9tdEHSNo3hTz6h9mPurutEp8U0GPMKP2soRF3cuqM\n5aDhUWY37n1WXgsAgudw9PzxZlWpMohMWesnLTh+F0rRco2U8Rhf+WcdTdIN\n0f0Fi3wGinSFqSswpy9tz3W7AsHZeSsciAVR7MdYc3RPCG015WwOXhbZGG8d\nezP4/hRU6dYu7DX55zVWJnKiYsbLdggAC3zYTO/W+KVvklk/LxX2pyole7dL\nkbUoq2VQTguwuydep1yvMbv8eyXPeoQmZmTpmukV5XouQIe1QdTHYoD8bmh+\nzBWBT5/cZn22Yno5YF7c7I97DoQC7jk8lcQoC5F0wrAQN8WyLcPGyYoMt3CH\nutuKYFg+okRdqomghfXBpak9QOAcgAAWKUYy6bhzyO3v3tNfU9vr/TBryotC\nYpZdJ9TebXdOVtiEhcxfqbj1BrPDDlsMdAN/XhUms0LHYilup+X1hRXutG3g\n+oVg1Nf1dO1VbVzjuIMn9+wEf2opEVFjppSbvWakszuEGnQKKRFIDq7dQnBh\nfOc13M6h08rElHG8T0dTOlvVUeq584IKG5cjf9M1iePlraUZE4jxXU5N8Btx\njXKxoVATfOkMJXaI1Uix2aGBXIRUVZUujz99lEJSnJ4c7H7X8ALP+cT1I7iK\nR6YfA+WEBCTHGdckAZuqDxR4Mo5r4mDyMGX69TMJB1RC68udutwZzMBStbWO\nQJXJZ9LYMHbK4VA1E81FuqMun1jPqjq+nDz5LM4q3239v8G/LPH7w1M63eFX\nFzOUS9njLQOZme0+NGbBOxPh1N7Zeg+BNMVKCAKnyJn7whtm7m/JHzT6D5eM\nwM1AyNTdbXpalkUNTcCRgU08MnSG3bNEEbioMZ6oe7T8X4yvDhGqmQZ3e20V\nMcSeNRyhAA2i3NgpEBJWAS1kdJRDc/FyRKXjPT7P6qkvZdLD3YFU96rWYc6p\n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\ntuoc9xZnF9izwbHNM3/K\n",
    "encrypted_exemplar_sources": "gk7ITjov23ab9OcDKr5oGmVExqv+CtlBQEnsEBmiZBPxJryYYwgp91M/znE5\n9lPs86nur2oAaxXGvoL4KyZYWMy3TnU68Cykvo47wI5Tcsp49o7he+aZqBX3\n3XHyMgzNE/9G/w4OTwkMJXoVAwX+vBHbWj13wTJPIPirIGp7j0flj1O35HY2\nOiQ0xo9Vnid0xdGeD2/yVxSdDCLownsT/QYuaaXuwEMAn/cJ0/yKxKYt5/Au\nSqdMR36UZjNuMsVEXeuhEIGp+rdBMRoFKPkAaRwYiqGgnk+luUd3LGj6L5rJ\nPAk2GVRgOaWC/W/ruNzY/wX+YWFmlaDplzT+p9GvIIoPihw9lKRP4C0YESPb\nrLzAxcOBkqPuUwl1MVx5HLekemnuEdo8qLJsJ1HRZiaUjWTVVT00A91lfS/p\nBeZ2uAiGTBMYAVaPAwcXPpH7cYFctJ5C6m5Ld+3UKHmdEwHKJqBt+g38y5zA\nXHwl3M+gCQNWh1MON92pviBlLMDLPKVxAUkIR0nzX4C26ftufW4+4BpAl2Q0\nFfYpy/YMN13ZicIGt8Kd7253yPD9UebMmLtmN7QDPLGxyi+ZkQIaHC1FcYWh\n3pIxMIjLP66PyJ2G4sHtUYV7eYqus8nZioH89s5rtUWcjeSCVK1a4h3RNaTC\n1ef0uQFHVdLdChP+eFGPuUDsSC9KfvYmS3FonXsEg8aZqzTddmLkh1IsY0Es\nGMQgf9PTCl6WHdf8pfaByW4XeRs1MoftTy1hsKLlmXFuYn8rOpJXtVR1BngJ\nR13BwjmQ1l7tKfa9RXU/qov/sRFd4+4kZENqbxCO5oKOti/WDOr0pLhClnBE\ngRvBXq7BthnUfUiCEaZFjv+NysfIY5BVpMeIUQhDa5ZbFI4oJm/87khpavWV\n/NZ169ymMUMwjpcfZyuQzOEJUsGNaJcCa0OtpnhQctO+li0Ivgg4aCoG0Hir\n2Mi9v1YXvxS1UV/0kHuLYbrPUZ7T7aMhjUYbRRTcx0HHUx1Q+SfcOoYkn92r\nTD783HDeITELUNL8bPK3G+kn3Q3xLRuw5Gn52sKgHWSwnaxf9DFV3LbFzMbb\nAIyWCOPApWDQoXKKZ33bv4iGGrkfcr7Bj/BwzmVHoe9o1N10Z9m/EZJOWKX6\nTF3miqMhxk8xMTSGIBgqn0l73e2ejBZ4QLoJK//hGISQrFzr7/ZZ4keJySLr\nJGqTeTi7mpnZsX7uH95YA1pUlY2HfXJMK1YEOMQqInCbEAJxy68R++evb/iX\na93fGLGSiIpFPgQzagkuAjrFfqF60FY1vvliPmM7+YYax90XbD4utIwRMiDn\nM0fmemsvePNM4JByGGNZjolJaRwhRipaqy6fU57344ZnMBH+7SGd/EDtZizD\njHWPLzLSGSVPY89yqoosntHQeD1IWXhleU6/vjcTK4rQbqUSX4b0K+x9sqb9\nlcLLRWrvRQWANVfnJI+MLkEQ7PBZIuoaklAHhx7rGhFqftF72l2PcVPkKthf\nCnPWZ9K7+FtB2X6ZRXJMwH6hjDeglvG2C81NO03RyOi55ZmU4pO2jIfLrrsk\n8zof/GAh4rNKEYuUgk51f+NEGonlnZClORJKKgPO5WFOBZ6rE3Yz9h6c7UOb\nb+KQ6Apfe/FGW3hQZ9b1txq3dGZsUCy/kcnNUs32jh0sqsswG9xK4PIAa7mU\nbbuI9mQXJ5Kk04UwTdZWgGlly4QDthBSJANPw7Q6rSp7qPmlOaSf98Seyhe/\nVxp8OruqFsGSbxo4uuiFrejA7wQ9BLgYJDtzhjg6O0pdVfyl0Eki+q0uDGBQ\nnO3bs06/QIA+4DKI550PCJWhH0T30q6y7aX67VEyaroG6k9ZJj7N7oJRQRob\nIygndEIvVVdxHFkmC4n7gfEIHnIC7eg3C4UMuLzdI+qXpVD2XjpokL5WWoVM\nvnxll+n7vezFvzIysu18UxwfdrddhmK4Sw0FFRvpO/oXVWL4WbHFkQm4WCSo\nTTHrMjttK1e/x9Glh4T4pz1oORq2w4wDpN+sBjjB/E3bSg8f+kpJMd82mq55\neSZJH20r2k0Vp5+QlXmEh2z8dERvBe1fCAJ23rGnI0LaVa9aZvsh4MUjsx/G\nziOmVlmVDXwi5O/QM3AlSF9TZ5IsOFC4cokGJOJ4gL9mXbftBKYMwmdaaD/7\nll7KongbO2XDy6JMATT46w3PGESudkpa7nZ7XgumavxHl6BqP7uQVenwedzH\n+oeM1U4t4MzCihckrD89gbZUnBtz51wn9ifBr1EG4+W4zs66aUFQ0EpSLUFt\n+DncYmlYl5e4FiS8qMAa3GmW7cb9zEo2FjP3Wl+iXIG52Qrw5akQiJ0mF9jY\nU9Utvt7Zya0+ng35O8fW9FxEByVJeNduHN+USTVRVLr0lsm6+P5gXaLFyKic\n+tVc09RoThJ95PPr26f16Qr5bwHf9tZPjnsHGgJSQ0GwjzO1q4GS0+8Uori5\n9g1f0ZvNMh4erkdCa1M9RHqEb0/S6IofSQWFrrOFIkNbCGM+0L9TxdobZnKn\nEXEpU+re9pHG8H/d4H703Xased+renrgZl+NJ3NZaCygDVr4+bwYqDpSfwm9\nvHr+u02U7iD/FCs23v5WMdI5uXg2vfZRjyt/r0w64DtvmeoDSYugMZrT5r/n\n4fE78qFVyG/7p2yxnlE/guYAPzgrJKe+ji4wtoESecMJ8fNzVlhopbHGIZyX\nkf9uSXjZ0KMe3TKBg590fSqytz2opKxKD/7GVXNV8S/6qH122lpLeHDkdXKR\nEQyEVDiC0OvibP6PLL6o5HpXHHDZZVbEDrs1/VxkRfiOXr3suwpDzhMMp9IT\nHDCzTOP9JAHWMK0erJA4zgdxe+nYkN5jT9Tg8aqfs1aakDYJIqs/RqE1XDa/\nsAHJ6xrgFS5ug5t7bnKb1/YbhQnj5ISKtrz05WS7OGz4OHNHNbgBizsMm8KJ\n9dFD7MWX7Dzfmdj/5DLBlycGoBfsGy6xeicyqbwkO9Kq681yMXJgTbWIcfjH\nROxXF9jsmz/F3inCqHV0wJtRc5b9fCb9kTOd2o81WY9ffa0flXOx54O9CgBJ\nIllqnSHSbN1Bt3hCpjgcvEfyhdYeEjbCo+5OmXpHkfryUr6ZEdgUu52VTXxm\n2N4bj74hQ7lo2vk9y7QSxl+VMcLqU1ftEVdFYON6nzSXvPeKjgUIABnKVMTa\nX0QQJA3oYCT8eVVoIeCZWMipzz1YeWwZYJR3Ulk4opOZPpaMXmHyNmnPIieq\nyn1nmTJrySDj1fB0aqF93rbcqxr/3EzZdVV4pe3r9XHNG03LhwJPkXrefXXZ\nuXKVqQNwvCAZAehT9e+x5/b2T2MpfLFJDxXNy3MDw7i/zjGQ4Ici5KiNtIBX\nnxgdG+ww0uCG+14eYwbiLGFVd91/tvNTBsa7S1UxyxTn8zHcyr3dEzv2Utrs\nfxtHJ58liAGeZwRETGbHJ+nFpk+QuHP8gQc4pTWIHeey1IgaTOtkKi5UKFye\nZfkdxUIuBVyojw0suucfWj+grAfyC8j+wXpRoeklkNo7JWcc6o3YfLhh0GrJ\nkbwE2j77eavmb0uzhs4QVRLPKiIenqSOzvuBjZixgPKK+Gxnl7nYdMp++ZwQ\nfGBDx0u2dMezq9o2STdbAk1PTxE=\n",
    "start_sources": {
      "SolverRunner.java": {
        "text": "public class SolverRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate several Solver objects, then call the getFastestTime()\n     * method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Solver.java": {
        "text": "/*\n * Represents a person that participated in\n * the World Cube Association competition\n */\npublic class Solver {\n\n  private String name;    // The name of a person\n  private int time;       // The time in centiseconds it took a person to solve a Rubik's Cube\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Declare and initialize a static variable called fastestTime to 0.\n   * -----------------------------------------------------------------------------\n   */\n\n  \n\n  /*\n   * Sets name to the specified name and time\n   * to the specified time in centiseconds\n   */\n  public Solver(String name, int time) {\n    this.name = name;\n    this.time = time;\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Check if the parameter time is greater than fastestTime. If this is true,\n     * update fastestTime to the value passed to the parameter time.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a static method called getFastestTime() that returns a String\n   * containing the text \"The fastest time so far is {fastestTime}\", where\n   * fastestTime is the fastest time of all Solver objects.\n   * -----------------------------------------------------------------------------\n   */\n\n  \n\n  \n\n  /*\n   * Returns a String containing information about the solver\n   */\n  public String toString() {\n    return name + \": \" + time + \" centiseconds\";\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "name_suffix": "_pilot-2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T16:52:44.251+00:00\",\"changed\":[\"cloned from \\\"CSA U4L2-L8c_2025\\\"\"],\"cloned_from\":\"CSA U4L2-L8c_2025\"}]"
}]]></config>
</Javalab>
