<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:49:18.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A scientist wants to analyze planets in the solar system.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Planet</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numMoons</code>, and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">hasRingSystem</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Planet</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numMoons</code> instance variables and a default value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">hasRingSystem</code> instance variable.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">PlanetRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Planet</code> objects using each parameterized constructor. \r\n\r\n‚úÖ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Planet</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>\r\n        Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getNumMoons()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Planet</code> class to get the current values assigned to the instance variables. For example:</p>\r\n                <pre style=\"background-color: #333333; color: white;\">\r\nPlanet earth = new Planet();\r\nSystem.out.println(\"Name: \" + earth.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Planets",
    "bubble_choice_description": "A scientist wants to analyze planets in the solar system.",
    "thumbnail_url": "https://images.code.org/f1532040bc5141e260cc64df5dd8ed76-solar-system.png",
    "encrypted_exemplar_sources": "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\n+iR6g+zk5gXoF84tRyXx+G0mEUnjrclhYw==\n",
    "video_key": "csa_overloaded_constructors",
    "name_suffix": "_2024",
    "ai_tutor_available": "true",
    "start_sources": {
      "PlanetsRunner.java": {
        "text": "public class PlanetsRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Planets object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Planet.java": {
        "text": "/*\n * Represents a planet\n */\npublic class Planet {\n\n  private String name;             // The name of a planet\n  private int numMoons;            // The number of moons a planet has\n  private boolean hasRingSystem;   // Whether or not a planet has a ring system\n  \n  /*\n   * Sets the name to \"unknown\", numMoons to 1,\n   * and hasRingSystem to false\n   */\n  public Planet() {\n    name = \"unknown\";\n    numMoons = 1;\n    hasRingSystem = false;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the name, numMoons, and hasRingSystem instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign a specific value to the name\n   * and numMoons instance variables and a default value to hasRingSystem.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to numMoons\n   */\n  public int getNumMoons() {\n    return numMoons;\n  }\n\n  /*\n   * Returns the current value assigned to hasRingSystem\n   */\n  public boolean getHasRingSystem() {\n    return hasRingSystem;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    int end = currentConstructor.indexOf(\")\");\n    \n    if (start < 0 || end < 0 || end < start) {\n        return parametersList;\n    }\n    \n    currentConstructor = currentConstructor.substring(start, end).trim();\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma).trim();\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1).trim();\n        comma = currentConstructor.indexOf(\",\");\n    }\n    \n    if (!currentConstructor.isEmpty()) {\n        parametersList.add(currentConstructor);\n    }\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n  public static String findConstructorWithParameters(ArrayList<String> constructorsList, int expectedParamCount, String... expectedParamTypes) {\n    for (String constructor : constructorsList) {\n        ArrayList<String> actualParameters = getParameters(constructor);\n        if (actualParameters.size() == expectedParamCount) {\n            boolean allParamsMatch = true;\n            for (String expectedParamType : expectedParamTypes) {\n                if (!actualParameters.contains(expectedParamType)) {\n                    allParamsMatch = false;\n                    break;\n                }\n            }\n            if (allParamsMatch) {\n                return constructor;\n            }\n        }\n    }\n    return null;\n  }\n\n  public static boolean hasConstructor(Class<?> clazz, Class<?>... parameterTypes) {\n        try {\n            clazz.getConstructor(parameterTypes);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n  public static Object createInstance(Class<?> clazz, Object... initargs) {\n        try {\n            Class<?>[] parameterTypes = new Class<?>[initargs.length];\n            for (int i = 0; i < initargs.length; i++) {\n                parameterTypes[i] = initargs[i].getClass();\n            }\n            Constructor<?> constructor = clazz.getConstructor(parameterTypes);\n            return constructor.newInstance(initargs);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "encrypted_validation": "DgvMtSrmZhYH0YJiMBTCKyVHBYdp0v+xLLd1IcgjzMkJeDrkpRTorEl9RE99\nH0eizQ+Jx3NNQA849ghOnHSDMtvMjEm3VRjaYlS1aV+vczMnj8af0D9KAN1r\nvlMv5IrW36UiVTrcWaFyEe44XhU927ZKfGTND46wOmq9rfrov9LUoxDeydZT\njrb5sT/Z18HwvqWq33FTZA5TFa8dAcmDevnAu9//Wh46GGWzzk/SLNKjZDuo\nmWs0ajW0k69mcMYkPgF22MAoRs1w64u88o/iGJjjEGfWpy4NXhGy2Itykd7I\nAYwgNFLp9ZwUiSoZysTG4Y21wCIfQGUttZFZphIiIjwkCYEMCkMUBMJ/ojun\nJZn6T60U6esLQQLaRa6iK++J/1nZDFPix1JQxQQNLoFHYumJtRCsyvu1Km6N\n+V3dZ1X4Q2kaFjG3Z/NzazIS+HEQI8cElT6pBSZIHdFdBbZnTznUhwzVAUgD\nyMVRP9JmY9VSLRSTfmBuK4CGf+ftkFUwh59iRATMPiKZf9TQefoGayCeZ2cb\nZlkXHwFjRYD25vC7G5yzQXpMelPkbGgGVLKe88qV91ly+ixApOATTS4+0yhr\nzV+wfTI9I/ger4AFhLt7pgGsgxRMhq5U3LMVeTeiHssWb2HmX1xXAyfiTzUk\nPiO7HN9R5oZEt1KkV1OCR8UZEioM/wf7Ynpd6EI096MCqjJ3gYjK6couF4vp\nJuzNu6Rkn4fN0zk7f4sEyk6JJj0djHaDu9VjAzG4EtzKfTsl9t8mEk3dRZoj\nXHrZgN+a3TzlnQSBsGSKFxcJycJwGi8RlMysqNxNfIkT+1fUP8iSFWbfXo1j\nFCbGh7z8e1qLVeDzkimivLOkcBfZMcjMM0AD3rQTzaBo3L6C3CilTj3uAXML\nFg/rhRWs/T2O0lBSMUu2SF6qGR02h1nntfyD4iGA2zrhw2UbCxCKVlnqvH0i\nfN4lnK4FBJa21I9CNbsHAid/eE9tTmrzDidFGNkD+5Zzg7Rr2t39yNVd9GLp\nxL3MVgQvAXKld2Lkuf0Y3xzgwSnjgKfAGyayaVSwLkbKIxxQOVMhhKioA22p\n1KZbExkiHvvFHBgPkSgfexrVPjas1aCH9G9BfCke/u3BuZQXdwFuXRWjsOEo\ntadGjT+63hXBt2zxeArFYppqFh8Ycqn8kiRKe/66fLm2/6H2AAEiRSzOWGFA\nWm/oOwN5Ubvdl1k/bBn4EIZKxK0hWZamy3+maQI0C0XvdBApkW+aZGRU62PD\nWWVIl0Ukd65kJI/rdJmeV7g75cCZPPsjLB8fiwa+lgbdJeLKrHQqZrdKpaJN\nA92eMpELppOYoiUtZrBtAocPDPnVfXNIPQIWsfZu1NIDHN6cySJexy2SqBfB\nJpK90ql1HAW05NVAwx3tW1VN/IylBjwMNY+1Q7HjT7H8rjPlvVVOnKFwkT1P\nKSLbcDM9EDzKn0sxHdJHDDcT0yLABvYHBnAXCPZplb9Flixbsg554WjejqSZ\nP0HKr/zO5ra92cTu13u3s9lNY7lFPdyVK6nYKEzWRlxWLxGkxE7+1yAAL/GQ\ndOSIRMd1Y9QQbfklfwum2gv1ByV9LRBs9mFQ5yKk6IA1kkH8zDEb4jqdg6St\nP11lK7wwAzNSAW8qHgbKXiKLIqNWgtg3he5uzL9uCf4QygDnv//AiBTfuBUe\n9kNe9J9nTsbmdZxuQPtnCJRJ7lJ0xkGePYPffSEMi4DX4YCjfs3fr5IxReSI\nGFOZEPuROimyVqnV6p0Hzx2NaB08R2yp5ltPSUyP0v3LN55pVgLqGA+C26vQ\nJekBoyTY2REhWtrL/0noGj/5/O4mu2BFPPEyhJPWIP5t4tQRgkfbcqfgRhaF\nQWIlQb+WuXXHvJIllSQ+spMRxzC9syvzZjXPIs6axScBrxBwckTTw3C82exw\nbUqIsdXDmeOxjk/le2LPZhAjeLrbzteloQ/Q3Nuu9+N6xU8a8qq2dhIaqktF\nK6VdZN+opRIQJ4FdHD+a5Wa5r5SNEIWjumEhcSc9AHEd4l/mwjP0X6fRZidk\ndkowQzdVqVivSxEf9TzYbT/kXXR8vC4sMfzjLo0cbGzCYpD01D25WRHVcsB8\nM9j8UORtwmMPsUBBrYE7KBwsTASd2hlvFWxgFuUWYd36vzM3wEuF2vn3lz1B\nm32LFj2ovn8heXMMLAyE+EbjxLlHELi8xcGNaBHdspgKgZKDQEz5CSeZzETj\nXb75T6Ib2uj/hKNp6srReEyp6dCZQL52NZ6wO7BzD5fj2nlUi9mShgETMmGl\niy2MB1PMGC0du9FRk4+jfpJGU0crPqgYowjJOx3e//o8RGp/LAPhS1oss/LV\nGbNb+qb4kqOZPO7UnLLjuDn70fEnTACWLIIaTSI9QMo7TwS1OcvMktPuAycd\n3pAwWPoM85cV11xyXqpj2gIhwr32VIrkxNPJj08M2VvCq81WPF43Jj9zwsCe\n6XkhpVJP6hHT/VDNPqVY2yNikUOVhA5MVHTrcqKhZjg2bSbqur06SzcGpne+\nbTNwbd8XNmHBNDPoZSCz6/KL8bWQgCykdgDNfA/VFu8ENVHwZ6zXkudNbRvo\nfo83bK1SykADwXvYKwGh0kUz9RW/2+7BidaYcGUgWn6nIoe2dAMOeU7ozDY4\nrLu9N9uGozZg2DZyJLztoTNYxpkIaMEHoeTpkWI06LbrFgXtlfD/Hw7Xi8xu\nKHvNlJ5EbWGyLGMiYd0m9QwY3cflPuUiCFQe12vB9H1rgaGysMDbFiNsd3vF\nlBN2Tz5yQ35I5xv/t9uc9O8yI3YCWo9pGzz741lzVmsfd9CqBl20jNoAN/LK\nU4F+BXvMec1f5K2z1x02pbqnYLctxUnsmJc1ly0r/3atCt6BOtPTP3fMXwA7\nVS4I+2m+yKUFRIeYFmQok8HrPgzKoosBJSYs4y5MSdqxQ32j4hF3tK0p4OtT\nSiPBjXqQZecg9kQy2ks9qrDGoucxNn6HlpPDxVxbeRUA5vKlkeyghNbSI0sE\nB2WLR24hUNgJ+NT912WSxRvTU5EHk5RaZvOPJa/3Grzq5rtyrOm2pfu04HYa\nwFTDgZzSajpisI9BFKq2udpiTLOoY66fgebDfu4vEVReMNdUOQYiM/utQ320\nTMtLa2JDrQuh9spidRWoW1a9S7GG1Kb7WmhDPx6iJQIb08NfIa08tf737hWP\nfhFy51ZwW6w88kTqvFaRVnJo16U9utr9pKdsWC6XIiuzP5+x++lCeqcLSGaz\n7ernbXw2kb6t124pmujPD8I872YWtqzPkJBCX0Cq31TtvpvyoitNkwDXxXnE\nfW0Wf5fn/0ZbNG2kd+UBj07egj4SqNaMOT/0vhGPm0VJSY0hjy7ULVlhDJrA\nq2QTJRoJTken1awSePr1ImIusvAmGHKhbSilJEKsM7rMTA70/AZkGLKQu/HI\nmP1cRIgVuhnBC4/a8Gm8SZcH4YLBQTsL5eRMvlxVM3i4YI7M3r/1qPU/3qFd\n7l48HOoz2xckxbw2l7pWeSU9WncK1747OSAh4KnrBb+Y82PMnohWclSKqKgW\nTa+Mxo23VuKaGFpFm1pMA3MSkKmrLAv92IxFL9bb2PNVqPTcHUy0j+Ep3DJ9\n70l2LCjAF5rD9u0wZ6jUw95XrHGIVEgK3+2hQ8b6jxIOpxlhDWE8JkiHYpmJ\nQDTb5HorAIiga9iY4jMfBTr2YaruqjE4I03DFGuXhU5nvYpM1f7FXI3ArohT\n7solEtnOrV2BSYSJWhwpyGQ8srw8sFDfxb920NmRpIkFA3mUPpoj8ja2d2Qk\noEfKxAV7bzoskazwIaXaCXI8r5tHmFnW7il6W/R7os9MqH+1DbVdE3Jg19EM\n42DAixkbKlWO5ktlj9oft2eoSSR4ThfFrXimfSQGnvjWnqfQCkwI7bTMKsx5\nDc4FF+j+TbBE6vfrlN5Y+auBytSErLtpmI7Yg/xuYZJLrU5tzre0HrceR2AG\nEHlmPZpu3ToE3WQtUryakU0gbrP5HR+L4Sjuzx+Ww5mH5wBMZSX4KpILNJ9G\nvdJWlaDiKfR4qg4s856filpo+z9kFAwAaKXDfn6Bd7kQQssxTA+XZhYW1kVc\n8L8ooVMKyYTqNSe77G1JCr3xDBGDEjT3TQ4eTvrEFgnWeYzECjDz2kRvWelL\noi4X5f0LgZemJIo/l6AvHXtkci4sk4abRC50vXXmx4CyCNwtRmCGftRHa3Rc\n57l328mZEe0QYqwyrc4kX4Cw71WOZy4uCUvVSdYVAt+BVKXl9rhTM01HwHIA\nOEYDKnoeTeS2J7d28GD2bE5492G/OrpaZhwKwFBYqOY9nTRTF8jlcJtCmX0u\nH6NI8VMW72zCZWvxqJr9FGwF9i4+WsKubaOMbJONW0nEskpXNAca/RzKzNAC\nJ2N/TvutuCU7ei2p+UNiMBCSWwviMBCS45+lA5t84GFaJjWZ1eOYWHK1G4Ho\n3WsPKdlUppjBzFO0k8ivCjeX1pTQsXMVV/lyfEVl6jwux6OhXUEHXKi6Bovb\ni2V/02Mfi4WV3zgZ5DZ+exvvrnNOPM3mCw362d+hZK/2fsXl5H/qD89VNd63\nfm0F36uX134T/wklaNFha6jlJPgg29j6I4xVsR2Vu/QhyRsHauVJGEOPTLbu\nznpMYNU2br6tlDjsEGy6uetlZgzwoK/ix+1kA+LP+dGiDTMGToOUOdhDCcSj\nR/Hx466ritVedh4DwSIhwH5ktM5g8T2LUkKLZKMXIoyO+M53cSmE7GofUt6u\nda4aktLvk7MNseIHSJXGWbcBclfKUxCQzqMIcDBJSAIkJGnTCm33Q9SNdcey\ngRqUVZzPPPxkPVodDN9KQlP6lMHI6Le5033FjLP0pVP428//sFqxID1DQTAt\nMZJtpdfNoB2O3g9XhM0OpwVFURTK+flw3jCU7D5V5omVzgof87YmunwnO+1u\n13SjBvZuqzA4mmHkfTJyzcgduvfIEs9c8WUm/H7wVG3glgESPh3wWOpi7Now\nmajUfOM+Oh1VhoiWK/bANrc47tF7b9Y5keIVrskhb604COZe6/P2S/jqr757\nC1atYJrCx9EfhKiCDOUqBDsn1sC+opfSCVepqrAbaHQY9NmtY9GCo8/iIMA0\n/fICeLVwPhwL4gVH6D5VUJL9jyFF6ldG4uIcKtzg5AtLUWRamOPC22fzWJTI\nO9OZ3QsCk/byCB7wXfk6rJi3MBh7KA7rNf8NYzNaokiOUVoD8Yn8hzi49qGO\nM0tKG5EKMnyU/l8zNL+bOj/Flh+mfJ5FspfLibZATUBUVY2/yjWzh0JsvFzb\ndQ0YJM5dxURLuVC4YKqLt2yhVLI0jXX6o6QMLzLWBcRwq97Yjx0VWaoydHlW\nPFBcvDNnKWX7O/vkzRj5ALSK8lcSeQRILHjXANVKyELuJJWPVJ+zNttrwXdg\nijJfbYxzCtiEmN6TrVu2CzS+MukzFT14imcEzmup28bk/GC1+70ikbir/f98\n+2X6siMk+/2lOHrPntZsOMSCTrjIdRIq8K2Xpg2w2fLr4Ltz9ciKZTQ27UTg\nmdl+n16P4EO0lKXti7XqDu5n/4sBnkOETvB8mZ/f7UiGchqWV76Ui22ropcE\n0BQdzrx8NIG2D909vQF48AFDdgQg3H3T3X1FLKF8g3djnF5vahmH/N3yYKBM\nC+pZHTCAA6KNanJS1T7cpZeH8G5PMDDZe2d9IxY+gkVgq2AezY4cjZ7E7VmF\nQGf+RyPDoGF0bEL059rpDosQBqGsFKc8ZWaBdIkVy9TV/RCDIx4TSnUvo/fm\nancvQzu+QUc8P7/+mV7XWGCmsKECkh+SUa5vlmJfySzkoESW1GuY/AD/wdmR\nP/q0baof2ljPXPotIltRRd3YqQojfML+otBm5NzjYj80LjFBPn3oDyDdm4Gi\nxynHUEWK23DPliL4gWs7+QkjkblSOe6+LRE2UOhm3FJrnjNdnb9XbbenvoFD\nuLR1QB8ImyY572k72bk9U76+hr3vxr/sM24IYFQt5F+sfIqiaZqzJmHk511Q\nNAidUUclkHcn7TGS\n"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:49:18.857+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L4c_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L4c_2023\"},{\"changed_at\":\"2024-10-02 15:55:17 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 15:55:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 15:55:49 +0000\",\"changed\":[\"ai_tutor_available\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 16:29:46 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 16:30:22 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 16:30:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"},{\"changed_at\":\"2024-10-02 16:31:24 +0000\",\"changed\":[],\"changed_by_id\":18602,\"changed_by_email\":\"angelina+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
