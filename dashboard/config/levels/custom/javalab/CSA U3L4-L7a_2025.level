<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:52:30.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Flowers</code> class declares instance variables for a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> values that stores the names of flowers and a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> values that stores the <a href=\"https://www.kaggle.com/datasets/marshuu/flowers\" target=\"_blank\">**typical colors**</a> for each flower.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Flowers.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">toString()</code> method to return a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> containing the name and typical colors of each flower. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">toString()</code> method should:\r\n\r\n1. Traverse the 1D arrays <code style=\"background-color: #ececec; color: black; font-weight: bold;\">flowerNames</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">flowerColors</code> using a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loop.\r\n\r\n2. Concatenate the flower name from the 1D array <code style=\"background-color: #ececec; color: black; font-weight: bold;\">flowerNames</code> and its typical colors at the same index from the 1D array <code style=\"background-color: #ececec; color: black; font-weight: bold;\">flowerColors</code>.\r\n\r\n3. Add a new line after each flower's information.\r\n\r\nFor example:\r\n\r\n```\r\nrose: red, pink, white\r\ntulip: red, pink, white\r\n```\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FlowerRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Flowers</code> object with the 1D arrays containing the flower names and typical colors and print the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Flowers</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with traversing a 1D array with a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loop.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nfor each value in flowerNames\r\n  result += flowerNames[index] + \": \" + flowerColors[index] + \"\\n\"\r\nreturn result\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/for-loops"
    ],
    "display_name": "Flowers",
    "bubble_choice_description": "Traverse 1D arrays of flower names and their typical colors to return a `String` containing information about each flower.",
    "thumbnail_url": "https://images.code.org/b7472b8722111dba8bc892412bbf34b0-flowers.png",
    "encrypted_validation": "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\nJbtHzRty3A==\n",
    "start_sources": {
      "FlowersRunner.java": {
        "text": "public class FlowersRunner {\n  public static void main(String[] args) {\n\n    String[] names = {\"rose\", \"tulip\", \"daisy\", \"sunflower\", \"orchid\", \"jasmine\", \"lavender\", \"marigold\"};\n    \n    String[] colors = {\"red, pink, white\", \"red, pink, white\", \"white, yellow\", \"yellow, orange\", \"purple, pink, white\",\n                       \"white, yellow\", \"purple\", \"orange, yellow\"};\n    \n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Flowers object with the 1D arrays names and colors\n     * then print the Flowers object.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Flowers.java": {
        "text": "/*\n * Manages data about flowers\n */\npublic class Flowers {\n\n  private String[] flowerNames;    // The 1D array of flower names\n  private String[] flowerColors;   // The 1D array of typical colors for each flower\n\n  /*\n   * Initializes flowerNames to the specified 1D array of flower names and\n   * flowerColors to the specified 1D array of typical colors for each flower\n   */\n  public Flowers(String[] flowerNames, String[] flowerColors) {\n    this.flowerNames = flowerNames;\n    this.flowerColors = flowerColors;\n  }\n\n  /*\n   * Returns a String containing the name and typical colors for each flower\n   */\n  public String toString() {\n    String result = \"\";\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Concatenate each flower name from flowerNames and its typical colors from\n     * flowerColors to result\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "encrypted_exemplar_sources": "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\nXQGFlvrA+AHcx5h2D5aksMlL2Cnhq+uZIsM=\n",
    "video_key": "csa_for_loops",
    "name_suffix": "_2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:52:30.892+00:00\",\"changed\":[\"cloned from \\\"CSA U3L4-L7a_2023\\\"\"],\"cloned_from\":\"CSA U3L4-L7a_2023\"}]"
}]]></config>
</Javalab>
