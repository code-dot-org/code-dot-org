<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-02-17T19:06:45.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that visualizes the number of cat breeds that originated in each country. Use multi-selection statements to count the number of cat breeds for each country, and use the counts for each country to decide the size of the flag images to draw.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">CatScene.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">analyzeCountries()</code> method to count the number of cat breeds that originated in each country by traversing the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">countries</code> array.\r\n\r\n1. Create an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> array to store the counts for each country.\r\n\r\n2. Use multi-selection statements and the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">equals()</code> method to check if the current country equals <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"Egypt\"</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"Russia\"</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"Thailand\"</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"United Kingdom\"</code>, or <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"United States\"</code>. Increase the corresponding value in the array by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> if the condition is <code style=\"background-color: #ececec; color: black; font-weight: bold;\">true</code>.\r\n\r\n3. Return the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> array.\r\n\r\n‚úÖ **TO DO #2:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">createScene()</code> method to draw each country flag at a random location in the scene. Use the corresponding value in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">counts</code> array to determine the size to draw the image.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing multi-selection statements.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Cat Breeds",
    "bubble_choice_description": "Count the number of cat breeds that originated in each country and draw images based on the count.",
    "thumbnail_url": "https://images.code.org/7ad394dec8c9fc164c5a3c37f8f6b1ea-image-1650719083623.png",
    "reference_links": [
      "/courses/csa-2023/guides/multi-selection-statements"
    ],
    "video_key": "csa_multi-selection_statements",
    "starter_assets": {
      "usa.png": "0e4dc675-1dd6-4fc8-9b85-018fe8a3fba6.png",
      "uk.png": "0b9cf391-e25f-48ef-95ee-a6cdbc0aacd9.png",
      "thailand.png": "5620c3c8-a4ce-447d-817a-594d6dfd20c9.png",
      "russia.png": "0ceb5fdd-604d-46f8-9abe-f30fb0c9e610.png",
      "egypt.png": "57a45933-7aad-4cfd-8c6b-7dadfd68b84a.png"
    },
    "encrypted_validation": "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\nun+dnBP7t/zEg3NGAhKX6Q7tprI32p3WG560R1Y=\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of cat breeds\n    String[] breeds = FileReader.toStringArray(\"breeds.txt\");\n\n    // Creates a 1D array of country names\n    String[] countries = FileReader.toStringArray(\"countries.txt\");\n\n    // Creates a CatScene object\n    CatScene scene = new CatScene(breeds, countries);\n\n    // Calls the analyzeCountries() method\n    int[] results = scene.analyzeCountries();\n\n    // Calls the createScene() method\n    scene.createScene(results);\n\n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "CatScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the number of cat\n * breeds that originated in each country\n */\npublic class CatScene extends Scene {\n\n  private String[] breeds;     // The 1D array of cat breeds\n  private String[] countries;  // The 1D array of originating countries\n\n  /*\n   * Initializes breeds and countries to the specified 1D arrays\n   */\n  public CatScene(String[] breeds, String[] countries) {\n    this.breeds = breeds;\n    this.countries = countries;\n  }\n\n  /*\n   * Returns an array containing the number\n   * of cat breeds for each country\n   */\n  public int[] analyzeCountries() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Traverse the countries array to count the number of breeds that\n     * originated in each country.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    return null;\n  }\n\n\n  public void createScene(int[] counts) {\n    String[] countryFlags = {\"egypt.png\", \"russia.png\", \"thailand.png\", \"uk.png\", \"usa.png\"};\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Create the scene by drawing each country flag at a random location\n     * and the size based on the number of originating cat breeds.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "breeds.txt": {
        "text": "Abyssinian\nAmerican Bobtail\nAmerican Curl\nAmerican Shorthair\nAmerican Wirehair\nBalinese\nBambino\nBengal\nBombay\nBritish Longhair\nBritish Shorthair\nBurmilla\nCalifornia Spangled\nChantilly-Tiffany\nChausie\nCheetoh\nColorpoint Shorthair\nCornish Rex\nDevon Rex\nDonskoy\nEgyptian Mau\nExotic Shorthair\nHavana Brown\nHimalayan\nJavanese\nKhao Manee\nKorat\nKurilian\nLaPerm\nMaine Coon\nMalayan\nMunchkin\nNebelung\nOcicat\nOriental\nPixie-bob\nRagamuffin\nRagdoll\nRussian Blue\nSavannah\nScottish Fold\nSelkirk Rex\nSiamese\nSiberian\nSnowshoe\nToyger\nYork Chocolate",
        "isVisible": true,
        "tabOrder": 3
      },
      "countries.txt": {
        "text": "Egypt\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nUnited Kingdom\nUnited States\nUnited States\nEgypt\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nRussia\nEgypt\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nThailand\nThailand\nRussia\nThailand\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nRussia\nUnited States\nUnited Kingdom\nUnited States\nThailand\nRussia\nUnited States\nUnited States\nUnited States",
        "isVisible": true,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\nJykFCJooBXRkQAG8uQ==\n",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-02-17T19:06:45.827+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L7c_2023\\\"\"],\"cloned_from\":\"CSA U4L10-L7c_2023\"},{\"changed_at\":\"2023-02-17 19:06:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-10 21:30:35 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-10 21:30:47 +0000\",\"changed\":[\"csa_view_mode\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 13:45:58 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 00:32:30 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 00:33:15 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 00:33:31 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-20 00:33:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2024-02-05 15:50:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2024-02-05 15:52:38 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
