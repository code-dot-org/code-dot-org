<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T22:18:08.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "‚úÖ **TO DO:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Character.java</code>, override the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">equals()</code> method to check if two <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Character</code> objects have the same name. If the character's name is the same, return <code style=\"background-color: #ececec; color: black; font-weight: bold;\">true</code>, otherwise return <code style=\"background-color: #ececec; color: black; font-weight: bold;\">false</code>.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Object</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help overriding and using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">equals()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Disney Characters",
    "bubble_choice_description": "Override the `equals()` method in the `Character` class to check if two `Character` objects have the same name.",
    "thumbnail_url": "https://images.code.org/ea68421a15e7cc06d5443b16ff5d98b3-disneyland.png",
    "encrypted_validation": "kRGepQG5I3QG+ZFCa3EvmBYpgCwnSGAbDG+mXXxiCyuLyzq55AjkKWrJFqRu\njRRHoFuQVOEgI0O7r08woghsaGoVdy1JxhxTb8K0+FuQfgY55LGwzBq3yPO+\nyoZaBkbZTG/vQbOjBm0WhRBFpJqDaIgwBfKDPPv6MloKm1KwuQ87yjN9IUdP\nBjjQ70rrT3KoPz/aMeTOPPYQZphb5+92fMwHqbTFUmdpdqU4BuAfIUb29NN6\n7UWRHIUN0ZSqBq3CNdGTYUbW02yVqv8PvdB1qjvwb3lCR9WIDSihaH6pXcG4\n+I2KvS7k2NSGcWou18yJ0qlkXujPglX5OstnOSQ0hvJQjmrgKh9lHSGJbqwP\niPvWM7OehNmDjdnOsAh87ldAQ9x+k8UcO2frlgY1PqstRjNV1WhT8Kl6udz+\npJ+Xkw3OydhEiifTjFQLDYk3OC7OEWZ40F7ZamjzgvYCBxik0RpbZQHwvoRz\nTHsIM7RDj9Kg/woddbZdrMFizdB+0LEEyEZGurxgD6iZEzSfTu/+kt5Dt00s\noJKpb8m4vQxR9/aHQr0H1t63aGysen6XqQ0pn2IN2qljSNtqVM7SM5L5sYNU\npSJVGbqMdnVSZd/vX2Ci2S+jEYpDWMa6HWqf/CmX7gg8EtgNM+JATFkGOahj\n8Fv7qRBGLsBDeMiB+Ssum/5z3B7xqZMrGIc4U3DT45p+8aO2J/QKeqxI4z4r\nc1/jn57EE6tR2KvPOBHw+Gbx20z+2ia3BkY8nKLS8VBLcXnpzMzAfFaNiYT/\nu/Kpjo2G0iqOZ/aksL4NXkBWA/O8vfXHk6O7Y5zyoh1aZ9X6YXmIq/p+NYAG\nwA/xF0Lz+ua0U6WDbFe4K+dT6G3QTdEod6v60fex8gW2EPFS6hxNCdjxuW+q\nuOCmF5rnzzAM+NES4G8KLVnsEfgxhV3d+N3esej26eJU1CLJtQ1cgZH5A16j\nD/ROVcl/S5XQwhlJjTheIHpVuCWFUCYsFw1GMtQ3LWix95y15W7RMCiw+9qI\niKxmuLaQcQ37Yb+pjWKCXGuKgeAk/Mx2C/Waura1QsCX9fM9nmkFQTsb8OO8\ntxShiSUWtjcLTX5Mtkb0avRcFHLRltxoyYcd2MgKhXhUE86vuN75kBkpBIGM\nf0rQGcne5Dh185OIY2Ce/NoKjS8OQUo7Whlg0I3sLnMLnIRbkXVNJHQPiUML\ntpeTkPH99m4VlnotkNpYuULH+qwSeFxGG5bi3SvhzIcXxhBoYdbDhJ8RR0dj\n0zNCNtRj8PBLJsIYq5bwZQxEh/NxgMNRJpT5nPQmpEJOr6KHx6sMKND1fdo1\nZ29I8QDESgBUwbVMOnVYTIUIKd1eoJ4GBfg2WIukpRs07stIfIY67jB8FVxm\nY/IpfOuQzUALDXB94I+DkvMTkBy1uKVszkMBMRP9Z21wYqUe0pW/Yw9++GIc\nwy27FWM92JvNhf5Rl7FZpu6CsP/zlMTAVsN12LTKRsu6xVfnvm5Geb7tLyBJ\nBU0bO3rU1RKitqgiMp5V/O9mWGzQf+Gf90C0JosEGNfScaa2OyoaY2/Lhv4s\nyZBROq/SRWu28Jd+r2Wfu+xW92lnt2WMl1ZW+7xwr+OejYaSf3abAOq5oF8S\nv2ckEmMKfzFFAnn6WYAo+uC9Z5eb5h3mnpsEM9eiJyEY/5pavJYNr8I3EGet\nsy5+Ao3IayxqSbCNFrbl76ZEO0AVbWN5Y4FA4WFvKLQw6K2SZ9ha4vtS2WFS\n2O+Bgx5HMvcZswloMuKwEs7SoVvpeBjY1UgJ00cJSRfu1iq/zcb0iIv0uvzb\ni3cfzyxMnwgXd1tBv8LwVuTgOkFiuI1or7cNhSQRJ9FRBRRp8ZVQ236259XB\nQPLbGLnVTCDp+lPFv7WAY4FdQD5N7KZ7lcvxSHZdKzuMF7A+DYaP9YGUQf7m\nhCt7iic/cT9WP2r3krCf9fV/kYg8r2A+iilMqSZkVYsKldGNhXnW1yZHNZ70\nvzwuYfAtUbyvqk6vAIXMf+brncfKdDSxDLtWXiVhRj4xO3f26eHOAwHZ4hwk\n33ZBo+gCCoKAndutQKtd7XxIhw1lFLDWcLqqhorWrcbqyxd+kKmz9nKGS1XW\nfgquIsm5kGX6UB71tfni7vlwue2pTHDtkXTzmKRLz38qhl228/2jQr3RaSFD\n8174LgzUBT4AEWntM+26K4buGQcnOpEON5SkhT36bOY5oNRzJ6hjdG96QxXB\n32MU4z8n2XclA0AXbuRNzf3SoTZvKtaFLT9e+snCGO0p0+5KJe8TurlV4etq\niME1/iPkvHDJn+3spGGvGdue4vDAcdLqr6sChVh4W/grgn4CwKJWBBHiAqTP\nOibBh38GhXKB7iTjY25EmTCMYaTamhXWS0UvxAi3VuunSpx/lOqkvwqOuo6W\nxcARhkHp832gqst3fBvhzocWf3MES8E7MhzhPtlK5sE3l+V1cvDrHO2Tm1wg\nTfy3Si4cJxo9v6hRlRLJdmPA1JklfPIdWk8FbyfpRUJqm4wbRTfdgnxVmvl6\niZ+yPcLX4OAhj0rofSYAZzg+Q2h14DGRbzkpJmq6j0gA6GPseWmXRZ0nYECo\n3/+azTw1hy7G9BJrnYnG7+5MID8yn/nRr9isXbxCi60AziLpZZqplouaz83A\nwM1Q0CDbcUt6H16PJD8oGakEUTwL4iGJHtoZ0fA0N/nIKJfCLK6+zhQ7cFyk\nxzMNUNcmsfRjbgEbjynt+RCfDryCxj4psOtLJfMZWnJ11IEHLFFDnE7NEcxs\noMJYyecc2dVGfi5ftSmLj+6qieoqaei9rnmODlOe7yN+lUar/QmD5hBD8vYr\nL+9dv9hc0+iGDN1xlIu7KfSiH5XpP9sSkIASvyTSr65vLZkrpQxkRS8SUve8\n97BCZdtqDGZG+oUcSWc0Kw0+uYJToMl2a/fSVjAVCJ4pQopAEo59iwEzYScM\n6wXZ0AN6i3QM2k97msyd9Tlh45R7+qnoTp7LgvPynvD+0Y+8E21BHPGGpMBF\nFmnEW629jPkl7Pr4Nollzn5S84h79OEp1un6bIu5j+1o1yvJt//DUpdX9T1G\ndzypMplY7FKt3tgp/i8A19jdNDc+hL28tSU6XLKbCw+DPzYQjS/btDRfd3xc\n7sHJvrkV2OIkthClr1ou0XyA0m/7CcWQFPseNUFSK5Syl/KxfVgfY1HXjCL6\n7W650FtVGxhfpnRwdFNc2a9cxMr2deS1ygsYnhBBxUJ8LDHpWwkfAZ5a+c8d\nC3InXPOehApwyBrmwpHfFzT5P+oOgNOD9v4rDNtOxcYm5d9sHY0A1MoVXq21\nkkeFxlI2AjVaJk64qTjhgluBfH5/JGwAy4WIFlnmoTf2oLgkjJVZk5GB8uLU\nNy07mM8cHYE=\n",
    "encrypted_exemplar_sources": "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\nN/zXAFVKbB+42sdk3ZHW\n",
    "start_sources": {
      "DisneyRunner.java": {
        "text": "public class DisneyRunner {\n  public static void main(String[] args) {\n\n    // Creates 1D arrays containing movie titles\n    String[] tinkerBellMovies = {\"Peter Pan\", \"Return to Neverland\", \"Tinker Bell\"};\n    String[] elsaMovies = {\"Frozen\", \"Frozen 2\"};\n    String[] simbaMovies = {\"The Lion King\", \"The Lion King II: Simba's Pride\"};\n\n    // Creates a Character object called tinkerBell\n    Character tinkerBell = new Character(\"Tinker Bell\", tinkerBellMovies);\n\n    // Creates a Character object called elsa\n    Character elsa = new Character(\"Elsa\", elsaMovies);\n\n    // Creates a 1D array of Character objects\n    Character[] characters = {tinkerBell, elsa};\n\n    // Creates a Disney object\n    Disney catalog = new Disney(characters);\n\n    // Creates additional Character objects\n    Character newTinkerBell = new Character(\"Tinker Bell\", tinkerBellMovies);\n    Character simba = new Character(\"Simba\", simbaMovies);\n\n    // Calls the getCharacterFilms() method and prints the results\n    System.out.println(catalog.getCharacterFilms(newTinkerBell) + \"\\n\");\n    System.out.println(catalog.getCharacterFilms(simba));\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Disney.java": {
        "text": "/*\n * Represents a catalog of Disney characters\n */\npublic class Disney {\n\n  private Character[] characters;    // The 1D array of Character objects\n\n  /*\n   * Initializes characters to the specified 1D array of characters\n   */\n  public Disney(Character[] characters) {\n    this.characters = characters;\n  }\n\n  /*\n   *\n   */\n  public Character[] getCharacters() {\n    return characters;\n  }\n\n  /*\n   * Returns the information for the Character from\n   * characters that has the same name as other\n   */\n  public String getCharacterFilms(Character other) {\n    String result = \"No character found\";\n\n    for (Character item : characters) {\n      if (item.equals(other)) {\n        result = \"Character found!\\n\" + item;\n      }\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Character.java": {
        "text": "/*\n * Represents a character\n */\npublic class Character {\n\n  private String name;        // The name of a character\n  private String[] movies;    // The 1D array of movies that a character appeared in\n\n  /*\n   * Sets name to the specified name and initializes\n   * movies to the specified 1D array of movies\n   */\n  public Character(String name, String[] movies) {\n    this.name = name;\n    this.movies = movies;\n  }\n\n  /*\n   * Returns the name of the character\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the 1D array of movies the character appeared in\n   */\n  public String[] getMovies() {\n    return movies;\n  }\n\n  /*\n   * Returns true if the other Character has the same name as this Character\n   */\n  public boolean equals(Object other) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return true if other points to the same object as this object, and\n     * return false if other is not a Character. If neither of these conditions\n     * are true, cast other as a Character and return true if this object's name\n     * is the same as the other object's name. Otherwise, return false.\n     * -----------------------------------------------------------------------------\n     */\n    \n\n    return false;\n  }\n\n  /*\n   * Returns a String containing the name of the character\n   * and the movies the character appeared in\n   */\n  public String toString() {\n    String result = name + \"\\n----------\\n\";\n\n    for (String title : movies) {\n      result += title + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "video_key": "csa_the_equals_method",
    "name_suffix": "_alt-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T22:18:08.143+00:00\",\"changed\":[\"cloned from \\\"CSA U4L6-L7a_pilot-2025\\\"\"],\"cloned_from\":\"CSA U4L6-L7a_pilot-2025\"}]"
}]]></config>
</Javalab>
