<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:52:52.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "SurveyRunner.java": {
        "text": "public class SurveyRunner {\n  public static void main(String[] args) {\n\n    MusicSurvey responses = new MusicSurvey(\"hours.txt\", \"genre.txt\", \"effect.txt\");\n\n    System.out.println(\"Number of Rock Responses: \" + responses.countGenre(\"Rock\"));\n\n    System.out.println(\"\\nRespondent whose mental health was improved:\\n\" + responses.getEffectResponse(true));\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "MusicSurvey.java": {
        "text": "/*\n * Manages data about responses to Music & Mental Health Survey\n */\npublic class MusicSurvey {\n\n  private Respondent[] answers;     // The 1D array of Respondent objects\n\n  /*\n   * Reads the data from hoursFile, genreFile, and\n   * effectFile to initialize the 1D array answers\n   */\n  public MusicSurvey(String hoursFile, String genreFile, String effectFile) {\n    answers = createRespondents(hoursFile, genreFile, effectFile);\n  }\n\n  /*\n   * Returns a 1D array of Respondent objects using the\n   * data from hoursFile, genreFile, and effectFile\n   */\n  public Respondent[] createRespondents(String hoursFile, String genreFile, String effectFile) {\n    double[] hoursData = FileReader.toDoubleArray(hoursFile);\n    String[] genreData = FileReader.toStringArray(genreFile);\n    String[] effectData = FileReader.toStringArray(effectFile);\n    Respondent[] tempAnswers = new Respondent[hoursData.length];\n\n    for (int index = 0; index < tempAnswers.length; index++) {\n      boolean effectResponse = convertToBoolean(effectData[index]);\n      tempAnswers[index] = new Respondent(hoursData[index], genreData[index], effectResponse);\n    }\n\n    return tempAnswers;\n  }\n\n  /*\n   * Converts response to a true or false value\n   */\n  public boolean convertToBoolean(String response) {\n    boolean result = false;\n\n    if (response.equals(\"Improve\")) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /*\n   * Returns the Respondent at the specified position from the 1D array answers\n   */\n  public Respondent getAnswer(int position) {\n    return answers[position];\n  }\n\n  /*\n   * Returns the Respondent that answered targetEffect\n   */\n  public Respondent getEffectResponse(boolean targetEffect) {\n    Respondent result = null;\n    \n    for (Respondent response : answers) {\n      if (response.getEffect() == targetEffect) {\n        result = response;\n      }\n    }\n\n    return result;\n  }\n\n  /*\n   * Counts the number of times a respondent selected targetGenre\n   */\n  public int countGenre(String targetGenre) {\n    int count = 0;\n\n    for (Respondent response : answers) {\n      if (response.getGenre() == targetGenre) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  /*\n   * Returns a String containing each respondent's information\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (Respondent response : answers) {\n      result += response + \"\\n----------\\n\";\n    }\n\n    return result;\n  }\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Respondent.java": {
        "text": "/*\n * Represents a survey respondent\n */\npublic class Respondent {\n\n  private double hours;         // The number of hours per day a respondent listens to music\n  private String genre;         // The favorite genre of a respondent\n  private boolean effect;       // Whether or not music improves or worsens a respondent's mental health\n\n  /*\n   * Sets hours, genre, and effect to the specified values\n   */\n  public Respondent(double hours, String genre, boolean effect) {\n    this.hours = hours;\n    this.genre = genre;\n    this.effect = effect;\n  }\n\n  /*\n   * Returns the number of hours per day the respondent listens to music\n   */\n  public double getHours() {\n    return hours;\n  }\n\n  /*\n   * Returns the favorite genre of the respondent\n   */\n  public String getGenre() {\n    return genre;\n  }\n\n  /*\n   * Returns whether or not music improves or worsens the respondent's mental health\n   */\n  public boolean getEffect() {\n    return effect;\n  }\n\n  /*\n   * Returns a String containing the respondent's answers\n   */\n  public String toString() {\n    return \"Hours Per Day: \" + hours + \"\\nFavorite Genre: \" + genre + \"\\nImproves Mental Health: \" + effect;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "hours.txt": {
        "text": "3\n1.5\n4\n2.5\n4\n5\n3\n1\n6\n1\n3\n8\n3\n2\n4\n2\n8\n12\n24\n3\n8\n4\n5\n2\n3",
        "isVisible": true,
        "tabOrder": 3
      },
      "genre.txt": {
        "text": "Latin\nRock\nVideo game music\nJazz\nR&B\nJazz\nVideo game music\nK pop\nRock\nR&B\nCountry\nEDM\nHip hop\nCountry\nJazz\nPop\nHip hop\nHip hop\nRap\nHip hop\nHip hop\nRap\nR&B\nPop\nRock",
        "isVisible": true,
        "tabOrder": 4
      },
      "effect.txt": {
        "text": "No effect\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nWorsen\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove",
        "isVisible": true,
        "tabOrder": 5
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  public static boolean[] toBooleanArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    boolean[] data = new boolean[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Boolean.parseBoolean(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 6
      }
    },
    "name_suffix": "_2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:52:52.028+00:00\",\"changed\":[\"cloned from \\\"CSA U3L8-Comparing Strings PBT_2023\\\"\"],\"cloned_from\":\"CSA U3L8-Comparing Strings PBT_2023\"}]"
}]]></config>
</Javalab>
