<Javalab>
  <config><![CDATA[{
  "published": true,
  "game_id": 68,
  "created_at": "2023-01-12T15:34:26.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FoodSecurity</code> class declares an instance variable for a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> values to store country names and an instance variable for a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> values to store the overall <a href=\"https://www.kaggle.com/datasets/rahuljangam/global-food-security-index?select=Global+Food+Security+Index+2022.csv\" target=\"_blank\">**food security index**</a> for each country.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FoodSecurity.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getCountriesInfo()</code> method to return a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> containing each country's name and its overall food security index. Each country's information should be on separate lines.\r\n\r\nFor example:\r\n\r\n<pre style=\"background-color: #333333; color: white;\">\r\nFinland: 83.7\r\nIreland: 81.7\r\n</pre>\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FoodSecurityRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getCountriesInfo()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with traversing a 1D array with a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">while</code> loop.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nint index = 0\r\nwhile index < countries.length\r\n  result += countries[index] + \": \" + overallScores[index] + \"\\n\"\r\n  index += 1\r\nreturn result\r\n\t  </pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/while-loops"
    ],
    "display_name": "Food Security",
    "bubble_choice_description": "Write the `getCountriesInfo()` method to return a `String` containing the names of each country and their overall food security index values.",
    "thumbnail_url": "https://images.code.org/26c57a9075bf20d3e281bef0c1b9cbe3-food.png",
    "encrypted_validation": "6fQl766jBVUF9CbEnbcyOntpR77u76QZtW3c9IRP1SmLaHD3xuTmT9+O/pXR\nTgrfE0bPMLMkj864rzlJkGPohwHASMgVu1x8BFS5UWkMNMYtGRdaRzqofa3f\nRpTFIRIuu4y3u5b4ybcqB0ni55tFcsl3RmmPSQn+Jb2CD80TOHnO8oTuFDHR\nvRegKIu2qrx23LQqq00sB61xx+5WWwc0vPDspon74GT3jEauRDGTQ4vs5BgG\nSPyzlplkOCdq0G6Qe/DABDE1z+ZU1m7x9+yQdHw/ikzNZG7dpH/qgcYYL40p\nBmdrlpOm3lALlF0FLk0ojX86/MGqaqHkXY8Az0SigXBCtf0MxG3rEDfP5r5n\nMC0VklpU9vr+GigpN2+R8cTdq+31kuHgL7R8yHmOHva7EXmndBNNz/7Q6F/N\nSb9uB0vfdMS0/hvyEjQ42YoKcbGQEpUN3ZTgZv0cyubMBmlCz0WHYUcVw2GH\nbugpkpu5R+/dS4wsXdeKUIbEVeXdsjaSlOd9ys30X11yKLhLPAa6WbCiK9NP\njCGEIfsAN/Bo353XhpzzlQDnBqqDLgFGiZsMoXiJYZUNz9GqfxnYNzJM+Q3k\n0sBIddPG/yhAjDMIuuOKyiwfS7ASsSobuUGeXYR4/V8fLBhrERgpL86qGSRt\nmCFXqQ3ob9KmrUitIDewzMyQZYn9ovTB0mdEJOT1XbltJf7qEA2JLnHGKXu4\nZeQoHwYXk82h/EbSITwtkUyZXs+7a85LqfXywEDvQ1Nb78P/NKINwzTMsHbp\neAVFUOmE17mCPdmURnEtj09ueiUKluv0MWVPJeclokX+AOMNhZsMZhlfCOvg\n0zRQqie5sT8MTboZagXAzF9+OJJbHCkuKw0srXkQjr37vNgUG2b6F1lARozJ\nnhPsYgNbLpWqulHthgqR86EP91xCTpIHBbiyDt0a0xki1oVC0qvQmmcZl9sP\nKKiQ+t+pstuwN34VBsooBgG2y67M79bYSVzSULE4bkEzgocjpFcOmRHkGFsf\nBkEEhqQy5X0tXMDku5FxSRr+GFb6o1+Y/rAnbu/o+SxTFkp/SG3Y+zSR4txl\nn9PhexPKtGlLWc+D4NUNc/qBwgMSH89fJN2R0VDDlqedQfTcjlI3IDD5a9S9\nnzxCIdp5GlVOkx0QmgS1Ba52VHcpwdkJuVa11POf2xutqCypc/Vw/62d1zgz\nF6jbzHOjegLyUfdFw3iiwsG5AYUudys6mBiFKmNym/IofFlrYfmGgvFnrNbp\nBvCzr21DgKz0yjcVQzL/kCRQaU7GIiz7z0Fw00L0G9ut8RlZG2dXmOWFDOtt\nAbGCtOw68ipNx4w/ar1UDdX+x2rBhn6Yq13neTxXrObqgm3SMcpA1HnaEX2/\nUCTfc0MQ3feQ+GwGZirGRuUTJTAxvA9ydJ0NdSONfJsycWY6+RvRNYgoKzhM\nJufzeaJgnxKMIOjpA4nAg19lnRxSjwBRN5Tc8jLtAjZbi3/5IbEC4FkSrMk6\nVddluLsgl9PJkR3nGJ1rTS8rRYzR6H0Zmq2psi+GVbeRa5vkHwazIh0+IHHb\nhA5hFdBU4eWL/1FbsHuMTlywYNVf2TF2v2+0xRFACFVboEmpsR2cEqoGnD0M\ntRG9klWpLsHwUxwz+9pK4Lv6y/Dxf5rNm97bHnX2zmdKTMP6xRFPWClLExBK\nlFdZj5ljkH7KAg0HStHXTtQMYe7Ju6lgevWBXn3z9kdjrffNoY1OKTm/qACc\nnBUkHJ2ec2ig3vswezlXigiAw1gXRQigfTPBkCsICsyYUZ4C2yU81pof47o+\nhBluKZ29k6skkzroSHDnheQ9NiFqG02q7Nr4D51+FGzVdidXVi5eD9EhAbtc\nbQkBJ8RpcBhBBJtgfYfCPlSn1LOLnUlZMrajnQAdFngBdFl0kqSgbThir+gQ\n9efg+Opko80YIr0QCwJVDyPDRFY0NJXU2lonZYYBxGkqClftZzpBlr8/UsUd\nuuRBCJWCTH3vRLpryvVCJJ2APx7VSdLSskpJ0e37gB2ZXSQRrHtyv3RRah1z\nIk/JcFhdo2FlgRc1wTynPLioYb1IS131rc054v1BBK0+pL4XWenFsPg8kE1g\nj1kR+3GHWQze7TA4TOscHYD8YsaUnVVCZirCA7f8gD68Jp4YlOkqpvt/6U5L\nZUvc/Wrsn5Ng4S3KWOC+RUhGDxYukCCj2zyv68zOZK8dG7cN5iVbsg5obxBJ\nov0a+MafXKWvHRhLB578p/DJ6lvaiRO62r70r6IsqPQmeD9/CA/ccp5/cueN\nLPAagAGrIrDyAc25wlDmhCEM1rk9uJp3ekyelcbCCZugkfvJZsbiSp55ukZb\njK226zNhw1Lzn1JEmdOchEnyehXVubKy9xhJo03z+kGXmUEsU1v1T4aQ7ZQF\nZsJgVzlMDWXwCzESttLryR6KNRR6+uwcPdz9u3K7An+lLYpMkjXgQL/d0fsx\nICxVdpSN4eb7QG4TbpBowtiJf8BqJrcMVrhNSPPU3SFN4NhG5GCWL9XUt1AF\nmSjrDPJtQjVfIoKIEKseqWLpP35jphzG+e10EcZfYskUBUF9CS7nkrdIbONc\nw+SS886/PbpKX081n6TKJeq94KZqCGane1nB9FwN5CDLdlKxl03g7utgkacp\n6CIxILHqrqeWuxJZSfay9zlsLHTi/5449zEF6oG8mQVBlWp+OP41DTNMdV6/\n4QQwmeu9Sga4txTUFPp4Oe/dFozjSTOTK4mf5oiU3U1ESzVYutoGHOeud55w\ntbPCOZdl0buwDA==\n",
    "start_sources": {
      "FoodSecurityRunner.java": {
        "text": "public class FoodSecurityRunner {\n  public static void main(String[] args) {\n\n    String[] countries = {\"Finland\", \"Ireland\", \"Norway\", \"France\", \"Netherlands\", \"Japan\", \"Sweden\",\n                          \"Canada\", \"United Kingdom\", \"Portugal\", \"Switzerland\", \"Austria\", \"United States\"};\n    \n    double[] food = {83.7, 81.7, 80.5, 80.2, 80.1, 79.5, 79.1, 79.1, 78.8, 78.7, 78.2, 78.1, 78.0};\n\n    FoodSecurity countryData = new FoodSecurity(countries, food);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the getCountriesInfo() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "FoodSecurity.java": {
        "text": "/*\n * Manages data about food security in different countries\n */\npublic class FoodSecurity {\n\n  private String[] countries;        // The 1D array of country names\n  private double[] overallScores;    // The 1D array of overall food security index scores for each country\n\n  /*\n   * Initializes countries to the specified 1D array of country names and overallScores\n   * to the specified 1D array of overall food security index scores\n   */\n  public FoodSecurity(String[] countries, double[] overallScores) {\n    this.countries = countries;\n    this.overallScores = overallScores;\n  }\n\n  /*\n   * Returns a String containing each country's name and its food security index\n   */\n  public String getCountriesInfo() {\n    String result = \"\";\n\n    /* ----------------------------------------- TO DO -----------------------------------------\n     * ‚úÖ Traverse the 1D arrays countries and overallScores and concatenate each value to result.\n     * -----------------------------------------------------------------------------------------\n     */\n\n    \n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "encrypted_exemplar_sources": "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\nnNKtJ5FIOiGH80laxHwGCIAxyQ==\n",
    "encrypted_examples": [

    ]
  },
  "audit_log": "[{\"changed_at\":\"2023-01-12T15:34:26.146+00:00\",\"changed\":[\"cloned from \\\"CSA U3L3-L7b_2023\\\"\"],\"cloned_from\":\"CSA U3L3-L7b_2023\"},{\"changed_at\":\"2023-01-12 15:34:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-18 18:59:47 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-18 21:31:33 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-18 22:28:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-18 22:30:59 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-18 22:31:00 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-18 22:31:06 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-18 22:31:17 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-22 17:46:11 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 19:49:26 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-07-12 14:11:21 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
