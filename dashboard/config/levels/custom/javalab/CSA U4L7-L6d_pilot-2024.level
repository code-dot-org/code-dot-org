<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T16:56:07.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SATScene</code> class creates a visualization of the number of SAT scores in the following ranges:\r\n\r\n* Top Scores\r\n* Competitive Scores\r\n* Above Average Scores\r\n* Below Average Scores\r\n\r\nThe <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SATScene</code> class has instance variables for each range. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">analyzeData()</code> method counts the number of scores in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">satScores</code> array that fall within each range.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SATScene.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">analyzeData()</code> method to count the number of scores in <code style=\"background-color: #ececec; color: black; font-weight: bold;\">satScores</code> that fall within each range.\r\n\r\n1. If the value is less than or equal to 1600 and greater than or equal to 1340, add <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">topScores</code>.\r\n\r\n2. If the value is less than or equal to 1320 and greater than or equal to 1200, add <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">competitive</code>.\r\n\r\n3. If the value is less than or equal to 1180 and greater than or equal to 1030, add <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">aboveAverage</code>.\r\n\r\n4. If the value is less than or equal to 1010 and greater than or equal to 400, add <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">belowAverage</code>.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">analyzeData()</code> method then call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawResults()</code> method to display the results in the scene.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing nested <code style=\"background-color: #ececec; color: black; font-weight: bold;\">if</code> statements.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "SAT Scores",
    "bubble_choice_description": "Use nested `if` statements to analyze SAT score ranges and create a visualization to show the number of scores in each range.",
    "thumbnail_url": "https://images.code.org/7eaf1d6ef94d7df539d42b73f0d3727f-data.png",
    "encrypted_validation": "GToXH3OXS5NnDkIVvwvDhopCJ5fhM5Oe/JNTJJX1grmzmJZuOcpX8Rj7+vFa\nPWZibY0tkgH8R0kNZi5yq+4zE2ptP8W7hnIXaAMG+4dWRbYZk+zTk/CHRH3o\nXX7krWMY8jyONLiV2HCsCv73Kx2lsA7WuhlIzKqi2/vJueNWEG8p8D6JGiS9\nEPerZA2sIXGy9ySJf1zrutxGNYTucwpmtfaxS6pZHEt+3DHqNY6ywPamSxWU\nXro9cYuVVzAX2qYmEU+fPD44T34BegEoGtG2RI9xK/rvXW6AN2fjYiTSqHsq\nvltKYOacvIo20mL8H1ob3oY262xlQ3O5QgBJ189ANK5cpJVHDjmDBm0Q1rhh\nDo2Tg2t0nvA8RVxh3vymDra/0MrI63rWmmaG2QVhQsR6obbAQv7BBi7tyHup\nzIEUa2iAWDoSc2FpAvULZMFeYAASIehoRD4SNS3zFxfczeCRVZthMu6SxeMX\nBcQbn2z5W5N/Y353mU6yIOCZXPD4MwRW7iJlNPual9ahEFquMcTYjfYizDw6\n8vLXT70Wfha+knip+EwxtJs3q+myHpWdt2M+naccWMEp+Tcu//Uc66vyus4I\noCVhOcQ6CiC10f4bXLmLyvMFNcOorGjZ/X3fO8Gj6eV2Gsa6r6HIEY9zgwHt\nDWSHDP+imsNqAHKcMidgomZiKezox1vv5WOuUo3p4zqaI5cJBgLen5Yl23Sb\nzdX8Lh54moOcY/kJ0/Nmob1ISzmYli3ea4jMR0D2GS3PuHPaW1Kexj6TkCt7\nXeunfNrPaPJ6cLYlfAzGZfzXrB1TeIslHdhy+IS9kh7hXZZaUsij4/ipS/dF\n97LYoiAE6r1ArmVdWuJL8FyDR3o7cmkZr/yI3IVRlmY8aF+70wbGFB+1evlh\nI0f9VdzvTV30CapPxMaXTbgcJHzDRfHBoxk8cX8mx/QwyQAtTHHsUGOf7vEu\nE3uGTu53RVTWmyefnqtAvn3L/Hw3fTa6SuNLCPsqBmirherAFYrpTsjhX5J2\nmgmhj9BEeBqLiDVU+QNa3PevEaoE8uAIbVpFWyC8cbsw+dn69QztqDShU+7e\nPoPni1m/v6bXd4N/gEv/Mui1BB8uQn88hVBEUDd/MdD1nAv7GaJm6NA6eGFT\n9Mn2VqXZZd3Ph1wnjggQVQ4Cd/M+qjsbpPSiKVOKlh/Fcso9KrZR1Dn5yV8H\n6yVTLB7jw1ww2POjhJavpJ7XA46hW95Icc2CReto4nLujxSRQaZWGiOu+h81\naLUZeQnaUpixBEEivDdEaulF9DK5/hIJQ8KrK1cp5J4DpMOD29WUL/4znOut\nMQFW262SsBiuo31/kuD8/FJlpUMn5q7CmdRlU/BQ7vQJr6seIWQUVJIbnF/i\nHCHYjLD6m+o0yyFnOFSWf2Pj41GVOQLhPBEmuGRStqlOYXWexhGrZNVUfP9x\nACACNsEfjF9YtJmSEZhWWocwSblmyRzSePMXcom0PpvgPM0dkvpCpL0PgGkV\nECsqskXIkTWeCNzSD9SRZHKLT9BjfM7fSv4UWg5gXmPbgIuTxPW1pkzcAhIe\ncc2ckoWn5mBrOKsBxs+yNnI/SR6+hOMTQo2ym9FcoXCfch6x/kxpBbDnyRUS\neGpdD4BUDFh6gyl0gHU98YAScUG9MszIqjMs1MGfVE13ArI/wKj21OSi/KtA\nMtZ9P6muiknkCefXeMLeoBoHbOBWIWDqgGnhjdRDWUhZBjJIjM6xnm781HGb\nrC0tqcrhc3FHiPzyjJhvEXjPjzwIDsBxYD3oJfo2QeNRT+YL+L0M8Qb7Q3dt\n4iyjk48LQofXcU1LrueDNybFbu+tmo0AhImruyZyX9pqRhkMB4b0/SgEcVIT\nKJbgaKRkGbpRs5W5w5sA5753hKnbgMY3uRgEp+mJaXU2UI1QZG1aXo1dtu0V\n6+sdbqH6Ke2/dyMuN26qKEMBpUOVNvbko24C8UKLr3YtcFdb+KdqL8Pg3Eqv\nPJl7tgqrt9mVXatu4b8EH1xCVqwpbtr2yHmwMCBOJEtCUogSo6c68DpC+0zy\nXhix0XK6YwI53Xj+jzhdRP3eV7Lne9eKWL1/m9OIy9tONAyV3MgybBRYXINy\nf/3TRexAV2qRtETcFJm6xZ1dXQelAVIvaXQDYNMyOeWNSCm5NQGWdLB3IQ1W\nByxt/Wlfr8ETXHBfiiACL8rh3vLjUtwl+Ry1r4FKZ3cf8JhYheBGUUVf/7Jo\n4HCg+k4JNkEqYwGzVHyEMniysoDff7Pe4gbtTA9zLuv00I7xnuwbq2msaQuK\nnjx5vEpCR6d9FKAF2WAoDzOB5lJyVT1kaKJvDKs/UzbKEcQWo2IYWLG+nMON\nmnVNvQUp2pHXwFrGlAHazWy8OeXfEHQ2tLqWJQ3xabuMAYcJOINNzUYovd1T\nbrgDR7O3VjHkVYGJJ1QqKDJ7QPkJSidth6BZQgCpt4CS2XTo0Aqc9IVKX+Z+\n+vmYGn8wd/uRfbOrAlHC8ZXvNjta4AlfvQGKFLzH8Aq/cvAxWWxva7p6Lgzy\nxsonmt61MRllnuukFGDuslrwgSupnOaGeQ0rfo5lqDBNecjx6RKyuLuZ7A2f\nAkEOyF+SqHO+4UiqJsDrw70/heM5zSpcb6oRDcGO5Tl004XSNhyzXdJqLEhb\nSVEQLib9h47kMJS90J6lw3N9Dy/eioIApzn/tfkggAb33zp0eaeaNlR5URzl\n/I67daj9cyluCJgjjAQhs5JIpM5FUOB6C5RQee1EKOcMXC0OARmPBHjv2G4x\n9at3dTbLi5l42XR1ZDZJs8je03yROL6URB159qol7F5H97UsYsgEIutTkru+\nIX5twNNhw4LJzWPFiOE3SzEW1WAKxx/Ia1dveTTbnbdxVrSZSOF1pQpxA552\nYEgGmLBh307j1ZsLuVuqoQIQLwAPixxvYuohbxz1GvIcs9QizKWq+83srK4W\nBea4cwBZ9lebkrdmLELeB4RqOQ5EFdrsyPdpwA82Pea1KXSwXZSXBMaLLWxj\nRtJJZ0+cb2zmDbHHWuUD9WEKnu1ReiQhAQtD9xdrFc+cs5s2udYr/nnZs1ZB\nlpBarYpqu0YeM/QbpuKhuIjr/CMxItRppupDyVJn26RUu9XCMgnp+7vLusqd\nIKrItPob5fOIBSUpSzKUEL4JLTNPZi0Arj7d8O4YMnReEP3nnIz/kh8+zWxz\n8MNikLW9SZw5FLcfq07Z5+uA5c5Y2/zo4TvxewhkeQFI7elgcvhivLVNrW4y\nMHVMsKLK9MIKxi2267FvA+cSqvNf5+B1IGJgUNaeYQ50qgFs08VY+QMSJ8Hr\nGRzu3XVuxQxQrLdJ9BEERex7BOauWrW4En7em/cpukUOET4pU6KntntD7O7l\nTWWWqZFWIZfdOW62J7Yi50Pqxvd2Q7jYuA3LLGElmbD+orrjTY3yATiC6ti4\nWDPFGJzcMbI+2fsIyV8QfG4AeGsZQeuJu6TjWMC8XxX9sZSjp+lEm9kvhYWB\nC1Xk17rwptwE/8D/VBnM30wUUkNKEcXone9sm16hqk+zO3gFKef/ud5w7NV2\nIkciSy73PEQ57NCzwklutJRfljpk/NiT4eHUi6LdgpJJJC/LQN4XckhzZdzN\nDDLqP/GxL5jN3gHHHZJyfQ7DkQWt9m7GkqTWJ/ieDn5Gvrc5stu8rFGaznJr\nrpbsUOiblfMkmGA5Mqwpq9YVj2kRZiiaedwbN+8HF7j2nyQydwxzAyIeo6Og\nr5oMthoD2zdArMyycH9PRf3gZWFcX2iQu2KkLdjl7m/F/W2VQJG8LyUQ5XB6\nmBdhN9EXOs89qvSPxjC7pCidq6jKsY/cYXCJnkZRbQo9hI3vKIJ/Y77JreOP\nLf6gqO8FuO92yL4rSPVTb53votK26GH2Un5gtz/BVrb4+qY0IFbECeWTLkOu\nncf8y6u2vwch0pNS+RXd/jQND32vtjvdQmoP+i7tlLv92an5UfxEgiwI/eKX\nY9ks3cCWg2xa1neEfX7oOxKn9s+VQQbDy0/aJ8P8lLyMkdrYMRasgxpxIFk+\n57ygvpiwuOB5N9flJt+NBHk7zW3pnD1nY+taODZ1bc/ITrbauKce37Pk85Ri\nFBfTO3qHviAUDemGE35O+mcd/qAJN+uhtu/ZDuNMqLDAkar0ubCH+cJ5Z8Pq\nQSDfamSV2vvJIDM5lKLQlqYzs0/6DmjS2KJDQV23kfqeJrV/IF7zi/c88EHd\nYJExc/2Rx4pmfVLBTYuKOMjZbZ8DoHifrYKcilIykA0icHS8aPVM7zGk5Rpk\nGhoX/RBo/4o1u+39FvDQdjHB4mp99SkhhgpA1mfAwUWl1VJBgruJzSMlU8g1\n+tzNrGP3patP4U3Gy8vfMraORzY6pmFhTcKey4K8OibnGcXmEoUHM6Gienum\n1QJBkukbSuIXpl+zBytTWw2Kk0CBDmazUywmCCdWLLrSfYW7I18GQbwuy0/u\n58JXTTeYE9SGUbMFmD2lb1P6Te7Gb9dIGyqt9cB8Hrn86TiXWKu8YDg4vcLR\nn7+tJbJMv16XwQe7WyshV31AJ2fkSushDLEQH3rqM44PW+j7oEzs8aaVwwOR\n+/Lbz9v1e8ZStY3Ip2W3VmhlCyZKuAOLhEjCqODbo8msHqSjqUphdBNbJ2o6\nPUJabqLxfc5noGOJuombzjcMlakbzXVYXyp77kMjASDGMbkmuNtsVACI44o8\nFmIRJCgJo9evTs3sUHc9ieM0Mc1AOJKysybS0MlPvs9xI97HR5RRnXFfK1Ch\n4OU9VsDXArLU5CYG5O87O6HkreOH09s0E2zOsOl6yVpWxi4QCCP1nLEKqFZu\n9Kp1UkDhkKkA9fMR9XjkztBBaKP+L4rOGcB1xSHyI2cfb+4GPwfBqsluaaiU\nPsNJe0cGUnAvq0lO6YDAVKRGM8mwjspLcFs50z+w2tRakcFDDcBpILdP6L+o\nuEHIj5DbS0GWlExuPy/rQwmfq8fSlh2511u9/xlzp5dxGXZ9LhZj5OsfPArx\n6o0jCPZxwYtXBO5sTJXpsy5auyiKYVk/+w==\n",
    "encrypted_exemplar_sources": "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\neDiGxL7j4Q==\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array containing the SAT scores\n    int[] scores = FileReader.toIntArray(\"satscores.txt\");\n\n    // Creates a SATScene object\n    SATScene scene = new SATScene(scores);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the analyzeData() method then call the drawResults() method to\n     * display the results.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n\n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "SATScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Represents a scene that illustrates SAT score ranges\n */\npublic class SATScene extends Scene {\n\n  private int[] satScores;    // The 1D array of SAT scores\n  private int topScores;      // The number of SAT scores in the top range (1340-1600)\n  private int competitive;    // The number of SAT scores in the competitive range (1200-1320)\n  private int aboveAverage;   // The number of SAT scores in the above average range (1030-1180)\n  private int belowAverage;   // The number of SAT scores in the below average range (400-1010)\n\n  /*\n   * Initializes satScores with the specified 1D array\n   * of SAT scores and sets the counts for each range to 0\n   */\n  public SATScene(int[] satScores) {\n    this.satScores = satScores;\n    \n    topScores = 0;\n    competitive = 0;\n    aboveAverage = 0;\n    belowAverage = 0;\n  }\n\n  /*\n   * Returns the current value of topScores\n   */\n  public int getTopScores() {\n    return topScores;\n  }\n\n  /*\n   * Returns the current value of competitive\n   */\n  public int getCompetitive() {\n    return competitive;\n  }\n\n  /*\n   * Returns the current value of aboveAverage\n   */\n  public int getAboveAverage() {\n    return aboveAverage;\n  }\n\n  /*\n   * Returns the current value of belowAverage\n   */\n  public int getBelowAverage() {\n    return belowAverage;\n  }\n\n  /*\n   * Analyzes the values in the satScores array to count the\n   * number of scores in each range\n   */\n  public void analyzeData() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Traverse the satScores array and use nested if statements to count the\n     * number of scores in each range\n     * -----------------------------------------------------------------------------\n     */\n    \n    \n    \n  }\n\n  /*\n   * Draws the results in the scene\n   */\n  public void drawResults() {\n    setFillColor(\"green\");\n    drawEllipse(50, 50, topScores * 2, topScores * 2);\n\n    setFillColor(\"blue\");\n    drawEllipse(300, 100, competitive * 2, competitive * 2);\n\n    setFillColor(\"orange\");\n    drawEllipse(150, 100, aboveAverage * 2, aboveAverage * 2);\n\n    setFillColor(\"red\");\n    drawEllipse(150, 200, belowAverage * 2, belowAverage * 2);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "satscores.txt": {
        "text": "1600\n1593\n1587\n1580\n1573\n1567\n1560\n1553\n1547\n1540\n1533\n1527\n1520\n1513\n1507\n1500\n1493\n1487\n1480\n1473\n1467\n1460\n1453\n1447\n1440\n1433\n1427\n1420\n1413\n1407\n1400\n1393\n1387\n1380\n1373\n1367\n1360\n1353\n1347\n1340\n1333\n1327\n1320\n1313\n1307\n1300\n1293\n1287\n1280\n1273\n1267\n1260\n1253\n1247\n1240\n1233\n1227\n1220\n1213\n1207\n1200\n1193\n1187\n1180\n1173\n1167\n1160\n1153\n1147\n1140\n1133\n1127\n1120\n1113\n1107\n1100\n1093\n1087\n1080\n1073\n1067\n1060\n1053\n1047\n1040\n1033\n1027\n1020\n1013\n1007\n1000\n993\n987\n980\n973\n967\n960\n953\n947\n940\n933\n927\n920\n913\n907\n900\n893\n887\n880\n873\n867\n860\n853\n847\n840\n833\n827\n820\n813\n807\n800\n793\n787\n780\n773\n767\n760\n753\n747\n740\n733\n727\n720\n713\n707\n700\n693\n687\n680\n673\n667\n660\n653\n647\n640\n633\n627\n620\n613\n607\n600\n593\n587\n580\n573\n567\n560\n553\n547\n540\n533\n527\n520\n513\n507\n500\n493\n487\n480\n473\n467\n460\n453\n447\n440\n433\n427\n420\n413\n407\n400",
        "isVisible": true,
        "tabOrder": 3
      }
    },
    "name_suffix": "_pilot-2024"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T16:56:07.044+00:00\",\"changed\":[\"cloned from \\\"CSA U4L7-L6d_2025\\\"\"],\"cloned_from\":\"CSA U4L7-L6d_2025\"}]"
}]]></config>
</Javalab>
