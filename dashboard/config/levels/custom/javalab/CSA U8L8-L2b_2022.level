<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-02-26T00:34:05.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "You have implemented standard algorithms that utilize array traversals to determine if multiple elements have a particular property. Let's use this algorithm to check if player has four of their discs in a horizontal row in the `gameBoard` array in this Connect Four game (the status of four discs in a horizontal row equals the value of the player).\r\n\r\nIn `ConnectFourLogic.java`, write the `horizontalRow()` method. This method returns `true` if there are four game discs in a horizontal row with a `status` that equals the value of the `player` parameter, otherwise returns `false`. The `GameDisc` class has a method `getStatus()` which returns the `status` value of a `GameDisc` object.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "playground",
    "encrypted_examples": "Y5oxU2saAYVgPIsEA2UtbgpirxPfyQgbuyBX978jkHY3jPzh5K4ZAIFMmCxg\nkN42/S+kN05nb32KpyZzBE/ZOqNdFvkf5lQ4nipQ5+UjKEOcziIhoD/VE+wK\nzYyxpGTb\n",
    "start_sources": {
      "MyPlayground.java": {
        "text": "import java.util.ArrayList;\n\npublic class MyPlayground {\n  public static void main(String[] args) {\n    \n    ConnectFour myGame = new ConnectFour(\"background.png\", \"title.png\");\n    myGame.play();\n    \n  }\n}",
        "isVisible": true
      },
      "ConnectFour.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class ConnectFour {\n\n  /**\n   * the board to display the game\n   */\n  private static Board myBoard = Playground.board;\n\n  /**\n   * the background image for the board\n   */\n  private String background;\n\n  /**\n   * the title banner of the game\n   */\n  private ImageItem title;\n\n  /**\n   * the 2D array of game discs that make up the game board\n   */\n  private static GameDisc[][] gameBoard;\n\n  /**\n   * the array of drop buttons\n   */\n  private DropButton[] dropButtons;\n\n  /**\n   * Creates a ConnectFour game\n   */\n  public ConnectFour(String background, String title) {\n    this.background = background;\n\n    try {\n      this.title = new ImageItem(title, 0, 0, 400, 60);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Invalid title image file: \" + title);\n    }\n\n    gameBoard = createGameBoard();\n    dropButtons = createDropButtons();\n  }\n\n  /**\n   * Starts the game\n   */\n  public void play() {\n    showGame();\n    printInstructions();\n    ConnectFourLogic.chooseStartPlayer();\n\n    try {\n      myBoard.start();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error starting the game.\");\n    }\n  }\n\n  /**\n   * Prints the game instructions\n   */\n  public void printInstructions() {\n    System.out.println(\"Connect four of your discs in a row before your opponent!\");\n    System.out.println(\"Click the orange drop buttons to drop your disc.\");\n  }\n\n  /**\n   * Displays the starting game components\n   * (background, title banner, and white dots)\n   */\n  public void showGame() {\n    // set the background image\n    try {\n      myBoard.setBackgroundImage(background);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Invalid background image file: \" + background);\n    }\n\n    // display the title banner image\n    myBoard.addImageItem(title);\n\n    // display the game discs\n    for (int row = 0; row < gameBoard.length; row++) {\n      for (int col = 0; col < gameBoard[0].length; col++) {\n        myBoard.addImageItem(gameBoard[row][col]);\n      }\n    }\n\n    // display the drop buttons\n    for (int index = 0; index < dropButtons.length; index++) {\n      myBoard.addClickableImage(dropButtons[index]);\n    }\n  }\n\n  /**\n   * Gets the game board\n   * @return the game board\n   */\n  public static Board getBoard() {\n    return myBoard;\n  }\n\n  /**\n   * Creates the 2D array of GameDisc objects\n   * that represent the game board\n   * @return a 2D array of GameDisc objects\n   */\n  public GameDisc[][] createGameBoard() {\n    GameDisc[][] board = new GameDisc[6][7];\n    int xPos = 10;\n    int yPos = 100;\n\n    for (int row = 0; row < board.length; row++) {\n      for (int col = 0; col < board[0].length; col++) {\n        try {\n          board[row][col] = new GameDisc(\"whitedot.png\", xPos, yPos, 40, 40);\n        } catch (FileNotFoundException e) {\n          System.out.println(\"Error loading white disc image.\");\n        }\n        \n        xPos += 55;\n      }\n\n      xPos = 10;\n      yPos += 50;\n    }\n\n    return board;\n  }\n\n  /**\n   * Gets the game discs array\n   * @return the 2D array containing the game discs\n   */\n  public static GameDisc[][] getGameDiscs() {\n    return gameBoard;\n  }\n\n  /**\n   * Creates the array of DropButton objects\n   * @return a 1D array of DropButton objects\n   */\n  public DropButton[] createDropButtons() {\n    DropButton[] buttons = new DropButton[7];\n    int xPos = 20;\n\n    for (int index = 0; index < buttons.length; index++) {\n      try {\n        buttons[index] = new DropButton(index + 1, \"dropbutton.png\", xPos, 70, 25, 25);\n      } catch (FileNotFoundException e) {\n        System.out.println(\"Error loading drop button image.\");\n      }\n\n      xPos += 55;\n    }\n\n    return buttons;\n  }\n  \n}",
        "isVisible": true
      },
      "ConnectFourLogic.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic final class ConnectFourLogic {\n\n  /**\n   * whether or not it is the player's turn\n   */\n  private static boolean isPlayerTurn = false;\n\n  /**\n   * the 2D array containing the game discs\n   */\n  private static GameDisc[][] gameBoard = ConnectFour.getGameDiscs();\n\n  /**\n   * the winning color of the player that gets four in a row\n   */\n  private static String winningColor = \"\";\n\n  /**\n   * Randomly chooses either Player 1 or Player 2 to start the game\n   * @return true if player 1 is chosen, otherwise false\n   */\n  public static void chooseStartPlayer() {\n    int randomValue = (int)(Math.random() * 10) + 1;\n\n    if (randomValue > 5) {\n      isPlayerTurn = true;\n    }\n\n    System.out.println(\"---------\");\n\n    if (isPlayerTurn) {\n      System.out.println(\"Player 1 starts. Choose a column to drop your disc.\");\n    }\n    else {\n      System.out.println(\"Player 2 starts. Choose a column to drop your disc.\");\n    }\n  }\n\n  /**\n   * Drops either a green or purple game disc\n   * based on the player's turn\n   */\n  public static void dropDisc(int column) {\n    int arrayColumn = column - 1;\n    int availableRow = findPosition(arrayColumn);\n\n    if (availableRow < 0) {\n      System.out.println(\"No available spots in this column. Choose a different one.\");\n    }\n    else if (isPlayerTurn) {\n      gameBoard[availableRow][arrayColumn].changeColor(1);\n      isPlayerTurn = false;\n    }\n    else {\n      gameBoard[availableRow][arrayColumn].changeColor(2);\n      isPlayerTurn = true;\n    }\n  }\n\n  /**\n   * Finds the first available position in the\n   * column of the 2D array\n   * @param column the column to search\n   * @return the row to insert the game disc\n   */\n  public static int findPosition(int column) {\n    for (int row = gameBoard.length - 1; row >= 0; row--) {\n      int currentStatus = gameBoard[row][column].getStatus();\n      if (currentStatus == 0) {\n        return row;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Checks whether there are four of the same\n   * colored game discs in a row horizontally,\n   * vertically, or diagonally\n   */\n  public static boolean isFourInARow(int player) {\n    boolean status = false;\n    \n    if (verticalRow(player)) {\n      status = true;\n      System.out.println(winningColor);\n    }\n    else if (horizontalRow(player)) {\n      status = true;\n      System.out.println(winningColor);\n    }\n    else if (diagonalRow(player)) {\n      status = true;\n      System.out.println(winningColor);\n    }\n\n    return status;\n  }\n\n  /**\n   * Checks if a player has four of the same\n   * colored game discs in a row horizontally\n   * @return true if a game disc color has four\n   *          in a row horizontally, otherwise false\n   */\n  public static boolean horizontalRow(int player) {\n    boolean isHorizontal = false;\n    \n    for (int row = 0; row < gameBoard.length; row++) {\n      for (int col = 0; col < gameBoard[0].length - 3; col++) {\n        if (gameBoard[row][col].getStatus() == player && gameBoard[row][col+1].getStatus() == player\n           && gameBoard[row][col+2].getStatus() == player && gameBoard[row][col+3].getStatus() == player) {\n          isHorizontal = true;\n        }\n      }\n    }\n\n    return isHorizontal;\n  }\n\n  /**\n   * Checks if a player has four of the same\n   * colored game discs in a row vertically\n   * @return true if a game disc color has four\n   *          in a row vertically, otherwise false\n   */\n  public static boolean verticalRow(int player) {\n    boolean isVertical = false;\n    \n    for (int row = 0; row < gameBoard.length - 3; row++) {\n      for (int col = 0; col < gameBoard[0].length; col++) {\n        if (gameBoard[row][col].getStatus() == player && gameBoard[row+1][col].getStatus() == player\n           && gameBoard[row+2][col].getStatus() == player && gameBoard[row+3][col].getStatus() == player) {\n          isVertical = true;\n        }\n      }\n    }\n\n    return isVertical;\n  }\n\n  /**\n   * Checks if a player has four of the same\n   * colored game discs in a row diagonally\n   * @return true if a game disc color has four\n   *          in a row diagonally, otherwise false\n   */\n  public static boolean diagonalRow(int player) {\n    boolean isDiagonal = false;\n\n    // check upward diagonal\n    for (int row = 3; row < gameBoard.length; row++) {\n      for (int col = 0; col < gameBoard[0].length - 3; col++) {\n        if (gameBoard[row][col].getStatus() == player && gameBoard[row-1][col+1].getStatus() == player\n           && gameBoard[row-2][col+2].getStatus() == player && gameBoard[row-3][col+3].getStatus() == player) {\n          isDiagonal = true;\n        }\n      }\n    }\n\n    // check downward diagonal\n    for (int row = 3; row < gameBoard.length - 3; row++) {\n      for (int col = 0; col < gameBoard[0].length - 3; col++) {\n        if (gameBoard[row][col].getStatus() == player && gameBoard[row+1][col+1].getStatus() == player\n           && gameBoard[row+2][col+2].getStatus() == player && gameBoard[row+3][col+3].getStatus() == player) {\n          isDiagonal = true;\n        }\n      }\n    }\n\n    return isDiagonal;\n  }\n\n  /**\n   * Checks whether there are moves left\n   */\n  public static boolean movesLeft() {\n    boolean isMovesLeft = false;\n\n    for (int row = 0; row < gameBoard.length; row++) {\n      for (int col = 0; col < gameBoard[0].length; col++) {\n        int currentStatus = gameBoard[row][col].getStatus();\n        if (currentStatus == 0) {\n          isMovesLeft = true;\n        }\n      }\n    }\n\n    return isMovesLeft;\n  }\n\n  /**\n   * Checks who the winner is and creates the appropriate message\n   */\n  public static String getWinner() {\n    if (isFourInARow(1)) {\n      return \"Player 1 won the game!\";\n    }\n    else if (isFourInARow(2)) {\n      return \"Player 2 won the game!\";\n    }\n    else {\n      return \"It's a tie.\";\n    }\n  }\n\n  /**\n   * Ends the game and determines which player won\n   */\n  public static void gameOver() {\n    if (!movesLeft() || isFourInARow(1) || isFourInARow(2)) {\n      String winningMessage = getWinner();\n      System.out.println(winningMessage);\n\n      try {\n        ConnectFour.getBoard().end();\n      } catch (PlaygroundException e) {\n        System.out.println(\"Error ending the game.\");\n      }\n    }\n    else if(isPlayerTurn) {\n      System.out.println(\"---------\\nPlayer 1's turn.\\n---------\");\n    }\n    else {\n      System.out.println(\"---------\\nPlayer 2's turn.\\n---------\");\n    }\n  }\n  \n}",
        "isVisible": true
      },
      "GameDisc.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class GameDisc extends ImageItem {\n\n  /**\n   * the status of the game disc\n   * 0 for white, 1 for green, 2 for purple\n   */\n  private int status;\n\n  /**\n   * Creates a GameDisc\n   */\n  public GameDisc(String filename, int x, int y, int width, int height) throws FileNotFoundException {\n    super(filename, x, y, width, height);\n    status = 0;\n  }\n\n  /**\n   * Changes the color of the game disc\n   * according to the player\n   */\n  public void changeColor(int player) {\n    if (player == 1) {\n      try {\n        setFilename(\"greendot.png\");\n        this.status = 1;\n      } catch (FileNotFoundException e) {\n        System.out.println(\"Error loading green disc image.\");\n      }\n    }\n    else {\n      try {\n        setFilename(\"purpledot.png\");\n        this.status = 2;\n      } catch (FileNotFoundException e) {\n        System.out.println(\"Error loading purple disc image.\");\n      }\n    }\n  }\n\n  /**\n   * Gets the status of the game disc\n   * @return the status of the game disc\n   */\n  public int getStatus() {\n    return status;\n  }\n  \n}",
        "isVisible": true
      },
      "DropButton.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class DropButton extends ClickableImage {\n\n  /**\n   * the column the button is for\n   */\n  private int column;\n\n  /**\n   * Creates a DropButton\n   */\n  public DropButton(int column, String filename, int x, int y, int width, int height) throws FileNotFoundException {\n    super(filename, x, y, width, height);\n    this.column = column;\n  }\n\n  /**\n   * Drops either a green or purple game disc based on the\n   * player's turn and checks if a player has four in a row\n   */\n  public void onClick() {\n    ConnectFourLogic.dropDisc(column);\n    ConnectFourLogic.gameOver();\n  }\n}",
        "isVisible": true
      }
    },
    "display_name": "Connect Four",
    "bubble_choice_description": "Check if there are matching elements in a row in this Connect Four game.",
    "thumbnail_url": "https://images.code.org/2da61da319031a760c8564ab99e75dbb-image-1641581648510.gif",
    "name_suffix": "_2022"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-02-26T00:34:05.766+00:00\",\"changed\":[\"cloned from \\\"CSA U8L8-L2b\\\"\"],\"cloned_from\":\"CSA U8L8-L2b\"}]"
}]]></config>
</Javalab>
