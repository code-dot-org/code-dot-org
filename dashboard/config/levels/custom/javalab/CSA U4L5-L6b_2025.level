<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:55:00.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Encrypt a word by randomly choosing letters to replace each letter in a 1D <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> array.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Encryption.java</code>, write the static method <code style=\"background-color: #ececec; color: black; font-weight: bold;\">encryptWord()</code> to replace each letter with a randomly chosen letter. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">encryptWord()</code> method should:\r\n\r\n1. Have a parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">letters</code> that contains the letters that make up the word to encrypt.\r\n\r\n2. Traverse the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">letters</code> array and replace each letter with a randomly chosen letter from the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">availableLetters</code> array.\r\n\r\n3. Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">lettersToWord()</code> method to return the encrypted word as a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code>.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">EncryptionRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">encryptWord()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math.random()</code> method.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nloop from 0 to letters.length\r\n  randomLetterIndex = random index from 0 to availableLetters.length\r\n  randomLetter = availableLetters[randomLetterIndex]\r\n  letters[index] = randomLetter\r\n&nbsp;\r\nString result = lettersToWord(letters)\r\nreturn result\r\n</pre>\r\n    </div>\r\n</details>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Random Encryption",
    "bubble_choice_description": "Encrypt a word by randomly choosing letters to replace each letter in a 1D `String` array.",
    "thumbnail_url": "https://images.code.org/922e0b15fa0831d615465c27245d8a6f-encryption.png",
    "encrypted_validation": "frh1fFrLuhoXUCgNN9suaODwkJYuz/3Bsc17jPGU6Jal5mNl+zbPAExe52Wu\nJjN/XTiAO5baLns+vRKuIPWLNGfiJMKsgAHrJDb6rfBng3jiyOfSR6BQrx1s\n94IeW/1AuuZv4Nqrwc+wzOPMLpuc17KrHKjYCwxo3hEwBzE0tK0+G316oFeE\nQGZp4eaFqaykWtV/pi/qlbPtcRajYGmwOjf2RGum4kJwJ85TMy9UYhPmeJF0\nkpTEkCJKwRrhzgcRckqht9DnYZtz+H+y50H0j847ZnGlxG1x5w6PIZ4XqmIF\ndsfdXFLKs95uNr9zn21GWQujNuGFJIVjffCQId98k/US/MdZqhDOVhm7IoRX\nLsblNr4F+/C2sceIRxqM5Ogg1uxAZfE5ilpiUk/YppxcWiUGl88EeKlxihpL\ndMqMNawGVscpzycFPSwVHSEz0WeHtkK1jBxXj5tJAuqiVh84+XyU0T47o8Lm\nRfUwQMYDLvRJdiT3qrw29j0y6aZLKB4dMBVsgDDiRrgFkag8mG8gYGoN5zrr\nQXuU21ZkPIi7AUkV+tU7m24gSZ70tY2ydP7NtiyP2U2Ryk1eTRG2BMNnmJc4\nzwyPRD3lUzA8zC776PhkjKXvD5HXKEqTfDCBXhw7276rDiu3WdcxD9bsuVOf\n9fn2OEUP7c4vAfXzMR58ZBTMDp4hAZvdEpAryNYtak9fnPR1Z7TT31ydavzQ\nYbOEzQtO8B1IKkDI2t1gpkeel0i5nbMXJFHhzM9XrYUv7+jMk7mk5N0BKVN9\nm8mwQM6V7rL4GbaDjy+DOZfS1NgjfUHWKTAszqwJkwTNv+aX2bSHX3oJB6y3\niVjpHucLzxwgEpls+8H0+W4NnJvDuft/plvRIVDMdKpsIfiCB5pR/P/GpmE8\nNdp84WmvxoSMdYe+nlSgiokBBj6xatLS/bsbatblOO5HY0b2gkFErIumyJjV\ntQQgzvd0n00WI2dfXGPqJZt2Zt1uvp3oFxKEzE5A0MrUaJkF9cbfuxURHv/O\nnZGSG70lGZuDBmbS33YfsaYVdpmkn0Ar5zloDvlebRL4T8EUhHWUZbFzc2hp\nAYBVoge02f5f8xjSw8E7o/pITe0fxt6p+OJmML9wRTVAfanZNaxvkUBZJulc\neN4JHbs3M0iJKBvqoub+G2UvuVbU7GYCH8J62AkULpF1Mw/hOLtxwKJpAbPt\nTJtV61bPGH0N/w3jslmU5ADX7TmaA4xymveW+K1++Oh6xCXN4xWSjVXHNLkb\nXzqtzwM3fTfUrgW4JL+4R8ELDlHEmQlUCyigZusyHjolHePpbIUrNCw6E3ar\nsLmB3vnHSS/4amn1uwS3JbE0IZEY8dNTmzp7iKP7MSe6YcQTjGC4tfMsCzI/\nKavnMYTOLuqZ5nnXum4VnbRNIU5y5JyvaW1VH6PhyO6itxtk25abc86WrYLA\ndRV0mJZvE8qp9WrVczmbbotVc8IN3i8S8pKc+/R+r5D0bx4Rit7ucHu1K3ZY\nII4owVQx13IR2DSZiYCpCdq08w9N1vPAZIf/Y/WeNFy7/7bQ33EeNJBggAx3\nr1Y120o/x0tteiX9xzUY/dQZeoEvXny6vb5KAF7peguEweyE15rT1mVNsIID\n99Doa2eF69H9BJzKWKJ/F+wN/T4EJXdnAY9j+mw2BnU2ktp1lJm9N0efD38n\nbB4Ab/8F9+kUf95jF/hShCsaVHyFSel1+UoMdVIp7QRe6uB8sElSKtonr3Ef\nsd4+ph1LEg==\n",
    "start_sources": {
      "Encryption.java": {
        "text": "/*\n * Represents a encryption algorithm\n */\npublic class Encryption {\n\n  private static String[] availableLetters = {\"i\", \"j\", \"k\", \"m\", \"n\", \"x\", \"y\", \"z\"};\n\n  /*\n   * Encrypts the word\n   */  \n  public static String encryptWord(String[] letters) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Traverse the letters array and replace each letter with a randomly chosen\n     * letter from the availableLetters array. Use the lettersToWord() method to\n     * return the encrypted word as a String.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n  }\n\n  /*\n   * Converts an array of Strings to a String\n   */  \n  public static String lettersToWord(String[] letters) {\n    String word = \"\";\n\n    for (String s : letters) {\n      word += s;\n    }\n\n    return word;\n  }\n\n  /*\n   * Returns the available letters\n   */\n  public static String[] getAvailableLetters() {\n    return availableLetters;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "EncryptionRunner.java": {
        "text": "public class EncryptionRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of letters\n    String[] wordToEncrypt = {\"s\", \"e\", \"c\", \"r\", \"e\", \"t\"};\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the encryptWord() method on wordToEncrypt and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n\n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      }
    },
    "encrypted_exemplar_sources": "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\nhOFrqg0dv8xawugyLhAgu69Ps7U=\n",
    "name_suffix": "_2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:55:00.779+00:00\",\"changed\":[\"cloned from \\\"CSA U4L5-L6b_2023\\\"\"],\"cloned_from\":\"CSA U4L5-L6b_2023\"}]"
}]]></config>
</Javalab>
