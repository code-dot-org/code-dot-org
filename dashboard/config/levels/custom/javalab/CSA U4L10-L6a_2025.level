<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:55:26.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Fashion.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">countByBrands()</code> method to calculate and return a 1D array containing the most common brands purchased by the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">gender</code>.\r\n\r\n1. If the brand is <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"US Polo\"</code>, increment the value at index <code style=\"background-color: #ececec; color: black; font-weight: bold;\">0</code> in the array by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code>.\r\n\r\n2. If the brand is <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"GAP\"</code>, increment the value at index <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> in the array by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code>.\r\n\r\n3. If the brand is <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"Kenneth Cole\"</code>, increment the value at index <code style=\"background-color: #ececec; color: black; font-weight: bold;\">2</code> in the array by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code>.\r\n\r\n4. Otherwise, increment the value at index <code style=\"background-color: #ececec; color: black; font-weight: bold;\">3</code> by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code>.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawResults()</code> method with the 1D array returned from calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">countByBrands()</code> method.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing multi-selection statements.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Fashion Trends",
    "bubble_choice_description": "Implement your algorithm to create a visual displaying the most common brands purchased.",
    "thumbnail_url": "https://images.code.org/9839124f82fbf0c41d77e41da7c076a4-fashion.png",
    "reference_links": [
      "/courses/csa-2023/guides/multi-selection-statements"
    ],
    "video_key": "csa_multi-selection_statements",
    "encrypted_validation": "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\nFXzn9UpECMEAOBd3c61rasY=\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of Brand objects using data from text files\n    Brand[] brands = Brand.createBrands(\"names.txt\", \"genders.txt\");\n\n    // Creates a Fashion object\n    Fashion scene = new Fashion(brands);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the countByBrands() method then call the drawResults() method\n     * with the results.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n\n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Fashion.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Creates a visual to show popular brands\n */\npublic class Fashion extends Scene {\n\n  private Brand[] brands;     // The 1D array of Brand objects\n\n  /*\n   * Initializes brands to the specified 1D array of Brand objects\n   */\n  public Fashion(Brand[] brands) {\n    this.brands = brands;\n  }\n\n  /*\n   * Returns the 1D array of Brand objects\n   */\n  public Brand[] getBrands() {\n    return brands;\n  }\n\n  /*\n   * Returns a 1D array containing the number of \"US Polo\" purchases at index 0,\n   * the number of \"GAP\" purchases at index 1, the number of \"Kenneth Cole\"\n   * purchases at index 2, and other brands at index 3 made by the parameter gender\n   */\n  public int[] countByBrands(String gender) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ For each brand, check if its gender matches the parameter gender and\n     * increment the appropriate index in a 1D array of int values based on\n     * the name of the brand. Return the 1D array.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return null;\n  }\n\n  /*\n   * Draws the results in the scene\n   */\n  public void drawResults(String gender, int[] results) {\n    String[] colors = {\"red\", \"purple\", \"green\", \"orange\", \"blue\"};\n    drawText(\"Brands purchased by \" + gender, 55, 40);\n\n    int yLocation = 90;\n    \n    for (int index = 0; index < results.length; index++) {\n      int randomIndex = (int)(Math.random() * colors.length);\n      setFillColor(colors[randomIndex]);\n      \n      drawRectangle(0, yLocation, results[index] * 20, 25);\n      pause(0.2);\n      yLocation += 40;\n    }\n  }\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Brand.java": {
        "text": "/*\n * Represents a brand of clothing\n */\npublic class Brand {\n\n  private String name;       // The name of a brand of clothing that was purchased\n  private String gender;     // The person's gender that purchased the clothing\n\n  /*\n   * Sets name and gender to the specified values\n   */\n  public Brand(String name, String gender) {\n    this.name = name;\n    this.gender = gender;\n  }\n\n  /*\n   * Returns the name of the brand of clothing that was purchased\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the person's gender that purchased the clothing\n   */\n  public String getGender() {\n    return gender;\n  }\n\n  /*\n   * Returns a 1D array of Brand objects using the data from the specified text files\n   */\n  public static Brand[] createBrands(String namesFile, String gendersFile) {\n    String[] namesData = FileReader.toStringArray(namesFile);\n    String[] gendersData = FileReader.toStringArray(gendersFile);\n    Brand[] brandsData = new Brand[namesData.length];\n\n    for (int index = 0; index < brandsData.length; index++) {\n      brandsData[index] = new Brand(namesData[index], gendersData[index]);\n    }\n\n    return brandsData;\n  }\n\n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      },
      "names.txt": {
        "text": "US Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nUS Polo\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nGAP\nKenneth Cole\nKenneth Cole\nKenneth Cole\nKenneth Cole\nKenneth Cole\nKenneth Cole\nKenneth Cole\nKenneth Cole\nKenneth Cole\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma\nPuma",
        "isVisible": true,
        "tabOrder": 4
      },
      "genders.txt": {
        "text": "Boys\nGirls\nGirls\nGirls\nGirls\nBoys\nBoys\nGirls\nMen\nWomen\nMen\nWomen\nWomen\nWomen\nWomen\nWomen\nMen\nMen\nMen\nMen\nMen\nMen\nMen\nWomen\nWomen\nWomen\nWomen\nWomen\nBoys\nGirls\nBoys\nGirls\nBoys\nGirls\nGirls\nBoys\nMen\nMen\nMen\nMen\nWomen\nWomen\nWomen\nWomen\nMen\nWomen\nWomen\nMen\nWomen\nMen\nMen\nWomen\nUnisex\nMen\nMen\nUnisex\nUnisex\nMen\nWomen\nMen\nMen\nMen\nMen\nMen\nMen\nMen\nMen\nMen\nMen\nUnisex\nUnisex\nMen",
        "isVisible": true,
        "tabOrder": 5
      }
    },
    "encrypted_exemplar_sources": "lo1iEzMPoAYptp0qGaK82+4E6FRLE8rYFnEupPVKDZLrX8jaSGctcEdedEYn\n3d1QK8V/N/VCHfRzC1om2EPsIjVwXh+krCzpvDNNbG/l9NXmWIvegFXqdvyn\njypVhjzAGfQVuvVQndjkl8GR7Bv8H+z7EovUW4ZRp1ZFVYK+WNWK1uFTU5O3\nmYn3VKrcXxhx4L/9k1iyu8Q32XAtLQhgqt0vLe65kByKPAFUlqtSxXiOOBBT\nmjINsUrY76JX0UgRFByMmQfjlLcybHmtj5H/9v0NL+O0cVrP/Reg+mQzKCdp\n0lWqgDnf4xvUlsxszxC1ZUzy89Iz3Jr7tp9zcyNwAQu5ZQtrOsQ7mGQAiXMS\nzeew1mjg05noxUBErswkC8cai+ucrQ+CZsMaNKwOCuFUGP7FglfFU8VeEN7n\n1GjVFZPIL09YqD5cz7/Eeqm145ozBTESd4IDu9/VB+1khM3n1oe3IlRL0+vi\n869uUsaTrncbUO2zsCyMIlU6huY1j+BcRCWFRMiJSdP+Aej812qiIDP7WqTS\n/Ij4g7db7sGa6dmrcKbyoMDDGMweiiK7N4A+rQJ+/ESe/Hn5ekFyOlddOhjW\n6dzzi9AyaHUi2SjpPgj5eGSHlJp+PxBaSQAm5FuxyKRKKOYXj891bXzTr9U8\nqnyBzHLsStmYOMtDhVx49FSOgPXnZnu25Q14wz7+VFf6e6RIa7BamFPRC8WR\nOZhqiVorgUPcNODCakrEXFKzcPOyxH7Ckx2Eeb67yQ/wGLs+96blb/mWRBrV\nNAzu0qviIpaa7A1nHcJcR//YB0ck80SUoFtUMeuXW2/E9y5JX5EKCLtZ07mW\ncIJqtHhB1VuPG2ZJhBMTJ2JlxiLiDhC74JCIqPvkzpbRXobiRiuTRHqr0IPJ\nt9oUNv6D17flfyZS1JmuGSnfgY52gLAmJ2dykKuNfMJTgDZVAd4C9vLCQn+g\n8h/uuaGqOm+w72UVRsj87WsBUeasoxxq1CwAB9AsBmtEoOW0h54smImouhZr\n4zQcFMP6Pl0wIixsaPyoxFioJMoG2na0oiM6EBrBT8uZc4ivv2nL/Mrucgkr\nLvDbF+91TcFmDZoDMY25YavxyahkLwguGUSgDR52EwEE9P5pjlyAdB//mV6z\njv1gB8aOAza75UB9TxFfbgFeOcuFgGFlTY4AjKra5etp5BKxJaL9KZmA64s/\nq/Ke+ZYRXIh5sWZkgx1OK3ZIhT3nk5g7TTfzgRa0+PlhDxddikCCimysb6Ij\nbQG6kxPqhVtAOIEG/ga/9urlRpjecKE8T6OoMmzCEQH8lWI33L7vOdGCBhka\ntcl2swenayvweNiXQnePDY3p/LDhMej64k/uMvEU1+k/6hh1UVJvV8CVDtKq\nkBRgA4BT9YkTEgUPTbB63IP1wfohCBNIbtDiugJJD36gMWtC4dvNdbUdpup/\n3c7VXJxJprJ4W8MUni1fgpixxWGOIOqWHo1pS2q3RbmT4K43O6mbW07rG4TR\nr62hkCnM9VYVDTg6jzthYkRnITmwv8AcywTs+kFONVkfQD/LyU/mjgvkx4B2\n8hwzgxYTInFobkDALvFNUrjT3CvdPlmfgVT2gNmOLhVbiYwc9UbWSxzNJBuy\noafXo20AKRbOf6DflJGLmal81Y0P48pELV3mQGfj9C2Zfrn8rKmr28y7JYRB\n0JSE00nAZMfDuQdq9glPUT9dyESvxpLmi5DrhPupgbuWbIvCqSmW2vI9fBeS\nmu6SX4dqhUu2gRts6f7DaDe64sOeCRlcEi689x84mgrTt/woiBYZ87jJSqu9\nT9kUDF0Iij2fPCkQGKLqh7e8r+eaxpsQaaTnvEoejTNN24AoYJl50MJ5BQh7\nsUdRfdEvK+w62jmfpYuhwpaxuxS1MiOH8wLgwPvC3t7NkzTpP+vLLpAKsR+n\nUdlQkpGxB1cc4K7cyBKdCu5SFV39dl++IFENuO6t3gNZGDl3vnI8dKUzvXSA\na/FrQ9dOjocsFcUoCTQ/1UQgSEO8C6NtjWkKOE8yPscFhscdegl5jNKxAwTo\neycMSc/3Siqb0yKl6QCqwXl0xHx/5gC7qvPga+jmvOe3l2OvcjSKdIqnFPPi\ndbxKD8qAgKIrMuW7nBk9iQKPQuznV/1XnMBeGh6EyAFSJY2LnrtaltZuWvzz\nnfe81KGFceowaZ9fJdbn1i4zj1pb3ej6oACi8XKhQmP2RL3HFU5QuW3JI0oF\nH2L/FfTqf/4DNA7R249DGer9PUTPecl/pv2ih1O1oax5rrYxYieibpKrRvEJ\ndicrCjEXiiCanKteOGwAPb/wDX6ERlmX5rBC8qxb0oznzpSnDF3QzLYmRPKA\n/XZ3YWPPNEtpwI6n/Fa5U+aDQ5/RlXyDxPjr0lqxPrCRbeyjeFypNS61Qc95\nP2WHABy6n665yRrQ6RtJ5lFJ7bGw4NUroxa5MrJad3lg78LP7twWlGbcNI7Q\nPkf2hB0WhfAk2XvStWym+eA69wH+dF7tn3m4CMqgo/fZBfAy0HdMs0lEnNsF\nZBramjWgG53Z+V+hHX8lkbuilillN1yLbyYV1DSoeIlS3/dnq2glLTBKj4kJ\nugkoCEdCcGC+VOSLEp9HuG8S573QjY5m/tC0H5v8cEyHjMBGlsJBbTJIANG/\nS4X/BOftVfLTPyKTqtf3raEUI9ZfOrF2NZCvOobl5IE2w7vFAm/dbPcwqAuw\nSIuQQeR0IuPRWV8S7LHazzT7BS1KnI3m461DMOk6uLnS5H88movGqtB07ZMi\nPadXDJA+7u1Aha1DF5A/0yyCpxPdK6mIwG3W2vX/JBjzVTATVHy5JnLi072e\nyXlkU8dFhc+qCUDPWElXlB79Je6ZLRzQfwSuoPQgJUtPOFEr1VubhgMx1nos\nFx4D46x+qWYfWmF34SkaZL5hHPBI85KWyOsAwRpIPoMxLqVPSsggRjYohRXb\nHCj8ACrUuQUP2oNY8xNVyWwN/vtNzKFjid8LwURHWHlqdCyrEkaIQf7ZD/jw\nvqq32/wIRoy9Y6rlrF7JVwmIJ82rmiZ0XcejXyEybsCV9z5cRWvkko/zuXXJ\nokF2b6pymeRVF2fBabtxjGfKP137mLXe6U6RRE30YNp5p1/nmzKiN3nWzVUN\nkN4m5Uh/XvzpmmWsmmkuctB+MIZGb/3Y2R3Jx1xBMMEHt7rPpSZGRInTL+NM\nf7Q1ta029cTkrKy1deCuFFoSvRW8DxsapEvaTTlkKa+BP580sDtuSzWPe0Zn\n/d9b6XYdWsZDp+fysE2A62KIKtzOVzQUIYDijDvBpxgfu2I9SNnXHBSMvCzg\nlgb2o8PNsQV3/DeP/NgsTK8EaqQMwPnSfKbShJ8eaSOGplfpkyQ61Q9mPGiU\nk4HQwntKas0aG/e5jG9qbkQph2PhBchRZ5pvUKdo5w52pDEODu2lIXsrevUw\nfbv5GD7nrrQQqhFvmo1VJZXGxWIEADp+7+5Gf8ByNMeFgSA/7nD94HouOesy\nL3zkIyxFddoRuuV9HU+5+3Zdyu0qxyk5OYFaVnu5EqoAND4MXkr+z0/TeBVL\nQOmOpdATUC3TuZrDckGoOcqhHzGqk/eTdyQzcY0irEC7AisNu3rk48ocEDFM\nTr24KcIsPDu6gCX5fROdnIyJH1P+4lGLdVYt7hs2O7bmrMsdFsclkGv0SfGo\nJndiAc3PnZDF67LKMwQgDUUArfUuE9ks0JmiHAxhPk/1K6klme1+orzA4D7M\nO/0z2q6NPe8dxMVz666QUKI3d+02XOd1LA/pBSz7GzGyM/wlVEdSg7eYW9db\nwhhCmVUIZrqYCC5hvptoDdwS9bIWH8JVa2zXv+sqAtoSnrxyy60l0C5bgbXq\nqrEEpUKdvTW7uHYKy5wv+UAvFRlfChZCVy3TIN7DCsK1ZlKnm37uYDTGKVHa\nla8InfNsExAOuqK4YHWm3c0KRD6UkylUYPaTeLbdICJb0pXOtX5/8sh1680/\nAWJmJfa5r5VJcABTJ/haX68RnN3aH2KLQrlR1iLXaQLX709KuwP3QXPR1e9r\ncoE0b0kb05yn+licMhKfK7TVf8s2AKbr+UJU0OEe3h068qPsVqr38IPpfr1I\nyc3lchhGLd9MKYvcdrqE9bQ0JHCsFuPZnTi1A80g4OOCv5I5IEhnHTbbpJNF\nIvkzQZYW6Y8WVWkOhkABswE+un2cL9isouG16sgZ/QgS1TGL6SoWwnbAriN6\nFqJegeWbJnLFiYnciRQDnqNrUajHLKwC3MTS1HDG+5dqfF8geSCrJz6ECu+J\n4/Gek4N/TF2CDJ4gvQF1HAnRDgZ++btIO0/wCL9epHOhPR6fW+DfDJzVpl4Y\niqjciLld6Kk9PA9LhZ+HFC+Bd/vm6147eMxAS9wuPzlhQo+Igz7UAO/iMXEb\nWs/BGg+XBeXBl0yz87gJSeQPLydxqikwOP4vQsCXl0hY4F275cKhCEHrjCAw\nBlzvQdd9Rr0qXPHvzzUkBUaZZMtZXCiOPl+hkp1fo8YnccR4etLHBHN1yA7y\nZkNhxqoXaaiG3Evqg4vCgIXYAik31BX6GLJ+c3D8ZXg08QFa4npxEJJDHUZO\nJPbxrPMwsRZNUNWFXNBbWDAl/J27zLlEzbTLDgeADbdkrtMiHyrREkCKF+Im\nU5DavhreSJ3uRUZiWsIT+Y5RgHdbUUqPejenFDVi2QGR/1R/WWRFUaYTyXul\naKJv7aBsqsae21si6ttBZTj8Wmu2bdqSozMtkZ08jg5B+Pyut3bvZ8ZEXysc\nnvPtxyBHMrswb4tOfFUrXnJDMC1vGVPEa8aYbGptIqhASU7o+JWc1kKnouJa\nxKg2JlUdp0o3+ddL4ZtE38v1O3SjDTxrM9pISvbEBdwupAWNsZjOMjMI4/vY\nv0WiomCIy1ZlaN7IWItRqiL1gxZhkyeuewmdMArr+Lf4wwuZgebKQ31BmOYk\nqNIguI5WCKECyS/kLuUii0GDrgQ/fCycG8ZOC1rZj8EkjZoDE9zYeNxSRNkZ\nnG9ZyAruUQBKHeN2stNrsjItFAxuAonUDUitU9XncWf6TewLK22sIunCoYvD\nlrkv6MSQZ0Seva28fdXdVL5aFU6Kx8j2PayY1lboPQD+DbZsHs/L1cz5/SwK\nXR6MvuDl0YJgQ9RcTK8wuBm7fWdb8RWB3CcaiM6Hz8mxvxL1Pzqd7KS4UnqU\nAk1ni3sVJj0+YU2nm13V2vuqtukIbDUXeyWTlq1yFbeeKcx2MB9kylcNo91c\nye13IMQDWwKWi2Zf8t7Fqczreeeah+s8O9NBrnz1jNLvAMZ9erHfERrgSpO5\nWIFIzoTOXAHYx073YdYsstNaSZKVKrt9Vuwm7m29oIdsqosYLY7hZj/yO5fx\nZ4vU6piWWhLgw5duA3gUfCeqDmilC4CgCo4Pn0Jx6YpQnhW1QHubpZSIXz7p\nOecdJ0+LHI+mo6iohUkQ0/T+022OMFXrDIg7k+OR0EDjeVYbHgHfWW87ryxl\nvjNUkwLQ0QRPtp7uJrlhvfUgJyEInGrifZS0C9jzluJJoJUo4RRCQoeCKKqt\nmyhsxJL3RifUndOUS9KvadfSWcPtT21IveeaCLneIhRM8SpDpzBFip4HkXv5\nkzko/AnngGM2cXxKoXg2dTn/3URGT1uyUnh1Hfy1dSeiOLWUtRDzSekf9Vdn\nFJNTW9vu5sunJsj1j2FIrxkmPXfTJ+qOZmKlA5rvx8MPWt2kxXSPQX8u0Tr9\nR3DsAaPYezewfT18dM2LurVEKkgalnXfEFYNa788LEbghn47mH+4bh0meBKh\nF//R+Aftz7Z5ebewaQU7+WIAkmabzY8Zt6vCE4QZYGF9LK6uRl5YimRu4JSH\ns9+ZccxpdLg38XpfDosejHF2Y/FgEoCMTngNDDQLe4jYlaKUVvM72DAGujLP\n3DZxC1KkOKSSHQcIvICUu/iHoLuiwFPTH1qIBibY9vsd5HYPuZEygfftx2s6\nEpZpsKauPolBJ9/de8eGSXub5o56F6sTfaptSokq3B+ZKPEeW326g5qCDB9A\n28dZXgTkBveCxKSOw6X80ol7Stx/jNb+siHKcIDUW/OJdGNFQWcl1kzkgcA0\nUwWopSodtU70QGhgG8gd0esrsn3Ct9SOwZEfy2d/bnaqjNV1QmBYaPKzoYa3\nbAULXor1Sy4+wvf9wqGoAGcdNk9Ze9DMJOPSFcEhFomi0yTzEPX6rAAyfREY\nQAqeDZDA1an7pRbcIA6MbDAL5Skk9CT6FDPDbMzpkGwNI+TPOIK65/6JW4ZH\ngAbfEwkkUppBCNxEDrvnuWb6RpovZlySUlNQSCmD4L0lqSUgfMiYogoszjwC\nZhvaQc+SqmqCJghpVN6RfdJiXqVzbS5r4/7tievXyqVKcqomzY4SdkJM66P5\njeLeLDQZTjXtTMUDqbCZjz+vCLzdhRgo1YIK7saJQcp6eOUhAmxcJyL8RF0F\nzXDrtPAgkJI4dd3Z2LFHRaBZQuaCGUd5Oo52+13guaRMjnjXIVBxxLVhXGHu\nwQ/Tb1fiq0zPxs7siOJEn/NBg3sxHCehGe3UoI/yPg6+tauvvuusH2MJQtI+\nqJouF04WFk5ddminsUSNr8iT7U88crHFV4i+3HzJZlFphczuROMU6OH6Tqf+\nc0oVAxDhn+qC+/vhceJmZs2AJtOQh1So+ypz4QbDLJ01FESoXE3A8GHi/zeY\ntbeOCXCafa0BA3xbys/gb7p4o1CKqdjgI5lOngAEp01zj46Rlya7IzYho/Lx\niin1/dNf/VRKkRfXisR2emkOv7+YAk/WkSKKld+RmbuYl/oLg4gYESarpCxq\nXFMMWxSubG59END89/DOs8FIGJsmyjpNAiC38+T3Ge6IDeW5EeW/7bPYoZ8Z\ne6eGBSy/ZEgRojbFhMGbho13mipydovaXdMoogA5oVUPU2zhMz3vLzp9Jame\n39Ycr2qhmRsihG5psqL3KLLMAh79tZUi28Mw8h0DWP18TKFrP+wBzaAqV0mr\n172HdspKHAi9wRXW/ysPDfF9yeox1I4Su2fa4oCVEantFg7rdybEysgFXyQ5\naj0qctuR7uOJGOnYbTFv/Jbdz6MKgOw6vNF05IJwfObgE53hoZ2y8aro8O60\nNzAoSpyzv1Wsc1ac1xhK/qrLEkfmsjTqrF5VdvQ55rvwdiOIKWMBhJQk813v\nsfP7+WvlmFR7ztMAChNqOmILLyzYlMxWhmFlxJEkdX6lFlHM0lGdnPSDw4k8\n1xrt9OWBpxGPozvkhBztUS+zoFBo+pgU62+X+o9nuiHRn3PAtVUMsfkH6Qup\nGUu54YMpEFDbfCyIwxT0h+eBZGHg3ZOmCy2Ov2/X6SpaArolPiZTXeyh/c/3\nrF80wJJu+OCj3mPuivovYY4qnaw+blGLvd+WN1LdcDEGGp4Zna2BPk5v9RnF\nVmEiIfEKXkrOBE9SqM4aNtS9cSdKQTZqJ94T1WKeTgrH67leeoTfhr68De/E\npS2XwX26q00k+obaXPGW/hwvyPCC9Tl7TFkNPx4ff4ID0qjFPHTCyjsuU55w\nTAGBAfSxwYD/Py/srI/S8l39bHXcscjiejSNTVcmAiDd+4Lid0OBO2I6vlUM\nxgIYSM3oRSwUQy8eA2Edg/20cX2rWkcd5N0B4KOU+YmP27Jrbkadl+Q7Hct7\nocBj3YW4DxaLhKgxrCLINUzj+++WLcbL/0U1+Xkfn7TCAPj/+/g+0XPhFWFd\nJSEJQircn1fqoQ7Ek2j93Zg1tlDR5scevmV+vnnHvLNnYcMzXzhMTxrYJda8\nO84v9JwfN8jFX/uZEOM03ymSkLI0CWA0fCDrNNf+VSI0D0+/A88D75/A/mZy\n6kWTxbeOOA3hjOSnrlmutY9UyB4heyFnTGqZt34/TtGLQk7lZGjO0CI/Uetn\n4MH0aUVaCiMVMsR2cB0BFZon2Yj1UVT2LPxSnj+aC8r8GVp5oNEraQ5CD403\n3aQK7zCakmf0Bzv/DH/8DW4fGxEb7lSZU5vCw+wBUsU5lZgbMuKyhTEm8won\ngN5kkOEGsvDcpZ8ez+MyEU9P2k6P4MkRXidAx+F7rntBiiDGRKJrxKZfrkG1\nvNkppFGxjErd5NSddJEyOFMqJWIk6a3mKrRDNC7gUxlGkXDEUmuASnI0Sg/D\n+K8TiiPeyXPLvWENVObS11T1ruC5K/mCC9aAAV5p00Lz9/UAI4mwrly4VuYp\nPT6xsFNK1W2XlrfkOUPgPuLjW8ovA+wbY7bVkWNGr9aHunTRyhYguZmqVNiy\np4MOh8VQz34ZURjkNW+9Eekv9La5GZ1KHEkLzsqKyqrkGTQ+rfcUnaTXNFtY\nBgU45evqoOMKlQs1/kRq/XMWPgpGeDLAo4YCTKzotKKG8951VZxTh74H3CrK\nf3jTT/oxCY2Vbx7SfZEGNZSe1/0IZKq11GElqnpfjqKWLOhtqMKwIH3EsEI2\ni8BkRoMmr5VvmAJP7qZmzgTZrHH+UgzvmrOk7hlj5cnJ7XuxBDx5JXMhW63T\nKeUs9sMJTAnVfYKsNxLZGOoEYRweH7TbkIC+EQ5YQBHH9JOoC8ufB+mEwX9u\nSz2S7o+lqaLb0bk1PZnZrI0vCQp25pRr/V5yKnkQTnTZ0LYfRRjKnUhSWEQv\ndVeuJs11MMe/zxMzQ8rkEKOtw94+Bxb7yuZ39iZ1rQT2zB/IM6zkT1N8HkGA\nosPzKifl0sHwekFm+63+aaq60Er14iqJpH/Z8uamoJWu/MyjS5oyYbyhsUBP\nlC1ASNA2Z+VlhC+QIWgB3rJCnI0QEJNpZiL1yo/L8bDw611gtnnU8TczMzW4\naIyg3aH6TgaDnWCZMfycAiJJjQSedHE8TB14WmeuUxEnmXBkP9n6TR6oCD42\nyKsJZovBgEEw1KYtdRoZ/GoReK7G9eo7087ZapwDgutY40Syo4hkosgzvih5\nO3UG+d7GFsPma4LOwXK+v9GdRw0whu/eP3uMlERLQAVP6GAN8o+XiLvRg8Eo\nv4ZUU3lbw/E5NOrbdVApuHv34dsgOwRyHHduc28OaYvJlQ5ZmOYvnQxtNVhN\n5Oi26GO3AUlXTyQa1ELALTqEmw8BqW3AyVJBkRypD4trXD8uIw0cK2PNTjyr\nmBwLo96LQO7QKumZMm7ov87Qm1W9STXR8hZ0VTUfR5MEFNoKev/1UeV7L3oD\ntNHMoZmtQK8y9O7VjOIchAWD1TLZyNGH37pveHj0VW1NO/OzzDNNvPqiNgNw\n3to/coTON6YUPxOBv75sKlaqEl69OqkSABSNvCanbNNxKhzzTIGkKauGR0AN\nVFhTE3xF7UlRKAuyzfLYlQHlVoSeiHa72EzC8j6f9ZcGKAPkP97c03/+pVgL\nDcbpzvsjxZAtCjKRHJ9Ko0VQf37R52xg4OM+OtfoI1JekooeoQdS0WNxo/x7\nvOnlC/dK7/qBl9HYwN6I0INQwuDpS4jzGNnlz+H4bWoxvOHTSxo/72fxmpVR\n13Gunyx68am2+pPoATYROPcGKsSBWgaANEJPYZcxgcAJWbfcJnmaf0eFgoHg\nReYj6A6QTplICVirW4iECKfXjzQy+ICLmPQ/VL5x7SdyXJuxLSJAGrq2\n",
    "name_suffix": "_2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:55:26.400+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L6a_2023\\\"\"],\"cloned_from\":\"CSA U4L10-L6a_2023\"}]"
}]]></config>
</Javalab>
