<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-14T14:09:26.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "An event manager is preparing tickets to sell and needs to make sure there are no missing ticket numbers. They have entered the ticket numbers into a file to check.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TicketGenerator</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">missingSmallest()</code> method to use the binary search algorithm to find and return the smallest missing number in <code style=\"background-color: #ececec; color: black; font-weight: bold;\">tickets</code>.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TicketRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">missingSmallest()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with implementing a binary search.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/binary-search"
    ],
    "video_key": "csa_searching_algorithms",
    "display_name": "Missing Tickets",
    "bubble_choice_description": "An event manager is preparing tickets to sell and needs to make sure there are no missing ticket numbers.",
    "thumbnail_url": "https://images.code.org/21d6ee59eeea20b84c201a273fa67a1d-ticket.png",
    "encrypted_validation": "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\nlkOqisSN6KX53XQ805oM0qM+ff8GDw1u\n",
    "encrypted_exemplar_sources": "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\n",
    "start_sources": {
      "TicketRunner.java": {
        "text": "import java.util.ArrayList;\n\npublic class TicketRunner {\n  public static void main(String[] args) {\n\n    ArrayList<Integer> ticketNumbers = FileReader.toIntList(\"ticketnumbers.txt\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the missingSmallest() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "TicketGenerator.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Manages a list of ticket numbers\n */\npublic class TicketGenerator {\n\n  /*\n   * Finds and returns the smallest missing value in tickets\n   */\n  public static int missingSmallest(ArrayList<Integer> tickets, int start, int end) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Implement the binary search algorithm to find the smallest missing value.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    return -1;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static ArrayList<String> toStringList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    return temp;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Integer> toIntList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Integer> data = new ArrayList<Integer>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Integer.parseInt(currentValue));\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Double> toDoubleList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Double> data = new ArrayList<Double>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Double.parseDouble(currentValue));\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "tickets.txt": {
        "text": "0\n1\n2\n3\n4\n6\n7\n8\n9\n10",
        "isVisible": true,
        "tabOrder": 3
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-14T14:09:26.044+00:00\",\"changed\":[\"cloned from \\\"CSA U8L7-L7b_2023\\\"\"],\"cloned_from\":\"CSA U8L7-L7b_2023\"},{\"changed_at\":\"2023-04-14 14:09:27 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 02:37:39 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 12:36:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 12:36:30 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 18:13:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 18:16:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 18:21:25 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 18:21:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 18:21:31 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 18:21:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 18:21:53 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
