<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T16:59:08.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that draws an image of each planet based on the length of their days.\r\n\r\n‚úÖ **TO DO:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">PlanetScene.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">chooseSize()</code> method to check the length of each day and return the size to draw the image.\r\n\r\n1. If the length of the day is greater than <code style=\"background-color: #ececec; color: black; font-weight: bold;\">100</code>, return a size of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">150</code>.\r\n\r\n2. If the length of the day is greater than or equal to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">15</code>, return a size of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">100</code>.\r\n\r\n3. Otherwise, return a size of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">50</code>.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing multi-selection statements.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Planets",
    "bubble_choice_description": "Draw the images for each planet based on the length of their days.",
    "thumbnail_url": "https://images.code.org/baad52ae8ed2a37bfa00da5ccc375658-image-1650719543283.png",
    "reference_links": [
      "/courses/csa-2023/guides/multi-selection-statements"
    ],
    "video_key": "csa_multi-selection_statements",
    "starter_assets": {
      "mercury.png": "9e9e08c0-87dd-4b63-b71c-b5f5861c05d6.png",
      "venus.png": "2d3be8e9-ba50-4964-ad4d-f51e0d61d078.png",
      "earth.png": "d91903ae-6ba5-40e9-b610-54a28c727e56.png",
      "mars.png": "8c886cb9-c136-411c-b39c-701634039f39.png",
      "jupiter.png": "3aaf3af4-ee1e-4094-95d9-555526cdaea9.png",
      "saturn.png": "11121bea-24dc-4fa1-a32f-819beaf8d592.png",
      "uranus.png": "df6a6bf6-e707-4371-b294-c69dda884c7b.png",
      "neptune.png": "0b08b778-bf4a-49c2-acf1-482a511a76e4.png",
      "pluto.png": "68dfa8ed-bf39-46ec-9e67-7b35712d1a28.png"
    },
    "encrypted_validation": "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\nC3CehSZaf/KT9x8QqRrrlW7zAogzgrZwzYY=\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of planet image files from a text file\n    String[] planets = FileReader.toStringArray(\"planets.txt\");\n\n    // Creates a 1D array containing the length of days from a text file\n    int[] days = FileReader.toIntArray(\"days.txt\");\n\n    // Creates a PlanetScene object\n    PlanetScene scene = new PlanetScene(planets, days);\n\n    // Calls the drawResults() method\n    scene.drawResults();\n\n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "PlanetScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the length of a day for each planet\n */\npublic class PlanetScene extends Scene {\n\n  private String[] planets;     // The 1D array of planet images\n  private int[] dayLengths;     // The 1D array of the length of days for each planet\n\n  /*\n   * Initializes planets and dayLengths to the specified 1D arrays\n   */\n  public PlanetScene(String[] planets, int[] dayLengths) {\n    this.planets = planets;\n    this.dayLengths = dayLengths;\n  }\n\n  /*\n   * Returns the size to draw the image based on the length of the day\n   */\n  public int chooseSize(int dayLength) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ If dayLength is greater than 100, return 150. Else if dayLength is\n     * greater than or equal to 15, return 100. Otherwise, return 50.\n     * -----------------------------------------------------------------------------\n     */\n    \n    \n    \n    return -1;\n  }\n\n  /*\n   * Draws the results in the scene\n   */\n  public void drawResults() {\n    for (int i = 0; i < dayLengths.length; i++) {\n      int x = (int) (Math.random() * getWidth());\n      int y = (int) (Math.random() * getHeight());\n      int size = chooseSize(dayLengths[i]);\n      drawImage(planets[i], x, y, size);\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "planets.txt": {
        "text": "mercury.png\nvenus.png\nearth.png\nmars.png\njupiter.png\nsaturn.png\nuranus.png\nneptune.png\npluto.png",
        "isVisible": true,
        "tabOrder": 3
      },
      "days.txt": {
        "text": "4222\n2802\n24\n24\n9\n10\n17\n16\n153",
        "isVisible": true,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\nXlmdWHy+iIXkLVu5Rd0ES0TiGfICkwvezpFWPjjkTk9RZlYD75VPHCgUaWvX\nMlM8eXOgjHotHc3i+d6v8hBeoqYEQ9jtsjZuQmqQoPcwTvzQUQq5HimK/oS3\nWCFG8xhSy3KEI4bjSyG8cO4SZZngeUCcGmzw19T/oqRX/5OyCAAbK6+QHYfG\nMwRT+EASM4yy/uxcvTWQ+elDsSIbNhgZ/lfroPcXxar4cGNJIwiidsD45vNQ\nvTOLbjZG7H3wInLuPZkUD1LUW1sNeM+eCsuzVbhCU+p/DGElcJjSzNiYvscp\n6/JcPwwSY1rr5xKq3K6V6kxzprO+fnrtJz5jPb4hH+fv3kYbMub5I4/PK2Nk\ngFy6joX3r4ai/4K5zcm6DHnLEnhGKVoR+lT80FyBlBIRApJXSUrsGoDE4wGX\ngIGywgZOr5j8/bzDCbFq2sFR7kuqk/KpWIqpvTfoVKje6LXsJHVJD5TQ6YqW\n21qnL/NI578HFLyjpo71jmJABex4DRENZdzRC3BgqtJ7IAxDjaIqsiQdUwl2\nKW0Ye+BCnVUQQWaJ90gYH/XJBh4xawHH71W9cuVZFpoMyPbd+mZcKPdRZQc6\nKljsD/oSgLpD3Zl7BVuUGFa74watizenHbPUYsRUMfAMsK+X/VCWdMMrp2OD\nijJmG8mlsLZ/WgrpNTW4mb6eIOKMvlnnmRmQ/O6t7ZlyWKWEuuCKUfX2wPkx\nF4YVDHURiLjp/l9hHqEclpUd1iE20z6p+x5yIUkgclWJ6j/cOOjXfCIpe0rB\njH0UsQpjVg==\n",
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T16:59:08.153+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L7c_2025\\\"\"],\"cloned_from\":\"CSA U4L10-L7c_2025\"}]"
}]]></config>
</Javalab>
