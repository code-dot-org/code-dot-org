<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-03-27T23:52:46.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A social media analyst wants to store data about the age groups of users on different social media platforms to create a visual to represent each platform. They have the following values:\r\n\r\n<pre style=\"background-color: #333333; color: white;\">\r\nRow 1: 22, 29, 39, 47\r\nRow 2: 41, 38, 37, 37\r\nRow 3: 23, 21, 18, 12\r\nRow 4: 15, 12, 6, 4\r\n</pre>\r\n\r\nwhere each row represents ages 18-29, ages 30-49, ages 50-64, and ages 65 and up, respectively. Each column represents the percentages of users on Facebook, YouTube, Twitter, and Instagram, respectively.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SocialMediaScene</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findMaxPercentages()</code> method to find and return the largest percentage of users for each column in percentages.\r\n\r\n1. Create a 1D array that is the same length as the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">icons</code> array.\r\n\r\n2. Traverse the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">percentages</code> array to find the largest percentage of users for each column.\r\n\r\n3. Add the largest percentage found for the column to the 1D array.\r\n\r\n4. Return the 1D array containing the largest percentages found for each column.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SocialMediaScene</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findMaxAgeGroups()</code> method to find and return the age groups with the largest percentage of users for each column in <code style=\"background-color: #ececec; color: black; font-weight: bold;\">percentages</code>.\r\n\r\n1. Create a 1D array that is the same length as the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">icons</code> array.\r\n\r\n2. Traverse the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">percentages</code> array to find the largest percentage of users for each column.\r\n\r\n3. Add the age group from the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ageGroups</code> array with the largest percentage found to the 1D array.\r\n\r\n4. Return the 1D array containing the age groups with the largest percentages found for each column.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with traversing a two-dimensional (2D) array in column-major order.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "video_key": "csa_column_major_traversal",
    "reference_links": [
      "/courses/csa-2023/guides/two-dimensional-arrays"
    ],
    "display_name": "Social Media Users",
    "bubble_choice_description": "Write a method to find age group with the largest percentage of users for each social media platform and create a scene to visualize the results.",
    "thumbnail_url": "https://images.code.org/555c9c7bbec2eaf3760ae4df3c33bbfb-image-1650990657328.png",
    "starter_assets": {
      "instagram.png": "0d9fa7ff-1f31-4125-9e44-971004e03f67.png",
      "twitter.png": "1a354bcf-8674-4967-8f7d-05f7da3175bb.png",
      "youtube.png": "45627ad4-dd56-43fe-94ca-01b0147fb21e.png",
      "facebook.png": "6f029a2e-4e96-482e-bbe0-1a41f01141df.png"
    },
    "encrypted_validation": "9VyJ3o6j1u3WuWPshGH4odFBWV4JW+4WD1AXvpBzs8LcTJwscXhYov+uFYYz\nGTL/Da8jjCryyYkUkI8UYshTluRUZ1VPj1H51Ql5O7rj4GifqZBlsDRM+Cz7\nC5hg34vSDJtHcxu4UcbRK0eQrclsuSio79SgiKAqPsSXg0Pw+ZLUEu6yJ0ew\nwRdCdHxuX6qBPMRuZpEpB8i7QCus3aMBiVArdiYdm3mzyATMWbJCj+LMVpZc\n3J8G10Sowuz61gJQetRnWU4RNET/G0rNNcwuSH4D8dwd6m4LWCBfVFTXNfgM\nq+HGz/+9QrFGAXg0eT4Ui7rYbb4yj/Th8tXEirhJ5ARV5Mv78xJZC1jtlNGT\niut+JfkJmFSYkZzTXw6Sd1Wy9K03lpNuJIjv/DLwC5iSJPgnABr90IqSWcOA\ny+m33qFyQJRZz38fEBQyRZ9cFavg/G5uMUaCmwH0qntpFJ3arqXoOFT9h7rk\ndjCSqEVtljNK0gieSN5dZoGJtSW5Yjlc9C09kpXKJrsekV7CPxkDRrRKSv5i\n022HmGYrb5nOWpBgP60Ut4uW4gSSe+BiMmIXUdOWR+9+80retWojLVD7WBvc\ntxsJLHnIv5/1WTROZUQ32mZFWoRnhTGNke9JqOq+Q95fwgsXy7m5n3uKrB2v\nNk6mNH85XS477I1sIYYl5sE06hFNRZI6XPBLBrkUdkNN/S05EFZGlfMMMDCN\nBIbMVhclrIYRZyZfKv1kl/aSUyxsjJkgsRJ/tmO8Vzox3VUbc2Q99G0Cvpiw\nPEvFz0ss/gCqzBoHuF3MYKuBR7480D27i1Dq++AvQpstPzJL1k77AA526Yc2\nLkZ9HM62otlzer5DZBsTaT4NQaWVWbMHC2GYCLaqsT+tY2Exab1UmVueQ4Br\nPXxbpfO2C4yk657CipYQcIj1I5gUx7gC3CTkddV42QFUlxs1F1SqGcY/9/0L\nUkCetA+y7tCpilp3CJlIl3lZ+Ptr4iz14/GNVI4YpEudSIfwmrPQoDaMWCTi\n3wPIRySsXfBeDTdaXwphO0cZ5M6JaBAomqGr5EZOWfvhhohP/nu83m2bNDNb\n9sG4+1N/z+Mc2WjAsUvknBOKjZzrC2w+kuOIywqNz9CA+h/mxmhs+oM3qiuu\nRZm1Cacu0hMsBWqXNeJfHJHGPPrD8HIA4+3nYLmrTwBsGQCWynA+PPc83VxI\n5qv3EIZ+9JhKFFmixRr4zfDWkUYWlGIrPH0vn/g1GS1/+BqLILa4tGSjuvEc\nWiQXjvjbLgW1r0X/J8bgyP5bP26DGn0M+aJBr/ZtwkkcHouyIPYZetvX6pkb\n1y9Z6oWSUAR5TXYg42dQLR5Mn9b+xIrIaxAQp63hX/N6+2qbULcHu5H+J+Li\nOMn71RE3pA9G59xBeoADcNiY4lgtXChvbc2vt2GLNe8YleiP6IFv9cuXZbd2\n0AJfqX1hFGfKyDbQ8offR7re7iRIqYO9zlJX3VC1fzKxYgQJFbsejKbHao8a\nvHyAulNVOrWDTtHKvyfUgFUkNOKUl7ybhs/un5dRHrNOTkfx4zofJE5RaJUH\nzIYB2y3J1KmZQF4W/y0E9BJw3Quct8aLsx/ENH6YTttBXLn8fV+OQml4d84X\nE7MBaur1EwhlrH8WIOkLJyRdnjt31E4g+JFiagz6LieHOorRTZJExfJ7to4p\nhtkR54n3f7+/4YAY1XPn/jg7Zi/b4lkuHFHNgC2rRr86UMO6jaO6tw2u7rst\nfPSWIfdHM0bbH4QaaQbuJOsTDgAaTy+7T0q5hXhnIxdVitSQ7Hbgsvzp3eyU\no/yqG26koG7z8yEz1NMi/e86WXzQHJfAhcJBSymNlBnmveaKuDvrVRb5ySik\nUtDccz0NF8z9JlY1vh9WCAuDefgE+94by1VOi3BIEo9dJ9oIqQWJvCiz3gQQ\ngnwV+Nk6FgmYWP23hYz6wKcG0tsxnnUCkr1g0FIJ7JWQAKdlloPUCdpPsqLu\nhp8rifSZv5cKiJih49rBRZ2avmkaSxWnQlkzmGcuAr4VG5ZPENp34h4gLuvr\nOxvSKP0UQjqfCtA9j5dibrll7KNJqnmMYPrRnQ7BTpEvZpJWRYdBxOFwDANv\n8ZD5r2XgyoYpy+vmnMjdf/tOjPyRn1OiS6tyxfqrhZlYFM3g2baVYqMBvXcZ\nql7fWAT6ljCLJrkzliJvbGK3ot5TnUpMQ1Loiq7A1tSf4saRYy9zvmFHgiks\nmer6eq/JfeNMEE1LMcrBi6ZdRPC7nscvFtK06C6sRga3Zt3vj78SQJJcxbS5\nJLuAbDNGiv23YGdBVliFLVQQXweCu8+TulfXyfIoTZSM4jw4qje2fU8DS8b2\n4eFlvVTDP3Bqncelj/EFcbD61WjdethF155OHVkWekm6CHkLbK3hb4xlHIBz\nihLZ6zTBvVl2QLA6jg2oz1O5r11gtIwUupmIKeilQi3oteWxKmU1mZ5VL8p0\nEqrVEZeM14tKu27D4vKxrgxb+215G5iXNDJr0dnAVo3LeiOn3tupeQiXzdJ3\ny3ItOb3MneHhq3d9/8JVSAed1iJ7gY7vVcNnVUVDhOPgzheS6vsbe5hbe23H\nqxlgvDHDPMNmnd71vQKFMBt/pFXLWlxW29/XP50K8xSl4kI0KonWLX99ZlEC\nU1LiNLe1/p8u2Jm9iiJPs4aKR9zNuywJHrK2QsnyAs6Ns4CXpQxvwLDsyF92\n74UGEDDK/9J9YY3yz5nKoKFXTJulpa98zGFCzdmoX1odxhjEVExi8gu+gmxP\nlkZ3s+QI/g+a1mtnwRpYqRfRAy+/hwJwfrKG9phswRdJmqFVzYxZPiDZmlQ9\nGLmersUJGynr6CNh0QWzqgCCl7x6E+VTwtmvmj52GPaTJJrzDKx34syyyC6b\nHwzfpT33xhWhagKEwbdT9HtfzRrEbz82z5cwSvF3X9Y4Lb1EI7BYqMdMXOW3\nmDSJYKbK1owRM81Ny9jkYLDNuUrlGWp972Zgs9f6VDRelHY68mkcYZAcO9Ck\n4wxkcZPqH+M5qWGG//CdQeLfPtr4Z/L0EGXRxgJ4Sd4A/dHQatL23f7fzmx3\nV/52XRGR41FYBFTF9bogI7DdkESN48r/sIU5vOZSbemk3pPqG0LtdkLErBU/\nxxBW50EWiqDVQCiQ8mbfoQMn/X00wMmXYxdRNiY7bD4ainB5Usk889zrTviV\nCI+/QyT9Vx0YpYPSj5IFPnfYCs9+pgYIP1HxxQqIo/0ApWXQj2KyM+VEFcMv\nq5z1Yk50WQ1F55ZU2F4u+OuqivuItzRTm7gtLKU70vC2tYDUyH/DRGDgdTPe\nGfrDyg3X+BluUM0yObrEMO2Yy+vANCWtMb9bCK4rSuxl9ZBkd+CmxKDNFDwL\ncgGeN3d4FA4trwqf9Id+jkHTmOY6JCxHGEGERy5CA62deJK4fdyGo7S+kKBR\nWh9kYl4D7td9FGaQxuCVK8li94MJ1lNz2srWA8qHM8isp5jf+dSNcAcJPvBi\nsv/zARWqkGFMqkKTxH6CwUD6kBFNstM/26hZJ9UtL9V6o0mqPfFa0nq2MzQP\ngXaG81+UpFvLxXC4bHLYIvJKZV7OQBPw1LHs3UuHJ9qFxqK5XoipvwC2TqW9\nhsZ1ERuKBboLeM/ftFUvLJczQa0f1uxTmEwFyQI9P5RGQuabuiZ1tlsWYXum\nyc/IBBhQSD4j7e+NNopFz0IV2X+n0lSQnzz7KMozmivQM2xcXht2vH4A/+LZ\nq9jtxDITeDx7Evxn1Av92Pmg0d5pSu6XGAmOvEd8UiA+pdv2rdVol2EqyHk2\nvYN5EVcSV7vL6S2CvhUFPaWkGg3tD0jcqrpBeaCRJbOTdd6JEjt3UBhZM0N6\nJx7IdcK4wVT5gPKF5nydzvVfaJdHRNxoq1Gwt8hPNE4nuT/UvLEXNbEcmF99\nkkc2yX5+/ZEr+w37Z4Ua/zPYWrPJLF+ezWVfUFnggyRn1YV+bWNigucByNWy\nou37WHr6RsvEaQdnmKtAYPe8eWaozh7tih/OoB96MOV+SXnxrkIbvH1MyTEX\nIvIjwmxX+yjJNgVjk/xTQghm62BfM/SJlUVVrWzsDNW7/QqVuqvqJjNfkFFV\n22si4f3HTgndLMvrfBO8gnBkYGVglB5jGaDPa4E4FdS0xmOMjSCx0+g1P/eo\nLj/+GGdaJHtSZxKM+dmfigBySWNrc+zog7nSn/87TUymNZzBi/n/i3TIhG7e\nqzBSU/Ov8OaPQ3rlIBKgtFTZsRXjHFneilYL43hjx+mIg+LRTW1bjofxAsOT\nj8BQICHVvQHxqSS4JWMPM3CVPgHAUGAmDnP1cu6TvjlyyH7bBLhSxslF0UmC\nCxzt8Vo6OlXrdyz6jYJ0M+Eqh8AmNc13NYpuOisCfmQeuNr2oiRHykcO9i5R\nq8Jdp82Au/e2W33Nua0OZPpXIjRvRGvkmA/lhURLkiNJewVKcAyu3G46oaTN\n1VJnGrOoV1Ft8ApszBg=\n",
    "encrypted_exemplar_sources": "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\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of social media icons\n    String[] icons = {\"facebook.png\", \"youtube.png\", \"twitter.png\", \"instagram.png\"};\n\n    // Creates a 1D array of age groups\n    String[] ageGroups = {\"18-29\", \"30-49\", \"50-64\", \"65 and up\"};\n\n    // Creates a 2D array containing the percentage of users in each age group for each social media app\n    int[][] percentages = {{22, 29, 39, 47}, {41, 38, 37, 37},\n                           {23, 21, 18, 12}, {15, 12, 6, 4}};\n\n    // Creates a SocialMediaScene object\n    SocialMediaScene scene = new SocialMediaScene(icons, ageGroups, percentages);\n\n    // Draws the results in the scene\n    scene.drawResults();\n\n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "SocialMediaScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Creates a scene based on which social media platform\n * has the largest percentage of users in an age group\n */\npublic class SocialMediaScene extends Scene {\n\n  private String[] icons;        // The 1D array of social media icons\n  private String[] ageGroups;    // The 1D array of age groups\n  private int[][] percentages;   // The 2D array of age group percentages\n\n  /*\n   * Initializes icons and ageGroups to the specified 1D arrays of social media\n   * icons and age groups, and initializes percentages to the specified 2D array\n   * of age group percentages\n   */\n  public SocialMediaScene(String[] icons, String[] ageGroups, int[][] percentages) {\n    this.icons = icons;\n    this.ageGroups = ageGroups;\n    this.percentages = percentages;\n  }\n\n  /*\n   * Returns a 1D array containing largest percentage of users\n   * of users found for each social media platform\n   */\n  public int[] findMaxPercentages() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Find the largest percentage of users for each column in percentages. Add\n     * the max percentage found to a 1D array and return the array.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return null;\n  }\n\n  /*\n   * Returns a 1D array containing age groups that have the largest\n   * percentage of users found for each social media platform\n   */\n  public String[] findMaxAgeGroups() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Find the age groups with the largest percentage of users for each\n     * column in percentages. Add the corresponding age group from the ageGroups\n     * array to a 1D array and return the array.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    return null;\n  }\n\n  /*\n   * Creates a scene to show each social media platform\n   * and their largest percentage of users in an age group\n   */ \n  public void drawResults() {   \n    String[] maxAgeGroups = findMaxAgeGroups();\n    int[] maxPercentages = findMaxPercentages();\n    \n    for (int index = 0; index < icons.length; index++) {\n      drawImage(icons[index], 50, 50, 150);\n      drawText(maxAgeGroups[index] + \": \" + maxPercentages[index], 250, 100);\n      pause(1);\n      clear(\"white\");\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-03-27T23:52:46.360+00:00\",\"changed\":[\"cloned from \\\"CSA U5L4-L3b_2023\\\"\"],\"cloned_from\":\"CSA U5L4-L3b_2023\"},{\"changed_at\":\"2023-03-27 23:52:47 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:44:45 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 23:37:30 +0000\",\"changed\":[\"long_instructions\",\"csa_view_mode\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-26 21:57:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-26 21:57:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-26 21:57:15 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-26 22:49:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-26 22:51:44 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-26 22:54:55 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-26 22:54:58 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-26 22:55:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-26 22:55:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-26 22:55:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-26 22:55:35 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
