<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-01T22:18:09.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Write a no-argument constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class to assign default values for the instance variables.\r\n\r\nüéí **IMPORT:** Import your <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class from your **Backpack**.\r\n\r\n*Don't have it, or it doesn't work? That's ok! Copy the code from* <a href=\"https://studio.code.org/projects/javalab/h4lbg9UcoD_RfpS7ytbkncdAliEUrUKZlD5Te_Lribo\" target=\"_blank\">***here***</a> *and paste it into a new file in your project.*\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class, write a no-argument constructor to assign default values for the instance variables:\r\n\r\n   * Assign a default value to the instance variable for the flavor, such as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"plain\"</code>\r\n\r\n   * Assign a default value to the instance variable for the price, such as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">0.50</code>\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FoodTruckRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> object and print the constructor for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> object by calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors(nameOfObject)</code> method.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a no-argument constructor and instantiating objects.\r\n</div>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_exemplar_sources": "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\n8yTYU4aURySB4JdO+9kMfEOAaNWGaPg=\n",
    "encrypted_validation": "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\nJCp4hP0=\n",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Dessert object. Use ConstructorsHelper.printConstructors(nameOfObject)\n     * to print the constructor for the Dessert object to the console.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 1
      }
    },
    "name_suffix": "_pilot-2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-01T22:18:09.614+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L6_2025\\\"\"],\"cloned_from\":\"CSA U2L2-L6_2025\"}]"
}]]></config>
</Javalab>
