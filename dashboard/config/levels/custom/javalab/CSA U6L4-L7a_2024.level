<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T21:04:23.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Store</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to store products available in an online marketplace.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Store</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Product</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Product</code> objects\r\n\r\n* a method called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addProduct()</code> that adds a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Product</code> to the list\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">StoreRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Store</code> object.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addProduct()</code> method to add products to the list.\r\n\r\n3. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> and using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">add()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Online Marketplace",
    "bubble_choice_description": "Create a `Store` class that contains an `ArrayList` to store products available in an online marketplace.",
    "thumbnail_url": "https://images.code.org/cb2c5a4c908c0dc153157559ba7ab64a-laptop.png",
    "encrypted_validation": "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\nfVc/ENhSYbc9WJcPiIhv1Y/rCdtNaMT9+aYAwgk=\n",
    "encrypted_exemplar_sources": "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\ngk9f361xlsujJEfxJgYdVjh7A7/eKjtnfg==\n",
    "start_sources": {
      "StoreRunner.java": {
        "text": "public class StoreRunner {\n  public static void main(String[] args) {\n\n    // Creates a Product object\n    Product prod = new Product(\"phone\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Store object, then call the addProduct() method to add\n     * products to the list. Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n\n\n    \n  }\n}\n",
        "isVisible": true,
        "tabOrder": 0
      },
      "Store.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a store\n */\npublic class Store {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Product objects, then\n   * write a no-argument constructor that initializes the list to an empty list.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Returns the list of products\n   */\n  public ArrayList<Product> getProducts() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return the list of Product objects.\n     * -----------------------------------------------------------------------------\n     */\n\n    return null;\n  }\n\n  /*\n   * Adds a product to the list of products\n   */\n  public void addProduct(Product newProduct) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Add the parameter newProduct to the list of Product objects.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Product.java": {
        "text": "/*\n * Represents a product\n */\npublic class Product {\n  \n  private String name;   // The name of a product\n\n  /*\n   * Sets name to the specified name of a product\n   */\n  public Product(String name) {\n    this.name = name;\n  }\n\n  /*\n   * Returns a String containing the name of the product\n   */\n  public String toString() {\n    return name;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "name_suffix": "_2024"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T21:04:23.125+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L7a_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L7a_2023\"}]"
}]]></config>
</Javalab>
