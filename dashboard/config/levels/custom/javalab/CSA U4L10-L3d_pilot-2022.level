<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-08-23T20:32:19.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that visualizes the number of cat breeds that originated in each country. Use multi-selection statements to count the number of cat breeds for each country, and use the counts for each country to decide the size of the flag images to draw.\r\n\r\n##In CatScene.java:\r\n\r\n1. Write the `analyzeCountries()`(#e7e8ea) method to count the number of cat breeds that originated in each country by traversing the `countries`(#e7e8ea) array.\r\n\r\n   * Create an `int`(#e7e8ea) array to store the counts for each country.\r\n\r\n   * Use multi-selection statements and the `equals()`(#e7e8ea) method to check if the current country equals `\"Egypt\"`(#e7e8ea), `\"Russia\"`(#e7e8ea), `\"Thailand\"`(#e7e8ea), `\"United Kingdom\"`(#e7e8ea), or `\"United States\"`(#e7e8ea). Increase the corresponding value in the `int`(#e7e8ea) array by `1`(#e7e8ea) if the condition is `true`(#e7e8ea).\r\n   \r\n   * Return the `int`(#e7e8ea) array.\r\n\r\n2. Write the `createScene()`(#e7e8ea) method to draw each country flag at a random location in the scene. Use the corresponding value in the `counts`(#e7e8ea) array to determine the size to draw the image.\r\n\r\n##In MyTheater.java:\r\n\r\n3. Declare and initialize an array to store the array returned from calling the `analyzeCountries()`(#e7e8ea) method, then call the `createScene()`(#e7e8ea) method with the array.\r\n\r\n4. Use `Theater.playScenes()`(#e7e8ea) to play the scene.\r\n\r\n::: details [**Show Me How**]\r\nA multi-selection statement uses the following syntax:\r\n  \r\n  ```\r\n  if (condition) {\r\n    // code to execute\r\n  }\r\n  else if (condition) {\r\n    // code to execute\r\n  }\r\n  else {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nYou can have more than one `else if`(#e7e8ea) if you have additional conditions you need to check.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Cat Breeds",
    "bubble_choice_description": "Count the number of cat breeds that originated in each country and draw images based on the count.",
    "thumbnail_url": "https://images.code.org/7ad394dec8c9fc164c5a3c37f8f6b1ea-image-1650719083623.png",
    "starter_assets": {
      "egypt.png": "e94e8860-a143-473b-ae1a-d32c14aaf670.png",
      "russia.png": "647d112c-8af6-45db-9153-90d021104e5d.png",
      "thailand.png": "d21a0a84-c788-4bff-8363-e074a0d6ecae.png",
      "uk.png": "4fb0d7df-a8b5-4978-9681-37f771a0b52b.png",
      "usa.png": "e741c5ce-d939-4194-9ec9-1bdca5e548e4.png"
    },
    "encrypted_exemplar_sources": "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\n",
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "ktq177QCgZmf4LwrnQnWX7pBBqM1FC/7NoQ/ROS3ixojWNLd9yKhT/4fDHBi\n5RipaRmNTIku63g3S4iJeEEMyg39J0bzNYBggvJKLpB2tIzrqlOC8MdEvEyL\ncBd4EmCAaDetxPGc6uKYaO3XzWoABkG0Ni1g8YsCFbAqyZrXzK2a/KHVRdqm\nBskut3b7W+YzPvPRTqTK7AD3Xp2suAb5mYkPnVEyyUiGZaAIqxkM9l+DGSv+\npJV4rd4C5nkNVLkhyJAUzN+ViRP9ZJneSNRFj3psiUcV2CTZ2tS8miFPHc3e\nUHFSD2LH1vsk7S2sshi68mk0LVsnUpxr+dSUBhTKKoemiXM/pZnimynCu0As\nyUl9oskALXaONoEAP7/YkYoU+kgDPH/IhjlmxEeQwnf9kF2f88yB0bY7RhNB\nNjuVFxqbwwqDV7ns36Ado6FR0FwsGmZuQmgVS8/lAjF9HOc+nDS4PxZRjkw2\nmDWBG3hHsHHiG8rTtWCVzIXaEya/GC12U4dOFqMYuio8ju4S4C+cwtZ/MZ+S\nStNdwYauePYtZ1qv/k3RigpTYU2ssV9RRDIvS3OtbsrbCaBbJ8wyGA2MfxTV\nGsEQnWw8LTFufvFiXI7OoABfWNqJLgA9DleuR3NzlBev80Cjv+JAQZ91m8O6\ndd6B5wR0h4sKoeHKcwkgiLVtOeeZcauE3xNZbEmTUb+PNq8+vRFbSCLeWRYn\nBdrt0fd3h4HcdeuD6ZFInoECGCGnsSVzvLaya/ObbMafw0mxsEWd+BCIRzPX\nyqGJKor8v/oxBhXkrEUGbZNdxJsLU9MFLNfjGD8YA591nU/+hdAT9oFMnp6b\ncPKK6vy5gpYBztk5h9oOOQP/KbwO8Lpaf8o+PjJ+4DiNS56AfLjG10UwT+4d\nMNkw7fUtxtOMBU0IRorIuhpI462jb/yofwso1vAciIKdYeEAPrf+n49WvuB4\nzcyCoII/LOCflCPMQNAEYEByGdE9pGYN1XrsRYjhDzJ89abixHS62B0pf/km\nrv8ebU31eeAyyhHG4NdwFh+9n9Wc8u+bsBTQLwHpxIxPSd3LEn9UUarzGe0B\nDdfg1PXcQBzE/R0KREDGbN4w7zK62EopOkYZwHR+kQEpSmJGrbs2rsmACUUv\nu4J8vzjT3/DUr8Sv6OczkmRN9LpXeAZXqBCXdDPz454/QRIh/zUfLmqsnYd1\nbTzGihAkYGqpsRjKAVSaBNQVjuHhjFnpLQ7WY9gYHInv3OWVgaNypFGiiMg3\nwzs68aVRc6Fi5mEMVS07IfFt7BMzCKW7RMhvYYclJxBN1uA6sMnsSiXYPCmY\nTRe9HPOLfpNIIIt26frDtMiMIGci6buE/s6KXCtWRnXjWw0xNHybIi+Jo3Fq\nxi4ht4dJQMi7Gi2oZu+xh6qcvrGgMVQ3CfiazpFgEl9NDy7WS9Xwia9E37cq\nx2BjGCeu2FdYRh3lAG4HsvkcNVRB8l8+4A2TeQdwbfO2yU6yeddNv2igcr2N\n6cuQPbBPJ/QqA9P3knHKiHEyqwrwwHnHH5pTOkt/622OrImMq9Xy6tKIgXek\njyDEZKIApeTQF9PVVgYRpZcCE6LchOMMcav3d5LV\n",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"breeds.txt\");\n    String[] breeds = myFileReader.getStringData(47);\n\n    myFileReader.setFile(\"countries.txt\");\n    String[] countries = myFileReader.getStringData(47);\n\n    CatScene myScene = new CatScene(breeds, countries);\n\n    // TO DO #3: Call the analyzeCountries() and createScene() methods.\n\n\n    // TO DO #4: Use Theater.playScenes() to play the scene.\n    \n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "CatScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the number of cat\n * breeds that originated in each country\n */\npublic class CatScene extends Scene {\n\n  private String[] breeds;     // The list of cat breeds\n  private String[] countries;  // The list of originating countries\n\n  /*\n   * Constructor to create a CatScene with the\n   * specified arrays of breeds and countries\n   */\n  public CatScene(String[] breeds, String[] countries) {\n    this.breeds = breeds;\n    this.countries = countries;\n  }\n\n  /*\n   * Returns an array containing the number\n   * of cat breeds for each country\n   */\n  public int[] analyzeCountries() {\n    // TO DO #1: Traverse the countries array to count the number of breeds\n    // that originated in each country.\n\n    return null;\n  }\n\n  /*\n   * Creates the scene by drawing each country flag at a random location\n   * and the size based on the number of originating cat breeds\n   */\n  public void createScene(int[] counts) {\n    String[] countryFlags = {\"egypt.png\", \"russia.png\", \"thailand.png\", \"uk.png\", \"usa.png\"};\n    \n    // TO DO #2: Draw each country flag at a random location. Use its\n    // number of originating cat breeds to inform the size of the image.\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "breeds.txt": {
        "text": "Abyssinian\nAmerican Bobtail\nAmerican Curl\nAmerican Shorthair\nAmerican Wirehair\nBalinese\nBambino\nBengal\nBombay\nBritish Longhair\nBritish Shorthair\nBurmilla\nCalifornia Spangled\nChantilly-Tiffany\nChausie\nCheetoh\nColorpoint Shorthair\nCornish Rex\nDevon Rex\nDonskoy\nEgyptian Mau\nExotic Shorthair\nHavana Brown\nHimalayan\nJavanese\nKhao Manee\nKorat\nKurilian\nLaPerm\nMaine Coon\nMalayan\nMunchkin\nNebelung\nOcicat\nOriental\nPixie-bob\nRagamuffin\nRagdoll\nRussian Blue\nSavannah\nScottish Fold\nSelkirk Rex\nSiamese\nSiberian\nSnowshoe\nToyger\nYork Chocolate",
        "isVisible": true
      },
      "countries.txt": {
        "text": "Egypt\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nUnited Kingdom\nUnited States\nUnited States\nEgypt\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nRussia\nEgypt\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nThailand\nThailand\nRussia\nThailand\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nRussia\nUnited States\nUnited Kingdom\nUnited States\nThailand\nRussia\nUnited States\nUnited States\nUnited States",
        "isVisible": true
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:32:19.482+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L3d_2022\\\"\"],\"cloned_from\":\"CSA U4L10-L3d_2022\"},{\"changed_at\":\"2022-09-22 20:26:51 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-22 20:27:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-22 20:28:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-22 20:28:24 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
