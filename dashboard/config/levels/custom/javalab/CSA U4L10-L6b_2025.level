<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:55:26.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Internet.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getCountsByGroup()</code> method to calculate and return a 1D array containing the number of countries that are classified as high income, lower middle income, upper middle income, or other areas.\r\n\r\n1. If <code style=\"background-color: #ececec; color: black; font-weight: bold;\">group</code> equals <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"High income\"</code>, increment the value at index <code style=\"background-color: #ececec; color: black; font-weight: bold;\">0</code> in the array by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code>.\r\n\r\n2. If <code style=\"background-color: #ececec; color: black; font-weight: bold;\">group</code> equals <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"Lower middle income\"</code>, increment the value at index <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code> in the array by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code>.\r\n\r\n3. If <code style=\"background-color: #ececec; color: black; font-weight: bold;\">group</code> equals <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"Upper middle income\"</code>, increment the value at index <code style=\"background-color: #ececec; color: black; font-weight: bold;\">2</code> in the array by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code>.\r\n\r\n1. Otherwise, increment the value at index <code style=\"background-color: #ececec; color: black; font-weight: bold;\">3</code> in the array by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1</code>.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawResults()</code> method with the 1D array returned from calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getCountsByGroup()</code> method.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing multi-selection statements.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Internet Access",
    "bubble_choice_description": "Implement your algorithm to create a visual displaying the percentages of users in each income group that have Internet access.",
    "thumbnail_url": "https://images.code.org/bb795f4fac0d92f63dd612fcbdd2807f-internet.png",
    "reference_links": [
      "/courses/csa-2023/guides/multi-selection-statements"
    ],
    "video_key": "csa_multi-selection_statements",
    "encrypted_validation": "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\nhlcoM+A=\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of Country objects from data in text files\n    Country[] countries = Country.createCountries(\"names.txt\", \"groups.txt\");\n\n    // Creates an Internet object\n    Internet scene = new Internet(countries);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the getCountsByGroup() method then call the drawResults() method\n     * with the results.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n\n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Internet.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Creates a visualization of Internet usage by income groups\n */\npublic class Internet extends Scene {\n\n  private Country[] countries;     // The 1D array of Country objects\n\n  /*\n   * Initializes countries to the specified 1D array of Country objects\n   */\n  public Internet(Country[] countries) {\n    this.countries = countries;\n  }\n\n  /*\n   * Returns the 1D array of Country objects\n   */\n  public Country[] getCountries() {\n    return countries;\n  }\n\n  /*\n   * Returns a 1D array containing the number of countries that are classified\n   * as high income at index 0, lower middle income at index 1, upper middle\n   * income at index 2, and others at index 3\n   */\n  public int[] getCountsByGroup() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Traverse the 1D array countries. If the country's group equals \"High income\",\n     * increment the value at index 0. Else if the country's group equals \"Lower\n     * middle income\", increment the value at index 1. Else if the country's group\n     * equals \"Upper middle income\", increment the value at index 2. Otherwise,\n     * increment the value at index 3.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    return null;\n  }\n\n  /*\n   * Draws the results in the scene\n   */\n  public void drawResults(int[] results) {\n    String[] colors = {\"red\", \"purple\", \"green\", \"orange\", \"blue\"};\n\n    int yLocation = 50;\n    \n    for (int index = 0; index < results.length; index++) {\n      int randomIndex = (int)(Math.random() * colors.length);\n      setFillColor(colors[randomIndex]);\n      \n      drawRectangle(0, yLocation, results[index] * 2, 25);\n      pause(0.2);\n      yLocation += 40;\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Country.java": {
        "text": "/*\n * Represents a country\n */\npublic class Country {\n\n  private String name;        // The name of a country\n  private String group;       // The income group of a country\n\n  /*\n   * Sets name and group to the specified values\n   */\n  public Country(String name, String group) {\n    this.name = name;\n    this.group = group;\n  }\n\n  /*\n   * Returns the name of the country\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the income group of the country\n   */\n  public String getGroup() {\n    return group;\n  }\n\n  /*\n   * Returns a 1D array of Country objects using data from text files\n   */\n  public static Country[] createCountries(String namesFile, String groupsFile) {\n    String[] namesData = FileReader.toStringArray(namesFile);\n    String[] groupsData = FileReader.toStringArray(groupsFile);\n    Country[] data = new Country[namesData.length];\n\n    for (int index = 0; index < data.length; index++) {\n      data[index] = new Country(namesData[index], groupsData[index]);\n    }\n\n    return data;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      },
      "names.txt": {
        "text": "Aruba\nAfghanistan\nAngola\nAlbania\nAndorra\nUnited Arab Emirates\nArgentina\nArmenia\nAmerican Samoa\nAntigua and Barbuda\nAustralia\nAustria\nAzerbaijan\nBurundi\nBelgium\nBenin\nBurkina Faso\nBangladesh\nBulgaria\nBahrain\nBahamas, The\nBosnia and Herzegovina\nBelarus\nBelize\nBermuda\nBolivia\nBrazil\nBarbados\nBrunei Darussalam\nBhutan\nBotswana\nCentral African Republic\nCanada\nSwitzerland\nChannel Islands\nChile\nChina\nC√¥te d'Ivoire\nCameroon\nCongo, Dem. Rep.\nCongo, Rep.\nColombia\nComoros\nCabo Verde\nCosta Rica\nCuba\nCura√ßao\nCayman Islands\nCyprus\nCzechia\nGermany\nDjibouti\nDominica\nDenmark\nDominican Republic\nAlgeria\nEcuador\nEgypt, Arab Rep.\nEritrea\nSpain\nEstonia\nEthiopia\nFinland\nFiji\nFrance\nFaroe Islands\nMicronesia, Fed. Sts.\nGabon\nUnited Kingdom\nGeorgia\nGhana\nGibraltar\nGuinea\nGambia, The\nGuinea-Bissau\nEquatorial Guinea\nGreece\nGrenada\nGreenland\nGuatemala\nGuam\nGuyana\nHong Kong SAR, China\nHonduras\nCroatia\nHaiti\nHungary\nIndonesia\nIsle of Man\nIndia\nIreland\nIran, Islamic Rep.\nIraq\nIceland\nIsrael\nItaly\nJamaica\nJordan\nJapan\nKazakhstan\nKenya\nKyrgyz Republic\nCambodia\nKiribati\nSt. Kitts and Nevis\nKorea, Rep.\nKuwait\nLao PDR\nLebanon\nLiberia\nLibya\nSt. Lucia\nLiechtenstein\nSri Lanka\nLesotho\nLithuania\nLuxembourg\nLatvia\nMacao SAR, China\nSt. Martin (French part)\nMorocco\nMonaco\nMoldova\nMadagascar\nMaldives\nMexico\nMarshall Islands\nNorth Macedonia\nMali\nMalta\nMyanmar\nMontenegro\nMongolia\nNorthern Mariana Islands\nMozambique\nMauritania\nMauritius\nMalawi\nMalaysia\nNamibia\nNew Caledonia\nNiger\nNigeria\nNicaragua\nNetherlands\nNorway\nNepal\nNauru\nNew Zealand\nOman\nPakistan\nPanama\nPeru\nPhilippines\nPalau\nPapua New Guinea\nPoland\nPuerto Rico\nKorea, Dem. People's Rep.\nPortugal\nParaguay\nWest Bank and Gaza\nFrench Polynesia\nQatar\nRomania\nRussian Federation\nRwanda\nSaudi Arabia\nSudan\nSenegal\nSingapore\nSolomon Islands\nSierra Leone\nEl Salvador\nSan Marino\nSomalia\nSerbia\nSouth Sudan\nS√£o Tom√© and Principe\nSuriname\nSlovak Republic\nSlovenia\nSweden\nEswatini\nSint Maarten (Dutch part)\nSeychelles\nSyrian Arab Republic\nTurks and Caicos Islands\nChad\nTogo\nThailand\nTajikistan\nTurkmenistan\nTimor-Leste\nTonga\nTrinidad and Tobago\nTunisia\nT√ºrkiye\nTuvalu\nTanzania\nUganda\nUkraine\nUruguay\nUnited States\nUzbekistan\nSt. Vincent and the Grenadines\nBritish Virgin Islands\nVirgin Islands (U.S.)\nVietnam\nVanuatu\nSamoa\nKosovo\nYemen, Rep.\nSouth Africa\nZambia\nZimbabwe",
        "isVisible": true,
        "tabOrder": 4
      },
      "groups.txt": {
        "text": "High income\nLow income\nLower middle income\nUpper middle income\nHigh income\nHigh income\nUpper middle income\nUpper middle income\nUpper middle income\nHigh income\nHigh income\nHigh income\nUpper middle income\nLow income\nHigh income\nLower middle income\nLow income\nLower middle income\nUpper middle income\nHigh income\nHigh income\nUpper middle income\nUpper middle income\nUpper middle income\nHigh income\nLower middle income\nUpper middle income\nHigh income\nHigh income\nLower middle income\nUpper middle income\nLow income\nHigh income\nHigh income\nHigh income\nHigh income\nUpper middle income\nLower middle income\nLower middle income\nLow income\nLower middle income\nUpper middle income\nLower middle income\nLower middle income\nUpper middle income\nUpper middle income\nHigh income\nHigh income\nHigh income\nHigh income\nHigh income\nLower middle income\nUpper middle income\nHigh income\nUpper middle income\nLower middle income\nUpper middle income\nLower middle income\nLow income\nHigh income\nHigh income\nLow income\nHigh income\nUpper middle income\nHigh income\nHigh income\nLower middle income\nUpper middle income\nHigh income\nUpper middle income\nLower middle income\nHigh income\nLow income\nLow income\nLow income\nUpper middle income\nHigh income\nUpper middle income\nHigh income\nUpper middle income\nHigh income\nUpper middle income\nHigh income\nLower middle income\nHigh income\nLower middle income\nHigh income\nLower middle income\nHigh income\nLower middle income\nHigh income\nLower middle income\nUpper middle income\nHigh income\nHigh income\nHigh income\nUpper middle income\nUpper middle income\nHigh income\nUpper middle income\nLower middle income\nLower middle income\nLower middle income\nLower middle income\nHigh income\nHigh income\nHigh income\nLower middle income\nLower middle income\nLow income\nUpper middle income\nUpper middle income\nHigh income\nLower middle income\nLower middle income\nHigh income\nHigh income\nHigh income\nHigh income\nHigh income\nLower middle income\nHigh income\nUpper middle income\nLow income\nUpper middle income\nUpper middle income\nUpper middle income\nUpper middle income\nLow income\nHigh income\nLower middle income\nUpper middle income\nLower middle income\nHigh income\nLow income\nLower middle income\nUpper middle income\nLow income\nUpper middle income\nUpper middle income\nHigh income\nLow income\nLower middle income\nLower middle income\nHigh income\nHigh income\nLower middle income\nHigh income\nHigh income\nHigh income\nLower middle income\nHigh income\nUpper middle income\nLower middle income\nUpper middle income\nLower middle income\nHigh income\nHigh income\nLow income\nHigh income\nUpper middle income\nLower middle income\nHigh income\nHigh income\nHigh income\nUpper middle income\nLow income\nHigh income\nLow income\nLower middle income\nHigh income\nLower middle income\nLow income\nLower middle income\nHigh income\nLow income\nUpper middle income\nLow income\nLower middle income\nUpper middle income\nHigh income\nHigh income\nHigh income\nLower middle income\nHigh income\nHigh income\nLow income\nHigh income\nLow income\nLow income\nUpper middle income\nLower middle income\nUpper middle income\nLower middle income\nUpper middle income\nHigh income\nLower middle income\nUpper middle income\nUpper middle income\nLower middle income\nLow income\nLower middle income\nHigh income\nHigh income\nLower middle income\nUpper middle income\nHigh income\nHigh income\nLower middle income\nLower middle income\nLower middle income\nUpper middle income\nLow income\nUpper middle income\nLow income\nLower middle income",
        "isVisible": true,
        "tabOrder": 5
      }
    },
    "encrypted_exemplar_sources": "lo1iEzMPoAYptp0qGaK82+4E6FRLE8rYFnEupPVKDZKmhJAbBkKYpm3sqgDM\nTdCC7BwCR1mEttDOx3tNvTJ+3qmwiaridhBdew7H/TQMe75PosL3NSxXGpo7\nIAuyQ2VEkmdsueyKc5QDShUQXMQX1XnVi6hrEshzH1xspHtdjEomXlpfWw83\nk8fbU2NDAMRQcN7C6GQFYhrjLbStIkCgWcvc4ZyX6KubvYxFeG3R+Qva+jWx\nrPS+n0Iu5nmB2ZYQ1nYWkuAw24xGeOSKWTVj5m/SZ814kH9WL4FFAYvxhqVJ\nT50GffzwPre/e5QmdKumtAB8Do5YP777swTkSW07m9hqsecudDz4xisfq6LJ\nToyl0PfK5izilt9Q+Omx+gfiUxunGAKlTgPH5MJHhmbfsu2Elr5YHQLBzZNS\nDGwjRJxZd+A4r1FZ1fp20ZR+yK/My/9R47LxQDJnD/+QAg0E/AdTFvt6MUfI\nSfOO8O3v8jLzbPXm+kFi7/Z+kFyiqzRjkREGlH9QGhS9pFlgNnpxusnVOP69\n+eRIKXksYg5rFacbeSJ6FczGhLjUV4INojafLMRYwkibcoKcvhdK2dOUuv4w\nU6cN5fkikGuILTwJCtCQpOgiwLsef8wKLbWdkGHRaaWW8LfE7rMRBHX2YmzX\nGYHqZHMnerWUafdOyoPJI1ksM9xAzJoWopyzJE1aeheunHSYTjDg22JKN67Q\nqDrhkLJ+xWXVzBVw4mZeIWMVEqwvqbt4Nwf2TWaESpQEoL7SIc4rgVQX61zQ\nM6MKoZpx6lGOfjtBNlPl4pgHAoJe5Q3OlG+i1DzZgH6PVkVM2kxMd0+6pBY6\nU2bWSedlH/eNBRwUwuYOkt/QfbTgW1c9VnpAFX3AB1tyRVjZkeT7SMXeGfIX\nUUsw3hh77JdAd2f7ZxEqxLTBz8tWFquRK+MA6Zuc0L2FEdiHjlj1oTxW69b1\nCIL3WVRXvBAjwXQJp6J6rb2vGXyjhRkIXuIihGxrmihGpSsJ89T2qxTZHb8t\nUMy9jvBVugB9xOWasr9ThfBijhhMQPmf7Pq+6KITvSJ2w5NTVQptT7HsWofR\nESfsx1Oj0krYAspFlEU+ToAd9aRte1UcjoRy1EzpVb8Uct/b+2prjYTH3blr\npHIu+tP+6S3e0cU3aA+acF1TWRM7FkRuS72HhKDWpt6k0x62zHmvGJZW4fyE\nVaa3Cfcwb1h1v+mqnfq2ngp5W6J0pW/3dHa817Mc/LX06BpBsCNumxX4PzGm\nJmyr58vKqS2Eee7TCTVWUO/jWt6DkGb6LjjbrYrrGtjxuwPc+dn2AoGjszOd\nA7hiR2XZAwFrEZ3OddYxgs36YwXXBAU5UlSvpCWO3PhI5Kx/R5/thikZKHyD\ng+8waWCkLJoUWmLpcFYh0M/5VMVZMbJ+MlWbxyhz3fCvbhHFceYOqUmnP7Sr\ndmwl/GDrApziYIHnVH0LHMeoVrU5sp5LWUGLUEDUZNbVyQbCWNjA+CS5wBuL\n2Df6TggYeMNBh5R34p4K2gs/ZlhymIO6Cv8qeL7GTm1tLp3lRVI+7cvdZvEF\n3E8b3jagWI3mmBbNl0GoYQk45wHk7aC/B3efoZG2Up41e2VXb2Jqg0cYeQfz\nxXnw8Q3JHu1aEG6yLwPXsyjRhIdTTLfC3SFxjBjgCMhG0AbYsr1idcwxNKKu\njSWt6Yh5hdUSJeSj6IjANlGsugG3SifVoNBU1foWHjTehSzXui9XcQPI380Y\nvAD8uVZCudZBfgguD5zI3Mfr0E72EkUJXXnhnGiBkC9FIubN0dW26cSR/ob6\nJpD+2+jy2mWI1lgCClJmYr8rYecBQWwrvDGNybIgqkwgYbE4KVu0ALaB4E8o\nD+af59VHemjfT4hM9S1WkWC3gO3495Jdh36FYxh4l52CJYcAvLV1tUII1llQ\nzkbOYvF6hSCyZlFN0+5lnsJLqblf6b4fTjvYdpiG4zry0rdCRSljlQJ6EoYK\nekwJuH1B4FuDgBFbOMd97YqBZio/25h6PdsoCMGJGT7lId+4zqK3oN4po92u\nQKiAEVlL9/NkSZ9Ah8W5kC/A5GspRjG3vY/m3FbKvnwAfJi7wDjnxkLjqUI/\nklKXhxoI1dWEvZLCpt4gcxLHUvIHFux/6qzJru4glFI21SXw2IYjDU6kB4XL\nwx/d5V+YY44dbys+m0cl8Ax7+5HWwHZ+7Gz4LLmQRHDy/OL5LLk06E4HxU9P\nNDALBzTYBAY+r7WCeVwE1O/5V8ggP8laYxWpTfhFOCsCdE2PFkwb5GqupmHd\nyyKOyxaaaZg1zSCcmQGibVp2+fmf93zPJQFaf7ztw9nwI+er2aWGou6JXUIw\niynpP/tUjq151zJ3HpDhYQm2F7AWuTsIr7axUO1HncNXSQVulE9nKW8MOLoJ\n23DakNbHELUZihBu5rTsDs0LGea3sbzv7jZQbJul1sn3VA6PlSDXpIdTzIof\nMMRBUwAviCnzdhGgSNp0rxR+NQRTDpWU8bVkHvSGxs5vAy9dZZnZqwTIyAmm\nOAepMyBj8elXYyDBw6W+fdlHBFsKEuMCs7YUCNItkKy3Tn0ZqWGLUJ5yfwde\n/dj/2P7AESY3BOoaHzNUQciK7YU7uRG++To8+6O53zsmcLS9ZtNB99YHPCPI\nwjEooIpUVyOA1lKc5od0ilS5ZBlFDrJixW/RCrtGs37wIfO/1T27iZYrEIgQ\nSApl8BacEBXBZbkWbiOMigyKurtOV+zWhnlk55fATVzqZqcMl5muP+50Tf5y\nxsgbmG/NVv6MjiPnwaRdG8qwuDWHPDKxNY1Q5FgqHEGEIvTZU93vJZCk3n8q\njJLMl2njVC8BUiVDYjWBQD+51If8c91ox82FxV7ibmzjdSIE6L4GzUzDv2G8\nz/nam1yWa8ZqL1K9If0ZuugaadltQNo2+vnY/8/jZJ/+yRLHECg5S5zaP0jJ\nJJEN9N9sqDR17T342uBZQA8rOwq3mae5f8LSSjd4ZZuvmDIN1UHq8GRlL62Q\nWcqfPC056DFpLABG8Cc4fA64aLkyHdMpwVJ30ZgdrUZ1oE6aITsWXwE4Ls6E\nM3iI2sbZ8ZxlwdZJEu5NPJwE3Q619csZxrHmZdrbSZudit34Z+GL23ZiRkkN\nK8sANxfUPhzaxQa/dBhFW4wogkcgWmaWZmNtMuKK2vRVo+GwnddaN4VcWPbO\nQsQ6+u5O8p5I48wWDxFZHFizltf3WSmb0W9UXFZ/evqiXgH2KHdoJ7E+5/ov\nIPdBEr0klQsYaoEoI2wGMXGez+mF+F0WM/4/epDe4Xs4LYlnZIBhw8l/8tpa\nQyiF2lZmNggv4RVbE08VL4nSy8CB8wjBASdY8hNno+3VdfHlw9RSZc1vbtWQ\nKhJwqI3b86f+8IDNgdNl0XTInf81ABSGFafP2T5G0fIJrDhZwRtZz4heoL/5\nC7HI4cyLedFNdrRHPPndy7BVjcfEBmro25Jxmu5orfxQqCCMb/z0As/OP6dS\nQwMteS0bCxkcIJRUaBPf0adKZR358Ct1RaZkhnGcALWx7oIX/LclTNDN7ADK\n9t+zs6SHcgO7oJ3FK3QNBBZS7R3mBz2+IZULfPdWMMnLSiCzprGqLjfzDeJ/\n6qyXk3wLdUkYqlDqo3QhXfBa1XHxZx6BA1zX2Dk4W9jcAS+OGB6R9LVP98n/\nxrwIU0bFjsZ12DItRRgb36zJKM04KsUaDCzuhVZaY8r5rMWaMmsIzAfbfTOd\n5fyfxw8iH34o0/0rMOhyGPoszGXB7/NHRpm0dXIf+rmP2iNCQzbO6riRXgbb\nFobSXdxiFfvX3QTP4kXu4YY+mZ24QcGykTMUfiwT+qiJD7Wm8x3q08RJi4ZO\nXIXQ9RNGcR93OBd2JUnBqLz3hiTx6WGvkpvdRLNiLb4fHCKM98joD0UVnv9X\n/+eFvtzJsWkXVJilvcB8wq0oIUsdUpAZBwdMTB8QCXluh9UarciwB19uACM8\nakm+cLAzWJCrj6F5S3VkyXChu1AKxeGNecfjRBRKR48ZEmXtdgLPFcAxfQqY\n8UvGmLB5JIXypDcl7wODrdYiqrLlNrqpDhnbJE24CzaTtXoFcnDmCP8RReQY\nthuw9IbTniBuZQllGIWIB9xyfAJmiSyWHWF07AZI9e1Y3syR/oNgw6yqHKZU\nfoDeEfAQRbJtsbkptN9XPooidGdDwz39mdV0BmItGIR5AYioc5BK1KAxjqja\nSQCjWfmn8f6Ypvur+FwpnqnFc4Bi6K0RAURF69FCF7oqVSNGyTH62Ojgib9x\ncxPQG7TnAX3SN7/D1UT8wUkpj7EIb3MGxxqn90ro1BXK2fIrAr025atfxMUC\n3YRurch+vy0vwjwkHDivkWrR9bRIWY99cmKbN64wMGfpeas3x3w+uY/m1hK5\ng4l4jElkfOyIecP91IIga+sRSFZFMFz26rRFGEYtcGHfjWMfmkexE7e7ZZlJ\nF1T0AWAAW0g4OPHMGRkgfP6KMlEBQ+ec+xz5gGivu8+zDdwpZdZflElKBfAx\n2GdZxql70o6zO+l4I2Yn2gKvJZ2A2hdirUa9W7TaZy0KHPHLOU+WLZsW9SSu\nI7PqX37Vk/qQGRFZ9o3E1IL1fNK76KJEUFmV4CC6pl9riAEd9QQ5dlw3qmcp\nRGce3lW6tu/dnc3+VPUKRv+B/TU3aKz3KsdfTDipK9AMvGlZpdOyz9vT4uBK\nyjRRQiU/sNZuFsXr/nxepCtCBlK+vDlfjFyylrAGQ8HyLQgJMN1WsNfqWNxt\nxbny0f2C2uZ/Erwn3lIWqIqRmtNWqkXCwVNNTb5a4a7VT+dVZ8EcSPr6pV1p\nRoR0bJ2XNkDIW4X5i9ZOSd0c6wFTM7ze8BUYYU4KfZL8RVg70JhCaqUWP1zC\nk++L20hA4Ttc4US8piwUOFBAwCXJwzlFxWvDNlBeBeKRldIK+3ERqSHLABkl\nB6NrH+zJ1Hsr7O9d8UtxWxkn8ujkRECRUqGUn8hWv86a+f7VF495NLGTB9IV\nksFuBXKMvBZhJZXYBmhfPLexX8mFSw1nJEIi3EXsyCCi54NT7EHEhU6z2SCg\nbyQyImojI8z/bI9w7c4t7BjdLP+83fdTcBhfHfyHegcSVrhTK+Q1czD1tgy/\n8pd54J3kcuoC3e8X9MxXmYJUhx0azI3SOl5B0uSqOEf4dZnY7FMxzw2/4Okc\n0Wimt2SVK2aQ7nEK0jq4GyNBBdF8+IbN+HleGsVJmjTPYZ837OXmkAzw3sXn\n5S97rmf7zo8/Tqq6QkjOlFZOKC52DBpNUle+490LmfgxAa4fzLVHeFa3rCXn\n+M9vG9de48MEF0MI8JVA1ySF18v0WOI6Bn3N+a7ZKHkFT/1vDYqFp3VK6TCA\nfP97yTQac3JO6HrwDirkRTz0wXF8XRYRd+21ZJ0AcZpRKNb0wnC3RG60bokW\nqJ/USksIq3chy7wgaUUgvZiFJWtewF7C5Ks7NBnbDEAXOFasSyuvmSWHfbn6\nt+wOh9HNR3mXBAQnZIOdy+ScYuUZUos3qManTayTj6dnpxCaTOIK9jaQBMWp\nAsJ9vGA2Lg+iCKvo8LoYVAm3zkmnF4vW12bG9Kq+4pwHL+AuJeB96E0mg6Pn\nmhCjtTeQDu0SLuITKIN00lKRXh24vdyIFKHhxTE3CeiNUZauU7ZTPiPC38u1\nDTF1+N/K4VmQ+FsGZKuso+G7fsukh3IxazVMwazZe+r6M2anaf5qXWQ43HOR\nR7gGAJI7XPYA/o1Hbyehcfwoqqsn5hhRVb1iSGv55Yu3Cg5cxFSv6QlLX/Zt\nH2L+Tr/WRRJHlv+ZISvMo84KBY1oLkQXkod+9ZnNfN1BtYa2joRZwrwtfjri\n/i7pM/+1m0ycnRCc1dK/9rLxdoNul78F/3MCLV/SjLOQoSBR51eTO/wrjnT1\nTN0lRrtIRka7EZz5k0RogFh/nsEg6FVtD83X0NU+DauSUSSF9742dDyTaJEM\n6PCvxnRCVfFnHRwDWEq0W1IMIReMPwBb0qVTt/XiY9FKt/niilq464mbA/QB\nreEjktUUyVhVgJrWZ2qJB7wJH7sVGJKiHU4adsozi3q+21A5WnGA03bnhsIY\nAbRio7s3Ym8dck/tomE1qClJx4PGCogLjEpoNFUfhvnBbxxmTUYBLiD58Uli\n0AoA1MsgaAmWwGgap44VFN4FviVtOo97vplpHUKwhSoZYfnxCriWyHBjolhm\nhwm6t+TVU7MAznI+VhzbDDBZqGhfVrlHfzHtfIzTI8n6vjzOuV/wlzqjEAAY\ncw2h0Dc+ZwEtz/llCG0cbmqoeio20+RfqPjdsuD5lRVTuMAhn0Qu4Kfu4NeB\ndsZisxT8oAsx6Y/v8Q6sTQsxSj9FnwPfDwHv/xCQ2WCHvVENYuyobCcluSZG\n3/ZYihFyRUPjyQEMQbd7hL5Lri/vs97LW9qEXekix5HMXZl9vxYShl0CNzXI\n3CaWsG2C8UmJra2bKP3zWLI8OEHL6ID6kEi5zlacG+QUVp95ttQDnZhJcv7R\nrFx5BzqvpizZJDuX1NkDeNPHl0lDwAFAr9z7ru3WNoVnX4VEGmPPHwZzaDAi\n5MtL7QekfynUVjhYZE8wqG3DmzosoDZlYVkEuMQ71E2N5Ei4s9s3gAM/Zm+T\n3V6Y9MD5sfnVzo6vH1pHfzUFR/h8ZNEJKJlyzFBzcQd02OjLhIWlScV3KToA\nE0BUmd7ZiWjiswcudOuhDxRi4XSsRSa7I0WgnqaqqNFDndp4sJHJqegAFIQT\nWkYvIuDApmTCA+H59Dk4v8YzPOf5t72AwfBWfLxoAY9eKD1c4fngn+vXPXcx\n1g/wyON8f3N655G2qfzvFJhbwn3EUTbICdSrLb5XcRSZehoj4QyoYPbOBV33\npZCPIOMgOpAHaNCN0ZvsAARHHe2czkUe/fcUPHzzFmU9cxAcmszYn+6bLgLm\nGbNoTejQztR9abuULHLPxUWsfoosWx/P6Tjv+AJyvbeMXFcNkmJqDvxFKdiU\nYkXZ8MODOe9UVcjHoT6Bterv0LNozxzpQG5yFRYjE3Z+hkgV4KgPC9G5+gDa\nr52n4r7CBgEbrA50VWPDOLBrIcaObupTorfTzsMj+QHQ9Eab5KfOE/uYtBUq\nt8DVYPnN+SwOyj/pK78HGoXd3IQ7ivTARcSDm3f6yzTltQdiVlAD+AmchbSh\naSJT0TpU9aEu7DalpCUW+A2WevjaFzF6rRtATgPzeNChechjqB/k2spQV1E6\nw+0C/nQ2t0nKLpnOVay08TkTgdcDHcLVCWRmKuvt96CVVjwcPzuH1gfoOE6w\nHse0IlQicON9+1kXiBlqICDA2UFJRuqo6pZeNe/ViLxmcww/Tl7pWof6+zi4\nybySnHhwLglxLfIvo7X5HJZRbhNChTPQrsCCFon4ufhxx9iDATxQ1X40djfV\nSOr7kB9oU4HI0+c3iKcv2yE/USMvd29W5Soxres4QBGV46C+ID5N6q7yipHw\nwXlgvF9BKb263ZPHr0PhIiHwCKEexFbhX347vgtCsYGLyJx+E/sUoCw08Tl0\n8XnC9rEq7OCoaVgS7+NjvBXASVBNL3s7HjFKorBWhjbq/yCe21zmsGWpYjEt\nYRmx59H9viQwBlQ9SDVqzmwFXp1tsC5zL2ZEtZkMj5GZr8De12tEJ26McRK5\n2iuD6sUxh2mBTSi9IwjMmUEyJPyuXXqdEWQJ4wJ4GC7hf8FeL0Az+QncL4Mt\n9NDRXNACpnNhC8X9cpuiFGqpzkdemMRaDJZM7di6WAHzL/jGXBRzhs6X61zq\n8m/VTcoQSe2COQPPk/P+xZt2BDNhtuPoWgeocNBOOdxJKxoo5/rQGW+1RAzL\nvViENSyjzguCnLGyRgaZsswmYR7hxWVn/Tu9YHOcjZvv1lV3rrwrH/i05hV+\ntez1pWzUNKnAcMvbpucBS46CwnEkGMsBDaA8NaiifEUI7h1WzEJl9WlzEqu0\n6BGuysvm1839emxW9ZS+F/PfOtVRxSuOCr6DH9+L+h+u97gKFy4pIygK/z72\nDHzAhp+T7MzfhZJUsQt39MHruXZTkJB1QsO09VzVi0Z9gripM6/XBD36/Cqp\nH3p0MNKgr/T7q765G1aAuI5Ezinj9BPyrbbJ0HPl0Dhd4pUKFstg5iO6wFq+\nX4171JLRYAhLhhzsihVx/pfjkVmOtqtyh/rxo4js3pkuCyE+iEx+lZD8q7fN\nT3F3mNTk7nw+kWp66Wq1JmPdeA5dX/Usw6eGUnYNmx3Fouv6ns0wqhnA5Qph\ndhzFLPVjgf9u1IuzSE8vxCawHyRz9hSpTOaprrrbNjLTCnB01J/uzpf5F/jA\njwDv981Zl43plcl80weyh40YV3ZcTOO782Pq0UXuRXB9iz8tsnjAB8ZztdL6\nnLVy+tAxeqx73FeenuRchgN6EcLUSfuXypr2c2qaR0ugf5d5vzmPewyRXdzx\npwafmjsVx49LHWsVOGdOwGBgU6hXCGORca7+Eb+r66HrF6DWT0D0npEGJ3TU\nqSMUneuRkwbZf2CnbqNL0mME67jAnXgthlhntdhCpZBrB8B0sGFsqgF5aXO5\nwfbjN1HhlpwpePuFUhZTd2Vn6DFTHrMoORNKEaOKRTu7EO95FzyebctXHYUL\n9PTL4FlNPgnuI4GAq5fJ3WpkAy9hxVmBvcIKDUpxTXdO8rmM5AGIG1VZ3pBL\nqaoMZUu7sco8rmaBQEAczQqvGMry8CODL2oD6hlUYptJjXcp1G1D32sgpUKf\nfDf75+TdgzQv6+9KAtpOhd2ai6G1BRyApNPduUYeB68LaduA36vXDAb8Y8zN\n71+8fLIROmTCVFl0pV1ME6KWJGjswHaHFc2xp0rQvKzHiz3YfQyJjpdsvr85\n54jgBy4iSPIszFrbk3wdUblDIQIeah410D/pxiF1IVSoJ1ciPCc8ZuK4rrtH\nzQEMn5QlAUZk/RgnkatDE0iGbDa3pI+b4S9yr4xkgzlTp4l9bB1kOQXs7EQl\njFq7Hpcp1DxY6h06q1L3RNWggAnlnV5VXAOFGy/A+MZ/ACAnK8eI15BFiLPs\nCKGiU0fEIEOHb4ObH1D9C0lrqcvWjuqlxisG4PqCy+kHXDiWxaKBkSK+NQ35\nfCoPp+48Dj1E8OtrF5mXtXRM7VTdrmK7BJirxwGhLN+A5B8aBHJt61r8KHVs\nm4culWPXopEimmvwz1dkARTk8/RHPUZshtgvfTQvLB+fU6M1NKetgBx7dD2X\nP+8unQLQmOLzGB0T919TMhCbI98DkSB0V8LdB2Q8tXsLeeBEC2NPjL7kryZT\n3kogpnjltzCSXkYphZC4wMaYQJzPs7ixE6I1xGst2bw7r4HRcnUEAWKi5gzG\n7pw4JWmCXI5QTPKn6RXNSJf4+NpnIY9h83QqvwtY1lDPeXXoHsCorUtJmq75\nIxkXVdH+nHEjj4Nhepn9hhHGg+dYffFZikpvKWVV/yRgmXqPUdKqrMtMYpU2\n3KHOOyYqrytdG2ApeT4K0+ptYa4AxBeaKp46p66Hn3XHhUaMIHJ9q+BZsNHW\n7UjVdtnVZkPYiyausDmjCB01/bKDMf21Fi5qiCTIOBEnzXZmlA+01iCG0eCO\n4HDc+tLwqegcbV1ji6E4hgIRvWohdO7DF+59O8YlCVQ1Ftm3XloE8bG/NV1+\nYdRhJQVKWFEZ/RgqcMW6gb095d4QJHAtAreJeBvisxRHQn6p4i1y/tG9FS6b\nHmb4br+37J4nlV50HkPrqRhH/vv/3NY1fWUJFToLfKu4A1/P/KX7nlyUdVQi\nX5BBttgO2ptvLqMD7kyBM9fI1wn0ZozxBvZeU4NB+Akz/CFU6Qa5s9vTvmxb\nmuBwFUTMHCOVXIIZojBMpmIFgfgbEHpQqqtD0h9zjhGWYWJsE+gDSPQJnCdl\n7IilW9WPGof/qcgOlw4ApluKeiYi57z87fIAl8XO74pj5prHvF8cNEkeigFu\nHZA7eL6+m2OEzXjvRc3guqQEhsd+PiC2KqTYvPF64aDpEN3c7KQo1LzwJkjV\naO46xJ4+JImwEiQ3iMvjPFOXzkseIZJD4/NdUvq28FcZZXcC+yxzt5+2ZVOs\nKaEeWVeIzWmqglI0Tbeh0KaYy0Gi7YwHdt3JCw9sFwnRwYDLR1zz9u0uhPDz\nNTmmcyMDgKA2p9iC2a/HLrZRP7JKqkmTJTadKMS7DXTrodZlf9UshOUkZLte\nxXOvoYiTfhwaV69lNJR1wxnbIPSttK/XVAEV34u8ZmQV+NajxvXluaJIuHFX\n0o89WJnwWi6Sl1Dd/OK61r8zlul3oXEz5EXERTKyaDkG6CtNfF02j8XyQGbc\n2DUBLssaTiAtUhFwUsoXl0moUCIwYTppT8nhe8FJ8O2pI5CuEgSPiyCDAeM0\nxVdj8OqwvuZvVTa+V81Ls/srLtnfNDYbFcqjIlOGHxirhWbZrS3yTOJbKtQz\n1uvb0fX/5IKFKU5ctYsFfVUFywlRKd+FaMYCtOATXSmFTEJHSPdLPg3uOamQ\n5zvU11rSLzndIK7ABcxWNe/T5TF4RFY2ygwNkO1afyzqyylS7J27JS+yPh3x\nFEsIqzhEsiVnjpeUWDdzEh2oUYQUvzVdOyMKUOeozaJpD6BqQf4bFsp3iwj1\n/MbV/+ZTEc2HbmWPonFVPNVQWSvG7tHmVdAPUcdlQ9oDWx164INjFwPOH5Jb\ndK0tO3XsiR7Dfgv58YAoqsBWEImrCXFvWzj6KcfAImWYcDRUrfZgllfXPsvE\nBn4pF2/YN3dNuLsyhjP9ZVGoxZji1FB5XoJFdX9Wnf2U3CK1VJxJ6bsYOCpQ\nmVa68O0zHQjmafsvzft4Z/TnT94dLFSbG1F0W9uz04blY7Gn3nNZK3iq6UUc\n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\n",
    "name_suffix": "_2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:55:26.580+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L6b_2023\\\"\"],\"cloned_from\":\"CSA U4L10-L6b_2023\"}]"
}]]></config>
</Javalab>
