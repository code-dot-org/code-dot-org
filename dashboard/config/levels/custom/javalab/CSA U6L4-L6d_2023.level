<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-03T13:58:17.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Playlist</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> to store songs in a playlist.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Playlist</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Song</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Song</code> objects\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">PlaylistRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Playlist</code> object.\r\n\r\n2. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code>.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "Music Library",
    "bubble_choice_description": "Create a Playlist class that contains an ArrayList to store songs in a playlist.",
    "thumbnail_url": "https://images.code.org/bcf0351e1fda8eaf4ddb887924a5a984-music.png",
    "encrypted_validation": "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\nqao=\n",
    "encrypted_exemplar_sources": "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\nog/IFjOQTg==\n",
    "start_sources": {
      "PlaylistRunner.java": {
        "text": "public class PlaylistRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Playlist object, then call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Playlist.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a playlist\n */\npublic class Playlist {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of Song objects, then write\n   * a no-argument constructor that initializes the list to an empty list.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  /*\n   * Returns the list of songs\n   */\n  public ArrayList<Song> getSongs() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return the list of Song objects.\n     * -----------------------------------------------------------------------------\n     */\n    \n    return null;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Song.java": {
        "text": "/*\n * Represents a song\n */\npublic class Song {\n  \n  private String name;    // The name of a song\n\n  /*\n   * Sets name to the specified name of a song\n   */\n  public Song(String name) {\n    this.name = name;\n  }\n\n  /*\n   * Returns the name of the song\n   */\n  public String getName() {\n    return name;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-03T13:58:17.704+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L6c_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L6c_2023\"},{\"changed_at\":\"2023-04-03 13:58:20 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:34:15 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 19:22:54 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-02 21:09:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:11:21 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:11:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:11:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:11:41 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:11:59 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:12:32 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:12:38 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-02 21:14:37 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:27:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:27:49 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:28:07 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:28:19 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:28:30 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:28:37 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-03 03:28:40 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:21:23 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:21:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:21:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:21:58 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:27:27 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:28:53 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:30:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:33:08 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:34:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:34:16 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:34:29 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:34:53 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:35:11 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:35:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:35:40 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:35:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:36:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:36:24 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:36:41 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:36:41 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:37:08 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:37:28 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:37:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 16:38:39 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:04:03 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:04:09 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:04:10 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-08 13:32:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-08 13:33:26 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
