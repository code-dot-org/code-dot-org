<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-12-14T20:35:49.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Now that Joyful Pastries food truck owner can create <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> objects with specific flavors and prices, they would like to create <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cupcake</code> objects with specific values as well.\r\n\r\nüéí **IMPORT:** Import your <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cupcake</code> classes from your **Backpack**.\r\n\r\n*Don't have it, or it doesn't work? That's ok! Copy the code from* <a href=\"https://studio.code.org/projects/javalab/TTB1mj-3ttbJMHuVg3FFROGMo8eDlIjuoVteNUkGFPQ\" target=\"_blank\">***here***</a> *and paste it into a new file in your project.*\r\n\r\n‚úÖ **TO DO #1:** Write a no-argument constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cupcake</code> class.\r\n\r\n‚úÖ **TO DO #2:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cupcake</code> class.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FoodTruckRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cupcake</code> objects using each constructor.\r\n\r\n‚úÖ **TO DO #4:** Print the constructors for the objects.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing no-argument and parameterized constructors, using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">super</code> keyword, and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n      <p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate objects using the no-argument and parameterized\n     * constructors. Then use ConstructorsHelper.printConstructors(nameOfObject)\n     * to print the constructors for the objects to the console.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 1
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-super-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_exemplar_sources": "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\nli0YiQPURA==\n",
    "display_name": "The Cupcake Class",
    "bubble_choice_description": "Import your `Cupcake` class and write no-argument and parameterized constructors to assign values to its instance variables.",
    "thumbnail_url": "https://images.code.org/f3e6572cb2281d6c6e289b975dd35f8b-cupcake.png",
    "encrypted_validation": "vm6eWkdPL+/aaP8DZHLtbkZDHgMSeGodjkjCUmiyJ+0FOkzpHFN72It4KTfA\nzzZe/a7JpecvdQ2uWdSr1VUOrLYsEx0tSezz4TS0hAi7Th/gMcIy7DyE33rH\nZAqOrQmwD262TsdaZO+03pbpaRQR1NKtg8WXFnzdpUlzwywgyWzq54/64acZ\nH3BAwxarZVOKtA7tXNl/u+klU9cqzUrv0s8/kX0Cz6ak4pDREh+nClFRmRQT\n2O4UiKj14dwY1C8FAWVhZTnddEi2vm/lQXPhiB5QZHhzBKRxvRN4ay+KaKHz\nmyYawA5zCNQRiiXqUv+T44P+DqVaWff1obmjeemshZdYyoxl6NVaCgD0c6xS\nHvk7IA9r8bDQ6fCzQ32NRUKJ77SixEVTkmAD9qwuaLa0CrrIDMwpA92GWs3u\nfanIN9z6t0o4U7KMupoEPOOnaT1ZuRZQ6MHV+ZXfWtZN4h743wdigiLFVluV\nX1mP7G1LqUvONf/LTX69h6mHWPs4pguCpFAptG8QivU9uD6ExVu2Ty4IOvPK\n6WrWmY5f8GmJ9TzQjf/L7H1axx0uzA7muZjApcDf5R5Qevuviz8V+lnN2AyI\n3UB0Bt8x77vYgsy8ujX3gMGCEYL7NHk0C6NnqKwsbXW193LLupsuSEjpS8KZ\nYvpsSiB6fftzV12vfXFOeowisDAMbrCOxsuQZPgP07rGsLWu2mCpqdgmNWEs\naGUnjZDW6kS9dhzfDBlb0uB0tx/RUEO678ZqBFidIKO8W9wej4OdqoOliPMG\nFpCH7i0594YBpLNAshTpcBNnOPVKovMuORGX4Ly6EVadsqX/aPbqFwXNc2MZ\nokolk4bmesLpjxTBMouTJVPf8YIpwS0rLg/dO0TBj/JeelZ4NaEjfT1QsvVc\nztQfa1mA01Mls5fWos8H0/cu5tfLmKTcKr6sYARfE1iVE2RxtEr/neTC5mCP\nh+YHHb85I3UrRSr2SwCygllQ6r2uH0uF08xryUBPLm9FUHKd5g1ualauKZ8D\nD3NtJImxzQW9gxdTksmmbj8nvjDkhBFVqnSQmcFBGR2oY9AAz7dVQkDF748Z\nJNKclpicrCvkiUPmUqTEXygjaZM6Xf9VDLVu4xoqiZs6XsL9Uo8ea4kbHmMZ\nIZWvcuCGUxhSrdN55Wn8wbSuuAXTTwq5ZsJVfygwiNTMoUtB9RZYdPko+x0t\n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\nNOT1jVV18VuMqL+iwj+Xn+StJxEE\n",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-12-14T20:35:49.167+00:00\",\"changed\":[\"cloned from \\\"CSA U2L5-L7_2023\\\"\"],\"cloned_from\":\"CSA U2L5-L7_2023\"},{\"changed_at\":\"2022-12-14 20:53:20 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 21:56:19 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 21:56:24 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 22:03:17 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-14 16:59:01 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-09-19 19:58:14 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
