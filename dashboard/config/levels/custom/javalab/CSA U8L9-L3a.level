<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "The Scattergories game generates a randomly chosen category and letter. Each player comes up with as many words as they can in that category that start with the given letter. Players then enter their list of words to determine the winner.\r\n\r\nIn `ScattergoriesLogic.java`, write the `removeDuplicates()` method. This method removes any words that appear in both lists.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "playground",
    "encrypted_examples": "Y5oxU2saAYVgPIsEA2UtbgpirxPfyQgbuyBX978jkHY3jPzh5K4ZAIFMmCxg\nkN429Ki9Ovq4r36kfPT1AWENNLcSDCB2iccgYfqnTi0fF1p0JOPFF75aUQa6\nooo3JkG0\n",
    "display_name": "Scattergories",
    "start_sources": {
      "MyPlayground.java": {
        "text": "public class MyPlayground {\n  public static void main(String[] args) {\n\n    String[] categories = {\"Things That Make You Smile\", \"Things That Have Buttons\",\n                           \"Things That Have Wheels\", \"Things You Store Items In\",\n                           \"Things That You Wear\", \"Things You Make\"};\n    \n    String[] letters = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"R\", \"S\", \"T\", \"W\"};\n\n    Scattergories myGame = new Scattergories(categories, letters);\n    myGame.play();\n    \n  }\n}",
        "isVisible": true
      },
      "Scattergories.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\nimport java.io.FileNotFoundException;\n\npublic class Scattergories {\n\n  /**\n   * the board to display the game\n   */\n  private static Board myBoard = Playground.board;\n\n  /**\n   * the list of available categories\n   */\n  private String[] categories;\n\n  /**\n   * the list of letters\n   */\n  private String[] letters;\n\n  /**\n   * the current letter chosen\n   */\n  private static String currentLetter;\n\n  /**\n   * the TextItem displaying the chosen category\n   */\n  private TextItem categoryText;\n\n  /**\n   * the TextItem displaying the chosen letter\n   */\n  private TextItem letterText;\n\n  /**\n   * the button to click when ready to score\n   */\n  private DoneButton doneButton;\n\n  /**\n   * Creates a Scattergories game\n   */\n  public Scattergories(String[] categories, String[] letters) {\n    this.categories = categories;\n\n    categoryText = chooseText(categories, 30, 100, 25);\n    letterText = chooseText(letters, 150, 150, 80);\n\n    try {\n      doneButton = new DoneButton(\"done.png\", 135, 250, 80, 35);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error creating done button.\");\n    }\n  }\n\n  /**\n   * Starts the game\n   */\n  public void play() {\n    showGame();\n    printRules();\n\n    try {\n      myBoard.start();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error starting game.\");\n    }\n  }\n\n  /**\n   * Prints the rules of the game to the console\n   */\n  public void printRules() {\n    System.out.println(\"Come up with as many words as you can\");\n    System.out.println(\"for the given category. Each word must\");\n    System.out.println(\"start with the letter given. When you're\");\n    System.out.println(\"ready to score your words, click Done!\");\n  }\n\n  /**\n   * Places the game components on the board\n   */\n  public void showGame() {\n    // show the category\n    myBoard.addTextItem(categoryText);\n\n    // show the letter\n    myBoard.addTextItem(letterText);\n\n    // show the done button\n    myBoard.addClickableImage(doneButton);\n  }\n\n  /**\n   * Randomly chooses the text to display from the specified list\n   * @return TextItem the TextItem containing the chosen text\n   */\n  public TextItem chooseText(String[] optionsList, int x, int y, int size) {\n    int randomIndex = (int)(Math.random() * optionsList.length);\n    currentLetter = optionsList[randomIndex];\n    TextItem tempText = new TextItem(currentLetter, x, y, Color.BLACK, Font.SANS, FontStyle.BOLD, size, 0);\n    return tempText;\n  }\n\n  /**\n   * Gets the current letter chosen\n   * @return the randomly chosen letter\n   */\n  public static String getLetter() {\n    return currentLetter;\n  }\n\n  /**\n   * Gets the board for the game\n   */\n  public static Board getBoard() {\n    return myBoard;\n  }\n}",
        "isVisible": true
      },
      "ScattergoriesLogic.java": {
        "text": "import org.code.playground.*;\nimport org.code.media.*;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic final class ScattergoriesLogic {\n\n  /**\n   * gets the input from the player\n   */\n  private static Scanner input;\n\n  /**\n   * the first player's list\n   */\n  private static ArrayList<String> player1Words = new ArrayList<String>();\n\n  /**\n   * the second player's list\n   */\n  private static ArrayList<String> player2Words = new ArrayList<String>();\n\n  /**\n   * Gets the list of the words from the player\n   * @return the list of words entered by the player\n   */\n  public static ArrayList<String> getWordList() {\n    ArrayList<String> tempList = new ArrayList<String>();\n    input = new Scanner(System.in);\n    System.out.print(\"Enter each word one at a time (q when done): \");\n    String word = input.nextLine();\n\n    while (!word.equals(\"q\")) {\n      tempList.add(word);\n      System.out.print(\"Enter the next word (or q if done): \");\n      word = input.nextLine();\n    }\n\n    input.close();\n    return tempList;\n  }\n\n  /**\n   * Gets the list of the words from the player\n   * @param player the player to prompt for the list\n   */\n  public static void getWordList(int player) {\n    System.out.println(\"\\nPlayer \" + player + \", enter your list of words.\");\n\n    if (player == 1) {\n      player1Words = getWordList();\n    }\n    \n    if (player == 2) {\n      player2Words = getWordList();\n    }\n  }\n\n  /**\n   * Switches players to get their list of words\n   * @param player the player to prompt for the list\n   * @return the player's list of words\n   */\n  public static ArrayList<String> switchPlayer(int player) {      \n    if (player == 1) {\n      return player1Words;\n    }\n    else {\n      return player2Words;\n    }\n  }\n\n  /**\n   * Removes duplicate words from each player's list\n   */\n  public static void removeDuplicates() {\n\n\n    \n  }\n\n  /**\n   * Removes words from both lists that do not start with the letter\n   */\n  public static void removeInvalidWords(int player) {\n    ArrayList<String> wordList = switchPlayer(player);\n\n    for (int index = 0; index < wordList.size(); index++) {\n      String currentWord = wordList.get(index);\n      String firstLetter = currentWord.substring(0, 1);\n      if (!firstLetter.equals(Scattergories.getLetter().toLowerCase())) {\n        wordList.remove(index);\n        index--;\n      }\n    }\n  }\n\n  /**\n   * Calculates the score for the player\n   * @param player the player to calculate the score\n   * @return the score for the player\n   */\n  public static int calculateScore(int player) {\n    ArrayList<String> wordList = switchPlayer(player);\n    return wordList.size();\n  }\n\n  /**\n   * Ends the game and determines which player won\n   */\n  public static void endGame(int player1Score, int player2Score) {\n    if (player1Score > player2Score) {\n      System.out.println(\"Player 1 wins the game!\");\n    }\n    else if (player2Score > player1Score) {\n      System.out.println(\"Player 2 wins the game!\");\n    }\n    else {\n      System.out.println(\"It's a tie!\");\n    }\n\n    try {\n      Scattergories.getBoard().end();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error ending the game.\");\n    }\n  }\n}",
        "isVisible": true
      },
      "DoneButton.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class DoneButton extends ClickableImage {\n\n  /**\n   * Creates a DoneButton\n   * @param filename the name of the image file for the button\n   * @param x the x position of the button\n   * @param y the y position of the button\n   * @param width the width of the button\n   * @param height the height of the button\n   */\n  public DoneButton(String filename, int x, int y, int width, int height) throws FileNotFoundException {\n    super(filename, x, y, width, height);\n  }\n\n  /**\n   * Prompts each player to enter their list of words when clicked,\n   * removes invalid and duplicate words, calculates the score for\n   * their list, then determines the winner of the game\n   */\n  public void onClick() {\n    ScattergoriesLogic.getWordList(1);\n    ScattergoriesLogic.getWordList(2);\n\n    ScattergoriesLogic.removeDuplicates();\n    ScattergoriesLogic.removeInvalidWords(1);\n    ScattergoriesLogic.removeInvalidWords(2);\n\n    int player1Score = ScattergoriesLogic.calculateScore(1);\n    int player2Score = ScattergoriesLogic.calculateScore(2);\n\n    System.out.println(\"\\nPlayer 1 score: \" + player1Score);\n    System.out.println(\"Player 2 score: \" + player2Score);\n    System.out.println(\"----------\");\n\n    ScattergoriesLogic.endGame(player1Score, player2Score);\n  }\n}",
        "isVisible": true
      }
    },
    "starter_assets": {
      "done.png": "8549f774-d0a7-436d-a49b-b8231ae964f8.png"
    },
    "bubble_choice_description": "Use multiple lists in Scattergories to manage the possible categories and letters.",
    "thumbnail_url": "https://images.code.org/63591773be13c69a7fc7cdc3b20fe22e-image-1641776731184.png"
  },
  "game_id": 68,
  "published": true,
  "created_at": "2021-12-12T16:03:54.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2021-12-12 16:04:16 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 00:20:32 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 13:41:59 +0000\",\"changed\":[\"csa_view_mode\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 14:01:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 14:05:01 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 14:05:31 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 14:25:29 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 14:27:58 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-09 14:36:17 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 01:06:26 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 01:37:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 01:38:41 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-01-10 01:40:38 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
