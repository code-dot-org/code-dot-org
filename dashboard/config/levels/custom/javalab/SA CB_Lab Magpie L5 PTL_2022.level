<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "long_instructions": "Project Based Template_Magpie Lesson 5",
    "start_sources": {
      "MyClass.java": {
        "text": "import java.util.Scanner;\n\n/**\n * A simple class to run the Magpie class.\n * @author Laurie White\n * @version April 2012\n */\npublic class MyClass\n{\n\n\t/**\n\t * Create a Magpie, give it user input, and print its replies.\n\t */\n\tpublic static void main(String[] args)\n\t{\n\t\tMagpie5 maggie = new Magpie5();\n\t\t\n\t\tSystem.out.println (maggie.getGreeting());\n\t\tScanner in = new Scanner (System.in);\n\t\tString statement = in.nextLine();\n\t\t\n\t\twhile (!statement.equals(\"Bye\"))\n\t\t{\n\t\t\tSystem.out.println (maggie.getResponse(statement));\n\t\t\tstatement = in.nextLine();\n\t\t}\n\t}\n\n}",
        "isVisible": false
      },
      "Magpie5.java": {
        "text": "import java.util.Random;\n\n/**\n * A program to carry on conversations with a human user.\n * This version:\n *<ul><li>\n * \t\tUses advanced search for keywords \n *</li><li>\n * \t\tWill transform statements as well as react to keywords\n *</li></ul>\n * This version uses an array to hold the default responses.\n * @author Laurie White\n * @version April 2012\n */\npublic class Magpie5\n{\n\t/**\n\t * Get a default greeting \t\n\t * @return a greeting\n\t */\t\n\tpublic String getGreeting()\n\t{\n\t\treturn \"Hello, let's talk.\";\n\t}\n\t\n\t/**\n\t * Gives a response to a user statement\n\t * \n\t * @param statement\n\t *            the user statement\n\t * @return a response based on the rules given\n\t */\n\tpublic String getResponse(String statement)\n\t{\n\t\tString response = \"\";\n\t\tif (statement.length() == 0)\n\t\t{\n\t\t\tresponse = \"Say something, please.\";\n\t\t}\n\n\t\telse if (findKeyword(statement, \"no\") >= 0)\n\t\t{\n\t\t\tresponse = \"Why so negative?\";\n\t\t}\n\t\telse if (findKeyword(statement, \"mother\") >= 0\n\t\t\t\t|| findKeyword(statement, \"father\") >= 0\n\t\t\t\t|| findKeyword(statement, \"sister\") >= 0\n\t\t\t\t|| findKeyword(statement, \"brother\") >= 0)\n\t\t{\n\t\t\tresponse = \"Tell me more about your family.\";\n\t\t}\n\n\t\t// Responses which require transformations\n\t\telse if (findKeyword(statement, \"I want to\", 0) >= 0)\n\t\t{\n\t\t\tresponse = transformIWantToStatement(statement);\n\t\t}\n\t\t//  Part of student solution\n\t\telse if (findKeyword(statement, \"I want\", 0) >= 0)\n\t\t{\n\t\t\tresponse = transformIWantStatement(statement);\n\t\t}\n\n\t\telse\n\t\t{\n\n\t\t\t// Look for a two word (you <something> me)\n\t\t\t// pattern\n\t\t\tint psn = findKeyword(statement, \"you\", 0);\n\n\t\t\tif (psn >= 0\n\t\t\t\t\t&& findKeyword(statement, \"me\", psn) >= 0)\n\t\t\t{\n\t\t\t\tresponse = transformYouMeStatement(statement);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//  Part of student solution\n\t\t\t\t// Look for a two word (I <something> you)\n\t\t\t\t// pattern\n\t\t\t\tpsn = findKeyword(statement, \"i\", 0);\n\n\t\t\t\tif (psn >= 0\n\t\t\t\t\t\t&& findKeyword(statement, \"you\", psn) >= 0)\n\t\t\t\t{\n\t\t\t\t\tresponse = transformIYouStatement(statement);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresponse = getRandomResponse();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn response;\n\t}\n\t\n\t/**\n\t * Take a statement with \"I want to <something>.\" and transform it into \n\t * \"What would it mean to <something>?\"\n\t * @param statement the user statement, assumed to contain \"I want to\"\n\t * @return the transformed statement\n\t */\n\tprivate String transformIWantToStatement(String statement)\n\t{\n\t\t//  Remove the final period, if there is one\n\t\tstatement = statement.trim();\n\t\tString lastChar = statement.substring(statement\n\t\t\t\t.length() - 1);\n\t\tif (lastChar.equals(\".\"))\n\t\t{\n\t\t\tstatement = statement.substring(0, statement\n\t\t\t\t\t.length() - 1);\n\t\t}\n\t\tint psn = findKeyword (statement, \"I want to\", 0);\n\t\tString restOfStatement = statement.substring(psn + 9).trim();\n\t\treturn \"What would it mean to \" + restOfStatement + \"?\";\n\t}\n\n\t\n\t/**\n\t * Take a statement with \"I want <something>.\" and transform it into \n\t * \"Would you really be happy if you had <something>?\"\n\t * @param statement the user statement, assumed to contain \"I want\"\n\t * @return the transformed statement\n\t */\n\tprivate String transformIWantStatement(String statement)\n\t{\n\t\t//  Remove the final period, if there is one\n\t\tstatement = statement.trim();\n\t\tString lastChar = statement.substring(statement\n\t\t\t\t.length() - 1);\n\t\tif (lastChar.equals(\".\"))\n\t\t{\n\t\t\tstatement = statement.substring(0, statement\n\t\t\t\t\t.length() - 1);\n\t\t}\n\t\tint psn = findKeyword (statement, \"I want\", 0);\n\t\tString restOfStatement = statement.substring(psn + 6).trim();\n\t\treturn \"Would you really be happy if you had \" + restOfStatement + \"?\";\n\t}\n\t\n\t/**\n\t * Take a statement with \"you <something> me\" and transform it into \n\t * \"What makes you think that I <something> you?\"\n\t * @param statement the user statement, assumed to contain \"you\" followed by \"me\"\n\t * @return the transformed statement\n\t */\n\tprivate String transformYouMeStatement(String statement)\n\t{\n\t\t//  Remove the final period, if there is one\n\t\tstatement = statement.trim();\n\t\tString lastChar = statement.substring(statement\n\t\t\t\t.length() - 1);\n\t\tif (lastChar.equals(\".\"))\n\t\t{\n\t\t\tstatement = statement.substring(0, statement\n\t\t\t\t\t.length() - 1);\n\t\t}\n\t\t\n\t\tint psnOfYou = findKeyword (statement, \"you\", 0);\n\t\tint psnOfMe = findKeyword (statement, \"me\", psnOfYou + 3);\n\t\t\n\t\tString restOfStatement = statement.substring(psnOfYou + 3, psnOfMe).trim();\n\t\treturn \"What makes you think that I \" + restOfStatement + \" you?\";\n\t}\n\t\n\t/**\n\t * Take a statement with \"I <something> you\" and transform it into \n\t * \"Why do you <something> me?\"\n\t * @param statement the user statement, assumed to contain \"I\" followed by \"you\"\n\t * @return the transformed statement\n\t */\n\tprivate String transformIYouStatement(String statement)\n\t{\n\t\t//  Remove the final period, if there is one\n\t\tstatement = statement.trim();\n\t\tString lastChar = statement.substring(statement\n\t\t\t\t.length() - 1);\n\t\tif (lastChar.equals(\".\"))\n\t\t{\n\t\t\tstatement = statement.substring(0, statement\n\t\t\t\t\t.length() - 1);\n\t\t}\n\t\t\n\t\tint psnOfI = findKeyword (statement, \"I\", 0);\n\t\tint psnOfYou = findKeyword (statement, \"you\", psnOfI);\n\t\t\n\t\tString restOfStatement = statement.substring(psnOfI + 1, psnOfYou).trim();\n\t\treturn \"Why do you \" + restOfStatement + \" me?\";\n\t}\n\t\n\n\t\n\t\n\t/**\n\t * Search for one word in phrase. The search is not case\n\t * sensitive. This method will check that the given goal\n\t * is not a substring of a longer string (so, for\n\t * example, \"I know\" does not contain \"no\").\n\t *\n\t * @param statement\n\t *            the string to search\n\t * @param goal\n\t *            the string to search for\n\t * @param startPos\n\t *            the character of the string to begin the\n\t *            search at\n\t * @return the index of the first occurrence of goal in\n\t *         statement or -1 if it's not found\n\t */\n\tprivate int findKeyword(String statement, String goal,\n\t\t\tint startPos)\n\t{\n\t\tString phrase = statement.trim().toLowerCase();\n\t\tgoal = goal.toLowerCase();\n\n\t\t// The only change to incorporate the startPos is in\n\t\t// the line below\n\t\tint psn = phrase.indexOf(goal, startPos);\n\n\t\t// Refinement--make sure the goal isn't part of a\n\t\t// word\n\t\twhile (psn >= 0)\n\t\t{\n\t\t\t// Find the string of length 1 before and after\n\t\t\t// the word\n\t\t\tString before = \" \", after = \" \";\n\t\t\tif (psn > 0)\n\t\t\t{\n\t\t\t\tbefore = phrase.substring(psn - 1, psn);\n\t\t\t}\n\t\t\tif (psn + goal.length() < phrase.length())\n\t\t\t{\n\t\t\t\tafter = phrase.substring(\n\t\t\t\t\t\tpsn + goal.length(),\n\t\t\t\t\t\tpsn + goal.length() + 1);\n\t\t\t}\n\n\t\t\t// If before and after aren't letters, we've\n\t\t\t// found the word\n\t\t\tif (((before.compareTo(\"a\") < 0) || (before\n\t\t\t\t\t.compareTo(\"z\") > 0)) // before is not a\n\t\t\t\t\t\t\t\t\t\t\t// letter\n\t\t\t\t\t&& ((after.compareTo(\"a\") < 0) || (after\n\t\t\t\t\t\t\t.compareTo(\"z\") > 0)))\n\t\t\t{\n\t\t\t\treturn psn;\n\t\t\t}\n\n\t\t\t// The last position didn't work, so let's find\n\t\t\t// the next, if there is one.\n\t\t\tpsn = phrase.indexOf(goal, psn + 1);\n\n\t\t}\n\n\t\treturn -1;\n\t}\n\t\n\t/**\n\t * Search for one word in phrase.  The search is not case sensitive.\n\t * This method will check that the given goal is not a substring of a longer string\n\t * (so, for example, \"I know\" does not contain \"no\").  The search begins at the beginning of the string.  \n\t * @param statement the string to search\n\t * @param goal the string to search for\n\t * @return the index of the first occurrence of goal in statement or -1 if it's not found\n\t */\n\tprivate int findKeyword(String statement, String goal)\n\t{\n\t\treturn findKeyword (statement, goal, 0);\n\t}\n\t\n\n\n\t/**\n\t * Pick a default response to use if nothing else fits.\n\t * @return a non-committal string\n\t */\n\n  /* TO DO: Examine the difference between the refactored getRandomResponse()\n            method and the oldRandomResponse() method which was used\n            previously in the previous portions of this lab.\n  */\n  \n\tprivate String getRandomResponse ()\n\t{\n\t\tRandom r = new Random();\n\t\treturn randomResponses [r.nextInt(randomResponses.length)];\n\t}\n\t\n\tprivate String [] randomResponses = {\"Interesting, tell me more\",\n\t\t\t\"Hmmm.\",\n\t\t\t\"Do you really think so?\",\n\t\t\t\"You don't say.\"\n\t};\n\n\tprivate String previousRandomResponse()\n\t{\n\t\tfinal int NUMBER_OF_RESPONSES = 4;\n\t\tdouble r = Math.random();\n\t\tint whichResponse = (int)(r * NUMBER_OF_RESPONSES);\n\t\tString response = \"\";\n\t\t\n\t\tif (whichResponse == 0)\n\t\t{\n\t\t\tresponse = \"Interesting, tell me more.\";\n\t\t}\n\t\telse if (whichResponse == 1)\n\t\t{\n\t\t\tresponse = \"Hmmm.\";\n\t\t}\n\t\telse if (whichResponse == 2)\n\t\t{\n\t\t\tresponse = \"Do you really think so?\";\n\t\t}\n\t\telse if (whichResponse == 3)\n\t\t{\n\t\t\tresponse = \"You don't say.\";\n\t\t}\n\n\t\treturn response;\n\t}\n  \n}",
        "isVisible": true
      }
    },
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-07-19T19:26:25.000Z",
  "level_num": "custom",
  "user_id": 18603,
  "audit_log": "[{\"changed_at\":\"2022-07-19T19:26:25.846+00:00\",\"changed\":[\"cloned from \\\"CSA CB_Lab Magpie L4 PBT2_2022\\\"\"],\"cloned_from\":\"CSA CB_Lab Magpie L4 PBT2_2022\"},{\"changed_at\":\"2022-07-19 19:26:47 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
