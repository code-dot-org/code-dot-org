<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:59:17.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that draws park images based on the area in acres of each national park.\r\n\r\n‚úÖ **TO DO:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ParkScene.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">chooseSize()</code> method to check the area in acres of each national park and return the size to draw the image.\r\n\r\n1. If the number of acres is greater than <code style=\"background-color: #ececec; color: black; font-weight: bold;\">1000000</code>, return a size of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">100</code>.\r\n\r\n2. If the number of acres is greater than or equal to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">100000</code>, return a size of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">50</code>.\r\n\r\n3. Otherwise, return a size of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">25</code>.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing multi-selection statements.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "National Parks",
    "bubble_choice_description": "Create a visualization based on the area in acres of each national park.",
    "thumbnail_url": "https://images.code.org/84b9359f0aa6687415053452f0d1277c-image-1650719759035.png",
    "reference_links": [
      "/courses/csa-2023/guides/multi-selection-statements"
    ],
    "video_key": "csa_multi-selection_statements",
    "starter_assets": {
      "park.png": "6fe6ab8d-3c8c-4300-bd2a-fd80de92c7df.png"
    },
    "encrypted_validation": "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\nBrK7Eb8hCbjxSA==\n",
    "encrypted_exemplar_sources": "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\nAd2ZyFB3G8a2c/XO7FfQpSl3JvKN2wKuCn7c172Vg36WhDrM315SWM01vXAL\nvE2sNjfO6XGIyRxNcT1THZ8g9aFuHT0V1bhw2yXaJRrOONZ3URaQWMxqg3iE\nYkexqY+yyL+cG5BYy1cYAXKL9KQ+GtigZuujBU8H5ay+lUV6yWdYEVHhkqR7\ni9QvD4Il7MEGxryiLOxVysrVjuSnCVVcFkhnAOyr3MrCYnDkNTosuNKpAR1T\nYYxmqw2s9ZtThTaZ8qmqRUBBdlxeouIzV/6CYOXWKIPcyQnMZtZoJNjckGaY\nbaj2nWc3bmEgPytYUqBEwZ4cCOwZ2rVYCqEeLZJi1tpTnTE48H0mBFfBWCZy\nMFGxKCTo4G04tRT5zSbnDgAeaXIYSTTZWN2Y+528AF2Y4v0I25o+ZU9k/Sv+\nrZOuuQkySXhKsawN+x4h/wMaDT+mJ7EUi/J2GD1Ll82/16j4PnhOhwNlMhQj\n67+MR+PmeWlLu7Ul7Tjoyf54b+cuGbHiTqY/M/QZmW88/k1x6Z09WOlC8ovk\nJ3ScPqIYDgDLoXXEAe/PHDO89PM1EiZoE/j2OPbH4G/+UIcDKLicqzoiXD1M\nwUrt3LjP1zWlOXLfG2YMv91o/kqjd8oFqWf0KezTbKmvp5sc+jxqQ38GeqeX\no4V0e1QFggSeTcUcRwHn1sUy3eG+A/MpeZUZspy2FcpO/ohXGATmv32925cx\nQlv5yWljlAxUSCrvYQ9rOepWobxCNCZayqS3Ct0wBqv3UqoM4TPGfAXvDjvv\nVIXPlaItzlvagXNBxpeQZnXhXuD2Jahd+lfPjr5L0nbdVfkPRt6Sj0XlSdvK\nSGAYJU1mK2PoKVZ6V//rSlC7Smsd2q6R9E9wqEGIPJNAIzHn28eIIjGwTlKz\nt+/BWZ9jUw8W43sMKMpI26WSA+X/HfUG61qyZb1KS6aERYvmkCja0EocEQkR\nWdn8vkDb1JbxbpjTKrVQyiNvxDE+1YhpGPIMAzoNeYsiIDb9HxzSGhQiPH8k\nbwEnnqbH1iX1O1v5BB6Knwf843IfP9oGRP3qvsFuJqwtu8TAgdOPjihPqz4Q\nVbtJu6xq5cqPPJ53bct7fm5rlDrYoKkBLEfDPO8SW1jXL3LgQ7dRyz2u3FbK\nJTxtnXSpwI+9+nMihvKjQaHkvISFzi7Duq8TLxugdWB1OO1sBsR9l+kD5UWa\n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\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of park names from a text file\n    String[] names = FileReader.toStringArray(\"parks.txt\");\n\n    // Creates a 1D array containing the areas from a text file\n    int[] acres = FileReader.toIntArray(\"acres.txt\");\n\n    // Creates a ParkScene object\n    ParkScene scene = new ParkScene(names, acres);\n\n    // Calls the drawResult() method\n    scene.drawResult();\n\n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ParkScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the size of each national park\n */\npublic class ParkScene extends Scene {\n\n  private String[] parks;     // The 1D array of national park names\n  private int[] acres;        // The 1D array containing the areas of each park in acres\n\n  /*\n   * Initializes parks and acres to the specified 1D array of\n   * park names and areas of each park in acres\n   */\n  public ParkScene(String[] parks, int[] acres) {\n    this.parks = parks;\n    this.acres = acres;\n  }\n\n  /*\n   * Returns the size to draw each image\n   */\n  public int chooseSize(int acres) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ If the acres is greater than 1000000, return 100. Else if the acres is\n     * greater than or equal to 100000, return 50. Otherwise, return 25.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    return -1;\n  }\n\n  /*\n   * Creates the scene by drawing the park image based on\n   * the area of each park in acres\n   */\n  public void drawResult() {    \n    for (int i = 0; i < acres.length; i++) {\n      int x = (int) (Math.random() * getWidth());\n      int y = (int) (Math.random() * getHeight());\n      int size = chooseSize(acres[i]);\n      drawImage(\"park.png\", x, y, size);\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "parks.txt": {
        "text": "Acadia\nAmerican Samoa\nArches\nBadlands\nBig Bend\nBiscayne\nBlack Canyon of the Gunnison\nBryce Canyon\nCanyonlands\nCapitol Reef\nCarlsbad Caverns\nChannel Islands\nCongaree\nCrater Lake\nCuyahoga Valley\nDeath Valley\nDenali\nDry Tortugas\nEverglades\nGates of the Arctic\nGateway Arch\nGlacier\nGlacier Bay\nGrand Canyon\nGrand Teton\nGreat Basin\nGreat Sand Dunes\nGreat Smoky Mountains\nGuadalupe Mountains\nHaleakala\nHawai ªi Volcanoes\nHot Springs\nIndiana Dunes\nIsle Royale\nJoshua Tree\nKatmai\nKenai Fjords\nKings Canyon\nKobuk Valley\nLake Clark\nLassen Volcanic\nMammoth Cave\nMesa Verde\nMount Rainier\nNorth Cascades\nOlympic\nPetrified Forest\nPinnacles\nRedwood\nRocky Mountain\nSaguaro\nSequoia\nShenandoah\nTheodore Roosevelt\nVirgin Islands\nVoyageurs\nWhite Sands\nWind Cave\nWrangell‚ÄìSt.¬†Elias\nYellowstone\nYosemite\nZion",
        "isVisible": true,
        "tabOrder": 3
      },
      "acres.txt": {
        "text": "49077\n8257\n76679\n242756\n801163\n172971\n30780\n35835\n337598\n241905\n46766\n249561\n26476\n183224\n32572\n3408407\n4740911\n64701\n1508939\n7523897\n193\n1013126\n3223383\n1201647\n310044\n77180\n107342\n522427\n86367\n33265\n325605\n5554\n15349\n571790\n795156\n3674529\n669650\n461901\n1750716\n2619816\n106589\n54012\n52485\n236382\n504781\n922649\n221390\n26686\n138999\n265807\n91716\n404063\n199224\n70447\n15053\n218222\n146344\n33971\n8323146\n2219791\n761748\n147243",
        "isVisible": true,
        "tabOrder": 4
      }
    },
    "name_suffix": "_2024",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:59:17.340+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L7a_2023\\\"\"],\"cloned_from\":\"CSA U4L10-L7a_2023\"}]"
}]]></config>
</Javalab>
