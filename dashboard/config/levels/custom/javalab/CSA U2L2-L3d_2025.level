<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:49:53.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A clothing designer sells custom apparel, and they have created a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Shirt</code> class to represent the shirts they create.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Shirt</code> class, write a no-argument constructor to assign default values to the instance variables:\r\n\r\n   * Assign a default name to the instance variable <code style=\"background-color: #ececec; color: black; font-weight: bold;\">size</code>, such as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"small\"</code>\r\n\r\n   * Assign a default value to the instance variable <code style=\"background-color: #ececec; color: black; font-weight: bold;\">price</code>, such as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">5.99</code>\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ClothesRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Shirt</code> object.\r\n\r\n‚úÖ **TO DO #3:** Print the constructor and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Shirt</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a no-argument constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n    <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getSize()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getPrice()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Shirt</code> class to get the current values assigned to the instance variables. For example:</p>\r\n    <pre style=\"background-color: #333333; color: white;\">\r\nShirt tShirt = new Shirt();\r\nSystem.out.println(\"Size: \" + tShirt.getSize());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Shirt Class",
    "bubble_choice_description": "A clothing designer sells custom apparel, and they have created a `Shirt` class to represent the shirts they create.",
    "thumbnail_url": "https://images.code.org/d1a4be4e76f35fb45c38b556089c1e77-tshirt.png",
    "encrypted_exemplar_sources": "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\n",
    "encrypted_validation": "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\nZK52eo4i6Huha9hoA4ZvyYkF5unW\n",
    "start_sources": {
      "ClothesRunner.java": {
        "text": "public class ClothesRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Shirt object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject), and print the values\n     * assigned to the instance variables using the methods in the Shirt class.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Shirt.java": {
        "text": "/*\n * Represents a custom shirt\n */\npublic class Shirt {\n\n  private String size;     // The size of a shirt\n  private double price;    // The price of a shirt\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a no-argument constructor to assign default values to the\n   * size and price instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n\n\n\n  \n\n  /*\n   * Returns the current value assigned to size\n   */\n  public String getSize() {\n    return size;\n  }\n\n  /*\n   * Returns the current value assigned to price\n   */\n  public double getPrice() {\n    return price;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "name_suffix": "_2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:49:53.337+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L3d_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L3d_2023\"}]"
}]]></config>
</Javalab>
