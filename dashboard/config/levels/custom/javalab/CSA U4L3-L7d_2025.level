<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:54:53.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A student is considering a career as a software engineer and wants to know the percentage of states where the salary is higher than the overall average salary.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Salary.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcDeviation()</code> method to calculate and return the amount each salary is from the average salary. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcDeviation()</code> method should:\r\n\r\n1. Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcAverage()</code> method to get the average salary.\r\n\r\n2. Traverse the array <code style=\"background-color: #ececec; color: black; font-weight: bold;\">salaries</code> to calculate the variance.\r\n\r\n3. Return the square root of the variance.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SalaryRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcDeviation()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math.sqrt()</code> method.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\naverageSalary = calcAverage()\r\nvariance = 0\r\n&nbsp;\r\nfor each salary in salaries\r\n  variance += Math.pow(salary - averageSalary, 2)\r\n&nbsp;\r\nvariance /= salaries.length\r\nreturn Math.sqrt(variance)\r\n</pre>\r\n    </div>\r\n</details>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Software Engineer Salary",
    "bubble_choice_description": "A student is considering a career as a software engineer and wants to know the percentage of states where the salary is higher than the overall average salary.",
    "thumbnail_url": "https://images.code.org/2249cd1173230b8c38a5308d1c5e6d5f-salary.png",
    "encrypted_validation": "D6I9Uzk3XDnBqJ7D2ATktkz/bUiODAIuMf+/728ocVXaiY2qm1BMjiCAR7tt\n/Kw31TwT+A+PYBASzVa87bU9DzLr3AxxYVZKfTFOrbOdBJFFPNv+v2xHtRjt\ngh//LbF5XXYU0htBIIE+WCb6dAc4HIWmF7+3l7+oyqWDwhq4Yb8Nzi1/BK32\n1ERL7dR+3sYy/7ay1Ziu2g1I5zkpscoe4MSK909SAJF1XKwbJ2yyQvDmGgHo\nTG2jJl2C3PAaJ6cOfUfm4q9YGpF/NigaEuHgAPCVoYsXLFZhpV6eYtIfwHw6\nykhRmESWDSFCO4yoIC2m7gEl/P98EU3vr2LHUYFV2e0fdj7F+MoTaojReLIA\n6twL6iLh5RXfzbQeNjpLUQnGnwc7KUUOz7+AAqWeper5fv9kWMyN1PVCZOzg\n4l4ZrDBfGWo1ppHdhKs3kMQgldSmZbpOthAney5ZOv82QWrKRb1nWtscau+i\n9BSl4lizXnuNs9kjdj8keQ5NjMz9reS1X/54M3KbbKJi24D13zzj9S52MQtq\nfhMM7u1RHUR1eWOAhU/23PKJZ4XOMohySt3Tc1thT4mPd/2Y/AYHuLvDHaBL\nJ7dpNcv9QcU7RBoF93M9+3xBL60erofxZxRa1h60v0Fao2g4zxc8/RjfuRQ1\nKXLCgjeXOA+DxN58fAyO2H7/iMqqLdj3dB7X9yjDBduP0jnYsu70E7fLbGdA\nLy6NRXB0jJeh8I/yIM7tJROqLdIMhOUP2wEUmo0iiQA5M5E3+lZtO43fwBX+\n/CpeINuc7VcIpiaImI+kPA6kXr0eqSpg0+PkHcaRTLAMQpMYwYfWh4GSfUEg\ntLmZ4G963otVPch7qKFidFUET8DGolcmzaPAujWE2QAairK2jgMdBn9BS7SO\nl428P3FmZRp4kgaK4gVj1rDDcoiGuVWn7fFIvzXt1ABnfMd+iXWRJikSfD8b\nvBzj+D8u77UhqgdF4fk2u+3fd7NZF4vXO68vVpGWxVPgBur7sAoyewSaOs+s\nxNVqsGVn4dr2jj3QjDmg3hUe3aFnPpSq95wPiknnE3wrjCy+R8sxzeXx1ByF\nVY4K9zgswrwwdvubefe9Wd8mpuQnveq9ljJKR+DaIfMYJTxN0m5E1QQwQxjj\nDCAJWdO/qeh8KPW9NszborUi1hLGRKIJQBXvSbrJL5kzPpNoOXxWdqSasG/X\nhCgV4kNR0yumVTDQIXtw0cq/MTyQ+BuFHD6Qk9gOjZ3vSUMLGCeJP1XmTLMI\n7njaTpfaCY6KgTulswyPdApXVQdkEAeUSIGPf0dmqxLWF8e1S/Ak7Uukm1y6\nE+1X0uTmlIjCDUrns7EwaTJvJSf6mB7xxxtpICjyi2TbdbDpGldL9pJUjeYb\n8fXqplwJEAxeJrYi4VHWWjig7NGnSBY2eEbDjmUFz+YY7TAHaTDu/X+88xy7\nriS813tLT2CpMK0XvgOtCj/jCN6TPz0dRBao8GE4zQ6+tEzQHXFft93plQdo\ngqpY5xmuFnMnIgT5lkhYb+tGgE4R34pB6/1LifVzAIBVhglC1coDAeQx3ayD\n6+v0GShxS9LcvHvGirLQQLdPkecFpCi9nZyKLJWX/6sS/ZYT1dPVJ5t+DwcH\nQ68IJds9dQAsrqmtz2TUXY0ha8hV3lEmN4mrFgbPvsaZO/QK+6eyGks6bOBR\nm658kyVN5lY5VH62LSLJ6z0OY24p8YJ7c8GdHAXGUwJYaJsU4UYY9kzuFl4U\nzXDBDM71Aki4COMQGFnMbP9Dh26w/B1AphVcp9Wzl1oo6PV+XXyA1Az5cyzH\nPSqMSfZJmPf+tbakAhv2akWPGUh3YGlgtwJtlKXk01+ggIQB5FpoiMN14YDW\n3DSVKdZexghJSIcvsOYNX4PH0s7E6dlZ735EAK000pz+BLlDtDrKyfYcw+Ji\nHw+h3NjXD3yd5KoiPaRfCmxIGoGe1MwsnOWgPqmwQFoLyuOLr623In+ZMvk0\nhLBbFD/3vnhAq+Q7AhRg4RH9hl+09M0ScTeLA54np7j5XZHzPk7hlIlfWiIm\nioe+xkJMX9NcfRfa9pFgiNUq/clepga+wLlMjWZr7Yxj3EvKNcIP/Fb300bD\nWTAwOSB0OtPJieLbFSpEAWAwOpnVBVRotgm85r1iBzMc3N2J0QvIhtPyEWbQ\nz/E/Zxhm/zRafsSVtRaEe8DbPccB7tgLv9+SqWiCK1kYqKjOPiy1RGahg2ic\njEcsOhlSr0ETuYXqICGlObE2Ti3xMNWq3p4gzejrFlEr10EHVd2/BXGxzl3y\nxPjXC4neGUJ+ccTOMXuA4U4qW+hs65bxzG3f7dK/AKJJhA3VhycPRiAcyP8S\n92+Wgofz4H7Or/YRprnZy67zFTJ5CL3zsKA1tu2zkGPkfTB9Y4cHFEBGioVs\nB3TO+/x1uTrpg9Myie9UJiya5WjsoYjb5clM+RhOcDotYvZF2gUaFXZaq1Zg\ni0i+HQMdQ/TlKAE8oD7d4BG9nbG3s0qCkP2N+8ZIOC/gACr7JTLkQ/fm2flj\nZcyjhkXGyqsUUSMwIbzqtnorZbcsB6Vb8nV3c3dOLCBxetoP68iO09MXN+RQ\n0T79+yXDFCCCfaBOod3wLko=\n",
    "encrypted_exemplar_sources": "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\nxi1JLGY=\n",
    "start_sources": {
      "SalaryRunner.java": {
        "text": "public class SalaryRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of city names\n    String[] names = FileReader.toStringArray(\"cities.txt\");\n\n    // Creates a 1D array of salaries\n    int[] salaries = FileReader.toIntArray(\"salaries.txt\");\n\n    // Creates a Salary object\n    Salary data = new Salary(names, salaries);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the calcDeviation() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Salary.java": {
        "text": "/*\n * Analyzes data about software engineering salaries\n */\npublic class Salary {\n\n  private String[] cities;      // The 1D array of city names\n  private int[] salaries;       // The 1D array of salaries for each city\n\n  /*\n   * Initializes cities and salaries to the specified 1D arrays\n   */\n  public Salary(String[] cities, int[] salaries) {\n    this.cities = cities;\n    this.salaries = salaries;\n  }\n\n  /*\n   * Returns the 1D array of city names\n   */\n  public String[] getCities() {\n    return cities;\n  }\n\n  /*\n   * Returns the 1D array of salaries for each city\n   */\n  public int[] getSalaries() {\n    return salaries;\n  }\n\n  /*\n   * Returns the amount each salary is from the average salary\n   */\n  public double calcDeviation() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Calculate and return the amount each salary is from the average salary.\n     * -----------------------------------------------------------------------------\n     */\n    \n    \n    return 0;\n  }\n\n  /*\n   * Calculates and returns the average salary\n   */\n  public double calcAverage() {\n    double sum = 0;\n\n    for (int amount : salaries) {\n      sum += amount;\n    }\n\n    return sum / salaries.length;\n  }\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "cities.txt": {
        "text": "Columbus, OH\nSeattle-Tacoma-Bellevue, WA\nCharlotte-Concord-Gastonia, NC-SC\nColorado Springs, CO\nDayton, OH\nGreensboro-High Point, NC\nSan Francisco-Oakland-Hayward, CA\nSan Francisco-Oakland-Hayward, CA\nSan Antonio-New Braunfels, TX\nDallas-Fort Worth-Arlington, TX\nDallas-Fort Worth-Arlington, TX\nDurham-Chapel Hill, NC\nAtlanta-Sandy Springs-Roswell, GA\nCincinnati, OH-KY-IN\nAustin-Round Rock, TX\nRaleigh, NC\nHouston-The Woodlands-Sugar Land, TX\nBaltimore-Columbia-Towson, MD\nLas Vegas-Henderson-Paradise, NV\nTucson, AZ\nSalt Lake City, UT\nRichmond, VA\nLexington-Fayette, KY\nDenver-Aurora-Lakewood, CO\nSan Jose-Sunnyvale-Santa Clara, CA\nSan Jose-Sunnyvale-Santa Clara, CA\nPortland-Vancouver-Hillsboro, OR-WA\nPortland-Vancouver-Hillsboro, OR-WA\nWichita, KS\nPhoenix-Mesa-Scottsdale, AZ\nPhoenix-Mesa-Scottsdale, AZ\nSanta Maria-Santa Barbara, CA\nLos Angeles-Long Beach-Anaheim, CA\nLos Angeles-Long Beach-Anaheim, CA\nBoston-Cambridge, MA\nOrlando-Kissimmee-Sanford, FL\nTampa-St. Petersburg-Clearwater, FL\nBirmingham-Hoover, AL\nSyracuse, NY\nWashington-Arlington-Alexandria, DC-VA-MD-WV\nSacramento--Roseville--Arden-Arcade, CA\nPhiladelphia-Camden-Wilmington, PA-NJ-DE-MD\nDes Moines-West Des Moines, IA\nOmaha-Council Bluffs, NE-IA\nMinneapolis-St. Paul-Bloomington, MN-WI\nChicago-Naperville-Elgin, IL-IN-WI\nNashville-Davidson--Murfreesboro--Franklin, TN\nOklahoma City, OK\nDetroit-Warren-Dearborn, MI\nSan Diego-Carlsbad, CA\nPittsburgh, PA\nNew York-Newark-Jersey City, NY-NJ-PA\nNew York-Newark-Jersey City, NY-NJ-PA\nMilwaukee-Waukesha-West Allis, WI\nIndianapolis-Carmel-Anderson, IN\nFort Collins, CO\nCharleston-North Charleston, SC\nKansas City, MO-KS\nTulsa, OK\nRochester, NY\nLouisville/Jefferson County, KY-IN\nAlbany-Schenectady-Troy, NY\nBuffalo-Cheektowaga-Niagara Falls, NY\nLittle Rock-North Little Rock-Conway, AR\nBoise City, ID\nAnn Arbor, MI\nAkron, OH\nJacksonville, FL\nAlbuquerque, NM\nSpokane-Spokane Valley, WA\nMadison, WI\nMemphis, TN-MS-AR\nCleveland-Elyria, OH\nMiami-Fort Lauderdale-West Palm Beach, FL\nMiami-Fort Lauderdale-West Palm Beach, FL\nEugene, OR\nUrban Honolulu, HI",
        "isVisible": true,
        "tabOrder": 3
      },
      "salaries.txt": {
        "text": "117552\n117323\n114122\n112118\n111616\n111050\n111017\n111017\n110898\n110891\n110891\n110313\n109849\n109013\n108990\n107676\n107672\n107282\n107175\n107170\n106291\n105258\n105248\n105197\n104964\n104964\n104335\n104335\n103690\n103177\n103177\n102781\n102188\n102188\n102171\n102093\n101733\n101598\n101256\n101188\n100785\n99955\n99878\n99826\n99228\n98726\n98623\n98617\n98156\n97974\n97043\n96686\n96686\n96580\n96448\n95969\n95609\n95308\n95187\n94819\n94320\n94051\n93735\n93194\n93112\n92683\n92207\n91568\n91010\n90269\n90238\n89921\n89040\n88249\n88249\n85912\n72811",
        "isVisible": true,
        "tabOrder": 4
      }
    },
    "name_suffix": "_2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:54:53.265+00:00\",\"changed\":[\"cloned from \\\"CSA U4L3-L7d_2023\\\"\"],\"cloned_from\":\"CSA U4L3-L7d_2023\"}]"
}]]></config>
</Javalab>
