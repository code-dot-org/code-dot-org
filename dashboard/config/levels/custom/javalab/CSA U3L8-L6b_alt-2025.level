<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T22:49:28.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "âœ… **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MusicSurvey.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findMinHours()</code> method to find the minimum number of hours a respondent listens to music per day.\r\n\r\nâœ… **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MusicSurvey.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findMaxHours()</code> method to find the maximum number of hours a respondent listens to music per day.\r\n\r\nâœ… **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SurveyRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findMinHours()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findMaxHours()</code> methods and print the result.\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">ðŸ”¦ Need help with the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findMinHours()</code> algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nminHours = responses[0].getHours()\r\nfor each answer in responses\r\n  if answer.getHours() < minHours\r\n    minHours = answer.getHours()\r\nreturn minHours\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">ðŸ”¦ Need help with the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findMaxHours</code> algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nmaxHours = responses[0].getHours()\r\nfor each answer in responses\r\n  if answer.getHours() > maxHours\r\n    maxHours = answer.getHours()\r\nreturn maxHours\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">ðŸ”¦ What is the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \r\n    <p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class is a hidden support class that has methods for reading data from a text file into a 1D array. It has the following methods:</p>\r\n\t\t<ul>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toStringArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> objects containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toIntArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> values containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toDoubleArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> values containng the data</li>\r\n\t\t</ul>\r\n    \t<p>For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nString[] names = FileReader.toStringArray(\"names.txt\");\r\n \r\nint[] numbers = FileReader.toIntArray(\"numbers.txt\");\r\n \r\ndouble[] prices = FileReader.toDoubleArray(\"prices.txt\");</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Minimum and Maximum Hours",
    "bubble_choice_description": "Write the `findMinHours()` and `findMaxHours()` methods to find the minimum and maximum hours a respondent listens to music each day.",
    "thumbnail_url": "https://images.code.org/a2ede4869370c8441546249de04fa03a-compare.png",
    "encrypted_validation": "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\nQ0QqsOT8ts27EDvjTsEmaT49YpfHTaPjfj69UbWQ/oGnWdzuPb6T0jGuj8cV\nMJ9f7o4iMYpBzRt+r42IugCV9d2KX7npfMymZuH15iochRHSnqyugX0SC/oW\n6adNati5rY75fYGENlEA9Q/LACM/839sxlzUXyCrQYe5naKmRL1mNcxapKFH\neUV1NOWn/a0ialkxshWyN+ig7wu7yqLeY5FfEhW05muWM7Iu+y9Qz9gfbqe/\nQBRUh0N+8uQcGYshORMAaTEbCZh2jyVCqdBmcCVHlFvnpZhFXlzOP62DBJwd\nEQsSPNThlg0mz5sp6s++K4G/fUGluTfRRbPP0vtqjsSGa+H8c4fUxKqN231B\nLtDaAwScow22+KCtObsSX2LhHaQk4b7ydm8sxcOLqOzfl05HPKhGkyCeePvB\nJYHBras5HiK0VmGwULgKT1jBFS8Ap6utzq/1t39yX7TAvuFA7pHl+hZXxmKB\nhda6edWYMYSOCikjMRR0eEknv6REQ0FiLTsguW7HqtRcJhgcLnZJem4M7qML\nU6r0/el9CE1hA7xYa23YypARZtGGP/vOeQ6yOsIVyFU4WrDVfbbJij9JAWZ0\nHyhIejNBFvUWsVhMIuw8xSofvwzLxyUdVbu7Z53sTzaE/JLmy9I0n51KGLaL\nIZPZp+DhvCHxmr2i0CjENWDqUes/FdqHBhSMlu7HQAoQ4r5JXD38fry2ZjOi\nqFrI4jI83Zl0V/fsbEVnY7PzdqVyko8HmAsEFpgthxVVGnWkBV7UGv8VDha/\nMl6FXEybzc3PSV3affqj128ZI8tW+EB8lffjjdZ2t39D8Wlu6HnjhdDOOWg7\nyI40Q9xLe8uF6bARce14vjr19RrF/9Qgh0dpyHyegevOcqS67ptmTf9TTRap\n+gDjqY6LuB+LWMgnAzC9APP2ndQFAhJDch31oJx/+3kdtEDQWua5ZcxUYvFm\nnYTUtEyYCMY=\n",
    "start_sources": {
      "SurveyRunner.java": {
        "text": "public class SurveyRunner {\n  public static void main(String[] args) {\n\n    MusicSurvey responses = new MusicSurvey(\"hours.txt\", \"effects.txt\");\n    System.out.println(responses);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Call the findMinHours() and findMaxHours() methods and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "MusicSurvey.java": {
        "text": "/*\n * Manages data about responses to a survey\n */\npublic class MusicSurvey {\n\n  private Respondent[] responses;    // The 1D array of Respondent objects\n\n  /*\n   * Reads the data from hoursFile and effectsFile to initialize responses\n   */\n  public MusicSurvey(String hoursFile, String effectsFile) {\n    responses = createResponses(hoursFile, effectsFile);\n  }\n\n  /*\n   * Returns a 1D array of Respondent objects using the data from hoursFile and effectsFile\n   */\n  public Respondent[] createResponses(String hoursFile, String effectsFile) {\n    double[] hoursData = FileReader.toDoubleArray(hoursFile);\n    String[] effectsData = FileReader.toStringArray(effectsFile);\n    \n    Respondent[] tempResponses = new Respondent[hoursData.length];\n\n    for (int index = 0; index < tempResponses.length; index++) {\n      tempResponses[index] = new Respondent(hoursData[index], effectsData[index]);\n    }\n\n    return tempResponses;\n  }\n\n  /*\n   * Returns the minimum number of hours a respondent listens to music per day\n   */\n  public double findMinHours() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Find and return the smallest number of hours a respondent listens\n     * to music each day.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return -1;\n  }\n\n  /*\n   * Returns the maximum number of hours a respondent listens to music per day\n   */\n  public double findMaxHours() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Find and return the largest number of hours a respondent listens\n     * to music each day.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    return -1;\n  }\n\n  /*\n   * Returns a String containing each respondent's information\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (Respondent answer : responses) {\n      result += answer + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Respondent.java": {
        "text": "/*\n * Represents a respondent to a survey\n */\npublic class Respondent {\n\n  private double hours;      // The number of hours a respondent listens to music per day\n  private String effect;     // The effect music has on a respondent's mental health\n\n  /*\n   * Sets hours and effect to the specified values\n   */\n  public Respondent(double hours, String effect) {\n    this.hours = hours;\n    this.effect = effect;\n  }\n\n  /*\n   * Returns the number of hours a respondent listens to music per day\n   */\n  public double getHours() {\n    return hours;\n  }\n\n  /*\n   * Returns the effect music has on the respondent's mental health\n   */\n  public String getEffect() {\n    return effect;\n  }\n\n  /*\n   * Returns a String containing the hours and effect\n   */\n  public String toString() {\n    return hours + \" hours - \" + effect;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "hours.txt": {
        "text": "3\n1.5\n4\n2.5\n4\n5\n3\n1\n6\n1\n3\n8\n3\n2\n4\n2\n8\n12\n24\n3\n8\n4\n5\n2\n3\n2\n12\n6\n2\n1\n5\n2\n6\n4\n1\n5\n4\n3\n0.5\n4\n2\n5\n0.25\n3\n4\n1\n1\n3\n5\n3\n2\n6\n1\n12\n4\n2\n6\n0\n7\n1\n1\n1\n2\n2\n5\n6\n3\n4\n3\n2\n3\n2\n4\n2\n0.5\n5\n5\n10\n2\n4\n5\n3\n2\n2.5\n3\n1\n7\n1\n1\n3\n5\n6\n4\n1\n4\n10\n3\n2\n4\n8",
        "isVisible": true,
        "tabOrder": 3
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 5
      },
      "effects.txt": {
        "text": "No effect\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nWorsen\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nImprove\nNo effect\nImprove\nNo effect\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nWorsen\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nImprove\nImprove\nNo effect\nNo effect\nNo effect\nNo effect\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove\nImprove",
        "isVisible": true,
        "tabOrder": 4
      }
    },
    "encrypted_exemplar_sources": "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\nH9IHBpPgwrSjcA==\n",
    "name_suffix": "_alt-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T22:49:28.325+00:00\",\"changed\":[\"cloned from \\\"CSA U3L8-L6b_pilot-2025\\\"\"],\"cloned_from\":\"CSA U3L8-L6b_pilot-2025\"}]"
}]]></config>
</Javalab>
