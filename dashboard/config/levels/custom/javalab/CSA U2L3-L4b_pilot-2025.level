<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-01T22:19:10.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A website allows freelance photographers to display and sell their projects.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Project</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">title</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numPhotos</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Project</code> class to assign a specific value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">title</code> instance variable and a default value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numPhotos</code> instance variable.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ProjectRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Project</code> objects using each parameterized constructor. \r\n\r\n‚úÖ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Project</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>\r\n        Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getTitle()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getNumPhotos()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Project</code> class to get the current values assigned to the instance variables. For example:</p>\r\n                <pre style=\"background-color: #333333; color: white;\">\r\nProject landscapes = new Project();\r\nSystem.out.println(\"Title: \" + landscapes.getTitle());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Photographer Projects",
    "bubble_choice_description": "A website allows freelance photographers to display and sell their projects.",
    "thumbnail_url": "https://images.code.org/d9cf73181550fe3578f317197fbaa1d2-camera.png",
    "encrypted_exemplar_sources": "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\n",
    "encrypted_validation": "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\n",
    "video_key": "csa_overloaded_constructors",
    "start_sources": {
      "ProjectRunner.java": {
        "text": "public class ProjectRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Project object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Project.java": {
        "text": "/*\n * Represents a photographer's project of photos\n */\npublic class Project {\n\n  private String title;     // The title of a photography project\n  private int numPhotos;    // The number of photos in a project\n  \n  /*\n   * Sets the name to \"unknown\" and numPhotos to 0\n   */\n  public Project() {\n    title = \"unknown\";\n    numPhotos = 0;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the title and numPhotos instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign a specific value to the title\n   * instance variable and a default value to the numPhotos instance variable.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Returns the current value assigned to title\n   */\n  public String getTitle() {\n    return title;\n  }\n\n  /*\n   * Returns the current value assigned to numPhotos\n   */\n  public int getNumPhotos() {\n    return numPhotos;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    int end = currentConstructor.indexOf(\")\");\n    \n    if (start < 0 || end < 0 || end < start) {\n        return parametersList;\n    }\n    \n    currentConstructor = currentConstructor.substring(start, end).trim();\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma).trim();\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1).trim();\n        comma = currentConstructor.indexOf(\",\");\n    }\n    \n    if (!currentConstructor.isEmpty()) {\n        parametersList.add(currentConstructor);\n    }\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n  public static String findConstructorWithParameters(ArrayList<String> constructorsList, int expectedParamCount, String... expectedParamTypes) {\n    for (String constructor : constructorsList) {\n        ArrayList<String> actualParameters = getParameters(constructor);\n        if (actualParameters.size() == expectedParamCount) {\n            boolean allParamsMatch = true;\n            for (String expectedParamType : expectedParamTypes) {\n                if (!actualParameters.contains(expectedParamType)) {\n                    allParamsMatch = false;\n                    break;\n                }\n            }\n            if (allParamsMatch) {\n                return constructor;\n            }\n        }\n    }\n    return null;\n  }\n\n  public static boolean hasConstructor(Class<?> clazz, Class<?>... parameterTypes) {\n        try {\n            clazz.getConstructor(parameterTypes);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n  public static Object createInstance(Class<?> clazz, Object... initargs) {\n        try {\n            Class<?>[] parameterTypes = new Class<?>[initargs.length];\n            for (int i = 0; i < initargs.length; i++) {\n                parameterTypes[i] = initargs[i].getClass();\n            }\n            Constructor<?> constructor = clazz.getConstructor(parameterTypes);\n            return constructor.newInstance(initargs);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "name_suffix": "_pilot-2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-01T22:19:10.896+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L4b_2025\\\"\"],\"cloned_from\":\"CSA U2L3-L4b_2025\"}]"
}]]></config>
</Javalab>
