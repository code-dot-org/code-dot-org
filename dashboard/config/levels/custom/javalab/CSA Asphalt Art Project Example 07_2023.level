<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "**Teacher Feedback:** none\r\n\r\n##Result\r\n\r\n![](https://images.code.org/4d4bd3b56af542255461c1e402e055d2-image-1666710539988.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "serialized_maze": [
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ],
      [
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        },
        {
          "tileType": 1,
          "value": 0,
          "assetId": 0
        }
      ]
    ],
    "csa_view_mode": "neighborhood",
    "start_sources": {
      "MyNeighborhood.java": {
        "text": "import org.code.neighborhood.Painter;\n\npublic class MyNeighborhood {\n  public static void main(String[] args) {\n\n    PatternPainter myPP = new PatternPainter();\n    RainbowPainter myRP = new RainbowPainter();\n\n    myPP.smile();\n    myRP.paintNiceRainbowBackground();\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "PainterPlus.java": {
        "text": "import org.code.neighborhood.Painter;\n\npublic class PainterPlus extends Painter{\n    public PainterPlus() {\n      super();\n    }\n    public void turnRight() {\n      turnLeft();\n      turnLeft();\n      turnLeft();\n    }\n   /*\n   * Moves forward in the direction it is facing\n   * and takes paint if on a paint bucket.\n   */\n    public void moveOrTakePaint() {\n      while (canMove()) {\n        move();\n        while (isOnBucket()) {\n          takePaint();\n        }\n      }\n    }\n    public void moveSouth() {\n      while (canMove(\"south\")) {\n        if (isFacingSouth()) {\n          move();\n        }\n        else {\n          turnRight();\n        }\n      }\n    }\n    public void printStatus() {\n      System.out.println(\"Paint: \" + getMyPaint());\n      System.out.println(\"x: \" + getX());\n      System.out.println(\"y: \" + getY());\n      System.out.println(\"Direction: \" + getDirection());\n    }\n    public void moveFast() {\n      while(canMove()) {\n        move();\n        if (isOnBucket()) {\n          break;\n        }\n      }\n    }\n    public void moveNPaint(String direction) {\n      while(canMove(direction)) {\n        if (getDirection() != direction) {\n          turnLeft();\n        }\n        else if (hasPaint()) {\n          move();\n          paint(\"white\");\n        }\n        else {\n          move();\n          break;\n        }\n      }\n    }\n    public void takeAllPaint() {\n      while (isOnBucket()) {\n        takePaint();\n      }\n    }\n    public void paintDashes() {\n      Integer count = 0;\n      while(canMove(\"south\")) {\n        if (isFacingSouth()) {\n          move();\n          if (count % 3 != 0) {\n            paint(\"white\");\n          }\n          count++;\n        }\n        else {\n          turnRight();\n          count++;\n        }\n      }\n    }\n    public void paintTruckBorder() {\n       for (int i = 0; i < 2; i++) {\n         for (int c = 0; c < 3; c++) {\n           move();\n           paint(\"white\");\n         }\n         move();\n         takeAllPaint();\n         paint(\"white\");\n         move();\n         paint(\"white\");\n         turnLeft();\n         for (int d = 0; d < 2; d++) {\n           move();\n           paint(\"white\");\n         }\n         move();\n         takeAllPaint();\n         turnLeft();\n       }\n       paint(\"white\");\n    }\n    public void smallEndTurn() {\n    if (getDirection() == \"east\") // if painter facing east(forwards)\n    {\n      turnRight();\n      if (canMove(\"south\")) {\n        move();\n      }\n      turnRight();\n    }\n    else if (getDirection() == \"west\") // if painter is facing west (backwards) \n    {\n      turnLeft();\n      move();\n      turnLeft();\n    }\n  }\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "PatternPainter.java": {
        "text": "import org.code.neighborhood.*;\n\nclass PatternPainter extends PainterPlus {\n  public PatternPainter() {\n    super();\n  }\n  public void dashes() {\n    while (canMove(\"south\")) {\n      while(canMove()) {\n        move();\n        setPaint(2);\n        if (canMove()) {\n          paint(\"white\");\n          move();\n        }\n        if (canMove()) {\n          paint(\"white\");\n          move();\n        }\n      }\n      endTurn();\n    }\n    \n  }\n  public void endTurn() {\n    if (getDirection() == \"east\") // if painter facing east(forwards)\n    {\n      turnRight();\n      move();\n      if (canMove(\"south\")) {\n        move();\n      }\n      turnRight();\n    }\n    else if (getDirection() == \"west\") // if painter is facing west (backwards) \n    {\n      turnLeft();\n      move();\n      if (canMove(\"south\")) {\n        move();\n      }\n      turnLeft();\n    }\n  }\n  public boolean onSmile() {\n    if (getY() == 1 && (getX() == 2 || getX() == 5)) {\n      return true;\n    }\n    else if (getY() == 4 && (getX() == 1 || getX() == 6)) {\n      return true;\n    }\n    else if (getY() == 5 && (getX() >= 1 && getX() <= 6)) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  public void smile() {\n    while(canMove()) {\n      while (canMove()) {\n        move();\n        if (onSmile()) {\n          setPaint(1);\n          paint(\"white\");\n        }\n      }\n      if (canMove(\"south\")) {\n        smallEndTurn();\n      }\n    }\n  }\n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "RainbowPainter.java": {
        "text": "import org.code.neighborhood.*;\n\nclass RainbowPainter extends PainterPlus {\n  int rainbowCount = 0;\n  public RainbowPainter() {\n    super();\n  }\n  public void moveFastAndPaintRR() {\n    while (canMove()) {\n      setPaint(1);\n      paintRainbowRandom();\n      rainbowCount++;    // add 1 to rainbowCount every time\n      move();\n    }\n  }\n  public void moveFastAndPaintOR() {\n    while (canMove()) {\n      setPaint(1);\n      paintRainbowOrganized();\n      move();\n    }\n  }\n  public void paintRainbowRandom() {\n    if (!isOnPaint()) {\n      if (rainbowCount % 12 == 0 || rainbowCount % 12 == 1) {\n        paint(\"red\");\n      }\n      else if (rainbowCount % 12 == 2 || rainbowCount % 12 == 3) {\n        paint(\"orange\");\n      }\n      else if (rainbowCount % 12 == 4 || rainbowCount % 12 == 5) {\n        paint(\"yellow\");\n      }\n      else if (rainbowCount % 12 == 6 || rainbowCount % 12 == 7) {\n        paint(\"green\");\n      }\n      else if (rainbowCount % 12 == 8 || rainbowCount % 12 == 9) {\n        paint(\"blue\");\n      }\n      else {\n        paint(\"purple\");\n      } \n    }\n  }\n  public void endTurnRR() {\n    if (getDirection() == \"east\") // if painter facing east(forwards)\n    {\n      setPaint(2);\n      turnRight();\n      paintRainbowRandom();\n      rainbowCount++;\n      move();\n      turnRight();\n    }\n    else if (getDirection() == \"west\") // if painter is facing west (backwards) \n    {\n      setPaint(2);\n      turnLeft();\n      paintRainbowRandom();\n      rainbowCount++;\n      move();\n      turnLeft();\n    }\n  }\n  public void paintRainbowOrganized() {\n    if (!isOnPaint()) {\n      if (getX() % 8 == 0) {\n        paint(\"red\");\n      }\n      else if (getX() % 8 == 1) {\n        paint(\"orange\");\n      }\n      else if (getX() % 8 == 2) {\n        paint(\"gold\");\n      }\n      else if (getX() % 8 == 3) {\n        paint(\"yellow\");\n      }\n      else if (getX() % 8 == 4) {\n        paint(\"green\");\n      }\n      else if (getX() % 8 == 5) {\n        paint(\"teal\");\n      }\n      else if (getX() % 8 == 6) {\n        paint(\"blue\");\n      }\n      else {\n        paint(\"purple\");\n      } \n    }\n  }\n  public void endTurnRO() {\n    if (getDirection() == \"east\") // if painter facing east(forwards)\n    {\n      setPaint(2);\n      turnRight();\n      paintRainbowOrganized();\n      move();\n      turnRight();\n    }\n    else if (getDirection() == \"west\") // if painter is facing west (backwards) \n    {\n      setPaint(2);\n      turnLeft();\n      paintRainbowOrganized();\n      move();\n      turnLeft();\n    }\n  }\n  public void paintRandomRainbowBackground() {\n    while (canMove()) {\n      moveFastAndPaintRR();\n      if (canMove(\"south\")) {\n        endTurnRR();\n      }\n      setPaint(1);\n      paintRainbowRandom();\n    }\n  }\n  public void paintNiceRainbowBackground() {\n    while (canMove()) {\n      moveFastAndPaintOR();\n      if (canMove(\"south\")) {\n        endTurnRO();\n      }\n      setPaint(1);\n      paintRainbowOrganized();\n    }\n  }\n}\n\n//sus was here\n",
        "isVisible": true,
        "tabOrder": 4
      },
      "BackgroundPainter.java": {
        "text": "import org.code.neighborhood.*;\n\nclass BackgroundPainter extends PainterPlus {\n  public BackgroundPainter() {\n    super();\n  }\n  public void moveFastAndPaint() {\n    while (canMove()) {\n      setPaint(1);\n      if (!isOnPaint()) {\n        paint(\"purple\");\n      }\n      move();\n    }\n  }\n  public void endTurn() {\n    if (getDirection() == \"east\") // if painter facing east(forwards)\n    {\n      setPaint(2);\n      turnRight();\n      paint(\"purple\");\n      move();\n      turnRight();\n    }\n    else if (getDirection() == \"west\") // if painter is facing west (backwards) \n    {\n      setPaint(2);\n      turnLeft();\n      paint(\"purple\");\n      move();\n      turnLeft();\n    }\n  }\n  public void paintBackground() {\n    while (canMove()) {\n      moveFastAndPaint();\n      if (canMove(\"south\")) {\n        endTurn();\n      }\n    }\n  }\n}",
        "isVisible": true,
        "tabOrder": 5
      }
    },
    "encrypted_examples": [

    ]
  },
  "game_id": 68,
  "published": true,
  "created_at": "2022-10-25T14:52:11.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "audit_log": "[{\"changed_at\":\"2022-10-25T14:52:11.879+00:00\",\"changed\":[\"cloned from \\\"CSA Asphalt Art Project Example 06_2023\\\"\"],\"cloned_from\":\"CSA Asphalt Art Project Example 06_2023\"},{\"changed_at\":\"2022-10-25 14:52:17 +0000\",\"changed\":[\"serialized_maze\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-25 14:54:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-25 14:54:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-25 15:08:59 +0000\",\"changed\":[\"long_instructions\",\"serialized_maze\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
