<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:50:01.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "An electronics store sells a variety of new and used electronics.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Electronic</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">price</code>, and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">isRefurbished</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Electronic</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">price</code> instance variables and a default value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">isRefurbished</code> instance variable.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">StoreRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Electronic</code> objects using each parameterized constructor. \r\n\r\n‚úÖ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Electronic</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>\r\n        Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getPrice()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Electronic</code> class to get the current values assigned to the instance variables. For example:</p>\r\n                <pre style=\"background-color: #333333; color: white;\">\r\nElectronic phone = new Electronic();\r\nSystem.out.println(\"Name: \" + phone.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Electronics",
    "bubble_choice_description": "An electronics store sells a variety of new and used electronics.",
    "thumbnail_url": "https://images.code.org/9e5af0aef12d976f207f2434757ce977-desktop.png",
    "encrypted_exemplar_sources": "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\nazkmou+nVKBK28fDJ2SPA/u26Qw2VUku0silceRLN6pVGIxxRPFliTWt+BmR\nUsyBmG8W6sx4SafGNZnPQSyInM+OWDbrFsIPph4M84z2Gv3oL4uuel4WJmWQ\n92jfZZzML/G7UaruXURldacxnu7582reTAl74iWi93a37Yb8FoO/ElSm6XbL\nr1xT1//Q0eh1cDUiTSwRXOMOmpZjELQ+oFfepSBT5/uJ8nD62Xwx0h4wMD30\nTx0G3PVgLErZtAjBeO7JyU8Ube3ECVRLLlA5ENcUqohvyHj8wuTfkg9xTJ++\n4LU60eHwmsMbc+MDWnr7gLiuNzm0HH4ttMn6mO9720F0lK39dbv6z3fCmFSf\ndj40qykGMI57hR0JIoYOYsb5QP1hoZm+YrLV/yZaLf9SIYJPIfVVVJCNONA6\nzo4nYiOWz92/0O58yJFG6X9DdGULS40vtPJkEA8ere6E1CzAZUEOchebOb8Y\nx5Gv4STnqdNafgaeKYlf0IDOhM/4NK15mjIC/tBa7MxhlU9/LxkAvixLRRWG\nWveNzJsCtcz+49AZ0U5FVjxjcxfepVggxANGFD3Mf4xja85qI3iuOHbY/tur\n2FKjA/AJXXsKRkfBAdBqYOs1Y51GxvOVrzHM8A7Itv1evkjuVxW/6YMIsiP/\nWoGt0rCaJJcswjn/Nyx5omrQmH8I+t73a5aSq13A2f27G5CrIVfDcb7g12yA\nd5tKjH+819vKW51CxDiJWmNhfO0F+Au57xWOA9DXpz2J7KinrpLmTTXYpg3o\nBJpevydPgi17i/qzLAbc670jZgss6W5Nvvqt90zJtuF3HsQXUoRErScvod7w\nQ78gdRieZzo4LeAjFQYCgVUQ7C81PmvWF0rK/nNQHkFD6Gtbq8Wdwsk1OMnZ\nJ/tNWcfwgJgtJp+5zMg4K01bXWPM7Fdu2Wz+cEFAWLde8JA21eS97+xLcWeW\nIZPAg5YX+jGqlsofg7IcJ4IimDP8m0owbsmr5QRhpPDKFgs1kGaVnhrtZq+Q\noT7dHonL5BzN61QOmpYkLvLcQu93BZiOV8sXhAkCvM7J0CbhwQY5dC8j++TQ\nfblmd614HeTctqhH1IIiarlLIH+tU9ejEWz3I6QW7Ey640P5ioEhE1bsZH1M\nuhZeVAQ+jMed6OPCN2HcRw1cbE17dupOLw==\n",
    "encrypted_validation": "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\nS9kbRv/JxTx2glBOUw==\n",
    "video_key": "csa_overloaded_constructors",
    "start_sources": {
      "StoreRunner.java": {
        "text": "public class StoreRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Electronic object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Electronic.java": {
        "text": "/*\n * Represents an electronic at a store\n */\npublic class Electronic {\n\n  private String name;             // The name of an electronic\n  private double price;            // The price of an electronic\n  private boolean isRefurbished;   // Whether or not an electronic is refurbished\n  \n  /*\n   * Sets the name to \"unknown\", price to 50.99\n   * and isRefurbished to false\n   */\n  public Electronic() {\n    name = \"unknown\";\n    price = 50.99;\n    isRefurbished = false;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the name, price, and isRefurbished instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign a specific value to the name\n   * and price instance variables and a default value to isRefurbished.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to price\n   */\n  public double getPrice() {\n    return price;\n  }\n\n  /*\n   * Returns the current value assigned to isRefurbished\n   */\n  public boolean getIsRefurbished() {\n    return isRefurbished;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    int end = currentConstructor.indexOf(\")\");\n    \n    if (start < 0 || end < 0 || end < start) {\n        return parametersList;\n    }\n    \n    currentConstructor = currentConstructor.substring(start, end).trim();\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma).trim();\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1).trim();\n        comma = currentConstructor.indexOf(\",\");\n    }\n    \n    if (!currentConstructor.isEmpty()) {\n        parametersList.add(currentConstructor);\n    }\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n  public static String findConstructorWithParameters(ArrayList<String> constructorsList, int expectedParamCount, String... expectedParamTypes) {\n    for (String constructor : constructorsList) {\n        ArrayList<String> actualParameters = getParameters(constructor);\n        if (actualParameters.size() == expectedParamCount) {\n            boolean allParamsMatch = true;\n            for (String expectedParamType : expectedParamTypes) {\n                if (!actualParameters.contains(expectedParamType)) {\n                    allParamsMatch = false;\n                    break;\n                }\n            }\n            if (allParamsMatch) {\n                return constructor;\n            }\n        }\n    }\n    return null;\n  }\n\n  public static boolean hasConstructor(Class<?> clazz, Class<?>... parameterTypes) {\n        try {\n            clazz.getConstructor(parameterTypes);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n  public static Object createInstance(Class<?> clazz, Object... initargs) {\n        try {\n            Class<?>[] parameterTypes = new Class<?>[initargs.length];\n            for (int i = 0; i < initargs.length; i++) {\n                parameterTypes[i] = initargs[i].getClass();\n            }\n            Constructor<?> constructor = clazz.getConstructor(parameterTypes);\n            return constructor.newInstance(initargs);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "name_suffix": "_2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:50:01.122+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L4d_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L4d_2023\"}]"
}]]></config>
</Javalab>
