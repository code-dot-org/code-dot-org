<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:52:59.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "**User Story A:** As an avian veterinary student, I want to identify groups of similar birds so I can study them for my final exams.\r\n\r\n**Possible Extensions:** I would like to be quizzed on descriptors based on the bird.\r\n\r\nâœ… **TO DO:** Use your knowledge of object-oriented programming, one-dimensional (1D) arrays, and algorithms to create your data analysis program:\r\n\r\n1. **Write a class** - Write a class to represent your user or business and store and analyze their data with no-argument and parameterized constructors.\r\n\r\n2. **Create at least two 1D arrays** - Create at least two 1D arrays to store the data that your user needs information about.\r\n\r\n3. **Write a method** - Write a method that finds or manipulates the elements in a 1D array to provide the information your user needs.\r\n\r\n4. **Implement a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">toString()</code> method** - Write a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">toString()</code> method that returns general information about the data (for example, number of values in the dataset).\r\n\r\n5. **Document your code** - Use comments to explain the purpose of the methods and code segments and note any preconditions and postconditions.\r\n\r\n### FileReader Methods\r\n\r\n* <code style=\"background-color: #ececec; color: black; font-weight: bold;\">toStringArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> objects containing the data\r\n\r\n* <code style=\"background-color: #ececec; color: black; font-weight: bold;\">toIntArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> values containing the data\r\n\r\n* <code style=\"background-color: #ececec; color: black; font-weight: bold;\">toDoubleArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> values containing the data",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "DataRunner.java": {
        "text": "import java.util.Scanner;\n\npublic class DataRunner {\n  public static void main(String[] args) {\n\n\n\n\n\n    \n\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "UserStory.java": {
        "text": "import java.util.Scanner;\n\npublic class UserStory {\n\n\n\n\n\n\n\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "names.txt": {
        "text": "American Goldfinch\nAmerican Purple Gallinule\nAmerican Redstart\nAmsterdam Albatross\nArctic Tern\nBald Eagle\nBelted Kingfisher\nBlack-Crowned Night Heron\nBlue Footed Booby\nBlue Jay\nBlue Manakin\nBokikokiko\nBrown Creeper\nBuff-Spotted Flufftail\nBumblebee Hummingbird\nCarolina Wren\nCave Swallow\nCommon Buttonquail\nCommon Ostrich\nCommon Pheasant\nCommon Raven\nCommon Sandpiper\nCrested Caracara\nDark-Eyed Junco\nDouble-Crested Cormorant\nEastern Screech Owl\nEastern Whip-Poor-Will\nElegant Sunbird\nElegant Trogon\nEmperor Goose\nFlame Bowerbird\nFork-Tailed Flycatcher\nGambel's Quail\nGolden White-Eye\nGouldian Finch\nGreat Blue Heron\nGreat Curassow\nGreat Frigatebird\nGreat Hornbill\nGreat Potoo\nGreat White Pelican\nGreater Flamingo\nHarpy Eagle\nHawaiian Stilt\nHoatzin\nKakapo\nKing Vulture\nLaughing Falcon\nLaughing Kookaburra\nLear's Macaw\nLittle Spotted Kiwi\nMacaroni Penguin\nMallard\nMourning Dove\nNarcissus Flycatcher\nNene\nNorthern Cardinal\nOvenbird\nPeregrine Falcon\nPied Avocet\nPileated Woodpecker\nPink Robin\nPinyon Jay\nRazorbill\nRed-Billed Oxpecker\nRed-Breasted Nuthatch\nRed-Tailed Tropicbird\nRed-Whiskered Bulbul\nRegent Honeyeater\nRing-Billed Gull\nRock Dove\nRoseate Spoonbill\nRose-Breasted Gosbeak\nRuby-Crowned Kinglet\nRuby-Throated Hummingbird\nRudd's Lark\nScarlet Tanager\nSecretarybird\nSharp-Shinned Hawk\nShoebill\nSierra Madre Sparrow\nSmooth-Billed Ani\nSnail Kite\nSnowy Owl\nSpoon-Billed Sandpiper\nSuperb Bird-of-Paradise\nTawny Frogmouth\nToco Toucan\nTricolored Blackbird\nTufted Puffin\nVictoria Crowned Pigeon\nViolet-Backed Starling\nVulturine Guineafowl\nWhite Wagtail\nWhooping Crane\nWilson's Bird-Of-Paradise\nWood Duck\nYellow Bellied Sapsucker",
        "isVisible": true,
        "tabOrder": 2
      },
      "status.txt": {
        "text": "Least Concern\nLeast Concern\nLeast Concern\nEndangered\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nLeast Concern\nNear Threatened\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nNear Threatened\nLeast Concern\nVulnerable\nLeast Concern\nNear Threatened\nLeast Concern\nLeast Concern\nLeast Concern\nNear Threatened\nEndangered\nLeast Concern\nCritically Endangered\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nNear Threatened\nVulnerable\nLeast Concern\nLeast Concern\nLeast Concern\nVulnerable\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nVulnerable\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nCritically Endangered\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nLeast Concern\nVulnerable\nLeast Concern\nVulnerable\nLeast Concern\nVulnerable\nEndangered\nLeast Concern\nLeast Concern\nVulnerable\nCritically Endangered\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nLeast Concern\nNear Threatened\nLeast Concern\nLeast Concern\nLeast Concern\nEndangered\nNear Threatened\nLeast Concern\nLeast Concern",
        "isVisible": true,
        "tabOrder": 3
      },
      "colors.txt": {
        "text": "Yellow\nBlue\nBlack\nBlack\nWhite\nBrown\nGrey\nGrey\nWhite\nBlue\nBlue\nGrey\nBrown\nBlack\nGreen\nBrown\nBrown\nBrown\nBlack\nBrown\nBlack\nWhite\nBrown\nBlack\nBlack\nBrown\nBrown\nYellow\nRed\nGrey\nYellow\nWhite\nBlue\nYellow\nGreen\nGrey\nBlack\nBlack\nBlack\nBrown\nWhite\nPink\nGrey\nBlack\nBrown\nGreen\nWhite\nBrown\nBrown\nBlue\nBrown\nWhite\nBrown\nBrown\nYellow\nBrown\nRed\nBrown\nGrey\nWhite\nBlack\nPink\nBlue\nWhite\nBrown\nGrey\nWhite\nBrown\nBlack\nWhite\nGrey\nPink\nWhite\nBrown\nGreen\nBrown\nRed\nWhite\nBrown\nGrey\nBrown\nBlack\nGrey\nWhite\nBrown\nBlack\nBrown\nBlack\nBlack\nBlack\nBlue\nPink\nBlue\nWhite\nWhite\nRed\nBrown\nBlack",
        "isVisible": true,
        "tabOrder": 4
      },
      "diets.txt": {
        "text": "seeds\nfrogs\nflying insects\nsquid\nfish\nfish\nfish\nfish\nfish\nnuts\nfruit\nflies\ninsects\nants\nnectar\ninsects\nflying insects\nseeds\nseeds\nfruit\ncarrion\nlarvae\ncarcasses\nseeds\nfish\ninsects\nflying insects\ninsects\ninsects\nshoots\nfruit\nflying insects\ninsects\ninsects\nseeds\nfish\nfruits\nfish\nfruit\nflying insects\nfish\nplankton\nmonkeys\nfish\nleaves\nplants\ncarcasses\nsnakes\nmice\nlicuri palm nuts\ngrubs\ncrustaceans\ninsects\nseeds\nInsects\nleaves\nseeds\ninsects\npigeons\ncrustaceans\ninsects\nspiders\npinyon seeds\nfish\nblood\ninsects\nsquid\nfruit\neucalyptus nectar\ninsects\nfruits\ncrustaceans\ninsects\ninsects\nflower nectar\ninsects\ninsects\ninsects\nbirds\nfish\ninsects\ninsects\nsnails\nsmall mammals\nmosquitoes\nfruit\nlarge insects\nfruit\nbeetles\nfish\nseeds\nfruit\nseeds\naquatic insects\ncrustaceans\nfruit\nberries\ntree sap",
        "isVisible": true,
        "tabOrder": 5
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 6
      }
    },
    "display_name": "User Story A",
    "bubble_choice_description": "As an avian veterinary student, I want to identify groups of similar birds so I can study them for my final exams.",
    "thumbnail_url": "https://images.code.org/e1b63f3a585cb2712a36e1df7394831c-d5bfefa347786f5d6bc25709905e1555-image-1648762646150.png",
    "encrypted_exemplar_sources": "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\nIlDO4ML3mgZ6S8h9qaTC41Cp\n",
    "name_suffix": "_2024",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:52:59.047+00:00\",\"changed\":[\"cloned from \\\"CSA U3 Data for Social Good Project A 1-Day_2023\\\"\"],\"cloned_from\":\"CSA U3 Data for Social Good Project A 1-Day_2023\"}]"
}]]></config>
</Javalab>
