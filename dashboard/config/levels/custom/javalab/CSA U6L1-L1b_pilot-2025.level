<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T18:26:35.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Look at this project example. What are some of its characteristics and features?\r\n\r\n*While this is an example of a project for this unit, it is not representative of the only way you can approach or develop the project.*",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "SongRunner.java": {
        "text": "public class SongRunner {\n  public static void main(String[] args) {\n\n    SongAnalyzer songs = new SongAnalyzer(\"songtitles.txt\");\n    songs.prompt();\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "SongAnalyzer.java": {
        "text": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n/*\n * Analyzes unique words in song lyrics\n */\npublic class SongAnalyzer {\n    \n  private String lyrics;                   // The file containing the lyrics\n  private ArrayList<String> songTitles;    // The list of songs to analyze\n  private ArrayList<String> uniqueWords;   // The list of unique words in the lyrics\n  private ArrayList<Integer> counts;       // The counts of each unique word in the lyrics\n\n  /*\n   * Initializes the songTitles list using the data from the specified text file\n   */\n  public SongAnalyzer(String songsFile) {\n    this.songTitles = FileReader.toStringList(songsFile);\n  }\n\n  /*\n   * Prompts the user to choose a song to retrieve information about\n   */\n  public void prompt() {\n    Scanner input = new Scanner(System.in);\n    String choice = \"yes\";\n  \n    while (choice.equals(\"yes\") || choice.equals(\"y\")) {\n      System.out.print(\"Would you like to analyze a song? \");\n      choice = input.nextLine();\n  \n      if (choice.equals(\"yes\") || choice.equals(\"y\")) {\n        System.out.print(\"Enter the name of the song: \");\n        String songTitle = input.nextLine();\n\n        if (confirmSong(songTitle)) {\n          lyrics = getSongFile(songTitle);\n          System.out.println(getSongInfo());\n        }\n        else {\n          System.out.println(\"Song title not found. Choose another song.\");\n        }\n      }\n    }\n  \n    input.close();\n    System.out.println(\"Goodbye!\");\n  }\n\n  /*\n   * Gets the filename for the chosen song\n   */\n  public String getSongFile(String songTitle) {\n    String foundSongFile = \"\";\n\n    for (int index = 0; index < songTitles.size(); index++) {\n      String currentLine = songTitles.get(index);\n      int colon = currentLine.indexOf(\":\");\n      String currentTitle = currentLine.substring(0, colon);\n\n      if (currentTitle.equals(songTitle)) {\n        foundSongFile = currentLine.substring(colon + 1);\n      }\n    }\n\n    return foundSongFile;\n  }\n\n  /*\n   * Confirms that the song is in the list of songs\n   */\n  public boolean confirmSong(String songTitle) {\n    boolean found = false;\n  \n    for (int index = 0; index < songTitles.size(); index++) {\n      String currentLine = songTitles.get(index);\n      int colon = currentLine.indexOf(\":\");\n      String currentSongTitle = currentLine.substring(0, colon);\n  \n      if (songTitle.equals(currentSongTitle)) {\n        found = true;\n      }\n    }\n  \n    return found;\n  }\n\n  /*\n   * Cleans the song lyrics to obtain only the words\n   * in the song without any stop words\n   */\n    public ArrayList<String> cleanSongLyrics() {\n      TextProcessor processor = new TextProcessor(lyrics);\n  \n      ArrayList<String> songWords = processor.textToWords();\n      processor.setTextList(songWords);\n  \n      processor.removeStopWords(FileReader.toStringList(\"stopwords.txt\"));\n  \n      return processor.getTextList();\n    }\n\n  /*\n   * Finds and sets the list of unique words and the\n   * number of times each word appears in the song lyrics\n   */\n  public void countUniqueWords(ArrayList<String> wordsFromLyrics) {\n    uniqueWords = new ArrayList<String>();\n    counts = new ArrayList<Integer>();\n\n    for (int start = 0; start < wordsFromLyrics.size(); start++) {\n      String currentWord = wordsFromLyrics.get(start);\n      int count = countDuplicates(wordsFromLyrics, start, currentWord);\n\n      if (count > 1) {\n        addUnique(currentWord, count);\n      }\n    }\n  }\n\n  /*\n   * Returns a count of the number of times a word appears in wordsFromLyrics\n   */\n  public int countDuplicates(ArrayList<String> wordsFromLyrics, int position, String currentWord) {\n    int count = 1;\n\n    for (int index = position + 1; index < wordsFromLyrics.size(); index++) {\n      String nextWord = wordsFromLyrics.get(index);\n\n      if (currentWord.equals(nextWord)) {\n        count++;\n        wordsFromLyrics.remove(index);\n        index--;\n      }\n    }\n\n    return count;\n  }\n\n  /*\n   * Adds the unique word and the number of times it appears in the song\n   * lyrics to the list of unique words and counts\n   */\n    public void addUnique(String currentWord, int currentCount) {\n      uniqueWords.add(currentWord);\n      counts.add(currentCount);\n    }\n\n  /*\n   * Returns an ArrayList containing the unique words and the number of times\n   * number of times each word appears in the song lyrics\n   */\n  public ArrayList<String> getWordsAndCounts() {\n    ArrayList<String> wordsAndCounts = new ArrayList<String>();\n  \n    for (int index = 0; index < uniqueWords.size(); index++) {\n      wordsAndCounts.add(uniqueWords.get(index) + \": \" + counts.get(index));\n    }\n  \n    return wordsAndCounts;\n  }\n\n  /*\n   * Returns an ArrayList containing the results of the song lyrics analysis\n   */\n  public ArrayList<String> getResults() {\n    ArrayList<String> words = cleanSongLyrics();\n    countUniqueWords(words);\n    ArrayList<String> wordsAndCounts = getWordsAndCounts();\n    return wordsAndCounts;\n  }\n\n  /*\n   * Returns a String containing the results from analyzing the song lyrics\n   */\n  public String getSongInfo() {\n    ArrayList<String> wordsAndCounts = getResults();\n    String text = \"\";\n  \n    for (int index = 0; index < wordsAndCounts.size(); index++) {\n      text = text + wordsAndCounts.get(index) + \"\\n\";\n    }\n  \n    return text;\n  }\n\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "TextProcessor.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Analyzes and processes text\n */\npublic class TextProcessor {\n\n  private String filename;              // The file containing the text\n  private ArrayList<String> textList;   // The list of text from the file\n\n  /*\n   * Constructor to create a TextProcessor with the specified filename\n   */\n  public TextProcessor(String filename) {\n    this.filename = filename;\n    textList = FileReader.toStringList(filename);\n  }\n\n  /*\n   * Returns the textList\n   */\n  public ArrayList<String> getTextList() {\n    return textList;\n  }\n\n  /*\n   * Changes the file to analyze and process and updates the textList\n   */\n  public void changeFile(String filename) {\n    this.filename = filename;\n    textList = FileReader.toStringList(filename);\n  }\n\n  /*\n   * Changes the textList to the newTextList\n   */\n  public void setTextList(ArrayList<String> newTextList) {\n    textList = newTextList;\n  }\n\n  /*\n   * Finds and removes all occurrences of each stop word from textList\n   */\n  public void removeStopWords(ArrayList<String> stopWords) {\n    for (String word : stopWords) {\n      for (int index = 0; index < textList.size(); index++) {\n        String currentWord = textList.get(index);\n\n        if (word.equals(currentWord)) {\n          textList.remove(index);\n          index--;\n        }\n      }\n    }\n  }\n\n  /*\n   * Returns an ArrayList containing the individual words from textList\n   */\n  public ArrayList<String> textToWords() {\n    ArrayList<String> wordList = new ArrayList<String>();\n\n    for (int index = 0; index < textList.size(); index++) {\n      String currentLine = textList.get(index);\n      int location = currentLine.indexOf(\" \");;\n\n      while (location != -1) {\n        String currentWord = currentLine.substring(0, location);\n        wordList.add(currentWord);\n        currentLine = currentLine.substring(location + 1);\n        location = currentLine.indexOf(\" \");\n      }\n\n      wordList.add(currentLine);\n    }\n    \n    return wordList;\n  }\n\n  /*\n   * Returns a String containing the text in textList\n   */\n  public String toString() {\n    String text = \"\";\n\n    for (String value : textList) {\n      text = text + value + \"\\n\";\n    }\n\n    return text;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static ArrayList<String> toStringList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    return temp;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Integer> toIntList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Integer> data = new ArrayList<Integer>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Integer.parseInt(currentValue));\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Double> toDoubleList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Double> data = new ArrayList<Double>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Double.parseDouble(currentValue));\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      },
      "songtitles.txt": {
        "text": "Eye of the Tiger:eyeofthetiger.txt\nWe are the Champions:wearethechampions.txt\nBlackbird:blackbird.txt",
        "isVisible": true,
        "tabOrder": 4
      },
      "stopwords.txt": {
        "text": "a\nan\nand\nare\nas\nat\nbe\nby\nfor\nfrom\nhas\nhe\nin\nis\nit\nits\nof\non\nthat\nthe\nto\nwas\nwere\nwill\nwith",
        "isVisible": true,
        "tabOrder": 5
      },
      "eyeofthetiger.txt": {
        "text": "Rising up, back on the street\nDid my time, took my chances\nWent the distance, now I'm back on my feet\nJust a man and his will to survive\nSo many times it happens too fast\nYou change your passion for glory\nDon't lose your grip on the dreams of the past\nYou must fight just to keep them alive\nIt's the eye of the tiger\nIt's the thrill of the fight\nRising up to the challenge of our rival\nAnd the last known survivor\nStalks his prey in the night\nAnd he's watching us all with the eye of the tiger\nFace to face, out in the heat\nHanging tough, staying hungry\nThey stack the odds 'til we take to the street\nFor the kill with the skill to survive\nIt's the eye of the tiger\nIt's the thrill of the fight\nRising up to the challenge of our rival\nAnd the last known survivor\nStalks his prey in the night\nAnd he's watching us all with the eye of the tiger\nRising up straight to the top\nHad the guts, got the glory\nWent the distance, now I'm not going to stop\nJust a man and his will to survive\nIt's the eye of the tiger\nIt's the thrill of the fight\nRising up to the challenge of our rival\nAnd the last known survivor\nStalks his prey in the night\nAnd he's watching us all with the eye of the tiger\nThe eye of the tiger\nThe eye of the tiger\nThe eye of the tiger\nThe eye of the tiger",
        "isVisible": true,
        "tabOrder": 6
      },
      "wearethechampions.txt": {
        "text": "I've paid my dues time after time\nI've done my sentence but committed no crime\nAnd bad mistakes, I've made a few\nI've had my share of sand kicked in my face\nBut I've come through\nAnd we mean to go on, and on, and on, and on\nWe are the champions, my friends\nAnd we'll keep on fighting till the end\nWe are the champions, we are the champions\nNo time for losers, 'cause we are the champions of the world\nI've taken my bows and my curtain calls\nYou brought me fame and fortune\nAnd everything that goes with it, I thank you all\nBut it's been no bed of roses, no pleasure cruise\nI consider it a challenge before\nThe whole human race and I ain't gonna lose\nAnd we mean to go on, and on, and on and on\nWe are the champions, my friends\nAnd we'll keep on fighting till the end\nWe are the champions, we are the champions\nNo time for losers, 'cause we are the champions of the world\nWe are the champions, my friends\nAnd we'll keep on fighting till the end, oh\nWe are the champions, we are the champions\nNo time for losers, 'cause we are the champions",
        "isVisible": true,
        "tabOrder": 7
      },
      "blackbirds.txt": {
        "text": "Blackbird singing in the dead of night\nTake these broken wings and learn to fly\nAll your life\nYou were only waiting for this moment to arise\nBlackbird singing in the dead of night\nTake these sunken eyes and learn to see\nAll your life\nYou were only waiting for this moment to be free\nBlackbird fly, blackbird fly\nInto the light of a dark black night\nBlackbird fly, blackbird fly\nInto the light of a dark black night\nBlackbird singing in the dead of night\nTake these broken wings and learn to fly\nAll your life\nYou were only waiting for this moment to arise\nYou were only waiting for this moment to arise\nYou were only waiting for this moment to arise",
        "isVisible": true,
        "tabOrder": 8
      }
    },
    "display_name": "Keyword Analysis",
    "bubble_choice_description": "An example project that identifies the most frequent words used in a song to determine its main ideas.",
    "thumbnail_url": "https://images.code.org/6bd2f044accf80f823532afd2206792f-image-1638478918432.png",
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T18:26:35.661+00:00\",\"changed\":[\"cloned from \\\"CSA U6L1-L1b_2025\\\"\"],\"cloned_from\":\"CSA U6L1-L1b_2025\"}]"
}]]></config>
</Javalab>
