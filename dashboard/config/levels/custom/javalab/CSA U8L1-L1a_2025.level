<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-17T00:40:45.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Look at this project example. What are some of its characteristics and features?\r\n\r\n*While this is an example of a project for this unit, it is not representative of the only way you can approach or develop the project.*",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "ChipotleRunner.java": {
        "text": "public class ChipotleRunner {\n  public static void main(String[] args) {\n\n    Customer myCustomer = new Customer();\n    Chipotle myChipotle = new Chipotle(myCustomer, \"menu.txt\");\n    \n    myChipotle.serveCustomer();\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static ArrayList<String> toStringList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    return temp;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Integer> toIntList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Integer> data = new ArrayList<Integer>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Integer.parseInt(currentValue));\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Double> toDoubleList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Double> data = new ArrayList<Double>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Double.parseDouble(currentValue));\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 1
      },
      "Chipotle.java": {
        "text": "import java.util.ArrayList;\n\npublic class Chipotle {\n\n  private Customer currentCustomer;\n  private String menuFile;\n  private static ArrayList<String> menuOptions;\n  private ArrayList<String> optionTypes;\n\n  public Chipotle(Customer currentCustomer, String menuFile) {\n    this.currentCustomer = currentCustomer;\n    this.menuFile = menuFile;\n    menuOptions = FileReader.toStringList(menuFile);\n    this.optionTypes = setOptionTypes();\n  }\n\n  public String getMenuFile() {\n    return menuFile;\n  }\n\n  public void setMenuFile(String newMenuFile) {\n    this.menuFile = newMenuFile;\n  }\n\n  public static ArrayList<String> getMenuOptions() {\n    return menuOptions;\n  }\n\n  public void greetCustomer() {\n    System.out.print(\"Welcome to Chipotle! What is your name? \");\n    String customerName = currentCustomer.giveName();\n    System.out.println(\"\\nWelcome \" + customerName + \"!\");\n  }\n\n  public void createCustomerOrder() {\n    System.out.print(\"\\nWould you like a burrito (1) or a burrito bowl (2)? \");\n    String item = currentCustomer.getItemSelection();\n    Order tempOrder;\n    if (item.equals(\"bowl\")) {\n        tempOrder = new BowlOrder();\n    }\n    else if (item.equals(\"discount\")) {\n        tempOrder = new DiscountOrder();\n    }\n    else {\n        tempOrder = new Order();\n    }\n    currentCustomer.setOrder(tempOrder);\n  }\n\n  public void getCustomerSelection() {\n    for (String currentType : optionTypes) {\n      System.out.println(\"\\nChoose your \" + currentType + \":\");\n      showChoices(currentType);\n\n      if (currentType.equals(\"protein\") && currentCustomer.getOrder().canAddProtein()) {\n        System.out.println(\"\\nYou can choose up to 2 options for protein.\");\n        System.out.print(\"Would you like to add an additional protein? \");\n        getAdditionalChoice(currentType);\n      }\n\n      if (currentType.equals(\"toppings\")) {\n        System.out.print(\"\\nAny additional toppings? \");\n        getAdditionalChoice(currentType);\n      }\n    }\n  }\n\n  public void showChoices(String currentType) {\n    String choicesAndPrices = Option.getChoicesAndPrices(currentType);\n    System.out.println(choicesAndPrices);\n    System.out.print(\"Which \" + currentType + \" would you like? \");\n    getChoice(choicesAndPrices, currentType);\n  }\n\n  public void getChoice(String choicesAndPrices, String currentType) {\n    String selection = currentCustomer.makeOptionSelection(currentType);\n    verifySelection(choicesAndPrices, selection, currentType);\n  }\n\n  public void getAdditionalChoice(String currentType) {\n    boolean wantMore = currentCustomer.getAnswer();\n\n    if (wantMore && currentType.equals(\"protein\")) {\n      currentCustomer.getOrder().addProtein();\n      showChoices(currentType);\n    }\n    \n    while (wantMore && currentType.equals(\"toppings\")) {\n      showChoices(currentType);\n      System.out.print(\"Any additional toppings? \");\n      wantMore = currentCustomer.getAnswer();\n    }\n  }\n\n  public void getCharitySelection(double currentTotal) {\n    System.out.print(\"\\nWould you like to round up for charity? \");\n    boolean roundUp = currentCustomer.getAnswer();\n\n    if (roundUp) {\n      double newTotal = currentCustomer.getOrder().calculateNewTotal(currentTotal);\n      System.out.println(\"Your new total is \" + String.format(\"%.2f\", newTotal) + \".\");\n    }\n  }\n\n  public void displayOrder() {\n    System.out.print(\"\\n\" + currentCustomer.getName() + \"'s \" + currentCustomer.getOrder());\n    double customerTotal = currentCustomer.getOrder().calculateTotal();\n    System.out.println(\"\\nYour total is \" + String.format(\"%.2f\", customerTotal) + \".\");\n    getCharitySelection(customerTotal);\n  }\n\n  public void serveCustomer() {\n    greetCustomer();\n    createCustomerOrder();\n    getCustomerSelection();\n    displayOrder();\n  }\n\n  private void verifySelection(String choicesAndPrices, String selection, String type) {\n    if (choicesAndPrices.indexOf(selection) < 0) {\n      System.out.println(\"Sorry! Your selection was invalid. Please try again.\");\n    }\n    else {\n      double selectionPrice = Option.getPriceForChoice(selection, type);\n      Option tempOption = new Option(selection, selectionPrice);\n      currentCustomer.getOrder().addToOrder(tempOption);\n    }\n  }\n\n  private ArrayList<String> setOptionTypes() {\n    ArrayList<String> tempTypesList = new ArrayList<String>();\n\n    for (String currentOption : menuOptions) {\n      String currentType = currentOption.substring(0, currentOption.indexOf(\"/\"));\n      tempTypesList.add(currentType);\n    }\n\n    removeDuplicates(tempTypesList);\n    return tempTypesList;\n  }\n\n  private void removeDuplicates(ArrayList<String> originalList) {\n    for (int start = 0; start < originalList.size(); start++) {\n      String currentItem = originalList.get(start);\n\n      for (int next = start + 1; next < originalList.size(); next++) {\n        String nextItem = originalList.get(next);\n\n        if (currentItem.equals(nextItem)) {\n          originalList.remove(nextItem);\n          next--;\n        }\n      }\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Customer.java": {
        "text": "import java.util.Scanner;\n\npublic class Customer {\n\n  private String name;\n  private Order customerOrder;\n  private Scanner input;\n\n  public Customer() {\n    this.name = null;\n    this.customerOrder = null;\n    this.input = new Scanner(System.in);\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String giveName() {\n      this.name = input.nextLine();\n      return name;\n  }\n\n  public Order getOrder() {\n    return customerOrder;\n  }\n\n  public void setOrder(Order newOrder) {\n    this.customerOrder = newOrder;\n  }\n\n  public String getItemSelection() {\n    String item = input.nextLine();\n    String result = \"\";\n\n    if (item.equals(\"burrito bowl\") || item.equals(\"2\")) {\n      result = \"bowl\";\n    } else if (item.equals(\"COUPONCODE\")) {\n      result = \"discount\";\n    }\n\n    return result;\n  }\n\n  public String makeOptionSelection(String currentType) {\n    String selection = input.nextLine();\n    return selection;\n  }\n\n  public boolean getAnswer() {\n    String selection = input.nextLine();\n    boolean result = false;\n  \n    if (selection.toLowerCase().equals(\"yes\") || selection.toLowerCase().equals(\"y\")) {\n      result = true;\n    }\n  \n    return result;\n  }\n\n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "Order.java": {
        "text": "import java.util.ArrayList;\n\npublic class Order {\n\n  private ArrayList<Option> selectedOptions;\n  public static final int MAX_PROTEIN = 2;\n  public static int currentProtein;\n\n  public Order() {\n    this.selectedOptions = new ArrayList<Option>();\n    currentProtein = 0;\n  }\n\n  public void addProtein() {\n    if (currentProtein < MAX_PROTEIN) {\n      currentProtein++;\n    }\n  }\n\n  public boolean canAddProtein() {\n    return currentProtein < MAX_PROTEIN;\n  }\n\n  public void addToOrder(Option currentOption) {\n    selectedOptions.add(currentOption);\n  }\n\n  public double calculateTotal() {\n    double total = 0.00;\n\n    for (Option currentOption : selectedOptions) {\n        total += currentOption.getSelectedPrice();\n    }\n\n    total += getTax(total);\n\n    return total;\n  }\n\n  public double getTax(double subtotal) {\n    double taxRate = 0.06;\n    return subtotal * taxRate;\n  }\n\n  public double calculateNewTotal(double currentTotal) {\n    double newTotal = (int)(currentTotal + 0.5);\n    return newTotal;\n  }\n\n  public String getType() {\n    return \"Burrito\";\n  }\n\n  public String toString() {\n    String result = getType();\n\n    result += \"\\n--------------------\\n\";\n\n    for (Option currentOption : selectedOptions) {\n        result += currentOption.getSelectedChoice() + \" (\" + currentOption.getSelectedPrice() + \")\" + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 4
      },
      "Option.java": {
        "text": "import java.util.ArrayList;\n\npublic class Option {\n\n  private String selectedChoice;\n  private double selectedPrice;\n\n  public Option(String selectedChoice, double selectedPrice) {\n    this.selectedChoice = selectedChoice;\n    this.selectedPrice = selectedPrice;\n  }\n\n  public String getSelectedChoice() {\n    return selectedChoice;\n  }\n\n  public double getSelectedPrice() {\n    return selectedPrice;\n  }\n\n  public static String getChoicesAndPrices(String typeToFind) {\n    ArrayList<String> choices = getChoiceNames(typeToFind);\n    ArrayList<Double> prices = getChoicePrices(typeToFind);\n    \n    String result = \"\";\n\n    for (int index = 0; index < choices.size(); index++) {\n      result += choices.get(index);\n\n      if (prices.get(index) > 0) {\n        result += \" - \" + prices.get(index);\n      }\n\n      result += \"\\n\";\n    }\n\n    return result;\n  }\n\n  public static double getPriceForChoice(String currentChoice, String typeToFind) {\n    ArrayList<String> choiceNames = getChoiceNames(typeToFind);\n    ArrayList<Double> choicePrices = getChoicePrices(typeToFind);\n    \n    double currentPrice = 0.00;\n\n    for (int index = 0; index < choiceNames.size(); index++) {\n      if (currentChoice.equals(choiceNames.get(index))) {\n        currentPrice = choicePrices.get(index);\n      }\n    }\n\n    return currentPrice;\n  }\n\n  private static ArrayList<String> getChoiceNames(String typeToFind) {\n    ArrayList<String> menu = Chipotle.getMenuOptions();\n    ArrayList<String> temp = new ArrayList<String>();\n\n    for (int index = 0; index < menu.size(); index++) {\n      String currentChoice = menu.get(index);\n\n      if (isMatchingChoice(typeToFind, currentChoice)) {\n        String currentName = currentChoice.substring(currentChoice.indexOf(\"/\") + 1, currentChoice.indexOf(\",\"));\n        temp.add(currentName);\n      }\n    }\n\n    return temp;\n  }\n\n  private static ArrayList<Double> getChoicePrices(String typeToFind) {\n    ArrayList<String> menu = Chipotle.getMenuOptions();\n    ArrayList<Double> temp = new ArrayList<Double>();\n\n    for (int index = 0; index < menu.size(); index++) {\n      String currentChoice = menu.get(index);\n\n      if (isMatchingChoice(typeToFind, currentChoice)) {\n        String currentPrice = currentChoice.substring(currentChoice.indexOf(\",\") + 1);\n        temp.add(Double.parseDouble(currentPrice));\n      }\n    }\n\n    return temp;\n  }\n\n  private static boolean isMatchingChoice(String typeToFind, String currentChoice) {\n    boolean isMatching = false;\n    String currentType = currentChoice.substring(0, currentChoice.indexOf(\"/\"));\n\n    if (currentType.equals(typeToFind)) {\n      isMatching = true;\n    }\n\n    return isMatching;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 5
      },
      "menu.txt": {
        "text": "protein/chicken,8.45\nprotein/steak,10.20\nprotein/barbacoa,10.20\nprotein/carnitas,9.10\nprotein/sofritas,8.45\nprotein/veggie,8.45\nrice/white rice,0.00\nrice/brown rice,0.00\nrice/none,0.00\nbeans/black beans,0.00\nbeans/pinto beans,0.00\nbeans/none,0.00\ntoppings/guacamole,2.65\ntoppings/tomato salsa,0.00\ntoppings/roasted chili-corn salsa,0.00\ntoppings/tomatillo-green chili salsa,0.00\ntoppings/tomatillo-red chili salsa,0.00\ntoppings/sour cream,0.00\ntoppings/fajita veggies,0.00\ntoppings/cheese,0.00\ntoppings/romaine lettuce,0.00\ntoppings/queso blanco,1.55\ntoppings/none,0.00",
        "isVisible": true,
        "tabOrder": 6
      },
      "BowlOrder.java": {
        "text": "public class BowlOrder extends Order {  \n  public String getType() {\n    return \"Burrito Bowl\";\n  }\n}",
        "isVisible": true,
        "tabOrder": 7
      },
      "DiscountOrder.java": {
        "text": "public class DiscountOrder extends Order {  \n  public double calculateTotal() {\n    return super.calculateTotal() * .5;\n  }\n}",
        "isVisible": true,
        "tabOrder": 8
      }
    },
    "display_name": "Chipotle Orders",
    "bubble_choice_description": "An example project that allows the user to place orders at Chipotle.",
    "thumbnail_url": "https://images.code.org/4cb589ff128fa44bea2f7a445ac95d37-optionA.jpg",
    "encrypted_exemplar_sources": "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\nfDwZWI95MBGEHbNWgXNG+ivlmkisAtA=\n",
    "name_suffix": "_2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-17T00:40:45.819+00:00\",\"changed\":[\"cloned from \\\"CSA U8L1-L1a_2023\\\"\"],\"cloned_from\":\"CSA U8L1-L1a_2023\"}]"
}]]></config>
</Javalab>
