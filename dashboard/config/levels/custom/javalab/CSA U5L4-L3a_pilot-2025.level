<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T18:15:48.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A weather analyst wants to determine the average temperature for each day. They have the following values:\r\n\r\n<pre style=\"background-color: #333333; color: white;\">\r\nRow 1: 37.27, 40.66, 53.53, 52.36, 48.87\r\nRow 2: 62.2, 61.47, 60.31, 62.42, 62.38\r\nRow 3: 81.5, 80.04, 81.61, 85.91, 85.69\r\nRow 4: 56.41, 48.6, 51.67, 48.72, 52.65\r\n</pre>\r\n\r\nwhere each row represents New York, Los Angeles, Miami, and Seattle, respectively. Each column represents the temperature on March 29th, March 30th, March 31st, April 1st, and April 2nd, respectively.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Temperatures</code> class, write the method <code style=\"background-color: #ececec; color: black; font-weight: bold;\">dailyAverages()</code> to calculate the average temperature for each day.\r\n\r\n1. Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getDate()</code> method to get the date for each column.\r\n\r\n2. Return a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> containing the date and the average temperature for that day.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TemperaturesRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">dailyAverages()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with traversing a two-dimensional (2D) array in column-major order.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_column_major_traversal",
    "reference_links": [
      "/courses/csa-2023/guides/two-dimensional-arrays"
    ],
    "display_name": "Daily Temperatures",
    "bubble_choice_description": "Write a method to find the average temperature for each day and print the results.",
    "thumbnail_url": "https://images.code.org/da503f4004138d2d2ee272ecde2d51fb-image-1651005744030.png",
    "encrypted_validation": "cCJi+05Op08rTczSZVU2QyExQucv3jj3y2qVz4Gggl4+m+msZo36sKM6idAE\nJp7rPizWxwRJuprANoHPUkOahsOlB+60GvARRohdBHvupLCpoW3M+rD3lz4W\nq9iBwj4hoMN/CyA4EugG1UFvRl/Jh70Cs+LZwIFB1io6aIpXZht1YJDRBhTD\n1LmWmimaVaW+YTFKiiMxh/Vqkgn/8PHRThwKxrABGn5vSyc+2g89P8/FC25B\n6EAxqFvcPOUpUrfqGbR1ZZ3IglX6GsLc48jTxtRsccsVNvHz+cutEAzQceYo\n+rBk+YfWpweeL3WjFCqCCnxu/uKwo/gUWFJZ9nLdbdZJEpMjlYQeTWO8RBr1\njIPrj4/lcqbMUEcCit2b96VmEYOSqvIldHSHMjAnOQNa1IGJgNFJoDMUFvhC\n4UqTFAhPRqgfRsErTrYXgYVRVVZIhQt/Y4KK2Eme8XbOB7p8NTAJKJRYkzto\noskczhPgLT+YAwkcWmi82w58O3xqtlcrRd7vwZcTopY6ssUQG55w9l/UaA14\n5K/8+YcyMTRet6nQVzB8BH1PHCcl3GrBm5UTr87pmv1wjwq+rtQsse4zW3Kj\niBnVzCe5gq5wYIOKpmQWuEmPPilGIiBNBfDJR9907sUVCLu40jZGAqGFaQto\nxcU1EKofvcs+bHGeEiOkOwnTiWHp1R5timXP1WThidNN2PNy+0iP/clP3zmL\nu7Dj/GY/r2RlcC1sfHJQT1WPPl6kS8ePMbLHFiUBIMfxBVe7VoknN4PzQoVJ\nNKBLbcalU8/LzkF6KjS35H7iYmllG93+xHUbazOaNWRL9agZ94vV0i4RvSD8\nbaqh4qDDhBXVRkPUv8ZZYoTSEn54FxRo23J1Kwb8XJXbGyNcCENCIXnfJzd1\nVd/uKTORc1TKztbIXb8syTjFxfowCCS0qJSN6wYVrpXselYQ/H/P3e8IDSwI\nLb8/459IRGUo+onNbiPrsYyo0/EY/cw/tLGvrXInj4ek/nam4+NlmUBJok5p\nwXSmxdrDoH20pWG3uQS4yqjEPat5gzs5XwTTIPuj2VsTVdvw+Cd7qXQfRRYn\njLZ9FGSnNaySu12GqEoubPxwz/mRl+Bwg10DJgkSANnqGFdPgXhE1fp/O9W3\nybqz+TORXD3J1lYwT+ygIJD41MUXfl1ul5tC4ZKN3q4/FYyvhS39c76TLM7t\nW6hsgGni5EsO0zIACV9BxyenN4X9z0gWwF3lbRFaE5OnWFY0LL1EwT7fNE/j\nb1TZkljoayRSELijT5Hd67rII23sb+4LcSlXDXEfaVUDGqjbXHVAXAftBS3v\nMNSJ2fPYfV5E2krWQbLRMi3V47GFs9yIGLhay3lHQeapOp+wNx17hfGFHSZa\nRtT/580PTRM2CnX52End5owyB2vAUroFkueBxvRHMt+ejpyzWvir1+ohKPK6\nBAx3yZmrqBcItECnBRTQUAnX3srF/EZoDTa2Pq2GqxrDkEmyl6RrRPcEHmgV\ngPhOwcFZ6r6x7QVjVT0Z5UErLCN4FGz1HCBQt/FY6nUJNFKTbquOGPVXSXUe\nhc5lqIc6Sx+3RsraahtcDNEg24NYnU6hXTMLO0VTIGhA5LvwrIe4r333TrSo\neRiIDMDpspuR1YVx6p8F/E04EKTj0KsYINewvJ4f0ryGrJnikqx5kXLFk/fm\nNE11R1Cov9RBh+vaPNwioc+mkEAUqigcQVsd1u/mnOfQSKIPW4+G8UqjPHn1\ndTmu/tffhaUsvajA/TA9eavklgLMQTFdW8h836ljZA84us7x3YADfosXR0VW\nwxBaDX2drPOYC195aPXoNV7msAzlzauIfmrG9gGdzRatsi3Tbfz9XQpHZU3T\nJJYEKoSQAuzzaZuAhUVAMSJiZr9lqK/8eMVj3tHSvDihGhxCxd4arNDuxuX0\nzJf7XZFuSGnW8Dby80kgKwUZulX7pp/0IEE8Eyl2gQNqhlYyGQvqeYe22tZi\nxqL0gzVWidrl8mD3SK4BRTZwfm07VEx0n+6++VmodfTAoJqOrrBAGybE+lR3\ntSFJUD/ImEg1z6kdolZYA+kmnUe6IJ2o6bzP5/W7bWrr+wihto8+66LuhQQL\nEBJESdtdKJAJSqoIHirf5SE2zJrt5IvaLNeMRpTR520ElTwkdl60yYc//Tcq\n9pKhsrZdDeXKXHNlXSG2LGVe1Vz1YbpdJeO3W881l1TnjaoGaBnYjoIpkS+y\n3QdwXJfF5FFBfs3vq/K/DUnrW0N+r5UioEQRcpdahYiSArHgtuxYSwPW+xKa\nwb+YsXTV/EEZSI8yrrrXbZViBl9b9uIJ4eptcGoQ3iIbl5eJS9KciQWH5jNN\nW3S7LR9TSJFOVueLd+dXH8cEzeNSNmxX/0B2EJ/XYa22iCJH+F+SUGXZUsvR\nKiuaJ5awRxywamcSbd0ZONY/WZVaECbqm4bi5f8kjN/NMvTR+KKtoyja5hhw\nWG+yh2ctCtoR/hpzUgyKXfZZHOhn+YdUMM5Oh3v9gv6jiMwjDmklBGrkc9ia\nM9NVuWVNrgSMPpaCTUVSxCKz/VLgZyuu/GRUZHf0Y6Eqmcx86qIAqDZ+lKhX\nVmXjE02mnvNs8rmWZ1sfFRrVxyBE/KCX//8B3VKGYd9qKF4ma5vsSMTd8TVK\nQRvmcSRD/bAicVu6GFD+MUsdW7FOabUY7ZwuuF/x+nByKK5MJxQ8AuARcpSp\n/WlWhx9YFI6qkoLwACZc8UXvpK6HQ0ide+rCYNgMLplsIsKgrD0SyN8qevde\nAptM4URepP2qiwvs+pPZJ2Adf8PxFjILeT50G5ZBQMzU3vTLGl6bny7LTYFO\n3mMfU2bXuov0Gzx4dwLp1M1fSrdVfFJGRo7SbNBNBtafkW0+G/APyHKpRgmp\nYVwGXZtRjZ0BO/85uS9aVyegUE4w1PlV3k33UdQKv9nX2k1wr/tBdFupuuvU\nMBGPgHTe9r6OB8XMz2MpsAUPMOuI7qc4eI4AvHJLgL0E4wEFrAWCCkuMZDiF\nKkEGAwzW84oZVvwA1Vxuw9aZbZuRW8YNBcdOqu+yHFfFzc/la0hfTBgrYNxW\ndOIPr0Ibkq8+J6uwuGx/bnvXWW/GyRqJXp+I3AVhPgPwhns6kWQn/CYvPqVi\nw8ecF/hJUZbeEbo7XEoMeXbPxpchDof4pTRjTLKA/JMMVaYaeaCVOCpbrzuu\nUIR8/x1xf7mZPks0TG9eduD2MEa15Gf6DDgu/hOZ6Iq4LF5dbRrwEjMqk8zY\nyH8IDT5dC58KLacd3ssUYbWbs9f7a+Jxa9bjSNbcZpD//sNPD4DBlwPV1mNI\nHP7cRJrovxSMv3cWiW2s2phfe5FloJ6ovVu3WruWJYufghTY3FItm8Fklhid\nxTUgIvLGUVN+Z09gt0DfvTt9lP4pHVqAMAf7kU5b+oHV8by/323+Gw7RShJC\nnV7W95xruDGbli9gII392iTmG1K7QDJddx7z+x+d1kHOG/36OdPoPB6xkfJR\nx6Xcs9F96DkmH/D8FUow1UVM8CxFkp8LGS4sfQhS5O7erEP57IybRMwaphw+\nC78xOefbStVBkvvGp7SQGVbc8ubT4+uKbC6iFKZUa+fkG7594dZsGyy2eaas\n8G3tJPfd17opY47di6/dYKbLYpNOeg7OFr5reLqSFS4nSpKO8LCCuQhdS/XW\nZpKlfTMgag==\n",
    "encrypted_exemplar_sources": "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\n",
    "start_sources": {
      "TemperaturesRunner.java": {
        "text": "public class TemperaturesRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of dates\n    String[] dates = {\"March 29th\", \"March 30th\", \"March 31st\", \"April 1st\", \"April 2nd\"};\n\n    // Creates a 2D array containing the daily temperatures for several cities\n    double[][] cityTemps = {{37.27, 40.66, 53.53, 52.36, 48.87},\n                            {62.2, 61.47, 60.31, 62.42, 62.38},\n                            {81.5, 80.04, 81.61, 85.91, 85.69},\n                            {56.41, 48.6, 51.67, 48.72, 52.65}};\n\n    // Creates a Temperatures object\n    Temperatures cities = new Temperatures(dates, cityTemps);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the dailyAverages() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Temperatures.java": {
        "text": "/*\n * Analyzes temperature data for several cities and dates\n */\npublic class Temperatures {\n\n  private String[] dates;         // The 1D array of dates\n  private double[][] cityTemps;   // The 2D array of temperatures for several cities\n\n  /*\n   * Initializes dates to the specified 1D array containing the dates\n   * for each column of cityTemps and initializes cityTemps to the\n   * specified 2D array of temperatures for several cities\n   */\n  public Temperatures(String[] dates, double[][] cityTemps) {\n    this.dates = dates;\n    this.cityTemps = cityTemps;\n  }\n\n  /*\n   * Returns the 1D array of dates\n   */\n  public String[] getDates() {\n    return dates;\n  }\n\n  /*\n   * Returns the 2D array of temperatures\n   */\n  public double[][] getCityTemps() {\n    return cityTemps;\n  }\n\n  /*\n   * Returns the average temperature for each day in cityTemps\n   */\n  public String dailyAverages() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Traverse the cityTemps array and calculate the average of each column.\n     * Return a String containing each date and the average temperature on that day.\n     * Use the getDate() method to get the date for each column.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    return \"\";\n  }\n\n  /*\n   * Returns the date for a given column\n   */\n  public String getDate(int column) {\n    if (column < dates.length) {\n      return dates[column];\n    }\n    else {\n      return \"Unknown\";\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "name_suffix": "_pilot-2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T18:15:48.034+00:00\",\"changed\":[\"cloned from \\\"CSA U5L4-L3a_2025\\\"\"],\"cloned_from\":\"CSA U5L4-L3a_2025\"}]"
}]]></config>
</Javalab>
