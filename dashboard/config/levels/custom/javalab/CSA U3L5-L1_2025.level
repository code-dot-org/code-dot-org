<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:52:33.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "##Investigate and Modify\r\n\r\nExperiment with the program by making the following modifications, then run the program to observe the results.\r\n\r\nâœ… **TO DO #1:** Look at the constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Channel</code> class. What do you notice about how the 1D arrays <code style=\"background-color: #ececec; color: black; font-weight: bold;\">videoTitles</code>, <code style=\"background-color: #ececec; color: black; font-weight: bold;\">durations</code>, and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numViews</code> are initialized?\r\n\r\nâœ… **TO DO #2:** Try calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getVideoInfo()</code> method from the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Channel</code> class with different values and printing the value. For example:\r\n\r\n<pre style=\"background-color: #333333; color: white;\">\r\nSystem.out.println(tedTalks.getVideoInfo(10));\r\n</pre>\r\n\r\nWhat do you notice about the information that is printed to the console?\r\n\r\nâœ… **TO DO #3:** Look at some of the other methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Channel</code> class and try calling them from <code style=\"background-color: #ececec; color: black; font-weight: bold;\">DataRunner.java</code> to observe their behaviors. How might these types of methods be beneficial in a data analysis program? What other methods might you add to allow a user to find additional information about this data?",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "DataRunner.java": {
        "text": "public class DataRunner {\n  public static void main(String[] args) {\n\n    Channel tedTalks = new Channel(\"TED\", \"titles.txt\", \"durations.txt\", \"views.txt\");\n\n    tedTalks.run();\n    \n    /* ---- ðŸ”Ž ADD YOUR CODE BELOW THIS LINE ---- */\n\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Channel.java": {
        "text": "import java.util.Scanner;\n\n/*\n * Represents a channel on YouTube\n */\npublic class Channel {\n\n  private String name;             // The name of a channel\n  private String[] videoTitles;    // The 1D array of video titles on a channel\n  private int[] durations;         // The 1D array of the duration of each video\n  private int[] numViews;          // The 1D array of the number of views for each video\n\n  /*\n   * Sets name to the specified channel name and reads the data from titlesFile, durationsFile,\n   * and numViewsFile to initialize the 1D arrays videoTitles, durations, and numViews\n   */\n  public Channel(String name, String titlesFile, String durationsFile, String numViewsFile) {\n    this.name = name;\n    \n    videoTitles = FileReader.toStringArray(titlesFile);\n    durations = FileReader.toIntArray(durationsFile);\n    numViews = FileReader.toIntArray(numViewsFile);\n  }\n\n  /*\n   * Repeatedly prompts the user and shows the\n   * results until they quit the program\n   */\n  public void run() {\n    int selection = 0;\n    \n    while (selection != 3) {\n      selection = promptUser();\n      System.out.println(showData(selection) + \"\\n\");\n    }\n\n    System.out.println(\"Goodbye!\");\n  }\n\n  /*\n   * Prompts the user to choose from provided options\n   */\n  public int promptUser() {\n    Scanner input = new Scanner(System.in);\n    \n    System.out.println(\"What would you like to know about the \" + name + \" channel? \");\n    System.out.println(\"1: The shortest video\");\n    System.out.println(\"2: The video with the most views\");\n    System.out.println(\"3: Quit\");\n    System.out.print(\"Enter your choice (1, 2, or 3): \");\n    \n    int choice = input.nextInt();\n    input.close();\n    return choice;\n  }\n\n  /*\n   * Returns a String containing the results based on the user's choice\n   */\n  public String showData(int choice) {\n    int index = 0;\n    String result = \"\";\n    \n    if (choice == 1) {\n      index = getShortestVideo();\n      result = \"\\nResult Found:\\n----------\\n\" + getVideoInfo(index);\n    }\n      \n    if (choice == 2) {\n      index = getMaxNumViews();\n      result = \"\\nResult Found:\\n----------\\n\" + getVideoInfo(index);\n    }\n\n    return result;\n  }\n\n  /*\n   * Returns the location of the shortest video in durations\n   */\n  public int getShortestVideo() {\n    int minValue = durations[0];\n    int minLocation = 0;\n\n    for (int index = 0; index < durations.length; index++) {\n      if (durations[index] < minValue) {\n        minValue = durations[index];\n        minLocation = index;\n      }\n    }\n\n    return minLocation;\n  }\n\n  /*\n   * Returns the location of the maximum number of views in numViews\n   */\n  public int getMaxNumViews() {\n    int maxValue = numViews[0];\n    int maxLocation = 0;\n    \n    for (int index = 0; index < numViews.length; index++) {\n      if (numViews[index] > maxValue) {\n        maxValue = numViews[index];\n        maxLocation = index;\n      }\n    }\n\n    return maxLocation;\n  }\n\n  /*\n   * Returns the information for the video at the specified index\n   */\n  public String getVideoInfo(int index) {\n    return videoTitles[index] + \"\\nDuration: \" + durations[index] + \"\\nNumber of Views: \" + numViews[index];\n  }\n\n  /*\n   * Returns a String containing each video title and its duration and number of views\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (int index = 0; index < videoTitles.length; index++) {\n      result += videoTitles[index] + \" (\" + durations[index] + \" mins, \" + numViews[index] + \" views)\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "titles.txt": {
        "text": "The Future Will Be Shaped by Optimists \nAn Olympic Champion's Unwavering Advocacy for Mothers in Sports \nThe African Swamp Protecting Earth's Environment \nElon Musk: A future worth getting excited about \nElon Musk talks Twitter, Tesla and how his brain works\nUkraine's Fight to Keep Educating Its Children \nWhy Entrepreneurship Flourishes in The Countryside \nStand with Ukraine in the Fight against Evil \nThe Deep Sea's Medicinal Secrets \nClimate Change Isn't a Distant Threat -- It's Our Reality \n3 Things Men Can Do to Promote Gender Equity \nThe Power of Purpose in Business \nAre Ad Agencies, PR Firms and Lobbyists Destroying the Climate? \nThe Hidden Power of Sad Songs and Rainy Days \nWhat It's Like To Be a War Refugee \nSelf-Assembling Robots and the Potential of Artificial Evolution \nHow to Design Mosquitoes Out of Cities \n3 Ways to Find Hope in Hopeless Times \nThe Critical Role of Black Mothers -- and How to Support All Moms \nWhat Does a Voice of the Future Sound Like? \nThe Creativity and Community Behind Fanfiction \nHow to Share Public Money Fairly \nWhy US Laws Must Expand Beyond the Nuclear Family \n3 Ways Your Company's Data Can Jump-Start Climate Action \nWhat Seaweed and Cow Burps Have to Do with Climate Change ",
        "isVisible": true,
        "tabOrder": 2
      },
      "durations.txt": {
        "text": "10\n9\n7\n66\n55\n7\n8\n15\n13\n6\n9\n10\n9\n16\n13\n10\n15\n17\n21\n6\n15\n12\n18\n9\n9",
        "isVisible": true,
        "tabOrder": 3
      },
      "views.txt": {
        "text": "51273\n25597\n21430\n3609893\n4405481\n38252\n32369\n137166\n34071\n39376\n37296\n51525\n25438\n82889\n31855\n63375\n36946\n45843\n14674\n273563\n25954\n39904\n39526\n25959\n18783",
        "isVisible": true,
        "tabOrder": 4
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "name_suffix": "_2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:52:33.297+00:00\",\"changed\":[\"cloned from \\\"CSA U3L5-L1_2023\\\"\"],\"cloned_from\":\"CSA U3L5-L1_2023\"}]"
}]]></config>
</Javalab>
