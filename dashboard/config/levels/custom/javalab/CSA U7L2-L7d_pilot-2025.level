<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T21:40:26.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A shipping company wants to manage its shipments, including the shipping weight, destination, and shipping method.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Shipment</code> class constructor to take a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Destination</code> object and the weight of the shipment as parameters.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Shipment</code> object and call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawScene()</code> method.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">changeAddress()</code> method, then call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawScene()</code> method again.\r\n\r\n3. Print the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Destination</code> object to confirm it was not modified.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with using object references as parameters.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "reference_links": [
      "/courses/csa-2023/guides/object-references-as-parameters"
    ],
    "display_name": "Shipments",
    "bubble_choice_description": "A shipping company wants to manage its shipments, including the shipping weight, destination, and shipping method.",
    "starter_assets": {
      "world.png": "d43d1c0d-2698-4e38-a9e4-5daf08cdf0fa.png",
      "plane.png": "3aa10a51-6fc6-4d79-9506-4f1d66498522.png",
      "airplane.png": "248b88a9-a7ee-4ba0-9565-07f66300d20d.png"
    },
    "encrypted_validation": "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\n5uyaqr/D\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a Destination object\n    Destination newYork = new Destination(\"Kayla Jackson\", \"123 Main Street, Brooklyn, NY\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Shipment object and call the drawScene() method. Then\n     * call the changeAddress() method and call the drawScene() method again. Print\n     * the Destination object to confirm it was not modified.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n\n    // Plays the scene\n    Theater.playScenes(birthdayGift);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Shipment.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\npublic class Shipment extends Scene {\n  \n  private Destination destination;    // The destination for the shipment\n  private double weight;              // The weight of the shipment\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write the Shipment constructor with a parameter for a Destination object\n   * and a parameter for the weight. Instantiate the Destination object using the\n   * values assigned to the parameter's instance variables.\n   * -----------------------------------------------------------------------------\n   */\n  \n\n\n\n  \n\n  /*\n   * Returns the destination\n   */\n  public Destination getDestination() {\n    return destination;\n  }\n\n  /*\n   * Returns the weight\n   */\n  public double getWeight() {\n    return weight;\n  }\n\n  /*\n   * Changes the address for the destination\n   */\n  public void changeAddress(String newAddress) {\n    destination.setAddress(newAddress);\n  }\n\n  /*\n   * Draws the shipment information in the scene\n   */\n  public void drawScene() {\n    drawPlane();\n    drawImage(\"world.png\", 0, 0, getWidth());\n    formatText(30, Color.NAVY);\n    drawText(destination.getName() + \"\", 80, 170);\n    formatText(20, Color.BLACK);\n    drawText(destination.getAddress() + \"\", 80, 250);\n    pause(2);\n    clear(Color.WHITE);\n  }\n\n  /*\n   * Draws the plane moving across the scene\n   */\n  private void drawPlane() {\n    int xPos = 30;\n    int yPos = 350;\n\n    while (xPos < getWidth()) {\n      drawImage(\"world.png\", 0, 0, getWidth());\n      drawImage(\"airplane.png\", xPos, yPos, 75);\n      pause(0.2);\n      clear(Color.WHITE);\n      xPos += 50;\n      yPos -= 50;\n    }\n  }\n\n  /*\n   * Formats the text\n   */\n  private void formatText(int size, Color color) {\n    setTextStyle(Font.SANS, FontStyle.BOLD);\n    setTextHeight(size);\n    setTextColor(color);\n  }\n\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Destination.java": {
        "text": "/*\n * Represents a destination for a shipment\n */\npublic class Destination {\n  \n  private String name;        // The name of a destination\n  private String address;     // The address of a destination\n\n  /*\n   * Sets name and address to the specified values\n   */\n  public Destination(String name, String address) {\n    this.name = name;\n    this.address = address;\n  }\n\n  /*\n   * Returns the name of the destination\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the address of the destination\n   */\n  public String getAddress() {\n    return address;\n  }\n\n  /*\n   * Sets the address to newAddress\n   */\n  public void setAddress(String newAddress) {\n    address = newAddress;\n  }\n\n  /*\n   * Returns a String containing the name and address of the destination\n   */\n  public String toString() {\n    return name + \", \" + address;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "encrypted_exemplar_sources": "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\ncok=\n",
    "thumbnail_url": "https://images.code.org/866298467d1e33beecc59969936cfaae-u7l2-l7d.png",
    "name_suffix": "_pilot-2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T21:40:26.624+00:00\",\"changed\":[\"cloned from \\\"CSA U7L2-L7d_2025\\\"\"],\"cloned_from\":\"CSA U7L2-L7d_2025\"}]"
}]]></config>
</Javalab>
