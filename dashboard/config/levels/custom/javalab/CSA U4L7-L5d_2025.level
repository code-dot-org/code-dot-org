<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:55:13.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A comic book enthusiast wants to create a visualization that shows a comparison of the number of wins each character has in a battle.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">BattleScene.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getBattles()</code> method to find and return a 1D array containing all <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Battle</code> objects where the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">mainCharacter</code> matches the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">firstCharacter</code> and the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">enemyCharacter</code> matches the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">secondCharacter</code>.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawResults()</code> method with the 1D array returned from calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getBattles()</code> method.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing nested <code style=\"background-color: #ececec; color: black; font-weight: bold;\">if</code> statements.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Superhero Battles",
    "bubble_choice_description": "A comic book enthusiast wants to create a visualization that shows a comparison of the number of wins each character has in a battle.",
    "thumbnail_url": "https://images.code.org/17727a98f8649cc14e4f87fb3387987c-superhero.png",
    "starter_assets": {
      "batman.png": "488e2534-91ca-4be3-a5bd-d027d3d5109b.png",
      "superman.png": "a352079e-0bfb-43c2-a105-4e43ebd8498e.png",
      "wonder-woman.png": "fd65f415-cbc3-4cc4-b4f1-0d77c3f57bf1.png",
      "batman-battle.png": "6d306a5a-98f5-4dda-a719-7839e20975d8.png",
      "superman-battle.png": "660efdef-4a4d-45b1-af16-5a856709a6cf.png",
      "wonder-woman-battle.png": "1b4001db-b4bc-427b-a4e0-2a36a94eb8ab.png",
      "supergirl.png": "81b44fd9-1d34-4573-be8e-3e41b22141de.png",
      "joker.png": "0fae86a0-79f1-42c6-afc0-2f25f6c2a847.png",
      "lexluther.png": "6b3dbbbd-e5d4-4b63-b7a7-c223620f645b.png",
      "ares.png": "90ffb200-0310-4556-83c0-94698d2c7a98.png",
      "reign.jpg": "4914a162-28ec-4401-b125-f3e6a7d3d587.jpg",
      "cyborg.png": "eea5a30b-16ba-4ade-b28d-1787e33c1e6d.png"
    },
    "encrypted_exemplar_sources": "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\n",
    "encrypted_validation": "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\nfduvA1GuzOo=\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of Battle objects using the data from the main.txt and enemy.txt files\n    Battle[] battles = Battle.createBattles(\"main.txt\", \"enemy.txt\");\n\n    // Creates a BattleScene object\n    BattleScene scene = new BattleScene(battles);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the getBattles() method then pass the 1D array returned to a call\n     * to the drawResults() method.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n\n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "BattleScene.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Creates a visualization of character battles\n */\npublic class BattleScene extends Scene {\n\n  private Battle[] battles;      // The 1D array of Battle objects\n\n  /*\n   * Initializes battles to the specified 1D array of Battle objects\n   */\n  public BattleScene(Battle[] battles) {\n    this.battles = battles;\n  }\n\n  /*\n   * Returns the 1D array of Battle objects\n   */\n  public Battle[] getAllBattles() {\n    return battles;\n  }\n\n  /*\n   * Finds and returns a 1D array containing all Battle objects where\n   * the mainCharacter matches the parameter firstCharacter and the\n   * enemeyCharacter matches the parameter secondCharacter\n   */\n  public Battle[] getBattles(String firstCharacter, String secondCharacter) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Count the number of Battle objects where the mainCharacter matches the\n     * parameter firstCharacter and the enemyCharacter matches the parameter\n     * secondCharacter. Then create a 1D array and store each matching Battle object\n     * in the array and return the array.\n     * -----------------------------------------------------------------------------\n     */\n    \n\n    \n\n    return null;\n  }\n\n  /*\n   * Draws the results in the scene\n   */\n  public void drawResults(Battle[] results) {\n    setTextColor(\"white\");\n    setTextHeight(20);\n    setTextStyle(Font.SANS, FontStyle.BOLD);\n    \n    drawImage(results[0].getMainImage(), 0, 0, getWidth());\n    pause(0.2);\n    drawText(results[0].getMainCharacter() + \"\", 150, 300);\n\n    pause(2);\n    clear(\"black\");\n    drawText(results.length + \" battles against\", 100, 150);\n\n    pause(0.5);\n    drawImage(results[0].getEnemyImage(), 0, 0, getWidth());\n    pause(0.2);\n    drawText(results[0].getEnemyCharacter() + \"\", 150, 300);\n  }\n}\n",
        "isVisible": true,
        "tabOrder": 1
      },
      "Battle.java": {
        "text": "/*\n * Represents a character battle\n */\npublic class Battle {\n\n  private String mainCharacter;      // The name of the main character\n  private String mainImage;          // The image file of the main character\n  private String enemyCharacter;     // The name of the enemy character\n  private String enemyImage;         // The image file of the enemy character\n\n  /*\n   * Sets mainCharacter and enemyCharacter to the specified values\n   */\n  public Battle(String mainCharacter, String enemyCharacter) {\n    this.mainCharacter = mainCharacter;\n    this.enemyCharacter = enemyCharacter;\n    this.mainImage = getImageFile(mainCharacter);\n    this.enemyImage = getImageFile(enemyCharacter);\n  }\n\n  /*\n   * Returns the image file to use based on the character's name\n   */\n  public String getImageFile(String characterName) {\n    String image = \"\";\n    \n    if (characterName.equals(\"Batman\")) {\n      image = \"batman-battle.png\";\n    }\n    \n    if (characterName.equals(\"Superman\")) {\n      image = \"superman-battle.png\";\n    }\n\n    if (characterName.equals(\"Wonder Woman\")) {\n      image = \"wonder-woman-battle.png\";\n    }\n\n    if (characterName.equals(\"Supergirl\")) {\n      image = \"supergirl.png\";\n    }\n\n    if (characterName.equals(\"Joker\")) {\n      image = \"joker.png\";\n    }\n    \n    if (characterName.equals(\"Lex Luthor\")) {\n      image = \"lexluther.png\";\n    }\n\n    if (characterName.equals(\"Ares\")) {\n      image = \"ares.png\";\n    }\n\n    if (characterName.equals(\"Reign\")) {\n      image = \"reign.jpg\";\n    }\n\n    if (characterName.equals(\"Cyborg Superman\")) {\n      image = \"cyborg.png\";\n    }\n\n    return image;\n  }\n\n  /*\n   * Returns the name of the main character\n   */\n  public String getMainCharacter() {\n    return mainCharacter;\n  }\n\n  /*\n   * Returns the name of the enemy character\n   */\n  public String getEnemyCharacter() {\n    return enemyCharacter;\n  }\n\n  /*\n   * Returns the image for the main character\n   */\n  public String getMainImage() {\n    return mainImage;\n  }\n\n  /*\n   * Returns the image for the enemy character\n   */\n  public String getEnemyImage() {\n    return enemyImage;\n  }\n\n  /*\n   * Returns a 1D array of Battle objects using the data in the mainFile and enemyFile\n   */\n  public static Battle[] createBattles(String mainFile, String enemyFile) {\n    String[] mainData = FileReader.toStringArray(mainFile);\n    String[] enemyData = FileReader.toStringArray(enemyFile);\n    Battle[] battleData = new Battle[mainData.length];\n\n    for (int index = 0; index < battleData.length; index++) {\n      battleData[index] = new Battle(mainData[index], enemyData[index]);\n    }\n\n    return battleData;\n  }\n\n  /*\n   * Returns a String containing the names of the main and enemy characters\n   */\n  public String toString() {\n    return mainCharacter + \" vs \" + enemyCharacter;\n  }\n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "main.txt": {
        "text": "Batman\nBatman\nBatman\nBatman\nBatman\nBatman\nBatman\nBatman\nBatman\nBatman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nSuperman\nWonder Woman\nWonder Woman\nWonder Woman\nWonder Woman\nWonder Woman\nWonder Woman\nSupergirl\nSupergirl\nSupergirl\nSupergirl\nSupergirl",
        "isVisible": true,
        "tabOrder": 3
      },
      "enemy.txt": {
        "text": "The Joker\nThe Joker\nThe Joker\nThe Joker\nThe Joker\nThe Joker\nThe Joker\nThe Joker\nThe Joker\nThe Joker\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nLex Luthor\nAres\nAres\nAres\nAres\nAres\nAres\nReign\nReign\nCyborg Superman\nCyborg Superman\nCyborg Superman",
        "isVisible": true,
        "tabOrder": 4
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 6
      }
    },
    "name_suffix": "_2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:55:13.183+00:00\",\"changed\":[\"cloned from \\\"CSA U4L7-L5d_2023\\\"\"],\"cloned_from\":\"CSA U4L7-L5d_2023\"}]"
}]]></config>
</Javalab>
