<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a scene that visualizes the number of cat breeds that originated in each country. Use multi-selection statements to count the number of cat breeds for each country, and use the counts for each country to decide the size of the flag images to draw.\r\n\r\n##In CatScene.java:\r\n\r\n1. Write the `analyzeCountries()`(#e7e8ea) method to count the number of cat breeds that originated in each country by traversing the `countries`(#e7e8ea) array.\r\n\r\n   * Create an `int`(#e7e8ea) array to store the counts for each country.\r\n\r\n   * Use multi-selection statements and the `equals()`(#e7e8ea) method to check if the current country equals `\"Egypt\"`(#e7e8ea), `\"Russia\"`(#e7e8ea), `\"Thailand\"`(#e7e8ea), `\"United Kingdom\"`(#e7e8ea), or `\"United States\"`(#e7e8ea). Increase the corresponding value in the `int`(#e7e8ea) array by `1`(#e7e8ea) if the condition is `true`(#e7e8ea).\r\n   \r\n   * Return the `int`(#e7e8ea) array.\r\n\r\n2. Write the `createScene()`(#e7e8ea) method to draw each country flag at a random location in the scene. Use the corresponding value in the `counts`(#e7e8ea) array to determine the size to draw the image.\r\n\r\n##In MyTheater.java:\r\n\r\n3. Declare and initialize an array to store the array returned from calling the `analyzeCountries()`(#e7e8ea) method, then call the `createScene()`(#e7e8ea) method with the array.\r\n\r\n4. Use `Theater.playScenes()`(#e7e8ea) to play the scene.\r\n\r\n::: details [**Show Me How**]\r\nA multi-selection statement uses the following syntax:\r\n  \r\n  ```\r\n  if (condition) {\r\n    // code to execute\r\n  }\r\n  else if (condition) {\r\n    // code to execute\r\n  }\r\n  else {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nYou can have more than one `else if`(#e7e8ea) if you have additional conditions you need to check.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "start_sources": {
      "MyTheater.java": {
        "text": "import org.code.theater.*;\n\npublic class MyTheater {\n  public static void main(String[] args) {\n\n    FileReader myFileReader = new FileReader(\"breeds.txt\");\n    String[] breeds = myFileReader.getStringData(47);\n\n    myFileReader.setFile(\"countries.txt\");\n    String[] countries = myFileReader.getStringData(47);\n\n    CatScene myScene = new CatScene(breeds, countries);\n\n    // TO DO #3: Call the analyzeCountries() and createScene() methods.\n\n\n    // TO DO #4: Use Theater.playScenes() to play the scene.\n    \n    \n  }\n}",
        "isVisible": true
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n/*\n * Reads data from a file\n */\npublic class FileReader {\n\n  private Scanner fileReader;   // The Scanner object to read the file\n  private File myFile;          // The File object containing the data\n\n  /*\n   * Constructor to create a FileReader with\n   * the specified filename to read\n   */\n  public FileReader(String filename) {\n    setFile(filename);\n  }\n\n  /*\n   * Sets the file to the specified filename\n   */\n  public void setFile(String filename) {\n    myFile = new File(filename);\n    fileReader = createScanner(myFile);\n  }\n\n  /*\n   * Returns a Scanner object to read the file\n   * or notifies the user if the file is not found\n   */\n  public Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  /*\n   * Returns an int array containing the values in the file\n   */\n  public int[] getIntData(int numValues) {\n    int[] values = new int[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextInt()) {\n        values[index] = fileReader.nextInt();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a double array containing the values in the file\n   */\n  public double[] getDoubleData(int numValues) {\n    double[] values = new double[numValues];\n    \n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextDouble()) {\n        values[index] = fileReader.nextDouble();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n\n  /*\n   * Returns a String array containing the values in the file\n   */\n  public String[] getStringData(int numValues) {\n    String[] values = new String[numValues];\n\n    for (int index = 0; index < values.length; index++) {\n      if (fileReader.hasNextLine()) {\n        values[index] = fileReader.nextLine();\n      }\n    }\n\n    fileReader.close();\n    return values;\n  }\n  \n}",
        "isVisible": true
      },
      "CatScene.java": {
        "text": "import org.code.theater.*;\n\n/*\n * A scene visualizing the number of cat\n * breeds that originated in each country\n */\npublic class CatScene extends Scene {\n\n  private String[] breeds;     // The list of cat breeds\n  private String[] countries;  // The list of originating countries\n\n  /*\n   * Constructor to create a CatScene with the\n   * specified arrays of breeds and countries\n   */\n  public CatScene(String[] breeds, String[] countries) {\n    this.breeds = breeds;\n    this.countries = countries;\n  }\n\n  /*\n   * Returns an array containing the number\n   * of cat breeds for each country\n   */\n  public int[] analyzeCountries() {\n    // TO DO #1: Traverse the countries array to count the number of breeds\n    // that originated in each country.\n\n    return null;\n  }\n\n  /*\n   * Creates the scene by drawing each country flag at a random location\n   * and the size based on the number of originating cat breeds\n   */\n  public void createScene(int[] counts) {\n    String[] countryFlags = {\"egypt.png\", \"russia.png\", \"thailand.png\", \"uk.png\", \"usa.png\"};\n    \n    // TO DO #2: Draw each country flag at a random location. Use its\n    // number of originating cat breeds to inform the size of the image.\n\n    \n  }\n  \n}",
        "isVisible": true
      },
      "breeds.txt": {
        "text": "Abyssinian\nAmerican Bobtail\nAmerican Curl\nAmerican Shorthair\nAmerican Wirehair\nBalinese\nBambino\nBengal\nBombay\nBritish Longhair\nBritish Shorthair\nBurmilla\nCalifornia Spangled\nChantilly-Tiffany\nChausie\nCheetoh\nColorpoint Shorthair\nCornish Rex\nDevon Rex\nDonskoy\nEgyptian Mau\nExotic Shorthair\nHavana Brown\nHimalayan\nJavanese\nKhao Manee\nKorat\nKurilian\nLaPerm\nMaine Coon\nMalayan\nMunchkin\nNebelung\nOcicat\nOriental\nPixie-bob\nRagamuffin\nRagdoll\nRussian Blue\nSavannah\nScottish Fold\nSelkirk Rex\nSiamese\nSiberian\nSnowshoe\nToyger\nYork Chocolate",
        "isVisible": true
      },
      "countries.txt": {
        "text": "Egypt\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nUnited Kingdom\nUnited States\nUnited States\nEgypt\nUnited States\nUnited States\nUnited Kingdom\nUnited Kingdom\nRussia\nEgypt\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nThailand\nThailand\nRussia\nThailand\nUnited States\nUnited Kingdom\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nUnited States\nRussia\nUnited States\nUnited Kingdom\nUnited States\nThailand\nRussia\nUnited States\nUnited States\nUnited States",
        "isVisible": true
      }
    },
    "display_name": "Cat Breeds",
    "bubble_choice_description": "Count the number of cat breeds that originated in each country and draw images based on the count.",
    "thumbnail_url": "https://images.code.org/7ad394dec8c9fc164c5a3c37f8f6b1ea-image-1650719083623.png",
    "starter_assets": {
      "egypt.png": "e94e8860-a143-473b-ae1a-d32c14aaf670.png",
      "russia.png": "647d112c-8af6-45db-9153-90d021104e5d.png",
      "thailand.png": "d21a0a84-c788-4bff-8363-e074a0d6ecae.png",
      "uk.png": "4fb0d7df-a8b5-4978-9681-37f771a0b52b.png",
      "usa.png": "e741c5ce-d939-4194-9ec9-1bdca5e548e4.png"
    },
    "encrypted_exemplar_sources": "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\n"
  },
  "game_id": 68,
  "created_at": "2022-04-07T18:58:38.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-07T18:58:38.005+00:00\",\"changed\":[\"cloned from \\\"CSA U4L10-L3c_2022\\\"\"],\"cloned_from\":\"CSA U4L10-L3c_2022\"},{\"changed_at\":\"2022-04-07 18:58:43 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:00:34 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:02:30 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 13:16:08 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:25:24 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:30:26 +0000\",\"changed\":[\"encrypted_examples\",\"display_name\",\"bubble_choice_description\",\"thumbnail_url\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:31:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-23 15:49:54 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-01 17:49:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:49:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:49:38 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-03 12:49:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 13:06:20 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 13:06:49 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-04 13:06:52 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-22 20:27:34 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
