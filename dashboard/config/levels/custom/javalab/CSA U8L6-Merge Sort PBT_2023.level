<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-14T14:04:27.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "SortRunner.java": {
        "text": "public class SortRunner {\n  public static void main(String[] args) {\n\n    int[] numbers = {12, 11, 13, 5, 6, 7};\n    Sorter.mergeSort(numbers, 0, numbers.length - 1);\n    System.out.println(\"numbers after merge sort -> \" + Sorter.arrayToString(numbers));\n\n    /* ---- ðŸ”Ž ADD YOUR CODE BELOW THIS LINE ---- */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Sorter.java": {
        "text": "/*\n * Analyzes data in a list\n */\npublic class Sorter {\n\n  /*\n   * Uses the merge sort algorithm to sort the elements in the 1D array numList\n   */\n  public static void mergeSort(int[] numList, int left, int right) {\n    if (left < right) {\n      int middle = (left + right) / 2;\n\n      mergeSort(numList, left, middle);\n      mergeSort(numList, middle + 1, right);\n\n      merge(numList, left, middle, right);\n    }\n  }\n\n  /*\n   * Splits the 1D array numList into two sub-arrays and merges them together in order\n   */\n  public static void merge(int[] numList, int left, int middle, int right) {\n    // create temporary arrays\n    int[] leftList = new int[middle - left + 1];\n    int[] rightList = new int[right - middle];\n\n    // copy numList into the temporary arrays\n    for (int index = 0; index < leftList.length; index++) {\n      leftList[index] = numList[left + index];\n    }\n\n    for (int index = 0; index < rightList.length; index++) {\n      rightList[index] = numList[middle + index + 1];\n    }\n\n    // current indexes of temporary arrays\n    int leftIndex = 0;\n    int rightIndex = 0;\n    \n    // copy from leftList and rightList back into numList\n    for (int index = left; index <= right; index++) {\n      // if there are still uncopied values in leftList and rightList, copy the smallest value of the two\n      if (leftIndex < leftList.length && rightIndex < rightList.length) {\n        if (leftList[leftIndex] < rightList[rightIndex]) {\n          numList[index] = leftList[leftIndex];\n          leftIndex++;\n        }\n        else {\n          numList[index] = rightList[rightIndex];\n          rightIndex++;\n        }\n      }\n      else if (leftIndex < leftList.length) {\n        // if all values have been copied from rightList, copy the rest of leftList\n        numList[index] = leftList[leftIndex];\n        leftIndex++;\n      }\n      else if (rightIndex < rightList.length) {\n        // if all values have been copied from leftList, copy the rest of rightList\n        numList[index] = rightList[rightIndex];\n        rightIndex++;\n      }\n    }\n  }\n\n  /*\n   * Uses the insertion sort algorithm to sort the elements in the 1D array data\n   */\n  public static void insertionSort(int[] data) {\n    int numCompares = 0;\n\n    for (int i = 1; i < data.length; i++) {\n      int temp = data[i];\n      int index = i;\n\n      numCompares++;\n      \n      while (index > 0 && data[index - 1] > temp) {\n        int value = data[index - 1];\n        data[index] = data[index - 1];\n        index--;\n\n        if (index > 0) {\n          numCompares++;\n        }\n      }\n\n      data[index] = temp;\n      System.out.println(\"Current array: \" + arrayToString(data));\n    }\n  }\n\n  /*\n   * Uses the selection sort algorithm to sort the elements in the 1D array data\n   */\n  public static void selectionSort(int[] data) {\n    int numCompares = 0;\n    \n    for (int j = 0; j < data.length - 1; j++) {\n      int m = j;\n\n      for (int k = j + 1; k < data.length; k++) {\n        numCompares++;\n        System.out.println(\"Comparison #\" + numCompares + \" -- checking \" + data[m] + \" and \" + data[k]);\n        \n        if (data[k] < data[m]) {\n          m = k;\n        }\n      }\n\n      int temp = data[m];\n      data[m] = data[j];\n      data[j] = temp;\n\n      System.out.println(\"Current array: \" + arrayToString(data));\n    }\n  }\n\n  /* \n   * Returns a String containing each element in the 1D array data\n   */\n  public static String arrayToString(int[] data) {\n    String result = \"\";\n    \n    for (int value : data) {\n      result += value + \" \";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-14T14:04:27.211+00:00\",\"changed\":[\"cloned from \\\"CSA U8L5-Insertion Sort PBT_2023\\\"\"],\"cloned_from\":\"CSA U8L5-Insertion Sort PBT_2023\"},{\"changed_at\":\"2023-04-14 14:04:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 00:06:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 00:06:41 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 00:10:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 00:10:42 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 00:10:48 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 00:10:52 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 00:11:00 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
