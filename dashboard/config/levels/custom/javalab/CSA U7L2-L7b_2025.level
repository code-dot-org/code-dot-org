<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-17T00:24:22.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A music store wants to keep track of its inventory of instruments.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Instrument</code> class constructor to take a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Brand</code> object and the type of instrument as parameters.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">InstrumentRunner</code> class\r\n\r\n1. Instantiate an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Instrument</code> object and print the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Instrument</code> object.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">changePrice()</code> method to modify the brand's price, then print the updated <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Instrument</code> object.\r\n\r\n3. Print the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Brand</code> object to confirm it was not modified.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with using object references as parameters.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/object-references-as-parameters"
    ],
    "display_name": "Music Store",
    "bubble_choice_description": "A music store wants to keep track of its inventory of instruments.",
    "thumbnail_url": "https://images.code.org/6beb09caec0c33c6d673ea1e3f950d92-music-instrument.png",
    "encrypted_validation": "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\n+ArOUYrwMxzcpYesMmd5rQ==\n",
    "start_sources": {
      "InstrumentRunner.java": {
        "text": "public class InstrumentRunner {\n  public static void main(String[] args) {\n\n    // Creates a Brand object\n    Brand gibson = new Brand(\"Gibson\", 575.99);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate an Instrument object and print the object. Then call the\n     * changePrice() method and print the updated Instrument object. Print the\n     * Brand object to confirm it was not modified.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Instrument.java": {
        "text": "/*\n * Represents an instrument in a music store\n */\npublic class Instrument {\n      \n  private Brand brand;    // The Brand of an instrument\n  private String type;    // The type of an instrument\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write the Instrument constructor with a parameter for a Brand object and\n   * the type of an instrument. Instantiate the brand object to a new Brand object\n   * using the values assigned to the parameter's instance variables.\n   * -----------------------------------------------------------------------------\n   */\n  \n\n\n\n  \n\n  /*\n   * Returns the instrument's brand\n   */\n  public Brand getBrand() {\n    return brand;\n  }\n  \n  /*\n   * Returns the type of the instrument\n   */\n  public String getType() {\n    return type;\n  }\n\n  /*\n   * Changes the price of the instrument\n   */\n  public void changePrice(double newPrice) {\n    brand.setPrice(newPrice);\n  }\n\n  /*\n   * Returns a String containing the brand information and type\n   */\n  public String toString() {\n    return type + \"\\n\" + brand;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Brand.java": {
        "text": "/*\n * Represents a brand of an instrument\n */\npublic class Brand {\n  \n  private String name;     // The name of a brand\n  private double price;    // The price of a brand\n\n  /*\n   * Sets name and price to the specified values\n   */\n  public Brand(String name, double price) {\n    this.name = name;\n    this.price = price;\n  }\n\n  /*\n   * Returns the name of the brand\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the price of the brand\n   */\n  public double getPrice() {\n    return price;\n  }\n\n  /*\n   * Sets the price to newPrice\n   */\n  public void setPrice(double newPrice) {\n    price = newPrice;\n  }\n\n  /*\n   * Returns a String containing the brand's information\n   */\n  public String toString() {\n    return name + \" - $\" + price;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "encrypted_exemplar_sources": "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\nb81N5GUEICPS3Tl487EkYhtpG6e/O6QVpXi901+plfyi2riKvUjdaM6dcU29\n6HPlX8BgbAMqxPs6qU6hPSbtxLA3QqRxaOPrLJxWvKoKQzsv3uk+wDSJ3RfS\n/rhDoYY6JYYQs0TUVqLA1vn6rkl3ngyi2lvjvuv3H523fpMqTsY+ENIe/H/e\n6v6D95jnIP/HXYi5bZq5KCrRvIu7o2Y0yugGHx6ziyihrG1F6r4H1iZLO7vP\nP8hAzJ5a94T+MV8Bko12vZ+GTJ9LFdIFOjOTISJS6vW96xthrv5kwsGxhn0y\nhvH6nem4T7RuF2tfaVW33MYTH3kRPW82OIVXUb/IcdoU7AnuAV2mYOnJ3oWZ\np8VQ5fq01goUmHj59XmTCu3W5lniBoB7q8RwzNI9VSMno9CRAdikmgfhPwIM\nv10nEMJSqzEfHX2Zm9P8f3c8XCHwCbZroe40OyX5ej0f72cfcOMhTk8zmqsJ\nWd9H82muNQX3WbjDKqQhwkb8/BMI+DfljcmwDfMN3yv3FQ6fB3+B/4h0EiOP\nip6Sh+lcieOiI87L6hKrZTCDf9cfAV+lZbS5W6tgrz+GEz5bjdsfeyt+NFUM\nOIBTiiiqRKYiyXxhV9L1++ruO8jcRY8Eg/My8LmxEQOjaCH+EMi4zXRSVNJA\nuenocBZTYMPuLpL8mlNK1FcrP8OUdhUctZUXDJFajpXdyYM6p+tjsoL70TjZ\nEI//Bd6F0a1BBWmv1kQi9Rq5Lf8DAWZaSqyoZm6Hxi109dsCTmqpknXKsi8u\nXngFcTdg4FIpwIz2dhLcLllN8MAQahfmVlV6w6o7P80qEUaMxWgehou0usN9\nOGC9MSynHEbHp2h/PtzKmUSDgkUosyQjdn0YJWLFoa2NllyNmPuFiFEHr/eU\nbA1LACe26P06Po+q2pr2wExjHfk4xyZhAmmWRkgyqBFHn0hjqptWuo7xFwSi\n+yMZ112wfQuaHPxmziCK7fg2IDqXCe7mRgqt0qihmQLENT8kjnJN4O+QyWpP\nPKQTBuoiVMlxNOuI6WLVfvoxu51hwh8pO78DFg+XMHxzxJkBcsMg/pKI8h6U\nFAqREgvqC2VoknadcbR8uNMqHibRwcdNXwUbIeEBsebWH8aJXVPns7xcV6V4\n6PH9wr5BEx/C/XTTcbChEP3GGco7M1HKk6Gyin2vL099fkie+sTL5bzGlj/p\n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\nZY6teQ+CRAs1fAhYOg==\n",
    "name_suffix": "_2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-17T00:24:22.016+00:00\",\"changed\":[\"cloned from \\\"CSA U7L2-L7b_2023\\\"\"],\"cloned_from\":\"CSA U7L2-L7b_2023\"}]"
}]]></config>
</Javalab>
