<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "Bingo Terms Generator",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "BingoRunner.java": {
        "text": "public class BingoRunner {\n  public static void main(String[] args) {\n\n    BingoGenerator.readFile(\"vocabulary.txt\");\n    BingoGenerator.prompt();\n    \n  }\n}",
        "isVisible": true
      },
      "BingoGenerator.java": {
        "text": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic final class BingoGenerator {\n\n  private static HashMap<Double, String> vocabulary = new HashMap<Double, String>();\n  private static ArrayList<String> available = new ArrayList<String>();\n  private static ArrayList<String> chosen = new ArrayList<String>();\n  private static Scanner input = new Scanner(System.in);\n  private static double lesson = 0;\n  private static int numTerms = 0;\n\n  public static void readFile(String filename) {\n    try {\n      File vocabFile = new File(filename);\n      Scanner fileReader = new Scanner(vocabFile);\n\n      while (fileReader.hasNextLine()) {\n        String entry = fileReader.nextLine();\n        vocabulary.put(getKey(entry), getValue(entry));\n      }\n\n      fileReader.close();\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Error reading file.\");\n    }\n\n  }\n\n  public static double getKey(String entry) {\n    return Double.parseDouble(entry.substring(0, entry.indexOf(\":\")));\n  }\n\n  public static String getValue(String entry) {\n    return entry.substring(entry.indexOf(\":\") + 1);\n  }\n\n  public static void getTerms(double lesson) {\n    available.clear();\n    \n    vocabulary.forEach((key, value) -> {\n      if (key < lesson) {\n        available.add(value);\n      }\n    });\n  }\n\n  public static void getRandomWords(int numWords, int numSets) {\n    while (numSets > 0) {\n      chosen.clear();\n      System.out.println(\"\\nSet #\" + numSets + \"\\n--------------------\");\n\n      while (chosen.size() < numWords) {\n        getNewRandomWords(numWords - chosen.size());\n        chosen = removeDuplicates();\n      }\n    \n      showChosenWords();\n      numSets--;\n    }\n  }\n\n  public static void getNewRandomWords(int numWords) {\n    for (int count = 0; count < numWords; count++) {\n      int index = (int)(Math.random() * available.size());\n      chosen.add(available.get(index));\n    }\n  }\n\n  public static void showChosenWords() {\n    for (int index = 0; index < chosen.size(); index++) {\n      System.out.println(chosen.get(index));\n    }\n    \n    System.out.println();\n  }\n\n  public static ArrayList<String> removeDuplicates() {\n    ArrayList<String> finalList = new ArrayList<String>();\n    \n    for (String word : chosen) {\n      if (!finalList.contains(word)) {\n        finalList.add(word);\n      }\n    }\n\n    return finalList;\n  }\n\n  public static void prompt() {\n    int choice = 0;\n\n    System.out.print(\"Number of sets needed: \");\n    int numSets = input.nextInt();\n    input.nextLine();\n\n    while (choice != 4) {\n      chooseOption(choice, numSets);\n      \n      System.out.println(\"--------------------\");\n      System.out.println(\"1) New set - same lesson and same number of terms\");\n      System.out.println(\"2) New set - different lesson, same number of terms\");\n      System.out.println(\"3) New set - different lesson and different number of terms\");\n      System.out.println(\"4) Quit\");\n      System.out.print(\"Enter choice: \");\n      choice = input.nextInt();\n      input.nextLine();\n    }\n\n    input.close();\n  }\n\n  public static void chooseOption(int choice, int numSets) {\n    System.out.println(\"--------------------\");\n    \n    if (choice == 0 || choice == 3) {\n      setLesson();\n      setNumTerms(numSets);\n    }\n    else if (choice == 1) {\n      getTerms(lesson);\n      getRandomWords(numTerms, numSets);\n    }\n    else if (choice == 2) {\n      setLesson();\n      getRandomWords(numTerms, numSets);\n    }\n    else {\n      System.out.println(\"Invalid choice.\");\n    }\n\n    System.out.println();\n  }\n\n  public static double chooseLesson() {\n    System.out.print(\"Enter lesson (format as U.L): \");\n    double lesson = input.nextDouble();\n    return lesson;\n  }\n\n  public static int chooseNumTerms() {\n    System.out.print(\"Enter number of terms needed: \");\n    int num = input.nextInt();\n    input.nextLine();\n    return num;\n  }\n\n  public static void setLesson() {\n    lesson = chooseLesson();\n    getTerms(lesson);\n  }\n\n  public static void setNumTerms(int numSets) {\n    numTerms = chooseNumTerms();\n    getRandomWords(numTerms, numSets);\n  }\n}",
        "isVisible": true
      },
      "vocabulary.txt": {
        "text": "1.1:software engineer\n1.2:software\n1.2:integrated development environment (IDE)\n1.2:source code\n1.2:syntax\n1.2:class header\n1.2:syntax error\n1.3:object-oriented programming\n1.3:package\n1.3:object\n1.3:class\n1.3:UML diagram\n1.3:attribute\n1.3:state\n1.3:behavior\n1.3:constructor\n1.3:instantiate\n1.3:bug\n1.3:debugging\n1.4:method\n1.4:dot operator\n1.4:parameter\n1.4:argument\n1.4:void method\n1.5:boolean\n1.5:conditional statement\n1.5:condition\n1.5:if statement (one-way selection statement)\n1.5:logic error\n1.5:return\n1.6:inheritance\n1.6:subclass\n1.6:superclass\n1.6:constructor signature\n1.6:super keyword\n1.7:method signature\n1.8:comment\n1.8:programming style\n1.8:code review\n1.8:documentation\n1.9:control structure\n1.9:iteration statement (loop)\n1.9:while loop\n1.9:infinite loop\n1.9:algorithm\n1.9:pseudocode\n1.9:efficient\n1.10:if-else statement (two-way selection statement)\n1.10:logical operator\n1.10:NOT (!) operator\n1.11:concatenation\n1.12:method decomposition\n1.12:edge case\n1.12:redundant code\n1.13:inheritance hierarchy\n1.15:open source code\n2.1:assignment\n2.1:data type\n2.1:declaration\n2.1:initialization\n2.1:literal\n2.1:primitive type\n2.1:reference type\n2.1:variable\n2.2:expression\n2.2:operand\n2.2:compound expression\n2.2:compound assignment operator\n2.2:ArithmeticException\n2.2:truncate\n2.3:instance variable\n2.3:encapsulation\n2.3:access modifier\n2.4:no-argument constructor\n2.4:default value\n2.4:parameterized constructor\n2.4:overloading\n2.4:actual parameter\n2.4:formal parameter\n2.4:local variable\n2.4:call by value\n2.5:NullPointerException\n2.5:application program interface (API)\n2.5:library\n2.5:null\n2.6:DRY principle\n2.6:refactor\n2.7:accessor method\n2.7:return by value\n2.7:return type\n2.7:return keyword\n2.8:mutator method\n2.8:relational operator\n2.8:Boolean expression\n2.8:sentinel value\n2.9:escape sequence\n2.9:override\n2.10:scope\n2.10:this keyword\n3.1:data structure\n3.1:one-dimensional (1D) array\n3.1:immutable\n3.1:element\n3.1:index\n3.1:initializer list\n3.2:ArrayIndexOutOfBoundsException\n3.3:decrement\n3.3:increment\n3.3:loop control variable\n3.3:traverse\n3.3:for loop\n3.4:precondition\n3.4:postcondition\n3.5:enhanced for loop\n3.6:static variable\n3.6:constant\n3.7:polymorphism\n3.8:text file\n3.10:nested loop",
        "isVisible": true
      }
    }
  },
  "game_id": 68,
  "created_at": "2022-03-25T16:03:47.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-03-25 16:03:51 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-25 16:08:01 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-25 16:08:41 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-25 16:14:13 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-25 16:16:08 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-25 17:40:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-25 17:41:05 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-25 17:48:59 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-03-25 22:12:39 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
