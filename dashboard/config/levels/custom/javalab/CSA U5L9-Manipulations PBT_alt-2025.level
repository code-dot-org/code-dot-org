<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T22:26:05.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates an ImageScene object\n    ImageScene scene = new ImageScene();\n\n    // Creates ChromaImage objects\n    ChromaImage camera = new ChromaImage(\"camera.jpg\");\n    ChromaImage donuts = new ChromaImage(\"donuts.jpg\");\n\n    // Draws the ChromaImage object in the scene\n    scene.drawChromaImage(camera, \"donuts.jpg\");\n\n    /* ---- ðŸ”Ž ADD YOUR CODE BELOW THIS LINE ---- */\n\n\n\n\n\n    \n    \n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ImagePlus.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Represents an image that can be modified with filters and effects\n */\npublic class ImagePlus extends Image {\n\n  private Pixel[][] imagePixels;     // The 2D array of Pixel objects that make up the image\n\n  /*\n   * Initializes photo from a specified image file and calls\n   * the getImagePixels() method to initialize imagePixels\n   */\n  public ImagePlus(String imageFile) {\n    super(imageFile);\n    imagePixels = getPixelsFromImage();\n  }\n\n  /*\n   * Returns the 2D array of Pixel objects that make up the image\n   */\n  public Pixel[][] getImagePixels() {\n    return imagePixels;\n  }\n\n  /*\n   * Returns a 2D array of Pixel objects that make up the Image object\n   */\n  public Pixel[][] getPixelsFromImage() {\n    Pixel[][] imagePixels = new Pixel[getHeight()][getWidth()];\n\n    for (int row = 0; row < imagePixels.length; row++) {\n      for (int col = 0; col < imagePixels[0].length; col++) {\n        imagePixels[row][col] = getPixel(col, row);\n      }\n    }\n\n    return imagePixels;\n  }\n\n  /*\n   * Detects the edges of objects in an image\n   */\n  public void detectEdges(int edgeDistance) {\n    for (int row = 0; row < imagePixels.length; row++) {\n      for (int col = 0; col < imagePixels[0].length - 1; col++) {\n        Pixel leftPixel = imagePixels[row][col];\n        Pixel rightPixel = imagePixels[row][col + 1];\n\n        if (getDistance(leftPixel.getColor(), rightPixel.getColor()) > edgeDistance) {\n          leftPixel.setColor(Color.BLACK);\n        }\n        else {\n          leftPixel.setColor(Color.WHITE);\n        }\n      }\n    }\n  }\n\n  /*\n   * Different approach to detecting edges in an image\n   */\n  public void anotherEdgeDetection(int edgeDistance) {\n    for (int row = 0; row < imagePixels.length - 1; row++) {\n      for (int col = 0; col < imagePixels[0].length - 1; col++) {\n        Pixel currentPixel = imagePixels[row][col];\n        Pixel bottomPixel = imagePixels[row + 1][col];\n        Pixel rightPixel = imagePixels[row][col + 1];\n\n        int currentIntensity = getAverage(currentPixel);\n        int bottomIntensity = getAverage(bottomPixel);\n        int rightIntensity = getAverage(rightPixel);\n\n        int bottomDiff = Math.abs(currentIntensity - bottomIntensity);\n        int rightDiff = Math.abs(currentIntensity - rightIntensity);\n\n        if (bottomDiff > edgeDistance || rightDiff > edgeDistance) {\n          currentPixel.setColor(Color.BLACK);\n        }\n        else {\n          currentPixel.setColor(Color.WHITE);\n        }\n      }\n    }\n  }\n\n  /*\n   * Returns the distance between firstColor and secondColor\n   */\n  public double getDistance(Color firstColor, Color secondColor) {\n    double redDistance = firstColor.getRed() - secondColor.getRed();\n    double greenDistance = firstColor.getGreen() - secondColor.getGreen();\n    double blueDistance = firstColor.getBlue() - secondColor.getBlue();\n    double distance = Math.sqrt(redDistance * redDistance + greenDistance * greenDistance + blueDistance * blueDistance);\n    return distance;\n  }\n\n  /*\n   * Returns the average of the red, green, and blue color values\n   * of the specified Pixel object\n   */\n  public int getAverage(Pixel thePixel) {\n    return (thePixel.getRed() + thePixel.getGreen() + thePixel.getBlue()) / 3;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "ChromaImage.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Represents an image with a solid color background\n */\npublic class ChromaImage extends ImagePlus {\n\n  /*\n   * Calls the ImagePlus constructor to create the Image\n   * object and initialize the 2D imagePixels array\n   */\n  public ChromaImage(String imageFile) {\n    super(imageFile);\n  }\n\n  /*\n   * Replaces the green pixels in photo\n   */\n  public void replaceGreenBackground(String newBackgroundFile) {\n    ImagePlus newBackground = new ImagePlus(newBackgroundFile);\n    Pixel[][] newPixels = newBackground.getImagePixels();\n    Pixel[][] originalPixels = getImagePixels();\n\n    Pixel fromPixel = null;\n    Pixel toPixel = null;\n\n    for (int row = 0; row < originalPixels.length; row++) {\n      for (int col = 0; col < originalPixels[0].length; col++) {\n        toPixel = originalPixels[row][col];\n\n        if (toPixel.getGreen() > toPixel.getRed()) {\n          fromPixel = newPixels[row][col];\n          toPixel.setColor(fromPixel.getColor());\n        }\n      }\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "ImageScene.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Represents a scene with images\n */\npublic class ImageScene extends Scene {\n\n  /*\n   * Draws the specified ChromaImage object in the scene\n   */\n  public void drawChromaImage(ChromaImage photo, String newBackgroundImage) {\n    drawImage(photo, 0, 0, getWidth());\n    pause(2);\n\n    photo.replaceGreenBackground(newBackgroundImage);\n    drawImage(photo, 0, 0, getWidth());\n    pause(2);\n  }\n\n  /*\n   * Draws the specified ImagePlus object in the scene\n   */\n  public void drawImageWithEdges(ImagePlus photo) {\n    drawImage(photo, 0, 0, getWidth());\n    pause(2);\n\n    photo.detectEdges(2);\n    drawImage(photo, 0, 0, getWidth());\n    pause(2);\n  }\n\n  /*\n   * Draws the specified ImagePlus object in the scene\n   */\n  public void drawImageWithAltEdges(ImagePlus photo) {\n    drawImage(photo, 0, 0, getWidth());\n    pause(2);\n\n    photo.anotherEdgeDetection(2);\n    drawImage(photo, 0, 0, getWidth());\n    pause(2);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "starter_assets": {
      "dog.png": "ce2a3b98-8bcc-4944-b115-af782cc5b6d7.png",
      "background.jpg": "50219165-3efc-4a4e-8a90-1408cbc3c39f.jpg",
      "camera.jpg": "8e3ddb5a-9ff0-40f9-93b9-14b58e6f100c.jpg",
      "donuts.jpg": "32b9ef9b-a81c-4dc9-b89a-77e98247b812.jpg",
      "space.jpg": "01fbfa9f-5253-4f13-8338-78287cf89c95.jpg"
    },
    "name_suffix": "_alt-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T22:26:05.100+00:00\",\"changed\":[\"cloned from \\\"CSA U5L9-Manipulations PBT_pilot-2025\\\"\"],\"cloned_from\":\"CSA U5L9-Manipulations PBT_pilot-2025\"}]"
}]]></config>
</Javalab>
