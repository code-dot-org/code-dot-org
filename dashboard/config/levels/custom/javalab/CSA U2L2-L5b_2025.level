<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:49:54.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A coach manages a sports team at the school, and they need help creating a program to manage their team.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class, declare <code style=\"background-color: #ececec; color: black; font-weight: bold;\">private</code> instance variables named <code style=\"background-color: #ececec; color: black; font-weight: bold;\">teamName</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numAthletes</code> for the team name and the number of athletes on a team.\r\n\r\n‚úÖ **TO DO #2:** Write a no-argument constructor to assign default values to the instance variables, such as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"new team\"</code> for the team name and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">5</code> for the number of athletes on a team.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TeamRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> object.\r\n\r\n‚úÖ **TO DO #4:** Print the constructor and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a no-argument constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n    <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getTeamName()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getNumAthletes()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class to get the current values assigned to the instance variables. For example:</p>\r\n    <pre style=\"background-color: #333333; color: white;\">\r\nTeam soccer = new Team();\r\nSystem.out.println(\"Team Name: \" + soccer.getTeamName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Team Class",
    "bubble_choice_description": "A coach manages a sports team at the school, and they need help creating a program to manage their team.",
    "thumbnail_url": "https://images.code.org/153e2ae6a64d6c57317641ab8812c9a7-sports.png",
    "start_sources": {
      "TeamRunner.java": {
        "text": "public class TeamRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Team object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject) and the values assigned\n     * to the instance variables using the methods in the Team class.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Team.java": {
        "text": "/*\n * Represents a school sports team\n */\npublic class Team {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Declare instance variables for the team name and number of athletes.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a no-argument constructor to assign default values to the instance\n   * variables for the team name and number of athletes.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /*\n   * Returns the current value assigned to teamName\n   */\n  public String getTeamName() {\n    return teamName;\n  }\n\n  /*\n   * Returns the current value assigned to numAthletes\n   */\n  public int getNumAthletes() {\n    return numAthletes;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    ArrayList<String> fieldsList = fieldsToList(Arrays.toString(classFields));\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    fieldsAsText = fieldsAsText.substring(1, fieldsAsText.length() - 1);\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "encrypted_exemplar_sources": "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\nMRCG1A==\n",
    "encrypted_validation": "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\nh4z2pggxry06be/y4aFkmvMU\n",
    "name_suffix": "_2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:49:54.492+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L5b_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L5b_2023\"}]"
}]]></config>
</Javalab>
