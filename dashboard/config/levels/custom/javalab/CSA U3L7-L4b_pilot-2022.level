<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-08-23T20:25:29.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The `BankAccount`(#e7e8ea) class represents a bank account and has instance variables for the customer's name and starting balance. The `BasicAccount`(#e7e8ea) class represents a basic bank account.\r\n\r\nThe `BasicAccount`(#e7e8ea) class overrides the `withdraw()`(#e7e8ea) method to charge a $30 fee if a withdrawal causes an account to be overdrawn (balance is negative).\r\n\r\n##In Bank.java:\r\n\r\n1. Write the `getAccountsInfo()`(#e7e8ea) method to traverse the `BankAccount`(#e7e8ea) array.\r\n\r\n   * Withdraw `300`(#e7e8ea) from each account.\r\n   \r\n   * Return a `String`(#e7e8ea) containing each customer's name and new balance using the `getName()`(#e7e8ea) and `getBalance()`(#e7e8ea) methods.\r\n\r\n##In MyConsole.java:\r\n\r\n2. Create an `BankAccount`(#e7e8ea) array containing the `BankAccount`(#e7e8ea) objects.\r\n\r\n3. Instantiate a `Bank`(#e7e8ea) object with the `BankAccount`(#e7e8ea) array then call the `getAccountsInfo()`(#e7e8ea) method and print the result.",
    "mini_rubric": "false",
    "hide_share_and_remix": "false",
    "submittable": "false",
    "csa_view_mode": "console",
    "display_name": "Bank Account",
    "bubble_choice_description": "Create a BankAccount array and get the balances for each bank account.",
    "thumbnail_url": "https://images.code.org/fc160e1197069043a285a4e9f26a8e9b-image-1648730510117.png",
    "encrypted_exemplar_sources": "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\ntAlfvuA=\n",
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "dwPrOAhm2XhnJedESZmaHT3SerbCDxT0Fx165V7plMh56lr79GRF6t1kZZwE\nwRxWikpmPD6z9/FPBGo1+sd7sNkRQmoarvuODsnnBUAAvPOAmErYT/YgGjo1\nk811KTVW79m6GE2tO5wVEL7Y7vEKdJphVDlJmCMkpiOvIzYdqi+RVZMzYFU/\n8IitZSjgeFo7BndhFR9fCNF7TmVufi1b51wjbZdirckjP44AR3M4Q+tsXWiw\nBtkOVAS/N8MVRHbQgUZEtphT42OcQ8AZJhBj2+JZey1YOYFHx1+oIXeNbpGb\nouS/QlSXOTQJcjJjJs7xhIYOY2fnHgku5K765H16DOxi0EKO24FpLROqGslg\nYBBLHwUR16IQajucMcQbYlh/Ybjj/dktwLw88D7ASz8h4gDI5SvJUZPirKES\nrPCvVfpWEoWPFCK7kKy2InyqwmGWeJBVNeLEyTSC7vftRV+SEXM1BWuGp6iI\n6RTQ4W8MIUvWaVpDmGJ/86RtLfJ1ZRyspsQjjCaA9pgp+5IT7AiuZjgCPRW4\n20cpwfZ+LP8ktHwDOcI0zf9kHJ1Qy/iUA9dJ/QYjFfMG+ABuWQt1DEi5XUSD\n9bZHNxqS3GCaR61XSep2nR6ldjE9BJvH7Seljj0MH4bMo941qsk4yXHARULw\nF/p5/4DwVC9eKy6FvNUXWqh2F7tssqKgTB7kfH64wZ5cvuEiOKhwlymqdNSx\nD2hn/yDxbz0JsEJU3Gi6qFoadPMLGSB/6wSlv5vtXf8g8x3oJ87jezdNfmnF\nFUe7fTfxqEgUDWK6n5a6voom22TR2etVfictVNI5sHZdJ24ib9Su8PXVURyU\ntKu1UZ0vSC4zOp5lWwSfaMzeNoMiSwZOGdpoUVGU/5XE9tVjtymXrtAByTrG\n0KVKg/aYsj1gfXt4gyOXwApVO5mJ4S1E26zfB6GdTtTkEjJ/gizpsopKK4H8\nSOvDmz9UesYMmgIHk6KGjgusruYfIoZpWNdX6OYIBtm9pv1w5WvCiznk2y1O\ne+X69l/m4aZIW0cxWWtOdeyLnyP3GThU3nc5ek4M+q7fcJ6q8v/BHSYeF1Rx\ntyOShf2wwCN98auHqaR/fMV+tvzyTWMrZ2g8L2Z0b13iWf6pkaL6UFKWWnjD\nIpRAMi2fSbQ/UHf2wHRQJM/VtAgyJbkhXBVww3bUe7Z79TvI6gzYHThQoXh1\n8ySFU9kDMbzSKj64utEy8FqI2vdWWYcMRyX1sl8EjQ4F5kYkVG6T7xDFmksZ\nfGDqtoy1jc9tmsWruukO+WYfZxboIdA63O2gPdDgvvM/JD1nXe4VOe6oZBMd\nFTiBTqo+nyUxb/uPXcmu7+zo7qHPP9ed286s5jZ1VohwxuySKsBtQ8Z4sXRT\nPXyYnc+otIJ1c6pugJP2gUHeEC7vyJZCVs4c8C0MjHLtb2/d1blGsiCYZYVA\nd3jONOoWRPnFVUTpRoDk3PKtW3x0JTZ3vOPK2zGz6j8+ORKA1ov9Y/3WzfHy\nclpUSRrRtgAbGgHGsYzg/dnipx0gyCDry6h9VivipXjsFStAeNO/Z0fJDmXe\nQHEG3ItSk0yrGyBK9mFeqk2PJYiIww2Z18g1W40gO1nlTeub+oBLct6FaqSv\nB6seJgtLQ/fytd44YlavLBx2a0iaGWcV43c02BUySrSFakxjq8QRgVdGJZRn\nI/EFNgDvq3mWoVHUlRfO9+dvAVnbNWHw6Ve3PstOU04N010r941ti1hG0p6E\nsRfZkcihV6RWfpLIvYrdfh/GkiQO4a/+WxhMLGoqtCNfpR+2rU/KuDiOOARv\nvM7bFSbPMvMV0sCBoi1UgxQkfwbKAeS9y722QSd38RdaUf2j7PBtdRWlwNtr\nqtPyWy4AEFub4zplvhzGwQ1jLUqtjO8nE4xRAi7+v4XjL/4jBiFhDkYV/8Ut\nQptKwmUshBBN+753fNlJB0uUciZtPE91h1/RUtATVFTEWmHUXkYoNz9KQR3z\nC7DKoIy3PQxPSZJb19anoAUNEXVMFJSA8A3xyKVsyeicO6GcXl0jy9/4pWO/\n+eatNckEv/8wCgCAFep+jUNXT4jSbFEuKTvcmiE0RITxphE5L/fnCj6/ac+l\n9hCrmHhD28Mf7sMG2phucMnbY2DbnvWgNhtEBzdZL2NEmU0olo6NWGeZsIm1\nNEEuVjDEZGQa3m6qFc4Q3X7GDnkmZKW63/ALPP/ofFv7FaN0VYVlg17I2QIY\n4lE84Z2b+UcskVw3CN1rkD9WlZn5S1f2gM2xldld8AJX5LObP5pnMNOWHMMv\nwen32lP6wkthM2yLRvmj9p1efAHqBYGXg8/S1ovUsW9cSHndXqDNcYYGyaHH\nm5WNkBvg1KZEUXiR9ry+9Ik1BwvIK9nZZcIFIEpcJCaT0GDHJ6IYROyoNe68\nf2pDPKL+OUuo5fMRQ+qmd4XVEx4FZNkFz3AplLFzFJqEw5mvqbQChiuIaz8V\nJ4slzR7hMtXnnRu5sambhVESshFW7cIhiibjdDODoL7ekvdewkhtLuTUwjuK\nPG5EBON/yLXyivwYkyah/XP7nREZX84VltYxaNXBGPXVNSjqyh9v3SBuQziz\ncJ7Jr9lfcnMbGnl5oreQKdt7djibysis/QpeeEX+pEteYkXTJplPGDlEzyBt\nStRlFVJZoqM/lVWNfNLypndUlsh4nQTiyjhocvRBn7BKIuY7a9ZO4y2Z9uHT\nRHfsE36chDShtjX/GcwxT99nBNc2NOHnw/8bAaXXSnB/5iUTQwyL+svGjeT5\ndIb0co9nDmGtBA==\n",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    BankAccount first = new BankAccount(\"Shakila\", 500);\n    BasicAccount second = new BasicAccount(\"Ali\", 200);\n    BankAccount third = new BankAccount(\"Valentina\", 100);\n    BasicAccount fourth = new BasicAccount(\"Maria\", 800);\n\n    // TO DO #2: Create a BankAccount array containing the BankAccount objects.\n\n    \n    // TO DO #3: Instantiate a Bank account with the BankAccount array\n    // then call the getAccountsInfo() method and print the result.\n    \n    \n  }\n}",
        "isVisible": true
      },
      "BankAccount.java": {
        "text": "/*\n * Represents a bank account\n */\npublic class BankAccount {\n\n  private String customerName;  // The name of the account holder\n  private double balance;       // The starting balance of the account\n\n  /*\n   * Constructor to create a BankAccount object\n   * with a specified name and starting balance\n   */\n  public BankAccount(String customerName, double balance) {\n    this.customerName = customerName;\n    this.balance = balance;\n  }\n\n  /*\n   * Adds a given amount to the balance\n   */\n  public void deposit(double amount) {\n    balance += amount;\n  }\n\n  /*\n   * Subtracts a given amount from the balance\n   */\n  public void withdraw(double amount) {\n    balance -= amount;\n  }\n\n  /*\n   * Gets the customer's name\n   */\n  public String getName() {\n    return customerName;\n  }\n\n  /*\n   * Gets the current balance\n   */\n  public double getBalance() {\n    return balance;\n  }\n  \n}",
        "isVisible": true
      },
      "BasicAccount.java": {
        "text": "/*\n * Represents a basic bank account\n */\npublic class BasicAccount extends BankAccount {\n\n  /*\n   * Constructor to create a BasicAccount object\n   * with a specified name and starting balance\n   */\n  public BasicAccount(String customerName, double balance) {\n    super(customerName, balance);  // Calls the BankAccount constructor\n  }\n\n  /*\n   * Subtracts a given amount from the balance and\n   * charges a fee if the withdrawal overdraws the account\n   */\n  public void withdraw(double amount) {\n    super.withdraw(amount);\n\n    if (getBalance() < 0) {\n      super.withdraw(30);\n    }\n  }\n  \n}",
        "isVisible": true
      },
      "Bank.java": {
        "text": "/*\n * Represents a bank\n */\npublic class Bank {\n\n  private BankAccount[] accounts;\n\n  /*\n   * Creates a Bank with an array of bank accounts\n   */\n  public Bank(BankAccount[] accounts) {\n    this.accounts = accounts;\n  }\n\n  /*\n   * Returns the array of bank accounts\n   */\n  public BankAccount[] getAccounts() {\n    return accounts;\n  }\n\n  /*\n   * Returns a String containing information about each bank account\n   */\n  public String getAccountsInfo() {\n    String result = \"\";\n    \n    // TO DO #1: Traverse the BankAccount array and withdraw 300 from each account\n    // then concatenate the customer's name and balance for each account to the result.\n\n\n    return result;\n  }\n  \n}",
        "isVisible": true
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:25:29.514+00:00\",\"changed\":[\"cloned from \\\"CSA U3L7-L4b_2022\\\"\"],\"cloned_from\":\"CSA U3L7-L4b_2022\"},{\"changed_at\":\"2022-09-08 19:44:21 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-08 19:46:57 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-08 19:48:56 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-08 19:49:05 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-08 20:05:41 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-08 20:05:45 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
