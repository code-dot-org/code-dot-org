<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T15:24:59.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The <a href=\"https://www.kaggle.com/datasets/devrimtuner/most-crowded-countries-in-the-world-top-100\" target=\"_blank\">**Most Crowded Countries in the World dataset**</a> includes the population of the top 100 countries. The population of each country is stored in a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> values called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">populations</code>.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Countries.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcAveragePopulation()</code> method to calculate and return the average population using an enhanced <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loop.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">DataRunner.java</code>,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Countries</code> object with the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"populations.txt\"</code> file containing the population data, and the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"names.txt\"</code> file containing the associated countries.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calcAveragePopulation()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with traversing a 1D array using an enhanced <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loop.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ntotalPopulation = 0\r\nfor each value in populations\r\n  totalPopulation += value\r\nreturn totalPopulation / populations.length\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ What is the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \r\n    <p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class is a hidden support class that has methods for reading data from a text file into a 1D array. It has the following methods:</p>\r\n\t\t<ul>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toStringArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> objects containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toIntArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> values containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toDoubleArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> values containng the data</li>\r\n\t\t</ul>\r\n    \t<p>For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nString[] names = FileReader.toStringArray(\"names.txt\");\r\n \r\nint[] numbers = FileReader.toIntArray(\"numbers.txt\");\r\n \r\ndouble[] prices = FileReader.toDoubleArray(\"prices.txt\");</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/enhanced-for-loops"
    ],
    "display_name": "Populations",
    "bubble_choice_description": "Find the average population of the top 100 most crowded countries in the world.",
    "thumbnail_url": "https://images.code.org/8dd87ed2b22e1b679e3d9151bac0ce28-world.png",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "/oeGmf2478UD/8rdvg8+fqm6OnFWcJ3jJ2X/femFyBiScMoQ3wS5Jz3ka7r0\nXKlyTg7G3S5zTRCQpNYatPZ8LKwY3kiUpOJGdJs4ctr9ZwcQw7lMQS4ldi6Z\nzXWauVjQOfxdfd8pMKihIblQJ8ecYSGMoVVL4waL9zlOZDLxGqXIrPnjmV92\nAT4yy/MKod4RtJ7QT94viuD919QS8dI012Naih0Rbc2MALOIGCWFy5eN9kfA\n/A8IofMqIpqYhgsDsa3S+eyjl/GcgMxjkZxiqcWZFGpRelLL4Hrpl2K+SbDo\n4h+Hqx/lcogcQBDkz0CCGuvPZXv6fncI9TBiGAHwXTv2FVDg0PAHGvp7b1F5\n57Vb08mn7qcZhPeDVvMNL23maNK5Qfo4GSdSIB76OnPDHmqKinwMG+411uhS\ntChu7UuImrBSWqmOm0gGYjEOF/pT0+aPn4E0kHrYP7QXzWpcV1OP6w2pqFbK\nNvfnuOzKm2mTyzYY8XhkEMhw+6j0QoGJPMb81ZwTkyw+1QFoVB7ra3S0A8pw\n7eMvhRrxAoblcSZ1rVPnv9z9Bu7gBBJN1ryp0uB2hReMPCaiKRV1MXXtXk9i\nX4wewBx+IXdFITtMWNLqp2ULPa1zh6jOBUcHyvoH8zAXX0YXNDgWcH4zgRB0\n786KustM5Wh2XdEYAIyIQscQjIuA1hs+iYy8SW4h+L8eIUuo0OjN1rwfP5VO\nwrYoP9wg7fJlyrUqU8gGx6GgaggoBjTCPuV/sNP8WOyv9BjZr13S1Ym5QIhM\nGOa57mI8ez+VXoiMZIGjNfAxEqM7muvyA88jk+gSb2xJIGu7y5h8FI61y3B0\n5c6fXPx4E1N4qEJLhlNkzi6rM6mi/mRp66pfOZMHXwQnf2NgZNxZGewST48D\nIOoeeg0pD9GC7pTq82F/AAFSVBo02/4Uuo2DvrGb0wNu1cd9cYEMnfMv1FeU\nqJk9ygIzP0n0J3OETdHBCPp3iyFxhgo5vj+Cckf/k6yinW9gAs54Ai+XAfFp\nXflFcgzJr2KGpBzL3VzxeEg6AT4tRq0DJ2rYvRar//mV31uX1SmZCIr02huk\nZ4Zj+Km6A31wyQybbHom+q393SIuG0Au+Ch9av0NS0UOXX2DUHDdVEx2S0Rc\nfKWpqAJ9Le2ntcsQnHmJB+iw0hw7g3MRxWggQKN9no1jmvhUWwjGmhYJ9dDF\nL6+SA/Eq+GOtywXlHCjGwN7F0l3Dr5lEVR9fMlm/7jfozKTyItiAcUjspjpY\n12uNe4pBgv0Xxc6zObgIFdjmDUQPGkQ2T6M/VyWdRdWd44l+zWcF3aIl6pIE\nnqz+a3ldfGPHUuCW9GBABYt+nZYNrQCT5hCqq2YzA2ddnrLQ2giEYHMeO4cQ\nGFzgbwvN89WnQdjsPn8hSRt949Oc+uIqNT7v3Epd/bTF4KYzw0e/c+fbJqpt\nrnsTS7hGqDaViYl6Ye0oOEBHqVT6AKSFXto05kABbqnwJX0P4hghyfV5+8aA\nrd8+ponTtYi2eFyJi49TYrlHZI8dcLLj3zykb4iEIfK/+9MMx3/u1sQvMzg8\nKkJJhy9epbD8JpDWTUcO9RWN/NeJVx1WXQEB0u89y5hNnCuB3z9k+AYYhIM8\nExj26hj53lZ7qaCp07Ofi2a7GAUBo0+JwXB4qtSob3fSIkcqqup1F6DI2NvO\nw0r1onXEVI86M23DLj9jl9taPnO3zeZREvBsrteBtkFrsKgZSiWq/LBTShez\ndIbFNmNsLPOQmUgfNWaERYmxnGKolSpFgl6v64DY2fz65tL+9BKVa4x50dSR\nLLaER3BbW47oHsE/eVy0k+dz36st5OdyNbpcynsjNdf4CIzTwGoQgLy7gipw\nvrdG+IhcAWMxRhmjyDnx+VjbrwditNGqnSW6eianw6/X4+lVolZcT7sPkI8v\nkmxqpu0LT7EVyzOL/sYl+X+ebDKNrbCpyAQGdscGV3GBgfpEpYiBajkxL6aI\ngWm9E44WKo8g2EadrZvStv1TT58crgjwDzFkOTaT6hzOjQ2UlxkgjMnf/kPv\nryfHTGw3DqafoslqAcLG7v4WoJjcSjD8ojKCKVA0Td7hxstiM40tIhY+1OBV\n/r0SqV3tFeWKGDlhGjXStaOqWDHizesbaKb3OZjHow4/prk8KfCSbOuQPV4N\nH9RGgIXKFP9OdikZDB9lHMmxCOZlQun4zKcTziv2SHMK9tBMclNPG0lB9v4m\nv+hV2izF9UfRJaX2pX6P8xLcODIDKiJl+zvDusHduExXQozVghfdEJ74G4a8\n4K/ocdHNiDqha4Jhy6Sb8ggb8Ed3OtqrZr5a3Ed7sBdBTwp/2+3N0lhDWnRH\naFrLTSLvHjgDOS2FiKXoITREN4i6A/+ifQm+bPL1RHgimggSe6yOEr77Agbj\n5LCNokT+SFKlxXjHEl79/Ptoc/69/aYJeKOMex1wZA14+Bha0VmEtn7QEAl/\nVYczNM/GbjrmdgJWc1g729IuXY2qHgl/cQ+idXTDQzqLouZDpkSLANnfKTjb\nO2E5pNoojOr4Y5DeynaorcruFbm+0BigcxNSouwKMcenKkzIIxQVKlyUAS+W\nqGQPvuAciOLPO3qwnnJDLpive/iCBPYQ9UuPl/f/TuJTifoIuBQOHQrGGxt8\nbZJplkv3PSTg6mdmFxMlSBrUeqjVrubBasFhUC39cenVLhjcU2JXeshot6Nj\nfKJvrA85h4+RyNsAd4eakVOdhtgKx1VCBBidpwWDwQf5RK3VbUWOyrqLUCnr\nA1KrbGbWctH2xtkMQQs8VwJ9R92LyYXjBVzl+GnmokTBlV8yRILbbci36gTA\n1UmFJb7dN1n1ReKJtQB2RzVLfYaiFrQbQr6UPKBScY9AyjGmZJTyJGaPmabJ\n5TytWRJc4uXijNA4/8Ejgy/aNtRBFKV8ZJxoJ4A1pyU1tnUzJF+Ke2qC2D9X\njnKS1S2/iTac6BAtEcSNtRKpiYOG3ayzjBpyZTk5+CIO0PSlfM1Fjo/czinb\n3h85lVlr6X5gqfJ6kb0IBUlnUiiBhqGN7WARfLoZGL7QRLyyGl9EYesUNuoE\nvSp/pkCOHoYJ/zk+G5EB0Y6OsS7OYjOUOCQCFdwSBujJFYnH5vkwBJepwTbt\nViaOtv9zYXwQi34rnf+lbrJjQ+72F+bLQvSUgOnmcefDIHHZWjXt64PLzxXN\nVsTffx5D4Kx/3nFT5FChxrqgGCUh40BFF86U6JfA5sMFkigQLWuD7Spm6gZe\nDOrslPs6Pnn1gDvGp3JdOJqbH/+KDw6eD8Y10zQzWhSoHQ9aqcbIp71E7Ta0\nAcwdVt7X6rpxTFrms95I+WqLuMxEOsgXaHREmQWJpLYHtgZlXlto4RtoJxhy\nNN5/6c1D/3w1todeYotVOop/L+g58sCdK6j09myHHFGG9sAxibiFgWSCQ9yx\nbSB0tX6IG6mZLGCfmlkuvqShCA5WyQql4V0bu+ZI9jcDYAupqs5ZtW7cOnBN\nw4MJHksRUpy1wQNxgC/givMB84EMWtOJnwKZPHd1Nc/CvyhEIxhgFxzBnycA\nOwKZm6Ok/ackkaGjY96vASjLPdhW3BpFRwY3TzHw5U9FrJ/QvT5ifnEfrvvW\nh5mdEpBYsUGP0qNawf26oGMGU+n9omwG0a5ZaWV32tJg+lOLlQz+azchV4ys\nYGHmPdekLdzEnVmjX4wPd7HubA5Vv6BsEcFRA84LrtwJ2vj0fa6BsyCdtrTd\n8LXJsn4cAR+lauWku6dC+R5NZJ6lZtYmy1G43UgecBqZ/8I8kJPEVcYHAJ1W\nszjDQOZu6Lg6ALERObOAuQ/KaLdVlgNO/NoqSZpSQZWhmsOJVHXWfCvoh8Pe\ndKui66O+1+z5+v80X7fTte62jCib1YwHkk0mcX0xqNlyFQUmnmZ7XINtNxb/\n1a8BgppFqmJGhxT9+wMtCxOpCucNaGYHZ4JwpmMCoLpttjcgF5dEmPksCYRD\nZLrCONhbzMICLseSJ0D61YAFWmViGKpsqbBjPDA+MK86RH6CqtqoLqpJ6CKs\nckJYad9VH/WP+GTe8UoBboJp6Z3dTci8ImgLOBcLqF+Ad8V/E/x6LG9i9JWd\n7656+dCdeqt17pp8FRWcHzsYokxpBRcyIjYlJJOxJVo+s1exHRd7oEzLoMup\nf3ieyFIgNd1if7y8atVT0bKeA+Su7PgslZfxCto2dv/NZFLUNMy+GdAh9R4h\nnuERvhOgYFp6aEiNIMlbeoxl3lF7PUjAvIiuuSU7IYiWF5As4w9Dq5KByqwC\n8yJ/0Qpys7TqgrTsCUL82geh9wVEK0ANzZ9QL4/49BQSY0J8umsu1zmqAMA8\nrelkIBtjOBED5t4lurd13WxJSSnE9eN3Ie9UnN1LqVlyyzL2OJaunru+4vru\nT7N8O/xS/sVROc7hQ9wjjLWNsmJaCO/m0tZ2YBsLxKBCmTOs8vIFYwwZnLIi\ndK5PRvnf9Q/ElJSLDpDJQR+RZoxceSViLGub8BCc3SOruwQ4pOKQR11nNdMh\nvwEpZsgN2bg7gLMSVffYwSATS5CZONk40tnlrbdMGlT+fhTg4lSt0Od7arIg\nLjUp4cvGEI2748MvjF9ZFN6+dbR08xFF27B+iLKerNnMnHtcCr1I9NWFs+/F\nfE3G3OV+UrDitkt2FMFxOnt4c7Y4nWPj8SQOg8iwdgKCd9Kii8wR7ZfEEKYO\nOqdUBJQpI3IJHjzORGnBLbsYR8xFRb06utKCvY7eD3XYGXPJycdu0nWcjgtQ\ngxG6a92k1eRK7liGG+Xos/ItnyHiiNmm5l/16Z6C6mJhwtHNqzuafGDtc997\nziE7sJJuB+0KH+iL42Pd4NW4be/W+4q0zIVPoPnSxns+swz+/gJjwAgvNRvN\nzbdlz6Dsu88idy/sOvY30ifP+31At+h5fuZCR3f9h6i+LxNrQ06nst9sbD4f\nugqNSUA5Fq+FkEF+hb4CJUeRTLYgQxbAY6tmPRm1SdViLeRzLnnPtA3rStsc\n84q/3EfnJO/gfU6thEz52wBrP9NzJKFFCxk25R+Aslwrgb39JRBig3Z53ulP\np2gebSHw3t1VZRJIe9OFFYoknUvSD6b4GRAvT1Y6kz3Ryst+tPHg1wh51gX7\nc4mWy/fAgDFmQs76oV0TCk8kERADqYB1154FSdRA/zWaAAt5vCZotQhD9Y3S\nNyKc3FZXLTAG+U4vixCAYkIsK+foLpn2uvnzKCaKxw7iFxV2YxdXK1Sbs5jj\nmgSsfb+DlpAkypVP2G8Pi6grfFqeW6pfd/mceLdU4FtEoiStBHiVizfcZavO\nYOODC5mUScrlnBS9WjRVuQ1j0E8xSO83OD00Ar8dA6RthgGRtLJeR0Gx0BPs\nPS9AC6XUeN3L1v2IfqnZtZMe5QuY0vT+goYWjcwf1TGjbOgWnr0o433mEjxX\nCRkRyJBRmEC9HY65lY9g4WOEg+2EBzinQ75bPtpbWBMyAC1gk8sqVlywjMVZ\n2SiJbZkj7XYZ0tS87sjKbc9+I5vYXpr6gjeu1ggPotK4zF0s59N72H66N3ya\nL8h0j545qRuOueVFo6x3wfM8e4Mt3dv1cJUUlQ6kBbtOnH+gUunl5aD1pBZU\nwayLC42jR6ZXW2w+xculJ0SidYOhhPmjpHq0oRrXDoodeXHjx0hHCBc5SFne\nLNOz3r8FTRl9pa8SsUITUsuMhadn59DC57qOhNjQyWSZ6TYTUtlvO7FbPP5q\ny0bGhn9wt25gEtTb2fkxBaj09SRWVSRyt0tVJ27hu1OKUlemi6xhOuvq00E3\nvkZTjhhttAZ6V7r/RP3l0O8Kng+m6K3MEyDocAvv+h0xNdAHytRwxD6NrJZO\n97D/vbDVUdRHzqVkZ6wGzu2Nx1keR43oi5LM/I4A34vY9v6A14uwRbvJ/SWI\nwlCuiUDKvh5MapXStNmpgmst67ZMirCWrJFQash7NA/tcPwWSaMbuz/W0YTM\nvl5jpjHjueNXsmqzEsh30tnS8s8RMc/be2y6IjLFhluTyAl9ZLydcxDzi675\nAHmbpbZ0Bf4tRmP2xT1FCsOdRb9498PtYNxN77wij5K51sg7jbQ35GQPeI/h\njQJmwDLKRSHvQraQBSCy\n",
    "start_sources": {
      "DataRunner.java": {
        "text": "public class DataRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Countries object with the \"names.txt\" and \"populations.txt\"\n     * files, then call the calcAveragePopulation() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Countries.java": {
        "text": "/*\n * Manages data about populations in countries\n */\npublic class Countries {\n\n  private String[] countries;     // The 1D array of country names\n  private int[] populations;      // The 1D array of the population of each country\n\n  /*\n   * Reads the data from countriesFile and popFile to\n   * initialize countries and populations\n   */\n  public Countries(String countriesFile, String popFile) {\n    countries = FileReader.toStringArray(countriesFile);\n    populations = FileReader.toIntArray(popFile);\n  }\n\n  /*\n   * Calculates and returns the average population of each country\n   */\n  public int calcAveragePopulation() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Use an enhanced for loop to calculate the average of the values\n     * stored in the 1D array populations.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    return -1;\n  }\n\n  /*\n   * Returns a String containing the name of each country and its population\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (int index = 0; index < countries.length; index++) {\n      result += countries[index] + \" population: \" + populations[index] + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "names.txt": {
        "text": "China\nIndia\nUnited States\nIndonesia\nPakistan\nNigeria\nBrazil\nBangladesh\nRussia\nMexico\nJapan\nPhilippines\nEthiopia\nEgypt\nDR Congo\nVietnam\nIran\nTurkey\nGermany\nFrance\nUnited Kingdom\nThailand\nTanzania\nSouth Africa\nItaly",
        "isVisible": true,
        "tabOrder": 2
      },
      "populations.txt": {
        "text": "1412600000\n1375586000\n334200979\n275773800\n235825000\n218541000\n215565116\n165158616\n145100000\n128533664\n125104000\n112869745\n105163988\n104243583\n99010000\n98506193\n86053807\n84680273\n84270625\n67975000\n67026292\n66875330\n61741120\n60604992\n58853482",
        "isVisible": true,
        "tabOrder": 3
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 4
      }
    },
    "video_key": "csa_enhanced_for_loops",
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T15:24:59.874+00:00\",\"changed\":[\"cloned from \\\"CSA U3L7-L7b_2025\\\"\"],\"cloned_from\":\"CSA U3L7-L7b_2025\"}]"
}]]></config>
</Javalab>
