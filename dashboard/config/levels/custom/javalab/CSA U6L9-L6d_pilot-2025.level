<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T21:33:53.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A clothing retailer wants to suggest related products to customers browsing their website. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Retailer</code> class has an instance variable called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">products</code>, which is an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Product</code> objects that are sold by the retailer. It has a method <code style=\"background-color: #ececec; color: black; font-weight: bold;\">suggestProducts()</code>, which returns an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of products with similar descriptions. It uses the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">hasSameKeywords()</code> method to determine if a product description has at least six words that are the same as the description of the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">product</code>.\r\n\r\nâœ… **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Retailer</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">hasSameKeywords()</code> method to return <code style=\"background-color: #ececec; color: black; font-weight: bold;\">true</code> if the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">secondDescription</code> has at least six words that are the same as words in the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">firstDescription</code>.\r\n\r\n* Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getWordsFromDescription()</code> method to get an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> containing the words in each description.\r\n\r\nâœ… **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">RetailerRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">suggestProducts()</code> method and print the result using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">resultsToString()</code> method in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Retailer</code> class.\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">ðŸ”¦ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nfirstWords = getWordsFromDescription(firstDescription)\r\nsecondWords = getWordsFromDescription(secondDescription)\r\nset numSameWords to 0\r\n&nbsp;\r\nloop through first words\r\n  get the current first word\r\n&nbsp;\r\n  loop through second words\r\n    get the current second word\r\n&nbsp;\r\n    if first word equals second word\r\n      numSameWords++\r\n&nbsp;\r\n      if numSameWords >= 6\r\n        return true\r\n&nbsp;\r\nreturn false\r\n</pre>\r\n    </div>\r\n</details>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Related Products",
    "bubble_choice_description": "A clothing retailer wants to suggest related products to customers browsing their website.",
    "thumbnail_url": "https://images.code.org/64a51635d7b733c76bfe94a298cdce70-clothes-rack.png",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "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\nZcZTk4kW0Ane4dalAMY=\n",
    "start_sources": {
      "RetailRunner.java": {
        "text": "import java.util.ArrayList;\n\npublic class RetailRunner {\n  public static void main(String[] args) {\n\n    // Creates an ArrayList of products\n    ArrayList<Product> products = Product.createProducts(\"products.txt\");\n\n    // Creates a Retailer object\n    Retailer retailer = new Retailer(products);\n\n    // Creates a new Product object to find\n    Product camera = new Product(\"This high-quality camera is stylish and perfect for anyone on the go.\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Call the suggestProducts() method and print the results using the\n     * resultsToString() method in the Retailer class.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    \n\n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Retailer.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a clothing retailer\n */\npublic class Retailer {\n\n  private ArrayList<Product> products;    // The products sold by the retailer\n\n  /*\n   * Initializes products to the specified list of products\n   */\n  public Retailer(ArrayList<Product> products) {\n    this.products = products;\n  }\n\n  /*\n   * Returns the list of products\n   */\n  public ArrayList<Product> getProducts() {\n    return products;\n  }\n\n  /*\n   * Returns an ArrayList of products with similar descriptions\n   */\n  public ArrayList<Product> suggestProducts(Product product) {\n    ArrayList<Product> suggestedProducts = new ArrayList<Product>();\n\n    for (Product item : products) {\n      if (hasSameKeywords(product.getDescription(), item.getDescription()) && !item.equals(product)) {\n        suggestedProducts.add(item);\n      }\n    }\n\n    return suggestedProducts;\n  }\n\n  /*\n   * Returns true if there are at least six words in firstDescription\n   * that are also in secondDescription, otherwise returns false\n   */\n  public boolean hasSameKeywords(String firstDescription, String secondDescription) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Use the getWordsFromDescription() method to get the list of words for\n     * each description. Traverse the list of words and count the number of times\n     * words in firstDescription appear in secondDescription. If there are greater\n     * than or equal to 6 words that are the same, return true.\n     * -----------------------------------------------------------------------------\n     */\n    \n\n    \n\n    return false;\n  }\n\n  /*\n   * Returns an ArrayList containing each word in description\n   */\n  public ArrayList<String> getWordsFromDescription(String description) {\n    ArrayList<String> words = new ArrayList<String>();\n    int space = description.indexOf(\" \");\n\n    while (space != -1) {\n      String currentWord = description.substring(0, space);\n      words.add(currentWord);\n      description = description.substring(space + 1);\n      space = description.indexOf(\" \");\n    }\n\n    words.add(description);\n    return words;\n  }\n\n  /*\n   * Returns a String containing each product in results\n   */\n  public String resultsToString(ArrayList<Product> results) {\n    String result = \"\";\n\n    for (int index = 0; index < results.size(); index++) {\n      result += results.get(index) + \"\\n\";\n    }\n\n    return result;\n  }\n\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Product.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a product sold by a retailer\n */\nclass Product {\n  private String description;    // The description of the product\n\n  /*\n   * Sets description to the specified description\n   */\n  public Product(String description) {\n    this.description = description;\n  }\n\n  /*\n   * Returns the description of the product\n   */\n  public String getDescription() {\n    return description;\n  }\n\n  /*\n   * Returns a list of products from a text file\n   */\n  public static ArrayList<Product> createProducts(String filename) {\n    ArrayList<String> data = FileReader.toStringList(filename);\n    ArrayList<Product> products = new ArrayList<Product>();\n\n    for (int index = 0; index < data.size(); index++) {\n      String currentData = data.get(index);\n      products.add(new Product(currentData));\n    }\n\n    return products;\n  }\n\n  /*\n   * Returns a String containing the product description\n   */\n  public String toString() {\n    return description;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static ArrayList<String> toStringList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    return temp;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Integer> toIntList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Integer> data = new ArrayList<Integer>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Integer.parseInt(currentValue));\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  public static ArrayList<Double> toDoubleList(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    ArrayList<Double> data = new ArrayList<Double>();\n\n    for (int index = 0; index < temp.size(); index++) {\n      String currentValue = temp.get(index);\n      data.add(Double.parseDouble(currentValue));\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      },
      "products.txt": {
        "text": "The sleek and modern design of this laptop is perfect for students and professionals on the go.\nThis stylish dress is perfect for any special occasion but want to stay comfortable.\nThese noise-cancelling headphones are perfect for anyone who needs to block out distractions and focus on their work or music.\nThis rugged backpack is perfect for outdoor adventures and students on the go.\nThese stylish sneakers are perfect for anyone who wants to stay comfortable and that are always on the go.",
        "isVisible": true,
        "tabOrder": 4
      }
    },
    "name_suffix": "_pilot-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T21:33:53.560+00:00\",\"changed\":[\"cloned from \\\"CSA U6L9-L6d_2025\\\"\"],\"cloned_from\":\"CSA U6L9-L6d_2025\"}]"
}]]></config>
</Javalab>
