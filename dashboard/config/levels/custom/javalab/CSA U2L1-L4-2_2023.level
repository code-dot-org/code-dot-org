<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-11-11T18:40:08.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "project_template_level_name": "CSA U2L1-Attributes PBT_2023",
    "long_instructions": "##Investigate and Modify\r\n\r\nExperiment with the program by making the following modifications, then run the program to observe the results.\r\n\r\n✅ **TO DO #1:** The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Movie</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TVShow</code> classes are types of content that can be found on a streaming app. Modify these classes to be subclasses of the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Content</code> class.\r\n\r\n✅ **TO DO #2:** Since subclasses share the attributes and behaviors of the superclass, remove the redundant instance variables from the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Movie</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TVShow</code> classes. Run the program to observe the results.",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "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\n",
    "start_sources": {
      "ContentRunner.java": {
        "text": "public class ContentRunner {\n  public static void main(String[] args) {\n\n    Content canvas = new Content();\n    Movie findingNemo = new Movie();\n    TVShow strangerThings = new TVShow();\n\n    System.out.println(\"Content Year: \" + canvas.year);\n    System.out.println(\"Movie Title: \" + findingNemo.title);\n    System.out.println(\"TV Show Episodes: \" + strangerThings.numEpisodes);\n\n    /* ---- 🔎 ADD YOUR CODE BELOW THIS LINE ---- */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Content.java": {
        "text": "/*\n * Represents content on a streaming app\n */\npublic class Content {\n\n  private String title;     // The title of the content\n  private int year;         // The year the content was released\n\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Movie.java": {
        "text": "/*\n * Represents a movie on a streaming app\n */\npublic class Movie {\n\n  private String title;     // The title of the movie\n  private int year;         // The year the movie was released\n  private int runningTime;  // The length of the movie in minutes\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "TVShow.java": {
        "text": "/*\n * Represents a TV show on a streaming app\n */\npublic class TVShow {\n\n  private String title;     // The title of the TV show\n  private int year;         // The year the TV show was released\n  private int numEpisodes;  // The number of episodes\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    ArrayList<String> fieldsList = fieldsToList(Arrays.toString(classFields));\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    fieldsAsText = fieldsAsText.substring(1, fieldsAsText.length() - 1);\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean\", \"int\", \"double\", \"String\"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result;\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      }
    }
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-11-11T18:40:08.379+00:00\",\"changed\":[\"cloned from \\\"CSA U2L1-L4_2023\\\"\"],\"cloned_from\":\"CSA U2L1-L4_2023\"},{\"changed_at\":\"2022-11-11 18:42:38 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-15 19:42:01 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-14 15:03:37 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-09 13:50:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-09 13:51:14 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-09 13:52:52 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-09 13:53:12 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-09 13:53:26 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
