<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-02-26T00:33:45.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Look at this project example. What are some of its characteristics and features?\r\n\r\n**Note:** The `MastermindLogic` class is a hidden class containing code that you will be writing later in this unit!\r\n\r\n*While this is an example of a project for this unit, it is not representative of the only way you can approach or develop the project.*",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "playground",
    "starter_assets": {
      "black.png": "a62ecfe4-6aa3-4dba-af3a-1c4afa473987.png",
      "blue.png": "c16030ab-3cea-4677-bcfd-0e995dcb6eeb.png",
      "check.png": "0b5a6e99-b20f-4c74-9cea-3dc96f243a01.png",
      "gray.png": "8c8e2c9c-b663-4c48-9d93-f1e2e47a18c5.png",
      "green.png": "ec3d286b-48d4-4d3a-a081-245dd02394d4.png",
      "orange.png": "4efc0efc-bd1c-45ff-b3bc-8c62ecfcaa8f.png",
      "purple.png": "29c54237-c1c2-490d-b025-c5c0f8b45e2a.png",
      "red.png": "45abf189-113f-4d01-a64b-e709772ae771.png",
      "secret.png": "930bc0cb-5dba-4927-b4c3-2195414febe6.png",
      "title.png": "a24c1533-f16c-42b3-a82a-6c7acb4e04d8.png",
      "white.png": "24aac52b-1765-4dca-b6f8-2bee74172ce5.png",
      "yellow.png": "15a7d360-0ede-4fc7-a527-f5448cbffca5.png"
    },
    "start_sources": {
      "MyPlayground.java": {
        "text": "import java.util.ArrayList;\n\npublic class MyPlayground {\n  public static void main(String[] args) {\n\n    ArrayList<String> pegColors = new ArrayList<String>();\n    pegColors.add(\"red.png\");\n    pegColors.add(\"orange.png\");\n    pegColors.add(\"yellow.png\");\n    pegColors.add(\"green.png\");\n    pegColors.add(\"blue.png\");\n    pegColors.add(\"purple.png\");\n    \n    Mastermind myGame = new Mastermind(pegColors, \"title.png\");\n    myGame.play();\n    \n  }\n}",
        "isVisible": true
      },
      "Mastermind.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.util.ArrayList;\nimport java.io.FileNotFoundException;\n\npublic class Mastermind {\n\n  /**\n   * the board for the game\n   */\n  private static Board myBoard = Playground.board;\n\n  /**\n   * the list of filenames for the pegs\n   */\n  private ArrayList<String> pegs;\n\n  /**\n   * the array representing the secret code\n   */\n  private static SecretPeg[] answer;\n\n  /**\n   * the array representing the hints\n   */\n  private static HintPeg[] hints;\n\n  /**\n   * the title banner image\n   */\n  private ImageItem title;\n\n  /**\n   * the message displayed in the game\n   */\n  private static TextItem message;\n\n  /**\n   * displays the number of tries left\n   */\n  private static TextItem triesLeftMessage;\n\n  /**\n   * the array representing the player's guess pegs\n   */\n  private static GuessPeg[] guess;\n\n  /**\n   * the button to check the guess\n   */\n  private static CheckButton check;\n\n  /**\n   * Creates a Mastermind game with the specified files for the pegs\n   * @param pegs the array of filenames for the pegs\n   */\n  public Mastermind(ArrayList<String> pegs, String titleFile) {\n    this.pegs = pegs;\n\n    try {\n      title = new ImageItem(titleFile, 70, 10, 260, 50);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Invalid title image: \" + titleFile);\n    }\n\n    try {\n      check = new CheckButton(\"check.png\", 240, 330, 150, 50);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Invalid check button image.\");\n    }\n\n    message = new TextItem(\"Make your guess!\", 120, 160, Color.BLACK, Font.SANS, FontStyle.BOLD, 20, 0);\n    triesLeftMessage = new TextItem(\"Tries Left: \" + check.getTriesLeft(), 20, 350, Color.BLACK, Font.SANS, FontStyle.BOLD, 20, 0);\n    \n    answer = new SecretPeg[4];\n    hints = new HintPeg[4];\n    guess = new GuessPeg[4];\n\n    createPegs();\n  }\n\n  /**\n   * Starts the game\n   */\n  public void play() {\n    printRules();\n    showGame();\n\n    try {\n      myBoard.start();\n    } catch (PlaygroundException e) {\n      System.out.println(\"Error starting the game.\");\n    }\n  }\n\n  /**\n   * Prints the rules of the game to the console\n   */\n  public void printRules() {\n    System.out.println(\"Guess the code!\");\n    System.out.println(\"The code consists of four randomly-chosen colors.\");\n    System.out.println(\"There are no duplicate colors in the code.\");\n    System.out.println(\"You have \" + check.getTriesLeft() + \" tries to guess the code.\");\n    System.out.println(\"When you make your guess, hint pegs are displayed.\");\n    System.out.println(\"A white peg means that the color does not appear in the code at all.\");\n    System.out.println(\"A gray peg means that the color is in the code but in the incorrect position.\");\n    System.out.println(\"A black peg means that the color is in the correct position.\");\n    System.out.println(\"Good luck!\");\n  }\n\n  /**\n   * Creates the guess and hint arrays\n   */\n  public void createPegs() {\n    int xPos = 20;\n    \n    for (int count = 0; count < answer.length; count++) {\n      try {\n        hints[count] = new HintPeg(\"white.png\", xPos, 260, 50, 50, \"white\");\n      } catch (FileNotFoundException e) {\n        System.out.println(\"Invalid hint peg file\");\n      }\n\n      try {\n        guess[count] = new GuessPeg(pegs, xPos, 195, 50, 50);\n      } catch (FileNotFoundException e) {\n        System.out.println(\"Invalid peg file: \" + pegs.get(0));\n      }      \n      \n      xPos += 100;\n    }\n  }\n\n  /**\n   * Creates the answer and masked arrays with randomly chosen\n   * pegs to create the secret code and question mark images\n   * @return an array of question mark images to mask the secret code\n   */\n  public ImageItem[] createSecret() {\n    ImageItem[] maskedSecret = new ImageItem[4];\n    int xPos = 20;\n    \n    for (int count = 0; count < answer.length; count++) {\n      int randomChoice = (int)(Math.random() * pegs.size());\n      \n      try {       \n        String currentPeg = pegs.get(randomChoice);\n        answer[count] = new SecretPeg(currentPeg, xPos, 70, 50, 50, currentPeg.substring(0, currentPeg.indexOf(\".\"))); \n        maskedSecret[count] = new ImageItem(\"secret.png\", xPos, 70, 50, 50);\n      } catch (FileNotFoundException e) {\n        System.out.println(\"Invalid secret peg image file.\");\n      }\n      \n      pegs.remove(randomChoice);\n      xPos += 100;\n    }\n    \n    return maskedSecret;\n  }\n\n  /**\n   * Displays the starting game components\n   * (title banner and secret code)\n   */\n  public void showGame() {\n    // display the title banner image\n    myBoard.addImageItem(title);\n\n    ImageItem[] secretCode = createSecret();\n    \n    // display the secret images\n    for (int index = 0; index < secretCode.length; index++) {\n      myBoard.addImageItem(secretCode[index]);\n    }\n\n    // display the game messages\n    myBoard.addTextItem(message);\n    myBoard.addTextItem(triesLeftMessage);\n\n    // display the guess pegs\n    for (int index = 0; index < guess.length; index++) {\n      myBoard.addClickableImage(guess[index]);\n    }\n\n    // display the check button\n    myBoard.addClickableImage(check);\n  }\n\n  /**\n   * Displays the secret code\n   */\n  public static void showSecret() {\n    for (int index = 0; index < answer.length; index++) {\n      myBoard.addImageItem(answer[index]);\n    }\n  }\n\n  /**\n   * Displays the hints\n   */\n  public static void showHints() {\n    for (int index = 0; index < answer.length; index++) {\n      myBoard.addImageItem(hints[index]);\n    }\n  }\n\n  /**\n   * Updates the tries message with the current tries left\n   */\n  public static void updateTries() {\n    triesLeftMessage.setText(\"Tries Left: \" + check.getTriesLeft());\n  }\n\n  /**\n   * Gets the secret code array\n   * @return the array containing the secret code\n   */\n  public static SecretPeg[] getAnswers() {\n    return answer;\n  }\n\n  /**\n   * Gets the hints array\n   * @return the array containing the hints\n   */\n  public static HintPeg[] getHints() {\n    return hints;\n  }\n\n  /**\n   * Gets the guess array\n   * @return the array containing the guess\n   */\n  public static GuessPeg[] getGuesses() {\n    return guess;\n  }\n\n  /**\n   * Gets the check button\n   * @return the check button\n   */\n  public static CheckButton getCheckButton() {\n    return check;\n  }\n\n  /**\n   * Gets the message text\n   * @return the message text\n   */\n  public static TextItem getMessageText() {\n    return message;\n  }\n\n  /**\n   * Gets the game board\n   * @return the game board\n   */\n  public static Board getBoard() {\n    return myBoard;\n  }\n\n}",
        "isVisible": true
      },
      "SecretPeg.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class SecretPeg extends ImageItem {\n\n  /**\n   * the color of the secret peg\n   */\n  private String pegColor;\n\n  /**\n   * Creates a SecretPeg image\n   * @param filename the name of the file of the image\n   * @param x the x position of the peg\n   * @param y the y position of the peg\n   * @param width the width of the peg\n   * @param height the height of the peg\n   */\n  public SecretPeg(String filename, int x, int y, int width, int height, String pegColor) throws FileNotFoundException {\n    super(filename, x, y, width, height);\n    this.pegColor = pegColor;\n  }\n\n  /**\n   * Gets the color of the secret peg\n   */\n  public String getColor() {\n    return pegColor;\n  }\n\n  /**\n   * Sets the color of the hint peg\n   */\n  public void setColor(String color) {\n    pegColor = color;\n  }\n\n  /**\n   * Checks if two pegs are equal\n   * @return true if peg colors are the same,\n   *         otherwise false\n   */\n  public boolean equals(GuessPeg peg) {\n    if (pegColor.equals(peg.getColor())) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  \n}",
        "isVisible": true
      },
      "GuessPeg.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.util.ArrayList;\nimport java.io.FileNotFoundException;\n\npublic class GuessPeg extends ClickableImage {\n\n  /**\n   * the list of colors the peg can have\n   */\n  private ArrayList<String> colors;\n\n  /**\n   * the current color of the peg\n   */\n  private String currentColor;\n\n  /**\n   * the current index of the peg color in the list\n   */\n  private int currentIndex;\n\n  /**\n   * the image file for the peg color displayed\n   */\n  private String currentFile;\n\n  /**\n   * Creates a GuessPeg\n   * @param pegColors the list of colors the peg can have\n   * @param x the x position of the peg\n   * @param y the y position of the peg\n   * @param width the width of the peg\n   * @param height the height of the peg\n   */\n  public GuessPeg(ArrayList<String> pegColors, int x, int y, int width, int height) throws FileNotFoundException {\n    super(pegColors.get(0), x, y, width, height);\n    colors = copyColors(pegColors);\n    \n    currentIndex = 0;\n    currentFile = pegColors.get(currentIndex);\n    currentColor = currentFile.substring(0, currentFile.indexOf(\".\"));\n  }\n\n  /**\n   * Copies the colors from the pegColors list\n   * @param pegColors the list of colors to copy from\n   * @return an ArrayList containing the colors\n   */\n  public ArrayList<String> copyColors(ArrayList<String> pegColors) {\n    ArrayList<String> tempColors = new ArrayList<String>();\n    \n    for (int index = 0; index < pegColors.size(); index++) {\n      tempColors.add(pegColors.get(index));\n    }\n\n    return tempColors;\n  }\n\n  /**\n   * Changes the image file to display for the peg\n   * @param file the new image file to display\n   */\n  public void setCurrentFile(String file) {\n    currentFile = file;\n  }\n\n  /**\n   * Gets the current color of the peg\n   * @return the current color of the peg\n   */\n  public String getColor() {\n    return currentColor;\n  }\n\n  /**\n   * Changes the color of the peg\n   * @param color the new color of the peg\n   */\n  public void setColor(String color) {\n    currentColor = color;\n  }\n\n  /**\n   * Checks if two pegs are equal\n   * @return true if peg colors are the same,\n   *         otherwise false\n   */\n  public boolean equals(SecretPeg peg) {\n    if (currentColor.equals(peg.getColor())) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  /**\n   * Changes the peg color to the next color\n   * in the peg color list when clicked\n   */\n  public void onClick() {\n    if (currentIndex == colors.size() - 1) {\n      currentIndex = 0;\n    }\n    else {\n      currentIndex++;\n    }\n    \n    setCurrentFile(colors.get(currentIndex));\n\n    try {\n      setFilename(currentFile);\n    } catch (FileNotFoundException e) {\n      System.out.println(\"Invalid guess peg file: \" + currentFile);\n    }\n    \n    setColor(currentFile.substring(0, currentFile.indexOf(\".\")));\n  }\n}",
        "isVisible": true
      },
      "HintPeg.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class HintPeg extends SecretPeg {\n\n  /**\n   * the status of the peg - 1 if incorrect peg in\n   * incorrect place, 2 if correct peg in correct place,\n   * and 3 for incorrect peg in correct place\n   */\n  private int correctPeg;\n\n  /**\n   * Creates a HintPeg image\n   * @param filename the name of the file of the image\n   * @param x the x position of the peg\n   * @param y the y position of the peg\n   * @param width the width of the peg\n   * @param height the height of the peg\n   */\n  public HintPeg(String filename, int x, int y, int width, int height, String pegColor) throws FileNotFoundException {\n    super(filename, x, y, width, height, pegColor);\n    correctPeg = 1;\n  }\n  \n  /**\n   * Gets the status of the hint peg\n   */\n  public int getStatus() {\n    return correctPeg;\n  }\n\n  /**\n   * Changes the status of the hint peg\n   */\n  public void setStatus(int newStatus) {\n    correctPeg = newStatus;\n    updatePeg(correctPeg);\n  }\n\n  /**\n   * Updates the peg image based on the status\n   */\n  public void updatePeg(int status) {\n    // peg not in answer at all\n    if (status == 1) {\n      try {\n        setFilename(\"white.png\");\n      } catch (FileNotFoundException e) {\n        System.out.println(\"Error loading white peg.\");\n      }\n    }\n    // correct peg is in the correct place\n    else if (status == 2) {\n      try {\n        setFilename(\"black.png\");\n      } catch (FileNotFoundException e) {\n        System.out.println(\"Error loading black peg.\");\n      }\n    }\n    // correct peg is in the wrong place\n    else {\n      try {\n        setFilename(\"gray.png\");\n      } catch (FileNotFoundException e) {\n        System.out.println(\"Error loading gray peg.\");\n      }\n    }\n  }\n  \n}",
        "isVisible": true
      },
      "CheckButton.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\nimport java.io.FileNotFoundException;\n\npublic class CheckButton extends ClickableImage {\n\n  /**\n   * the number of tries the player has to guess\n   */\n  private int triesLeft;\n\n  /**\n   * Creates a CheckButton\n   * @param filename the image file for the button\n   * @param x the x position of the button\n   * @param y the y position of the button\n   * @param width the width of the button\n   * @param height the height of the button\n   */\n  public CheckButton(String filename, int x, int y, int width, int height) throws FileNotFoundException {\n    super(filename, x, y, width, height);\n    triesLeft = 12;\n  }\n\n  /**\n   * Gets the number of tries left\n   * @return the number of tries left\n   */\n  public int getTriesLeft() {\n    return triesLeft;\n  }\n\n  /**\n   * Decreases the number of tries left when clicked, checks\n   * the player's guess, displays the new number of tries, and\n   * checks whether the game is over yet when button is clicked\n   */\n  public void onClick() {\n    triesLeft--;\n    MastermindLogic.checkGuess();\n    Mastermind.updateTries();\n    MastermindLogic.gameOver(triesLeft);\n  }\n  \n}",
        "isVisible": true
      },
      "MastermindLogic.java": {
        "text": "import org.code.media.*;\nimport org.code.playground.*;\n\npublic final class MastermindLogic {\n\n  /**\n   * the array representing the secret code\n   */\n  private static SecretPeg[] answer = Mastermind.getAnswers();\n\n  /**\n   * the array representing the hints\n   */\n  private static HintPeg[] hints = Mastermind.getHints();\n\n  /**\n   * the array representing the player's guess pegs\n   */\n  private static GuessPeg[] guess = Mastermind.getGuesses();\n\n  /**\n   * Compares the player's guess to the secret and\n   * displays hint pegs to indicate whether or not\n   * the guess is correct\n   */\n  public static void checkGuess() {\n    for (int index = 0; index < answer.length; index++) {\n      if (guess[index].equals(answer[index])) {\n        hints[index].setStatus(2);\n      }\n      else if (guess[index].equals(answer[(index+1)%4]) || guess[index].equals(answer[(index+2)%4]) || guess[index].equals(answer[(index+3)%4])) {\n        hints[index].setStatus(3);\n      }\n      else {\n        hints[index].setStatus(1);\n      }\n    }\n\n    Mastermind.showHints();\n  }\n\n  /**\n   * Checks that all hints are correct\n   */\n  public static boolean isAllCorrect() {\n    boolean status = true;\n    \n    for (int index = 0; index < hints.length; index++) {\n      if (hints[index].getStatus() != 2) {\n        status = false;\n      }\n    }\n\n    return status;\n  }\n\n  /**\n   * Checks whether there are tries left and whether\n   * all pegs have been corrected guessed\n   * @param triesLeft the current number of tries left\n   */\n  public static void gameOver(int triesLeft) {\n    boolean status = false;\n    \n    if (triesLeft > 0 && isAllCorrect()) {\n      status = true;\n    }\n    \n    if (triesLeft <= 0 && !isAllCorrect()) {\n      status = true;\n    }\n\n    endGame(status);\n  }\n\n  /**\n   * Ends the game and determines whether the player won\n   * @param gameOver whether or not the game is over\n   */\n  public static void endGame(boolean gameOver) {\n    if (gameOver) {\n      if (Mastermind.getCheckButton().getTriesLeft() > 0 && isAllCorrect()) {\n        Mastermind.getMessageText().setText(\"You guessed it!\");\n      }\n    \n      if (Mastermind.getCheckButton().getTriesLeft() <= 0 && !isAllCorrect()) {\n        Mastermind.getMessageText().setText(\"Sorry, you lost!\");\n      }\n\n      Mastermind.showSecret();\n\n      try {\n        Mastermind.getBoard().end();\n      } catch (PlaygroundException e) {\n        System.out.println(\"Error ending the game.\");\n      }\n    }\n  }\n\n}",
        "isVisible": false
      }
    },
    "display_name": "Mastermind",
    "bubble_choice_description": "An example project that is a Java version of the classic game Mastermind.",
    "thumbnail_url": "https://images.code.org/7881c49eefb8e90cf67706df03ebad72-image-1641583000231.gif",
    "name_suffix": "_2022"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-02-26T00:33:45.598+00:00\",\"changed\":[\"cloned from \\\"CSA U8L1-L2a\\\"\"],\"cloned_from\":\"CSA U8L1-L2a\"}]"
}]]></config>
</Javalab>
