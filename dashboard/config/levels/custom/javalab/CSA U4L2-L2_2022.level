<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-04-07T17:32:21.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "##Investigate and Modify\r\n\r\nRun the program to observe the results.\r\n\r\nThen, experiment with the program by making the following modifications. Change one line at a time, then run the program after each change to observe the results.\r\n\r\n1. In `MyConsole.java`(#e7e8ea), change **Line 12** to `boolean result = firstEvent == thirdEvent;`(#e7e8ea) then run the program to observe the results. Why do you think this happened?\r\n\r\n2. In `MyConsole.java`(#e7e8ea), change **Line 12** to `boolean result = firstEvent.equals(thirdEvent);`(#e7e8ea) then run the program to observe the results. Why do you think this happened?\r\n\r\n3. In `Event.java`(#e7e8ea), look at the `equals()`(#e7e8ea) method. What do you notice about the condition? Try changing the condition to compare `capacity`(#e7e8ea) with `otherEvent.getCapacity()`(#e7e8ea) then run the program to observe the results. Why do you think this happened?",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    String firstTitle = \"Prom\";\n    String secondTitle = \"Prom\";\n    String thirdTitle = new String(\"Prom\");\n\n    Event firstEvent = new Event(\"Prom\", 500);\n    Event secondEvent = firstEvent;\n    Event thirdEvent = new Event(\"Prom\", 800);\n\n    boolean result = firstTitle == secondTitle;\n\n    System.out.println(\"Result: \" + result);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Event.java": {
        "text": "/*\n * Represents an event\n */\npublic class Event {\n\n  private String eventName;  // The name of the event\n  private int capacity;      // The number of people attending the event\n\n  /*\n   * Constructor to create an Event\n   * with specified event name and capacity\n   */\n  public Event(String eventName, int capacity) {\n    this.eventName = eventName;\n    this.capacity = capacity;\n  }\n\n  /*\n   * Returns the name of the event\n   */\n  public String getEventName() {\n    return eventName;\n  }\n\n  /*\n   * Returns the capacity of the event\n   */\n  public int getCapacity() {\n    return capacity;\n  }\n\n  /*\n   * Checks if this Event is equivalent to otherEvent\n   */\n  public boolean equals(Event otherEvent) {\n    boolean status = false;\n\n    if (eventName == otherEvent.getEventName()) {\n      status = true;\n    }\n\n    return status;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "teacher_markdown": "1. When we print `result`(#e7e8ea) to the console, we see that this comparison is *false*. The reason being is that both `firstEvent`(#e7e8ea) and `thirdEvent`(#e7e8ea) are reference variables which point to different objects in memory. \r\n\r\n2. In this situation, the result will return *true*. The reason why is because there is an overridden `.equals()`(#e7e8ea) method within the `Event.java`(#e7e8ea) class that determines equality between `Event`(#e7e8ea) objects. As written, it only checks whether the `eventName`(#e7e8ea) attribute is equal, ignoring the value for `capacity`(#e7e8ea). \r\n\r\n3. If we were to update the overridden `.equals()`(#e7e8ea) method and changed the attribute compared to `capacity`(#e7e8ea), we would find that these two objects are no longer equal.",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-04-07T17:32:21.445+00:00\",\"changed\":[\"cloned from \\\"CSA U4L2-L1_2022\\\"\"],\"cloned_from\":\"CSA U4L2-L1_2022\"},{\"changed_at\":\"2022-04-07 17:32:32 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 00:08:23 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 00:14:08 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-04-21 12:55:25 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-09-27 19:54:33 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-10 14:38:38 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-10-11 15:18:56 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-11 15:18:57 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-11 19:54:37 +0000\",\"changed\":[\"teacher_markdown\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-10-11 19:55:05 +0000\",\"changed\":[\"teacher_markdown\",\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-10-11 19:55:56 +0000\",\"changed\":[\"teacher_markdown\",\"encrypted_examples\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
