<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T22:22:07.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "long_instructions": "Create the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class by declaring instance variables for the specified attributes, and refactor the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cupcake</code> class to be a subclass of the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class, declare instance variables for the following attributes:\r\n\r\n   * the flavor of a dessert\r\n   \r\n   * the price of a dessert\r\n\r\n‚úÖ **TO DO #2:** Refactor the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cupcake</code> class to be a subclass of the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FoodTruckRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> object and a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cupcake</code> object, then print the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Cupcake</code> objects by calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">AttributesHelper.printAttributes(nameOfObject)</code> method.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with declaring instance variables, creating a subclass, and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ What is <code style=\"background-color: #ececec; color: black; font-weight: bold;\">AttributesHelper.printAttributes()</code>?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    <p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">AttributesHelper.printAttributes()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nAttributesHelper.printAttributes(fido);\r\n\t  </pre>\r\n      \r\n      <p>This method (along with the tests) will help you check that you declared your instance variables correctly.</p>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/inheritance",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Desserts and Cupcakes",
    "bubble_choice_description": "Create the `Dessert` class by declaring instance variables for the specified attributes, and refactor the `Cupcake` class to be a subclass of the `Dessert` class.",
    "thumbnail_url": "https://images.code.org/5324bf9000c0be0a687436e37b9d93f9-cupcake.png",
    "encrypted_exemplar_sources": "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\n",
    "video_key": "csa_constructors",
    "encrypted_validation": "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\nlt6Y6zzc1Ck=\n",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* -------------------------------------- TO DO --------------------------------------\n     * ‚úÖ Instantiate Dessert and Cupcake objects, then print the instance variables for\n     * the Dessert and Cupcake objects to the console using AttributesHelper.printAttributes().\n     * -----------------------------------------------------------------------------------\n     */\n\n    \n\n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Dessert.java": {
        "text": "/*\n * Represents a dessert that can be sold at a food truck\n */\npublic class Dessert {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ‚úÖ Declare instance variables for the flavor and price of a dessert.\n   * -------------------------------------------------------------------\n   */\n\n\n\n  \n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Cupcake.java": {
        "text": "/*\n * Represents a cupcake that can be sold at a food truck\n * Cupcake is a type of Dessert\n */\npublic class Cupcake {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ‚úÖ Refactor the Cupcake class to be a subclass of Dessert.\n   * -------------------------------------------------------------------\n   */\n\n  private String flavor;    // The flavor of a cupcake\n  private double price;     // The price of a cupcake\n  private boolean isMini;   // Whether or not a cupcake is a miniature cupcake\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    ArrayList<String> fieldsList = fieldsToList(Arrays.toString(classFields));\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    fieldsAsText = fieldsAsText.substring(1, fieldsAsText.length() - 1);\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "name_suffix": "_alt-2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T22:22:07.227+00:00\",\"changed\":[\"cloned from \\\"CSA U2L1-L6d_pilot-2025\\\"\"],\"cloned_from\":\"CSA U2L1-L6d_pilot-2025\"}]"
}]]></config>
</Javalab>
