<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-08-23T20:49:59.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A weather analyst wants to determine the average temperature for each day. They have the following values:\r\n\r\n![](https://images.code.org/96f3b31d65d7611e43d0fd780ce43f27-image-1651005727636.png)\r\n\r\nwhere each row represents New York, Los Angeles, Miami, and Seattle, respectively. Each column represents the temperature on March 29th, March 30th, March 31st, April 1st, and April 2nd, respectively.\r\n\r\n##In Temperatures.java:\r\n\r\n1. Write the method `dailyAverages()`(#e7e8ea) to calculate the average temperature for each day.\r\n\r\n   * Get the corresponding date for each column from the `dates`(#e7e8ea) array.\r\n   \r\n   * Return a `String`(#e7e8ea) containing the date and the average temperature for that day.\r\n\r\n::: details [**Show Me How**]\r\nTraversing a 2D array in column-major order uses the following syntax:\r\n  \r\n  ```\r\n  for (int col = 0; col < arrayName[0].length; col++) {\r\n    for (int row = 0; row < arrayName.length; row++) {\r\n      // code to execute\r\n    }\r\n  }\r\n  ```\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Daily Temperatures",
    "bubble_choice_description": "Write a method to find the average temperature for each day and print the results.",
    "thumbnail_url": "https://images.code.org/da503f4004138d2d2ee272ecde2d51fb-image-1651005744030.png",
    "encrypted_exemplar_sources": "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\nA/awcYHqOeQ=\n",
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "cCJi+05Op08rTczSZVU2QyExQucv3jj3y2qVz4Gggl4+m+msZo36sKM6idAE\nJp7r4AWkWTIDlegBdOSDJqrjGLj24SzSjRGRbCBqwnSXwgi4RwPbJAHxn3B6\n3GT9D+d3FfrKjWPwMmlt0IeAVlWCSuwR125Nc7RHO7a9a7crn68fb8qCzDnd\noN6zAnnH4MQAkMGTcS5M+BauapTRv6+euFQmqqPVnSTjduggn0VUcCJnd2c4\n3ui4jJturwm1d5qO07+3tdFHxq26oFaTC4tLgpARO9Hw8o0fhAjntdAVlv0p\nBLOkBWxH88g3mrIpVyp63v7iBuBfA3VAGLwFVFpTNIo/gRFjxcA7FpjZtptd\nE0ib5QIVu9OLHrylcjFn3lOmwUfEmBAcBfIExAFMzDUJGIV8NEUcRamRSsEm\nRX+mOOXa6wVDhO9Z/6FYcTCNF0cK9j7LoyEVJQFCaLpLW1tYO27bbkZxU2oe\nvDkMWIh/kxvXB2OokXozSDktBWArTAwiUlwDlT8Dgci2Ordi2mS2qm0K3+wj\nZZDFUqMZj+wGrCb9xm83uN5k/fBRZk3V7o3SbWx14hsRoJhtdBYyKCgGkO46\nt1GkRvTwiT6SYiOuwtw61w10T3omPRMqpStLOdk/imR2UEi2gwS7+QuAgZh+\n0ptCLVkgwPuITHekD+cYgF+lE3uj1maAL8Zmj1NpzJkr387gwUOtpGuDPZBC\noEPIbrPwNR/8jPtdA1WRT9fKTsQ0uk4NQabgYgsWJkHbX/rtyyKqRLC6bGPR\n1NQeegyJ2fvp9kKdShq7ci3kAqoJwR/e2aY0d8u1amszUHNaOXdbWW8w9I/J\n0labLg9GB8zqasf7qG7xkaVYaxCTjf+gtEGKDzUBm0Fpk5kdHP6oathRaNcg\nQ6g9s6Nnzn4EVGfcnXs5FZBZiIIKq0yspBCIMN8cBipIGT/5OWzPOuYK9+wf\nlVb8Rg4Qfm033UqNgCpkIHxJ9DY/gRcNrW0He2hxUko0uCI92YW1ATsi5eQN\nwQKI94jY9233i18fiR6V8DtBTqt2XXkd2eraeIG/fhrAMKR9H03IfNSdwv4z\noehvTsF2igU9IIvubkacLcvRU4Nhr+w6qTBGLfOnCkkpeIoHfjjaJXtiUA6z\nb5flB8IzORT/kAYp/kXxMmvicJz6fNy27/CMpmXS8oBs/D6LFofhfUP5D3k8\nWrEynjs+1TFZTVEB9wFWbP8AJTEJ12AlIhPcEsp6fHaY1FwPaJ1C7ZLq5G0J\n8RY9SAcPTrniZg4oyMi3DFZZ8EbWKlIg4GYapvbzL9zsFADZp0o8UA0Mz2ql\ndfKbSxGE07GobB17DVBCqtKD+TMleR99Oe1jOCtP4aPQTRPy3b/9sZnE5cKP\n3/SgCWFm+mQgFhd+kPNwy0JDSxIIJCLTfRhW3Xx3FjgNYu9nXM+XxlQ9Sgg5\njrWLLnASsYMnF1r5uF8YAZN/Vv0anYSk6tH0bf5hFynsA4vRu8zwsTVYet76\nVqHVqzQvs+kP78YQ8vFLZDHaS+LSvQeVaMwLu3X6cOyg6wOwzS6HAd9fQg7c\nQQom3yZHLVCuwLzJ3t1n3dg7EoSCTZ1ESYRHFHrgjsBWuuFgGvKMAEmeQ8AM\nuTUgVUVeknI7d69Bg8y3oElUfPE+hezPyX6BWgKpm06QSmv4U5rRmTZxqeKR\nnMMahnbxJfMFCkMNIob5c8cvMVjW50ixjb7Ktv7hCQD4w8lU/+Q5rKzrx1xH\niP5ca6mO3iOb61eTO3ZYlMRcyhS+HiV09iC5snaK+cLl2Oqqz9yEGEB1oIVK\nBW6iyZxBMUajQ1HevTOjOpluHzMYf77gYrmbWEHkb0Gm5s/miemCWv+Sgx1W\nLNkDUR/BIQO7IUEdvV/YlV4FJ2fSuoUNM6Gz2n1ExuIhHSPxpNUoNndenTrO\nST0+E8rynpVoKLqIOv01W4tiZRgT/kcx01YUy0rD60WqXcH/HqLQJoJlJ+EY\ns8nIwb3KZ0sWWSMrVoGpyi47LkHnkYqCGFK3WoiHDbssbMZYg0te6Td8Zyxn\nmEvxof6oFZQ4y5KL+Wo596JUZd2HY1Mw1pGWUTOhvIlBArIzH12Ihm5csO+1\nChkP0e8FGPU6mBGtKyazP2HLjOtf729MeV7NDv1/eU6ahZu8UH0eptoaUuAX\nBrgw3rB27+XSvIkt47VOEJuLxky6hpGpF5ie0zd2dj4NRVV4oiKxvNNPB4Aa\ng0IxD0oUrBm08gedZbHXmt9pz0n6hqRcFkTV2UGDnAw4PlRnO02GvzCjzqn5\nvr6Jwpgyk3MSzpH/V9RdQwPAYtzKuBkJFLgmBhHW2cuJPna0ftxk3KDzqjyX\ndXEY/Ke9moL9c5yLSNip4u7/Kwyd1TgaC4O1FNhiSQfkG6VdKSpX9U+JBNn4\n4rB+l2M0EK2GDXBXI3IlbKQVlf7m0wd3PL8F2JXAhYZj3DNssJgjFWY7BWEN\nAxTN6DD0RbqfC0LJ3I6PMafAfXuShuHFhBpa1yxHfwL6DmukB45VyU8J3Odr\nvyWGxYqElptNUNgL6w19wQYmW99kdjmCW3bk3GpG+nDIJg6R7toMlBSpdJw1\ntea3BfXTBToVBmh9YqkpPYmxvi+M4aeVP6P/gWJcIvKjy7k91dJ51AjOvuGw\nM5vHRA==\n",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    String[] dates = {\"March 29th\", \"March 30th\", \"March 31st\", \"April 1st\", \"April 2nd\"};\n    double[][] cityTemps = {{37.27, 40.66, 53.53, 52.36, 48.87},\n                              {62.2, 61.47, 60.31, 62.42, 62.38},\n                              {81.5, 80.04, 81.61, 85.91, 85.69},\n                              {56.41, 48.6, 51.67, 48.72, 52.65}};\n\n    Temperatures myTemps = new Temperatures(dates, cityTemps);\n\n    System.out.println(myTemps.dailyAverages());\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Temperatures.java": {
        "text": "/*\n * Analyzes data about daily temperatures for cities\n */\npublic class Temperatures {\n\n  private String[] dates;         // The list of dates\n  private double[][] cityTemps;   // The 2D array of temperatures for several cities\n\n  /*\n   * Constructor to create a Temperatures object with the\n   * specified array of dates and 2D array of temperatures\n   */\n  public Temperatures(String[] dates, double[][] cityTemps) {\n    this.dates = dates;\n    this.cityTemps = cityTemps;\n  }\n\n  /*\n   * Finds the average temperature for each day and returns\n   * a String containing the dates and average temperatures\n   */\n  public String dailyAverages() {\n    // TO DO #1: Calculate the average temperature for each date\n    // and return a String containing the date and temperature.\n\n\n    return null;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:49:59.574+00:00\",\"changed\":[\"cloned from \\\"CSA U5L3-L4a_2022\\\"\"],\"cloned_from\":\"CSA U5L3-L4a_2022\"},{\"changed_at\":\"2022-10-09 16:24:25 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-09 17:13:23 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-09 17:13:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
