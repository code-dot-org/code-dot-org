<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:49:18.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A student wants to keep track of the museums they visit.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Museum</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">isNonProfit</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MuseumRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Museum</code> object using the parameterized constructor. \r\n\r\n‚úÖ **TO DO #3:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Museum</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getIsNonProfit()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Museum</code> class to get the current values assigned to the instance variables. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nMuseum modernArt = new Museum();\r\nSystem.out.println(\"Name: \" + modernArt.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MuseumRunner.java": {
        "text": "public class MuseumRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Museum object using the parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Museum.java": {
        "text": "/*\n * Represents a museum\n */\npublic class Museum {\n\n  private String name;           // The name of a museum\n  private boolean isNonProfit;   // Whether or not a museum is non-profit\n\n  /*\n   * Sets the name to \"unknown\" and isNonProfit to false\n   */\n  public Museum() {\n    name = \"unknown\";\n    isNonProfit = false;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the name and isNonProfit instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to isNonProfit\n   */\n  public boolean getIsNonProfit() {\n    return isNonProfit;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "display_name": "Museums",
    "bubble_choice_description": "A student wants to keep track of the museums they visit.",
    "encrypted_exemplar_sources": "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\n",
    "thumbnail_url": "https://images.code.org/3edf96bc3d43630be81553151320374a-museum.png",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_validation": "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\n",
    "video_key": "csa_overloaded_constructors",
    "name_suffix": "_2024",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:49:18.028+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L3d_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L3d_2023\"}]"
}]]></config>
</Javalab>
