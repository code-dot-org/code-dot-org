<Javalab>
  <config><![CDATA[{
  "published": true,
  "game_id": 68,
  "created_at": "2023-01-12T22:23:10.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The <a href=\"https://www.kaggle.com/datasets/successikuku/tmbd-movie-dataset\" target=\"_blank\">**TMDB Movie dataset**</a> includes the names of movies, the runtime of each movie in minutes, and the rating of each movie.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Movie.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">checkForDuplicates()</code> method to return <code style=\"background-color: #ececec; color: black; font-weight: bold;\">true</code> if any movies in <code style=\"background-color: #ececec; color: black; font-weight: bold;\">movieData</code> have the same runtime, otherwise return <code style=\"background-color: #ececec; color: black; font-weight: bold;\">false</code>.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MovieRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">checkForDuplicates()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a nested <code style=\"background-color: #ececec; color: black; font-weight: bold;\">for</code> loop.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nloop from 0 to movieData.length\r\n  loop from next position to movieData.length\r\n    if movieData[outer].getRuntime() == movieData[inner].getRuntime()\r\n      return true\r\nreturn false\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ What is the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \r\n    <p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FileReader</code> class is a hidden support class that has methods for reading data from a text file into a 1D array. It has the following methods:</p>\r\n\t\t<ul>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toStringArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> objects containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toIntArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">int</code> values containing the data</li>\r\n<li><code style=\"background-color: #ececec; color: black; font-weight: bold;\">toDoubleArray(String filename)</code> - reads the data from the specified <code style=\"background-color: #ececec; color: black; font-weight: bold;\">filename</code> and returns a 1D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> values containng the data</li>\r\n\t\t</ul>\r\n    \t<p>For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nString[] names = FileReader.toStringArray(\"names.txt\");\r\n \r\nint[] numbers = FileReader.toIntArray(\"numbers.txt\");\r\n \r\ndouble[] prices = FileReader.toDoubleArray(\"prices.txt\");</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/nested-loops"
    ],
    "display_name": "Movies",
    "bubble_choice_description": "Determine whether the TMBD Movie dataset contains duplicate values.",
    "thumbnail_url": "https://images.code.org/b80d7cc047016f7179b76b585bf15e6c-tv.png",
    "encrypted_validation": "KWlbZlZhOI9S7sdYC3anlUkEFSwTcLqOifqkKvIhWpMkQFHoYpV0Q1OqzZi6\nAJrOTX+nefyISkXokmAR3grFcWA+H0mxnX6LWTgn4d7zkgzx8Wp9Y7oKk+td\nu6scEsvD8QW6iRQ1seUI04iO1zseCgbW3GwV/hida7IwAndggYIC3zQUvMHi\nv2E70MgyDI0Ax3KNYnjSGg/ztFnEHveMKzQTWsnYY7zDsL4rLICybUTTNWBy\nnrCVlZCOZ6gtrJmiZOkAhiBJ8fGn3RloO7RizNkIWC2c+4UwBV53KJkYWGFH\ndRl1BIGF3TczFR4UkqLIgZpYl6xC+uC0M4ha7crgQ/kdm4PVedadEnXKG2PJ\nDWNwH+4301hsRtCZz3Unl7kauyXYI9kVh/mge/NhndoyrQKIgWOW01+2w/ex\nXcIhEYpmCS65Iz02daqp8UcdNKcscOmqtTd3NIbmMwvnJZiGecswSrr1Uupy\nnF0lYj8KmsuOMQTyUgQdRQra/o2bOOQAmVCUGdL4ld5e1JqbgvSTpVmLKy55\ncQ3NAA8W0ewUD7wEWVD2KId6Mf937lQbdc7dBuXFz1y9y4nA0iQrQw/Ssagr\nP2TGBXX9HO5qHwz+gKbi1T+icIVFIzLFAaKQ3NZP/LDyeRyxCoTUZlongsIC\ny2cq+VEr9DqyTU+L2Tl8IIyFpItt0DOoxmkruOUH0c/7uhd4su+xnQhNTb0L\nfjxPUEI+mpuIk2QUkH8ADFLN2Xfe6Aif0xc3saR3uhqtZvynlBCayG/UWrxp\naJzTUxJl0c4fddDu9M9E/c5ME+SaPJ3DK4FThlrwELmSbPL3RPMj47nLy/KE\n8FY5qv/VVaYsqRJVSbEm2agIn+gLGZ8PZQa2cc1tILaxwZypa0HRj/ip8ycx\ncGgU02zIuBzxGHgfrjFTEldckaP0DTWjhrXfXEAHJ8+Ivxc540tv6l08UE5N\nmh514uPJSY2Yu9NmtmkR0XF8sA0WufqHJ6h1xym96MngFpg7lBFOylOOTci8\nt0HIvrB+IupLELugeymseiH5xlZz0uBvgtm0KkkhgAgMPfSEffdr7SmhMCaE\nwbfnyxSGS5dRwhHL6l4o3H1rX235LNi6GV8bIySUmUfiKtvzzelbBQlKu7R6\n3YfrUWCs2uVKiFZfQTIvIY/r/MzEZJzf5A4YX+PbwhVLoZC9TGs8NtVTiwzC\nbThmyXM//AxkNCosNuXT4RpgIfLlze+VJkOHEAtp9/tcf23UGiH5yEnii/av\nPMtFR5bmXRw52JTDtYK16ynPr5dwb8sjPnCVswCaFL6p/oHHXaPQJtOhpTaH\nE95si49BgS1FyIogDOybHqDaiK1VOb9zfS5lLrsV6QI4eHSlOF8ow0UShQ2I\nS05WFQ5FkZdtnfKe87pKPjDexR5rHcAU1xjp1dtBhkhZf7JCb6T4RiQ0diAR\n+EnDgZQ53auEXALiDS3rCB5lf+YXXKNI5KJ324EtW+h5W1x5L52u86td/aB+\nrRsXLypHXFqom4qWNnYnxG8V9i0g7cXDuLFUD0ASPSkIhiRwM1VaEJ2m2oIj\nNtzetfLk+uqNyqoaZepH3IAnMS6BqPT0ioTiBdqI\n",
    "start_sources": {
      "MovieRunner.java": {
        "text": "public class MovieRunner {\n  public static void main(String[] args) {\n\n    MovieDatabase movies = new MovieDatabase(\"names.txt\", \"runtimes.txt\", \"ratings.txt\");\n    System.out.println(movies);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the checkForDuplicates() method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "MovieDatabase.java": {
        "text": "/*\n * Manages data about movies from The Movie Database\n */\npublic class MovieDatabase {\n\n  private Movie[] movieData;    // The 1D array of Movie objects\n\n  /*\n   * Reads the data from nameFile, runtimeFile, and\n   * ratingFile to initialize movieData\n   */\n  public MovieDatabase(String nameFile, String runtimeFile, String ratingFile) {\n    movieData = createMovies(nameFile, runtimeFile, ratingFile);\n  }\n\n  /*\n   * Returns a 1D array of Movie objects using the\n   * data from nameFile, runtimeFile, and ratingFile\n   */\n  public Movie[] createMovies(String nameFile, String runtimeFile, String ratingFile) {\n    String[] namesData = FileReader.toStringArray(nameFile);\n    int[] runtimeData = FileReader.toIntArray(runtimeFile);\n    double[] ratingsData = FileReader.toDoubleArray(ratingFile);\n\n    Movie[] tempMovies = new Movie[namesData.length];\n\n    for (int index = 0; index < tempMovies.length; index++) {\n      tempMovies[index] = new Movie(namesData[index], runtimeData[index], ratingsData[index]);\n    }\n\n    return tempMovies;\n  }\n\n  /*\n   * Returns true if any movie in movieData have the same runtime, otherwise returns false\n   */\n  public boolean checkForDuplicates() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Use nested loops to traverse the 1D array movieData and the getRuntime()\n     * method in the Movie class to check if there are duplicate runtimes.\n     * -----------------------------------------------------------------------------\n     */\n\n       \n\n    return false;\n  }\n\n  /*\n   * Returns a String containing each movie's information\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (Movie theMovie : movieData) {\n      result += theMovie + \"\\n\";\n    }\n\n    return result;\n  }\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "names.txt": {
        "text": "Jurassic World\nMad Max: Fury Road\nInsurgent\nStar Wars: The Force Awakens\nFurious 7\nThe Revenant\nTerminator Genisys\nThe Martian\nMinions\nInside Out\nSpectre\nJupiter Ascending\nEx Machina\nPixels\nAvengers: Age of Ultron\nThe Hateful Eight\nTaken 3\nAnt-Man\nThe Hunger Games: Mockingjay - Part 2\nTomorrowland\nSan Andreas\nThe Big Short\nMission: Impossible - Rogue Nation\nKingsman: The Secret Service\nSpotlight\nMaze Runner: The Scorch Trials\nChappie\nGoosebumps\nRoom\nThe Good Dinosaur\nBrooklyn\nStraight Outta Compton\nThe Last Witch Hunter\nThe Age of Adaline\nHardcore Henry\nHome\nThe Lobster\nCarol\nThe Intern\nEverest\nPoint Break\nBurnt\nSelf/less\nMortdecai\nBlackhat\nFantastic Four\nThe Witch\nSpy\nFocus\nHitman: Agent 47",
        "isVisible": true,
        "tabOrder": 3
      },
      "runtimes.txt": {
        "text": "124\n120\n119\n136\n137\n156\n125\n141\n91\n94\n148\n124\n108\n105\n141\n167\n109\n115\n136\n130\n114\n130\n131\n130\n128\n132\n120\n103\n117\n93\n111\n147\n106\n112\n97\n94\n118\n118\n121\n121\n114\n100\n116\n106\n133\n100\n92\n120\n105\n96",
        "isVisible": true,
        "tabOrder": 4
      },
      "ratings.txt": {
        "text": "6.5\n7.1\n6.3\n7.5\n7.3\n7.2\n5.8\n7.6\n6.5\n8\n6.2\n5.2\n7.6\n5.8\n7.4\n7.4\n6.1\n7\n6.5\n6.2\n6.1\n7.3\n7.1\n7.6\n7.8\n6.4\n6.6\n6.2\n8\n6.6\n7.3\n7.7\n5.6\n7.3\n5.9\n6.9\n6.6\n7.1\n7.1\n6.7\n5.5\n6.3\n6.2\n5.3\n5\n4.4\n5.8\n6.9\n6.7\n5.5",
        "isVisible": true,
        "tabOrder": 5
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 6
      },
      "Movie.java": {
        "text": "/*\n * Represents a movie\n */\npublic class Movie {\n\n  private String name;     // The name of a movie\n  private int runtime;     // The length of a movie in minutes\n  private double rating;   // The rating of a movie\n\n  /*\n   * Sets name, runtime, and rating to the specified values\n   */\n  public Movie(String name, int runtime, double rating) {\n    this.name = name;\n    this.runtime = runtime;\n    this.rating = rating;\n  }\n\n  /*\n   * Returns the name of the movie\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the runtime of the movie\n   */\n  public int getRuntime() {\n    return runtime;\n  }\n\n  /*\n   * Returns the rating of the movie\n   */\n  public double getRating() {\n    return rating;\n  }\n\n  /*\n   * Returns a String containing the name, runtime, and rating of the movie\n   */\n  public String toString() {\n    return name + \" (\" + runtime + \" minutes) - \" + rating;\n  }\n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "encrypted_exemplar_sources": "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\np/U=\n",
    "video_key": "csa_nested_loops",
    "encrypted_examples": [

    ]
  },
  "audit_log": "[{\"changed_at\":\"2023-01-12T22:23:10.582+00:00\",\"changed\":[\"cloned from \\\"CSA U3L9-L6a_2023\\\"\"],\"cloned_from\":\"CSA U3L9-L6a_2023\"},{\"changed_at\":\"2023-01-12 22:23:11 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-29 23:26:08 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 01:25:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 01:32:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 01:36:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:15:48 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:16:35 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:17:56 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:32:51 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:32:53 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:36:34 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-30 15:36:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-31 01:56:54 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-01-31 16:27:18 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-02-02 15:22:40 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-31 21:34:22 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-07-12 14:30:45 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
