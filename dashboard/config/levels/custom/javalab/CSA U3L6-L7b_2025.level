<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:52:42.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">BankAccount</code> class represents a bank account and has instance variables for the customer's name and starting balance.\r\n\r\nThe <code style=\"background-color: #ececec; color: black; font-weight: bold;\">BasicAccount</code> class represents a basic bank account. It overrides the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">withdraw()</code> method to charge a $30 fee if a withdrawal causes an account to be overdrawn (balance is negative).\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Bank.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">makeWithdrawals()</code> method to withdraw the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">amount</code> from each account balance.\r\n\r\nFor example, calling <code style=\"background-color: #ececec; color: black; font-weight: bold;\">makeWithdrawals()</code> with the value <code style=\"background-color: #ececec; color: black; font-weight: bold;\">300</code> should produce the following results:\r\n\r\n<pre style=\"background-color: #333333; color: white;\">\r\nShakila: $200.0\r\nAli: $-130.0\r\nValentina: $-230.0\r\nMaria: $500.0\r\n</pre>\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">BankRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">makeWithdrawals()</code> method, then print the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Bank</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing a 1D array of objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nfor each bankAccount in accounts\r\n  bankAccount.withdraw(300)\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/polymorphism"
    ],
    "display_name": "Bank Account",
    "bubble_choice_description": "Traverse a 1D array of `BankAccount` objects and get the balances for each bank account.",
    "thumbnail_url": "https://images.code.org/410351bc8ad13c43a8056e781da0882e-money.png",
    "encrypted_exemplar_sources": "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\n",
    "video_key": "csa_polymorphism",
    "encrypted_validation": "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\neGS/Rtc=\n",
    "start_sources": {
      "BankRunner.java": {
        "text": "public class BankRunner {\n  public static void main(String[] args) {\n\n    BankAccount[] accounts = { new BankAccount(\"Shakila\", 500),\n                               new BasicAccount(\"Ali\", 200),\n                               new BankAccount(\"Valentina\", 100),\n                               new BasicAccount(\"Maria\", 800) };\n\n    Bank localBank = new Bank(accounts);\n\n    /* ----------------------------------- TO DO #2 --------------------------------\n     * ‚úÖ Call the makeWithdrawals() method and print the Bank object.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Bank.java": {
        "text": "/*\n * Represents a bank\n */\npublic class Bank {\n\n  private BankAccount[] accounts;    // The 1D array of BankAccount objects\n\n  /*\n   * Initializes accounts to the 1D array of BankAccount objects\n   */\n  public Bank(BankAccount[] accounts) {\n    this.accounts = accounts;\n  }\n\n  /*\n   * Returns the 1D array accounts\n   */\n  public BankAccount[] getAccounts() {\n    return accounts;\n  }\n\n  /*\n   * Withdraws the specified amount from each BankAccount in accounts\n   */\n  public void makeWithdrawals(double amount) {\n    /* ----------------------------------- TO DO #1---------------------------------\n     * ‚úÖ Traverse the 1D array accounts and call the withdraw() method on each\n     * BankAccount object to withdraw the specified amount.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n  }\n\n  /*\n   * Returns a String containing information about each bank account\n   */\n  public String toString() {\n    String result = \"\";\n\n    for (BankAccount acct : accounts) {\n      result += acct + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "BankAccount.java": {
        "text": "/*\n * Represents a bank account\n */\npublic class BankAccount {\n\n  private String customerName;  // The name of an account holder\n  private double balance;       // The starting balance of an account\n\n  /*\n   * Sets customerName and balance to the specified values\n   */\n  public BankAccount(String customerName, double balance) {\n    this.customerName = customerName;\n    this.balance = balance;\n  }\n\n  /*\n   * Adds the specified amount to the balance\n   */\n  public void deposit(double amount) {\n    balance += amount;\n  }\n\n  /*\n   * Subtracts the specified amount from the balance\n   */\n  public void withdraw(double amount) {\n    balance -= amount;\n  }\n\n  /*\n   * Returns the customer's name\n   */\n  public String getName() {\n    return customerName;\n  }\n\n  /*\n   * Returns the current balance\n   */\n  public double getBalance() {\n    return balance;\n  }\n\n  /*\n   * Returns a String containing the customer's name and balance\n   */\n  public String toString() {\n    return customerName + \": $\" + balance;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "BasicAccount.java": {
        "text": "/*\n * Represents a basic bank account\n */\npublic class BasicAccount extends BankAccount {\n\n  /*\n   * Sets customerName and balance to the specified values\n   */\n  public BasicAccount(String customerName, double balance) {\n    super(customerName, balance);\n  }\n\n  /*\n   * Subtracts the specified amount from the balance and\n   * charges a fee if the withdrawal overdraws the account\n   */\n  public void withdraw(double amount) {\n    super.withdraw(amount);\n\n    if (getBalance() < 0) {\n      super.withdraw(30);\n    }\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      }
    },
    "name_suffix": "_2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:52:42.791+00:00\",\"changed\":[\"cloned from \\\"CSA U3L6-L7b_2023\\\"\"],\"cloned_from\":\"CSA U3L6-L7b_2023\"}]"
}]]></config>
</Javalab>
