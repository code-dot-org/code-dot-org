<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-08-02T21:31:28.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "An HR department needs to extract email addresses from a list of job applications.\r\n\r\nâœ… **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Job</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">extractEmails()</code> method that finds all email addresses in the list of job applications and returns them in a new list.\r\n\r\nâœ… **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">JobRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">extractEmails()</code> method and print the list using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">resultsToString()</code> method.\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">ðŸ”¦ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ncreate new ArrayList of String objects\r\n&nbsp;\r\nloop through applications\r\n  get current application\r\n  find location of comma in current application\r\n  get substring from comma + 1\r\n  add substring to new ArrayList\r\n&nbsp;\r\nreturn new ArrayList\r\n</pre>\r\n    </div>\r\n</details>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Email Extractor",
    "bubble_choice_description": "An HR department needs to extract email addresses from a list of job applications.",
    "thumbnail_url": "https://images.code.org/edfcf40edb38fcc1119740b18ad4065e-resume.png",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "luFeXsUSPOA1FlmSaCkXS8cPpJ6fIH+4dfdpv2OZA7xuaNouksZQqBHnmioW\nUdH6PbQuQImLdFbDi5CQzAvnnNWql43uONUim25FD7LNJ0/+iEDLFlu+bB7Q\n48ahNmzusRd6GeDZjIp2HBR+S2Vw/cqF1DVYaIgJGQMZBgjcE2HTp3QyMv+V\ntyGF00X7bDZXXq6d8km7S9zp15ArZjTT0pOMVwR5paubc8FoM+IHfnWYBiHf\nLLxYbRPp7FlX1bycfW720ZVnBqqh+THjp2pFZOO+0N2vAYBnwQ17sBXzIR5V\ndhvXS1sgA8Nv9QsMEmYgLmMnCGe8pRUQFhVeqoLWPD8wsgFeJWDG9ha2d5DO\n7M0SjPhzVql5D3bCB2oONe1Jg3kVmkAZ9VPei/cWMVFnDZkYuRwefVdqZX9G\nmmDspFsmw6jKYlsGEF2YInTNUXtBzd8KtRh+Js2sBAkGkm09WctSKuVEUaKW\nAEts154T4vPEA5HR4cBaZOH6Ya2T8IfGPf6jClQb1Nuzy4gKLVjnkxZR/ZVV\ntq3Ivx7DfEuPxbLIqL24uhhSwFIoZPr3X3EaSCIEm1GtiUU1tX6vXlePlPIX\n24XnjqXq7I+0L/elFQO9vE4geD7Y/5dZQH2QLVVClMExEJmloVbiHkZLjc8Q\nZlvLafNdxioFB02WbZaCorOdZUHEIXnTdDntFkKn88SYtsXI6pFVQonDWLM9\n3FjkOvMzjL/7uxIqqr1wlE7evpmP9yXfY4YATe+0/lQXtMokxM7wXMyOtB29\nU8+Inupgl3PMtrdLUbFUnK/VvRMjYyy58U46xqoRK6kGRLvckbJs0aSexPR6\ncFz53iv9ZNyF2hMsM48EJ0tKVKCtijETuTjG9aFM9bQ8E3c9cUaYxb5fyxrK\nmxwVqVKku2VmYleQpY97Xl7aWhwM/doj+vkHCulTbX9dX7frZNyZ0N7edHPt\n2PKCK4FyNy+HTeLoUydpqzfY8nbvUMDsI+uNx4TPdUhwMovDmG6FQZtv/7CJ\nCysFitt5AYLPKfMSNTYp7FhfJs0UzMaXtZCrMWRTHZG/ctIZDS4JjWecqBZ5\n/MDYrbHes5v4H5B8i5aKBbGirsl9/9DKu7u9FEao26FMZLLCleECezVi+7q+\nOkcTQ8aXLoNx7cpu1AebCa1OrAfMfSfn1k/uvGoCP48hLg3VOBN28fhs8irV\n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\n/zimKcrpKg==\n",
    "start_sources": {
      "JobRunner.java": {
        "text": "import java.util.ArrayList;\n\npublic class JobRunner {\n  public static void main(String[] args) {\n\n    // Creates a list of job applications\n    ArrayList<String> applications = new ArrayList<String>();\n    applications.add(\"Jane Smith,jane.smith@email.com\");\n    applications.add(\"Sarah Johnson,sarah.johnson@email.com\");\n    applications.add(\"Michael Lee,michael.lee@email.com\");\n    applications.add(\"Lisa Chen,lisa.chen@email.com\");\n    applications.add(\"William Kim,william.kim@email.com\");\n\n    // Creates a Job object\n    Job posting = new Job(applications);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Call the extractEmails() method and print the list using the the\n     * resultsToString() method in the Job class.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Job.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a job posting\n */\npublic class Job {\n  \n  private ArrayList<String> applications;    // The list of applications\n\n  /*\n   * Initializes applications to the specified list of applications\n   */\n  public Job(ArrayList<String> applications) {\n    this.applications = applications;\n  }\n\n  /*\n   * Returns the list of applications\n   */\n  public ArrayList<String> getApplications() {\n    return applications;\n  }\n\n  /*\n   * Returns an ArrayList containing the email address from each application\n   */\n  public ArrayList<String> extractEmails() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Traverse the list of applications. Find the location of the comma, and\n     * add the substring containing the email address to a new ArrayList to return.\n     * -----------------------------------------------------------------------------\n     */\n    \n    \n    \n    return null;\n  }\n\n  /*\n   * Returns a String containing each value in the specified list\n   */\n  public String resultsToString(ArrayList<String> results) {\n    String text = \"\";\n\n    for (int index = 0; index < results.size(); index++) {\n      text += results.get(index) + \"\\n\";\n    }\n\n    return text;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "name_suffix": "_pilot-2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-08-02T21:31:28.038+00:00\",\"changed\":[\"cloned from \\\"CSA U6L6-L7d_2025\\\"\"],\"cloned_from\":\"CSA U6L6-L7d_2025\"}]"
}]]></config>
</Javalab>
