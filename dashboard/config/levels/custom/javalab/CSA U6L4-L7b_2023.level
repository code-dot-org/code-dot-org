<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2023-04-03T13:59:03.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Create a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Student</code> class that contains an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> of colleges a student is applying to.\r\n\r\n‚úÖ **TO DO #1:** Write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Student</code> class with the following:\r\n\r\n* an instance variable to represent a list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">College</code> objects\r\n\r\n* a constructor that initializes the list to an empty list\r\n\r\n* an accessor method that returns the list of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">College</code> objects\r\n\r\n* a method called <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addCollege()</code> that adds a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">College</code> to the list\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">StudentRunner</code> class,\r\n\r\n1. Instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Student</code> object.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">addCollege()</code> method to add colleges to the list.\r\n\r\n3. Call the accessor method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with declaring and initializing an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> and using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">add()</code> method.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "video_key": "csa_the_arraylist_class",
    "display_name": "College Applications",
    "bubble_choice_description": "Create a `Student` class that contains an `ArrayList` of colleges a student is applying to.",
    "thumbnail_url": "https://images.code.org/8c84953c6e6a8e1477c47737657bc154-resume.png",
    "encrypted_validation": "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\n",
    "start_sources": {
      "StudentRunner.java": {
        "text": "public class StudentRunner {\n  public static void main(String[] args) {\n\n    // Creates a College object\n    College college = new College(\"CC\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Student object, then call the addCollege() method to add\n     * a College object to the list. Call the accessor method and print the result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Student.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a student\n */\npublic class Student {\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write an instance variable to represent a list of College objects, then\n   * write a no-argument constructor that initializes the list to an empty list.\n   * -----------------------------------------------------------------------------\n   */\n\n  \n  \n  /*\n   * Returns the list of colleges\n   */\n  public ArrayList<College> getColleges() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return the list of College objects.\n     * -----------------------------------------------------------------------------\n     */\n    \n    return null;\n  }\n\n  /*\n   * Adds a college to the list of colleges\n   */\n  public void addCollege(College newCollege) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Add the parameter newCollege to the list of College objects.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "College.java": {
        "text": "/*\n * Represents a college\n */\npublic class College {\n  \n  private String name;    // The name of a college\n\n  /*\n   * Sets name to the specified name of a college\n   */\n  public College(String name) {\n    this.name = name;\n  }\n\n  /*\n   * Returns a String containing the name of the college\n   */\n  public String toString() {\n    return name;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    String fieldsAsText = \"\";\n    if (classFields.length > 0) {\n      Field field = classFields[0];\n\n      fieldsAsText += field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    }\n    for (int i = 1; i < classFields.length; i++) {\n      Field field = classFields[i];\n\n      fieldsAsText += \", \" + field;\n      \n      Type type = field.getGenericType();\n      if (type instanceof ParameterizedType) {\n        ParameterizedType pType = (ParameterizedType) type;\n        fieldsAsText += \"<\" + pType.getActualTypeArguments()[0] + \">\";\n      }\n    } \n    ArrayList<String> fieldsList = fieldsToList(fieldsAsText);\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \", \"java.util.ArrayList \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n\n  public static String getGenericType(String currentField) {\n    String result = \"MISSING\";\n\n    int indexOfGeneric = currentField.indexOf(\"<\");\n    if (indexOfGeneric != -1) {\n      int indexOfSpace = currentField.indexOf(\" \", indexOfGeneric);\n      int indexOfEnd = currentField.indexOf(\">\", indexOfSpace);\n      result = currentField.substring(indexOfSpace, indexOfEnd);\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 4
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 5
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-03T13:59:03.093+00:00\",\"changed\":[\"cloned from \\\"CSA U6L4-L7a_2023\\\"\"],\"cloned_from\":\"CSA U6L4-L7a_2023\"},{\"changed_at\":\"2023-04-03 13:59:05 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-17 14:34:28 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-01 19:40:35 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-05 17:13:15 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:14:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:15:27 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:15:49 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:16:42 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:17:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:17:20 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:18:40 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:18:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:20:07 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:20:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:22:57 +0000\",\"changed\":[],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 17:23:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-05 21:04:51 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-08 02:28:30 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-08 02:28:36 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":18414,\"changed_by_email\":\"thomas.wang@code.org\"},{\"changed_at\":\"2023-05-08 13:43:32 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-08 13:44:48 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-05-08 13:44:52 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
