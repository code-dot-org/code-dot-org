<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:49:11.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A company is planning a new social media app, and the software engineer has created a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Profile</code> class to represent a user's profile on the app.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Profile</code> class, write a no-argument constructor to assign default values to the instance variables:\r\n\r\n   * Assign a default name to the instance variable <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code>, such as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"new user\"</code>\r\n\r\n   * Assign a default value to the instance variable <code style=\"background-color: #ececec; color: black; font-weight: bold;\">yearJoined</code>, such as <code style=\"background-color: #ececec; color: black; font-weight: bold;\">2023</code>\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ProfileRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Profile</code> object.\r\n\r\n‚úÖ **TO DO #3:** Print the constructor and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Profile</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a no-argument constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n    <p>Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getYearJoined()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Profile</code> class to get the current values assigned to the instance variables. For example:</p>\r\n    <pre style=\"background-color: #333333; color: white;\">\r\nPlayer hero = new Player();\r\nSystem.out.println(\"Name: \" + hero.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "The Profile Class",
    "bubble_choice_description": "A company is planning a new social media app, and the software engineer has created a `Profile` class to represent a user's profile on the app.",
    "thumbnail_url": "https://images.code.org/147c48047ed61b5411478bc480e21792-social-media.png",
    "start_sources": {
      "ProfileRunner.java": {
        "text": "public class ProfileRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Profile object. Print the constructor to the console using\n     * ConstructorsHelper.printConstructors(nameOfObject), and print the values\n     * assigned to the instance variables using the methods in the Profile class.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Profile.java": {
        "text": "/*\n * Represents a user's profile on a social media app\n */\npublic class Profile {\n\n  private String name;      // The name of a user\n  private int yearJoined;   // The year a user joined the app\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a no-argument constructor to assign default values to the\n   * name and yearJoined instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n\n\n  \n\n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to yearJoined\n   */\n  public int getYearJoined() {\n    return yearJoined;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "encrypted_exemplar_sources": "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\n1aCQLJ6qPkKQbQ==\n",
    "encrypted_validation": "iyolR23o2vQsZinelfpC/QCGX5ZX7Ou2htGtkxH7pDSBU7v/DHytfWTrq+yt\nH3dsP4pWplWh3/Pudq6P3smZGIPXc4vg+UEU+DIzzZdQ8lQysJC30YVFAflu\n+QQ7QuHTnYM9zAhMj7sJtDxH4DMcx8PAxZKKJC2o5AJWmePzc+zbeZJsbSR/\nRx92v5v+EdwRn9a5Kt/M511u7rFb7FiWQUeSj7Jz1OvXJbH9GhQ1ulEMzDhM\n04CN8z/X+bGmuPOPDWdSyiiNYV/odUqeJygq3Pq/VUCvAcVMBI6moARW7IWa\nvLCgt57sM3R1mRNLGOPGG5B+3ZEUAD866TLPVWIeLtfk2bxwvV6q/ovaDdJG\n7+K0kvPDH9MKcDbQUMaHpWI8NAUWSIO1RzTqCrAptYsGhkZ/LmOW6vML08CL\nAyi/ygfkSFxus79zTwJbBepOJwKH0w7gkA+4ikMJ3S5YGS4FIbPOLBMT7lpB\nfCh21RXuwVy8aBmqmc6R5zaGQWQOTOuk9C6VbZnxcMiYPbuwp8J004OIuKcr\n0/Q/W7BlizhhfssaC07YCyxkljhB16VDFpIJKq4wcjFMisGAp3t0ko98+w5U\nbot8zU51wk5T4SefVRTNxH5QGXqxSSTr4DNQsTPVQvmZatHmr7S8eugxIbQm\new1QM5DsbLrCQVusvxzZb6jbD/ElijYao2A0JuRKc6MwCNJ9wI7x9pSf5Qgv\ncj0hW5p2FdUgCE6iGAH4JvioDDAK8X1Z5o4vzDvualN19+OHwrzDyeoygD+a\nLNIRlfCHz0n5cC4nnxPdwU57cyZPf80d1CobAy2gPmTvp7dnv0yh8ZqINYt8\nzJRap3AEzcantbkqKNRggz9VPT1KQFsoKczB7XCLiNlW7ULSz2nw5M3o7GG9\nbQvglw6QAkYJhsVbSw0v/CrfKdPVNKeokkMu0x0+ST4GoFDLkgM9xyLaO0Lz\naWQyz3p90PkTpXRn+2qhLPzn0Pg0ezw9VviCuKOgqMYUE2IHUryynUcsFCzE\nw6jXiU6+eqwDKzJREeQM1W2HY063Y9aYLPlyy4P/dyfltLscNbxq+YMsAl3Q\nyMb+P7YXM82Ws1w8+G43oB1V26s27J7uG65OHvkWiUp7l7B6LhqFxr94q8qn\n6MPUl8Nbc9RPaUx2swufgp4Kvk72li2B9cR0LdGnYy1HLYQVfXJlW6DECV4N\nonG+P5DSHrXBPq7Wp4nx4/pxvKUHPf5ZgR3ljbimUf5Ae/tb8MR2QITFUegd\nLS1Uf2TR5ulb+kJ6TUZeoQk9ziy6xDXat+4HiHOXyH4P2S3A3DaFocd5Qo7a\ncftcF2e+YJOUxd9ymcSvclkii7I8xQeD9m5WcsRlD52UX0orMk5apXFjRtqE\nuinMPogT3cJDoN/bDQssTDLetHaSlUsy5niNSV5tkkURvKHycyqV8gN14AOL\nTAamDziM41voDZxsgt146Di95DAsNc1/c+EHCU0yNpWcpgkEdyGJqB7xXklW\noh06+uz2AabSUsWNZEplOSB9mRUHect9xYcOhWp5NppoeXhUczOB/OldXB6i\nqhDPkaVbNljwMiYVdKqe3Vb1PW80LKG9CjOE88imOzP6rArnAHpqiqmThxmJ\nMUOZ/A5E9u4OkpsYJcQIZsYFA+4PTgU2BOLAvbyk9jvn/vIBLsEyOQAz2RB+\nUmXe7EpT8btGc8sXmK5VuU7IAFfCH+LQDbDVx99Pr2sM5Z9vyYpwYURQAJ2O\nI+zY5ZZliSUVcp/Qwx87205BHpBlksDjehgEKqnI/L+8gd+vDo32WS24RU9Z\nMR44hEG+gre0poxFdmXd0N6RGngdwhyxPr4uCGrpmtyBBp2Dx5Ov7ak08Ljj\nBh/BfOF2PeN6237EpT5Jmd8LFx740QRvpb55r9rtIVPocp4P6x5PTYrA7nNv\n17VbbsZmjIQp1Sw0asmXglRjKd49iUKfwuu4x4ARfKDW+n36OWFxHRIPGgiz\nbvhdh7asJeiQokdJoQRp70hmvaksN+UXuWOxsrWlo/w3ADy57GKwB93P1wDT\nQbpShilM3WanWVUFgidctwfVgUWYl4Nwj3izsYOcPKcxzeJB8xONG8IQcWOf\nFqAvjxX0ZzzQ/unP4qoiCTm6odyq01y4rDUEVGbcIeh8guEny/EIcJjP4HND\nwa6qGXP0prXVPBDtqQknPyhUgu8FhPbYVjoXMjelbEN7IHptV3lOUyOxBK0+\nNV4RPOyQrffj1qA0xfnyvU5wz7gNzuHMfPLsK1H0fwZS/4q9BUrPfMPtkrdh\nY57nBfffMCWTS4raQbGagtc7SS0E8xRwFRuF6OHk2EzZwgoFbn62D1t3/+75\nplSzI/6tLbfBIBbW37UFmwxHLtCO4YZTq913loodGaIvqpjjo1NQKq0hnrtC\n5ONMEyTgZmO3VFDLFrUsQQ9Lo6HM4qLu+kpf7EX7O/wPnlWirJa0ew==\n",
    "name_suffix": "_2024",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:49:11.428+00:00\",\"changed\":[\"cloned from \\\"CSA U2L2-L3b_2023\\\"\"],\"cloned_from\":\"CSA U2L2-L3b_2023\"}]"
}]]></config>
</Javalab>
