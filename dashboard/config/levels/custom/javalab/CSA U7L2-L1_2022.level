<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-02-26T00:32:03.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    boolean isEnrolled = true;\n    \n    Course myCourse = new Course(\"Computer Science\", isEnrolled);\n    Student myStudent = new Student(\"Betsy\", myCourse);\n\n    System.out.println(myStudent);\n\n    \n    \n  }\n}",
        "isVisible": true
      },
      "Student.java": {
        "text": "public class Student {\n\n  private String name;\n  private Course newCourse;\n\n  public Student(String name, Course newCourse) {\n    this.name = name;\n    this.newCourse = newCourse;\n  }\n\n  public void dropCourse(Course theCourse) {\n    theCourse.setStatus(false);\n  }\n\n  public String toString() {\n    return name + \"\\n\" + newCourse;\n  }\n  \n}",
        "isVisible": true
      },
      "Course.java": {
        "text": "public class Course {\n\n  private String name;\n  private boolean status;\n\n  public Course(String name, boolean status) {\n    this.name = name;\n    this.status = status;\n  }\n\n  public void setStatus(boolean newStatus) {\n    status = newStatus;\n  }\n\n  public String toString() {\n    String text = name + \": \";\n\n    if (status) {\n      text = text + \"Enrolled\";\n    }\n    else {\n      text = text + \"Dropped\";\n    }\n\n    return text;\n  }\n  \n}",
        "isVisible": true
      }
    },
    "name_suffix": "_2022",
    "long_instructions": "##Investigate and Modify\r\n\r\nRun the program to observe the results.\r\n\r\nThen, experiment with the program by making the following modifications. Change one line at a time, then run the program after each change to observe the results.\r\n\r\n1. Look at the `dropCourse()`(#e7e8ea) method in `Student.java`(#e7e8ea). What do you notice about its parameter? Does the parameter get a copy of the `Course`(#e7e8ea) object when the method is called?\r\n\r\n2. In `MyConsole.java`(#e7e8ea), add the following code:\r\n\r\n```\r\nmyStudent.dropCourse(myCourse);\r\nSystem.out.println(\"\\n\" + myStudent);\r\nSystem.out.println(\"\\n\" + myCourse);\r\n```\r\n\r\nRun the program. What do you notice about the output? Why do you think this happened?\r\n\r\n3. Look at the `setStatus()`(#e7e8ea) method in `Course.java`(#e7e8ea). What do you notice about its parameter? Does the parameter get a copy of the `boolean`(#e7e8ea) value when the method is called?\r\n\r\n4. In `MyConsole.java`(#e7e8ea), add the following code:\r\n\r\n```\r\nSystem.out.println(\"isEnrolled = \" + isEnrolled);\r\n```\r\n\r\nRun the program. What do you notice about the output? Why do you think this happened?\r\n\r\n5. What do you think will happen if the `myStudent`(#e7e8ea) variable is set to point to a different `Student`(#e7e8ea) object? In `MyConsole.java`(#e7e8ea), add the following code:\r\n\r\n```\r\nmyStudent = new Student(\"Sara\", myCourse);\r\nSystem.out.println(\"\\n\" + myStudent);\r\n```\r\n\r\nRun the program. What do you notice about the output? Why do you think this happened?",
    "teacher_markdown": "##Investigate and Modify\r\n\r\n1. When an object reference is passed into a method as an argument, it does not make a copy of the original object. Instead, the reference to the actual object is what is being manipulated within the method.\r\n\r\n2. When this code is added to the end of the program, the output is as follows: \r\n```\r\nBetsy\r\nComputer Science: Enrolled\r\nBetsy\r\nComputer Science: Dropped\r\nComputer Science: Dropped\r\n```\r\nBy calling `myStudent.dropCourse(myCourse)`(#e7e8ea), we are setting the boolean property `status`(#e7e8ea) within the `Course`(#e7e8ea) object to false. This will indicate that the `Student`(#e7e8ea) is dropped from the course when we print the object to the console using the `toString()`(#e7e8ea) method. The reason that `Computer Science: Dropped`(#e7e8ea) appears twice is because the `toString()`(#e7e8ea) method within the Course class is called within the Student class and within `MyConsole.java`(#e7e8ea) within the following line: `System.out.println(\"\\n\" + myCourse);`(#e7e8ea).\r\n\r\n3. Since `boolean`(#e7e8ea) variables are *primitive*, when this method is called, the primitive `boolean`(#e7e8ea) value that is passed as an argument will be saved to a temporary `boolean`(#e7e8ea) variable `newStatus`(#e7e8ea). Within the method, the value of `newStatus`(#e7e8ea) will be saved into the instance variable `status`(#e7e8ea). There are no object references in this example since `booleans`(#e7e8ea) are *primitive* variable types.\r\n\r\n4. In this example, we are declaring and initializing a `boolean`(#e7e8ea) primitive, `isEnrolled`(#e7e8ea),  within the `main()`(#e7e8ea) method inside of `MyConsole.java`(#e7e8ea). We then pass the initial value (**true**) into the constructor for the `Course`(#e7e8ea) object, `myCourse`(#e7e8ea), we are instantiating. We are not passing in a reference to `isEnrolled`(#e7e8ea) since it is **not** an *object*, but rather a *primitive* variable. When we later use the `.dropCourse()`(#e7e8ea) method to change the `boolean status`(#e7e8ea) within the `myCourse`(#e7e8ea) object, we are changing the instance variable of that object. However, this does not change the original value of the `isEnrolled`(#e7e8ea) variable which is why it still prints **true** in the console.\r\n\r\n5. When we reinstantiate the `myStudent`(#e7e8ea) variable, we are creating a new reference in memory to a new `Student`(#e7e8ea) object. However, since the status of the class is associated with the `Course`(#e7e8ea) object, when we drop the course for *Betsy*, but then reinstantiate the object to be *Sara*, the Computer Science course will still show as dropped since we updated the system variable within the `Course`(#e7e8ea) object to be **false** with the `.dropCourse()`(#e7e8ea) method. The only information in the new object that will be different will be the name of the student.",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-02-26T00:32:03.327+00:00\",\"changed\":[\"cloned from \\\"CSA U7L2-L1\\\"\"],\"cloned_from\":\"CSA U7L2-L1\"},{\"changed_at\":\"2022-05-09 16:39:28 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-09 20:48:06 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-09 20:54:07 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-05-09 20:54:09 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-11-08 16:52:54 +0000\",\"changed\":[\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-11-08 17:54:18 +0000\",\"changed\":[\"encrypted_examples\",\"teacher_markdown\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-11-08 17:56:07 +0000\",\"changed\":[\"encrypted_examples\",\"teacher_markdown\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"},{\"changed_at\":\"2022-11-08 17:56:34 +0000\",\"changed\":[\"encrypted_examples\",\"teacher_markdown\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
