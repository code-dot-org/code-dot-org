<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T21:04:42.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A construction company uses a project management app to keep track of construction tasks, and they need to identify the tasks that have not been started yet.\r\n\r\n✅ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Construction</code> class, write the method <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findIncompleteTasks()</code> to return an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code> containing the tasks are not started.\r\n\r\n✅ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructionRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">findIncompleteTasks()</code> method and print the result using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">tasksToString()</code> method.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Construction Project",
    "bubble_choice_description": "A construction company uses a project management app to keep track of construction tasks, and they need to identify the tasks that have not been started yet.",
    "thumbnail_url": "https://images.code.org/f66815b20979ba49876d4a1fb547a9bd-helmet.png",
    "encrypted_validation": "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\nRZvwpN0eUGWmV5CbC52Bl6LWmEbcOrBihXcMIg==\n",
    "encrypted_exemplar_sources": "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\nUOJ5wOH3jzgQ\n",
    "start_sources": {
      "ConstructionRunner.java": {
        "text": "import java.util.ArrayList;\n\npublic class ConstructionRunner {\n  public static void main(String[] args) {\n\n    // Creates an ArrayList of tasks\n    ArrayList<Task> tasks = new ArrayList<Task>();\n    tasks.add(new Task(\"lay foundation for new building\", true));\n    tasks.add(new Task(\"lay tile in kitchen\", false));\n    tasks.add(new Task(\"hang drywall in living room\", true));\n    tasks.add(new Task(\"paint exterior of house\", false));\n    tasks.add(new Task(\"build new deck in backyard\", false));\n\n    // Creates a Construction object\n    Construction project = new Construction(tasks);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Call the findIncompleteTasks() method and print the results using the\n     * tasksToString() method.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Construction.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a construction company\n */\npublic class Construction {\n  \n  private ArrayList<Task> tasks;      // The list of tasks for a construction project\n  \n  /*\n   * Initializes tasks to the specified list of tasks\n   */\n  public Construction(ArrayList<Task> tasks) {\n    this.tasks = tasks;\n  }\n\n  /*\n   * Returns the list of tasks\n   */\n  public ArrayList<Task> getTasks() {\n    return tasks;\n  }\n\n  /*\n   * Returns an ArrayList containing the tasks that are in progress or not started\n   */\n  public ArrayList<Task> findIncompleteTasks() {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ✅ Traverse the tasks list and return a list that contains all tasks that\n     * have not been started.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return null;\n  }\n\n  /*\n   * Returns a String containing each task in the specified list\n   */\n  public String tasksToString(ArrayList<Task> taskList) {\n    String result = \"\";\n\n    for (int index = 0; index < taskList.size(); index++) {\n      result += taskList.get(index) + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Task.java": {
        "text": "/*\n * Represents a task in a construction project\n */\npublic class Task {\n\n  private String description;    // The description of a task\n  private boolean isStarted;     // Whether or not a task has been started\n\n  /*\n   * Sets description to the specified description\n   * and isStarted to the specified status\n   */\n  public Task(String description, boolean isStarted) {\n    this.description = description;\n    this.isStarted = isStarted;\n  }\n\n  /*\n   * Returns the description of the task\n   */\n  public String getDescription() {\n    return description;\n  }\n\n  /*\n   * Returns whether or not the task has been started\n   */\n  public boolean hasBeenStarted() {\n    return isStarted;\n  }\n\n  /*\n   * Returns a String containing the task description and\n   * whether or not the task has been started\n   */\n  public String toString() {\n    String result = description;\n\n    if (isStarted) {\n      result += \" [In Progress]\";\n    }\n    else {\n      result += \" [Not Started]\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "name_suffix": "_2024",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T21:04:42.912+00:00\",\"changed\":[\"cloned from \\\"CSA U6L7-L7c_2023\\\"\"],\"cloned_from\":\"CSA U6L7-L7c_2023\"}]"
}]]></config>
</Javalab>
