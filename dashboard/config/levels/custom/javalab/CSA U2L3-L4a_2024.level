<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:49:18.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A commissioner wants to track the teams in their sports league.\r\n\r\n‚úÖ **TO DO #1:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class to assign specific values to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numWins</code> instance variables.\r\n\r\n‚úÖ **TO DO #2:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class to assign a specific value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">name</code> instance variable and a default value to the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">numWins</code> instance variable.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TeamRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> objects using each parameterized constructor. \r\n\r\n‚úÖ **TO DO #4:** Print the constructors and the values assigned to the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> object.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing a parameterized constructor and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n\t\t<p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n        <p>\r\n        Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getName()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getNumWins()</code> methods in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Team</code> class to get the current values assigned to the instance variables. For example:</p>\r\n                <pre style=\"background-color: #333333; color: white;\">\r\nTeam basketball = new Team();\r\nSystem.out.println(\"Name: \" + basketball.getName());\r\n</pre>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Sports League",
    "bubble_choice_description": "A commissioner wants to track the teams in their sports league.",
    "thumbnail_url": "https://images.code.org/91a73752dbfe96c50b830c1dde7e984b-sports.png",
    "encrypted_exemplar_sources": "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\nlqaxhHOql+MW7go9\n",
    "encrypted_validation": "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\nlK+ccEI0cIe9EXAGnIPZOrEJCWgU\n",
    "video_key": "csa_overloaded_constructors",
    "start_sources": {
      "TeamRunner.java": {
        "text": "public class TeamRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a Team object using each parameterized constructor,\n     * then print the constructors and values assigned to the instance variables.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Team.java": {
        "text": "/*\n * Represents a team in a sports league\n */\npublic class Team {\n\n  private String name;     // The name of a team\n  private int numWins;     // The number of championship wins\n  \n  /*\n   * Sets the name to \"unknown\" and numWins to 0\n   */\n  public Team() {\n    name = \"unknown\";\n    numWins = 0;\n  }\n\n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign specific values to\n   * the name and numWins instance variables.\n   * -----------------------------------------------------------------------------\n   */\n\n\n\n  \n  /* ----------------------------------- TO DO -----------------------------------\n   * ‚úÖ Write a parameterized constructor to assign a specific value to the\n   * name instance variable and a default value to the numWins instance variable.\n   * -----------------------------------------------------------------------------\n   */\n\n\n  \n  \n  /*\n   * Returns the current value assigned to name\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the current value assigned to numWins\n   */\n  public int getNumWins() {\n    return numWins;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    int end = currentConstructor.indexOf(\")\");\n    \n    if (start < 0 || end < 0 || end < start) {\n        return parametersList;\n    }\n    \n    currentConstructor = currentConstructor.substring(start, end).trim();\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n        String currentParameter = currentConstructor.substring(0, comma).trim();\n        parametersList.add(currentParameter);\n        currentConstructor = currentConstructor.substring(comma + 1).trim();\n        comma = currentConstructor.indexOf(\",\");\n    }\n    \n    if (!currentConstructor.isEmpty()) {\n        parametersList.add(currentConstructor);\n    }\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n  public static String findConstructorWithParameters(ArrayList<String> constructorsList, int expectedParamCount, String... expectedParamTypes) {\n    for (String constructor : constructorsList) {\n        ArrayList<String> actualParameters = getParameters(constructor);\n        if (actualParameters.size() == expectedParamCount) {\n            boolean allParamsMatch = true;\n            for (String expectedParamType : expectedParamTypes) {\n                if (!actualParameters.contains(expectedParamType)) {\n                    allParamsMatch = false;\n                    break;\n                }\n            }\n            if (allParamsMatch) {\n                return constructor;\n            }\n        }\n    }\n    return null;\n  }\n\n  public static boolean hasConstructor(Class<?> clazz, Class<?>... parameterTypes) {\n        try {\n            clazz.getConstructor(parameterTypes);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n  public static Object createInstance(Class<?> clazz, Object... initargs) {\n        try {\n            Class<?>[] parameterTypes = new Class<?>[initargs.length];\n            for (int i = 0; i < initargs.length; i++) {\n                parameterTypes[i] = initargs[i].getClass();\n            }\n            Constructor<?> constructor = clazz.getConstructor(parameterTypes);\n            return constructor.newInstance(initargs);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n   \n}",
        "isVisible": false,
        "tabOrder": 2
      }
    },
    "name_suffix": "_2024"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:49:18.501+00:00\",\"changed\":[\"cloned from \\\"CSA U2L3-L4a_2023\\\"\"],\"cloned_from\":\"CSA U2L3-L4a_2023\"},{\"changed_at\":\"2024-05-09 17:57:54 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18972,\"changed_by_email\":\"sarah.judd@code.org\"},{\"changed_at\":\"2024-05-09 18:01:48 +0000\",\"changed\":[\"encrypted_validation\"],\"changed_by_id\":18972,\"changed_by_email\":\"sarah.judd@code.org\"}]"
}]]></config>
</Javalab>
