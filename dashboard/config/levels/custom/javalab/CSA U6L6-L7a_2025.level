<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-17T00:15:53.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A marketing company needs to analyze customer reviews of their products to identify the most commonly used words and phrases.\r\n\r\nâœ… **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Marketing</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">countWords()</code> method to return the number of times the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">wordToFind</code> appears in each review and returns the result in a new <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ArrayList</code>.\r\n\r\nâœ… **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">MarketingRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">countWords()</code> method and print the results using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">resultsToString()</code> method.\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">ðŸ”¦ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ncreate an ArrayList of Integers\r\n&nbsp;\r\nloop through reviews\r\n  get the current review\r\n  find the space in the current review\r\n  set numTimes to 0\r\n&nbsp;\r\n  while there is a space in the current review\r\n    get the first word\r\n&nbsp;\r\n    if the word equals wordToFind\r\n      numTimes++\r\n&nbsp;\r\n    update the current review to the substring after the space\r\n    find the next space\r\n&nbsp;\r\n  if the remaining current review equals wordToFind\r\n    numTimes++\r\n&nbsp;\r\n  add numTimes to the ArrayList\r\n&nbsp;\r\nreturn the ArrayList\r\n</pre>\r\n    </div>\r\n</details>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "Customer Reviews",
    "bubble_choice_description": "A marketing company needs to analyze customer reviews of their products to identify the most commonly used words and phrases.",
    "thumbnail_url": "https://images.code.org/c011df70c32e3503258763918d0c838d-reviews.png",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "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\n85ScfqjE\n",
    "start_sources": {
      "MarketingRunner.java": {
        "text": "import java.util.ArrayList;\n\npublic class MarketingRunner {\n  public static void main(String[] args) {\n\n    // Creates an ArrayList of reviews\n    ArrayList<String> reviews = new ArrayList<String>();\n    reviews.add(\"This product is great! It's great for all my needs and has made my life so much easier. I would definitely recommend it to anyone looking for a great product.\");\n    reviews.add(\"I had a great experience with this product. The customer service was great and the product itself was great quality\");\n    reviews.add(\"I've been using this product for a few weeks now and it's been great. It's easy to use and has made a great impact on my daily routine. I'm so glad I found this great product\");\n    reviews.add(\"This product is simply great. It exceeded my expectations and has been a great addition to my life. I would highly recommend it to anyone looking for a great product\");\n    reviews.add(\"I can't say enough great things about this product. It's been a great help to me and has made my life so much easier. If you're looking for a great product, this is the one for you\");\n\n    // Creates a Marketing object\n    Marketing company = new Marketing(reviews);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Call the countWords() method and print the results.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Marketing.java": {
        "text": "import java.util.ArrayList;\n\n/*\n * Represents a marketing company\n */\npublic class Marketing {\n    \n  private ArrayList<String> reviews;    // The list of reviews\n  \n  public Marketing(ArrayList<String> reviews) {\n    this.reviews = reviews;\n  }\n\n  /*\n   * Returns an ArrayList containing the number of times the\n   * parameter wordToFind appears in each review\n   */\n  public ArrayList<Integer> countWords(String wordToFind) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * âœ… Create a new ArrayList to contain the counts for each review. Traverse\n     * the reviews list and use the indexOf() and substring() methods to get each\n     * word in each review and check if it equals wordToFind. If so, increment a\n     * count for that review, and add the total for that review to the ArrayList.\n     * -----------------------------------------------------------------------------\n     */\n    \n    \n    return null;\n  }\n\n  /*\n   * Returns a String containing the results\n   */\n  public String resultsToString(String wordToFind, ArrayList<Integer> counts) {\n    String result = \"Number of occurences of \" + wordToFind + \"\\n\";\n\n    for (int index = 0; index < counts.size(); index++) {\n      result += counts.get(index) + \"\\n\";\n    }\n\n    return result;\n  }\n    \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "name_suffix": "_2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-17T00:15:53.336+00:00\",\"changed\":[\"cloned from \\\"CSA U6L6-L7a_2023\\\"\"],\"cloned_from\":\"CSA U6L6-L7a_2023\"}]"
}]]></config>
</Javalab>
