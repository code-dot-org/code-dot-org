<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:49:06.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "long_instructions": "Create the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class by declaring instance variables for the specified attributes, and refactor the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pie</code> class to be a subclass of the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class, declare instance variables for the following attributes:\r\n\r\n   * the flavor of a dessert\r\n   \r\n   * the price of a dessert\r\n\r\n‚úÖ **TO DO #2:** Refactor the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pie</code> class to be a subclass of the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> class.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FoodTruckRunner.java</code>, instantiate a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> object and a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pie</code> object, then print the instance variables for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pie</code> objects by calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">AttributesHelper.printAttributes(nameOfObject)</code> method.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with declaring instance variables, creating a subclass, and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ What is <code style=\"background-color: #ececec; color: black; font-weight: bold;\">AttributesHelper.printAttributes()</code>?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    <p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">AttributesHelper.printAttributes()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nAttributesHelper.printAttributes(fido);\r\n\t  </pre>\r\n      \r\n      <p>This method (along with the tests) will help you check that you declared your instance variables correctly.</p>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "reference_links": [
      "/courses/csa-2023/guides/instance-variables",
      "/courses/csa-2023/guides/inheritance",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "display_name": "Desserts and Pies",
    "bubble_choice_description": "Create the `Dessert` class by declaring instance variables for the specified attributes, and refactor the `Pie` class to be a subclass of the `Dessert` class.",
    "thumbnail_url": "https://images.code.org/9035a1faa42e4530234f38f0678f927a-pie.png",
    "encrypted_exemplar_sources": "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\nh2XHiBs=\n",
    "encrypted_validation": "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\nqAfzeyfJpOVwEuAYnWxla9/8\n",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ------------------------------------- TO DO -------------------------------------\n     * ‚úÖ Instantiate Dessert and Pie objects, then print the instance variables for\n     * the Dessert and Pie objects to the console using AttributesHelper.printAttributes().\n     * ---------------------------------------------------------------------------------\n     */\n\n\n    \n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Dessert.java": {
        "text": "/*\n * Represents a dessert that can be sold at a food truck\n */\npublic class Dessert {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ‚úÖ Declare instance variables for the flavor and price of a dessert.\n   * -------------------------------------------------------------------\n   */\n\n\n\n  \n\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Pie.java": {
        "text": "/*\n * Represents a pie that can be sold at a food truck\n * Pie is a type of Dessert\n */\npublic class Pie {\n\n  /* ------------------------------ TO DO ------------------------------\n   * ‚úÖ Refactor the Pie class to be a subclass of Dessert.\n   * -------------------------------------------------------------------\n   */\n\n  private String flavor;     // The flavor of a pie\n  private double price;      // The price of a pie\n  private int diameter;      // The diameter of a pie\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "AttributesHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class AttributesHelper {\n\n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassFields;\n  private static ArrayList<String> superClassFields;\n\n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassFields = getClassFieldsList(currentClass, currentClassName);\n    superClassFields = getClassFieldsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getCurrentClassFields() {\n    return currentClassFields;\n  }\n  \n  public static ArrayList<String> getSuperClassFields() {\n    return superClassFields;\n  }\n  \n  public static ArrayList<String> getClassFieldsList(Class currentClass, String className) {\n    Field[] classFields = currentClass.getDeclaredFields();\n    ArrayList<String> fieldsList = fieldsToList(Arrays.toString(classFields));\n    cleanFields(fieldsList, className);\n    return fieldsList;\n  }\n  \n  private static ArrayList<String> fieldsToList(String fieldsAsText) {\n    fieldsAsText = fieldsAsText.substring(1, fieldsAsText.length() - 1);\n    ArrayList<String> fieldsList = new ArrayList<String>();\n\n    String currentField = \"\";\n    int comma = fieldsAsText.indexOf(\",\");\n\n    while (comma != -1) {\n      currentField = fieldsAsText.substring(0, comma);\n      fieldsList.add(currentField);\n      fieldsAsText = fieldsAsText.substring(comma + 2);\n      comma = fieldsAsText.indexOf(\",\");\n    }\n\n    fieldsList.add(fieldsAsText);\n    return fieldsList;\n  }\n  \n  public static void cleanFields(ArrayList<String> classFieldsList, String className) {\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String currentField = classFieldsList.get(index);\n\n      currentField = removeClassName(currentField, className);\n      currentField = removeJavaLang(currentField);\n      currentField.trim();\n\n      classFieldsList.set(index, currentField);\n    }\n  }\n  \n  public static String removeClassName(String currentField, String className) {\n    int location = currentField.indexOf(className);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + className.length() + 1);\n      location = currentField.indexOf(className);\n    }\n\n    return currentField;\n  }\n  \n  public static String removeJavaLang(String currentField) {\n    String textToFind = \"java.lang.\";\n    int location = currentField.indexOf(textToFind);\n\n    while (location != -1) {\n      currentField = currentField.substring(0, location) + currentField.substring(location + textToFind.length());\n      location = currentField.indexOf(textToFind);\n    }\n\n    return currentField;\n  }\n  \n  public static String findField(ArrayList<String> classFieldsList, String typeToFind, String className) {\n    String result = \"MISSING\";\n    typeToFind += \" \";\n\n    for (int index = 0; index < classFieldsList.size(); index++) {\n      String current = classFieldsList.get(index);\n\n      if (current.indexOf(typeToFind) > 0) {\n        result = removeClassName(current, className);\n        result = removeJavaLang(result);\n      }\n    }\n\n    return result;\n  }\n  \n  public static String getAccess(String currentField) {\n    String result = \"\";\n\n    if (!currentField.equals(\"MISSING\")) {\n      result = currentField.substring(0, currentField.indexOf(\" \"));\n    \n    }\n\n    return result;\n  }\n  \n  public static String getFieldType(String currentField) {\n    String[] possibleTypes = {\"boolean \", \"int \", \"double \", \"String \"};\n    String result = \"MISSING\";\n\n    for (int index = 0; index < possibleTypes.length; index++) {\n      if (currentField.indexOf(possibleTypes[index]) > 0) {\n        result = possibleTypes[index];\n      }\n    }\n\n    return result.trim();\n  }\n  \n  public static void printAttributes(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getAttributesHeading());\n    System.out.println(getCurrentClassAttributes());\n\n    if (!superClassName.equals(\"Object\")) {\n      System.out.println(getSuperAttributes(superClassName));\n    }\n  }\n  \n  public static String getAttributesHeading() {       \n    String result = currentClassName + \" Class Attributes\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static String getSuperAttributesHeading(String superClassName) {\n    return \"\\n>> inherited from \" + superClassName + \" class <<\\n\";\n  }\n  \n  public static String getCurrentClassAttributes() {\n    ArrayList<String> currentClassFields = getCurrentClassFields();\n    return getListAsText(currentClassFields);\n  }\n  \n  public static String getSuperAttributes(String superClassName) {\n    ArrayList<String> superClassFields = getSuperClassFields();\n    return getSuperAttributesHeading(superClassName) + getListAsText(superClassFields);\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n\n}",
        "isVisible": false,
        "tabOrder": 3
      }
    },
    "video_key": "csa_constructors",
    "name_suffix": "_2024"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:49:06.763+00:00\",\"changed\":[\"cloned from \\\"CSA U2L1-L6b_2023\\\"\"],\"cloned_from\":\"CSA U2L1-L6b_2023\"}]"
}]]></config>
</Javalab>
