<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-17T00:14:05.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A threshold filter converts an image to a black and white image by comparing the grayscale value of each pixel to a threshold value. This type of filter is often used to separate the foreground and background in an image, or to identify specific objects or features within an image.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ThresholdImage</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">threshold()</code> method to apply a threshold filter to each <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> object. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">threshold()</code> method should:\r\n\r\n1. Traverse the 2D array of <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> objects.\r\n\r\n2. Calculate the average of the red, green, and blue values for each <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> object.\r\n\r\n3. If the average is less than the parameter value, set the color of the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> object to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">BLACK</code>.\r\n\r\n4. Otherwise, set the color of the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> object to <code style=\"background-color: #ececec; color: black; font-weight: bold;\">WHITE</code>.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner</code> class,\r\n\r\n1. Instantiate an <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ThresholdImage</code> object with an image in the Asset Manager, then draw the image in the scene without any filters. You can also upload and use your own image.\r\n\r\n2. Add a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">pause()</code> after drawing the image.\r\n\r\n3. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">threshold()</code> method on your image, then draw the image with the filter in the scene.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help with getting and setting color values for a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pixel</code> object.\r\n</div>\r\n\r\n## üéØ Goal\r\n\r\n![](https://images.code.org/ee7d97afa8bedf8eab615c5911f6e917-image-1682902846649.gif)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Threshold Filter",
    "bubble_choice_description": "A threshold filter converts an image to a black and white image by comparing the grayscale value of each pixel to a threshold value. This type of filter is often used to separate the foreground and background in an image, or to identify specific objects or features within an image.",
    "starter_assets": {
      "track.jpg": "e1237911-580d-4006-986d-cc2a4f422586.jpg",
      "starwars.jpg": "e58294b6-9ce8-407a-a356-340f4ca322ca.jpg",
      "speakers.jpg": "6bba206f-8911-4814-80a9-122bf3ccf666.jpg",
      "soccer.jpg": "d6131f2d-d149-4531-8dc6-77cadceee274.jpg",
      "paintbrushes.jpg": "d6285456-be71-4dbe-9153-a0d06113035d.jpg",
      "nature.jpg": "90518c9f-8690-4397-adf7-dd7ea877bc6b.jpg",
      "motivation.jpg": "0d5763b5-931b-4237-ab80-bfe5d0e289bf.jpg",
      "laptop.jpg": "6717f1d8-d5d1-436d-80bb-3f386d8415fb.jpg",
      "guitar.jpg": "4322043b-482b-4cf8-a8d8-b885b67c4aaf.jpg",
      "games.jpg": "2389dbb7-d332-4fef-b3a0-162e4ddfd143.jpg",
      "football.jpg": "6ee1cf15-3122-480f-acc1-e4f074bfaca5.jpg",
      "fashion.jpg": "19a9bf72-04db-42bf-aebf-ee477ea22772.jpg",
      "electricguitars.jpg": "f4a70af2-ce94-4f0e-9ee5-819513626b1d.jpg",
      "donut.jpg": "71a75548-c4b6-4d0f-bb0f-bcd4749be000.jpg",
      "dog.jpg": "1d179fc0-a946-46df-b5a7-f1dcc1b3f405.jpg",
      "cellphone.jpg": "b1b863d8-549d-421e-bfba-793a01a14fba.jpg",
      "basketball.jpg": "5b66fbeb-2c20-48a5-9ebf-5124580e88db.jpg",
      "baseball.jpg": "495f32c5-02b6-4597-90fd-da6c9908d802.jpg",
      "astronaut.jpg": "ff448559-ba57-4812-a2f7-96d8d44c46e1.jpg"
    },
    "encrypted_validation": "GOrLzpmDJ8daYJMOyjWFnb4rohjN4qoVyAS62s+27dnFLBIi5sloNH6voKCG\njmPYqVspJC/KOWSfODiA9C6vkNLpl9HpQ+otIIzFnQvBn9tNWn+MtgSr+xRL\nRzP+z7w1Vtjl7HP0THMyUkb3JEOXh9Rm0xW7D9JyRhyuLpYa/6qju39PrXED\nkcMPfk+gfWWHoU+NAz6QQhQaxQySRAPz4wpYXBneoNDb1zbGVQm/cCNH/EyY\nYGQ/WB3v7QJn9O+CbSMjaZn5WoyPIIiHJm0XEglvV0rY1dxGt7L2G4n/MvFM\n9DTm+T7yHQ3t4rYgGU5YQP+1EnK9EphnhwCBFL2/Xd9NBqwcTNnWpVkx5bCj\neiA0OMO+CI5RL+Kb0gH+zDQlEEezAw5EBJzaDDh5fox8vTdUoUBO8uTWUWKV\nOtKmfZ/sIaQTanMFq2ovZ2ar2FXCpyHreW9W9iqXQ8xBlwq54otyaLqof9Oj\nxUDw976oOlioy32bEfu427b0Ci6pc23ng7WUpk7qkAmUwe/ovkDHgbsuXgK5\nuxv9WHfb7GKz+8arMJIaDSXV+9NbSntnP5HDGQcPp2lkGfxO3TcW4eCtu/f0\nZUjA//LmgDK20mMqRJqSEbXEDAdQyHEdHRa8ux3Ch2d4lyT8J0lMtd6DRGRZ\nB1tqFLZ7ctdKupK/sjvYMQxMeSADG7TDl7HbP5bpkKq7755gCPBiwg4XW6gk\nB/fmZgsKEbRQFkp1PlwPSk3CB4LEIcDoejRwepp+uShFoVaGMOZnL7X17kQM\nxR/1ON1hTvQWXbutSoekTcvXhHLjSYObs34hSt6Plldl87TL3NvN6P12dLWl\nWUPRAK2cZJFiznYiy6sF2P52wFFRNrm8I329hytP6JlcfAUWkEoA9ehsYgG0\ndsr11b6F9iPXt/24XaZzWPd3rEqp5w81s+wIiLS7SGUy3ldiDdKSsYG4fxBs\nVzPoSERm2636qxIt0nN6uVlLkTmSDqzRU+rUhhC4Pj4y/UEJJe/qhH4eTMXx\nsUHyAm9gX3lbggJ1o+UIgxl5DdtkaMrzjfRHNq5LLHr911ALEHtG16BUpw+p\nZV+zcbF+dJTaek/lN7VPPjUwIho8ssW+JrTLD8pgsbkt0bTq3E5JQf22JBSN\ndrz4xoAbWRIAtKIPX6vcwwio0JcYdrmGPqF4KDHvDvrkVpDJEn2PY3km216/\n8FBchNHAFZtMEu/GXi8MA4J5jwefhLfYVAXSsr1bw/BuYeUMVagWgLk9vBNR\nAUUfdyJtDTBRkvRih2ywdO+WQtSmWdQzw1rqfJSWUwYsFcm7jCrQq1maocH4\nTIyd5a3ju+p7EKTGMIUaagLi33f8+7YU3W9gLA9HVlvSaxs1aLfjy5Xhgm3C\nB0bm3AOqDmYeLWLtMBUcN5bGZHt1bHtOymqbF37cuXX2ySE2SQZtIFzifue0\nQorrn6Rg+D+lUyzNj+zegepQb6Jl+qVdlNI0H3RQNmJ5z1mQgXfhmddavZiE\nKzXml1lRw2UOu4eBE44AgI3P6RiX3XR74w2ucsyw9i35hz7GMGmKa/pGpwhc\n7RfGG6HjZoQ2ZtQmkJgL4lhgcyANdeagx5cw2fSwkwMeBH/vxKdCZWfauaex\nu/+hRNRg8VKu/2ZDMtVL7wpCcG/NJ4pdLr9mSkLnu03WOBZbmZ+geQGzTVE8\n598U3md1xbLOmbWbtXNC38i5YGTxGZFt/87/cCTKpzlT4SZxujsCvttBTs1/\ng5AJQ+WMUBuTsRANGWPXcb4L/Pb5PSjaDoc2tlBe0axhS7/64NKsvGjuZ9Hk\nbZ1fTokhNt6sqvAoaL5HhKKQ/d8WaJ/mKK/0jRfmH9jhdnQE7gCMnEqNsSiX\ntxz5aq6ElC2XhKa5H6vvvbSXfvUjjGH1EkQoIcJPJV+h1mSQm5WmUinVCorC\nBbzOS+RsHxmfEuojjeDRdQvgCalrsDnvlpCr+2VQijd67PjEiqkcRJAUCSKW\nPmuje+x5pCxNY/GsJEnXCx4WR4R7//cLEjBSvrJOGkLm4l0KlnQ7uML0oeca\nxip+YdUksBOs0nPgM4233F186RJJz9op3NpkWVi0iaRlXF0utkqd3kmXzmg6\nHt8f9FPSulHQPXUla8mTHiESYFvjn0mR4f/vUqSqmWuWcbk8f/uZzPqhRuFR\npE1ffEdesHDoTGCnqt6pTyijXLFGAvsdPmv21apM6DwXNgX9LQaM2DfGX6yq\nJqN+vWauCbYXfb56jMITg1r92z2L57aOFNc1uYxvREko/BdTieaaGyncF8kL\nlM5ymAa2ZnlmDx/1UO/RkbHryDiPXw3izGZGitLSq5xGk3WjcA8z1zi1S5aE\njq8zkhajJ9gZaTiGYRJUJNm8eDK2sM8Vee3rgeZYmbHKDT3GV58N0tXFKf9S\n+SKNF/Bl4uE+/8SFCBUNBJQ8EY5DGv/7DVM0iPgxL3cn3l0zACH6Y3nmc70g\nNHO//xm7Yn7cLgaw3smPpaw0bjaSgtl0+e3CdvySrB7S4rhI6FFFhak1KMmP\nbAT3NQ9Q8m4Dv9JuBy9qu4PphS43coq0ouA5TVKFkn2ONsbXI32+Qozs8rdH\nNn8Tqm762n0eLQUMB+Ms+Qq3hSeBoEx/kpzJvWOXgE4ItXLGADFFi/sz82sf\nOF83flsgWWH95waY3BJhD6vPhF6OTRGLTH1r6v5bHD8RcTUjPgd/4FWWXI6V\nz3KsLVHyVTJ7LKAAP+cTRNCgNAOKUs0raPJd2QFREAfVVhxFaXWMz01yeK9a\nBpOcoUrq0M58LNGRbJIUtuWSMG975Udm5MChK1dzZTHYbwoui4/okti4VqMh\nXarLfGaPJcauOZVgI4ADFF4efRdGq6f6JrJAkzKH+QgWC1Tc6VHgYUU3warA\npt6b2K0AR7/ICMWXNDS5LjlRHMK1EbIslygxia2EoxTHX8gHQi10oyZhk0Lq\npodhky3KusCdNq/rUH2vNnxfwetqJXRSnL/ByF9coddWXmCMCaXJtdDaN0JZ\nldOhDJuce72MWe16BuuuL5/FYKb7nEKFrS89IW6+6RhaPf8V7bhpLcvTW1ov\nff+vmYfjXBgDakua2Q+E7+KjiYtI6k8z4bVEL9JqrTdsSDyhnU3GOvgtfl4Q\nbUhUKr5wY3Za1oHeatteal04ayFOJQoRZFQvEhMtVomudBBhoSReiTy940pU\neNbGe5BvdTCKpu/bD9smGbiQ8u+rvkytm2X+O4aJ9zcKGoKQI7zgmJufLgo4\n9EeoXtkjub6cpfPrS8EnUkYvYQfLbc/Ef8i9B2Eas0B7npdpwuVLiojbFGOE\nMjHSL1UZZWHrrbbDrBJkbUnXe2uljFXO/YxCUE9x4ZOFLOapADeXgixIV/KG\nkYWi8CPHMuoLbsJrnIpKzNixAnUASTgeZwJv6Aluq3Tg3imybTraNSsKcWzc\n5cDyOzoladQ1tCOluD8xfhftVFE8Zwp8OL7SorArT7tiJcA6tiHgq5krhHi7\niC61q+VIz20Q8c/LZAtl+aB4EOwZrUL+/c+QTt7eVEmfSlIvveuu2EQvTcNu\nMalmT8KXOzoY4LNluaQOeuK8AodkrZ4uW3vO5tMix4JY+8lVIPXGNW4noO5J\n3Z3pPYWzze61XHKP7nj23IyX7VzY2GHa8IZAKvMWP2QBM6YxAHTwIzcLgM5p\nFE3OIo8dQeZGOgIY8ymuWoJ26AzsNhsuV66alr1a9tK7EKape7R36xfL9rjo\nMO9PMLKRxOVk0P0lgloNyzDt1n8AVX4ziDaUoTB2sm3vtOXmXEczpTzWELaa\n41jLfZLi702beFDhUY7y6hrZZBC0n6sfzXAm+F4k3elmTvY1NvhCAQZXBabU\nZRdG8mOB25EWK2Zk382bzCusHzg77/olownPcfuPwL/9SsEiyqZGsO9u20ZA\nCaX+afS7qrNYeM1yfScVuCB9HKXjAoqwpxzEG1GDKItwJLM0R3OUNI/q0n3g\n4dNk2keevatAuVasS/1avXyhBa1vm63x1k322ljzzFFlIwfiI3bwrwyRmF1f\n4L0Hw5Wm2i1W5tmfkJmqH71oBjtvZi04jFC2wT9Z0uvJOR95iAg5d2AaEwbI\njKoLjgUY8XeFcmUCXyS9gyZSpoDPjq4rSoSPuC9cztWebh27G2ViH6U4Y4zb\ndE2IWK/U3VnTXkOsXblW\n",
    "encrypted_exemplar_sources": "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\ns2qX1llyvlpzdR9HUjhdGDdWEq5omC7hLg==\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Creates a Scene object\n    Scene images = new Scene();\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate a ThresholdImage object, and draw the image in the scene\n     * with no filter. Then call the threshold() method, and draw the image in the\n     * scene with the filter.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n\n    // Plays the scene\n    Theater.playScenes(images);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ImagePlus.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Represents an image that can be modified with filters and effects\n */\npublic class ImagePlus extends Image {\n\n  private Pixel[][] pixels;    // The 2D array of pixels\n\n  /*\n   * Sets the superclass filename to the specified filename\n   * and calls the getPixelsFromImage() method to initialize\n   * the 2D array of Pixel objects that make up the image\n   */\n  public ImagePlus(String filename) {\n    super(filename);   // Calls the Image class constructor\n\n    // Initialize the pixels array by getting the pixels from the image\n    pixels = getPixelsFromImage();\n  }\n\n  /*\n   * Returns the 2D array of pixels\n   */\n  public Pixel[][] getImagePixels() {\n    return pixels;\n  }\n\n  /*\n   * Returns the pixels in the image as a 2D array of Pixel objects\n   */\n  public Pixel[][] getPixelsFromImage() {\n    Pixel[][] tempPixels = new Pixel[getHeight()][getWidth()];\n    \n    for (int row = 0; row < tempPixels.length; row++) {\n      for (int col = 0; col < tempPixels[0].length; col++) {\n        tempPixels[row][col] = getPixel(col, row);\n      }\n    }\n\n    return tempPixels;\n  }\n\n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "ThresholdImage.java": {
        "text": "import org.code.theater.*;\nimport org.code.media.*;\n\n/*\n * Represents an image with a threshold filter\n */\npublic class ThresholdImage extends ImagePlus {\n\n  /*\n   * Calls the superclass constructor to initialize pixels\n   */\n  public ThresholdImage(String filename) {\n    super(filename);\n  }\n\n  /*\n   * Applies a threshold filter to an image\n   */\n  public void threshold(int value) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Get the pixels from the image, and traverse the 2D array of Pixel objects.\n     * Calculate the average of the red, green, and blue value of each Pixel. If the\n     * average is less than the parameter value, set the color of the Pixel to BLACK.\n     * Otherwise, set the color of the Pixel to WHITE.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "thumbnail_url": "https://images.code.org/94c4f89a0839a3a4fdf27b147991d794-optionB.gif",
    "name_suffix": "_2025",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-17T00:14:05.952+00:00\",\"changed\":[\"cloned from \\\"CSA U5L8-L5b_2023\\\"\"],\"cloned_from\":\"CSA U5L8-L5b_2023\"}]"
}]]></config>
</Javalab>
