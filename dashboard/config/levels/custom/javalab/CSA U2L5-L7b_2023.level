<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-12-14T20:35:41.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "Now that Joyful Pastries food truck owner can create <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> objects with specific flavors and prices, they would like to create <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pie</code> objects with specific values as well.\r\n\r\nüéí **IMPORT:** Import your <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Dessert</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pie</code> classes from your **Backpack**.\r\n\r\n*Don't have it, or it doesn't work? That's ok! Copy the code from* <a href=\"https://studio.code.org/projects/javalab/TTB1mj-3ttbJMHuVg3FFROGMo8eDlIjuoVteNUkGFPQ\" target=\"_blank\">***here***</a> *and paste it into a new file in your project.*\r\n\r\n‚úÖ **TO DO #1:** Write a no-argument constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pie</code> class.\r\n\r\n‚úÖ **TO DO #2:** Write a parameterized constructor in the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pie</code> class.\r\n\r\n‚úÖ **TO DO #3:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">FoodTruckRunner.java</code>, instantiate <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Pie</code> objects using each constructor.\r\n\r\n‚úÖ **TO DO #4:** Print the constructors for the objects.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing no-argument and parameterized constructors, using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">super</code> keyword, and instantiating objects.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ How do I print the information?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ConstructorsHelper.printConstructors()</code> is a hidden support method that prints the instance variables in a class to the console. For example:</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\nDog fido = new Dog();\r\nConstructorsHelper.printConstructors(fido);\r\n</pre>\r\n      <p>This method (along with the tests) will help you check that you wrote your constructors correctly.</p>\r\n    </div>\r\n</details>\r\n\r\n## ***Don't forget to . . .***\r\n\r\n![](https://images.code.org/eb2c8910ae2e150019b8e2177405d4af-image-1668191576873.png)",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "FoodTruckRunner.java": {
        "text": "public class FoodTruckRunner {\n  public static void main(String[] args) {\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Instantiate objects using the no-argument and parameterized\n     * constructors. Then use ConstructorsHelper.printConstructors(nameOfObject)\n     * to print the constructors for the objects to the console.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "ConstructorsHelper.java": {
        "text": "import java.lang.reflect.*;\nimport java.util.*;\n\npublic final class ConstructorsHelper {\n  \n  private static Class currentClass;\n  private static Class superClass;\n  private static String currentClassName;\n  private static String superClassName;\n  private static ArrayList<String> currentClassConstructors;\n  private static ArrayList<String> superClassConstructors;\n\n  public static void printConstructors(Object currentObject) {\n    setInfo(currentObject);\n\n    System.out.println(getConstructorsHeading());\n    System.out.println(getCurrentClassConstructors());\n  }\n  \n  public static String getConstructorsHeading() {\n    String result = getCurrentClassName() + \" Class Constructors\";\n    result += \"\\n------------------------------\";\n    return result;\n  }\n  \n  public static void setInfo(Object testObject) {\n    currentClass = testObject.getClass();\n    superClass = currentClass.getSuperclass();\n\n    currentClassName = currentClass.getSimpleName();\n    superClassName = superClass.getSimpleName();\n\n    currentClassConstructors = getClassConstructorsList(currentClass, currentClassName);\n    superClassConstructors = getClassConstructorsList(superClass, superClassName);\n  }\n  \n  public static String getCurrentClassName() {\n    return currentClassName;\n  }\n  \n  public static String getSuperClassName() {\n    return superClassName;\n  }\n  \n  public static ArrayList<String> getClassConstructors() {\n    return currentClassConstructors;\n  }\n  \n  public static ArrayList<String> getSuperClassConstructors() {\n    return superClassConstructors;\n  }\n  \n  public static ArrayList<String> getClassConstructorsList(Class currentClass, String className) {\n    Constructor[] classConstructors = currentClass.getDeclaredConstructors();\n    ArrayList<String> constructorsList = constructorsToList(Arrays.toString(classConstructors));\n    cleanConstructors(constructorsList);\n    return constructorsList;\n  }\n  \n  private static ArrayList<String> constructorsToList(String constructorsAsText) {\n    constructorsAsText = constructorsAsText.substring(1, constructorsAsText.length() - 1);\n    ArrayList<String> constructorsList = new ArrayList<String>();\n\n    String currentConstructor = \"\";\n    int start = constructorsAsText.indexOf(\"public\");\n    int end = constructorsAsText.indexOf(\")\");\n\n    while (start != -1 && end != -1) {\n      currentConstructor = constructorsAsText.substring(start, end + 1);\n      constructorsList.add(currentConstructor);\n      constructorsAsText = constructorsAsText.substring(end + 1);\n      start = constructorsAsText.indexOf(\"public\");\n      end = constructorsAsText.indexOf(\")\");\n    }\n\n    constructorsList.add(constructorsAsText);\n    return constructorsList;\n  }\n  \n  public static void cleanConstructors(ArrayList<String> classConstructorsList) {\n    for (int index = 0; index < classConstructorsList.size(); index++) {\n      String currentConstructor = classConstructorsList.get(index);\n\n      currentConstructor = removeJavaLang(currentConstructor);\n      currentConstructor.trim();\n\n      classConstructorsList.set(index, currentConstructor);\n    }\n  }\n\n  public static String getCurrentClassConstructors() {\n    ArrayList<String> currentClassConstructors = getClassConstructors();\n    return getListAsText(currentClassConstructors);\n  }\n  \n  public static String removeJavaLang(String currentConstructor) {\n    String textToFind = \"java.lang.\";\n    int location = currentConstructor.indexOf(textToFind);\n\n    while (location != -1) {\n      currentConstructor = currentConstructor.substring(0, location) + currentConstructor.substring(location + textToFind.length());\n      location = currentConstructor.indexOf(textToFind);\n    }\n\n    return currentConstructor;\n  }\n  \n  public static ArrayList<String> getParameters(String currentConstructor) {\n    ArrayList<String> parametersList = new ArrayList<String>();\n    \n    int start = currentConstructor.indexOf(\"(\") + 1;\n    \n    currentConstructor = currentConstructor.substring(start);\n    int comma = currentConstructor.indexOf(\",\");\n    \n    while (comma != -1) {\n      String currentParameter = currentConstructor.substring(0, comma);\n      parametersList.add(currentParameter);\n      currentConstructor = currentConstructor.substring(comma + 1);\n      comma = currentConstructor.indexOf(\",\");\n    }\n    \n    parametersList.add(currentConstructor.substring(0, currentConstructor.length() - 1));\n    \n    return parametersList;\n  }\n  \n  public static String getListAsText(ArrayList<String> classInfoList) {\n    String result = \"\";\n\n    for (String currentField : classInfoList) {\n      result += currentField + \"\\n\";\n    }\n\n    return result.trim();\n  }\n   \n}",
        "isVisible": false,
        "tabOrder": 1
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/no-argument-constructors",
      "/courses/csa-2023/guides/parameterized-constructors",
      "/courses/csa-2023/guides/the-super-keyword",
      "/courses/csa-2023/guides/instantiating-objects"
    ],
    "encrypted_exemplar_sources": "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\n",
    "display_name": "The Pie Class",
    "bubble_choice_description": "Import your `Pie` class and write no-argument and parameterized constructors to assign values to its instance variables.",
    "thumbnail_url": "https://images.code.org/a636b4682dab3465f76b4a3e7bce0949-pie.png",
    "encrypted_validation": "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\n",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-12-14T20:35:41.711+00:00\",\"changed\":[\"cloned from \\\"CSA U2L5-L7_2023\\\"\"],\"cloned_from\":\"CSA U2L5-L7_2023\"},{\"changed_at\":\"2022-12-14 20:51:47 +0000\",\"changed\":[\"long_instructions\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 21:53:36 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 21:54:03 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 21:55:25 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-12-14 22:00:03 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-14 16:57:15 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-09-19 19:59:30 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":18603,\"changed_by_email\":\"erik+levelbuilder@code.org\"}]"
}]]></config>
</Javalab>
