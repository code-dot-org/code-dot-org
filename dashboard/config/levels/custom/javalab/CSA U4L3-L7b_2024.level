<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-12T20:58:33.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A researcher wants to determine an approximate width of the largest cities in the world by land area.\r\n\r\nThe researcher assumes that each city is shaped like a circle. To find the approximate width of each city, the researcher needs to find the square root of each value in <code style=\"background-color: #ececec; color: black; font-weight: bold;\">landAreas</code> divided by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math.PI</code>.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Research.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calculateSizes()</code> method to return a 1D array containing the approximate width of each city. The <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calculateSizes()</code> method should:\r\n\r\n1. Traverse the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">cities</code> array.\r\n\r\n2. Calculate the width of the city using the formula\r\n\r\n<pre style=\"background-color: #333333; color: white;\">\r\n( &radic;(land area * pi) ) * 2\r\n</pre>\r\n\r\n3. Return a 1D <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> array containing the approximate width of each city.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">ResearchRunner.java</code>,\r\n\r\n1. Declare and initialize a 1D <code style=\"background-color: #ececec; color: black; font-weight: bold;\">double</code> array to store the array returned from calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">calculateSizes()</code> method.\r\n\r\n2. Use the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">sizesToString()</code> method to get the values in the 1D array as a <code style=\"background-color: #ececec; color: black; font-weight: bold;\">String</code> and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the documentation for the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math</code> class in the <strong>Documentation</strong> tab ‚¨ÜÔ∏è for help using the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Math.sqrt()</code> method.\r\n</div>\r\n\r\n<details style=\"background-color: #ececec; padding: 10px; margin-bottom: 10px; border: 1px solid transparent; border-radius: 5px;\">\r\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">üî¶ Need help with your algorithm?</summary>\r\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\r\n    \t<p>Here is one approach to solving this problem.</p>\r\n        <pre style=\"background-color: #333333; color: white;\">\r\ncreate double array that is length of cities\r\n&nbsp;\r\nloop from 0 to cities.length\r\n  result[index] = Math.sqrt(cities[index].getArea() * Math.PI) * 2\r\n&nbsp;\r\nreturn results\r\n</pre>\r\n    </div>\r\n</details>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "display_name": "City Sizes",
    "bubble_choice_description": "A researcher wants to determine an approximate width of the largest cities in the world by land area.",
    "thumbnail_url": "https://images.code.org/5757594de9c7f3d963698c070fb9c073-city.png",
    "encrypted_validation": "TnagUL+QNCt5j/SPNq+2Aru1wc7b8O2yDsS9RCPYQ7aSSgYsE/SsSXCq4awO\nb8wHA6n05NAOnNJH21n63bF9oDNDM6GYshTMXCLRkD/3/azxYBj7cpRi8qwz\nOJWsK/zO2+LTn6PKWAGySTPZbd0FCghB4/QbP+whhyavA17yc8O5AnrWoF1Q\nNOnUvR8FV359RxefcK7fARx/hFk8J2ySW/y/Klte4YOf/MHK+mWXRN2sDcKZ\nm3+ZdRcpraYu+qWmPHl3f7Z7umm+KdjFjeBy+tyKfBOF3lXqgJssJwG8r1+b\nzyxea6HlJmdtLKa/DZCX2D4KvKZsoMDD1dRrwAfa+byGRU+hMg4U74mfzmoZ\nDaOyqlBCD1Rbgiq+dJRo0+iXGNd+3jDynTHYahrZfV3IdQf4btcDynYKm4Qo\nlYbBKHPctMl2C2iLoTE+a6eOo3E3q/yNlTFduqWWD1ZYtqmAS744BwuOH6vy\n6GooBERpB64dBpq36lAnqglFGW2PHYTinyRbX9REMHwyHg1OL/e61+erCR4U\nXdmBQXuTLLumBNcEqa1DEh0uoiVXIn32pzgkvb0e2fYDpOLAceer4zrUhQwV\ncWyKnNBPmB3BilwCbTzPnbuQrYJRtXOlpHYgLtJWGsDwsfGtKm0UdhgRclpj\nTjtjjUIgP1MhgRjznLZmofS8M1ZOa+vRgPJ+HM/QzDKdZzIsfbj4hlvprKjG\n69JxKf1L1a8d2R+2wmxO0MiKgXpT/kTWhh/MDgWyqxW9SBkRoT4wYL9W7VzA\nd57EZhfvHY2VxzVMYJ/1xKp47sVNL+uywf3ABNEGYaTEg0oF3M7NTuP3ihbD\nY9jIx/Ei1e/PpY4FVEDD2iUeYMKvin5HOHe+aaqpOmpi24z6a49TXegYz/oh\ntl30XtjyWPcJhHEGNPeshe0CdAkw+iYJdCjF9HbZx/UGZEahtIfQwzwRJWaf\nLQQ2nFND1rD1Ak/eSHBOLe217/YiXgJXSjo+U9Sg73osgJs+3xiMd3ylQYIq\ngxD0qdM7pd1YPOdLH+hoPzEucnSU7sTxGxegvcJ5pKeKgxJ9bSqISKHhiGRU\nWF7UfUwn4dSCh+u5+FPW4Y+rAULdQtxY950T0y2Akw7HMeMp4gHeIoErnOWb\nN1AllPx/DpL5jVtrkwYq4rgZmkGquN+JYBFAWn0rJi4UL2OmQvpIWLcelqMU\n3G2az0ghKGyx8KsgHSR7xmlQJe/d9jPTMdpuIxspiJ7izRc927OJgUlP4v/R\nPCRpVVozai01q4ztv+D+uOjxpaFzY5Z0KmS4agJQzjFczIYs1B5/NhsIWMLn\ny+wVQgZJI+9Iw4oJFMp2kdskgNrAb3HPMCRakTOX+XZQ2addWhEBbFX0aYtC\nRmHnG7d33bxzhlQfMIrGe5M9KFUPkScJ5s54QZx3DlkaBjuABuyN2/FOg10r\nx2ZiVvWig3GEpfs2wx7Njqwn80Ro0iJRoBZK9jv3yQhByZtWHSPPRrEMTUXo\nVPudI4TgLr/p2fzoNMd4sdYAIzMFY/qSEiG1NGFkZDnoQaCF3FWFI45z0M2V\nyZfE2Gk9Dff6gztxmDbPvt1PxNA+tpv4o7BsQWYgxSjtYZZwfx6tKnKqWBZR\n9GW9aZHefB3oxOW4DlQBJrf1IUmMLVXeDNQMaDnPAdnM1vJyd8fHY2tpzJJZ\n0rN7bUDcLZW0dDOWEG2JhBddMYS5uOqGVnWOb8uf+n3sS4NqQ8Jzzt+wbZlr\nA7k0Tjh2qIcJkqA3GApio2eT9k1zwscYaoS1l/XWJ8zj/WIYPWVCoqVfcKwB\nGblbLCBxc+92vj91bJTb5mtGaIyfDIjd9pnww546bVori+HAPr4le9FpHt8X\nJleAepqGduI1nyIyRcOJdV9uI+2XGGW+6RhpsVr7wlkWx+5LivD6VQftgpny\nxu4aDgAiO9214/9WU8DJdph/JaW97gK6kQxp5qKlG631koxSolTsbCa0VfML\nNtDKq2ncsU2QReIugtRwFPdnr2OA/6iRNxl/JVaBCXLCGqGAYWODrC6GkSM9\nvSEjimGdb6u4onI3f9CFeNQFt3zhJo3RkOzyIhg2bDBrTZOc2ImvRJQvYGUi\nXAPoqu0ghpY5Wkx6K/KFqmnVx9GrE29HDQz9MeAex71ebMAT7tuHIPpkEZNU\nQvKE78ciQRxrxn2tjiDu/HyvhkSb+thMM+G5o84doFBKNZtIepEyuYIqvfw=\n",
    "start_sources": {
      "ResearchRunner.java": {
        "text": "public class ResearchRunner {\n  public static void main(String[] args) {\n\n    // Creates a 1D array of city names\n    String[] names = {\"New York\", \"Tokyo\", \"Chicago\", \"Atlanta\", \"Philadelphia\", \"Boston\",\n                      \"Los Angeles\", \"Dallas/Fort Worth\", \"Houston\", \"Detroit\"};\n\n    // Creates a 1D array of the land areas of each city\n    double[] cityAreas = {8683, 6993, 5498, 5083, 4661, 4497, 4320, 3644, 3355, 3267};\n\n    // Creates a Research object\n    Research cities = new Research(names, cityAreas);\n\n    /* ------------------------------------------- TO DO -------------------------------------------\n     * ‚úÖ Call the calculateSizes() method and print the results using the sizesToString() method.\n     * ---------------------------------------------------------------------------------------------\n     */\n\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Research.java": {
        "text": "/*\n * Analyzes city data\n */\npublic class Research {\n\n  private String[] names;    // The 1D array of the names of each city\n  private double[] cities;   // The 1D array of the land area of each city\n\n  /*\n   * Initializes names and cities to the specified 1D arrays\n   */\n  public Research(String[] names, double[] cities) {\n    this.names = names;\n    this.cities = cities;\n  }\n\n  /*\n   * Returns the 1D array of names\n   */\n  public String[] getNames() {\n    return names;\n  }\n\n  /*\n   * Returns the 1D array of cities\n   */\n  public double[] getCities() {\n    return cities;\n  }\n\n  /*\n   * Returns a 1D array containing the approximate\n   * width of each city in cities\n   */\n  public double[] calculateSizes() {\n    /* ------------------------------------------- TO DO -------------------------------------------\n     * ‚úÖ Get the square root of each city value multiplied by Math.PI, then multiply the result\n     * by 2. Add the result to a new 1D array and return the array.\n     * ---------------------------------------------------------------------------------------------\n     */\n    \n    \n    \n    return null;\n  }\n\n  /*\n   * Returns a String containing the values in the 1D array\n   */\n  public String sizesToString(double[] values) {\n    String result = \"\";\n\n    for (int index = 0; index < values.length; index++) {\n      result += names[index] + \": \" + values[index] + \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "encrypted_exemplar_sources": "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\nvEsdvIs+Hg==\n",
    "name_suffix": "_2024",
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-12T20:58:33.919+00:00\",\"changed\":[\"cloned from \\\"CSA U4L3-L7b_2023\\\"\"],\"cloned_from\":\"CSA U4L3-L7b_2023\"},{\"changed_at\":\"2024-07-25 05:18:41 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":17326,\"changed_by_email\":\"larsensn@yahoo.com\"},{\"changed_at\":\"2024-07-25 05:19:44 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":17326,\"changed_by_email\":\"larsensn@yahoo.com\"}]"
}]]></config>
</Javalab>
