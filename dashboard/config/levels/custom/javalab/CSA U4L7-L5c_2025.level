<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2024-01-16T23:55:13.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "A scientist is analyzing data about meteorite landings. They want to determine if the number of meteorites is changing each year.\r\n\r\n‚úÖ **TO DO #1:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Landings.java</code>, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getMeteoritesByYear()</code> method to return the number of meteorites that landed since the parameter <code style=\"background-color: #ececec; color: black; font-weight: bold;\">year</code> where the length of its class is greater than <code style=\"background-color: #ececec; color: black; font-weight: bold;\">3</code>.\r\n\r\n‚úÖ **TO DO #2:** In <code style=\"background-color: #ececec; color: black; font-weight: bold;\">TheaterRunner.java</code>, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">drawResult()</code> method with the *int* returned from calling the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getMeteoritesByYear()</code> method.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with writing nested <code style=\"background-color: #ececec; color: black; font-weight: bold;\">if</code> statements.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "theater",
    "display_name": "Meteorite Landings",
    "bubble_choice_description": "A scientist is analyzing data about meteorite landings. They want to determine if the number of meteorites is changing each year.",
    "thumbnail_url": "https://images.code.org/080cca2dafe60a8bbc9c9393da6afdad-comet.png",
    "starter_assets": {
      "meteorite.png": "98cd4fb1-3845-418e-a476-6e80b500b22c.png"
    },
    "encrypted_validation": "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\npOISK0mMqj0dKDoc\n",
    "start_sources": {
      "TheaterRunner.java": {
        "text": "import org.code.theater.*;\n\npublic class TheaterRunner {\n  public static void main(String[] args) {\n\n    // Reads the data from the text files into a 1D array of Meteorite objects\n    Meteorite[] meteors = Meteorite.createMeteors(\"names.txt\", \"classes.txt\", \"years.txt\");\n\n    // Creates a Landings object\n    Landings scene = new Landings(meteors);\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the getMeteoritesByYear() method then pass the result to a call to\n     * the drawResult() method.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    \n    \n    // Plays the scene\n    Theater.playScenes(scene);\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Landings.java": {
        "text": "import org.code.theater.*;\n\n/*\n * Creates a visualization for meteorite data\n */\npublic class Landings extends Scene {\n\n  private Meteorite[] meteors;    // The 1D array of Meteorite objects\n\n  /*\n   * Initializes meteors to the specified 1D array of Meteorite objects\n   */\n  public Landings(Meteorite[] meteors) {\n    this.meteors = meteors;\n  }\n\n  /*\n   * Returns the 1D array of Meteorite objects\n   */\n  public Meteorite[] getMeteors() {\n    return meteors;\n  }\n\n  /*\n   * Returns the number of meteorites that landed in the parameter year\n   * where the length of its recommended classification is greater than 3\n   */\n  public int getMeteoritesByYear(int year) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Count and return the number of meteorites that landed in the parameter\n     * year where the length of its recommended classification is greater than 3.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    \n    return -1;\n  }\n\n  /*\n   * Draws the result in the scene\n   */\n  public void drawResult(int year, int count) {\n    int numMeteors = count;\n    while (numMeteors > 0) {\n      int randomX = (int)(Math.random() * getWidth());\n      int randomY = (int)(Math.random() * getHeight());\n      drawImage(\"meteorite.png\", randomX, randomY, 100);\n      pause(0.1);\n      numMeteors--;\n    }\n\n    pause(0.5);\n    drawText(\"There have been \" + count + \" meteorites\", 50, 100);\n    drawText(\"that landed since \" + year, 50, 125);\n    drawText(\"where the length of its class\", 50, 150);\n    drawText(\"is greater than 3.\", 50, 175);\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "Meteorite.java": {
        "text": "/*\n * Represents a meteorite landing\n */\npublic class Meteorite {\n\n  private String name;       // The name of a meteorite\n  private String recClass;   // The recommended classification of a meteorite\n  private int year;          // The year a meteorite landed\n\n  /*\n   * Sets name, class, and year to the specified values\n   */\n  public Meteorite(String name, String recClass, int year) {\n    this.name = name;\n    this.recClass = recClass;\n    this.year = year;\n  }\n\n  /*\n   * Returns the name of the meteorite\n   */\n  public String getName() {\n    return name;\n  }\n\n  /*\n   * Returns the recommended classification of the meteorite\n   */\n  public String getRecClass() {\n    return recClass;\n  }\n\n  /*\n   * Returns the year the meteorite landed\n   */\n  public int getYear() {\n    return year;\n  }\n\n  /*\n   * Returns a 1D array of Meteorite objects using the data in the specified text files\n   */\n  public static Meteorite[] createMeteors(String namesFile, String classesFile, String yearsFile) {\n    String[] namesData = FileReader.toStringArray(namesFile);\n    String[] classesData = FileReader.toStringArray(classesFile);\n    int[] yearsData = FileReader.toIntArray(yearsFile);\n    Meteorite[] meteorsData = new Meteorite[namesData.length];\n\n    for (int index = 0; index < meteorsData.length; index++) {\n      meteorsData[index] = new Meteorite(namesData[index], classesData[index], yearsData[index]);\n    }\n\n    return meteorsData;\n  }\n\n  /*\n   * Returns a String containing information about the meteorite\n   */\n  public String toString() {\n    return name + \" (\" + year + \") - \" + recClass;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 3
      },
      "names.txt": {
        "text": "Hammadah al Hamra 038\nFrontier Mountain 03067\nAiken\nLaPaz Icefield 03805\nNorthwest Africa 529\nKuleschovka\nYamato 790432\nAndryushki\nFrontier Mountain 90156\nNorthwest Africa 7695\nYamato 983432\nGrove Mountains 022638\nMiller Range 07329\nLewis Cliff 86070\nYamato 981929\nGrove Mountains 052449\nNorthwest Africa 763\nAcfer 318\nDar al Gani 995\nKsar Ghilane 011\nDar al Gani 124\nMiller Range 090009\nAllan Hills 83005\nElephant Moraine 96118\nElephant Moraine 96089\nAcfer 398\nMiller Range 090245\nDar al Gani 041\nJiddat al Harasis 697\nQueen Alexandra Range 90259\nYamato 790476\nYabrin 002\nAllan Hills A77024\nSayh al Uhaymir 501\nDar al Gani 375\nMacAlpine Hills 041031\nNorthwest Africa 5721\nGrosvenor Mountains 03029\nDhofar 1221\nElephant Moraine 92170\nQueen Alexandra Range 99222\nYamato 794028\nNorthwest Africa 1522\nNorthwest Africa 4218\nMeteorite Hills 00626\nYamato 86309\nYamato 86698\nDhofar 455\nMiller Range 07403\nMiller Range 07092",
        "isVisible": true,
        "tabOrder": 4
      },
      "classes.txt": {
        "text": "H4\nH6\nH5\nR4\nL3.7\nH4\nH~4\nDiogenite\nH6\nL6\nL6\nL5\nL6\nLL6\nH5\nCM2\nH6\nEucrite\nH5\nL5\nH4\nH5\nH5\nL6\nH6\nL6\nH5\nL6\nH6\nL4\nCO3\nH3\nMesosiderite\nH5\nH4\nL4\nH4\nL6\nH4-5\nL5\nH4\nH4\nH3\nL6\nLL6\nH5\nL5\nL6\nL6\nL4",
        "isVisible": true,
        "tabOrder": 5
      },
      "years.txt": {
        "text": "1997\n2008\n1979\n1990\n2006\n2009\n2009\n2011\n1980\n1994\n1993\n2003\n1982\n1982\n2003\n2001\n2002\n1997\n2003\n1939\n2006\n2006\n1990\n1992\n1986\n1979\n1988\n1996\n1993\n2001\n1979\n1999\n1979\n1995\n1991\n2003\n2006\n2001\n2002\n2001\n2001\n2002\n2003\n2010\n2000\n1986\n2003\n1996\n1984\n2009",
        "isVisible": true,
        "tabOrder": 6
      }
    },
    "encrypted_exemplar_sources": "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\n",
    "name_suffix": "_2025"
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2024-01-16T23:55:13.005+00:00\",\"changed\":[\"cloned from \\\"CSA U4L7-L5c_2023\\\"\"],\"cloned_from\":\"CSA U4L7-L5c_2023\"}]"
}]]></config>
</Javalab>
