<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "## Finding Patterns\r\n\r\nComplete the <a href=\"https://docs.google.com/document/d/1OJIjB4GPp5eqri8qIIceuUGUYl8bzEYXbH3qXIpcg9I/edit?usp=sharing\" target=\"_blank\"><strong>Finding Patterns</strong></a> activity guide to identify the patterns and relationships you notice in this dataset.",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "DataRunner.java": {
        "text": "public class DataRunner {\n  public static void main(String[] args) {\n\n    String[] planetsFirstSet = {\"planet.txt\", \"diameter.txt\", \"density.txt\", \"gravity.txt\", \"rotation.txt\", \"length.txt\", \"distance.txt\", \"orbit.txt\"};\n    String[] planetsSecondSet = {\"planet.txt\", \"velocity.txt\", \"inclination.txt\", \"temp.txt\", \"moons.txt\", \"rings.txt\", \"magnetic.txt\"};\n\n    DataManager firstData = new DataManager(planetsFirstSet);\n    DataManager secondData = new DataManager(planetsSecondSet);\n    \n    System.out.println(firstData.showDataset());\n    System.out.println(secondData.showDataset());\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "FileReader.java": {
        "text": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class FileReader {\n\n  public static String[] toStringArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    String[] data = new String[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = currentValue;\n    }\n\n    return data;\n  }\n\n  public static int[] toIntArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    int[] data = new int[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Integer.parseInt(currentValue);\n    }\n\n    return data;\n  }\n\n  public static double[] toDoubleArray(String filename) {\n    ArrayList<String> temp = readDataFromFile(filename);\n    double[] data = new double[temp.size()];\n\n    for (int index = 0; index < data.length; index++) {\n      String currentValue = temp.get(index);\n      data[index] = Double.parseDouble(currentValue);\n    }\n\n    return data;\n  }\n\n  private static Scanner createScanner(File theFile) {\n    Scanner tempScanner = null;\n\n    try {\n      tempScanner = new Scanner(theFile);\n    } catch(FileNotFoundException error) {\n      System.out.println(\"File not found.\");\n    }\n\n    return tempScanner;\n  }\n\n  private static ArrayList<String> readDataFromFile(String filename) {\n    File dataFile = new File(filename);\n    Scanner reader = createScanner(dataFile);\n    ArrayList<String> temp = new ArrayList<String>();\n\n    while (reader.hasNextLine()) {\n      String currentLine = reader.nextLine().trim();\n      temp.add(currentLine);\n    }\n\n    reader.close();\n    return temp;\n  }\n  \n}",
        "isVisible": false,
        "tabOrder": 1
      },
      "DataManager.java": {
        "text": "/*\n * Reads and displays data from text files\n */\npublic class DataManager {\n\n  private String[] textFiles;    // The 1D array of text files\n  private Data[] dataset;        // The 1D array of Data objects\n\n  /*\n   * Sets textFiles to the specified text files and initializes\n   * dataset to store Data objects for each text file\n   */\n  public DataManager(String[] textFiles) {\n    this.textFiles = textFiles;\n    dataset = new Data[textFiles.length];\n  }\n\n  /*\n   * Creates the datasets and returns the dataset values\n   */\n  public String showDataset() {\n    createData();\n    return getDatasetValues();\n  }\n\n  /*\n   * Instantiates each Data object in the 1D array dataset\n   * using each text file from the 1D array textfiles\n   */\n  public void createData() {\n    for (int index = 0; index < dataset.length; index++) {\n      dataset[index] = new Data(textFiles[index]);\n    }\n  }\n\n  /*\n   * Returns a String containing the values from each Data object\n   */\n  public String getDatasetValues() {\n    String result = \"\";\n\n    // Gets the length of the first Data object's 1D array of values\n    int valuesLength = dataset[0].getNumValues();\n\n    // Outer loop repeats from the first value to the last value of the first Data object's 1D array of values\n    for (int index = 0; index < valuesLength; index++) {\n\n      // Inner loop goes through each Data object to get the corresponding value from each 1D array of values\n      for (Data values : dataset) {\n        \n        // String.format() formats a String using format specifiers. In \"%-30s\", the \"%\" indicates the start of the format specifier,\n        // the \"-\" means the String is left-justified, \"25\" indicates the width of the field, and \"s\" indicates a String\n        result += String.format(\"%-25s\", values.getValue(index));\n      }\n\n      // Adds a new line character after getting a row of data\n      result += \"\\n\";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      },
      "Data.java": {
        "text": "/*\n * Manages data from a text file\n */\npublic class Data {\n\n  private String filename;    // The name of a text file\n  private String[] values;    // The 1D array containing the values from a text file\n\n  /*\n   * Sets filename to the specified filename and initializes\n   * values to store the values from the file\n   */\n  public Data(String filename) {\n    this.filename = filename;\n    values = FileReader.toStringArray(filename);\n  }\n\n  /*\n   * Returns the 1D array of values\n   */\n  public String[] getValues() {\n    return values;\n  }\n\n  /*\n   * Returns a value at a specified index from values\n   */\n  public String getValue(int index) {\n    return values[index];\n  }\n\n  /*\n   * Returns the number of elements in values\n   */ \n  public int getNumValues() {\n    return values.length;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 3
      },
      "planet.txt": {
        "text": "NAME\n------\nMercury\nVenus\nEarth\nMars\nJupiter\nSaturn\nUranus\nNeptune\nPluto",
        "isVisible": true,
        "tabOrder": 4
      },
      "diameter.txt": {
        "text": "DIAMETER\n------\n4879\n12104\n12756\n6792\n142984\n120536\n51118\n49528\n2370",
        "isVisible": true,
        "tabOrder": 5
      },
      "density.txt": {
        "text": "DENSITY\n------\n5427\n5243\n5514\n3933\n1326\n687\n1271\n1638\n2095",
        "isVisible": true,
        "tabOrder": 6
      },
      "gravity.txt": {
        "text": "GRAVITY\n-----\n3.7\n8.9\n9.8\n3.7\n23.1\n9\n8.7\n11\n0.7",
        "isVisible": true,
        "tabOrder": 7
      },
      "rotation.txt": {
        "text": "ROTATION PERIOD\n------\n1407.6\n-5832.5\n23.9\n24.6\n9.9\n10.7\n-17.2\n16.1\n-153.3",
        "isVisible": true,
        "tabOrder": 8
      },
      "length.txt": {
        "text": "LENGTH OF DAY\n------\n4222.6\n2802\n24\n24.7\n9.9\n10.7\n17.2\n16.1\n153.3",
        "isVisible": true,
        "tabOrder": 9
      },
      "distance.txt": {
        "text": "DISTANCE FROM SUN\n------\n57.9\n108.2\n149.6\n227.9\n778.6\n1433.5\n2872.5\n4495.1\n5906.4",
        "isVisible": true,
        "tabOrder": 10
      },
      "orbit.txt": {
        "text": "ORBITAL PERIOD\n------\n88\n224.7\n365.2\n687\n4331\n10747\n30589\n59800\n90560",
        "isVisible": true,
        "tabOrder": 11
      },
      "velocity.txt": {
        "text": "ORBITAL VELOCITY\n------\n47.4\n35\n29.8\n24.1\n13.1\n9.7\n6.8\n5.4\n4.7",
        "isVisible": true,
        "tabOrder": 12
      },
      "inclination.txt": {
        "text": "ORBITAL INCLINATION\n------\n7\n3.4\n0\n1.9\n1.3\n2.5\n0.8\n1.8\n17.2",
        "isVisible": true,
        "tabOrder": 13
      },
      "temp.txt": {
        "text": "MEAN TEMPERATURE\n------\n167\n464\n15\n-65\n-110\n-140\n-195\n-200\n-225",
        "isVisible": true,
        "tabOrder": 14
      },
      "moons.txt": {
        "text": "NUMBER OF MOONS\n------\n0\n0\n1\n2\n79\n62\n27\n14\n5",
        "isVisible": true,
        "tabOrder": 15
      },
      "rings.txt": {
        "text": "HAS RING SYSTEM\n------\nNo\nNo\nNo\nNo\nYes\nYes\nYes\nYes\nNo",
        "isVisible": true,
        "tabOrder": 16
      },
      "magnetic.txt": {
        "text": "HAS GLOBAL MAGNETIC FIELD\n------\nYes\nNo\nYes\nNo\nYes\nYes\nYes\nYes\nUnknown",
        "isVisible": true,
        "tabOrder": 17
      }
    },
    "display_name": "Planets",
    "bubble_choice_description": "Dataset containing information about the planets of our solar system.",
    "thumbnail_url": "https://images.code.org/8752071e09f95264e90667c5b91f3ccf-solar-system.png"
  },
  "game_id": 68,
  "created_at": "2023-02-17T19:16:06.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-02-17T19:16:06.662+00:00\",\"changed\":[\"cloned from \\\"CSA U4L8-L5q_2023\\\"\"],\"cloned_from\":\"CSA U4L8-L5q_2023\"},{\"changed_at\":\"2023-02-17 19:16:08 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 13:49:53 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 14:41:26 +0000\",\"changed\":[\"long_instructions\",\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 15:46:26 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 16:05:33 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-03-29 16:05:46 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
