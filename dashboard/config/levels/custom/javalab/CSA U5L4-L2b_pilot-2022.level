<Javalab>
  <config><![CDATA[{
  "game_id": 68,
  "created_at": "2022-08-23T20:50:01.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "properties": {
    "encrypted": "false",
    "long_instructions": "The owner of the Project Mercury Pastries Food Truck business assigns food trucks for each day of the week in several cities. The owner stores these food trucks in a 2D array, where each row represents a unique city. Each column represents Monday, Tuesday, Wednesday, Thursday, and Friday, respectively.\r\n\r\nThe owner wants to reverse the order of food trucks assigned for each city.\r\n\r\n##In Owner.java:\r\n\r\n1. Write the `reverseFoodTrucks()`(#e7e8ea) method to reverse each row in the 2D array `foodTrucks`(#e7e8ea).\r\n\r\n##In MyConsole.java:\r\n\r\n2. Call the `reverseFoodTrucks()`(#e7e8ea) method and print the results.\r\n\r\n::: details [**Show Me How**]\r\nA `for`(#e7e8ea) loop uses the following syntax:\r\n  \r\n  ```\r\n  for (int variableName = startingValue; condition; variableName_change) {\r\n    // code to execute\r\n  }\r\n  ```\r\n\r\nBe sure to change `variableName`(#e7e8ea) to a name you can easily identify, such as `index`(#e7e8ea), and set the `startingValue`(#e7e8ea) to the value you want to start the loop.\r\n:::",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "project_template_level_name": "CSA U5L4-L2b PBT_pilot-2022",
    "display_name": "Food Trucks",
    "bubble_choice_description": "The owner of the Project Mercury Pastries Food Truck business assigns food trucks for each day of the week in several cities. They want to reverse the order of food trucks assigned for each city.",
    "thumbnail_url": "https://images.code.org/ea1b090b2fbb2c289dabfdaa149ade05-image-1651095705021.png",
    "encrypted_exemplar_sources": "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\nLoaFLHHonTmJQ9MEV6tGmfE=\n",
    "name_suffix": "_pilot-2022",
    "encrypted_validation": "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\n",
    "start_sources": {
      "MyConsole.java": {
        "text": "public class MyConsole {\n  public static void main(String[] args) {\n\n    // Instantiates FoodTruck objects\n    FoodTruck littleRock1 = new FoodTruck(\"Little Rock Truck #1\");\n    FoodTruck littleRock2 = new FoodTruck(\"Little Rock Truck #2\");\n    FoodTruck littleRock3 = new FoodTruck(\"Little Rock Truck #3\");\n\n    FoodTruck lansing1 = new FoodTruck(\"Lansing Truck #1\");\n    FoodTruck lansing2 = new FoodTruck(\"Lansing Truck #2\");\n    FoodTruck lansing3 = new FoodTruck(\"Lansing Truck #3\");\n\n    FoodTruck austin1 = new FoodTruck(\"Austin Truck #1\");\n    FoodTruck austin2 = new FoodTruck(\"Austin Truck #2\");\n    FoodTruck austin3 = new FoodTruck(\"Austin Truck #3\");\n\n    FoodTruck batonRouge1 = new FoodTruck(\"Baton Rouge Truck #1\");\n    FoodTruck batonRouge2 = new FoodTruck(\"Baton Rouge Truck #2\");\n    FoodTruck batonRouge3 = new FoodTruck(\"Baton Rouge Truck #3\");\n\n    // Creates a 2D array of FoodTruck objects\n    FoodTruck[][] myFoodTrucks = {{littleRock1, littleRock2, littleRock3},\n                                  {lansing1, lansing2, lansing3},\n                                  {austin1, austin2, austin3},\n                                  {batonRouge1, batonRouge2, batonRouge3}};\n\n    // Instantiates an Owner object with the myFoodTrucks array and prints the names\n    Owner myOwner = new Owner(myFoodTrucks);\n    myOwner.printFoodTrucks();\n\n    // TO DO #2: Call the reverseFoodTrucks() method and print the results.\n\n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Owner.java": {
        "text": "/*\n * Represents the owner of the food truck business\n */\npublic class Owner {\n\n  private FoodTruck[][] foodTrucks;   // The 2D array of food trucks\n\n  /*\n   * Constructor to create an Owner with\n   * the specified 2D array of food trucks\n   */\n  public Owner(FoodTruck[][] foodTrucks) {\n    this.foodTrucks = foodTrucks;\n  }\n\n  /*\n   * Returns the 2D array of food trucks\n   */\n  public FoodTruck[][] getFoodTrucks() {\n    return foodTrucks;\n  }\n\n  /*\n   * Prints the name of each food truck\n   */\n  public void printFoodTrucks() {\n    for (int row = 0; row < foodTrucks.length; row++) {\n      for (int col = 0; col < foodTrucks[0].length; col++) {\n        System.out.print(foodTrucks[row][col].getName() + \" \");\n      }\n\n      System.out.println();\n    }\n  }\n\n  /*\n   * Reverses the order of the food trucks for each city\n   */\n  public void reverseFoodTrucks() {\n    // TO DO #1: Reverse each row in the foodTrucks array.\n\n    \n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "FoodTruck.java": {
        "text": "/*\n * Represents a food truck\n */\npublic class FoodTruck {\n\n  private String name;  // The name of the food truck\n\n  /*\n   * Constructor to create a FoodTruck\n   * with the specified name\n   */\n  public FoodTruck(String name) {\n    this.name = name;\n  }\n\n  /*\n   * Return the name of the food truck\n   */\n  public String getName() {\n    return name;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 2
      }
    },
    "ai_tutor_available": true
  },
  "published": true,
  "audit_log": "[{\"changed_at\":\"2022-08-23T20:50:01.991+00:00\",\"changed\":[\"cloned from \\\"CSA U5L4-L2b_2022\\\"\"],\"cloned_from\":\"CSA U5L4-L2b_2022\"},{\"changed_at\":\"2022-10-09 20:42:36 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-09 20:42:42 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2022-10-09 20:49:57 +0000\",\"changed\":[\"encrypted_exemplar_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
