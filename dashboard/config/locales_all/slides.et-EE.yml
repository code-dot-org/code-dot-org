"et":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: |
          Tere tulemast oma koodi esimene tund! Let's sukelduda otse oma esimese maitse programmeerimine.
          Tere tulemast oma esimesse programmeerimise tundi! Sukeldume otse sinu esimesse programmeerimise kogemusse.
      2:
        image: notes/hoc1_2.jpg
        text: Me hakkame kasutame Blocklyt, visuaalse programmeerimise keelt, kus
          koodi kirjutamiseks lohistatakse koodiplokid sobivasse järjestusse.
      3:
        image: notes/hoc1_3.jpg
        text: Enamik koodi on eelnevalt sisestatud, kuid Blockly on rohkem visuaalne.
          Igale plokile vastab rida "päris" koodi.
      4:
        image: notes/hoc1_4.jpg
        text: Te hakkate õppima arvutiteaduse põhaluseid, mõisteid mida kasutatakse
          igal pool, äppide tegemisest kuni Marsi kulguri kontrolimiseni.
      5:
        image: notes/hoc1_5.jpg
        text: Programm on lihtsalt üks komplekt juhiseid sinu arvuti jaoks.
      6:
        image: notes/hoc1_6.jpg
        text: Sinu esimese programmi eesmärk on aidata Angry Bird´i lind läbi labürindi
          et ta saaks lüüa Rohelist Siga.
      7:
        image: notes/hoc1_7.jpg
        text: Vasakul pool on labürint kus teie programm töötab. Igale puslele on
          labürindi all juhised.
      8:
        image: notes/hoc1_8.jpg
        text: Keskmises tööriista kastis (programmi ja tööruumi vahel) on käsud Angry
          Bird´i linnule. Sa hakkad neid kasutama et ehitada oma  koodi.
      9:
        image: notes/hoc1_9.jpg
        text: Paremal pool on tööruum, koht kus saad ehitada koodi. Ploki lisamiseks
          tööruumi lohista mõni element tööristakastist tööruumi sobivasse kohta.
          Elemendi kustutamiseks lohista see nurgas olevasse prügikasti.
      10:
        image: notes/hoc1_10.jpg
        text: Iga plokk on üks juhis. Kui sa lohistad "liigu edasi" ploki oma tööruumi
          ja vajutad "Käivita Programm", liigub lind ühe koha labürindis.
      11:
        image: notes/hoc1_11.jpg
        text: Et teha rohkem kui ühte asja, saad sa lohistada mitu plokki oma tööruumi
          ja ühendada nad omavahel kokku. Lind täidab käske ülevalt alla.
      12:
        image: notes/hoc1_12.jpg
        text: Kui olete käivitanud programmi aga tahate seda parandada ja uuest proovida,
          vajuta "Lähtesta" nuppu.
      13:
        image: notes/hoc1_13.jpg
        text: Järele neile põrsastele!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Tere, mina olen JR! iga võidusõiduauto tiim vajab arvutiteadlast et
          võita. Nad analüüsivad autost pärinevaid andmeid ja panevad selle kiiremini
          liikuma.
      2:
        image: notes/stage5_2.jpg
        text: Nendes mõistatustes oled sa kunstnik, kes tõmbab joone igale poole kuhu
          ta läheb.
      3:
        image: notes/stage5_3.jpg
        text: See plokk ütleb "liigu edasi 100 pikslit." Pikslid on lihtsalt ühed
          väikesed punktikesed mis moodustavad pildi sinu ekraanil.
      4:
        image: notes/stage5_4.jpg
        text: See plokk ütleb "pööra 90 kraadi paremale." See pöörab sinu kunstnikku
          sama palju kui "pööra" plokid labürindi pusledes.
      5:
        image: notes/stage5_5.jpg
        text: Vajuta noolele kummaski plokis et muuta seda kui palju kunstnik edasi
          liigub või pöörab. Katseta seda noole asja et seda tundma õppida.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Tere, ma olen Paola! Nendes pusledes oled talunik kes peab oma põllu
          täielikult siledaks saama et midagi külvata.
      2:
        image: notes/stage9_2.jpg
        text: Sa pead aitama tal eemaldada kõik mulla hunnikud ja aitama tal auke
          täita.
      3:
        image: notes/stage9_3.jpg
        text: Uued plokid eemaldavad 1 labidatäie mulda hunnikust ja panevad 1 kühvlitäie
          mulda auku.
      4:
        image: notes/stage9_4.jpg
        text: Mullahunnikud ja augud on erineva suurussega, seega pead ütlema mitut
          labidatäit kasutada.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Tere, mina olen Katie! Üks kõige põnevamaid asju arvutiteaduses on see,
          et arvutid saavad olla interaktiivsed.
      2:
        image: notes/flappy02.jpg
        text: Ükskõik millal, kui keegi klikib, vajutab ekraanile või kirjutab arvutis
          või telefonis luuakse SÜNDMUS ja siin on jupp koodi mis otsustab mida teha
          kui SÜNDMUS aset leiab.
      3:
        image: notes/flappy03.jpg
        text: 'Näiteks sul võib olla mõni SÜNDMUSE- KÄSITSEJA mis ütleb "kui klikitakse,
          mängitakse heli" '
      4:
        image: notes/flappy04.jpg
        text: Kas sa oled kuulnud midagi FlappyBird´i mängust? Kasutades Sündmuse
          käsitsejaid hakkame õppima seda, kuidas teha oma FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Koodi mida sa plokkide lohistamisega "kirjutad" on arvuti jaoks käsud.
          Iga plokk on esindatud päris koodiga.
      6:
        image: notes/flappy06.jpg
        text: 'Kui vaatad oma tööruumi siis võid märgata, et seal on juba mõned rohelised
          plokid, need on "sündmuste käsitsejad" '
      7:
        image: notes/flappy07.jpg
        text: If you want the bird to FLAP when you CLICK the mouse, you can do that
          by attaching the "FLAP" block to the appropriate event handler, and now
          in your game whenever you click the mouse, the bird will flap.
      8:
        image: notes/flappy08.jpg
        text: igas pusles tutvustame uusi sündmusi roheliste plokkidena tööruumis,
          sina saad otsustada selle üle, millise ploki sa sinna paned vastavalt nendele
          sündmustele.
      9:
        image: notes/flappy09.jpg
        text: Kui sa näed mõne ploki küles alla suunatud nooli nagu see, siis tähendab
          see seda et sa saad ,uuta selle ploki seadeid- nagu näiteks mis heli mängitakse
          kui FlappyBird´i lind kukub vastu maad.
      10:
        image: notes/flappy10.jpg
        text: Viimases pusles saad luua oma enda mängu ja seda jagada oma sõpradega.
          Kasuta oma loovust!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Tere, olen Mark! Õpime kordusi. Korduste kasutamine ütleb arvutile et
          ta kordaks valitud tegevuste gruppi uuest ja uuesti, tuhandeid või isegi
          miljardeid kordi.
      2:
        image: notes/hoc2_2.jpg
        text: Selles pusles tahame et lind liiguks viis kohta edasi, et püüda siga.
      3:
        image: notes/hoc2_3.jpg
        text: Saame kasutada uut "korda" plokki et meid välja aidata.
      4:
        image: notes/hoc2_4.jpg
        text: Selle asemel et lohistada viis "liigu edasi" plokki ritta kasuta...
      5:
        image: notes/hoc2_5.jpg
        text: pane "liigu edasi" plokk "korda" ploki sisse ja kirjuta plokki number
          et määrata mitu korda tegevust korrata tuleb.
      6:
        image: notes/hoc2_6.jpg
        text: 'Oluline on see et: sa saad "korda" ploki sisse rohkem kui ühe ploki.'
      7:
        image: notes/hoc2_7.jpg
        text: Naudi oma uue "korda" ploki kasutamist!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Tere, olen Chris. Enne Miami Heatiga läksin Georgiasse et õppida arvutiteaduse
          õpetajaks. Proovime uut plokki, "korda kuni" plokki.
      2:
        image: notes/hoc3_2.jpg
        text: Mis oleks, kui me ei teaks, kui kaugele peaks lind liikuma, et siga
          kätte saada?
      3:
        image: notes/hoc3_3.jpg
        text: Kui me paneme "liigu edasi" ploki "korda kuni" ploki sisse siis lind
          liigub nii kaua edasi KUNI ta jõuab seani (või põrkab seinaga kokku).
      4:
        image: notes/hoc3_4.jpg
        text: 'Oluline: nagu ennegi saame me nüüd panna mitu plokki "korda kuni" ploki
          sisse ja neid kõiki korratakse.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: Tere. olen Bill! Õpime uue põhimõiste, "kui" avalduse. Arvuti teeb selle
          abil otsuseid.
      2:
        image: notes/hoc4_2.jpg
        text: Sa kasutad "kui" avaldust iga päev. Näiteks kui lähed hommikul õue,
          sa mõtled et KUI õues sajab, pean kandma jopet.
      3:
        image: notes/hoc4_3.jpg
        text: Me saame zombil lasta kontrollida KAS vasakul pool on rada ja kui ta
          leiab raja vasakule siis me saame panna ta pöörama sinna suunas.
      4:
        image: notes/hoc4_4.jpg
        text: Et kirjutada selleks koodi, lohista tööruumi "kui" plokk ja pane sinna
          sisse "pööra vasakule" plokk.
      5:
        image: notes/hoc4_5.jpg
        text: Nüüd kui me paneme "liigu edasi"ploki selle kohale ja nad omakorda veel
          "korda" ploki sisse, siis iga kord kui zombi liigub siis ta kontrollib kas
          vasakule poole on rada ja sinna saab pöörata. Käsk "korda" on siin kriitilise
          tähtsusega, kuna zombi peab kontrollima rada iga astumise järel.
      6:
        image: notes/hoc4_6.jpg
        text: 'Kui avaldused on arvutiteaduses väga tähtsad. Üks esimestest programmidest
          mille kirjutasin oli tic-tac.toe-mäng. Selle mängu koodis oli "kui" avaldis
          mis ütles: KUI teine inimene hakkab võitma, siis tuleb blokeerida koht mis
          laseks tal võita.'
      7:
        image: notes/hoc4_7.jpg
        text: Lõbutse "kui" plokki kasutades!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hi, my name is Saloni. I use computer science to help solve problems
          in health and medicine. Let's learn about the "if else" block. It looks
          like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: If I put a "move forward" block in the spot where it says "do" and a
          "turn left" block where it says "else" that means that the zombie will choose
          between 2 options. IF there is a path ahead, the zombie will move forward,
          and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: Just like the "if" block, we can put "if else" blocks inside a "repeat"
          blocks so that the zombie keeps moving and the "if else" block will keep
          checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: An if-else statement is a decision between two things. Let's see how
          we can use an if-else statement with our buddy Scrat the squirrel.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: This block looks the same as the "if" block, but there's an extra part
          at the bottom that says "else". If I put a "move forward" block where it
          says "do" and a "turn left" block where it says "else", that means Scrat
          the squirrel will move forward if there's a path ahead. If there's not a
          path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: It's making a decision and doing one of the two actions based on that
          decision. And just like "if" blocks, you can put "if-else" blocks inside
          "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Aitame Scratil, oraval jõuda tammetõruni!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Tere, olen Brina, Instagrami insener. Funktsioon on kindel rida koodi,
          mida sa tahad korduvalt kasutada, selle asemel et kirjutada seda koodi iga
          kord välja, saad sa kasutada ühte plokki.
      2:
        image: notes/stage13_2.jpg
        text: Me hakkame õppima kuidas defineerida funktsiooni. Funktsiooni definitsioonidel
          on nurgas täht. Funktsiooni nimetus on kirjutatud ülemisele joonele.
      3:
        image: notes/stage13_3.jpg
        text: Plokid mis lähevad definitsiooni sisse, ütlevad meile mida see teeb.
          Selle funktsiooni definitsioon on "täida 5" ja see on tehtud "korda" ja
          "täida" plokist.
      4:
        image: notes/stage13_4.jpg
        text: The definition sits on the workspace, but our farmer won't run the function
          until we drag out our "fill 5" function block from functions category.
      5:
        image: notes/stage13_5.jpg
        text: 'Paneme "fun"i tagasi "FUNction"isse! (tõlkimatu nali) '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hi, I''m Makinde! Let''s learn about the "while block." '
      2:
        image: notes/stage9_6.jpg
        text: '"Tingimusel plokk" teeb mida iganes sa selle sisse paned NIIKAUA KUNI
          väide üleval on TÕENE.'
      3:
        image: notes/stage9_7.jpg
        text: Näiteks, kui talunik on hunniku otsas, jätkab ta 1 kühvlitäie eemaldamist
          tingimusel, et tema all on veel hunnik.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: tere, olen Trina, töötan Pixaris. Ma olen töötanud paljude filmide kallal,
          kaasa arvatud Shreki.
      2:
        image: notes/stage11_2.jpg
        text: See on meie uus "loendur" tsükkel. See sooritab korduvalt toiminguid,
          aga sa saad tegevusi igal korra jaoks natuke muuta.
      3:
        image: notes/stage11_3.jpg
        text: In this example, our "counter" loop says "count with counter from 50
          to 90 by 10" and inside it, we have our "draw a square" block. Drag the
          "counter" block from the "Variables" section into the "length" spot.
      4:
        image: notes/stage11_4.jpg
        text: This means our artist is going to draw a square that has 50 pixel length
          sides, then it will add 10 to that and draw a square with 60 pixel length
          sides. Then it will keep adding 10 and drawing squares until it reaches
          90. So we'll have squares of 50, 60, 70, 80, and 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hi, I'm Janete, and I'm an engineer at Zynga.
      2:
        image: notes/stage15_2.jpg
        text: What if we want to draw a bunch of triangles and have their lengths
          be different sizes?
      3:
        image: notes/stage15_3.jpg
        text: We could write all that code out by hand or we can use a function with
          parameters.
      4:
        image: notes/stage15_4.jpg
        text: To do this, click the blue star on the "draw a triangle" function definition.
          Then drag "input name" into the "input" block.
      5:
        image: notes/stage15_5.jpg
        text: Then if you write "length" in the spot where it says "x" and press "Enter"
          you'll create a length input for your function.
      6:
        image: notes/stage15_6.jpg
        text: Then click on the star. Now, you want to click on the variables category
          and drag the "length" block into the "move forward" block of your function
          definition. And drag away the old number block.
      7:
        image: notes/stage15_7.jpg
        text: To use your function with parameters, click on the functions category
          and drag out your "draw a triangle with length" function.
      8:
        image: notes/stage15_8.jpg
        text: Now you can use the math block to input different numbers to draw triangles
          of different sizes.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Congratulations! With the last puzzle you solved, you just wrote code
          that can tell ANY robot how to find it's way through a non-branching maze
          or tunnel of any length, whether it's a zombie, a bird, a mars rover, or
          even a self-driving car.
      2:
        image: notes/hoc6_2.jpg
        text: The basic concepts you used are at the heart of every program or app
          you'll ever try.  We learned about repeat loops, repeat until statements,
          if statements, and if else statements.
      3:
        image: notes/hoc6_3.jpg
        text: If you liked your first hour of code, visit code.org to continue your
          education into computer science! Once you complete our 20 hour course, you'll
          have mastered the basics of programming, and can start learning how to write
          phone apps, robot instructions, games, you name it.
      4:
        image: notes/hoc6_4.jpg
        text: 'Technology is changing everything we do and it doesn''t matter if you''re
          young or old: programming is fun, it''s creative, and anyone can learn!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Show notes coming soon!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Tere, olen Lyndsey. Ma modelleerin, näitlen ja kirjutan oma äppe. Kasutame
          koodi et panna Anna ja Elsa seltsima kui nad jää maagiat ja ilu avastavad.
      2:
        image: notes/frozen1_2.jpg
        text: Sa saad teha lumehelbeid ja teisi mustreid kui sa uisutad. Nii saad
          teha oma talve võlumaa, mida saad ka oma sõpradega jagada.
      3:
        image: notes/frozen1_3.jpg
        text: Järgmises tunnis hakkame õppima koodi kirjutamise põhialuseid. Traditsiooniline
          programmeerimine on tavaliselt teksti kirjutamine aga meie kasutame Blocklyt,
          see kasutab visuaalseid plokke, mida saad lohistadam, et programme kirjutada.
          Sel meetodil õpitakse põhitõdesid isegi ülikoolides. Tegelikult loote ikkagi
          koodi, hoolimata sellest, et te ise näete ainult plokke.
      4:
        image: notes/frozen1_4.jpg
        text: Programm on juhiste kogum, mis ütleb arvutile mida teha. Ehitame koodi
          või programmi, mis aitab Elsal luua lihtsa sirgjoone. Hakkame seda edaspidi
          kasutama et luua raskemaid mustreid.
      5:
        image: notes/frozen1_5.jpg
        text: Sinu ekraan on jaotatud kolmeks põhiosaks. Vasakul on jääväljak, koht
          kus sinu programm käib. Iga taseme juhised on selle alla kirjutatud.
      6:
        image: notes/frozen1_6.jpg
        text: Keskmine ala on tööriistakast ja iga plokk seal on tegevus mida Elsa
          ja Anna teha saavad.
      7:
        image: notes/frozen1_7.jpg
        text: Valget ala vasakul nimetatakse tööruumiks, see on koht kus sa oma programmi
          ehitama hakkad. Jääl liikumiseks kasuta "Liigu Edasi" plokki.
      8:
        image: notes/frozen1_8.jpg
        text: Plokk "Liigu Edasi" plokk tähendab "liigu edasi 100 piksli võrra." Kui
          vajutad "Käivita", mis juhtub? Elsa liigub ekraanil edasi 100 pikslit.
      9:
        image: notes/frozen1_9.jpg
        text: Teine plokk mis meil siin pusles on ütleb "pööra paremale 90 kraadi
          võrra." "pööra paremale" plokk paneb Elsa pöörama teatud nurga. Saad katsetada
          kui kaugele tahad Elsat pöörama panna. Nurka mõõdetakse Elsa ette jäävast
          rajast. Niisiis see pöörab 90 kraadi. Ja see pöörab 120 kraadi.
      10:
        image: notes/frozen1_10.jpg
        text: Pea meeles, sa saad ploki peal olevale noolele vajutades muuta seda,
          kui palju tegelane pöörab või edasi liigub.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hi, I’m Paola! Computers are really good at repeating actions. You can
          count to 10, 20, or 100. But a computer can count to a billion or a trillion.
          It won't get bored and it will only take a few seconds. Whether it's counting,
          or drawing, or anything--computers can repeat things hundreds or even billions
          of times.
      2:
        image: notes/frozen2_2.jpg
        text: In programming, we call this a loop. A loop is how you repeat your code
          over and over again. For the next puzzle, your goal is to help Anna create
          a square with the "Repeat" block.
      3:
        image: notes/frozen2_3.jpg
        text: Any blocks of code you put inside the "Repeat" block will be repeated
          in sequence, as many times as you want.
      4:
        image: notes/frozen2_4.jpg
        text: To draw a square, you can use the "Move Forward" and "Turn Right" block
          4 times. But the easier way is to tell the computer to "Move Forward" and
          "Turn Right by 90 degrees" once, and then tell it to repeat this pair of
          actions 4 times. To do that, you need to put the "Move Forward" and "Turn
          Right" block inside a "Repeat" block.
      5:
        image: notes/frozen2_5.jpg
        text: Pea meeles, sa saad "korda" ploki väärtuse muuta ükskõik milleks ja
          see kordabki plokki sisestatud tegevusi niipalju kordi.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Tere, olen Chris Bosh. Olen professionaalne korvpallur, kirjutasin koodi
          kolledžis.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define
          new commands. Most computer languages have only about 100 words or commands.
          And really, the art and magic is in defining your own new words out of these
          building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: Once you've taught a computer how to do an action once using this sequence
          of commands, you can make up your own name for that action so it's easy
          to repeat it later. When you define your own command and give it a name,
          that's called a function.
      4:
        image: notes/frozen3_4.jpg
        text: Hi, I’m Jess. When programming with blocks, you would use functions
          if there are a set of actions you would like to use lots of times. For example,
          you've written code to create a square.
      5:
        image: notes/frozen3_5.jpg
        text: 'Sa saad seda kutsuda funktsiooniks "loo ruut" '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple
          squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns.
          In the next puzzle, the code you recently wrote to make a circle is available
          to you as a new function that can make circles of different sizes. Can you
          use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: So far you've been making an animation or a story that does the exact
          same thing every time you run it. Now you can make an interactive game that
          you can actually play.
      2:
        image: notes/playlab_2.png
        text: There's the "when arrow" block and the "move actor" block. You can put
          these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked.
          Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: We're going to create games using Play Lab. Good games have a story,
          and every story has actors. We'll learn how to make our actors like witches,
          alinens, and animals speak, move, and interact with each other. By the end
          of this tutorial, you can build a game from scratch and share it with your
          friends.
      2:
        image: notes/playlab_intro_2.png
        text: Sinu ekraan on jagatud kolmeks põhiosaks. Vasakul pool on see kus sinu
          programm käib. Iga taseme juhend on selle alla kirjutatud.
      3:
        image: notes/playlab_intro_3.png
        text: Keskmine ala on tööriistakast, milles on plokid mida sinu pusles vaja
          läheb. Iga plokk on jupike koodi. Valget ala vasakul kutsutakse tööruumiks,
          see on koht kus sa oma programmi ehitad.
      4:
        image: notes/playlab_intro_4.png
        text: Alustuseks pead ühendama oma plokid oranži "kui käib" ploki külge. Saad
          ühendada mitu plokki üksteise külge lohistades neid tööruumi, teiste plokkide
          lähedusse kuni näed kollast joont, seejärel nad kinnituvad üksteise külge.
      5:
        image: notes/playlab_intro_5.png
        text: Selles esimeses pusles on meie tegelaseks pingviin ja me paneme ta ütlema
          "Tere!" Selleks lohista "ütle" plokk tööruumi ja ühenda see "kui käib" plokiga,
          seejärel kirjuta tekstikasti "Tere." Kui tahame siis saame pingviini liikuma
          ka panna.  Pingviini liikumapanemiseks kasuta "liigu vasakule" ja "liigu
          paremale" plokke. Kui oled koodi kokku saanud vajuta "käivita" nuppu ja
          vaata mis sa programmeerisid.
      6:
        image: notes/playlab_intro_6.png
        text: Get started and by the end, you'll be able to create your own game with
          all kinds of players that can interact, turn happy or sad, score points,
          or throw fireballs, or even vanish each other. It's all up to you and the
          game you want to make.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Nüüd hakkame õppima midagi sellist, mida programmeerijad iga päev kasutavad.
          Neid kutsutake sündmusteks. Sündmus ütleb programmile et tuleb jälgida kui
          midagi juhtub. Kui mingi kindel asi juhtub siis rakendab programm eelnevalt
          valitud käsu.
      2:
        image: notes/playlab_events_2.png
        text: 'Mõned sündmuse näited: hiire kliki, noole nupu vajutuse või  ekraani
          puudutamise ootamine.'
      3:
        image: notes/playlab_events_3.png
        text: Here, we're going to make the space bot greet the earthlings when a
          player clicks on him. We'll use the "when clicked" block and attach the
          "say" block to it. When the player clicks on the space bot, everything attached
          to this "when clicked" event block will be performed. What does your alien
          say?
      4:
        image: notes/playlab_events_4.png
        text: There are also "when arrow" blocks. If you link the "move" blocks to
          these, you can start to move your actors up, down, left, or right. Step
          by step, your game is getting more interactive.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: See on "korda igavesti" plokk. Kõik mis selle ploki sees on korratakse
          mängu jooksul igavesti.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Kui me tahame, et mõni tegelane midagi korduvalt teeks, ilma et mängija
          midagi peaks tegema, paneme me need plokid  "korda igavesti" ploki sisse.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries
          of the kingdom, left and right continuously. Learning how the repeat commands
          works, will save you a ton of time later when you build your own game.
