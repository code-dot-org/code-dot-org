"pl":
  slides:
    maze_intro:
      1:
        image: uwagi/hoc1_1.jpg
        text: Witaj podczas swojej pierwszej Godziny Kodowania! Zanurkuj w swoją pierwszą
          przygodę z programowaniem.
      2:
        image: uwagi/hoc1_2.jpg
        text: Będziemy używać Blockly, wizualnego języka programowania, który umożliwia
          pisanie kodu za pomocą przeciągania i upuszczania bloków.
      3:
        image: uwagi/hoc1_3.jpg
        text: Większość kodów jest pisana, ale Blockly jest wizualny. Każdy blok odpowiada
          rzeczywistej linii kodu.
      4:
        image: uwagi/hoc1_4.jpg
        text: Nauczycie się podstaw informatyki, pojęć, które są używane w wielu sytuacjach,
          od tworzenia aplikacji komputerowych po kierowanie pojazdem na Marsie.
      5:
        image: uwagi/hoc1_5.jpg
        text: Program jest zestawem poleceń, które ma wykonać komputer.
      6:
        image: uwagi/hoc1_6.jpg
        text: Twój pierwszy program ma spowodować, że Angry Bird trafi w labiryncie
          na Zieloną Świnkę.
      7:
        image: uwagi/hoc1_7.jpg
        text: Po lewej stronie znajduje się labirynt, w którym ma być uruchomiony
          Twój program. Polecenia dla każdej łamigłówki znajdują się obok labiryntu.
      8:
        image: uwagi/hoc1_8.jpg
        text: Przybornik pośrodku ekranu zawiera polecenia dla Angry Bird. Możesz
          ich użyć do zbudowania swojego programu.
      9:
        image: uwagi/hoc1_9.jpg
        text: Po prawej stronie znajduje się Twój obszar roboczy, do którego możesz
          przeciągać bloki z przybornika, by budować swój program. Aby usunąć blok
          z programu, przeciągnij go do kosza w rogu po prawej stronie.
      10:
        image: uwagi/hoc1_10.jpg
        text: Każdy blok jest instrukcją. Jeśli przeciągniesz blok "idź do przodu"
          do obszaru roboczego i naciśniesz przycisk "Uruchom", to ptak przesunie
          się o jedno pole w labiryncie.
      11:
        image: uwagi/hoc1_11.jpg
        text: Aby wykonać więcej niż jeden ruch, możesz przeciągnąć wiele bloków do
          swojego obszaru roboczego i połączyć je ze sobą. Angry Bird wykona wszystkie
          polecenia od góry do dołu.
      12:
        image: uwagi/hoc1_12.jpg
        text: Jeśli uruchomiłeś program i chcesz go poprawić i uruchomić ponownie,
          to naciśnij przycisk "Zresetuj".
      13:
        image: uwagi/hoc1_13.jpg
        text: Dopadnijmy te świnie!
    artist_intro:
      1:
        image: uwagi/stage5_1.jpg
        text: Cześć, jestem JR! Każdy zespół wyścigów samochodowych potrzebuje informatyków,
          aby wygrać. Analizują oni dane z samochodu i sprawiają, że jedzie szybciej.
      2:
        image: uwagi/stage5_2.jpg
        text: W tych łamigłówkach będziesz artystą, który rysuje za sobą linię, wszędzie
          tam, gdzie idzie.
      3:
        image: uwagi/stage5_3.jpg
        text: Ten blok mówi "idź do przodu przez 100 pikseli". Piksele to tak naprawdę
          małe kropki na Twoim ekranie.
      4:
        image: notes/stage5_4.jpg
        text: Ten blok mówi, "skręć w prawo o 90 stopni". Spowoduje to obrót Twojej
          postaci o tyle samo, jak w bloku "skręć" w łamigłówkach na labiryncie.
      5:
        image: notes/stage5_5.jpg
        text: Kliknij na strzałkę w jednym z tych bloków, aby zmieć, jak daleko artysta
          ma iść do przodu lub skręcić. Pobaw się, by zapoznać się z tymi nowymi blokami.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Witam, jestem Paola! W tych łamigłówkach Ty jesteś rolnikiem, który
          ma otrzymać pole całkowicie płaskie, aby rozpocząć sadzenie roślin.
      2:
        image: uwagi/stage9_2.jpg
        text: Musisz pomóc jej usunąć wszystkie sterty śmieci i wypełnić wszystkie
          otwory.
      3:
        image: uwagi/stage9_3.jpg
        text: 'Nowe bloki: usuń 1 szuflę śmieci ze sterty i wypełnij otwór 1 szuflą
          śmieci.'
      4:
        image: uwagi/stage9_4.jpg
        text: Sterty i otwory są różnych rozmiarów, musisz więc powiedzieć rolnikowi,
          ile szufli ma użyć.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Witam jestem Katie! Jedną z najbardziej ekscytujących rzeczy związanych
          z informatyką jest to, że program komputerowy może być interaktywny.
      2:
        image: notes/flappy02.jpg
        text: Za każdym razem, kiedy ktoś klika, stuka lub pisze na komputerze czy
          telefonie, generuje tym samym ZDARZENIE i jakaś część kodu decyduje, co
          należy zrobić, gdy występuje ZDARZENIE.
      3:
        image: notes/flappy03.jpg
        text: 'Na przykład, możesz stworzyć PROCEDURĘ OBSŁUGI ZDARZENIA, która mówi
          "po kliknięciu myszy odtwórz dźwięk" '
      4:
        image: notes/flappy04.jpg
        text: Czy słyszałeś kiedykolwiek o grze FlappyBird? Używając procedur obsługi
          zdarzeń nauczymy się, jak utworzyć własną wersję FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Kod, który będziemy pisać, polega na przeciąganiu i upuszczaniu bloków,
          które reprezentują polecenia dla komputera. Każdy z tych bloków jest reprezentowany
          przez prawdziwy kod.
      6:
        image: notes/flappy06.jpg
        text: 'Jeśli przyjrzysz się obszarowi roboczemu, znajdziesz tam przygotowane
          dla Ciebie zielone bloki - służą one do obsługi zdarzeń '
      7:
        image: notes/flappy07.jpg
        text: Jeśli chcesz, żeby ten ptak FRUWAŁ po KLIKNIĘCIU myszką, możesz to zrobić
          dołączając blok "pofruń" do obsługi odpowiedniego zdarzenia, i teraz w Twojej
          grze, jeśli tylko klikniesz, ptak będzie fruwał.
      8:
        image: notes/flappy08.jpg
        text: W każdej łamigłówce tego rodzaju, będziemy wprowadzać nowe rodzaje zdarzeń
          w postaci zielonych bloków w obszarze roboczym. Sami będziecie decydować,
          które bloki dodać odpowiednio do tych zdarzeń.
      9:
        image: notes/flappy09.jpg
        text: Gdy widzisz strzałkę do dołu, jak ta, to oznacza, że możesz zmienić
          ustawienia - takie jak dźwięk odtwarzany, gdy Flappy spadnie na ziemię.
      10:
        image: notes/flappy10.jpg
        text: W końcowej łamigłówce będziecie mogli utworzyć własną grę i podzielić
          się nią ze swoimi przyjaciółmi. Bawcie się dobrze!
    loop_times:
      1:
        image: uwagi/hoc2_1.jpg
        text: Cześć, jestem Mark! Zaczynamy naukę o pętlach. Za pomocą pętli można
          powiedzieć komputerowi powtarzaj jakikolwiek zestaw działań w kółko, tysiące
          lub nawet miliardy razy.
      2:
        image: uwagi/hoc2_2.jpg
        text: W tej łamigłówce chcemy, aby ptak przesunął się 5 pól do przodu, by
          dosięgnąć świnkę.
      3:
        image: uwagi/hoc2_3.jpg
        text: Możemy użyć nowego bloku powtórz, by sobie pomóc.
      4:
        image: uwagi/hoc2_4.jpg
        text: Zamiast 5 razy przeciągać blok "idź do przodu"...
      5:
        image: uwagi/hoc2_5.jpg
        text: Możemy umieścić blok "idź do przodu" wewnątrz bloku "powtórz" i wpisać
          w nim liczbę powtórzeń, aby określić, ile razy ma powtórzyć.
      6:
        image: uwagi/hoc2_6.jpg
        text: 'Ważna uwaga: Możesz umieścić więcej niż jedno polecenie w bloku powtórz.'
      7:
        image: uwagi/hoc2_7.jpg
        text: Miłego korzystania z Twojego nowego bloku powtórz!
    loop_until:
      1:
        image: uwagi/hoc3_1.jpg
        text: Hi, jestem Chris. Przed dołączeniem do Miami Heat, wstąpiłem na Georgia
          Tech, by studiować informatykę. Spróbujmy użyć naszego nowego bloku powtórz
          aż do.
      2:
        image: uwagi/hoc3_2.jpg
        text: Co zrobić, jeśli nie wiedzieliśmy, jak daleko ten ptak miał przenieść
          się, by dosięgnąć świnkę?
      3:
        image: uwagi/hoc3_3.jpg
        text: Jeśli umieścimy blok "idź do przodu" wewnątrz bloku "powtarzaj aż",
          to wtedy ptak będzie poruszał się naprzód, aż (until) dotrze do świni (lub
          zderzy się ze ścianą).
      4:
        image: uwagi/hoc3_4.jpg
        text: 'I to jest ważne: tak jak wcześniej, możemy umieścić wiele bloków wewnątrz
          bloku powtórz aż do, i wszystkie będą powtarzane.'
    if:
      1:
        image: uwagi/hoc4_1.jpg
        text: 'Witam, jestem Bill! Nauczmy się nowego podstawowego pojęcia: instrukcji
          jeśli. To dzięki nim komputery podejmują decyzje.'
      2:
        image: uwagi/hoc4_2.jpg
        text: Bloku jeśli używasz codziennie. Przed wyjściem z domu każdego poranka,
          mówisz jeśli pada na zewnątrz, to muszę założyć kurtkę.
      3:
        image: uwagi/hoc4_3.jpg
        text: Możemy powiedzieć, zombie, by sprawdził, czy istnieje droga w lewo,
          i jeśli znajdzie drogę w lewo, możemy pozwolić mu skręcić w tę stronę.
      4:
        image: uwagi/hoc4_4.jpg
        text: Aby napisać kod dla tego, przeciągnijmy nasz blok "jeśli" i umieśćmy
          w nim blok "skręć w lewo".
      5:
        image: uwagi/hoc4_5.jpg
        text: Teraz, jeśli umieścimy blok "idź do przodu" nad nim i blokiem "powtórz"
          obejmiemy wszystko, wtedy za każdym razem, gdy zombie poruszy się, będzie
          sprawdzał, czy istnieje droga w lewo i ewentualnie skręcał. Polecenie powtórz
          jest ważne, by sprawdzać za każdym razem, czy można skręcić.
      6:
        image: uwagi/hoc4_6.jpg
        text: 'Instrukcje jeśli są bardzo ważne w informatyce. Jednym z pierwszych
          programów, jakie napisałem, była gra w kółko i krzyżyk, i była w nim instrukcja
          jeśli, której zadaniem było: jeśli przeciwnik ma zaraz wygrać, to zablokuj
          pole, które dałoby mu wygraną.'
      7:
        image: uwagi/hoc4_7.jpg
        text: Miłej zabawy przy korzystaniu z bloku jeśli!
    if_else:
      1:
        image: uwagi/hoc5_1.jpg
        text: Cześć, mam na imię Saloni. Informatyka służy mi do rozwiązywania problemów
          w dziedzinie zdrowia i medycyny. Nauczymy się o bloku "jeśli-w przeciwnym
          razie". Ten blok wygląda jak blok "jeśli", ale ma dodatkową część "w przeciwnym
          razie" na końcu.
      2:
        image: uwagi/hoc5_2.jpg
        text: Jeśli umieszczę blok "idź do przodu" w miejscu, obok "jeśli", i blok
          "skręć w lewo" w miejscu obok "w przeciwnym razie", to zombie będzie miał
          do wyboru 2 opcje. Jeśli jest droga do przodu, zombie ruszy do przodu, a
          jeśli nie ma takiej drogi, to zombie skręci w lewo.
      3:
        image: uwagi/hoc5_3.jpg
        text: Podobnie jak blok "jeśli", bloki "jeśli-w przeciwnym razie" możemy umieszczać
          wewnątrz bloków "powtórz" tak, że zombie będzie się poruszał i blok "Jeśli-w
          przeciwnym razie" będzie sprawdzał, czy nie można gdzieś skręcić.
      4:
        image: uwagi/hoc5_4.jpg
        text: Teraz, zabierz te potwory (zombies), gdzie ich miejsce!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Instrukcja "jeśli-w przeciwnym razie" odpowiada podjęciu decyzji między
          dwiema rzeczami. Zobaczmy, jak możemy użyć tej instrukcji z naszą znajomą
          wiewiórką Scrat.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Ten blok wygląda tak samo jak blok "jeśli", ale zawiera dodatkową część
          na dole, która mówi "w przeciwnym razie". Jeśli umieszczę blok "idź do przodu",
          w miejscu odpowiadającym "jeśli" i blok "skręć w lewo" w miejscu obok "w
          przeciwnym razie", to wiewiórka Scrat przejdzie do przodu, jeśli jest droga
          przed nią, lub skręci w lewo jeśli nie ma takiej drogi.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Podejmuje decyzję i wykonuje jedną z dwóch czynności na podstawie tej
          decyzji. Podobnie jak bloki "Jeśli", można umieszczać bloki "jeśli-w przeciwnym
          razie" wewnątrz bloków "powtórz".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Teraz pomóżmy wiewiórce Scrat dosięgnąć żołędzia!
    function:
      1:
        image: uwagi/stage13_1.jpg
        text: Witam, jestem Brina, inżynier w Instagram. Funkcja składa się z pewnych
          linii kodu, które chcesz używać wiele razy, zamiast więc pisać ten kod za
          każdym razem, możesz użyć jednego bloku.
      2:
        image: uwagi/stage13_2.jpg
        text: Dowiemy się, jak definiować funkcję. Definicja funkcji ma gwiazdkę w
          rogu. Nazwa funkcji jest zapisana w pierwszej linijce.
      3:
        image: uwagi/stage13_3.jpg
        text: Bloki, które znajdują się wewnątrz definicji określają, co robi funkcja.
          Na przykład, to jest definicja funkcji o nazwie wypełnij 5 i zawiera bloki
          powtórz i wypełnij.
      4:
        image: uwagi/stage13_4.jpg
        text: Definicja funkcji znajduje się na obszarze roboczym, ale nasz rolnik
          nie może jej uruchomić, aż nie wyciągnie bloku wypełnij 5 z kategorii Funkcje.
      5:
        image: uwagi/stage13_5.jpg
        text: 'Umieśćmy zabawy (ang. fun) z powrotem w kategorii FUNkcje!" '
    loop_while:
      1:
        image: uwagi/stage9_5.jpg
        text: 'Witam, jestem Makinde! Poznajmy blok dopóki '
      2:
        image: uwagi/stage9_6.jpg
        text: Blok dopóki będzie wykonywał to, co w nim umieścisz, TAK DŁUGO, JAK
          DŁUGO warunek znajdujący się na górze ma wartość PRAWDA (TRUE).
      3:
        image: uwagi/stage9_7.jpg
        text: Na przykład, jeśli rolnik stoi na stercie, to tak długo będzie usuwał
          1 szufelkę śmieci, dopóki pod nim znajduje się sterta śmieci.
    loop_for:
      1:
        image: uwagi/stage11_1.jpg
        text: Witam, jestem Trina, i pracuję dla Pixar. Pracowałam przy kilku filmach,
          w tym przy Shreku.
      2:
        image: uwagi/stage11_2.jpg
        text: To jest nasza nowa pętla "licz z". Wykonuje wielokrotnie działania i
          możesz za każdym razem nieco zmienić działania.
      3:
        image: uwagi/stage11_3.jpg
        text: W tym przykładzie, pętla "licz z" oznacza "liczy z licznikiem od 50
          do 90 co 10", a w jej wnętrzu mamy blok rysujący kwadrat. Przeciągnij blok
          "counter" (licznik) z kategorii "Variables" (Zmienne) na miejsce długości.
      4:
        image: uwagi/stage11_4.jpg
        text: Oznacza to, że nasz artysta narysuje kwadrat, który ma bok długości
          50 pikseli, następnie doda 10 i narysuje kwadrat o boku 60 pikseli. Następnie
          będzie dodawał 10 i rysował kwadraty, aż osiągnie 90. Otrzymamy w ten sposób
          kwadraty o bokach 50, 60, 70, 80 i 90.
    parameters:
      1:
        image: uwagi/stage15_1.jpg
        text: Witam, jestem Janete i jestem inżynierem w Zynga.
      2:
        image: uwagi/stage15_2.jpg
        text: Co zrobić, jeśli chcemy narysować kilka trójkąty o różnych długościach
          boków?
      3:
        image: uwagi/stage15_3.jpg
        text: Moglibyśmy napisać poszczególne kody lub możemy użyć funkcji z parametrami.
      4:
        image: uwagi/stage15_4.jpg
        text: Aby to zrobić, kliknij przycisk blue star (niebieska gwiazda) w definicji
          funkcji rysuj trójkąt. Następnie przeciągnij nazwa wejścia do bloku wejście.
      5:
        image: uwagi/stage15_5.jpg
        text: Następnie, jeśli wpiszesz długość w miejscu, gdzie stoi x i naciśniesz
          klawisz Enter, to utworzysz wejście długość w Twojej funkcji.
      6:
        image: uwagi/stage15_6.jpg
        text: Następnie kliknij na gwiazdce. Teraz kliknij na kategorii "Variables"
          (Zmienne) i przeciągnij blok "length" (długość) do bloku "idź do przodu"
          w definicji Twojej funkcji. I usuń przez przeciągnięcie stary blok z liczbą.
      7:
        image: uwagi/stage15_7.jpg
        text: Aby użyć funkcji z parametrami, kliknij na kategorię Funkcje i wyciągnij
          funkcję narysuj trójkąt o długości.
      8:
        image: uwagi/stage15_8.jpg
        text: Teraz można użyć bloku matematyki do wprowadzenia różnych liczb, by
          rysować trójkąty o różnych rozmiarach.
    hoc_wrapup:
      1:
        image: uwagi/hoc6_1.jpg
        text: Gratulacje! Z ostatnimi łamigłówkami, które rozwiązałeś, napisałeś kod,
          który może pomóc jakiemukolwiek robotowi, jak znaleźć drogę przez labirynt
          bez rozgałęzień lub przez tunel o dowolnej długości, bez względu na to,
          czy jest to zombie, ptak, pojazd na marsie lub nawet samojezdny samochód.
      2:
        image: uwagi/hoc6_2.jpg
        text: Podstawowe pojęcia, które wykorzystałeś, są sednem każdego programu
          lub aplikacji, które kiedykolwiek będziesz używał. Dowiedzieliśmy się o
          powtarzaniu w pętli, instrukcji powtórz aż do, instrukcji jeśli i instrukcji
          jeśli-w przeciwnym razie.
      3:
        image: uwagi/hoc6_3.jpg
        text: Jeśli podoba Ci się Twoja pierwsza godzina kodowania, odwiedź code.org,
          aby kontynuować swoją edukację informatyczną! Po zakończeniu naszego 20-godzinnego
          kursu będziesz mieć opanowane podstawy programowania i będziesz mógł rozpocząć
          naukę, jak pisać aplikacje dla telefonów komórkowych, instrukcje dla robotów,
          czy nawet gry.
      4:
        image: uwagi/hoc6_4.jpg
        text: 'Technologia zmienia wszystko, co robimy, i nie ma znaczenia czy jesteś
          młody czy starszy: programowanie to zabawa, jest kreatywne i każdy może
          się nauczyć !'
    20_wrapup:
      1:
        image: Notes/Bird.png
        text: Pokaż uwagi - wkrótce dostępne!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Witam, nazywam się Lyndsey. Projektuję i tworzę własne aplikacje. Użyjmy
          kodu, aby przyłączyć się do Anny i Elsy, które odkrywają magię i piękno
          lodu.
      2:
        image: notes/frozen1_2.jpg
        text: Będziesz tworzył płatki śniegu i wzory jeżdżąc na łyżwach, by wykreować
          zimową krainę, którą będziesz mógł udostępnić swoim znajomym.
      3:
        image: notes/frozen1_3.jpg
        text: W ciągu najbliższej godziny poznasz podstawy kodowania. Tradycyjne programowanie
          posługuje się tekstem, ale my będziemy używać Blockly, wykorzystujący wizualne
          bloki, które można przeciągać i upuszczać, by tworzyć programy. Nawet studenci
          na uniwersytecie poznają w ten sposób podstawy programowania. Faktycznie
          to jest także kodowanie.
      4:
        image: notes/frozen1_4.jpg
        text: Program jest zestawem instrukcji (poleceń), które informują komputer,
          co ma robić. Utwórz kod lub program, który pomoże Elsie narysować prostą
          linię. Będziemy korzystać z tego później przy tworzeniu bardziej złożonych
          deseni.
      5:
        image: notes/frozen1_5.jpg
        text: Ekran jest podzielony na trzy główne części. Po lewej stronie jest powierzchnia
          lodu, gdzie będziesz uruchomiał swój program. Poniżej są umieszczone instrukcje
          dla danego poziomu.
      6:
        image: notes/frozen1_6.jpg
        text: Środkowy obszar zajmuje przybornik i każdy z bloków w tym obszarze odpowiada
          działaniu, które może wykonać Elsa i Anna.
      7:
        image: notes/frozen1_7.jpg
        text: Po prawej stronie znajduje się obszar roboczy, gdzie będziemy budować
          nasz program. Do poruszania się po powierzchni lodu będziemy używać bloku
          "idź do przodu".
      8:
        image: notes/frozen1_8.jpg
        text: Tutaj, blok "idź do przodu" oznacza "idź do przodu 100 pikseli". Co
          się dzieje, gdy naciśniemy "Uruchom"?. Elsa przesunie się do przodu o określoną
          odległość na ekranie, w rzeczywistości o 100 pikseli! Piksele to niewielkie
          kwadraciki na ekranie Twojego komputera.
      9:
        image: notes/frozen1_9.jpg
        text: Innym blokiem, jaki mamy w tej łamigłówce, jest "skręć w prawo o 90
          stopni". Użycie tego bloku powoduje, że Elsa obraca się o pewien kąt. Możesz
          poeksperymentować z obrotami Elsy. Kąt jest mierzony od ścieżki przed Elsą.
          To jest obrót o 90 stopni, a to jest obrót o 120 stopni.
      10:
        image: notes/frozen1_10.jpg
        text: Pamiętaj, możesz zmienić liczbę pikseli i stopni klikając strzałki obok
          nich.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Witam jestem Paola! Komputery są naprawdę dobre w powtarzaniu czynności.
          Można liczyć do 10, 20 lub 100. Ale komputer może liczyć do miliarda lub
          biliona. Nie będzie się nudził, a zajmie mu to tylko kilka sekund. Cokolwiek
          robiąc, licząc lub rysując, komputery mogą powtarzać działania setki lub
          nawet miliardy razy.
      2:
        image: notes/frozen2_2.jpg
        text: W programowaniu, nazywamy to pętlą. Pętla służy do powtarzania kodu
          w kółko. W następnej łamigłówce, Twoim zadaniem jest pomóc Annie utworzyć
          kwadrat z użyciem bloku "powtórz".
      3:
        image: notes/frozen2_3.jpg
        text: Jakikolwiek blok kodu umieszczony wewnątrz bloku "powtórz" będzie powtarzany
          tyle razy, ile zechcesz.
      4:
        image: notes/frozen2_4.jpg
        text: Aby narysować kwadrat, możecie 4 razy użyć bloków "idź do przodu" i
          "skręcić w prawo". Ale łatwiejszy sposób polega na powtórzeniu wykonania
          tych dwóch bloków 4 razy. Aby to zrobić, należy umieścić te dwa bloki wewnątrz
          bloku "powtórz".
      5:
        image: notes/frozen2_5.jpg
        text: Pamiętajcie, w bloku "powtórz" można umieścić dowolną liczbę, i co jest
          wewnątrz bloku, zostanie powtórzone tyle razy.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Witam, jestem Chris Bosh. Jestem zawodowym koszykarzem, kodowałem, gdy
          byłem w koledżu.
      2:
        image: notes/frozen3_2.jpg
        text: Jedną z najważniejszych idei w informatyce jest definiowanie nowych
          poleceń dla komputera. Większość języków programowania zawiera około 100
          słów i poleceń. I naprawdę, sztuką i magią jest definiowanie własnych nowych
          słów i poleceń złożonych z tych podstawowych bloków.
      3:
        image: notes/frozen3_3.jpg
        text: Jeśli już nauczyliście komputer pewnego działania przy użyciu sekwencji
          poleceń, to możecie nadać temu działaniu swoją nazwę tak, aby później łatwiej
          było je wykonać ponownie. W ten sposób definiujemy funkcję, jako własne
          polecenie z nazwą.
      4:
        image: notes/frozen3_4.jpg
        text: Witam, jestem Jess. Podczas programowania z użyciem bloków, będziecie
          używać funkcji, gdy jakiś zestaw akcji chcielibyście wykonywać wiele razy.
          Na przykład, napisaliście kod do tworzenia kwadratów.
      5:
        image: notes/frozen3_5.jpg
        text: 'Możecie to zdefiniować w postaci funkcji o nazwie "create a square"
          (utwórz/narysuj kwadrat). '
      6:
        image: notes/frozen3_6.jpg
        text: Teraz macie nowy blok, który możecie użyć do tworzenia wielu kwadratów.
      7:
        image: notes/frozen3_7.jpg
        text: Wiele prostych kształtów może służyć do tworzenia bardziej skomplikowanych
          wzorów. W następnej łamigłówce, kod, który napisaliście do tworzenia okręgu,
          jest dostępny jako nowa funkcja, która może tworzyć okręgi o różnych rozmiarach.
          Czy moglibyście pomóc Elsie użyć tej funkcji do tworzenia skomplikowanych
          i pięknych wzorów na śniegu?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Do tej pory tworzyliście animację lub historyjkę, która za każdym razem
          działa tak samo. Teraz możecie utworzyć interaktywną grę, w którą możecie
          zagrać.
      2:
        image: notes/playlab_2.png
        text: Tam są bloki "kiedy strzałka" i "przenieś postać". Możesz umieścić te
          bloki razem, aby poruszać postaciami za pomocą klawiszy strzałek.
      3:
        image: notes/playlab_3.png
        text: Tam są bloki, które wykonują pewne działania, gdy postacie zderzają
          się lub klika się na nich. Sprawdź je i baw się!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Będziemy tworzyć gry przy użyciu Play Lab. Dobre gry są oparta na opowieści
          a w każdej opowieści występują aktorzy/postacie. Dowiemy się, jak spowodować,
          by nasze postacie, jak czarownice, obcy i zwierzęta mówiły, poruszały się
          i oddziaływały między sobą. Do końca tego samouczka zbudujecie grę i podzielicie
          się nią ze swoimi znajomymi.
      2:
        image: notes/playlab_intro_2.png
        text: Ekran jest podzielony na 3 części. Po lewej stronie jest miejsce, gdzie
          wykonywany jest program. Instrukcja dla danej łamigłówki znajduje się poniżej.
      3:
        image: notes/playlab_intro_3.png
        text: Środkowy obszar zajmuje przybornik, i każdy z bloków w przyborniku jest
          fragmentem kodu. Obszar po prawej stronie to obszar roboczy, gdzie będziecie
          budować programy.
      4:
        image: notes/playlab_intro_4.png
        text: Aby rozpocząć budowanie programu, należy podłączyć wybrane bloki do
          pomarańczowego bloku "po uruchomieniu". Można połączyć ze sobą wiele bloków
          przeciągając je aż pojawi się żółta linia - wtedy bloki połączą się ze sobą.
      5:
        image: notes/playlab_intro_5.png
        text: W tej pierwszej łamigłówce postacią jest pingwin i spowodujemy, by mówił
          "Hello!" przez przeciągnięcie bloku "powiedz", podłączeniem go pod blok
          "po uruchomieniu" i wpisaniu "Hello". Możemy również spowodować, że pingwin
          porusza się za pomocą bloków "idź". Po skompletowaniu bloków, naciśnij przycisk
          "Uruchom", aby zobaczyć program w działaniu.
      6:
        image: notes/playlab_intro_6.png
        text: Zacznijcie i na końcu będziecie umieć utworzyć własną grę z różnego
          rodzaju postaciami, które mogą wchodzić w interakcje, stają się szczęśliwe
          lub smutne, zdobywają punkty, rzucają ognistymi kulami, a nawet znikają.
          To wszystko zależy od Ciebie i gry, jaką chcesz stworzyć.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Teraz mamy zamiar dowiedzieć się o czymś, co każdy programista gier
          używa na co dzień. Są to zdarzenia. Zdarzenie informuje program, by nasłuchiwał,
          czy coś się dzieje, a gdy się to dzieje, to program wykonuje odpowiednią
          akcję.
      2:
        image: notes/playlab_events_2.png
        text: 'Przykładowe zdarzenia oczekują na: kliknięcie myszy, naciśnięcie przycisku
          strzałki lub dotknięcie ekranu.'
      3:
        image: notes/playlab_events_3.png
        text: Tutaj mamy zamiar spowodować, że przybysz z kosmosu pozdrawia Ziemian,
          gdy gracz klika na nim. Użyjemy bloku "po kliknięciu" i podłączymy do niego
          blok "powiedz". Gdy gracz kliknie na przybyszu z kosmosu, to wykonane zostaną
          wszystkie bloki podłączone do bloku "po kliknięciu". Co mówi Twój obcy?
      4:
        image: notes/playlab_events_4.png
        text: Istnieją również bloki "kiedy strzałka". Jeśli podłączysz bloki "idź"
          do tych bloków, to możesz poruszać swoimi postaciami do góry, do dołu, w
          lewo lub w prawo. Krok po kroku Twoja gra staje się coraz bardziej interaktywna.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Jest to blok "powtarzaj w nieskończoność". Cokolwiek znajdzie się w
          tym bloku będzie cały czas powtarzane.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Jeśli chcemy, aby postać powtarzała jakąś akcję bez interwencji gracza,
          to bloki tej akcji należy umieścić wewnątrz bloku "powtarzaj w nieskończoność".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: W tej następnej łamigłówce naszym celem jest pomóc czarownicy w patrolowaniu
          granic królestwa, z lewej i prawej. Nauczyliśmy się już powtarzać polecenia,
          pozwoli to nam zaoszczędzić mnóstwo czasu później, gdy będziemy tworzyć
          własną grę.
