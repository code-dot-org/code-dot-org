"fr":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Bienvenue à ta première heure de code! Plongeons dans ton premier avant-goût
          de la programmation.
      2:
        image: notes/hoc1_2.jpg
        text: Nous allons utiliser Blockly, un langage de programmation visuel où
          tu déplaces des blocs pour écrire le code.
      3:
        image: notes/hoc1_3.jpg
        text: Typiquement on écrit du code, mais Blockly est un langage visuel. Chaque
          bloc correspond à une ligne de code traditionel.
      4:
        image: notes/hoc1_4.jpg
        text: 'Vous allez apprendre les bases de l''informatique, des concepts utilisés
          partout : de la création d''applications jusqu''au contrôle du véhicule
          qui s''est posé sur Mars.'
      5:
        image: notes/hoc1_5.jpg
        text: Un programme est un ensemble d'instructions que ton ordinateur suit.
      6:
        image: notes/hoc1_6.jpg
        text: Le but de ton premier programme est de guider un Angry Bird dans un
          labyrinthe afin d'attraper un Cochon Vert.
      7:
        image: notes/hoc1_7.jpg
        text: Sur le côté gauche il y a le labyrinthe où ton programme est exécuté.
          Les instructions pour chaque puzzle se trouvent sous le labyrinthe.
      8:
        image: notes/hoc1_8.jpg
        text: La boîte à outils du milieu a les commandes pour les Angry Birds. Tu
          vas utiliser celles-ci pour construire ton code.
      9:
        image: notes/hoc1_9.jpg
        text: Sur la droite il y a ton espace de travail où tu déposeras les blocs
          de la boîte à outils pour construire ton programme. Pour supprimer un bloc,
          déplace-le vers la poubelle du coin.
      10:
        image: notes/hoc1_10.jpg
        text: Chaque bloc est une seule instruction. Si tu fais glisser un bloc «
          avancer » dans ton espace de travail et appuie sur « Exécuter le programme
          », l'oiseau se déplace d'une case sur le labyrinthe.
      11:
        image: notes/hoc1_11.jpg
        text: Pour faire plusieurs actions, vous pouvez faire glisser les blocs sur
          votre espace de travail et les attacher les uns aux autres. L'oiseau exécutera
          toutes les commandes de haut en bas.
      12:
        image: notes/hoc1_12.jpg
        text: Si tu exécutes un programme et tu veux le corriger et réessayer, appuie
          sur le bouton " Réessayer".
      13:
        image: notes/hoc1_13.jpg
        text: Allons attraper ces cochons!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Salut, je suis JR ! Chaque équipe de voitures de course a besoin d'informaticiens
          pour gagner. Ils analysent les données de la voiture pour la faire aller
          plus vite.
      2:
        image: notes/stage5_2.jpg
        text: Dans ces puzzles, tu sera un artiste qui dessine une ligne derrière
          eux partout où ils vont.
      3:
        image: notes/stage5_3.jpg
        text: Ce bloc dit ''avances de 100 pixels." Les pixels sont en fait des points
          minuscules sur ton écran.
      4:
        image: notes/stage5_4.jpg
        text: Ce bloc dit « tourner à droite de 90 degrés. », cela fera tourner votre
          artiste du même angle que le bloc « tourner » dans les puzzles de labyrinthe.
      5:
        image: notes/stage5_5.jpg
        text: Clique sur la flèche dans l'un de ces blocs pour changer le nombre de
          pas en avant ou de virages que l'artiste fera.  Joue un peu avec pour t'habituer
          à ces nouveaux blocs.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Salut, je m'appelle Paola ! Dans ces puzzles, tu es un agriculteur qui
          doit complètement niveler son terrain avant de commencer à planter.
      2:
        image: notes/stage9_2.jpg
        text: Tu dois l'aider à enlever tous les tas de terre et remplir tous les
          trous.
      3:
        image: notes/stage9_3.jpg
        text: Les nouveaux blocs enlèvent une pelletée de terre d'une pile et remplissent
          un trou avec une pelletée de terre.
      4:
        image: notes/stage9_4.jpg
        text: Les tas et les trous sont de tailles différentes, donc tu devras dire
          à ton fermier combien de pelletées il doit utiliser.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Salut, je suis Katie! Une des choses les plus excitantes à propos de
          l'informatique est qu'un programme informatique peut être interactif.
      2:
        image: notes/flappy02.jpg
        text: Chaque fois que quelqu'un clique ou appuie ou tape sur un ordinateur
          ou un téléphone, ça génère un EVENEMENT, et il y a un code qui décide quoi
          faire quand un EVENEMENT a lieu.
      3:
        image: notes/flappy03.jpg
        text: 'Par exemple, tu pourrais avoir un GESTIONNAIRE d''EVENEMENTS qui dit
          "quand la souris est cliquée, joues un son" '
      4:
        image: notes/flappy04.jpg
        text: Tu as déjà entendu parler du jeu FlappyBird? En utilisant les gestionnaires
          d'Evénements, nous allons apprendre à programmer notre propre version personnalisée
          de FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Le code que tu vas écrire implique de glisser et placer les blocs qui
          représentent les commandes pour l'ordinateur. Sous la capuche, chacun de
          ses blocs est représenté par un code réel.
      6:
        image: notes/flappy06.jpg
        text: 'Si tu regardes au lieu de travail, il y a quelques blocs verts qui
          sont remplies pour toi - ce sont des "gestionnaires d''événements" '
      7:
        image: notes/flappy07.jpg
        text: Si tu veux que l'oiseau BATTE DES AILES quand tu CLIQUES sur la souris,
          tu peux faire ça en attachant le bloc " BATTRE DES AILES" au gestionnaire
          d'événements approprié, et maintenant dans ton jeu chaque fois que tu cliques
          sur la souris, l'oiseau va battre des ailes.
      8:
        image: notes/flappy08.jpg
        text: Dans chaque puzzle de cette activité, nous allons introduire des nouveaux
          types d'événements comme des blocs verts au lieu de travail, et tu peux
          décider le bloc approprié à ajouter en réponse à ces événements.
      9:
        image: notes/flappy09.jpg
        text: Quand tu vois une flèche déroulante comme ça, ça veut dire que tu peux
          changer les paramètres - comme par exemple, quel son jouer quand flappy
          touche le sol.
      10:
        image: notes/flappy10.jpg
        text: Dans le puzzle final, tu seras capable de créer ton propre jeu et de
          le partager avec tes amis. Bon amusement!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Salut, je m'appelle Mark! Apprenons un peu plus sur les boucles. En
          utilisant les boucles, tu peux dire à un ordinateur de répéter chaque série
          d'actions une ou plusieurs fois, jusqu'à des milliers ou même des milliards
          de fois.
      2:
        image: notes/hoc2_2.jpg
        text: Dans ce puzzle, nous voulons faire bouger l'oiseau vers l'avant de 5
          places pour arriver au cochon.
      3:
        image: notes/hoc2_3.jpg
        text: Nous pouvons nous aider en utilisant le nouveau bloc "répéter".
      4:
        image: notes/hoc2_4.jpg
        text: Au lieu d'utiliser 5 blocs de type "avancer"...
      5:
        image: notes/hoc2_5.jpg
        text: Nous pouvons mettre le bloc "avancer" à l'intérieur du bloc "répéter"
          et écrire un nombre dans le bloc pour lui dire combien de fois il doit répéter.
      6:
        image: notes/hoc2_6.jpg
        text: 'Et ceci est important: tu peux mettre plus d''une commande à l''intérieur
          d''un bloc " répéter " .'
      7:
        image: notes/hoc2_7.jpg
        text: Amuse-toi en utilisant ton nouveau bloc "répéter"!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Salut, je m'appelle Chris. Avant de me joindre à Miami Heat, j'ai été
          à Georgia Tech pour étudier l'informatique. Essayons notre nouveau bloc,
          le bloc "répéter jusqu'à".
      2:
        image: notes/hoc3_2.jpg
        text: Et si on ne sait pas de quelle distance l'oiseau doit se déplacer pour
          arriver au cochon?
      3:
        image: notes/hoc3_3.jpg
        text: Si nous mettons un bloc "avancer" à l'intérieur d'un bloc " répéter
          jusqu'à", l'oiseau va avancer JUSQU'À ce qu'il atteigne le cochon (ou qu'il
          se cogne sur un mur).
      4:
        image: notes/hoc3_4.jpg
        text: 'Et ceci est important: comme avant, on peut mettre plusieurs blocs
          à l''intérieur du bloc "répéter jusqu''à", et ils seront tous répétés.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Salut, je m''appelle Bill ! Nous allons apprendre un nouveau concept
          fondamental : les instructions "Si". C''est ainsi que les ordinateurs prennent
          des décisions.'
      2:
        image: notes/hoc4_2.jpg
        text: Toi aussi tu utilises les instructions "si" chaque jour. Avant d'aller
          dehors chaque matin, tu te dis SI il pleut dehors, je dois porter mon imperméable.
      3:
        image: notes/hoc4_3.jpg
        text: Nous pouvons dire au zombie d'aller vérifier SI il y a un chemin à gauche,
          et SI il en trouve un, il peut tourner dans cette direction.
      4:
        image: notes/hoc4_4.jpg
        text: Afin  d'écrire le code pour ceci, déposons un bloc "si" et mettons-y
          un bloc "tourner à gauche" à l'intérieur.
      5:
        image: notes/hoc4_5.jpg
        text: Maintenant, si nous mettons un bloc "avancer" au-dessus et englober
          le tout d'un bloc "répéter", chaque fois que le zombie bouge, il va vérifier
          si il y a un chemin à gaucher et tourner. La commande "répéter" est critique,
          pour vérifier si on peut tourner à chaque étape.
      6:
        image: notes/hoc4_6.jpg
        text: Les instructions "Si" sont vraiment importantes dans l'informatique.
          Un des premiers programmes que j'ai écrit était un jeu d'OXO, et il y avait
          une instruction Si qui disait SI l'autre personne est sur le point de gagner,
          bloque la case qui va le faire gagner.
      7:
        image: notes/hoc4_7.jpg
        text: Amuse-toi à utiliser le bloc "si"!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Salut, je m'appelle Saloni. J'utilise l'informatique pour aider à résoudre
          des problèmes en santé et médecine. Apprenons un peu sur le bloc « si sinon
          ». Il ressemble au bloc « si », mais il a une partie à la fin qui dit «
          sinon ».
      2:
        image: notes/hoc5_2.jpg
        text: Si je mets un bloc "avancer plus" dans l'emplacement nommé "faire" et
          un bloc "tourner à gauche" dans l'emplacement nommé "autre", le zombie choisira
          une de ces 2 options. SI il y a un chemin le zombie avancera, SINON (il
          n'y a donc pas de chemin) le zombie tournera à gauche.
      3:
        image: notes/hoc5_3.jpg
        text: Comme pour le bloc "si", nous pouvons utiliser des blocs "si sinon"
          à l'intérieur de blocs de "répétition", afin que le zombie continue à se
          déplacer et que le bloc "si sinon" permette de vérifier s'il y a un endroit
          vers lequel se tourner.
      4:
        image: notes/hoc5_4.jpg
        text: Maintenant, ramène ces zombies à leur place!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Une expressions si-sinon est une décision entre deux choses. Voyons
          comment nous pouvons utiliser les expressions si-sinon avec notre copain
          Scrat l'écureuil.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Ce bloc est identique au bloc "si", mais il comporte une partie supplémentaire
          nommée "sinon". Si l'on pose un bloc "avancer" dans la partie "faire" et
          un bloc "tourne à gauche" dans la partie "sinon", cela signifie que l'écureuil
          Scrat va avancer s'il a un chemin devant lui. S'il n'a pas de chemin devant
          lui, Scrat va tourner à gauche.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Il s'agit de prendre une décision et de faire une des deux actions en
          fonction de cette décision. Et comme pour les blocs "si", vous pouvez utiliser
          des blocs "si-sinon" à l'intérieur des blocs "répéter".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Maintenant, aidons Scrat l'écureuil à obtenir ce gland !
    function:
      1:
        image: notes/stage13_1.jpg
        text: Salut, je m'appelle Brina, une ingénieure à Instagram. Une fonction
          est un ensemble de lignes de code que vous souhaitez utiliser plusieurs
          fois. Ainsi, plutôt que de ré-écrire le même code plusieurs fois, vous pouvez
          simplement utiliser un bloc.
      2:
        image: notes/stage13_2.jpg
        text: Nous allons apprendre comment définir des fonctions. Les définitions
          de fonctions ont une étoile dans le coin. Le nom de la fonction est écrit
          sur la ligne du haut.
      3:
        image: notes/stage13_3.jpg
        text: Les blocs qui vont dans la définition nous disent ce que la fonction
          fait. Ainsi cette définition de fonction s'appelle "remplir 5 fois" et est
          composée d'un bloc "répéter" et d'un bloc "remplir.
      4:
        image: notes/stage13_4.jpg
        text: La définition se trouve sur l'espace de travail mais notre fermier ne
          démarrera pas la fonction tant que nous ne sortirons pas le bloc de fonction
          "remplir 5" de la catégorie fonctions.
      5:
        image: notes/stage13_5.jpg
        text: Amusons-nous avec les fonctions!
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: Le bloc "tant que" exécute les actions qui se trouvent à l'intérieur
          de celui-ci TANT QUE la condition énoncée au dessus reste VRAIE.
      3:
        image: notes/stage9_7.jpg
        text: Par exemple, si la fermière se tient sur une pile, elle continuera à
          enlever 1 pelletée TANT QU'il reste une pile sous elle.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Salut, je m'appelle Trina, et je travaille pour Pixar. J'ai travaillé
          sur un tas de films, y compris Shrek.
      2:
        image: notes/stage11_2.jpg
        text: Ceci est notre nouvelle boucle « compteur ». Cette boucle répète des
          actions plusieurs fois, et vous pouvez légèrement changer les actions à
          chaque fois.
      3:
        image: notes/stage11_3.jpg
        text: Dans cet exemple, notre boucle « compteur » dit « compter avec un compteur
          de 50 à 90 par pas de 10 » et à l'intérieur, nous avons notre bloc « dessiner
          un carré ». Déplace le bloc « compteur » de la section « Variables » à l'emplacement
          de « longueur ».
      4:
        image: notes/stage11_4.jpg
        text: Cela signifie que notre artiste va dessiner un carré qui a des côtés
          de 50 pixels de longueur, puis y ajouter 10 et dessiner un carré de côté
          de 60 pixels de longueur. Puis il va continuer d'ajouter 10 et dessiner
          des carrés jusqu'à ce qu'il atteigne 90. Ainsi nous aurons des carrés de
          50, 60, 70, 80 et 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Salut, je m'appelle Janete, et je suis ingénieur chez Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Que faudrait-il faire pour dessiner un ensemble de triangles de différentes
          tailles ?
      3:
        image: notes/stage15_3.jpg
        text: Nous pouvons écrire tout ce code à la main, ou bien utiliser une fonction
          avec des paramètres.
      4:
        image: notes/stage15_4.jpg
        text: Pour ce faire, clique sur l'étoile bleue dans la définition de la fonction
          « dessiner un triangle ». Ensuite déplace le bloc « nom d'entrée » vers
          le bloc « entrée ».
      5:
        image: notes/stage15_5.jpg
        text: Ensuite, si tu écris « longueur » à l'endroit où se trouve « x » et
          presse « ENTREE », cela créera, pour ta fonction, un paramètre d'entrée
          de la longueur.
      6:
        image: notes/stage15_6.jpg
        text: Clique ensuite sur l'étoile. Maintenant clique sur la catégorie variables
          et déplace le bloc "longueur" dans le bloc "avancer" de ta définition de
          fonction. Finalement, déplace le vieux bloc nombre à l'extérieur.
      7:
        image: notes/stage15_7.jpg
        text: Pour utiliser ta fonction avec des paramètres, clique sur la catégorie
          fonctions et déplace ta fonction "dessine un triangle de longueur" vers
          l'extérieur.
      8:
        image: notes/stage15_8.jpg
        text: Tu peux maintenant utiliser le bloc mathématique pour saisir différents
          nombres et dessiner des triangles de différentes tailles.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Félicitations! Avec le dernier puzzle que tu viens de résoudre, tu viens
          juste d'écrire un code qui dit à N'IMPORTE QUEL robot où trouver son chemin
          entre un labyrinthe sans ramifications ou un tunnel de n'importe quelle
          longueur, qu'il soit un zombie, un oiseau, un rover de Mars, ou même une
          voiture qui se conduit toute seule.
      2:
        image: notes/hoc6_2.jpg
        text: Les concepts fondamentaux que tu as utilisés sont au coeur de chaque
          programme ou application que tu utiliseras. Nous avons appris les boucles
          Répéter, Répéter jusqu'à, ainsi que les énoncés Si et Si Sinon.
      3:
        image: notes/hoc6_3.jpg
        text: Si tu as aimé ta première heure de code, visite code.org pour continuer
          ton éducation en informatique! Une fois que tu auras complété 20 heures
          de cours, tu auras maîtrisé les bases de la programmation, et tu pourras
          commencer à apprendre comment écrire des applications pour téléphones, des
          instructions de robot, des jeux...  C'est toi qui choisis.
      4:
        image: notes/hoc6_4.jpg
        text: 'La technologie change tout ce que nous faisons et peu importe qu''on
          soit jeune ou pas: programmer est amusant, c''est un processus créatif,
          et n''importe qui peut l''apprendre !'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Montrer les notes à venir bientôt !
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Bonjour, je suis Lyndsey. Je modélise, joue et écris mes propres applications.
          Utilisons du code pour rassembler Anna et Elsa tandis qu'elles explorent
          la magie et la beauté de la glace.
      2:
        image: notes/frozen1_2.jpg
        text: Tu vas créer des flocons de neige et des motifs en patinant, et créer
          un monde magique hivernal que tu pourras partager ensuite avec tes amis.
      3:
        image: notes/frozen1_3.jpg
        text: Durant l'heure qui vient, tu vas appendre les bases du code. La programmation
          traditionnelle est généralement en texte, mais nous allons utiliser Blockly,
          qui utilise des blocs visuels que tu peux glisser et déposer pour écrire
          des programmes. C'est ainsi que mêmes les étudiants en université apprennent
          les bases. Mais derrière le vernis, c'est bien toujours du code que tu crées.
      4:
        image: notes/frozen1_4.jpg
        text: Un programme est un ensemble d'instructions qui disent à une ordinateur
          quoi faire. Construisons un code, ou un programme, qui va aider Elsa à créer
          une simple ligne. Nous l'utiliserons plus tard pour créer des motifs plus
          complexes.
      5:
        image: notes/frozen1_5.jpg
        text: Ton écran est divié en trois parties. Sur la gauche, on trouve la surface
          de glace sur laquelle tu vas exécuter ton programme. Les instructions pour
          chaque niveau sont écrites juste en dessous de cette surface.
      6:
        image: notes/frozen1_6.jpg
        text: La zone du milieu est la boîte à outils, et chacun de ces blocs est
          une action qu'Elsa et Anna peuvent faire.
      7:
        image: notes/frozen1_7.jpg
        text: L'espace blanc sur la droite est appelé l'espace de travail, et c'est
          ici que nous allons construire notre programme. Pour se déplacer autour
          de la surface de glace, tu vas utiliser le bloc "avancer".
      8:
        image: notes/frozen1_8.jpg
        text: Ici, le bloc "avancer' dit "avance de 100 pixels". Quand tu appuies
          sur "Run" que ce passe-t-il ? Elsa se déplace en avant sur une certaine
          distance sur l'écran, 100 pixels en fait ! Les pixels sont, en gros, de
          minuscules carrés sur ton écran d'ordinateur.
      9:
        image: notes/frozen1_9.jpg
        text: L'autre bloc que nous avons dans cette épreuve dit "tourne à droite
          de 90 degrés". Et quand nous utilisons ce bloc "Tourne à droite", cela fait
          tourner Elsa d'un certain angle. Tu peux jouer avec pour voir de combien
          tu veux qu'Elsa tourne. Cet angle est mesuré à partir du chemin qui se trouve
          en face d'Elsa. Ainsi, ceci est un tour à 90 degrés. Et ceci un tour à 120
          degrés.
      10:
        image: notes/frozen1_10.jpg
        text: N'oubliez pas, vous pouvez modifier le nombre de pixels et de degrés
          en cliquant sur les flèches sur le côté.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Salut, je suis Paola ! Les ordinateurs sont vraiment bons pour faire
          des actions répétitives. Vous pouvez compter jusqu'à 10, 20 ou 100. Mais
          un ordinateur peut compter jusqu'à 1 milliard ou 1 billion. Il ne s'ennuiera
          pas et ça ne lui prendra que quelques secondes. Que ce soit pour compter,
          dessiner, ou faire n'importe quoi, les ordinateurs peuvent répéter des choses
          des centaines, ou même des milliards de fois.
      2:
        image: notes/frozen2_2.jpg
        text: En programmation, nous appelons ceci une boucle. Une boucle est ce que
          l'on utilise pour répéter son code maintes et maintes fois. Pour l'épreuve
          suivante, ton but est d'aider Anna à créer un carré avec le bloc « Répéter
          ».
      3:
        image: notes/frozen2_3.jpg
        text: Tous les blocs de code que tu places à l'intérieur du bloc « Répéter
          » seront répétés les uns après les autres, autant de fois que tu le souhaites.
      4:
        image: notes/frozen2_4.jpg
        text: Pour dessiner un carré, tu peux utiliser le bloc "avancer" et "tourner
          à droite" quatre fois. Mais la façon la plus simple est de dire à l'ordinateur
          "avance" et "tourne à droite de 90 degrés" une seule fois, et de lui dire
          ensuite de répéter ce groupe d'actions quatre fois. Pous cela, tu dois placer
          le bloc "avancer" et "tourner à droite" à l'intérieur d'un bloc "Répéter".
      5:
        image: notes/frozen2_5.jpg
        text: Souviens-toi, tu peux utiliser le nombre que tu veux dans le bloc "Répéter"
          , et cela va répéter l'intérieur du bloc autant de fois que tu as choisi.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Salut, je suis Chris Bosh. Je suis un joueur de basket-ball professionnel,
          et j'ai codé au lycée.
      2:
        image: notes/frozen3_2.jpg
        text: Un des concepts les plus importants en informatique est la manière de
          définir des nouvelles commandes. La plupart des ordinateurs n'ont qu'une
          centaine de commande ou de mots. Et en fait, l'art et la magie consiste
          à définir tes propres nouveaux mots à partir de ces premières briques.
      3:
        image: notes/frozen3_3.jpg
        text: Une fois que tu as appris à un ordinateur comment faire une action une
          fois en utilisant cette suite de commandes, tu peux donner un nom à cette
          action pour qu'elle soit plus facile à répéter ensuite. Quand tu définis
          ta propre commande et lui donne un nom, on appelle ça une fonction.
      4:
        image: notes/frozen3_4.jpg
        text: Salut, je suis Jess. Lorsque vous programmez avec des blocs, tu vas
          utiliser des fonctions s'il y a un ensemble d'actions que tu souhaites utiliser
          plusieurs fois. Par exemple, le code que tu as écrit pour faire un carré.
      5:
        image: notes/frozen3_5.jpg
        text: Tu peux définir ceci comme une fonction "créer un carré".
      6:
        image: notes/frozen3_6.jpg
        text: Tu as maintenant un nouveau bloc que tu peux utiliser plusieurs fois
          pour créer plusieurs carrés.
      7:
        image: notes/frozen3_7.jpg
        text: Beaucoup de formes simples peuvent être utilisées pour créer des motifs
          plus complexes. Dans l'épreuve suivante, le code que tu as écrit récemment
          pour faire un cercle est à ta disposition en tant que nouvelle fonction
          capable de faire des cercles de différentes tailles. Peux-tu l'utiliser
          pour aider Elsa à créer des motifs beaux et complexes dans la neige?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Jusqu'ici, tu as fait une animation ou une histoire qui se rejoue à
          l'identique à chaque fois que tu l'exécutes. A présent, tu vas faire un
          jeu intéractif auquel tu peux véritablement jouer.
      2:
        image: notes/playlab_2.png
        text: Voici le bloc "si une flèche est utilisée" et le bloc "déplacer l'acteur".
          Tu peux utiliser ces blocs ensemble pour déplacer l'acteur avec les touches
          de flèches.
      3:
        image: notes/playlab_3.png
        text: Et voilà certains blocs qui font des choses quand l'acteur entre en
          collision ou reçoit un clic. Essaye-les et amuse-toi !
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Nous allons crée des jeux avec le Labo. Les bons jeux ont une histoire
          , et chaque histoire a des acteurs. Nous allons apprendre comment faire
          parler, bouger et intéragir des acteurs tels que des sorcières, des extra-terrestres,
          et animaux. A la fin de cette leçon, tu peux créer un jeu à partir de rien
          et le partager avec tes amis.
      2:
        image: notes/playlab_intro_2.png
        text: Votre écran se divise en trois parties. A la gauche, se trouve l'espace
          de jeu où le programme va s'exécuter. Les instructions pour chaque niveau
          sont écrites en dessous.
      3:
        image: notes/playlab_intro_3.png
        text: La zone centrale est la boîte à outils, et chacun de ces blocs est un
          bout de code. L'espace sur la droite est appelé l'espace de travail et c'est
          ici que nous allons construire notre programme.
      4:
        image: notes/playlab_intro_4.png
        text: Pour commencer, tu vas avoir besoin de relier tes blocs au bloc "à l'exécution".
          Tu peux relier plusieurs blocs ensemble en les glissant jusqu'à ce que tu
          voies la ligne jaune, et il s'emboiteront alors ensemble.
      5:
        image: notes/playlab_intro_5.png
        text: Dans ce premier puzzle, notre acteur est un manchot et nous allons lui
          faire dire « Bonjour » en faisant glisser le bloc « dire », en l'accrochant
          au bloc « lors du lancement » , et en tapant « Bonjour ». Nous pouvons aussi
          faire bouger le manchot en utilisant les blocs « aller à droite » et « aller
          à gauche ». Une fois tes blocs en place, appuie sur « Démarrer » pour voir
          ce que tu as programmé.
      6:
        image: notes/playlab_intro_6.png
        text: Commençons, et à la fin tu seras capable de créer ton propre jeu avec
          toutes sortes de joueurs qui peuvent interagir, devenir content ou triste,
          gagner des points, ou jeter des boules de feu, ou même disparaître. tout
          dépend de toi et du jeu que tu souhaites faire.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: À présent, nous allons apprendre une chose que tous les programmeurs
          de jeu utilisent. On appelle ça des événements. Un événement dit à votre
          programme d'écouter lorsque quelque chose se produit. Quand cette chose
          arrive, il effectue une action.
      2:
        image: notes/playlab_events_2.png
        text: Quelques exemples d'évènements sont l'écoute des clics de souris, une
          touche fléchée, ou un effleurement de l'écran.
      3:
        image: notes/playlab_events_3.png
        text: Ici, nous allons faire en sorte que le robot de l'espace salue les terriens
          quand on clique sur lui. Nous lui dirons d'utiliser le bloc "quand tu es
          cliqué" et d'y attacher le bloc "dire". Quand le joueur clique sur le robot
          de l'espace, tout ce qui est attaché à cet évènement "quand tu es cliqué"
          sera exécuté. Qu'en dit ton extra-terrestre ?
      4:
        image: notes/playlab_events_4.png
        text: Il y a aussi des blocs "touches fléchées". Si tu les relies à des blocs
          "se déplacer", tu peux commencer à déplacer tes acteurs vers le haut, le
          bas, la droite ou la gauche. Petit à petit, ton jeu devient plus interactif.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Voici le bloc "répète à l'infini". Tout ce qui se trouve dans ce bloc
          sera effectué sans arrêt tout au long du jeu.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Si tu veux qu'un acteur fasse quelque chose de manière répétée, sans
          que le joueur ait à faire quoi que ce soit, nous allons placer cela dans
          le bloc "répète à l'infini".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Dans la prochaine épreuve notre but est d'aider le magicien à patrouiller
          le long des frontières du royaume, à gauche et à droite en continu. En apprenant
          comment fonctionne les commandes de répétition, tu gagneras énormément de
          temps quand tu feras ton propre jeu.
