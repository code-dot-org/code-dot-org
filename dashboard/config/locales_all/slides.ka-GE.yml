"ka":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: მოგესალმები კოდის პირველ საათზე! დროა, გავუგოთ გემო პროგრამირებას.
      2:
        image: notes/hoc1_2.jpg
        text: ჩვენ გამოვიყენებთ ბლოკლის - პროგრამირების ვიზუალურ ენას, რომელშიც კოდის
          საწერად ბლოკები გამოიყენება.
      3:
        image: notes/hoc1_3.jpg
        text: ძირითადად, კოდს წერენ ხოლმე, მაგრამ ბლოკლი ვიზუალური ენაა. ყოველი ბლოკი
          "ნამდვილი" კოდის ერთ ხაზს შეესაბამება.
      4:
        image: notes/hoc1_4.jpg
        text: თქვენ ისწავლით კომპიუტერული მეცნიერების საწყისებს, რომლებიც გამოიყენება
          ყველგან, დაწყებული აპლიკაციების შექმნით, დამთავრებული მარსზე თვითმავალი
          აპარატის მართვით.
      5:
        image: notes/hoc1_5.jpg
        text: პროგრამა არის ინსტრუქციების ერთობლიობა, რომელსაც ემორჩილება თქვენი კომპიუტერი.
      6:
        image: notes/hoc1_6.jpg
        text: შენი პირველი პროგრამის მიზანია ლაბირინთის გავლით მიაღწევინო გაბრაზებულ
          ჩიტს მწვანე გოჭამდე.
      7:
        image: notes/hoc1_7.jpg
        text: მარცხენა მხარესაა ლაბირინთი, რომელშიც გაეშვება პროგრამა. ყოველი ამოცანის
          დავალება ლაბირინთის ქვემოთაა მოცემული.
      8:
        image: notes/hoc1_8.jpg
        text: ინსტრუმენტების შუა პანელი შეიცავს ბრძანებებს გაბრაზებული ჩიტის სამართავად.
          კოდის დასაწერად სწორედ ესენი უნდა გამოიყენოთ.
      9:
        image: notes/hoc1_9.jpg
        text: მარჯვნივ განლაგებულია თქვენი სამუშაო ადგილი, სადაც პროგრამის შესაქმნელად
          უნდა გადაიტანოთ ბლოკები ინსტრუმენტების პანელიდან. ბლოკის წასაშლელად გადაიტანეთ
          ის ნაგვის ყუთში.
      10:
        image: notes/hoc1_10.jpg
        text: ყოველი ბლოკი არის ერთი ბრძანება. თუ სამუშაო ადგილას გადაიტანთ ბლოკს
          "მოძრაობა წინ" და დააჭერთ "კოდის გაშვებას", ჩიტი ლაბირინთში ერთი ნაბიჯით
          გადაადგილდება.
      11:
        image: notes/hoc1_11.jpg
        text: ერთზე მეტი მოქმედების შესასრულებალად შეგიძლიათ სამუშაო ადგილას ბევრი
          ბლოკი გადაიტანოთ და გადააბათ ისინი ერთმანეთს. ჩიტი შეასრულებს ბრძანებებს
          ზემოდან ქვემოთ თანმიმდევრობით.
      12:
        image: notes/hoc1_12.jpg
        text: თუ პროგრამა უკვე გაუშვით, მაგრამ გინდათ რომ შეასწოროთ და თავიდან სცადოთ,
          დააჭირეთ ღილაკს "თავიდან".
      13:
        image: notes/hoc1_13.jpg
        text: დროა ადგილი მივუჩინოთ ამ გოჭებს!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: ჰეი, მე ჯეი ერი ვარ! მრბოლელთა ყოველ გუნდს მოსაგებად სჭირდება პროგრამისტები.
          ისინი ამუშავებენ მანქანის მონაცემებს მის ასაჩქარებლად.
      2:
        image: notes/stage5_2.jpg
        text: ამ თავსატეხებში თქვენ იქნებით მხატვარი, რომელიც ყველგან, სადაც მიდის,
          კვალად ტოვებს ხაზს.
      3:
        image: notes/stage5_3.jpg
        text: ესაა ბლოკი "გადაადგილება 100 პიქსელით". პიქსელი არის უმცირესი წერტილი
          თქვენს ეკრანზე.
      4:
        image: notes/stage5_4.jpg
        text: ესაა ბლოკი "მობრუნება მარჯვნივ 90 გრადუსით". იგი მოაბრუნებს მხატვარს
          ისევე, როგორც "მობრუნების" ბლოკი აბრუნებდა პერსონაჟებს ლაბირინთში.
      5:
        image: notes/stage5_5.jpg
        text: დააჭირეთ ისარს რომელიმე ბლოკში და შეცვალეთ მხატვრის წინ მოძრაობებისა
          ან მობრუნებების რაოდენობა. კარგად გაეცანით ამ ახალი ბლოკების შესაძლებლობებს.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: ჰეი, მე პაოლა ვარ! ამ თავსატეხებში თქვენ ხაიქნებით ფერმერი, რომელმაც
          უნდა მოასწოროს თავისი ყანა ხორბლის დასათესად.
      2:
        image: notes/stage9_2.jpg
        text: უნდა დაეხმაროთ და მოაშორებინოთ მიწის ყველა გროვა და შეავსებინოთ ყველა
          ორმო.
      3:
        image: notes/stage9_3.jpg
        text: ახალი ბლოკი გროვას ერთ პორცია მიწას აშორებს და ყრის ერთ პორცია მიწას
          ორმოში.
      4:
        image: notes/stage9_4.jpg
        text: გროვები და ორმოები სხვადასხვა ზომისაა, ამიტომ უნდა აცნობოთ ფერმერს,
          რამდენჯერ მოიქნიოს ნიჩაბი.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: ჰეი, მე ვარ ქეითი! პროგრამირებაში ერთ-ერთი ყველაზე მაგარი რამ ისაა,
          რომ კომპიუტერული პროგრამა შეიძლება იყოს ინტერაქტიული.
      2:
        image: notes/flappy02.jpg
        text: ყოველჯერ, როცა ვინმე აჭერს რამე ღილაკს ან წერს რამეს კომპიუტერსა ან
          ტელეფონში, ხდება მოვლენა და არსებობს კოდი, რომელიც განსაზღვრავს, რა უნდა
          მოხდეს ამ მოვლენის დროს.
      3:
        image: notes/flappy03.jpg
        text: 'მაგალითად, შეიძლება მოვლენების გადამმუშავებელი იყოს ასეთი: თუ ვინმე
          დაკლიკავს მაუსით, უნდა გამოიცეს ხმა '
      4:
        image: notes/flappy04.jpg
        text: გაგიგონია ოდესმე FlappyBird თამაში? მოვლენების გადამმუშავებლების მეშვეობით
          ჩვენ ამ თამაშის საკუთარ ვერსიას შევქმნით!
      5:
        image: notes/flappy05.jpg
        text: კოდი, რომელსაც შენ დაწერ, შეიცავს ბლოკებს ბრძანებებით. დაფარული ნაწილის
          ქვეშ ყოველი ბლოკი ნამდვილი კოდია.
      6:
        image: notes/flappy06.jpg
        text: 'შეხედე სამუშაო სივრცეს - ხედავ რამდენიმე შევსებულ მწვანე ბლოკს? მოვლენებს
          სწორედ ესენი დაამუშავებენ '
      7:
        image: notes/flappy07.jpg
        text: 'თუ გინდა, რომ ჩიტი ფრთებს იქნევდეს ყოველთვის, როცა მაუსს დაკლიკავ,
          მიუმაგრე "აქნევის" ბლოკი შესაბამისი მოვლენის დამამუშავებელ ბლოკს: ახლა შენს
          თამაშში, როცაც კი დაკლიკავ, ჩიტი აფრინდება.'
      8:
        image: notes/flappy08.jpg
        text: ყოველ თავსატეხში მოვლენების ახალ ტიპებს შემოვიტანთ და თქვენ მოგიწევთ
          გადაწყვიტოთ, რომელი ბლოკები შეიცავს ამ მოვლენების შესაბამის მოქმედებებს.
      9:
        image: notes/flappy09.jpg
        text: როცა ასეთ დაშვებულ ისარს ხედავთ, ეს ნიშნავს რომ პარამეტრების შეცვლა
          შეგიძლიათ - მაგალითად, რომელი ხმა უნდა ისმოდეს, როცა ჩიტი დავარდება ძირს.
      10:
        image: notes/flappy10.jpg
        text: ბოლო თავსატეხში თქვენ შეძლებთ შექმნათ თქვენი საკუთარი თამაში და გაუზიაროთ
          ის მეგობრებს. იხალისეთ!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: ჰეი, მე ვარ მარკი! მოდი, მეტი ვისწავლოთ ციკლებზე. ციკლების გამოყენებით
          თქვენ აცნობებთ კომპიუტერს, რომ მოქმედებათა რაღაც ერთობა მიყოლებით უნდა გამეორდეს,
          ათასჯერ ან თუნდაც მილიონჯერ.
      2:
        image: notes/hoc2_2.jpg
        text: ამ თავსატეხში გოჭის დასაჭერად ჩიტი წინ 5 ნაბიჯით უნდა გადაადგილდეს.
      3:
        image: notes/hoc2_3.jpg
        text: ახალი ბლოკი "გამეორება" ახლა ძალიან დაგვეხმარება.
      4:
        image: notes/hoc2_4.jpg
        text: იმის მაგივრად, რომ ხუთი "წინ გადაადგილების" ბლოკი დააწყოთ...
      5:
        image: notes/hoc2_5.jpg
        text: შეგვიძლია ბლოკი "წინ გადაადგილება" ჩავსვათ "გამეორების" ბლოკში და ჩავწეროთ,
          რამდენჯერ უნდა გამეორდეს მოქმედება.
      6:
        image: notes/hoc2_6.jpg
        text: 'და ეს მნიშვნელოვანია: გამეორების ბლოკში ერთზე მეტი ბრძანების ჩასმა
          შეგიძლიათ.'
      7:
        image: notes/hoc2_7.jpg
        text: გამოიყენეთ ახალი ბლოკი "გამეორება"!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'ჰეი, მე კრისი ვარ. სანამ მაიამი ჰითს შევუერთდებოდი, ჯორჯიას ტექ. უნიში
          ვსწავლობთი ინფორმატიკას. მოდი, ვნახოთ, როგორია ჩვენი ახალი ბლოკი: "გაიმეორე,
          სანამ".'
      2:
        image: notes/hoc3_2.jpg
        text: რა ვქნათ, თუ არ ვიცით, რამდენად შორს უნდა წავიდეს ჩიტი, გოჭს რომ მიწვდეს?
      3:
        image: notes/hoc3_3.jpg
        text: თუ ბლოკს "მოძრაობა წინ" ჩავსვამთ ბლოკში "გაიმეორე, სანამ", ჩიტი იმოძრავებს
          წინ, სანამ არ მიაღწევს გოჭამდე (ან შეეჩეხება კედელს).
      4:
        image: notes/hoc3_4.jpg
        text: 'მნიშვნელოვანია: ისევე, როგორც ადრე, "გაიმეორე, სამამ" ბლოკში ბევრი
          ბლოკის ჩასმა შეიძლება და ისინი ყველა გამეორდება.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: ჰეი, მე ვარ ბილი! ვისწავლოთ ახალი მნიშვნელოვანი ცნება "თუ". ის ეხმარება
          კომპიუტერს გადაწყვეტილებების მიღებაში.
      2:
        image: notes/hoc4_2.jpg
        text: დააკვირდი, შენ თვითონაც ხშირად იყენებ "თუ"-ს გადაწყვეტილების მისაღებად.
          მაგალითად, ყოველ დილით ფიქრობ "თუ გარეთ წვიმს, ქოლგას ავიღებ".
      3:
        image: notes/hoc4_3.jpg
        text: შეგვიძლია ვუთხრათ ზომბის, რომ შეამოწმოს, თუ არის მარცხნივ გზა, და თუ
          არის, ვუბრძანოთ, რომ მოუხვიოს.
      4:
        image: notes/hoc4_4.jpg
        text: 'დავწეროთ კოდი: გადავიტანოთ "თუ" ბლოკი და ჩავსვათ მასში ბლოკი "მოხვევა
          მარცხნივ".'
      5:
        image: notes/hoc4_5.jpg
        text: ახლა, თუ ზემოთ ჩავსვამთ ბლოკს "მოძრაობა წინ" და გამეორების ბლოკს ყველაფრის
          ირგვლივ, მოძრაობისას ზომი ყოველთვის შეამოწმებს, არის თუ არა მარცხნივ შესახვევი.
          "გამეორება" ამ შემთხვევაში გადამწყვეტია, იმიტომ რომ ზომბიმ მოსახვევი ყოველ
          ნაბიჯზე უნდა შეამოწმოს.
      6:
        image: notes/hoc4_6.jpg
        text: '"თუ" დებულებები ძალიან მნიშვნელოვანია პროგრამირებაში. ერთ-ერთი პირველი
          თამაში, რაც დავწერე იყო Tic-Tac-Toe, რომელიც შეიცავდა შემდეგ დებულებას:
          "თუ სხვა მოთამაშე იგებს, დაბლოკე კვადრატი, რომლითაც შეუძლია მოგება".'
      7:
        image: notes/hoc4_7.jpg
        text: გამოიეყენეთ ახალი ბლოკი "თუ"!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: ჰეი, მე მქვია სალონი. მე ვიყენებ ინფორმატიკას ჯანმრთელობისა და მედიცინის
          პრობლემების გადასაწყვეტად. მოდი, გავიგოთ, რა არის "თუ/ სხვაგვარად" ბრძანება.
          ის ჰგავს "თუ" ბლოკს, მაგრამ შეიცავს "სხვაგვარად" მოქმედების შესაძლებლობას.
      2:
        image: notes/hoc5_2.jpg
        text: თუ "წინ მოძრაობის" ბლოკს ჩავსვამთ იქ, სადაც წერია "შესრულება" და "მარცხნივ
          მოხვევას" იქ, სადაც წერია "სხვაგვარად", გამოვა, რომ ზომბიმ ორ შესაძლებლობას
          შორის უნდა აირჩიოს. თუ წინ იქნება გზა, ზომბი იმოძრავებს წინ, და სხვა შემთხვევაში
          (თუ წინ გზა არ არის), იგი მოუხვევს მარცხნივ.
      3:
        image: notes/hoc5_3.jpg
        text: ისევე, როგორც "თუ" ბლოკი, "თუ/სხვაგვარად" ბლოკიც შეგვიძლია ჩავსვათ გამეორების
          ბლოკში. ასე ზომბი გააგრძელებს მოძრაობას და "თუ/სხვაგვარად" ბლოკის გამო ყოველ
          ნაბიჯზე შეამოწმებს, არის თუ არა შესახვევი.
      4:
        image: notes/hoc5_4.jpg
        text: ახლა კი, მიიყვანეთ ეს ზომბი სადაც საჭიროა!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: '"თუ/სხვაგვარად" დებულება ასახვს ორ რამეს შორის არჩევანს. ვნახოთ, როგორ
          შეიძლება მისი გამოყენება იმისთვის, რომ ჩვენს მეგობარ სკრატს დავეხმაროთ.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: ეს ბლოკი გამოიყურება ისევე, როგორც "თუ" ბლოკი, მაგრამ დამატებითი ფუნქცია
          აქვს - სხვაგვარად მოქცევის შესაძლებლობა. თუ იქ, სადაც წერია "შესრულება"
          ჩავსვამთ ბლოკს "მოძრაობა წინ" და იქ, სადაც წერია "სხვაგვარად" - "მარცხნივ
          მოხვევას", გამოვა, რომ ციყვი სკრატი იმოძრავებს წინ სულ, როცა ეს შესაძლებელი
          იქნება და თუ არა - მოუხვევს მარცხნივ.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: ასე ჩვენ ვამოწმებთ შესაძლებლობას და ვიღებთ გადაწყვეტილებას შედეგის საფუძველზე.
          ისევე, როგორც "თუ", "თუ/სხვაგვარად" ბლოკიც შეიძლება ჩაისვას "გამეორების"
          ბლოკში.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: ახლა დავეხმარეოთ ციყვ სკრატს მიაღწიოს ამ რკომდე!
    function:
      1:
        image: notes/stage13_1.jpg
        text: ჰეი, მე ვარ ბრინა, ინსტაგრამის პროგრამისტი. ფუნქცია არის კოდის გარკვეული
          ნაწილი, რომელიც ხშირად დაგჭირდებათ და ამიტომ მისი ყოველჯერ თავიდან დაწერის
          მაგივრად თქვენ შეგიძლიათ უბრალოდ ერთი ბლოკი გამოიყენოთ.
      2:
        image: notes/stage13_2.jpg
        text: ახლა უნდა ვისწავლოთ ფუნქციების განსაზღვრა. ფუნქციის განსაზღვრებას კუთხეში
          აქვს ვარსკვლავი, მისი სახელი კი ზედა ხაზში წერია.
      3:
        image: notes/stage13_3.jpg
        text: განსაზღვრებაში შემავალი ბლოკები აღწერენ ფუნქციის მოქმედებას. ამ ფუნქციას
          ჰქვია "შეავსე 5" და ის შედგება ბლოკებისგან "შევსება" და "გამეორება".
      4:
        image: notes/stage13_4.jpg
        text: განსაზღვრება უკვე სამუშაო სივრცეშია, მაგრამ ფერმერი არ შეასრულებს ფუნქციას,
          სანამ ჩვენს "შეავსე 5" ბლოკს არ გადმოვიტანთ ფუნქციების კატეგორიიდან.
      5:
        image: notes/stage13_5.jpg
        text: 'იმედია, ფუნქციები გაამარტივებს თქვენს სწავლას! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'ჰეი, მე ვარ მაკინდი! დროა, გავეცნოთ ბლოკს "სანამ". '
      2:
        image: notes/stage9_6.jpg
        text: ბლოკი "სანამ" გააკეთებს ყველაფერს, რაც მასშია ჩასმული, სანამ ზემოთ მოცმული
          დებულება ჭეშმარიტი იქნება.
      3:
        image: notes/stage9_7.jpg
        text: მაგალიად, თუ ფერმერი დგას გროვის გვერდით, იგი გააგრძელებს თითო-თითო
          ნიჩბის მოსმას, სანამ ეს გროვა ჯერ კიდევ არსებობს.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: ჰეი, მე ვარ ტრინა და მე პიქსარში ვმუშაობ. სხვადასხვა ფილმებზე მიმუშავია,
          მაგალითად, შრეკზე.
      2:
        image: notes/stage11_2.jpg
        text: ეს არის ჩვენი ახალი ციკლი "მთვლელი". იგი გაიმეორებს მოქმედებებს უსასრულოდ
          და თქვენ ასევე შეგიძლიათ ცოტ-ცოტა შეცვალოთ ეს მოქმედებები ყოველი გამეორებისას.
      3:
        image: notes/stage11_3.jpg
        text: ამ მაგალითში ციკლი "მთვლელი" გვეუბნება "დავითვლი მთვლელით 50-დან 90-მდე
          ბიჯით 10" და მის შიგნით გვაქვს ბლოკი "დახატე კვადრატი". გამოიტანეთ ბლოკი
          "მთვლელი" ცვლადების სექციიდან "სიგრძის" სლოტში.
      4:
        image: notes/stage11_4.jpg
        text: ეს ნიშნავს, რომ ჩვენი მხატვარი დახატვს კვადრატს გვერდით 50 პიქსელი,
          მერე დაუმატებს 10-ს და დახატავს კვადრატს გვერდით 60 პიქსელი და ა. შ. ჯამში
          გვექნება 5 კვადრატი, გვერდებით 50, 60, 70, 80 და 90 პიქსელი.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: ჰეი, მე ვარ ჯანეტი და მე ვარ პროგრამისტი ზინგაში.
      2:
        image: notes/stage15_2.jpg
        text: დავუშვათ, გვინდა დავხატოთ რამდენიმე სამკუთხედი სხვადასხვა სიგრძის გვერდებით?
      3:
        image: notes/stage15_3.jpg
        text: შეგვიძლია დავწეროთ მთელი კოდი ხელით ან გამოვიყენოთ ფუნქცია შესაბამისი
          პარამეტრებით.
      4:
        image: notes/stage15_4.jpg
        text: დაკლიკე ცისფერ ვარსკვლავს ფუნქციაში "დახატე სამკუთხედი". შემდეგ გადაიტანე
          "პარამეტრის სახელი" ბლოკში "პარამეტრი".
      5:
        image: notes/stage15_5.jpg
        text: შემდეგ, თუ იქ, სადაც წერია X ჩაწერ "სიგრძეს" და დააჭერ შეყვანის ღილაკს,
          ფუქნციაში შეიქმნება სიგრძის პარამეტრი.
      6:
        image: notes/stage15_6.jpg
        text: ახლა დააჭირე ვარსკვლავს, შემდეგ კატეგორიას "ცვლადები" და გადაიტანე ბლოკი
          "სიგრძე" ბლოკში "მოძრაობა წინ". წინა რიცხვითი ბლოკი წაშალე.
      7:
        image: notes/stage15_7.jpg
        text: ფუნქციის პარამეტრებით გამოსაყენებლად, გადადი კატეგორიაში ფუნქციები და
          გამოიტანე ფუნქცია "სამკუთხედის დახატვა მოცემული სიგრძით".
      8:
        image: notes/stage15_8.jpg
        text: ახალ შეგიძლია გამოიყენო ბლოკი "მათემატიკა" და შეიყვანო მასში სხვადასხვა
          რიცხვები - ასე დახატავ სხვადასხვა ზომის სამკუთხედებს.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: გილოცავთ! ბოლო თავსატეხის ამოხსნისას შენ დაწერე კოდი, რომლითაც ნებისმიერი
          რობოტი გააგნებს გზას ნებისმიერ ხაზოვან ლაბირინთში და ნებისმიერი სიგრძის
          ტუნელში.
      2:
        image: notes/hoc6_2.jpg
        text: ცნებები, რომელსაც იყენებდი არის ნებისმიერი პროგრამის ან აპლიკაციის ძირითადი
          ნაწილი. ჩვენ ვისწავლეთ ციკლების გამეორება, გამეორება მიზნის მიღწევამდე,
          თუ და თუ/სხვაგვარად დებულებები.
      3:
        image: notes/hoc6_3.jpg
        text: თუ მოგეწონა კოდის შენი პირველი საათი, ეწვიე code.org-ს და გააგრძელე
          პროგრამირების სწავლა. როცა დაასრულებ ჩვენს ოცსაათან კურსს, პროგრამირების
          საფუძვლები სრულად გექნება გავლილი და შეძლებ დაიყო მობილური აპლიკაციების,
          რობოტების ინსტრუქციების, თამაშების... ყველაფრის პროგრამირების სწავლა.
      4:
        image: notes/hoc6_4.jpg
        text: 'ტექნოლოგიები ცვლის ყველაფერს და არა აქვს მნიშვნელობა, ახალგაზრდა ხარ
          თუ აღარ: პროგრამირება სახალისოა, კრეატიული და მისი სწავლა ყველას შეუძლია!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: ჩანაწერები მალე იქნება!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: ჰეი, მე მქვია ლინდსი. მე ვიგონებ და ვქმნი ჩემს საკუთარ აპლიკაციებს.
          გამოვიყენოთ კოდი და შევუერთდეთ ანასა და ელზას მაგიისა და ყინულის სამყაროში.
      2:
        image: notes/frozen1_2.jpg
        text: ციგურებზე სრიალისას შენ დახატავ სხვადსხვა ფიფქებსა და შემქნი ზამთრის
          საოცრებათა ქვეყანას მერე კი მისი მეგობრებისთვის გაზიარება შეგეძლება.
      3:
        image: notes/frozen1_3.jpg
        text: შემდეგი ერთი საათის განმავლობაში პროგრამირების საფუძვლებს დაეუფლები.
          ჩვეულებრივ, პგორამირება ტექსტის წერას ნიშნავს, მაგრამ ჩვენ ვიყენებთ ბლოკლის
          - ენას, რომელშიც საკმარისია ბლოკებით მანიპულირება. ასე სწავლობენ პროგრამირების
          საფუძვლებს უნივერსიტეტების სტუდენტებიც კი. სინამდვილეში, შენ მაინც წერ კოდს.
      4:
        image: notes/frozen1_4.jpg
        text: პროგრამა არის ინსტრუქციების ნაკრები, რომელიც აცნობებს კომპიუტერს, თუ
          რა უნდა გააკეთოს მან. დავწეროთ კოდი ან პროგრამა, რომელიც დაეხმარება ელზას
          მარტივი ხაზის გავლებაში. შემდეგ ამ კოდს უფრო რთული სახეების შესაქმნელად
          გამოვიყენებთ.
      5:
        image: notes/frozen1_5.jpg
        text: შენი ეკრანი სამ ძირითად ნაწილადაა დაყოფილი. მარცხნივ არის ყინულის მოედანი,
          სადაც გაეშვება შენი პროგრამა. ყოველი დონის ინსტრუქციები ქვემოთ იქნება დაწერილი.
      6:
        image: notes/frozen1_6.jpg
        text: ეს შუა ნაწილი არის ინსტრუმენტების პანელი და ყოველი ბლოკი არის მოქმედება,
          რომლის შესრულება შეუძლიათ ელზასა და ანას.
      7:
        image: notes/frozen1_7.jpg
        text: თეთრი სივრცე მარჯვნივ არის სამუშაო სივრცე - აქ დაიწერება ჩვენი პროგრამა.
          მაგალითად, ყინულზე გადასაადგილებლად აქ გადმოვიტანთ "წინ მოძრაობის" ბლოკს.
      8:
        image: notes/frozen1_8.jpg
        text: ბლოკი "წინ გადაადგილება" განსაზვღულია, როგორც "გადაადგილება წინ 100
          პიქსელით". რა მოხდება, თუ ამ კოდს გავუშვებთ? ელზა გადაადგილდება ჩვენს ეკრანზე
          ზუსტად 100 პიქსელით. პიქსელი ეკრანის უმცირესი წერტილია.
      9:
        image: notes/frozen1_9.jpg
        text: შემდეგი ბლოკი, რომელიც მოცემული გვაქვს ამ თავსატეხში განსაზღვრულია,
          როგორც "90 გრადუსით მობრუნება". როცა ვიყენებთ ბლოკს "მარჯვნივ მობრუნება",
          ელზა ტრიალდება გაკრვეული კუთხით. შეგიძლია სხვადასხვა მნიშვნელობები ჩაწერო
          და ნახო, რა მოხდება. კუთხე იზომება ელზას წინ მდებარე გზიდან. მაგალითად,
          ეს არის 90 გრადუსით მობრუნება, ეს კი - 120-ით.
      10:
        image: notes/frozen1_10.jpg
        text: გახსოვდეს, პიქსელებისა და გრადუსების ზომა შეგიძლია ისრებით შეცვალო.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: ჰეი, მე ვარ პაოლა. იცი, კომპიუტერებს ძალიან კარგად გამოსდით მოქმედებების
          გამეორება. შენ შეიძლება დათვლი ათამდე, ოცამდე ან ასამდე. მაგრამ კომპიუტერი
          დათვლის მილიარდამდე, ტრილიონამდე. მას ეს არც მობეზრდება და არც ბევრ დროს
          წაართმევს. თვლის, ხატვის - ნებისმიერი მოქმედების გამეორება კომპიუტერს დაუსრულებლად
          შეუძლია.
      2:
        image: notes/frozen2_2.jpg
        text: პროგრამირებაში ჩვენ ამას ვეძახით ციკლს. ციკლია, როდესაც შენი მოქმედება
          დაუსრულებლად მეორდება. შემდეგ თავსატეხში შენი მიზანია დაახატინო ანას კვადრატი
          "გამეორების" ბლოკის გამოყენებით.
      3:
        image: notes/frozen2_3.jpg
        text: კოდის ნებისმიერი ბლოკი, რომელსაც "გამეორების" ბლოკში ჩასვამ, გამეორედება
          იმდენჯერ, რამდენჯერაც შენ ეს გჭირდება.
      4:
        image: notes/frozen2_4.jpg
        text: კვადრატის დასახაზად შეგიძლია გამოიყენო ოთხ-ოთხჯერ ბლოკები "მოძრაობა
          წინ" და "მობრუნება მარჯვნივ". მაგრამ უფრო მარტივი იქნება ეს ორი ბლოკი თითო-თითოჯერ
          გამოიყენო, შემდეგ კი 4-ჯერ გაამეორებინო კომპიუტერს იგივე მოძრაობა. ამისთვის
          სამარისია ეს ბლოკები ჩასვა ბლოკში "გამეორება".
      5:
        image: notes/frozen2_5.jpg
        text: გახსოვდეს, რომ რა რიცხვსაც ჩაწერ ბლოკში "გამეორება", იმდენჯერ გამეორდება
          ის მოქმედებები, რაც ბლოკის შიგნითაა მოთავსებული.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: ჰეი, მე ვარ კრის ბოში. მე პროფესიონალურად ვთამაშობ კალათბურთს, კოლეჯში
          კი პროგრამირებას ვსწავლობდი.
      2:
        image: notes/frozen3_2.jpg
        text: ახალი ბრძანებების განსაზღვრა პროგრამირების ძალიან მნიშვნელოვანი ნაწილია.
          პროგრამირების ენების უმეტესობას სულ 100 სიტყვა და ბრძანება აქვს. ამ ერთეულების
          გამოყენებით ახალი ბრძანებების შექმნა ნამდვილი ხელოვნებაა.
      3:
        image: notes/frozen3_3.jpg
        text: როცა ერთხელ განუმარტავ კომპიუტერს როგორ უნდა შეასრულოს მოქმედებების
          თანმიმდევრობა, შეგიძლია ამ ერთიან მოქმედებას რამე სახელი დაარქვა - ასე მისი
          გამეორება მომავალში უფრო მარტივი იქნება. ამას ფუნქციის შექმნა ეწოდება.
      4:
        image: notes/frozen3_4.jpg
        text: ჰეი, მე ვარ ჯესი. ფუნქციები გამოიყენება, როცა გვაქვს ქმედებათა ისეთი
          ნაკრები, რომელიც გვინდა, რომ ხშირად გამოვიყენოთ. მაგალითად, შენ დაწერე კოდი
          კვადრატის დასახატად.
      5:
        image: notes/frozen3_5.jpg
        text: 'შეგიძლია განსაზღვრო ეს როგორც ფუნქცია და დაარქვა "კვადრატის დახატვა." '
      6:
        image: notes/frozen3_6.jpg
        text: ახლა გაქვს ახალი ბლოკი, რომელიც შეგიძლია გამოიყენო კვადრატების დასახატად.
      7:
        image: notes/frozen3_7.jpg
        text: მარტივი ფიგურებით რთული ფორმების შექმნაა შესაძლებელი. შემდეგ თავსატეხში
          კოდი, რომელიც წრის დასახარად დაწერე, ფუნქციის სახით გექნება მოცემული და
          შეძლებ სხვადასხვა ზომის წრეების დახატვას. დაეხამრე ელზას თოვლზე ლამაზი და
          რთული სახეების შექმნაში?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: აქამდე შენ ქმნიდი ანიმაციებს ან თამაშებს, რომლებიც ყოველი გაშვებისას
          ერთსა და იმავეს აკეთებდნენ. ახლა შეგეძლება ნამდვილი ინტერაქტიული თამაშის
          შექმნა.
      2:
        image: notes/playlab_2.png
        text: მოცემულია ბლოკები "როცა ისარი" და "მოთამაშის გადაადგილება". თუ ამ ბლოკებს
          გააერთიანებ, შეძლებ ამოძრავო მოთამაშე ისრების გამოყენებით.
      3:
        image: notes/playlab_3.png
        text: კიდევ გვაქვს ბლოკები, რომლებიც აქტიურდება, როცა პერსონაჟები ეჯახებიან
          ერთმანეთს ან როცა მათზე ვაკლიკავთ. გამოიკვლიე, რისი გაკეთება შეგიძლია!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: 'თამაშებს თამაშების ლაბორატორიაში შევქმნით. კარგ თამაშში ყოველთვის არის
          ისტორია და ყოველ ისტორიაში არსებობენ პერსონაჟები. ჩვენ ვისწავლით როგორ ავალაპარაკოთ,
          ავამოძრავოთ და ერთმანეთში უერთიერთობა დავამყარებინოთ ჩვენს პერსონაჟებს:
          ჯადოქრებს, უცხოპლანეტელბს და ცხოველებს. ამ ტუტორიალის დასრულების შემდეგ
          შენ შეძლებ შექმნა შენი თამაში და გაუზიარო ის მეგობრებს.'
      2:
        image: notes/playlab_intro_2.png
        text: შენი ეკრანი სამ ძირითად ნაწილადაა დაყოფილი. მარცხნივ არის ყინულის მოედანი,
          სადაც გაეშვება შენი პროგრამა. ყოველი დონის ინსტრუქციები ქვემოთ იქნება დაწერილი.
      3:
        image: notes/playlab_intro_3.png
        text: შუაში არის ინსტრუმენტების პანელი - ყოველი ბლოკი არის კოდი. თეთრი სივრცე
          მარჯვნივ არის სამუშაო სივრცე, სადაც დაიწერება ჩვენი პროგრამა.
      4:
        image: notes/playlab_intro_4.png
        text: პირველ რიგში, ბლოკები უნდა მიემაგროს ნარინჯისფერ ბლოკს "როცა გაშვებულია".
          რამდენიმე ბლოკის ერთად შეკვრა შეგიძლია - მიუახლოვე ისინი ერთმანეთს სანამ
          არ გაჩნდება ყვითელი ხაზი და შემდეგ შეაერთე.
      5:
        image: notes/playlab_intro_5.png
        text: პირველ თავსატეხში ჩვენი პერსონაჟი არის პინგვინი, რომელსაც უნდა ვასწავლოთ
          მისალმება. ამისთვის ავიღოთ "თქმის" ბლოკი, მივუმაგროთ იგი გაშვების ბლოკს
          და ჩავწეროთ მასში "სალამი". მაჯვნივ და მარცხნივ მოძრაობის ბლოკებით შეგვიძლია
          გადავაადგილოთ კიდევაც ჩვენი პინგვინი. როცა ყველა ბლოკს დაალაგებ, გაუშვი
          პროგრამა და ნახე, რა გამოგივიდა.
      6:
        image: notes/playlab_intro_6.png
        text: დაიწყე პროგრამირება და ბოლოს შეძლება შექმნა შენი საკუთარი თამაში, ყველანაირი
          პერსონაჟებით, რომელთაც შეეძლებათ ურთიერთობა, მხირულება ან მოწყენა, ქულების
          დაგროვება და ცეცხლოვანი ბურთების სროლა - ერთმანეთის გაქრობაც კი. ყველაფერი
          შენზეა დამოკიდებული.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: ახლა ისეთ რამეს ვისწავლით, რასაც პროგრამისტები ყოველ დღე იყენებენ -
          მოვლენებს. მოვლენა აცნობებს შენს პროგრამას, რომ რაღაც უნდა დაუცადოს. როცა
          ეს რაღაც - მოვლენა - მოხდება, პროგრამა გარკვეულ ქმედებას ახორციელებს.
      2:
        image: notes/playlab_events_2.png
        text: 'მოვლენა შეიძლება იყოს: მაუსის დაკლიკვა, ისრის ღილაკზე დაჭერა, ეკრანზე
          შეხება.'
      3:
        image: notes/playlab_events_3.png
        text: ახლა უნდა შევქმნათ კოსმოსური ბოტი, რომელიც მიესალმება დედამიწელებს,
          როცა მასზე დაკლიკავენ. გამოიყენე ბლოკი "როცა დაკლიკავენ" და მიუმაგრე მას
          ბლოკი "თქმა". როცა მოთამაშე დაკლიკავს ბოტს, მოხდება ყველაფერი, რაც მიმაგრებულია
          ბლოკს "როცა დაკლიკავენ". ჰმ.. რა უნდა ათქმევინო შენს უცხოპლანეტელს?
      4:
        image: notes/playlab_events_4.png
        text: კიდევ გვაქვს ბლოკი "როცა ისარი". თუ ამ ბლოკს მოძრაობის ბლოკებს მიუმაგრებ,
          შენი პერსონაჟი ზემოთ, ქვემოთ, მარჯვნივ ან მარცხნივ იმოძრავებს. ხედავ? შენი
          თამაში უფრო და უფრო ინტერაქტიული ხდება.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: ეს არის ბლოკი "უსასრულოდ გამეორება". ყველაფერი, რასაც მასში ჩასვამ უსასრულოდ
          გამეორედება თამაშის განმავლობაში.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: თუ გვინდა, რომ პერსონაჟმა რაღაც ქმედება მუდმივად შეასრულოს, მოთამაშის
          ჩარევის გარეშე, ეს ქმედება "უსასრულოდ გამეორების" ბლოკში უნდა ჩავსვათ.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: შემდეგ თავსატეხში ჩვენი მიზანია დავეხმაროთ ჯადოქარს სამეფოს საზღვრების
          დაზვერვაში - ანუ, მან უსასრულოდ უნდა იმოძრავოს მარჯვნივ და მარცხნივ. გამეორების
          ფუნქციების კარგად შესწავლა უამრავ დროს დაგიზოგავს მომავალში, როცა შენს საკუთარ
          თამაშს დაწერ.
