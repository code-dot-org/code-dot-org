"fa-AF":
  data:
    instructions:
      2-3 Artist 1 new_instruction: سلام ، من یک هنرمندم. تو میتونی کد بنویسی تا من
        رو وادار کنی تقریبا هرچیزی رو بکشم. چند قطعه کد بنویس  تا باعث شی من روی خطوط
        خاکستری در تصویر بکشم. ( طول هر خط ۱۰۰ پیکسله)
      2-3 Artist 11_instruction: 'با درست کردن یک هشت ضلعی با 8 ضلع هرکدام به طول
        100 پیکسل به تابلوی ایست یک حاشیه بدهید. چند درجه باید بچرخی؟ (راهنما : 360
        تقسیم بر 8 چیست؟) '
      2-3 Artist 12_instruction: بلوک "تکرار" رو طوری طراحی کن که یک "دایره" برای
        کامل کردن کره چشم درست کنه . اگر هر حرکت به اندازه یک درجه بسمت راست بچرخد
        ، چند بار برای کامل کردن دایره باید تکرار کنی؟ 180؟ 360؟ 500؟
      2-3 Artist 2 new_instruction: 'این خونه یک دیوار نیمه کاره داره. هر ضلع 100
        پیکسله ، ولی دیواره نیمه کاره فقط 50 پیکسله. دیوار رو کامل کن. '
      2-3 Artist 2_instruction: 'این خونه یک دیوار نیمه کاره داره. هر ضلع 100 پیکسله
        ، ولی دیواره نیمه کاره فقط 50 پیکسله. دیوار رو کامل کن. '
      2-3 Artist 3.4_instruction: بلوک پرش نقاش رو بدون رسم کردن حرکت میده. خطوط منقطع
        رو با استفاده از هر دو بلوک پرش و رسم ، بکش.
      2-3 Artist 3_instruction: این کلاه به اندازه 100 پیکسل بلند است. کلاهی رسم کن
        که 70 پیکسل کوتاه تر است.
      2-3 Artist 3new_instruction: ارتفاع کلاه قرمز ۱۰۰ پیکسله. کلاه سیاهی بکش که
        ۷۰ پیکسل کوتاه‌تر باشه. عرض کلاه سیاه ۵۰ پیکسله.
      2-3 Artist 4_instruction: به من کمک کن تا خونه رو برای این گربه کامل کنم.
      2-3 Artist 5_instruction: برای رسم همون خونه با استفده از فقط 3 بلوک این کد
        رو با بلوک "تکرار" جایگزین کن.
      2-3 Artist 6_instruction: 'این خونه به یک سقف احتیاج داره! یک مثلث رسم کن. راهنما:
        هر سه ضلع به یک اندازه اند.'
      2-3 Artist 7_instruction: 'رسم کردن نیمه راست آخرین پنجره رو تموم کن. هر مربع
        پنجره 25 پیکسل است. '
      2-3 Artist 8_instruction: با نصف کردن مستطیل به 2 مربع هم اندازه ، اتاق ها رو
        برای هریک از حیوانات کامل کن. ظول مستطیل 200 پیکسل و عرض آن 100 پیکسل است.
      2-3 Artist 9_instruction: این بادباک رو کامل کن
      2-3 Artist Assessment 1_instruction: 'ارزیابی : کشیدن آخرین دندان رو تموم کن،
        طول 25 پیکسل و عرض 25 پیکسل.'
      2-3 Artist Debugging 1_instruction: آیا میتونی این کلاه رو با حداکثر ارتفاع
        ۱۰۰ پیکسل درست کنی؟
      2-3 Artist Debugging 10_instruction: 'پد دکمه‌های جهت دسته‌ی بازی من خیلی باریکه.
        راهنمایی: به اندازه‌ی ۱۰ پیکسل عریض‌ترش کن'
      2-3 Artist Debugging 11_instruction: به من کمک کن تا کشیدن دونه‌ی برف زیبام
        رو تموم کنم. چند بار لازمه که "تکرار کنم" تا تموم شه؟
      2-3 Artist Debugging 12_instruction: قراره که من یک موج اقیانوس به این صحنه
        اضافه کنم. میتونی کمکم کنی؟
      2-3 Artist Debugging 2_instruction: 'کد کشیدن سه تار مویی که میبینی اشتباهه.
        راهنمایی: طول هر تار مو ۷۵ پیکسله. این کد رو درست کن تا تار مو ها کشیده بشن.'
      2-3 Artist Debugging 3_instruction: 'قایق من یه سوراخ داره! می‌تونی با عوض کردن
        زاویه‌ی خط درستش کنی؟ راهنمایی: آخرین زاویه ۱۵ درجه انحراف داره.'
      2-3 Artist Debugging 4_instruction: چه تصویری رو داریم تلاش میکنیم بکشیم؟ وصل
        کردن نقطه ها را با استفاده از خطوط و زوایای مناسب کامل کنید.
      2-3 Artist Debugging 5_instruction: 'کد پایی که می‌بینی اشتباهه. راهنمایی: پا
        خیلی بلنده، ممکنه لازم باشه یکی از گام‌ها رو حذف کنیم.'
      2-3 Artist Debugging 6_instruction: به نظر میرسه که من روی صندلی‌ای نشستم که
        یک پایه نداره. قطعات کد رو برای کشیدن پایه ویرایش کن.
      2-3 Artist Debugging 7_instruction: به نظر می‌رسه حرف C برعکس کشیده می‌شه. می‌تونی
        کد رو طوری تغییر بدی که C درست کشیده شه؟
      2-3 Artist Debugging 8_instruction: فرفره‌‌ی من هنوز کامل نشده. چندبار باید
        تکرار کنم تا کامل بشه؟
      2-3 Artist Debugging 9_instruction: |
        کد برای این ریشه درست نیست.
        راهنمایی: زاویه کمتر از ۶۰ درجه است
      2-3 Artist Debugging Assessment 1_instruction: 'این شکل خیلی کوچیکه. میتونی
        بزرگترش کنی؟ راهنمایی: باید از هر سمت ۷۵ پیکسل طولانی‌تر بشه.'
      2-3 Artist Free Play_instruction: بازی آزاد! هرچیزی که دوست داری رسم کن.
      2-3 Artist Functions 1_instruction: 'سلام. من زامبی نقاشم. من عاشق نقاشی کشیدنم!
        به من کمک کن تا عینک های مربعی بکشم. راهنما : پل بین عینک ها 25 پیکسل کوچکتر
        از طول مربع است.'
      2-3 Artist Functions 10_instruction: دو دستورالعمل داریم، یکی برای کشیدن چرخ
        دنده‌ی بزرگ و یکی برای کشیدن چرخ دنده‌ی کوچک. از آن‌ها برای کشیدن داخل یک
        ماشین استفاده کن!
      2-3 Artist Functions 11.5_instruction: این مثل همان تابع «رسم شش گوش» است. چه
        می‌شود اگر تو هر دفعه داخل حلقه فقط ۶۰ درجه بچرخی؟
      2-3 Artist Functions 11_instruction: اسم تابع «رسم مربع» را به «رسم شش ضلعی»
        تغییر داده‌ایم، ولی هنوز مربع می‌کشد! می‌توانی تابع «رسم شش ضلعی» را طوری
        تغییر دهی تا شش ضلعی‌ای با ضلع‌های ۵۰ پیکسل بکشد، و شکل را با استفاده از آن
        رسم بکشی؟
      2-3 Artist Functions 12_instruction: 'دستورالعمل (تابع) ها واقعا برای چند بار
        رسم کردن شکل‌های پیچیده عالی هستند. می‌توانی از تابع «رسم گل» برای پر کردن
        بقیه‌ی جعبه‌ی کشاورز استفاده کنی؟ (راهنمایی: همه‌ی گیاه‌ها با ۱۰۰ پیکسل فاصله
        از هم جدا شده‌اند)  '
      2-3 Artist Functions 13_instruction: ما چهار تابع برای تو آماده کرده‌ایم. از
        آن‌ها هر طور دوست داری استفاده کن، داخل یک یا چند حلقه تا عکس‌هایی بسازی که
        بتوانی با دوستانت به اشتراک بگذاری. برای دیدن یک نمونه «اجرا» را فشار بده.
      2-3 Artist Functions 2_instruction: تابع‌ها به تو امکان تعریف بلوک‌های جدید
        را می‌دهند! ما بلوک‌های رسم مربع را داخل تابع «رسم مربع» جابجا کردیم. می‌توانی
        از این تابع استفاده کنی و عینک را بسازی؟ مربع‌ها ۷۵ پیکسل فاصله دارند.
      2-3 Artist Functions 3_instruction: تابع را ویرایش کن تا مربعی با طول ضلع ۱۱۵
        بکشد و عینک بزرگ‌تر را بکش. حالا مربع‌ها ۴۵ پیکسل فاصله دارند.
      2-3 Artist Functions 4_instruction: بلوک "تکرار" را برای رسم این 3 مربع استفاده
        کنید.
      2-3 Artist Functions 7_instruction: 'عملکرد " یک خانه رسم کن" را برای رسم دو
        خانه استفاده کن با استفاده از دو پارامتر مختلف. (راهنما: خانه اول 100 پیکسل
        است).'
      2-3 Artist Functions 9_instruction: یک تابع دانه برف داریم. با آن آزمایش کن
        تا یک صحنه‌ی زمستانی بسازی! این یک مرحله بازی آزاد است، بنابرین هیچ مساله‌ای
        برای حل کردن نیست. خوش بگذران!
      2-3 Artist Loops 1_instruction: می‌توانی یک شش ضلعی با ضلع‌های ۱۰۰ پیکسلی درست
        کنی تا سلول کامل شود؟ یادت باشد، این یعنی لازم است تو فقط ۶۰ درجه بچرخی!
      2-3 Artist Loops 10_instruction: وقتی مرحله‌ی آخر را نصف مقدار جلو برویم، برای
        شکل چه اتفاقی می‌افتد؟
      2-3 Artist Loops 11_instruction: حالا بیا یک حلقه‌ی تکرار دیگر دور کل ساختارمان
        بگذاریم! یادت نرود آخر حلقه‌ی بیرونی یک زاویه اضافه کنی.
      2-3 Artist Loops 2_instruction: حالا یک بلوک تکرار استفاده کن تا سلول را به
        پوست تبدیل کنی.
      2-3 Artist Loops 4_instruction: میخوای ببینی چه اتفاقی میفته اگر با استفاده
        از یک حلقه اون شکل رو بارها و بارها تکرار کنیم؟
      2-3 Artist Loops 5_instruction: الان بیایید یک تغییر کوچک در حلقه ایجاد کنیم
        و ببینیم تصاویر چه قدر متفاوت میشوند.
      2-3 Artist Loops 6_instruction: یک حرکت و چرخش دیگر درون حلقه اضافه کنید و ببینید
        چگونه طراحی شما تغییر میکند.
      2-3 Artist Loops 7_instruction: ما می‌توانیم از حلقه‌ها برای ساختن همه‌ی انواع
        چند ضلعی‌ها استفاده کنیم. می‌توانی یک لوزی داخل این شش ضلعی بسازی؟
      2-3 Artist Loops 8_instruction: بیا هر دو عنصر را داخل یک حلقه‌ی تکرار بگذاریم.
      2-3 Artist Loops 9_instruction: "ما می‌خواهیم همان عناصر را داخل حلقه بگذاریم،
        اما این‌بار مقداری فاصله بین آن‌ها قرار می‌دهیم.\r\nاز همان کد قبلی استفاده
        کن، ولی آخر حلقه‌ی بیرونی یک قدم به جلو اضافه کن."
      2-3 Artist Loops New 1_instruction: بیایید برای سر این ربات را رسم کنیم! یک
        مربع با اضلاعی که 100 پیکسل هستند بساز؟
      2-3 Artist Loops New 10_instruction: حالا بیا یک دسته از V ها را به هم وصل کنیم،
        آن‌ها را داخل حلقه رسم کنیم.
      2-3 Artist Loops New 11_instruction: بیا این‌بار آن را ۲۴ بار بکشیم. یک چرخش
        ۳۰ درجه به چپ به این کد اضافه کن، و همه را داخل یک بلوک تکرار بگذار.
      2-3 Artist Loops New 12_instruction: یک الماس با اضلاع 100 پیکسل بساز.
      2-3 Artist Loops New 13_instruction: الآن الماس را 3 بار در یک حلقه رسم کن.
      2-3 Artist Loops New 14_instruction: حالا بیا الماس را ۱۰ بار رسم کنیم. ولی
        بین هر الماس ۹۰ درجه بچرخ.
      2-3 Artist Loops New 15_instruction: چیزی جالب بکش.
      2-3 Artist Loops New 2_instruction: این مقداری از آن کدی‌است که برای کشیدن مربع
        استفاده کردی. چه اتفاقی می‌‌افتد اگر با استفاده از بلوک تکرار این کد را ۴
        بار تکرار کنی؟
      2-3 Artist Loops New 9_instruction: یک V ساده بکش که هر دو طرفش ۵۰ پیکسل است
        تا پیکان کامل شود.
      2-3 Artist Match Hex Pic_instruction: 'مسابقه: کمک کن تا شش ضلعی کامل شود.'
      2-3 Artist Match Rho Pic_instruction: 'مسابقه: کد از دست رفته را کامل کن.'
      2-3 Artist Match Sq Pic_instruction: 'مسابقه: کد از دست رفته را کامل کن'
      2-3 Artist Match Tri pic_instruction: 'مسابقه: کد جا افتاده را پر کن.'
      2-3 Artist Nested Loops 1_instruction: "تو قبلا از حلقه‌ها برای کشیدن شکل‌ها
        استفاده کردی، ولی آیا می‌دونستی که می‌تونی یه حلقه رو توی یه حلقه‌ی دیگه قرار
        بدی؟ \r\nکل این قطعه کد رو توی حلقه بذار و سه بار تکرار کن تا الگو رو رسم
        کنی."
      2-3 Artist Nested Loops 10_instruction: این قطعه کد رو توی یه حلقه با ۱۲ بار
        تکرار بذار تا شکل کامل بشه.
      2-3 Artist Nested Loops 11_instruction: این قطعه کد رو توی یه حلقه با ۴ بار
        تکرار بذار تا شکل کامل بشه. بعد از هر دایره ۹۰ درجه بچرخ.
      2-3 Artist Nested Loops 12_instruction: این قطعه کد رو توی یه حلقه با ۱۲ بار
        تکرار بذار تا شکل کامل بشه.
      2-3 Artist Nested Loops 2_instruction: حالا مثلث را ۶ بار تکرار کن. بعد از هر
        مثلث، لازم داری قبل از کشیدن بعدی ۶۰ درجه بچرخی.
      2-3 Artist Nested Loops 3_instruction: برای کشیدن این طرح لازم داری مثلث را
        ۱۲ بار تکرار کنی. تعداد زاویه‌های داخل دایره (۳۶۰) را به تعداد شکل‌هایی که
        داری می‌کشی (۱۲) تقسیم کن تا بفهمی بعد از هر شکل چقدر بچرخی.
      2-3 Artist Nested Loops 4_instruction: 'این الماس را ۱۲ بار تکرار کن تا یک گل
        بکشی. راهنمایی: ۱۲ الماس دقیقا مثل ۱۲ مثلثی است که انجام دادی - چقدر بعد از
        هر شکل چرخیدی؟'
      2-3 Artist Nested Loops 5_instruction: پنجره‌های این خانه را با یک حلقه‌ی تو
        در تو پر کن. طول پنجره‌ها ۲۰ پیکسل است و ۲۰ پیکسل از هم فاصله دارند.
      2-3 Artist Nested Loops 6_instruction: این دایناسور ۸ تیغ بزرگ روی دمش دارد،
        هر تیغ ۳۰ پیکسل طول دارد. ۸ بار مثلث را تکرار کن، اما مطمئن شو که بعد از هر
        کدام جلو بروی.
      2-3 Artist Nested Loops 7_instruction: مثلث را 10 مرتبه تکرار کن تا یک خورشید
        بکشی. برای این کار نیاز داری که هر مثلث را حرکت بدهی و بچرخانی. می توانی تعداد
        چرخش ها را از تقسیم تعداد درجات در یک دایره بر تعداد اشکالی که آن را می سازند
        به دست آوری.
      2-3 Artist Nested Loops 8_instruction: حالا بیا کمی چمن به تصویر اضافه کنیم.
        هر دسته از چمن با دسته دیگر 50 پیکسل فاصله دارد.
      2-3 Artist Nested Loops 9_instruction: ما این تصویر را با اضافه کردن یک شاخه
        گل تکمیل می کنیم. لوزی را 12 بار تکرار کن تا گل خود را بکشی.
      2-3 Artist Nested Loops Free Play_instruction: یک بازی ساده، کشیدن چیزهای قشنگ
        با استفاده از حلقه های تو در تو.
      2-3 Bee Conditionals 1_instruction: سلام، من یک زنبور هستم. به من در گرفتن شهد
        از گل کمک کن.
      2-3 Bee Conditionals 10_instruction: "گل های ارغوانی ممکن است 0 یا 1 شهد داشته
        باشند. مراقب باش از گل های اغوانی که هیچ شهدی ندارند جمع نکنی.\r\n"
      2-3 Bee Conditionals 11_instruction: شهد را از گل هایی که شهد دارند جمع آوری
        کن.
      2-3 Bee Conditionals 12_instruction: برای چک کردن و جمع آوری شهد از تمامی این
        گل ها از یک حلقه استفاده کن.
      2-3 Bee Conditionals 13_instruction: 'شهدها را جمع کن و با آن ها عسل بساز. راهنمایی:
        اگر از عبارت شرطی "if nectar" برای یک گل قرمز استفاده کنی چه اتفاقی می افتد؟
        آیا می توانی این کار را با استفاده از یک حلقه تکمیل کنی؟'
      2-3 Bee Conditionals 14_instruction: شهدها را جمع کن و با آن ها عسل بساز. دقت
        کن از گل های اغوانی که هیچ شهدی ندارند جمع نکنی.
      2-3 Bee Conditionals 15_instruction: از همه این چهار گل شهد جمع کن.
      2-3 Bee Conditionals 2_instruction: سلام، من یک زنبور هستم! به من در جمع آوری
        همه شهدهای گل ها کمک کن. برای این کار از یک حلقه استفاده کن.
      2-3 Bee Conditionals 3_instruction: به من کمک کن تا تمام شهدها را از گل ها جمع
        کنم و عسل بسازم. برای این کار از حلقه استفاده کن.
      2-3 Bee Conditionals 4_instruction: به من کمک کن تا تمام شهدها را از گل ها جمع
        کنم و تمام عسل ها را بسازم.
      2-3 Bee Conditionals 5_instruction: گل های بنفش ممکن است 0 یا 1 شهد داشته باشند،
        اما تو نمی دانی که کدام یک! دقت کن از گل های بنفش که شهدی ندارند شهد جمع نکنی.
        با استفاده از if چک کن که شهد برابر با 1 باشد.
      2-3 Bee Conditionals 6_instruction: این گل را با استفاده از "if" چک کن که ببینی
        شهدی دارد یا نه.
      2-3 Bee Conditionals 7_instruction: شهد را از گل هایی جمع کن که شهد دارند.
      2-3 Bee Conditionals 8_instruction: این مزرعه گل های قرمز و بنفش دارد. گل های
        قرمز مقدار مشخصی شهد دارند، اما برای گل های بنفش مقدار شخص مشخص نیست. تمام
        شهدها را جمع کن.
      2-3 Bee Conditionals 9_instruction: همه شهدها را از هر گلی جمع کن.
      2-3 Bee Conditionals Assessment 1_instruction: 'ارزیابی: تمام شهدها رو جمع‌آوری
        کن. مراقب باش که اگه گل‌ بنفشی هست که شهد نداره، سراغش نری.'
      2-3 Bee Debugging 1_instruction: این بلوک‌ها واقعاً من رو اذیت می‌کنن. مشکل‌(ها)
        رو حل کن تا بتونیم تمام شهدها رو جمع‌آوری کنیم و ازشون عسل بگیریم.
      2-3 Bee Debugging 10_instruction: این بلوک‌ها واقعاً من رو اذیت می‌کنن. مشکل‌(ها)
        رو حل کن تا بتونیم تمام شهدها رو جمع‌آوری کنیم و ازشون عسل بگیریم.
      2-3 Bee Debugging 2_instruction: این بلوک‌ها واقعاً من رو اذیت می‌کنن. مشکل‌(ها)
        رو حل کن تا بتونیم تمام شهدها رو جمع‌آوری کنیم و ازشون عسل بگیریم.
      2-3 Bee Debugging 3_instruction: این بلوک‌ها واقعاً من رو اذیت می‌کنن. مشکل‌(ها)
        رو حل کن تا بتونیم تمام شهدها رو جمع‌آوری کنیم و ازشون عسل بگیریم.
      2-3 Bee Debugging 4_instruction: این بلوک‌ها واقعاً من رو اذیت می‌کنن. مشکل‌(ها)
        رو حل کن تا بتونیم تمام شهدها رو جمع‌آوری کنیم و ازشون عسل بگیریم.
      2-3 Bee Debugging 5_instruction: این بلوک‌ها واقعاً من رو اذیت می‌کنن. مشکل‌(ها)
        رو حل کن تا بتونیم تمام شهدها رو جمع‌آوری کنیم و ازشون عسل بگیریم. حالا می‌تونی
        از "اجرا" و "گام" استفاده کنی.
      2-3 Bee Debugging 6_instruction: این بلوک‌ها واقعاً من رو اذیت می‌کنن. مشکل‌(ها)
        رو حل کن تا بتونیم تمام شهدها رو جمع‌آوری کنیم و ازشون عسل بگیریم.
      2-3 Bee Debugging 7_instruction: این بلوک‌ها واقعاً من رو اذیت می‌کنن. مشکل‌(ها)
        رو حل کن تا بتونیم تمام شهدها رو جمع‌آوری کنیم و ازشون عسل بگیریم.
      2-3 Bee Debugging 8_instruction: این بلوک‌ها واقعاً من رو اذیت می‌کنن. مشکل‌(ها)
        رو حل کن تا بتونیم تمام شهدها رو جمع‌آوری کنیم و ازشون عسل بگیریم.
      2-3 Bee Debugging 9_instruction: این بلوک‌ها واقعاً من رو اذیت می‌کنن. مشکل‌(ها)
        رو حل کن تا بتونیم تمام شهدها رو جمع‌آوری کنیم و ازشون عسل بگیریم.
      2-3 Bee Debugging Assessment 1_instruction: 'ارزیابی: این بلوک‌ها واقعاً من
        رو اذیت می‌کنن. مشکل‌(ها) رو حل کن تا بتونیم تمام شهدها رو جمع‌آوری کنیم و
        ازشون عسل بگیریم.'
      2-3 Bee Functions 1_instruction: تابع‌ها، قطعاتی از کد هستن که کار مشخصی رو
        انجام می‌دن. از تابع "دو شهد را بگیر" استفاده کن تا شهدهای گل‌ها رو جمع‌آوری
        کنی.
      2-3 Bee Functions 10_instruction: گل‌های بنفش ممکنه ۱ یا ۰ شهد داشته باشن. تابعی
        درست کن که فقط شهد گل‌های بنفشی که شهد دارن رو جمع‌آوری کنه.
      2-3 Bee Functions 2_instruction: تابع‌ها، قطعاتی از کد هستن که کار مشخصی رو
        انجام می‌دن. از تابع "پنج تا بگیر" استفاده کن تا همزمان پنج شهد گل رو جمع‌آوری
        کنی. حتما از یه حلقه استفاده کن تا تعداد قطعات کدت کمترین حد ممکن باشه.
      2-3 Bee Functions 3_instruction: همه شهدها را از هر گلی جمع کن.
      2-3 Bee Functions 4_instruction: تابع "حرکت کن و شهد را بگیر" باعث میشه که زنبور
        بچرخه، شهد رو جمع‌آوری کنه، و برگرده به جایی که ازش شروع کرده بوده. از این
        تابع استفاده کن تا تمام شهدها رو جمع‌آوری کنی.
      2-3 Bee Functions 5_instruction: الان شهد بیشتری روی هر گل هست. تابع داده‌شده
        رو طوری تغییر بده که چهارتا شهد رو جمع‌آوری کنه و ازش برای جمع‌آوری تمام شهدهای
        گل‌ها استفاده کن.
      2-3 Bee Functions 6_instruction: حالا از همون تابع برای جمع آوری شهد سه گل استفاده
        کن.
      2-3 Bee Functions 7_instruction: حالا گل‌ها دورتر هستن. تابع داده شده رو تغییر
        بده و ازش برای جمع‌آوری تمام شهدهای گل‌ها استفاده کن.
      2-3 Bee Functions 8_instruction: تابعی درست کن که هفت تا شهد رو جمع‌آوری کنه،
        به جلو حرکت کنه، و هفت‌تا عسل تولید کنه. از این تابع استفاده کن تا شهد هر
        گل رو جمع‌آوری کنی و توی هر کندو عسل درست کنی.
      2-3 Bee Functions 9_instruction: |
        Create your own function that goes down a
        path, gets nectar, makes honey, and then returns the bee to the top of the
        path.
      2-3 Bee Functions Assessment 1_instruction: |
        Assessment: Use the function given
        to collect nectar from each flower.
      2-3 Bee Functions Assessment 2_instruction: |
        Assessment: Create a function
        to make 3 honey at a time.
      2-3 Bee Loops 1_instruction: "Each flower contains one unit of nectar. Collect\nnectar
        from each of the flowers. \n"
      2-3 Bee Loops 10_instruction: |
        Can you use a while loop inside of two other
        loops to collect all of the nectar?
      2-3 Bee Loops 11_instruction: |
        Use while loops to collect all of the nectar
        from the flowers in this field.
      2-3 Bee Loops 12_instruction: |
        Use while loops to collect all of the nectar
        from the flowers in this field.
      2-3 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      2-3 Bee Loops 1A_instruction: "Hi, I'm a bee. Can you help me collect the\nnectar
        from these flowers? \n"
      2-3 Bee Loops 2_instruction: |
        Use a loop to collect the nectar and make the
        honey.
      2-3 Bee Loops 2A_instruction: |
        Can you do the same task more easily with a
        loop?
      2-3 Bee Loops 3_instruction: |
        Collect nectar from each flower and make honey
        at each honeycomb.
      2-3 Bee Loops 3A_instruction: Can you use a loop to collect all that nectar?
      2-3 Bee Loops 3B_instruction: |
        Now use the new repeat block to collect all
        of the nectar and make all of the honey.
      2-3 Bee Loops 4_instruction: |
        Use a similar loop as the last puzzle, but work
        a turn into it.
      2-3 Bee Loops 4A_instruction: |
        What happens if you loop this sequence 3 times?
        Don't forget to make the honey at the end!
      2-3 Bee Loops 5_instruction: |
        Use a loop to go down the steps and collect the
        nectar.
      2-3 Bee Loops 6_instruction: |
        Use a loop to collect nectar from each flower
        and make honey at each honeycomb.
      2-3 Bee Loops 7_instruction: |
        Put these blocks into a loop to collect nectar
        from each flower.
      2-3 Bee Loops 8_instruction: |
        These purple flowers have an unknown amount of
        nectar. Use the "while nectar" loop to collect all of the nectar. This loop
        will run as long as the condition is true, in this case Nectar > 0.
      2-3 Bee Loops 9_instruction: |
        The while loop can perform the same action as
        an if statement in a loop. Add a while loop to this code to perform the same
        task.
      2-3 Bee Loops Assessment 1_instruction: |
        Assessment - Use a while loop to collect
        all of the nectar from this flower.
      2-3 Maze 1_instruction: "Can you help me to catch the naughty pig? Stack a\ncouple
        of \"move forward\" blocks together and press \"Run\". \n"
      2-3 Maze 10_instruction: منو به سمت این شیطان سبز راهنمایی کن! (حواست به بمب
        ها باشه)
      2-3 Maze 11_instruction: |
        Get me to the flower I'm hungry! How many times
        do you have to repeat a block?
      2-3 Maze 12 (copy 1)_instruction: |
        Can you replace the previous answer with
        only two blocks? (Hint: Create a loop using a "repeat times" block.)
      2-3 Maze 12 (copy 2)_instruction: |
        Can you replace the previous answer with
        only two blocks? (Hint: Create a loop using a "repeat times" block.)
      2-3 Maze 12 (old)_instruction: |
        Get me to the pig, now with the Repeat times
        block!
      2-3 Maze 12_instruction: |
        Can you replace these five blocks with only two blocks?
        (Hint: Create a loop using a "repeat times" block.)
      2-3 Maze 13 (old)_instruction: |
        Get me to the pig, now with the Repeat until
        block!
      2-3 Maze 13_instruction: Get me to the pig using only two blocks.
      2-3 Maze 14 (old)_instruction: Get me to the pig with the Repeat until block!
      2-3 Maze 14_instruction: |
        Get me to the sunflower! (Where is that "repeat
        times" block when I need it?)
      2-3 Maze 15 (old)_instruction: Get me to the pig with the Repeat until block!
      2-3 Maze 15_instruction: Use two loops to get to the pig using fewer blocks.
      2-3 Maze 16 (old)_instruction: Get me to the pig with the Repeat until block!
      2-3 Maze 16 before_instruction: Get me to the pig.
      2-3 Maze 16_instruction: Get me to the sunflower. Loop the sequence!
      2-3 Maze 2_instruction: This pig is ruffling my feathers. Help me get to him!
      2-3 Maze 3_instruction: |
        Trace the path and lead me to the silly pig. Avoid
        TNT or feathers will fly!
      2-3 Maze 4_instruction: منو به سمت این شیطان سبز راهنمایی کن! (حواست به بمب
        ها باشه)
      2-3 Maze 5_instruction: منو به سمت این شیطان سبز راهنمایی کن! (حواست به بمب
        ها باشه)
      2-3 Maze 6_instruction: |
        Keep calm and help me find the bad pig. Otherwise
        I might get angry!
      2-3 Maze 7_instruction: منو به سمت این شیطان سبز راهنمایی کن! (حواست به بمب
        ها باشه)
      2-3 Maze 8_instruction: Get me to the pig!
      2-3 Maze 9_instruction: منو به سمت این شیطان سبز راهنمایی کن! (حواست به بمب
        ها باشه)
      2-3 Maze Loops 1_instruction: Can you get me to the pig using 5 blocks?
      2-3 Maze Loops 17_instruction: Get me to the sunflower!
      2-3 Maze Loops 18_instruction: Get me to the sunflower!
      2-3 Maze Loops 19_instruction: Get me to the sunflower!
      2-3 Maze Loops 20_instruction: Get me to the sunflower!
      2-3 Maze Loops 21_instruction: Get me to the sunflower!
      2-3 Maze Loops Assessment 1_instruction: "Assessment:  Get me to the sunflower\nusing
        only 5 blocks! \n"
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Get me to the pig! What blocks got repeated?
      2-3 Maze sq10v2_instruction: Get me to the pig! What blocks got repeated?
      2-3 maze sq11_instruction: Get me to the pig! What blocks got repeated?
      2-3 maze sq12_instruction: |
        Can you replace the previous answer with a loop
        by using a "repeat times" block?
      2-3 maze sq13_instruction: |
        Dear person. Me zombie. Must... get... to sunflower.
        Create loop with "repeat until" block.
      2-3 maze sq14_instruction: Can you get to the sunflower using only four blocks?
      2-3 maze sq15_instruction: Can you get to the sunflower using only five blocks?
      2-3 maze sq16_instruction: |
        Ok, this is similar, but slightly different. Can
        you do it in only five blocks?
      2-3 Maze sq2_instruction: |
        Trace the path and lead me to the silly pig.  Avoid
        the TNT or the feathers will fly!
      2-3 Maze sq3_instruction: منو به سمت این شیطان سبز راهنمایی کن! (حواست به بمب
        ها باشه)
      2-3 Maze sq4_instruction: |
        Keep calm and help me find the bad pig. Otherwise
        I might get angry!
      2-3 Maze sq5_instruction: |
        Get me to the pig! How many times do you have to
        repeat a block?
      2-3 Maze sq6_instruction: |
        Can you replace the previous answer with only two
        blocks? (Hint: Create a loop using a "repeat times" block.)
      2-3 Maze sq7_instruction: Get me to the green intruder using only three blocks.
      2-3 Maze sq8_instruction: |
        Get me to the pig! (Where is that "repeat times"
        block when I need it?)
      2-3 Maze sq9_instruction: Create loops to get to the pig using less blocks.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Help the bird catch the naughty pig by moving it forward
      4-5 Artist 1_instruction: "Help me finish drawing my box. (Each line is 300\npixels
        long) \n"
      4-5 Artist 10_instruction: |
        Press "Run" to try the code. Then, repeat it
        enough times to complete the drawing. The colors will be different every time.
      4-5 Artist 11_instruction: |
        Complete the green lines. The lines are 300 pixels
        long and 15 pixels apart.
      4-5 Artist 2_instruction: Can you loop this code to complete the square?
      4-5 Artist 3.5_instruction: |
        Ok, try to figure out what happens if you run
        this code (or press "Run" to try it). Then, repeat it enough times to complete
        the drawing. The colors will (most likely) be different every time.
      4-5 Artist 3_instruction: |
        This rectangular flower bed has a perimeter of 600.
        The long side has a length of 200. Draw the rectangle.
      4-5 Artist 4_instruction: |
        How many degrees are in a circle?  Loop the blocks
        to create a circle of colors.
      4-5 Artist 5_instruction: What angle do you use?
      4-5 Artist 6_instruction: |
        This equilateral triangle has angles of 60, 60,
        and 60 degrees. Each side is 200 pixels. Complete the drawing.
      4-5 Artist 7_instruction: |
        This right triangle has angles of 30, 60, and 90
        degrees. The slanted side's length is double the height of 100 pixels. Complete
        the drawing.
      4-5 Artist 8_instruction: |
        The halfway line on a soccer field is perpendicular
        to the sidelines. This field has a perimeter of 800 pixels and it is 240 pixels
        long. How wide is it? Draw the bounds and the halfway line.
      4-5 Artist 9_instruction: |
        Draw the other half so that the design is symmetrical.
        The triangles are equilateral and are 50 pixels long.
      4-5 Artist Assessment 1_instruction: |
        Assessment: Use a loop to draw the equilateral
        triangle. Each side is 300 pixels.
      4-5 Artist For Loops 1_instruction: |
        Put the numbers 1 through 10 into the
        width blocks and run the code.
      4-5 Artist For Loops 11_instruction: |
        Complete the "for" block so that it
        counts 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: "What happens if you reverse the \"from\"\nand
        \"to\" numbers? Complete the \"for\" block so that it counts 200, 180,\n160,
        140, 120...0. \n"
      4-5 Artist For Loops 13_instruction: |
        This design got started without a "for"
        loop and is taking too many blocks!  Use a "for" block to complete the spiral.  Hint:
        the last line length is 250 pixels.
      4-5 Artist For Loops 14_instruction: |
        Someone started the code, but then realized
        there must be a quicker way! Use a "for" block to replace the blocks and
        complete the triangular spiral. (Hint: the last line length is 300 pixels.)
      4-5 Artist For Loops 15_instruction: |
        Someone started the code, but then realized
        there must be a quicker way! Use a "for" block to replace the blocks and
        complete the hexagonal spiral. (Hint: the last line length is 200 pixels.)
      4-5 Artist For Loops 3_instruction: |
        How can we count from 1 to 50? Edit the
        "for" block.
      4-5 Artist For Loops 4_instruction: |
        Complete the "for" block so that it
        counts from 1 to 10 by 1.
      4-5 Artist For Loops 6_instruction: |
        Draw squares with sides of 50, 60, 70,
        80, and 90 pixels. You'll need to use the "draw a square" function five
        times.
      4-5 Artist For Loops 7_instruction: |
        Draw the same squares but use a "count
        with" block to change the sizes. Place the "counter" block in the "draw
        a square" function. Hint: It's in the Variables category.
      4-5 Artist For Loops 8_instruction: |
        Can you complete the program by placing
        the blocks inside a "for" block that counts from 10 to 200 by 10? You can
        find the "for" block in the Loops category.
      4-5 Artist For Loops 9_instruction: |
        These circles are size 5, 10, 15, 20,
        25, 30, and 35. Draw the circles using a "for" block.
      4-5 Artist Free Draw 1_instruction: |
        Free Draw!  Draw whatever you are inspired
        to create.
      4-5 Artist Functions 1_instruction: Use a repeat loop to draw this triangle.
      4-5 Artist Functions 10a_instruction: |
        Put this code into the 'draw a snowflake'
        function and replace the 50 with the parameter 'size'. The function is already
        called on to make a snowflake that is 100 pixels.
      4-5 Artist Functions 10b_instruction: |
        Use the 'draw a snowflake' function
        to create different size flakes.  Hint: the first snowflake is 25 in length
        and each snowflake is twice the size of the one before.
      4-5 Artist Functions 11_instruction: |
        This "draw a hexagon" function uses
        the "draw a triangle" function. Complete the hexagon function. (Hint: A
        hexagon has 6 sides, each 100 pixels long)
      4-5 Artist Functions 12_instruction: |
        Complete the 'draw waves' function.  Each
        wave is made up of one Upper wave and one Lower wave.   Hint: Draw 5 blue
        waves.
      4-5 Artist Functions 13 Free play_instruction: |
        Here are some functions to
        draw planets, stars, rockets, and robots. Use them any way you like to make
        pictures that you can share with your friends.
      4-5 Artist Functions 14 Free play_instruction: |
        Here, we've provided you with
        several functions.  Use them any way you like inside of one or more loops
        to make pictures that you can share with your friends. Click 'Run' to see
        an example.
      4-5 Artist Functions 15 Assessment_instruction: |
        Assessment:  Use the "draw
        a square" function to create the squares.  The squares are 50, 100, and 150
        pixels.
      4-5 Artist Functions 2a_instruction: |
        Now put these blocks into a new function
        called "draw a small triangle" and call on it.
      4-5 Artist Functions 2b_instruction: |
        Now create a function called "draw a
        small triangle" using the provided blocks.
      4-5 Artist Functions 3_instruction: "Now create the functions \"draw a medium\ntriangle\"
        and \"draw a large triangle\". The \"draw a small triangle\" function\nis
        done for you. The triangles have side lengths of 50 (small), 100 (medium),\nand
        150 (large). \n"
      4-5 Artist Functions 4_instruction: |
        This new "draw a triangle" function
        has a parameter and can do the work of all three functions before. Draw the
        same triangles using this new function.
      4-5 Artist Functions 5_instruction: |
        Can you modify the "draw a triangle"
        function into a "draw a square" function to change the drawing?
      4-5 Artist Functions 6_instruction: |
        Use the "draw a square" and "draw a
        triangle functions" to draw a house. (Hint: The square's sides are 200 pixels)
      4-5 Artist Functions 6b_instruction: |
        Use the draw a square and triangle functions
        along with other blocks to create a house by adding them to the 'draw a house"
        function and calling it.
      4-5 Artist Functions 7_instruction: |
        Use the "draw a house" function to draw
        houses that are 100 pixels and 50 pixels. The two houses are separated by
        50 pixels.
      4-5 Artist Functions 8_instruction: |
        The "draw a flower" function has a parameter
        that allows you to set the stem height.  Set it to 200 and see what happens.
      4-5 Artist Functions 9_instruction: |
        Draw these 3 flowers. The first one's
        height is 100 and the next flower is always 50 pixels more than the height
        of the previous one. The flowers are also 100 pixels apart.
      4-5 Artist Patterns 1_instruction: |
        Can you draw this square using a loop?
        Each side is 20 pixels long.
      4-5 Artist Patterns 10_instruction: |
        This code draws two rows of hexagons -
        loop the whole thing 4 times to draw the whole honeycomb. Hint: You'll need
        to jump back 120 pixels in your outermost loop to make sure the artist doesn't
        draw off the screen.
      4-5 Artist Patterns 11_instruction: |
        How many times do you need to loop this
        to draw a half circle? Hint: if there's 360 degrees in a circle and each
        loop moves 3 degrees, how many times would you need to loop draw a full circle?
      4-5 Artist Patterns 12_instruction: |
        If you copy that loop and turn left instead
        of right, what happens? Can you repeat that to draw this wave?
      4-5 Artist Patterns 13_instruction: |
        Now let's loop that whole thing four
        times to create this picture frame. Watch out for the corners - you can't
        just turn 90 degrees! If looping a 3 degree turn 60 times makes a half circle,
        which of these blocks of code will make a quarter circle for the corners?
      4-5 Artist Patterns 2_instruction: |
        If you place your square loop inside another
        loop, we call that a nested loop. What do you need to add to your outer loop
        to make sure all 15 squares line up next to each other?
      4-5 Artist Patterns 3_instruction: |
        Now let's go one level deeper! We've
        nested that whole block of code into another loop, but you need to get the
        artist back in place to draw the next line. Which of these code blocks can
        you place at the end of the outermost loop to draw the whole grid?
      4-5 Artist Patterns 4_instruction: |
        This diamond has 50 pixel sides and angles
        of 120 and 60 degrees. Use a loop to draw it.
      4-5 Artist Patterns 5.5_instruction: |
        How many times do you need to repeat
        this block to draw the full grid of diamonds?
      4-5 Artist Patterns 5_instruction: |
        Let's repeat that to make a row of 6 diamonds.
        Notice that we changed our diamond code to repeat 3 times instead of 2 - why
        do you think that is?
      4-5 Artist Patterns 6_instruction: |
        How many times do you need to repeat this
        block to draw the full grid of diamonds?
      4-5 Artist Patterns 7_instruction: |
        Let's modify the code from the last puzzle
        to make this more complex pattern. Notice how the diamonds overlap now, try
        changing the first "jump backwards" from 100 to 50 (half as far) - now how
        far should the artist go in the second "jump backwards"?
      4-5 Artist Patterns 8_instruction: |
        Use a loop to draw this hexagon with 40
        pixel sides and 60 degree angles.
      4-5 Artist Patterns 9.5_instruction: |
        Let's loop this code to draw two rows
        of hexagons. Notice how our second row is shifted to the right.
      4-5 Artist Patterns 9_instruction: |
        Now repeat that code 3 times to draw the
        whole row. Hint, each hexagon is 80 pixels wide from the furthest points left
        to right.
      4-5 Artist Patterns Free Play_instruction: |
        Free play - try your hand at making
        a pattern of your own!
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: |
        The bee can't tell if this is a flower
        or a honeycomb. Gather nectar only from flowers, but first check if it is
        a flower or a honeycomb.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: |
        The bee only wants nectar right now. Remember,
        not all objects are flowers, so check to gather nectar only at flowers.
      4-5 Bee Conditionals 3_instruction: |
        Now the bee just wants to make honey.
        Check to make honey only at honeycombs.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: |
        The unknown object is either a flower
        or a honeycomb. Use the if/else block to collect nectar if it is a flower,
        else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 5_instruction: |
        There might be a flower or a honeycomb
        under those clouds. Use the if/else block to collect nectar if there is a
        flower, else to make honey (because there is a honeycomb).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: |
        This purple flower may have either 3,
        2, or 1 nectar. Here an if-else block is combined with another if-else block
        to create an if, else-if, else block. Complete the solution to collect the
        unknown amount of nectar.
      4-5 Bee Conditionals 7_instruction: |
        Remember that purple flowers can have
        3, 2, or 1 nectars. Complete the "check purple flower" function and use
        it to collect all of the nectar at the flowers.
      4-5 Bee Conditionals 8_instruction: |
        Write inside the function "check flower
        make honey". Your function should check if the purple flower has 3, 2, or
        1 nectar and collect all of the nectar. Then, move forward and make honey.
      4-5 Bee Conditionals Assessment 1_instruction: |
        Assessment: This code is wrong.
        Complete the "get nectar or make honey" function, then call it to collect
        all nectar and honey. Remember that purple flowers can have 3, 2, or 1 nectars.
      4-5 Bee Debugging 1_instruction: |
        These blocks are really bugging me. Can you
        fix them?
      4-5 Bee Debugging 10_instruction: Find the errors and fix them.
      4-5 Bee Debugging 11_instruction: Does this count correctly?
      4-5 Bee Debugging 2_instruction: Help the bee get the nectar and make honey.
      4-5 Bee Debugging 3_instruction: Find the errors and fix them.
      4-5 Bee Debugging 4_instruction: These blocks don't work. What's the pattern?
      4-5 Bee Debugging 5_instruction: Something isn't right here...
      4-5 Bee Debugging 6_instruction: |
        The purple flower has an unknown amount of
        nectar. Fix the blocks to get all of the nectar from the flower.
      4-5 Bee Debugging 7_instruction: The function is missing something...
      4-5 Bee Debugging 8_instruction: |
        This function is fine, but it isn't used
        properly.
      4-5 Bee Debugging 9_instruction: Why isn't the bee making enough honey?
      4-5 Bee Debugging Assessment 1_instruction: 'Assessment: Fix the code.'
      4-5 Bee Nested Loops 1_instruction: Use a loop to collect all of the nectar.
      4-5 Bee Nested Loops 2_instruction: "Collect all of the nectar from each flower.\nUse
        a nested loop. \n"
      4-5 Bee Nested Loops 3_instruction: |
        Collect all of the nectar by putting the
        starter code into a nested loop.
      4-5 Bee Nested Loops 4_instruction: "Collect all of the nectar from each flower\nand
        make honey at each honeycomb. Use a nested loop. \n"
      4-5 Bee Nested Loops 5_instruction: |
        Collect all of the nectar by creating
        a nested loop.
      4-5 Bee Nested Loops 6_instruction: Collect all the nectar.
      4-5 Bee Nested Loops 7_instruction: |
        Put this loop inside another loop to create
        a nested loop and collect all of the nectar from the flowers.
      4-5 Bee Nested Loops 8_instruction: "Collect all of the nectar from these flowers\nby
        nesting a while loop. Replace the inner repeat times block with a while\nblock.
        \n"
      4-5 Bee Nested Loops 9_instruction: |
        Collect all of the nectar from these flowers
        by nesting a while loop inside a repeat.
      4-5 Bee Nested Loops Assessment 1_instruction: |
        Assessment - Collect all of
        the nectar and make all the honey by using loops.
      4-5 Bee Nested Loops Rows_instruction: |
        Gather nectar from the rows of flowers!
        Use a nested loop.
      4-5 Maze 1 (copy 1)_instruction: |
        Dear person. Me zombie. Must... get... to
        sunflower.
      4-5 Maze 1_instruction: Dear person. Me zombie. Must... get... to sunflower.
      4-5 Maze 10_instruction: Can you get to the sunflower using only four blocks?
      4-5 Maze 11_instruction: Can you get to the sunflower using only six blocks?
      4-5 Maze 12_instruction: |
        Ok, this is slightly different. Can you do it in
        only six blocks?
      4-5 Maze 13_instruction: Get me to the pig!
      4-5 Maze 14_instruction: Get me to the pig! Use the Repeat until block.
      4-5 Maze 2 (copy 1)_instruction: |
        Get the zombie to the sunflower, but avoid
        the chomper!
      4-5 Maze 2_instruction: Get the zombie to the sunflower, but avoid the chomper!
      4-5 Maze 3 (copy 1)_instruction: Must... get... to sunflower.
      4-5 Maze 3_instruction: Must... get... to sunflower.
      4-5 Maze 4 (copy 1)_instruction: Try the "repeat" block to use fewer blocks...
      4-5 Maze 4_instruction: Try the "repeat" block to use fewer blocks...
      4-5 Maze 5 (copy 1)_instruction: |
        Can you solve this puzzle using the fewest
        number of blocks possible?
      4-5 Maze 5_instruction: |
        Can you solve this puzzle using the fewest number
        of blocks possible?
      4-5 Maze 6 (copy 1)_instruction: |
        Can you solve this puzzle using the fewest
        number of blocks possible?
      4-5 Maze 6_instruction: |
        Can you solve this puzzle using the fewest number
        of blocks possible?
      4-5 Maze 7_instruction: Dear person. Me zombie. Must... get... to sunflower.
      4-5 Maze 8_instruction: |
        Use the "repeat" block to get the zombie to the
        sunflower. (Avoid the chompers!)
      4-5 Maze 9_instruction: Create a loop with the "repeat until" block.
      4-5 Maze Assessment 1_instruction: 'Assessment: Get to the sunflower.'
      4-5 Maze Conditionals 1_instruction: |
        Use the repeat until block to get the
        zombie to the sunflower.
      4-5 Maze Conditionals 10_instruction: |
        Can you add just 3 blocks to help me
        solve a more complex maze? If you do it right, I can walk any curvy path no
        matter the length.
      4-5 Maze Conditionals 2_instruction: |
        Use the repeat until block to get the
        zombie to the sunflower.
      4-5 Maze Conditionals 3_instruction: |
        Use the "if" block to let me decide
        when to turn. Hint: you only need one more block, but learn how we set it
        up so you can do it on your own next time.
      4-5 Maze Conditionals 4_instruction: |
        Ok, this is just like the last puzzle,
        but you need to remember how you used the "if" block and the "repeat"
        block together.
      4-5 Maze Conditionals 5_instruction: |
        Me want sunflower! Use an "if" block
        to get me there with the fewest number of blocks.
      4-5 Maze Conditionals 6_instruction: |
        Me want sunflower! Use an "if" block
        to get me there with the fewest number of blocks.
      4-5 Maze Conditionals 7_instruction: |
        Ok, let's do that again for practice
        - this isn't very different, but watch out for the chompers!
      4-5 Maze Conditionals 8_instruction: |
        The "if/else" block checks a condition,
        and then does one thing OR another. To get me to the sunflower try to use
        this new block.
      4-5 Maze Conditionals 9_instruction: |
        One more practice of the "if-else"
        block, can you get it right on your first try?
      4-5 Maze Conditionals Assessment 1_instruction: |
        Use a "repeat until" and
        an "if-else" block to get me to the sunflower in as few blocks as possible.
      4-5 Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      4-5 Nested Loops 10_instruction: |
        Draw the last row of stars on this flag by
        looping the provided blocks. The stars are 50 pixels apart, but remember that
        the stars themselves are 30 pixels wide.
      4-5 Nested Loops 11_instruction: |
        Can you draw these 10 squares of this sidewalk
        using a nested loop? Each square is 30 pixels.
      4-5 Nested Loops 12_instruction: |
        Can you draw these 36 triangles using a nested
        loop?
      4-5 Nested Loops 2_instruction: "Now nest this loop inside another loop to\ndraw
        10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      4-5 Nested Loops 3_instruction: "Create a sun by nesting the starter code in\nanother
        loop. This is called a nested loop.\r\n"
      4-5 Nested Loops 5_instruction: Loop the given code to create a windmill.
      4-5 Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the triangle
        code?
      4-5 Nested Loops 7_instruction: |
        Loop this design 10 times. How much do you
        have to turn each time you loop? (Hint: What is 360 divided by 10?)
      4-5 Nested Loops 8_instruction: |
        Loop this design 6 times. How much do you
        have to turn each time you loop? (Hint: What is 360 divided by 6?)
      4-5 Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      4-5 Nested Loops Assessment 1_instruction: |
        Use a nested loop to complete the
        design.
      4-5 While Loops 1_instruction: |
        Move me to the hole and fill it with two shovelfuls
        of dirt, using the "fill" block.
      4-5 While Loops 2_instruction: |
        Move me to the pile of dirt and remove it with
        5 shovel scoops, using the 'remove' block.
      4-5 While Loops 3_instruction: |
        Move me to the pile and remove all of it, then
        move to the hole and fill it completely.  Hint:  Use as few blocks as possible.
      4-5 While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't know
        how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      4-5 While Loops 5_instruction: |
        Wow, now there are two deep holes! Can you
        write a program that fills them both until the ground is even?
      4-5 While Loops 6_instruction: |
        Wow, now there is a large pile of dirt! Can
        you write a program that removes all of it so the ground is even?
      4-5 While Loops 7_instruction: |
        Wow, now there are three piles of dirt! Can
        you write a program that removes each of them until the ground is even?
      4-5 While Loops 8_instruction: |2
         There is a really deep hole and a really large
        pile of dirt.  How many shovelfuls of dirt need to be moved around to make
        the ground flat?  Hint: Use the while loop for both.
      4-5 While Loops Assessment 1_instruction: |
        There are a lot of holes and piles.  Help
        me to fill and remove them to make the ground flat.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      App Lab test_instruction: آزمایش
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin
        another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: |
        Use a nested loop to complete
        the design.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click run to see what your game can currently do (not much!), update any variables
        you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click Finish to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Targer should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        Finish to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving target and danger, both of which return to the screen once
        they've left, and a player that responds to keyboard input. Click run to
        see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for Addition which
        takes two numbers and returns their sum. Use this Addition block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a multiplication block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function 'f'
        every time; create a function called 'times-ten' that should take a parameter
        'x' and return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a number return that number
        to the power of 3. Make sure to write two example cases! When you're done,
        use your new function to calculate 7 cubed.
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou
        need to track the cost of making each cookie, the money paid, and the\ntotal
        profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe
        function cost, which takes in the number of cookies you intend to sell,\nand
        returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor
        the function \"rocket-height\" that states it has a range of Number, domain\nof
        Number, and should return the height of the rocket traveling at 15 m/s\nafter
        a given number of seconds. Let's write an example case now for the\nheight
        of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: "In the last puzzle you wrote a contract for the\nfunction
        rocket-height that states it has a range of Number, domain of Number,\nand
        should return the height of the rocket traveling at 15 m/s after a given\nnumber
        of seconds. Let's write an example case now for the height of the\nrocket
        at 3 seconds.\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months - use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Can you get me to the pig using 5 blocks?
      Course 4 2_instruction: |
        The bee only wants nectar right now. Remember, not
        all objects are flowers, so check to gather nectar only at flowers.
      Course 4 Artist 1_instruction: "Help me draw a box. (Each line is 200 pixels\nlong)
        \n"
      Course 4 Artist 10_instruction: "Click here to see the hints again!\r\n\r\nHere\nis
        the code for an interesting shape.  What happens when you repeat it?   Notice\nthat
        the turns in this shape add up to 420 degrees, which means that when\nyour
        artist is done drawing, it will be facing a different direction than\nwhen
        you started.  That new direction is exactly 60 degrees to the right of\nwhere
        you began."
      Course 4 Artist 11_instruction: |
        Now for a challenge!  Here is a design that
        uses only blocks that you have already been shown.  Can you figure out how
        to recreate it?  Feel free to use trial and error. You are not expected to
        get it perfect the first time.  Want to see more hints?  Click here!
      Course 4 Artist 12_instruction: "Want a second peek at the inspiration design\nor
        the hints?  Click here!\r\n\r\nOtherwise, make a design all your own!"
      Course 4 Artist 13_instruction: |
        Still playing?  Here is a blank canvas where
        you can design anything you want!
      Course 4 Artist 2_instruction: |
        Can you loop this code to draw the greyed out
        square?
      Course 4 Artist 20_instruction: |
        Still playing?  Here is a blank canvas where
        you can create whatever you want!
      Course 4 Artist 3_instruction: |
        Try to figure out what happens if you run this
        code (or press "Run" to test it). Then, repeat it enough times to complete
        the drawing.
      Course 4 Artist 4_instruction: |
        How many degrees are in a circle?  Fill in
        the repeat block with that number to create a circle of colors.
      Course 4 Artist 5_instruction: |
        Draw the other half of this design so it's
        symmetrical. The triangles are equilateral and are 50 pixels long. Hint: You
        may have to run the code several times to figure out all of the blocks that
        need to be added.
      Course 4 Artist 6_instruction: |
        Complete the code to draw these triangles.
        Hint: There are 3 triangles within the 360 degree rotation...how many times
        does 3 go into 360?
      Course 4 Artist 7_instruction: "Now nest this loop inside another loop to draw\n10
        triangles. This is called a nested loop. Hint: All 10 triangles complete\na
        360 degree rotation.  \n"
      Course 4 Artist 8_instruction: |
        Draw this sun by looping this whole block of
        code multiple times.
      Course 4 Artist 8a_instruction: "Remember this shape?  Now we're going to\nlet
        you build it without giving you any blocks to start!\r\nHint: There are\n3
        triangles within the 360 degree rotation...how many times does 3 go into\n360?"
      Course 4 Artist 9_instruction: |
        Loop this design 10 times and make sure to
        turn between each shape that's drawn. Here's a hint for how much you have
        to turn: What is 360 divided by 10?
      Course 4 Artist Binary 1_instruction: "Here's a function that takes a binary\nstring
        of 1's and 0's and instructs the artist to follow them from left\nto right,
        top to bottom.  The artist will fill-in the squares when it sees\na 1 and
        ignore the square when it sees a 0. \r\n\r\nRun this code to see how\nthe
        artist uses binary to draw this pattern."
      Course 4 Artist Binary 2_instruction: |
        Which of these binary strings could
        you loop 8 times to draw this image?
      Course 4 Artist Binary 3_instruction: |
        Can you draw this pattern by looping
        a three digit binary string?
      Course 4 Artist Binary 4_instruction: |
        Each binary string represents one row
        of this picture. Can you rearrange them so it draws a smiley face instead
        of a frowny face?
      Course 4 Artist Binary 5_instruction: |
        Which 6 digit binary string, repeated
        11 times, will draw this image?
      Course 4 Artist Binary 6_instruction: |
        What is the shortest binary string that
        you can repeat to draw this image?
      Course 4 Artist Binary 7_instruction: Finish this drawing.
      Course 4 Artist Binary Free Play 2_instruction: |
        Free Play: Here's a higher
        resolution canvas to draw on - 16 bits by 16 bits!
      Course 4 Artist Binary Free Play_instruction: |
        Free Play: Draw whatever you
        like with binary!
      Course 4 Artist For  Functions 10_instruction: |
        Let's Step it up a little,
        can you draw a Star shape using the "Draw a Square Line" function? Good
        luck!
      Course 4 Artist For  Functions 11_instruction: |
        Let's Step it up a little,
        can you draw a Star shape using the "Draw a Square Line" function? Good
        luck!
      Course 4 Artist For Loops 1_instruction: |
        Draw this triangle that is 50 pixels
        wide. Hint: use a repeat block.
      Course 4 Artist For Loops 10_instruction: |
        Free Play Time! Have fun drawing
        whatever you like with the blocks you have learned how to use
      Course 4 Artist For Loops 11_instruction: |
        Remember Stage 6 when we used a
        variable to control the number of sides in a shape? We are going to do the
        same thing with the "counter" variable now. This pattern starts with a triangle
        and adds one side at a time until it draws a decagon (10 sides). Each side
        should be 100 pixels long. Hint: 360 divided by the number of sides a shape
        has is the number of degrees you'll need to turn.
      Course 4 Artist For Loops 11a_instruction: "Let's put it all together!  Using\nyour
        knowledge of \"for loops\" and the \"counter\", create this drawing where\neach
        shape has two more sides than the last.  Make sure that each side is\n10 times
        as long as the number of sides in the polygon.\r\n\r\nVery little\nof the
        code has been provided for you."
      Course 4 Artist For Loops 12_instruction: "That looked pretty cool, but now\nI'd
        like to draw each shape next to the last one. This time each side is\n20 pixels.
        Use a jump block to jump forward 40 pixels after each shape. \n"
      Course 4 Artist For Loops 13_instruction: |
        Hmmm, those shapes are getting bigger
        every time! Didn't we already solve this problem with variables? How can
        we use the counter variable to make the sides smaller as there are more of
        them? Instead of moving forward by a set amount, try moving forward (100 /
        counter) pixels.
      Course 4 Artist For Loops 14_instruction: |
        If you turn a little bit more or
        less than you normally would for a shape, it creates a neat effect. Try using
        the code from the last level, but turning 89 degrees to create this twisted
        square spiral.
      Course 4 Artist For Loops 15_instruction: "Free Play: Try making some drawings\nof
        your own using For Loops. We've added a few generic variables for you\nto
        use as well.\r\n\r\nNotice that there are now so many blocks in your toolbox\nthat
        we have to organize them into categories again.  Click around to discover\nall
        of the blocks that you can use in this level."
      Course 4 Artist For Loops 2_instruction: |
        I've put the code for drawing a
        triangle inside a for loop that counts from 50 to 100 by 10.  NOTE: Make sure
        you look at the code before you hit "Run".
      Course 4 Artist For Loops 3_instruction: |
        Use the last puzzle as a reference
        to complete this one.  The smallest triangle has 20 pixel sides, the largest
        has 200 pixel sides, and each triangle is 20 pixels larger than the last.
      Course 4 Artist For Loops 4_instruction: "How would you modify what you've\nlearned
        to draw these squares? They start at 15 pixels long, the largest is\n300 pixels
        long, and each square is 15 pixels larger than the last. \n"
      Course 4 Artist For Loops 5_instruction: "Good job on the last puzzle! Let's\nuse
        that \"counter\" variable block again to draw this cool picture. \n"
      Course 4 Artist For Loops 6_instruction: |
        Free Play! Try using a for loop to
        draw a growing shape pattern of your own design.
      Course 4 Artist For Loops 7_instruction: |
        What happens if you remove the "Repeat
        3" from this algorithm, keeping the "move" and "turn" blocks in the for
        loop? In this spiraling triangle, each side is 20 pixels longer than the last.
      Course 4 Artist For Loops 8_instruction: "Just one little change to the code\nfrom
        the last image can create this drawing. Can you figure out what that\nchange
        is?\r\n\r\nHint:  You need to remove something!"
      Course 4 Artist For Loops 8a_instruction: |
        Just one little change to the code
        from the last image can create this image. Can you figure out what that change
        is?
      Course 4 Artist For Loops 9_instruction: |
        Can you make a spiral? Move forward
        from 1 to 75 pixels, increasing by 1 pixel each time.
      Course 4 Artist For Loops Challenge_instruction: "Can you figure out how to\nuse
        all of the things you've learned to create this image?\r\n\r\nNeed a\nhint?
        Click here."
      Course 4 Artist For Loops inspire_instruction: "Free-Play Inspiration: You've\nnow
        learned everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n\r\nNeed a hint? Click here."
      Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is 100
        pixels in length, using a loop?
      Course 4 Artist Functions 10_instruction: |
        Which block do you need to add to
        get the triangle to sit on top of the square?
      Course 4 Artist Functions 11_instruction: |
        Check out this code that draws a
        cube - can you move it into a function called "Draw a Cube"
      Course 4 Artist Functions 12_instruction: Loop square function to draw a line
      Course 4 Artist Functions 13_instruction: |
        Check it out we have a new function
        called "draw a line of squares". Feel free to take a look inside the function
        block to see how we built it. Click on "Run" when your are ready for the
        next puzzle.
      Course 4 Artist Functions 14_instruction: |
        You're doing great! Let's use
        your new "Draw a line of squares" function to draw a Square shape. Remember
        each square is 40 pixels in length.
      Course 4 Artist Functions 15_instruction: |
        Let's Step it up a little, can
        you draw a star shape using the "draw a line of squares" function? Good
        luck! Hint: you may have to turn 144 degrees
      Course 4 Artist Functions 2_instruction: |
        Can you draw 3 squares 20 pixels
        apart from one another? Hint: each square is 100 pixels in size
      Course 4 Artist Functions 3_instruction: "Using the \"draw a square\" function\nblock,
        can you draw this picture? Hint: each square is 120 pixels apart.\r\n"
      Course 4 Artist Functions 4_instruction: |
        Are you ready to create your own
        "Function Block"? Click on the "Functions" block in the tool box, name
        it "draw a triangle", then create a triangle as you have done before with
        the Action and Loops blocks. Then click on the Save and Close in the upper
        right hand corner. Hint: Create a triangle that is 100 pixels in length. Good
        luck!
      Course 4 Artist Functions 5 OLD_instruction: |
        Let's try to use our two functions
        to draw a house - what needs to be fixed in this code to draw the house properly?
      Course 4 Artist Functions 5_instruction: "Using the \"draw a square\" function\nblock,
        can you draw this picture? Hint: each square is 120 pixels apart.\r\n"
      Course 4 Artist Functions 6_instruction: |
        Which block do you need to add to
        get the triangle to sit on top of the square?
      Course 4 Artist Functions 7_instruction: |
        Can you draw a line of squares using
        a Square function? Each square is 40 pixel's in length.
      Course 4 Artist Functions 8_instruction: "Are you getting the hang of how to\nuse
        function blocks? Let's modify this square so that it is 200 pixels in\nsize.
        Hint: click on \"edit\" to change the size of the \"draw a square\"\nfunction
        editor. Remember to click on \"save and close\" to get out of the\nfunction
        editor. \n"
      Course 4 Artist Functions 9_instruction: |
        We have given you most of the code
        to create a function. However there seems to be something missing. Can you
        make this function block complete?
      Course 4 Artist Functions inspire_instruction: |
        Click here to see the inspiration
        picture again.
      Course 4 Artist Inspire_instruction: "Want a second peek at the inspiration\ndesign
        or the hints?  Click here!\r\n\r\nOtherwise, make a design all your\nown!"
      Course 4 Artist Params 1_instruction: |
        Let's edit a function that draws a
        square with 50 pixel sides
      Course 4 Artist Params 10_instruction: "You can call functions from inside\nother
        functions! Using your \"shape\" function as a base, create 3 house shapes\neach
        20 pixels larger than the last starting at 50 pixels in length. Using\na counter
        loop might be helpful. \n"
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: |
        Use your "pinwheel" function to draw
        each of these shapes. The side length for each image is 50.
      Course 4 Artist Params 13_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome!
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: "Awesome, can you draw each of these\ntriangles
        with that new function? The first is 25 pixels long, the second\nis 50, and
        the third is 75. \n"
      Course 4 Artist Params 4_instruction: |
        Can you add a new function called square?
        It should also take a length parameter, just like the triangle. This time
        draw 3 squares 25, 50 and 75 pixels in length,100 pixels apart.
      Course 4 Artist Params 5_instruction: |
        Use both of your new functions to draw
        this picture. To make this easier you use a loop with a "counter" parameter.
      Course 4 Artist Params 6_instruction: "Let's edit this \"draw a shape\" function.\nIt
        already has a \"length\" parameter. Now, let's edit the function to also\nadd
        a \"sides\" parameter. Remember the angle to turn for a given shape is\n360
        divided by the sides it has. Hint: lengths for each shape are the triangle\nis
        100 pixels, the hexagon is 25 pixels and the square is 50 pixels. \n"
      Course 4 Artist Params 7_instruction: "Can you draw these shapes by filling\nin
        the \"???\" The square and triangle are 100 pixels in size while the hexagon\nis
        75 pixels in size. \n"
      Course 4 Artist Params 8_instruction: |
        Can you figure out how to draw this
        shape? Here's a hint create a new function with 6 sides called a hexagon.
      Course 4 Artist Params 9_instruction: |
        Do you remember when we used the counter
        loop but removed a loop within? Let's have some fun and use the "draw a
        shape" function with "sides" and "length" parameters. Can you re create
        these shapes? The square counter should be 5/100/5, the triangle counter should
        be 10/100/10 and the hexagon is 2/100/2.
      Course 4 Artist Var 9_instruction: |
        Here's the algorithm to draw a triangle,
        modify it so it uses the "sides" variable instead. Replace the number 3
        with the "sides" variable. Hint: remember to use the "set sides to" block.
      Course 4 Artist Vars 1_instruction: |
        Can you help me draw an equilateral triangle?
        It has to be exactly 100 pixels long on each side.
      Course 4 Artist Vars 10_instruction: |
        Here's an algorithm that draws a triangle
        out of smaller triangles. Can you modify it so that it uses the "sides"
        variable to draw each triangle? Look through the code, and every time you
        see the number 3, replace it with your "sides" variable. Remember to use
        the "set sides" block.
      Course 4 Artist Vars 11_instruction: |
        Here’s more complicated code using the
        same concepts from the last puzzle - what should you set the "sides" variable
        to in order to draw this picture made of squares?
      Course 4 Artist Vars 12_instruction: |
        Let's set the "sides" variable to
        5. The more sides we add to this algorithm, the bigger this whole pattern
        gets! Notice that there is another variable called "length". We can now
        use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      Course 4 Artist Vars 13_instruction: "When a shape has lots of sides, each\nside
        needs to be shorter if you want the whole pattern to fit on the screen.\n\r\nLet's
        recreate the algorithm for this amazing pattern, but instead of\nmanually
        setting the \"length\" variable, let's use a math block with the\n\"sides\"
        variable inside to make sure that each shape fits correctly.\r\nNeed\nsome
        hints?  Click here."
      Course 4 Artist Vars 14_instruction: "Free Play: Check it out! Now your algorithm\nis
        nested within one more loop. Experiment with changing the values of your\ntwo
        variables to draw cool patterns.\r\n\r\nFor even more effect, try playing\nwith
        color!  Use random colors inside loops to see how it changes your design."
      Course 4 Artist Vars 2_instruction: |
        Instead of using "move forward by 150,"
        the "move" block is now referencing a variable called "length." Can you
        set "length" to 150 to draw this new triangle?
      Course 4 Artist Vars 3_instruction: "Here's a loop that draws a square, but\nsomething's
        missing. Can you fix it so that it uses the variable \"length\"\nto figure
        out how long each side should be? \n"
      Course 4 Artist Vars 4_instruction: |
        Now I want to make a rectangle that is
        twice as tall as it is wide. We've got a variable called "width" that needs
        to be set to 100. Can you use the math blocks to complete the code?
      Course 4 Artist Vars 5_instruction: |
        Use the variable "sides" to control
        how many times this loop gets run.
      Course 4 Artist Vars 6_instruction: "Here’s some code that can draw any regular\npolygon.
        There’s a new variable called sides that is set to 4. Can you use\nthe sides
        variable (along with the math block) to turn the right amount regardless\nof
        how many sides there are in the polygon?\r\n\r\nClick here to go back to\nthe
        hint!"
      Course 4 Artist Vars 7_instruction: "Use what you learned in the last puzzle\nto
        create this hexagon using the \"sides\" variable.\r\n\r\nSee how you could\nchange
        just one value to draw a triangle,  square, pentagon, or octagon?"
      Course 4 Artist Vars 8_instruction: |
        Free Play: Experiment with the number
        of sides this shape has. Can you change the algorithm so that the overall
        size of the shape stays the same, no matter how many sides it has? Hint: You
        might have to use your math blocks (360 divided by "sides") in two places
        this time.
      Course 4 Artist Vars 9_instruction: |
        Modify this algorithm so it uses the "sides"
        variable instead of a fixed number to draw a triangle. Don't forget to use
        the "set sides to" block.
      Course 4 Bee 1_instruction: "The bee can't tell what's under the cloud! First,\nuse
        the \"if\" block to check whether it is a flower or a honeycomb. Then\nonly
        gather nectar from it if it is a flower. \n"
      Course 4 Bee 2_instruction: |
        Use the "if/else" block to check each object
        to see if it's a flower or a honeycomb . If it's a flower, collect nectar...otherwise,
        make honey!
      Course 4 Bee 3_instruction: |
        The unknown object is either a flower or a honeycomb.
        This time, use the if/else block to collect nectar if it is a flower, else
        make honey (because then it would be a honeycomb).
      Course 4 Bee 4_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Here an if/else block is combined with another if/else block to create
        an "if/else-if/else" statement. Complete the solution to collect the unknown
        amount of nectar.
      Course 4 Bee 5_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Add an if-else block to create an if, else-if, else block. Complete
        the solution to collect the unknown amount of nectar.
      Course 4 Bee 6_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Create an if, else-if, else block to collect the unknown amount of
        nectar.
      Course 4 Bee 7_instruction: |
        Use everything you have learned so far to collect
        all the nectar. The purple flower may have either 3, 2, or 1 nectar.
      Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar from
        each flower.
      Course 4 Bee For Loops 10_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 9, then 6, and then 3 nectar?
      Course 4 Bee For Loops 11_instruction: |
        What's wrong with this loop? See if
        you can fix it and make the bee collect all the nectar.
      Course 4 Bee For Loops 2_instruction: |
        Here's a new kind of loop, called the
        "for" loop. This particular for loop will count from 1 to 5 by 1, and run
        the contents of the loop each time it counts. Help the Bee get the nectar.
      Course 4 Bee For Loops 3_instruction: |
        You can solve this puzzle by using a
        for loop to count from 1 to 3 by 1. Now let's go get some nectar!
      Course 4 Bee For Loops 4_instruction: |
        Collect all of the nectar from these
        flowers. I wonder if there's an easier way to do this...
      Course 4 Bee For Loops 5_instruction: "Ah, the for loop makes this much easier!\nUsing
        the \"counter\" variable from the for loop to loop the \"get nectar\"\nblock
        the same number of times as the loop. Whew! That's a lot of loops.\nAll the
        code you need it there, take a look at how it is put together then\nclick
        on Run and see how it works. \n"
      Course 4 Bee For Loops 6_instruction: |
        You can also use a for loop to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      Course 4 Bee For Loops 7_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      Course 4 Bee For Loops 8_instruction: |
        Can you use the loop variable to control
        movement and nectar collection?
      Course 4 Bee For Loops 9_instruction: |
        The last number in your for loop is
        called the "increment,"  and each time the loop is run the counter variable
        changes by the increment. Try collecting these flowers using an increment
        of 2.
      Course 4 Bee Loops 5 NEW_instruction: |
        Here are three flowers. Can you find
        the pattern of instructions that you need to repeat 3 times to collect the
        nectar with the fewest number of blocks?
      Course 4 Bee Loops 5a NEW_instruction: |
        Now, use loops to help the bee collect
        all the nectar on it's way to the honeycomb with as few blocks as possible.  When
        you get there, don't forget to make honey!
      Course 4 Bee Params 1_instruction: |
        Use the function "get 3 nectar" which
        turns, moves to collect the nectar, and then returns to the original location.
        Write a sequence to collect all of the nectar using "get 3 nectar."
      Course 4 Bee Params 2_instruction: |
        Modify the "get 3 nectar" function so
        it makes me turn right instead of left to the flowers.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Now there are flowers on both
        sides! Maybe you can use a parameter so that the same function works for flowers
        on either side. I've added a parameter called "direction" to the function.
        If the "direction" parameter equals 0 I should turn left, if it's 1 I should
        turn right.
      Course 4 Bee Params 3_instruction: |
        Now there are flowers on both sides! I've
        added a parameter called "direction" to the function. Use the "left" and
        "right" variables to control direction. Fill in the rest of the function
        definition and then click "Save and Close."
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Try using your new function to
        collect all of the flowers. Remember, 0 = left and 1 = right.
      Course 4 Bee Params 4 backup_instruction: |
        Wouldn't it be nice if we could
        collect all of these nectars with the a single function? Try adding a new
        parameter to your function called "nectars" to control the amount of nectar
        to collect. You'll probably want to rename the function too!
      Course 4 Bee Params 4_instruction: |
        Try using your new function to collect
        all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 5_instruction: بیایید از پایه شروع کنیم - می توانید یک تابع
        جدید به نام "get 5 nectar" با یک ورودی مسیر بسازید?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 6_instruction: |
        Wouldn't it be nice if we could collect
        all of these nectars with the a single function? Try adding a new parameter
        to your function called "nectar units" to control the amount of nectar to
        collect. You'll probably want to rename the function too!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 7_instruction: |
        Try using your new function to collect
        all of this nectar.
      Course 4 Bee Params 8_instruction: |
        Challenge: Now there's honey to deal with
        too! Rewrite your function to take in both the number of honey units and the
        number of nectar units.  How would you use those numbers to decide what you
        should do?
      Course 4 Bee Params Ex_instruction: |
        Try using your new function to collect
        all of this nectar.
      Course 4 Binary 1_instruction: |
        Here's a function that takes a binary string
        of 1's and 0's and instructs the farmer to turn on the go from left to right,
        top to bottom, turning on the squares where the number has a zero. Run the
        code provided to see how the farmers uses binary to draw an image.
      Course 4 Binary 2_instruction: |
        What binary string could you loop 8 times to
        draw this image? Hint: the number "1" fills a hole.
      Course 4 Binary 3_instruction: |
        Can you draw this pattern by looping a single
        binary string?
      Course 4 Binary 5 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 5_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 6 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 6_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 7_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 8_instruction: |
        You can complete the most of this image by
        looping a 5 bit binary number - then you'll need one more 4 bit number to
        get the bottom right-hand corner.
      Course 4 Maze 1_instruction: Get the angry bird to the pig!
      Course 4 Maze 2_instruction: Avoid the TNT!
      Course 4 Maze 3_instruction: 'Program the angry bird to get to the pig. '
      Course 4 Maze 4_instruction: |
        Try the "repeat" block to use fewer blocks
        when solving this puzzle...
      Course 4 Maze 5_instruction: |
        Can you solve this puzzle using the fewest number
        of blocks possible?
      Course 4 Maze 6_instruction: |
        Can you solve this puzzle using the fewest number
        of blocks possible?
      Course 4 Play Lab For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Lab Params 1_instruction: |
        Here's a function called "jump"
        that causes your main character to jump up 100 pixels. Use the jump function
        to collect all of the flags.
      Course 4 Play Lab Params 10_instruction: "We've added one last function for\nyou
        to use. \r\n\r\nProgram your game to call the \"level_up\" function if\n\"player_points\"
        > 10.  \r\n\r\nPlay the game, and make it past level 4 to\nmove to the next
        puzzle. "
      Course 4 Play Lab Params 2_instruction: "Now we've got flags that are too\nhigh
        for our current jump! Let's use both the \"up\" and \"down\" arrows\nso that
        we can have multiple jump heights.  \r\n\r\nWe need to add a parameter\nto
        our jump function called \"height\".  The up arrow should cause the dog\nto
        jump 200 pixels and the down arrow should make it jump only 100 pixels.\n\r\n\r\nHint:
        You will need to click \"edit\" on the jump function and update\nit so that
        it uses the \"height\" parameter."
      Course 4 Play Lab Params 3_instruction: "Let's add another parameter to the\njump
        function so that we can use it with other actors. Each actor is represented\nby
        a number, starting from one. Edit the \"jump\" function so that the definition\nincludes
        the \"actor\" parameter. \n"
      Course 4 Play Lab Params 4_instruction: |
        Here's a function called "patrol."
        Edit it to move the Cat up 400 pixels and then down 400 pixels.
      Course 4 Play Lab Params 5_instruction: |
        Fill in the "actor" parameter input
        so that we can call the "patrol" function for each of the actors. Remember,
        the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6_instruction: |
        Add another parameter called "speed"
        to the "patrol" function. Use a "set speed" block with the new "speed"
        parameter.
      Course 4 Play Lab Params 7_instruction: "Look at the code provided to see if\nyou
        can figure out what each block does.  \r\n\r\nWhen you're done, use the\narrow
        keys to control the Dog and collect all of the flags."
      Course 4 Play Lab Params 8_instruction: |
        Use a "when touching" block to send
        Dog back to the top-left ONLY if Dog touches any of the other actors.
      Course 4 Play Lab Params 9_instruction: "You may recognize this game from an\nearlier
        level. \r\n\r\nWe've added a function called \"score_points\" that\ntakes
        the parameter \"points\". \r\n\r\nEdit the function so that the \"points\"\nparameter
        is added to the \"player_points\" variable. \r\n\r\nWhen you're\ndone, click
        \"Run\" to play.  When Dog scores 10 points, you will move on\nto the next
        puzzle. "
      Course 4 Play Lab Vars 1_instruction: |
        This time you don't have to write any
        code, just hit "Run" to play the game! In this game, you're the dog who
        is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      Course 4 Play Lab Vars 2_instruction: |
        The race in that last puzzle wasn't
        very fair! Change the "dog_speed" variable to make sure you can collect
        more flags than Cat. The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3_instruction: |
        Here's a new kind of game! Use the
        left and right arrows to move, and the up arrow to jump. See if you can collect
        all of the flags.
      Course 4 Play Lab Vars 4_instruction: |
        Now we're using a variable called "height"
        to control how high the dog can jump. Update the "height" variable so that
        the dog can jump high enough to reach all the flags.
      Course 4 Play Lab Vars 5_instruction: "Let's build a game! First we'll need\na
        score. Rebuild the code that you saw in the last level to set the score\nto
        10. \n"
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Cool, now we've got our score
        variable, but how are we going to make it useful? How about adding to your
        score variable each time you hit the enemy with a fireball? Use the "when
        actor 2 touches anything" event to trigger an update to your score when your
        fireballs hit the cat. You can increment the score by setting score = score
        + 1. Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 6_instruction: "Use the right arrow to shoot hearts.\r\n\r\nIn\nour
        game, how should we score points? Add 1 to your \"points\" variable each\ntime
        Dog hits Cat with a heart. Use the \"when actor 2 touches anything\"\nevent
        to trigger an update to your score. You can increment your variable\nby setting
        \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to
        pass the level."
      Course 4 Play Lab Vars 7_instruction: |
        Nice, now let's make sure this game
        isn't too easy to play. Any time Dog (actor 1) gets hit by yellow hearts
        from Cat (actor 2), you should lose a point. Start with 10 points so it's
        not too hard. Let your score drop down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Alright, one last thing for
        this game - let's set it up so the player can win (or lose). Use a forever
        loop to check the value of score - if score is ever greater that 20, make
        the enemy vanish. If the score is every less than 0, make the player vanish.
        Click "Finish" when the game works like you'd like it to.
      Course 4 Play Lab Vars 8_instruction: |
        Let's set up this game so the Dog can
        win (or lose). Use a forever loop to check the value of score - if score is
        ever greater that 20, make the enemy (the Cat) vanish. If the score is ever
        less than 0, make the player (the Dog) vanish. Click "Finish" when the game
        works like you'd like it to.
      Course 4 Play Lab Vars 9_instruction: "Free Play time! Here are all of the\nvariables
        we've played with so far in this stage, as well as a few more in\ncase you
        want them. \r\n\r\nNotice that there are now so many blocks in our\ntoolbox
        that they need to be organized!  Here, we've put each piece into\nan appropriate
        category.  Take some time to explore everything that is available.\nWhen you're
        done browsing, make a game or story using repeats, variables,\nand events.
        \ \r\n\r\nHint: scroll down to see all the commands in the workspace."
      Course 4 Play Lab Vars_instruction: |
        Alright, one last thing for this game
        - let's set it up so the player can win (or lose). Use a forever loop to
        check the value of score - if score is ever greater that 20, make the emeny
        vanish. If the score is every less than 0, make the player vanish.
      Course 4 Play Labs For Loops 1_instruction: |
        Let's make the dog speak every
        number from 1 to 100. Use a for loop and the counter block to speak the counter
        variable each time the loop is run.
      Course 4 Play Labs For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Labs For Loops 3_instruction: |
        If we count by larger numbers,
        we count even higher in the same amount of time. Try making the dog count
        from 10 up to 1000, 10 at a time.
      Course 4 Play Labs For Loops 4_instruction: |
        Changing the increment can be
        helpful, but we're still counting linearly (each number is the same distance
        from the last) What if I wanted to count exponentially? Without changing the
        settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter squared)?
      Course 4 Play Labs For Loops 4a_instruction: "Now, let's blend the variables\nfrom
        Stage 7 together with your \"counter\" variable to make some magic happen.
        \  \r\n\r\nIn\nthis puzzle, Dog will count from 0 to 1000 by \"increment\".
        \ Set the \"increment\"\nvariable to 10 at the beginning of your code to see
        what happens."
      Course 4 Play Labs For Loops 5_instruction: |
        In the last stage we counted the
        square of each number. Try changing "counter ^ 2" to "counter ^ 3" to
        count the cube of each number (1, 8, 27, 64, 125, 216, 343…)
      Course 4 Play Labs For Loops 5a_instruction: "In this puzzle, Dog will be your\ntime
        keeper.\r\n\r\nDog will count from 0 to 30 by \"increment\".  The \"increment\"\nvariable
        will begin with a value of 1.\r\n\r\nCan you make it so that each\ntime you
        click Dog, the increment increases by 2?  Click the forward arrow\nto run
        the for loop.\r\n\r\nRun the loop a couple of times, clicking Dog before\neach
        one."
      Course 4 Play Labs For Loops 6_instruction: |
        You may recall that a prime number
        is any whole number that is only divisible by itself and 1. Use the "is_prime"
        function to speak out only the prime numbers from 1 to 100.
      Course 4 Play Labs For Loops 6a_instruction: "Dog will still keep time by counting\nwith
        our \"for loop\" by \"increment\", but this time, we will add The Wizard\ninto
        the mix.  Can you change the code so that \"increment\" goes up by two\neach
        time The Wizard is clicked?\r\n\r\nWatch out!  The Wizard moves quickly!"
      Course 4 Play Labs For Loops 7_instruction: |
        Could you use a for loop to help
        me speak the sequence 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: "Now we're getting somewhere!  What\nif
        we start counting how many times we can click The Wizard before Dog gets\nto
        30?  \r\n\r\nFinish adding blocks to The Wizard so that every time he's\nclicked
        the variable \"clicked\" increases by one. You can ignore \"increment\"\nfor
        now.\r\n\r\nDog will start counting when you click \"Run\"."
      Course 4 Play Labs For Loops 8_instruction: "Now, help the actors move as they\ncount.
        \ \r\n\r\nDog should move and count by adding 2 (counter + 2) each time.  Cat\nwill
        move and count by multiplying by 2 (counter * 2)  each time. Penguin\nwill
        move and count to the power of 2 (counter ^ 2) each time.  Who will reach\ntheir
        flag first?"
      Course 4 Play Labs For Loops 8a_instruction: "To finish our game, we need to\nbring
        back the \"increment\" variable!    Let's tie it to the level of the\ngame.\r\n\r\n1)
        Keep track of the number of times The Wizard is clicked.\r\n2)\nIf The Wizard
        is clicked at least 10 times before Dog counts to 30, raise\n\"increment\"
        by 1 and start again.\r\n3) If The Wizard does not get clicked\nat least 10
        times, the game is over."
      Course 4 Variables Assessment_instruction: |
        Can you create this image using
        a variable for sides? Each line should be 50 pixels long.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig."
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin
        the name of a food and produces a String that says how you feel about that\nfood.
        For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic
        “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review,
        but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne
        example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes
        in the name of a shape and produces a solid green shape. Your function\nshould
        work with at least “circle”, “star” and “rectangle”, but you can add\nother
        shapes if you like. You can choose the size of each shape. Don’t forget\nto
        add an “else” clause!\r\nOne example - and part of the definition -  has\nalready
        been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave
        your own business by 30. Write a function called life-goals, which takes\nin
        an age and produces a string that describes your life goals by then. Don’t\nforget
        to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The design recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition. The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the design recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        _overlay_ to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay function to place a 75
        pixel radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      frozen circle function in circle_instruction: حالا بیایید 20 دایره ی متداخل،
        که هرکدام 18 درجه نسبت به قبلی می چرخد بسازیم.
      frozen circle function with parameter_instruction: اینجا یک بلوک "Create circle"
        است که می تواند دایره هایی با سایز های متفاوت بسازد. می توانید از این برای
        ایجاد یک دایره ی کوچک با سایز 5 و یک دایره ی بزرگتر با سایز 10 استفاده کنید?
      frozen circle function_instruction: از بلوک جدید "Create a circle" برای ایجاد
        10 دایره ی متداخل استفاده کنید. استفاده از بلوک jump forward را در بین دایره
        ها فراموش نکنید.
      frozen circle_instruction: یک دایره شکل خاصی است. می توانید تشخیص دهید علامت
        سوال ها را با چه عددی جایگزین کنید تا یک دایره بکشید?
      frozen cross rotate dense_instruction: 'بیایید 90 بار تکرارش کنیم! 90 چند بار
        در 360 تکرار می شود? راهنمایی: عدد واقعا کوچکی است.'
      frozen cross rotate_instruction: حالا سعی کنید 10 بار تکرارش کنید. چند درجه
        نیاز دارید تا بین هر خط بچرخید?
      frozen cross_instruction: از بلوک "repeat" برای ایجاد یک علامت بعلاوه استفاده
        کنید. دقت کردید که السا می تواند به جلو و عقب حرکت کند?
      frozen diamond mini snowflake_instruction: می دانستید هر دانه ی برف یک شکل متفاوت
        دارد? بیایید با استفاده از بلوک "Repeat" یک دانه ی برف جدید بسازیم تا یک ذوزنقه
        را 4 بار تکرار کنیم، و بین هرکدام از چهار ضلعی ها 90 درجه به راست بچرخیم.
      frozen diamond snowflake_instruction: حالا، بیایید یک دانه ی برف جدید با استفاده
        از بلوک تکرار با تکرار 10 بار یک ذوزنقه بسازیم، و بین هر کدام 36 درجه به راست
        بچرخیم.
      frozen diamond_instruction: 'بیایید یک ذوزنقه بسازیم. درست مثل مربع است فقط
        زاویه های متفاوتی دارد: زاویه های 60 و 120 درجه به جای زاویه های 90 درجه.'
      frozen freeplay_instruction: شما رسما یک هنرمند حرفه ای شده اید! یک سرزمین عجایب
        زمستانی بسازید.
      frozen line_instruction: سلام! من السا هستم از آرندل. کمکم کنید یک خط بسازم.
      frozen perpendicular_instruction: حالا بیایید ببینیم می توانیم دوخط ایجاد کنیم
        که با هم زاویه ی 90 درجه دارند. شما باید از بلوک "Turn" هم مانند بلوک "Move"
        استفاده کنید.
      frozen snowflake branch_instruction: سعی کنید برای ایجاد سه شاخه، که شبیه یک
        دانه ی برف به نظر می رسد از بلوک "Create a snowflake branch" استفاده کنید.
      frozen snowflake full_instruction: حالا بیایید 8 بار تکرارش کنیم تا یک دانه
        ی برف زیبا بسازیم!
      frozen snowflower_instruction: الگو های پیچیده ی برف می تواند با اشکال ساده
        ساخته شود. می توانید با تکرار 5 دایره ی سایز 5 و 5 دایره ی سایز 10 یک الگو
        بسازید?
      frozen square iterative_instruction: به نظر میرسد که نصف راه را برای ساخت یک
        مربع رفته ایم. بیایید 4 خط کنار هم قرار دهیم تا یک مربع بسازیم.
      frozen square loop 3x_instruction: بیایید سه مربع بسازیم، بعد از هر مربع بچرخید.
        مطمئن شوید قبل از شروع هر مربع جدید 120 درجه بچرخید.
      frozen square loop_instruction: سلام، من آنا هستم از آرندل! بیایید با استفاده
        از بلوک "Repeat" یک مربع بسازیم، که از بلوک های کمتری استفاده می کند. بلوک
        "Repeat" باید چند بار(???) بلوک های داخلش را تکرار کند تا یک مربع بسازد?
      frozen square snowflake_instruction: می توانید با استفاده از بلوک "Repeat" برای
        تکرار 10 مرتبه ای یک مربع، و بلوک "Turn" برای چرخش 36 درجه ای بین هر مربع
        یک دانه ی برف بسازید?
      hoc2015_event_add_items_instruction: |
        Now you create the game. Use the addItemsToScene
        command to choose how many items are in the game.
      hoc2015_event_add_items_2_instruction: |
        Add more items. This time, try using
        code mode instead of blocks. Don’t forget to type “quotes” around the item
        name.
      hoc2015_event_choose_character_instruction: |
        Customize your game by choosing
        your character. Let’s switch back to block mode. To set a value, just click
        the drop down on the block.
      hoc2015_event_four_items_instruction: |
        Now the items are all over the screen.
        Can you make your character walk in any direction so he can collect all the
        items?
      hoc2015_event_free_instruction: Now you can make and share anything you like.
      hoc2015_event_move_items_instruction: |
        This game would be more fun if the items
        moved. Use setItemActivity to make the items move around. Then, capture them!
      hoc2015_event_points_instruction: |
        Let’s add points. Give yourself some points
        when you touch an item. Can you score 10 points?
      hoc2015_event_random_items_instruction: |
        We can change settings at any point.
        Change the items to a new random movement every time you catch one.
      hoc2015_event_two_items_instruction: |
        Drag the move commands into the whenUp
        and whenDown functions.  Then, click the arrows to move the character to get
        the items.
      hoc2015_free_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_intro_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_maze_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_move_cross_instruction: |
        Type or drag the blocks to get both items
        to the destination.
      hoc2015_move_down_instruction: |
        Hiro is "actor 1".  Use the Move block to
        move Hiro right to touch Baymax.
      hoc2015_move_item_destination_instruction: |
        I see another item behind that
        obstacle. Can you bring it back to the destination?
      hoc2015_move_item_destination_2_instruction: |
        Drag the code blocks into the
        workspace to help the character reach the destination.
      hoc2015_move_item_destination_3_instruction: |
        Try typing the commands to get
        the item to our destination. Don’t forget to end with ();
      hoc2015_move_right_instruction: |
        Help me program the character to get the item
        and bring it to the destination. Stack a couple moveEast(); commands and then
        hit Run to make him go.
      hoc2015_move_twice_instruction: We need the items. Help me get them all!
      hoc2015_move_two_items_instruction: We need the items. Help me get them all!
      hoc2015_random_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_sandbox_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_square_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      Infinity_catch_instruction: می‌تونی با استفاده از کلید‌های نشانه کاری کنی که
        Elsa (کاراکتر ۲) به Anna برسه؟
      Infinity_finale_instruction: هرچیزی که دوست داری بساز و به اشتراک بگذار!
      Infinity_move_collide_instruction: Hiro «کاراکتر۱» است. به سمت راست حرکتش بده
        تا به Baymax برسه و وقتی به هم خوردند، صدا بده.
      Infinity_move_directions_instruction: Baymax «کاراکتر۲» است. چندتا بلوک حرکت
        اضافه کن و بعد با فلش‌ها Baymax رو حرکت بده. کاری کن که به دو تا کاراکتر دیگه
        برخورد کنه.
      Infinity_move_right_instruction: Hiro «کاراکتر۱» است. از بلوک‌های حرکت استفاده
        کن تا Hiro رو به سمت راست ببری تا به Baymax برخورد کنه.
      Infinity_repeat_instruction: از بلوک «تکرار تا ابد» استفاده کن تا Anna رو ۴۰۰
        پیکسل بالا و پایین ببری.
      Infinity_say_instruction: با استفاده از بلوک «گفتن» کاری کن آنا بگه «سلام».
      Infinity_shoot_instruction: Batmax «کاراکتر۲» است. کاری کن که Baymax یه موشک
        پرت کنه سمت Hiro.
      Infinity_shoot_directions_instruction: Hiro «کاراکتر۳» است. کاری کن Hiro یه
        چیزی پرت کنه سمت چهارتا کاراکتر. بین هر کدوم از این پرتاب‌ها هم یک ثانیه صبر
        کنه.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: حالا تعداد بیشتری از دونه‌های برفی رو لمس
        کن!
      Infinity_touch_four_instruction: Anna رو به بالا، پایین، چپ و راست حرکت بده
        که چهارتا دونه برفی رو لمس کنه.
      Infinity_touch_score_instruction: کاری کن که Anna هر دونه برفی رو که لمس می‌کنه
        یه امتیاز بگیره. بعد روی «اجرا» کلیک کن و هدایتش کن تا هر کدوم از دونه‌های
        برفی رو یک بار لمس کنه.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: یک خط کوتاه به سمت بالا و یک خط بلند
        به سمت راست بکش!
      K-1 artist 1 level 10_instruction: خط‌چین رو با استفاده از بلوک‌های طراحی و
        بلوک‌های پرش، بکش
      K-1 artist 1 level 9_instruction: با سه تا خط این رو بکش
      K-1 Artist Loops 1_instruction: این خط رو با چهار بار رفتن به سمت شرق بکش.
      K-1 Artist Loops 2_instruction: می‌تونی همون خط رو با استفاده از حلقه تکرار
        بکشی؟
      K-1 Artist Loops 3_instruction: می‌تونی این بلوک‌ها رو بندازی تو Loop که ۶ تا
        خط بکشی؟
      K-1 Artist Loops 4_instruction: یه Loop می‌تونه کمک کنه که بالای این قلعه رو
        بکشیم؟
      K-1 Artist Loops 5_instruction: چه چیزی را می توانید 4 بار در حلقه تکرار کنید
        تا این پله ها را بکشید?
      K-1 Artist Loops 6_instruction: 'این یکی به دو حلقه تکرار نیاز دارد: یکی برای
        بالا رفتن از پله ها و یکی برای پایین رفتن از پله ها.'
      K-1 Artist Loops 7_instruction: می توانید این الگو را با دو حلقه تکرار تمام
        کنید?
      K-1 Artist Loops 8_instruction: این پلکان پله های بلند تری دارد.
      K-1 Artist Loops 9_instruction: 'ارزیابی: از یک حلقه ی تکرار برای کشیدن پله
        ها استفاده کنید'
      K-1 Artist Loops Free Play_instruction: بازی آزاد، یک چیز سرگرم کننده بکشید!
      K-1 Artist1 1_instruction: پای مرد را با یک خط بکشید
      K-1 Artist1 10_instruction: بکشید و بپرید تا یک مسیر خط چین تا گنج X بسازید
      K-1 Artist1 2_instruction: سیبیل گربه را با دو خط بکشید!
      K-1 Artist1 3_instruction: دو خط در شرق و دو خط در شمال بکشید تا خانه را تمام
        کنید!
      K-1 Artist1 4_instruction: خط هایی در بالا، رو، و پایین برای کامل کردن قلعه
        بکشید!
      K-1 Artist1 5.5_instruction: سومین برج قلعه را با استفاده از خطوط کوتاه کامل
        کنید
      K-1 Artist1 5_instruction: ساقه ی این گل را با دو خط بکشید!
      K-1 Artist1 6_instruction: تصویر را با استفاده از یک بلوک پرش (jump) تمام کنید!
      K-1 Artist1 7_instruction: |
        Use the jump block to move without drawing. Jump
        up and draw a line.
      K-1 Artist1 8_instruction: |
        Draw the dashed line by using both the jump and
        draw blocks
      K-1 Artist1 9_instruction: Draw and Jump to make the dashed line
      K-1 Artist1 Assessment 1_instruction: Draw the short and long lines!
      K-1 Artist1 Assessment 2_instruction: Draw the short dashed lines!
      K-1 Artist2 1_instruction: Draw a square below the triangle.
      K-1 Artist2 2_instruction: Jump and draw a square next to the house.
      K-1 Artist2 3_instruction: Draw a square above the other square
      K-1 Artist2 4_instruction: Draw a rectangle to complete the bridge.
      K-1 Artist2 5_instruction: Draw a rectangle to complete the bridge supports
      K-1 Artist2 6_instruction: Draw two squares to make a rectangle!
      K-1 Artist2 Assessment1_instruction: |
        Assessment: Draw a square next to the
        other square.
      K-1 Artist2 Free Draw_instruction: Draw anything!
      K-1 Artist2_7_instruction: Draw a rectangle to give the dresser a top drawer!
      K-1 Bee 1_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 10_instruction: Get four nectar and then make two honey!
      K-1 Bee 11.5_instruction: Get four nectar to make four honey!
      K-1 Bee 11_instruction: Get three nectar and then make one honey
      K-1 Bee 12_instruction: Get three nectar and then make two honey!
      K-1 Bee 13_instruction: Get three nectar and then make one honey!
      K-1 Bee 14_instruction: |
        Get me to the nectar, pick it up, get me to the honey,
        and make honey
      K-1 Bee 15_instruction: Get two nectar to make two honey!
      K-1 Bee 2_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 3_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 4_instruction: Get two nectar and then make two honey!
      K-1 Bee 5_instruction: Get three nectar and then make three honey!
      K-1 Bee 6_instruction: Get two nectar and then make two honey!
      K-1 Bee 7_instruction: Get three nectar and then make two honey!
      K-1 Bee 8_instruction: Get two nectar and then make two honey!
      K-1 Bee 9_instruction: Get two nectar and then make two honey!
      K-1 Bee Assessment 1_instruction: Get nectar to make honey!
      K-1 Bee Assessment 2_instruction: Get nectar to make honey!
      K-1 Bee Loops 1_instruction: Get the nectar to make honey!
      K-1 Bee Loops 10_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops 11_instruction: |
        Assessment: Use loops and get the nectar and
        honey!
      K-1 Bee Loops 12_instruction: |
        Assessment: Use loops to get the nectar, honey,
        and to move!
      K-1 Bee Loops 2_instruction: |
        Use a loop to move and then get the nectar and
        make honey!
      K-1 Bee Loops 3_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 4_instruction: |
        Use loops to get the nectar, make honey, and
        to move!
      K-1 Bee Loops 5_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 6_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops 7_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 8_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 9_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops Assessment 1_instruction: |
        Get nectar to make honey and use loops
        to move!
      K-1 Bee Loops Assessment 2_instruction: Get nectar to make honey using loops!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      k-1 maze 1_instruction: Can you make me move West to get to the pig?
      K-1 Maze 10_instruction: 'Go around the TNT to get me to the pig! '
      K-1 Maze 11_instruction: |
        Trace the path and lead me to the silly pig. Avoid
        TNT or the feathers will fly! Hint: He's South of me.
      K-1 Maze 2_instruction: Move me East to get me to the pig!
      K-1 Maze 3_instruction: Move me South to get me to the pig!
      K-1 Maze 4_instruction: Move me North to get me to the pig!
      K-1 Maze 5_instruction: Move me East to get me to the pig!
      K-1 Maze 6_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 7_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 8_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 9_instruction: Move one way, then another to get me to the pig!
      K-1 Maze Assessment 1_instruction: Assessment -- Get me to the pig!
      K-1 Maze Assessment 12_instruction: Assessment Level
      K-1 Maze Assessment 13_instruction: Assessment Level
      K-1 Maze Assessment 2_instruction: Assessment -- Get me to the pig!
      K-1 maze debug 1_instruction: Change the code to get me to the pig!
      K-1 maze debug 10_instruction: |
        Debug this level by rearranging and adding
        blocks to get me to the pig!
      K-1 maze debug 11_instruction: "This is a test!\r\nDebug this level by rearranging\nand
        adding blocks to get me to the pig"
      K-1 maze debug 2_instruction: |
        Figure out what is missing and then add blocks
        to get me to the pig!
      K-1 maze debug 3_instruction: |
        Figure out what is missing and then REMOVE blocks
        to get me to the pig!
      K-1 maze debug 4_instruction: |
        Run through these blocks and fix them! I think
        I might be going in the wrong direction.
      K-1 maze debug 5_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 6_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 7_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 8_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 9_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 Maze debug Assessment 1_instruction: |
        Assessment -- Debug this level by
        rearranging and adding blocks to get me to the pig!
      K-1 Maze Loops 1_instruction: Get me to the pig!
      K-1 Maze Loops 10_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 11_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 12_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 2_instruction: Use the Repeat block to get me to the pig!
      K-1 Maze Loops 3_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 4_instruction: Get me to the pig!
      K-1 Maze Loops 5_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 6_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 7_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 8_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 9_instruction: Get me to the pig!
      K-1 Maze Loops Assessment 1_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Loops Assessment 2_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Multi 14_instruction: Assessment Level
      K-1 Maze Multi 15_instruction: Assessment Level
      K-1 Maze Sequence Assessment 1_instruction: "This is a test!\r\nMove one way,\nthen
        another to get me to the pig"
      K-1 Maze Sequence Assessment 2_instruction: "This is a test!\r\nMove one way,\nthen
        another to get me to the pig."
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou
        can connect to up to 5 other people in a room. When you send messages\nin
        the room, everyone receives them. What are some of the challenges of this\nsystem,
        and how might you solve them?\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto
        a router with the others in your group. Important note: The router will\nonly
        properly route messages where the first 4 bits are the To: address and\nthe
        second 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        Draw something awesome! Your code is saved
        as a project that you can return to at any time.
      NEW Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is
        100 pixels in length, using a repeat loop?
      NEW Course 4 Artist Functions 10_instruction: |
        Click "edit" to fill out the
        blocks in the function definition to make a 40 pixel square.
      NEW Course 4 Artist Functions 11_instruction: "Now we want to create a new\nfunction
        called \"draw a line of squares\" that draws six squares all in a\nrow.  Can
        you build this function using the \"draw a square 40\" function\nthat we've
        already created?\r\n"
      NEW Course 4 Artist Functions 12_instruction: |
        Use the "draw a line of squares"
        function from the last puzzle to draw this pattern."
      NEW Course 4 Artist Functions 13_instruction: |
        Can you draw a star shape using
        the "draw a line of squares" function? Hint: Each iteration, you'll have
        to move forward a certain number of pixels and turn 144 degrees.
      NEW Course 4 Artist Functions 14_instruction: 'Free Play time! '
      NEW Course 4 Artist Functions 2_instruction: |
        Can you draw 3 squares 20 pixels
        apart from one another? Hint: each square is 100 pixels in size
      NEW Course 4 Artist Functions 3_instruction: |
        Here is a new type of Block.
        It is called a "Function" block. Click "edit" then fill it with the code
        for drawing a square with 100 pixel sides. When you're done editing the function,
        click "Close" to go back to your program.
      NEW Course 4 Artist Functions 4_instruction: |
        Use the "draw a square" function
        to draw this pattern. Hint: You will have to use a "turn right by 120 degrees"
        block after each square.
      NEW Course 4 Artist Functions 5_instruction: |
        How did the "draw a square"
        block know what commands to run? Click on "edit" in the "draw a square"
        function block. The blocks in the function editor are the definition that
        make up "draw a square." When you're done looking around, click "Save
        and Close" and then "Run."
      NEW Course 4 Artist Functions 6_instruction: "Using the \"draw a square\" function\nblock,
        can you draw this picture? Hint: each square is 20 pixels apart.\r\n"
      NEW Course 4 Artist Functions 7_instruction: "Are you getting the hang of how\nto
        use function blocks? Let's modify this square so that it is 200 pixels\nin
        size. Hint: click on \"edit\" to enter the \"draw a square\" function editor.\nRemember
        to click on \"Close\" to get out of the function editor. \n"
      NEW Course 4 Artist Functions 8_instruction: |
        We have created a new function
        for you called "draw a triangle".  Can you edit the function definition
        to draw a triangle with 100 pixel sides?
      NEW Course 4 Artist Functions 9_instruction: |
        Can you solve this by adding
        only one block?
      NEW Course 4 Artist Functions inspire_instruction: |
        Click here to see the inspiration
        picture again.
      New Course 4 Artist Functions Level 4_instruction: |
        Use the "draw a square"
        function to draw this pattern.
      NEW Course 4 Artist Params 1_instruction: |
        Let's define this function to draw
        a square with 50 pixel sides. Click "edit" to get started.
      NEW Course 4 Artist Params 10_instruction: "Create a \"draw a hexagon\" function\nblock
        with a length parameter. Hint: this hexagon is 100 pixels in size. \n"
      NEW Course 4 Artist Params 11_instruction: |
        Can you figure out how to draw
        this shape? Edit the function to use the "sides" parameter.
      NEW Course 4 Artist Params 12_instruction: |
        Can you complete this drawing?
        The sides of all the shapes are 100 pixels long.
      NEW Course 4 Artist Params 12a_instruction: |
        This image is similar to the last.
        Can you use a "for loop" with your function to make this design?
      NEW Course 4 Artist Params 13_instruction: |
        Let's edit this "draw a shape"
        function. It already has a "length" parameter. Now, let's edit the function
        to add a "sides" parameter. Remember the angle to turn for a given shape
        is 360 divided by the number of sides it has. Hint: The overall size of each
        shape is 200 pixels. Do you remember the equation to make shapes the same
        size when they have a different number of sides?
      NEW Course 4 Artist Params 14_instruction: |
        Edit "draw a spiral edge" to
        use parameters and recreate these shapes.
      NEW Course 4 Artist Params 15_instruction: |
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
        Play with the pen width to see how different your drawings look!
      NEW Course 4 Artist Params 2_instruction: یک تابع "یک مثلث با اضلاع 50 پیکسلی
        بکش" را از ابتدا بسازید
      NEW Course 4 Artist Params 3_instruction: "Now let's use the function to draw\n5
        triangles in a row. Hint: each triangle is 30 pixels apart.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5_instruction: "Fill in the ??? in the length parameter\ninput
        block. Hint: The pentagon is 100 pixels in size. \n"
      NEW Course 4 Artist Params 6_instruction: |
        Fill in the "length" parameter
        to draw these shapes by replacing the "???" with the right numbers. The
        square and triangle are 100 pixels in size while the hexagon is 75 pixels
        in size.
      NEW Course 4 Artist Params 7_instruction: |
        Can you complete this drawing? Hint:
        each triangle is 25 pixels larger than the last.  The first triangle is 25
        pixels in size.
      NEW Course 4 Artist Params 8_instruction: |
        The code for this triangle function
        is broken. Can you edit the function to fix it, and then make triangles of
        length 25, 50, and 75?
      NEW Course 4 Artist Params 9_instruction: |
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      NEW Course 4 Artist Params inspire_instruction: "Free Play Inspiration: You've\nnow
        learned everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n \r\nWant to know how our inspiration pattern was made? "
      NEW Course 4 Artist Vars 1.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. \n"
      NEW Course 4 Artist Vars 12_instruction: |
        Now, recreate the algorithm from
        the last level and create a pentagon with sides of 150.
      NEW Course 4 Artist Vars 2.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. \n"
      NEW Course 4 Artist Vars 2_instruction: "Drag a number block to the \"set length\"\nblock
        to draw a set of 50 pixel triangles. \n"
      NEW Course 4 Artist Vars 4 5_instruction: |
        Awesome job on the last puzzle,
        let's try it again this time let's make this cool design with with 60 pixel
        hexagon's.
      NEW Course 4 Artist Vars 4_instruction: |
        Let's try it again. Can you set the
        length variable to make this cool design with hexagons? Hint: It's a multiple
        of 10.
      NEW Course 4 Artist Vars 6_instruction: "Draw this pattern by dropping the\nlength
        variable in the correct places, and then setting the right value for\nlength.
        (Hint: it's a multiple of 10).  \r\n\r\nSee how you only set the\nvalue for
        length once, and the code uses the right value everywhere?\r\n\r\n\r\n"
      NEW Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar
        from each flower.
      NEW Course 4 Bee For Loops 10_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      NEW Course 4 Bee For Loops 10a_instruction: |
        Ready for a challenge?  Take what
        you've learned about loops and try to solve this problem. Remember: You may
        have to run your solution multiple times before you figure out all of the
        steps.
      NEW Course 4 Bee For Loops 11_instruction: |
        Can you use the loop variable to
        control movement and nectar collection?
      NEW Course 4 Bee For Loops 2_instruction: |
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3_instruction: "Ah, the \"for loop\" makes this\nmuch
        easier! All the code you need is here, take a look at how it is put together\nthen
        click \"Run\" to see how it works. \n"
      NEW Course 4 Bee For Loops 4 4_instruction: |
        Now we need to move forward "counter"
        times, then get nectar "counter" times.  Can you use two "repeat" loops
        to solve this challenge?
      NEW Course 4 Bee For Loops 4_instruction: "Replace the ??? in the \"for loop\"\nwith
        the largest amount of nectar the bee has to collect. \n"
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Are you getting the hang of using
        the "for loop"? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_instruction: |
        You can also use a "for loop"
        to count down. Try gathering this nectar by counting down from 5 to 1 by 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        The last number in your for loop
        is called the "increment". Each time the loop is run, the counter variable
        changes by the value of the increment. Try collecting these flowers using
        an increment of 2.
      NEW Course 4 Bee For Loops 7_instruction: "Now, let's combine the \"counter\"\nvariable
        with a math block! How can you use the \"counter\" variable to navigate\nthis
        garden with the fewest number of blocks possible? What do you need to\ndo
        to collect 3, 6, 9, 12, 15 nectar this time? The secret is in the \"counter\"\nvariable!\r\n\r\nRemember:
        If your loop is counting up, the increment is added\nto your \"counter\" variable
        each time through."
      NEW Course 4 Bee For Loops 8_instruction: "You've got this! What should your\nincrement
        be to collect 3, 6, 9, 12, 15 nectar?\r\n"
      NEW Course 4 Bee For Loops 9_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 15, then 12, then 9, 6, 3 nectar?
      NEW Course 4 Bee For Loops 95_instruction: |
        Take a look at each piece of the
        "for loop" that you have just created.  Can you figure out which numbers
        you need to double to solve this puzzle? Why does it work?
      NEW Course 4 Play Lab Params 11_instruction: "It's Free Play time! Have fun\nwith
        all the blocks in your tool box. \n"
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Let's try that again, but with
        less help. What do you need to edit this time to make the actors patrol?
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        “What do you think this code will
        do? Press “Run” to see what happens.”
      NEW Course 4 Play Labs For Loops 7a_instruction: |
        Using what you learned so
        far, can you have Dinosaur take a step forward every time Penguin counts?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "It's Free Play\ntime,
        have fun with all the blocks in your tool box. \n"
      NEW Course 4 Play Labs For Loops 8a_instruction: "Challenge: How would you\nuse
        the \"for loop\" to get every actor to go around and say their actor number,\nthen
        vanish from the screen? \n"
      New Play Lab Project_instruction: |
        Create your own story or game! Your code
        is saved as a project you can return to at any time.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame,
        and then figuring out how it works. You can use the arrow keys\nto move the
        ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n
        \ \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry
        clicking the Remix button to spin off a new remix of your project.\r\n\r\nAny\nchanges
        you make after you click Remix will be saved on your new remix and\nnot on
        your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: تابع‌ها به تو امکان تعریف بلوک‌های جدید را می‌دهند!
        ما بلوک‌های رسم مربع را داخل تابع «رسم مربع» جابجا کردیم. می‌توانی از این
        تابع استفاده کنی و عینک را بسازی؟ مربع‌ها ۷۵ پیکسل فاصله دارند.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        from going either direction? Try using the AND block to program the function
        on-screen? to check if Sam is safe-left? AND safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: بلوط ! بلوط ! بلوط ! از یک بلوک "if" استفاده کن تا من
        را با کمترین تعداد بلوک ها به آنجا برسانی.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: باشه، بیایید دوباره این کار را برای تمرین انجام دهیم -
        خیلی متفاوت نیست، اما مواظب دیوار باشید!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: بلوک "if-else" یک شرط را کنترل می کند، و سپس یک کار یا
        کار دیگری را انجام می دهد. برای رساندن من به بلوط سعی کنید از این بلوک جدید
        استفاده کنید.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: یک تمرین بیشتر برای بلوک "if-else"، می توانید در اولین
        بار درست انجامش دهید?
      scrat 20_instruction: می توانید فقط 3 بلوک اضافه کنید تا به من کمک کنید یک ماز
        پیچیده تر را حل کنم? اگه درست انجامش دهید، من می توانم در هر مسیر خمیده ای
        صرف نظر از طول آن راه بروم. عجله کن! یخ داره ذوب میشه!
      SpecialFrozenLevel_instruction: شما رسما یک هنرمند حرفه ای شده اید! یک سرزمین
        عجایب زمستانی بسازید.
      Standalone_Artist_1_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Standalone_Artist_2_instruction: |
        Draw this diamond with 120 and 60 degree
        angles and 150 pixel long sides.
      Standalone_Artist_3_instruction: |
        Can you draw this hexagon with 100 pixel
        sides and 60 degree turns?
      Standalone_Artist_4_instruction: |
        Now you've got a new block to play with,
        the loop. This will repeat a set of commands. What happens if you loop these
        commands 6 times?
      Standalone_Artist_5.5_instruction: |
        Notice how we simplified the diamond code
        by turning it into a loop. You can loop that whole sequence 12 times to draw
        the flower. Hint: You'll need to turn 30 degrees after your diamond loop
        so you don't keep drawing over the same diamond.
      Standalone_Artist_5_instruction: |
        How many times do you need to loop this diamond
        to draw the flower?
      Standalone_Artist_6_instruction: |
        Loop this hexagon code 6 times to create
        the design. How many degrees will you need to turn each time? Hint: divide
        the number of degrees in a circle by the number of times you are looping.
      Standalone_Artist_7_instruction: |
        A function is another programming tool to
        help you avoid repeating yourself. This function draws a flower, so you can
        use it any time you want to draw a flower. Use this and the new jump block
        to draw these flowers. Hint: The flowers are 150 pixels apart
      Standalone_Artist_8_instruction: |
        Here's a function called "Draw a shape"
        that we've programmed to draw hexagons. Run the code to see what it does
        and then experiment with the function to see what happens. Can you make it
        draw a pattern of squares, triangles, or octagons?
      Standalone_Artist_9_instruction: |
        Now go ahead and make whatever picture you'd
        like! You've even got an empty function that you can make do whatever you
        want!
      Standalone_Artist_v2_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Test Play Lab_instruction: This is a test play lab level.
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor
        Reliably Sending a Message.\r\n\r\nConstraints:\r\n- Packets may contain\nonly
        6 characters\r\n- Packets may drop with small probability\r\n- Packets\nmay
        not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship
        moves. For setup, join a Room with your group, and add ships to\nyour paper
        board for each opponent. When playing, all communication must be\ndone through
        the tool, so no talking, but have fun!\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter
        with the others in your group. Important note: The router will only\nproperly
        route messages where the first 4 bits are the To: address and the\nsecond
        4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na
        router with the others in your group. The Internet Simulator now provides\na
        place for you to put the To and From addresses, so you don't have to type\nout
        the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U313 Two Buttons with Ids_instruction: |
        Now you try it! We've given you some
        starting code with two buttons and two event handlers on the screen, but we've
        just left the default Ids of "id".  You need to change the ids to connect
        the right event handler to the right button. (Interestingly, the incorrect
        program does work, but exhibits some bizarre behavior.  We'll discuss this
        more in the next lesson.  Make the buttons work correctly for now).
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\r\n(Click\nto
        see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround()
        and call it to make the turtle move as depicted. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3 by 3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Read the documentation for one of
        these commands. Then use them to create a triangle with sides 100 pixels long.
        (Click to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play!  Use what you learned
        from loops and random to make your own little scene.  Have fun.
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L08 - drawSquaresWithParams_instruction: |
        Change the code at top to make
        use of the drawSquare() command. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof
        syntax error.  App Lab did not understand which object it should be listening\nto
        for a \"click\" event so it showed an error message in the console to let\nyou
        know.  Another kind of error is a logical error - the program is valid,\nbut
        it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA
        (tricky) syntax error and logical error.  Find them, fix them, and make\nthe
        program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        This program has problem!  Can you figure
        it out?  Run the program and see if you can figure out from the error messages
        in the console what the issue is.  There is not much code, so you might be
        able to figure it out just by reading carefully.  Make a change that will
        make the program work as expected.
      U3L13 - Turtle Driver Project_instruction: |
        Challenge: Create a “turtle driver”
        with at least three buttons on the screen to move the turtle forward, and
        turn the turtle right and left. You can copy/paste code from a previous level
        if you like but it will help build your coding muscles if you create this
        small program from scratch.  If you have time, try adding additional buttons!  You
        can also have fun changing the parameters on the turtle functions, using colors,
        etc.
      U3L13 - Turtle move with button_instruction: "Drag a button out onto the screen\nand
        set its text to \"Go forth!\".  Add an event handler for the button, that\nmakes
        the turtle move forward.  Run the program to make sure it works. \n"
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L16 - challenge say hi app_instruction: "In this challenge we give you starter\ncode
        that lays all the elements out on the screen.  Here’s what you need to\ndo:\r\nAdd
        event handler to textInput with the event type ‘input’ that shows\nthe “Say
        hi” button when that event occurs.\r\nAdd event handler to button\nso that
        on click, it writes a hello message to the screen and hides the textInput\nand
        button."
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command!  Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: "We'll be building upon some simple\nstarting
        code throughout this lesson.  Your first task: use moveTo and randomNumber\nto
        get the turtle to move to a random location with each button click.  We've\ngiven
        you starting code for our common setup: a button that moves the turtle\nwhen
        clicked.  You should modify this code.  \n"
      U3L16 - text labels_instruction: "Introducing textLabels.  First try replacing\nyour
        button with a textLabel.  Will the text respond to events just like the\nbutton?
        \ Try connecting an event handler to it.  We've started you out with\ncode
        similar to the result of the last level, you can copy your code from\nthat
        level into here if you prefer. \n"
      U3L16 - textInput getText write_instruction: |
        Introducing textInput, getText
        and write.  First run the starter code several times.  Try to change what's
        written to the screen when the button is clicked. Then use getText to write
        to the screen what the user entered in the text box.
      U3L16 - use images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer.
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        This example shows how you
        might insert console.log statements in your code to verify for yourself how
        the values in the variables change during the running of the code.  This is
        an important debugging technique to use when each line in your program doesn't
        have a visual effect on the app that you can see to verify things are working
        right.  Run the code to see the output in the console.
      U3L19 - DEMO up down count practice app_instruction: |
        This is a demonstration
        of a simple App that uses variables, arithmetic and setText.  Play with it
        a little bit here to see what it does.  You can also come back to experiment
        if you want.  You are going to try to create this app yourself on the next
        screen.  Don't worry, we'll start you out with some of the code and leave
        the rest for you to complete.
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof
        code from the previous screen.  Try changing the value assigned to foo\nto
        see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto
        foo to see the string change. \r\n2. By only modifying the lines of code\nthat
        were given to you, try to get the output to say: “The value of foo is:\n9.
        \ And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error_instruction: "We've given you some code\nwith
        an error.  It doesn’t recognize the variable.  Can you figure out why?  Fix\nthe
        error and get the program to run.  Also note the error message since it\nmight
        come up at some point later in your life.\r\n\r\n"
      U3L19 - practice with setText_instruction: |
        We've started you out with the
        code shown on the previous screen.  First experiment with the app.  Identify
        where setText is being used.  CHALLENGE: modify the code to also use setText
        to change the text on the button itself when it's clicked.  GIF: U3L19 -
        setTextOfButton.gif
      U3L19 - Target Clicker App_instruction: "# A motivating example\r\n\r\nHere\nis
        an example of the kind of app we want to make.  Study this for the elements\ncontained
        in the app rather than what it is or does.  Things to investigate:\n\r\n\r\n1.
        what happens when you click on the Code.org logo? \r\n2. What happens\nwhen
        you click somewhere else? \r\n3. Try the reset button.   \r\n\r\nThe\nelements
        contained in this app appear to be simple, and they are in some ways.\nHowever,
        the computing principles involved - controlling and keeping track\nof things
        in memory while the program is running - get into some deeper issues\nof programming
        and computer science in general.  There are some devilish details\nand paths
        that can lead to misunderstanding if you're not careful.\r\n\r\nSo,\nkeep
        this app in mind as you go through the different levels in this lesson.  It\nmight
        seem like you need to learn a lot in order to get this simple thing\nworking.
        \ But it's worth taking the time to understand at a deeper level\nwhat is
        going on.  Because this one topic: controlling memory leads to many\npossible
        misunderstandings about coding, and how computers work.  We want\nto make
        sure you get it right from the outset.  \r\n\r\nSo take your time.  Work\nthrough
        the issues.  Read the explanations.  You'll come out on the other\nside a
        better programmer with much deeper knowledge and understanding of how\nthings
        work.  \r\n\r\nAre you ready?  Click 'finish' to move to the next\npage and
        start the lesson."
      U3L19 - test reassignment of two vars_instruction: |
        Why is this happening?
        The code given here is the same as the example from the previous page where
        we asked you to make a prediction about what will happen.  Run this code to
        find out if you were right.  If you weren't, that's okay.  You might experiment  a
        little if you want to, but bon't spend too much time here. We'll explain
        more on the next page.
      U3L19 - three basic ops of variables_instruction: "Do this:\r\nWe've given\nyou
        the three lines of code shown in the previous page.  Add three lines of\ncode
        just below the ones shown here to make your own variable, assign it a\nvalue
        and write it to the screen.  NOTE: change the variable name from the\ndefault
        x to something else.\r\n"
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe
        statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).
        \ Run\nthe program and you should see the output show up in the console area
        below\nthe workspace.  Then try adding a few more console.log statements.
        \ Display\nsome text.  Make another variable and display that.  \r\nThe app
        screen will\nbe blank -- that's the point.  With console.log you can test
        output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF:
        U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        This app is only SLIGHTLY
        different from the previous one, but much more dynamic.  See if you can figure
        out how and why the count is going up.  Once you've figured it out then you
        should be able to DO THIS: add a button to the app that when clicked makes
        the count go down, and updates the label.  When you're done the app should
        work as shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        We've given you
        the code from the previous page.  Right now, because the code only sets the
        values of variables, the app doesn't display anything. DO THIS: insert write
        or console.log statements into the code to figure out what the values of a,
        b, and c are after the code has executed.  You should have first made a prediction
        to see if your mental model of how the computer works is correct.  We'll
        ask for the answer on the next page.
      U3L19 - variable scope problem 2_instruction: |
        First run the program to see
        the problem.  You don't need to write code to solve any problem here.  But
        you do need to investigate the code and come up with an explanation for WHY
        what's happening is happening.  Why aren't 3 things being written to the
        screen?  Why does the variable foo seem to exist once but not the other times?  If
        you switch to code mode you'll see some warning messages next to two lines
        of code -- why do you get those messages?  Once you think you have a good
        answer, continue to the next page.
      U3L19 - variable scoping problem debugging_instruction: "Here is the code from\nprevious
        page that has a subtle problem with it.  FIRST: run the app and try\nit to
        see the problem. NOTE: NaN stands for \"Not a Number\".   DO THIS: figure\nout
        what's happening, where, and fix the problem.  We'll explain the issue\non
        the next page. \n"
      U3L19 - write var and string with same name_instruction: |
        Now look at this
        example. We’ve added another write statement.  Before you run the code, see
        if you can predict what the output will be.  Seriously, write it down. THEN
        run the code, mess with it if you like, and continue to the next page for
        an explanation.
      U3L2 Using Simple Commands_instruction: |
        Draw a square above and to the left
        of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Adjust the "if" block to make
        the bot respond "That's the color of the sky!" if the user inputs the color
        "blue".
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Nested Conditionals 1_instruction: |
        Replace all instances of `str.indexOf("word")`
        with a function `contains(sentence, word)` that returns true if the word is
        in the sentence and returns false otherwise.
      U3L24 Nested Conditionals 2_instruction: |
        Use a nested conditional to respond
        to the category "pizza" and the details "Hawaiian," "vegan," and "meat."
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto
        get the strings \"begin\" and \"nder\" from a sentence no matter where\nin
        the sentence they exist.\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Inside the findingNemo function, write a conditional
        statement that detects if a command contains all the phrases "2000" "animated"
        and "G-rated." The function should return true if the above conditions are
        met and return false otherwise
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Inside the isBest function, write a conditional
        statement that detects if a command contains at least one of the phrases "all
        time" "all-time" "overall" or "millennium." The function should return
        true if the above conditions are met and return false otherwise
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square ABOVE and to the RIGHT
        of the starting location. (Click to show full instructions)
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\",
        run the app and click the button. Run it multiple times with different\nnames!
        Watch the console and use the ‘View Data” button to see how the table\nis
        updated. As you play around make sure you can explain the purpose of each\nof
        the circled parts of the diagram.\r\n\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\r\n\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether
        all the pieces from a record.\r\n\r\n<<Name>> is <<Age>> years old\nand like
        <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin
        the array\r\n\r\n"
      U4L15 Read Data 4_instruction: "\r\nUse a random record from the list of records\nto
        display your sentence."
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
