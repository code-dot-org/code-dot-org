{
  "category_key": "org_code_neighborhood",
  "content": "",
  "examples": "[]",
  "external_documentation": "",
  "fields": "[{\"name\":\"xLocation\",\"type\":\"int\",\"description\":\"the x coordinate of the `Painter` object\"},{\"name\":\"yLocation\",\"type\":\"int\",\"description\":\"the y coordinate of the `Painter` object\"},{\"name\":\"direction\",\"type\":\"Direction\",\"description\":\"the direction the `Painter` object is facing (`\\\"North\\\"`, `\\\"South\\\"`, `\\\"East\\\"`, or `\\\"West\\\"`)\"},{\"name\":\"remainingPaint\",\"type\":\"int\",\"description\":\"the number of units of paint the `Painter` object has in their paint bucket\"}]",
  "key": "Painter",
  "name": "Painter",
  "syntax": "",
  "tips": "",
  "methods": [
    {
      "name": "Painter",
      "position": 0,
      "key": "painter",
      "overload_of": null,
      "content": "Creates a `Painter` object at `(0, 0)` facing `\"East\"` with `0` units of paint",
      "parameters": "[]",
      "examples": "[{\"code\":\"`Painter myPainter = new Painter();`\"}]",
      "syntax": "`public Painter()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "Painter",
      "position": 1,
      "key": "painter2",
      "overload_of": "painter",
      "content": "Creates a `Painter` at specific x and y coordinates facing a specified direction with a given number of units of paint.",
      "parameters": "[{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to place the `Painter` object\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to place the `Painter` object\"},{\"name\":\"direction\",\"type\":\"String\",\"required\":true,\"description\":\"the direction for the `Painter` object to face\"},{\"name\":\"paint\",\"type\":\"int\",\"required\":true,\"description\":\"the number of units of paint the `Painter` object starts with\"}]",
      "examples": "[{\"code\":\"`Painter myPainter = new Painter(2, 4, \\\"South\\\", 10);`\"}]",
      "syntax": "`public Painter(int x, int y, String direction, int paint)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "move",
      "position": 2,
      "key": "move",
      "overload_of": null,
      "content": "Moves the `Painter` object one space forward in the direction it is facing.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`myPainter.move();`\"}]",
      "syntax": "`public void move()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "turnLeft",
      "position": 3,
      "key": "turnleft",
      "overload_of": null,
      "content": "Turns a `Painter` object to the left.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`myPainter.turnLeft();`\"}]",
      "syntax": "`public void turnLeft()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "paint",
      "position": 4,
      "key": "paint",
      "overload_of": null,
      "content": "Paints the space the `Painter` object is standing on.",
      "parameters": "[{\"name\":\"color\",\"type\":\"String\",\"required\":true,\"description\":\"the color of the paint\"}]",
      "examples": "[{\"code\":\"`myPainter.paint(\\\"red\\\");`\"}]",
      "syntax": "`public void paint(String color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "takePaint",
      "position": 5,
      "key": "takepaint",
      "overload_of": null,
      "content": "Takes paint from the paint bucket the `Painter` object is currently standing on and adds a single unit of paint to their paint bucket. The number of units of paint in the paint bucket decreases by `1`. If the `Painter` object is not on a paint bucket, nothing happens.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`myPainter.takePaint();`\"}]",
      "syntax": "`public void takePaint()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "scrapePaint",
      "position": 6,
      "key": "scrapepaint",
      "overload_of": null,
      "content": "Removes the paint from the space the `Painter` object is standing on.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`myPainter.scrapePaint();`\"}]",
      "syntax": "`public void scrapePaint()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "canMove",
      "position": 7,
      "key": "canmove",
      "overload_of": null,
      "content": "Returns `true` if there is no barrier one space ahead in the direction the `Painter` object is currently facing.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`boolean status = myPainter.canMove();`\"}]",
      "syntax": "`public boolean canMove()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "canMove",
      "position": 8,
      "key": "canmove2",
      "overload_of": "canmove",
      "content": "Returns `true` if there is no barrier one space ahead in the specified direction.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`boolean status = myPainter.canMove(\\\"south\\\");`\"}]",
      "syntax": "`public boolean canMove(String direction)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "isOnPaint",
      "position": 9,
      "key": "isonpaint",
      "overload_of": null,
      "content": "Returns `true` if there is paint on the space the `Painter` object is currently standing on.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`boolean status = myPainter.isOnPaint();`\"}]",
      "syntax": "`public boolean isOnPaint()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "isOnBucket",
      "position": 10,
      "key": "isonbucket",
      "overload_of": null,
      "content": "Returns `true` if there is a paint bucket on the space the `Painter` object is currently standing on.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`boolean status = myPainter.isOnPaint();`\"}]",
      "syntax": "`public boolean isOnPaint()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasPaint",
      "position": 11,
      "key": "haspaint",
      "overload_of": null,
      "content": "Returns `true` if the `Painter` object has paint in their paint bucket.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`boolean status = myPainter.hasPaint();`\"}]",
      "syntax": "`public boolean hasPaint()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "isFacingNorth",
      "position": 12,
      "key": "isfacingnorth",
      "overload_of": null,
      "content": "Returns `true` if the `Painter` object is currently facing `\"North\"`.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`boolean status = myPainter.isFacingNorth();`\"}]",
      "syntax": "`public boolean facingNorth()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "isFacingSouth",
      "position": 13,
      "key": "isfacingsouth",
      "overload_of": null,
      "content": "Returns `true` if the `Painter` object is currently facing `\"South\"`.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`boolean status = myPainter.isFacingSouth();`\"}]",
      "syntax": "`public boolean isFacingSouth()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "isFacingEast",
      "position": 14,
      "key": "isfacingeast",
      "overload_of": null,
      "content": "Returns `true` if the `Painter` object is currently facing `\"East\"`.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`boolean status = myPainter.isFacingEast();`\"}]",
      "syntax": "`public boolean isFacingEast()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "isFacingWest",
      "position": 15,
      "key": "isfacingwest",
      "overload_of": null,
      "content": "Returns `true` if the `Painter` object is currently facing `\"West\"`.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`boolean status = myPainter.isFacingWest();`\"}]",
      "syntax": "`public boolean isFacingWest()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "getMyPaint",
      "position": 16,
      "key": "getmypaint",
      "overload_of": null,
      "content": "Returns the number of units of paint that the `Painter` object has in their paint bucket.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`int numPaint = myPainter.getMyPaint();`\"}]",
      "syntax": "`public int getMyPaint()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "getColor",
      "position": 17,
      "key": "getcolor",
      "overload_of": null,
      "content": "Returns the color of the space the `Painter` object is currently standing on.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`String currentColor = myPainter.getColor();`\"}]",
      "syntax": "`public String getColor()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "getX",
      "position": 18,
      "key": "getx",
      "overload_of": null,
      "content": "Returns the x coordinate for the current position of the `Painter` object.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`int xLocation = myPainter.getX();`\"}]",
      "syntax": "`public int getX()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "getY",
      "position": 19,
      "key": "gety",
      "overload_of": null,
      "content": "Returns the y coordinate for the current position of the `Painter` object.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`int yLocation = myPainter.getY();`\"}]",
      "syntax": "`public int getY()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "getDirection",
      "position": 20,
      "key": "getdirection",
      "overload_of": null,
      "content": "Returns the direction that the `Painter` object is currently facing.",
      "parameters": "[]",
      "examples": "[{\"code\":\"`String currentDirection = myPainter.getDirection();`\"}]",
      "syntax": "`public String getDirection()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "setPaint",
      "position": 21,
      "key": "setpaint",
      "overload_of": null,
      "content": "Sets the number of units of paint in the `Painter` object's paint bucket. If the value passed is a negative number, nothing happens.",
      "parameters": "[{\"name\":\"paint\",\"type\":\"int\",\"required\":true,\"description\":\"the number of units of paint that should be in the `Painter` object's paint bucket\"}]",
      "examples": "[{\"code\":\"`myPainter.setPaint(10);`\"}]",
      "syntax": "`public void setPaint(int paint)`",
      "external_link": null,
      "return_value": null
    }
  ]
}