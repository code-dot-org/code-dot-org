{
  "category_key": "java_lang",
  "content": "The `String` class represents a sequence of characters. There exist a variety of methods within the `String` class for identifying specific characters within the string, for comparing strings, and searching for substrings. ",
  "examples": "[]",
  "external_documentation": "",
  "fields": "[]",
  "key": "String",
  "name": "String",
  "syntax": "",
  "tips": "",
  "methods": [
    {
      "key": "string",
      "position": 0,
      "name": "String",
      "content": "Creates a `String` object that represents the same sequence of characters as the argument",
      "parameters": "[{\"name\":\"original\",\"type\":\"String\",\"required\":true,\"description\":\"a `String` that the `String` object will copy\"}]",
      "examples": "[{\"name\":\"\",\"description\":\"```\\nString tempString = new String(\\\"hello\\\");\\n``` \"}]",
      "syntax": "`String(String original)`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    },
    {
      "key": "compareto",
      "position": 1,
      "name": "compareTo",
      "content": "The `compareTo()` method compares the `String` values and returns an `int`. The returned `int` is the number difference between two `String`s. Both `String`s are compared by the Unicode value of each character in the `String`. \n\n- If `stringOne` is greater than `stringTwo`, the method will return a positive number. \"Greater than\" means lexicographically greater than, so when `stringOne` comes after `stringTwo`.\n\n- If `stringOne` is less than `stringTwo`, the method will return a negative number. \"Less than\" means lexicographically less than, so when `stringOne` comes before `stringTwo`.\n\n- If `stringOne` equals `stringTwo`, the method will return `0`.\n\nThe `compareTo()` method is case sensitive, meaning that capitalization does affect the calculation.",
      "parameters": "[{\"name\":\"stringTwo\",\"type\":\"String\",\"required\":true,\"description\":\"the `String` to be compared to the calling `String` object\\n\"}]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nString name1 = \\\"James\\\";\\nString name2 = \\\"Bill\\\";\\nString name3 = \\\"James\\\";\\n\\nSystem.out.println(name1.compareTo(name2));   // prints 8 because James \\u003e Bill lexicographically \\nSystem.out.println(name1.compareTo(name3));   // prints 0 because both are the same\\n```\"}]",
      "syntax": "`public int compareTo(String stringTwo)`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    },
    {
      "key": "equals",
      "position": 2,
      "name": "equals",
      "content": "The `equals()` method will compare the string that it is called on as well as the string passed as a parameter. The expression returns `true` if the two `String` contains the same sequence of characters, `false` otherwise.",
      "parameters": "[{\"name\":\"stringTwo\",\"type\":\"String\",\"required\":true,\"description\":\"the second `String` being compared to the calling `String`\"}]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nString stringOne = \\\"Apple\\\";\\nString stringTwo = \\\"Pear\\\";\\nString stringThree = \\\"Apple\\\";\\n\\nSystem.out.println(stringOne.equals(stringTwo)); \\n// prints false\\n\\nSystem.out.println(stringOne.equals(stringThree)); \\n// prints true\\n```\"}]",
      "syntax": "`public boolean equals(String stringTwo)`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    },
    {
      "key": "indexof",
      "position": 3,
      "name": "indexOf",
      "content": "The `indexOf()` method returns the index for the first occurrence of the specified character(s) in a `String` or `-1` if the specified character(s) is not found in the `String`.",
      "parameters": "[{\"name\":\"str\",\"type\":\"String\",\"required\":true,\"description\":\"the `String` to locate within the initial `String`\"}]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nString text = \\\"Hello world, welcome to the universe.\\\";\\nint result = text.indexOf(\\\"welcome\\\");\\n\\nSystem.out.println(result);\\n```\\n**Output:**\\n\\n13\"}]",
      "syntax": "`public int indexOf(String str)`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    },
    {
      "key": "length",
      "position": 4,
      "name": "length",
      "content": "The `length()` method returns the number of characters in the specified `String`.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"description\":\"```\\nString test = new String(\\\"Welcome\\\");\\nSystem.out.println(test.length());\\n```\\n\\n**Output:**\\n\\n7\"}]",
      "syntax": "`public int length()`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    },
    {
      "key": "substring",
      "position": 5,
      "name": "substring",
      "content": "The `substring()` method returns a `String` containing the characters from the specified starting index to the end of the `String`.",
      "parameters": "[{\"name\":\"start\",\"type\":\"int\",\"required\":true,\"description\":\"the index of the first character to start at\"}]",
      "examples": "[{\"name\":\"Using substring()\",\"description\":\"\",\"code\":\"```\\nString test = \\\"welcome\\\";\\nSystem.out.println(test.substring(2));\\n```\\n**Output:** \\n\\nlcome\"}]",
      "syntax": "`public String substring(int start)`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    },
    {
      "key": "substring2",
      "position": 6,
      "name": "substring",
      "content": "The `substring()` method returns a `String` containing the characters from the specified starting index up to (but not including) the specified ending index.",
      "parameters": "[{\"name\":\"start\",\"type\":\"int\",\"required\":true,\"description\":\"the index of the first character to start at\"},{\"name\":\"end\",\"type\":\"int\",\"required\":true,\"description\":\"the index of the last character to stop at\"}]",
      "examples": "[{\"code\":\"```\\nString test = \\\"welcome\\\";\\nSystem.out.println(test.substring(2,4));\\n```\\n**Output:**\\n\\nlc\"}]",
      "syntax": "`public String substring(int start, int end)`",
      "external_link": null,
      "overload_of": "substring",
      "return_value": null
    },
    {
      "key": "tostring",
      "position": 7,
      "name": "toString",
      "content": "The `toString()` method returns the `String` itself.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"description\":\"\",\"code\":\"```\\nString test = new String(\\\"Welcome to our Home!\\\");\\nSystem.out.println(test.toString());\\n```\\n**Output:**\\n\\nWelcome to our Home!\"}]",
      "syntax": "`public String toString()`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    },
    {
      "key": "tolowercase",
      "position": 8,
      "name": "toLowerCase",
      "content": "The `toLowerCase()` method returns the `String` converted to lowercase letters.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nString test = \\\"Welcome, Anna!\\\";\\nSystem.out.println(test.toLowerCase());\\n```\\n**Output:**\\n\\nwelcome, anna!\"}]",
      "syntax": "`public String toLowerCase()`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    },
    {
      "key": "touppercase",
      "position": 9,
      "name": "toUpperCase",
      "content": "The `toUpperCase()` method returns the `String` converted to uppercase letters.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nString test = new String(\\\"Welcome, Anna!\\\");\\nSystem.out.println(test.toUpperCase());\\n```\\n\\n**Output:**\\n\\nWELCOME, ANNA!\"}]",
      "syntax": "`public String toUpperCase()`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    },
    {
      "key": "comparetoignorecase",
      "position": 10,
      "name": "compareToIgnoreCase",
      "content": "The `compareToIgnoreCase()` method compares the `String` values, **ignoring case differences**, and returns an `int`.\n\n- If `stringOne` is greater than `stringTwo`, the method will return a positive number.\n- If `stringOne` is less than `stringTwo`, the method will return a negative number.\n- If `stringOne` equals `stringTwo`, the method will return `0`.\n\nThe `compareToIgnoreCase()` method is **not** case sensitive.",
      "parameters": "[{\"name\":\"stringTwo\",\"type\":\"String\",\"description\":\"the `String` to be compared to the calling `String` object\\n\"}]",
      "examples": "[{\"code\":\"```\\nString name1 = \\\"James\\\";\\nString name2 = \\\"Bill\\\";\\nString name3 = \\\"jAMES\\\";\\n\\nSystem.out.println(name1.compareToIgnoreCase(name2));   // prints 8 because James \\u003e Bill lexicographically \\nSystem.out.println(name1.compareToIgnoreCase(name3));   // prints 0 because both are the same ignoring case\\n```\"}]",
      "syntax": "`public int compareToIgnoreCase(String str)`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    },
    {
      "key": "equalsignorecase",
      "position": 11,
      "name": "equalsIgnoreCase",
      "content": "The `equalsIgnoreCase()` method will compare the string that it is called on as well as the string passed as a parameter. The expression returns `true` if the two `String` contains the same sequence of characters **ignoring case**, `false` otherwise.",
      "parameters": "[{\"name\":\"stringTwo\",\"type\":\"String\",\"required\":true,\"description\":\"the second `String` being compared to the calling `String`\"}]",
      "examples": "[{\"description\":\"```\\nString stringOne = \\\"Apple\\\";\\nString stringTwo = \\\"Pear\\\";\\nString stringThree = \\\"aPPLE\\\";\\n    \\nSystem.out.println(stringOne.equalsIgnoreCase(stringTwo)); \\n// prints false\\n    \\nSystem.out.println(stringOne.equalsIgnoreCase(stringThree)); \\n// prints true\\n```\"}]",
      "syntax": "`public boolean equalsIgnoreCase(String stringTwo)`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    },
    {
      "key": "trim",
      "position": 12,
      "name": "trim",
      "content": "Returns a string with whitespace at the start and the end removed.",
      "parameters": "[]",
      "examples": "[{\"description\":\"``` \\nString test = \\\"  welcome home   \\\";\\nSystem.out.println(test.trim());\\n```\\n**Output:**\\n\\nwelcome home\"}]",
      "syntax": "`public String trim()`",
      "external_link": null,
      "overload_of": null,
      "return_value": null
    }
  ]
}