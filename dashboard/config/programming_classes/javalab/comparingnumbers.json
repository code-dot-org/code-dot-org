{
  "category_key": "general",
  "content": "Operators are used to perform operations on variables and values. There are several types of operators in Java:\n\n* **Arithmetic operators** ( `+`, `-`, `*`, `/`, `%`, `++`, and `--` ) to perform common mathematical operations.\n\n* **Assignment operators** ( `=`, `+`, `-=`, `*=`, `/=`, and `%=` ) to assign values to variables.\n\n* **Relational operators** ( `==`, `!=`, `>`, `<`, `>=`, and `<=` ) to compare two values.\n\n* **Logical operators** ( `&&`, `||`, and `!` ) to determine the logic between two variables or values.\n\n## Relational Operators \n\nThe operators below can be used to compare two values. The expression will evaluate to a `boolean` (`true` or `false`). \n\n|  &nbsp;&nbsp; Operator &nbsp;&nbsp;  |  &nbsp;&nbsp; Name &nbsp;&nbsp;  |  &nbsp;&nbsp; Example &nbsp;&nbsp; |\n|:----:|:----:|:----:|\n|  &nbsp;  |  &nbsp;  |  &nbsp;  |\n|  `==`  |  equal to  |  `x == y`  |\n|  &nbsp;  |  &nbsp;  |  &nbsp;  |\n|  `!=`  |  not equal to  |  `x != y`  |\n|  &nbsp;  |  &nbsp;  |  &nbsp;  |\n|  `>`  |  greater than  |  `x > y`  |\n|  &nbsp;  |  &nbsp;  |  &nbsp;  |\n|  `<`  |  less than  |  `x < y`  |\n|  &nbsp;  |  &nbsp;  |  &nbsp;  |\n|  `>=`  |  greater than or equal to &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  |  `x >= y`  |\n|  &nbsp;  |  &nbsp;  |  &nbsp;  |\n|  `<=`  |  less than or equal to  |  `x <= y`  |\n\n## Logical Operators\n\nThe operators below can be used to determine the logic between variables or values. The expression will evaluate to a `boolean` (`true` or `false`).\n\n|  &nbsp;&nbsp; Operator &nbsp;&nbsp;  |  &nbsp;&nbsp; Name &nbsp;&nbsp;  |  &nbsp; Description &nbsp;&nbsp; |  &nbsp;&nbsp; Example &nbsp;&nbsp;  |\n|:----:|:----:|:----|:----:|\n|  &nbsp;  |  &nbsp;  |  &nbsp;  |  &nbsp;  |\n|  `&&`  |  AND  |  &nbsp; Returns `true` if both statements are `true` &nbsp;&nbsp;&nbsp;  |  `x < 5 && x < 10`  |\n|  &nbsp;  |  &nbsp;  |  &nbsp;  |  &nbsp;  |\n|  `||`  |  OR  |  &nbsp; Returns `true` if one of the statements is `true` &nbsp;&nbsp;&nbsp;  |  `x < 5 || x < 4`  |\n|  &nbsp;  |  &nbsp;  |  &nbsp;  |  &nbsp;  |\n|  `!`  |  NOT  |  &nbsp; Reverses the result; returns `false` if the result is `true` &nbsp;&nbsp;&nbsp;  |  `!(x < 5 && x < 10)`  |",
  "examples": "[{\"name\":\"Using Relational Operators\",\"code\":\"``` \\nint a = 4;\\nint b = 7;\\n\\nif (a == b) {\\n     System.out.println(\\\"they are equal.\\\");\\n}\\n// This expression will evaluate to false, so the print statement will not be executed.\\n\\nif (a \\u003c b) {\\n     System.out.println(\\\"a is less than b\\\");\\n}\\n// This expression will evaluate to true because 4 \\u003c 7, so the print statement will be executed.\\n```\"},{\"name\":\"Using Logical Operators\",\"description\":\"```\\nint x = 5;\\n\\nif (x \\u003e 3 \\u0026\\u0026 x \\u003c 10) {\\n   System.out.println(\\\"x is between 3 and 10\\\");\\n}\\n// This expression will evaluate to true because 5 is greater than 3 AND 5 is less than 10.\\n\\nif (x \\u003e 3 || x \\u003c 4) {\\n   System.out.println(\\\"x is either greater than 3 or less than 4\\\");\\n}\\n// This expression will evaluate to true because one of the conditions\\n// is true - 5 is greater than 3, but 5 is not less than 4.\\n\\nif (!(x \\u003e 3 \\u0026\\u0026 x \\u003c 10)) {\\n   System.out.println(\\\"x is not between 3 and 10\\\");\\n}\\n// This expression will evaluate to false because ! (NOT) is used to reverse the result.\\n```\"}]",
  "external_documentation": "",
  "fields": "[]",
  "key": "ComparingNumbers",
  "name": "Comparing Numbers",
  "syntax": "",
  "tips": "",
  "methods": [

  ]
}