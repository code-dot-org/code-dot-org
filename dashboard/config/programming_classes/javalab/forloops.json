{
  "category_key": "control_structures",
  "content": "A `for` loop allows you to repeat blocks of code for a specified duration. You can have a block of code repeat a specific number of times or repeat until a specified condition is met. The `for` loop syntax has **three key components:**\n\n- `initialExpression:` This part of the loop syntax initializes the variable that will be used to determine how many times the loop is executed. The `initialExpression` part is only executed once.\n\n- `condition:` This is the condition for determining whether or not to execute the code in the body of the loop (similar to an `if` statement condition). If `condition` evaluates to `true`, the body of the `for` loop executes.\n\n- `updateExpression:` This part of the expression updates the variable initialized in the `initialExpression`. The `condition` is then evaluated again to see if the condition is still `true` with the updated value of the variable.\n\n![](https://images.code.org/5093d32dba305b86d2c5bb460700f628-Screen Shot 2022-05-16 at 2.02.18 PM.png)",
  "examples": "[{\"name\":\"Performing a Set Number of Actions\",\"code\":\"```\\nfor(int count = 0; count \\u003c 5; count++) {\\n   System.out.println(count);\\n}\\n```\\n\\n**Output:**\\n\\n0\\n\\n1\\n\\n2\\n\\n3\\n\\n4\"},{\"name\":\"Traversing an Array\",\"description\":\"A `for` loop can be used to traverse arrays and `ArrayList`s. \",\"code\":\"```\\nint[] numbers = { 1, 2, 3, 4 };\\n\\nfor(int index =0; index \\u003c numbers.length(); index++) {\\n   System.out.println(numbers[index]);\\n}\\n```\\n\\n**Output:**\\n\\n1\\n\\n2\\n\\n3\\n\\n4\"}]",
  "external_documentation": "",
  "fields": "[]",
  "key": "ForLoops",
  "name": "for Loops",
  "syntax": "```\nfor (initialExpression; condition; updateExpression) {\n   // body of code\n}\n```",
  "tips": "",
  "methods": [

  ]
}