{
  "category_key": "org_code_theater",
  "content": "",
  "examples": "[{\"code\":\"```\\nScene myScene = new Scene();\\n\\nmyScene.drawText(\\\"Hello World!\\\", 200, 200);\\n\\n// Performs the scene and shows it to the screen.\\nTheater.playScenes(myScene);\\n```\"}]",
  "external_documentation": "",
  "fields": "[{\"name\":\"DEFAULT_FONT = Font.SANS\",\"type\":\"static final Font\",\"description\":\"the default `Font` for text\"},{\"name\":\"DEFAULT_FONT_STYLE = FontStyle.NORMAL\",\"type\":\"static final FontStyle\",\"description\":\"the default `FontStyle` for text\"},{\"name\":\"DEFAULT_TEXT_HEIGHT = 20\",\"type\":\"static final int\",\"description\":\"the default size of text\"},{\"name\":\"DEFAULT_COLOR = Color.BLACK\",\"type\":\"static final Color\",\"description\":\"the default color to use for the fill color, stroke color, and text color\"},{\"name\":\"DEFAULT_STROKE_WIDTH = 1.0\",\"type\":\"static final double\",\"description\":\"the default stroke width for shapes and lines\"},{\"name\":\"DEFAULT_INSTRUMENT = Instrument.PIANO\",\"type\":\"static final Instrument\",\"description\":\"the default `Instrument` used to play notes\"},{\"name\":\"font\",\"type\":\"Font\",\"description\":\"the `Font` to use to draw text\\n\\nSee the documentation for the [Font class](https://levelbuilder-studio.code.org/docs/ide/javalab/classes/Font) for options that can be used for the font.\"},{\"name\":\"fontStyle\",\"type\":\"FontStyle\",\"description\":\"the `FontStyle` to use for text\\n\\nSee the documentation for the [FontStyle class](https://levelbuilder-studio.code.org/docs/ide/javalab/classes/FontStyle) for options that can be used for the font style of the text.\"},{\"name\":\"textHeight\",\"type\":\"int\",\"description\":\"the size of the text\"},{\"name\":\"textColor\",\"type\":\"Color\",\"description\":\"the color the text is drawn with\\n\\nSee the documentation for the [Color class](https://levelbuilder-studio.code.org/docs/ide/javalab/classes/Color) for color options.\"},{\"name\":\"strokeColor\",\"type\":\"Color\",\"description\":\"the color strokes are drawn with\\n\\nSee the documentation for the [Color class](https://levelbuilder-studio.code.org/docs/ide/javalab/classes/Color) for color options.\"},{\"name\":\"fillColor\",\"type\":\"Color\",\"description\":\"the color used to fill drawings\\n\\nSee the documentation for the [Color class](https://levelbuilder-studio.code.org/docs/ide/javalab/classes/Color) for color options.\"},{\"name\":\"strokeWidth\",\"type\":\"double\",\"description\":\"the size of the stroke on drawings and lines that are drawn\"}]",
  "key": "Scene",
  "name": "Scene",
  "syntax": "",
  "tips": "",
  "methods": [
    {
      "name": "Scene",
      "position": 0,
      "key": "scene",
      "overload_of": null,
      "content": "Creates a new `Scene` object to be played in The Theater. A `Scene` is a set of steps of animation, such as drawing an image, text or a shape. A `Scene` can also include sound, like playing a sound file or musical notes.",
      "parameters": "[]",
      "examples": "[]",
      "syntax": "`public Scene()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "getWidth",
      "position": 1,
      "key": "getwidth",
      "overload_of": null,
      "content": "Returns the width of the canvas in pixels.\n",
      "parameters": "[]",
      "examples": "[]",
      "syntax": "`public final int getWidth()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "getHeight",
      "position": 2,
      "key": "getheight",
      "overload_of": null,
      "content": "Returns the height of the canvas in pixels.\n",
      "parameters": "[]",
      "examples": "[]",
      "syntax": "`public final int getHeight()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "clear",
      "position": 3,
      "key": "clear",
      "overload_of": null,
      "content": "Clears the canvas and sets the background color to the specified color name. If the name provided does not match a known color or hex value, this method will set the background to black.",
      "parameters": "[{\"name\":\"color\",\"type\":\"String\",\"required\":true,\"description\":\"the name of the color to use as the color of the canvas\"}]",
      "examples": "[]",
      "syntax": "`public final void clear(String color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "clear",
      "position": 4,
      "key": "void-clear-color-color",
      "overload_of": "clear",
      "content": "Clears the canvas and sets the background color to the specified `Color`.",
      "parameters": "[{\"name\":\"color\",\"type\":\"Color\",\"required\":true,\"description\":\"the color to use as the background color of the canvas\"}]",
      "examples": "[]",
      "syntax": "`public final void clear(Color color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "playSound",
      "position": 5,
      "key": "playsound",
      "overload_of": null,
      "content": "Plays the sound referenced by the specified filename.",
      "parameters": "[{\"name\":\"filename\",\"type\":\"String\",\"required\":true,\"description\":\"the filename of the sound to play\"}]",
      "examples": "[]",
      "syntax": "`public final void playSound(String filename)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "playSound",
      "position": 6,
      "key": "playsound2",
      "overload_of": "playsound",
      "content": "Plays an array of sound samples provided.",
      "parameters": "[{\"name\":\"sound\",\"type\":\"double[]\",\"required\":true,\"description\":\"the array of sound samples to play\"}]",
      "examples": "[]",
      "syntax": "`public final void playSound(double[] sound)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "playNote",
      "position": 7,
      "key": "playnote",
      "overload_of": null,
      "content": "Plays a note with the default `Instrument` (`Instrument.PIANO`).",
      "parameters": "[{\"name\":\"note\",\"type\":\"int\",\"required\":true,\"description\":\"the note to play\\n\\nThe note `60` represents middle C on a piano.\"},{\"name\":\"seconds\",\"type\":\"double\",\"required\":true,\"description\":\"the length of the note\"}]",
      "examples": "[]",
      "syntax": "`public final void playNote(int note, double seconds)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "playNote",
      "position": 8,
      "key": "playnote2",
      "overload_of": "playnote",
      "content": "Plays a note with the specified `Instrument`.\n\nSee the documentation for the [Instrument class](https://levelbuilder-studio.code.org/docs/ide/javalab/classes/Instrument) to see the options available.",
      "parameters": "[{\"name\":\"instrument \",\"type\":\"Instrument\",\"required\":true,\"description\":\"the `Instrument` to use to play the note\"},{\"name\":\"note\",\"type\":\"int\",\"required\":true,\"description\":\"the note to play\\n\\nThe note `60` represents middle C on a piano.\"},{\"name\":\"seconds\",\"type\":\"double\",\"required\":true,\"description\":\"the length of the note\"}]",
      "examples": "[]",
      "syntax": "`public final void playNote(Instrument instrument, int note, double seconds)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "playNoteAndPause",
      "position": 9,
      "key": "playnoteandpause",
      "overload_of": null,
      "content": "Plays a note with the default `Instrument` (`Instrument.PIANO`) and adds a pause in the `Scene` for the duration of the note, so that subsequent play commands begin after the note has finished playing.",
      "parameters": "[{\"name\":\"note\",\"type\":\"int\",\"required\":true,\"description\":\"the note to play\\n\\nThe note `60` represents middle C on a piano.\"},{\"name\":\"seconds\",\"type\":\"double\",\"required\":true,\"description\":\"the length of the note\"}]",
      "examples": "[]",
      "syntax": "`public final void playNoteAndPause(int note, double seconds)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "playNoteAndPause",
      "position": 10,
      "key": "playnoteandpause2",
      "overload_of": "playnoteandpause",
      "content": "Plays a note with the specified `Instrument` and adds a pause in the `Scene` for the duration of the note, so that subsequent play commands begin after the note has finished playing.\n",
      "parameters": "[{\"name\":\"instrument\",\"type\":\"Instrument\",\"required\":true,\"description\":\"the `Instrument` to use to play the note\"},{\"name\":\"note \",\"type\":\"int\",\"required\":true,\"description\":\"the note to play\\n\\nThe note `60` represents middle C on a piano.\"},{\"name\":\"seconds\",\"type\":\"double\",\"required\":true,\"description\":\"the length of the note\"}]",
      "examples": "[]",
      "syntax": "`public final void playNoteAndPause(Instrument instrument, int note, double seconds)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "pause",
      "position": 11,
      "key": "pause",
      "overload_of": null,
      "content": "Waits the provided number of seconds before performing the next draw or play command.",
      "parameters": "[{\"name\":\"seconds\",\"type\":\"double\",\"required\":true,\"description\":\"the number of seconds to wait\\n\\nThis can be a fraction of a second, but the smallest value can be `0.1` seconds.\"}]",
      "examples": "[]",
      "syntax": "`public final void pause(double seconds)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawImage",
      "position": 12,
      "key": "drawimage",
      "overload_of": null,
      "content": "Draws a specified image at the given x and y coordinate. The specified size sets the width of the image in pixels. The height will stretch to make sure the image does not appear distorted.",
      "parameters": "[{\"name\":\"filename\",\"type\":\"String\",\"required\":true,\"description\":\"the filename of the image to draw\"},{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to start drawing the image from the left side of the image\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to start drawing the image from the top of the image\"},{\"name\":\"size\",\"type\":\"int\",\"required\":true,\"description\":\"the width of the image in pixels\"}]",
      "examples": "[]",
      "syntax": "`public final void drawImage(String filename, int x, int y, int size)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawImage",
      "position": 13,
      "key": "drawimage2",
      "overload_of": "drawimage",
      "content": "Draws a specified image at the given x and y coordinate. The specified size sets the width of the image in pixels. The height will stretch to make sure the image does not appear distorted. The specified rotation sets how much to rotate the image.",
      "parameters": "[{\"name\":\"filename\",\"type\":\"String\",\"required\":true,\"description\":\"the filename of the image to draw\"},{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to start drawing the image from the left side of the image\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to start drawing the image from the top of the image\"},{\"name\":\"size\",\"type\":\"int\",\"required\":true,\"description\":\"the width of the image in pixels\"},{\"name\":\"rotation\",\"type\":\"double\",\"required\":true,\"description\":\"the amount to rotate the image in degrees\"}]",
      "examples": "[]",
      "syntax": "`public final void drawImage(String filename, int x, int y, int size, double rotation)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawImage",
      "position": 14,
      "key": "drawimage3",
      "overload_of": "drawimage",
      "content": "Draws a specified image at the given x and y coordinate with a given width and height. The specified rotation sets how much to rotate the image.",
      "parameters": "[{\"name\":\"filename\",\"type\":\"String\",\"required\":true,\"description\":\"the filename of the image to draw\"},{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to start drawing the image from the left side of the image\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to start drawing the image from the top of the image\"},{\"name\":\"width\",\"type\":\"int\",\"required\":true,\"description\":\"the width to set the image\"},{\"name\":\"height\",\"type\":\"int\",\"required\":true,\"description\":\"the height to set the image\"},{\"name\":\"rotation\",\"type\":\"double\",\"required\":true,\"description\":\"the amount to rotate the image in degrees\"}]",
      "examples": "[]",
      "syntax": "`public final void drawImage(String filename, int x, int y, int width, int height, double rotation)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawImage",
      "position": 15,
      "key": "drawimage4",
      "overload_of": "drawimage",
      "content": "Draws a specified `Image` object at the given x and y coordinate. The specified size sets the width of the image in pixels. The height will stretch to make sure the image does not appear distorted.",
      "parameters": "[{\"name\":\"image\",\"type\":\"Image\",\"required\":true,\"description\":\"the `Image` object to draw\"},{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to start drawing the image from the left side of the image\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to start drawing the image from the top of the image\"},{\"name\":\"size\",\"type\":\"int\",\"required\":true,\"description\":\"the width of the image in pixels\"}]",
      "examples": "[]",
      "syntax": "`public final void drawImage(Image image, int x, int y, int size)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawImage",
      "position": 16,
      "key": "drawimage5",
      "overload_of": "drawimage",
      "content": "Draws a specified `Image` object at the given x and y coordinate. The specified size sets the width of the image in pixels. The height will stretch to make sure the image does not appear distorted. The specified rotation sets how much to rotate the image.",
      "parameters": "[{\"name\":\"image\",\"type\":\"Image\",\"required\":true,\"description\":\"the `Image` object to draw\"},{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to start drawing the image from the left side of the image\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to start drawing the image from the top of the image\"},{\"name\":\"size\",\"type\":\"int\",\"required\":true,\"description\":\"the width of the image in pixels\"},{\"name\":\"rotation\",\"type\":\"double\",\"required\":true,\"description\":\"the amount to rotate the image in degrees\"}]",
      "examples": "[]",
      "syntax": "`public final void drawImage(Image image, int x, int y, int size, double rotation)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawImage",
      "position": 17,
      "key": "drawimage6",
      "overload_of": "drawimage",
      "content": "Draws a specified `Image` object at the given x and y coordinate with a given width and height. The specified rotation sets how much to rotate the image.",
      "parameters": "[{\"name\":\"image\",\"type\":\"Image\",\"required\":true,\"description\":\"the `Image` object to draw\"},{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to start drawing the image from the left side of the image\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to start drawing the image from the top of the image\"},{\"name\":\"width\",\"type\":\"int\",\"required\":true,\"description\":\"the width to set the image\"},{\"name\":\"height\",\"type\":\"int\",\"required\":true,\"description\":\"the height to set the image\"},{\"name\":\"rotation\",\"type\":\"double\",\"required\":true,\"description\":\"the amount to rotate the image in degrees\"}]",
      "examples": "[]",
      "syntax": "`public final void drawImage(Image image, int x, int y, int width, int height, double rotation)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "setTextStyle",
      "position": 18,
      "key": "settextstyle",
      "overload_of": null,
      "content": "Sets the `Font` and `FontStyle` to draw the text.\n\nSee the documentation for the [Font class](https://studio.code.org/docs/ide/javalab/classes/Font) and the [FontStyle class](https://studio.code.org/docs/ide/javalab/classes/FontStyle) for options to set the `Font` and `FontStyle`.",
      "parameters": "[{\"name\":\"font\",\"type\":\"Font\",\"required\":true,\"description\":\"the font to draw with\"},{\"name\":\"style\",\"type\":\"FontStyle\",\"required\":true,\"description\":\"the style of the font\"}]",
      "examples": "[]",
      "syntax": "`public final void setTextStyle(Font, FontStyle style)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "setTextHeight",
      "position": 19,
      "key": "settextheight",
      "overload_of": null,
      "content": "Sets the height of the text in pixels.",
      "parameters": "[{\"name\":\"height\",\"type\":\"int\",\"required\":true,\"description\":\"the height in pixels of the text to draw\"}]",
      "examples": "[]",
      "syntax": "`public final void setTextHeight(int height)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "setTextColor",
      "position": 20,
      "key": "settextcolor",
      "overload_of": null,
      "content": "Sets the color of the text. If the specified name of the color cannot be found, the default color is used.",
      "parameters": "[{\"name\":\"color\",\"type\":\"String\",\"required\":true,\"description\":\"the name of the color to use\"}]",
      "examples": "[]",
      "syntax": "`public final void setTextColor(String color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "setTextColor",
      "position": 21,
      "key": "settextcolor2",
      "overload_of": "settextcolor",
      "content": "Sets the color of the text.",
      "parameters": "[{\"name\":\"color\",\"type\":\"Color\",\"required\":true,\"description\":\"the `Color` object to use to set the color of the text\"}]",
      "examples": "[]",
      "syntax": "`public final void setTextColor(Color color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawText",
      "position": 22,
      "key": "drawtext",
      "overload_of": null,
      "content": "Draws text on the canvas.",
      "parameters": "[{\"name\":\"text\",\"type\":\"String\",\"required\":true,\"description\":\"the text to draw\"},{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to start drawing the text\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to start drawing the text\"}]",
      "examples": "[]",
      "syntax": "`public final void drawText(String text, int x, int y)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawText",
      "position": 23,
      "key": "void-drawtext-string-text-int-x-int-y-double-rotation",
      "overload_of": "drawtext",
      "content": "Draws text on the canvas.",
      "parameters": "[{\"name\":\"text\",\"type\":\"String\",\"required\":true,\"description\":\"the text to draw on the canvas\"},{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to start drawing the text\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to start drawing the text\"},{\"name\":\"rotation\",\"type\":\"double\",\"required\":true,\"description\":\"the amount to rotate the text in degrees around its center\"}]",
      "examples": "[]",
      "syntax": "`public final void drawText(String text, int x, int y, double rotation)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawLine",
      "position": 24,
      "key": "drawline",
      "overload_of": null,
      "content": "Draws a line on the canvas.",
      "parameters": "[{\"name\":\"startX\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to start drawing the line\"},{\"name\":\"startY\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to start drawing the line\"},{\"name\":\"endX\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to stop drawing the line\"},{\"name\":\"endY\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to stop drawing the line\"}]",
      "examples": "[]",
      "syntax": "`public final void drawLine(int startX, int startY, int endX, int endY)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawRegularPolygon",
      "position": 25,
      "key": "drawregularpolygon",
      "overload_of": null,
      "content": "Draws a regular polygon (triangle, square, pentagon, hexagon, etc.) on the canvas.",
      "parameters": "[{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate for the center of the polygon\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate for the center of the polygon\"},{\"name\":\"sides\",\"type\":\"int\",\"required\":true,\"description\":\"the number of sides of the polygon\"},{\"name\":\"radius\",\"type\":\"int\",\"required\":true,\"description\":\"the distance from the center to each point on the polygon\"}]",
      "examples": "[]",
      "syntax": "`public final void drawRegularPolygon(int x, int y, int sides, int radius)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawShape",
      "position": 26,
      "key": "drawshape",
      "overload_of": null,
      "content": "Draws a shape by connecting the points provided.",
      "parameters": "[{\"name\":\"points\",\"type\":\"int[]\",\"required\":true,\"description\":\"an array of numbers for the x and y coordinates of each point formatted as `[x1, y1, x2, y2, x3, y3, . . .]`\"},{\"name\":\"close\",\"type\":\"boolean\",\"required\":true,\"description\":\"whether to close the shape\\n\\nIf this is set to `true`, the last point and the first point will be connected by a line. If a fill color is set, the shape will be filled with that color.\"}]",
      "examples": "[]",
      "syntax": "`public final void drawShape(int[] points, boolean close)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawEllipse",
      "position": 27,
      "key": "drawellipse",
      "overload_of": null,
      "content": "Draws an ellipse (an oval or a circle) on the canvas.",
      "parameters": "[{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to start drawing the left side of the ellipse\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to start drawing the top of the ellipse\"},{\"name\":\"width\",\"type\":\"int\",\"required\":true,\"description\":\"the width of the ellipse\"},{\"name\":\"height\",\"type\":\"int\",\"required\":true,\"description\":\"the height of the ellipse\"}]",
      "examples": "[]",
      "syntax": "`public final void drawEllipse(int x, int y, int width, int height)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "drawRectangle",
      "position": 28,
      "key": "drawrectangle",
      "overload_of": null,
      "content": "Draws a rectangle on the canvas.",
      "parameters": "[{\"name\":\"x\",\"type\":\"int\",\"required\":true,\"description\":\"the x coordinate to start drawing the left side of the rectangle\"},{\"name\":\"y\",\"type\":\"int\",\"required\":true,\"description\":\"the y coordinate to start drawing the top of the rectangle\"},{\"name\":\"width\",\"type\":\"int\",\"required\":true,\"description\":\"the width of the rectangle\"},{\"name\":\"height\",\"type\":\"int\",\"required\":true,\"description\":\"the height of the rectangle\"}]",
      "examples": "[]",
      "syntax": "`public final void drawRectangle(int x, int y, int width, int height)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "setStrokeWidth",
      "position": 29,
      "key": "setstrokewidth",
      "overload_of": null,
      "content": "Sets the thickness of lines drawn.",
      "parameters": "[{\"name\":\"width\",\"type\":\"double\",\"required\":true,\"description\":\"the width in pixels of the line to draw\\n\\nA width of `0` means no line.\"}]",
      "examples": "[]",
      "syntax": "`public final void setStrokeWidth(double width)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "setFillColor",
      "position": 30,
      "key": "setfillcolor",
      "overload_of": null,
      "content": "Sets the fill color for all shapes drawn. If the name of the color cannot be found, no fill color will be used.",
      "parameters": "[{\"name\":\"color\",\"type\":\"String\",\"required\":true,\"description\":\"the name of the color to fill the shape\"}]",
      "examples": "[]",
      "syntax": "`public final void setFillColor(String color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "setFillColor",
      "position": 31,
      "key": "setfillcolor2",
      "overload_of": "setfillcolor",
      "content": "Sets the fill color for all shapes drawn.",
      "parameters": "[{\"name\":\"color\",\"type\":\"Color\",\"required\":true,\"description\":\"the `Color` object to use to fill the shape\"}]",
      "examples": "[]",
      "syntax": "`public final void setFillColor(Color color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "setStrokeColor",
      "position": 32,
      "key": "setstrokecolor",
      "overload_of": null,
      "content": "Sets the color of the lines drawn. If the name of the color cannot be found, no color is used for the stroke.",
      "parameters": "[{\"name\":\"color\",\"type\":\"String\",\"required\":true,\"description\":\"the name of the color to use for the lines drawn\"}]",
      "examples": "[]",
      "syntax": "`public final void setStrokeColor(String color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "setStrokeColor",
      "position": 33,
      "key": "setstrokecolor2",
      "overload_of": "setstrokecolor",
      "content": "Sets the color of the lines drawn.",
      "parameters": "[{\"name\":\"color\",\"type\":\"Color\",\"required\":true,\"description\":\"the `Color` object to use to set the color of the lines drawn\"}]",
      "examples": "[]",
      "syntax": "`public final void setStrokeColor(Color color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "removeStrokeColor",
      "position": 34,
      "key": "removestrokecolor",
      "overload_of": null,
      "content": "Removes the stroke color so all shapes have no stroke.",
      "parameters": "[]",
      "examples": "[]",
      "syntax": "`public final void removeStrokeColor()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "removeFillColor",
      "position": 35,
      "key": "removefillcolor",
      "overload_of": null,
      "content": "Removes the fill color so all shapes drawn have no fill.",
      "parameters": "[]",
      "examples": "[]",
      "syntax": "`public final void removeFillColor()`",
      "external_link": null,
      "return_value": null
    }
  ]
}