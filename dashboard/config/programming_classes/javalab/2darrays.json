{
  "category_key": "data_structures",
  "content": "Two-dimensional arrays are data structures in Java that is essentially an array of arrays. Each element in the array, is an array itself. Generally, a two-dimensional array is referred to be columns and rows:\n\n**Initializing a two-dimension array:**\n- `int [][] a = new int [3][4];`\n- in the example above, we've intialized a 2D array with 3 rows and 4 columns.\n- the  `new` keyword in this is case is used to allocate space for a new 2D array.\n- specifying the elements in the array: `int name [3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};`\n\n**Details:**\n- rows are the elements in an array that it can store horizontally. row size equal to 2 will create 2 rows.\n- columns are the elements in an array that it can store vertically. \n",
  "examples": "[{\"name\":\"Adding \\u0026 Modifying Elements in a 2D Array\",\"description\":\"\",\"code\":\"*For inserting data into a 2D Array, we will need 2 for loops because we have to work with rows \\u0026 columns*\\n```\\nint[][] sampleArray = {{1,1},{2,2},{3,3},{4,4}};\\nfor(int x = 0 ; x \\u003c 4 ; x++){\\n     for(int y = 0 ; y \\u003c 2; y++){\\n          System.out.println(sampleArray[x][y] + \\\" \\\");\\n}\\n```\\n\\n*For modifying data in a 2D Array, we will need 2 for loops again because we have to work with rows \\u0026 columns*\\n```\\nint[][] sampleArray = {{1,1},{2,2},{3,3},{4,4}};\\nfor(int x = 0 ; x \\u003c 4 ; x++){\\n     for(int y = 0 ; y \\u003c 2; y++){\\n         //change the value at that position to itself + 1\\n         sampleArray[x][y] = sampleArray[x][y] + 1;\\n}\\n```\"},{\"name\":\"Row-Major Traversal of a 2D Array \",\"code\":\"Row-major-order is one of two common ways to traverse through a 2D array. This means that the matrix/array is accessed row-by-row: you access each element in the first row, then each element in the second row, etc...\\n\\n**difference between output row-major \\u0026 column-major traversal**\\n```\\nInput : mat[][] = {{0, 1, 2}, \\n                  {3, 4, 5}, \\n                  {6, 7, 8}}\\nOutput : \\nRow-major: 0 1 2 3 4 5 6 7 8 \\n\\nCol-major : 0 3 6 1 4 7 2 5 8\\n```\\n\\n**traversal:**\\n```\\nint test[row][col] = {0};\\nint x, y; // x will allow us to iterate through rows, y will allow us to iterate through columns\\n\\nfor(x = 0; x \\u003c row; x++) { //go through each row\\n\\n     for(y = 0; y \\u003c col; y++) { //for each row, let's look at each column. \\n\\n          System.out.println(test[x][y]);\\n\\n     }\\n}\"},{\"name\":\"Column-Major Traversal of a 2D Array \",\"code\":\"Column-major-order is one of two common ways to traverse through a 2D array. This means that the matrix/array is accessed column-by-column: you access each element in the first column, then each element in the second column, etc..\\n\\n**traversal:**\\n```\\nint test[row][col] = {0};\\nint x, y; // x will allow us to iterate through columns, y will allow us to iterate through rows\\n\\nfor(x = 0; x \\u003c col; x++) { //go through each column\\n\\n     for(y = 0; y \\u003c row; y++) { //for each column, let's look at each row. \\n\\n          System.out.println(test[y][x]);\\n\\n     }\\n}\"},{\"name\":\"Traversal of 2D Arrays with an Enhanced For Loop \",\"code\":\"```\\nint [][] array;\\n\\n//the first loop will store each row, innerArray [] contains each element of the particular row\\nfor(int [] innerArray: array) {\\n\\n     //the second loop stores each position within that row\\n     for(int num : innerArray) {\\n\\n          System.out.println(val);\\n     {\\n}\\n```\"}]",
  "external_documentation": "",
  "fields": "[]",
  "key": "2DArrays",
  "name": "2D Arrays",
  "syntax": "int[][] test = new int[4][4];",
  "tips": "",
  "methods": [

  ]
}