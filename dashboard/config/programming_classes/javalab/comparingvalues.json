{
  "category_key": "general",
  "content": "There are multiple ways to compare two `String`s in Java. We can utilize Java methods or use operators. Comparison can be an important tool to use in `if` statements, `for` loops, and performing other functions. \n\n**Ways to Compare Two Strings**\n\n1. the `==` operator\n\n2. the `equals()` method\n\n3. the `compareTo()` method",
  "examples": "[{\"name\":\"Using == to Compare Two Strings\",\"description\":\"The equals operator compares two references, not the values themselves. The result of comparing two `String`s using an equals operator will be a `boolean`. \",\"code\":\"```\\nString name1 = \\\"Alyssa\\\";\\nString name2 = \\\"John\\\";\\nString name3 = \\\"Alyssa\\\";\\n\\nSystem.out.println(name1 == name2);  // prints false\\nSystem.out.println(name1 == name3);  // prints true\\n```\"}]",
  "external_documentation": "",
  "fields": "[]",
  "key": "ComparingValues",
  "name": "Comparing Strings",
  "syntax": "",
  "tips": "",
  "methods": [
    {
      "name": "equals",
      "position": 0,
      "key": "equals",
      "overload_of": null,
      "content": "The `equals()` method will compare the `String` that it is called on to the `String` passed as a parameter. The expression returns a `boolean`: `true` if the two `String`s contain the same characters, `false` otherwise.",
      "parameters": "[{\"name\":\"stringTwo\",\"type\":\"String\",\"required\":true,\"description\":\"the second string being compared to the first\"}]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nStringOne = \\\"Apple\\\";\\nStringTwo = \\\"Pear\\\";\\nStringThree = \\\"Apple\\\";\\n\\n// check if stringOne is equal to stringTwo\\nSystem.out.println(stringOne.equals(stringTwo)); \\n// prints false\\n\\n\\n// check if stringOne is equal to stringThree\\nSystem.out.println(stringOne.equals(stringThree)); \\n// prints true\\n```\"}]",
      "syntax": "`public boolean equals(String stringTwo)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "compareTo",
      "position": 1,
      "key": "compareto",
      "overload_of": null,
      "content": "The `compareTo()` method compares the `String` values and returns an `int`. The returned `int` is the number difference between two `String`s. Both `String`s are compared by the Unicode value of each character in the `String`. \n\n- If `stringOne` is greater than `stringTwo`, the method will return a positive number. \"Greater than\" means lexicographically greater than, so when `stringOne` comes before`stringTwo`.\n\n- If `stringOne` is less than `stringTwo`, the method will return a negative number. \"Less than\" means lexicographically less than, so when `stringOne` comes after `stringTwo`.\n\n- If `stringOne` equals `stringTwo`, the method will return `0`.\n\nThe `compareTo()` method is case sensitive, meaning that capitalization does affect the calculation.",
      "parameters": "[{\"name\":\"stringTwo\",\"type\":\"String\",\"required\":true,\"description\":\"the `String` to be compared to the first `String`\"}]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nString name1 = \\\"James\\\";\\nString name2 = \\\"Bill\\\";\\nString name3 = \\\"James\\\";\\n\\nSystem.out.println(name1.compareTo(name2));\\n// prints 8 because James \\u003e Bill lexicographically\\n\\nSystem.out.println(name1.compareTo(name3));\\n// prints 0 because both contain the same characters\\n```\"}]",
      "syntax": "`public int compareTo(String stringTwo)`",
      "external_link": null,
      "return_value": null
    }
  ]
}