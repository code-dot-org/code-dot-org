{
  "category_key": "java_util",
  "content": "The Scanner class is part of the ```java.util``` package and primarily used to read in inputs from a variety of different sources, such as input streams, users, files, etc.",
  "examples": "[]",
  "external_documentation": "",
  "fields": "[]",
  "key": "Scanner",
  "name": "Scanner",
  "syntax": "Scanner input = new Scanner(System.in);\n",
  "tips": "",
  "methods": [
    {
      "name": "Scanner",
      "position": 0,
      "key": "scanner",
      "overload_of": null,
      "content": "The Scanner constructor can be used to create a Scanner object with, generally, a few different input types: ```System.in```, ```File```, ```String```, or ```InputStream```.",
      "parameters": "[{\"name\":\"source\",\"type\":\"File\",\"required\":true,\"description\":\"Input is of the type file, from which the Scanner object will read.\"},{\"type\":\"System.in\",\"description\":\"This parameter is used to take inputs in from the standard input, ie: the keyboard.\"}]",
      "examples": "[{\"name\":\"Using Scanner(File source)\",\"code\":\"```\\nScanner sc2 = new Scanner(File source);\\n```\\n//now that we've initialized the Scanner object as reading from ```File source```, we can utilize other methods in the Scanner class to read from the file. \"},{\"name\":\"Using Scanner(System.in)\",\"code\":\"```\\nScanner sc2 = new Scanner(System.in);\\n```\\n//now that we've initialized the Scanner object as reading from ```System.in```, we can utilize other methods in the Scanner class to read from the standard input. \\n\"}]",
      "syntax": "//the two input types below are the primary ones we will cover\n\nScanner sc2 = new Scanner(File source);\n\nScanner sc2 = new Scanner(System.in);",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "close",
      "position": 1,
      "key": "close",
      "overload_of": null,
      "content": "This method closes a Scanner object that has been opened. ",
      "parameters": "[]",
      "examples": "[{\"name\":\"Using close()\",\"description\":\"\",\"code\":\"```\\nString s = \\\"This is an example of how to use the close method.\\\"\\nScanner scanner = new Scanner(s);\\nSystem.out.println(\\\"Scanner: \\\" + scanner.nextLine());\\nscanner.close(); //Close the Scanner\\n```\\n\"}]",
      "syntax": "public void close()",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNext",
      "position": 2,
      "key": "hasnext",
      "overload_of": null,
      "content": "The hasNext() method returns true if the Scanner has another token in its input. There are three different variations of this method.",
      "parameters": "[{\"name\":\"pattern\",\"type\":\"String\",\"required\":true,\"description\":\"When hasNext() has this parameter, the method returns true if the next token matches the pattern from the specified string. The parameter is required, if the intended use is to scan for the specified String.\"},{\"name\":\"pattern\",\"type\":\"Pattern\",\"required\":true,\"description\":\"When hasNext() has this parameter, the method returns true if the next token matches the specified pattern. The parameter is required, if the intended use is to scan for the specified Pattern.\"}]",
      "examples": "[{\"name\":\"Using hasNext()\",\"code\":\"```\\nString s = \\\"Hello, This is Scanner.\\\";  \\n\\n//Create scanner Object and pass string in it  \\nScanner scan = new Scanner(s);  \\n\\n//Check if the scanner has a token  \\nSystem.out.println(\\\"Result: \\\" + scan.hasNext());  \\n\\n//Print the string  \\nSystem.out.println(\\\"String: \\\" +scan.nextLine());  \\n```\\n**Output:**\\nResult: true \\nString: Hello, This is Scanner.\"}]",
      "syntax": "scanner.hasNext()\nscanner.hasNext(String pattern)\nscanner.hasNext(Pattern pattern)",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextBoolean",
      "position": 3,
      "key": "hasnextboolean",
      "overload_of": null,
      "content": "The hasNextBoolean() method in Java returns true if the next token in the Scanner object is a boolean, determined by the nextBoolean() method. The method does not move past any input within the object, just identifies if there is a boolean or not. ",
      "parameters": "[]",
      "examples": "[{\"name\":\"Using hasNextBoolean()\",\"description\":\"\",\"code\":\"```\\n String s = \\\"hello false goodbye!\\\";\\n  \\n//create a new Scanner object with String s\\nScanner scanner = new Scanner(s);\\n  \\n        // keep going while there is still input in the Scanner object\\n        while (scanner.hasNext()) {\\n  \\n            // check if the scanner's next token is a Boolean \\n            System.out.print(\\\"\\\" + scanner.hasNextBoolean());\\n  \\n            System.out.print(\\\" -\\u003e \\\" + scanner.next() + \\\"\\\\n\\\");\\n        }\\n        scanner.close();\\n```\\n**Oytput:**\\nfalse -\\u003e hello\\n\\ntrue -\\u003e false\\n\\nfalse -\\u003e goodbye!\"}]",
      "syntax": "public boolean hasNextBoolean()\n",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextDouble",
      "position": 4,
      "key": "hasnextdouble",
      "overload_of": null,
      "content": "This method is used to determine if the next token in the Scanner object's input can be interpreted as a double. It will return true if the Scanner object's input can be interpreted as a double, otherwise returns false.",
      "parameters": "[]",
      "examples": "[{\"name\":\"Using hasNextDouble()\",\"description\":\"\",\"code\":\"```\\nif(scanner.hasNextDouble()){\\n     System.out.println(\\\"Identified a Double\\\" + scanner.next());\\n}\\n```\"}]",
      "syntax": "public boolean hasNextDouble()",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextInt",
      "position": 5,
      "key": "hasnextint",
      "overload_of": null,
      "content": "This method is used to determine if the next token in the Scanner object's input can be interpreted as an int. It will return true if the Scanner object's input can be interpreted as an int, otherwise returns false.",
      "parameters": "[]",
      "examples": "[{\"name\":\"Using hasNextInt()\",\"description\":\"\",\"code\":\"```\\nif(hasNextInt()){\\n     System.out.println(\\\"Identified an Int Object\\\" + scanner.next());\\n}\\n```\"}]",
      "syntax": "public boolean hasNextInt()",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextLine",
      "position": 6,
      "key": "hasnextline",
      "overload_of": null,
      "content": "hasNextLine() returns true if the Scanner input object has another line of input. It does not advance past any input, just checks for it.",
      "parameters": "[]",
      "examples": "[{\"name\":\"Using hasNextLine()\",\"code\":\"```\\n // specified String Object\\n Scanner scanner = new Scanner(s);\\n  \\n        // iterate through the Input\\n        while (scanner.hasNextLine()) {\\n  \\n            // print what is scanned\\n            System.out.println(scanner.nextLine());\\n        }\\n  \"}]",
      "syntax": "public boolean hasNextLine()",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "next",
      "position": 7,
      "key": "next",
      "overload_of": null,
      "content": "The next() method finds the next token from the Scanner input object and returns it. There are three variations of this method. The method can be used without parameters, or parameters of type String or Pattern.\n\n- next(String pattern) --> will return the next token it matches the specified String\n- next(Pattern pattern) --> will return the next token it matches the specified Pattern\n\n",
      "parameters": "[{\"name\":\"pattern\",\"type\":\"String\",\"description\":\"the pattern, as a String object, to identify within the Scanner object\"},{\"name\":\"pattern\",\"type\":\"Pattern\",\"description\":\"the pattern, as a Pattern object, to identify within the Scanner object\"}]",
      "examples": "[{\"name\":\"Using next()\",\"code\":\"```\\nSystem.out.print(\\\"Enter your first name: \\\");        \\n\\nScanner scanner = new Scanner(System.in);  \\n\\n//Read in the first token  \\nString firstName = scanner.next();  \\n\\n//Print the token values read by Scanner object  \\nSystem.out.println(\\\"First Name is: \\\"+ firstName);  \"}]",
      "syntax": "- Java Scanner next()\n- Java Scanner next(String pattern)\n- Java Scanner next(Pattern pattern)",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextBoolean",
      "position": 8,
      "key": "nextboolean",
      "overload_of": null,
      "content": "This method scans the next token of the input into a boolean value and then returns that value. If the next value in the input cannot be translated into a valid boolean value, it will throw an exception called *InputMismatchException.*",
      "parameters": "[]",
      "examples": "[{\"name\":\"Using nextBoolean()\",\"code\":\"```\\nif (scanner.hasNextBoolean()) {\\n            System.out.println(\\\"Found a Boolean :\\\" + scanner.nextBoolean());\\n         }\\n```\"}]",
      "syntax": "public boolean nextBoolean()\n",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextDouble",
      "position": 9,
      "key": "nextdouble",
      "overload_of": null,
      "content": "This method scans the next token of the input as a double value and then returns that value. If the next value in the input cannot be translated into a valid double value, it will throw an exception called *InputMismatchException.*",
      "parameters": "[]",
      "examples": "[{\"name\":\"Using nextDouble()\",\"description\":\"\",\"code\":\"```\\n if (scanner.hasNextDouble()) {\\n                System.out.println(\\\"Found Double value :\\\" + scanner.nextDouble());\\n            }\\n```\"}]",
      "syntax": "public double nextDouble()",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextInt",
      "position": 10,
      "key": "nextint",
      "overload_of": null,
      "content": "This method scans the next token of the input as a int value and then returns that value. If the next value in the input cannot be translated into a valid int value, it will throw an exception called *InputMismatchException.*",
      "parameters": "[]",
      "examples": "[{\"name\":\"Using nextInt()\",\"code\":\" ```\\n if (scanner.hasNextInt()) {\\n                System.out.println(\\\"Found Int value: \\\" + scanner.nextInt());\\n            }\\n```\"}]",
      "syntax": "public int nextInt()",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextLine",
      "position": 11,
      "key": "nextline",
      "overload_of": null,
      "content": "This method advances the scanner object past its current line and returns the input that was skipped. Next is then set to after the line separator. If there are no line separators present, it is possible that this method searches all of the input for a line to skip.",
      "parameters": "[]",
      "examples": "[{\"name\":\"Using nextLine()\",\"code\":\"```\\n\\nString s = \\\"Hello \\\\n World \\\\n !\\\";\\nScanner scanner = new Scanner(s);\\n System.out.println(scanner.nextLine());\\n System.out.println(scanner.nextLine());\\n System.out.println(scanner.nextLine());\\nscanner.close();\\n```\\n**output:** \\n\\nHello\\n\\n   World \\n\\n   !\\n\"}]",
      "syntax": "public String nextLine()\n",
      "external_link": null,
      "return_value": null
    }
  ]
}