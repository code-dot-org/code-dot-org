{
  "category_key": "java_util",
  "content": "The `Scanner` class is part of the `java.util` package and primarily used to read in inputs from a variety of different sources, such as input streams, users, files, etc.",
  "examples": "[]",
  "external_documentation": "",
  "fields": "[]",
  "key": "Scanner",
  "name": "Scanner",
  "syntax": "",
  "tips": "",
  "methods": [
    {
      "name": "Scanner",
      "position": 0,
      "key": "scanner",
      "overload_of": null,
      "content": "Creates a `Scanner` object to read input entered by a user in the console.",
      "parameters": "[{\"name\":\"System.in\",\"type\":\"InputStream\",\"required\":true,\"description\":\"take inputs from the standard input (i.e., the keyboard)\"}]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nScanner input = new Scanner(System.in);\\n```\"}]",
      "syntax": "`public Scanner(System.in)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "Scanner",
      "position": 1,
      "key": "scanner2",
      "overload_of": "scanner",
      "content": "Creates a `Scanner` object to read the contents of the specified `File` object.",
      "parameters": "[{\"name\":\"source\",\"type\":\"File\",\"required\":true,\"description\":\"Input is of the type `File` from which the `Scanner` object will read.\"}]",
      "examples": "[{\"code\":\"```\\nScanner fileReader = new Scanner(File source);\\n```\"}]",
      "syntax": "`public Scanner(File source)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "close",
      "position": 2,
      "key": "close",
      "overload_of": null,
      "content": "This method closes a `Scanner` object that has been opened. ",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"description\":\"\",\"code\":\"```\\nScanner input = new Scanner(System.in);\\nSystem.out.println(\\\"Say something: \\\" + input.nextLine());\\ninput.close();  // close the Scanner object\\n```\\n\"}]",
      "syntax": "`public void close()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNext",
      "position": 3,
      "key": "hasnext",
      "overload_of": null,
      "content": "The `hasNext()` method returns `true` if the `Scanner` has another token in its input.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nFile myFile = new File(\\\"samplefile.txt\\\");\\n\\n// create Scanner object with the file\\nScanner fileReader = new Scanner(myFile);  \\n\\n// check if the Scanner object has a token to read\\nSystem.out.println(\\\"Result: \\\" + fileReader.hasNext());  \\n\\n// print the contents  \\nSystem.out.println(\\\"File contents: \\\" + fileReader.next()); \\n\\nfileReader.close();\\n```\\n\\n**Output:**\\n\\nResult: true\\n\\nFile contents: Hello\"}]",
      "syntax": "`public boolean hasNext()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextBoolean",
      "position": 4,
      "key": "hasnextboolean",
      "overload_of": null,
      "content": "The `hasNextBoolean()` method returns `true` if the next token in the `Scanner` object is a `boolean`.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"description\":\"\",\"code\":\"```\\nFile myFile = new File(\\\"samplefile.txt\\\");\\n  \\n// create a new Scanner object to read the file\\nScanner fileReader = new Scanner(myFile);\\n  \\n// check if the Scanner's next token is a boolean\\nSystem.out.print(fileReader.hasNextBoolean());\\nSystem.out.print(\\\" -\\u003e \\\" + fileReader.nextBoolean() + \\\"\\\\n\\\");\\nfileReader.close();\\n```\\n\\n**Output:**\\n\\ntrue -\\u003e false\"}]",
      "syntax": "`public boolean hasNextBoolean()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextDouble",
      "position": 5,
      "key": "hasnextdouble",
      "overload_of": null,
      "content": "The `hasNextDouble()` method is used to determine if the next token in the `Scanner` object's input can be interpreted as a `double`. It will return `true` if the `Scanner` object's input can be interpreted as a `double`, otherwise returns `false`.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"description\":\"\",\"code\":\"```\\nif (input.hasNextDouble()) {\\n   System.out.println(\\\"Identified a double\\\" + input.nextDouble());\\n}\\n\\ninput.close();\\n```\"}]",
      "syntax": "`public boolean hasNextDouble()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextInt",
      "position": 6,
      "key": "hasnextint",
      "overload_of": null,
      "content": "The `hasNextInt()` method is used to determine if the next token in the `Scanner` object's input can be interpreted as an `int`. It will return `true` if the `Scanner` object's input can be interpreted as an `int`, otherwise returns `false`.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"description\":\"\",\"code\":\"```\\nif (hasNextInt()) {\\n   System.out.println(\\\"Identified an int object\\\" + input.nextInt());\\n}\\n\\ninput.close();\\n```\"}]",
      "syntax": "`public boolean hasNextInt()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextLine",
      "position": 7,
      "key": "hasnextline",
      "overload_of": null,
      "content": "The `hasNextLine()` method returns `true` if the `Scanner` input object has another line of input.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nFile myFile = new File(\\\"samplefile.txt\\\");\\nScanner fileReader = new Scanner(myFile);\\n\\nwhile (fileReader.hasNextLine()) {\\n   System.out.println(fileReader.nextLine());\\n}\\n\\nfileReader.close();\\n```\"}]",
      "syntax": "`public boolean hasNextLine()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "next",
      "position": 8,
      "key": "next",
      "overload_of": null,
      "content": "The `next()` method finds the next token from the `Scanner` input object and returns it.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nScanner input = new Scanner(System.in); \\n\\nSystem.out.print(\\\"Enter your first name: \\\"); \\n\\n// read in the input\\nString firstName = input.next();  \\n\\n// print the value read by the Scanner object  \\nSystem.out.println(\\\"First name is: \\\"+ firstName); \\n\\ninput.close();\\n```\"}]",
      "syntax": "`public String next()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextBoolean",
      "position": 9,
      "key": "nextboolean",
      "overload_of": null,
      "content": "The `nextBoolean()` method scans the input as a `boolean` value and then returns that value. If the next value in the input cannot be translated into a valid `boolean` value, it will throw an `InputMismatchException`.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nif (input.hasNextBoolean()) {\\n   System.out.println(\\\"Found a boolean :\\\" + input.nextBoolean());\\n}\\n\\ninput.close();\\n```\"}]",
      "syntax": "`public boolean nextBoolean()`\n",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextDouble",
      "position": 10,
      "key": "nextdouble",
      "overload_of": null,
      "content": "The `nextDouble()` method reads the input as a `double` value and then returns that value. If the next value in the input cannot be translated into a valid `double` value, it will throw an `InputMismatchException`.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"description\":\"\",\"code\":\"```\\nif (input.hasNextDouble()) {\\n   System.out.println(\\\"Found double value :\\\" + input.nextDouble());\\n}\\n\\ninput.close();\\n```\"}]",
      "syntax": "`public double nextDouble()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextInt",
      "position": 11,
      "key": "nextint",
      "overload_of": null,
      "content": "The `nextInt()` method reads the input as an `int` value and then returns that value. If the next value in the input cannot be translated into a valid `int` value, it will throw an `InputMismatchException`.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"code\":\" ```\\nif (input.hasNextInt()) {\\n   System.out.println(\\\"Found int value: \\\" + input.nextInt());\\n}\\n\\ninput.close();\\n```\"}]",
      "syntax": "`public int nextInt()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextLine",
      "position": 12,
      "key": "nextline",
      "overload_of": null,
      "content": "The `nextLine()` method reads the contents of the user input or a file until a new line is encountered.",
      "parameters": "[]",
      "examples": "[{\"name\":\"\",\"code\":\"```\\nFile myFile = new File(\\\"samplefile.txt\\\");\\nScanner fileReader = new Scanner(myFile);\\n\\nSystem.out.println(fileReader.nextLine());\\n\\nfileReader.close();\\n```\\n\"}]",
      "syntax": "`public String nextLine()`",
      "external_link": null,
      "return_value": null
    }
  ]
}