{
  "category_key": "java_util",
  "content": "The Scanner class is part of the ```java.util``` package and primarily used to read in inputs from a variety of different sources, such as input streams, users, files, etc.",
  "examples": "[]",
  "external_documentation": "",
  "fields": "[]",
  "key": "Scanner",
  "name": "Scanner",
  "syntax": "Scanner input = new Scanner(System.in);\n",
  "tips": "",
  "methods": [
    {
      "name": "Scanner",
      "position": 0,
      "key": "scanner",
      "overload_of": null,
      "content": "The Scanner constructor can be used to create a Scanner object with, generally, a few different input types: ```System.in```, ```File```, ```String```, or ```InputStream```.",
      "parameters": "[{\"name\":\"source\",\"type\":\"File\",\"required\":true,\"description\":\"Input is of the type file, from which the Scanner object will read.\"},{\"type\":\"System.in\",\"description\":\"This parameter is used to take inputs in from the standard input, ie: the keyboard.\"}]",
      "examples": "[{\"name\":\"Using Scanner(File source)\",\"code\":\"```\\nScanner sc2 = new Scanner(File source);\\n```\\n//now that we've initialized the Scanner object as reading from ```File source```, we can utilize other methods in the Scanner class to read from the file. \"},{\"name\":\"Using Scanner(System.in)\",\"code\":\"```\\nScanner sc2 = new Scanner(System.in);\\n```\\n//now that we've initialized the Scanner object as reading from ```System.in```, we can utilize other methods in the Scanner class to read from the standard input. \\n\"}]",
      "syntax": "//the two input types below are the primary ones we will cover\n\nScanner sc2 = new Scanner(File source);\n\nScanner sc2 = new Scanner(System.in);",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "close",
      "position": 1,
      "key": "close",
      "overload_of": null,
      "content": "This method closes a Scanner object that has been opened. ",
      "parameters": "[]",
      "examples": "[{\"name\":\"Using close()\",\"description\":\"\",\"code\":\"```\\nString s = \\\"This is an example of how to use the close method.\\\"\\nScanner scanner = new Scanner(s);\\nSystem.out.println(\\\"Scanner: \\\" + scanner.nextLine());\\nscanner.close(); //Close the Scanner\\n```\\n\"}]",
      "syntax": "public void close()",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNext",
      "position": 2,
      "key": "hasnext",
      "overload_of": null,
      "content": "The hasNext() method returns true if the Scanner has another token in its input. There are three different variations of this method.",
      "parameters": "[{\"name\":\"pattern\",\"type\":\"String\",\"required\":true,\"description\":\"When hasNext() has this parameter, the method returns true if the next token matches the pattern from the specified string. The parameter is required, if the intended use is to scan for the specified String.\"},{\"name\":\"pattern\",\"type\":\"Pattern\",\"required\":true,\"description\":\"When hasNext() has this parameter, the method returns true if the next token matches the specified pattern. The parameter is required, if the intended use is to scan for the specified Pattern.\"}]",
      "examples": "[{\"name\":\"Using hasNext()\",\"code\":\"```\\nString s = \\\"Hello, This is Scanner.\\\";  \\n\\n//Create scanner Object and pass string in it  \\nScanner scan = new Scanner(s);  \\n\\n//Check if the scanner has a token  \\nSystem.out.println(\\\"Result: \\\" + scan.hasNext());  \\n\\n//Print the string  \\nSystem.out.println(\\\"String: \\\" +scan.nextLine());  \\n```\\n**Output:**\\nResult: true \\nString: Hello, This is Scanner.\"}]",
      "syntax": "scanner.hasNext()\nscanner.hasNext(String pattern)\nscanner.hasNext(Pattern pattern)",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextBoolean",
      "position": 3,
      "key": "hasnextboolean",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextDouble",
      "position": 4,
      "key": "hasnextdouble",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextInt",
      "position": 5,
      "key": "hasnextint",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "hasNextLine",
      "position": 6,
      "key": "hasnextline",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "next",
      "position": 7,
      "key": "next",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextBoolean",
      "position": 8,
      "key": "nextboolean",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextDouble",
      "position": 9,
      "key": "nextdouble",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextInt",
      "position": 10,
      "key": "nextint",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    },
    {
      "name": "nextLine",
      "position": 11,
      "key": "nextline",
      "overload_of": null,
      "content": null,
      "parameters": null,
      "examples": null,
      "syntax": null,
      "external_link": null,
      "return_value": null
    }
  ]
}