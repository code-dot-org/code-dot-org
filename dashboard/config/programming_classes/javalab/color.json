{
  "category_key": "org_code_media",
  "content": "Represents a color as amounts of red, green, and blue (ranging from `0` to `255`) that blend together to make a unique color. This class also provides a number of preset colors, like `fuschia`, which can be referenced either by a string value or as one of the constants in this class, e.g. `Color.FUSCHIA`.",
  "examples": "[]",
  "external_documentation": "",
  "fields": "[{\"name\":\"MAX_VALUE = 255\",\"type\":\"static final int\",\"description\":\"the maximum value for the red, green, and blue values of this `Color`\\n\\n```\\nColor.MAX_VALUE\\n```\"},{\"name\":\"MIN_VALUE = 0\",\"type\":\"static final int\",\"description\":\"the minimum value for the red, green, and blue values of this `Color`\\n\\n```\\nColor.MIN_VALUE\\n```\"},{\"name\":\"red\",\"type\":\"final int\",\"description\":\"the red value of this `Color`\"},{\"name\":\"green\",\"type\":\"final int\",\"description\":\"the green value of this `Color`\"},{\"name\":\"blue\",\"type\":\"final int\",\"description\":\"the blue value of this `Color`\"},{\"name\":\"WHITE\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/e958ceb9d57d543f5b973a1be95c38a2-white.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(255, 255, 255)`\\n\\n```\\nColor.WHITE\\n```\"},{\"name\":\"SILVER\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/505f8c4464579a48b6352a85f87cacd1-silver.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(192, 192, 192)`\\n\\n```\\nColor.SILVER\\n```\"},{\"name\":\"GRAY\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/92b61ddc49038cb77e6382f5cc5631e3-gray.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(128, 128, 128)`\\n\\n```\\nColor.GRAY\\n```\"},{\"name\":\"BLACK\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/0739abee7eea732dd4dc11357e584d50-black.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(0, 0, 0)`\\n\\n```\\nColor.BLACK\\n```\"},{\"name\":\"RED\",\"type\":\"static final Color\",\"description\":\"![](https://images.code.org/caaf780d32e247bff4ef05e4004724c9-red.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(255, 0, 0)`\\n\\n```\\nColor.RED\\n```\"},{\"name\":\"MAROON\",\"type\":\"static final Color\",\"description\":\"![](https://images.code.org/73677b903bcf7902a0c7d5c4f991329f-maroon.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(128, 0, 0)`\\n\\n```\\nColor.MAROON\\n```\"},{\"name\":\"YELLOW\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/cba4a2a4bb056de32b308bfe92096573-yellow.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(255, 255, 0)`\\n\\n```\\nColor.YELLOW\\n```\"},{\"name\":\"OLIVE\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/9e5fd83657c54e6e7350fd068404d705-olive.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(128, 128, 0)`\\n\\n```\\nColor.OLIVE\\n```\"},{\"name\":\"LIME\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/d5b11a793c7c70388fcf3ddde43a959b-lime.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(0, 255, 0)`\\n\\n```\\nColor.LIME\\n```\"},{\"name\":\"GREEN\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/6d917457a7f6b36471fd9750554ae260-green.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(0, 128, 0)`\\n\\n```\\nColor.GREEN\\n```\"},{\"name\":\"AQUA\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/e30eb9bf832cb794b322775790c943d7-aqua.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(0, 255, 255)`\\n\\n```\\nColor.AQUA\\n```\"},{\"name\":\"TEAL\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/2a95b56ce502a3f2080bf09018561f97-teal.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(0, 128, 128)`\\n\\n```\\nColor.TEAL\\n```\"},{\"name\":\"BLUE\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/065617b55f06be799f9611bfb250300b-blue.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(0, 0, 255)`\\n\\n```\\nColor.BLUE\\n```\"},{\"name\":\"NAVY\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/e142367b233f56c145261ad88dd5c46e-navy.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(0, 0, 128)`\\n\\n```\\nColor.NAVY\\n```\"},{\"name\":\"FUSCHIA\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/a4a6e27ede4c4e582efc0d8b112f3ae4-fuschia.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(255, 0, 255)`\\n\\n```\\nColor.FUSCHIA\\n```\"},{\"name\":\"PURPLE\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/4f0eaeb850860415fe76de49ea685b04-purple.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(128, 0, 128)`\\n\\n```\\nColor.PURPLE\\n```\"},{\"name\":\"PINK\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/d334be24b3591a63ca603afeb226f852-pink.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(255, 192, 203)`\\n\\n```\\nColor.PINK\\n```\"},{\"name\":\"ORANGE\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/964786ea14d82f42c18e92cddeea2db2-orange.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(255, 165, 0)`\\n\\n```\\nColor.ORANGE\\n```\"},{\"name\":\"GOLD\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/2908252cd4703303e52b7e71b6a965dd-gold.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(255, 215, 0)`\\n\\n```\\nColor.GOLD\\n```\"},{\"name\":\"BROWN\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/705867965070f4a6da518e0f64ba595a-brown.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(165, 42, 42)`\\n\\n```\\nColor.BROWN\\n```\"},{\"name\":\"CHOCOLATE\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/e915eff24c0a7070f00ec212c6b9e5cd-chocolate.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(210, 105, 30)`\\n\\n```\\nColor.CHOCOLATE\\n```\"},{\"name\":\"TAN\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/10654eddb019309e74fb2e63780bcfca-tan.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(210, 180, 140)`\\n\\n```\\nColor.TAN\\n```\"},{\"name\":\"TURQUOISE\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/d3c84eebbb9aab2cf0b528dbf2e8468c-turquoise.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(64, 224, 208)`\\n\\n```\\nColor.TURQUOISE\\n```\"},{\"name\":\"INDIGO\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/a97859ea5884ce8c8d3289bddd4482a3-indigo.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(75, 0, 130)`\\n\\n```\\nColor.INDIGO\\n```\"},{\"name\":\"VIOLET\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/f6d4be75167cc8727f8c50d8edb1e443-violet.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(238, 130, 238)`\\n\\n```\\nColor.VIOLET\\n```\"},{\"name\":\"BEIGE\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/2dd6092f3ddee65e2581e3c63ea2093e-beige.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(245, 245, 220)`\\n\\n```\\nColor.BEIGE\\n```\"},{\"name\":\"IVORY\",\"type\":\"static final Color \",\"description\":\"![](https://images.code.org/d6b983a7897b786ba39d1fa5954a5a85-ivory.jpg) \\u0026nbsp;\\u0026nbsp; a color with the value `(255, 255, 240)`\\n\\n```\\nColor.IVORY\\n```\"}]",
  "key": "Color",
  "name": "Color",
  "syntax": "",
  "tips": "",
  "methods": [
    {
      "name": "Color",
      "position": 0,
      "key": "color",
      "overload_of": null,
      "content": "Creates a `Color` object from a `String`, like `\"red\"` or `\"brown\"`. If the name is not recognized, this constructor will throw an `IllegalArgumentException`.",
      "parameters": "[{\"name\":\"color\",\"type\":\"String\",\"required\":true,\"description\":\"the name of the color (case-insensitive)\"}]",
      "examples": "[{\"description\":\"**Possible color names are:**\\n\\n![](https://images.code.org/b93be88eb3e0a7ea66fe63503b51dee1-color_names.png)\",\"code\":\"```\\nColor myColor = new Color(\\\"navy\\\");\\n```\"}]",
      "syntax": "`public Color(String color) throws IllegalArgumentException`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "Color",
      "position": 1,
      "key": "color2",
      "overload_of": "color",
      "content": "Create a new `Color` object based on the red, green, and blue values provided.",
      "parameters": "[{\"name\":\"red\",\"type\":\"int\",\"required\":true,\"description\":\"the red value to set the `Color` (between `0` and `255`)\"},{\"name\":\"green\",\"type\":\"int\",\"required\":true,\"description\":\"the green value to set the `Color` (between `0` and `255`)\"},{\"name\":\"blue\",\"type\":\"int\",\"required\":true,\"description\":\"the blue value to set the `Color` (between `0` and `255`)\"}]",
      "examples": "[{\"code\":\"```\\nColor myColor = new Color(251, 139, 36);\\n```\"}]",
      "syntax": "`public Color(int red, int green, int blue)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "Color",
      "position": 2,
      "key": "color3",
      "overload_of": "color",
      "content": "Creates a new `Color` object by copying the red, green, and blue values from the specified `Color`.",
      "parameters": "[{\"name\":\"color\",\"type\":\"Color\",\"required\":true,\"description\":\"the color to copy\"}]",
      "examples": "[{\"code\":\"```\\nColor firstColor = new Color(251, 139, 36);\\nColor secondColor = new Color(firstColor);\\n```\"}]",
      "syntax": "`public Color(Color color)`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "getRed",
      "position": 3,
      "key": "getred",
      "overload_of": null,
      "content": "Returns the amount of red of this `Color` (ranging from `0` to `255`).",
      "parameters": "[]",
      "examples": "[{\"code\":\"```\\nColor myColor = new Color(251, 139, 36);\\nint redValue = myColor.getRed();\\nSystem.out.println(\\\"The red value of myColor is \\\" + redValue);\\n```\\n\\n**Output:**\\n\\nThe red value of myColor is 251\"}]",
      "syntax": "`public int getRed()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "getGreen",
      "position": 4,
      "key": "getgreen",
      "overload_of": null,
      "content": "Returns the amount of green of this `Color` (ranging from `0` to `255`).",
      "parameters": "[]",
      "examples": "[{\"code\":\"```\\nColor myColor = new Color(251, 139, 36);\\nint greenValue = myColor.getGreen();\\nSystem.out.println(\\\"The red value of myColor is \\\" + greenValue);\\n```\\n\\n**Output:**\\n\\nThe red value of myColor is 139\"}]",
      "syntax": "`public int getGreen()`",
      "external_link": null,
      "return_value": null
    },
    {
      "name": "getBlue",
      "position": 5,
      "key": "getblue",
      "overload_of": null,
      "content": "Returns the amount of blue of this `Color` (ranging from `0` to `255`).",
      "parameters": "[]",
      "examples": "[{\"code\":\"```\\nColor myColor = new Color(251, 139, 36);\\nint blueValue = myColor.getBlue();\\nSystem.out.println(\\\"The red value of myColor is \\\" + blueValue);\\n```\\n\\n**Output:**\\n\\nThe red value of myColor is 36\"}]",
      "syntax": "`public int getBlue()`",
      "external_link": null,
      "return_value": null
    }
  ]
}