---
ne:
  data:
    game:
      name:
        Unplug1: Introduction to Computer Science
        Maze: The Maze
        Multi: Multiple Choice Stuffs
        Unplug2: Computational Thinking
        Unplug3: Graph Paper Programming
        Artist: The Artist
        Unplug4: Algorithms
        Artist2: The Artist 2
        Unplug5: Functions
        Farmer: The Farmer
        Unplug6: Conditionals
        Artist3: The Artist 3
        Unplug7: Song Writing
        Farmer2: The Farmer 2
        Unplug8: Abstraction
        Artist4: The Artist 4
        Unplug9: Relay programming
        Farmer3: The Farmer 3
        Unplug10: The Internet
        Artist5: The Artist 5
        Unplug11: Wrap-up
        MazeEC: The Maze
        Bounce: Bounce
        Flappy: Flappy Bird
        Jigsaw: Jigsaw
        MazeStep: Maze Step Mode
        Wordsearch: Wordsearch
        Webapp: App Lab
        ArtistEC: The Artist
        TextMatch: Text Match
        StudioEC: Play Lab
        Applab: App Lab
        NetSim: Internet Simulator
        Custom: Artist
        CustomStudio: Play Lab
    trophy:
      name:
        Bronze: Bronze
        Silver: Silver
        Gold: Gold
    concept:
      description:
        sequence: Sequence
        if: If block
        if_else: If-else block
        loop_times: Repeat times block
        loop_until: Repeat until block
        loop_while: While block
        loop_for: Counter block
        function: Functions
        parameters: Functions with parameters
    level:
      instructions:
        maze_2_2: 'Can you help me to catch the naughty pig? Stack a couple of "move
          forward" blocks together and press "Run" to help me get there. '
        maze_2_1: This pig is ruffling my feathers. Help me to find him!
        maze_2_2_5: Trace the path and lead me to the silly pig. Avoid TNT or the
          feathers will fly!
        maze_2_3: Guide me to the green evilness! (Watch out for TNT)
        maze_2_4: Keep calm and help me to find the bad pig. Otherwise I might get
          angry!
        maze_2_5: There's a way I can get to the silly pig using only 2 blocks. Can
          you figure it out?
        maze_2_6: Try to get me to the green intruder using only three blocks.
        maze_2_7: Help me banish this bad piggy using the fewest number of blocks.
          Try using more than one "repeat times" block.
        maze_2_8: 'When a block is grey, that means you can''t delete it. Solve this
          puzzle using the "repeat" block that repeats 3 times. Try putting these
          3 blocks inside the grey "repeat" block: move, move, turn.'
        maze_2_9: Ok, try the new "repeat until" block - it will repeat until I reach
          the annoying pig.
        maze_2_10: Ok, one last time for practice - can you solve this one using only
          4 blocks?
        maze_2_11: Dear person.  Me zombie. Me hungry. Must... get... to sunflower...
          Can you get me there with only 5 blocks?
        maze_2_12: Ok, this is similar, but slightly different. Can you do it in only
          5 blocks?
        maze_2_13: 'Use the new "if" block to let me decide when to turn. Hint: you
          only need one more block, but learn how we set it up so you can do it on
          your own next time.'
        maze_2_14: Ok, this is just like the last puzzle, but you need to remember
          how you used the "if" block and the "repeat" block together.
        maze_2_15: Me want sunflower! Use an "if" block to get me there with the fewest
          number of blocks.
        maze_2_16: Ok, let's do that again for practice - this isn't very different,
          but watch out for the chompers!
        maze_2_17: The "If-else" blocks checks a condition, and then does one thing
          OR another. To get me to the sunflower try to use this new block.
        maze_2_18: |-
          One more practice of the "if-else" block, can you
          get it right on your first try?
        maze_2_19: Can you add just 3 blocks to help me solve a more complex maze?
          If you do it right, I can walk any curvy path no matter the length.
        turtle_1_1: Hi, I'm an artist. You can write code to make me draw almost anything.
          Use a few blocks to make me draw over the grey lines in the picture.
        turtle_1_2: 'अब, वर्ग  बनाउनुहोस्। NOTE: use your favorite color by picking
          it in the new "set color" block.'
        turtle_1_3: Make a square using only 3 blocks.
        turtle_1_4: 'Draw a triangle whose sides are all in different colors, using
          the "random color" option that picks a different color each time. Hint:
          you''ll have to figure out how far to turn by clicking on the number in
          the turn block.'
        turtle_1_5: Now, for practice, draw a triangle and then a square to draw an
          envelope.
        turtle_1_6: 'Can you figure out how draw this triangle and square? Hint: Do
          the triangle first, then figure out how much to turn before drawing the
          square.'
        turtle_1_7: Ok, let's make it a bit harder - see if you can draw these green
          glasses. The squares are 100 pixels on each side, and they're 50 pixels
          apart. Don't forget to draw in green!
        turtle_1_8: Ok, try to figure out what happens if you run this code (or press
          "Run" to try it). Then, repeat it enough times to complete the drawing.
          The colors will be different every time.
        turtle_1_9: Can you figure out what number to replace the question marks with
          to draw a circle?
        turtle_1_10: 'तपाईँले गरेरै छोड्नु भयो! Now, draw anything you want. Some
          fun ideas: a stick figure, snowflake, or spiral. Also try the new "set width"
          block. रमाईलो गर्नुहोस्!'
        turtle_4_1: 'Can you draw a triangle (with edges of 100 pixels) with only
          3 blocks? Hint: use a "repeat" block.'
        turtle_4_2: Add a "turn right by 90 degrees" block somewhere in the middle
          of the program already out on the workspace to draw these triangles.
        turtle_4_3: Ok, here's the code you wrote to draw a single triangle. Can you
          add a "repeat" and "turn" block to make a pretty flower?
        turtle_4_4: 'Here''s the same code from the previous puzzle, but turning only
          36 degrees after drawing each triangle. How many times does this need to
          repeat? (Hint: after 360 degrees of turning the drawing will come full circle)'
        turtle_4_5: 'Here''s the same code from the previous puzzle, but repeating
          the turns 36 times. How many degrees should the turns be? (Hint: after 360
          degrees of turning the drawing will come full circle)'
        turtle_4_6: Using only 3 blocks, can you draw a square with edges of 20 pixels?
        turtle_4_7: 'Here''s the code for drawing the square from last puzzle. Can
          you repeat it to draw 10 adjacent squares like a ladder? Hint: you only
          need 2 more blocks.'
        turtle_4_8: Here's the solution to the previous puzzle. Can you add just 2
          more blocks to complete the drawing?
        turtle_4_9: Here's the solution to the previous puzzle. How many degrees should
          you turn to complete the drawing? (You probably need to guess a few times)
        turtle_4_10: Here's the solution to the previous puzzle. How many times should
          you repeat to complete the drawing?
        turtle_4_11: Try changing the numbers in the "turn" and "repeat" blocks to
          make different patterns. Or, experiment changing the rest of the code to
          draw anything you want.
        maze_karel_1_1: Hi, I'm a farmer. I need your help to flatten the field on
          my farm so it's ready for planting. Move me to the pile of dirt and use
          the "remove" block to remove it.
        maze_karel_1_2: Next, move me to the hole and fill it with TWO shovelfuls
          of dirt, using the "fill" block.
        maze_karel_1_3: Move me to the pile of dirt and tell me how many shovelfuls
          to remove using as few blocks as possible.
        maze_karel_1_4: 'Can you help me remove all four piles of dirt? Hint: use
          a repeat block if you can.'
        maze_karel_1_5: 'Help me fill in all these holes with 5 shovelfuls of dirt.
          Hint: you can put a "repeat" block inside the "while" block.'
        maze_karel_1_6: Remove all the piles of dirt, using as few blocks as possible.
          The new options in the dropdown menu on the "while" block tell me if I'm
          standing on a pile or a hole.
        maze_karel_1_7: Wow, I found a really deep hole! I don't know how many shovelfuls
          of dirt it needs. Can you write a program that fills it until the ground
          is even?
        maze_karel_1_8: Help me fill in the hole at the end of the field, using as
          few blocks as possible.
        maze_karel_1_9: 'Make me remove all these piles of dirt. Try to use as few
          blocks as possible. Hint: try using a "while" block.'
        maze_karel_1_10: I'm working late, so it's dark out, and I can't tell how
          large the piles are. Now I don't have all the options I used to have on
          the while block. Move me along the field, and if there is a pile, remove
          it.
        maze_karel_1_11: 'It''s still dark outside. Move me along the field. If there
          is a pile, remove it, and if there is a hole, fill it in. Hint: use the
          dropdown menu of options on the "if" block.'
        turtle_2_1: 'Hello. Me zombie artist. Me love drawing! Help me draw a square
          in a special color. Important note: you have all the same blocks but they''ve
          now been arranged in categories.'
        turtle_2_2: Welcome to using functions, which let you define new blocks! Try
          the new "draw a square" block, found in the "Functions" category, to draw
          a small 50x50 green square.
        turtle_2_3: Use the "repeat" block (in the "Loops" category) to draw 3 squares
          of size 100, each 120 degrees apart. And do it in 3 different, random colors.
        turtle_2_4: 'Now we''re going to get fancy. Change the code to draw 36 squares,
          100 pixels wide, and each 10 degrees apart. Hint: you may want to use the
          slider to make me go faster.'
        turtle_2_5: Draw squares with sides of 50, 60, 70, 80, and 90 pixels.  You'll
          need to use the "draw a square" function five times.
        turtle_2_6: 'Ok, this program will use a counter, to draw the same squares
          as last time. You want the square to be the same size as the counter, so
          use the "counter" block. Hint: It''s in the Variables category.'
        turtle_2_7: Here's a program to draw a spiral, but the blocks are disabled
          so they won't run. Make a new program using a "for" block (in the Loops
          category) and "counter" block (in the Variables category) to draw the same
          spiral.
        turtle_2_7_5: There's a new "draw a snowman" function (in the Functions category).
          Draw two snowmen, of height 250 and 100.
        turtle_2_8: This one's a bit tricky. Use the "draw a snowman" function and
          the new "jump forward" block (in the Actions category). Draw 3 snowmen in
          different colors, 100 pixels apart.
        turtle_2_9: Use a "for" loop to draw a family of snowmen with heights of 110,
          100, 90, 80, and 70. The snowmen should all be 60 pixels apart.
        turtle_2_10: Here's some code to try experimenting with different spirals.  What
          happens if you change the turn amount? Or set a random color in the loop?  Draw
          anything you like.
        maze_karel_2_1: 'Try using the blocks to help me remove all the piles and
          fill in all the holes on the ground. Try to use loops instead of using too
          many blocks. Hint: you can put a loop inside another loop.'
        maze_karel_2_2: We've defined our own block called "fill 5", which is now
          in the Functions category. Use it to help me fill in this hole.
        maze_karel_2_3: Use the new "fill 5" function block to make me fill in all
          the holes. You'll have to drag out the "fill 5" block out from the Functions
          category.
        maze_karel_2_4: Define a new function that removes 7 shovelfuls. Then use
          it to write a program that helps me remove all the piles.
        maze_karel_2_5: Create a new function that removes 6 shovelfuls from a pile,
          and use it to help me level out all the piles.
        maze_karel_2_6: Use two new functions, "fill 8" and "remove 8", to help me
          level out the pile and fill in the hole.
        maze_karel_2_7: There's a cow in my field! Write a new function that helps
          me avoid the cow and remove the pile. Put all your blocks inside the new
          function.
        maze_karel_2_8: Use this new function, "avoid the cow and remove 1", to help
          me remove all the piles.
        maze_karel_2_9: Ok, here's a function that removes 4 different piles of dirt
          in a vertical column. Try putting this function inside a loop, so that you
          remove all the piles of dirt using only a few new blocks.
        maze_karel_2_10: Move me across the field, and use these two functions to
          help me remove all the piles and fill all the holes.
        turtle_3_1: This puzzle shows you how the "draw a square" and "draw a circle"
          functions are defined.  Defining a function doesn't run its blocks.  You
          have to pull out the "draw a square" block to actually draw a square.
        turtle_3_2: Using the "draw a square" function as an example, create a "draw
          a triangle" function and use it.
        turtle_3_3: 'Draw triangular fences around the cats and a square fence around
          the cow.  Tip: test the program as you go along.'
        turtle_3_4: See if you can figure out how to use "draw a square" and "draw
          a triangle" (and some other blocks) to draw a house around the lion.
        turtle_3_5: 'Now create a new "draw a house" function and use it to house
          two cats. Hint: create a new function using the "do something" block, and
          type your own text to name the block.'
        turtle_3_6: 'Using "draw a square" as an example, add an input named "length"
          to "draw a triangle". Then, draw triangles in different sizes. (Hint: click
          the star to add an input to a function)'
        turtle_3_7: Add an input named "length" to "draw a house" and build a big
          house for the elephant (with edges 150 pixels long)
        turtle_3_8: Modify "draw a house" so I end up at the bottom right corner after
          drawing a new house. Use this modified function to draw three houses.
        turtle_3_9: Can you re-create the "draw a house" function without help? Try
          it, and then draw a row of houses.
        turtle_3_10: You've learned a lot! Now use it to draw whatever you want. Try
          to draw a star, or a spiral, or a fancy snowflake.
        maze_karel_debug_seq_1: Welcome to debugging! My code doesn't work right.
          Can you spot the problem and fix it so that I can get my field flat and
          ready for planting?
        maze_karel_debug_seq_2: What's wrong with this program? How should you fix
          it so I can remove that pile?
        maze_karel_debug_repeat: De-bug this program for me so my field will be nice
          and flat.
        maze_karel_debug_while: How should you change this program to help me fill
          the hole?
        maze_karel_debug_if: Help! Fix the program so my field will be completely
          flat.
        maze_karel_debug_if_else: De-bug this program so I can fill in the holes and
          remove all the piles.
        maze_karel_debug_function_1: What should you change about this program to
          help me remove all the piles?
        maze_karel_debug_function_2: Can you de-bug this program for me so I can make
          my field flat?
        maze_karel_debug_function_3: 'Edit this program so I''ll remove all the piles
          on my field. '
        turtle_5_1: Try running this program, and make changes to see what happens.
          Can you figure out how it works? (Or delete it and replace it with something
          totally different)
        turtle_5_2: Try running this program, and make changes to see what happens.
          Can you figure out how it works? (Or delete it and replace it with something
          totally different)
        turtle_5_3: Try running this program, and make changes to see what happens.
          Can you figure out how it works? (Or delete it and replace it with something
          totally different)
        turtle_5_4: Try running this program, and make changes to see what happens.
          Can you figure out how it works? (Or delete it and replace it with something
          totally different)
        turtle_5_5: Try running this program, and make changes to see what happens.
          Can you figure out how it works? (Or delete it and replace it with something
          totally different)
        turtle_5_6: Try running this program, and make changes to see what happens.
          Can you figure out how it works? (Or delete it and replace it with something
          totally different)
        maze_3_1: I need to get to that pig! Type in a couple of calls to move();
          so I can get my eggs back.
        maze_3_2: Write me a program, so I can make it all the way to the pig.
        maze_3_3: How should I get to the pig? Make sure I don't run into the box
          of TNT!
        maze_3_4: Argh! Write me a program that gets me around the TNT and to the
          pig.
        Custom_builder: Drag blocks from the toolbox to the workspace to draw the
          level you wish to create. Press "Run" when you are ready.
        jigsaw_1: Click the block
        jigsaw_2: Drag the block to the target
        jigsaw_3: Arrange the blocks to form the image
        jigsaw_4: Arrange the blocks to form the image
        jigsaw_5: Arrange the blocks to form the image
        jigsaw_6: Arrange the blocks to form the image
        jigsaw_7: Arrange the blocks to form the image
        jigsaw_8: Arrange the blocks to form the image
        jigsaw_9: Arrange the blocks to form the image
        jigsaw_10: Arrange the blocks to form the image
        jigsaw_11: Arrange the blocks to form the image
        jigsaw_12: Arrange the blocks to form the image
        jigsaw_13: Fix the puzzle!
        mazestep_1: Maze step description here
        mazestep_2: Maze step description here
        mazestep_3: Maze step description here
        mazestep_4: Maze step description here
        mazestep_5: Maze step description here
        studio_c2_1: Can you make this dog say "hello world"?
        studio_c2_2: |-
          Can you make the dog say something
          and then have the cat say something afterwards?
        studio_c2_3: |-
          Can you write a program to make this
          dog move to the cat?
        studio_c2_4: |-
          Can you write a program that makes
          the dog move to the cat, and have the cat say "hello" when the dog reaches
          him?
        studio_c2_5: |-
          Can you write a program to make the
          octopus say "hello" when it is clicked?
        studio_c2_6: |-
          Can you write a program to make Waddles
          move around using the up / down / left /right keys to hit all of the targets?
        studio_c2_7: |-
          The "repeat forever" block allows
          you to run code continuously. Can you attach blocks to move this dinosaur
          up and down repeatedly?
        studio_c2_8: |-
          Can you have Waddles say "Ouch!"
          and play a "hit" sound if he runs into the dinosaur, and then move him with
          the arrows to make that happen?
        studio_c2_9: |-
          Can you add a block to score a point
          when Waddles runs into the octopus, and then move him with the arrows until
          you score?
        studio_c2_10: |-
          Can you add blocks to change the background
          and the speed of Waddles, and then move him with the arrows until you score?
        studio_c2_11: |-
          Create your own story. When you're
          done, click Finish to let friends try your story on their phones.
        studio_c3_story_1: Can you make this dog say "hello world"?
        studio_c3_story_2: |-
          Can you make the dog say something
          and then have the cat say something afterwards?
        studio_c3_story_3: |-
          Can you write a program to make this
          dog move to the cat?
        studio_c3_story_4: |-
          Can you write a program that makes
          the dog move to the cat, and have the cat say "hello" when the dog reaches
          him?
        studio_c3_story_5: |-
          Can you add a block to make the octopus
          happy?
        studio_c3_story_6: |-
          Create your own story. When you're
          done, click Finish to let friends try your story on their phones.
        studio_c3_game_1: |-
          Can you write a program to make the
          octopus say "hello" when it is clicked?
        studio_c3_game_2: |-
          Can you write a program to make Waddles
          move around using the up / down / left /right keys to hit all of the targets?
        studio_c3_game_3: |-
          The "repeat forever" block allows
          you to run code continuously. Can you attach blocks to move this dinosaur
          up and down repeatedly?
        studio_c3_game_4: |-
          Can you have Waddles say "Ouch!"
          and play a "hit" sound if he runs into the dinosaur, and then move him with
          the arrows to make that happen?
        studio_c3_game_5: |-
          Can you add a block to score a point
          when Waddles runs into the octopus, and then move him with the arrows until
          you score?
        studio_c3_game_6: |-
          Can you add blocks to change the background
          and the speed of Waddles, and then move him with the arrows until you score?
        studio_c3_game_7: Create your own game. When you're done, click Finish to
          let friends try your game on their phones.
        studio_playlab_1: Waddles wants to say "hello" - can you help him?
        studio_playlab_2: Cave Boy (actor 1) and Jasmine (actor 2) would like to say
          "hello" to each other. Can you help them by using the "say" block twice?
        studio_playlab_3: Can you help Tennis Girl get to the flag?
        studio_playlab_4: Can you help Tennis Boy (actor 1) get to Tennis Girl (actor
          2) and play a sound when he gets there?
        studio_playlab_5: Can you help the Spacebot say "greetings earthlings" when
          it is clicked? Don’t forget to click it after you click Run
        studio_playlab_6: Can you help the Witch move around using the up/down/right/left
          arrow keys to get to all the magical fireballs?
        studio_playlab_7: The "repeat forever" block allows you to run code continuously.
          Can you attach blocks to it to help the wizard move right and left repeatedly?
        studio_playlab_8: Can you add a block to score a point and a block to play
          a sound when the unicorn runs into the wizard, and then move him with the
          arrows until you score?
        studio_playlab_9: Set the background for this alien invasion and help the
          Spacebot get to the alien faster by changing its speed. Then move him with
          the arrow keys to get to the Spacebot and alert everyone else
        studio_playlab_10: Create your own game. When you're done, click Finish to
          let friends try your game on their phones.
        studio_iceage_hello1: Sid wants to gather everyone for a new adventure. Can
          you help him say "hello" by dragging the "say" block out into the work area
          and typing the word "hello" inside?
        studio_iceage_hello2: Manny (actor 1) found Sid (actor 2) and wants to invite
          him on the adventure. Help them greet each other by using the the "actor
          say" block twice.
        studio_iceage_move_to_flag: Scrat is looking for his acorn!  Help him go the
          last 200 pixels using the "move" block.
        studio_iceage_move_to_actor: Diego (actor 1) is searching for Manny (actor
          2). Help Diego move 200 pixels down to Manny using the "move actor" block.
          Next, connect a block to the "when actor touches" event to play a sound
          when they find each other.
        studio_iceage_repeat: The "repeat forever" block allows you to run code continuously.
          Can you attach blocks to it to help Granny get some exercise by moving left
          and right repeatedly?
        studio_iceage_click_hello: Can you help Sid do a final call for friends when
          clicked? Don’t forget to click on him after you hit Run.
        studio_iceage_move_events: Scrat is still looking for acorns! Help him scamper
          around by attaching the "move" block to each of the events and changing
          the direction to work for each arrow key. When you’re done, click Run and
          try to collect all of the acorns.
        studio_iceage_sound_and_points: We’ve provided most of the code that keeps
          Granny moving left and right, as well as the code to move Sid around the
          screen. Can you finish the code and add blocks to the "when actor touches"
          event to make it so that you both play a sound and score a point when Sid
          and Granny collide? Press Run to play the game.
        studio_iceage_warn_ice_age: Everyone needs to move faster because an ice age
          is coming! Change the background to an icy background and set Sid’s speed
          to fast, then press Run and move him to Diego to warn him.
        studio_iceage_throw_hearts: Sid wants to let his grandmother, Granny, know
          that he loves her. Use the "actor throw" command to have Sid (actor 1) throw
          hearts at Granny (actor 2)! Set Granny's mood to happy when she gets hit
          with the hearts.
        studio_iceage_free_play: Time to create your own game or story! When you're
          done, click Finish to let friends try your game on their phones, tablets,
          or computers!
        studio_gumball_hello1: Anais wants to make some new friends. Can you help
          her say "hello" by dragging the "say" block out into the work area and typing
          the word "hello" inside?
        studio_gumball_hello2: Darwin (actor 1) and his brother Gumball (actor 2)
          are heading to school.  Help them greet each other by using the "actor say"
          block twice.
        studio_gumball_move_to_flag: Banana Joe is about to win a field day race!  Help
          him go the last 200 pixels using the "move" block.
        studio_gumball_move_to_actor: Gumball (actor 1) and Darwin (actor 2) are late
          for the field day! Help Gumball move 200 pixels down to Darwin using the
          "move actor" block.  Next, connect a block to the "when actor touches" event
          to play a sound when they find each other.
        studio_gumball_repeat: The "repeat forever" block allows you to run code continuously.  Can
          you attach blocks to it to help Gumball warm up for his race by moving left
          and right repeatedly?
        studio_gumball_click_hello: Can you help Anton announce the start of a race
          by saying "Ready, set, go!"? To test your program, don’t forget to click
          Anton after you click Run!
        studio_gumball_move_events: Darwin is in the flag gathering contest! Help
          him run around by attaching the "move" block to each of the events. When
          you’re done, click Run and try to collect all of the flags.
        studio_gumball_sound_and_points: We’ve provided most of the code that keeps
          Anton (actor 2) moving left and right, as well as the code to move Banana
          Joe (actor 1) around the screen.  Can you finish the code and add blocks
          to the "when actor touches" event to make it so that you both play a sound
          and score a point when Banana Joe and Anton collide?  Press Run to play
          the game.
        studio_gumball_warn_food_fight: Darwin just escaped a food fight! Change the
          background to "characters" and set Darwin’s speed to fast, then press Run
          and move him to Penny to warn her.
        studio_gumball_join_food_fight: Join the food fight! Use the "actor throw
          item right" command to have Banana Joe (actor 1) throw food at Anton (actor
          2)! Set Anton’s mood to angry when he gets hit.
        studio_gumball_free_play: Create your own game or story. When you're done,
          click Finish to let friends try your game on their phones, tablets, or computers!
        studio_full_sandbox: Create your own game. When you're done, click Finish
          to let friends try your game on their phones.
        studio_k1_1: Can you make this dog say "hello world"?
        studio_k1_2: |-
          Can you make the dog say something
          and then have the cat say something afterwards?
        studio_k1_3: |-
          Can you write a program to make this
          dog move to the cat?
        studio_k1_4: Make the dog move to the cat and the cat say "hello" when he
          gets there.
        studio_k1_5: |-
          Can you add a block to make the octopus
          happy?
        studio_k1_6: Create your own story! Move around the cat and dog, and make
          them say things.
        maze_wordsearch_k_1: Move me to spell the word EAST
        maze_wordsearch_k_2: Move me to spell the word SOUTH
        maze_wordsearch_k_3: Move me to spell the word WEST
        maze_wordsearch_k_4: Move me to spell the word NORTH
        maze_wordsearch_k_6: Move me East and then South to spell the word JUMP
        maze_wordsearch_k_9: Move me one way, then another to spell the word CODE
        maze_wordsearch_k_13: Move me one way, then another to spell the word DEBUG
        maze_wordsearch_k_15: Move me one way, then another to spell the word ABOVE
        maze_wordsearch_k_16: Move me one way, then another to spell the word BELOW
        maze_wordsearch_k_20: This is a test! Move me one way, then another to spell
          the word STORY
        applab_ec_simple: Create your app by using the blocks in the toolbox.
        turtle_ec_1_2: 'अब, वर्ग  बनाउनुहोस्। NOTE: use your favorite color by picking
          it in the new "penColor" block.'
        turtle_ec_1_10: 'तपाईँले गरेरै छोड्नु भयो! Now, draw anything you want. Some
          fun ideas: a stick figure, snowflake, or spiral. Also try the new "penWidth"
          block. रमाईलो गर्नुहोस्!'
        studio_ec_sandbox: Create your own game. When you're done, click Finish to
          let friends try your game on their phones.
    video:
      name:
        maze_intro: Maze Intro
        artist_intro: Artist Intro
        farmer_intro: Farmer Intro
        flappy_intro: Flappy Intro
        loop_times: Repeat Times Block
        loop_until: Repeat Until Block
        if: If Block
        if_else: If/else Block
        if_else_scrat: If/else Block
        function: Functions
        loop_while: While Block
        loop_for: Counter Block
        parameters: Functions with Parameters
        hoc_wrapup: Hour of Code Wrapup
        Unplug1: What is CS?
        Unplug2: Computational Thinking
        Unplug3: Graph Paper Programming
        Unplug4: Algorithms
        Unplug5: Functions
        Unplug6: Conditionals
        Unplug7: Songwriting
        Unplug8: Abstraction
        Unplug9: Relay programming
        Unplug10: Internet
        Unplug11: Wrap-up
        C1_happy_maps_unplugged: Happy Maps
        C1_moveitmoveit_unplugged: Move It, Move It
        C1_bigevent_unplugged: The Big Event
        C1_getting_loopy: Getting Loopy
        C1_pair_programming: Pair Programming
        C1_maze_intro_sequencing: Maze Sequencing Intro
        C1_maze_debugging: Maze Debugging
        C1_bee_level_intro: Bee Level - Intro
        C1_artist_intro: Artist Intro
        C1_spelling_bee_intro: Spelling Bee Intro
        C1_zuck_repeat_loop: Maze Loops
        C1_bee_loops: Bee Loops
        C1_maze_loops: Maze Loops
        C1_playlab_storytelling: Play Lab - Create a Story
        C1_planting_seed: Planting a Seed
        C1_building_foundation: Building a Foundation
        C1_going_places_safely: Going Places Safely
        C2_maze_intro: Maze Intro
        C2_artist_intro: Artist Intro
        C2_zuck_repeat_loop: Maze Loops
        C2_artist_loops: Artist Loops
        C2_artist_debugging: Artist Debugging
        C2_bee_loops: Bee Loops
        C2_bee_debugging: Bee Debugging
        C2_bee_conditionals: Bee Conditionals
        C2_playlab_createstory: Play Lab - Create a Story
        C2_graph_paper: Graph Paper Programming
        C2_conditionals_with_cards: Conditionals
        C2_binary_bracelets: Binary Bracelets
        C2_relay_programming: Relay programming
        C2_paper_airplanes: Paper Airplanes
        C2_digital_footprint: Your Digital Footprint
        C2_digital_footprint_v2: Your Digital Footprint
        C3_maze_level_4: Maze Loops
        C3_artist_intro: Artist Intro
        C3_artist_functions: Artist Functions
        C3_bee_functions: Bee Functions
        C3_bee_conditionals: Bee Conditionals
        C3_maze_conditionals: Maze Conditionals
        C3_artist_nested_loops: Nested Loops
        C3_farmer_while: While Loops
        C3_bee_nested_loops: Nested Loops
        C3_bee_debugging: Bee Debugging
        C3_bounce: Bounce
        C3_playlab_create_game: Play Lab - Create a Game
        C3_computational_thinking: Computational Thinking
        C3_dice_race: Dice Race
        C3_internet: Internet
        C3_crowdsourcing: Crowdsourcing
        C3_functional_suncatchers: Functional Suncatchers
        C3_songwriting_with_parameters: Songwriting With Parameters
        C4_intro: Introduction
        C4_loops_zombie: Loops
        C4_bee_conditional: Bee Conditionals
        C4_variables_artist: Variables - Artist
        C4_variables_playlab: Variables - Play Lab
        C4_for_loops: For Loops
        C4_for_loops_bee: For Loops
        C4_for_loops_no_bee: For Loops
        C4_math_artist: Programming the Artist with Math
        C4_function_edit: Editing Functions
        C4_function_create: Creating Functions
        C4_function_parameters: Functions with Parameters
        C4_conditionals: Conditionals
        C4_unplugged_algorithms: Algorithms with Tangrams
        C4_unplugged_madlibs: Mad Libs
        C4_unplugged_variables: Variables in Envelopes
        C4_unplugged_forloops: For Loops
        C4_unplugged_parameters: Songwriting with Parameters
        C4_unplugged_binary: Binary
        CSF_my_robotic_friends: My Robotic Friends
        frozen_intro: Hour of Code Intro
        frozen_loops: Introduction to Loops
        frozen_functions: Introduction to Functions
        playlab_intro: Introduction to Play Lab
        playlab_events: Play Lab Events
        playlab_repeat_forever: Play Lab Repeat Forever
        tutorial_puzzle_challenge: Tutorial Puzzle Challenge
        infinity_playlab_intro: Play Lab - Introduction
        infinity_playlab_events: Play Lab - Events
        infinity_playlab_repeat_forever: Play Lab - Repeat Forever
        csp_applab_functions: Introduction to Functions
        csp_applab_functions_parameters: Functions with Parameters
        csp_applab_loops: Loops
        starwars_intro: 'Star Wars: Building a Galaxy with Code - Introduction'
        starwars_typing: 'Star Wars: Building a Galaxy with Code - JavaScript'
        starwars_events: 'Star Wars: Building a Galaxy with Code - Events'
        starwars_congrats: 'Star Wars: Building a Galaxy with Code - Congratulations'
        starwars_blocks_intro: 'Star Wars: Building a Galaxy with Code - Introduction'
        starwars_blocks_events: 'Star Wars: Building a Galaxy with Code - Events'
        starwars_blocks_congrats: 'Star Wars: Building a Galaxy with Code - Congratulations'
        mc_intro: Minecraft - Introduction
        mc_repeat: Minecraft - Repeat
        mc_if_statements: Minecraft - If statements
        mc_congrats_share: Minecraft - Congratulations
        mc_congrats_no_share: Minecraft - Congratulations
        gumball_intro: Gumball Hour of Code - Introduction
        gumball_events: Gumball Hour of Code - Events
        gumball_repeat: Gumball Hour of Code - Repeat statements
        iceage_intro: Ice Age Hour of Code - Introduction
        iceage_events: Ice Age Hour of Code - Events
        iceage_repeat: Ice Age Hour of Code - Repeat statements
        mc_2016_intro: Minecraft Hour of Code - Introduction
        mc_2016_loops: Minecraft Hour of Code - Loops
        mc_2016_events: Minecraft Hour of Code - Events
        mc_2016_spawn: Minecraft Hour of Code - Spawn
        mc_2016_congrats: Minecraft Hour of Code - Congratulations
        mc_2017_congratulations: Minecraft Hour of Code - Congratulations
        CSF_loops_AB: Loops
    callout:
      text:
        drag_blocks: Drag a "move" block and snap it below the other block
        run: Hit "Run" to try your program
        watch_again: Click here to watch the video again
        gray_block_explanation: Blocks that are grey can't be deleted. Can you solve
          the puzzle anyway?
        show_code_explanation: Click here to see the code for the program you're making
        instructions_repeat_explanation: The instructions for each puzzle are repeated
          here
        category_explanation: You have all the same blocks but they've now been arranged
          in categories
        set_sprite_image: Attach a "set actor to image" block to the "when story starts"
          block to enable an actor for this story
        studio_say_text: Type what you want your actor to say within these quotes
        jigsaw_click: Click this block!
        move_elsa_forward: Drag a "Move Forward" block and snap it below the "When
          Run" block to make Elsa move forward
        turn_elsa: Use the "Turn" block to make Elsa turn. The number in the drop-down
          determines how much Elsa turns
        replace_questions: Use the drop-down to replace "???" with a number
        replace_questions_degree: Use the drop-down to replace "???" with the correct
          degree to turn
        repeat_blocks: Use the "Repeat" block and wrap it around the blocks in the
          workspace
        repeat_blocks_1: "(1) Use this block and put it around the grey blocks in
          the workspace"
        repeat_blocks_2: (2) Move the "Repeat" block here, and place the gray blocks
          inside
        snowflake_dropdown: Use this drop-down to create different snowflakes!
        degrees_per_side: Divide 360 by the number of sides to get the size of each
          angle in degrees.
        set_sides: Use this block to set "sides" to the number needed to complete
          the puzzle.
        set_length: Use this block to set "length" to the correct value.
        which_equation: Which equation makes each side shorter for shapes with more
          sides?
        get_nectar: Use the new "get nectar" block.
        actions_category: The tool box got a new look! The "Actions" blocks are in
          here now.
        draw_square_hint: 'Hint: Use the square loop you just made in the last puzzle.'
        edit_function: Click here to edit your function.
        create_function: Click here to open the "Functions" flyout, then click the
          "Create a Function" button.
        house_hint: It's ok if the picture doesn't look like a house yet. We will
          fix it in the next puzzle.
        edit_draw_square: Use this button to edit the function and add the loop.
        edit_get_nectar: Use this button to edit the function and change the direction
          the Bee will turn to get the nectar.
        logic_category: Open the "Logic" flyout to find the "if/else" block.
        length_parameter: Can you update this function so it uses the "length" parameter?
        frozen_diamond_repeat: Use the repeat block to create this shape.
        frozen_circle_function_in_circle_turn: Don't forget to turn after creating
          each circle.
        frozen_circle_function_with_parameter_circle: Use the "create a circle" block
          and change the size.
        frozen_snowflake_branch: Use the "create a snowflake branch" block
        frozen_create_square: Attach more blocks here to create a square
        playlab_drag_say: Drag the "say" block here and type "hello"
        playlab_use_twice: Use this block twice and remember to change the actor number
        playlab_move_girl: Use the "move right" block to move Tennis Girl
        playlab_play_sound: Add "play sound" block here
        playlab_arrow_keys: Remember to use these to move the witch after clicking
          on Run
        playlab_add_move: Add "move" blocks inside this repeat block
        playlab_add_score: Add score blocks here
        playlab_add_blocks: Add your blocks here
        set_variable: Drag a number block here to set your variable
        place_variable: Drag your variable inside this block
        bee_for_loop: Drag the largest number of nectar you want the bee to collect
          here
        place_counter_variable: Drag your counter variable inside this block
        function_editor_draw_square: This is your function definition. These blocks
          run everytime you use the "draw a square" block
        change_here: Make your change here
        write_draw_square_function: Drag blocks from the toolbox into here that draw
          a square
        write_draw_triangle_function: Drag blocks from the toolbox into here that
          draw a triangle
        edit_add_parameter: Click edit to add a parameter in your function
        add_and_drag_parameter: Write in the name of your parameter here, click add,
          and then drag it into your function definition
        fill_in_actor: Fill in the ??? with numbers that correspond to each actor
          (1, 2, and 3)
        repeat: Put blocks inside the loop to repeat commands
        if_bee_nectar: Use the "if" block to decide if the bee should get nectar
        if_else_bee: Use the "if/else" block so that the Bee gets nectar from a flower,
          and makes honey if it's not a flower
        repeat_full_circle: Enter in the number of times the zombie has to move to
          make a full circle
        place_length_variable: Drag the length variable here to replace the question
          marks
        arrows_move_actor: Use the arrows to move the actor
        right_arrow_fireball: Use the right arrow to shoot fireballs
        name_function: Write the name of your function here
        Infinity_move_right_runbutton: Add move block here
        Infinity_move_directions_callout: Which block will make Baymax move up when
          the up arrow is pressed?
        Infinity_move_directions_callout_arrow: Use these arrows to steer
        Infinity_move_collide_callout: Play a sound when this event occurs.
        Infinity_repeat_callout: Place Move blocks inside here
        craft_run_button_callout: Hit "Run" to try your program
        craft_drag_block_callout: Drag a "moveForward();" block and snap it below
          the other block
        craft_callout_preplaced: We've put some blocks here to get you started
        craft_inside_repeat: Repeat actions by placing blocks in here
        craft_callout_preplaced_house: This code will start building your house. Can
          you finish it?
        craft_what_is_iron: Mine this iron!
        craft_callout_moveforward: This code will check for lava, can you add a command
          to move forward?
