---
zh-CN:
  data:
    long_instructions:
      2-3 Artist 1 new: 您好，我是一个艺术家。你写的代码可以让我画任何的东西。 用几个程序模块来让我画一些灰色线条吧。 (每一行是100个像素长)
      2-3 Artist 3.4: |-
        “跳”模块会移动艺术家但不画线。通过使用“向前跳”模块和“向前移动”模块来画出虚线。
        每行是50像素长。
      2-3 Artist 4: 帮我为小猫盖好房子
      2-3 Artist 6: "这所房子需要一个屋顶 ！画出三角形。\n\n提示︰ 三条边都是相同的长度。 \n\n<img src=\"https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif\"\nwidth=\"300\"/>"
      2-3 Artist 9 NEW: 完成这只风筝
      2-3 Artist Free Play: 自己玩吧！想画什么就画什么。
      2-3 Artist Functions 1: "“我，僵尸艺术家，爱画画 ！” \n\n请帮助僵尸画出方形眼镜。 \n\n正方形的宽度是100像素，镜框之间的连接正方形边长短25像素。"
      2-3 Artist Functions 2: |-
        函数能让你定义新的指令块。

        我们将画正方形的模块挪到了一个叫做“画一个正方形”的函数里。这次，用“画一个正方形”函数来画个眼镜吗。

        正方形间隔75像素。
      2-3 Artist Functions 3: |-
        编辑这个函数来画一个边长115像素的正方形，从而能够画出一个更大的眼镜。

        正方形的间隔为45个像素。
      2-3 Artist Functions 4: 现在，将函数放到循环里来画这三个正方形。
      2-3 Artist Nested Loops 10: 让这段代码循环12次来完成这个图案。
      2-3 Artist Nested Loops 12: 让这段代码循环12次就可完成这个弯曲的图案。
      2-3 Artist Nested Loops Free Play: 自由发挥，用嵌套循环画一些很酷的东西
      2-3 Bee Functions 1: |-
        函数能执行多个模块来完成一个任务。

        使用`采2个花蜜`函数来从每朵花采花蜜。
      2-3 Bee Loops 3A: 用一个“重复”循环来收集所有花蜜。
      4-5 Artist 1: '帮我完成画箱子。(每一行是300像素长) '
      4-5 Artist 11: "完成这些绿线。 \n\n它们有300像素长，相隔15像素。"
      4-5 Artist 2: 使用“重复”指令块来画出这个正方形。
      4-5 Artist 3: |-
        这个长方形的花床周长是600。
        长边是200。

        用尽可能少的指令块来画出这个长方形。
      4-5 Artist 3.5: |-
        试着了解这段代码会发生什么（或者点击"运行"来试试）。

        然后，重复它来完成这幅图！
      4-5 Artist 4: |-
        一个圆有多少度？

        循环这些模块来创造一个彩色的圆圈。
      4-5 Artist 5: 在“???”里应该放什么，才能让僵尸用循环来完成这幅画呢？
      4-5 Artist 6: 等边三角形每个角的度数都是60。每条边是200像素。完成这幅画。
      4-5 Artist 7: 直角三角形的各个角分别是30、60、90度。斜边（弦）的长度是200像素。完成这幅画。
      4-5 Artist 8: |-
        足球场中线与边线是垂直的。
        这个场地的周长是800像素，长是240像素。它有多高？

        画出球场的边线和中线。
      4-5 Artist 9: |-
        画出这幅图的另一半，使得这个图变得对称。
        这是个等边三角形，边长为50像素。
      4-5 Artist Assessment 1: "**评估**：用循环来画等边三角形。每条边是300像素。"
      4-5 Artist Free Draw 1: 自由发挥！想画什么就画什么。
      4-5 Artist Patterns 7: 让我们来修改上一关的代码来适应更复杂的这一关。注意这些菱形的重叠方式，尝试将第一个“向后跳跃”的距离从100变到50(一半的距离)-那么现在小艺术家在第二个“向后跳跃”的时候应该跳多远。
      4-5 Artist Patterns Free Play: 自由发挥 - 试着亲手画一个自己的图案！
      4-5 Maze 7: 让僵尸快速的到达向日葵的位置！你能使用11个以下的指令块来解决这道题吗？
      4-5 Maze 9: |-
        现在，我们用一个新的，叫做`重复直到`的指令块。
        这个指令会循环执行，直到僵尸到达向日葵的位置。

        使用新的`重复直到`指令块和最少的指令来解决这道题。
      4-5 Maze Assessment 1: "**评估**：用尽可能少的指令块到达向日葵的位置。"
      4-5 Nested Loops 12: 你能用嵌套循环画出36个三角形吗？
      4-5 Nested Loops 5: 循环下面的代码来创建一个风车。
      4-5 Nested Loops 9: 画出鳄鱼嘴里的牙齿！
      4-5 Nested Loops Assessment 1: "**评估**：用嵌套循环来完成这幅画。"
      4-5 While Loops 1: 将我移到坑旁边，使用“填满”指令块，铲两铲土填满它。
      4-5 While Loops 2: 将我移到土堆那里，然后用“移除”模块来移除五铲土。
      Alien Defender: "**项目想法**: 在游戏实验室创建一个防守游戏！"
      AppLab Intro 7 - Change Screen Color: "<div style=\"float:right\">\n\\t<img\nsrc=\"https://images.code.org/bf9b1fb57751fa90c9b786339914ad70-image-1508521068798.34.54\nAM.png\"
        style=\"height:150px\"> \n</div>\n\n\\*\\*目标: \\*\\* 使屏幕变绿. \n\n\\*\\* 如何:
        \\*\\* 拖入`setProperty()`（设置属性）模块.使用下拉键将屏幕的`\"background-color\"`（背景颜色）设置为`\"green\"`（绿色）。然后点击
        \"运行\" \n\n\\*\\*难住了？点击这里 \\*\\* ![expandable](https://images.code.org/3b5e70522b02867a1df1d5b5e481785e-image-1511279858395.gif)"
      AppLab Intro 7 - Change Text 2: |-
        <div style="float:right">
        <img
        src="https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29
        PM.png" style="height:200px;">
        </div>

        \*\*目标: \*\* 使文本变大和变蓝。

        **如何做到：**你需要两行的代码。让`"label1"`（标签1）的`"font-size"`（字体大小）设为80，`"text-color"`（文本颜色）设为`"blue"`（蓝色）。

        **难住了？**点击这里: \*\* ![expandable](https://images.code.org/2d5d46a03082af3b01847aad6602e2ea-image-1511280140482.gif)
      AppLab Intro 7 - Full Text: |-
        <div style="float:right">
        <img
        src="https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19
        AM.png" style="height:200px">
        </div>

        \*\*目标: \*\* 将按钮设为`"red"`（红色）和`"blue"`（蓝色）。然后在大橙色标签中更改文本.

        **如何做到：**

        -   记住你能将鼠标移动到任何元素上看它们的`"id"`标识
        -   将按钮的`"background-color"`（背景颜色）设置为`"red"`（红色）和`"blue"`（蓝色）
        -   将标签的`"text"`（文本）属性设置成任何文本，比如`"欢迎来到我的应用！"`

        \*\*难住了？点这里: \*\* ![expandable](https://images.code.org/4bf99e7352e7c17a5bf73ced80171f6a-image-1511280628092.gif)
      AppLab Intro 7 - onEvent intro: |-
        <img src="https://images.code.org/3d8c8487ea669563d3401c0009cd9462-image-1511281194897.gif"
        style="float:right;height:200px">

        \*\*目标: \*\* 屏幕将从蓝色开始。添加代码, 当您单击 "绿色如果" 按钮时, 它会变成绿色。

        **如何做到：**在`onEvent()`（当事件发生时）中添加代码, 将屏幕的`"background-color"`（背景颜色）设置为`"green"`（绿色）。

        \*\*难住了？点这里: \*\* ![expandable](https://images.code.org/5ddf6b129bc04b79839b3661ccef788b-image-1511281012076.gif)
      AppLab Intro 7 - onEvent twoButtons: |-
        <img src="https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif"
        style="float:right;height:200px">

        \*\*目标: \*\* 帮助完成这个手电筒应用程序。"打开" 按钮已设为将屏幕变成白色。运行应用程序并试试它。然后编写代码, 用 "关闭" 按钮再次使屏幕变得黑色。

        **如何做到：**
        在空的`onEvent()`（当事件发生时）中添加代码, 将屏幕的`"background-color"`（背景颜色）设置为 `"black"`（黑色）以及标签的`"text-color"`（文本颜色）为`"white"`（白色）。

        \*\*难住了？点这里: \*\* ![expandable](https://images.code.org/020b1d9b465aaf35967a528a92961c13-image-1511281772276.gif)
      AppLab Intro 7 - playSound: |-
        <img src="https://images.code.org/28176329f15dea1a863564b069e72aab-image-1511282702534.44.52
        AM.png" style="float:right;height:200px">

        \*\*目标: \*\* 这个声音面板几乎完成了!将图像、文本和声音添加到后面的按钮上。

        **如何做到：**

        -   添加一个`onEvent()`（当事件发生时），并设置它的"id"（标识）为`"button4"`（按钮4）, 并拖入一个`playSound()`（播放声音）。从库里选择任何你喜欢的动物声音。
        -   添加一个`setProperty()`（设置属性）到`onEvent()`（当事件发生时）之外，来设置按钮的`"image"`（图片）属性设置。从第三个下拉框中选择一张图片。
        -   再添加一个`setProperty()`（设置属性）来改动按钮的`"text"`（文本）。

        \*\*难住了？点击这里: \*\* ![expandable](https://images.code.org/a3fdcb8954c5e8d585bef64df1ec5b1a-image-1511285408512.gif)
      AppLab Intro 7 - thisOrThatAddButton: |-
        <img src="https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00
        PM.png" style="float:right;height:200px">

        \*\* 目标: \*\* 在屏幕上添加第二个按钮，说："右边“！将其`"id"`标识设置为`"rightButton"`（"右边"按钮）

        **如何做到：**
        在设计模式中拖进新按钮。定位并调整其大小。然后设置其`"text"`（文本）、`"background-color"`（背景颜色）和`"font-size"`（字体大小）。

        \*\*难住了？点这里: \*\* ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)
      AppLab Intro 7 - thisOrThatAddScreen: "<img src=\"https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59\nPM.png\"
        style=\"float:right;height:200px\">\n\n\\*\\*目标: \\*\\* 创建一个叫做`\"rightScreen\"`（右屏幕）的新屏幕。在屏幕上添加一个文本标签，说“你对了！”
        \n\n**如何做到：**\n在设计模式中添加新屏幕。将其`\"id\"`标识更改为`\"rightScreen\"`（右屏幕）。然后将标签拖到屏幕上,
        将文本改为“你对了！”。\n\n\\*\\*难住了？点击这里: \\*\\* ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)"
      AppLab Intro 7 - thisOrThatPersonalize: |-
        <a href="https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ" target="_blank"><img src="https://images.code.org/ba6c0db48cc1c3c28c135f1c2f67f361-image-1511244802597.10.18 PM.png" style="float:right;height:200px"></a>
        <a href="https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q" target="_blank"><img src="https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05 PM.png" style="float:right;height:200px"></a>
        <a href="https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg" target="_blank"><img src="https://images.code.org/445181ff8d84861919512ba9b8e09586-image-1511244809994.12.40 PM.png" style="float:right;height:200px"></a>

        **目标：**通过扩展这个项目来创建你自己的应用程序。然后“分享”给其他人！

        **如何做到：**
        首选确定你对创建哪种应用程序感兴趣。然后通过添加更多的屏幕，按钮，文本，声音和用户交互来创建它。工具箱有更多的模块，你可以试一试。一旦完成后，你可以点击“分享”来发给自己或朋友！

        <details>

        <summary>

        <b>《惊险岔路口》创意</b>

        </summary>

        试试这个<a href="https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg" target="_blank">《惊险岔路口》应用示例</a>让你看看是怎样工作的。这里有些创意来帮助你做自己的故事。

        <li>创建一个你最喜欢的角色的冒险，真实的、虚构的都可以。</li>
        <li>创建一个讲述你最喜欢的电影、书籍或自己创造的故事。</li>
        <li>创建一个有很多曲折的或是很难的抉择的冒险故事。</li>
        <br>
        </details>

        <details><summary>

        <b>贺卡创意</b>

        </summary>

        试试这个<a href="https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q"
        target="_blank">贺卡应用创意示例</a>让你看看是如何工作的。这里有些主意来帮助你做自己的卡片。

        <li>想象一个生日、节日或其它特殊的日志要来临了，做一张卡片来庆贺！</li>
        <li>创建一张感谢卡片，给你想感谢的人。</li>
        <li>创建一个即将来临的活动的邀请卡。</li>
        <br>
        </details>

        <details><summary><b>个人的测验创意</b></summary>

        试试这个<a href="https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ"
        target="_blank">个人创意应用示例</a>让你看看是如何工作的。这里有些主意来帮助你制作自己的测验题。

        <li>创造一个关于大家喜欢的东西，例如事物、团队、书或地点的测验。</li>
        <li>创造一个通过答案来预测未来的的测验。</li>
        <li>创造一个帮助人们做出艰难抉择的测验。</li>

        </details>
      AppLab Intro 7 - thisOrThatSetScreen: |-
        <img src="https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop
        (1).gif" style="float:right;height:200px">

        \*\*目标: \*\* 当用户单击`"rightButton"`（"对"按钮）时, 屏幕切换到`"rightScreen"`（右屏幕）。

        **如何做到：**在代码模式中为您的 "对！" 按钮添加一个新的`onEvent()`（当事件发生时）模块。在其中添加一个`setScreen()`（设置屏幕）块, 将屏幕切换到`"rightScreen"`（右屏幕）。

        \*\*难住了？点这里: \*\* ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)
      CDU U6 Playground Sound Board: |-
        # 声音面板 2.0

        现在可以播放声音、音符、和歌曲了！利用这些新知识，你甚至可以把主板变成声音面板。

        在工具箱中，你可以处置所有的蜂鸣器和相关的模块。看看你能做出些什么很酷东西！

        # 这样做

        -   使用所有有关板事件的按钮(上，下) 来为每一个事件演奏一段独特的声音或歌曲。
        -   有没有可以演奏更多声音/歌曲的任何其他事件？
      CDU U6 Playground Sound Board_2018: |-
        # 声音面板 2.0

        现在可以播放声音、音符、和歌曲了！利用这些新知识，你甚至可以把主板变成声音面板。

        在工具箱中，你可以处置所有的蜂鸣器和相关的模块。看看你能做出些什么很酷东西！

        # 这样做

        -   使用所有有关板事件的按钮(上，下) 来为每一个事件演奏一段独特的声音或歌曲。
        -   有没有可以演奏更多声音/歌曲的任何其他事件？
      CDU U6 Playground Sound Board_2019: |-
        # 声音面板 2.0

        现在可以播放声音、音符、和歌曲了！利用这些新知识，你甚至可以把主板变成声音面板。

        在工具箱中，你可以处置所有的蜂鸣器和相关的模块。看看你能做出些什么很酷东西！

        # 这样做

        -   使用所有有关板事件的按钮(上，下) 来为每一个事件演奏一段独特的声音或歌曲。
        -   有没有可以演奏更多声音/歌曲的任何其他事件？
      CSD Problem Solving Process Video: |-
        ## 需要仔细思考的问题

        -   上节课你是如何运用解决问题的方法的？
        -   你将如何运用这个方法去解决日常生活中的问题呢？
      CSD U1 - PixFilter FreePlay: |-
        # 自由发挥

        发挥你的想象，做些令人惊叹的东西吧！
      CSD U2 CSS explore CSS: "<div style=\"float: right;\nheight: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n\n\\*\\*
        如何在文件之间切换？ \\*\\* \n\n</summary> \n单击要查看的文件的名称。菜单在屏幕左侧. \n\n</details> \n</div>
        \n\n# 添加样式\n\n此 Web 实验室项目正在使用一种新语言向页面添加样式。与伙伴一起探索 `index.html`和 `style.css`文件。准备好讨论以下问题。\n\n-
        \  这个新的语言对页面有什么变化？\n-   这个语言与 html 的区别是什么？\n-   `index.html`和`style.css`文件是怎样联系起来的？"
      CSD U2 CSS explore CSS_2018: "<div style=\"float: right;\nheight: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n\n\\*\\*
        如何在文件之间切换？ \\*\\* \n\n</summary> \n单击要查看的文件的名称。菜单在屏幕左侧. \n\n</details> \n</div>
        \n\n# 添加样式\n\n此 Web 实验室项目正在使用一种新语言向页面添加样式。与伙伴一起探索 `index.html`和 `style.css`文件。准备好讨论以下问题。\n\n-
        \  这个新的语言对页面有什么变化？\n-   这个语言与 html 的区别是什么？\n-   `index.html`和`style.css`文件是怎样联系起来的？"
      CSD U2 CSS explore CSS_2019: "<div style=\"float: right;\nheight: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n\n\\*\\*
        如何在文件之间切换？ \\*\\* \n\n</summary> \n单击要查看的文件的名称。菜单在屏幕左侧. \n\n</details> \n</div>
        \n\n# 添加样式\n\n此 Web 实验室项目正在使用一种新语言向页面添加样式。与伙伴一起探索 `index.html`和 `style.css`文件。准备好讨论以下问题。\n\n-
        \  这个新的语言对页面有什么变化？\n-   这个语言与 html 的区别是什么？\n-   `index.html`和`style.css`文件是怎样联系起来的？"
      CSD U2 Debugging 1: |-
        # 调试

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        计算机代码是由人写的，所有人都会犯错误。作为一个好的计算机科学家，其中一部分是发现你代码里的错误，并修复它们。在计算机科学中，我们将错误称为**bugs（缺陷）**。查找和修复这些缺陷的过程称为 \*\* debugging（调试） \*\*。 在接下来的两个级别中，您将要锻炼你的调试技能。

        # 这样做

        <img src="https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png" style="float:right;border:black solid 5px;">

        -   看看网页代码，并与您的伙伴讨论导致以下两个bug的原因：
            \\t \* 标题不够大。
            \\t \* 列表中的第二项没有编号。
            \\t \* 修复代码中的所有缺陷，以便最终结果与图像匹配在右边。
      CSD U2 Debugging 1_2018: |-
        # 调试

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        计算机代码是由人写的，所有人都会犯错误。作为一个好的计算机科学家，其中一部分是发现你代码里的错误，并修复它们。在计算机科学中，我们将错误称为**bugs（缺陷）**。查找和修复这些缺陷的过程称为 \*\* debugging（调试） \*\*。 在接下来的两个级别中，您将要锻炼你的调试技能。

        # 这样做

        <img src="https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png" style="float:right;border:black solid 5px;">

        -   看看网页代码，并与您的伙伴讨论导致以下两个bug的原因：
            \\t \* 标题不够大。
            \\t \* 列表中的第二项没有编号。
            \\t \* 修复代码中的所有缺陷，以便最终结果与图像匹配在右边。
      CSD U2 Debugging 1_2019: |-
        # 调试

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        计算机代码是由人写的，所有人都会犯错误。作为一个好的计算机科学家，其中一部分是发现你代码里的错误，并修复它们。在计算机科学中，我们将错误称为**bugs（缺陷）**。查找和修复这些缺陷的过程称为 \*\* debugging（调试） \*\*。 在接下来的两个级别中，您将要锻炼你的调试技能。

        # 这样做

        <img src="https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png" style="float:right;border:black solid 5px;">

        -   看看网页代码，并与您的伙伴讨论导致以下两个bug的原因：
            \\t \* 标题不够大。
            \\t \* 列表中的第二项没有编号。
            \\t \* 修复代码中的所有缺陷，以便最终结果与图像匹配在右边。
      CSD U2 Debugging 2: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary> ** 什么是bug（缺陷）？ ** </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary> ** 什么是debugging（调试缺陷）？ ** </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        继续练习调试技能！这个页面比上一个有更多的调试挑战。

        # 这样做

        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png" style="float:right;border:5px black solid;width:250px">

        -   与你的伙伴讨论这个页面有些什么缺陷。
        -   找到并修复这些缺陷，使得这个页面和右边的一样。
      CSD U2 Debugging 2_2018: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary> ** 什么是bug（缺陷）？ ** </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary> ** 什么是debugging（调试缺陷）？ ** </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        继续练习调试技能！这个页面比上一个有更多的调试挑战。

        # 这样做

        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png" style="float:right;border:5px black solid;width:250px">

        -   与你的伙伴讨论这个页面有些什么缺陷。
        -   找到并修复这些缺陷，使得这个页面和右边的一样。
      CSD U2 Debugging 2_2019: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary> ** 什么是bug（缺陷）？ ** </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary> ** 什么是debugging（调试缺陷）？ ** </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        继续练习调试技能！这个页面比上一个有更多的调试挑战。

        # 这样做

        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png" style="float:right;border:5px black solid;width:250px">

        -   与你的伙伴讨论这个页面有些什么缺陷。
        -   找到并修复这些缺陷，使得这个页面和右边的一样。
      CSD U2 Debugging 3: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>

        **有没有缺陷的例子？**

        </summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        <details>
        <summary>

        **为什么有时检查器停止工作了？**

        </summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        这个页面有些图片。图片上有些难对付的缺陷。你能调试这个页面吗？

        # 这样做

        -   和你的伙伴讨论一下，是什么造成了这个页面的一些缺陷。
        -   修复这些缺陷，使得这个页面和下面的目标页面一致。

        ![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24 AM.png>)
      CSD U2 Debugging 3_2018: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>

        **有没有缺陷的例子？**

        </summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        <details>
        <summary>

        **为什么有时检查器停止工作了？**

        </summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        这个页面有些图片。图片上有些难对付的缺陷。你能调试这个页面吗？

        # 这样做

        -   和你的伙伴讨论一下，是什么造成了这个页面的一些缺陷。
        -   修复这些缺陷，使得这个页面和下面的目标页面一致。

        ![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24 AM.png>)
      CSD U2 Debugging 3_2019: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>

        **有没有缺陷的例子？**

        </summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        <details>
        <summary>

        **为什么有时检查器停止工作了？**

        </summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        这个页面有些图片。图片上有些难对付的缺陷。你能调试这个页面吗？

        # 这样做

        -   和你的伙伴讨论一下，是什么造成了这个页面的一些缺陷。
        -   修复这些缺陷，使得这个页面和下面的目标页面一致。

        ![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24 AM.png>)
      CSD U2 Debugging 4: |-
        # 格式

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是空白符?**</summary>
        空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。
        </details>
        <details>
        <summary>**什么是缩进？**</summary>
        缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>**什么是格式化?**</summary>
        格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>**为什么有时检查器停止工作了？**</summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        你写代码的方式会影响调试代码的难易程度。如果你使用**空白符**和**缩进**，这将让你的代码更容易阅读，易于调试。

        # 这样做

        -   和你的伙伴看看这个代码，并讨论应该如何格式化这个代码使其更易阅读。
        -   通过添加新行和缩进来让代码更易阅读。
        -   修复所有的缺陷，让这个页面和下面的目标页面一致。

        !\[](\<<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13>
        AM.png>)
      CSD U2 Debugging 4_2018: |-
        # 格式

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是空白符?**</summary>
        空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。
        </details>
        <details>
        <summary>**什么是缩进？**</summary>
        缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>**什么是格式化?**</summary>
        格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>**为什么有时检查器停止工作了？**</summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        你写代码的方式会影响调试代码的难易程度。如果你使用**空白符**和**缩进**，这将让你的代码更容易阅读，易于调试。

        # 这样做

        -   和你的伙伴看看这个代码，并讨论应该如何格式化这个代码使其更易阅读。
        -   通过添加新行和缩进来让代码更易阅读。
        -   修复所有的缺陷，让这个页面和下面的目标页面一致。

        !\[](\<<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13>
        AM.png>)
      CSD U2 Debugging 4_2019: |-
        # 格式

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是空白符?**</summary>
        空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。
        </details>
        <details>
        <summary>**什么是缩进？**</summary>
        缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>**什么是格式化?**</summary>
        格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>**为什么有时检查器停止工作了？**</summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        你写代码的方式会影响调试代码的难易程度。如果你使用**空白符**和**缩进**，这将让你的代码更容易阅读，易于调试。

        # 这样做

        -   和你的伙伴看看这个代码，并讨论应该如何格式化这个代码使其更易阅读。
        -   通过添加新行和缩进来让代码更易阅读。
        -   修复所有的缺陷，让这个页面和下面的目标页面一致。

        !\[](\<<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13>
        AM.png>)
      CSD U2 HTML Adding Paragraphs: "# 添加文本到正文中\n\n当你开始任何新的网络实验室项目时，它会自动添加\n`<!DOCTYPE>`,
        `<html>`, `<head>`, 和 `<body>` 标签到这个项目里。当你需要在其中添加自己的内容时，所有内容都要在`<body>`\n和
        `</body>` 标签之间，因为这是网页正文的一部分。\n\n# \n\n这样做\n\n-   在你网页里的body标签里写上分开的三句话。\n-
        \  如果你没能在预览区看见变化，就点击“刷新并保存”按钮\n-   把你的作品和旁边的比一比，确保内容都放在了同样的地方。"
      CSD U2 HTML Adding Paragraphs pt 2: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>

        **什么是段落元素？**

        </summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。
        </details>
        <details>
        <summary>

        **我该如何创建多个段落呢？**

        </summary>
        这是一行里有多个段落标签的例子。这个代码会放在你的网页的body部分里。

        <pre>
        `<p>这是一个有两句话的段落</p>`
        `<p>这是另一个段落。</p>`
        </pre>

        </details>

        </div>

        # 使用段落标签

        `<p>`标签或者叫"段落"标签会将一段文本包围起来，这表示这段文本是一个段落。在段落标签里加入文本让计算机知道应该显示时有点不同。通常是在其它文本间增加空间。

        # 这样做

        -   通过添加`<p>`和`</p>`将你刚才写的代码里分成至少两个段落。
        -   与旁边的相比较。与你的文本显示方法相比，有什么变化了？
      CSD U2 HTML Adding Paragraphs pt 2_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **什么是段落元素？**

        </summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。

        </details>
        <details>
        <summary>

        **我该如何创建多个段落呢？**

        </summary>
        这是一行里有多个段落标签的例子。这个代码会放在你的网页的body部分里。

            <p>这是一个有两句话的段落</p>
            <p>这是另一个段落。</p>

        </details>
        </div>

        # 使用段落标签

         `<p>` `</p>`标签或者叫"段落"标签会将一段文本包围起来，这表示这段文本是一个段落。在段落标签里加入文本让计算机知道应该显示时有点不同。通常是在其它文本间增加空间。

        # 这样做

        -   通过添加`<p>`和`</p>`将你刚才写的代码里分成至少两个段落。
        -   与旁边的相比较。与你的文本显示方法相比，有什么变化了？
      CSD U2 HTML Adding Paragraphs pt 2_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **什么是段落元素？**

        </summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。

        </details>
        <details>
        <summary>

        **我该如何创建多个段落呢？**

        </summary>
        这是一行里有多个段落标签的例子。这个代码会放在你的网页的body部分里。

            <p>这是一个有两句话的段落</p>
            <p>这是另一个段落。</p>

        </details>
        </div>

        # 使用段落标签

         `<p>` `</p>`标签或者叫"段落"标签会将一段文本包围起来，这表示这段文本是一个段落。在段落标签里加入文本让计算机知道应该显示时有点不同。通常是在其它文本间增加空间。

        # 这样做

        -   通过添加`<p>`和`</p>`将你刚才写的代码里分成至少两个段落。
        -   与旁边的相比较。与你的文本显示方法相比，有什么变化了？
      CSD U2 HTML Adding Paragraphs_2018: "# 添加文本到正文中\n\n当你开始任何新的网络实验室项目时，它会自动添加\n`<!DOCTYPE>`,
        `<html>`, `<head>`, 和 `<body>` 标签到这个项目里。当你需要在其中添加自己的内容时，所有内容都要在`<body>`\n和
        `</body>` 标签之间，因为这是网页正文的一部分。\n\n# \n\n这样做\n\n-   在你网页里的body标签里写上分开的三句话。\n-
        \  如果你没能在预览区看见变化，就点击“刷新并保存”按钮\n-   把你的作品和旁边的比一比，确保内容都放在了同样的地方。"
      CSD U2 HTML Adding Paragraphs_2019: "# 添加文本到正文中\n\n当你开始任何新的网络实验室项目时，它会自动添加\n`<!DOCTYPE>`,
        `<html>`, `<head>`, 和 `<body>` 标签到这个项目里。当你需要在其中添加自己的内容时，所有内容都要在`<body>`\n和
        `</body>` 标签之间，因为这是网页正文的一部分。\n\n# \n\n这样做\n\n-   在你网页里的body标签里写上分开的三句话。\n-
        \  如果你没能在预览区看见变化，就点击“刷新并保存”按钮\n-   把你的作品和旁边的比一比，确保内容都放在了同样的地方。"
      CSD U2 HTML Debug Paragraphs: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>什么是段落元素？</strong>
        </summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。
        </details>
        <details>
        <summary>
        <strong>为什么有时HTML不正确，页面也能显示出来？</strong>
        </summary>
        HTML被你的网络浏览器所读取，来生成网页。因为人们经常会犯一些小错误，浏览器被开发成可以猜测网页代码的行为。有时，不同的浏览器会作出不同的猜测！让代码行为一致的唯一办法，是总是正确的使用标签。
        </details>
        <details>
        <summary>
        <strong>为什么代码有时候会变成粉红色？</strong>
        </summary>
        网络实验室被开发成能够自动检测一些HTML中的错误。当它注意到一个错误时，就会将代码显示为粉色。这表示粉色的地方或者粉色的代码之前有错误。你需要仔细的调试，来找到错误。
        </details>
        </div>

        # 调试：修复缺失的标签

        这个简单的网页有些问题，这会造成内容显示不正确。找到并修复问题。这个过程叫做“调试”你的代码。

        # 这样做

        -   修复缺失的代码，让网页能够正确的显示
        -   将你修复的问题与旁边的同学进行比较
      CSD U2 HTML Debug Paragraphs_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        <strong>什么是段落元素？</strong>

        </summary>

        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。

        </details>
        <details>
        <summary>

        <strong>为什么有时HTML不正确，页面也能显示出来？</strong>

        </summary>

        HTML 被网络浏览器所读取，来生成网页。因为人们经常会犯一些小错误，浏览器被开发成可以猜测网页代码的行为。有时，不同的浏览器会作出不同的猜测！让代码行为一致的唯一办法，是总是正确的使用标签。

        </details>
        <details>
        <summary>

        <strong>为什么代码有时候会变成粉红色？</strong>

        </summary>

        网络实验室被开发成能够自动检测一些HTML中的错误。当它注意到一个错误时，就会将代码显示为粉色。这表示粉色的地方或者粉色的代码之前有错误。你需要仔细的调试，来找到错误。

        </details>
        </div>

        # 调试：修复缺失的标签

        这个简单的网页有些问题，这会造成内容显示不正确。找到并修复问题。这个过程叫做“调试”你的代码。

        # 这样做

        -   修复缺失的代码，让网页能够正确的显示
        -   将你修复的问题与旁边的同学进行比较
      CSD U2 HTML Debug Paragraphs_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        <strong>什么是段落元素？</strong>

        </summary>

        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。

        </details>
        <details>
        <summary>

        <strong>为什么有时HTML不正确，页面也能显示出来？</strong>

        </summary>

        HTML 被网络浏览器所读取，来生成网页。因为人们经常会犯一些小错误，浏览器被开发成可以猜测网页代码的行为。有时，不同的浏览器会作出不同的猜测！让代码行为一致的唯一办法，是总是正确的使用标签。

        </details>
        <details>
        <summary>

        <strong>为什么代码有时候会变成粉红色？</strong>

        </summary>

        网络实验室被开发成能够自动检测一些HTML中的错误。当它注意到一个错误时，就会将代码显示为粉色。这表示粉色的地方或者粉色的代码之前有错误。你需要仔细的调试，来找到错误。

        </details>
        </div>

        # 调试：修复缺失的标签

        这个简单的网页有些问题，这会造成内容显示不正确。找到并修复问题。这个过程叫做“调试”你的代码。

        # 这样做

        -   修复缺失的代码，让网页能够正确的显示
        -   将你修复的问题与旁边的同学进行比较
      CSD U2 Heading Demo_2018: |-
        # 标头

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是Header（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。.
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>
        </div>

        好了，你已经能将你的内容组织进段落了。另一种组织代码的方式是使用**标头**。一个标头是一小段放在章节最顶上的文本，就像标题一样。

        这样做：

        -   用检查器来找到下面代码中用到的标头，并看看它们的代码。
        -   确保你和你的伙伴对标签能做什么达成共识。
        -   修改代码，使得“Drawing”（画画）和"2 years"（两年）和页面其它部分的标头一致。
      CSD U2 Heading Demo_2019: |-
        # 标头

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是Header（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。.
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>
        </div>

        好了，你已经能将你的内容组织进段落了。另一种组织代码的方式是使用**标头**。一个标头是一小段放在章节最顶上的文本，就像标题一样。

        这样做：

        -   用检查器来找到下面代码中用到的标头，并看看它们的代码。
        -   确保你和你的伙伴对标签能做什么达成共识。
        -   修改代码，使得“Drawing”（画画）和"2 years"（两年）和页面其它部分的标头一致。
      CSD U2 Heading Sizes: |-
        # Heading Sizes

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是Heading（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。. HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        标头有不同的尺寸。在这个页面中，有6个不同尺寸的标头，但它们都混起来了。你和你的伙伴能指出如何修复它们吗？

        这样做：

        -   用检查器来找到什么让这些标头有不一样的尺寸
        -   确保你和你的伙伴能在不同的标头标签有什么作用上达成共识。
        -   改动这些标签，让这些标头从大到小排列，并让这些图片下的文本表明了正确的尺寸。

        <img src="https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png" style="width:100px" style="float:left">
      CSD U2 Heading Sizes_2018: |-
        # Heading Sizes

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是Heading（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。. HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        标头有不同的尺寸。在这个页面中，有6个不同尺寸的标头，但它们都混起来了。你和你的伙伴能指出如何修复它们吗？

        这样做：

        -   用检查器来找到什么让这些标头有不一样的尺寸
        -   确保你和你的伙伴能在不同的标头标签有什么作用上达成共识。
        -   改动这些标签，让这些标头从大到小排列，并让这些图片下的文本表明了正确的尺寸。

        <img src="https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png" style="width:100px" style="float:left">
      CSD U2 Heading Sizes_2019: |-
        # Heading Sizes

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是Heading（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。. HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        标头有不同的尺寸。在这个页面中，有6个不同尺寸的标头，但它们都混起来了。你和你的伙伴能指出如何修复它们吗？

        这样做：

        -   用检查器来找到什么让这些标头有不一样的尺寸
        -   确保你和你的伙伴能在不同的标头标签有什么作用上达成共识。
        -   改动这些标签，让这些标头从大到小排列，并让这些图片下的文本表明了正确的尺寸。

        <img src="https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png" style="width:100px" style="float:left">
      CSD U2 Heading Test_2018: |-
        # 标头和段落

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是段落元素？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。在网页中的所有文本都应该被HTML元素所包含（标头或者段落元素）段落能将句子分组，在不同组之间加上一些空间。
        </details>
        <details>
        <summary>**我该如何创建多个段落呢？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。你需要用多组开始、关闭的<p>标签来创建多个段落。例如
        <pre>
        \t&lt;p&gt;
        \t这是一个段落。
        &lt;/p&gt;
        \t&lt;p&gt;
        \t这是另一个段落。
        &lt;/p&gt;
        </pre>
        </details>
        <details>
        <summary>**什么是headings（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        这个页面的作者加入了许多的东西，但没有想过结构。所有的文本都混在一起。

        这样做：

        -   和你的伙伴一起看一下这些内容，然后想一下最好的结构应该是什么样的。
        -   用你的标头和段落标签来给这个页面的内容加上结构。
      CSD U2 Heading Test_2019: |-
        # 标头和段落

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是段落元素？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。在网页中的所有文本都应该被HTML元素所包含（标头或者段落元素）段落能将句子分组，在不同组之间加上一些空间。
        </details>
        <details>
        <summary>**我该如何创建多个段落呢？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。你需要用多组开始、关闭的<p>标签来创建多个段落。例如
        <pre>
        \t&lt;p&gt;
        \t这是一个段落。
        &lt;/p&gt;
        \t&lt;p&gt;
        \t这是另一个段落。
        &lt;/p&gt;
        </pre>
        </details>
        <details>
        <summary>**什么是headings（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        这个页面的作者加入了许多的东西，但没有想过结构。所有的文本都混在一起。

        这样做：

        -   和你的伙伴一起看一下这些内容，然后想一下最好的结构应该是什么样的。
        -   用你的标头和段落标签来给这个页面的内容加上结构。
      CSD U2 Info Page Final Touches: "<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n<h2>\n检查清单\n</h2>\n\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">确保您的图片已被正确授权 </span> \n<input type=\"checkbox\" style=\"float: left\"><span
        style=\"display: block; margin-left: 20px; margin-bottom: 10px\">将图像上传到网络实验室
        </span>\n<input type=\"checkbox\" style=\"float: left\"> <span style=\"display:
        block; margin-left: 20px; margin-bottom: 10px\"> 创建带有描述性的alt属性的图片标签 </span>\n<input
        type=\"checkbox\" style=\"float: left\"> <span style=\"display: block; margin-left:
        20px; margin-bottom: 10px\">如果该图像不是您自己的, 请在下面添加署名<br/>\n\n</div>\n\n# 将图片添加您的网站\n\n你已经创建了一些有着很好内容的网页，现在你可以添加一些图像!
        \n\n# 这样做\n\n使用您自己的或通过共享搜索找到的那些图片, 在您已经创建的页面上添加一些图像。有点创意！请使用右侧的核对清单来跟踪添加图像时需要遵循的步骤。"
      CSD U2 Info Page Final Touches_2018: "<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n<h2>\n检查清单\n</h2>\n\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">确保您的图片已被正确授权 </span> \n<input type=\"checkbox\" style=\"float: left\"><span
        style=\"display: block; margin-left: 20px; margin-bottom: 10px\">将图像上传到网络实验室
        </span>\n<input type=\"checkbox\" style=\"float: left\"> <span style=\"display:
        block; margin-left: 20px; margin-bottom: 10px\"> 创建带有描述性的alt属性的图片标签 </span>\n<input
        type=\"checkbox\" style=\"float: left\"> <span style=\"display: block; margin-left:
        20px; margin-bottom: 10px\">如果该图像不是您自己的, 请在下面添加署名<br/>\n\n</div>\n\n# 将图片添加您的网站\n\n你已经创建了一些有着很好内容的网页，现在你可以添加一些图像!
        \n\n# 这样做\n\n使用您自己的或通过共享搜索找到的那些图片, 在您已经创建的页面上添加一些图像。有点创意！请使用右侧的核对清单来跟踪添加图像时需要遵循的步骤。"
      CSD U2 Info Page Final Touches_2019: "<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n<h2>\n检查清单\n</h2>\n\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">确保您的图片已被正确授权 </span> \n<input type=\"checkbox\" style=\"float: left\"><span
        style=\"display: block; margin-left: 20px; margin-bottom: 10px\">将图像上传到网络实验室
        </span>\n<input type=\"checkbox\" style=\"float: left\"> <span style=\"display:
        block; margin-left: 20px; margin-bottom: 10px\"> 创建带有描述性的alt属性的图片标签 </span>\n<input
        type=\"checkbox\" style=\"float: left\"> <span style=\"display: block; margin-left:
        20px; margin-bottom: 10px\">如果该图像不是您自己的, 请在下面添加署名<br/>\n\n</div>\n\n# 将图片添加您的网站\n\n你已经创建了一些有着很好内容的网页，现在你可以添加一些图像!
        \n\n# 这样做\n\n使用您自己的或通过共享搜索找到的那些图片, 在您已经创建的页面上添加一些图像。有点创意！请使用右侧的核对清单来跟踪添加图像时需要遵循的步骤。"
      CSD U2 Inspector Warm Up: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n\n<summary>\n\n**<span>\n如何使用检查器工具？
        </span>**\n\n</summary>\n\n检查器是在网络实验室里学习你不太熟悉的编码的一种有效途径。 点击<img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\"
        style=\"width:100px\">打开检验工具。通过按钮将变白色并注明\"检查器：打开\"，可以知道检验工具是否是开着的。打开检查器后，就可以把鼠标放在任何元素上查看预览。网络实验室将突出显示页面上指到部分的代码。
        \n\n</details>\n</div>\n\n# 探索 HTML\n\n这是个HTML格式书写的网页，你将学习如何用它，但让我们先探索一下如何使用检查器。
        \n\n# 这样做\n\n-   点击右边的\"如何使用检查器？\"的提示来了解如何使用它。 \n-   参照网页上的指示来探索网页并和合作伙伴讨论如何使用它。"
      CSD U2 Inspector Warm Up_2018: "<div style=\"float: right;\nheight: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**<span>\n如何使用检查器工具？
        </span>**</summary>\n检查器是在网络实验室里学习你不太熟悉的编码的一种有效途径。 要打开检验工具， 请点击<img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\"
        style=\"width:100px\">。你会知道检验工具是否是开着的，因为按钮将变白色并注明\"检查器：打开\"。 一旦你打开检查器，你可以把鼠标放在任何事物的上面查看预览。网络实验室将突出显示页面上指到部分的代码。
        \n</details>\n\n</div>\n\n# \n\n探索 HTML\n\n这是个HTML格式书写的网页，你将学习如何用它，但让我们先探索一下如何使用检查器。
        \n\n# 这样做\n\n-   点击右边的\"如何使用检查器？\"的提示来了解如何使用它。 \n-   \\*\n    参照网页上的指示来探索网页并和合作伙伴讨论如何使用它。"
      CSD U2 Inspector Warm Up_2019: "<div style=\"float: right;\nheight: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**<span>\n如何使用检查器工具？
        </span>**</summary>\n检查器是在网络实验室里学习你不太熟悉的编码的一种有效途径。 要打开检验工具， 请点击<img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\"
        style=\"width:100px\">。你会知道检验工具是否是开着的，因为按钮将变白色并注明\"检查器：打开\"。 一旦你打开检查器，你可以把鼠标放在任何事物的上面查看预览。网络实验室将突出显示页面上指到部分的代码。
        \n</details>\n\n</div>\n\n# \n\n探索 HTML\n\n这是个HTML格式书写的网页，你将学习如何用它，但让我们先探索一下如何使用检查器。
        \n\n# 这样做\n\n-   点击右边的\"如何使用检查器？\"的提示来了解如何使用它。 \n-   \\*\n    参照网页上的指示来探索网页并和合作伙伴讨论如何使用它。"
      CSD U2 Project Start: "# 开始你的项目\n\n现在你计划好要如何设计你的个人网页，就可以在这里开始了。不要担心如果你无法做完你所要的一切。
        在你学到更多关于网页开发的知识后，你有足够的机会可以改善你的作业。 \n\n# \n\n这样做\n\n-   使用HTML来创建你计划的页面。 请确保它含：\n-
        \  至少\\*_两个不同大小的标头_\n-   至少**一个段落**\n-   比对你的草图，**反想**你做出的网页，并把它给你的伙伴看。"
      CSD U2 Project Start_2018: "# 开始你的项目\n\n现在你计划好要如何设计你的个人网页，就可以在这里开始了。不要担心如果你无法做完你所要的一切。
        在你学到更多关于网页开发的知识后，你有足够的机会可以改善你的作业。 \n\n# \n\n这样做\n\n-   使用HTML来创建你计划的页面。 请确保它含：\n-
        \  至少\\*_两个不同大小的标头_\n-   至少**一个段落**\n-   比对你的草图，**反想**你做出的网页，并把它给你的伙伴看。"
      CSD U2 Project Start_2019: "# 开始你的项目\n\n现在你计划好要如何设计你的个人网页，就可以在这里开始了。不要担心如果你无法做完你所要的一切。
        在你学到更多关于网页开发的知识后，你有足够的机会可以改善你的作业。 \n\n# \n\n这样做\n\n-   使用HTML来创建你计划的页面。 请确保它含：\n-
        \  至少\\*_两个不同大小的标头_\n-   至少**一个段落**\n-   比对你的草图，**反想**你做出的网页，并把它给你的伙伴看。"
      CSD U2 RGB intro_2018: |-
        # RGB（红绿蓝）颜色

        所有的颜色，不管它们有没有名字，都可以用不同水平的红、绿、蓝色的光混合起来显示。这叫做RGB值（这是Red-Green-Blue，也就是红-绿-蓝的简称）。你可以用左边的小部件来试试不同的RGB值，看看能做出什么样的颜色。

        -   **点击"运行"来开始左边的小部件**，并用滑动条来改变红、绿、蓝光的水平。
        -   对于下面每个颜色，用RGB值来匹配它。

        A) 红: 216, 绿: 191, 蓝: 216 - rgb(216,191,216)

        B) 红: 255, 绿: 239, 蓝: 213 - rgb(255,239,213)

        C) 红: 250, 绿:128, 蓝: 114 - rgb(250,128,114)

        D) 红: 70, 绿: 130, 蓝: 180 - rgb(70, 130, 180)

        E) 红: 107, 绿: 142, 蓝: 35 - rgb(107,142,35)

        <div
        style="font-size: 16px">
        <br />
        <details>
        <summary><strong>**为什么红色和绿色能组合出黄色？**</strong></summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a>
        </p> </details>
        <details>
        <summary><strong>**我能用RGB组合出多少种颜色？**</strong></summary>
        <p>
        用RGB大概能组合出一千六百万种不同的颜色。
        </p></details>
        </div>
      CSD U2 RGB intro_2019: |-
        # RGB（红绿蓝）颜色

        所有的颜色，不管它们有没有名字，都可以用不同水平的红、绿、蓝色的光混合起来显示。这叫做RGB值（这是Red-Green-Blue，也就是红-绿-蓝的简称）。你可以用左边的小部件来试试不同的RGB值，看看能做出什么样的颜色。

        -   **点击"运行"来开始左边的小部件**，并用滑动条来改变红、绿、蓝光的水平。
        -   对于下面每个颜色，用RGB值来匹配它。

        A) 红: 216, 绿: 191, 蓝: 216 - rgb(216,191,216)

        B) 红: 255, 绿: 239, 蓝: 213 - rgb(255,239,213)

        C) 红: 250, 绿:128, 蓝: 114 - rgb(250,128,114)

        D) 红: 70, 绿: 130, 蓝: 180 - rgb(70, 130, 180)

        E) 红: 107, 绿: 142, 蓝: 35 - rgb(107,142,35)

        <div
        style="font-size: 16px">
        <br />
        <details>
        <summary><strong>**为什么红色和绿色能组合出黄色？**</strong></summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a>
        </p> </details>
        <details>
        <summary><strong>**我能用RGB组合出多少种颜色？**</strong></summary>
        <p>
        用RGB大概能组合出一千六百万种不同的颜色。
        </p></details>
        </div>
      CSD U2 RGB others: |-
        # 春天和秋天的颜色

        选择春天和秋天颜色的RGB（红、蓝、绿）值。

        -   点击"运行"来启动小部件。
        -   调节小部件的水平值，直到找到喜欢的春天的颜色，然后在活动指南上写下这些值。
        -   用同样的方法为秋天找到颜色。会在下个活动中用到这些RBG值。

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>

        **哪里能看到所有颜色类型的范围？**

        </summary>
        可以在 <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML颜色选择器</a> 找到可选择的很多颜色。</details>
        <details>
        <summary>

        **为什么红色和绿色能组合出黄色？**

        </summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色的混合是通过自发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary>

        **我能用RGB组合出多少种颜色？**</summary>

        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB others_2018: |-
        # 春天和秋天的颜色

        选择春天和秋天颜色的RBG值。

        -   点击"运行"来启动小部件。
        -   调节小部件的水平值，直到找到喜欢的春天的颜色，然后在活动指南上写下这些值。
        -   用同样的方法为秋天找到颜色。会在下个活动中用到这些RBG值。

        <div style="font-size: 16px">
        <br />
        <details><summary>
        <strong>**哪里能看到所有颜色类型的范围？**</strong>
        </summary>

        可以在 <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML颜色选择器</a> 找到可选择的很多颜色。</details>

        <details>
        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong>
        </summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary>
        <strong>**我能用RGB组合出多少种颜色？**</strong></summary>

        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB others_2019: |-
        # 春天和秋天的颜色

        选择春天和秋天颜色的RBG值。

        -   点击"运行"来启动小部件。
        -   调节小部件的水平值，直到找到喜欢的春天的颜色，然后在活动指南上写下这些值。
        -   用同样的方法为秋天找到颜色。会在下个活动中用到这些RBG值。

        <div style="font-size: 16px">
        <br />
        <details><summary>
        <strong>**哪里能看到所有颜色类型的范围？**</strong>
        </summary>

        可以在 <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML颜色选择器</a> 找到可选择的很多颜色。</details>

        <details>
        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong>
        </summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary>
        <strong>**我能用RGB组合出多少种颜色？**</strong></summary>

        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB summer_2018: |-
        # 夏天的颜色

        找到夏天的黄色的RGB值。

        -   点击"运行"来启动小部件。
        -   调节小部件下的水平值，直到找到和夏天的黄色一样的颜色。
        -   在活动指南上写上RGB值，会在下个活动中需要它。

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong>
        </summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary>
        <strong>**我能用RGB组合出多少种颜色？**</strong>
        </summary>
        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB summer_2019: |-
        # 夏天的颜色

        找到夏天的黄色的RGB值。

        -   点击"运行"来启动小部件。
        -   调节小部件下的水平值，直到找到和夏天的黄色一样的颜色。
        -   在活动指南上写上RGB值，会在下个活动中需要它。

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong>
        </summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary>
        <strong>**我能用RGB组合出多少种颜色？**</strong>
        </summary>
        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB winter_2018: |-
        # 冬天的颜色

        在接下来的几关中，你会为一个网站找到季节的颜色。这里，你需要找到冬天蓝色的RGB值。

        -   点击"运行"来启动这个小部件。
        -   调节小部件下的水平值，让它的颜色时冬天的蓝色。
        -   将RGB值写到你的活动指南里。你会在下一个活动中用到它们。

        <div
        style="font-size: 16px">
        <br />
        <details><summary>
        <strong>**如何让颜色变浅?**</strong></summary>
        <p>为了让颜色变浅，需要让它更淡（增加滑块的水平值)。如果你已经将蓝光增加到了最大值，你需要增加更多的红色和绿色来让蓝色更淡。</p></details>
        <details>
        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong></summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary><strong>**我能用RGB组合出多少种颜色？**</strong></summary>
        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB winter_2019: |-
        # 冬天的颜色

        在接下来的几关中，你会为一个网站找到季节的颜色。这里，你需要找到冬天蓝色的RGB值。

        -   点击"运行"来启动这个小部件。
        -   调节小部件下的水平值，让它的颜色时冬天的蓝色。
        -   将RGB值写到你的活动指南里。你会在下一个活动中用到它们。

        <div
        style="font-size: 16px">
        <br />
        <details><summary>
        <strong>**如何让颜色变浅?**</strong></summary>
        <p>为了让颜色变浅，需要让它更淡（增加滑块的水平值)。如果你已经将蓝光增加到了最大值，你需要增加更多的红色和绿色来让蓝色更淡。</p></details>
        <details>
        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong></summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary><strong>**我能用RGB组合出多少种颜色？**</strong></summary>
        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 add content: "# 添加 HTML\n\n接下来，你要添加HTML 到你的网页中。\n\n# 这样做\n\n-   在你创建的每一新网页上添加HTML
        来做你在你的项目指南中画的页面草图。 \n-   你也可能要在你已经创建的页面上多添加一些HTML。"
      CSD U2 add content_2018: "# 添加 HTML\n\n接下来，你要添加HTML 到你的网页中。\n\n# 这样做\n\n-   在你创建的每一新网页上添加HTML
        来做你在你的项目指南中画的页面草图。 \n-   你也可能要在你已经创建的页面上多添加一些HTML。"
      CSD U2 add content_2019: "# 添加 HTML\n\n接下来，你要添加HTML 到你的网页中。\n\n# 这样做\n\n-   在你创建的每一新网页上添加HTML
        来做你在你的项目指南中画的页面草图。 \n-   你也可能要在你已经创建的页面上多添加一些HTML。"
      CSD U2 add file: "<div style=\"float: right; height: 250px; width: 40%; overflow-y:
        scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n\n**什么是样式表?**\n\n</summary>\n样式表是一个控制网页要如何显示的文档。
        外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n**什么是CSS?**\n\n</summary>\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2 {\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n<details>\n<summary>\n\n**如何创建新的样式表?**\n\n</summary>\n要创建一个新的格式表，点击代码区的\"添加
        CSS\"按钮。\n</details>\n<details>\n<summary>\n\n**如何命名我的样式表?**\n\n</summary>\n你可以随意命名，但最好选一个相关的名字例如
        \"style.css\"（样式表）\n或\"aboutmestyles.css\"（关于我的样式表） 这样可以清楚知道这个文件用在什么地方。这些文件需要以以\".css\"扩展名结尾。\n</details>\n<details>\n<summary>\n\n**如何重新命名文件?**\n\n</summary>\n要重新命名文件，你可以右键点击(或用控制键点击)文件名，选择”重新命名“选项。
        这将让你可以输入新的文件名。 在点击的文件高亮后再点击它，就可以重新命名了。\n</details>\n<details>\n<summary>\n\n**如何在网页里添加样式表?**\n\n</summary>\n\n要在网页里添加样式表，
        先打开网页的代码。在标题标签中，添加以下代码`<link rel=\"stylesheet\" href=\"style.css\">`.  然后把\"style.css\"
        改成你的样式表的名字。\n\n</details>\n</div>\n# 添加样式表\n\n这是你之前的项目。 在下一关里，你将有机会添加一些不同的样式进去。但开始前，你要添加样式表，并给它命名，把它连到你的HTML页面中。\n\n1.
        \ 为你的项目创建新的格式表。\n2.  重新命名格式表文档。\n3.  把你的格式表添加到你的HTML网页。\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\"
        style=\" max-width:500px\">"
      CSD U2 add file_2018: "<div style=\"float: right; height:\n250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary><strong>**什么是样式表?**</strong></summary>\n样式表是一个控制网页要如何显示的文档。
        外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary><strong>**什么是CSS?**</strong></summary>\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n<details>\n<summary><strong>**如何创建新的样式表?**</strong></summary>\n要创建一个新的格式表，点击代码区的\"添加
        CSS\"按钮。\n</details>\n<details>\n<summary><strong>**如何命名我的样式表?**</strong></summary>\n你可以随意命名，但最好选一个相关的名字例如
        \"style.css\"（样式表）\n或\"aboutmestyles.css\"（关于我的样式表） 这样可以清楚知道这个文件用在什么地方。这些文件需要以以\".css\"扩展名结尾。.\n</details>\n<details>\n<summary><strong>**如何重新命名文件?**</strong></summary>\n要重新命名文件，你可以右键点击(或用控制键点击)文件名，选择”重新命名“选项。
        这将让你可以输入新的文件名。 在点击的文件高亮后再点击它，就可以重新命名了。\n</details>\n<details>\n<summary><strong>**如何在网页里添加样式表?**</strong></summary>\n要在网页里添加样式表，
        先打开网页的代码。在标题标签中，添加以下代码`<link rel=\"stylesheet\" href=\"style.css\">`.  然后把\"style.css\"
        改成你的样式表的名字。\n</details>\n</div>\n\n# 添加样式表\n\n这是你之前的项目。 在下一关里，你将有机会添加一些不同的样式进去。但开始前，你要添加样式表，并给它命名，把它连到你的HTML页面中。\n\n1.
        \ 为你的项目创建新的格式表。.\n2.  重新命名格式表文档.\n3.  把你的格式表添加到你的HTML网页。\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\"\nstyle=\"
        max-width:500px\">"
      CSD U2 add file_2019: "<div style=\"float: right; height:\n250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary><strong>**什么是样式表?**</strong></summary>\n样式表是一个控制网页要如何显示的文档。
        外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary><strong>**什么是CSS?**</strong></summary>\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n<details>\n<summary><strong>**如何创建新的样式表?**</strong></summary>\n要创建一个新的格式表，点击代码区的\"添加
        CSS\"按钮。\n</details>\n<details>\n<summary><strong>**如何命名我的样式表?**</strong></summary>\n你可以随意命名，但最好选一个相关的名字例如
        \"style.css\"（样式表）\n或\"aboutmestyles.css\"（关于我的样式表） 这样可以清楚知道这个文件用在什么地方。这些文件需要以以\".css\"扩展名结尾。.\n</details>\n<details>\n<summary><strong>**如何重新命名文件?**</strong></summary>\n要重新命名文件，你可以右键点击(或用控制键点击)文件名，选择”重新命名“选项。
        这将让你可以输入新的文件名。 在点击的文件高亮后再点击它，就可以重新命名了。\n</details>\n<details>\n<summary><strong>**如何在网页里添加样式表?**</strong></summary>\n要在网页里添加样式表，
        先打开网页的代码。在标题标签中，添加以下代码`<link rel=\"stylesheet\" href=\"style.css\">`.  然后把\"style.css\"
        改成你的样式表的名字。\n</details>\n</div>\n\n# 添加样式表\n\n这是你之前的项目。 在下一关里，你将有机会添加一些不同的样式进去。但开始前，你要添加样式表，并给它命名，把它连到你的HTML页面中。\n\n1.
        \ 为你的项目创建新的格式表。.\n2.  重新命名格式表文档.\n3.  把你的格式表添加到你的HTML网页。\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\"\nstyle=\"
        max-width:500px\">"
      CSD U2 challenge: |-
        # 挑战

        在开始这一挑战之前与您的老师进行核对。

        此页仅完成了一部分，并且有一些 bug。幸运的是, 有些注释应该能帮助你按照作者的意图来完成这个页面。

        # 这样做

        -   与您的伙伴一起查看该代码, 并讨论该页面应是什么样子。
        -   请共同完成页面, 注意格式化。
        -   与另一组对比看看页面是否相同。
      CSD U2 challenge_2018: |-
        # 挑战

        在开始这一挑战之前与老师确认一下。

        此页仅完成了一部分，并且有一些缺陷。幸运的是, 有些注释应该能帮助你按照作者的意图来完成这个页面。

        # 这样做

        -   与您的伙伴一起查看该代码, 并讨论该页面应是什么样子。
        -   请共同完成页面, 注意格式化。
        -   与另一组对比看看页面是否相同。
      CSD U2 challenge_2019: |-
        # 挑战

        在开始这一挑战之前与老师确认一下。

        此页仅完成了一部分，并且有一些缺陷。幸运的是, 有些注释应该能帮助你按照作者的意图来完成这个页面。

        # 这样做

        -   与您的伙伴一起查看该代码, 并讨论该页面应是什么样子。
        -   请共同完成页面, 注意格式化。
        -   与另一组对比看看页面是否相同。
      CSD U2 classes modify: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **代码是如何起作用的？**

        </summary>
        为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。

        样式表中的类是像下面的代码。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary>

        **什么样的规则能够加到类的规则组里？**

        </summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary>

        **为什么选择器前面有个句点？**

        </summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>

        **为什么网页开发人员需要用类？**

        </summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        <details>
        <summary>

        **我的RBG值不一样，但也是对的。**

        </summary>
        因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。

        </details>
        </div>
        # 添加规则

        冬天的词语应该用同样的颜色和字体。

        -   在样式表种找到给冬天的词语的样式组。
        -   增加一条规则来改变冬天词语的字体。可以选择任何字体，但应该和其它三个季节的都不一样。
        -   为冬天词语添加任何你喜欢的规则。
      CSD U2 classes modify_2018: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary><strong>**代码是如何起作用的？**</strong></summary>
        为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。

        样式表中的类是像下面的代码。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary><strong>**什么样的规则能够加到类的规则组里？**</strong>
        </summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary><strong>**为什么选择器前面有个句点？**</strong></summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary><strong>**为什么网页开发人员需要用类？**</strong></summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        <details>
        <summary><strong>**我的RBG值不一样，但也是对的。**</strong></summary>
        因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。

        </details>
        </div>
        # 添加规则

        冬天的词语应该用同样的颜色和字体。

        -   在样式表种找到给冬天的词语的样式组。
        -   增加一条规则来改变冬天词语的字体。可以选择任何字体，但应该和其它三个季节的都不一样。
        -   为冬天词语添加任何你喜欢的规则。
      CSD U2 classes modify_2019: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary><strong>**代码是如何起作用的？**</strong></summary>
        为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。

        样式表中的类是像下面的代码。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary><strong>**什么样的规则能够加到类的规则组里？**</strong>
        </summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary><strong>**为什么选择器前面有个句点？**</strong></summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary><strong>**为什么网页开发人员需要用类？**</strong></summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        <details>
        <summary><strong>**我的RBG值不一样，但也是对的。**</strong></summary>
        因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。

        </details>
        </div>
        # 添加规则

        冬天的词语应该用同样的颜色和字体。

        -   在样式表种找到给冬天的词语的样式组。
        -   增加一条规则来改变冬天词语的字体。可以选择任何字体，但应该和其它三个季节的都不一样。
        -   为冬天词语添加任何你喜欢的规则。
      CSD U2 classes sample: "<div style=\"float: right;\nheight: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**代码是如何起作用的？**\n\n</summary>\n为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。\n\n样式表中的类是像下面的代码。\n\n<pre>.winter
        {\n  color: rgb(195,230,255);\n}</pre>\n\n这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。\n\n将winter类加到一个`h5`元素的代码是`<h5
        class=\"winter\">`。标签中的`class=winter`会将类的所有内容加到这个标签上。\n\n</details>\n<details>\n<summary>\n\n**为什么选择器前面有个句点？**\n\n</summary>\n在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。\n</details>\n<details>\n<summary>\n\n**为什么网页开发人员需要用类？**\n\n</summary>\n即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。\n</details>\n<details>\n<summary>\n\n**我的RBG值不一样，但也是对的。**\n\n</summary>\n因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。\n\n</details>\n</div>\n#
        类(Class)\n\n在这个页面中，网页开发人员用类来给冬天颜色一些词语。\n\n-   看一看冬天词语的HTML代码。为什么\"snowy\"（下雪的）是唯一一个没有冬天颜色的词语？\n-
        \  添加HTML代码，来让\"snowy\"和其它词语一样用上同样的冬天的蓝色。\n-   看看样式表，来找到让所有词语都是冬季蓝的类，并检查你的RGB数字是否和这个接近。
        \ \n-   和伙伴讨论一下这些代码是如何起作用的。"
      CSD U2 classes sample_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>代码是如何起作用的？</strong>\n</summary>\n为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。\n\n样式表中的类是像下面的代码。\n\n<pre>.winter
        {\n  color: rgb(195,230,255);\n}</pre>\n\n这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。\n\n将winter类加到一个`h5`元素的代码是`<h5
        class=\"winter\">`。标签中的`class=winter`会将类的所有内容加到这个标签上。\n\n</details>\n<details>\n<summary>\n<strong>为什么选择器前面有个句点？</strong>\n</summary>\n在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。\n</details>\n<details>\n<summary>\n<strong>为什么网页开发人员需要用类？</strong>\n</summary>\n即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。\n</details>\n<details>\n<summary>\n<strong>我的RBG值不一样，但也是对的。</strong>\n</summary>\n\n因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。\n\n</details>\n</div>\n#
        类(Class)\n\n在这个页面中，网页开发人员用类来给冬天颜色一些词语。\n\n-   看一看冬天词语的HTML代码。为什么\"snowy\"（下雪的）是唯一一个没有冬天颜色的词语？\n-
        \  添加HTML代码，来让\"snowy\"和其它词语一样用上同样的冬天的蓝色。\n-   看看样式表，来找到让所有词语都是冬季蓝的类，并检查你的RGB数字是否和这个接近。
        \ \n-   和伙伴讨论一下这些代码是如何起作用的。"
      CSD U2 classes sample_2019: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>代码是如何起作用的？</strong>\n</summary>\n为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。\n\n样式表中的类是像下面的代码。\n\n<pre>.winter
        {\n  color: rgb(195,230,255);\n}</pre>\n\n这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。\n\n将winter类加到一个`h5`元素的代码是`<h5
        class=\"winter\">`。标签中的`class=winter`会将类的所有内容加到这个标签上。\n\n</details>\n<details>\n<summary>\n<strong>为什么选择器前面有个句点？</strong>\n</summary>\n在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。\n</details>\n<details>\n<summary>\n<strong>为什么网页开发人员需要用类？</strong>\n</summary>\n即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。\n</details>\n<details>\n<summary>\n<strong>我的RBG值不一样，但也是对的。</strong>\n</summary>\n\n因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。\n\n</details>\n</div>\n#
        类(Class)\n\n在这个页面中，网页开发人员用类来给冬天颜色一些词语。\n\n-   看一看冬天词语的HTML代码。为什么\"snowy\"（下雪的）是唯一一个没有冬天颜色的词语？\n-
        \  添加HTML代码，来让\"snowy\"和其它词语一样用上同样的冬天的蓝色。\n-   看看样式表，来找到让所有词语都是冬季蓝的类，并检查你的RGB数字是否和这个接近。
        \ \n-   和伙伴讨论一下这些代码是如何起作用的。"
      CSD U2 classes spring: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>

        **这些代码是如何起作用的？**

        </summary>
        为了让代码起作用，你需要创建一个spring（春天）的类（class），并将元素加到这个类中。

        spring类已经在样式表中创建好了，但还没有任何规则。

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        看看`winter`类里的规则，参考它来看看如何制作spring（春天）类的规则。

        你还需要添加一些元素到HTML文件里的spring类中。

        HTML文件的代码添加了一个有winter类的`h5`元素`<h5 class="winter">`。用这个模式来为spring类添加一个元素。

        </details>
        <details>
        <summary>

        **什么样的规则能够加到类的规则组里？**

        </summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary>

        **为什么选择器前面有个句点？**

        </summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>

        **为什么网页开发人员需要用类？**

        </summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        </div>
        # 春天类

        现在，你的春天类已经准备好了，可以开始其它季节了。

        -   在样式表中，找到春天词语样式的空的规则集。
        -   在其中加上两条规则，一条将课程中早先的春天的颜色设置到文本上，另一条给文本一个不同的字体，字体大小或其它修饰。
        -   将spring类增加到HTML页面的春天元素上。
      CSD U2 classes spring_2018: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**这些代码是如何起作用的？**</summary>
        For
        为了让代码起作用，你需要创建一个spring（春天）的类（class），并将元素加到这个类中。r

        spring类已经在样式表中创建好了，但还没有任何规则。

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        看看`winter`类里的规则，参考它来看看如何制作spring（春天）类的规则。

        你还需要添加一些元素到HTML文件里的spring类中。

        HTML文件的代码添加了一个有winter类的`h5`元素`<h5 class="winter">`。用这个模式来为spring类添加一个元素。

        </details>
        <details>
        <summary>***什么样的规则能够加到类的规则组里？**</summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary>**为什么选择器前面有个句点？**</summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>**为什么网页开发人员需要用类？**</summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        </div>
        # 春天类

        现在，你的春天类已经准备好了，可以开始其它季节了。

        -   在样式表中，找到春天词语样式的空的规则集。
        -   在其中加上两条规则，一条将课程中早先的春天的颜色设置到文本上，另一条给文本一个不同的字体，字体大小或其它修饰。
        -   将spring类增加到HTML页面的春天元素上。
      CSD U2 classes spring_2019: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**这些代码是如何起作用的？**</summary>
        For
        为了让代码起作用，你需要创建一个spring（春天）的类（class），并将元素加到这个类中。r

        spring类已经在样式表中创建好了，但还没有任何规则。

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        看看`winter`类里的规则，参考它来看看如何制作spring（春天）类的规则。

        你还需要添加一些元素到HTML文件里的spring类中。

        HTML文件的代码添加了一个有winter类的`h5`元素`<h5 class="winter">`。用这个模式来为spring类添加一个元素。

        </details>
        <details>
        <summary>***什么样的规则能够加到类的规则组里？**</summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary>**为什么选择器前面有个句点？**</summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>**为什么网页开发人员需要用类？**</summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        </div>
        # 春天类

        现在，你的春天类已经准备好了，可以开始其它季节了。

        -   在样式表中，找到春天词语样式的空的规则集。
        -   在其中加上两条规则，一条将课程中早先的春天的颜色设置到文本上，另一条给文本一个不同的字体，字体大小或其它修饰。
        -   将spring类增加到HTML页面的春天元素上。
      CSD U2 classes summer: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>

        **代码是如何起作用的？**

        </summary>
        为了让winter类起作用，需要创建一个winter类，并为这个类增加元素。

        这个类需要在样式表中用下面的代码来创建。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This
        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary>

        **如何创建一个新的规则集（rule-set）？**

        </summary>
        可以按照样式表中的`winter`和`spring`类的形式来创建一个新的规则集。
        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        选择器和颜色的值会有所不同，但形式是一样的。

        <pre>.classname {
          property1: value1;
          property2:
        value2;
        }</pre>

        </details>
        <details>
        <summary>

        **为什么选择器前面有个句点？**

        </summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>

        **为什么网页开发人员需要用类？**

        </summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        </div>

        # 夏天和秋天的类

        -   在样式表里，为"summer"（夏天）类创建一个新的规则集。
        -   在夏天类里创建一个规则来使用夏天的RGB颜色。
        -   将夏天类添加到HTML的夏天元素里。
        -   为autumn（秋天）类应用同样的步骤。
      CSD U2 classes summer_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**代码是如何起作用的？**</strong>
        </summary>
        为了让winter类起作用，需要创建一个winter类，并为这个类增加元素。

        这个类需要在样式表中用下面的代码来创建。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This
        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary>

        <strong>**如何创建一个新的规则集（rule-set）？**</strong>

        </summary>
        你能按照样式表中的`winter`和`spring`类的形式来创建一个新的规则集。
        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        选择器和颜色的值会有所不同，但形式是一样的。

        <pre>.classname {
          property1: value1;
          property2:
        value2;
        }</pre>

        </details>
        <details>
        <summary>

        **为什么选择器前面有个句点？**

        </summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>
        <strong>**为什么网页开发人员需要用类？**</strong>
        </summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。

        </details>
        </div>

        # 夏天和秋天的类

        -   在样式表里，为"summer"（夏天）类创建一个新的规则集。
        -   在夏天类里创建一个规则来使用夏天的RGB颜色。
        -   将夏天类添加到HTML的夏天元素里。
        -   为autumn（秋天）类应用同样的步骤。
      CSD U2 classes summer_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**代码是如何起作用的？**</strong>
        </summary>
        为了让winter类起作用，需要创建一个winter类，并为这个类增加元素。

        这个类需要在样式表中用下面的代码来创建。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This
        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary>

        <strong>**如何创建一个新的规则集（rule-set）？**</strong>

        </summary>
        你能按照样式表中的`winter`和`spring`类的形式来创建一个新的规则集。
        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        选择器和颜色的值会有所不同，但形式是一样的。

        <pre>.classname {
          property1: value1;
          property2:
        value2;
        }</pre>

        </details>
        <details>
        <summary>

        **为什么选择器前面有个句点？**

        </summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>
        <strong>**为什么网页开发人员需要用类？**</strong>
        </summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。

        </details>
        </div>

        # 夏天和秋天的类

        -   在样式表里，为"summer"（夏天）类创建一个新的规则集。
        -   在夏天类里创建一个规则来使用夏天的RGB颜色。
        -   将夏天类添加到HTML的夏天元素里。
        -   为autumn（秋天）类应用同样的步骤。
      CSD U2 commenting: "# 注释\n\n<div style=\"float:\nright; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>**什么是空白符?**\n</summary>\n空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。\n</details>\n<details>\n<summary>**什么是缩进？**</summary>\n缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：\n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n\n</details>\n<details>
        \ \n<summary> ** 什么是格式化？ ** </summary>  \n格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：\n<pre>
        \n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n</details>\n</div>\n\n你可以向代码中添加
        **comments**（注释）, 以解释代码的不同部分及其应该要创建些什么。注释可以帮助您进行调试，并且还将帮助试图理解代码的其他人。\n\n<pre>\n&lt;!--\n这是一条注释
        --&gt;\n</pre>\n\n# 这样做\n\n-   和你的伙伴一起查看代码并找到注释。\n-   使用注释来帮助修复 HTML 中的缺陷。"
      CSD U2 commenting_2018: "# 注释\n\n<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>**什么是空白符?**\n</summary>\n空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。\n</details>\n<details>\n<summary>**什么是缩进？**</summary>\n缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：\n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n\n</details>\n<details>
        \ \n<summary> ** 什么是格式化？ ** </summary>  \n格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：\n<pre>
        \n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n</details>\n</div>\n\n你可以向代码中添加
        **comments**（注释）, 以解释代码的不同部分及其应该要创建些什么。注释可以帮助您进行调试，并且还将帮助试图理解代码的其他人。\n\n<pre>\n&lt;!--\n这是一条注释
        --&gt;\n</pre>\n\n# 这样做\n\n-   和你的伙伴一起查看代码并找到注释。\n-   使用注释来帮助修复 HTML 中的缺陷。"
      CSD U2 commenting_2019: "# 注释\n\n<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>**什么是空白符?**\n</summary>\n空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。\n</details>\n<details>\n<summary>**什么是缩进？**</summary>\n缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：\n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n\n</details>\n<details>
        \ \n<summary> ** 什么是格式化？ ** </summary>  \n格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：\n<pre>
        \n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n</details>\n</div>\n\n你可以向代码中添加
        **comments**（注释）, 以解释代码的不同部分及其应该要创建些什么。注释可以帮助您进行调试，并且还将帮助试图理解代码的其他人。\n\n<pre>\n&lt;!--\n这是一条注释
        --&gt;\n</pre>\n\n# 这样做\n\n-   和你的伙伴一起查看代码并找到注释。\n-   使用注释来帮助修复 HTML 中的缺陷。"
      CSD U2 create page: |-
        # 创建并命名你的新页面

        在开始写代码之前，你应该确保将所有需要的页面都添加到了项目中

        # 这样做

        -   创建一个新的HTML页面，并重命名它。(如果忘了的话，可以看看 <a href="/s/csd2/stage/6/puzzle/8" target="_new">课程6
            关卡8</a>。)
        -   对所有你想添加的页面重复这个操作。
      CSD U2 create page_2018: |-
        # 创建并命名你的新页面

        在开始写代码之前，你应该确保将所有需要的页面都添加到了项目中

        # 这样做

        -   创建一个新的HTML页面，并重命名它。(如果忘了的话，可以看看 <a href="/s/csd2/stage/6/puzzle/8" target="_new">课程6
            关卡8</a>。)
        -   对所有你想添加的页面重复这个操作。
      CSD U2 create page_2019: |-
        # 创建并命名你的新页面

        在开始写代码之前，你应该确保将所有需要的页面都添加到了项目中

        # 这样做

        -   创建一个新的HTML页面，并重命名它。(如果忘了的话，可以看看 <a href="/s/csd2/stage/6/puzzle/8" target="_new">课程6
            关卡8</a>。)
        -   对所有你想添加的页面重复这个操作。
      CSD U2 header footer: |-
        # 导航栏和页脚

        你的每个页面都需要导航栏和页脚。

        # 这样做

        -   确保每个页面都有一个导航栏，能够跳转到站点的其它页面。回顾导航栏，点击<a href="/s/csd2/stage/9/puzzle/4"
            target="_new">课程9关卡4</a>.
        -   确保每个页面的底部都有一个页脚，解释了你页面的版权信息。
            (浏览<a href="https://creativecommons.org/choose/" target="_new">知识共享</a> 获得创建这个HTMl的帮助。)
      CSD U2 header footer_2018: |-
        # 导航栏和页脚

        你的每个页面都需要导航栏和页脚。

        # 这样做

        -   确保每个页面都有一个导航栏，能够跳转到站点的其它页面。回顾导航栏，点击<a href="/s/csd2/stage/9/puzzle/4"
            target="_new">课程9关卡4</a>.
        -   确保每个页面的底部都有一个页脚，解释了你页面的版权信息。
            (浏览<a href="https://creativecommons.org/choose/" target="_new">知识共享</a> 获得创建这个HTMl的帮助。)
      CSD U2 header footer_2019: |-
        # 导航栏和页脚

        你的每个页面都需要导航栏和页脚。

        # 这样做

        -   确保每个页面都有一个导航栏，能够跳转到站点的其它页面。回顾导航栏，点击<a href="/s/csd2/stage/9/puzzle/4"
            target="_new">课程9关卡4</a>.
        -   确保每个页面的底部都有一个页脚，解释了你页面的版权信息。
            (浏览<a href="https://creativecommons.org/choose/" target="_new">知识共享</a> 获得创建这个HTMl的帮助。)
      CSD U2 layout style bgcolor_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**代码如何起作用？**</strong>
        </summary>
        这是让页面背景变成蓝色的代码：

        <pre>body
        {
          background-color: lightblue;
        }</pre>

        -   `body`是一个_选择器_。它指定了哪些元素应该遵循花括号里的规则。在这里，body（正文）元素是整个页面。
        -   `background-color: lightblue;`是让整个页面变成淡蓝色的规则。
        -   `background-color`（背景-颜色）是_属性_。它解释了这条是什么规则。在这里，表示背景的颜色。
        -   `lightblue`是_值_。它解释了这条规则会被怎么应用，在这里，表示背景的淡蓝色。
            </details>
            <details>
            <summary>
            <strong>**我能在CSS中使用什么颜色？**</strong>
            </summary>
            CSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        -   HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        -   CSS正确的颜色值</a>查看更多信息。
            </details>
            <details>
            <summary>
            <strong>**`background-color`属性做了什么？**</strong></summary>
            `background-color`属性决定了一个元素的背景颜色。可以在<a href="http://www.w3schools.com/cssref/pr_background-color.asp">W3Schools
        -   CSS background-color 属性</a>查看关于这个属性的更多信息。
            </details>
            <details>
            <summary>
            <strong>**如果页面里的元素有着与body不同的背景颜色会怎样？**</strong></summary>
            你可以通过为`p`标签增加一个`background-color`规则来寻找答案。这个段落会有`p`标签上的颜色，而页面的剩余部分会遵循`body`标签的规则。
            </details>
            <details>
            <summary>
            <strong>**什么是样式表？**</strong>
            </summary>
            样式表是一个控制网页如何显示的文档。外部样式表会作为单独的文件，并被链接到HTML页面上。
            </details>
            <details>
            <summary>
            <strong>**CSS是什么？**</strong>
            </summary>
            CSS是一个控制网站上的内容如何显示的语言。它通过规则集（rule-set）来改变页面的外观。每个规则集都有一个选择器（selector），它会指定页面上的哪些元素会被影响，以及包含用来解释如何显示元素的规则。 每条规则由一个属性和属性值组成。

        这是一个规则集的例子，它让`h2`标签里的文本成为蓝色，并采用了草书：

        <pre>h2
        {
           color: blue;
           font-family: cursive;
        </pre>

        在这个例子中，`h2`是选择器，`color`和`font-family`是属性，而`blue`和`cursive`是对应属性的值。

        </details>
        </div>

        # 背景颜色

        -   在岩石表中找到让整个页面背景是蓝色的代码。
        -   改动代码，让页面成为不同的颜色。
        -   试着只改动这些段落的背景颜色。
      CSD U2 layout style bgcolor_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**代码如何起作用？**</strong>
        </summary>
        这是让页面背景变成蓝色的代码：

        <pre>body
        {
          background-color: lightblue;
        }</pre>

        -   `body`是一个_选择器_。它指定了哪些元素应该遵循花括号里的规则。在这里，body（正文）元素是整个页面。
        -   `background-color: lightblue;`是让整个页面变成淡蓝色的规则。
        -   `background-color`（背景-颜色）是_属性_。它解释了这条是什么规则。在这里，表示背景的颜色。
        -   `lightblue`是_值_。它解释了这条规则会被怎么应用，在这里，表示背景的淡蓝色。
            </details>
            <details>
            <summary>
            <strong>**我能在CSS中使用什么颜色？**</strong>
            </summary>
            CSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        -   HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        -   CSS正确的颜色值</a>查看更多信息。
            </details>
            <details>
            <summary>
            <strong>**`background-color`属性做了什么？**</strong></summary>
            `background-color`属性决定了一个元素的背景颜色。可以在<a href="http://www.w3schools.com/cssref/pr_background-color.asp">W3Schools
        -   CSS background-color 属性</a>查看关于这个属性的更多信息。
            </details>
            <details>
            <summary>
            <strong>**如果页面里的元素有着与body不同的背景颜色会怎样？**</strong></summary>
            你可以通过为`p`标签增加一个`background-color`规则来寻找答案。这个段落会有`p`标签上的颜色，而页面的剩余部分会遵循`body`标签的规则。
            </details>
            <details>
            <summary>
            <strong>**什么是样式表？**</strong>
            </summary>
            样式表是一个控制网页如何显示的文档。外部样式表会作为单独的文件，并被链接到HTML页面上。
            </details>
            <details>
            <summary>
            <strong>**CSS是什么？**</strong>
            </summary>
            CSS是一个控制网站上的内容如何显示的语言。它通过规则集（rule-set）来改变页面的外观。每个规则集都有一个选择器（selector），它会指定页面上的哪些元素会被影响，以及包含用来解释如何显示元素的规则。 每条规则由一个属性和属性值组成。

        这是一个规则集的例子，它让`h2`标签里的文本成为蓝色，并采用了草书：

        <pre>h2
        {
           color: blue;
           font-family: cursive;
        </pre>

        在这个例子中，`h2`是选择器，`color`和`font-family`是属性，而`blue`和`cursive`是对应属性的值。

        </details>
        </div>

        # 背景颜色

        -   在岩石表中找到让整个页面背景是蓝色的代码。
        -   改动代码，让页面成为不同的颜色。
        -   试着只改动这些段落的背景颜色。
      CSD U2 layout style body_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**`body`选择器做什么？**</strong>
        </summary>
        由于网站的内容全都包含在`body` 标签中, body选择器给出网页上所有内容的样式。</details>
        <details>
        <summary>
        <strong>**`color`属性做什么？**</strong>
        </summary>
        `color`属性决定文本的颜色。如果那里没有文本，那么看起来就像无事发生。了解更多在<a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>，中文教程请搜索菜鸟教程。
        </details>
        <details>
        <summary>
        <strong>**`text-align`属性做什么？**</strong>
        </summary>
        `text-align`属性使文本左对齐，右对齐，或居中.了解更多在<a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>
        </details>
        <details>
        <summary>
        <strong>**`text-decoration`属性做什么？**</strong>
        </summary>
        `text-decoration`属性会在文本的上面，下面，或中间划一道线.  了解更多在<a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
        </details>
        <details>
        <summary>
        <strong>**`font-family`属性做什么？**</strong>
        </summary>
        `font-family`属性改变文本的字体。这给出了对应使用字体的大致描述， 但在不同的浏览器中识别可能有差异。了解更多在<a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>
        </details>
        <details>
        <summary>
        <strong>**`font-size`属性做什么？**</strong>
        </summary>
        `font-size` 属性改变文本的大小。您可以使用通用术语，如“小”、“中”和“大”，也可以指定精确的大小(以像素为单位)，如“20px”。 了解更多在<a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>
        </details>
        <details>
        <summary>
        <strong>**样式表是什么？**</strong>
        </summary>
        样式表是控制网页如何显示的文档。外部样式表是链接到HTML页面的独立文件。
        </details>
        <details>
        <summary>
        <strong>**CSS是什么？**</strong>
        </summary>

        CSS是一种决定网站上的内容如何显示的语言。它使用规则集来改变页面的样子。每个规则集都有一个选择器，他决定了页面上的哪些元素会受到影响，规则解释如何显示元素。每条规则都由一个属性和该属性的值组成。

        例子：这是一个将文本打上`h2`标签，字体颜色为蓝色，字体为cursive的规则集：

        <pre>h2 {
        color: blue;
        font-family: cursive;
        </pre>

        本例中，`h2`是选择器，`color`和`font-family`是属性，`blue`和`cursive`是这些属性的值。

        </details>
        </div>

        # Body 元素

        -   在样式表中找到`body`规则集。
        -   和同伴讨论若在`body`规则集中添加`text-align`，`color`或其他文本属性会发生什么。
        -   尝试其他属性来检验你的猜测。
      CSD U2 layout style body_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**`body`选择器做什么？**</strong>
        </summary>
        由于网站的内容全都包含在`body` 标签中, body选择器给出网页上所有内容的样式。</details>
        <details>
        <summary>
        <strong>**`color`属性做什么？**</strong>
        </summary>
        `color`属性决定文本的颜色。如果那里没有文本，那么看起来就像无事发生。了解更多在<a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>，中文教程请搜索菜鸟教程。
        </details>
        <details>
        <summary>
        <strong>**`text-align`属性做什么？**</strong>
        </summary>
        `text-align`属性使文本左对齐，右对齐，或居中.了解更多在<a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>
        </details>
        <details>
        <summary>
        <strong>**`text-decoration`属性做什么？**</strong>
        </summary>
        `text-decoration`属性会在文本的上面，下面，或中间划一道线.  了解更多在<a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
        </details>
        <details>
        <summary>
        <strong>**`font-family`属性做什么？**</strong>
        </summary>
        `font-family`属性改变文本的字体。这给出了对应使用字体的大致描述， 但在不同的浏览器中识别可能有差异。了解更多在<a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>
        </details>
        <details>
        <summary>
        <strong>**`font-size`属性做什么？**</strong>
        </summary>
        `font-size` 属性改变文本的大小。您可以使用通用术语，如“小”、“中”和“大”，也可以指定精确的大小(以像素为单位)，如“20px”。 了解更多在<a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>
        </details>
        <details>
        <summary>
        <strong>**样式表是什么？**</strong>
        </summary>
        样式表是控制网页如何显示的文档。外部样式表是链接到HTML页面的独立文件。
        </details>
        <details>
        <summary>
        <strong>**CSS是什么？**</strong>
        </summary>

        CSS是一种决定网站上的内容如何显示的语言。它使用规则集来改变页面的样子。每个规则集都有一个选择器，他决定了页面上的哪些元素会受到影响，规则解释如何显示元素。每条规则都由一个属性和该属性的值组成。

        例子：这是一个将文本打上`h2`标签，字体颜色为蓝色，字体为cursive的规则集：

        <pre>h2 {
        color: blue;
        font-family: cursive;
        </pre>

        本例中，`h2`是选择器，`color`和`font-family`是属性，`blue`和`cursive`是这些属性的值。

        </details>
        </div>

        # Body 元素

        -   在样式表中找到`body`规则集。
        -   和同伴讨论若在`body`规则集中添加`text-align`，`color`或其他文本属性会发生什么。
        -   尝试其他属性来检验你的猜测。
      CSD U2 layout style border_2018: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary>
        <strong>**我能在CSS里使用什么颜色？**</strong></summary>
        CSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS正确的颜色值</a>查看更多信息。
        </details>
        <details>
        <summary>
        <strong>**这些代码是如何起作用的？**</strong>
        </summary>
        这是实现图片边框的代码：

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img`是一个_选择器_。它指定了哪些元素上会应用花括号里的规则，在这里，指定的是图片。
        -   `border-color:
            saddlebrown;`,`border-width: 4px;`,`border-style: solid;`，和`border-radius: 10px;`是制作边框的规则。
            </details>
            <details>
            <summary>
            <strong>**`border-style`（边框-样式）属性有什么用？**</strong>
            </summary>
            `border-style`属性决定了元素使用什么种类的边框（实线、点线，等等）。可以阅读<a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style属性</a>了解更多。
            </details>
            <details>\
            <summary>
            <strong>**`border-radius`属性有什么用？**</strong>
            </summary>
            `border-radius`属性决定了元素角上的圆弧的半径。大一点的半径会形成大一点的，软一点的曲线。零半径意味着正常的直角。可以阅读<a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools
        -   CSS3 border-radius属性</a>了解更多。
            </details>
            <details>
            <summary>
            <strong>**`float`属性有什么用？**</strong>
            </summary>
            `float`属性会让元素"浮动"，意思是这个元素会往某个方向流动一点。如果`float`是`left`（左），那么元素会往左边浮动，并且它之后的元素会在它右边显示出来。如果`float`值是`right`（右），那么元素会往右边浮动，它之后的元素会在它左边显示出来。可以阅读<a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float 属性</a>了解更多。
            </details>
            </div>

        # 边框

        -   在样式表中找到设置图片边框颜色和宽度的规则。
        -   改变边框的颜色和宽度。
        -   试试不同的边框样式。
        -   从`dotted`, `dashed`, `solid`, 和`double`中选择。
        -   将边框应用到另一种页面元素上，比如某个标题或段落。
      CSD U2 layout style border_2019: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary>
        <strong>**我能在CSS里使用什么颜色？**</strong></summary>
        CSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS正确的颜色值</a>查看更多信息。
        </details>
        <details>
        <summary>
        <strong>**这些代码是如何起作用的？**</strong>
        </summary>
        这是实现图片边框的代码：

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img`是一个_选择器_。它指定了哪些元素上会应用花括号里的规则，在这里，指定的是图片。
        -   `border-color:
            saddlebrown;`,`border-width: 4px;`,`border-style: solid;`，和`border-radius: 10px;`是制作边框的规则。
            </details>
            <details>
            <summary>
            <strong>**`border-style`（边框-样式）属性有什么用？**</strong>
            </summary>
            `border-style`属性决定了元素使用什么种类的边框（实线、点线，等等）。可以阅读<a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style属性</a>了解更多。
            </details>
            <details>\
            <summary>
            <strong>**`border-radius`属性有什么用？**</strong>
            </summary>
            `border-radius`属性决定了元素角上的圆弧的半径。大一点的半径会形成大一点的，软一点的曲线。零半径意味着正常的直角。可以阅读<a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools
        -   CSS3 border-radius属性</a>了解更多。
            </details>
            <details>
            <summary>
            <strong>**`float`属性有什么用？**</strong>
            </summary>
            `float`属性会让元素"浮动"，意思是这个元素会往某个方向流动一点。如果`float`是`left`（左），那么元素会往左边浮动，并且它之后的元素会在它右边显示出来。如果`float`值是`right`（右），那么元素会往右边浮动，它之后的元素会在它左边显示出来。可以阅读<a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float 属性</a>了解更多。
            </details>
            </div>

        # 边框

        -   在样式表中找到设置图片边框颜色和宽度的规则。
        -   改变边框的颜色和宽度。
        -   试试不同的边框样式。
        -   从`dotted`, `dashed`, `solid`, 和`double`中选择。
        -   将边框应用到另一种页面元素上，比如某个标题或段落。
      CSD U2 layout style sample_2018: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>**`body`选择器做了什么？**</strong>
        </summary>
        因为网页的所有内容都在`body`（正文）标签里，正文选择器能为网页中所有内容应用样式规则。
        </details>
        <details>
        <summary>
        <strong>**`border-style`属性有什么用？ **</strong>
        </summary>
        `border-style`属性决定了元素使用什么种类的边框（实线、点线，等等）。可以阅读<a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools
        - CSS border-style属性</a>了解更多。
        </details>
        <details>
        <summary>
        <strong>**`border-radius`属性有什么用？**</strong>
        </summary>
        `border-radius`属性决定了元素角上的圆弧的半径。大一点的半径会形成大一点的，软一点的曲线。零半径意味着正常的直角。可以阅读<a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius属性</a>了解更多。
        </details>
        <details>
        <summary>
        <strong>**`float`属性有什么用？**</strong>
        </summary>
        `float`属性会让元素"浮动"，意思是这个元素会往某个方向流动一点。如果`float`是`left`（左），那么元素会往左边浮动，并且它之后的元素会在它右边显示出来。如果`float`值是`right`（右），那么元素会往右边浮动，它之后的元素会在它左边显示出来。可以阅读<a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float 属性</a>了解更多。
        </details>
        </div>

        # 布局和样式

        -   浏览一下下面网页的新样式。
        -   打开样式表。
        -   和你的伙伴讨论一下，你认为CSS代码中的哪部分让页面显示得不同。
        -   如何让整个页面变蓝？
        -   如何让图片放在所有内容的左边？
        -   什么让图片的角是圆的？

        在下一关中，你会更改并添加这个页面中的新样式。
      CSD U2 layout style sample_2019: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>**`body`选择器做了什么？**</strong>
        </summary>
        因为网页的所有内容都在`body`（正文）标签里，正文选择器能为网页中所有内容应用样式规则。
        </details>
        <details>
        <summary>
        <strong>**`border-style`属性有什么用？ **</strong>
        </summary>
        `border-style`属性决定了元素使用什么种类的边框（实线、点线，等等）。可以阅读<a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools
        - CSS border-style属性</a>了解更多。
        </details>
        <details>
        <summary>
        <strong>**`border-radius`属性有什么用？**</strong>
        </summary>
        `border-radius`属性决定了元素角上的圆弧的半径。大一点的半径会形成大一点的，软一点的曲线。零半径意味着正常的直角。可以阅读<a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius属性</a>了解更多。
        </details>
        <details>
        <summary>
        <strong>**`float`属性有什么用？**</strong>
        </summary>
        `float`属性会让元素"浮动"，意思是这个元素会往某个方向流动一点。如果`float`是`left`（左），那么元素会往左边浮动，并且它之后的元素会在它右边显示出来。如果`float`值是`right`（右），那么元素会往右边浮动，它之后的元素会在它左边显示出来。可以阅读<a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float 属性</a>了解更多。
        </details>
        </div>

        # 布局和样式

        -   浏览一下下面网页的新样式。
        -   打开样式表。
        -   和你的伙伴讨论一下，你认为CSS代码中的哪部分让页面显示得不同。
        -   如何让整个页面变蓝？
        -   如何让图片放在所有内容的左边？
        -   什么让图片的角是圆的？

        在下一关中，你会更改并添加这个页面中的新样式。
      CSD U2 link demo: |-
        # 制作多个网页的网站

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是超链接？**</summary>
        超链接能连接到本站点或其它站点的网页上。你需要通过增加连接到各个网页的超链接来制作网站的导航。你可以**用`<a>`元素来给网页增加超链接**。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。<br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>**怎样增加一个超链接？**</summary>
        你可以**用`<a>`元素来给网页增加超链接**。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。 <br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅&lt;/a&gt;
        </pre>

        </details>
        </div>

        一个网站会包括一个以上的页面，它们应该相互之间连接起来。这是一个项目的例子，它有多个页面，并用超链接连起来了。（当你点击有蓝色下划线的单词会到达另一个页面）。

        # 这样做

        -   用检查器来看看在index.html创建超链接的代码。
        -   和你的伙伴讨论一下，这个代码是如何工作的。
        -   点击左边文件列表的recipe.html页面。在这个页面顶端加一个超链接回到index.html页面。
      CSD U2 link demo_2018: |-
        # 制作多个网页的网站

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>

        <summary>
        **什么是超链接？**
        </summary>

        超链接能连接到本站点或其它站点的网页上。你需要通过增加连接到各个网页的超链接来制作网站的导航。你可以**用`<a>`元素来给网页增加超链接**。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。<br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>怎样增加一个超链接？</strong>
        </summary>
        你可以<strong>用`<a>`元素来给网页增加超链接</strong>。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。 <br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅&lt;/a&gt;
        </pre>

        </details>
        </div>

        一个网站会包括一个以上的页面，它们应该相互之间连接起来。这是一个项目的例子，它有多个页面，并用超链接连起来了。（当你点击有蓝色下划线的单词会到达另一个页面）。

        # 这样做

        -   用检查器来看看在index.html创建超链接的代码。
        -   和你的伙伴讨论一下，这个代码是如何工作的。
        -   点击左边文件列表的recipe.html页面。在这个页面顶端加一个超链接回到index.html页面。
      CSD U2 link demo_2019: |-
        # 制作多个网页的网站

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>

        <summary>
        **什么是超链接？**
        </summary>

        超链接能连接到本站点或其它站点的网页上。你需要通过增加连接到各个网页的超链接来制作网站的导航。你可以**用`<a>`元素来给网页增加超链接**。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。<br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>怎样增加一个超链接？</strong>
        </summary>
        你可以<strong>用`<a>`元素来给网页增加超链接</strong>。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。 <br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅&lt;/a&gt;
        </pre>

        </details>
        </div>

        一个网站会包括一个以上的页面，它们应该相互之间连接起来。这是一个项目的例子，它有多个页面，并用超链接连起来了。（当你点击有蓝色下划线的单词会到达另一个页面）。

        # 这样做

        -   用检查器来看看在index.html创建超链接的代码。
        -   和你的伙伴讨论一下，这个代码是如何工作的。
        -   点击左边文件列表的recipe.html页面。在这个页面顶端加一个超链接回到index.html页面。
      CSD U2 lists intro: |-
        # 列表

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>

        **什么是列表的两种类型？**

        </summary>

        HTML中有两种类型的列表，有序的和无序的列表。

        </details>

        <details>
        <summary>

        **什么是无序的列表？**

        </summary>
        无序列表就是一组符号列表。
        <br /><br />
        无序列表元素的标签是`<ul> </ul>`。这是<strong>U</strong>nordered <strong>L</strong>ist（无序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，无序列表里。
        </details>

        <details>
        <summary>

        **我该如何增加一个无序列表？**

        </summary>
        制作一个无序列表需要两步：制作列表和增加列表条目。先写上无序列表标签 `<ul> </ul>`来增加无序列表。接着将你的列表条目加到无序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br />
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ul> </ul>`标签里面的。
        </details>

        <details>
        <summary>

        **什么是有序列表？**

        </summary>
        有序列表是一组数字符号的列表。
        <br /><br />
        有序列表元素的标签是`<ol> </ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表里。
        </details>

        <details>
        <summary>**我该如何增加一个有序列表？**</summary>
        制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签 `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br/>
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ol> </ol>` 标签里面的。
        </details>
        </div>

        你也能用HTML来给页面增加不同类型的列表。这个配方页面包括两种类型的列表，一个有序的（数字的），一个无序的（符号的）。

        # 这样做

        -   用检查器来看看这两种不同类型的列表
        -   确保你和你的伙伴都对这不同类型的标签是什么达成一致。
        -   修复代码，使得每个列表中的第二个条目能正确显示。
      CSD U2 lists intro_2018: |-
        # Lists

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>什么是列表的两种类型？</strong>
        </summary>

        HTML中有两种类型的列表，有序的和无序的列表。

        </details>

        <details>
        <summary>
        <strong>什么是无序的列表？</strong>
        </summary>
        无序列表就是一组符号列表。
        <br /><br />
        无序列表元素的标签是`<ul> </ul>`。这是<strong>U</strong>nordered <strong>L</strong>ist（无序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，无序列表里。
        </details>

        <details>
        <summary>
        <strong>我该如何增加一个无序列表？</strong>
        </summary>
        制作一个无序列表需要两步：制作列表和增加列表条目。先写上无序列表标签 `<ul> </ul>`来增加无序列表。接着将你的列表条目加到无序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br />
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ul> </ul>`标签里面的。
        </details>

        <details>
        <summary>
        <strong>什么是有序列表？</strong>
        </summary>
        有序列表是一组数字符号的列表。
        <br /><br />
        有序列表元素的标签是`<ol> </ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表里。
        </details>

        <details>
        <summary>
        <strong>我该如何增加一个有序列表？</strong>
        </summary>
        制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签 `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br/>
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ol> </ol>` 标签里面的。
        </details>
        </div>

        你也能用HTML来给页面增加不同类型的列表。这个配方页面包括两种类型的列表，一个有序的（数字的），一个无序的（符号的）。

        # 这样做

        -   用检查器来看看这两种不同类型的列表
        -   确保你和你的伙伴都对这不同类型的标签是什么达成一致。
        -   修复代码，使得每个列表中的第二个条目能正确显示。
      CSD U2 lists intro_2019: |-
        # Lists

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>什么是列表的两种类型？</strong>
        </summary>

        HTML中有两种类型的列表，有序的和无序的列表。

        </details>

        <details>
        <summary>
        <strong>什么是无序的列表？</strong>
        </summary>
        无序列表就是一组符号列表。
        <br /><br />
        无序列表元素的标签是`<ul> </ul>`。这是<strong>U</strong>nordered <strong>L</strong>ist（无序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，无序列表里。
        </details>

        <details>
        <summary>
        <strong>我该如何增加一个无序列表？</strong>
        </summary>
        制作一个无序列表需要两步：制作列表和增加列表条目。先写上无序列表标签 `<ul> </ul>`来增加无序列表。接着将你的列表条目加到无序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br />
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ul> </ul>`标签里面的。
        </details>

        <details>
        <summary>
        <strong>什么是有序列表？</strong>
        </summary>
        有序列表是一组数字符号的列表。
        <br /><br />
        有序列表元素的标签是`<ol> </ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表里。
        </details>

        <details>
        <summary>
        <strong>我该如何增加一个有序列表？</strong>
        </summary>
        制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签 `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br/>
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ol> </ol>` 标签里面的。
        </details>
        </div>

        你也能用HTML来给页面增加不同类型的列表。这个配方页面包括两种类型的列表，一个有序的（数字的），一个无序的（符号的）。

        # 这样做

        -   用检查器来看看这两种不同类型的列表
        -   确保你和你的伙伴都对这不同类型的标签是什么达成一致。
        -   修复代码，使得每个列表中的第二个条目能正确显示。
      CSD U2 navigation: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>

        **什么是超链接？**

        </summary>
        超链接能够连接到本站网页或是外面的网页。要增加到本站网页的导航，你需要增加一些能够链接到本站网页的超链接。你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。<br><br>

        <pre>
        &lt;a
        href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>

        **如何增加一个超链接？**

        </summary>
        你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        </div>

        # 创建导航栏

        这是你以前的项目。你要将两个页面通过页面顶部的**导航栏**连接在一起。网站通常会有一个所有页面都有的，相同的导航栏。这样就能在网站中的不同页面间跳转了。<a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/"
        target="_new">这个页面</a>有个导航栏的例子。

        # 这样做

        -   在你的首页(index.html)的顶部增加两个超链接，一个指向列表页面，一个指向首页。
        -   _虽然有个指向自己的页面看起来很奇怪，但是这让导航栏在每个页面上都是完全一样的，从而减少困惑。_
        -   将导航栏代码复制到列表页面的顶部。
        -   在预览区域点击它们来测试链接。
      CSD U2 navigation_2018: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>**什么是超链接？**</strong>
        </summary>

        超链接能够连接到本站网页或是外面的网页。要增加到本站网页的导航，你需要增加一些能够链接到本站网页的超链接。你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。<br><br>

        <pre>
        &lt;a
        href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>

        <strong>如何增加一个超链接？</strong>

        </summary>
        你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        </div>

        # 创建导航栏

        这是你以前的项目。你要将两个页面通过页面顶部的**导航栏**连接在一起。网站通常会有一个所有页面都有的，相同的导航栏。这样就能在网站中的不同页面间跳转了。<a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/"
        target="_new">这个页面</a>有个导航栏的例子。

        # 这样做

        -   在你的首页(index.html)的顶部增加两个超链接，一个指向列表页面，一个指向首页。
        -   _虽然有个指向自己的页面看起来很奇怪，但是这让导航栏在每个页面上都是完全一样的，从而减少困惑。_
        -   将导航栏代码复制到列表页面的顶部。
        -   在预览区域点击它们来测试链接。
      CSD U2 navigation_2019: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>**什么是超链接？**</strong>
        </summary>

        超链接能够连接到本站网页或是外面的网页。要增加到本站网页的导航，你需要增加一些能够链接到本站网页的超链接。你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。<br><br>

        <pre>
        &lt;a
        href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>

        <strong>如何增加一个超链接？</strong>

        </summary>
        你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        </div>

        # 创建导航栏

        这是你以前的项目。你要将两个页面通过页面顶部的**导航栏**连接在一起。网站通常会有一个所有页面都有的，相同的导航栏。这样就能在网站中的不同页面间跳转了。<a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/"
        target="_new">这个页面</a>有个导航栏的例子。

        # 这样做

        -   在你的首页(index.html)的顶部增加两个超链接，一个指向列表页面，一个指向首页。
        -   _虽然有个指向自己的页面看起来很奇怪，但是这让导航栏在每个页面上都是完全一样的，从而减少困惑。_
        -   将导航栏代码复制到列表页面的顶部。
        -   在预览区域点击它们来测试链接。
      CSD U2 new page: |-
        # 为你的网站创建一个新页面。

        这是你以前的项目。你需要添加另一个页面。你的页面可以是排行榜，配方，或者其它你想加的东西。

        # 这样做

        \*
        通过点击 !\[](\<<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38>
        PM.png>)添加一个新页面。新页面会出现在左边工作区中的文件列表里。

        -   通过右击它或者选择"重命名"来给它重新命名。**确保这个文件名是唯一的，有描述性的，并以".html"结尾**.
        -   在新页面中加入HTML。它应该包括：
        -   一个列表
        -   一个标头
      CSD U2 new page_2018: |-
        # 为你的网站创建一个新页面。

        这是你以前的项目。你需要添加另一个页面。你的页面可以是排行榜，配方，或者其它你想加的东西。

        # 这样做

        \*
        通过点击 !\[](\<<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38>
        PM.png>)添加一个新页面。新页面会出现在左边工作区中的文件列表里。

        -   通过右击它或者选择"重命名"来给它重新命名。**确保这个文件名是唯一的，有描述性的，并以".html"结尾**.
        -   在新页面中加入HTML。它应该包括：
        -   一个列表
        -   一个标头
      CSD U2 new page_2019: |-
        # 为你的网站创建一个新页面。

        这是你以前的项目。你需要添加另一个页面。你的页面可以是排行榜，配方，或者其它你想加的东西。

        # 这样做

        \*
        通过点击 !\[](\<<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38>
        PM.png>)添加一个新页面。新页面会出现在左边工作区中的文件列表里。

        -   通过右击它或者选择"重命名"来给它重新命名。**确保这个文件名是唯一的，有描述性的，并以".html"结尾**.
        -   在新页面中加入HTML。它应该包括：
        -   一个列表
        -   一个标头
      CSD U2 ordered list: "# 有序列表\n\n<div style=\"float:\nright; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**什么是列表的两种类型？**\n\n</summary>\n\nHTML中有两种类型的列表，有序的和无序的列表。\n\n</details>\n<details>\n<summary>**什么是有序列表？**</summary>\n有序列表是一组数字符号的列表。<br
        /><br />\n有序列表元素的标签是`<ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。\n列表中的每个条目都通过元素`<li>`来标记。这是<strong>L</strong>ist
        <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表(`<ol>`)里。\n\n</details>\n\n<details>\n<summary>\n\n**该如何增加一个有序列表？**\n\n</summary>\n制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签
        `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>\n</li>` 来增加列表条目，将内容都加到这对标签里。\n<br
        /><br />\n给你的`<li>`标签加上缩进会有助于表达这些条目是在`<ol> ` 标签里面的。\n\n</details>\n\n<details>\n<summary>\n\n**给我看看实际的代码**\n\n</summary>\n<table\nborder=\"1\">\n<tr>\n<td>例子</td>\n<td>结果</td>\n</tr>\n<tr>\n<td><pre>\n&lt;ol&gt;
        <br> &lt;li&gt;步骤1 &lt;/li&gt; <br> &lt;li&gt;步骤2 &lt;/li&gt;\n<br> &lt;li&gt;步骤3
        &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\"
        style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\n这个页面应该包含一个有序列表，但它少写了列表标签。\n\n#
        这样做\n\n-   用`<ol>`和`<li>` 标签来将内容变为有序列表的结构，并看起来和下面的一样。\n\n_提示: 在你的代码里不能有数字。_
        \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 ordered list_2018: "# 有序列表\n\n<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**什么是列表的两种类型？**\n\n</summary>\n\nHTML中有两种类型的列表，有序的和无序的列表。\n\n</details>\n<details>\n<summary>**什么是有序列表？**</summary>\n有序列表是一组数字符号的列表。<br
        /><br />\n有序列表元素的标签是`<ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。\n列表中的每个条目都通过元素`<li>`来标记。这是<strong>L</strong>ist
        <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表(`<ol>`)里。\n\n</details>\n\n<details>\n<summary>\n\n**该如何增加一个有序列表？**\n\n</summary>\n制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签
        `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>\n</li>` 来增加列表条目，将内容都加到这对标签里。\n<br
        /><br />\n给你的`<li>`标签加上缩进会有助于表达这些条目是在`<ol> ` 标签里面的。\n\n</details>\n\n<details>\n<summary>\n\n**给我看看实际的代码**\n\n</summary>\n<table\nborder=\"1\">\n<tr>\n<td>例子</td>\n<td>结果</td>\n</tr>\n<tr>\n<td><pre>\n&lt;ol&gt;
        <br> &lt;li&gt;步骤1 &lt;/li&gt; <br> &lt;li&gt;步骤2 &lt;/li&gt;\n<br> &lt;li&gt;步骤3
        &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\"
        style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\n这个页面应该包含一个有序列表，但它少写了列表标签。\n\n#
        这样做\n\n-   用`<ol>`和`<li>` 标签来将内容变为有序列表的结构，并看起来和下面的一样。\n\n_提示: 在你的代码里不能有数字。_
        \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 ordered list_2019: "# 有序列表\n\n<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**什么是列表的两种类型？**\n\n</summary>\n\nHTML中有两种类型的列表，有序的和无序的列表。\n\n</details>\n<details>\n<summary>**什么是有序列表？**</summary>\n有序列表是一组数字符号的列表。<br
        /><br />\n有序列表元素的标签是`<ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。\n列表中的每个条目都通过元素`<li>`来标记。这是<strong>L</strong>ist
        <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表(`<ol>`)里。\n\n</details>\n\n<details>\n<summary>\n\n**该如何增加一个有序列表？**\n\n</summary>\n制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签
        `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>\n</li>` 来增加列表条目，将内容都加到这对标签里。\n<br
        /><br />\n给你的`<li>`标签加上缩进会有助于表达这些条目是在`<ol> ` 标签里面的。\n\n</details>\n\n<details>\n<summary>\n\n**给我看看实际的代码**\n\n</summary>\n<table\nborder=\"1\">\n<tr>\n<td>例子</td>\n<td>结果</td>\n</tr>\n<tr>\n<td><pre>\n&lt;ol&gt;
        <br> &lt;li&gt;步骤1 &lt;/li&gt; <br> &lt;li&gt;步骤2 &lt;/li&gt;\n<br> &lt;li&gt;步骤3
        &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\"
        style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\n这个页面应该包含一个有序列表，但它少写了列表标签。\n\n#
        这样做\n\n-   用`<ol>`和`<li>` 标签来将内容变为有序列表的结构，并看起来和下面的一样。\n\n_提示: 在你的代码里不能有数字。_
        \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 project review: |-
        # 复查你的项目

        你快要准备好发布自己的项目了，但在此之前，你最好在检查一次是否完成了项目的所有要求。

        # 这样做

        \*
        检查一下，你是否愿意在你的网站上共享所有信息。

        -   检查是否所有图片的属性都正确，你是否有权利将它们放到你的网站上。
        -   检查是否你的网站包括了所有rubric项目的内容。
        -   用注释和空白符增加网站的可读性。
        -   请你的伙伴来帮忙找找网站可能的问题。
      CSD U2 project review_2018: |-
        # 复查你的项目

        你快要准备好发布自己的项目了，但在此之前，你最好在检查一次是否完成了项目的所有要求。

        # 这样做

        \*
        检查一下，你是否愿意在你的网站上共享所有信息。

        -   检查是否所有图片的属性都正确，你是否有权利将它们放到你的网站上。
        -   检查是否你的网站包括了所有rubric项目的内容。
        -   用注释和空白符增加网站的可读性。
        -   请你的伙伴来帮忙找找网站可能的问题。
      CSD U2 project review_2019: |-
        # 复查你的项目

        你快要准备好发布自己的项目了，但在此之前，你最好在检查一次是否完成了项目的所有要求。

        # 这样做

        \*
        检查一下，你是否愿意在你的网站上共享所有信息。

        -   检查是否所有图片的属性都正确，你是否有权利将它们放到你的网站上。
        -   检查是否你的网站包括了所有rubric项目的内容。
        -   用注释和空白符增加网站的可读性。
        -   请你的伙伴来帮忙找找网站可能的问题。
      CSD U2 project share: |-
        # 分享你的项目

        到了把你的项目分享给全世界的时候了！

        # 这样做

        -   点击页面最上面的
            !\[](\<<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27>
            AM.png>)按钮
        -   复制获得的链接，并发给你想要分享的人。
      CSD U2 project share_2018: |-
        # 分享你的项目

        到了把你的项目分享给全世界的时候了！

        # 这样做

        -   点击页面最上面的
            !\[](\<<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27>
            AM.png>)按钮
        -   复制获得的链接，并发给你想要分享的人。
      CSD U2 project share_2019: |-
        # 分享你的项目

        到了把你的项目分享给全世界的时候了！

        # 这样做

        -   点击页面最上面的
            !\[](\<<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27>
            AM.png>)按钮
        -   复制获得的链接，并发给你想要分享的人。
      CSD U2 text style decoration_2018: "<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**这些代码是如何起作用的？**\n\n</summary>\n这是让`h1`元素有下划线的代码：\n\n<pre>h1
        {\n  text-decoration:\nunderline;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素要使用花括号里的规则。这里的`p`表示段落（paragraph）。\n-
        \  `text-decoration: underline;`是一条规则，它能让`h1`标签里的文本有下划线。\n-   `text-decoration`是_属性_。它解释了这是什么规则，在这里，表示用什么修饰。\n-
        \  `underline`是_值_。它解释了这条规则如何应用，在这里，表示用下划线。\n    </details>\n    <details>\n
        \   <summary>\n\n**文本修饰都有什么可用的值？**\n\n</summary>\n可选的项目有\"underline\", \"overline\",
        和\"line-through\"。你可以阅读<a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools\n-
        CSS text-decoration 属性</a>来了解更多。\n</details>\n<details>\n<summary>**为什么我要所有这些符号？**</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n**什么是样式表？**\n\n</summary>\n样式表是一个控制网页要如何显示的文档。
        外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n**什么是CSS？**\n\n</summary>\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n# 下划线\n\n-   找到样式表中，让h1标签有下划线的代码。\n-   改动文本修饰，选择一个你喜欢的值。\n-
        \  从\"underline\"，\"overline\"，和\"line-through\"中选一个。\n-   为段落或h3标签添加一个文本修饰规则。"
      CSD U2 text style decoration_2019: "<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**这些代码是如何起作用的？**\n\n</summary>\n这是让`h1`元素有下划线的代码：\n\n<pre>h1
        {\n  text-decoration:\nunderline;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素要使用花括号里的规则。这里的`p`表示段落（paragraph）。\n-
        \  `text-decoration: underline;`是一条规则，它能让`h1`标签里的文本有下划线。\n-   `text-decoration`是_属性_。它解释了这是什么规则，在这里，表示用什么修饰。\n-
        \  `underline`是_值_。它解释了这条规则如何应用，在这里，表示用下划线。\n    </details>\n    <details>\n
        \   <summary>\n\n**文本修饰都有什么可用的值？**\n\n</summary>\n可选的项目有\"underline\", \"overline\",
        和\"line-through\"。你可以阅读<a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools\n-
        CSS text-decoration 属性</a>来了解更多。\n</details>\n<details>\n<summary>**为什么我要所有这些符号？**</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n**什么是样式表？**\n\n</summary>\n样式表是一个控制网页要如何显示的文档。
        外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n**什么是CSS？**\n\n</summary>\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n# 下划线\n\n-   找到样式表中，让h1标签有下划线的代码。\n-   改动文本修饰，选择一个你喜欢的值。\n-
        \  从\"underline\"，\"overline\"，和\"line-through\"中选一个。\n-   为段落或h3标签添加一个文本修饰规则。"
      CSD U2 text style font family_2018: "<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落字体的代码：\n\n<pre>p
        {\n  font-family:\ncursive;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-
        \  `font-family: cursive;`是一条规则，它让`p`标签里的文本采用某种字体。\n-   `font-family`是_属性_。它解释了这条规则是关于什么的，这条是关于字体的。\n-
        \  `cursive`是_值_。它解释了规则是如何被应用的，在这里，会让文本成为草书。\n    </details>\n    <details>\n\n<summary>\n<strong>有哪些可用的字体族？</strong>\n</summary>\n\n你可以从\"serif\"，\"sans-serif\"，\"cursive\"，\"fantasy\"和\"monospace\"中选择。也可以从<a
        href=\"http://www.w3schools.com/cssref/css_websafe_fonts.asp\">W3Schools\n\n-
        \  CSS 网页安全字体组合</a>里选一种字体。\n    </details>\n    <details>\n\n<summary>\n<strong>为什么我要所有这些符号？</strong>\n</summary>\n\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n\n</details>\n<details>\n\n<summary>\n<strong>什么是样式表？</strong>\n</summary>\n\n样式表是一个控制网页要如何显示的文档。
        外部格式表是连接到HTML网页的单独文档。 \n\n</details>\n<details>\n\n<summary>\n<strong>什么是CSS？</strong>\n</summary>\n\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n\n# 改变字体\n\n-   在样式表中找到决定段落标签样式的CSS规则集。\n-   选择一种最喜欢的字体族，并改变原来的值。\n-
        \  从\"serif\"，\"sans-serif\"，\"cursive\"，\"fantasy\"和\"monospace\"中选择\n-   为h1或h3标签增加一条字体族规则。"
      CSD U2 text style font family_2019: "<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落字体的代码：\n\n<pre>p
        {\n  font-family:\ncursive;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-
        \  `font-family: cursive;`是一条规则，它让`p`标签里的文本采用某种字体。\n-   `font-family`是_属性_。它解释了这条规则是关于什么的，这条是关于字体的。\n-
        \  `cursive`是_值_。它解释了规则是如何被应用的，在这里，会让文本成为草书。\n    </details>\n    <details>\n\n<summary>\n<strong>有哪些可用的字体族？</strong>\n</summary>\n\n你可以从\"serif\"，\"sans-serif\"，\"cursive\"，\"fantasy\"和\"monospace\"中选择。也可以从<a
        href=\"http://www.w3schools.com/cssref/css_websafe_fonts.asp\">W3Schools\n\n-
        \  CSS 网页安全字体组合</a>里选一种字体。\n    </details>\n    <details>\n\n<summary>\n<strong>为什么我要所有这些符号？</strong>\n</summary>\n\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n\n</details>\n<details>\n\n<summary>\n<strong>什么是样式表？</strong>\n</summary>\n\n样式表是一个控制网页要如何显示的文档。
        外部格式表是连接到HTML网页的单独文档。 \n\n</details>\n<details>\n\n<summary>\n<strong>什么是CSS？</strong>\n</summary>\n\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n\n# 改变字体\n\n-   在样式表中找到决定段落标签样式的CSS规则集。\n-   选择一种最喜欢的字体族，并改变原来的值。\n-
        \  从\"serif\"，\"sans-serif\"，\"cursive\"，\"fantasy\"和\"monospace\"中选择\n-   为h1或h3标签增加一条字体族规则。"
      CSD U2 text style h1_2018: "<div style=\"float: right;\nheight: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n<strong>我能在CSS里使用什么颜色？</strong>\n\n</summary>\nCSS包括了大部分常用的颜色名字（red
        - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n-
        HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n-
        CSS正确的颜色值</a>查看更多信息。\n</details><details>\n<summary>\n\n<strong>这些代码是如何起作用的？</strong>\n\n</summary>\n这是让`h1`标题变红的代码：\n\n<pre>h1
        {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素上会应用花括号里的规则。\n-   `color:
        red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n
        \   </details>\n    <details>\n    <summary>\n\n<strong>为什么我要所有这些符号？</strong>\n\n</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n<strong>什么是样式表？</strong>\n\n</summary>\n样式表是一个控制网页要如何显示的文档。
        外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n<strong>什么是CSS？</strong>\n\n</summary>\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n}\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n# CSS和文本颜色\n\n这个HTML文件使用了一个样式表（\"style.css\"）来给页面一个特定的样式。这个样式表包含了关于每个HTML元素应该看起来是什么样子的信息。\n\n-
        \  找到样式表（点击文件列表中的\"sytle.css\"）中让h1变红的代码。\n-   将h1的颜色从`red`改变成另一种颜色。"
      CSD U2 text style h1_2019: "<div style=\"float: right;\nheight: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n<strong>我能在CSS里使用什么颜色？</strong>\n\n</summary>\nCSS包括了大部分常用的颜色名字（red
        - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n-
        HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n-
        CSS正确的颜色值</a>查看更多信息。\n</details><details>\n<summary>\n\n<strong>这些代码是如何起作用的？</strong>\n\n</summary>\n这是让`h1`标题变红的代码：\n\n<pre>h1
        {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素上会应用花括号里的规则。\n-   `color:
        red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n
        \   </details>\n    <details>\n    <summary>\n\n<strong>为什么我要所有这些符号？</strong>\n\n</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n<strong>什么是样式表？</strong>\n\n</summary>\n样式表是一个控制网页要如何显示的文档。
        外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n<strong>什么是CSS？</strong>\n\n</summary>\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n}\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n# CSS和文本颜色\n\n这个HTML文件使用了一个样式表（\"style.css\"）来给页面一个特定的样式。这个样式表包含了关于每个HTML元素应该看起来是什么样子的信息。\n\n-
        \  找到样式表（点击文件列表中的\"sytle.css\"）中让h1变红的代码。\n-   将h1的颜色从`red`改变成另一种颜色。"
      CSD U2 text style h3: "<div style=\"float: right;\nheight: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n\n**我能在CSS里使用什么颜色？**\n\n</summary>\nCSS包括了大部分常用的颜色名字（red
        - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n-
        HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n-
        CSS正确的颜色值</a>查看更多信息。\n</details>\n<details>\n<summary>\n\n**这些代码是如何起作用的？**\n\n</summary>\n这是让`h1`标签中文本变红的代码：\n\n<pre>h1
        {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素要使用花括号里的规则。\n-   `color:
        red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n
        \   </details>\n    <details>\n    <summary>\n\n**如何创建一个新的规则集（rule-set）？**\n\n</summary>\n为了创建一个新的规则集，你需要一个选择器和一组规则。选择器是你想让规则应用到的标签的名字。这些规则是一组属性和值对。你需要特别注意规则集中的符号。看看下面的例子，学习一下代码看起来应该是什么样子。你需要为页面做一些改动。\n\n<pre>h1
        {\n  color: red;\n}</pre>\n\n\\*\n`h1`是_选择器_。它指定了哪些元素上会应用花括号里的规则。\n\n-   `color:
        red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n
        \   </details>\n    <details>\n    <summary>\n\n**为什么我要所有这些符号？**\n\n</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n**什么是样式表？**\n\n</summary>\n样式表是一个控制网页要如何显示的文档。
        外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n**什么是CSS？**\n\n</summary>\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n# 制作一个新的CSS规则集\n\n为某个标签给定的一组规则的代码叫做_规则集_。你能通过复制样式表中的`h1`规则集来创建一个新的规则集。\n\n-
        \  在样式表中找到决定h1标签的规则集。\n-   用同样的规律，写一个新的CSS规则集来决定h3标签的样式。\n-   为h3标签添加一个不一样的颜色。"
      CSD U2 text style h3_2018: "<div style=\"float: right;\nheight: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n<strong>我能在CSS里使用什么颜色？</strong>\n</summary>\nCSS包括了大部分常用的颜色名字（red
        - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n-
        HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n-
        CSS正确的颜色值</a>查看更多信息。\n</details>\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是让`h1`标签中文本变红的代码：\n\n<pre>h1
        {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素要使用花括号里的规则。\n-   `color:
        red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>如何创建一个新的规则集（rule-set）？</strong>\n
        \   </summary>\n    为了创建一个新的规则集，你需要一个选择器和一组规则。选择器是你想让规则应用到的标签的名字。这些规则是一组属性和值对。你需要特别注意规则集中的符号。看看下面的例子，学习一下代码看起来应该是什么样子。你需要为页面做一些改动。\n\n<pre>h1
        {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素上会应用花括号里的规则。\n-   `color:
        red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>为什么我要所有这些符号？</strong>\n
        \   </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n
        \   </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n
        \   <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n\n</summary>\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n# 制作一个新的CSS规则集\n\n为某个标签给定的一组规则的代码叫做_规则集_。你能通过复制样式表中的`h1`规则集来创建一个新的规则集。\n\n-
        \  在样式表中找到决定h1标签的规则集。\n-   用同样的规律，写一个新的CSS规则集来决定h3标签的样式。\n-   为h3标签添加一个不一样的颜色。"
      CSD U2 text style h3_2019: "<div style=\"float: right;\nheight: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n<strong>我能在CSS里使用什么颜色？</strong>\n</summary>\nCSS包括了大部分常用的颜色名字（red
        - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n-
        HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n-
        CSS正确的颜色值</a>查看更多信息。\n</details>\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是让`h1`标签中文本变红的代码：\n\n<pre>h1
        {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素要使用花括号里的规则。\n-   `color:
        red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>如何创建一个新的规则集（rule-set）？</strong>\n
        \   </summary>\n    为了创建一个新的规则集，你需要一个选择器和一组规则。选择器是你想让规则应用到的标签的名字。这些规则是一组属性和值对。你需要特别注意规则集中的符号。看看下面的例子，学习一下代码看起来应该是什么样子。你需要为页面做一些改动。\n\n<pre>h1
        {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素上会应用花括号里的规则。\n-   `color:
        red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>为什么我要所有这些符号？</strong>\n
        \   </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n
        \   </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n
        \   <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n\n</summary>\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n# 制作一个新的CSS规则集\n\n为某个标签给定的一组规则的代码叫做_规则集_。你能通过复制样式表中的`h1`规则集来创建一个新的规则集。\n\n-
        \  在样式表中找到决定h1标签的规则集。\n-   用同样的规律，写一个新的CSS规则集来决定h3标签的样式。\n-   为h3标签添加一个不一样的颜色。"
      CSD U2 text style size: "<div style=\"float: right;\nheight: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n\n**这些代码是如何起作用的？**\n\n</summary>\n这是控制段落文字大小的代码：\n\n<pre>p
        {\n  font-size:\n14px;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-
        \  `font-size: 14px;`是一条规则，它让`p`标签里的文本是一定的大小。\n-   `font-size`是_属性_。它解释了这条规则是关于什么的，这条是关于文本大小的。\n-
        \  `14px`是_值_。它解释了规则是如何被应用的，在这里，会让文本为14像素大。\n    </details>\n    <details>\n
        \   <summary>\n\n**`px`是什么意思？什么是像素？**\n\n</summary>\nPixel（像素）的缩写是`px`，这是在CSS中丈量元素的单位。这是屏幕上的一个点的尺寸。\n</details>\n<details>\n<summary>\n\n**为什么我要所有这些符号？**\n\n</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n**什么是样式表？**\n\n</summary>\n样式表是一个控制网页要如何显示的文档。
        外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n**什么是CSS？**\n\n</summary>\nCSS是控制网页上内容出现格式的语言。
        它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n\n# 改变字体大小\n\n除了颜色，你能用其它属性控制别的样式。\n\n-   在样式表中找到决定段落样式的规则集.\n-
        \  将段落的文本大小改得更大一些。\n-   在h3标签的规则集中添加一条规则，来让文本变大或变小。"
      CSD U2 text style size_2018: "<div style=\"float: right;\nheight: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落文字大小的代码：\n\n<pre>p
        {\n  font-size:\n14px;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-
        \  `font-size: 14px;`是一条规则，它让`p`标签里的文本是一定的大小。\n-   `font-size`是_属性_。它解释了这条规则是关于什么的，这条是关于文本大小的。\n-
        \  `14px`是_值_。它解释了规则是如何被应用的，在这里，会让文本为14像素大。\n    </details>\n    <details>\n
        \   <summary>\n    <strong>`px`是什么意思？什么是像素？</strong>\n    </summary>\n    Pixel（像素）的缩写是`px`，这是在CSS中丈量元素的单位。这是屏幕上的一个点的尺寸。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>为什么我要所有这些符号？</strong>\n
        \   </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n
        \   </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n
        \   <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n    </summary>\n
        \   CSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n\n# 改变字体大小\n\n除了颜色，你能用其它属性控制别的样式。\n\n-   在样式表中找到决定段落样式的规则集.\n-
        \  将段落的文本大小改得更大一些。\n-   在h3标签的规则集中添加一条规则，来让文本变大或变小。"
      CSD U2 text style size_2019: "<div style=\"float: right;\nheight: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落文字大小的代码：\n\n<pre>p
        {\n  font-size:\n14px;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-
        \  `font-size: 14px;`是一条规则，它让`p`标签里的文本是一定的大小。\n-   `font-size`是_属性_。它解释了这条规则是关于什么的，这条是关于文本大小的。\n-
        \  `14px`是_值_。它解释了规则是如何被应用的，在这里，会让文本为14像素大。\n    </details>\n    <details>\n
        \   <summary>\n    <strong>`px`是什么意思？什么是像素？</strong>\n    </summary>\n    Pixel（像素）的缩写是`px`，这是在CSS中丈量元素的单位。这是屏幕上的一个点的尺寸。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>为什么我要所有这些符号？</strong>\n
        \   </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n
        \   </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n
        \   <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n    </summary>\n
        \   CSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</div>\n\n# 改变字体大小\n\n除了颜色，你能用其它属性控制别的样式。\n\n-   在样式表中找到决定段落样式的规则集.\n-
        \  将段落的文本大小改得更大一些。\n-   在h3标签的规则集中添加一条规则，来让文本变大或变小。"
      CSD U2 text style text align_2018: "<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落文本对齐的代码：\n\n<pre>p\n{\n
        \ text-align: left;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-
        \  `text-align: left;`是一条规则，它让`p`标签里的文本在段落中左对齐。\n-   `text-align`是_属性_。它解释了这条规则是关于什么的，这条是关于文本对齐的。\n-
        \  `left`是_值_。它解释了规则是如何被应用的，在这里，它让文本对齐到段落的左边。\n    </details>\n    <details>\n
        \   <summary>\n    <strong>为什么`text-align: left;`看起来什么都没改变？</strong>\n    </summary>\n
        \   大多数属性都有默认值。这些默认值是一个元素自动会应用上的样式，不需要加到样式表中。`text-align`的默认值是`left`，因此它没有改变任何样式。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>文本对齐都有哪些可能的值？</strong>\n
        \   </summary>\n    你可以在\"left\"，\"right\"，和\"center\"中选一个。阅读<a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools\n-
        \  CSS text-align属性</a>了解更多关于文本对齐的内容。\n    </details>\n    <details>\n    <summary>\n
        \   <strong>为什么我要所有这些符号？</strong>\n    </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n
        \   </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n
        \   <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n    </summary>\n
        \   CSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</details>\n</div>\n# 文本对齐\n\n`text-align`属性设置了文本在每一行上，水平（从一边到另一边）方向的位置。\n\n-
        \  找到段落标签中的\"text-align\"属性\n-   改变段落的对齐方式。\n-   从\"left\"，\"right\"，和\"center\"中选择一个。"
      CSD U2 text style text align_2019: "<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落文本对齐的代码：\n\n<pre>p\n{\n
        \ text-align: left;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-
        \  `text-align: left;`是一条规则，它让`p`标签里的文本在段落中左对齐。\n-   `text-align`是_属性_。它解释了这条规则是关于什么的，这条是关于文本对齐的。\n-
        \  `left`是_值_。它解释了规则是如何被应用的，在这里，它让文本对齐到段落的左边。\n    </details>\n    <details>\n
        \   <summary>\n    <strong>为什么`text-align: left;`看起来什么都没改变？</strong>\n    </summary>\n
        \   大多数属性都有默认值。这些默认值是一个元素自动会应用上的样式，不需要加到样式表中。`text-align`的默认值是`left`，因此它没有改变任何样式。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>文本对齐都有哪些可能的值？</strong>\n
        \   </summary>\n    你可以在\"left\"，\"right\"，和\"center\"中选一个。阅读<a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools\n-
        \  CSS text-align属性</a>了解更多关于文本对齐的内容。\n    </details>\n    <details>\n    <summary>\n
        \   <strong>为什么我要所有这些符号？</strong>\n    </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n
        \   </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n
        \   </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n
        \   <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n    </summary>\n
        \   CSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。
        \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family:
        cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。
        \n\n</details>\n</details>\n</div>\n# 文本对齐\n\n`text-align`属性设置了文本在每一行上，水平（从一边到另一边）方向的位置。\n\n-
        \  找到段落标签中的\"text-align\"属性\n-   改变段落的对齐方式。\n-   从\"left\"，\"right\"，和\"center\"中选择一个。"
      CSD U2 unordered list_2018: |-
        # 无序列表

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>哪两类列表？</strong>
        </summary>
        HTML 语言有两类列表：有序列表、无序列表。

        </details>
        <details>
        <summary>
        <strong>什么是无序列表？</strong>
        </summary>

        无序列表，就是一系列条目。
        <br /><br />无序列表的引导标签是 \<ul> 。来自无序列表的英文首字母缩写  <strong>U</strong>nordered <strong>L</strong>ist。每个列表项的引导标签是 \<li>，来自英文缩写 <strong>L</strong>ist <strong>I</strong>tem。列表项是子元素，也就是说它出现在父级元素，也就是无序列表的内部。 (\<ul>).

        </details>

        <details>
        <summary>
        <strong>如何制作无序列表？</strong>
        </summary>

        制作无序列表需要两个步骤：建立列表、添加列表项。 第一步，只要写下标签 `<ul></ul>`。接下来，就是在上述标签内部 **添加** 列表项。每个列表项都要分别写在标签 `<li></li>` 内部。
        <br /><br />
        有个小技巧，缩进 \<li> 标签会看起来更清晰，并确保包含在 \<ul> 标签内部。

        </details>

        <details>
        <summary>
        <strong>展示代码</strong>
        </summary>

        <table border="1">
        <tr>
        <td>示例</td>
        <td>结果</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        页面应该有无序列表，但缺少列表标签。

        # 这样做

        -   使用 `<ul>` 和 `<li>` 标签来构建无序列表，参照下图。

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 upload images: |-
        # 上传图片

        接下来，你需要将所有图片上传到你的项目中。

        # 这样做

        \*
        将想要的图片都下载到你的电脑里。如果需要帮助，就浏览<a href="/s/csd2/stage/7/puzzle/5"
        target="_new">课程7 关卡5</a>。

        -   确保你有权利使用这些图片。
        -   写下所有你需要的属性信息。
        -   将所有图片上传到你的项目中。如果忘了怎么做，就浏览
            <a href="/s/csd2/stage/7/puzzle/5" target="_new">课程 7 关卡 5</a>。
      CSD U2 upload images_2018: |-
        # 上传图片

        接下来，你需要将所有图片上传到你的项目中。

        # 这样做

        \*
        将想要的图片都下载到你的电脑里。如果需要帮助，就浏览<a href="/s/csd2/stage/7/puzzle/5"
        target="_new">课程7 关卡5</a>。

        -   确保你有权利使用这些图片。
        -   写下所有你需要的属性信息。
        -   将所有图片上传到你的项目中。如果忘了怎么做，就浏览
            <a href="/s/csd2/stage/7/puzzle/5" target="_new">课程 7 关卡 5</a>。
      CSD U2 upload images_2019: |-
        # 上传图片

        接下来，你需要将所有图片上传到你的项目中。

        # 这样做

        \*
        将想要的图片都下载到你的电脑里。如果需要帮助，就浏览<a href="/s/csd2/stage/7/puzzle/5"
        target="_new">课程7 关卡5</a>。

        -   确保你有权利使用这些图片。
        -   写下所有你需要的属性信息。
        -   将所有图片上传到你的项目中。如果忘了怎么做，就浏览
            <a href="/s/csd2/stage/7/puzzle/5" target="_new">课程 7 关卡 5</a>。
      CSD U3 - Booleans Video: "# 布尔表达式视频"
      CSD U3 - Simple Counter Predict: "# \n\n计数器模式\n\n这个模式是编程中最重要的模式之一。 \n\n!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\n\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\n\n#
        这样做\n\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\n\n\\*\n**阅读程序**，并预测一下输出会是什么。\n\\*\n**运行程序**检查一下你的预测。\n\n-
        \  **和同伴讨论**.\n    你能解释看到了什么吗？"
      CSD U3 - Simple Counter Predict_2018: "# \n\n计数器模式\n\n这个模式是编程中最重要的模式之一。 \n\n!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\n\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\n\n#
        这样做\n\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\n\n\\*\n**阅读程序**，并预测一下输出会是什么。\n\\*\n**运行程序**检查一下你的预测。\n\n-
        \  **和同伴讨论**.\n    你能解释看到了什么吗？"
      CSD U3 - Simple Counter Predict_2019: "# \n\n计数器模式\n\n这个模式是编程中最重要的模式之一。 \n\n!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\n\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\n\n#
        这样做\n\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\n\n\\*\n**阅读程序**，并预测一下输出会是什么。\n\\*\n**运行程序**检查一下你的预测。\n\n-
        \  **和同伴讨论**.\n    你能解释看到了什么吗？"
      CSD U3 - complex - key up and down: |-
        # 响应单次点击

        我们已经学习了`keyWentDown`和`keyWentUp`能用来响应单次的按键。模块`mouseWentUp`和`mouseWentDown`能让你对鼠标做到同样的操作！

        # 这样做

        我们先制作一个简单的游戏，它能统计你点击了多少次。这里已经有一个叫做`clicks`的变量了，能用来跟踪用户点击的次数。

        -   添加一个条件来检查是否鼠标被‘按下了。
        -   在条件里，给`clicks`变量增加1。

        _挑战：你能增加一个精灵也响应`mouseWentDown`事件吗？增加一张你选择的图片，并在每次鼠标点击时，将它的尺寸放大。_
      CSD U3 - complex - key up and down_2018: |-
        # 响应单次点击

        我们已经学习了`keyWentDown`和`keyWentUp`能用来响应单次的按键。模块`mouseWentUp`和`mouseWentDown`能让你对鼠标做到同样的操作！

        # 这样做

        我们先制作一个简单的游戏，它能统计你点击了多少次。这里已经有一个叫做`clicks`的变量了，能用来跟踪用户点击的次数。

        -   添加一个条件来检查是否鼠标被‘按下了。
        -   在条件里，给`clicks`变量增加1。

        _挑战：你能增加一个精灵也响应`mouseWentDown`事件吗？增加一张你选择的图片，并在每次鼠标点击时，将它的尺寸放大。_
      CSD U3 - complex - key up and down_2019: |-
        # 响应单次点击

        我们已经学习了`keyWentDown`和`keyWentUp`能用来响应单次的按键。模块`mouseWentUp`和`mouseWentDown`能让你对鼠标做到同样的操作！

        # 这样做

        我们先制作一个简单的游戏，它能统计你点击了多少次。这里已经有一个叫做`clicks`的变量了，能用来跟踪用户点击的次数。

        -   添加一个条件来检查是否鼠标被‘按下了。
        -   在条件里，给`clicks`变量增加1。

        _挑战：你能增加一个精灵也响应`mouseWentDown`事件吗？增加一张你选择的图片，并在每次鼠标点击时，将它的尺寸放大。_
      CSD U3 - conditionals - first conditional: |-
        <img
        src="https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png" style="float:right;width:100px">

        # 如果语句

        前面学过的布尔语句能让我们问问题，为了_回答这些问题_，我们需要用`如果`语句。

        `如果`语句通常放到循环中，因为需要在每次循环运行时都进行检查。

        # 这样做

        你开始编写的赛车游戏程序已经加载在这里了。

        -   在更新了赛车的位置后，增加一个`如果`语句。
        -   将布尔表达式从console.log语句中移动到如果条件语句上。
        -   在`如果`语句中，增加一条语句在屏幕上写上"胜利者"。
      CSD U3 - conditionals - first conditional 2_2018: |-
        <img
        src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif"
        style="width:200px;float:right">

        # 可见

        有时候，将图片隐藏一会儿，再显示出来是很有用的。你可以通过`visible`（可见性）属性来做到这点。可见性属性和以前见过的属性有点不同：它是一个布尔值，要么是`true`（真，即精灵可见），要么是`false`（假，即精灵**不**可见）。默认情况下，可见性是`true`。

        # 这样做

        当气球碰到游戏区边缘时，让它爆炸！

        -   增加条件来检查是否气球碰到了边缘。
            \\t\* 用一个`balloon.scale`（气球.尺寸）上的检查器来帮忙。
        -   用动画标签中的"pop"来显示一个爆炸的精灵。
        -   用`visible`属性来让"pop"精灵一开始是隐藏的。
        -   在`if`（如果）语句中加两句。
            \\t\* 一个设置`visible`属性来隐藏气球精灵。
        -   一个设置`visible`属性来显示爆炸的精灵。
      CSD U3 - conditionals - first conditional 2_2018_2019: |-
        <img
        src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif"
        style="width:200px;float:right">

        # 可见

        有时候，将图片隐藏一会儿，再显示出来是很有用的。你可以通过`visible`（可见性）属性来做到这点。可见性属性和以前见过的属性有点不同：它是一个布尔值，要么是`true`（真，即精灵可见），要么是`false`（假，即精灵**不**可见）。默认情况下，可见性是`true`。

        # 这样做

        当气球碰到游戏区边缘时，让它爆炸！

        -   增加条件来检查是否气球碰到了边缘。
            \\t\* 用一个`balloon.scale`（气球.尺寸）上的检查器来帮忙。
        -   用动画标签中的"pop"来显示一个爆炸的精灵。
        -   用`visible`属性来让"pop"精灵一开始是隐藏的。
        -   在`if`（如果）语句中加两句。
            \\t\* 一个设置`visible`属性来隐藏气球精灵。
        -   一个设置`visible`属性来显示爆炸的精灵。
      CSD U3 - conditionals - first conditional_2018: |-
        <img
        src="https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png" style="float:right;width:100px">

        # 如果语句

        前面学过的布尔语句能让我们问问题，为了_回答这些问题_，我们需要用`如果`语句。

        `如果`语句通常放到循环中，因为需要在每次循环运行时都进行检查。

        # 这样做

        你开始编写的赛车游戏程序已经加载在这里了。

        -   在更新了赛车的位置后，增加一个`如果`语句。
        -   将布尔表达式从console.log语句中移动到如果条件语句上。
        -   在`如果`语句中，增加一条语句在屏幕上写上"胜利者"。
      CSD U3 - conditionals - first conditional_2019: |-
        <img
        src="https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png" style="float:right;width:100px">

        # 如果语句

        前面学过的布尔语句能让我们问问题，为了_回答这些问题_，我们需要用`如果`语句。

        `如果`语句通常放到循环中，因为需要在每次循环运行时都进行检查。

        # 这样做

        你开始编写的赛车游戏程序已经加载在这里了。

        -   在更新了赛车的位置后，增加一个`如果`语句。
        -   将布尔表达式从console.log语句中移动到如果条件语句上。
        -   在`如果`语句中，增加一条语句在屏幕上写上"胜利者"。
      CSD U3 AnimationsMulti Play Defender: |-
        # 保卫你的蛋糕！

        这是一个防守游戏的例子，你可以在课程结束时创建自己的。为了保卫你的蛋糕，用方向键移动外星人来阻止瓢虫，并将它们推到水里。

        # 这样做

        和同学一起，列出下面信息的清单。

        -   这个游戏中有多少精灵，是哪些？
        -   这个游戏需要什么变量？它们存储了什么内容？
        -   如果需要将这些代码分开成函数，你觉得需要哪些函数？你需要在代码中创建的主要部分的行为是什么？
      CSD U3 AnimationsMulti Play Defender_2018: |-
        # 保卫你的蛋糕！

        这是一个防守游戏的例子，你可以在课程结束时创建自己的。为了保卫你的蛋糕，用方向键移动外星人来阻止瓢虫，并将它们推到水里。

        # 这样做

        和同学一起，列出下面信息的清单。

        -   这个游戏中有多少精灵，是哪些？
        -   这个游戏需要什么变量？它们存储了什么内容？
        -   如果需要将这些代码分开成函数，你觉得需要哪些函数？你需要在代码中创建的主要部分的行为是什么？
      CSD U3 AnimationsMulti Play Defender_2019: |-
        # 保卫你的蛋糕！

        这是一个防守游戏的例子，你可以在课程结束时创建自己的。为了保卫你的蛋糕，用方向键移动外星人来阻止瓢虫，并将它们推到水里。

        # 这样做

        和同学一起，列出下面信息的清单。

        -   这个游戏中有多少精灵，是哪些？
        -   这个游戏需要什么变量？它们存储了什么内容？
        -   如果需要将这些代码分开成函数，你觉得需要哪些函数？你需要在代码中创建的主要部分的行为是什么？
      CSD U3 AnimationsMulti defender animate player: "# \n\n改变玩家动画\n\n现在，你的玩家总是面朝同一个方向。通过在不同的动画中切换，你能做得更像现实中一样。你的玩家能根据按键，在左脸和右脸动画之间切换。记住，你能在动画标签页中快速的复制和编辑动画。\n\n#
        这样做\n\n\\*\n在动画标签页复制玩家精灵的动画。\n\n-   反转新动画的每一帧，这样，精灵就能朝向相反的方向了。\n-   重命名新的动画。\n-
        \  在`movePlayer`（移动玩家）函数中用`setAnimation`（设置动画）命令，在玩家点击\"左\"和\"右\"方向键时，改变它朝向的方向。"
      CSD U3 AnimationsMulti defender animate player_2018: "# \n\n改变玩家动画\n\n现在，你的玩家总是面朝同一个方向。通过在不同的动画中切换，你能做得更像现实中一样。你的玩家能根据按键，在左脸和右脸动画之间切换。记住，你能在动画标签页中快速的复制和编辑动画。\n\n#
        这样做\n\n\\*\n在动画标签页复制玩家精灵的动画。\n\n-   反转新动画的每一帧，这样，精灵就能朝向相反的方向了。\n-   重命名新的动画。\n-
        \  在`movePlayer`（移动玩家）函数中用`setAnimation`（设置动画）命令，在玩家点击\"左\"和\"右\"方向键时，改变它朝向的方向。"
      CSD U3 AnimationsMulti defender animate player_2019: "# \n\n改变玩家动画\n\n现在，你的玩家总是面朝同一个方向。通过在不同的动画中切换，你能做得更像现实中一样。你的玩家能根据按键，在左脸和右脸动画之间切换。记住，你能在动画标签页中快速的复制和编辑动画。\n\n#
        这样做\n\n\\*\n在动画标签页复制玩家精灵的动画。\n\n-   反转新动画的每一帧，这样，精灵就能朝向相反的方向了。\n-   重命名新的动画。\n-
        \  在`movePlayer`（移动玩家）函数中用`setAnimation`（设置动画）命令，在玩家点击\"左\"和\"右\"方向键时，改变它朝向的方向。"
      CSD U3 AnimationsMulti defender displace enemies: "# \n\n取代敌人\n\n是时候写代码来加入更多的精灵进行互动了。你的玩家精灵应该取代敌人精灵。\n\n#
        这样做\n\n这一关中，你要在`displaceEnemies`（取代敌人）函数中写代码。\n\n\\*\n写代码来让玩家取代敌人精灵。\n\n-
        \  测试你的程序，来确保玩家能取代敌人，但它们会在玩家移动走后，继续往右移动。\n\n_提示：如果需要调试你的程序，可以用`sprite.debug`来看看精灵的碰撞。_"
      CSD U3 AnimationsMulti defender displace enemies_2018: "# \n\n取代敌人\n\n是时候写代码来加入更多的精灵进行互动了。你的玩家精灵应该取代敌人精灵。\n\n#
        这样做\n\n这一关中，你要在`displaceEnemies`（取代敌人）函数中写代码。\n\n\\*\n写代码来让玩家取代敌人精灵。\n\n-
        \  测试你的程序，来确保玩家能取代敌人，但它们会在玩家移动走后，继续往右移动。\n\n_提示：如果需要调试你的程序，可以用`sprite.debug`来看看精灵的碰撞。_"
      CSD U3 AnimationsMulti defender displace enemies_2019: "# \n\n取代敌人\n\n是时候写代码来加入更多的精灵进行互动了。你的玩家精灵应该取代敌人精灵。\n\n#
        这样做\n\n这一关中，你要在`displaceEnemies`（取代敌人）函数中写代码。\n\n\\*\n写代码来让玩家取代敌人精灵。\n\n-
        \  测试你的程序，来确保玩家能取代敌人，但它们会在玩家移动走后，继续往右移动。\n\n_提示：如果需要调试你的程序，可以用`sprite.debug`来看看精灵的碰撞。_"
      CSD U3 AnimationsMulti defender enemies move: "# \n\n移动敌人\n\n是时候学代码来开始移动你的精灵了。开始前，你需要让敌人精灵随机到达一个位置，并满屏幕移动。\n\n#
        这样做\n\n在程序最上面，在创建了每个敌人精灵后，写代码来将它移动到正确的位置，并给定正确的速度。\n\n\\*\n用`sprite.x`来将x位置设置为0。\n\n-
        \  用`sprite.y`来将y位置设置为150到250之间的随机值。\n-   用`sprite.velocityX`来设置x速率为2。\n\n测试你的程序，你的敌人精灵现在应该能在桥上移动了。"
      CSD U3 AnimationsMulti defender enemies move_2018: "# \n\n移动敌人\n\n是时候学代码来开始移动你的精灵了。开始前，你需要让敌人精灵随机到达一个位置，并满屏幕移动。\n\n#
        这样做\n\n在程序最上面，在创建了每个敌人精灵后，写代码来将它移动到正确的位置，并给定正确的速度。\n\n\\*\n用`sprite.x`来将x位置设置为0。\n\n-
        \  用`sprite.y`来将y位置设置为150到250之间的随机值。\n-   用`sprite.velocityX`来设置x速率为2。\n\n测试你的程序，你的敌人精灵现在应该能在桥上移动了。"
      CSD U3 AnimationsMulti defender enemies move_2019: "# \n\n移动敌人\n\n是时候学代码来开始移动你的精灵了。开始前，你需要让敌人精灵随机到达一个位置，并满屏幕移动。\n\n#
        这样做\n\n在程序最上面，在创建了每个敌人精灵后，写代码来将它移动到正确的位置，并给定正确的速度。\n\n\\*\n用`sprite.x`来将x位置设置为0。\n\n-
        \  用`sprite.y`来将y位置设置为150到250之间的随机值。\n-   用`sprite.velocityX`来设置x速率为2。\n\n测试你的程序，你的敌人精灵现在应该能在桥上移动了。"
      CSD U3 AnimationsMulti defender make it your own: "# \n\n制作你自己的\n\n刚刚你学习了别人创建游戏的计划，现在要开始做你自己的了。你想要创造什么样的功能或挑战呢？\n\n#
        这样做\n\n选择下面的一个挑战，来添加到到游戏里，或者自己制作一个挑战。\n\n\\*\n改变游戏的显示，这样玩家，敌人或蛋糕会变得不同。\n\n-
        \  当敌人得到蛋糕时结束游戏，并打印得分。为了获得另外的挑战，只有三个敌人会到达。\n-   \\*\n    随机改变敌人的速度。\n-   当玩家获得一个更高的分数时，显示一个新的背景。"
      CSD U3 AnimationsMulti defender make it your own_2018: "# \n\n制作你自己的\n\n刚刚你学习了别人创建游戏的计划，现在要开始做你自己的了。你想要创造什么样的功能或挑战呢？\n\n#
        这样做\n\n选择下面的一个挑战，来添加到到游戏里，或者自己制作一个挑战。\n\n\\*\n改变游戏的显示，这样玩家，敌人或蛋糕会变得不同。\n\n-
        \  当敌人得到蛋糕时结束游戏，并打印得分。为了获得另外的挑战，只有三个敌人会到达。\n-   \\*\n    随机改变敌人的速度。\n-   当玩家获得一个更高的分数时，显示一个新的背景。"
      CSD U3 AnimationsMulti defender make it your own_2019: "# \n\n制作你自己的\n\n刚刚你学习了别人创建游戏的计划，现在要开始做你自己的了。你想要创造什么样的功能或挑战呢？\n\n#
        这样做\n\n选择下面的一个挑战，来添加到到游戏里，或者自己制作一个挑战。\n\n\\*\n改变游戏的显示，这样玩家，敌人或蛋糕会变得不同。\n\n-
        \  当敌人得到蛋糕时结束游戏，并打印得分。为了获得另外的挑战，只有三个敌人会到达。\n-   \\*\n    随机改变敌人的速度。\n-   当玩家获得一个更高的分数时，显示一个新的背景。"
      CSD U3 AnimationsMulti defender move up down: "# \n\n上下移动\n\n你也可以让自己的精灵上下移动。\n\n#
        这样做\n\n在这一关中，你要继续在`movePlayer`函数中写代码。\n\n-   在`keyDown`中用`如果`模块来检测是否\"上\"方向键被按下了。\n-
        \  通过计数器模式，用`sprite.y`来将玩家的y位置增加3。\n-   用另一个`如果`模块来在\"下\"方向键按下时，将玩家往下移动。\n\n测试你的代码，你的角色现在能往上下左右4个方向移动了。"
      CSD U3 AnimationsMulti defender move up down_2018: "# \n\n上下移动\n\n你也可以让自己的精灵上下移动。\n\n#
        这样做\n\n在这一关中，你要继续在`movePlayer`函数中写代码。\n\n-   在`keyDown`中用`如果`模块来检测是否\"上\"方向键被按下了。\n-
        \  通过计数器模式，用`sprite.y`来将玩家的y位置增加3。\n-   用另一个`如果`模块来在\"下\"方向键按下时，将玩家往下移动。\n\n测试你的代码，你的角色现在能往上下左右4个方向移动了。"
      CSD U3 AnimationsMulti defender move up down_2019: "# \n\n上下移动\n\n你也可以让自己的精灵上下移动。\n\n#
        这样做\n\n在这一关中，你要继续在`movePlayer`函数中写代码。\n\n-   在`keyDown`中用`如果`模块来检测是否\"上\"方向键被按下了。\n-
        \  通过计数器模式，用`sprite.y`来将玩家的y位置增加3。\n-   用另一个`如果`模块来在\"下\"方向键按下时，将玩家往下移动。\n\n测试你的代码，你的角色现在能往上下左右4个方向移动了。"
      CSD U3 AnimationsMulti introducing multiframe: "# \n\n使用多帧动画\n\n在示例的防守游戏中，精灵是动画的。在开始编写这个游戏前，我们来花一分钟熟悉一下动画精灵的新方式。\n\n#
        \n\n这样做\n\n这个程序已经有了几个精灵，但它们都没有动画。\n\n-   在动画标签页中，找到已经加到项目中的多帧动画。为每个角色选择一个。\n-
        \  记住，你可以用`setAnimation`来在动画标签页中给你的精灵分配动画。"
      CSD U3 AnimationsMulti introducing multiframe_2018: "# \n\n使用多帧动画\n\n在示例的防守游戏中，精灵是动画的。在开始编写这个游戏前，我们来花一分钟熟悉一下动画精灵的新方式。\n\n#
        \n\n这样做\n\n这个程序已经有了几个精灵，但它们都没有动画。\n\n-   在动画标签页中，找到已经加到项目中的多帧动画。为每个角色选择一个。\n-
        \  记住，你可以用`setAnimation`来在动画标签页中给你的精灵分配动画。"
      CSD U3 AnimationsMulti introducing multiframe_2019: "# \n\n使用多帧动画\n\n在示例的防守游戏中，精灵是动画的。在开始编写这个游戏前，我们来花一分钟熟悉一下动画精灵的新方式。\n\n#
        \n\n这样做\n\n这个程序已经有了几个精灵，但它们都没有动画。\n\n-   在动画标签页中，找到已经加到项目中的多帧动画。为每个角色选择一个。\n-
        \  记住，你可以用`setAnimation`来在动画标签页中给你的精灵分配动画。"
      CSD U3 AnimationsMulti mirror animation: |-
        # 编辑多帧动画

        如果你的精灵能在移动的时候转身，看起来就真实多了。当用户按下不同的键时，你可以在转身之间切换。

        # 这样做

        读一下代码，并运行程序。确保你知道了精灵是如何响应方向键的。

        -   在动画标签页中，通过点击这个按钮： !\[](\<<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09>
            PM.png>) 来创建一个外星人动画的副本。
        -   使用工具来反转动画。确保用这个按钮： !\[](\<<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03>
            PM.png>) 两帧都翻转了。
        -   重命名新动画。
        -   使用新的动画和旧的动画，这样外星人就能在移动的时候朝向正确的方向了。你觉得应该在代码的什么地方设置精灵的动画？
      CSD U3 AnimationsMulti mirror animation_2018: |-
        # 编辑多帧动画

        如果你的精灵能在移动的时候转身，看起来就真实多了。当用户按下不同的键时，你可以在转身之间切换。

        # 这样做

        读一下代码，并运行程序。确保你知道了精灵是如何响应方向键的。

        -   在动画标签页中，通过点击这个按钮： !\[](\<<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09>
            PM.png>) 来创建一个外星人动画的副本。
        -   使用工具来反转动画。确保用这个按钮： !\[](\<<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03>
            PM.png>) 两帧都翻转了。
        -   重命名新动画。
        -   使用新的动画和旧的动画，这样外星人就能在移动的时候朝向正确的方向了。你觉得应该在代码的什么地方设置精灵的动画？
      CSD U3 AnimationsMulti mirror animation_2019: |-
        # 编辑多帧动画

        如果你的精灵能在移动的时候转身，看起来就真实多了。当用户按下不同的键时，你可以在转身之间切换。

        # 这样做

        读一下代码，并运行程序。确保你知道了精灵是如何响应方向键的。

        -   在动画标签页中，通过点击这个按钮： !\[](\<<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09>
            PM.png>) 来创建一个外星人动画的副本。
        -   使用工具来反转动画。确保用这个按钮： !\[](\<<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03>
            PM.png>) 两帧都翻转了。
        -   重命名新动画。
        -   使用新的动画和旧的动画，这样外星人就能在移动的时候朝向正确的方向了。你觉得应该在代码的什么地方设置精灵的动画？
      CSD U3 Conditionals Apple: "# 更多的布尔练习\n\n让我们再多加一个布尔表达式来检查精灵的条件。\n\n# \n\n这样做\n这里有个正在变大的苹果精灵。开始它是绿的，当它增加到两倍时应该变成红色。我们先不用担心如何将它变红，先用一条`console.log`（命令行.打印日志）命令来检查是否它到了两倍大。\n\n-
        \  添加一条`console.log`语句.\n-   在`console.log`中添加一个布尔表达式，来检查是否`apple.scale`\n
        \   大于2。"
      CSD U3 Conditionals Apple 2_2018: "# 改变水果\n\n现在，我们知道了如何使用_如果_语句了，除了检查苹果是否被放大了两倍，还可以变大后将它变成梨。\n\n#
        \n\n这样做\n\n在画画的循环里添加一个条件，检查是否 `fruit.scale`（水果尺寸）大于2。- 如果是，那么设置新动画为\"pear\"（梨）。\n\n_挑战:\n你能在它变成梨时，同时让它停止变大吗？_"
      CSD U3 Conditionals Apple 2_2018_2019: "# 改变水果\n\n现在，我们知道了如何使用_如果_语句了，除了检查苹果是否被放大了两倍，还可以变大后将它变成梨。\n\n#
        \n\n这样做\n\n在画画的循环里添加一个条件，检查是否 `fruit.scale`（水果尺寸）大于2。- 如果是，那么设置新动画为\"pear\"（梨）。\n\n_挑战:\n你能在它变成梨时，同时让它停止变大吗？_"
      CSD U3 Conditionals Apple_2018: |-
        # 布尔值的更多练习

        让我们再加一个布尔表达式来检查精灵的条件。你可以用`console.log`（控制台.日志）来检查是否它的尺寸还是2。

        # 这样做

        -   添加一个`console.log`语句。
        -   在`console.log`中增加一个布尔表达式来检查是否`apple.scale`（苹果.尺寸）大于2。
      CSD U3 Conditionals Apple_2018_2019: |-
        # 布尔值的更多练习

        让我们再加一个布尔表达式来检查精灵的条件。你可以用`console.log`（控制台.日志）来检查是否它的尺寸还是2。

        # 这样做

        -   添加一个`console.log`语句。
        -   在`console.log`中增加一个布尔表达式来检查是否`apple.scale`（苹果.尺寸）大于2。
      CSD U3 Counters explaining counters contained 2: "# \n\n计数器模式\n\n这个模式是编程中最重要的模式之一。
        \n\n!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\n\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\n\n#
        这样做\n\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\n\n\\*\n**阅读程序**，并预测一下输出会是什么。\n\\*\n**运行程序**检查一下你的预测。\n\n-
        \  **和同伴讨论**.\n    你能解释看到了什么吗？"
      CSD U3 Counters explaining counters contained 2_2018: "# \n\n计数器模式\n\n这个模式是编程中最重要的模式之一。
        \n\n!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\n\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\n\n#
        这样做\n\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\n\n\\*\n**阅读程序**，并预测一下输出会是什么。\n\\*\n**运行程序**检查一下你的预测。\n\n-
        \  **和同伴讨论**.\n    你能解释看到了什么吗？"
      CSD U3 Counters explaining counters contained 2_2019: "# \n\n计数器模式\n\n这个模式是编程中最重要的模式之一。
        \n\n!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\n\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\n\n#
        这样做\n\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\n\n\\*\n**阅读程序**，并预测一下输出会是什么。\n\\*\n**运行程序**检查一下你的预测。\n\n-
        \  **和同伴讨论**.\n    你能解释看到了什么吗？"
      CSD U3 Diagonal Movement: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif"
        style="float: right; margin-left: 20px;">

        # 对角线移动

        如果只改动精灵的`x`或`y`属性， 它就只能上下或左右移动。如果你想让精灵在对角线上移动，就需要_同时_改动这两个属性。

        程序现在让老鼠直线移动到屏幕下方 - 你能改动程序，让它像图片里一样穿过屏幕对角线吗？

        _挑战:
        你能让老鼠的方向和图片中一样吗？_
      CSD U3 Diagonal Movement_2018: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif"
        style="float: right; margin-left: 20px;">

        # 沿对角线移动

        如果只更新精灵的`x`或`y`属性，它只能直线向上下、或左右移动。如果你想让精灵沿着对角线移动，就需要_同时_更新这两个属性。

        当前的程序让老鼠直着向下移动 - 你能更新代码，让它像右边的图片里一样，沿着屏幕的对角线移动吗？

        _挑战：你能让老鼠朝着图片里同样的方向吗？_
      CSD U3 Diagonal Movement_2019: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif"
        style="float: right; margin-left: 20px;">

        # 沿对角线移动

        如果只更新精灵的`x`或`y`属性，它只能直线向上下、或左右移动。如果你想让精灵沿着对角线移动，就需要_同时_更新这两个属性。

        当前的程序让老鼠直着向下移动 - 你能更新代码，让它像右边的图片里一样，沿着屏幕的对角线移动吗？

        _挑战：你能让老鼠朝着图片里同样的方向吗？_
      CSD U3 Direction Animations: |-
        # 移动时改变图片

        现在，你的条件只能做一件事情（改变精灵的x或y值），实际上在一个条件里你想放多少代码都行。游戏里通常会根据它们走的方向来改变角色的图片。

        # 这样做

        使用提供的程序和图片：

        -   复制4次选择的虫子图片。
        -   \-
            编辑每一幅图，让它们各自指向4个方向。
        -   写代码来在按下不同的方向键时，用`sprite.setAnimation()`改变虫子精灵的图片。
      CSD U3 Direction Animations_2018: |-
        # 移动时改变图片

        现在，你的条件只能做一件事情（改变精灵的x或y值），实际上在一个条件里你想放多少代码都行。游戏里通常会根据它们走的方向来改变角色的图片。

        # 这样做

        使用提供的程序和图片：

        -   复制4次选择的虫子图片。
        -   \-
            编辑每一幅图，让它们各自指向4个方向。
        -   写代码来在按下不同的方向键时，用`sprite.setAnimation()`改变虫子精灵的图片。
      CSD U3 Direction Animations_2018_2019: |-
        # 移动时改变图片

        现在，你的条件只能做一件事情（改变精灵的x或y值），实际上在一个条件里你想放多少代码都行。游戏里通常会根据它们走的方向来改变角色的图片。

        # 这样做

        使用提供的程序和图片：

        -   复制4次选择的虫子图片。
        -   \-
            编辑每一幅图，让它们各自指向4个方向。
        -   写代码来在按下不同的方向键时，用`sprite.setAnimation()`改变虫子精灵的图片。
      CSD U3 Direction Arrows_2018: |-
        # 向所有方向移动

        通过响应`keyDown`（按下键时）事件，一旦你让精灵能向某个移动，将它向所有4个方向移动都很类似。你在这里开发的基本的简单控制，会在以后的开发的许多游戏中都用上。

        # 这样做

        让虫子精灵响应右方向键的代码已经加到了这一关中。添加上另外3个方向的交互！

        -   增加三个如果语句 - 每个方向一个。
        -   每个如果语句应该将精灵向方向键的方向移动。

        _提示：确保你同时考虑了轴向（x或y）的移动，**并且**是否需要增加或减少这个值。_
      CSD U3 Direction Arrows_2018_2019: |-
        # 向所有方向移动

        通过响应`keyDown`（按下键时）事件，一旦你让精灵能向某个移动，将它向所有4个方向移动都很类似。你在这里开发的基本的简单控制，会在以后的开发的许多游戏中都用上。

        # 这样做

        让虫子精灵响应右方向键的代码已经加到了这一关中。添加上另外3个方向的交互！

        -   增加三个如果语句 - 每个方向一个。
        -   每个如果语句应该将精灵向方向键的方向移动。

        _提示：确保你同时考虑了轴向（x或y）的移动，**并且**是否需要增加或减少这个值。_
      CSD U3 Draw Loop Plugged orange and green: |-
        <img
        src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45
        PM.png" style="float:right;width:150px">

        # 使用循环

        现在，该你使用循环做些东西了。记住，循环里的代码会被游戏实验室不停的运行。

        # 这样做

        \*
        增加代码到程序中，这样你的画也会有橙色的圆圈。

        -   当你的程序和右边的图片很像了时，就继续。
      CSD U3 Draw Loop Plugged orange and green_2018: |-
        <img
        src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45
        PM.png" style="float:right;width:150px">

        # 使用循环

        现在，该你使用循环做些东西了。记住，循环里的代码会被游戏实验室不停的运行。

        # 这样做

        \*
        增加代码到程序中，这样你的画也会有橙色的圆圈。

        -   当你的程序和右边的图片很像了时，就继续。
      CSD U3 Draw Loop Plugged orange and green_2019: |-
        <img
        src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45
        PM.png" style="float:right;width:150px">

        # 使用循环

        现在，该你使用循环做些东西了。记住，循环里的代码会被游戏实验室不停的运行。

        # 这样做

        \*
        增加代码到程序中，这样你的画也会有橙色的圆圈。

        -   当你的程序和右边的图片很像了时，就继续。
      CSD U3 Draw Loop Plugged predict 1: |-
        # 画图循环

        这是一个画图循环的例子。

        # 这样做

        -   运行代码看看它是如何工作的。
        -   和你的伙伴讨论一下，这和视频中的手翻书是否看起来是一样的。为什么是或不是呢？
      CSD U3 Draw Loop Plugged predict 1_2018: |-
        # 画图循环

        这是一个画图循环的例子。

        # 这样做

        -   运行代码看看它是如何工作的。
        -   和你的伙伴讨论一下，这和视频中的手翻书是否看起来是一样的。为什么是或不是呢？
      CSD U3 Draw Loop Plugged predict 1_2019: |-
        # 画图循环

        这是一个画图循环的例子。

        # 这样做

        -   运行代码看看它是如何工作的。
        -   和你的伙伴讨论一下，这和视频中的手翻书是否看起来是一样的。为什么是或不是呢？
      CSD U3 Draw Loop Plugged update your scene: |-
        # 扩展你的场景

        这是你上一次课做的精灵场景。你需要做些更新，加上画图循环和精灵属性。

        <img
        src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29
        PM.png" style="float:right;height:100px">

        # 这样做

        -   在程序里加一个画图循环（只需要一个）。
        -   用套索选择器（点击，按住后拖动）来选择你的代码，并放到画图循环中。如果发生任何错误，用ctrl+z可以撤销上一步操作。
        -   加入代码来更新你的精灵的sprite.x`,`sprite.y`，或`sprite.rotation`属性，来让它们移动。你可以一起用上`randomNumber()\`（随机数）。
      CSD U3 Draw Loop Plugged update your scene_2018: |-
        # 扩展你的场景

        这是你上一次课做的精灵场景。你需要做些更新，加上画图循环和精灵属性。

        <img
        src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29
        PM.png" style="float:right;height:100px">

        # 这样做

        -   在程序里加一个画图循环（只需要一个）。
        -   用套索选择器（点击，按住后拖动）来选择你的代码，并放到画图循环中。如果发生任何错误，用ctrl+z可以撤销上一步操作。
        -   加入代码来更新你的精灵的sprite.x`,`sprite.y`，或`sprite.rotation`属性，来让它们移动。你可以一起用上`randomNumber()\`（随机数）。
      CSD U3 Draw Loop Plugged update your scene_2019: |-
        # 扩展你的场景

        这是你上一次课做的精灵场景。你需要做些更新，加上画图循环和精灵属性。

        <img
        src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29
        PM.png" style="float:right;height:100px">

        # 这样做

        -   在程序里加一个画图循环（只需要一个）。
        -   用套索选择器（点击，按住后拖动）来选择你的代码，并放到画图循环中。如果发生任何错误，用ctrl+z可以撤销上一步操作。
        -   加入代码来更新你的精灵的sprite.x`,`sprite.y`，或`sprite.rotation`属性，来让它们移动。你可以一起用上`randomNumber()\`（随机数）。
      CSD U3 Draw Loop Plugged wiggle sprite rotation: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # 更新属性

        这个关组合了一些已经见过的技能。这会在背景绘制椭圆，还会更新精灵的属性。这次，它会改变精灵的`sprite.rotation`属性。

        # 这样做

        这个动画已经更新了精灵的一个旋转属性，使它看起来像是在晃动。

        -   运行一下程序，看看它是如何工作的。
        -   加入代码让其它外星人也像第一个一样晃动。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2018: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # 更新属性

        这个关组合了一些已经见过的技能。这会在背景绘制椭圆，还会更新精灵的属性。这次，它会改变精灵的`sprite.rotation`属性。

        # 这样做

        这个动画已经更新了精灵的一个旋转属性，使它看起来像是在晃动。

        -   运行一下程序，看看它是如何工作的。
        -   加入代码让其它外星人也像第一个一样晃动。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2019: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # 更新属性

        这个关组合了一些已经见过的技能。这会在背景绘制椭圆，还会更新精灵的属性。这次，它会改变精灵的`sprite.rotation`属性。

        # 这样做

        这个动画已经更新了精灵的一个旋转属性，使它看起来像是在晃动。

        -   运行一下程序，看看它是如何工作的。
        -   加入代码让其它外星人也像第一个一样晃动。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite x: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # 更新属性

        精灵上的属性让计算机知道在何处，如何画它们。两个通用的属性是`sprite.x`和`sprite.y`，用来控制精灵的位置。给这些属性赋值，会让你的精灵移动到屏幕上新的位置。

        # 这样做

        这个动画已经更新了一个精灵的 x 属性，让它看起来像是在晃动。

        -   运行程序来看看它是如何工作的。
        -   编辑程序代码，让第二个精灵也像第一个一样晃动。
        -   当你的程序看起来像右边的图片时，就可以开始下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite x_2018: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # 更新属性

        精灵上的属性让计算机知道在何处，如何画它们。两个通用的属性是`sprite.x`和`sprite.y`，用来控制精灵的位置。给这些属性赋值，会让你的精灵移动到屏幕上新的位置。

        # 这样做

        这个动画已经更新了一个精灵的 x 属性，让它看起来像是在晃动。

        -   运行程序来看看它是如何工作的。
        -   编辑程序代码，让第二个精灵也像第一个一样晃动。
        -   当你的程序看起来像右边的图片时，就可以开始下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite x_2019: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # 更新属性

        精灵上的属性让计算机知道在何处，如何画它们。两个通用的属性是`sprite.x`和`sprite.y`，用来控制精灵的位置。给这些属性赋值，会让你的精灵移动到屏幕上新的位置。

        # 这样做

        这个动画已经更新了一个精灵的 x 属性，让它看起来像是在晃动。

        -   运行程序来看看它是如何工作的。
        -   编辑程序代码，让第二个精灵也像第一个一样晃动。
        -   当你的程序看起来像右边的图片时，就可以开始下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite y: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # 更新属性

        这和上一关非常类似。但是这次，你要自己加一个画图循环。

        # 这样做

        -   在程序的最底部添加画图循环模块。
        -   将所有模块都挪到画图循环里。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite y_2018: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # 更新属性

        这和上一关非常类似。但是这次，你要自己加一个画图循环。

        # 这样做

        -   在程序的最底部添加画图循环模块。
        -   将所有模块都挪到画图循环里。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite y_2019: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # 更新属性

        这和上一关非常类似。但是这次，你要自己加一个画图循环。

        # 这样做

        -   在程序的最底部添加画图循环模块。
        -   将所有模块都挪到画图循环里。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Drawing Squares to Corners: |-
        <img src="https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12
        AM.png" style="float:right;width:150px">

        # 在角落里放置正方形

        游戏实验室中很重要的一部分，就是理解位置。记住，你可以任何时候打开网格，或者用鼠标悬停来查看所需位置的x和y值。

        # 这样做

        -   像图片中那样，将两个矩形精确的放在屏幕的角落里。
      CSD U3 Drawing Squares to Corners_2018: |-
        <img src="https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12
        AM.png" style="float:right;width:150px">

        # 在角落里放置正方形

        游戏实验室中很重要的一部分，就是理解位置。记住，你可以任何时候打开网格，或者用鼠标悬停来查看所需位置的x和y值。

        # 这样做

        -   像图片中那样，将两个矩形精确的放在屏幕的角落里。
      CSD U3 Drawing Squares to Corners_2019: |-
        <img src="https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12
        AM.png" style="float:right;width:150px">

        # 在角落里放置正方形

        游戏实验室中很重要的一部分，就是理解位置。记住，你可以任何时候打开网格，或者用鼠标悬停来查看所需位置的x和y值。

        # 这样做

        -   像图片中那样，将两个矩形精确的放在屏幕的角落里。
      CSD U3 Else_2018: |-
        # 如果我的条件不为真呢?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        有时，我们要告诉程序在条件为`真`时做什么，但也有时候要决定为`假`时做什么。在条件模块下点击加号按钮，可以增加一个叫做`否则`的章节。 `否则`章节会在`如果`条件为`假`时运行。

        # 这样做

        齿轮又回来了。上次使用它们时，在按下空格键时让他们旋转。这次在按下空格键时让它们往一个方向旋转，在没按下时往另一个方向旋转。
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   点击如果模块下的_加号_按钮来增加一个否则章节。
        -   增加命令来让齿轮往按下空格时的相反方向转动。
      CSD U3 Else_2019: |-
        # 如果我的条件不为真呢?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        有时，我们要告诉程序在条件为`真`时做什么，但也有时候要决定为`假`时做什么。在条件模块下点击加号按钮，可以增加一个叫做`否则`的章节。 `否则`章节会在`如果`条件为`假`时运行。

        # 这样做

        齿轮又回来了。上次使用它们时，在按下空格键时让他们旋转。这次在按下空格键时让它们往一个方向旋转，在没按下时往另一个方向旋转。
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   点击如果模块下的_加号_按钮来增加一个否则章节。
        -   增加命令来让齿轮往按下空格时的相反方向转动。
      CSD U3 Entertainment Sample 1: |-
        # 外星人跳跃

        按下“运行”按钮来播放左边的游戏。你能用空格键让外星人跳起来，并用方向键让它左右移动。收集星星可以得分，如果得到足够高的分，背景就会改变。
      CSD U3 Entertainment Sample 1_2018: |-
        # 外星人跳跃

        按下“运行”按钮来播放左边的游戏。你能用空格键让外星人跳起来，并用方向键让它左右移动。收集星星可以得分，如果得到足够高的分，背景就会改变。
      CSD U3 Entertainment Sample 1_2019: |-
        # 外星人跳跃

        按下“运行”按钮来播放左边的游戏。你能用空格键让外星人跳起来，并用方向键让它左右移动。收集星星可以得分，如果得到足够高的分，背景就会改变。
      CSD U3 Entertainment Sample 2: |-
        # 饥饿的小兔子

        兔子饿了, 它正在寻找蘑菇和胡萝卜作为晚餐。

        为了赢得胜利，你需要找到一个晚餐碗，然后收集至少10个胡萝卜和5个蘑菇。

        确保躲过虫子。瓢虫和蜗牛会吃掉你的食物，蜜蜂会蛰你，让你的所有东西都掉下来！

        用空格键来跳跃。你可以通过跳到瓢虫和蜗牛上来把它们踩死。

        单击 "运行" 以启动程序。
      CSD U3 Entertainment Sample 2_2018: |-
        # 饥饿的小兔子

        兔子饿了, 它正在寻找蘑菇和胡萝卜作为晚餐。

        为了赢得胜利，你需要找到一个晚餐碗，然后收集至少10个胡萝卜和5个蘑菇。

        确保躲过虫子。瓢虫和蜗牛会吃掉你的食物，蜜蜂会蛰你，让你的所有东西都掉下来！

        用空格键来跳跃。你可以通过跳到瓢虫和蜗牛上来把它们踩死。

        单击 "运行" 以启动程序。
      CSD U3 Entertainment Sample 2_2019: |-
        # 饥饿的小兔子

        兔子饿了, 它正在寻找蘑菇和胡萝卜作为晚餐。

        为了赢得胜利，你需要找到一个晚餐碗，然后收集至少10个胡萝卜和5个蘑菇。

        确保躲过虫子。瓢虫和蜗牛会吃掉你的食物，蜜蜂会蛰你，让你的所有东西都掉下来！

        用空格键来跳跃。你可以通过跳到瓢虫和蜗牛上来把它们踩死。

        单击 "运行" 以启动程序。
      CSD U3 Entertainment Sample 3: |-
        # 会动的漫画书

        将图片、文本和一些巧妙的动画组合在一起，可以做出非常有趣的漫画或者图片故事。点击“运行”来看看示例。
      CSD U3 Entertainment Sample 3_2018: |-
        # 会动的漫画书

        将图片、文本和一些巧妙的动画组合在一起，可以做出非常有趣的漫画或者图片故事。点击“运行”来看看示例。
      CSD U3 Entertainment Sample 3_2019: |-
        # 会动的漫画书

        将图片、文本和一些巧妙的动画组合在一起，可以做出非常有趣的漫画或者图片故事。点击“运行”来看看示例。
      CSD U3 Entertainment Sample 4: |-
        # 印台

        点击“运行”来开始程序。然后用印台来画简单颜色和动物邮票的图画。
      CSD U3 Entertainment Sample 4_2018: |-
        # 印台

        点击“运行”来开始程序。然后用印台来画简单颜色和动物邮票的图画。
      CSD U3 Entertainment Sample 4_2019: |-
        # 印台

        点击“运行”来开始程序。然后用印台来画简单颜色和动物邮票的图画。
      CSD U3 Functions Add Change Background: |-
        # 改变分数和背景

        一旦你得到了10个硬币，就该庆祝了。你应该将背景变得很有趣。

        <img
        src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54
        PM.png" style="float:right; height:100px">

        # 这样做

        -   用一个**如果语句**和两个单独的函数来画背景。
        -   \*
            然后在循环外写函数。你需要决定什么是"简单"或"疯狂"的背景。玩得愉快！
      CSD U3 Functions Add IsTouching: |-
        # 接住硬币，增加得分

        让我们改变得分来完成这个游戏。需要能知道什么时候小兔碰到了金币，并重置它。

        # 这样做

        -   用一个**如果语句**和**isTouching**（碰到）模块来在小兔子接住硬币时增加分数。
        -   确保 **调用了你的函数** 来在被碰到时重置硬币。
        -   玩这个游戏，并 **随机决定硬币的速度** 来让游戏更好玩。
      CSD U3 Functions Add IsTouching_2018: |-
        # 接住硬币，增加得分

        让我们改变得分来完成这个游戏。需要能知道什么时候小兔碰到了金币，并重置它。

        # 这样做

        -   用一个**如果语句**和**isTouching**（碰到）模块来在小兔子接住硬币时增加分数。
        -   确保 **调用了你的函数** 来在被碰到时重置硬币。
        -   玩这个游戏，并 **随机决定硬币的速度** 来让游戏更好玩。
      CSD U3 Functions Add IsTouching_2019: |-
        # 接住硬币，增加得分

        让我们改变得分来完成这个游戏。需要能知道什么时候小兔碰到了金币，并重置它。

        # 这样做

        -   用一个**如果语句**和**isTouching**（碰到）模块来在小兔子接住硬币时增加分数。
        -   确保 **调用了你的函数** 来在被碰到时重置硬币。
        -   玩这个游戏，并 **随机决定硬币的速度** 来让游戏更好玩。
      CSD U3 Functions Randomize Sprite: |-
        # 改变函数

        用函数的好处在于它能去掉重复的代码，这样重复的代码能够在不同的地方很容易的用到了。只改变创建的函数，程序会在函数被调用的地方，都运行改过的新代码。

        # 这样做

        改变`setFlyer`函数，让飞鸟从0到400的随机的Y值开始，并每次在重置时，使用一个随机的速度。
      CSD U3 Functions Randomize Sprite_2018: |-
        # 改变函数

        用函数的好处在于它能去掉重复的代码，这样重复的代码能够在不同的地方很容易的用到了。只改变创建的函数，程序会在函数被调用的地方，都运行改过的新代码。

        # 这样做

        改变`setFlyer`函数，让飞鸟从0到400的随机的Y值开始，并每次在重置时，使用一个随机的速度。
      CSD U3 Functions Randomize Sprite_2019: |-
        # 改变函数

        用函数的好处在于它能去掉重复的代码，这样重复的代码能够在不同的地方很容易的用到了。只改变创建的函数，程序会在函数被调用的地方，都运行改过的新代码。

        # 这样做

        改变`setFlyer`函数，让飞鸟从0到400的随机的Y值开始，并每次在重置时，使用一个随机的速度。
      CSD U3 Functions Reset Sprite: |-
        # 多次调用函数

        在程序中，会经常在多个地方使用相同的代码。一旦创建了一个函数，你可以随意调用它多次。

        # 这样做

        这个代码创建了一个精灵，能够穿过屏幕一次。你能让它再回来穿过屏幕吗？

        \*
        **注意：** 函数在你的程序开始时已经被调用了一次了。
        \*
        阅读循环中**如果语句**的条件。你觉得它为什么会在这里？

        -   使用这个如果语句和函数来让精灵穿过屏幕多次。
      CSD U3 Functions Reset Sprite_2018: |-
        # 多次调用函数

        在程序中，会经常在多个地方使用相同的代码。一旦创建了一个函数，你可以随意调用它多次。

        # 这样做

        这个代码创建了一个精灵，能够穿过屏幕一次。你能让它再回来穿过屏幕吗？

        \*
        **注意：** 函数在你的程序开始时已经被调用了一次了。
        \*
        阅读循环中**如果语句**的条件。你觉得它为什么会在这里？

        -   使用这个如果语句和函数来让精灵穿过屏幕多次。
      CSD U3 Functions Reset Sprite_2019: |-
        # 多次调用函数

        在程序中，会经常在多个地方使用相同的代码。一旦创建了一个函数，你可以随意调用它多次。

        # 这样做

        这个代码创建了一个精灵，能够穿过屏幕一次。你能让它再回来穿过屏幕吗？

        \*
        **注意：** 函数在你的程序开始时已经被调用了一次了。
        \*
        阅读循环中**如果语句**的条件。你觉得它为什么会在这里？

        -   使用这个如果语句和函数来让精灵穿过屏幕多次。
      CSD U3 Input Fish: |-
        # 方向和鱼

        这条鱼回来了。你能让鱼只在按下左方向键时向左移动吗？

        # 这样做

        -   增加一个如果语句来检查是否左方向键被按下了。
        -   在如果语句中用移动命令来移动鱼。
      CSD U3 Input Fish_2018: |-
        # 方向和鱼

        这条鱼回来了。你能让鱼只在按下左方向键时向左移动吗？

        # 这样做

        -   增加一个如果语句来检查是否左方向键被按下了。
        -   在如果语句中用移动命令来移动鱼。
      CSD U3 Input Fish_2019: |-
        # 方向和鱼

        这条鱼回来了。你能让鱼只在按下左方向键时向左移动吗？

        # 这样做

        -   增加一个如果语句来检查是否左方向键被按下了。
        -   在如果语句中用移动命令来移动鱼。
      CSD U3 Input Gears: |-
        # 齿轮和条件语句

        让我们只让齿轮在按住空格键时才旋转。

        # 这样做

        -   增加一个`if` （如果）语句。
        -   用`keyDown`（按下键时）当做如果语句的输入来检查是否空格键被按下了。
        -   把让齿轮旋转的代码挪到`if`（如果）语句中。
      CSD U3 Input Gears_2018: |-
        # 齿轮和条件语句

        让我们只让齿轮在按住空格键时才旋转。

        # 这样做

        -   增加一个`if` （如果）语句。
        -   用`keyDown`（按下键时）当做如果语句的输入来检查是否空格键被按下了。
        -   把让齿轮旋转的代码挪到`if`（如果）语句中。
      CSD U3 Input Gears_2019: |-
        # 齿轮和条件语句

        让我们只让齿轮在按住空格键时才旋转。

        # 这样做

        -   增加一个`if` （如果）语句。
        -   用`keyDown`（按下键时）当做如果语句的输入来检查是否空格键被按下了。
        -   把让齿轮旋转的代码挪到`if`（如果）语句中。
      CSD U3 Interactive Card Background: |-
        # 布置背景

        在开始项目前，你应该已经完成了交互卡片活动了，并且你会想用纸来开发程序了。做好准备，是成功创建一个程序的**最重要的**元素之一！

        # 这样做

        参考你的活动计划表来帮助你布置将作为卡片背景的形状。

        -   首先，指出在你的图片上最底下一层是什么（应该用`background()`模块），并将它加到循环的最上面。
        -   接下来，按照顺序将每一层布置出来。
        -   最后，在这个章节的代码最上面增加一个注释，来说明这些代码做了什么。如果在其中有很复杂的代码（比如用来画树或者房子的），也给它们加一些注释。

        **挑战：**
        你能用变量或者`randomNumber()`来在背景层增加一些小的动画吗？
      CSD U3 Interactive Card Background_2018: |-
        # 布置背景

        在开始项目前，你应该已经完成了交互卡片活动了，并且你会想用纸来开发程序了。做好准备，是成功创建一个程序的**最重要的**元素之一！

        # 这样做

        参考你的活动计划表来帮助你布置将作为卡片背景的形状。

        -   首先，指出在你的图片上最底下一层是什么（应该用`background()`模块），并将它加到循环的最上面。
        -   接下来，按照顺序将每一层布置出来。
        -   最后，在这个章节的代码最上面增加一个注释，来说明这些代码做了什么。如果在其中有很复杂的代码（比如用来画树或者房子的），也给它们加一些注释。

        **挑战：**
        你能用变量或者`randomNumber()`来在背景层增加一些小的动画吗？
      CSD U3 Interactive Card Background_2019: |-
        # 布置背景

        在开始项目前，你应该已经完成了交互卡片活动了，并且你会想用纸来开发程序了。做好准备，是成功创建一个程序的**最重要的**元素之一！

        # 这样做

        参考你的活动计划表来帮助你布置将作为卡片背景的形状。

        -   首先，指出在你的图片上最底下一层是什么（应该用`background()`模块），并将它加到循环的最上面。
        -   接下来，按照顺序将每一层布置出来。
        -   最后，在这个章节的代码最上面增加一个注释，来说明这些代码做了什么。如果在其中有很复杂的代码（比如用来画树或者房子的），也给它们加一些注释。

        **挑战：**
        你能用变量或者`randomNumber()`来在背景层增加一些小的动画吗？
      CSD U3 Interactive Card Other Conditionals: "# 其它条件\n\n卡牌里的_惊喜_来源于不直接响应用户输入，而是牌的其它元素的条件语句。这些条件能被通过用户输入而更新的变量触发，或者精灵移动到屏幕的某个部分。\n\n#
        \n\n这样做\n对于交互表里剩下的条目：\n\n\\*\n在循环中增加一个`如果`模块（如果你需要一个应变的行为，可以用`如果-否则`模块）。\n\n-
        \  在条件里增加一个合适的比较模块。（如：`<`，`>`，或`==`）。\n-   在`如果`模块中增加需要的行动。\n\n**挑战：**\n你能通过将它们组合在一起或者用组合的布尔来创造出巧妙的条件逻辑吗？"
      CSD U3 Interactive Card Other Conditionals_2018: "# 其它条件\n\n卡牌里的_惊喜_来源于不直接响应用户输入，而是牌的其它元素的条件语句。这些条件能被通过用户输入而更新的变量触发，或者精灵移动到屏幕的某个部分。\n\n#
        \n\n这样做\n对于交互表里剩下的条目：\n\n\\*\n在循环中增加一个`如果`模块（如果你需要一个应变的行为，可以用`如果-否则`模块）。\n\n-
        \  在条件里增加一个合适的比较模块。（如：`<`，`>`，或`==`）。\n-   在`如果`模块中增加需要的行动。\n\n**挑战：**\n你能通过将它们组合在一起或者用组合的布尔来创造出巧妙的条件逻辑吗？"
      CSD U3 Interactive Card Other Conditionals_2019: "# 其它条件\n\n卡牌里的_惊喜_来源于不直接响应用户输入，而是牌的其它元素的条件语句。这些条件能被通过用户输入而更新的变量触发，或者精灵移动到屏幕的某个部分。\n\n#
        \n\n这样做\n对于交互表里剩下的条目：\n\n\\*\n在循环中增加一个`如果`模块（如果你需要一个应变的行为，可以用`如果-否则`模块）。\n\n-
        \  在条件里增加一个合适的比较模块。（如：`<`，`>`，或`==`）。\n-   在`如果`模块中增加需要的行动。\n\n**挑战：**\n你能通过将它们组合在一起或者用组合的布尔来创造出巧妙的条件逻辑吗？"
      CSD U3 Keyboard Input Challenge: |-
        # 挑战

        _在尝试挑战前，先与你的老师商量一下。_

        这是前几关中你做过的虫子的程序。选择一个或几个挑战，或者添加一个你自己的功能！

        -   用空格键来控制你的虫子精灵的另一个属性，比如旋转或者缩放。
        -   \*
            添加一些随机数到移动过程里。
        -   添加第二个精灵，并用另一组键来控制它（一般大家会用"w", "a", "s", 和 "d"）。
        -   在背景中加一些形状来让场景看起来更有趣。
      CSD U3 Keyboard Input Challenge_2018: |-
        # 挑战

        _在尝试挑战前，先与你的老师商量一下。_

        这是前几关中你做过的虫子的程序。选择一个或几个挑战，或者添加一个你自己的功能！

        -   用空格键来控制你的虫子精灵的另一个属性，比如旋转或者缩放。
        -   \*
            添加一些随机数到移动过程里。
        -   添加第二个精灵，并用另一组键来控制它（一般大家会用"w", "a", "s", 和 "d"）。
        -   在背景中加一些形状来让场景看起来更有趣。
      CSD U3 Keyboard Input Challenge_2018_2019: |-
        # 挑战

        _在尝试挑战前，先与你的老师商量一下。_

        这是前几关中你做过的虫子的程序。选择一个或几个挑战，或者添加一个你自己的功能！

        -   用空格键来控制你的虫子精灵的另一个属性，比如旋转或者缩放。
        -   \*
            添加一些随机数到移动过程里。
        -   添加第二个精灵，并用另一组键来控制它（一般大家会用"w", "a", "s", 和 "d"）。
        -   在背景中加一些形状来让场景看起来更有趣。
      CSD U3 Keypress Watchers_2018: |-
        # 更多的方法来获得用户输入

        目前，你已经学会用`keyDown`（按下键时）来让用户控制你的程序了，但这只是多种输入方法中的一种。实际上这只是很多种_检测键盘按下_方法中的一种！取决于你希望怎样对按下键进行响应，这里可能有一些其它你想用的模块。

        # 这样做

        在这个程序里，你**不需要写任何代码**。

        -   读读程序，看看你能否猜到会发生什么。
        -   当程序运行时，点击方向键，并观察屏幕的反应。
        -   写下，或者与邻近的同学分享你的发现。

        \\t\*
        `keyDown()`（按下键时）, `keyWentDown()`（键被按下时），和
        `keyWentUp()`（键被释放时）事件看上去有什么不同？
            \* 你觉得第10行的(`!`)（叹号）的作用是什么？
            \* 你在游戏中会如何使用不同的按键相关的事件模块？
      CSD U3 Keypress Watchers_2019: |-
        # 更多的方法来获得用户输入

        目前，你已经学会用`keyDown`（按下键时）来让用户控制你的程序了，但这只是多种输入方法中的一种。实际上这只是很多种_检测键盘按下_方法中的一种！取决于你希望怎样对按下键进行响应，这里可能有一些其它你想用的模块。

        # 这样做

        在这个程序里，你**不需要写任何代码**。

        -   读读程序，看看你能否猜到会发生什么。
        -   当程序运行时，点击方向键，并观察屏幕的反应。
        -   写下，或者与邻近的同学分享你的发现。

        \\t\*
        `keyDown()`（按下键时）, `keyWentDown()`（键被按下时），和
        `keyWentUp()`（键被释放时）事件看上去有什么不同？
            \* 你觉得第10行的(`!`)（叹号）的作用是什么？
            \* 你在游戏中会如何使用不同的按键相关的事件模块？
      CSD U3 L11 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L11 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L11 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L12 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L12 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L12 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L13 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L13 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L13 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L15 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L15 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L15 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L16 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L16 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L16 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L17 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L17 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L17 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L18 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L18 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L18 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L19 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L19 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L19 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L3 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L3 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L3 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L4 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L4 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L4 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L5 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L5 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L5 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L6 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L6 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L6 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L7 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L7 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L7 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L9 Freeplay: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L9 Freeplay_2018: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 L9 Freeplay_2019: |-
        # 自由发挥

        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 !\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。
      CSD U3 Mouse Input Bee 1: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\n\n#
        鼠标的X和Y\n\n最简单的输入方式之一，就是让一个精灵跟随用户的鼠标位置。\n**你能通过`World.mouseX`和`World.mouseY`来获得鼠标的x、y值。**这和你以前学的精灵的属性是一致的。`World`是目标对象的名字。`mouseX`和`mouseY`是属性的名字。\n\n#
        \n\n这样做\n\n让蜜蜂精灵在游戏区域跟随鼠标。\n\n-   蜜蜂图片已经帮你加到了动画标签页。\n-   在窗口中间画出蜜蜂精灵。\n-   \\*\n
        \   在画图循环里更新精灵的位置来跟随鼠标的位置。：\n    \\\\t\\* 将精灵的x位置设置为`World.mouseX`的值。\n-   \\*\n
        \   将精灵的y位置设置为`World.mouseY`的值。\n-   运行程序来看看它是否工作。"
      CSD U3 Mouse Input Bee 1_2018: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\n\n#
        鼠标的X和Y\n\n最简单的输入方式之一，就是让一个精灵跟随用户的鼠标位置。\n**你能通过`World.mouseX`和`World.mouseY`来获得鼠标的x、y值。**这和你以前学的精灵的属性是一致的。`World`是目标对象的名字。`mouseX`和`mouseY`是属性的名字。\n\n#
        \n\n这样做\n\n让蜜蜂精灵在游戏区域跟随鼠标。\n\n-   蜜蜂图片已经帮你加到了动画标签页。\n-   在窗口中间画出蜜蜂精灵。\n-   \\*\n
        \   在画图循环里更新精灵的位置来跟随鼠标的位置。：\n    \\\\t\\* 将精灵的x位置设置为`World.mouseX`的值。\n-   \\*\n
        \   将精灵的y位置设置为`World.mouseY`的值。\n-   运行程序来看看它是否工作。"
      CSD U3 Mouse Input Bee 1_2019: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\n\n#
        鼠标的X和Y\n\n最简单的输入方式之一，就是让一个精灵跟随用户的鼠标位置。\n**你能通过`World.mouseX`和`World.mouseY`来获得鼠标的x、y值。**这和你以前学的精灵的属性是一致的。`World`是目标对象的名字。`mouseX`和`mouseY`是属性的名字。\n\n#
        \n\n这样做\n\n让蜜蜂精灵在游戏区域跟随鼠标。\n\n-   蜜蜂图片已经帮你加到了动画标签页。\n-   在窗口中间画出蜜蜂精灵。\n-   \\*\n
        \   在画图循环里更新精灵的位置来跟随鼠标的位置。：\n    \\\\t\\* 将精灵的x位置设置为`World.mouseX`的值。\n-   \\*\n
        \   将精灵的y位置设置为`World.mouseY`的值。\n-   运行程序来看看它是否工作。"
      CSD U3 Mouse Input Bee 2: |-
        # 随机围绕某点

        <img
        src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif"
        style="float:right">

        现在你能让蜜蜂跟随鼠标了，让我们像右边的图一样，让蜜蜂在鼠标周围飞行。要做到这样，你需要**增加一个-50到50的随机数到`mouseX`或`mouseY`上**。

        # 这样做

        你已经有了一个跟随鼠标的蜜蜂精灵了。

        -   更新x和y的位置，让它随机的靠近鼠标。
            \\t\* 添加一个-50到50的随机数到`World.mouseX`和`World.mouseY`。
        -   如果需要的话，可以用`World.frameRate`模块来减缓动画，找到最佳帧率。

        _挑战
        再**增加3只蜜蜂**以同样的方法来跟随鼠标，从而形成蜂群。_
      CSD U3 Mouse Input Bee 2_2018: |-
        # 随机围绕某点

        <img
        src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif"
        style="float:right">

        现在你能让蜜蜂跟随鼠标了，让我们像右边的图一样，让蜜蜂在鼠标周围飞行。要做到这样，你需要**增加一个-50到50的随机数到`mouseX`或`mouseY`上**。

        # 这样做

        你已经有了一个跟随鼠标的蜜蜂精灵了。

        -   更新x和y的位置，让它随机的靠近鼠标。
            \\t\* 添加一个-50到50的随机数到`World.mouseX`和`World.mouseY`。
        -   如果需要的话，可以用`World.frameRate`模块来减缓动画，找到最佳帧率。

        _挑战
        再**增加3只蜜蜂**以同样的方法来跟随鼠标，从而形成蜂群。_
      CSD U3 Mouse Input Bee 2_2019: |-
        # 随机围绕某点

        <img
        src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif"
        style="float:right">

        现在你能让蜜蜂跟随鼠标了，让我们像右边的图一样，让蜜蜂在鼠标周围飞行。要做到这样，你需要**增加一个-50到50的随机数到`mouseX`或`mouseY`上**。

        # 这样做

        你已经有了一个跟随鼠标的蜜蜂精灵了。

        -   更新x和y的位置，让它随机的靠近鼠标。
            \\t\* 添加一个-50到50的随机数到`World.mouseX`和`World.mouseY`。
        -   如果需要的话，可以用`World.frameRate`模块来减缓动画，找到最佳帧率。

        _挑战
        再**增加3只蜜蜂**以同样的方法来跟随鼠标，从而形成蜂群。_
      CSD U3 Movement Fish: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif"
        style="float: right; margin-left: 20px;">

        # 鱼与动画

        用计数器的模式，来让这三条鱼都从图片移动到左边。蓝色的鱼要移动得最快，橙色的鱼跟在后面，绿色的鱼最慢。
      CSD U3 Movement Fish challenge_2018: |-
        # 更多鱼!

        调整鱼在游动时的旋转，让它看起来更像是在游动。你还可以通过加入新特性（比如鱼缸中上升的泡泡）来让这个场景更逼真。
      CSD U3 Movement Fish challenge_2019: |-
        # 更多鱼!

        调整鱼在游动时的旋转，让它看起来更像是在游动。你还可以通过加入新特性（比如鱼缸中上升的泡泡）来让这个场景更逼真。
      CSD U3 Movement Fish_2018: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif"
        style="float: right; margin-left: 20px;">

        # 鱼与动画

        用计数器的模式，来让这三条鱼都从图片移动到左边。蓝色的鱼要移动得最快，橙色的鱼跟在后面，绿色的鱼最慢。
      CSD U3 Movement Fish_2019: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif"
        style="float: right; margin-left: 20px;">

        # 鱼与动画

        用计数器的模式，来让这三条鱼都从图片移动到左边。蓝色的鱼要移动得最快，橙色的鱼跟在后面，绿色的鱼最慢。
      CSD U3 Movement Gears: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif"
        style="width:200px; float:right; margin-left: 20px;">

        # 旋转方向

        当你在`rotation`（旋转）属性上使用计数器模式时，目标总是正时针方向旋转。有时，你需要让精灵反过来旋转。你能通过减法做到这点！

        # 这样做

        这里为你设置了三个齿轮。你需要让它们看起来像是在同步旋转。

        -   让齿轮同步旋转起来，就像是一个系统。
        -   **提示：它们不能往同一个方向旋转**。
      CSD U3 Movement Gears_2018: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif"
        style="width:200px; float:right; margin-left: 20px;">

        # 旋转方向

        当你在`rotation`（旋转）属性上使用计数器模式时，目标总是正时针方向旋转。有时，你需要让精灵反过来旋转。你能通过减法做到这点！

        # 这样做

        这里为你设置了三个齿轮。你需要让它们看起来像是在同步旋转。

        -   让齿轮同步旋转起来，就像是一个系统。
        -   **提示：它们不能往同一个方向旋转**。
      CSD U3 Movement Gears_2019: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif"
        style="width:200px; float:right; margin-left: 20px;">

        # 旋转方向

        当你在`rotation`（旋转）属性上使用计数器模式时，目标总是正时针方向旋转。有时，你需要让精灵反过来旋转。你能通过减法做到这点！

        # 这样做

        这里为你设置了三个齿轮。你需要让它们看起来像是在同步旋转。

        -   让齿轮同步旋转起来，就像是一个系统。
        -   **提示：它们不能往同一个方向旋转**。
      CSD U3 Movement Your Own 1: "# 制作自己的动画\n\n用计数器模式和精灵的属性来创造属于自己的动画。你可以用以前做的静态图，或者新的图片来创造故事。\n\n#
        \n\n这样做\n\n开始时，让我们从设置静态场景开始。\n\n-   添加在动画标签页中的图片。\n-   创建图片，并分配图片。\n-   用画图循环来画背景和你的精灵。"
      CSD U3 Movement Your Own 1_2018: "# 制作自己的动画\n\n用计数器模式和精灵的属性来创造属于自己的动画。你可以用以前做的静态图，或者新的图片来创造故事。\n\n#
        \n\n这样做\n\n开始时，让我们从设置静态场景开始。\n\n-   添加在动画标签页中的图片。\n-   创建图片，并分配图片。\n-   用画图循环来画背景和你的精灵。"
      CSD U3 Movement Your Own 1_2019: "# 制作自己的动画\n\n用计数器模式和精灵的属性来创造属于自己的动画。你可以用以前做的静态图，或者新的图片来创造故事。\n\n#
        \n\n这样做\n\n开始时，让我们从设置静态场景开始。\n\n-   添加在动画标签页中的图片。\n-   创建图片，并分配图片。\n-   用画图循环来画背景和你的精灵。"
      CSD U3 Movement Your Own 2: |-
        # 在动画中增加移动

        当你设置好静态场景后，可以开始加一些动画了。当你对程序感到满意时，点击“提交”按钮来上传。如果你想添加新功能，可以随时取消提交，并继续工作。

        # 这样做

        在画图循环中

        -   找到需要改动的精灵属性。
        -   用计数器模式来更新属性。

        _提示：如果你的计数器模式不像你期待那样工作，添加监视器来帮助调试程序。_
      CSD U3 Movement Your Own 2_2018: |-
        # 在动画中增加移动

        当你设置好静态场景后，可以开始加一些动画了。当你对程序感到满意时，点击“提交”按钮来上传。如果你想添加新功能，可以随时取消提交，并继续工作。

        # 这样做

        在画图循环中

        -   找到需要改动的精灵属性。
        -   用计数器模式来更新属性。

        _提示：如果你的计数器模式不像你期待那样工作，添加监视器来帮助调试程序。_
      CSD U3 Movement Your Own 2_2019: |-
        # 在动画中增加移动

        当你设置好静态场景后，可以开始加一些动画了。当你对程序感到满意时，点击“提交”按钮来上传。如果你想添加新功能，可以随时取消提交，并继续工作。

        # 这样做

        在画图循环中

        -   找到需要改动的精灵属性。
        -   用计数器模式来更新属性。

        _提示：如果你的计数器模式不像你期待那样工作，添加监视器来帮助调试程序。_
      CSD U3 Plotting Shapes Shape Lab: |-
        # 绘制形状

        探索使用此工具，它可以绘制不同的颜色形状。

        确保点击 "运行" 并尝试打开网格来帮助精确地放置形状。

        !\[](\<<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59>
        PM.png>)
      CSD U3 Plotting Shapes Shape Lab_2018: |-
        # 绘制形状

        探索使用此工具，它可以绘制不同的颜色形状。

        确保点击 "运行" 并尝试打开网格来帮助精确地放置形状。

        !\[](\<<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59>
        PM.png>)
      CSD U3 Random Debug Cloud: |-
        <img src="https://images.code.org/529b7e5ddda4683e6a0cc5b3028e4dbf-image-1490824752133.58.50
        PM.png" style="float:right;height:150px">

        # 调试 - 用4个参数

        现在，草地好了。让我们在天上加一朵云。不幸的是，现在看起来有点滑稽。

        # 这样做

        -   调试程序让云像图片里一样，宽度大于高度。
        -   提示：你需要改动两个参数。哪些设置了云的宽度和高度？

        _挑战：太阳和图片中的位置不完全一样。你能改变太阳的坐标，让它和图片里的完全一致吗？_
      CSD U3 Random Debug Cloud_2018: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28
        PM.png" style="float:right;height:150px">

        # 调试 - 用4个参数

        现在，草地好了。让我们在天上加一朵云。不幸的是，现在看起来有点滑稽。

        # 这样做

        -   调试程序让云像图片里一样，宽度大于高度。
        -   提示：你需要改动两个参数。哪些设置了云的宽度和高度？

        _挑战：太阳和图片中的位置不完全一样。你能改变太阳的坐标，让它和图片里的完全一致吗？_
      CSD U3 Random Debug Cloud_2018_2019: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28
        PM.png" style="float:right;height:150px">

        # 调试 - 用4个参数

        现在，草地好了。让我们在天上加一朵云。不幸的是，现在看起来有点滑稽。

        # 这样做

        -   调试程序让云像图片里一样，宽度大于高度。
        -   提示：你需要改动两个参数。哪些设置了云的宽度和高度？

        _挑战：太阳和图片中的位置不完全一样。你能改变太阳的坐标，让它和图片里的完全一致吗？_
      CSD U3 Random Debug Grass: |-
        <img src="https://images.code.org/83269268e1c4f8af8551253ff4573b43-image-1490825158453.03.45
        PM.png" style="float:right;height:150px">

        # 调试 - 用4个参数

        这个程序用了`rect()` （矩形）and `ellipse()`（椭圆）的4个参数版本来画一个简单的场景。

        # 这样做

        -   调试程序并改正错误，让草地延伸到整个底部。
        -   提示：你只需要改动一个数字。那个参数让你的矩形（草地）更宽？
      CSD U3 Random Debug Grass_2018: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37
        PM.png" style="float:right;height:150px">

        # 调试 - 用4个参数

        这个程序用了`rect()` （矩形）and `ellipse()`（椭圆）的4个参数版本来画一个简单的场景。

        # 这样做

        -   调试程序并改正错误，让草地延伸到整个底部。
        -   提示：你只需要改动一个数字。那个参数让你的矩形（草地）更宽？
      CSD U3 Random Debug Grass_2019: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37
        PM.png" style="float:right;height:150px">

        # 调试 - 用4个参数

        这个程序用了`rect()` （矩形）and `ellipse()`（椭圆）的4个参数版本来画一个简单的场景。

        # 这样做

        -   调试程序并改正错误，让草地延伸到整个底部。
        -   提示：你只需要改动一个数字。那个参数让你的矩形（草地）更宽？
      CSD U3 Random Ellipse Behind: |-
        <img src="https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10
        PM.png" style="float:right;height:150px">

        # 这样做

        -   写代码在绿色椭圆后面画一个橙色的椭圆。
        -   别担心确切的尺寸，只要整个绿色椭圆在橙色里就行。
      CSD U3 Random Ellipse Behind_2018: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19
        PM.png" style="float:right;height:150px">

        # 这样做

        -   写代码在绿色椭圆后面画一个橙色的椭圆。
        -   别担心确切的尺寸，只要整个绿色椭圆在橙色里就行。
      CSD U3 Random Ellipse Behind_2018_2019: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19
        PM.png" style="float:right;height:150px">

        # 这样做

        -   写代码在绿色椭圆后面画一个橙色的椭圆。
        -   别担心确切的尺寸，只要整个绿色椭圆在橙色里就行。
      CSD U3 Random Taller Rectangle: "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10
        PM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\n\n#
        矩形尺寸\n\n这些“矩形”模块有两个以上的参数你可以用来控制大小。 请留意`noStroke()`（不要描边） 模块会让形状的描边（边框）消失。\n\n#
        这样做\n\n-   看看编码，试着找出`rect`（矩形）后两个参数的作用。 \n-   改变第二个`rect`（矩形）的数字使得红色的矩形比蓝色的更长。"
      CSD U3 Random Taller Rectangle_2018: "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10
        PM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\n\n#
        矩形尺寸\n\n这些“矩形”模块有两个以上的参数你可以用来控制大小。 请留意`noStroke()`（不要描边） 模块会让形状的描边（边框）消失。\n\n#
        这样做\n\n-   看看编码，试着找出`rect`（矩形）后两个参数的作用。 \n-   改变第二个`rect`（矩形）的数字使得红色的矩形比蓝色的更长。"
      CSD U3 Random Taller Rectangle_2019: "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10
        PM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\n\n#
        矩形尺寸\n\n这些“矩形”模块有两个以上的参数你可以用来控制大小。 请留意`noStroke()`（不要描边） 模块会让形状的描边（边框）消失。\n\n#
        这样做\n\n-   看看编码，试着找出`rect`（矩形）后两个参数的作用。 \n-   改变第二个`rect`（矩形）的数字使得红色的矩形比蓝色的更长。"
      CSD U3 Random background: "# 背景\n\n有时，你可能像给整个屏幕都填上同一种颜色。你可以用`background`（背景）来做到这样。它会用你选择的颜色来覆盖整个屏幕。\n\n#
        \n\n这样做\n\n-   运行代码，看看`background`（背景）是如何起作用的。\n-   将北京颜色从黄色改为橙色。\n\n_挑战：这里有一个紫色正方形被背景覆盖了。你能改变代码的顺序同时看见紫色和蓝色正方形吗？_"
      CSD U3 Random background2: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04
        PM.png" style="float:right;height:150px">

        # 背景

        `background`（背景）会在所有元素上画图像。因此，考虑代码的顺序是非常重要的。

        # 这样做

        -   使用`background`（背景）在绿色圆圈后画一个”black"（黑色）的背景。
      CSD U3 Random background2_2018: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04
        PM.png" style="float:right;height:150px">

        # 背景

        `background`（背景）会在所有元素上画图像。因此，考虑代码的顺序是非常重要的。

        # 这样做

        -   使用`background`（背景）在绿色圆圈后画一个”black"（黑色）的背景。
      CSD U3 Random background2_2019: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04
        PM.png" style="float:right;height:150px">

        # 背景

        `background`（背景）会在所有元素上画图像。因此，考虑代码的顺序是非常重要的。

        # 这样做

        -   使用`background`（背景）在绿色圆圈后画一个”black"（黑色）的背景。
      CSD U3 Random background_2018: "# 背景\n\n有时，你可能像给整个屏幕都填上同一种颜色。你可以用`background`（背景）来做到这样。它会用你选择的颜色来覆盖整个屏幕。\n\n#
        \n\n这样做\n\n-   运行代码，看看`background`（背景）是如何起作用的。\n-   将北京颜色从黄色改为橙色。\n\n_挑战：这里有一个紫色正方形被背景覆盖了。你能改变代码的顺序同时看见紫色和蓝色正方形吗？_"
      CSD U3 Random background_2019: "# 背景\n\n有时，你可能像给整个屏幕都填上同一种颜色。你可以用`background`（背景）来做到这样。它会用你选择的颜色来覆盖整个屏幕。\n\n#
        \n\n这样做\n\n-   运行代码，看看`background`（背景）是如何起作用的。\n-   将北京颜色从黄色改为橙色。\n\n_挑战：这里有一个紫色正方形被背景覆盖了。你能改变代码的顺序同时看见紫色和蓝色正方形吗？_"
      CSD U3 Random rainbow snake: |-
        <img src="https://images.code.org/d1e4780e483ffa510a27e91b2b1f1963-image-1491341267537.26.14
        PM.png" style="float:right;height:150px">

        # 彩虹蛇

        这个程序画了一条罕见的彩虹蛇。要让每次画出来蛇的颜色都不同，你需要用到随机数。

        # 这样做

        -   运行几次程序来看看初始的的代码是如何起作用的。
        -   给你的彩虹蛇增加至少三个不同颜色的圆圈。
        -   使用`randomNumber()`（随机数字）来让蛇的后半部分像前面3段一样上下移动。

        _挑战：你能让一些圆圈的大小也随机吗？_
      CSD U3 Random rainbow snake_2018: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58
        PM.png" style="float:right;height:150px">

        # 彩虹蛇

        这个程序画了一条罕见的彩虹蛇。要让每次画出来蛇的颜色都不同，你需要用到随机数。

        # 这样做

        -   运行几次程序来看看初始的的代码是如何起作用的。
        -   给你的彩虹蛇增加至少三个不同颜色的圆圈。
        -   使用`randomNumber()`（随机数字）来让蛇的后半部分像前面3段一样上下移动。

        _挑战：你能让一些圆圈的大小也随机吗？_
      CSD U3 Random random ellipse: |-
        # 随机数

        `randomNumber()`（随机数字）会在最小值和最大值之间选一个随机数。你能用这个代替直接写出数字。如果你在图画中用了随机数字，它会在每次运行程序时，都有些不同。

        # 这样做

        -   运行几次程序来看看它是如何工作的。
        -   改变`randomNumber`（随机数字）里面的数字，并且再运行几次代码，看看有什么不同。
      CSD U3 Random random ellipse2: |-
        <img src="https://images.code.org/ff3be801c7e634d49584aac103df292a-image-1491334428729.33.18
        PM.png" style="float:right;height:150px">

        # 随机数

        这是和上次一样的太阳。现在只有x轴坐标是随机的，但你可以把y轴坐标也改成随机的。

        # 这样做

        -   用`randomNumber()`（随机数字）来设置椭圆的Y参数，这样能让圆圈也画在随机的Y轴位置上。
        -   当你的圆圈的x和y轴都随机变化了，就可以继续下一关了。
      CSD U3 Random random ellipse2_2018: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40
        PM.png" style="float:right;height:150px">

        # 随机数

        这是和上次一样的太阳。现在只有x轴坐标是随机的，但你可以把y轴坐标也改成随机的。

        # 这样做

        -   用`randomNumber()`（随机数字）来设置椭圆的Y参数，这样能让圆圈也画在随机的Y轴位置上。
        -   当你的圆圈的x和y轴都随机变化了，就可以继续下一关了。
      CSD U3 Random random ellipse2_2018_2019: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40
        PM.png" style="float:right;height:150px">

        # 随机数

        这是和上次一样的太阳。现在只有x轴坐标是随机的，但你可以把y轴坐标也改成随机的。

        # 这样做

        -   用`randomNumber()`（随机数字）来设置椭圆的Y参数，这样能让圆圈也画在随机的Y轴位置上。
        -   当你的圆圈的x和y轴都随机变化了，就可以继续下一关了。
      CSD U3 Random random ellipse_2018: |-
        # 随机数

        `randomNumber()`（随机数字）会在最小值和最大值之间选一个随机数。你能用这个代替直接写出数字。如果你在图画中用了随机数字，它会在每次运行程序时，都有些不同。

        # 这样做

        -   运行几次程序来看看它是如何工作的。
        -   改变`randomNumber`（随机数字）里面的数字，并且再运行几次代码，看看有什么不同。
      CSD U3 Random random ellipse_2018_2019: |-
        # 随机数

        `randomNumber()`（随机数字）会在最小值和最大值之间选一个随机数。你能用这个代替直接写出数字。如果你在图画中用了随机数字，它会在每次运行程序时，都有些不同。

        # 这样做

        -   运行几次程序来看看它是如何工作的。
        -   改变`randomNumber`（随机数字）里面的数字，并且再运行几次代码，看看有什么不同。
      CSD U3 Scene Example: |-
        # 精灵场景

        通过将形状、精灵和一个新的，叫做`text`（文本）的模块组合在一起，你能创建一个简单的场景、故事或漫画。这个例子非常简单，但你可以组合更多的精灵、形状来创建自己想要的复杂、细致的场景。

        ## 画出轮廓

        在开始之前，先花点时间来给下课前要画完的场景画一个轮廓。思考一下以前用过的简单形状，角色精灵，以及想要显示在屏幕上的文本。一旦你勾勒出了创意，你可以学习`text`（文本），以及增氧组合出一个场景。
      CSD U3 Scene Example_2018: |-
        # 精灵场景

        通过将形状、精灵和文本组合在一起，你能创建一个简单的场景、故事或漫画。这个例子非常简单，但你可以组合更多的精灵、形状来创建自己想要的复杂、细致的场景。

        ## 画出轮廓

        在开始之前，先花点时间来给下课前要画完的场景画一个轮廓。思考一下以前用过的简单形状，角色精灵，以及想要显示在屏幕上的文本。一旦你勾勒出了创意，你可以学习`text`（文本），以及增氧组合出一个场景。
      CSD U3 Scene Example_2018_2019: |-
        # 精灵场景

        通过将形状、精灵和文本组合在一起，你能创建一个简单的场景、故事或漫画。这个例子非常简单，但你可以组合更多的精灵、形状来创建自己想要的复杂、细致的场景。

        ## 画出轮廓

        在开始之前，先花点时间来给下课前要画完的场景画一个轮廓。思考一下以前用过的简单形状，角色精灵，以及想要显示在屏幕上的文本。一旦你勾勒出了创意，你可以学习`text`（文本），以及增氧组合出一个场景。
      CSD U3 Sprite Movement Left: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif"
        style="float: right; margin-left: 20px">

        # 向左移动

        如果给x坐标加上一个数，会让它往右移动。那么怎样让它向左移动呢？

        # 这样做

        像右边的图片一样，让你的程序有动画。更新画图循环里的`fly.x`，从而让绘制每一帧时x轴都会往右一点。

        _提示：你能通过加减大一点的数让精灵移动得更快一些。在我们例子中的苍蝇的速度大概是上一关中飞机速度的两倍。_
      CSD U3 Sprite Movement Left_2018: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif"
        style="float: right; margin-left: 20px">

        # 向左移动

        如果给x坐标加上一个数，会让它往右移动。那么怎样让它向左移动呢？

        # 这样做

        像右边的图片一样，让你的程序有动画。更新画图循环里的`fly.x`，从而让绘制每一帧时x轴都会往右一点。

        _提示：你能通过加减大一点的数让精灵移动得更快一些。在我们例子中的苍蝇的速度大概是上一关中飞机速度的两倍。_
      CSD U3 Sprite Movement Left_2019: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif"
        style="float: right; margin-left: 20px">

        # 向左移动

        如果给x坐标加上一个数，会让它往右移动。那么怎样让它向左移动呢？

        # 这样做

        像右边的图片一样，让你的程序有动画。更新画图循环里的`fly.x`，从而让绘制每一帧时x轴都会往右一点。

        _提示：你能通过加减大一点的数让精灵移动得更快一些。在我们例子中的苍蝇的速度大概是上一关中飞机速度的两倍。_
      CSD U3 Sprite Movement Right: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif"
        style="float: right; margin-left: 20px">

        # 精灵移动

        通过计数器模式，你能写程序让精灵动画更流畅。增加或减少画图循环里精灵的`x`或`y`属性，能让每次重绘时，它都移动一点。

        # 这样做

        向右边的图片一样，在你的程序里实现动画。我们已经在绘画循环里加了一样来更新`plane.x`，但代码还需要完成。
      CSD U3 Sprite Movement Right_2018: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif"
        style="float: right; margin-left: 20px">

        # 精灵移动

        通过计数器模式，你能写程序让精灵动画更流畅。增加或减少画图循环里精灵的`x`或`y`属性，能让每次重绘时，它都移动一点。

        # 这样做

        向右边的图片一样，在你的程序里实现动画。我们已经在绘画循环里加了一样来更新`plane.x`，但代码还需要完成。
      CSD U3 Sprite Movement Right_2019: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif"
        style="float: right; margin-left: 20px">

        # 精灵移动

        通过计数器模式，你能写程序让精灵动画更流畅。增加或减少画图循环里精灵的`x`或`y`属性，能让每次重绘时，它都移动一点。

        # 这样做

        向右边的图片一样，在你的程序里实现动画。我们已经在绘画循环里加了一样来更新`plane.x`，但代码还需要完成。
      CSD U3 Sprites anitab 1: |-
        # 图像

        通过**动画标签页**，你能看见这里已经为你加上了三个图片。你可以通过点击**动画**按钮来到达显示区域上的动画标签页。

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">

        一旦你创建了一个精灵，你能**用`sprite.setAnimation()`（精灵.设置动画）命令来将精灵从一个矩形改变成一张图片。** 你已经加载的图片都在动画标签页里，显示在`sprite.setAnimation()`的下拉菜单里。这个外星人是个例子。

        # 这样做

        从动画标签页里选择你喜欢的图片来改变精灵。

        -   这里已经为你创建了一个设置好图片的精灵了。
        -   运行代码看看是如何工作的。
        -   改变`setAnimation`（设置动画）命令的输入来改变精灵的外观。
        -   试试所有不同的图片。
      CSD U3 Sprites anitab 1_2018: |-
        # 图像

        通过**动画标签页**，你能看见这里已经为你加上了三个图片。你可以通过点击**动画**按钮来到达显示区域上的动画标签页。

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">

        一旦你创建了一个精灵，你能**用`sprite.setAnimation()`（精灵.设置动画）命令来将精灵从一个矩形改变成一张图片。** 你已经加载的图片都在动画标签页里，显示在`sprite.setAnimation()`的下拉菜单里。这个外星人是个例子。

        # 这样做

        从动画标签页里选择你喜欢的图片来改变精灵。

        -   这里已经为你创建了一个设置好图片的精灵了。
        -   运行代码看看是如何工作的。
        -   改变`setAnimation`（设置动画）命令的输入来改变精灵的外观。
        -   试试所有不同的图片。
      CSD U3 Sprites anitab 1_2019: |-
        # 图像

        通过**动画标签页**，你能看见这里已经为你加上了三个图片。你可以通过点击**动画**按钮来到达显示区域上的动画标签页。

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">

        一旦你创建了一个精灵，你能**用`sprite.setAnimation()`（精灵.设置动画）命令来将精灵从一个矩形改变成一张图片。** 你已经加载的图片都在动画标签页里，显示在`sprite.setAnimation()`的下拉菜单里。这个外星人是个例子。

        # 这样做

        从动画标签页里选择你喜欢的图片来改变精灵。

        -   这里已经为你创建了一个设置好图片的精灵了。
        -   运行代码看看是如何工作的。
        -   改变`setAnimation`（设置动画）命令的输入来改变精灵的外观。
        -   试试所有不同的图片。
      CSD U3 Sprites anitab 2: "# 上传你自己的图片。\n\n你可以用动画标签页来上传或绘制你自己的图片。\n\n# \n\n这样做\n接下来会做一个风筝。你可以在网络上搜索图片，或者自己画一个。\n\n\\*\n下载你的风筝图片，最好是背景是透明的图片。\n\\*\n打开动画标签页。\n\n-
        \  点击<img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\n
        \   PM.png\" style=\"width:50px\"> 然后用<img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\n
        \   PM.png\" style=\"width:50px\"> 上传图片.\n-   从电脑上选择图片文件。\n-   将图片重命名为好记的名字。点击图片下的文本来重命名。\n-
        \  回到代码模式，用`sprite.setAnimation()`来让`kite`精灵展示新的动画。\n\n如果你的风筝图片太大了，别担心。我们会在下一关学会如何解决它。"
      CSD U3 Sprites anitab 2_2018: "# 上传你自己的图片。\n\n你可以用动画标签页来上传或绘制你自己的图片。\n\n# \n\n这样做\n接下来会做一个风筝。你可以在网络上搜索图片，或者自己画一个。\n\n\\*\n下载你的风筝图片，最好是背景是透明的图片。\n\\*\n打开动画标签页。\n\n-
        \  点击<img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\n
        \   PM.png\" style=\"width:50px\"> 然后用<img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\n
        \   PM.png\" style=\"width:50px\"> 上传图片.\n-   从电脑上选择图片文件。\n-   将图片重命名为好记的名字。点击图片下的文本来重命名。\n-
        \  回到代码模式，用`sprite.setAnimation()`来让`kite`精灵展示新的动画。\n\n如果你的风筝图片太大了，别担心。我们会在下一关学会如何解决它。"
      CSD U3 Sprites anitab 2_2019: "# 上传你自己的图片。\n\n你可以用动画标签页来上传或绘制你自己的图片。\n\n# \n\n这样做\n接下来会做一个风筝。你可以在网络上搜索图片，或者自己画一个。\n\n\\*\n下载你的风筝图片，最好是背景是透明的图片。\n\\*\n打开动画标签页。\n\n-
        \  点击<img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\n
        \   PM.png\" style=\"width:50px\"> 然后用<img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\n
        \   PM.png\" style=\"width:50px\"> 上传图片.\n-   从电脑上选择图片文件。\n-   将图片重命名为好记的名字。点击图片下的文本来重命名。\n-
        \  回到代码模式，用`sprite.setAnimation()`来让`kite`精灵展示新的动画。\n\n如果你的风筝图片太大了，别担心。我们会在下一关学会如何解决它。"
      CSD U3 Sprites anitab 3: |-
        # 用缩放调整尺寸

        在工具箱的_精灵_画家里，你能找到一个叫做`sprite.scale`（精灵.缩放）的新模块。
        它能让你改变图片的相对于原始大小的尺寸。
        `sprite.scale = 1`表示原始尺寸。`sprite.scale = 0.5`会让图片变成原先的一半大。`sprite.scale = 2`会让它是两倍大。

        # 这样做

        程序已经包含了你新上传的图片，但很可能尺寸不是_完全正确_的。用`sprite.scale`来改变`kite`精灵的尺寸。

        _暗示：代码的顺序很重要！你需要在创建了精灵**以后**，但在用`drawSprites()`（画精灵）之前增加 `sprite.scale`。为了清楚，试着把所有的精灵代码都放到一起，放到程序的最顶部。_
      CSD U3 Sprites anitab 3_2018: |-
        # 用缩放调整尺寸

        在工具箱的_精灵_画家里，你能找到一个叫做`sprite.scale`（精灵.缩放）的新模块。
        它能让你改变图片的相对于原始大小的尺寸。
        `sprite.scale = 1`表示原始尺寸。`sprite.scale = 0.5`会让图片变成原先的一半大。`sprite.scale = 2`会让它是两倍大。

        # 这样做

        程序已经包含了你新上传的图片，但很可能尺寸不是_完全正确_的。用`sprite.scale`来改变`kite`精灵的尺寸。

        _暗示：代码的顺序很重要！你需要在创建了精灵**以后**，但在用`drawSprites()`（画精灵）之前增加 `sprite.scale`。为了清楚，试着把所有的精灵代码都放到一起，放到程序的最顶部。_
      CSD U3 Sprites anitab 3_2019: |-
        # 用缩放调整尺寸

        在工具箱的_精灵_画家里，你能找到一个叫做`sprite.scale`（精灵.缩放）的新模块。
        它能让你改变图片的相对于原始大小的尺寸。
        `sprite.scale = 1`表示原始尺寸。`sprite.scale = 0.5`会让图片变成原先的一半大。`sprite.scale = 2`会让它是两倍大。

        # 这样做

        程序已经包含了你新上传的图片，但很可能尺寸不是_完全正确_的。用`sprite.scale`来改变`kite`精灵的尺寸。

        _暗示：代码的顺序很重要！你需要在创建了精灵**以后**，但在用`drawSprites()`（画精灵）之前增加 `sprite.scale`。为了清楚，试着把所有的精灵代码都放到一起，放到程序的最顶部。_
      CSD U3 Sprites intro debug: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # 调试

        程序应该已经创建了两个新精灵，一个在屏幕左边，另一个在右边。但是它只画出了一个。**你不需要增加任何代码**，仅通过重新排列代码来让两个精灵都像右边的图片一样显示出来。
      CSD U3 Sprites intro debug_2018: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # 调试

        程序应该已经创建了两个新精灵，一个在屏幕左边，另一个在右边。但是它只画出了一个。**你不需要增加任何代码**，仅通过重新排列代码来让两个精灵都像右边的图片一样显示出来。
      CSD U3 Sprites intro debug_2019: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # 调试

        程序应该已经创建了两个新精灵，一个在屏幕左边，另一个在右边。但是它只画出了一个。**你不需要增加任何代码**，仅通过重新排列代码来让两个精灵都像右边的图片一样显示出来。
      CSD U3 Sprites scene challenge: |-
        # 挑战：扩展你的场景

        _在开始之前，先征询你的老师。_

        现在你已经完成了你的场景，考虑一下增加一些东西，或者创建一个新的。
      CSD U3 Sprites scene challenge_2018: |-
        # 挑战：扩展你的场景

        _在开始之前，先征询你的老师。_

        现在你已经完成了你的场景，考虑一下增加一些东西，或者创建一个新的。
      CSD U3 Sprites scene challenge_2019: |-
        # 挑战：扩展你的场景

        _在开始之前，先征询你的老师。_

        现在你已经完成了你的场景，考虑一下增加一些东西，或者创建一个新的。
      CSD U3 Sprites scene drawing: "# 创建你的场景 - 画图\n\n你将要开始创建一个自己的场景。如果你没做过，花一分钟来构建一个场景的轮廓（考虑使用坐标纸）。一旦对你的场景有了主意和计划，就可以从画背景开始了。\n\n#
        \n\n这样做\n\n-   用一个`background()`（背景）命令来给整个屏幕填满颜色。\n-   \\*\n    用所需要的形状命令来绘制除了精灵外的场景。"
      CSD U3 Sprites scene drawing_2018: "# 创建你的场景 - 画图\n\n你将要开始创建一个自己的场景。如果你没做过，花一分钟来构建一个场景的轮廓（考虑使用坐标纸）。一旦对你的场景有了主意和计划，就可以从画背景开始了。\n\n#
        \n\n这样做\n\n-   用一个`background()`（背景）命令来给整个屏幕填满颜色。\n-   \\*\n    用所需要的形状命令来绘制除了精灵外的场景。"
      CSD U3 Sprites scene drawing_2019: "# 创建你的场景 - 画图\n\n你将要开始创建一个自己的场景。如果你没做过，花一分钟来构建一个场景的轮廓（考虑使用坐标纸）。一旦对你的场景有了主意和计划，就可以从画背景开始了。\n\n#
        \n\n这样做\n\n-   用一个`background()`（背景）命令来给整个屏幕填满颜色。\n-   \\*\n    用所需要的形状命令来绘制除了精灵外的场景。"
      CSD U3 Sprites scene sprites: |-
        # 创建你的场景 - 精灵

        有了背景以后，就该添加你的精灵了。

        # 这样做

        \*
        在动画标签页里添加或创建你的所有精灵图片。

        -   在程序顶部为每个精灵创建一个变量，并用`setAnimation()`（设置动画）来分配你在动画标签页里创建的图片。
        -   在你程序的结尾处调用一次`drawSprites()`（绘制精灵）。

        _提示：你可能会想在程序的最后面调用`drawSprites()`来让精灵出现在背景的上面。但有时，你需要早一些调用`drawSprites()`。让它们在某些形状的上面，而在另一些形状的下面。_
      CSD U3 Sprites scene sprites_2018: |-
        # 创建你的场景 - 精灵

        有了背景以后，就该添加你的精灵了。

        # 这样做

        \*
        在动画标签页里添加或创建你的所有精灵图片。

        -   在程序顶部为每个精灵创建一个变量，并用`setAnimation()`（设置动画）来分配你在动画标签页里创建的图片。
        -   在你程序的结尾处调用一次`drawSprites()`（绘制精灵）。

        _提示：你可能会想在程序的最后面调用`drawSprites()`来让精灵出现在背景的上面。但有时，你需要早一些调用`drawSprites()`。让它们在某些形状的上面，而在另一些形状的下面。_
      CSD U3 Sprites scene sprites_2019: |-
        # 创建你的场景 - 精灵

        有了背景以后，就该添加你的精灵了。

        # 这样做

        \*
        在动画标签页里添加或创建你的所有精灵图片。

        -   在程序顶部为每个精灵创建一个变量，并用`setAnimation()`（设置动画）来分配你在动画标签页里创建的图片。
        -   在你程序的结尾处调用一次`drawSprites()`（绘制精灵）。

        _提示：你可能会想在程序的最后面调用`drawSprites()`来让精灵出现在背景的上面。但有时，你需要早一些调用`drawSprites()`。让它们在某些形状的上面，而在另一些形状的下面。_
      CSD U3 Sprites scene text: |-
        # 创建你的场景 - 文本

        你的场景上最后一件事是添加文本。.

        # 这样做

        -   为每一行文本添加一个`"text"`（文本）命令。
        -   如果需要，可以用`fill()`（填充）
            和`textSize()`（文本大小）来改变文本外观。

        _提示：大部分场景的文本都在所有东西的最上面，这需要把`"text"`（文本）命令放到程序的最后一行。不过，如果你希望文本在其它元素下面，可以考虑改变代码的顺序。_
      CSD U3 Sprites scene text_2018: |-
        # 创建你的场景 - 文本

        你的场景上最后一件事是添加文本。.

        # 这样做

        -   为每一行文本添加一个`"text"`（文本）命令。
        -   如果需要，可以用`fill()`（填充）
            和`textSize()`（文本大小）来改变文本外观。

        _提示：大部分场景的文本都在所有东西的最上面，这需要把`"text"`（文本）命令放到程序的最后一行。不过，如果你希望文本在其它元素下面，可以考虑改变代码的顺序。_
      CSD U3 Sprites scene text_2019: |-
        # 创建你的场景 - 文本

        你的场景上最后一件事是添加文本。.

        # 这样做

        -   为每一行文本添加一个`"text"`（文本）命令。
        -   如果需要，可以用`fill()`（填充）
            和`textSize()`（文本大小）来改变文本外观。

        _提示：大部分场景的文本都在所有东西的最上面，这需要把`"text"`（文本）命令放到程序的最后一行。不过，如果你希望文本在其它元素下面，可以考虑改变代码的顺序。_
      CSD U3 Sprites text: |-
        # 添加文本

        你能用`text`（文本）将文本放到屏幕上的任何位置。改变已有代码里的文本，然后增加另一个`text`标签到屏幕的其它位置。

        _提示：默认文本的字体比较小，可以用`textSize`（文本尺寸）来改变它。也可以用`fill`（填充）来改变文本的颜色。_
      CSD U3 Sprites text debug: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # 调试

        这个场景的代码都有了，但是顺序不对。这个场景应该和右边的图片一样。你能改变模块的顺序，让每场景的每部分都用正确的顺序画出来吗？
      CSD U3 Sprites text debug_2018: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # 调试

        这个场景的代码都有了，但是顺序不对。这个场景应该和右边的图片一样。你能改变模块的顺序，让每场景的每部分都用正确的顺序画出来吗？
      CSD U3 Sprites text debug_2018_2019: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # 调试

        这个场景的代码都有了，但是顺序不对。这个场景应该和右边的图片一样。你能改变模块的顺序，让每场景的每部分都用正确的顺序画出来吗？
      CSD U3 Sprites text_2018: |-
        # 添加文本

        你能用`text`（文本）将文本放到屏幕上的任何位置。改变已有代码里的文本，然后增加另一个`text`标签到屏幕的其它位置。

        _提示：默认文本的字体比较小，可以用`textSize`（文本尺寸）来改变它。也可以用`fill`（填充）来改变文本的颜色。_
      CSD U3 Sprites text_2019: |-
        # 添加文本

        你能用`text`（文本）将文本放到屏幕上的任何位置。改变已有代码里的文本，然后增加另一个`text`标签到屏幕的其它位置。

        _提示：默认文本的字体比较小，可以用`textSize`（文本尺寸）来改变它。也可以用`fill`（填充）来改变文本的颜色。_
      CSD U3 UP_ARROW_2018: |-
        # 移动精灵

        你可以根据按下的键来决定如何改变精灵的位置，同样也能改变它的动画。

        # 这样做

        -   在循环里增加一个`如果`语句。
        -   检查是否右方向键被按下了。
        -   \*
            在条件里添加代码，如果右方向键按下了，就将精灵向右移动。

        _你需要改变精灵的x或y属性来将它向右移动吗？_
      CSD U3 UP_ARROW_2018_2019: |-
        # 移动精灵

        你可以根据按下的键来决定如何改变精灵的位置，同样也能改变它的动画。

        # 这样做

        -   在循环里增加一个`如果`语句。
        -   检查是否右方向键被按下了。
        -   \*
            在条件里添加代码，如果右方向键按下了，就将精灵向右移动。

        _你需要改变精灵的x或y属性来将它向右移动吗？_
      CSD U3 Variables Challenge: |-
        # 挑战：更新变量

        _开始这个挑战前，先问问你的老师。_

        目前为止，我们仅仅给一个变量赋了一次值，但你知道变量能在程序执行中更新吗？通读一下提供的程序，运行它几次来理解一下它是如何工作的，然后试着改变程序来画下面的某幅图。

        <img
        src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png"
        style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png"
        style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png"
        style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Challenge_2018: |-
        # 挑战：更新变量

        _开始这个挑战前，先问问你的老师。_

        目前为止，我们仅仅给一个变量赋了一次值，但你知道变量能在程序执行中更新吗？通读一下提供的程序，运行它几次来理解一下它是如何工作的，然后试着改变程序来画下面的某幅图。

        <img
        src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png"
        style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png"
        style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png"
        style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Challenge_2019: |-
        # 挑战：更新变量

        _开始这个挑战前，先问问你的老师。_

        目前为止，我们仅仅给一个变量赋了一次值，但你知道变量能在程序执行中更新吗？通读一下提供的程序，运行它几次来理解一下它是如何工作的，然后试着改变程序来画下面的某幅图。

        <img
        src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png"
        style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png"
        style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png"
        style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Draw Challenge: |-
        # 挑战：画一个图像

        _开始这个挑战前，先问问你的老师。_

        用变量来存放一个会在多个条目上使用的尺寸或位置。例如，画一张脸时，控制眼睛、耳朵、和鼻孔的尺寸和位置的变量。画完后，可以试着改变这些变量的值来让整个图片一起变化。
      CSD U3 Variables Draw Challenge_2018: |-
        # 挑战：画一个图像

        _开始这个挑战前，先问问你的老师。_

        用变量来存放一个会在多个条目上使用的尺寸或位置。例如，画一张脸时，控制眼睛、耳朵、和鼻孔的尺寸和位置的变量。画完后，可以试着改变这些变量的值来让整个图片一起变化。
      CSD U3 Variables Draw Challenge_2019: |-
        # 挑战：画一个图像

        _开始这个挑战前，先问问你的老师。_

        用变量来存放一个会在多个条目上使用的尺寸或位置。例如，画一张脸时，控制眼睛、耳朵、和鼻孔的尺寸和位置的变量。画完后，可以试着改变这些变量的值来让整个图片一起变化。
      CSD U3 Variables Draw Poppy: |-
        # 多次使用一个变量

        这个程序只有一个叫做`petalSize`（花瓣尺寸）的变量，但它被使用了8次。这回让画图时的很多变化都更容易。

        # 这样做

        -   改变赋给`petalSize`的值，让红色花瓣能够相互接触。
        -   找到最合理的尺寸。和你周围的人比较一下。
      CSD U3 Variables Draw Poppy_2018: |-
        # 多次使用一个变量

        这个程序只有一个叫做`petalSize`（花瓣尺寸）的变量，但它被使用了8次。这回让画图时的很多变化都更容易。

        # 这样做

        -   改变赋给`petalSize`的值，让红色花瓣能够相互接触。
        -   找到最合理的尺寸。和你周围的人比较一下。
      CSD U3 Variables Draw Poppy_2019: |-
        # 多次使用一个变量

        这个程序只有一个叫做`petalSize`（花瓣尺寸）的变量，但它被使用了8次。这回让画图时的很多变化都更容易。

        # 这样做

        -   改变赋给`petalSize`的值，让红色花瓣能够相互接触。
        -   找到最合理的尺寸。和你周围的人比较一下。
      CSD U3 Variables Predict Where X: |-
        # 使用变量

        程序中的`xPosition`被用来存储圆圈的x坐标。

        # 这样做

        -   运行程序看看它如何运行的。
        -   改动变量里的数字([显示在哪里](#triggercallout=code_triggered)) 并再运行一下。
      CSD U3 Variables Predict Where X_2018: |-
        # 使用变量

        程序中的`xPosition`被用来存储圆圈的x坐标。

        # 这样做

        -   运行程序看看它如何运行的。
        -   改动变量里的数字([显示在哪里](#triggercallout=code_triggered)) 并再运行一下。
      CSD U3 Variables Predict Where X_2019: |-
        # 使用变量

        程序中的`xPosition`被用来存储圆圈的x坐标。

        # 这样做

        -   运行程序看看它如何运行的。
        -   改动变量里的数字([显示在哪里](#triggercallout=code_triggered)) 并再运行一下。
      CSD U3 Variables change circle size: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01
        AM.png" style="float:right; height:150px">

        # 调试：使用变量

        这个程序使用了`circleSize`（圆圈尺寸）变量来控制一个园的宽和高。如果让圆圈足够大，它就会像右边的图片一样填满整个屏幕。

        # 这样做

        -   改变赋给`circleSize`的值，让圆圈覆盖整个屏幕。
      CSD U3 Variables change circle size_2018: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01
        AM.png" style="float:right; height:150px">

        # 调试：使用变量

        这个程序使用了`circleSize`（圆圈尺寸）变量来控制一个园的宽和高。如果让圆圈足够大，它就会像右边的图片一样填满整个屏幕。

        # 这样做

        -   改变赋给`circleSize`的值，让圆圈覆盖整个屏幕。
      CSD U3 Variables change circle size_2019: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01
        AM.png" style="float:right; height:150px">

        # 调试：使用变量

        这个程序使用了`circleSize`（圆圈尺寸）变量来控制一个园的宽和高。如果让圆圈足够大，它就会像右边的图片一样填满整个屏幕。

        # 这样做

        -   改变赋给`circleSize`的值，让圆圈覆盖整个屏幕。
      CSD U3 Variables naming rules v2: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # 调试：命名变量

        程序因为错误的标签名字而有好几个错误。这些错误造成程序不能在模块模式下查看，因此代码在文本模式下。

        # 这样做

        -   找到每个变量标签违反的规则。
        -   **根据在上一关学到的规则来选择新的名称，从而纠正错误。**
        -   如果程序修好了，它能画出右边的图像。

        <summary><em>提示：点击箭头来快速浏览规则。</em><details><ul>
        <li>标签不能有空格。</li>
        <li>标签不能以数字开始。</li>
        <li>大小写和拼写必须完全一致。</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # 调试：命名变量

        程序因为错误的标签名字而有好几个错误。这些错误造成程序不能在模块模式下查看，因此代码在文本模式下。

        # 这样做

        -   找到每个变量标签违反的规则。
        -   **根据在上一关学到的规则来选择新的名称，从而纠正错误。**
        -   如果程序修好了，它能画出右边的图像。

        <summary><em>提示：点击箭头来快速浏览规则。</em><details><ul>
        <li>标签不能有空格。</li>
        <li>标签不能以数字开始。</li>
        <li>大小写和拼写必须完全一致。</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018_2019: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # 调试：命名变量

        程序因为错误的标签名字而有好几个错误。这些错误造成程序不能在模块模式下查看，因此代码在文本模式下。

        # 这样做

        -   找到每个变量标签违反的规则。
        -   **根据在上一关学到的规则来选择新的名称，从而纠正错误。**
        -   如果程序修好了，它能画出右边的图像。

        <summary><em>提示：点击箭头来快速浏览规则。</em><details><ul>
        <li>标签不能有空格。</li>
        <li>标签不能以数字开始。</li>
        <li>大小写和拼写必须完全一致。</li>
        </ul></details></summary>
      CSD U3 Variables random with assignment: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\n\n#
        调试：变量和随机数\n\n随机数也能赋给变量。这样，你能保存一个随机值，并在程序中多次使用。\n\n# \n\n这样做\n\n`eyeSize`（眼睛尺寸）被分派了一个随机数。不幸的是，只有一只眼睛用了它。\n\n-
        \  **运行程序**来看看它是如何工作的。\n-   **改动程序**来让两只眼睛都是同样的随机尺寸。提示：你只需要改动一行代码即可。"
      CSD U3 Variables random with assignment_2018: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\n\n#
        调试：变量和随机数\n\n随机数也能赋给变量。这样，你能保存一个随机值，并在程序中多次使用。\n\n# \n\n这样做\n\n`eyeSize`（眼睛尺寸）被分派了一个随机数。不幸的是，只有一只眼睛用了它。\n\n-
        \  **运行程序**来看看它是如何工作的。\n-   **改动程序**来让两只眼睛都是同样的随机尺寸。提示：你只需要改动一行代码即可。"
      CSD U3 Variables random with assignment_2019: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\n\n#
        调试：变量和随机数\n\n随机数也能赋给变量。这样，你能保存一个随机值，并在程序中多次使用。\n\n# \n\n这样做\n\n`eyeSize`（眼睛尺寸）被分派了一个随机数。不幸的是，只有一只眼睛用了它。\n\n-
        \  **运行程序**来看看它是如何工作的。\n-   **改动程序**来让两只眼睛都是同样的随机尺寸。提示：你只需要改动一行代码即可。"
      CSD U3 Watcher Debug: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif"
        style="float: right; margin-left: 20px;">

        # 调试：观察计数器模式。

        让我们练习使用观察器来调试代码。程序应该像右边的图片一样，将摩托车从左下角挪到右上角。不幸的是，摩托车移动得太快，而看不出哪里有问题。

        使用提供的`cycle.x`和`cycle.y`的观察器，确认哪一个方向的移动错了，并修复程序。
      CSD U3 Watcher Debug_2018: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif"
        style="float: right; margin-left: 20px;">

        # 调试：观察计数器模式。

        让我们练习使用观察器来调试代码。程序应该像右边的图片一样，将摩托车从左下角挪到右上角。不幸的是，摩托车移动得太快，而看不出哪里有问题。

        使用提供的`cycle.x`和`cycle.y`的观察器，确认哪一个方向的移动错了，并修复程序。
      CSD U3 Watcher Debug_2019: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif"
        style="float: right; margin-left: 20px;">

        # 调试：观察计数器模式。

        让我们练习使用观察器来调试代码。程序应该像右边的图片一样，将摩托车从左下角挪到右上角。不幸的是，摩托车移动得太快，而看不出哪里有问题。

        使用提供的`cycle.x`和`cycle.y`的观察器，确认哪一个方向的移动错了，并修复程序。
      CSD U3 abstraction accelerateX: "# 速度和计数器模式\n\n正如你刚刚看到的，将计数器模式用到`sprite.velocityX`属性上，会在程序中改变精灵的速度。这会让精灵加速。自己练习一下这个模式吧。\n\n#
        \n\n这样做\n\n这个程序已经让汽车穿越屏幕了，但是非常慢。\n\n-   用计数器模式来改变精灵的velocityX属性，来让汽车加速。 (
        [显示在哪里](#triggercallout=code_triggered)\n    )"
      CSD U3 abstraction accelerateX_2018: "# 速度和计数器模式\n\n正如你刚刚看到的，将计数器模式用到`sprite.velocityX`属性上，会在程序中改变精灵的速度。这会让精灵加速。自己练习一下这个模式吧。\n\n#
        \n\n这样做\n\n这个程序已经让汽车穿越屏幕了，但是非常慢。\n\n-   用计数器模式来改变精灵的velocityX属性，来让汽车加速。 (
        [显示在哪里](#triggercallout=code_triggered)\n    )"
      CSD U3 abstraction accelerateX_2019: "# 速度和计数器模式\n\n正如你刚刚看到的，将计数器模式用到`sprite.velocityX`属性上，会在程序中改变精灵的速度。这会让精灵加速。自己练习一下这个模式吧。\n\n#
        \n\n这样做\n\n这个程序已经让汽车穿越屏幕了，但是非常慢。\n\n-   用计数器模式来改变精灵的velocityX属性，来让汽车加速。 (
        [显示在哪里](#triggercallout=code_triggered)\n    )"
      CSD U3 abstraction add coin: "# 添加硬币\n\n在下面几关中，会丰富你的程序，来实现一个简单的游戏。在游戏里，玩家要收集点数来增加分数。这是一个好机会来看看不同的移动如何影响游戏的体验的，这回也能帮你练习编程技巧。\n\n#
        \n\n这样做\n\n这一关中，你只需要增加一个硬币精灵。确保给它一个类似于**硬币**的描述名称。你需要在程序最上面，循环的外面添加。\n\n\\*\n用`createSprite()`（创建精灵）模块来创建一个新的精灵。确保给了它一个类似于**硬币**的描述。\n\n-
        \  用精灵的`sprite.x`和`sprite.y`属性来给它一个随机的0到400之间的X和Y位置。\n-   在动画标签页中，已经有了硬币动画。用`sprite.setAnimation()`模块来给精灵添加这个动画。\n\n在继续前，先测试你的代码。当运行程序时，你会看到一个硬币精灵随机的出现在屏幕的某个位置。"
      CSD U3 abstraction add coin_2018: "# 添加硬币\n\n在下面几关中，会丰富你的程序，来实现一个简单的游戏。在游戏里，玩家要收集点数来增加分数。这是一个好机会来看看不同的移动如何影响游戏的体验的，这回也能帮你练习编程技巧。\n\n#
        \n\n这样做\n\n这一关中，你只需要增加一个硬币精灵。确保给它一个类似于**硬币**的描述名称。你需要在程序最上面，循环的外面添加。\n\n\\*\n用`createSprite()`（创建精灵）模块来创建一个新的精灵。确保给了它一个类似于**硬币**的描述。\n\n-
        \  用精灵的`sprite.x`和`sprite.y`属性来给它一个随机的0到400之间的X和Y位置。\n-   在动画标签页中，已经有了硬币动画。用`sprite.setAnimation()`模块来给精灵添加这个动画。\n\n在继续前，先测试你的代码。当运行程序时，你会看到一个硬币精灵随机的出现在屏幕的某个位置。"
      CSD U3 abstraction add coin_2019: "# 添加硬币\n\n在下面几关中，会丰富你的程序，来实现一个简单的游戏。在游戏里，玩家要收集点数来增加分数。这是一个好机会来看看不同的移动如何影响游戏的体验的，这回也能帮你练习编程技巧。\n\n#
        \n\n这样做\n\n这一关中，你只需要增加一个硬币精灵。确保给它一个类似于**硬币**的描述名称。你需要在程序最上面，循环的外面添加。\n\n\\*\n用`createSprite()`（创建精灵）模块来创建一个新的精灵。确保给了它一个类似于**硬币**的描述。\n\n-
        \  用精灵的`sprite.x`和`sprite.y`属性来给它一个随机的0到400之间的X和Y位置。\n-   在动画标签页中，已经有了硬币动画。用`sprite.setAnimation()`模块来给精灵添加这个动画。\n\n在继续前，先测试你的代码。当运行程序时，你会看到一个硬币精灵随机的出现在屏幕的某个位置。"
      CSD U3 abstraction decelerateX: "# 放慢速度\n\n现在，你已经练习过了如何加速，你能用计数器模式来给精灵减速吗？\n\n#
        这样做\n\n汽车要开到水里了！你需要用计数器模式来给它减速。\n\n-   当汽车穿过屏幕时，用`sprite.velocityX`模块和计数器模式来给汽车每次减速0.25。
        \ \n-   \\*\n    和伙伴讨论一下：当汽车最终停下来时，会发生什么？\n\n    _挑战：添加代码让汽车只在velocityX大于零时才给它减速。_"
      CSD U3 abstraction decelerateX_2018: "# 放慢速度\n\n现在，你已经练习过了如何加速，你能用计数器模式来给精灵减速吗？\n\n#
        这样做\n\n汽车要开到水里了！你需要用计数器模式来给它减速。\n\n-   当汽车穿过屏幕时，用`sprite.velocityX`模块和计数器模式来给汽车每次减速0.25。
        \ \n-   \\*\n    和伙伴讨论一下：当汽车最终停下来时，会发生什么？\n\n    _挑战：添加代码让汽车只在velocityX大于零时才给它减速。_"
      CSD U3 abstraction decelerateX_2019: "# 放慢速度\n\n现在，你已经练习过了如何加速，你能用计数器模式来给精灵减速吗？\n\n#
        这样做\n\n汽车要开到水里了！你需要用计数器模式来给它减速。\n\n-   当汽车穿过屏幕时，用`sprite.velocityX`模块和计数器模式来给汽车每次减速0.25。
        \ \n-   \\*\n    和伙伴讨论一下：当汽车最终停下来时，会发生什么？\n\n    _挑战：添加代码让汽车只在velocityX大于零时才给它减速。_"
      CSD U3 abstraction jump_2018: |-
        # 跳跃

        现在你有了所有让精灵跳跃的模块了！如果精灵在地面上，并且用户点击了"上"键，精灵就应该跳起来，然后当它到达顶上之后，再让它掉下来。

        # 做这些

        \*
        用`if`（如果）语句来检查精灵是否在地面上，并在`if`语句里检查是否用户按下了"上"方向键。( [显示在哪里](#triggercallout=code_triggered1) )
        \\t\*
        当用户点击了方向键，让青蛙跳起来。
        \\t\* 否则让青蛙停止移动。

        -   增加代码做以下事情( [Show
            me where](#triggercallout=code_triggered2) )
            -   检查青蛙精灵是否到达了它的最高点。
            -   如果是，让精灵下来。
      CSD U3 abstraction jump_2018_2019: |-
        # 跳跃

        现在你有了所有让精灵跳跃的模块了！如果精灵在地面上，并且用户点击了"上"键，精灵就应该跳起来，然后当它到达顶上之后，再让它掉下来。

        # 做这些

        \*
        用`if`（如果）语句来检查精灵是否在地面上，并在`if`语句里检查是否用户按下了"上"方向键。( [显示在哪里](#triggercallout=code_triggered1) )
        \\t\*
        当用户点击了方向键，让青蛙跳起来。
        \\t\* 否则让青蛙停止移动。

        -   增加代码做以下事情( [Show
            me where](#triggercallout=code_triggered2) )
            -   检查青蛙精灵是否到达了它的最高点。
            -   如果是，让精灵下来。
      CSD U3 abstraction left right counter: "# 向右浮动\n\n现在，你能用精灵的Y轴速度上使用个计数器模式来模拟重力和跳跃。如果你在x轴速度上使用计数器模式，也能让精灵从一边浮动到另一边。\n\n#
        \n\n这样做\n\n在这一关中，你需要在右方向键按下时，让精灵向右浮动。\n\n-   在已经创建的\"上\"方向键下的循环里增加一个`如果`语句。\n-
        \  用`keyDown`模块来让`如果`语句在\"右\"方向键按下时进行响应。\n-   在`如果`模块中对`sprite.velocityX`使用计数器模式来为精灵的X轴速度增加0.1。\n\n运行你的代码看看它是否正常工作。当你按下右方向键，精灵应该开始向右浮动。按下\"上\"时还能跳跃。在下一关中，你要实现向左方向键的功能。"
      CSD U3 abstraction left right counter 2: "# 向左浮动\n\n在上衣管理，你了解了如何让精灵向右浮动的细节。这次，你需要自己让精灵往左浮动。你应该能自如的一起应用速度和计数器模式了。如果有困难，和同伴讨论或查看前面的关卡。\n\n#
        \n\n这样做\n\n-   在循环里增加代码，来让\"左\"方向键按下时，让精灵向左移动。\n-   确保一起应用了速度和计数器模式。\n\n一旦代码起作用了，就和伙伴分享一下你写的代码。你的精灵好控制吗？你增加或减少的计数器模式的值的大小，会如何影响游戏的体验？让玩家像这样移动的什么样的游戏会很有趣？"
      CSD U3 abstraction left right counter 2_2018: "# 向左浮动\n\n在上衣管理，你了解了如何让精灵向右浮动的细节。这次，你需要自己让精灵往左浮动。你应该能自如的一起应用速度和计数器模式了。如果有困难，和同伴讨论或查看前面的关卡。\n\n#
        \n\n这样做\n\n-   在循环里增加代码，来让\"左\"方向键按下时，让精灵向左移动。\n-   确保一起应用了速度和计数器模式。\n\n一旦代码起作用了，就和伙伴分享一下你写的代码。你的精灵好控制吗？你增加或减少的计数器模式的值的大小，会如何影响游戏的体验？让玩家像这样移动的什么样的游戏会很有趣？"
      CSD U3 abstraction left right counter 2_2019: "# 向左浮动\n\n在上衣管理，你了解了如何让精灵向右浮动的细节。这次，你需要自己让精灵往左浮动。你应该能自如的一起应用速度和计数器模式了。如果有困难，和同伴讨论或查看前面的关卡。\n\n#
        \n\n这样做\n\n-   在循环里增加代码，来让\"左\"方向键按下时，让精灵向左移动。\n-   确保一起应用了速度和计数器模式。\n\n一旦代码起作用了，就和伙伴分享一下你写的代码。你的精灵好控制吗？你增加或减少的计数器模式的值的大小，会如何影响游戏的体验？让玩家像这样移动的什么样的游戏会很有趣？"
      CSD U3 abstraction left right counter_2018: "# 向右浮动\n\n现在，你能用精灵的Y轴速度上使用个计数器模式来模拟重力和跳跃。如果你在x轴速度上使用计数器模式，也能让精灵从一边浮动到另一边。\n\n#
        \n\n这样做\n\n在这一关中，你需要在右方向键按下时，让精灵向右浮动。\n\n-   在已经创建的\"上\"方向键下的循环里增加一个`如果`语句。\n-
        \  用`keyDown`模块来让`如果`语句在\"右\"方向键按下时进行响应。\n-   在`如果`模块中对`sprite.velocityX`使用计数器模式来为精灵的X轴速度增加0.1。\n\n运行你的代码看看它是否正常工作。当你按下右方向键，精灵应该开始向右浮动。按下\"上\"时还能跳跃。在下一关中，你要实现向左方向键的功能。"
      CSD U3 abstraction left right counter_2019: "# 向右浮动\n\n现在，你能用精灵的Y轴速度上使用个计数器模式来模拟重力和跳跃。如果你在x轴速度上使用计数器模式，也能让精灵从一边浮动到另一边。\n\n#
        \n\n这样做\n\n在这一关中，你需要在右方向键按下时，让精灵向右浮动。\n\n-   在已经创建的\"上\"方向键下的循环里增加一个`如果`语句。\n-
        \  用`keyDown`模块来让`如果`语句在\"右\"方向键按下时进行响应。\n-   在`如果`模块中对`sprite.velocityX`使用计数器模式来为精灵的X轴速度增加0.1。\n\n运行你的代码看看它是否正常工作。当你按下右方向键，精灵应该开始向右浮动。按下\"上\"时还能跳跃。在下一关中，你要实现向左方向键的功能。"
      CSD U3 abstraction looping: |-
        # 循环

        如果青蛙能够多次跳跃，程序会更有意思。你可以在蘑菇"循环"中，检查是否它移动到了左边缘，如果是的话，就将它移动回右边缘。

        # 这样做

        -   找到检查蘑菇是否通过了左边缘的`如果`语句。 ( [看看在哪里](#triggercallout=code_triggered1) )
        -   如果是的话，用`sprite.x` 模块来将蘑菇的位置设置为右边缘。
      CSD U3 abstraction looping_2018: |-
        # 循环

        如果青蛙能够多次跳跃，程序会更有意思。你可以在蘑菇"循环"中，检查是否它移动到了左边缘，如果是的话，就将它移动回右边缘。

        # 这样做

        -   找到检查蘑菇是否通过了左边缘的`如果`语句。 ( [看看在哪里](#triggercallout=code_triggered1) )
        -   如果是的话，用`sprite.x` 模块来将蘑菇的位置设置为右边缘。
      CSD U3 abstraction looping_2019: |-
        # 循环

        如果青蛙能够多次跳跃，程序会更有意思。你可以在蘑菇"循环"中，检查是否它移动到了左边缘，如果是的话，就将它移动回右边缘。

        # 这样做

        -   找到检查蘑菇是否通过了左边缘的`如果`语句。 ( [看看在哪里](#triggercallout=code_triggered1) )
        -   如果是的话，用`sprite.x` 模块来将蘑菇的位置设置为右边缘。
      CSD U3 abstraction make it your own: |-
        # 自己试试

        现在你的游戏已经有了基本功能了，是时候自己试试了。你想让游戏如何变化？角色需要在每次收集到硬币时得分吗？你能增加一个像上一课中的记分板吗？你想要制作另一个硬币吗？是否可以增加"坏硬币"来扣分？

        # 这样做

        至少对游戏进行一项改进。准备好分享你的改进，并和同学一起提高它。
      CSD U3 abstraction make it your own_2018: |-
        # 自己试试

        现在你的游戏已经有了基本功能了，是时候自己试试了。你想让游戏如何变化？角色需要在每次收集到硬币时得分吗？你能增加一个像上一课中的记分板吗？你想要制作另一个硬币吗？是否可以增加"坏硬币"来扣分？

        # 这样做

        至少对游戏进行一项改进。准备好分享你的改进，并和同学一起提高它。
      CSD U3 abstraction make it your own_2019: |-
        # 自己试试

        现在你的游戏已经有了基本功能了，是时候自己试试了。你想让游戏如何变化？角色需要在每次收集到硬币时得分吗？你能增加一个像上一课中的记分板吗？你想要制作另一个硬币吗？是否可以增加"坏硬币"来扣分？

        # 这样做

        至少对游戏进行一项改进。准备好分享你的改进，并和同学一起提高它。
      CSD U3 abstraction rotation control: |-
        # 控制速度

        你在循环外面用过了`rotatationSpeed`来让精灵能在游戏开始时旋转。你还能在循环**里面**用`rotationSpeed`来改变精灵的速度。例如，当用户按下空格键时，精灵会开始旋转，直到最后停止。

        # 这样做

        \*
        看看循环里用来检查是否空格键被按下的`如果`语句。 ( [显示在哪里](#triggercallout=code_triggered1) )
        \*
        使用`rotationSpeed`模块来让彩色轮子在按下空格键时旋转。
      CSD U3 abstraction rotation control_2018: |-
        # 控制速度

        你在循环外面用过了`rotatationSpeed`来让精灵能在游戏开始时旋转。你还能在循环**里面**用`rotationSpeed`来改变精灵的速度。例如，当用户按下空格键时，精灵会开始旋转，直到最后停止。

        # 这样做

        \*
        看看循环里用来检查是否空格键被按下的`如果`语句。 ( [显示在哪里](#triggercallout=code_triggered1) )
        \*
        使用`rotationSpeed`模块来让彩色轮子在按下空格键时旋转。
      CSD U3 abstraction rotation control_2019: |-
        # 控制速度

        你在循环外面用过了`rotatationSpeed`来让精灵能在游戏开始时旋转。你还能在循环**里面**用`rotationSpeed`来改变精灵的速度。例如，当用户按下空格键时，精灵会开始旋转，直到最后停止。

        # 这样做

        \*
        看看循环里用来检查是否空格键被按下的`如果`语句。 ( [显示在哪里](#triggercallout=code_triggered1) )
        \*
        使用`rotationSpeed`模块来让彩色轮子在按下空格键时旋转。
      CSD U3 abstraction velocityX control: |-
        # 多个控制

        正如你在上一关看到的，你可以用多个`如果`语句来控制精灵的速度。在这个程序里，鱼有三种不同的运动，每种都需要单独的`如果`语句来控制。

        # 这样做

        -   看看循环里的三个`如果`语句。

        -   在每个`如果`语句里用一个`sprite.velocityX`模块来实现下面三个运动：

        -   如果用户按下右方向键，让鱼向右移动。

        -   如果鱼到达了屏幕的最右边，让它向左移动。

        -   如果 鱼到达了屏幕左边，让鱼停下来。
      CSD U3 abstraction velocityX control_2018: |-
        # 多个控制

        正如你在上一关看到的，你可以用多个`如果`语句来控制精灵的速度。在这个程序里，鱼有三种不同的运动，每种都需要单独的`如果`语句来控制。

        # 这样做

        -   看看循环里的三个`如果`语句。

        -   在每个`如果`语句里用一个`sprite.velocityX`模块来实现下面三个运动：

        -   如果用户按下右方向键，让鱼向右移动。

        -   如果鱼到达了屏幕的最右边，让它向左移动。

        -   如果 鱼到达了屏幕左边，让鱼停下来。
      CSD U3 abstraction velocityX control_2019: |-
        # 多个控制

        正如你在上一关看到的，你可以用多个`如果`语句来控制精灵的速度。在这个程序里，鱼有三种不同的运动，每种都需要单独的`如果`语句来控制。

        # 这样做

        -   看看循环里的三个`如果`语句。

        -   在每个`如果`语句里用一个`sprite.velocityX`模块来实现下面三个运动：

        -   如果用户按下右方向键，让鱼向右移动。

        -   如果鱼到达了屏幕的最右边，让它向左移动。

        -   如果 鱼到达了屏幕左边，让鱼停下来。
      CSD U3 abstraction velocityY control: |-
        # 控制

        速度

        你放在循环之前的代码决定了游戏的初始状态。放在循环之中的代码则用于处理游戏的运行。在这个游戏中，直升机从屏幕的底部启动，当有人按下空格键时，它就会飞起来。

        # 这样做

        -   将`如果` 语句放在循环里来检测是否有人按了空格键。
        -   用 `velocityY`模块让直升机会在有人按空格键时飞起来。无论空格键有没有被按下，直升机应当一直向前移动。
      CSD U3 abstraction velocityY control_2018: |-
        # 控制

        速度

        你放在循环之前的代码决定了游戏的初始状态。放在循环之中的代码则用于处理游戏的运行。在这个游戏中，直升机从屏幕的底部启动，当有人按下空格键时，它就会飞起来。

        # 这样做

        -   将`如果` 语句放在循环里来检测是否有人按了空格键。
        -   用 `velocityY`模块让直升机会在有人按空格键时飞起来。无论空格键有没有被按下，直升机应当一直向前移动。
      CSD U3 abstraction velocityY control_2019: |-
        # 控制

        速度

        你放在循环之前的代码决定了游戏的初始状态。放在循环之中的代码则用于处理游戏的运行。在这个游戏中，直升机从屏幕的底部启动，当有人按下空格键时，它就会飞起来。

        # 这样做

        -   将`如果` 语句放在循环里来检测是否有人按了空格键。
        -   用 `velocityY`模块让直升机会在有人按空格键时飞起来。无论空格键有没有被按下，直升机应当一直向前移动。
      CSD U3 challenge face: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # 挑战：脸

        _在开始任何挑战前，先问问你的老师。_

        写一个程序，用 `rect`（矩形），`ellipse`（椭圆），和`fill`（填充）来创建像右边一样的脸。使用的颜色有："lightblue"（淡蓝色），"red"（红色）和"lightgreen"（淡绿色）
        完成后，可以添加自己的想法到图像里。
      CSD U3 challenge face_2018: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # 挑战：脸

        _在开始任何挑战前，先问问你的老师。_

        写一个程序，用 `rect`（矩形），`ellipse`（椭圆），和`fill`（填充）来创建像右边一样的脸。使用的颜色有："lightblue"（淡蓝色），"red"（红色）和"lightgreen"（淡绿色）
        完成后，可以添加自己的想法到图像里。
      CSD U3 challenge face_2019: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # 挑战：脸

        _在开始任何挑战前，先问问你的老师。_

        写一个程序，用 `rect`（矩形），`ellipse`（椭圆），和`fill`（填充）来创建像右边一样的脸。使用的颜色有："lightblue"（淡蓝色），"red"（红色）和"lightgreen"（淡绿色）
        完成后，可以添加自己的想法到图像里。
      CSD U3 challenge new shape: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\n\n# \n\n挑战：形状组成的形状\n\n_在开始任何挑战前，先问问你的老师。_\n\n你能只用`rect`
        （矩形）和`ellipse`（椭圆）命令创建一个新形状吗？例如，用圆圈组成的三角形？"
      CSD U3 challenge new shape_2018: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\n\n# \n\n挑战：形状组成的形状\n\n_在开始任何挑战前，先问问你的老师。_\n\n你能只用`rect`
        （矩形）和`ellipse`（椭圆）命令创建一个新形状吗？例如，用圆圈组成的三角形？"
      CSD U3 challenge new shape_2019: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\n\n# \n\n挑战：形状组成的形状\n\n_在开始任何挑战前，先问问你的老师。_\n\n你能只用`rect`
        （矩形）和`ellipse`（椭圆）命令创建一个新形状吗？例如，用圆圈组成的三角形？"
      CSD U3 collisions debug: |-
        # 调试

        有时，精灵的行为会和预计的不一样。这里有一个特殊的`sprite.debug`（精灵.调试）能帮助你更好的理解精灵的交互行为。

        # 这样做

        这里有两个硬币，虽然你期望他们会以某种形式弹跳。有时却会发生奇怪的事情！

        \*
        运行代码，并看看硬币交互的方式。

        -   使用`sprite.debug`模块，给两个精灵的调试都设置为'true'然后再运行代码。
        -   \*
            将金币的开始x位置改为51，并再运行代码。
        -   \*
            和伙伴讨论：为什么你认为金币会奇怪的弹跳？
      CSD U3 collisions debug isTouching: |-
        # 调试碰撞

        气球在大头钉碰到前，就会爆炸。当精灵的动作和你想的不一样时，可以用`调试`模块来获得更多关于精灵行为为什么不对的原因。你能找到下面代码哪里错了吗？

        # 这样做

        -   运行代码，并用方向键来移动大头钉让气球爆炸。

        -   在下面的代码中将`balloon.debug = false`改成`balloon.debug = true`.

        -   增加一个`debug`模块到代码中，并设置大头钉的debug（调试）属性为`true`。

        -   \*
            再运行代码，和你的伙伴讨论一下，为什么气球会爆炸得太早。

            _挑战：你能用动画标签页来调整气球图片的大小，让它在正确的时间爆炸吗？_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug isTouching_2018: |-
        # 调试碰撞

        气球在大头钉碰到前，就会爆炸。当精灵的动作和你想的不一样时，可以用`调试`模块来获得更多关于精灵行为为什么不对的原因。你能找到下面代码哪里错了吗？

        # 这样做

        -   运行代码，并用方向键来移动大头钉让气球爆炸。

        -   在下面的代码中将`balloon.debug = false`改成`balloon.debug = true`.

        -   增加一个`debug`模块到代码中，并设置大头钉的debug（调试）属性为`true`。

        -   \*
            再运行代码，和你的伙伴讨论一下，为什么气球会爆炸得太早。

            _挑战：你能用动画标签页来调整气球图片的大小，让它在正确的时间爆炸吗？_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug isTouching_2019: |-
        # 调试碰撞

        气球在大头钉碰到前，就会爆炸。当精灵的动作和你想的不一样时，可以用`调试`模块来获得更多关于精灵行为为什么不对的原因。你能找到下面代码哪里错了吗？

        # 这样做

        -   运行代码，并用方向键来移动大头钉让气球爆炸。

        -   在下面的代码中将`balloon.debug = false`改成`balloon.debug = true`.

        -   增加一个`debug`模块到代码中，并设置大头钉的debug（调试）属性为`true`。

        -   \*
            再运行代码，和你的伙伴讨论一下，为什么气球会爆炸得太早。

            _挑战：你能用动画标签页来调整气球图片的大小，让它在正确的时间爆炸吗？_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug_2018: |-
        # 调试

        有时，精灵的行为会和预计的不一样。这里有一个特殊的`sprite.debug`（精灵.调试）能帮助你更好的理解精灵的交互行为。

        # 这样做

        这里有两个硬币，虽然你期望他们会以某种形式弹跳。有时却会发生奇怪的事情！

        \*
        运行代码，并看看硬币交互的方式。

        -   使用`sprite.debug`模块，给两个精灵的调试都设置为'true'然后再运行代码。
        -   \*
            将金币的开始x位置改为51，并再运行代码。
        -   \*
            和伙伴讨论：为什么你认为金币会奇怪的弹跳？
      CSD U3 collisions debug_2019: |-
        # 调试

        有时，精灵的行为会和预计的不一样。这里有一个特殊的`sprite.debug`（精灵.调试）能帮助你更好的理解精灵的交互行为。

        # 这样做

        这里有两个硬币，虽然你期望他们会以某种形式弹跳。有时却会发生奇怪的事情！

        \*
        运行代码，并看看硬币交互的方式。

        -   使用`sprite.debug`模块，给两个精灵的调试都设置为'true'然后再运行代码。
        -   \*
            将金币的开始x位置改为51，并再运行代码。
        -   \*
            和伙伴讨论：为什么你认为金币会奇怪的弹跳？
      CSD U3 collisions displace x: |-
        # 为精灵交互编程

        在上一关，你应该已经和同学讨论过你看见的精灵时如何互动的了。现在你需要自己编程实现了。如何让长颈鹿离开猴子？

        # 这样做

        长颈鹿已经穿过屏幕到达了猴子，但精灵的交互还没有编好。

        -   和你的同学用上一关计划好的办法，来为精灵编程和你交互。

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace x_2018: |-
        # 为精灵交互编程

        在上一关，你应该已经和同学讨论过你看见的精灵时如何互动的了。现在你需要自己编程实现了。如何让长颈鹿离开猴子？

        # 这样做

        长颈鹿已经穿过屏幕到达了猴子，但精灵的交互还没有编好。

        -   和你的同学用上一关计划好的办法，来为精灵编程和你交互。

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace x_2019: |-
        # 为精灵交互编程

        在上一关，你应该已经和同学讨论过你看见的精灵时如何互动的了。现在你需要自己编程实现了。如何让长颈鹿离开猴子？

        # 这样做

        长颈鹿已经穿过屏幕到达了猴子，但精灵的交互还没有编好。

        -   和你的同学用上一关计划好的办法，来为精灵编程和你交互。

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions egg: |-
        # 苹果酱

        当苹果碰到搅拌机，搅拌机会开始运转。

        # 这样做

        使用`isTouching`（是否碰到）模块来让苹果碰到搅拌机时，开始来回晃动。晃动的代码已经用随机模块写好了，因此你只需要检测是否两个精灵碰到了一起。

        _挑战：你能让苹果碰到搅拌机后消失吗？_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions egg2: |-
        # 制造声音

        你也能用代码来播放一个搅拌的声音。

        # 这样做

        当苹果碰到搅拌器时，从"world"世界抽屉里，找到并使用`playSound`（播放声音）模块来播放"<https://docs.code.org/sounds/blender.mp3"声音。你需要将声音的地址粘贴到模块中，看起来就像这样：> !\[](\<<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57>
        PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57
        PM.png"
      CSD U3 collisions egg2_2018: |-
        # 制造声音

        你也能用代码来播放一个搅拌的声音。

        # 这样做

        当苹果碰到搅拌器时，从"world"世界抽屉里，找到并使用`playSound`（播放声音）模块来播放"<https://docs.code.org/sounds/blender.mp3"声音。你需要将声音的地址粘贴到模块中，看起来就像这样：> !\[](\<<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57>
        PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57
        PM.png"
      CSD U3 collisions egg2_2019: |-
        # 制造声音

        你也能用代码来播放一个搅拌的声音。

        # 这样做

        当苹果碰到搅拌器时，从"world"世界抽屉里，找到并使用`playSound`（播放声音）模块来播放"<https://docs.code.org/sounds/blender.mp3"声音。你需要将声音的地址粘贴到模块中，看起来就像这样：> !\[](\<<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57>
        PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57
        PM.png"
      CSD U3 collisions egg_2018: |-
        # 苹果酱

        当苹果碰到搅拌机，搅拌机会开始运转。

        # 这样做

        使用`isTouching`（是否碰到）模块来让苹果碰到搅拌机时，开始来回晃动。晃动的代码已经用随机模块写好了，因此你只需要检测是否两个精灵碰到了一起。

        _挑战：你能让苹果碰到搅拌机后消失吗？_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions egg_2019: |-
        # 苹果酱

        当苹果碰到搅拌机，搅拌机会开始运转。

        # 这样做

        使用`isTouching`（是否碰到）模块来让苹果碰到搅拌机时，开始来回晃动。晃动的代码已经用随机模块写好了，因此你只需要检测是否两个精灵碰到了一起。

        _挑战：你能让苹果碰到搅拌机后消失吗？_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions flyman add obstacles: |-
        # 飞行游戏 - 添加障碍

        这是你在上一关中建造的飞行游戏。在接下来的几关中，你需要用前几关学习的精灵交互的知识，来为游戏增加一个障碍。最后，你还能自由发挥，来增加一些创意。

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58
        AM.png" style="float:right;width:200px">

        # 这样做

        为游戏增加一个障碍精灵。你可以从动画标签页中选择任何图片，在示例中使用了太阳。现在你只需要将精灵加入到游戏里，并制作动画。

        -   向游戏里增加一个叫做"obstacle"（障碍）的精灵。
        -   在动画标签页里为你的障碍创造一个动画。在这个例子中，选择的是太阳。
        -   \*
            使用`sprite.setAnimation()`（精灵.设置动画）模块来为你的精灵增加选择的图片。
        -   \*
            运行代码，并确保精灵出现在你想要的位置。你可能需要设置它的X，Y值，并调整它的大小，让它和你想象的一致。
      CSD U3 collisions flyman add obstacles_2018: |-
        # 飞行游戏 - 添加障碍

        这是你在上一关中建造的飞行游戏。在接下来的几关中，你需要用前几关学习的精灵交互的知识，来为游戏增加一个障碍。最后，你还能自由发挥，来增加一些创意。

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58
        AM.png" style="float:right;width:200px">

        # 这样做

        为游戏增加一个障碍精灵。你可以从动画标签页中选择任何图片，在示例中使用了太阳。现在你只需要将精灵加入到游戏里，并制作动画。

        -   向游戏里增加一个叫做"obstacle"（障碍）的精灵。
        -   在动画标签页里为你的障碍创造一个动画。在这个例子中，选择的是太阳。
        -   \*
            使用`sprite.setAnimation()`（精灵.设置动画）模块来为你的精灵增加选择的图片。
        -   \*
            运行代码，并确保精灵出现在你想要的位置。你可能需要设置它的X，Y值，并调整它的大小，让它和你想象的一致。
      CSD U3 collisions flyman add obstacles_2019: |-
        # 飞行游戏 - 添加障碍

        这是你在上一关中建造的飞行游戏。在接下来的几关中，你需要用前几关学习的精灵交互的知识，来为游戏增加一个障碍。最后，你还能自由发挥，来增加一些创意。

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58
        AM.png" style="float:right;width:200px">

        # 这样做

        为游戏增加一个障碍精灵。你可以从动画标签页中选择任何图片，在示例中使用了太阳。现在你只需要将精灵加入到游戏里，并制作动画。

        -   向游戏里增加一个叫做"obstacle"（障碍）的精灵。
        -   在动画标签页里为你的障碍创造一个动画。在这个例子中，选择的是太阳。
        -   \*
            使用`sprite.setAnimation()`（精灵.设置动画）模块来为你的精灵增加选择的图片。
        -   \*
            运行代码，并确保精灵出现在你想要的位置。你可能需要设置它的X，Y值，并调整它的大小，让它和你想象的一致。
      CSD U3 collisions flyman bounceOff: "# 飞行游戏 - 与障碍交互\n\n你不会希望玩家能够穿过障碍，因此你需要增加一个精灵交互。\n\n#
        \n\n这样做\n\n-   为你的游戏增加代码来防止玩家穿过障碍。\n-   如果你用一个弹跳的交互，要决定你是否需要重置角色的弹跳力。\n-   和旁边的伙伴讨论一下：你想用哪个精灵的交互方式？你是否觉得有其它可以用的精灵交互方式？"
      CSD U3 collisions flyman bounceOff_2018: "# 飞行游戏 - 与障碍交互\n\n你不会希望玩家能够穿过障碍，因此你需要增加一个精灵交互。\n\n#
        \n\n这样做\n\n-   为你的游戏增加代码来防止玩家穿过障碍。\n-   如果你用一个弹跳的交互，要决定你是否需要重置角色的弹跳力。\n-   和旁边的伙伴讨论一下：你想用哪个精灵的交互方式？你是否觉得有其它可以用的精灵交互方式？"
      CSD U3 collisions flyman bounceOff_2019: "# 飞行游戏 - 与障碍交互\n\n你不会希望玩家能够穿过障碍，因此你需要增加一个精灵交互。\n\n#
        \n\n这样做\n\n-   为你的游戏增加代码来防止玩家穿过障碍。\n-   如果你用一个弹跳的交互，要决定你是否需要重置角色的弹跳力。\n-   和旁边的伙伴讨论一下：你想用哪个精灵的交互方式？你是否觉得有其它可以用的精灵交互方式？"
      CSD U3 collisions flyman change colliders: |-
        # 飞行游戏 - 改变碰撞器

        现在，你的碰撞器都是矩形的。将它们改为圆形，这样能得到更有趣并更真实的弹跳和碰撞。

        # 这样做

        -   用`sprite.setCollider()`（精灵.设置碰撞器）模块来将精灵的碰撞器改为圆形。
        -   设置精灵的调试属性为`true`来检查游戏是否是按照想象的方式运行。
        -   \*
            万一玩游戏来看看它是否和预想的一样。
      CSD U3 collisions flyman change colliders_2018: |-
        # 飞行游戏 - 改变碰撞器

        现在，你的碰撞器都是矩形的。将它们改为圆形，这样能得到更有趣并更真实的弹跳和碰撞。

        # 这样做

        -   用`sprite.setCollider()`（精灵.设置碰撞器）模块来将精灵的碰撞器改为圆形。
        -   设置精灵的调试属性为`true`来检查游戏是否是按照想象的方式运行。
        -   \*
            万一玩游戏来看看它是否和预想的一样。
      CSD U3 collisions flyman change colliders_2019: |-
        # 飞行游戏 - 改变碰撞器

        现在，你的碰撞器都是矩形的。将它们改为圆形，这样能得到更有趣并更真实的弹跳和碰撞。

        # 这样做

        -   用`sprite.setCollider()`（精灵.设置碰撞器）模块来将精灵的碰撞器改为圆形。
        -   设置精灵的调试属性为`true`来检查游戏是否是按照想象的方式运行。
        -   \*
            万一玩游戏来看看它是否和预想的一样。
      CSD U3 collisions flyman displace coin: |-
        # 飞行游戏 - 障碍后的硬币

        现在你的硬币移动到了随机的位置。这意味着它有可能藏在障碍的后面，这样角色就不能得到它了。用精灵交互可以修复这个问题。

        # 这样做

        -   增加代码来防止硬币被挪到障碍的后面。别害怕来多次尝试，看看它是如何工作的。
        -   和旁边的同学讨论一下：你决定使用哪个精灵的交互？是否还有别的精灵交互和你期望的作用一样？
      CSD U3 collisions flyman displace coin_2018: |-
        # 飞行游戏 - 障碍后的硬币

        现在你的硬币移动到了随机的位置。这意味着它有可能藏在障碍的后面，这样角色就不能得到它了。用精灵交互可以修复这个问题。

        # 这样做

        -   增加代码来防止硬币被挪到障碍的后面。别害怕来多次尝试，看看它是如何工作的。
        -   和旁边的同学讨论一下：你决定使用哪个精灵的交互？是否还有别的精灵交互和你期望的作用一样？
      CSD U3 collisions flyman displace coin_2019: |-
        # 飞行游戏 - 障碍后的硬币

        现在你的硬币移动到了随机的位置。这意味着它有可能藏在障碍的后面，这样角色就不能得到它了。用精灵交互可以修复这个问题。

        # 这样做

        -   增加代码来防止硬币被挪到障碍的后面。别害怕来多次尝试，看看它是如何工作的。
        -   和旁边的同学讨论一下：你决定使用哪个精灵的交互？是否还有别的精灵交互和你期望的作用一样？
      CSD U3 collisions flyman make it your own: |-
        # 飞行游戏 - 自由发挥

        现在用你学到的关于精灵交互的知识，自由发挥吧。

        # 这样做

        至少增加一个使用了交互的精灵到游戏里。这里有一些电子，你也可以加上自己想要的功能。确保和你的同学分享了你的主意。

        -   创建"edge"（边缘）精灵来让你的角色不会弹出屏幕。
        -   往游戏里添加一个平台来让角色可以四处浏览。
        -   添加另一个障碍。
        -   创建自己的主意。
      CSD U3 collisions flyman make it your own_2018: |-
        # 飞行游戏 - 自由发挥

        现在用你学到的关于精灵交互的知识，自由发挥吧。

        # 这样做

        至少增加一个使用了交互的精灵到游戏里。这里有一些电子，你也可以加上自己想要的功能。确保和你的同学分享了你的主意。

        -   创建"edge"（边缘）精灵来让你的角色不会弹出屏幕。
        -   往游戏里添加一个平台来让角色可以四处浏览。
        -   添加另一个障碍。
        -   创建自己的主意。
      CSD U3 collisions flyman make it your own_2019: |-
        # 飞行游戏 - 自由发挥

        现在用你学到的关于精灵交互的知识，自由发挥吧。

        # 这样做

        至少增加一个使用了交互的精灵到游戏里。这里有一些电子，你也可以加上自己想要的功能。确保和你的同学分享了你的主意。

        -   创建"edge"（边缘）精灵来让你的角色不会弹出屏幕。
        -   往游戏里添加一个平台来让角色可以四处浏览。
        -   添加另一个障碍。
        -   创建自己的主意。
      CSD U3 dancing alien: "# 绘图循环里的精灵。\n\n改动绘图循环里精灵的属性，你能让你的角色动起来。\n\n动画速度被减慢了。在程序开始处的`World.frameRate`（世界.帧率）模块将帧率设置为了10。通常的帧率是30。将帧率改成其它值。\n\n#
        \n\n这样做\n\n-   运行代码看看它是如何工作的。\n-   和你的伙伴讨论一下，为什么有些代码在绘图循环里面，有些在外面。\n-   试试改动帧率，然后再运行代码。"
      CSD U3 dancing alien_2018: "# 绘图循环里的精灵。\n\n改动绘图循环里精灵的属性，你能让你的角色动起来。\n\n动画速度被减慢了。在程序开始处的`World.frameRate`（世界.帧率）模块将帧率设置为了10。通常的帧率是30。将帧率改成其它值。\n\n#
        \n\n这样做\n\n-   运行代码看看它是如何工作的。\n-   和你的伙伴讨论一下，为什么有些代码在绘图循环里面，有些在外面。\n-   试试改动帧率，然后再运行代码。"
      CSD U3 dancing alien_2019: "# 绘图循环里的精灵。\n\n改动绘图循环里精灵的属性，你能让你的角色动起来。\n\n动画速度被减慢了。在程序开始处的`World.frameRate`（世界.帧率）模块将帧率设置为了10。通常的帧率是30。将帧率改成其它值。\n\n#
        \n\n这样做\n\n-   运行代码看看它是如何工作的。\n-   和你的伙伴讨论一下，为什么有些代码在绘图循环里面，有些在外面。\n-   试试改动帧率，然后再运行代码。"
      CSD U3 debug: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50
        AM.png" style="float:right;width:150px;">

        # 调试

        通常，代码在第一次运行时，都不能正常工作，需要程序员调试。下面的代码应该做出右边一样的图片，但程序员搞混了代码的顺序，以及怎样把正方形放到屏幕的正确位置上。

        # 这样做

        -   看看工作区中的代码。
        -   修改代码，让它能做出右边一样的图片。
        -   （你需要改动一行代码，并改变正方形的坐标。)
      CSD U3 debug_2018: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50
        AM.png" style="float:right;width:150px;">

        # 调试

        通常，代码在第一次运行时，都不能正常工作，需要程序员调试。下面的代码应该做出右边一样的图片，但程序员搞混了代码的顺序，以及怎样把正方形放到屏幕的正确位置上。

        # 这样做

        -   看看工作区中的代码。
        -   修改代码，让它能做出右边一样的图片。
        -   （你需要改动一行代码，并改变正方形的坐标。)
      CSD U3 debug_2019: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50
        AM.png" style="float:right;width:150px;">

        # 调试

        通常，代码在第一次运行时，都不能正常工作，需要程序员调试。下面的代码应该做出右边一样的图片，但程序员搞混了代码的顺序，以及怎样把正方形放到屏幕的正确位置上。

        # 这样做

        -   看看工作区中的代码。
        -   修改代码，让它能做出右边一样的图片。
        -   （你需要改动一行代码，并改变正方形的坐标。)
      CSD U3 ellipse: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44
        PM.png" style="float:right;width:150px;"># 椭圆

        你可以用`ellipse`（椭圆）来画圆圈。

        # 这样做

        -   看看画椭圆的代码。
        -   添加一个不同颜色的新椭圆.
      CSD U3 ellipse_2018: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44
        PM.png" style="float:right;width:150px;"># 椭圆

        你可以用`ellipse`（椭圆）来画圆圈。

        # 这样做

        -   看看画椭圆的代码。
        -   添加一个不同颜色的新椭圆.
      CSD U3 ellipse_2019: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44
        PM.png" style="float:right;width:150px;"># 椭圆

        你可以用`ellipse`（椭圆）来画圆圈。

        # 这样做

        -   看看画椭圆的代码。
        -   添加一个不同颜色的新椭圆.
      CSD U3 fill: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19
        PM.png" style="float:right;width:200px;">

        # 填充（颜色）

        你可以用`fill`（填充）让你的矩形有不同的颜色。它会将它之后的所有形状都设置成这个颜色。

        # 这样做

        -   看一看设置颜色的代码。( [显示](#triggercallout=fill))
        -   将颜色从蓝色改为黄色。
        -   通过将一个`rect`（矩形）模块拖拽到填充命令下面来增加一个正方形。 ( [显示](#triggercallout=rect_block)) 新的正方形可以放在屏幕的任何位置。
      CSD U3 fill_2018: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19
        PM.png" style="float:right;width:200px;">

        # 填充（颜色）

        你可以用`fill`（填充）让你的矩形有不同的颜色。它会将它之后的所有形状都设置成这个颜色。

        # 这样做

        -   看一看设置颜色的代码。( [显示](#triggercallout=fill))
        -   将颜色从蓝色改为黄色。
        -   通过将一个`rect`（矩形）模块拖拽到填充命令下面来增加一个正方形。 ( [显示](#triggercallout=rect_block)) 新的正方形可以放在屏幕的任何位置。
      CSD U3 fill_2019: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19
        PM.png" style="float:right;width:200px;">

        # 填充（颜色）

        你可以用`fill`（填充）让你的矩形有不同的颜色。它会将它之后的所有形状都设置成这个颜色。

        # 这样做

        -   看一看设置颜色的代码。( [显示](#triggercallout=fill))
        -   将颜色从蓝色改为黄色。
        -   通过将一个`rect`（矩形）模块拖拽到填充命令下面来增加一个正方形。 ( [显示](#triggercallout=rect_block)) 新的正方形可以放在屏幕的任何位置。
      CSD U3 keydown conditional: "# 改变精灵\n\n你应该在上一关见过了，当你按住一个键时`keyDown`返回`true`，当键没有被按下时，返回`false`。`keyDown`命令的输入是你想要检查的键的名字。例如\"x\",
        \"up\"（上箭头) 和\"space\"（空格键）。\n\n我们将`keyDown`作为`if`如果语句的输入，在按下键时，改变动画。\n\n#
        \n\n这样做\n\n-   运行代码，并试试按下上方向和下方向键。\n-   看看`if`语句里，来理解代码时如何工作的。\n-   在第三个`if`语句中增加模块来将动画改变为另一个动物。\n\n\\*提示：你可以用已经在动画标签页中的兔子，或者加上一个新的动画。"
      CSD U3 keydown conditional_2018: "# 改变精灵\n\n在上一关，你看到了当你按住一个键，`keyDown`会返回真`true`，而没被按下时，它会返回`false`。`keyDown`命令的输入是想要检查的键的名字。比如：\"x\"，
        \"up\"，和\"space\"。\n\n我们能用`keyDown`当作`如果`语句的输入，来根据键是否按下了来改变动画！\n\n# \n\n这样做\n\n-
        \  运行代码，并试试点击\"p\"和\"h\"键。\n-   \\*\n    看看`如果`语句里的代码是如何起作用的。\n-   在第三个`如果`语句里增加模块来让动画变成另一个动物。\n\n\\*挑战：当你用`setAnimation`时，它会保持新的动画，直到再次改变它。你能改动代码，当不再按下键时，让精灵自动走回到长颈鹿吗？"
      CSD U3 keydown conditional_2018_2019: "# 改变精灵\n\n在上一关，你看到了当你按住一个键，`keyDown`会返回真`true`，而没被按下时，它会返回`false`。`keyDown`命令的输入是想要检查的键的名字。比如：\"x\"，
        \"up\"，和\"space\"。\n\n我们能用`keyDown`当作`如果`语句的输入，来根据键是否按下了来改变动画！\n\n# \n\n这样做\n\n-
        \  运行代码，并试试点击\"p\"和\"h\"键。\n-   \\*\n    看看`如果`语句里的代码是如何起作用的。\n-   在第三个`如果`语句里增加模块来让动画变成另一个动物。\n\n\\*挑战：当你用`setAnimation`时，它会保持新的动画，直到再次改变它。你能改动代码，当不再按下键时，让精灵自动走回到长颈鹿吗？"
      CSD U3 picture: |-
        # 挑战：画图

        _在开始任何挑战前，先问问自己的老师。_

        在前面的课程中，你和伙伴创建了一些有趣的图片。看看你能否用代码来创建它们。
      CSD U3 picture_2018: |-
        # 挑战：画图

        _在开始任何挑战前，先问问自己的老师。_

        在前面的课程中，你和伙伴创建了一些有趣的图片。看看你能否用代码来创建它们。
      CSD U3 picture_2019: |-
        # 挑战：画图

        _在开始任何挑战前，先问问自己的老师。_

        在前面的课程中，你和伙伴创建了一些有趣的图片。看看你能否用代码来创建它们。
      CSD U3 rect: |-
        # 探索游戏实验室

        欢迎来到游戏实验室，你能在这里创建交互动画和游戏！

        你已经练习了一些基础，如将形状添加到网格中。在游戏实验室里，你需要做出和左边显示区域一样的东西。

        # 这样做

        \*
        看看工作区里，这些说明下的这行代码( [显示在哪里](#triggercallout=block_trigger) )，然后和伙伴讨论一下你觉得这个形状会画在网格的什么位置。

        -   点击<img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
            PM.png" width=100>来运行程序，并看看会发生什么。( [显示在哪里](#triggercallout=run_trigger)
            )
        -   改变模块中的数字，然后试着再运行一下程序。
        -   试着将矩形放在屏幕的右下角。
      CSD U3 rect_2018: |-
        # 探索游戏实验室

        欢迎来到游戏实验室，你能在这里创建交互动画和游戏！

        你已经练习了一些基础，如将形状添加到网格中。在游戏实验室里，你需要做出和左边显示区域一样的东西。

        # 这样做

        -   看看工作区里，这些说明下的这行代码( [显示在哪里](#triggercallout=block_trigger) )，然后和伙伴讨论一下你觉得这个形状会画在网格的什么位置。
        -   点击<img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png" width=100>来运行程序，并看看会发生什么。
        -   改变模块中的数字，然后试着再运行一下程序。
        -   试着将矩形放在屏幕的右下角。
      CSD U3 rect_2019: |-
        # 探索游戏实验室

        欢迎来到游戏实验室，你能在这里创建交互动画和游戏！

        你已经练习了一些基础，如将形状添加到网格中。在游戏实验室里，你需要做出和左边显示区域一样的东西。

        # 这样做

        -   看看工作区里，这些说明下的这行代码( [显示在哪里](#triggercallout=block_trigger) )，然后和伙伴讨论一下你觉得这个形状会画在网格的什么位置。
        -   点击<img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png" width=100>来运行程序，并看看会发生什么。
        -   改变模块中的数字，然后试着再运行一下程序。
        -   试着将矩形放在屏幕的右下角。
      CSD U3 sequence: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # 顺序很重要

        在游戏实验室里，放置代码的顺序很重要。新的形状会绘制在之前形状之上，覆盖这些已经画好的形状。你可以看看，如果在代码中用一种以上的颜色时，有什么不同。

        # 这样做

        -   看看画两个举行的代码，第一个是红色，另一个是蓝色。
        -   将红色的矩形改为绿色。
        -   改变代码的顺序，让绿色矩形在最上面。
      CSD U3 sequence_2018: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # 顺序很重要

        在游戏实验室里，放置代码的顺序很重要。新的形状会绘制在之前形状之上，覆盖这些已经画好的形状。你可以看看，如果在代码中用一种以上的颜色时，有什么不同。

        # 这样做

        -   看看画两个举行的代码，第一个是红色，另一个是蓝色。
        -   将红色的矩形改为绿色。
        -   改变代码的顺序，让绿色矩形在最上面。
      CSD U3 sequence_2019: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # 顺序很重要

        在游戏实验室里，放置代码的顺序很重要。新的形状会绘制在之前形状之上，覆盖这些已经画好的形状。你可以看看，如果在代码中用一种以上的颜色时，有什么不同。

        # 这样做

        -   看看画两个举行的代码，第一个是红色，另一个是蓝色。
        -   将红色的矩形改为绿色。
        -   改变代码的顺序，让绿色矩形在最上面。
      CSD U4 - Design Mode Project_2018: |-
        ＃制作应用程序的样本

        使用纸上的原型，和所学的设计模块元素，来创建显示的一个数字版本。

        ＃ 这样做

        \*重命名显示以匹配_namespace_。
        \*使用内置的组件来布局应用程序屏幕显示，给每个元素一个适当的ID
        \\t \*例如，如果_namespace_是“home_”，则可以创建如下所示的ID：
        \\t \*“home_title”
        \*“home_login_button”
        \*“home\_logo”
        \*对于无法使用内置组件重新创建的你应用程序的任何组件，可以：
        \\t \*重新设计以便于利用内置组件
             \*找到一个图片来代替你需要的组件
             \*用喜欢的图像编辑器绘制这个组件
        \*确保队友们经常相互查看对方的设计，以保证风格一致
      CSD U4 - Design Mode Project_2019: |-
        ＃制作应用程序的样本

        使用纸上的原型，和所学的设计模块元素，来创建显示的一个数字版本。

        ＃ 这样做

        \*重命名显示以匹配_namespace_。
        \*使用内置的组件来布局应用程序屏幕显示，给每个元素一个适当的ID
        \\t \*例如，如果_namespace_是“home_”，则可以创建如下所示的ID：
        \\t \*“home_title”
        \*“home_login_button”
        \*“home\_logo”
        \*对于无法使用内置组件重新创建的你应用程序的任何组件，可以：
        \\t \*重新设计以便于利用内置组件
             \*找到一个图片来代替你需要的组件
             \*用喜欢的图像编辑器绘制这个组件
        \*确保队友们经常相互查看对方的设计，以保证风格一致
      CSD U5 Amazon Data Video: 观看此视频, 了解亚马逊如何解决这个问题, 。当你看的时候，考虑是什么数据被收集, 它是从哪里来的。
      CSD U5 Amazon Data Video_2018: 观看此视频, 了解亚马逊如何解决这个问题, 。当你看的时候，考虑是什么数据被收集, 它是从哪里来的。
      CSD U5 Amazon Data Video_2019: 观看此视频, 了解亚马逊如何解决这个问题, 。当你看的时候，考虑是什么数据被收集, 它是从哪里来的。
      CSD U5 Netflix Data Video: 观看此视频, 了解Netflix如何解决这个问题, 。当你观看的时候，请考虑要收集什么数据以及它们是从哪里来的。
      CSD U5 Netflix Data Video_2018: 观看此视频, 了解Netflix如何解决这个问题, 。当你观看的时候，请考虑要收集什么数据以及它们是从哪里来的。
      CSD U5 Netflix Data Video_2019: 观看此视频, 了解Netflix如何解决这个问题, 。当你观看的时候，请考虑要收集什么数据以及它们是从哪里来的。
      CSD U5 Pizza: |-
        # 比萨派对

        比萨派对的数据已经被放到了一个应用里，来自另一个班级的答案页加上了。因为这是一个应用程序，我们能自动的从给出的数据来创建条形图。

        # 这样做

        -   点击"运行"来看看领域给班级给的答案列表。
        -   和伙伴讨论一下，你觉得数据图表会是什么样子。
        -   点击"显示图表"看一看。

        # 电子表格版本

        如果你希望使用电子表格的话，比萨派对的数据也有这个格式。如果要使用电子表格，你需要自己复制它。

        \*
        这个链接会让你自己拷贝一份"最佳的比萨选择"数据：
        [比萨最佳选择](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        \*
        你也可以下载CSV版本的文件。[这里](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza 2: |-
        # 比萨派对

        当人们进行数据工作时，他们明白要去掉那些无意义的答案，而有些答案，例如“胡椒粉”，“胡椒面”，“细胡椒粉”实际上是同一种东西。计算机不知道应该怎么左，因此我们需要在计算机使用前对数据进行清理。

        这个版本的应用有需要被清理的第二行数据。

        ## 这样做

        \*
        点击“运行”来看看需要被清理的新的答案列表。

        -   点击每个需要被清理的答案，并纠正它们。使得计算机能够正确的画出图。（你可能想要将某些答案直接删除）。
        -   完成后，点击“显示图标”来看看清理答案后的新图标。
      CSD U5 Pizza 2_2018: |-
        # 比萨派对

        当人们进行数据工作时，他们明白要去掉那些无意义的答案，而有些答案，例如“胡椒粉”，“胡椒面”，“细胡椒粉”实际上是同一种东西。计算机不知道应该怎么左，因此我们需要在计算机使用前对数据进行清理。

        这个版本的应用有需要被清理的第二行数据。

        ## 这样做

        \*
        点击“运行”来看看需要被清理的新的答案列表。

        -   点击每个需要被清理的答案，并纠正它们。使得计算机能够正确的画出图。（你可能想要将某些答案直接删除）。
        -   完成后，点击“显示图标”来看看清理答案后的新图标。
      CSD U5 Pizza 2_2019: |-
        # 比萨派对

        当人们进行数据工作时，他们明白要去掉那些无意义的答案，而有些答案，例如“胡椒粉”，“胡椒面”，“细胡椒粉”实际上是同一种东西。计算机不知道应该怎么左，因此我们需要在计算机使用前对数据进行清理。

        这个版本的应用有需要被清理的第二行数据。

        ## 这样做

        \*
        点击“运行”来看看需要被清理的新的答案列表。

        -   点击每个需要被清理的答案，并纠正它们。使得计算机能够正确的画出图。（你可能想要将某些答案直接删除）。
        -   完成后，点击“显示图标”来看看清理答案后的新图标。
      CSD U5 Pizza_2018: |-
        # 比萨派对

        比萨派对的数据已经被放到了一个应用里，来自另一个班级的答案页加上了。因为这是一个应用程序，我们能自动的从给出的数据来创建条形图。

        # 这样做

        -   点击"运行"来看看领域给班级给的答案列表。
        -   和伙伴讨论一下，你觉得数据图表会是什么样子。
        -   点击"显示图表"看一看。

        # 电子表格版本

        如果你希望使用电子表格的话，比萨派对的数据也有这个格式。如果要使用电子表格，你需要自己复制它。

        \*
        这个链接会让你自己拷贝一份"最佳的比萨选择"数据：
        [比萨最佳选择](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        \*
        你也可以下载CSV版本的文件。[这里](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza_2019: |-
        # 比萨派对

        比萨派对的数据已经被放到了一个应用里，来自另一个班级的答案页加上了。因为这是一个应用程序，我们能自动的从给出的数据来创建条形图。

        # 这样做

        -   点击"运行"来看看领域给班级给的答案列表。
        -   和伙伴讨论一下，你觉得数据图表会是什么样子。
        -   点击"显示图表"看一看。

        # 电子表格版本

        如果你希望使用电子表格的话，比萨派对的数据也有这个格式。如果要使用电子表格，你需要自己复制它。

        \*
        这个链接会让你自己拷贝一份"最佳的比萨选择"数据：
        [比萨最佳选择](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        \*
        你也可以下载CSV版本的文件。[这里](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Waze Data Video: 观看此视频, 了解 Waze如何解决这个问题的。当你看的时候，思考是什么数据被收集, 它是从哪里来的。
      CSD U5 Waze Data Video_2018: 观看此视频, 了解 Waze如何解决这个问题的。当你看的时候，思考是什么数据被收集, 它是从哪里来的。
      CSD U5 Waze Data Video_2019: 观看此视频, 了解 Waze如何解决这个问题的。当你看的时候，思考是什么数据被收集, 它是从哪里来的。
      CSD U5 binary 1: |-
        # 5比特数字

        当你只有4个比特时，能够表达的最大的数字是15。现在你有机会使用更多比特来表达更大的数。

        在这个活动中，这些点都会被替换成数字，但你仍然需要将显示的内容都加起来，来看看二进制代码表示的什么数字。最左边的位还没有数字，因此你需要给它一个值。

        # 这样做

        -   点击这些比特来将它们打开或关闭，然后看看产生的不同数字。
        -   和你的伙伴讨论一些数字的规律。决定你想在最左边的盒子里显示什么数字。
        -   点击“编辑”来改变最左边位的值。
        -   一旦你决定了值，试试产生这些数字：16，27，31
      CSD U5 binary 1_2018: |-
        # 5比特数字

        当你只有4个比特时，能够表达的最大的数字是15。现在你有机会使用更多比特来表达更大的数。

        在这个活动中，这些点都会被替换成数字，但你仍然需要将显示的内容都加起来，来看看二进制代码表示的什么数字。最左边的位还没有数字，因此你需要给它一个值。

        # 这样做

        -   点击这些比特来将它们打开或关闭，然后看看产生的不同数字。
        -   和你的伙伴讨论一些数字的规律。决定你想在最左边的盒子里显示什么数字。
        -   点击“编辑”来改变最左边位的值。
        -   一旦你决定了值，试试产生这些数字：16，27，31
      CSD U5 binary 1_2019: |-
        # 5比特数字

        当你只有4个比特时，能够表达的最大的数字是15。现在你有机会使用更多比特来表达更大的数。

        在这个活动中，这些点都会被替换成数字，但你仍然需要将显示的内容都加起来，来看看二进制代码表示的什么数字。最左边的位还没有数字，因此你需要给它一个值。

        # 这样做

        -   点击这些比特来将它们打开或关闭，然后看看产生的不同数字。
        -   和你的伙伴讨论一些数字的规律。决定你想在最左边的盒子里显示什么数字。
        -   点击“编辑”来改变最左边位的值。
        -   一旦你决定了值，试试产生这些数字：16，27，31
      CSD U5 binary 2: |-
        # 6比特数字

        这个小工具能够帮助你计算6比特的二进制数字。

        # 这样做

        -   和你的伙伴一起回答这些问题：
        -   你能通过工具产生的最大的数是多少？
        -   一个人和狗能够跳过的记录是59。你应该如何在二进制里编码59？
      CSD U5 binary 2_2018: |-
        # 6比特数字

        这个小工具能够帮助你计算6比特的二进制数字。

        # 这样做

        -   和你的伙伴一起回答这些问题：
        -   你能通过工具产生的最大的数是多少？
        -   一个人和狗能够跳过的记录是59。你应该如何在二进制里编码59？
      CSD U5 binary 2_2019: |-
        # 6比特数字

        这个小工具能够帮助你计算6比特的二进制数字。

        # 这样做

        -   和你的伙伴一起回答这些问题：
        -   你能通过工具产生的最大的数是多少？
        -   一个人和狗能够跳过的记录是59。你应该如何在二进制里编码59？
      CSD U5 binary 4-new: |-
        # 解码多个数字

        这有一个工具能够计算4，5，6比特的数字。你能用它来找到编码的两个世界纪录。

        !\[](\<<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06>
        PM.png>)

        1.  人类在两分钟内能够举起并扔出去的数量。(4比特)
        2.  鹦鹉在一分钟内能够打开的罐装饮料数量。(6比特)

        # 这样做

        -   从二进制字符串中解码这两个数字。
      CSD U5 binary 4-new_2018: |-
        # 解码多个数字

        这有一个工具能够计算4，5，6比特的数字。你能用它来找到编码的两个世界纪录。

        !\[](\<<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06>
        PM.png>)

        1.  人类在两分钟内能够举起并扔出去的数量。(4比特)
        2.  鹦鹉在一分钟内能够打开的罐装饮料数量。(6比特)

        # 这样做

        -   从二进制字符串中解码这两个数字。
      CSD U5 binary 4-new_2019: |-
        # 解码多个数字

        这有一个工具能够计算4，5，6比特的数字。你能用它来找到编码的两个世界纪录。

        !\[](\<<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06>
        PM.png>)

        1.  人类在两分钟内能够举起并扔出去的数量。(4比特)
        2.  鹦鹉在一分钟内能够打开的罐装饮料数量。(6比特)

        # 这样做

        -   从二进制字符串中解码这两个数字。
      CSD U5 binary 5-new: |-
        # 解码多个数字

        这里有个工具能够计算最多8比特的数字。你能用它找到下面的两个世界记录。

        别忘了确保"1"比特永远在最右边。如果在左边有多余的比特，将它们关闭就行了

        !\[](\<<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14>
        PM.png>)

        1.  最长的狗尾巴（英寸）（5比特）
        2.  在某人脸上能够保持平衡的最多的勺子数量（5比特）

        # 这样做

        -   从一个二进制字符串中解码这两个数字。
      CSD U5 binary 5-new_2018: |-
        # 解码多个数字

        这里有个工具能够计算最多8比特的数字。你能用它找到下面的两个世界记录。

        别忘了确保"1"比特永远在最右边。如果在左边有多余的比特，将它们关闭就行了

        !\[](\<<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14>
        PM.png>)

        1.  最长的狗尾巴（英寸）（5比特）
        2.  在某人脸上能够保持平衡的最多的勺子数量（5比特）

        # 这样做

        -   从一个二进制字符串中解码这两个数字。
      CSD U5 binary 5-new_2019: |-
        # 解码多个数字

        这里有个工具能够计算最多8比特的数字。你能用它找到下面的两个世界记录。

        别忘了确保"1"比特永远在最右边。如果在左边有多余的比特，将它们关闭就行了

        !\[](\<<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14>
        PM.png>)

        1.  最长的狗尾巴（英寸）（5比特）
        2.  在某人脸上能够保持平衡的最多的勺子数量（5比特）

        # 这样做

        -   从一个二进制字符串中解码这两个数字。
      CSD U5 binary 6-new: |-
        # 解码多个数字

        这里有一个新的二进制字符串。这次，你不知道两个数字的比特长度。试着在不知道比特长度的情况下解码这两个数字。

        !\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)

        1.  最大的风铃的英寸尺寸（？比特）
        2.  用某人的脚（英尺）丈量的弓箭射出的最远距离。(？比特）

        # 这样做

        -   试一试从二进制字符串中解码这两个数字。
        -   和你的伙伴讨论一下，为什么你不能确定自己的答案是否正确。
      CSD U5 binary 6-new_2018: |-
        # 解码多个数字

        这里有一个新的二进制字符串。这次，你不知道两个数字的比特长度。试着在不知道比特长度的情况下解码这两个数字。

        !\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)

        1.  最大的风铃的英寸尺寸（？比特）
        2.  用某人的脚（英尺）丈量的弓箭射出的最远距离。(？比特）

        # 这样做

        -   试一试从二进制字符串中解码这两个数字。
        -   和你的伙伴讨论一下，为什么你不能确定自己的答案是否正确。
      CSD U5 binary 6-new_2019: |-
        # 解码多个数字

        这里有一个新的二进制字符串。这次，你不知道两个数字的比特长度。试着在不知道比特长度的情况下解码这两个数字。

        !\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)

        1.  最大的风铃的英寸尺寸（？比特）
        2.  用某人的脚（英尺）丈量的弓箭射出的最远距离。(？比特）

        # 这样做

        -   试一试从二进制字符串中解码这两个数字。
        -   和你的伙伴讨论一下，为什么你不能确定自己的答案是否正确。
      CSD U5 binary 7-new: |-
        # 位长度

        如果你不知道每个数字有多少位，你没法解码一个数字字符串。

        例如，下面的二进制字符串有多种方法来解码。

        !\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)

        如果你将字符串这样分开，这个字符串读作：10，84。

        !\[](\<<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01>
        PM.png>) !\[](\<<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08>
        PM.png>)

        如果这样分开，这个字符串读作：42，20。

        !\[](\<<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13>
        PM.png>) !\[](\<<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19>
        PM.png>)

        为了解决这个问题，人们同意为每个数字都设置固定的长度。下面的字符串用了同样的两个数字，但无论实际上它有多少比特，每个数字都正好是8比特。

        !\[](\<<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26>
        PM.png>)

        # 这样做

        -   用二进制小工具用8比特数字来解码字符串。
        -   和你的伙伴检查答案，看看是否一致。
      CSD U5 binary 7-new_2018: |-
        # 位长度

        如果你不知道每个数字有多少位，你没法解码一个数字字符串。

        例如，下面的二进制字符串有多种方法来解码。

        !\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)

        如果你将字符串这样分开，这个字符串读作：10，84。

        !\[](\<<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01>
        PM.png>) !\[](\<<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08>
        PM.png>)

        如果这样分开，这个字符串读作：42，20。

        !\[](\<<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13>
        PM.png>) !\[](\<<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19>
        PM.png>)

        为了解决这个问题，人们同意为每个数字都设置固定的长度。下面的字符串用了同样的两个数字，但无论实际上它有多少比特，每个数字都正好是8比特。

        !\[](\<<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26>
        PM.png>)

        # 这样做

        -   用二进制小工具用8比特数字来解码字符串。
        -   和你的伙伴检查答案，看看是否一致。
      CSD U5 binary 7-new_2019: |-
        # 位长度

        如果你不知道每个数字有多少位，你没法解码一个数字字符串。

        例如，下面的二进制字符串有多种方法来解码。

        !\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)

        如果你将字符串这样分开，这个字符串读作：10，84。

        !\[](\<<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01>
        PM.png>) !\[](\<<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08>
        PM.png>)

        如果这样分开，这个字符串读作：42，20。

        !\[](\<<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13>
        PM.png>) !\[](\<<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19>
        PM.png>)

        为了解决这个问题，人们同意为每个数字都设置固定的长度。下面的字符串用了同样的两个数字，但无论实际上它有多少比特，每个数字都正好是8比特。

        !\[](\<<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26>
        PM.png>)

        # 这样做

        -   用二进制小工具用8比特数字来解码字符串。
        -   和你的伙伴检查答案，看看是否一致。
      CSD U5 binary video_2019: |-
        ## 思考问题

        -   为什么所有的数据在计算机上都被储存为数字？
        -   如果所有数据都被作为数字来保存，那么你认为计算机将如何识别出数字、字母、图像以及声音之间的区别呢？
      CSD U5 black white images pixelation: |-
        # 这样做

        通过输入0和1来完成"X"形状。如果你想全部清除，可以随时点击"可读格式化"。
      CSD U5 black white images pixelation 2: |-
        # 这样做

        用像素小工具来画一个笑脸。

        !\[](\<<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47>
        PM.png>)
      CSD U5 black white images pixelation 2_2018: |-
        # 这样做

        用像素小工具来画一个笑脸。

        !\[](\<<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47>
        PM.png>)
      CSD U5 black white images pixelation 2_2019: |-
        # 这样做

        用像素小工具来画一个笑脸。

        !\[](\<<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47>
        PM.png>)
      CSD U5 black white images pixelation 3: |-
        # 这样做

        这幅图的高度和宽度滑块没有设置正确，所以它看起来什么都不像。改变它们，直到你发现了图片。

        !\[](\<<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17>
        PM.png>)
      CSD U5 black white images pixelation 3_2018: |-
        # 这样做

        这幅图的高度和宽度滑块没有设置正确，所以它看起来什么都不像。改变它们，直到你发现了图片。

        !\[](\<<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17>
        PM.png>)
      CSD U5 black white images pixelation 3_2019: |-
        # 这样做

        这幅图的高度和宽度滑块没有设置正确，所以它看起来什么都不像。改变它们，直到你发现了图片。

        !\[](\<<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17>
        PM.png>)
      CSD U5 black white images pixelation 4: |-
        # 这样做

        在笑脸上添加眉毛。如果搞乱了，记得使用“可读格式”。

        !\[](\<<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37>
        PM.png>)
      CSD U5 black white images pixelation 4_2018: |-
        # 这样做

        在笑脸上添加眉毛。如果搞乱了，记得使用“可读格式”。

        !\[](\<<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37>
        PM.png>)
      CSD U5 black white images pixelation 4_2019: |-
        # 这样做

        在笑脸上添加眉毛。如果搞乱了，记得使用“可读格式”。

        !\[](\<<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37>
        PM.png>)
      CSD U5 black white images pixelation 5: |-
        # 这样做

        现在该你了。在像素小工具里画任何你想画的东西。如果需要的话，请随意改动图片的宽高。
      CSD U5 black white images pixelation 5_2018: |-
        # 这样做

        现在该你了。在像素小工具里画任何你想画的东西。如果需要的话，请随意改动图片的宽高。
      CSD U5 black white images pixelation 5_2019: |-
        # 这样做

        现在该你了。在像素小工具里画任何你想画的东西。如果需要的话，请随意改动图片的宽高。
      CSD U5 black white images pixelation_2018: |-
        # 这样做

        通过输入0和1来完成"X"形状。如果你想全部清除，可以随时点击"可读格式化"。
      CSD U5 black white images pixelation_2019: |-
        # 这样做

        通过输入0和1来完成"X"形状。如果你想全部清除，可以随时点击"可读格式化"。
      CSD U6 Catch the Mouse: 嵌入式预测
      CSD U6 Catch the Mouse_2018: 嵌入式预测
      CSD U6 Catch the Mouse_2019: 嵌入式预测
      CSD U6 Driver pt 2: |-
        # 有限转向

        你可能注意到了，除非你的手移动得非常慢而且非常小心，不然控制这个汽车很难。这是因为`roll`（转动）依赖于加速度计，可能会返回一个很大的数。记住，`roll`（转动）的范围从-90到90。

        # 这样做

        找个办法`roll`（转动）一个更小的数，来控制汽车。
        你可以使用所有的数学运算符。

        _挑战_：你能让汽车不要到达屏幕的边缘吗？
      CSD U6 Driver pt 2_2018: |-
        # 有限转向

        你可能注意到了，除非你的手移动得非常慢而且非常小心，不然控制这个汽车很难。这是因为`roll`（转动）依赖于加速度计，可能会返回一个很大的数。记住，`roll`（转动）的范围从-90到90。

        # 这样做

        找个办法`roll`（转动）一个更小的数，来控制汽车。
        你可以使用所有的数学运算符。

        _挑战_：你能让汽车不要到达屏幕的边缘吗？
      CSD U6 Driver pt 2_2019: |-
        # 有限转向

        你可能注意到了，除非你的手移动得非常慢而且非常小心，不然控制这个汽车很难。这是因为`roll`（转动）依赖于加速度计，可能会返回一个很大的数。记住，`roll`（转动）的范围从-90到90。

        # 这样做

        找个办法`roll`（转动）一个更小的数，来控制汽车。
        你可以使用所有的数学运算符。

        _挑战_：你能让汽车不要到达屏幕的边缘吗？
      CSD U6 Driver pt1: |-
        # 方向盘

        这个游戏和你刚刚玩的守门员游戏很像，只有一点不同。用你的主板来作为汽车的方向盘（从这边移动到那边）。你需要避开红色的旗帜，并到达方格旗！

        # 这样做

        -   当程序开始时，让汽车往屏幕的下方移动。
        -   让汽车能往两侧运动。

        再想想以前做的程序，怎么才能更新这些值？
      CSD U6 Driver pt1_2018: |-
        # 方向盘

        这个游戏和你刚刚玩的守门员游戏很像，只有一点不同。用你的主板来作为汽车的方向盘（从这边移动到那边）。你需要避开红色的旗帜，并到达方格旗！

        # 这样做

        -   当程序开始时，让汽车往屏幕的下方移动。
        -   让汽车能往两侧运动。

        再想想以前做的程序，怎么才能更新这些值？
      CSD U6 Driver pt1_2019: |-
        # 方向盘

        这个游戏和你刚刚玩的守门员游戏很像，只有一点不同。用你的主板来作为汽车的方向盘（从这边移动到那边）。你需要避开红色的旗帜，并到达方格旗！

        # 这样做

        -   当程序开始时，让汽车往屏幕的下方移动。
        -   让汽车能往两侧运动。

        再想想以前做的程序，怎么才能更新这些值？
      CSD U6 LED all: "# 多功能灯\n\n这个应用能够让你选择三种类型的灯：开，闪烁和跳动。它也应该有个按钮让灯完全关掉。现在只有“开”按钮起作用，而“关”按钮完全没有。\n\n#
        \n\n这样做\n\n-   添加代码让“闪烁”和“跳动”按钮起作用。\n-   \\*\n    在设计模式，添加一个新的“关闭”按钮。\n-   添加代码让“关闭”按钮起作用。"
      CSD U6 LED all_2018: "# 多功能灯\n\n这个应用能够让你选择三种类型的灯：开，闪烁和跳动。它也应该有个按钮让灯完全关掉。现在只有“开”按钮起作用，而“关”按钮完全没有。\n\n#
        \n\n这样做\n\n-   添加代码让“闪烁”和“跳动”按钮起作用。\n-   \\*\n    在设计模式，添加一个新的“关闭”按钮。\n-   添加代码让“关闭”按钮起作用。"
      CSD U6 LED all_2019: "# 多功能灯\n\n这个应用能够让你选择三种类型的灯：开，闪烁和跳动。它也应该有个按钮让灯完全关掉。现在只有“开”按钮起作用，而“关”按钮完全没有。\n\n#
        \n\n这样做\n\n-   添加代码让“闪烁”和“跳动”按钮起作用。\n-   \\*\n    在设计模式，添加一个新的“关闭”按钮。\n-   添加代码让“关闭”按钮起作用。"
      CSD U6 LED toggle: |-
        # 灯开关

        这里多了三个你还没用过的LED模块。其中一个会让按钮像灯的开关一样工作，LED关闭时会点亮它，而打开时会关闭它。

        # 这样做

        -   试试`blink`（闪动），`toggle`（切换）和`pulse`（脉动）默默快来看看它们能做什么。
        -   用其中一个模块让按钮像灯开关一样工作。
        -   如果LED是关着的，这个按钮能让它打开。
        -   如果LED是开着的，这个按钮能让它关闭。
      CSD U6 LED toggle_2018: |-
        # 灯开关

        这里多了三个你还没用过的LED模块。其中一个会让按钮像灯的开关一样工作，LED关闭时会点亮它，而打开时会关闭它。

        # 这样做

        -   试试`blink`（闪动），`toggle`（切换）和`pulse`（脉动）默默快来看看它们能做什么。
        -   用其中一个模块让按钮像灯开关一样工作。
        -   如果LED是关着的，这个按钮能让它打开。
        -   如果LED是开着的，这个按钮能让它关闭。
      CSD U6 LED toggle_2019: |-
        # 灯开关

        这里多了三个你还没用过的LED模块。其中一个会让按钮像灯的开关一样工作，LED关闭时会点亮它，而打开时会关闭它。

        # 这样做

        -   试试`blink`（闪动），`toggle`（切换）和`pulse`（脉动）默默快来看看它们能做什么。
        -   用其中一个模块让按钮像灯开关一样工作。
        -   如果LED是关着的，这个按钮能让它打开。
        -   如果LED是开着的，这个按钮能让它关闭。
      CSD U6 LEDs color: |-
        # 增加一些颜色

        你可能已经注意到当你在上一级中使用`colorLeds[0].on()`时，LED点亮时是白色的。如果你不指定一个颜色，`on()`将点亮全部三个LED (红、绿、蓝)从而变成白色。你将在工具箱中看到一个叫`colorLeds[0].color()`的新命令，可以让你用类似"蓝"这样的字符串或者一个用`color()`命令的RGB数值指定颜色。

        # 这样做

        使用`.color()`命令把每个LED设置为不同颜色。
      CSD U6 LEDs color_2018: |-
        # 增加一些颜色

        你可能已经注意到当你在上一级中使用`colorLeds[0].on()`时，LED点亮时是白色的。如果你不指定一个颜色，`on()`将点亮全部三个LED (红、绿、蓝)从而变成白色。你将在工具箱中看到一个叫`colorLeds[0].color()`的新命令，可以让你用类似"蓝"这样的字符串或者一个用`color()`命令的RGB数值指定颜色。

        # 这样做

        使用`.color()`命令把每个LED设置为不同颜色。
      CSD U6 LEDs color_2019: |-
        # 增加一些颜色

        你可能已经注意到当你在上一级中使用`colorLeds[0].on()`时，LED点亮时是白色的。如果你不指定一个颜色，`on()`将点亮全部三个LED (红、绿、蓝)从而变成白色。你将在工具箱中看到一个叫`colorLeds[0].color()`的新命令，可以让你用类似"蓝"这样的字符串或者一个用`color()`命令的RGB数值指定颜色。

        # 这样做

        使用`.color()`命令把每个LED设置为不同颜色。
      CSD U6 Pedometer: |-
        # 计步器

        这个程序会用到`shake`（晃动）事件，它在主板被晃动时触发。它会在哦那个胡每次晃动主板时增加一步到计步器中。

        # 这样做

        -   改变事件，让它在每次主板晃动时触发。
        -   在事件里增加代码，让`steps`（步数）每次在主板晃动时增加。
      CSD U6 Pedometer_2018: |-
        # 计步器

        这个程序会用到`shake`（晃动）事件，它在主板被晃动时触发。它会在哦那个胡每次晃动主板时增加一步到计步器中。

        # 这样做

        -   改变事件，让它在每次主板晃动时触发。
        -   在事件里增加代码，让`steps`（步数）每次在主板晃动时增加。
      CSD U6 Pedometer_2019: |-
        # 计步器

        这个程序会用到`shake`（晃动）事件，它在主板被晃动时触发。它会在哦那个胡每次晃动主板时增加一步到计步器中。

        # 这样做

        -   改变事件，让它在每次主板晃动时触发。
        -   在事件里增加代码，让`steps`（步数）每次在主板晃动时增加。
      CSD U6 add LED button: |-
        # 使用事件

        这个程序有两个按钮。“on”（开）按钮能工作，但是“off”（关）按钮还需要编写程序。

        # 这样做

        -   添加代码让第二个按钮能关闭LED灯。
      CSD U6 add LED button_2018: |-
        # 使用事件

        这个程序有两个按钮。“on”（开）按钮能工作，但是“off”（关）按钮还需要编写程序。

        # 这样做

        -   添加代码让第二个按钮能关闭LED灯。
      CSD U6 add LED button_2019: |-
        # 使用事件

        这个程序有两个按钮。“on”（开）按钮能工作，但是“off”（关）按钮还需要编写程序。

        # 这样做

        -   添加代码让第二个按钮能关闭LED灯。
      CSD U6 analog challenge: |-
        # 挑战

        _在挑战前，请先问问老师。_

        现在，你已经练习了从各种模拟传感器中获取输入，并改变它们的范围。你能从传感器数据中找到有趣的用途吗？显示传感器的原始值是很容易的，但更有意思的是用不同的方法来表达数据。

        考虑下面的方法来使用传感器数据：

        -   使用主板的输出
        -   改变宽、高或UI元素的位置。
        -   使用条件来基于传感器数据显示不同的图片。
      CSD U6 analog challenge_2018: |-
        # 挑战

        _在挑战前，请先问问老师。_

        现在，你已经练习了从各种模拟传感器中获取输入，并改变它们的范围。你能从传感器数据中找到有趣的用途吗？显示传感器的原始值是很容易的，但更有意思的是用不同的方法来表达数据。

        考虑下面的方法来使用传感器数据：

        -   使用主板的输出
        -   改变宽、高或UI元素的位置。
        -   使用条件来基于传感器数据显示不同的图片。
      CSD U6 analog challenge_2019: |-
        # 挑战

        _在挑战前，请先问问老师。_

        现在，你已经练习了从各种模拟传感器中获取输入，并改变它们的范围。你能从传感器数据中找到有趣的用途吗？显示传感器的原始值是很容易的，但更有意思的是用不同的方法来表达数据。

        考虑下面的方法来使用传感器数据：

        -   使用主板的输出
        -   改变宽、高或UI元素的位置。
        -   使用条件来基于传感器数据显示不同的图片。
      CSD U6 analog data: |-
        # 数据事件

        每个模拟传感器在有新数据时，都会发出一个特殊的事件叫做“数据”。通过这个事件，我们能写出持续更新的程序。

        # 这样做

        这是课程里，你写的第一个程序，让我们看看是否能用“数据”事件来持续更新声音。

        -   创建一个事件处理函数来响应光线传感器的“数据”事件。
        -   将已有的代码移动到你的事件处理函数中。
      CSD U6 analog data_2018: |-
        # 数据事件

        每个模拟传感器在有新数据时，都会发出一个特殊的事件叫做“数据”。通过这个事件，我们能写出持续更新的程序。

        # 这样做

        这是课程里，你写的第一个程序，让我们看看是否能用“数据”事件来持续更新声音。

        -   创建一个事件处理函数来响应光线传感器的“数据”事件。
        -   将已有的代码移动到你的事件处理函数中。
      CSD U6 analog data_2019: |-
        # 数据事件

        每个模拟传感器在有新数据时，都会发出一个特殊的事件叫做“数据”。通过这个事件，我们能写出持续更新的程序。

        # 这样做

        这是课程里，你写的第一个程序，让我们看看是否能用“数据”事件来持续更新声音。

        -   创建一个事件处理函数来响应光线传感器的“数据”事件。
        -   将已有的代码移动到你的事件处理函数中。
      CSD U6 analog rbg 1: |-
        # 用颜色显示传感器读数

        在早先的预测关卡中，你已经见过如何用`setScale()`（设置范围）方法来将传感器读数的整个范围（0-1023）转换到RGB值得范围（0-255）。让我们用这个办法来做一个应用，来用一个颜色来表达三个模拟传感器的值。

        # 这样做

        要开始，我们只需要将传感器范围设置正确 - 不用担心实际的背景颜色。

        -   使用`sensor.setScale()`模块来设置每个灯光和声音传感器的范围为一个RGB颜色通道的范围。
        -   \*
            为这三个颜色的每一个创建一个变量，并分派给不同的传感器。
        -   用`console.log()`来测试你的变量是否在正确的范围里。

        _提示：顺序很重要。你需要在读取值之前设置好传感器的范围。_
        _提示：记住温度传感器可以读取摄氏和华氏温度 - 它可能已经给了你RGB范围内的值了。_
      CSD U6 analog rbg 1_2018: |-
        # 用颜色显示传感器读数

        在早先的预测关卡中，你已经见过如何用`setScale()`（设置范围）方法来将传感器读数的整个范围（0-1023）转换到RGB值得范围（0-255）。让我们用这个办法来做一个应用，来用一个颜色来表达三个模拟传感器的值。

        # 这样做

        要开始，我们只需要将传感器范围设置正确 - 不用担心实际的背景颜色。

        -   使用`sensor.setScale()`模块来设置每个灯光和声音传感器的范围为一个RGB颜色通道的范围。
        -   \*
            为这三个颜色的每一个创建一个变量，并分派给不同的传感器。
        -   用`console.log()`来测试你的变量是否在正确的范围里。

        _提示：顺序很重要。你需要在读取值之前设置好传感器的范围。_
        _提示：记住温度传感器可以读取摄氏和华氏温度 - 它可能已经给了你RGB范围内的值了。_
      CSD U6 analog rbg 1_2019: |-
        # 用颜色显示传感器读数

        在早先的预测关卡中，你已经见过如何用`setScale()`（设置范围）方法来将传感器读数的整个范围（0-1023）转换到RGB值得范围（0-255）。让我们用这个办法来做一个应用，来用一个颜色来表达三个模拟传感器的值。

        # 这样做

        要开始，我们只需要将传感器范围设置正确 - 不用担心实际的背景颜色。

        -   使用`sensor.setScale()`模块来设置每个灯光和声音传感器的范围为一个RGB颜色通道的范围。
        -   \*
            为这三个颜色的每一个创建一个变量，并分派给不同的传感器。
        -   用`console.log()`来测试你的变量是否在正确的范围里。

        _提示：顺序很重要。你需要在读取值之前设置好传感器的范围。_
        _提示：记住温度传感器可以读取摄氏和华氏温度 - 它可能已经给了你RGB范围内的值了。_
      CSD U6 analog rbg 2: |-
        # 将颜色放到屏幕上

        现在，你的传感器数据已经在RGB范围内了。你能开始设置屏幕颜色了。

        # 这样做

        -   添加一个`setProperty()`模块，并且设置它来改变屏幕的背景颜色。
        -   添加一个`rgb()`模块到`setProperty()`的最后一个参数上。
        -   将这三个颜色变量作为你创建的`rgb()`模块的输入。
      CSD U6 analog rbg 2_2018: |-
        # 将颜色放到屏幕上

        现在，你的传感器数据已经在RGB范围内了。你能开始设置屏幕颜色了。

        # 这样做

        -   添加一个`setProperty()`模块，并且设置它来改变屏幕的背景颜色。
        -   添加一个`rgb()`模块到`setProperty()`的最后一个参数上。
        -   将这三个颜色变量作为你创建的`rgb()`模块的输入。
      CSD U6 analog rbg 2_2019: |-
        # 将颜色放到屏幕上

        现在，你的传感器数据已经在RGB范围内了。你能开始设置屏幕颜色了。

        # 这样做

        -   添加一个`setProperty()`模块，并且设置它来改变屏幕的背景颜色。
        -   添加一个`rgb()`模块到`setProperty()`的最后一个参数上。
        -   将这三个颜色变量作为你创建的`rgb()`模块的输入。
      CSD U6 analog rgb 3: |-
        # 连续更新

        如果这个传感器到颜色的应用只能在启动应用时设置一次颜色，那它不会非常有用。你可以用传感器的“数据”事件来让你的应用能够在每次值改变时，持续的更新背景颜色。

        将你的`setProperty()`模块移动到其中一个传感器的事件处理函数中，从而让应用能够持续更新。
      CSD U6 analog rgb 3_2018: |-
        # 连续更新

        如果这个传感器到颜色的应用只能在启动应用时设置一次颜色，那它不会非常有用。你可以用传感器的“数据”事件来让你的应用能够在每次值改变时，持续的更新背景颜色。

        将你的`setProperty()`模块移动到其中一个传感器的事件处理函数中，从而让应用能够持续更新。
      CSD U6 analog rgb 3_2019: |-
        # 连续更新

        如果这个传感器到颜色的应用只能在启动应用时设置一次颜色，那它不会非常有用。你可以用传感器的“数据”事件来让你的应用能够在每次值改变时，持续的更新背景颜色。

        将你的`setProperty()`模块移动到其中一个传感器的事件处理函数中，从而让应用能够持续更新。
      CSD U6 analog temp: |-
        # 制作一个温度应用程序

        光线和声音传感器只能输出一个原始的`value`属性值，而温度传感器更聪明一些。它有两个属性`tempSensor.F`和`tempSensor.C`，而不是一个`tempSensor.value`。这样，它能将原始输入转换为摄氏或者华氏温度。

        # 这样做

        做一个简单的温度应用来从温度传感器中读出值。
        你的应用可以显示华氏或摄氏温度（或者都显示！）

        \*
        用设计模式，创建一个按钮来更新，并加上一个标签来显示温度

        -   添加一个事件处理函数来响应点击更新按钮的事件
        -   向事件处理函数中添加代码来读取温度传感器，并显示在屏幕上
      CSD U6 analog temp_2018: |-
        # 制作一个温度应用程序

        光线和声音传感器只能输出一个原始的`value`属性值，而温度传感器更聪明一些。它有两个属性`tempSensor.F`和`tempSensor.C`，而不是一个`tempSensor.value`。这样，它能将原始输入转换为摄氏或者华氏温度。

        # 这样做

        做一个简单的温度应用来从温度传感器中读出值。
        你的应用可以显示华氏或摄氏温度（或者都显示！）

        \*
        用设计模式，创建一个按钮来更新，并加上一个标签来显示温度

        -   添加一个事件处理函数来响应点击更新按钮的事件
        -   向事件处理函数中添加代码来读取温度传感器，并显示在屏幕上
      CSD U6 analog temp_2019: |-
        # 制作一个温度应用程序

        光线和声音传感器只能输出一个原始的`value`属性值，而温度传感器更聪明一些。它有两个属性`tempSensor.F`和`tempSensor.C`，而不是一个`tempSensor.value`。这样，它能将原始输入转换为摄氏或者华氏温度。

        # 这样做

        做一个简单的温度应用来从温度传感器中读出值。
        你的应用可以显示华氏或摄氏温度（或者都显示！）

        \*
        用设计模式，创建一个按钮来更新，并加上一个标签来显示温度

        -   添加一个事件处理函数来响应点击更新按钮的事件
        -   向事件处理函数中添加代码来读取温度传感器，并显示在屏幕上
      CSD U6 analog threshold: |-
        # 改变阈值

        默认情况下，传感器的”变化“事件在每次传感器的值改变时都会触发，甚至只改变一点的时候。光线和声音传感器一直都在变化，因此你可能希望”change“（变化）事件触发的次数少一点。`threshold`（阈值）属性允许你设置，当传感器改变多少时，才应该触发一个”change“（变化）事件。那么，设置`soundSensor.threshold
        = 100`会让值增加或减少100的时候才会触发变化事件。

        # 这样做

        当声音发生任何变化时，这个程序会改变屏幕的背景颜色。但我们希望变化值的大一点（比如响亮一点的噪声）的时候，这个值才发生变化。用`soundSensor.threshold`（声音传感器.阈值）模块来修复它。

        -   在事件处理函数前，添加一个`soundSensor.threshold`模块
        -   测试一下阈值的值会如何影响"change"（改变）事件
        -   选择一个阈值，让屏幕颜色只有在大一点的噪声时才发生变化。

        _提示：你的阈值应该依赖于房间里的噪音有多大，并且有多大的变化范围。一个阈值可能在一个安静的房间里有作用，但到了另一个吵闹的课堂上就不行了。_
      CSD U6 array piano: "# 钢琴恐慌\n\n现在，你已经用了数组中的元素了。现在，你需要改变数组中的内容。\n\n我们的好朋友钢琴回来了，除了它现在从两个数组来弹奏音符：`notes`（音符），会按住普通音符（C,
        D, E, F, G, A, B），并且`sharpNotes`会按下升音音符（C#, D#, F#, G#, A#）。\n\n# \n\n这样做\n\n`sharpNotes`数组现在只有一个元素。\n\n-
        \  修复数组，使得钢琴上的升音键能够正常弹奏音符。\n\n_提示：在文本模式修改数组会非常容易。你随时可以通过点击代码工作区右上角的按钮来在文本和模块模式间切换。_"
      CSD U6 array piano_2018: "# 钢琴恐慌\n\n现在，你已经用了数组中的元素了。现在，你需要改变数组中的内容。\n\n我们的好朋友钢琴回来了，除了它现在从两个数组来弹奏音符：`notes`（音符），会按住普通音符（C,
        D, E, F, G, A, B），并且`sharpNotes`会按下升音音符（C#, D#, F#, G#, A#）。\n\n# \n\n这样做\n\n`sharpNotes`数组现在只有一个元素。\n\n-
        \  修复数组，使得钢琴上的升音键能够正常弹奏音符。\n\n_提示：在文本模式修改数组会非常容易。你随时可以通过点击代码工作区右上角的按钮来在文本和模块模式间切换。_"
      CSD U6 array piano_2019: "# 钢琴恐慌\n\n现在，你已经用了数组中的元素了。现在，你需要改变数组中的内容。\n\n我们的好朋友钢琴回来了，除了它现在从两个数组来弹奏音符：`notes`（音符），会按住普通音符（C,
        D, E, F, G, A, B），并且`sharpNotes`会按下升音音符（C#, D#, F#, G#, A#）。\n\n# \n\n这样做\n\n`sharpNotes`数组现在只有一个元素。\n\n-
        \  修复数组，使得钢琴上的升音键能够正常弹奏音符。\n\n_提示：在文本模式修改数组会非常容易。你随时可以通过点击代码工作区右上角的按钮来在文本和模块模式间切换。_"
      CSD U6 challenge motorcycle_2018: |-
        # 挑战

        用这个程序来对取值和赋值属性进行更多的试验。你可以尝试以下办法：

        -   用切换开关来改变摩托车的移动方向，向上并向下移动。
        -   用有颜色名称的下拉框来改变摩托车的颜色。
        -   当摩托车到达屏幕的最顶端或最低端时，打开蜂鸣器或LED灯。
      CSD U6 challenge motorcycle_2019: |-
        # 挑战

        用这个程序来对取值和赋值属性进行更多的试验。你可以尝试以下办法：

        -   用切换开关来改变摩托车的移动方向，向上并向下移动。
        -   用有颜色名称的下拉框来改变摩托车的颜色。
        -   当摩托车到达屏幕的最顶端或最低端时，打开蜂鸣器或LED灯。
      CSD U6 change: |-
        # 当改变

        在上一关，程序只会在你点击了左按钮时从滑动条获得间隔值。有时，你会希望当用户选择了新的值以后，尽快改变LED的间隔值。为了做到这一点，你需要使用“change”（改变）事件。

        # 这样做

        -   看看程序里的第一个事件模块，并找到它在哪里放了“change”。
        -   在事件模块中，获得从滑动条里获得间隔值，并将它用到LED闪烁的新速度上。
        -   运行你的程序，移动滑动条来看看LED的速度是否自动变化了。
      CSD U6 change_2018: |-
        # 当改变

        在上一关，程序只会在你点击了左按钮时从滑动条获得间隔值。有时，你会希望当用户选择了新的值以后，尽快改变LED的间隔值。为了做到这一点，你需要使用“change”（改变）事件。

        # 这样做

        -   看看程序里的第一个事件模块，并找到它在哪里放了“change”。
        -   在事件模块中，获得从滑动条里获得间隔值，并将它用到LED闪烁的新速度上。
        -   运行你的程序，移动滑动条来看看LED的速度是否自动变化了。
      CSD U6 change_2019: |-
        # 当改变

        在上一关，程序只会在你点击了左按钮时从滑动条获得间隔值。有时，你会希望当用户选择了新的值以后，尽快改变LED的间隔值。为了做到这一点，你需要使用“change”（改变）事件。

        # 这样做

        -   看看程序里的第一个事件模块，并找到它在哪里放了“change”。
        -   在事件模块中，获得从滑动条里获得间隔值，并将它用到LED闪烁的新速度上。
        -   运行你的程序，移动滑动条来看看LED的速度是否自动变化了。
      CSD U6 circuit createButton: "<div style=\"float: right\"\nmarkdown=\"1\">\n\n![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\n\n</div>\n\n#
        \n\n制作自己的按钮\n\n和LED灯一样，按钮是非常简单的电路，很容易加到你的主板上。同样，按钮也应该从一个有需要的针上连接到一个地线针上。但是和LED灯不一样的是，按钮电路应该在中间被断开。当连上电路时，就会触发一个按钮按下的事件。\n\n#
        这样做\n\n-   找出两条电线。\n-   \\*\n    将一条线连接到一个空闲的有序号的针脚上。\n-   将另一条线连接到地线针脚上。\n-
        \  更新第二条线，让它能够引用选择的针脚。\n-   \\*\n    运行提供的代码。\n-   程序运行后，将两条电线没接的那头碰在一起来\"按下\"按钮。\n\n_提示：有很多种物质都能用来做按钮电路，只要它们导电就行。试着用铝箔，银器或者回形针来做按钮。_"
      CSD U6 circuit createButton_2018: "<div style=\"float: right\"\nmarkdown=\"1\">\n\n![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\n\n</div>\n\n#
        \n\n制作自己的按钮\n\n和LED灯一样，按钮是非常简单的电路，很容易加到你的主板上。同样，按钮也应该从一个有需要的针上连接到一个地线针上。但是和LED灯不一样的是，按钮电路应该在中间被断开。当连上电路时，就会触发一个按钮按下的事件。\n\n#
        这样做\n\n-   找出两条电线。\n-   \\*\n    将一条线连接到一个空闲的有序号的针脚上。\n-   将另一条线连接到地线针脚上。\n-
        \  更新第二条线，让它能够引用选择的针脚。\n-   \\*\n    运行提供的代码。\n-   程序运行后，将两条电线没接的那头碰在一起来\"按下\"按钮。\n\n_提示：有很多种物质都能用来做按钮电路，只要它们导电就行。试着用铝箔，银器或者回形针来做按钮。_"
      CSD U6 circuit createButton_2019: "<div style=\"float: right\"\nmarkdown=\"1\">\n\n![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\n\n</div>\n\n#
        \n\n制作自己的按钮\n\n和LED灯一样，按钮是非常简单的电路，很容易加到你的主板上。同样，按钮也应该从一个有需要的针上连接到一个地线针上。但是和LED灯不一样的是，按钮电路应该在中间被断开。当连上电路时，就会触发一个按钮按下的事件。\n\n#
        这样做\n\n-   找出两条电线。\n-   \\*\n    将一条线连接到一个空闲的有序号的针脚上。\n-   将另一条线连接到地线针脚上。\n-
        \  更新第二条线，让它能够引用选择的针脚。\n-   \\*\n    运行提供的代码。\n-   程序运行后，将两条电线没接的那头碰在一起来\"按下\"按钮。\n\n_提示：有很多种物质都能用来做按钮电路，只要它们导电就行。试着用铝箔，银器或者回形针来做按钮。_"
      CSD U6 circuit createLed: |-
        # 创建主板对象

        你可能注意到了，我们用了些不同工具箱抽屉里的新模块。**电路**抽屉里有所有的电路游戏板内置的对象，但当你开始给自己的电路布线时，工具包就不能知道所有的事情了。

        新的**制作者**抽屉包含了通用目的的一些命令，而不是为电路游戏板自定义的命令。除了你已经见过的`pinMode()`（针模式)和`digitalWrite()`（数字写入）外，还包括了能再电路板创建新对象的命令，它们能被像**电路**抽屉里的其它模块一样编程。
        例如，`var myLed = createLed()`命令，会创建一个LED对象，它的行为就像你用过的`led`模块一样。

        # 这样做

        现在，你要创建一个新的主板对象。我们没有模块可以做这件事，你需要在文本模式下来创建。你仍然可以从熟悉的**电路**抽屉里拖拽出模块，你只需要改变对象的名字。

        -   将你的LED像以前一样连好线路（连接到针2）
        -   确保你在文本模式下，而不是模块模式下。
        -   拖拽出一个`led.blink()`模块到注释`// Blink myLed`下。
        -   将文本`led`改为`myLed`。
        -   测试你的代码。
      CSD U6 circuit createLed_2018: |-
        # 创建主板对象

        你可能注意到了，我们用了些不同工具箱抽屉里的新模块。**电路**抽屉里有所有的电路游戏板内置的对象，但当你开始给自己的电路布线时，工具包就不能知道所有的事情了。

        新的**制作者**抽屉包含了通用目的的一些命令，而不是为电路游戏板自定义的命令。除了你已经见过的`pinMode()`（针模式)和`digitalWrite()`（数字写入）外，还包括了能再电路板创建新对象的命令，它们能被像**电路**抽屉里的其它模块一样编程。
        例如，`var myLed = createLed()`命令，会创建一个LED对象，它的行为就像你用过的`led`模块一样。

        # 这样做

        现在，你要创建一个新的主板对象。我们没有模块可以做这件事，你需要在文本模式下来创建。你仍然可以从熟悉的**电路**抽屉里拖拽出模块，你只需要改变对象的名字。

        -   将你的LED像以前一样连好线路（连接到针2）
        -   确保你在文本模式下，而不是模块模式下。
        -   拖拽出一个`led.blink()`模块到注释`// Blink myLed`下。
        -   将文本`led`改为`myLed`。
        -   测试你的代码。
      CSD U6 circuit createLed_2019: |-
        # 创建主板对象

        你可能注意到了，我们用了些不同工具箱抽屉里的新模块。**电路**抽屉里有所有的电路游戏板内置的对象，但当你开始给自己的电路布线时，工具包就不能知道所有的事情了。

        新的**制作者**抽屉包含了通用目的的一些命令，而不是为电路游戏板自定义的命令。除了你已经见过的`pinMode()`（针模式)和`digitalWrite()`（数字写入）外，还包括了能再电路板创建新对象的命令，它们能被像**电路**抽屉里的其它模块一样编程。
        例如，`var myLed = createLed()`命令，会创建一个LED对象，它的行为就像你用过的`led`模块一样。

        # 这样做

        现在，你要创建一个新的主板对象。我们没有模块可以做这件事，你需要在文本模式下来创建。你仍然可以从熟悉的**电路**抽屉里拖拽出模块，你只需要改变对象的名字。

        -   将你的LED像以前一样连好线路（连接到针2）
        -   确保你在文本模式下，而不是模块模式下。
        -   拖拽出一个`led.blink()`模块到注释`// Blink myLed`下。
        -   将文本`led`改为`myLed`。
        -   测试你的代码。
      CSD U6 circuit multi led: |-
        # 创建主板对象

        使用`createLed()`模块能让你连接和控制主板能够容纳的那么多的LED灯。每个LED灯都需要连接到不同的编号的针脚上，但它们可以连接到同一个地线针脚上。

        # 这样做

        让当前的LED灯连接到针脚2上，但增加另一个LED灯随意连接到某个有序号的针脚上。对你的新LED灯：

        -   添加一个`var myLed = createLed()`模块。
        -   将变量标签`myLed`替换为一个唯一的标签。
        -   添加一个`led.blink()`命令。
        -   将文本`led`替换为新的LED变量。
        -   测试你的代码。

        _挑战：试着增加第三个LED灯，让三个灯都用不同的间隔时间闪烁。_
      CSD U6 circuit multi led_2018: |-
        # 创建主板对象

        使用`createLed()`模块能让你连接和控制主板能够容纳的那么多的LED灯。每个LED灯都需要连接到不同的编号的针脚上，但它们可以连接到同一个地线针脚上。

        # 这样做

        让当前的LED灯连接到针脚2上，但增加另一个LED灯随意连接到某个有序号的针脚上。对你的新LED灯：

        -   添加一个`var myLed = createLed()`模块。
        -   将变量标签`myLed`替换为一个唯一的标签。
        -   添加一个`led.blink()`命令。
        -   将文本`led`替换为新的LED变量。
        -   测试你的代码。

        _挑战：试着增加第三个LED灯，让三个灯都用不同的间隔时间闪烁。_
      CSD U6 circuit multi led_2019: |-
        # 创建主板对象

        使用`createLed()`模块能让你连接和控制主板能够容纳的那么多的LED灯。每个LED灯都需要连接到不同的编号的针脚上，但它们可以连接到同一个地线针脚上。

        # 这样做

        让当前的LED灯连接到针脚2上，但增加另一个LED灯随意连接到某个有序号的针脚上。对你的新LED灯：

        -   添加一个`var myLed = createLed()`模块。
        -   将变量标签`myLed`替换为一个唯一的标签。
        -   添加一个`led.blink()`命令。
        -   将文本`led`替换为新的LED变量。
        -   测试你的代码。

        _挑战：试着增加第三个LED灯，让三个灯都用不同的间隔时间闪烁。_
      CSD U6 circuit pinMode: "# 连接电路\n\n你可以使用任何编号的垫片来将额外的电路添加到主板上。让我们使用针脚2 来添加另一个
        LED. \n\n# 这样做\n\n-   用一根电线把针脚2连接到 led 的正极 (+) 侧。\n-   用另一根电线把LED的负 (-) 端连接到接地
        (地线) 针脚 (具体是哪个针脚没关系)\n-   运行此程序来测试你的电路。如果正常工作的话, 你的LED灯应该会亮。\n\n_调试提示: LED只有在电流从正向负值流动时才会亮。如果你的LED灯不亮，请确保它的方向是正确的。_"
      CSD U6 circuit pinMode_2018: "# 连接电路\n\n你可以使用任何编号的垫片来将额外的电路添加到主板上。让我们使用针脚2 来添加另一个
        LED. \n\n# 这样做\n\n-   用一根电线把针脚2连接到 led 的正极 (+) 侧。\n-   用另一根电线把LED的负 (-) 端连接到接地
        (地线) 针脚 (具体是哪个针脚没关系)\n-   运行此程序来测试你的电路。如果正常工作的话, 你的LED灯应该会亮。\n\n_调试提示: LED只有在电流从正向负值流动时才会亮。如果你的LED灯不亮，请确保它的方向是正确的。_"
      CSD U6 circuit pinMode_2019: "# 连接电路\n\n你可以使用任何编号的垫片来将额外的电路添加到主板上。让我们使用针脚2 来添加另一个
        LED. \n\n# 这样做\n\n-   用一根电线把针脚2连接到 led 的正极 (+) 侧。\n-   用另一根电线把LED的负 (-) 端连接到接地
        (地线) 针脚 (具体是哪个针脚没关系)\n-   运行此程序来测试你的电路。如果正常工作的话, 你的LED灯应该会亮。\n\n_调试提示: LED只有在电流从正向负值流动时才会亮。如果你的LED灯不亮，请确保它的方向是正确的。_"
      CSD U6 circuit smart bike blinker buttons: |-
        # 智能自行车- 方向灯控件

        转弯信号被连接上后，你需要编程一些按钮来控制它们。你可能想要把按钮放在自行车上别的地方来更好地控制你的转弯信号，但我们现在只用嵌入式的左和右按钮。

        # 这样做

        -   添加事件处理器让左转信号在左按钮被压下去的时候亮起。
        -   添加事件处理器让右转信号在右按钮被压下去的时候亮起。
        -   测试你的代码！

        _提示：你需要在文本模式中让闪光灯工作，因为没有给这个加到主板上的元素内置模块。_
      CSD U6 circuit smart bike blinker buttons_2018: |-
        # 智能自行车- 方向灯控件

        转弯信号被连接上后，你需要编程一些按钮来控制它们。你可能想要把按钮放在自行车上别的地方来更好地控制你的转弯信号，但我们现在只用嵌入式的左和右按钮。

        # 这样做

        -   添加事件处理器让左转信号在左按钮被压下去的时候亮起。
        -   添加事件处理器让右转信号在右按钮被压下去的时候亮起。
        -   测试你的代码！

        _提示：你需要在文本模式中让闪光灯工作，因为没有给这个加到主板上的元素内置模块。_
      CSD U6 circuit smart bike blinker buttons_2019: |-
        # 智能自行车- 方向灯控件

        转弯信号被连接上后，你需要编程一些按钮来控制它们。你可能想要把按钮放在自行车上别的地方来更好地控制你的转弯信号，但我们现在只用嵌入式的左和右按钮。

        # 这样做

        -   添加事件处理器让左转信号在左按钮被压下去的时候亮起。
        -   添加事件处理器让右转信号在右按钮被压下去的时候亮起。
        -   测试你的代码！

        _提示：你需要在文本模式中让闪光灯工作，因为没有给这个加到主板上的元素内置模块。_
      CSD U6 circuit smart bike blinkers: "# 智能自行车 - 方向灯\n\n使用你的规划指南，把两个可以作为方向灯的LED连接到一起。为了确保转向灯撞到了正确的把手上，确保它们的电线向相反的方向延伸。\n\n#
        这样做\n\n使用弹簧夹，电线，或其它导电材料把两个LED 连接到主板上，作为每个转向方向灯。\n\n-   把每个LED 连接到主板上不同编码的针脚上。\n-
        \  使用 `createLed()`模块来为每个方向灯来创建一个LED 对象。\n\n_提示：在选择要使用的针脚时，考虑方向灯如何安装可以使得布线更容易一些。_ "
      CSD U6 circuit smart bike blinkers_2018: "# 智能自行车 - 方向灯\n\n使用你的规划指南，把两个可以作为方向灯的LED连接到一起。为了确保转向灯撞到了正确的把手上，确保它们的电线向相反的方向延伸。\n\n#
        这样做\n\n使用弹簧夹，电线，或其它导电材料把两个LED 连接到主板上，作为每个转向方向灯。\n\n-   把每个LED 连接到主板上不同编码的针脚上。\n-
        \  使用 `createLed()`模块来为每个方向灯来创建一个LED 对象。\n\n_提示：在选择要使用的针脚时，考虑方向灯如何安装可以使得布线更容易一些。_ "
      CSD U6 circuit smart bike blinkers_2019: "# 智能自行车 - 方向灯\n\n使用你的规划指南，把两个可以作为方向灯的LED连接到一起。为了确保转向灯撞到了正确的把手上，确保它们的电线向相反的方向延伸。\n\n#
        这样做\n\n使用弹簧夹，电线，或其它导电材料把两个LED 连接到主板上，作为每个转向方向灯。\n\n-   把每个LED 连接到主板上不同编码的针脚上。\n-
        \  使用 `createLed()`模块来为每个方向灯来创建一个LED 对象。\n\n_提示：在选择要使用的针脚时，考虑方向灯如何安装可以使得布线更容易一些。_ "
      CSD U6 circuit smart bike buzzer: |-
        # 智能自行车-蜂鸣器

        现在我们知道如何添加更多的按钮，你可以添加一个按钮来控制智能自行车的喇叭。

        # 这样做

        使用已连接到主板的按钮, 找到一个放置喇叭按钮的好位置。然后：

        -   为喇叭按钮创建一个按钮对象
        -   添加一个事件处理器，在按下按钮时发出嗡嗡声

        _提示：你创建的按钮对象不会在 "onBoardEvent ()" （当主板上发生事件时）下拉列表中, 因此需要键入已选的名称。一定不要使用引号！_
      CSD U6 circuit smart bike buzzer_2018: |-
        # 智能自行车-蜂鸣器

        现在我们知道如何添加更多的按钮，你可以添加一个按钮来控制智能自行车的喇叭。

        # 这样做

        使用已连接到主板的按钮, 找到一个放置喇叭按钮的好位置。然后：

        -   为喇叭按钮创建一个按钮对象
        -   添加一个事件处理器，在按下按钮时发出嗡嗡声

        _提示：你创建的按钮对象不会在 "onBoardEvent ()" （当主板上发生事件时）下拉列表中, 因此需要键入已选的名称。一定不要使用引号！_
      CSD U6 circuit smart bike buzzer_2019: |-
        # 智能自行车-蜂鸣器

        现在我们知道如何添加更多的按钮，你可以添加一个按钮来控制智能自行车的喇叭。

        # 这样做

        使用已连接到主板的按钮, 找到一个放置喇叭按钮的好位置。然后：

        -   为喇叭按钮创建一个按钮对象
        -   添加一个事件处理器，在按下按钮时发出嗡嗡声

        _提示：你创建的按钮对象不会在 "onBoardEvent ()" （当主板上发生事件时）下拉列表中, 因此需要键入已选的名称。一定不要使用引号！_
      CSD U6 circuit smart bike final: "# 智能自行车-最终润色\n\n此时, 你的智能自行车应该具备其所有基本功能。现在是做最后润色的时候了。\n\n#
        \n\n这样做\n\n这时候，你可能要分组来完成任务, 让小组的一些成员专注于原型的物理方面, 其他人则致力于改进代码。由于这是一个原型, 不要想着一切都完美,
        但要确保原型足够体现你的设计，可以进行测试并收集回馈。"
      CSD U6 circuit smart bike final_2018: "# 智能自行车-最终润色\n\n此时, 你的智能自行车应该具备其所有基本功能。现在是做最后润色的时候了。\n\n#
        \n\n这样做\n\n这时候，你可能要分组来完成任务, 让小组的一些成员专注于原型的物理方面, 其他人则致力于改进代码。由于这是一个原型, 不要想着一切都完美,
        但要确保原型足够体现你的设计，可以进行测试并收集回馈。"
      CSD U6 circuit smart bike final_2019: "# 智能自行车-最终润色\n\n此时, 你的智能自行车应该具备其所有基本功能。现在是做最后润色的时候了。\n\n#
        \n\n这样做\n\n这时候，你可能要分组来完成任务, 让小组的一些成员专注于原型的物理方面, 其他人则致力于改进代码。由于这是一个原型, 不要想着一切都完美,
        但要确保原型足够体现你的设计，可以进行测试并收集回馈。"
      CSD U6 circuit smart bike light: |-
        # 智能自行车-车灯

        我们需要弄清楚的智能自行车计划的最后一部分是自动车头灯。

        # 这样做

        首先要决定你的车头灯要用什么。你可以添加另一个 LED 电路, 或者你可以找到一种方式来安装主板使之允许使用有颜色的LED灯作为车灯。
        一旦你想出车灯的物理布局, 添加代码到程序中，让它依照亮度的明暗来打开和关掉车灯。

        _提示: 如果使用的是内置的彩色LED灯，你可能需要保护光传感器，确保它相应的是周围光线的水平, 而不是指示灯的光线。_
      CSD U6 circuit smart bike light_2018: |-
        # 智能自行车-车灯

        我们需要弄清楚的智能自行车计划的最后一部分是自动车头灯。

        # 这样做

        首先要决定你的车头灯要用什么。你可以添加另一个 LED 电路, 或者你可以找到一种方式来安装主板使之允许使用有颜色的LED灯作为车灯。
        一旦你想出车灯的物理布局, 添加代码到程序中，让它依照亮度的明暗来打开和关掉车灯。

        _提示: 如果使用的是内置的彩色LED灯，你可能需要保护光传感器，确保它相应的是周围光线的水平, 而不是指示灯的光线。_
      CSD U6 circuit smart bike light_2019: |-
        # 智能自行车-车灯

        我们需要弄清楚的智能自行车计划的最后一部分是自动车头灯。

        # 这样做

        首先要决定你的车头灯要用什么。你可以添加另一个 LED 电路, 或者你可以找到一种方式来安装主板使之允许使用有颜色的LED灯作为车灯。
        一旦你想出车灯的物理布局, 添加代码到程序中，让它依照亮度的明暗来打开和关掉车灯。

        _提示: 如果使用的是内置的彩色LED灯，你可能需要保护光传感器，确保它相应的是周围光线的水平, 而不是指示灯的光线。_
      CSD U6 colorLED on: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif"
        style="float: right; margin: 10px;">

        # colorLeds（彩色LED灯）

        彩色LED灯可以使用与红色LED灯相同的基本命令, 例如`on()`（开） 和`off()`（关）。该程序应该会如图所示打开和关闭底部LED，但是只有一个LED灯在工作。

        # 这样做

        \*
        读取并运行该代码, 查看程序是如何打开和关闭左下角 的LED。

        -   添加更多代码使两个底部LED都能开关。
      CSD U6 colorLED on_2018: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif"
        style="float: right; margin: 10px;">

        # colorLeds（彩色LED灯）

        彩色LED灯可以使用与红色LED灯相同的基本命令, 例如`on()`（开） 和`off()`（关）。该程序应该会如图所示打开和关闭底部LED，但是只有一个LED灯在工作。

        # 这样做

        \*
        读取并运行该代码, 查看程序是如何打开和关闭左下角 的LED。

        -   添加更多代码使两个底部LED都能开关。
      CSD U6 colorLED on_2019: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif"
        style="float: right; margin: 10px;">

        # colorLeds（彩色LED灯）

        彩色LED灯可以使用与红色LED灯相同的基本命令, 例如`on()`（开） 和`off()`（关）。该程序应该会如图所示打开和关闭底部LED，但是只有一个LED灯在工作。

        # 这样做

        \*
        读取并运行该代码, 查看程序是如何打开和关闭左下角 的LED。

        -   添加更多代码使两个底部LED都能开关。
      CSD U6 colorLeds debug_2018: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # 调试: 彩色LED灯

        你能调试索引值，来让彩虹像图片上显示的一样吗？
      CSD U6 colorLeds debug_2019: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # 调试: 彩色LED灯

        你能调试索引值，来让彩虹像图片上显示的一样吗？
      CSD U6 colorLeds intensity: |-
        # 改变亮度

        `intensity()`（强度）指令可以让你设置LED的亮度（或者叫做_强度_）为1到100的值。这个程序让你能够为你的彩虹灯选择三个不同级别的亮度，但中间级别还不能工作。

        # 这样做

        \*
        阅读程序查看"Bright"（亮）和"Dim"（暗）按钮是如何工作的。
        \*
        添加代码，使得"Medium"（中等）按钮可以调整彩虹的亮度到中等（在”明亮“和”昏暗“之间）。 ([显示在哪里](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2018: |-
        # 改变亮度

        `intensity()`（强度）指令可以让你设置LED的亮度（或者叫做_强度_）为1到100的值。这个程序让你能够为你的彩虹灯选择三个不同级别的亮度，但中间级别还不能工作。

        # 这样做

        \*
        阅读程序查看"Bright"（亮）和"Dim"（暗）按钮是如何工作的。
        \*
        添加代码，使得"Medium"（中等）按钮可以调整彩虹的亮度到中等（在”明亮“和”昏暗“之间）。 ([显示在哪里](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2019: |-
        # 改变亮度

        `intensity()`（强度）指令可以让你设置LED的亮度（或者叫做_强度_）为1到100的值。这个程序让你能够为你的彩虹灯选择三个不同级别的亮度，但中间级别还不能工作。

        # 这样做

        \*
        阅读程序查看"Bright"（亮）和"Dim"（暗）按钮是如何工作的。
        \*
        添加代码，使得"Medium"（中等）按钮可以调整彩虹的亮度到中等（在”明亮“和”昏暗“之间）。 ([显示在哪里](#triggercallout=code_triggered))
      CSD U6 colorLeds light pattern: |-
        # 光图案

        这个应用已经有一个光图案程序，它可以通过点击按钮来激活。请注意, 我们将此图案放入一个函数中，以使代码更简洁和清晰。

        # 这样做

        创建你自己的光图案函数 - 可以是您最喜欢的假日、学院、运动队的颜色，或者尝试用光来创建一个图像。

        在你创建完新的函数后，添加了一个按钮和事件处理程序, 以便您可以在两个光图案之间进行切换。
      CSD U6 colorLeds light pattern_2018: |-
        # 光图案

        这个应用已经有一个光图案程序，它可以通过点击按钮来激活。请注意, 我们将此图案放入一个函数中，以使代码更简洁和清晰。

        # 这样做

        创建你自己的光图案函数 - 可以是您最喜欢的假日、学院、运动队的颜色，或者尝试用光来创建一个图像。

        在你创建完新的函数后，添加了一个按钮和事件处理程序, 以便您可以在两个光图案之间进行切换。
      CSD U6 colorLeds light pattern_2019: |-
        # 光图案

        这个应用已经有一个光图案程序，它可以通过点击按钮来激活。请注意, 我们将此图案放入一个函数中，以使代码更简洁和清晰。

        # 这样做

        创建你自己的光图案函数 - 可以是您最喜欢的假日、学院、运动队的颜色，或者尝试用光来创建一个图像。

        在你创建完新的函数后，添加了一个按钮和事件处理程序, 以便您可以在两个光图案之间进行切换。
      CSD U6 create LED app: |-
        # 制作你的应用程序 - 屏幕

        现在，和你的伙伴一起，让你的应用程序使用LED。并讨论一下你想要做什么样的应用程序。

        # 这样做

        -   和你的伙伴讨论一下你的应用里需要什么样的屏幕元素？是否需要...
        -   按钮？
        -   图片？
        -   文本？
        -   在设计模式中，添加元素，并让每个元素都有一个有意义的ID（标识）。
      CSD U6 create LED app 2: |-
        # 制作你的应用程序 - 代码

        接下来，你需要添加代码让应用程序开始工作。

        # 这样做

        \*
        和你的伙伴讨论一下你的应用程序需要什么样的代码。是否需要...
        \*
        事件？

        -   变量？
        -   设置器？
        -   随机数？
        -   在代码模式，添加能让你的应用程序工作的代码。
      CSD U6 create LED app 2_2018: |-
        # 制作你的应用程序 - 代码

        接下来，你需要添加代码让应用程序开始工作。

        # 这样做

        \*
        和你的伙伴讨论一下你的应用程序需要什么样的代码。是否需要...
        \*
        事件？

        -   变量？
        -   设置器？
        -   随机数？
        -   在代码模式，添加能让你的应用程序工作的代码。
      CSD U6 create LED app 2_2019: |-
        # 制作你的应用程序 - 代码

        接下来，你需要添加代码让应用程序开始工作。

        # 这样做

        \*
        和你的伙伴讨论一下你的应用程序需要什么样的代码。是否需要...
        \*
        事件？

        -   变量？
        -   设置器？
        -   随机数？
        -   在代码模式，添加能让你的应用程序工作的代码。
      CSD U6 create LED app_2018: |-
        # 制作你的应用程序 - 屏幕

        现在，和你的伙伴一起，让你的应用程序使用LED。并讨论一下你想要做什么样的应用程序。

        # 这样做

        -   和你的伙伴讨论一下你的应用里需要什么样的屏幕元素？是否需要...
        -   按钮？
        -   图片？
        -   文本？
        -   在设计模式中，添加元素，并让每个元素都有一个有意义的ID（标识）。
      CSD U6 create LED app_2019: |-
        # 制作你的应用程序 - 屏幕

        现在，和你的伙伴一起，让你的应用程序使用LED。并讨论一下你想要做什么样的应用程序。

        # 这样做

        -   和你的伙伴讨论一下你的应用里需要什么样的屏幕元素？是否需要...
        -   按钮？
        -   图片？
        -   文本？
        -   在设计模式中，添加元素，并让每个元素都有一个有意义的ID（标识）。
      CSD U6 design motorcycle: "# 添加你自己的元素\n\n是时候添加一些你自己的元素了。摩托车现在能上下移动了，但你能控制它的速度吗？\n\n#
        \n\n这样做\n\n-   在设计模式添加一个滑动条。\n-   确保你在设计模式设置了它的最小和最大值。\n-   创建一个事件，让它会在滑动条值发生变化时触发。\n-
        \  添加代码，在事件触发时获取滑动条的值，并存到叫做`speed`（速度）的变量里。"
      CSD U6 design motorcycle_2018: "# 添加你自己的元素\n\n是时候添加一些你自己的元素了。摩托车现在能上下移动了，但你能控制它的速度吗？\n\n#
        \n\n这样做\n\n-   在设计模式添加一个滑动条。\n-   确保你在设计模式设置了它的最小和最大值。\n-   创建一个事件，让它会在滑动条值发生变化时触发。\n-
        \  添加代码，在事件触发时获取滑动条的值，并存到叫做`speed`（速度）的变量里。"
      CSD U6 design motorcycle_2019: "# 添加你自己的元素\n\n是时候添加一些你自己的元素了。摩托车现在能上下移动了，但你能控制它的速度吗？\n\n#
        \n\n这样做\n\n-   在设计模式添加一个滑动条。\n-   确保你在设计模式设置了它的最小和最大值。\n-   创建一个事件，让它会在滑动条值发生变化时触发。\n-
        \  添加代码，在事件触发时获取滑动条的值，并存到叫做`speed`（速度）的变量里。"
      CSD U6 directional LEDs roll: |-
        # 转动

        程序应该能根据主板倾斜的方向，在屏幕上显示"左"或"右"了。

        # 这样做

        -   用加速传感器的"roll"（转动）属性来检测现在主板是往左还是右倾斜。
        -   用条件语句根据主板的方向，来改变"direction"（方向）元素的文本为"左"或"右"。
      CSD U6 directional LEDs roll_2018: |-
        # 转动

        程序应该能根据主板倾斜的方向，在屏幕上显示"左"或"右"了。

        # 这样做

        -   用加速传感器的"roll"（转动）属性来检测现在主板是往左还是右倾斜。
        -   用条件语句根据主板的方向，来改变"direction"（方向）元素的文本为"左"或"右"。
      CSD U6 directional LEDs roll_2019: |-
        # 转动

        程序应该能根据主板倾斜的方向，在屏幕上显示"左"或"右"了。

        # 这样做

        -   用加速传感器的"roll"（转动）属性来检测现在主板是往左还是右倾斜。
        -   用条件语句根据主板的方向，来改变"direction"（方向）元素的文本为"左"或"右"。
      CSD U6 directional leds pitch: |-
        # 强度

        当你往前倾斜主板时，程序会点亮最顶上的LED灯（0和9）。如果向后倾斜主板，最下面的LED灯（4和5）就会亮。

        # 这样做

        -   请使用主板的强度使得LED灯4 和5，在你把主板向后倾斜时亮起来。
        -   运行你的代码并进行多次测试.
      CSD U6 directional leds pitch_2018: |-
        # 强度

        当你往前倾斜主板时，程序会点亮最顶上的LED灯（0和9）。如果向后倾斜主板，最下面的LED灯（4和5）就会亮。

        # 这样做

        -   请使用主板的强度使得LED灯4 和5，在你把主板向后倾斜时亮起来。
        -   运行你的代码并进行多次测试.
      CSD U6 directional leds pitch_2019: |-
        # 强度

        当你往前倾斜主板时，程序会点亮最顶上的LED灯（0和9）。如果向后倾斜主板，最下面的LED灯（4和5）就会亮。

        # 这样做

        -   请使用主板的强度使得LED灯4 和5，在你把主板向后倾斜时亮起来。
        -   运行你的代码并进行多次测试.
      CSD U6 emoji race demo: |-
        # 表情比赛！

        这是一个竞速游戏，你会在课程结束时创建它。和另一位同学一起玩一下吧。左边的同学要点击电路游戏板的左按钮，越快越好。同样，在右边的同学要点击右按钮。赢了的人会在屏幕底下得到表情符号。

        # 这样做

        和旁边的同学一起列一下下面的信息。

        -   这个程序中使用了主板上的什么组件？
        -   这个程序会响应什么事件？
        -   \*
            你可能要创建什么函数来让这个程序工作起来？
      CSD U6 emoji race demo_2018: |-
        # 表情比赛！

        这是一个竞速游戏，你会在课程结束时创建它。和另一位同学一起玩一下吧。左边的同学要点击电路游戏板的左按钮，越快越好。同样，在右边的同学要点击右按钮。赢了的人会在屏幕底下得到表情符号。

        # 这样做

        和旁边的同学一起列一下下面的信息。

        -   这个程序中使用了主板上的什么组件？
        -   这个程序会响应什么事件？
        -   \*
            你可能要创建什么函数来让这个程序工作起来？
      CSD U6 emoji race demo_2019: |-
        # 表情比赛！

        这是一个竞速游戏，你会在课程结束时创建它。和另一位同学一起玩一下吧。左边的同学要点击电路游戏板的左按钮，越快越好。同样，在右边的同学要点击右按钮。赢了的人会在屏幕底下得到表情符号。

        # 这样做

        和旁边的同学一起列一下下面的信息。

        -   这个程序中使用了主板上的什么组件？
        -   这个程序会响应什么事件？
        -   \*
            你可能要创建什么函数来让这个程序工作起来？
      CSD U6 emotion machine 2: "# 改变颜色\n\n如果你再回头看看这个应用程序的例子，你会发现当点击按钮时，不仅表情图片变了，它们的颜色也变了。\n\n#
        \n\n这样做\n\n在每个事件处理函数中，设置\"face\"的\"icon-color\"属性。为高兴选择一个暖色，并为悲伤选择一个冷色。"
      CSD U6 emotion machine 2_2018: "# 改变颜色\n\n如果你再回头看看这个应用程序的例子，你会发现当点击按钮时，不仅表情图片变了，它们的颜色也变了。\n\n#
        \n\n这样做\n\n在每个事件处理函数中，设置\"face\"的\"icon-color\"属性。为高兴选择一个暖色，并为悲伤选择一个冷色。"
      CSD U6 emotion machine 2_2019: "# 改变颜色\n\n如果你再回头看看这个应用程序的例子，你会发现当点击按钮时，不仅表情图片变了，它们的颜色也变了。\n\n#
        \n\n这样做\n\n在每个事件处理函数中，设置\"face\"的\"icon-color\"属性。为高兴选择一个暖色，并为悲伤选择一个冷色。"
      CSD U6 emotion machine 3: "# 设置文本\n\n你的高兴和悲伤按钮快要能正常工作了。唯一要做的就是改变屏幕底下的文本了。\n\n#
        \n\n这样做\n\n让每个事件处理函数改变\"feeling\"的文本，对应到正确的表情（“高兴”或“悲伤”）上。"
      CSD U6 emotion machine 3_2018: "# 设置文本\n\n你的高兴和悲伤按钮快要能正常工作了。唯一要做的就是改变屏幕底下的文本了。\n\n#
        \n\n这样做\n\n让每个事件处理函数改变\"feeling\"的文本，对应到正确的表情（“高兴”或“悲伤”）上。"
      CSD U6 emotion machine 3_2019: "# 设置文本\n\n你的高兴和悲伤按钮快要能正常工作了。唯一要做的就是改变屏幕底下的文本了。\n\n#
        \n\n这样做\n\n让每个事件处理函数改变\"feeling\"的文本，对应到正确的表情（“高兴”或“悲伤”）上。"
      CSD U6 emotion machine 4: "# 添加另一个表情\n\n在之前的示例应用程序中，你能将表情设置为高兴、悲伤或无所谓。你的应用程序现在只有高兴和悲伤，你能增加第三个吗？\n\n#
        \n\n这样做\n\n用你在高兴和悲伤按钮上学会的技术，来创建第三个表情按钮。你仍然可以将它设为无所谓，或者其它想要的表情。\n\n做完后，提交最终版本前，可以再添加一些其它表情或者功能。"
      CSD U6 emotion machine 4_2018: "# 添加另一个表情\n\n在之前的示例应用程序中，你能将表情设置为高兴、悲伤或无所谓。你的应用程序现在只有高兴和悲伤，你能增加第三个吗？\n\n#
        \n\n这样做\n\n用你在高兴和悲伤按钮上学会的技术，来创建第三个表情按钮。你仍然可以将它设为无所谓，或者其它想要的表情。\n\n做完后，提交最终版本前，可以再添加一些其它表情或者功能。"
      CSD U6 emotion machine 4_2019: "# 添加另一个表情\n\n在之前的示例应用程序中，你能将表情设置为高兴、悲伤或无所谓。你的应用程序现在只有高兴和悲伤，你能增加第三个吗？\n\n#
        \n\n这样做\n\n用你在高兴和悲伤按钮上学会的技术，来创建第三个表情按钮。你仍然可以将它设为无所谓，或者其它想要的表情。\n\n做完后，提交最终版本前，可以再添加一些其它表情或者功能。"
      CSD U6 emotion machine example: |-
        # 表情机器

        看看这个一会儿你要做的表情机器应用程序。试着点击按钮看看它是如何工作的。

        # 这样做

        试试应用程序，然后和旁边的伙伴讨论：

        -   这个应用使用了什么事件处理函数？
        -   代码改变了哪些元素？
        -   点击按钮时，哪些属性被改变了？
      CSD U6 emotion machine example_2018: |-
        # 表情机器

        看看这个一会儿你要做的表情机器应用程序。试着点击按钮看看它是如何工作的。

        # 这样做

        试试应用程序，然后和旁边的伙伴讨论：

        -   这个应用使用了什么事件处理函数？
        -   代码改变了哪些元素？
        -   点击按钮时，哪些属性被改变了？
      CSD U6 emotion machine example_2019: |-
        # 表情机器

        看看这个一会儿你要做的表情机器应用程序。试着点击按钮看看它是如何工作的。

        # 这样做

        试试应用程序，然后和旁边的伙伴讨论：

        -   这个应用使用了什么事件处理函数？
        -   代码改变了哪些元素？
        -   点击按钮时，哪些属性被改变了？
      CSD U6 for loop button array: |-
        # 数组循环

        最强大的使用计数循环的方法是让它在一组数组内循环，让数组里的每个项目都运行代码。可以通过使用计数循环计数器的变量（通常用`i`) 作为数组指数。

        # 这样做

        该程序应该循环数组`buttons`（按钮），并对每个按钮做两件事

        -   把背景色改为红色，以及更改高度为50像素。

        -   在循环内添加第二个`setProperty`（设置属性）模块

        -   更改`buttons[i]`的目标值
            \*设置 "height"（高度）属性为50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2018: |-
        # 数组循环

        最强大的使用计数循环的方法是让它在一组数组内循环，让数组里的每个项目都运行代码。可以通过使用计数循环计数器的变量（通常用`i`) 作为数组指数。

        # 这样做

        该程序应该循环数组`buttons`（按钮），并对每个按钮做两件事

        -   把背景色改为红色，以及更改高度为50像素。

        -   在循环内添加第二个`setProperty`（设置属性）模块

        -   更改`buttons[i]`的目标值
            \*设置 "height"（高度）属性为50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2019: |-
        # 数组循环

        最强大的使用计数循环的方法是让它在一组数组内循环，让数组里的每个项目都运行代码。可以通过使用计数循环计数器的变量（通常用`i`) 作为数组指数。

        # 这样做

        该程序应该循环数组`buttons`（按钮），并对每个按钮做两件事

        -   把背景色改为红色，以及更改高度为50像素。

        -   在循环内添加第二个`setProperty`（设置属性）模块

        -   更改`buttons[i]`的目标值
            \*设置 "height"（高度）属性为50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop click exit: "# 知道何时停止\n\n你可能留意到在上一关卡中如果你多次点击按钮你会得到错误提示。无论你何时编写重复代码，知道何时需要_停止_重复是很重要的。
        \n\n# 这样做\n\n该程序和上个类似，但在事件处理器中添加了一个条件。你需要完成条件，这样我们才可以不必试着去切换一个不存在的LED。 \n\n_你的代码在一个有着更多或更少的LED
        灯的主板上是否也适用？如果不行的话，是否可以做些修改来让它可以运作？_"
      CSD U6 for loop click exit_2018: "# 知道何时停止\n\n你可能留意到在上一关卡中如果你多次点击按钮你会得到错误提示。无论你何时编写重复代码，知道何时需要_停止_重复是很重要的。
        \n\n# 这样做\n\n该程序和上个类似，但在事件处理器中添加了一个条件。你需要完成条件，这样我们才可以不必试着去切换一个不存在的LED。 \n\n_你的代码在一个有着更多或更少的LED
        灯的主板上是否也适用？如果不行的话，是否可以做些修改来让它可以运作？_"
      CSD U6 for loop click exit_2019: "# 知道何时停止\n\n你可能留意到在上一关卡中如果你多次点击按钮你会得到错误提示。无论你何时编写重复代码，知道何时需要_停止_重复是很重要的。
        \n\n# 这样做\n\n该程序和上个类似，但在事件处理器中添加了一个条件。你需要完成条件，这样我们才可以不必试着去切换一个不存在的LED。 \n\n_你的代码在一个有着更多或更少的LED
        灯的主板上是否也适用？如果不行的话，是否可以做些修改来让它可以运作？_"
      CSD U6 for loop led bonus 1_2018: |-
        # 挑战：添加更多的按钮

        通过添加更多的按钮来扩展程序，让它能将主板变成不同的颜色。

        # 这样做

        在设计模式中添加新的按钮，并创建事件处理函数来响应按钮，并更改LED灯的颜色。
      CSD U6 for loop led bonus 2_2018: |-
        挑战: 颜色图案

        通过添加更多能够创建不同图案大的灯的按钮来扩展程序。

        # 这样做

        在设计模式中添加新按钮, 并创建事件处理器来响应按钮并更改 LED 颜色。

        _提示：在设计模式时, 请考虑带有参数的函数是否有助于简化你的程序。_
      CSD U6 for loop led bonus 3_2018: |-
        # 挑战: 音乐

        使用你在制作音乐课中学到的知识, 让主板能在灯光改变时播放音乐。

        # 这样做

        为不同的歌曲创建一些音符数组, 并在事件处理函数中添加代码以播放音乐。
      CSD U6 for loop led function: "# 用函数切换颜色\n\n我们可以为所要设置的LED灯的不同颜色编写计数循环，但这基本上是很多相同的代码。这是个使用
        _带参数的函数_的好地方！\n你已经使用过带参数的函数，但现在你要从头创建一个。\n\n# 这样做\n\n创建一个名为`setLedsColor`（设LED
        灯颜色） 的函数, 它采用参数`color`（颜色）, 并用它来更改 所有LED 灯的颜色。\n\n\\*在程序的底部，拖出一个带参数的函数模块\n![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\n\n-
        \  把`myFunction`（我的函数）的名字改为`setLedsColor`（设LED 灯颜色） \n-   把参数名字从`n`改为`color`（颜色）\n-
        \  在函数内，添加一个_计数循环_一直重复直到到达`colorLeds`（彩色LED灯）的最后\n-   在_计数循环_内，把当前LED 灯颜色设置为参数`color`（颜色）（比如`colorLeds[i].color(color)`\n\n我们会在下一关卡添加使用此函数的事件处理函数，但现在，你可以用程序测试你的函数，并在调试控制台输入：`setLedsColor(\"blue\")`"
      CSD U6 for loop led function finish: |-
        # 完成应用程序

        如果您的红色按钮正常工作，那么剩下要做的就是在其它按钮按下时，调用你的新函数。

        # 这样做

        对每个剩余的按钮 (绿色、蓝色和白色) ：

        -   创建新的事件处理函数
        -   用合适的颜色（"绿色", "蓝色", 或 "白色") 来调用`setLedsColor`（设置LED灯颜色）函数
        -   测试您的程序, 确保所有的按钮都正常工作

        当你已经让所有的按钮都正常工作后, 点击 "提交"来提交你的程序。
      CSD U6 for loop led function finish_2018: |-
        # 完成应用程序

        如果您的红色按钮正常工作，那么剩下要做的就是在其它按钮按下时，调用你的新函数。

        # 这样做

        对每个剩余的按钮 (绿色、蓝色和白色) ：

        -   创建新的事件处理函数
        -   用合适的颜色（"绿色", "蓝色", 或 "白色") 来调用`setLedsColor`（设置LED灯颜色）函数
        -   测试您的程序, 确保所有的按钮都正常工作

        当你已经让所有的按钮都正常工作后, 点击 "提交"来提交你的程序。
      CSD U6 for loop led function_2018: "# 用函数切换颜色\n\n我们可以为所要设置的LED灯的不同颜色编写计数循环，但这基本上是很多相同的代码。这是个使用
        _带参数的函数_的好地方！\n你已经使用过带参数的函数，但现在你要从头创建一个。\n\n# 这样做\n\n创建一个名为`setLedsColor`（设LED
        灯颜色） 的函数, 它采用参数`color`（颜色）, 并用它来更改 所有LED 灯的颜色。\n\n\\*在程序的底部，拖出一个带参数的函数模块\n![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\n\n-
        \  把`myFunction`（我的函数）的名字改为`setLedsColor`（设LED 灯颜色） \n-   把参数名字从`n`改为`color`（颜色）\n-
        \  在函数内，添加一个_计数循环_一直重复直到到达`colorLeds`（彩色LED灯）的最后\n-   在_计数循环_内，把当前LED 灯颜色设置为参数`color`（颜色）（比如`colorLeds[i].color(color)`\n\n我们会在下一关卡添加使用此函数的事件处理函数，但现在，你可以用程序测试你的函数，并在调试控制台输入：`setLedsColor(\"blue\")`"
      CSD U6 for loop list.length: |-
        # 数组长度

        在上一个程序中, 我们告诉循环运行代码`for (var
        i = 0; i < 3; i++)`三次。这样虽然可以，但是我们可以使用数组的长度来编写更智能的程序来决定循环多少次。

        # 这样做

        更改此计数循环的退出条件, 以便它当`i < buttons.length`时运行。
      CSD U6 for loop list.length_2018: |-
        # 数组长度

        在上一个程序中, 我们告诉循环运行代码`for (var
        i = 0; i < 3; i++)`三次。这样虽然可以，但是我们可以使用数组的长度来编写更智能的程序来决定循环多少次。

        # 这样做

        更改此计数循环的退出条件, 以便它当`i < buttons.length`时运行。
      CSD U6 for loop list.length_2019: |-
        # 数组长度

        在上一个程序中, 我们告诉循环运行代码`for (var
        i = 0; i < 3; i++)`三次。这样虽然可以，但是我们可以使用数组的长度来编写更智能的程序来决定循环多少次。

        # 这样做

        更改此计数循环的退出条件, 以便它当`i < buttons.length`时运行。
      CSD U6 frequency: |-
        # 频率

        这个蜂鸣器控制器也被扩展为可以控制频率了，但代码还没有完成。

        # 这样做

        -   按照`duration`（持续时间）变量，创建一个`frequency`（频率）变量，从_frequency_（频率）滑动条上取值。
        -   \*
            改变让蜂鸣器发声的那行代码，让它使用`frequency`的值，而不是默认的频率`500`。
        -   运行代码，然后改变频率和持续时间，听听看蜂鸣器声音有什么不同。（别忘了改变后点击按钮！）
      CSD U6 frequency_2018: |-
        # 频率

        这个蜂鸣器控制器也被扩展为可以控制频率了，但代码还没有完成。

        # 这样做

        -   按照`duration`（持续时间）变量，创建一个`frequency`（频率）变量，从_frequency_（频率）滑动条上取值。
        -   \*
            改变让蜂鸣器发声的那行代码，让它使用`frequency`的值，而不是默认的频率`500`。
        -   运行代码，然后改变频率和持续时间，听听看蜂鸣器声音有什么不同。（别忘了改变后点击按钮！）
      CSD U6 frequency_2019: |-
        # 频率

        这个蜂鸣器控制器也被扩展为可以控制频率了，但代码还没有完成。

        # 这样做

        -   按照`duration`（持续时间）变量，创建一个`frequency`（频率）变量，从_frequency_（频率）滑动条上取值。
        -   \*
            改变让蜂鸣器发声的那行代码，让它使用`frequency`的值，而不是默认的频率`500`。
        -   运行代码，然后改变频率和持续时间，听听看蜂鸣器声音有什么不同。（别忘了改变后点击按钮！）
      CSD U6 game project board events: |-
        # 主板事件

        返回到你的活动向导的事件章节，找到响应主板的任何事件【使用了`onBoardEvent()`（当主板上发生事件时）】。为每一个都创建一个事件处理函数。如果这些事件依赖于还没有写的程序，在里面写一条注释。
      CSD U6 game project board events_2018: |-
        # 主板事件

        返回到你的活动向导的事件章节，找到响应主板的任何事件【使用了`onBoardEvent()`（当主板上发生事件时）】。为每一个都创建一个事件处理函数。如果这些事件依赖于还没有写的程序，在里面写一条注释。
      CSD U6 game project board events_2019: |-
        # 主板事件

        返回到你的活动向导的事件章节，找到响应主板的任何事件【使用了`onBoardEvent()`（当主板上发生事件时）】。为每一个都创建一个事件处理函数。如果这些事件依赖于还没有写的程序，在里面写一条注释。
      CSD U6 game project finish: |-
        # 完成润色和测试

        现在，你几乎完成了整个程序了。你可以加一些润色，然后做一些测试。当你的应用准备好后，让你的同学试一试。看看你是否能找到任何缺陷，混乱的选项设计，或者少了什么功能。

        一旦完成了这个版本的程序，点击提交按钮。
      CSD U6 game project finish_2018: |-
        # 完成润色和测试

        现在，你几乎完成了整个程序了。你可以加一些润色，然后做一些测试。当你的应用准备好后，让你的同学试一试。看看你是否能找到任何缺陷，混乱的选项设计，或者少了什么功能。

        一旦完成了这个版本的程序，点击提交按钮。
      CSD U6 game project finish_2019: |-
        # 完成润色和测试

        现在，你几乎完成了整个程序了。你可以加一些润色，然后做一些测试。当你的应用准备好后，让你的同学试一试。看看你是否能找到任何缺陷，混乱的选项设计，或者少了什么功能。

        一旦完成了这个版本的程序，点击提交按钮。
      CSD U6 game project functions call: |-
        # 调用你的函数

        函数定义好后，要在需要的地方调用它。找找你的事件处理函数或程序的其它地方，是否需要调用函数，然后添加一个函数调用。
      CSD U6 game project functions call_2018: |-
        # 调用你的函数

        函数定义好后，要在需要的地方调用它。找找你的事件处理函数或程序的其它地方，是否需要调用函数，然后添加一个函数调用。
      CSD U6 game project functions call_2019: |-
        # 调用你的函数

        函数定义好后，要在需要的地方调用它。找找你的事件处理函数或程序的其它地方，是否需要调用函数，然后添加一个函数调用。
      CSD U6 game project screen links: |-
        # UI元素事件

        现在，现在你的所有屏幕都设计好了，你可以添加任何响应_屏幕互动_的事件处理函数了。它们已经列在了你的活动向导中的”事件“章节里了。如果你用了还没在计划阶段想过的新事件，确保将它们加到你的项目向导里。

        不用担心这些功能还没有完全实现。如果你的事件依赖于主板元素或者你自己的函数，我们会在下一关中处理它们。
      CSD U6 game project screen links_2018: |-
        # UI元素事件

        现在，现在你的所有屏幕都设计好了，你可以添加任何响应_屏幕互动_的事件处理函数了。它们已经列在了你的活动向导中的”事件“章节里了。如果你用了还没在计划阶段想过的新事件，确保将它们加到你的项目向导里。

        不用担心这些功能还没有完全实现。如果你的事件依赖于主板元素或者你自己的函数，我们会在下一关中处理它们。
      CSD U6 game project screen links_2019: |-
        # UI元素事件

        现在，现在你的所有屏幕都设计好了，你可以添加任何响应_屏幕互动_的事件处理函数了。它们已经列在了你的活动向导中的”事件“章节里了。如果你用了还没在计划阶段想过的新事件，确保将它们加到你的项目向导里。

        不用担心这些功能还没有完全实现。如果你的事件依赖于主板元素或者你自己的函数，我们会在下一关中处理它们。
      CSD U6 game project screens: |-
        # 创建你的屏幕

        第一件事是创建你在计划向导里勾画的所有屏幕。

        # 这样做

        用设计模式创建你的程序所需要的所有屏幕。别忘了给所有的设计元素**设置上有意义的标识**。
      CSD U6 game project screens_2018: |-
        # 创建你的屏幕

        第一件事是创建你在计划向导里勾画的所有屏幕。

        # 这样做

        用设计模式创建你的程序所需要的所有屏幕。别忘了给所有的设计元素**设置上有意义的标识**。
      CSD U6 game project screens_2019: |-
        # 创建你的屏幕

        第一件事是创建你在计划向导里勾画的所有屏幕。

        # 这样做

        用设计模式创建你的程序所需要的所有屏幕。别忘了给所有的设计元素**设置上有意义的标识**。
      CSD U6 get toggle: '# onChange   此程序具有检测三不同更改的事件: 切换开关、间隔滑块和持续时间滑块。 因为有这么多不同的东西可以导致
        LED 和蜂鸣器复位, 它使用函数来组织代码.#请操作以下\* 请阅读 "updateLED" 函数以查看它的作用. \* 将代码添加到 "updateBuzzer",
        使蜂鸣器只在切换时打开时打开开关。'
      CSD U6 get toggle_2018: "# 变化\n\n这个程序有事件来检测三种不同的变化：切换开关、间隔时间滑动条和持续时间滑动条。因为有很多原因造成LED灯和蜂鸣器重置，需要使用函数来组织代码。\n\n#
        \n\n这样做\n\n-   阅读`updateLED`（更新LED灯）函数，看看它做了什么。\n-   在`updateBuzzer`（更新蜂鸣器）函数中添加代码，来让它只在切换开关打开时才打开。"
      CSD U6 get toggle_2019: "# 变化\n\n这个程序有事件来检测三种不同的变化：切换开关、间隔时间滑动条和持续时间滑动条。因为有很多原因造成LED灯和蜂鸣器重置，需要使用函数来组织代码。\n\n#
        \n\n这样做\n\n-   阅读`updateLED`（更新LED灯）函数，看看它做了什么。\n-   在`updateBuzzer`（更新蜂鸣器）函数中添加代码，来让它只在切换开关打开时才打开。"
      CSD U6 getProperty Demo: |-
        # 更新属性

        这是一个同时用了`getProperty`（获取属性）和`setProperty()`（设置属性）的例子，来更新屏幕上的元素。 读一下代码，然后通过填写输入值，点击”保存“来测试一下它。

        _注意：你不需要改动任何代码，只需要读一读已有的代码，了解它是如何工作的。_
      CSD U6 getProperty Demo_2018: |-
        # 更新属性

        这是一个同时用了`getProperty`（获取属性）和`setProperty()`（设置属性）的例子，来更新屏幕上的元素。 读一下代码，然后通过填写输入值，点击”保存“来测试一下它。

        _注意：你不需要改动任何代码，只需要读一读已有的代码，了解它是如何工作的。_
      CSD U6 getProperty Demo_2019: |-
        # 更新属性

        这是一个同时用了`getProperty`（获取属性）和`setProperty()`（设置属性）的例子，来更新屏幕上的元素。 读一下代码，然后通过填写输入值，点击”保存“来测试一下它。

        _注意：你不需要改动任何代码，只需要读一读已有的代码，了解它是如何工作的。_
      CSD U6 getProperty board predict: 预测级别 (请参见标记的包含关卡)
      CSD U6 getProperty board predict_2018: 预测级别 (请参见标记的包含关卡)
      CSD U6 getProperty board predict_2019: 预测级别 (请参见标记的包含关卡)
      CSD U6 getters debug: "# LED灯和蜂鸣器控制器\n\n这个程序操作了LED灯和蜂鸣器，但它有些问题。\n\n# \n\n这样做\n\n-
        \  读一读程序，理解它应该如何工作。\n-   \\*\n    找到并修复缺陷，让程序能够正常工作。"
      CSD U6 getters debug_2018: "# LED灯和蜂鸣器控制器\n\n这个程序操作了LED灯和蜂鸣器，但它有些问题。\n\n# \n\n这样做\n\n-
        \  读一读程序，理解它应该如何工作。\n-   \\*\n    找到并修复缺陷，让程序能够正常工作。"
      CSD U6 getters debug_2019: "# LED灯和蜂鸣器控制器\n\n这个程序操作了LED灯和蜂鸣器，但它有些问题。\n\n# \n\n这样做\n\n-
        \  读一读程序，理解它应该如何工作。\n-   \\*\n    找到并修复缺陷，让程序能够正常工作。"
      CSD U6 goalie: |-
        # 用数据更新数值

        在本程序里，守门员试着拦住足球，但现在球不动了。

        # 这样做

        -   使用计数器模式来更新球的 `x` 值，这样它可以穿过屏幕。
      CSD U6 goalie_2018: |-
        # 用数据更新数值

        在本程序里，守门员试着拦住足球，但现在球不动了。

        # 这样做

        -   使用计数器模式来更新球的 `x` 值，这样它可以穿过屏幕。
      CSD U6 goalie_2019: |-
        # 用数据更新数值

        在本程序里，守门员试着拦住足球，但现在球不动了。

        # 这样做

        -   使用计数器模式来更新球的 `x` 值，这样它可以穿过屏幕。
      CSD U6 hardware software video_2019: |-
        ## 思考问题

        -   硬件与软件之间有什么区别？
        -   一台计算机上的操作系统有何用途？
      CSD U6 interval: 预测关卡
      CSD U6 interval_2018: 预测关卡
      CSD U6 interval_2019: 预测关卡
      CSD U6 investigate orientation: "# 倾斜和转动\n\n此程序显示主板的倾斜和转动，并且能根据数值改变颜色。\n\n#
        这样做\n\n让程序将主板倾斜到正确的斜度和转动来更改相应的颜色。\n\n<div\nstyle=\"display:inline-block; background-color:
        skyblue; height: 30px; width:30px\">&nbsp;</div>\n斜度: 0 |转动: -20\n\n<div style=\"display:inline-block;
        background-color:\nburlywood; height: 30px; width:30px\">&nbsp;</div>斜度:30
        |转动: 0 \n\n<div\nstyle=\"display:inline-block; background-color: mistyrose;
        height: 30px; width:30px\">&nbsp;</div>\n斜度:-15 |转动：10\n\n<div style=\"display:inline-block;
        background-color:\nyellowgreen; height: 30px; width:30px\">&nbsp;</div> 斜度:
        5 |转动：-25\n\n<div style=\"display:inline-block; background-color: thistle;
        height:\n30px; width:30px\">&nbsp;</div> 斜度:10 |转动30 \n\n你应该往哪个方向倾斜才能得到一个正斜度？\n\n你应该往哪个方向倾斜才能得到一个负转动值？"
      CSD U6 investigate orientation_2018: "# 倾斜和转动\n\n此程序显示主板的倾斜和转动，并且能根据数值改变颜色。\n\n#
        这样做\n\n让程序将主板倾斜到正确的斜度和转动来更改相应的颜色。\n\n<div\nstyle=\"display:inline-block; background-color:
        skyblue; height: 30px; width:30px\">&nbsp;</div>\n斜度: 0 |转动: -20\n\n<div style=\"display:inline-block;
        background-color:\nburlywood; height: 30px; width:30px\">&nbsp;</div>斜度:30
        |转动: 0 \n\n<div\nstyle=\"display:inline-block; background-color: mistyrose;
        height: 30px; width:30px\">&nbsp;</div>\n斜度:-15 |转动：10\n\n<div style=\"display:inline-block;
        background-color:\nyellowgreen; height: 30px; width:30px\">&nbsp;</div> 斜度:
        5 |转动：-25\n\n<div style=\"display:inline-block; background-color: thistle;
        height:\n30px; width:30px\">&nbsp;</div> 斜度:10 |转动30 \n\n你应该往哪个方向倾斜才能得到一个正斜度？\n\n你应该往哪个方向倾斜才能得到一个负转动值？"
      CSD U6 investigate orientation_2019: "# 倾斜和转动\n\n此程序显示主板的倾斜和转动，并且能根据数值改变颜色。\n\n#
        这样做\n\n让程序将主板倾斜到正确的斜度和转动来更改相应的颜色。\n\n<div\nstyle=\"display:inline-block; background-color:
        skyblue; height: 30px; width:30px\">&nbsp;</div>\n斜度: 0 |转动: -20\n\n<div style=\"display:inline-block;
        background-color:\nburlywood; height: 30px; width:30px\">&nbsp;</div>斜度:30
        |转动: 0 \n\n<div\nstyle=\"display:inline-block; background-color: mistyrose;
        height: 30px; width:30px\">&nbsp;</div>\n斜度:-15 |转动：10\n\n<div style=\"display:inline-block;
        background-color:\nyellowgreen; height: 30px; width:30px\">&nbsp;</div> 斜度:
        5 |转动：-25\n\n<div style=\"display:inline-block; background-color: thistle;
        height:\n30px; width:30px\">&nbsp;</div> 斜度:10 |转动30 \n\n你应该往哪个方向倾斜才能得到一个正斜度？\n\n你应该往哪个方向倾斜才能得到一个负转动值？"
      CSD U6 iter create notes: |-
        # 音乐播放器

        \
         这个程序让你在不同音符上挥舞指挥棒来演奏音乐, 但它缺少函数定义。

        # 这样做

        -   创建一个`checkNotes()`（检查音符）函数, 它将在 "音符" 数组中的所有条目上调用 `checkNote(note)`。
      CSD U6 iter create notes_2018: |-
        # 音乐播放器

        \
         这个程序让你在不同音符上挥舞指挥棒来演奏音乐, 但它缺少函数定义。

        # 这样做

        -   创建一个`checkNotes()`（检查音符）函数, 它将在 "音符" 数组中的所有条目上调用 `checkNote(note)`。
      CSD U6 iter create notes_2019: |-
        # 音乐播放器

        \
         这个程序让你在不同音符上挥舞指挥棒来演奏音乐, 但它缺少函数定义。

        # 这样做

        -   创建一个`checkNotes()`（检查音符）函数, 它将在 "音符" 数组中的所有条目上调用 `checkNote(note)`。
      CSD U6 iter modify bugs: "# 虫子振动器\n\n这个程序在主板摇晃的时候振动虫子，但它只对一只虫子起作用。\n\n# 这样做\n\n-
        \  更改`moveBugs()`（移动虫子） 函数, 使其为每个颜色的虫子调用`moveBug(color)`. \n-   （提示：查看`detectHits()`函数来获得一些提示。）"
      CSD U6 iter modify bugs_2018: "# 虫子振动器\n\n这个程序在主板摇晃的时候振动虫子，但它只对一只虫子起作用。\n\n#
        这样做\n\n-   更改`moveBugs()`（移动虫子） 函数, 使其为每个颜色的虫子调用`moveBug(color)`. \n-   （提示：查看`detectHits()`函数来获得一些提示。）"
      CSD U6 iter modify bugs_2019: "# 虫子振动器\n\n这个程序在主板摇晃的时候振动虫子，但它只对一只虫子起作用。\n\n#
        这样做\n\n-   更改`moveBugs()`（移动虫子） 函数, 使其为每个颜色的虫子调用`moveBug(color)`. \n-   （提示：查看`detectHits()`函数来获得一些提示。）"
      CSD U6 iter predict bubbles: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 iter predict bubbles_2018: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 iter predict bubbles_2019: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 light pattern challenge_2018: |-
        # 挑战：更多模式

        添加更多的一些模式。找个伙伴，将他们的模式作为一个选项。确保将每个模式都放到它自己的函数中。
      CSD U6 light pattern challenge_2019: |-
        # 挑战：更多模式

        添加更多的一些模式。找个伙伴，将他们的模式作为一个选项。确保将每个模式都放到它自己的函数中。
      CSD U6 light pattern off: |-
        # 关掉它

        当你启动这个应用时，你的灯是关着的，但要尽快选择一个图案，现在没有办法将灯再关掉！

        # 这样做

        创建一个函数将所有LED灯都关掉，然后增加一个“关闭"按钮来关闭所有的彩色LED灯。
      CSD U6 light pattern off_2018: |-
        # 关掉它

        当你启动这个应用时，你的灯是关着的，但要尽快选择一个图案，现在没有办法将灯再关掉！

        # 这样做

        创建一个函数将所有LED灯都关掉，然后增加一个“关闭"按钮来关闭所有的彩色LED灯。
      CSD U6 light pattern off_2019: |-
        # 关掉它

        当你启动这个应用时，你的灯是关着的，但要尽快选择一个图案，现在没有办法将灯再关掉！

        # 这样做

        创建一个函数将所有LED灯都关掉，然后增加一个“关闭"按钮来关闭所有的彩色LED灯。
      CSD U6 move motorcycle: "# 用属性移动\n\n早先，我们用了`setProperty()`（设置属性）来改变屏幕上元素的x和y位置，但我们只能将它们要么移动到一个特定位置，要么移动到一个随机位置。通过使用`getProperty`（获取属性）来找到一个元素的当前位置，我们可以使用第3单元学会的**计数器模式**来更新位置。\n\n#
        \n\n这样做\n\n-   读一下程序，和你的伙伴讨论一下左按钮是如何让摩托车向上走的。\n-   用左按钮的代码为示例，给右按钮编程，让它能将摩托车向下移动。"
      CSD U6 move motorcycle_2018: "# 用属性移动\n\n早先，我们用了`setProperty()`（设置属性）来改变屏幕上元素的x和y位置，但我们只能将它们要么移动到一个特定位置，要么移动到一个随机位置。通过使用`getProperty`（获取属性）来找到一个元素的当前位置，我们可以使用第3单元学会的**计数器模式**来更新位置。\n\n#
        \n\n这样做\n\n-   读一下程序，和你的伙伴讨论一下左按钮是如何让摩托车向上走的。\n-   用左按钮的代码为示例，给右按钮编程，让它能将摩托车向下移动。"
      CSD U6 move motorcycle_2019: "# 用属性移动\n\n早先，我们用了`setProperty()`（设置属性）来改变屏幕上元素的x和y位置，但我们只能将它们要么移动到一个特定位置，要么移动到一个随机位置。通过使用`getProperty`（获取属性）来找到一个元素的当前位置，我们可以使用第3单元学会的**计数器模式**来更新位置。\n\n#
        \n\n这样做\n\n-   读一下程序，和你的伙伴讨论一下左按钮是如何让摩托车向上走的。\n-   用左按钮的代码为示例，给右按钮编程，让它能将摩托车向下移动。"
      CSD U6 params create colors: |-
        # 颜色选取器

        在这个程序中，按屏幕底部的按钮会更改图像和颜色指示灯的颜色。

        # 这样做

        -   创建一个函数`chooseColor(color)`（选择颜色），将每个图像和彩色LED灯改为给定的颜色。
        -   在事件模块中调用函数，使所有按钮都工作正常。
      CSD U6 params create colors_2018: |-
        # 颜色选取器

        在这个程序中，按屏幕底部的按钮会更改图像和颜色指示灯的颜色。

        # 这样做

        -   创建一个函数`chooseColor(color)`（选择颜色），将每个图像和彩色LED灯改为给定的颜色。
        -   在事件模块中调用函数，使所有按钮都工作正常。
      CSD U6 params create colors_2019: |-
        # 颜色选取器

        在这个程序中，按屏幕底部的按钮会更改图像和颜色指示灯的颜色。

        # 这样做

        -   创建一个函数`chooseColor(color)`（选择颜色），将每个图像和彩色LED灯改为给定的颜色。
        -   在事件模块中调用函数，使所有按钮都工作正常。
      CSD U6 params starchaser 1: |-
        # 制作 ' loopStar (颜色) ' 函数

        现在只有红的的星星起作用，因此, 你需要更改此代码。

        # 这样做

        -   使用`loopRedStar()`（循环红色星星）函数中的代码创建`loopStar(color)`函数，该该函数可以作用于任何星星。
        -   测试函数，调用`loopStars()`函数中的`loopStar("red")`和`loopStar("blue")`。
      CSD U6 params starchaser 1_2018: |-
        # 制作 ' loopStar (颜色) ' 函数

        现在只有红的的星星起作用，因此, 你需要更改此代码。

        # 这样做

        -   使用`loopRedStar()`（循环红色星星）函数中的代码创建`loopStar(color)`函数，该该函数可以作用于任何星星。
        -   测试函数，调用`loopStars()`函数中的`loopStar("red")`和`loopStar("blue")`。
      CSD U6 params starchaser 1_2019: |-
        # 制作 ' loopStar (颜色) ' 函数

        现在只有红的的星星起作用，因此, 你需要更改此代码。

        # 这样做

        -   使用`loopRedStar()`（循环红色星星）函数中的代码创建`loopStar(color)`函数，该该函数可以作用于任何星星。
        -   测试函数，调用`loopStars()`函数中的`loopStar("red")`和`loopStar("blue")`。
      CSD U6 params starchaser 2: |-
        # 星星追逐者

        现在你需要让所有的星星在屏幕上循环。

        # 这样做

        -   在`loopStars()`函数内使用一个`计数循环`，使每颗星在 "starArray" 循环中环绕屏幕。
      CSD U6 params starchaser 2_2018: |-
        # 星星追逐者

        现在你需要让所有的星星在屏幕上循环。

        # 这样做

        -   在`loopStars()`函数内使用一个`计数循环`，使每颗星在 "starArray" 循环中环绕屏幕。
      CSD U6 params starchaser 2_2019: |-
        # 星星追逐者

        现在你需要让所有的星星在屏幕上循环。

        # 这样做

        -   在`loopStars()`函数内使用一个`计数循环`，使每颗星在 "starArray" 循环中环绕屏幕。
      CSD U6 params starchaser 3: |-
        # 星星追逐者

        所有星星都在循环里，但你只能抓住红色的星星。

        # 这样做

        -   使用`moveRedStar()`（移动红色的星星）函数中的代码来制作一个`moveStar(color)`函数，它可以移动任何星星。
        -   使用`checkRedStar()`（检查红色的星星）函数中的代码来制作一个`checkStar(color)`函数，它可以适用于任何星星。
        -   通过在事件模块内调用`checkStar("red")`和`checkStar("blue")`函数来测试此代码。
      CSD U6 params starchaser 3_2018: |-
        # 星星追逐者

        所有星星都在循环里，但你只能抓住红色的星星。

        # 这样做

        -   使用`moveRedStar()`（移动红色的星星）函数中的代码来制作一个`moveStar(color)`函数，它可以移动任何星星。
        -   使用`checkRedStar()`（检查红色的星星）函数中的代码来制作一个`checkStar(color)`函数，它可以适用于任何星星。
        -   通过在事件模块内调用`checkStar("red")`和`checkStar("blue")`函数来测试此代码。
      CSD U6 params starchaser 3_2019: |-
        # 星星追逐者

        所有星星都在循环里，但你只能抓住红色的星星。

        # 这样做

        -   使用`moveRedStar()`（移动红色的星星）函数中的代码来制作一个`moveStar(color)`函数，它可以移动任何星星。
        -   使用`checkRedStar()`（检查红色的星星）函数中的代码来制作一个`checkStar(color)`函数，它可以适用于任何星星。
        -   通过在事件模块内调用`checkStar("red")`和`checkStar("blue")`函数来测试此代码。
      CSD U6 params starchaser 4: "# 星星追逐者\n\n现在让它能在所有的星星上起作用\n\n# 这样做\n\n-   创建一个`checkStars()`（检查星星）函数,
        使用`计数循环`来检查星星数组中的每颗星. \n-   调用事件模块中的 `checkStars()`函数来测试代码。"
      CSD U6 params starchaser 4_2018: "# 星星追逐者\n\n现在让它能在所有的星星上起作用\n\n# 这样做\n\n-   创建一个`checkStars()`（检查星星）函数,
        使用`计数循环`来检查星星数组中的每颗星. \n-   调用事件模块中的 `checkStars()`函数来测试代码。"
      CSD U6 params starchaser 4_2019: "# 星星追逐者\n\n现在让它能在所有的星星上起作用\n\n# 这样做\n\n-   创建一个`checkStars()`（检查星星）函数,
        使用`计数循环`来检查星星数组中的每颗星. \n-   调用事件模块中的 `checkStars()`函数来测试代码。"
      CSD U6 params starchaser 5: |-
        # 星星追逐者

        现在你可以添加额外的星星了，并且函数也会对它们起作用。

        # 这样做

        -   在设计模式下, 复制其中一颗星, 并将其名称和颜色更改为"yellow"（黄色）。
        -   添加一个新元素 "yellow"到星星数组中。
        -   用新的星星来测试游戏。
      CSD U6 params starchaser 5_2018: |-
        # 星星追逐者

        现在你可以添加额外的星星了，并且函数也会对它们起作用。

        # 这样做

        -   在设计模式下, 复制其中一颗星, 并将其名称和颜色更改为"yellow"（黄色）。
        -   添加一个新元素 "yellow"到星星数组中。
        -   用新的星星来测试游戏。
      CSD U6 params starchaser 5_2019: |-
        # 星星追逐者

        现在你可以添加额外的星星了，并且函数也会对它们起作用。

        # 这样做

        -   在设计模式下, 复制其中一颗星, 并将其名称和颜色更改为"yellow"（黄色）。
        -   添加一个新元素 "yellow"到星星数组中。
        -   用新的星星来测试游戏。
      CSD U6 params starchaser challenge 1_2018: |-
        # 星星追逐者

        现在你有了一个可以正常工作的游戏，嗨可以用一些不同的功能来挑战自己。

        # 这样做

        -   用户开始有5条 "生命", 每次用户碰到 **错误**的星星都会失去一条生命。
        -   制作一个完成屏幕, 当用户耗尽生命时就改变屏幕。
      CSD U6 params starchaser challenge 1_2019: |-
        # 星星追逐者

        现在你有了一个可以正常工作的游戏，嗨可以用一些不同的功能来挑战自己。

        # 这样做

        -   用户开始有5条 "生命", 每次用户碰到 **错误**的星星都会失去一条生命。
        -   制作一个完成屏幕, 当用户耗尽生命时就改变屏幕。
      CSD U6 params starchaser challenge 2_2018: |-
        # 星星追逐者

        现在你有了一个可以正常工作的游戏，你可以用一些不同的功能来挑战自己。

        # 这样做

        -   让玩家在按下左键时回到屏幕中间。
      CSD U6 params starchaser challenge 2_2019: |-
        # 星星追逐者

        现在你有了一个可以正常工作的游戏，你可以用一些不同的功能来挑战自己。

        # 这样做

        -   让玩家在按下左键时回到屏幕中间。
      CSD U6 params starchaser intro: |-
        # 星星追逐者

        在这个游戏中, 用户试图根据LED灯的颜色来捕捉星星。

        # 这样做

        -   玩此游戏并和合作伙伴讨论以下内容:
        -   该程序可能需要哪些函数？
        -   这些函数应该有哪些参数？
      CSD U6 params starchaser intro_2018: |-
        # 星星追逐者

        在这个游戏中, 用户试图根据LED灯的颜色来捕捉星星。

        # 这样做

        -   玩此游戏并和合作伙伴讨论以下内容:
        -   该程序可能需要哪些函数？
        -   这些函数应该有哪些参数？
      CSD U6 params starchaser intro_2019: |-
        # 星星追逐者

        在这个游戏中, 用户试图根据LED灯的颜色来捕捉星星。

        # 这样做

        -   玩此游戏并和合作伙伴讨论以下内容:
        -   该程序可能需要哪些函数？
        -   这些函数应该有哪些参数？
      CSD U6 predict LED button: 嵌入式预测
      CSD U6 predict LED button_2018: 嵌入式预测
      CSD U6 predict LED button_2019: 嵌入式预测
      CSD U6 random array notes: |-
        # 随机歌曲生成器

        你需要制作一个随机歌曲生成器。当你按下一个按钮, 一个随机的音符会被播放。按住按钮的时间足够长，你将得到美妙的哗哗声响。

        在上节课，你用了`randomNumber()` 从数组中选择一个元素，因此，这应该是熟悉的。

        # 这样做

        -   添加代码从`notes`数组中随机选择一个音符，并播放它。
        -   运行程序, 并按左按钮来听蜂鸣器发出的优美的曲调。
      CSD U6 random array notes_2018: |-
        # 随机歌曲生成器

        你需要制作一个随机歌曲生成器。当你按下一个按钮, 一个随机的音符会被播放。按住按钮的时间足够长，你将得到美妙的哗哗声响。

        在上节课，你用了`randomNumber()` 从数组中选择一个元素，因此，这应该是熟悉的。

        # 这样做

        -   添加代码从`notes`数组中随机选择一个音符，并播放它。
        -   运行程序, 并按左按钮来听蜂鸣器发出的优美的曲调。
      CSD U6 random array notes_2019: |-
        # 随机歌曲生成器

        你需要制作一个随机歌曲生成器。当你按下一个按钮, 一个随机的音符会被播放。按住按钮的时间足够长，你将得到美妙的哗哗声响。

        在上节课，你用了`randomNumber()` 从数组中选择一个元素，因此，这应该是熟悉的。

        # 这样做

        -   添加代码从`notes`数组中随机选择一个音符，并播放它。
        -   运行程序, 并按左按钮来听蜂鸣器发出的优美的曲调。
      CSD U6 sensor experiment embedded: |-
        # 传感器实验

        运行程序，并用你的主板做实验。试试用不同的方法和主板交互，来了解每个传感器可能是做什么的。根据你对每个传感器的实验，和你的邻座讨论：

        -   这个传感器是用来衡量什么的？
        -   它的最大值是什么？
        -   它的最小值是什么？
      CSD U6 sensor experiment embedded_2018: |-
        # 传感器实验

        运行程序，并用你的主板做实验。试试用不同的方法和主板交互，来了解每个传感器可能是做什么的。根据你对每个传感器的实验，和你的邻座讨论：

        -   这个传感器是用来衡量什么的？
        -   它的最大值是什么？
        -   它的最小值是什么？
      CSD U6 sensor experiment embedded_2019: |-
        # 传感器实验

        运行程序，并用你的主板做实验。试试用不同的方法和主板交互，来了解每个传感器可能是做什么的。根据你对每个传感器的实验，和你的邻座讨论：

        -   这个传感器是用来衡量什么的？
        -   它的最大值是什么？
        -   它的最小值是什么？
      CSD U6 setProperty Text: |-
        # 改变文本

        `setProperty()`（设置属性）模块能被用来改变设计元素的各种值，包括它们包含的文本。

        # 这样做

        -   拖拽一个`setProperty()`（设置属性）模块
        -   为第一个参数，选择“name”（元素的标识）
        -   为第二个参数，选择"text"（元素中想要设置大的属性）
        -   为第三个参数，写上引号引起来的你的名字（要设置的值）

        _注意：我们已经移除了设计模式标签页，这样你能开始练习使用`setProperty()`（设置属性）。它会在晚一点你需要构建自己的应用时再出现。_
      CSD U6 setProperty Text_2018: |-
        # 改变文本

        `setProperty()`（设置属性）模块能被用来改变设计元素的各种值，包括它们包含的文本。

        # 这样做

        -   拖拽一个`setProperty()`（设置属性）模块
        -   为第一个参数，选择“name”（元素的标识）
        -   为第二个参数，选择"text"（元素中想要设置大的属性）
        -   为第三个参数，写上引号引起来的你的名字（要设置的值）

        _注意：我们已经移除了设计模式标签页，这样你能开始练习使用`setProperty()`（设置属性）。它会在晚一点你需要构建自己的应用时再出现。_
      CSD U6 setProperty Text_2019: |-
        # 改变文本

        `setProperty()`（设置属性）模块能被用来改变设计元素的各种值，包括它们包含的文本。

        # 这样做

        -   拖拽一个`setProperty()`（设置属性）模块
        -   为第一个参数，选择“name”（元素的标识）
        -   为第二个参数，选择"text"（元素中想要设置大的属性）
        -   为第三个参数，写上引号引起来的你的名字（要设置的值）

        _注意：我们已经移除了设计模式标签页，这样你能开始练习使用`setProperty()`（设置属性）。它会在晚一点你需要构建自己的应用时再出现。_
      CSD U6 setProperty hidden: |-
        # 隐藏

        设计元素有个属性叫做”hidden"（隐藏），它控制元素应该显示或隐藏。我们将会用这个属性来创建一个警报应用。注意，当程序开始时，一个按钮是隐藏的，另一个不是。

        我们已经为"triggerAlarmButton"（触发警报按钮）设置了一个事件处理函数。点击它时会做两件事：

        -   将"statusLabel"（状态标签）的"text"（文本） 属性设置为"打开"
        -   设置"stopAlarmButton"的"hidden"属性为`false`（假）（这意味着它_不会_被隐藏起来）)

        # 这样做

        -   运行程序，并点击"Trigger Alarm"（触发警报）来看看它是如何工作的
        -   将代码添加到"triggerAlarmButton"对应的事件处理函数中

        _注意："stopAlarmButton"按钮已经在屏幕上了，但它的"hidden"属性被设置为真了，所以程序启动时它不会显示出来。_
      CSD U6 setProperty hidden 2: |-
        # 显示/隐藏

        如果这个警报应用的一旦触发警报后不能关掉，那它就不是特别有用。让我们修好它。

        # 这样做

        添加第二个`onEvent()`（当事件发生时）模块来监视"stopAlarmButton"（停止监视按钮）是否被点击了。在这个模块里：

        \*
        将状态文本改为"关闭"

        -   隐藏"stopAlarmButton"

        _暗示：
        "hidden"是一个布尔属性。如果为`false`（假）则按钮会显示，什么时候应该再将它隐藏起来？_
      CSD U6 setProperty hidden 2_2018: |-
        # 显示/隐藏

        如果这个警报应用的一旦触发警报后不能关掉，那它就不是特别有用。让我们修好它。

        # 这样做

        添加第二个`onEvent()`（当事件发生时）模块来监视"stopAlarmButton"（停止监视按钮）是否被点击了。在这个模块里：

        \*
        将状态文本改为"关闭"

        -   隐藏"stopAlarmButton"

        _暗示：
        "hidden"是一个布尔属性。如果为`false`（假）则按钮会显示，什么时候应该再将它隐藏起来？_
      CSD U6 setProperty hidden 2_2019: |-
        # 显示/隐藏

        如果这个警报应用的一旦触发警报后不能关掉，那它就不是特别有用。让我们修好它。

        # 这样做

        添加第二个`onEvent()`（当事件发生时）模块来监视"stopAlarmButton"（停止监视按钮）是否被点击了。在这个模块里：

        \*
        将状态文本改为"关闭"

        -   隐藏"stopAlarmButton"

        _暗示：
        "hidden"是一个布尔属性。如果为`false`（假）则按钮会显示，什么时候应该再将它隐藏起来？_
      CSD U6 setProperty hidden_2018: |-
        # 隐藏

        设计元素有个属性叫做”hidden"（隐藏），它控制元素应该显示或隐藏。我们将会用这个属性来创建一个警报应用。注意，当程序开始时，一个按钮是隐藏的，另一个不是。

        我们已经为"triggerAlarmButton"（触发警报按钮）设置了一个事件处理函数。点击它时会做两件事：

        -   将"statusLabel"（状态标签）的"text"（文本） 属性设置为"打开"
        -   设置"stopAlarmButton"的"hidden"属性为`false`（假）（这意味着它_不会_被隐藏起来）)

        # 这样做

        -   运行程序，并点击"Trigger Alarm"（触发警报）来看看它是如何工作的
        -   将代码添加到"triggerAlarmButton"对应的事件处理函数中

        _注意："stopAlarmButton"按钮已经在屏幕上了，但它的"hidden"属性被设置为真了，所以程序启动时它不会显示出来。_
      CSD U6 setProperty hidden_2019: |-
        # 隐藏

        设计元素有个属性叫做”hidden"（隐藏），它控制元素应该显示或隐藏。我们将会用这个属性来创建一个警报应用。注意，当程序开始时，一个按钮是隐藏的，另一个不是。

        我们已经为"triggerAlarmButton"（触发警报按钮）设置了一个事件处理函数。点击它时会做两件事：

        -   将"statusLabel"（状态标签）的"text"（文本） 属性设置为"打开"
        -   设置"stopAlarmButton"的"hidden"属性为`false`（假）（这意味着它_不会_被隐藏起来）)

        # 这样做

        -   运行程序，并点击"Trigger Alarm"（触发警报）来看看它是如何工作的
        -   将代码添加到"triggerAlarmButton"对应的事件处理函数中

        _注意："stopAlarmButton"按钮已经在屏幕上了，但它的"hidden"属性被设置为真了，所以程序启动时它不会显示出来。_
      CSD U6 setProperty xy click: |-
        # 点击时改变

        如果只能在程序启动时才能设置一个属性，这没什么用。毕竟，你只能在设计模式做所有事情。当你在`onEvent`（当事件发生时）里使用`setProperty`（设置属性）时，你就可以实现那些不能在设计模式做的工作了。

        # 这样做

        这里已经有了一个空的`onEvent`模块了，它在监视"simley"图片。在`onEvent`模块中，用两个
        `setProperty`模块来将笑脸符号移动到别的地方（它现在在什么地方不重要）。通过运行程序并点击笑脸来测试它。
      CSD U6 setProperty xy click_2018: |-
        # 点击时改变

        如果只能在程序启动时才能设置一个属性，这没什么用。毕竟，你只能在设计模式做所有事情。当你在`onEvent`（当事件发生时）里使用`setProperty`（设置属性）时，你就可以实现那些不能在设计模式做的工作了。

        # 这样做

        这里已经有了一个空的`onEvent`模块了，它在监视"simley"图片。在`onEvent`模块中，用两个
        `setProperty`模块来将笑脸符号移动到别的地方（它现在在什么地方不重要）。通过运行程序并点击笑脸来测试它。
      CSD U6 setProperty xy click_2019: |-
        # 点击时改变

        如果只能在程序启动时才能设置一个属性，这没什么用。毕竟，你只能在设计模式做所有事情。当你在`onEvent`（当事件发生时）里使用`setProperty`（设置属性）时，你就可以实现那些不能在设计模式做的工作了。

        # 这样做

        这里已经有了一个空的`onEvent`模块了，它在监视"simley"图片。在`onEvent`模块中，用两个
        `setProperty`模块来将笑脸符号移动到别的地方（它现在在什么地方不重要）。通过运行程序并点击笑脸来测试它。
      CSD U6 setProperty xy random: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif"
        style="float:right; max-width: 150px; margin: 10px;">

        # 随机化

        在第一次点击时移动非常好，但如果能让笑脸在_每次_点击时，都能移动到某个地方，就更酷了。幸运的是，我们可以用`randomNumber`（随机数字）模块做到这一点。

        # 这样做

        虽然可以使用"x"和"y"属性设置到一个特定的数字，但使用`randomNumber()`（随机数字）模块可以在每次笑脸被点击时，都生成一个新的随机的"x"和"y"值。

        _提示：应用实验室的屏幕是320像素宽，450像素高。随机数应该在什么范围内，才能保证整个笑脸都能完全显示在屏幕上？_
      CSD U6 setProperty xy random_2018: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif"
        style="float:right; max-width: 150px; margin: 10px;">

        # 随机化

        在第一次点击时移动非常好，但如果能让笑脸在_每次_点击时，都能移动到某个地方，就更酷了。幸运的是，我们可以用`randomNumber`（随机数字）模块做到这一点。

        # 这样做

        虽然可以使用"x"和"y"属性设置到一个特定的数字，但使用`randomNumber()`（随机数字）模块可以在每次笑脸被点击时，都生成一个新的随机的"x"和"y"值。

        _提示：应用实验室的屏幕是320像素宽，450像素高。随机数应该在什么范围内，才能保证整个笑脸都能完全显示在屏幕上？_
      CSD U6 setProperty xy random_2019: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif"
        style="float:right; max-width: 150px; margin: 10px;">

        # 随机化

        在第一次点击时移动非常好，但如果能让笑脸在_每次_点击时，都能移动到某个地方，就更酷了。幸运的是，我们可以用`randomNumber`（随机数字）模块做到这一点。

        # 这样做

        虽然可以使用"x"和"y"属性设置到一个特定的数字，但使用`randomNumber()`（随机数字）模块可以在每次笑脸被点击时，都生成一个新的随机的"x"和"y"值。

        _提示：应用实验室的屏幕是320像素宽，450像素高。随机数应该在什么范围内，才能保证整个笑脸都能完全显示在屏幕上？_
      CSD U6 slider intro: |-
        # 滑动条

        上次，你的用户只能在短和长的蜂鸣声中选择一个。为了让用户能够精确的控制蜂鸣器的持续时间，你需要一个滑动条。

        滑动条让用户可以选择一个在100到1000之间的值，作为蜂鸣声的持续时间。但是这里没弄对，所以它无法工作。

        # 这样做

        -   查看一下代码，找到让持续时间无法正常设置的缺陷。
            \\t\* (暗示：将鼠标悬停到黄色的三角上来查看关于代码什么地方错了的提示。)
      CSD U6 slider intro_2018: |-
        # 滑动条

        上次，你的用户只能在短和长的蜂鸣声中选择一个。为了让用户能够精确的控制蜂鸣器的持续时间，你需要一个滑动条。

        滑动条让用户可以选择一个在100到1000之间的值，作为蜂鸣声的持续时间。但是这里没弄对，所以它无法工作。

        # 这样做

        -   查看一下代码，找到让持续时间无法正常设置的缺陷。
            \\t\* (暗示：将鼠标悬停到黄色的三角上来查看关于代码什么地方错了的提示。)
      CSD U6 slider intro_2019: |-
        # 滑动条

        上次，你的用户只能在短和长的蜂鸣声中选择一个。为了让用户能够精确的控制蜂鸣器的持续时间，你需要一个滑动条。

        滑动条让用户可以选择一个在100到1000之间的值，作为蜂鸣声的持续时间。但是这里没弄对，所以它无法工作。

        # 这样做

        -   查看一下代码，找到让持续时间无法正常设置的缺陷。
            \\t\* (暗示：将鼠标悬停到黄色的三角上来查看关于代码什么地方错了的提示。)
      CSD U6 stillness game predict code: |-
        # 随加速度计而变

        此程序使用更改事件在每次主板移动时增加移动计量器。当移动计量器达到100, 警报就会响起。

        # 这样做

        此程序有两个需要修复的缺陷：

        -   移动仪表由按键按压触发, 而非加速度计的`change`事件。
        -   程序员忘记了如何使用计数器模式来增加移动变量。

        一旦找到了缺陷，运行该程序，并尝试在不触发报警器的情况下将主板传递给你的合作伙伴。
      CSD U6 stillness game predict code_2018: |-
        # 随加速度计而变

        此程序使用更改事件在每次主板移动时增加移动计量器。当移动计量器达到100, 警报就会响起。

        # 这样做

        此程序有两个需要修复的缺陷：

        -   移动仪表由按键按压触发, 而非加速度计的`change`事件。
        -   程序员忘记了如何使用计数器模式来增加移动变量。

        一旦找到了缺陷，运行该程序，并尝试在不触发报警器的情况下将主板传递给你的合作伙伴。
      CSD U6 stillness game predict code_2019: |-
        # 随加速度计而变

        此程序使用更改事件在每次主板移动时增加移动计量器。当移动计量器达到100, 警报就会响起。

        # 这样做

        此程序有两个需要修复的缺陷：

        -   移动仪表由按键按压触发, 而非加速度计的`change`事件。
        -   程序员忘记了如何使用计数器模式来增加移动变量。

        一旦找到了缺陷，运行该程序，并尝试在不触发报警器的情况下将主板传递给你的合作伙伴。
      CSD U6 test LED: "# 控制LED灯\n\n现在，你知道你的主板在工作了，你可以试试不同的LED模块。\n\n# \n\n这样做\n\n-
        \  点击\"运行\"，然后和你的伙伴讨论一下代码是如何工作的。\n-   \\*\n    试试不同的LED模块，看看它们能做什么。\n-   暗示：别忘了在改了代码后，点击\"重置\"来再次运行你的代码。"
      CSD U6 test LED_2018: "# 控制LED灯\n\n现在，你知道你的主板在工作了，你可以试试不同的LED模块。\n\n# \n\n这样做\n\n-
        \  点击\"运行\"，然后和你的伙伴讨论一下代码是如何工作的。\n-   \\*\n    试试不同的LED模块，看看它们能做什么。\n-   暗示：别忘了在改了代码后，点击\"重置\"来再次运行你的代码。"
      CSD U6 test LED_2019: "# 控制LED灯\n\n现在，你知道你的主板在工作了，你可以试试不同的LED模块。\n\n# \n\n这样做\n\n-
        \  点击\"运行\"，然后和你的伙伴讨论一下代码是如何工作的。\n-   \\*\n    试试不同的LED模块，看看它们能做什么。\n-   暗示：别忘了在改了代码后，点击\"重置\"来再次运行你的代码。"
      CSD U6 tugowar buzzer: |-
        # 胜利的蜂鸣器

        现在，你的项目向导描述中剩下的最后一件事情，就是蜂鸣器了。他应该在玩家1胜利时播放一个高的声音，在玩家2胜利时播放一个低的声音。

        # 这样做

        现在，我们已经能直接用`player`（玩家）参数来报告哪个玩家赢了，但这不能让蜂鸣器播放不同的声音。在条件里，要判断是否一个玩家赢了， 需要加入_另一个_条件来检查是哪一个玩家。如果(if)`player == "red"`（玩家等于红色）蜂鸣器应该播放一个高音，否则（else）播放一个低音。
      CSD U6 tugowar buzzer_2018: |-
        # 胜利的蜂鸣器

        现在，你的项目向导描述中剩下的最后一件事情，就是蜂鸣器了。他应该在玩家1胜利时播放一个高的声音，在玩家2胜利时播放一个低的声音。

        # 这样做

        现在，我们已经能直接用`player`（玩家）参数来报告哪个玩家赢了，但这不能让蜂鸣器播放不同的声音。在条件里，要判断是否一个玩家赢了， 需要加入_另一个_条件来检查是哪一个玩家。如果(if)`player == "red"`（玩家等于红色）蜂鸣器应该播放一个高音，否则（else）播放一个低音。
      CSD U6 tugowar buzzer_2019: |-
        # 胜利的蜂鸣器

        现在，你的项目向导描述中剩下的最后一件事情，就是蜂鸣器了。他应该在玩家1胜利时播放一个高的声音，在玩家2胜利时播放一个低的声音。

        # 这样做

        现在，我们已经能直接用`player`（玩家）参数来报告哪个玩家赢了，但这不能让蜂鸣器播放不同的声音。在条件里，要判断是否一个玩家赢了， 需要加入_另一个_条件来检查是哪一个玩家。如果(if)`player == "red"`（玩家等于红色）蜂鸣器应该播放一个高音，否则（else）播放一个低音。
      CSD U6 tugowar conditional: |-
        # 检查赢家

        你的游戏应该可以更好玩了。两个玩家可以点击它们自己的按钮，然后它们的表情符号会在屏幕上比赛。但我们仍然需要一个方法让某个玩家胜利。

        # 这样做

        在`checkWin()`（检查胜利）函数里加入一个条件，你需要检查是否某个玩家在点击时胜利了。现在，我们只需要用`console.log`来报告胜利者。

        \*
        在`checkWin()`的末尾添加一个如果条件语句

        -   在如果条件里，检查是否`player_y`（玩家y）大于350 (或者用你在上一关决定的，显示在屏幕下的值)
        -   在你的条件里，增加一个`console.log`来报告哪个玩家胜利了
        -   测试和你的程序，确保它会在某个表情符号到达屏幕底部时，能够报告哪个玩家胜利了。
      CSD U6 tugowar conditional_2018: |-
        # 检查赢家

        你的游戏应该可以更好玩了。两个玩家可以点击它们自己的按钮，然后它们的表情符号会在屏幕上比赛。但我们仍然需要一个方法让某个玩家胜利。

        # 这样做

        在`checkWin()`（检查胜利）函数里加入一个条件，你需要检查是否某个玩家在点击时胜利了。现在，我们只需要用`console.log`来报告胜利者。

        \*
        在`checkWin()`的末尾添加一个如果条件语句

        -   在如果条件里，检查是否`player_y`（玩家y）大于350 (或者用你在上一关决定的，显示在屏幕下的值)
        -   在你的条件里，增加一个`console.log`来报告哪个玩家胜利了
        -   测试和你的程序，确保它会在某个表情符号到达屏幕底部时，能够报告哪个玩家胜利了。
      CSD U6 tugowar conditional_2019: |-
        # 检查赢家

        你的游戏应该可以更好玩了。两个玩家可以点击它们自己的按钮，然后它们的表情符号会在屏幕上比赛。但我们仍然需要一个方法让某个玩家胜利。

        # 这样做

        在`checkWin()`（检查胜利）函数里加入一个条件，你需要检查是否某个玩家在点击时胜利了。现在，我们只需要用`console.log`来报告胜利者。

        \*
        在`checkWin()`的末尾添加一个如果条件语句

        -   在如果条件里，检查是否`player_y`（玩家y）大于350 (或者用你在上一关决定的，显示在屏幕下的值)
        -   在你的条件里，增加一个`console.log`来报告哪个玩家胜利了
        -   测试和你的程序，确保它会在某个表情符号到达屏幕底部时，能够报告哪个玩家胜利了。
      CSD U6 tugowar demo: |-
        # 抓住那个虫子！

        这是一个拔河比赛的例子，你会在课程结束时创建一个。为了玩这个游戏，需要和另一个同学配对。一个同学在左边尽可能快的点击电路游戏板上的左按钮，另一个同学在右边也一样点击右按钮。谁先让虫子到达它们这边的，就取得了胜利。
      CSD U6 tugowar demo_2018: |-
        # 抓住那个虫子！

        这是一个拔河比赛的例子，你会在课程结束时创建一个。为了玩这个游戏，需要和另一个同学配对。一个同学在左边尽可能快的点击电路游戏板上的左按钮，另一个同学在右边也一样点击右按钮。谁先让虫子到达它们这边的，就取得了胜利。
      CSD U6 tugowar demo_2019: |-
        # 抓住那个虫子！

        这是一个拔河比赛的例子，你会在课程结束时创建一个。为了玩这个游戏，需要和另一个同学配对。一个同学在左边尽可能快的点击电路游戏板上的左按钮，另一个同学在右边也一样点击右按钮。谁先让虫子到达它们这边的，就取得了胜利。
      CSD U6 tugowar design 1: "# 入门：屏幕设计\n\n你应该已经看过来这个项目的计划向导。这个项目向导中已经添加了一些工作了。基于项目向导，你能够完成剩下的工作。\n\n#
        \n\n这样做\n\n我们已经创建了一个\"start\"（开始）屏幕，并且包含了标题和一个\"play\"（开始）按钮。使用你的计划向导，完成这个屏幕的创建。你需要：\n\n-
        \  更新标题文本为：\"表情符号比赛\"\n-   用ID（标识）\"instructions\"来增加一个游戏说明。\n\n可以随意添加其它想要的设计。"
      CSD U6 tugowar design 1.5: |-
        # 游戏屏幕设计

        在玩游戏的地方，我们已经增加了一个”game“（游戏）屏幕。它只需要一些轻微的调整。

        # 这样做

        切换到"game”（游戏）屏幕，用你的计划向导，通过改变两个表情图片的颜色来修好这个屏幕。

        可以随意调整其它想要的设计。
      CSD U6 tugowar design 1.5_2018: |-
        # 游戏屏幕设计

        在玩游戏的地方，我们已经增加了一个”game“（游戏）屏幕。它只需要一些轻微的调整。

        # 这样做

        切换到"game”（游戏）屏幕，用你的计划向导，通过改变两个表情图片的颜色来修好这个屏幕。

        可以随意调整其它想要的设计。
      CSD U6 tugowar design 1.5_2019: |-
        # 游戏屏幕设计

        在玩游戏的地方，我们已经增加了一个”game“（游戏）屏幕。它只需要一些轻微的调整。

        # 这样做

        切换到"game”（游戏）屏幕，用你的计划向导，通过改变两个表情图片的颜色来修好这个屏幕。

        可以随意调整其它想要的设计。
      CSD U6 tugowar design 1_2018: "# 入门：屏幕设计\n\n你应该已经看过来这个项目的计划向导。这个项目向导中已经添加了一些工作了。基于项目向导，你能够完成剩下的工作。\n\n#
        \n\n这样做\n\n我们已经创建了一个\"start\"（开始）屏幕，并且包含了标题和一个\"play\"（开始）按钮。使用你的计划向导，完成这个屏幕的创建。你需要：\n\n-
        \  更新标题文本为：\"表情符号比赛\"\n-   用ID（标识）\"instructions\"来增加一个游戏说明。\n\n可以随意添加其它想要的设计。"
      CSD U6 tugowar design 1_2019: "# 入门：屏幕设计\n\n你应该已经看过来这个项目的计划向导。这个项目向导中已经添加了一些工作了。基于项目向导，你能够完成剩下的工作。\n\n#
        \n\n这样做\n\n我们已经创建了一个\"start\"（开始）屏幕，并且包含了标题和一个\"play\"（开始）按钮。使用你的计划向导，完成这个屏幕的创建。你需要：\n\n-
        \  更新标题文本为：\"表情符号比赛\"\n-   用ID（标识）\"instructions\"来增加一个游戏说明。\n\n可以随意添加其它想要的设计。"
      CSD U6 tugowar design 2: "# 设计胜利的屏幕\n\n程序中的最终屏幕会显示谁赢了。它现在完全是空的。\n\n# \n\n这样做\n\n切换到\"win\"（胜利）然后基于你的项目向导设计它。要特别注意每个元素的ID（标识）。一旦你增加了必须的元素，就可以随意添加其它想要的设计了。"
      CSD U6 tugowar design 2_2018: "# 设计胜利的屏幕\n\n程序中的最终屏幕会显示谁赢了。它现在完全是空的。\n\n# \n\n这样做\n\n切换到\"win\"（胜利）然后基于你的项目向导设计它。要特别注意每个元素的ID（标识）。一旦你增加了必须的元素，就可以随意添加其它想要的设计了。"
      CSD U6 tugowar design 2_2019: "# 设计胜利的屏幕\n\n程序中的最终屏幕会显示谁赢了。它现在完全是空的。\n\n# \n\n这样做\n\n切换到\"win\"（胜利）然后基于你的项目向导设计它。要特别注意每个元素的ID（标识）。一旦你增加了必须的元素，就可以随意添加其它想要的设计了。"
      CSD U6 tugowar setProperty: |-
        # 显示胜利者

        胜利者屏幕实际上不知道_谁_赢得了游戏。让我们来修复它。

        # 这样做

        在每次调用`setScreen()`（设置屏幕）时，增加一个`setProperty`（模块）来改变"winner"胜利者的`"text"`（文本）属性为实际的胜利者。
      CSD U6 tugowar setProperty_2018: |-
        # 显示胜利者

        胜利者屏幕实际上不知道_谁_赢得了游戏。让我们来修复它。

        # 这样做

        在每次调用`setScreen()`（设置屏幕）时，增加一个`setProperty`（模块）来改变"winner"胜利者的`"text"`（文本）属性为实际的胜利者。
      CSD U6 tugowar setProperty_2019: |-
        # 显示胜利者

        胜利者屏幕实际上不知道_谁_赢得了游戏。让我们来修复它。

        # 这样做

        在每次调用`setScreen()`（设置屏幕）时，增加一个`setProperty`（模块）来改变"winner"胜利者的`"text"`（文本）属性为实际的胜利者。
      CSD U6 tugowar setScreen: |-
        # 更改为胜利者屏幕

        现在我们已经能用条件来检查哪个玩家胜利了，让我们在某个玩家胜利后，切换到“win"（胜利者）屏幕。

        # 这样做

        在你已经创建的，用来检查是否某个玩家已经到达低端的条件与距离，增加一个`setScreen()`（设置屏幕）屏幕来改变到"win"（胜利者）屏幕。确保在下一步之前，测试一下你的新代码是否能工作！
      CSD U6 tugowar setScreen_2018: |-
        # 更改为胜利者屏幕

        现在我们已经能用条件来检查哪个玩家胜利了，让我们在某个玩家胜利后，切换到“win"（胜利者）屏幕。

        # 这样做

        在你已经创建的，用来检查是否某个玩家已经到达低端的条件与距离，增加一个`setScreen()`（设置屏幕）屏幕来改变到"win"（胜利者）屏幕。确保在下一步之前，测试一下你的新代码是否能工作！
      CSD U6 tugowar setScreen_2019: |-
        # 更改为胜利者屏幕

        现在我们已经能用条件来检查哪个玩家胜利了，让我们在某个玩家胜利后，切换到“win"（胜利者）屏幕。

        # 这样做

        在你已经创建的，用来检查是否某个玩家已经到达低端的条件与距离，增加一个`setScreen()`（设置屏幕）屏幕来改变到"win"（胜利者）屏幕。确保在下一步之前，测试一下你的新代码是否能工作！
      CSD U6 tugowar variables 1: "# startGame()（开始游戏）函数\n\n如果你看了计划向导中的事件部分，你可能注意到有两个事件其实做了同样的事情。这个事件用一样的代码来响应\"play\"（玩）和\"replay\"（重玩）按钮。但是重复的代码放到**函数**中，才是最完美的。\n\n#
        \n\n这样做\n\n我们已经添加了一个叫做`startGame()`（开始游戏）的新函数到适当的事件处理函数中了，并且为你创建了一个空函数。 \n\n-
        \  找到`startGame()`函数的定义\n    ( [显示在哪里](#triggercallout=block_trigger) )\n-
        \  在函数里：\n    \\\\t\\*\n    将两个表情图片都移动到屏幕的顶端，即设置它们的\"y\"属性为0\n    \\\\t\\*
        将屏幕改变为\"game\"\n\n一旦你写好了`startGame()`函数，试试点击\"玩“按钮，来看看它是否能工作了。"
      CSD U6 tugowar variables 1_2018: "# startGame()（开始游戏）函数\n\n如果你看了计划向导中的事件部分，你可能注意到有两个事件其实做了同样的事情。这个事件用一样的代码来响应\"play\"（玩）和\"replay\"（重玩）按钮。但是重复的代码放到**函数**中，才是最完美的。\n\n#
        \n\n这样做\n\n我们已经添加了一个叫做`startGame()`（开始游戏）的新函数到适当的事件处理函数中了，并且为你创建了一个空函数。 \n\n-
        \  找到`startGame()`函数的定义\n    ( [显示在哪里](#triggercallout=block_trigger) )\n-
        \  在函数里：\n    \\\\t\\*\n    将两个表情图片都移动到屏幕的顶端，即设置它们的\"y\"属性为0\n    \\\\t\\*
        将屏幕改变为\"game\"\n\n一旦你写好了`startGame()`函数，试试点击\"玩“按钮，来看看它是否能工作了。"
      CSD U6 tugowar variables 1_2019: "# startGame()（开始游戏）函数\n\n如果你看了计划向导中的事件部分，你可能注意到有两个事件其实做了同样的事情。这个事件用一样的代码来响应\"play\"（玩）和\"replay\"（重玩）按钮。但是重复的代码放到**函数**中，才是最完美的。\n\n#
        \n\n这样做\n\n我们已经添加了一个叫做`startGame()`（开始游戏）的新函数到适当的事件处理函数中了，并且为你创建了一个空函数。 \n\n-
        \  找到`startGame()`函数的定义\n    ( [显示在哪里](#triggercallout=block_trigger) )\n-
        \  在函数里：\n    \\\\t\\*\n    将两个表情图片都移动到屏幕的顶端，即设置它们的\"y\"属性为0\n    \\\\t\\*
        将屏幕改变为\"game\"\n\n一旦你写好了`startGame()`函数，试试点击\"玩“按钮，来看看它是否能工作了。"
      CSD U6 tugowar variables 2: |-
        # 有参数的函数

        大部分你在应用实验室用到的，已有的函数，都需要输入，或者叫做**参数**。用来将需要到信息传递到函数中。例如，当改变屏幕时，你需要将屏幕的ID（标识）作为参数来传递，如`setScreen("win")`。

        这些参数显示为变量，能被用在函数里，你也可以自己创建有参数的函数了！

        # 这样做

        <div
        markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        点击展开

        </div>

        我们不必再为红色和蓝色玩家创建单独的移动函数了，我们已经创建了一个叫做`movePlayer()`（移动玩家）的函数，它有个玩家图片ID（标识）的变量作为函数，叫做`player`（玩家）。在函数里，你可以将`player`用在任何需要指定玩家ID，或者控制的地方。

        -   找到`movePlayer()`在哪里定义的。( [显示在哪里](#triggercallout=block_trigger) )
        -   在
            `movePlayer()`函数里定义：
        -   获得玩家当前的"y"属性，并将它保存到一个叫做`player_y`的变量中。
        -   将`player_y`的值增加10
        -   将玩家的"y"属性设置为你的`player_y`的新值

        一旦你增加了代码，就可以测试了。你应该明白_两个按钮_都通过我们创建的同一个函数来工作 - 太酷了！
      CSD U6 tugowar variables 2_2018: |-
        # 有参数的函数

        大部分你在应用实验室用到的，已有的函数，都需要输入，或者叫做**参数**。用来将需要到信息传递到函数中。例如，当改变屏幕时，你需要将屏幕的ID（标识）作为参数来传递，如`setScreen("win")`。

        这些参数显示为变量，能被用在函数里，你也可以自己创建有参数的函数了！

        # 这样做

        <div
        markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        点击展开

        </div>

        我们不必再为红色和蓝色玩家创建单独的移动函数了，我们已经创建了一个叫做`movePlayer()`（移动玩家）的函数，它有个玩家图片ID（标识）的变量作为函数，叫做`player`（玩家）。在函数里，你可以将`player`用在任何需要指定玩家ID，或者控制的地方。

        -   找到`movePlayer()`在哪里定义的。( [显示在哪里](#triggercallout=block_trigger) )
        -   在
            `movePlayer()`函数里定义：
        -   获得玩家当前的"y"属性，并将它保存到一个叫做`player_y`的变量中。
        -   将`player_y`的值增加10
        -   将玩家的"y"属性设置为你的`player_y`的新值

        一旦你增加了代码，就可以测试了。你应该明白_两个按钮_都通过我们创建的同一个函数来工作 - 太酷了！
      CSD U6 tugowar variables 2_2019: |-
        # 有参数的函数

        大部分你在应用实验室用到的，已有的函数，都需要输入，或者叫做**参数**。用来将需要到信息传递到函数中。例如，当改变屏幕时，你需要将屏幕的ID（标识）作为参数来传递，如`setScreen("win")`。

        这些参数显示为变量，能被用在函数里，你也可以自己创建有参数的函数了！

        # 这样做

        <div
        markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        点击展开

        </div>

        我们不必再为红色和蓝色玩家创建单独的移动函数了，我们已经创建了一个叫做`movePlayer()`（移动玩家）的函数，它有个玩家图片ID（标识）的变量作为函数，叫做`player`（玩家）。在函数里，你可以将`player`用在任何需要指定玩家ID，或者控制的地方。

        -   找到`movePlayer()`在哪里定义的。( [显示在哪里](#triggercallout=block_trigger) )
        -   在
            `movePlayer()`函数里定义：
        -   获得玩家当前的"y"属性，并将它保存到一个叫做`player_y`的变量中。
        -   将`player_y`的值增加10
        -   将玩家的"y"属性设置为你的`player_y`的新值

        一旦你增加了代码，就可以测试了。你应该明白_两个按钮_都通过我们创建的同一个函数来工作 - 太酷了！
      CSD U6 tugowar variables 3: "# checkWin()（检查胜利者）函数\n\n在最后一个函数里，你需要在每个玩家移动后，调用`checkWin()`（检查胜利者）函数。。并且用来检查是否有玩家移动到了屏幕的最底下，如果需要的话，要宣布谁是胜利者。现在，我们要指出谁是胜利者，并打印日志到控制台中。\n\n#
        \n\n这样做\n\n和`movePlayer()`（移动玩家）函数一样，`checkWin()`（检查胜利者）有一个参数叫做`player`（玩家）。如果你调用了`checkWin(\"red\")`，那么`player`变量就会被设为值\"red\"（红色）。\n\n-
        \  找到函数是在哪里定义的 ( [显示在哪里](#triggercallout=block_trigger) )\n-   创建一个叫做`player_y`（玩家\\_y位置），并将它赋值给玩家的\"y\"属性\n-
        \  \\*\n    要么使用`console.log()`（控制台输出）命令，或者用监视器来报告`player_y`的值。\n-   \\*\n
        \   就用一个按钮来玩游戏，然后观察`player_y`值得变化。\n-   \\*\n    决定`player_y`是多少时，表明它到了屏幕底端。"
      CSD U6 tugowar variables 3_2018: "# checkWin()（检查胜利者）函数\n\n在最后一个函数里，你需要在每个玩家移动后，调用`checkWin()`（检查胜利者）函数。。并且用来检查是否有玩家移动到了屏幕的最底下，如果需要的话，要宣布谁是胜利者。现在，我们要指出谁是胜利者，并打印日志到控制台中。\n\n#
        \n\n这样做\n\n和`movePlayer()`（移动玩家）函数一样，`checkWin()`（检查胜利者）有一个参数叫做`player`（玩家）。如果你调用了`checkWin(\"red\")`，那么`player`变量就会被设为值\"red\"（红色）。\n\n-
        \  找到函数是在哪里定义的 ( [显示在哪里](#triggercallout=block_trigger) )\n-   创建一个叫做`player_y`（玩家\\_y位置），并将它赋值给玩家的\"y\"属性\n-
        \  \\*\n    要么使用`console.log()`（控制台输出）命令，或者用监视器来报告`player_y`的值。\n-   \\*\n
        \   就用一个按钮来玩游戏，然后观察`player_y`值得变化。\n-   \\*\n    决定`player_y`是多少时，表明它到了屏幕底端。"
      CSD U6 tugowar variables 3_2019: "# checkWin()（检查胜利者）函数\n\n在最后一个函数里，你需要在每个玩家移动后，调用`checkWin()`（检查胜利者）函数。。并且用来检查是否有玩家移动到了屏幕的最底下，如果需要的话，要宣布谁是胜利者。现在，我们要指出谁是胜利者，并打印日志到控制台中。\n\n#
        \n\n这样做\n\n和`movePlayer()`（移动玩家）函数一样，`checkWin()`（检查胜利者）有一个参数叫做`player`（玩家）。如果你调用了`checkWin(\"red\")`，那么`player`变量就会被设为值\"red\"（红色）。\n\n-
        \  找到函数是在哪里定义的 ( [显示在哪里](#triggercallout=block_trigger) )\n-   创建一个叫做`player_y`（玩家\\_y位置），并将它赋值给玩家的\"y\"属性\n-
        \  \\*\n    要么使用`console.log()`（控制台输出）命令，或者用监视器来报告`player_y`的值。\n-   \\*\n
        \   就用一个按钮来玩游戏，然后观察`player_y`值得变化。\n-   \\*\n    决定`player_y`是多少时，表明它到了屏幕底端。"
      CSD What Makes a Computer a Computer Video_2019: |-
        ## 需要考虑的问题

        -   计算机相比于更早诞生的其他机器而言，有哪些不同？
        -   想想你会利用计算机做些什么事。会有什么输入、输出、存储和程序呢？
      CSDU2 - PW - Class Style Personal Site: "# 自由游戏样式\n\n现在轮到你来决定用什么样的样式了！使用classes（类）样式和RGB颜色来改进你的个人网站。\n\n\\*\n确保你完成了下面的检查清单。\n\n-
        \  先保存一个你的首页的快照，然后将它存到电脑的某个地方，以便于过会儿能找到它。\n\n## \n\n检查清单\n\n-   在你的站点某处，给用RGB值给文本一个特别的颜色。\n-
        \  在你的泪飙页面，给所有的列表元素用上相同的背景颜色。\n-   用classes（类）给你的网站上至少两个元素设置上样式。"
      CSDU2 - PW - Class Style Personal Site_2018: "# 自由游戏样式\n\n现在轮到你来决定用什么样的样式了！使用classes（类）样式和RGB颜色来改进你的个人网站。\n\n\\*\n确保你完成了下面的检查清单。\n\n-
        \  先保存一个你的首页的快照，然后将它存到电脑的某个地方，以便于过会儿能找到它。\n\n## \n\n检查清单\n\n-   在你的站点某处，给用RGB值给文本一个特别的颜色。\n-
        \  在你的泪飙页面，给所有的列表元素用上相同的背景颜色。\n-   用classes（类）给你的网站上至少两个元素设置上样式。"
      CSDU2 - PW - Class Style Personal Site_2019: "# 自由游戏样式\n\n现在轮到你来决定用什么样的样式了！使用classes（类）样式和RGB颜色来改进你的个人网站。\n\n\\*\n确保你完成了下面的检查清单。\n\n-
        \  先保存一个你的首页的快照，然后将它存到电脑的某个地方，以便于过会儿能找到它。\n\n## \n\n检查清单\n\n-   在你的站点某处，给用RGB值给文本一个特别的颜色。\n-
        \  在你的泪飙页面，给所有的列表元素用上相同的背景颜色。\n-   用classes（类）给你的网站上至少两个元素设置上样式。"
      CSDU2 - Type Anything: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # 欢迎来到线上实验室！

        你进入了一个叫线上实验室的平台。线上实验室的界面分为三大部分。

        # 做这个

        \-试着在工作台上打些东西
        \-点击<img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px">去预览区域看下有什么反应！
      CSDU2 - Type Anything_2018: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # 欢迎来到线上实验室！

        你进入了一个叫线上实验室的平台。线上实验室的界面分为三大部分。

        # 做这个

        \-试着在工作台上打些东西
        \-点击<img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px">去预览区域看下有什么反应！
      CSDU2 - Type Anything_2019: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # 欢迎来到线上实验室！

        你进入了一个叫线上实验室的平台。线上实验室的界面分为三大部分。

        # 做这个

        \-试着在工作台上打些东西
        \-点击<img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px">去预览区域看下有什么反应！
      CSDU4 Project Events: |-
        # 链接屏幕

        你的所有屏幕都有了，现在你可以添加事件来改变屏幕了。当你完成这一步后，实际上你就完成了一个可以交互的原型了！

        # 这样做

        对你应用的每个屏幕：

        -   找到所有按钮的ID（标识）
        -   对每个按钮，加一个事件处理函数来监控ID（标识。
        -   在每个事件处理函数里，用`setScreen()`（设置屏幕）来移动右边的屏幕
        -   一起测试一下！

        根据你的应用里屏幕和按钮的数量，这可能是个相当复杂的过程。确保经常通过`console.log()`（控制台.日志）模块来测试你的工作。当你认为整个应用都可以工作时，和小组里其它伙伴的比一比，看看是不是一样的。
      CSDU4 Project Events_2018: |-
        # 链接屏幕

        你的所有屏幕都有了，现在你可以添加事件来改变屏幕了。当你完成这一步后，实际上你就完成了一个可以交互的原型了！

        # 这样做

        对你应用的每个屏幕：

        -   找到所有按钮的ID（标识）
        -   对每个按钮，加一个事件处理函数来监控ID（标识。
        -   在每个事件处理函数里，用`setScreen()`（设置屏幕）来移动右边的屏幕
        -   一起测试一下！

        根据你的应用里屏幕和按钮的数量，这可能是个相当复杂的过程。确保经常通过`console.log()`（控制台.日志）模块来测试你的工作。当你认为整个应用都可以工作时，和小组里其它伙伴的比一比，看看是不是一样的。
      CSDU4 Project Events_2019: |-
        # 链接屏幕

        你的所有屏幕都有了，现在你可以添加事件来改变屏幕了。当你完成这一步后，实际上你就完成了一个可以交互的原型了！

        # 这样做

        对你应用的每个屏幕：

        -   找到所有按钮的ID（标识）
        -   对每个按钮，加一个事件处理函数来监控ID（标识。
        -   在每个事件处理函数里，用`setScreen()`（设置屏幕）来移动右边的屏幕
        -   一起测试一下！

        根据你的应用里屏幕和按钮的数量，这可能是个相当复杂的过程。确保经常通过`console.log()`（控制台.日志）模块来测试你的工作。当你认为整个应用都可以工作时，和小组里其它伙伴的比一比，看看是不是一样的。
      CSDU4 Project Import_2018: |-
        # 返回应用程序

        现在已经有了一些输入屏幕的练习，下面可以开始做团队的应用程序了。

        # 这样做

        团队里每一位成员创建自己的一份应用拷贝，输入队里所有成员的屏幕。这将成为自己的副本，并且从下一课起要开始往里添加自己的代码。（不要忘了也输入之前已有的屏幕。）

        -   收集队里所有的共享url链接， **包括自己的**
            \\t\* 每一位成员如需找到自己的屏幕，可以回到上一课的最后一步，在[项目文件夹](/项目) 里找到
        -   每次输入一个屏幕，重复知道完成输入所有的屏幕
            \\t\* 如果在输入某一个屏幕时碰到ID错误，和该屏幕的创建者讨论解决
        -   删除缺省的“屏幕1”
        -   将主屏幕设为缺省屏幕

        现在不要担心怎样往里添加代码；在下一步会讲到。
      CSDU4 Project Import_2019: |-
        # 返回应用程序

        现在已经有了一些输入屏幕的练习，下面可以开始做团队的应用程序了。

        # 这样做

        团队里每一位成员创建自己的一份应用拷贝，输入队里所有成员的屏幕。这将成为自己的副本，并且从下一课起要开始往里添加自己的代码。（不要忘了也输入之前已有的屏幕。）

        -   收集队里所有的共享url链接， **包括自己的**
            \\t\* 每一位成员如需找到自己的屏幕，可以回到上一课的最后一步，在[项目文件夹](/项目) 里找到
        -   每次输入一个屏幕，重复知道完成输入所有的屏幕
            \\t\* 如果在输入某一个屏幕时碰到ID错误，和该屏幕的创建者讨论解决
        -   删除缺省的“屏幕1”
        -   将主屏幕设为缺省屏幕

        现在不要担心怎样往里添加代码；在下一步会讲到。
      CSDU6 - LED buttonL: "# 使用主板事件\n\n现在，LED灯会在按下左按钮（`buttonL`)时点亮。它应该在按下右按钮（`buttonR`)时关闭。\n\n<div\nstyle=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)\n\n</div>\n\n这样做\n\n-
        \  添加另一个`onBoardEvent()`（当主板上发生事件时）模块来实现当右按钮按下时，关闭LED灯。"
      CSDU6 - LED buttonL_2018: "# 使用主板事件\n\n现在，LED灯会在按下左按钮（`buttonL`)时点亮。它应该在按下右按钮（`buttonR`)时关闭。\n\n<div\nstyle=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)\n\n</div>\n\n这样做\n\n-
        \  添加另一个`onBoardEvent()`（当主板上发生事件时）模块来实现当右按钮按下时，关闭LED灯。"
      CSDU6 - LED buttonL_2019: "# 使用主板事件\n\n现在，LED灯会在按下左按钮（`buttonL`)时点亮。它应该在按下右按钮（`buttonR`)时关闭。\n\n<div\nstyle=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)\n\n</div>\n\n这样做\n\n-
        \  添加另一个`onBoardEvent()`（当主板上发生事件时）模块来实现当右按钮按下时，关闭LED灯。"
      CSDU6 - LED toggle buttonL up: |-
        # 按钮的其它主板事件

        你可能注意到了，LED灯会在按钮释放后，仍然是亮着的。因为事件只在按钮按下时触发了。为了关掉它，你需要在按钮弹起时也触发一个事件。

        # 这样做

        -   为左按钮创建一个'up'事件。
        -   添加代码来让LED灯在释放按钮时熄灭。
      CSDU6 - LED toggle buttonL up_2018: |-
        # 按钮的其它主板事件

        你可能注意到了，LED灯会在按钮释放后，仍然是亮着的。因为事件只在按钮按下时触发了。为了关掉它，你需要在按钮弹起时也触发一个事件。

        # 这样做

        -   为左按钮创建一个'up'事件。
        -   添加代码来让LED灯在释放按钮时熄灭。
      CSDU6 - LED toggle buttonL up_2019: |-
        # 按钮的其它主板事件

        你可能注意到了，LED灯会在按钮释放后，仍然是亮着的。因为事件只在按钮按下时触发了。为了关掉它，你需要在按钮弹起时也触发一个事件。

        # 这样做

        -   为左按钮创建一个'up'事件。
        -   添加代码来让LED灯在释放按钮时熄灭。
      CSDU6 - board event challenge_2018: |-
        # 挑战：声音面板

        开始挑战前，先和你的老师询问一下。

        现在，你知道如何使用主板事件，按钮，开关和蜂鸣器了。试着创造一个程序，当按下按钮，或滑动开关时，让你的主板变成一个声音面板。试一试声音的持续时间和频率，并听一听。
      CSDU6 - board event challenge_2019: |-
        # 挑战：声音面板

        开始挑战前，先和你的老师询问一下。

        现在，你知道如何使用主板事件，按钮，开关和蜂鸣器了。试着创造一个程序，当按下按钮，或滑动开关时，让你的主板变成一个声音面板。试一试声音的持续时间和频率，并听一听。
      CSDU6 - button LED prediction: 请参见降价的包含级别
      CSDU6 - button LED prediction_2018: 请参见降价的包含级别
      CSDU6 - button LED prediction_2019: 请参见降价的包含级别
      CSDU6 - buzzer duration: |-
        # 蜂鸣器持续时间

        你可能注意到了`buzzer.frequency()`（蜂鸣器 频率）有两个参数：频率和持续时间。它们的输入都是数字。

        -   频率决定了声音听起来怎样。给的数字越大，它的音调听起来就更高。

        -   持续时间决定了蜂鸣器会播放一个声音多少毫秒。

        现在，我们要关注第二个参数：持续时间。

        # 这样做

        用持续时间试试：

        -   将蜂鸣器的事件改为比100要长的数字。
        -   将持续时间设置为0，看看会如何？

        在继续前，多运行几次程序看看会发生什么。
      CSDU6 - buzzer duration buttons: |-
        # 蜂鸣器和按钮

        这个程序会通过按钮来播放长的和短的蜂鸣声。

        # 这样做

        -   改变`buzzer.frequency` （蜂鸣器.频率）的持续时间参数，来让左按钮播放一个长的蜂鸣，右按钮播放一个短的蜂鸣。
      CSDU6 - buzzer duration buttons_2018: |-
        # 蜂鸣器和按钮

        这个程序会通过按钮来播放长的和短的蜂鸣声。

        # 这样做

        -   改变`buzzer.frequency` （蜂鸣器.频率）的持续时间参数，来让左按钮播放一个长的蜂鸣，右按钮播放一个短的蜂鸣。
      CSDU6 - buzzer duration buttons_2019: |-
        # 蜂鸣器和按钮

        这个程序会通过按钮来播放长的和短的蜂鸣声。

        # 这样做

        -   改变`buzzer.frequency` （蜂鸣器.频率）的持续时间参数，来让左按钮播放一个长的蜂鸣，右按钮播放一个短的蜂鸣。
      CSDU6 - buzzer duration_2018: |-
        # 蜂鸣器持续时间

        你可能注意到了`buzzer.frequency()`（蜂鸣器 频率）有两个参数：频率和持续时间。它们的输入都是数字。

        -   频率决定了声音听起来怎样。给的数字越大，它的音调听起来就更高。

        -   持续时间决定了蜂鸣器会播放一个声音多少毫秒。

        现在，我们要关注第二个参数：持续时间。

        # 这样做

        用持续时间试试：

        -   将蜂鸣器的事件改为比100要长的数字。
        -   将持续时间设置为0，看看会如何？

        在继续前，多运行几次程序看看会发生什么。
      CSDU6 - buzzer duration_2019: |-
        # 蜂鸣器持续时间

        你可能注意到了`buzzer.frequency()`（蜂鸣器 频率）有两个参数：频率和持续时间。它们的输入都是数字。

        -   频率决定了声音听起来怎样。给的数字越大，它的音调听起来就更高。

        -   持续时间决定了蜂鸣器会播放一个声音多少毫秒。

        现在，我们要关注第二个参数：持续时间。

        # 这样做

        用持续时间试试：

        -   将蜂鸣器的事件改为比100要长的数字。
        -   将持续时间设置为0，看看会如何？

        在继续前，多运行几次程序看看会发生什么。
      CSDU6 - buzzer intro: |-
        # 使用蜂鸣器

        你可以有很多方法来使用蜂鸣器，但现在，我们只使用`buzzer.frequency()`（蜂鸣器.频率）。

        # 这样做

        -   从工具箱中拖出一个`buzzer.frequency()`模块，然后使用它。你会注意到它有两个参数，试试改变其中一个或两个，看看会发生什么？
        -   运行一下程序，享受一下你的电路游戏板播放的音乐。
      CSDU6 - buzzer intro_2018: |-
        # 使用蜂鸣器

        你可以有很多方法来使用蜂鸣器，但现在，我们只使用`buzzer.frequency()`（蜂鸣器.频率）。

        # 这样做

        -   从工具箱中拖出一个`buzzer.frequency()`模块，然后使用它。你会注意到它有两个参数，试试改变其中一个或两个，看看会发生什么？
        -   运行一下程序，享受一下你的电路游戏板播放的音乐。
      CSDU6 - buzzer intro_2019: |-
        # 使用蜂鸣器

        你可以有很多方法来使用蜂鸣器，但现在，我们只使用`buzzer.frequency()`（蜂鸣器.频率）。

        # 这样做

        -   从工具箱中拖出一个`buzzer.frequency()`模块，然后使用它。你会注意到它有两个参数，试试改变其中一个或两个，看看会发生什么？
        -   运行一下程序，享受一下你的电路游戏板播放的音乐。
      CSDU6 - final project 1: |-
        # 设计用户界面

        在担心你的程序的代码前，先用用户界面布局开始。你需要从设计模式来添加元素，确保每个ID（标识）都是有意义的。即使你现在没有计划用代码来存取一个元素，也要确保你的ID（标识）和描述有意义，这会让你的程序有更强的可读性，也更容易写代码。
      CSDU6 - final project 1_2018: |-
        # 设计用户界面

        在担心你的程序的代码前，先用用户界面布局开始。你需要从设计模式来添加元素，确保每个ID（标识）都是有意义的。即使你现在没有计划用代码来存取一个元素，也要确保你的ID（标识）和描述有意义，这会让你的程序有更强的可读性，也更容易写代码。
      CSDU6 - final project 1_2019: |-
        # 设计用户界面

        在担心你的程序的代码前，先用用户界面布局开始。你需要从设计模式来添加元素，确保每个ID（标识）都是有意义的。即使你现在没有计划用代码来存取一个元素，也要确保你的ID（标识）和描述有意义，这会让你的程序有更强的可读性，也更容易写代码。
      CSDU6 - final project 2: |-
        # 创建用户界面

        当用户界面准备好后，就可以给界面元素添加事件处理函数了。在这里，你可能只想增加`console.log()`（控制台.日志）命令来确保你的事件能正常工作 - 你可以晚点再添加函数代码。
      CSDU6 - final project 2_2018: |-
        # 创建用户界面

        当用户界面准备好后，就可以给界面元素添加事件处理函数了。在这里，你可能只想增加`console.log()`（控制台.日志）命令来确保你的事件能正常工作 - 你可以晚点再添加函数代码。
      CSDU6 - final project 2_2019: |-
        # 创建用户界面

        当用户界面准备好后，就可以给界面元素添加事件处理函数了。在这里，你可能只想增加`console.log()`（控制台.日志）命令来确保你的事件能正常工作 - 你可以晚点再添加函数代码。
      CSDU6 - final project 3: |-
        # 主板输入事件

        现在, 您可以添加可以从主板接受输入的事件。一样, 请随意使用 "console.log ()"（控制台.日志）语句, 以确保您的事件能够正常工作。
      CSDU6 - final project 3_2018: |-
        # 主板输入事件

        现在, 您可以添加可以从主板接受输入的事件。一样, 请随意使用 "console.log ()"（控制台.日志）语句, 以确保您的事件能够正常工作。
      CSDU6 - final project 3_2019: |-
        # 主板输入事件

        现在, 您可以添加可以从主板接受输入的事件。一样, 请随意使用 "console.log ()"（控制台.日志）语句, 以确保您的事件能够正常工作。
      CSDU6 - final project 4: |-
        # 函数

        当你一直在你的程序上工作时，找找是否有一些规律能够被抽象为函数。你能找到重复了多次的代码，或者某些命名后能够更好理解的代码吗？别忘了在写函数的时候，你能使用参数来_最大可能_重用一些只有少量不同的代码（比如为多个LED灯设置不同的颜色）。
      CSDU6 - final project 4_2018: |-
        # 函数

        当你一直在你的程序上工作时，找找是否有一些规律能够被抽象为函数。你能找到重复了多次的代码，或者某些命名后能够更好理解的代码吗？别忘了在写函数的时候，你能使用参数来_最大可能_重用一些只有少量不同的代码（比如为多个LED灯设置不同的颜色）。
      CSDU6 - final project 4_2019: |-
        # 函数

        当你一直在你的程序上工作时，找找是否有一些规律能够被抽象为函数。你能找到重复了多次的代码，或者某些命名后能够更好理解的代码吗？别忘了在写函数的时候，你能使用参数来_最大可能_重用一些只有少量不同的代码（比如为多个LED灯设置不同的颜色）。
      CSDU6 - final project 5: |-
        # 主板输出

        如果还没有开始, 请使用主板上的一些输出元素向用户传达有用的信息。
      CSDU6 - final project 5_2018: |-
        # 主板输出

        如果还没有开始, 请使用主板上的一些输出元素向用户传达有用的信息。
      CSDU6 - final project 5_2019: |-
        # 主板输出

        如果还没有开始, 请使用主板上的一些输出元素向用户传达有用的信息。
      CSDU6 - final project 6: |-
        # 完成润色

        在完成前添加必要的润色，使你的程序更加出色。如果有时间，把你的发明给一些潜在的用户进行测试来收集反馈，找到还需要提高的机会。当你全部完成后，点击"提交"按钮来上交程序！
      CSDU6 - final project 6_2018: |-
        # 完成润色

        在完成前添加必要的润色，使你的程序更加出色。如果有时间，把你的发明给一些潜在的用户进行测试来收集反馈，找到还需要提高的机会。当你全部完成后，点击"提交"按钮来上交程序！
      CSDU6 - final project 6_2019: |-
        # 完成润色

        在完成前添加必要的润色，使你的程序更加出色。如果有时间，把你的发明给一些潜在的用户进行测试来收集反馈，找到还需要提高的机会。当你全部完成后，点击"提交"按钮来上交程序！
      CSDU6 - lightswitch toggleswitch: "# 使用切换开关\n\n切换开关有两个位置：`open`（打开）和`close`（关闭）。这个程序将它用作一个灯的开关。现在，它只能打开。\n\n#
        \n\n这样做\n\n-   创建一个新的切换开关事件，当开关滑动到`close`（关闭）时触发。\n-   添加代码，让切换开关设置到`close`时，灯泡能关闭。"
      CSDU6 - lightswitch toggleswitch_2018: "# 使用切换开关\n\n切换开关有两个位置：`open`（打开）和`close`（关闭）。这个程序将它用作一个灯的开关。现在，它只能打开。\n\n#
        \n\n这样做\n\n-   创建一个新的切换开关事件，当开关滑动到`close`（关闭）时触发。\n-   添加代码，让切换开关设置到`close`时，灯泡能关闭。"
      CSDU6 - lightswitch toggleswitch_2019: "# 使用切换开关\n\n切换开关有两个位置：`open`（打开）和`close`（关闭）。这个程序将它用作一个灯的开关。现在，它只能打开。\n\n#
        \n\n这样做\n\n-   创建一个新的切换开关事件，当开关滑动到`close`（关闭）时触发。\n-   添加代码，让切换开关设置到`close`时，灯泡能关闭。"
      CSDU6 - toggle state LED prediction: 请参见降价的包含级别
      CSDU6 - toggle state LED prediction_2018: 请参见降价的包含级别
      CSDU6 - toggle state LED prediction_2019: 请参见降价的包含级别
      CSDU6 - toggleswitch state setProp: |-
        # 状态和切换开关

        这个程序能告诉你这个切换开关时开着的还是关着的，但它需要让`toggleSwitch.isOpen`模块正常工作。`toggleSwitch.isOpen`为`true`（真）时表示时开着的，如果是关着的就是`false`（假）。

        # 这样做

        -   用`toggleSwitch.isOpen`属性完成这个如果语句。
        -   运行程序，并点击左按钮，然后将切换开关滑动，并再次点击按钮。
      CSDU6 - toggleswitch state setProp_2018: |-
        # 状态和切换开关

        这个程序能告诉你这个切换开关时开着的还是关着的，但它需要让`toggleSwitch.isOpen`模块正常工作。`toggleSwitch.isOpen`为`true`（真）时表示时开着的，如果是关着的就是`false`（假）。

        # 这样做

        -   用`toggleSwitch.isOpen`属性完成这个如果语句。
        -   运行程序，并点击左按钮，然后将切换开关滑动，并再次点击按钮。
      CSDU6 - toggleswitch state setProp_2019: |-
        # 状态和切换开关

        这个程序能告诉你这个切换开关时开着的还是关着的，但它需要让`toggleSwitch.isOpen`模块正常工作。`toggleSwitch.isOpen`为`true`（真）时表示时开着的，如果是关着的就是`false`（假）。

        # 这样做

        -   用`toggleSwitch.isOpen`属性完成这个如果语句。
        -   运行程序，并点击左按钮，然后将切换开关滑动，并再次点击按钮。
      CSDU6 array select days: |-
        # 访问数组中的条目

        这个程序使用电路游戏板。它创建一周中的每天的数组。按下左键时，它将显示 "星期二" 。

        # 这样做

        -   添加代码，让它在按下右按钮时，显示日期为"星期四" 。
      CSDU6 array select days_2018: |-
        # 访问数组中的条目

        这个程序使用电路游戏板。它创建一周中的每天的数组。按下左键时，它将显示 "星期二" 。

        # 这样做

        -   添加代码，让它在按下右按钮时，显示日期为"星期四" 。
      CSDU6 array select days_2019: |-
        # 访问数组中的条目

        这个程序使用电路游戏板。它创建一周中的每天的数组。按下左键时，它将显示 "星期二" 。

        # 这样做

        -   添加代码，让它在按下右按钮时，显示日期为"星期四" 。
      CSDU6 arrays select rainbow: |-
        # 索引练习

        <img
        src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">

        \*\* 已提供的**初始的代码**创建一个了一个`colors`（颜色）的列表, 并使用它来设置屏幕上矩形的颜色。 不幸的是，颜色的顺序不对。

        # 这样做

        -   更改每个选择模块内的索引号, 使彩虹如右侧图片一样出现。
      CSDU6 arrays select rainbow_2018: |-
        # 索引练习

        <img
        src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">

        \*\* 已提供的**初始的代码**创建一个了一个`colors`（颜色）的列表, 并使用它来设置屏幕上矩形的颜色。 不幸的是，颜色的顺序不对。

        # 这样做

        -   更改每个选择模块内的索引号, 使彩虹如右侧图片一样出现。
      CSDU6 arrays select rainbow_2019: |-
        # 索引练习

        <img
        src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">

        \*\* 已提供的**初始的代码**创建一个了一个`colors`（颜色）的列表, 并使用它来设置屏幕上矩形的颜色。 不幸的是，颜色的顺序不对。

        # 这样做

        -   更改每个选择模块内的索引号, 使彩虹如右侧图片一样出现。
      CSDU6 arrays select random: |-
        # 随机选择

        你还可以使用 `randomNumber`（随机数字）模块而不是索引来选择列表中的随机元素。此程序从列表中选择一个随机图标, 并在按下左按钮时将其显示在屏幕上。 现在, 图标总是蓝色的。

        # 这样做

        -   添加代码，从列表中选择随机的颜色，并将它作为图标的颜色。
      CSDU6 arrays select random_2018: |-
        # 随机选择

        你还可以使用 `randomNumber`（随机数字）模块而不是索引来选择列表中的随机元素。此程序从列表中选择一个随机图标, 并在按下左按钮时将其显示在屏幕上。 现在, 图标总是蓝色的。

        # 这样做

        -   添加代码，从列表中选择随机的颜色，并将它作为图标的颜色。
      CSDU6 arrays select random_2019: |-
        # 随机选择

        你还可以使用 `randomNumber`（随机数字）模块而不是索引来选择列表中的随机元素。此程序从列表中选择一个随机图标, 并在按下左按钮时将其显示在屏幕上。 现在, 图标总是蓝色的。

        # 这样做

        -   添加代码，从列表中选择随机的颜色，并将它作为图标的颜色。
      CSDU6 arrays select variable: |-
        # 使用变量

        这个程序像上一个一样，但图标应该总是匹配的颜色（红色的心, 黄色的星星, 绿色的叶子, 和蓝色的水）。 你可以使用变量"myIndex" 来执行此项，它将存储随机数字的值，以便从每个列表中的同一位置获取图标和颜色。

        # 这样做

        -   更改代码, 用 "myIndex"变量来选择图标及其颜色。
      CSDU6 arrays select variable_2018: |-
        # 使用变量

        这个程序像上一个一样，但图标应该总是匹配的颜色（红色的心, 黄色的星星, 绿色的叶子, 和蓝色的水）。 你可以使用变量"myIndex" 来执行此项，它将存储随机数字的值，以便从每个列表中的同一位置获取图标和颜色。

        # 这样做

        -   更改代码, 用 "myIndex"变量来选择图标及其颜色。
      CSDU6 arrays select variable_2019: |-
        # 使用变量

        这个程序像上一个一样，但图标应该总是匹配的颜色（红色的心, 黄色的星星, 绿色的叶子, 和蓝色的水）。 你可以使用变量"myIndex" 来执行此项，它将存储随机数字的值，以便从每个列表中的同一位置获取图标和颜色。

        # 这样做

        -   更改代码, 用 "myIndex"变量来选择图标及其颜色。
      CSDU6 buzzer 2d arrays_2018: "# 挑战：二维数组\n\n数组可以容纳各种数据, 如数字、字符串甚至其他数组。当我们把一个数组放入另一个,
        这将成为一个二位数组。`buzzer.playSong()`（蜂鸣器.播放歌曲）\n模块可以使用二维数组来播放音色更精确的歌曲。\n\n用来播放音符的结构如下所示:
        \n\n`buzzer.playNotes(\n[要播放的音符数组] , 整首歌的速度);`\n\n它和`buzzer.playSong()`的主要区别是`[要播放的音符数值]`，\n中的每个元素是一个具有两个元素的数组：要播放的音符和音符的持续时间。有时在歌曲中需要有个四分音符，其他时候你需要一个全音符，或者介于两者之间。一首完整的歌曲可能看起来像这样:
        \n\n`buzzer.playSong([\n[\"G3\",0.25],\n[\"C4\",0.25],\n[\"E4\",0.25],\n[\"G4\",0.125],\n[null,0.375],\n[\"E4\",0.1875],\n[\"G4\",1]\n],\n120);`\n\n#
        这样做\n\n-   用`buzzer.playSong`模块来制作一首不同的歌曲。\n-   当你对结构感到得心应手时, 给歌曲添加更多的音符。"
      CSDU6 buzzer 2d arrays_2019: "# 挑战：二维数组\n\n数组可以容纳各种数据, 如数字、字符串甚至其他数组。当我们把一个数组放入另一个,
        这将成为一个二位数组。`buzzer.playSong()`（蜂鸣器.播放歌曲）\n模块可以使用二维数组来播放音色更精确的歌曲。\n\n用来播放音符的结构如下所示:
        \n\n`buzzer.playNotes(\n[要播放的音符数组] , 整首歌的速度);`\n\n它和`buzzer.playSong()`的主要区别是`[要播放的音符数值]`，\n中的每个元素是一个具有两个元素的数组：要播放的音符和音符的持续时间。有时在歌曲中需要有个四分音符，其他时候你需要一个全音符，或者介于两者之间。一首完整的歌曲可能看起来像这样:
        \n\n`buzzer.playSong([\n[\"G3\",0.25],\n[\"C4\",0.25],\n[\"E4\",0.25],\n[\"G4\",0.125],\n[null,0.375],\n[\"E4\",0.1875],\n[\"G4\",1]\n],\n120);`\n\n#
        这样做\n\n-   用`buzzer.playSong`模块来制作一首不同的歌曲。\n-   当你对结构感到得心应手时, 给歌曲添加更多的音符。"
      CSDU6 buzzer.stop_2018: |-
        # 停止音乐

        有时，你要能在需要时停止音乐，就如下面的代码中所示。
        没有指定持续时间, 所以现在音符持续播放。幸运的是，`buzzer.stop()`方法可以拯救你的耳朵。

        # 这样做

        -   找到一种方法,用`buzzer.stop()`来停止音符播放。
        -   祝贺你成功的停止了无穷无尽的音乐！
      CSDU6 buzzer.stop_2019: |-
        # 停止音乐

        有时，你要能在需要时停止音乐，就如下面的代码中所示。
        没有指定持续时间, 所以现在音符持续播放。幸运的是，`buzzer.stop()`方法可以拯救你的耳朵。

        # 这样做

        -   找到一种方法,用`buzzer.stop()`来停止音符播放。
        -   祝贺你成功的停止了无穷无尽的音乐！
      CSDU6 circuit playground piano: |-
        # 电路钢琴

        看看下面的代码。你不用改变它，只用试试看它是做什么的。

        # 这样做

        -   运行程序，并在屏幕上弹钢琴。
      CSDU6 circuit playground piano_2018: |-
        # 电路钢琴

        看看下面的代码。你不用改变它，只用试试看它是做什么的。

        # 这样做

        -   运行程序，并在屏幕上弹钢琴。
      CSDU6 circuit playground piano_2019: |-
        # 电路钢琴

        看看下面的代码。你不用改变它，只用试试看它是做什么的。

        # 这样做

        -   运行程序，并在屏幕上弹钢琴。
      CSDU6 frequency creation: |-
        # 让蜂鸣器发出蜂鸣

        现在，你能使用蜂鸣器的频率了，试着让蜂鸣器在同一个按钮弹起时播放过一个高音。

        # 这样做

        -   添加另一个onBoardEvent（当主板上发生事件时）模块，让左键在**弹起**时播放一个高音。
      CSDU6 frequency creation_2018: |-
        # 让蜂鸣器发出蜂鸣

        现在，你能使用蜂鸣器的频率了，试着让蜂鸣器在同一个按钮弹起时播放过一个高音。

        # 这样做

        -   添加另一个onBoardEvent（当主板上发生事件时）模块，让左键在**弹起**时播放一个高音。
      CSDU6 frequency creation_2019: |-
        # 让蜂鸣器发出蜂鸣

        现在，你能使用蜂鸣器的频率了，试着让蜂鸣器在同一个按钮弹起时播放过一个高音。

        # 这样做

        -   添加另一个onBoardEvent（当主板上发生事件时）模块，让左键在**弹起**时播放一个高音。
      CSDU6 frequency modification: |-
        # 让蜂鸣器蜂鸣

        蜂鸣器的频率决定了当它发出声音时，音调的高低。你给的频率的数字越大，蜂鸣器的发出的声调越高。

        # 这样做

        -   现在，当左键按下时，蜂鸣器会播放一个高音。改为让蜂鸣器播放一个低音。
      CSDU6 frequency modification_2018: |-
        # 让蜂鸣器蜂鸣

        蜂鸣器的频率决定了当它发出声音时，音调的高低。你给的频率的数字越大，蜂鸣器的发出的声调越高。

        # 这样做

        -   现在，当左键按下时，蜂鸣器会播放一个高音。改为让蜂鸣器播放一个低音。
      CSDU6 frequency modification_2019: |-
        # 让蜂鸣器蜂鸣

        蜂鸣器的频率决定了当它发出声音时，音调的高低。你给的频率的数字越大，蜂鸣器的发出的声调越高。

        # 这样做

        -   现在，当左键按下时，蜂鸣器会播放一个高音。改为让蜂鸣器播放一个低音。
      CSDU6 making new arrays: |-
        # 制作新数组

        你知道如何改变数组了，现在是时候让你自己做了。

        # 这样做

        -   用你想要的任何音符制作一个新的数组。他们可以是不同的八度音阶，以一定的音调排列等等。任何你想要的！
        -   当按下**右**按钮时, 让蜂鸣器播放数组中的随机音符。
      CSDU6 making new arrays_2018: |-
        # 制作新数组

        你知道如何改变数组了，现在是时候让你自己做了。

        # 这样做

        -   用你想要的任何音符制作一个新的数组。他们可以是不同的八度音阶，以一定的音调排列等等。任何你想要的！
        -   当按下**右**按钮时, 让蜂鸣器播放数组中的随机音符。
      CSDU6 making new arrays_2019: |-
        # 制作新数组

        你知道如何改变数组了，现在是时候让你自己做了。

        # 这样做

        -   用你想要的任何音符制作一个新的数组。他们可以是不同的八度音阶，以一定的音调排列等等。任何你想要的！
        -   当按下**右**按钮时, 让蜂鸣器播放数组中的随机音符。
      CSDU6 piano with notes: |-
        # 钢琴音符

        这是你在课程刚开始看到的一样的钢琴，但有一些缺陷！

        # 这样做

        -   编辑代码，让所有的键都使用`buzzer.note()`模块来播放正确的音符。
        -   确保所有传递到`buzzer.note()`里的值都是音符，不是频率。

        _提示：记住在音符周围使用引号！例如：`buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2018: |-
        # 钢琴音符

        这是你在课程刚开始看到的一样的钢琴，但有一些缺陷！

        # 这样做

        -   编辑代码，让所有的键都使用`buzzer.note()`模块来播放正确的音符。
        -   确保所有传递到`buzzer.note()`里的值都是音符，不是频率。

        _提示：记住在音符周围使用引号！例如：`buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2019: |-
        # 钢琴音符

        这是你在课程刚开始看到的一样的钢琴，但有一些缺陷！

        # 这样做

        -   编辑代码，让所有的键都使用`buzzer.note()`模块来播放正确的音符。
        -   确保所有传递到`buzzer.note()`里的值都是音符，不是频率。

        _提示：记住在音符周围使用引号！例如：`buzzer.note("A4", 100);`_
      CSDU6 play null notes: |-
        # Null（空）音符

        你可能注意到了，蜂鸣器有些局限性。例如，如果你将相同的音符挨着放到数组里，蜂鸣器就会播放一个音符的长音。你可以用`null`来绕过这个问题。

        `null`是计算机科学中表达空的一种方式。`playNotes`会用同样的长度来播放每个音符，因此数组中的`null`元素只是告诉`playNotes`在同样长度的时间内什么也不要放。

        # 这样做

        -   运行代码先听听声音如何。
        -   检查`playNotes()`内的数组。
        -   在一样的两个音符间或其它你觉得合适的地方放个暂停。

        _提示：`null`引用了一个值，就像一个变量名。确保不要把它放到引号里！_
      CSDU6 play null notes_2018: |-
        # Null（空）音符

        你可能注意到了，蜂鸣器有些局限性。例如，如果你将相同的音符挨着放到数组里，蜂鸣器就会播放一个音符的长音。你可以用`null`来绕过这个问题。

        `null`是计算机科学中表达空的一种方式。`playNotes`会用同样的长度来播放每个音符，因此数组中的`null`元素只是告诉`playNotes`在同样长度的时间内什么也不要放。

        # 这样做

        -   运行代码先听听声音如何。
        -   检查`playNotes()`内的数组。
        -   在一样的两个音符间或其它你觉得合适的地方放个暂停。

        _提示：`null`引用了一个值，就像一个变量名。确保不要把它放到引号里！_
      CSDU6 play null notes_2019: |-
        # Null（空）音符

        你可能注意到了，蜂鸣器有些局限性。例如，如果你将相同的音符挨着放到数组里，蜂鸣器就会播放一个音符的长音。你可以用`null`来绕过这个问题。

        `null`是计算机科学中表达空的一种方式。`playNotes`会用同样的长度来播放每个音符，因此数组中的`null`元素只是告诉`playNotes`在同样长度的时间内什么也不要放。

        # 这样做

        -   运行代码先听听声音如何。
        -   检查`playNotes()`内的数组。
        -   在一样的两个音符间或其它你觉得合适的地方放个暂停。

        _提示：`null`引用了一个值，就像一个变量名。确保不要把它放到引号里！_
      CSDU6 play predict code: 记号在包含的关卡里
      CSDU6 play predict code_2018: 记号在包含的关卡里
      CSDU6 play predict code_2019: 记号在包含的关卡里
      CSDU6 play songs: |-
        # 制作歌曲

        你可以用`buzzer.playNotes()`（蜂鸣器.播放音符）来制作一首完整的歌。它需要两个参数：一个用来播放的音符数组，和一个播放音符的节奏。在前面的泡泡里，你已经创建了音符的数组，并随机的播放了它的元素。但是`buzzer.playNotes()`会按照顺序播放每个音符。

        # 这样做

        -   拖出一个`buzzer.playNotes`模块，并改变里面初始的数组。
        -   \*
            确保在新数组里，至少有两组同一个音符成对出现的。（例如：`["A5", "A5", "G4", "G4"]`）

        _提示：别忘了你随时都可以在模块和文本模式之间来回转换。_
      CSDU6 play songs_2018: |-
        # 制作歌曲

        你可以用`buzzer.playNotes()`（蜂鸣器.播放音符）来制作一首完整的歌。它需要两个参数：一个用来播放的音符数组，和一个播放音符的节奏。在前面的泡泡里，你已经创建了音符的数组，并随机的播放了它的元素。但是`buzzer.playNotes()`会按照顺序播放每个音符。

        # 这样做

        -   拖出一个`buzzer.playNotes`模块，并改变里面初始的数组。
        -   \*
            确保在新数组里，至少有两组同一个音符成对出现的。（例如：`["A5", "A5", "G4", "G4"]`）

        _提示：别忘了你随时都可以在模块和文本模式之间来回转换。_
      CSDU6 play songs_2019: |-
        # 制作歌曲

        你可以用`buzzer.playNotes()`（蜂鸣器.播放音符）来制作一首完整的歌。它需要两个参数：一个用来播放的音符数组，和一个播放音符的节奏。在前面的泡泡里，你已经创建了音符的数组，并随机的播放了它的元素。但是`buzzer.playNotes()`会按照顺序播放每个音符。

        # 这样做

        -   拖出一个`buzzer.playNotes`模块，并改变里面初始的数组。
        -   \*
            确保在新数组里，至少有两组同一个音符成对出现的。（例如：`["A5", "A5", "G4", "G4"]`）

        _提示：别忘了你随时都可以在模块和文本模式之间来回转换。_
      Course 4 Artist For Loops 6a: 将上一关的代码做三个小小的改动来画出这个！
      Course 4 Play Lab Params 3: |-
        我们已经给“跳”函数添加了另一个参数，因此它可以用在别的演员上了。每个演员都有一个编号，编号从1开始。

        编辑`跳`函数来使用`演员`参数，使它能够让正确的演员跳起来。
      Course 4 Play Lab Vars 1: |-
        这次你不需要写任何代码，点击`运行`来玩游戏吧！

        在这个游戏里，你会扮演小狗，要比小猫收集到更多的旗帜。用下方向键来控制小狗。当你玩完以后，点击`完成`。
      CourseD_Dance_Party_01: |-
        _让我们开个舞会吧！_

        将“新建”模块拖到工作区，并关联到“设置”模块，创建您的第一个舞者。

        -   _如果您需要了解更多信息或其他挑战，还可以点击左侧的灯泡。_
      CourseD_Dance_Party_02: |-
        让这只驼鹿舞动起来吧！

        将<xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">牙线舞</title><title name="DIR">-1</title></block></xml>模块拖放到工作区。将其连接到下面的 <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"小节"</title></block></xml>模块。您的舞者应在第四个小节后开始新的动作。

        **小节**用于音乐计时。本教程中，一个小节长度为四个节拍。
      CourseD_Dance_Party_03: |-
        _现在跟着节奏动起来！_

        在工作区域添加一个 <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">6</title><title name="UNIT">"小节"</title></block></xml>模块。让舞者在 6 个小节后开始新的动作！
      CourseD_Dance_Party_04: |-
        _给舞蹈加点炫酷效果！_

        在工具箱中找到一个能添加背景效果的模块。然后跟随音乐节拍，来看看新的效果吧！
      CourseD_Dance_Party_05: |-
        使用其他新模块让舞者**每 2 个小节**变换动作！

        \*\*选择“(下一步)”、“(上一步)”或“(随机)”，让舞者在代码每次运行时做不同的动作。
      CourseD_Dance_Party_06: |-
        _我们需要更多舞者！_

        创建名为“backup\_dancer1”的伴舞，与猫一起跳舞。
      CourseD_Dance_Party_08: |-
        每个舞者都有一系列控制其外观的 _属性设置_。

        可以通过缩小舞者的 _大小_ 使它看上去像是在后排。你能让两个伴舞大小一样吗？
      CourseD_Dance_Party_09: |-
        舞者有可以添加颜色层的"tint"（色调）属性。尝试更改其中一个舞者的色调。

        -   色调将会将选择的颜色与舞者的颜色混合。
      CourseD_Dance_Party_10: |-
        现在知道了如何更改舞者的属性，还可以使用此模块让相同的属性自动对音乐做出响应：

        <xml>
        <block type="Dancelab_startMapping">
        <title name="SPRITE">右边的独角兽</title>
        <title name="PROPERTY">"比例"</title>
        <title name="RANGE">"base"（低音）</title>
        </block></xml>

        此程序使用音乐的"bass"（最低频率的声音）音量来控制舞者的高度。可以让其他舞者也对音乐有响应吗？
      CourseD_Dance_Party_11: |-
        <xml><block type="Dancelab_whenKey"></block></xml> 模块可以在上方向键按下时运行代码。

        可以更改跳舞动作，更改舞者的属性，或者快速做一次动作。激发创造力，寻找新模块！
      CourseD_Dance_Party_11_5: |-
        查看此模块：

        <xml>
        <block type="Dancelab_makeNewDanceSpriteGroup">
        <title name="N">6</title>
        <title name="COSTUME">"鸭子"</title>
        <title name="LAYOUT">"圆圈"</title>
        </block></xml>

        现在可以一次创建多个舞者了！

        尝试使用“所有鸭子”模块写入让所有鸭子一起跳舞的代码。
      CourseD_Dance_Party_11b: |-
        跳舞时间到了！按下左方向键时，猫会轻拍。让机器人在按下右方向键时"蹲下"，并在按下上方向键时"拍手"。

        \*\* 使用这些键来做出 蹲下-拍手-蹲下-拍手 的动作，看你能做多快！ \*\*
      CourseD_Dance_Party_12: 随着节奏律动吧！创建自己的舞蹈，并与朋友分享。
      CourseE_HOC 2018 Level_1: 您需要补给以进行航行。从**箱子**![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png)
        中收集一艘**船** ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        。
      CourseE_HOC 2018 Level_10: 这个海底遗迹的某个地方藏着一条**鱿鱼** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png)
        ，你能找到它吗？
      CourseE_HOC 2018 Level_11: 在黑色混凝土附近建造一堵**海晶石**墙![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        。此操作可激活**潮涌核心** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        ，完成挑战！
      CourseE_HOC 2018 Level_2: 在开阔水面，船比游泳要好用！前往船坞登船。
      CourseE_HOC 2018 Level_3: 拿起船桨，划到开阔水域抓**鳕鱼**![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png)。
      CourseE_HOC 2018 Level_4: 用鳕鱼喂**海豚** ![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png)。使用重复区块更快地穿过海洋。
      CourseE_HOC 2018 Level_5: 海底某个地方藏着一个**鹦鹉螺壳** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)！探索沉船，找到**箱子**
        ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png)。
      CourseE_HOC 2018 Level_6: 外边好冷啊！前往水底废墟的路上抓一条**鲑鱼**![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png)。
      CourseE_HOC 2018 Level_7a: 找到了水下废墟。在沙石红搜寻包含**海晶石** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)宝藏的**箱子**
        ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)。
      CourseE_HOC 2018 Level_8: 先是冰山，现在又是岩浆？穿过火山岛，在珊瑚礁上寻找**热带鱼** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png)
        in the coral reef。
      CourseE_HOC 2018 Level_9b: |-
        成功抵达珊瑚礁，赶快搜寻**海洋之心**吧
        ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png) ！使用蓝色和红色珊瑚找到**宝箱** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png)。
      Dance Party 1-validated: "**猜猜看：** 这个图形名叫`外星人一号`！当点击她时猜猜会发生什么？"
      Dance Party 2: "这个外星人对自己在火星上的舞技非常自信，但现在她只能上下移动了。 \n\n你能在<xml><block type=\"gamelab_addBehaviorSimple\"
        inline=\"true\">\n<value name=\"SPRITE\">\n<block type=\"sprite_variables_get\">\n\n<title
        name=\"VAR\">alien1</title>\n</block>\n</value>\n</block></xml>中改变行为，让它可以旋转吗？
        \ "
      Dance Party 2_2019: "这个外星人对自己在火星上的舞技非常自信，但现在她只能上下移动了。 \n\n你能在<xml><block type=\"gamelab_addBehaviorSimple\"
        inline=\"true\">\n<value name=\"SPRITE\">\n<block type=\"sprite_variables_get\">\n\n<title
        name=\"VAR\">alien1</title>\n</block>\n</value>\n</block></xml>中改变行为，让它可以旋转吗？
        \ "
      Dance Party 3: "创造一个叫`外星人2`的精灵。 \n\n让她在被点击时完成一个新的舞步。  "
      Dance Party 3_2019: "创造一个叫`外星人2`的精灵。 \n\n让她在被点击时完成一个新的舞步。  "
      Dance Party 4: "创造一个叫`外星人3`的精灵。 \n\n你能让所有外星人排成一条直线吗？现在你有一个外星人舞蹈团了！"
      Dance Party 4_2019: "创造一个叫`外星人3`的精灵。 \n\n你能让所有外星人排成一条直线吗？现在你有一个外星人舞蹈团了！"
      Dance Party 5: |-
        可以在点击精灵时，在程序中做出任何的改变。现在来换个颜色吧！

        **在这里添加代码，使每个外星人在被单击时改变自己的颜色。**
      Dance Party 5_2019: |-
        可以在点击精灵时，在程序中做出任何的改变。现在来换个颜色吧！

        **在这里添加代码，使每个外星人在被单击时改变自己的颜色。**
      Dance Party 6: "这些外星人太调皮了！ \n\n用<xml><block type=\"gamelab_removeAllBehaviors\"
        inline=\"true\"><value name=\"SPRITE\"/></block></xml>模块来让每个外星人被单击时停下来。"
      Dance Party 6_2019: "这些外星人太调皮了！ \n\n用<xml><block type=\"gamelab_removeAllBehaviors\"
        inline=\"true\"><value name=\"SPRITE\"/></block></xml>模块来让每个外星人被单击时停下来。"
      Dance Party 7: |-
        最后一步，创建一个新的钟形精灵，命名为`myBell`。

        当点击这个钟时，所有的外星人会跳同一支舞！
      Dance Party 7_2019: |-
        最后一步，创建一个新的钟形精灵，命名为`myBell`。

        当点击这个钟时，所有的外星人会跳同一支舞！
      Dance Party Freeplay: |-
        现在可以创建自己的外星人迪斯科啦！想找点灵感？试试这些：

        -   创建两个时钟，让外星人在不同时钟的控制下完成不同的舞步
        -   当外星人相互接触时，让他们开始不同的舞蹈
      Dance Party Freeplay_2019: |-
        现在可以创建自己的外星人迪斯科啦！想找点灵感？试试这些：

        -   创建两个时钟，让外星人在不同时钟的控制下完成不同的舞步
        -   当外星人相互接触时，让他们开始不同的舞蹈
      Dance_Party_01: |-
        _让我们开个舞会吧！_

        将“新建”模块拖到工作区，并关联到“设置”模块，创建您的第一个舞者。

        -   _如果您需要了解更多信息或其他挑战，还可以点击左侧的灯泡。_
      Dance_Party_02: |-
        让这只驼鹿舞动起来吧！

        将<xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">牙线舞</title><title name="DIR">-1</title></block></xml>模块拖放到工作区。将其连接到下面的 <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"小节"</title></block></xml>模块。您的舞者应在第四个小节后开始新的动作。

        **小节**用于音乐计时。本教程中，一个小节长度为四个节拍。
      Dance_Party_03: |-
        _现在跟着节奏动起来！_

        在工作区域添加一个 <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">6</title><title name="UNIT">"小节"</title></block></xml>模块。让舞者在 6 个小节后开始新的动作！
      Dance_Party_04: |-
        _给舞蹈加点炫酷效果！_

        在工具箱中找到一个能添加背景效果的模块。然后跟随音乐节拍，来看看新的效果吧！
      Dance_Party_05: |-
        使用其他新模块让舞者**每 2 个小节**变换动作！

        \*\*选择“(下一步)”、“(上一步)”或“(随机)”，让舞者在代码每次运行时做不同的动作。
      Dance_Party_06: |-
        _我们需要更多舞者！_

        创建名为“backup\_dancer1”的伴舞，与猫一起跳舞。
      Dance_Party_08: |-
        每个舞者都有一系列控制其外观的 _属性设置_。

        可以通过缩小舞者的 _大小_ 使它看上去像是在后排。你能让两个伴舞大小一样吗？
      Dance_Party_09: |-
        舞者有可以添加颜色层的"tint"（色调）属性。尝试更改其中一个舞者的色调。

        -   色调将会将选择的颜色与舞者的颜色混合。
      Dance_Party_10: |-
        现在知道了如何更改舞者的属性，还可以使用此模块让相同的属性自动对音乐做出响应：

        <xml>
        <block type="Dancelab_startMapping">
        <title name="SPRITE">右边的独角兽</title>
        <title name="PROPERTY">"比例"</title>
        <title name="RANGE">"base"（低音）</title>
        </block></xml>

        此程序使用音乐的"bass"（最低频率的声音）音量来控制舞者的高度。可以让其他舞者也对音乐有响应吗？
      Dance_Party_11: |-
        <xml><block type="Dancelab_whenKey"></block></xml> 模块可以在上方向键按下时运行代码。

        可以更改跳舞动作，更改舞者的属性，或者快速做一次动作。激发创造力，寻找新模块！
      Dance_Party_11_5: |-
        查看此模块：

        <xml>
        <block type="Dancelab_makeNewDanceSpriteGroup">
        <title name="N">6</title>
        <title name="COSTUME">"鸭子"</title>
        <title name="LAYOUT">"圆圈"</title>
        </block></xml>

        现在可以一次创建多个舞者了！

        尝试使用“所有鸭子”模块写入让所有鸭子一起跳舞的代码。
      Dance_Party_11b: |-
        跳舞时间到了！按下左方向键时，猫会轻拍。让机器人在按下右方向键时"蹲下"，并在按下上方向键时"拍手"。

        \*\* 使用这些键来做出 蹲下-拍手-蹲下-拍手 的动作，看你能做多快！ \*\*
      Dance_Party_12: 随着节奏律动吧！创建自己的舞蹈，并与朋友分享。
      Dance_Party_extras_battle: |-
        # 舞蹈团队

        下面是两个团队之间的舞蹈。箭头键控制其中一个舞者， “w, a, s, d” 键控制另一个舞者。和朋友跳支舞，然后试着改进这支舞。

        -   添加更多的键来控制舞蹈
        -   按下键时，可以让备选舞者也跟着响应
        -   通过设置舞者的可见性，可以每4个小节替换舞者
      Dance_Party_extras_every_beat: |-
        # 四分音符

        舞蹈大多采用了全音节，但每个小节都由4个1/4小节组成。这个舞蹈使用`0.25小节`，使舞者每1/4小节拍手一次。

        这个舞蹈还使用\_ 条件 \_ 模块来控制在什么时候用10.25小节1模块来改变舞蹈。试着更改条件模块中的数字，看看它是如何改变舞蹈的。

        -   试着使用其他持续时间（如0.5为半个小节，或0.125为1/8小节)。
        -   添加一些`小节后`的事件。
        -   将"小节"切换为"秒"，并试着以这种方式给舞蹈安排节奏。
      Dance_Party_extras_layout: |-
        # 开始编队！

        看看这个舞蹈，使用`layout`（布局）模块来改变整个舞蹈中备选舞者的阵型。请尝试以下方法之一来扩展它：

        -   在另一个布局中创建第二组舞者
        -   按下键时更改布局
        -   当舞者改变阵型时更改属性
      Dance_Party_extras_on_beat: |-
        # 低音、中音和高音

        舞蹈会在音乐的不同部分变得响亮时使用“高峰”事件来触发代码。试着选择不同的歌曲，看看他们是如何改变舞蹈的。
      Dance_Party_extras_speed: |-
        # 让它加速、减速

        这个最后的舞蹈使用“设定速度”模块来控制每个舞者的动作速度。在歌曲的不同点尝试不同的速度。随意地在这个舞蹈上做修改，或者回到之前的舞蹈中，让它们变得更酷。
      Dance_Party_extras_visible: |-
        # 让他们去哪儿？

        这个舞蹈显示和隐藏了两组舞者。看看如何加入自己的天赋。

        -   添加另一组舞者
        -   使用箭头键显示和隐藏舞者
        -   隐藏所有的舞者，并切换到一个令人兴奋的背景效果
      Fish Tank 1-validated: "**做出预测**：你觉得当运行代码时，会发生什么？"
      Fish Tank 2-validated: |-
        我们来做个鱼缸！

        把灰蒙蒙的风滚草变成一条鱼。
      Fish Tank 2-validated_2019: |-
        我们来做个鱼缸！

        把灰蒙蒙的风滚草变成一条鱼。
      Fish Tank 3-validated: 这些旋转会让鱼变得头晕！改变鱼的行为，让它沿着水箱游动。
      Fish Tank 3-validated_2019: 这些旋转会让鱼变得头晕！改变鱼的行为，让它沿着水箱游动。
      Fish Tank 4-validated: 鱼缸需要一些水！用`设置背景颜色`模块来让背景为绿色。
      Fish Tank 4-validated_2019: 鱼缸需要一些水！用`设置背景颜色`模块来让背景为绿色。
      Fish Tank 5-validated: 鱼有些孤单。在鱼缸内创造一个新的精灵。
      Fish Tank 5-validated_2019: 鱼有些孤单。在鱼缸内创造一个新的精灵。
      Fish Tank 6-validated: 想让鱼的朋友做什么？增加一个行为，然后看看他们做了什么！
      Fish Tank 6-validated_2019: 想让鱼的朋友做什么？增加一个行为，然后看看他们做了什么！
      Fish Tank 7-validated: 工具箱里有许多新的模块。用它们来让你的鱼缸变得特别。
      Fish Tank 7-validated_2019: 工具箱里有许多新的模块。用它们来让你的鱼缸变得特别。
      Fish Tank Predict: "**做出预测**：你觉得当运行代码时，会发生什么？"
      Fish Tank Predict_2019: "**做出预测**：你觉得当运行代码时，会发生什么？"
      Function intro Ryan: |-
        工作区中有一项名为`建造桥梁`的**函数**。穿过河流所需的全部代码都在里面了！

        将这个小小的绿色模块<xml><block type="procedures_callnoreturn" id="callMe"><mutation name="build bridge"/></block></xml>粘入工作区两次，从而修复道路并让{currentPlayerName} 抵达红石火把[redstone_torch]。
      Function intro Ryan_2019: |-
        工作区中有一项名为`建造桥梁`的**函数**。穿过河流所需的全部代码都在里面了！

        将这个小小的绿色模块<xml><block type="procedures_callnoreturn" id="callMe"><mutation name="build bridge"/></block></xml>粘入工作区两次，从而修复道路并让{currentPlayerName} 抵达红石火把[redstone_torch]。
      Geometric Sun: "\\*\\* 项目理念: \\*\\* 使用形状几何概念创建图案。这需要坚持和规划！"
      Geometric Sun_2018: "\\*\\* 项目理念: \\*\\* 使用形状几何概念创建图案。这需要坚持和规划！"
      HOC 2018 Level_1: 您需要补给以进行航行。从**箱子**![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png)
        中收集一艘**船** ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        。
      HOC 2018 Level_10: 这个海底遗迹的某个地方藏着一条**鱿鱼** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png)
        ，你能找到它吗？
      HOC 2018 Level_11: 在黑色混凝土附近建造一堵**海晶石**墙![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        。此操作可激活**潮涌核心** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        ，完成挑战！
      HOC 2018 Level_12: 恭喜！开放的水底世界等着您。建造一个珊瑚礁！一座火山！一艘沉船！想怎么玩自己随意。
      HOC 2018 Level_2: 在开阔水面，船比游泳要好用！前往船坞登船。
      HOC 2018 Level_3: 拿起船桨，划到开阔水域抓**鳕鱼**![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png)。
      HOC 2018 Level_4: 用鳕鱼喂**海豚** ![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png)。使用重复区块更快地穿过海洋。
      HOC 2018 Level_5: 海底某个地方藏着一个**鹦鹉螺壳** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)！探索沉船，找到**箱子**
        ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png)。
      HOC 2018 Level_6: 外边好冷啊！前往水底废墟的路上抓一条**鲑鱼**![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png)。
      HOC 2018 Level_7a: 找到了水下废墟。在沙石红搜寻包含**海晶石** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)宝藏的**箱子**
        ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)。
      HOC 2018 Level_8: 先是冰山，现在又是岩浆？穿过火山岛，在珊瑚礁上寻找**热带鱼** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png)
        in the coral reef。
      HOC 2018 Level_9b: |-
        成功抵达珊瑚礁，赶快搜寻**海洋之心**吧
        ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png) ！使用蓝色和红色珊瑚找到**宝箱** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png)。
      InspirationalArtwork: |-
        现在你已经学到了所有你需要知道的东西来做这样的图案

        如果这张照片启发了你, 请试着制做一些类似的东西。要不然，就创建自己的。
      InspirationalArtwork_2018: |-
        现在你已经学到了所有你需要知道的东西来做这样的图案

        如果这张照片启发了你, 请试着制做一些类似的东西。要不然，就创建自己的。
      K-1 Bee Loops 5: 用重复循环来采花蜜，酿蜂蜜！
      K-1 Maze Loops 2: 用重复模块让我到达那只猪！
      K-1 Maze Loops 8: 用重复循环来帮我到达那只猪。
      MC HOC 2016 SCORE LEVEL: |-
        有的游戏会让你记录分数。跟这些铁傀儡玩捉迷藏，使用 <xml>  <block type="craft_addScore">
            <title name="SCORE">1</title>
          </block></xml> 指令块，让你在标记它们时给自己得一分。

        拿到五分就算赢！
      MC_HOC_2017_01_RETRY: "门锁上了，但是 Agent 已经赶来帮忙了！ \n\n在工作间中，将一个\"向前移动\"方块粘贴到\"当运行时\"方块上，使代理人抵达压力板[PressurePlate_Up]，然后按\"运行\"并使用方向键移出房屋以收集**箱子**[chest]。"
      MC_HOC_2017_01_RETRY_2019: "门锁上了，但是 Agent 已经赶来帮忙了！ \n\n在工作间中，将一个\"向前移动\"方块粘贴到\"当运行时\"方块上，使代理人抵达压力板[PressurePlate_Up]，然后按\"运行\"并使用方向键移出房屋以收集**箱子**[chest]。"
      MC_HOC_2017_02_Cole: "{currentPlayerName} 正在经历一场冒险！为了帮他，您需要获得右侧锁住的门后边的**地图**[map_empty]。\n\n将代码粘贴至工作区中，使代理人移动至压力板[PressurePlate_Up]，以便让{currentPlayerName}
        通过。 "
      MC_HOC_2017_02_Cole_2019: "{currentPlayerName} 正在经历一场冒险！为了帮他，您需要获得右侧锁住的门后边的**地图**[map_empty]。\n\n将代码粘贴至工作区中，使代理人移动至压力板[PressurePlate_Up]，以便让{currentPlayerName}
        通过。 "
      MC_HOC_2017_03_Cole: "{currentPlayerName} 继续进行冒险，同时需要**指南针**[compass] 来为旅程做准备。\n\n为代理人编写代码，使其打开门。 "
      MC_HOC_2017_03_Cole_2019: "{currentPlayerName} 继续进行冒险，同时需要**指南针**[compass] 来为旅程做准备。\n\n为代理人编写代码，使其打开门。 "
      MC_HOC_2017_04POINT5_RYAN: "您已经成功越过了！ \n\n现在，您需要使{currentPlayerName} 安全穿过迷宫并收集**斧头**[diamond_axe]"
      MC_HOC_2017_04POINT5_RYAN_2019: "您已经成功越过了！ \n\n现在，您需要使{currentPlayerName} 安全穿过迷宫并收集**斧头**[diamond_axe]"
      MC_HOC_2017_04_Cole: "代理人可以在移动时越过水！ \n\n使用一个\"重复\"循环解决该难题，并帮助{currentPlayerName}
        抵达门后面的**桶**[bucket_empty]。 "
      MC_HOC_2017_04_Cole_2019: "代理人可以在移动时越过水！ \n\n使用一个\"重复\"循环解决该难题，并帮助{currentPlayerName}
        抵达门后面的**桶**[bucket_empty]。 "
      MC_HOC_2017_05_Cole: "哦不，桥没了！ \n\n为 代理人编写代码，使用\"放置\"模块重新建造桥梁，以便让{currentPlayerName}
        抵达**铲子**[diamond_shovel]。"
      MC_HOC_2017_05_Cole_2019: "哦不，桥没了！ \n\n为 代理人编写代码，使用\"放置\"模块重新建造桥梁，以便让{currentPlayerName}
        抵达**铲子**[diamond_shovel]。"
      MC_HOC_2017_06_Cole: "又一条河流，但是这条却宽多了！\n\n修复该代码，帮助代理人建造一座桥梁，以便让{currentPlayerName}
        抵达**镐**[diamond_pickaxe]。 "
      MC_HOC_2017_06_Cole_2019: "又一条河流，但是这条却宽多了！\n\n修复该代码，帮助代理人建造一座桥梁，以便让{currentPlayerName}
        抵达**镐**[diamond_pickaxe]。 "
      MC_HOC_2017_07_Cole: "路上有冰！\n\n\"清空路径\"函数能够帮助您摧毁冰层，使{currentPlayerName} 抵达矿车[minecart_normal]！ "
      MC_HOC_2017_07_Cole_2019: "路上有冰！\n\n\"清空路径\"函数能够帮助您摧毁冰层，使{currentPlayerName}
        抵达矿车[minecart_normal]！ "
      MC_HOC_2017_10_RETRY: "您能在您的工作区中找出这两个函数的不同之处吗？\n\n使用这些函数以及工具箱中的其他代码，为矿车清空出一条路径，然后收集**打火石**[flint_and_steel]。
        \ "
      MC_HOC_2017_10_RETRY_2019: "您能在您的工作区中找出这两个函数的不同之处吗？\n\n使用这些函数以及工具箱中的其他代码，为矿车清空出一条路径，然后收集**打火石**[flint_and_steel]。
        \ "
      MC_HOC_2017_Ali: '参看下方的函数。您将如何使用它们避开恶魂并帮助{currentPlayerName} 安全抵达**附魔书**[book_enchanted]？  '
      MC_HOC_2017_Ali_2019: '参看下方的函数。您将如何使用它们避开恶魂并帮助{currentPlayerName} 安全抵达**附魔书**[book_enchanted]？  '
      MC_HOC_2017_FP20x20: "**自由游戏时间：** 现在您自己来决定！使用代理人的代码来帮助您探索这个世界。"
      MC_HOC_2017_FP20x20_2019: "**自由游戏时间：** 现在您自己来决定！使用代理人的代码来帮助您探索这个世界。"
      NEW Course 4 Artist Params 13: |-
        让我们编辑这个`画一个多边形`函数。

        它已经有一个`边数`参数了。现在，再加一个`长度`参数。

        每个图形的周长是200像素。你还记得当多边形有不同数量的边时，如何让它们一样长的等式吗？
      NEW Course 4 Artist Params 2: 从头开始创建一个 "绘制三角形" 函数，使三角形具有50像素边。
      NetSim Standalone Automatic DNS: |-
        # 域名系统（DNS）

        在这个版本的互联网模拟器中，将会为你提供一个域名系统（DNS）以及已连接的计算机的 IP 地址。你只能看到已连接的计算机的主机名称。\
        ![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)

        DNS 地址始终是 \<yourRouterNumber>.15。使用协议 `GET [hostname]` 来发送信息，例如发送 `GET Bob2` 到 DNS 以获取另一名学生的 DNS 地址。你随时都可以在笔记区选择 DNS 标签来查看答复。\
        ![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)

        你的教师将在活动上更加具体地说明。
      Overworld Chop Tree: 木材是一种非常重要的资源。许多东西都是由它制成的。走到树边, 并使用`摧毁方块`模块命令将它砍倒。
      Overworld Chop Tree_2019: 木材是一种非常重要的资源。许多东西都是由它制成的。走到树边, 并使用`摧毁方块`模块命令将它砍倒。
      Overworld House Frame Chosen: 用你想要的任何材料来建立房子的剩余部分。`重复`命令将派上用场。
      Overworld House Frame Chosen_2019: 用你想要的任何材料来建立房子的剩余部分。`重复`命令将派上用场。
      Overworld Move to Sheep: 添加第二个 `向前移动` 模块达到绵羊的位置。
      Overworld Move to Sheep_2019: 添加第二个 `向前移动` 模块达到绵羊的位置。
      Overworld Place Wall: 每栋房子都是从墙开始的。把`放置`和`向前移动`命令放进重复循环中来构建房子的第一部分。
      Overworld Place Wall_2019: 每栋房子都是从墙开始的。把`放置`和`向前移动`命令放进重复循环中来构建房子的第一部分。
      Overworld Shear Sheep: 剪羊毛的时间到了! 用`修剪`的命令从两只羊身上收集羊毛。
      Overworld Shear Sheep_2019: 剪羊毛的时间到了! 用`修剪`的命令从两只羊身上收集羊毛。
      Robot Doodle: "**项目想法：** 创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！"
      Robot Doodle_2018: "**项目想法：** 创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！"
      Room Escape Workshop - 10: |-
        # 开门

        <img src="https://images.code.org/3651f7d5306bdcfd2d9a3d9bb842626e-image-1491066778787.12.36 PM.png" style="width:200px;float:right">

        快完成了！让我们把门准备好，让它可以被打开。

        # 这么做

        -   添加一张门外的图片
        -   设置 ID （比如 _outside_）
        -   隐藏这张图片（门开始它会自动显示）
      Standalone_Artist_2: 用 120 度和 60 度的角度，再加上长达150像素的边来画个钻石型。
      Standalone_Artist_3: 能够用100 像素的边和 60度的转度来绘制一个六边形吗？
      Standalone_Artist_4: 现在你已获得一个新的块—循环，该块可以重复执行一连串的指令。如果你循环这些指令6次，看看会发生什么？
      Standalone_Artist_5: 你需要循环多少次钻石才能化成这朵花呢？
      Standalone_Artist_5.5: 注意：如何将画钻石的代码转换成“循环”块来精简代码。你可以通过循环整个事件12次来花一朵花。提示：在每个画钻石的循环结束后，你需要向左（或右）转30°，这样你就不会总是在一个地方画钻石了。
      Standalone_Artist_6: |-
        通过循环画六边形6次来创建一个图形。每次你需要转动多少度呢？
        提示：用一个圆周的度数除以你循环的次数。
      Standalone_Artist_7: 函数是另一种帮助避免重复工作的编程工具。这个函数会画一朵花，因此你可以在任何想画一朵花的时候使用它。用这个和新的“跳”模块来画这些花。提示：花之间相隔150像素。
      Standalone_Artist_8: 这里有一个叫做“画一个形状”的函数，我们用它来画一个六边形。运行这个代码来看看它做了什么，然后试试用这个函数看看发生什么。你能用它找到一个能画出正方形，三角形，或者八边形的模式吗？
      Standalone_Artist_9: 现在制作任何你想要的图片吧！你设置可以从一个空函数开始，来做到你想的事！
      U4 Model Design 1: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        点击展开

        </div>

        # 创建一个数字原型

        使用右侧的原型（点击图片来放大）你将会
        为示例应用“Recycling Finder”（回收查找者）创建一个数字原型。我们
        已经为你加入了一些元素，包含标题，但是它
        看起来还不完整。我们后面涵盖这里面的的每个元素，但
        现在我们 **先着重标题**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png"
        style="width: 300px; float: right; clear: both;">-->

        # 这样做

        \*
        **确认你在设计模式中，**开关出现在你应用窗口上方
        的左面。

        -   **点击标题文字**来查看它的属性。
        -   \*
            **更改属性“text”（文字）**为“回收查找者”.
        -   **更改“font size”（字体大小）** 来增大标题。
        -   **更改“text alignment”（字体对齐）**这样让标题在屏幕上居中。

        _注意：在你保存进度之前，确定点击了**"运行"** 。_
      U4 Model Design 1_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        点击展开

        </div>

        # 创建一个数字原型

        使用右侧的原型（点击图片来放大）你将会
        为示例应用“Recycling Finder”（回收查找者）创建一个数字原型。我们
        已经为你加入了一些元素，包含标题，但是它
        看起来还不完整。我们后面涵盖这里面的的每个元素，但
        现在我们 **先着重标题**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png"
        style="width: 300px; float: right; clear: both;">-->

        # 这样做

        \*
        **确认你在设计模式中，**开关出现在你应用窗口上方
        的左面。

        -   **点击标题文字**来查看它的属性。
        -   \*
            **更改属性“text”（文字）**为“回收查找者”.
        -   **更改“font size”（字体大小）** 来增大标题。
        -   **更改“text alignment”（字体对齐）**这样让标题在屏幕上居中。

        _注意：在你保存进度之前，确定点击了**"运行"** 。_
      U4 Model Design 1_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        点击展开

        </div>

        # 创建一个数字原型

        使用右侧的原型（点击图片来放大）你将会
        为示例应用“Recycling Finder”（回收查找者）创建一个数字原型。我们
        已经为你加入了一些元素，包含标题，但是它
        看起来还不完整。我们后面涵盖这里面的的每个元素，但
        现在我们 **先着重标题**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png"
        style="width: 300px; float: right; clear: both;">-->

        # 这样做

        \*
        **确认你在设计模式中，**开关出现在你应用窗口上方
        的左面。

        -   **点击标题文字**来查看它的属性。
        -   \*
            **更改属性“text”（文字）**为“回收查找者”.
        -   **更改“font size”（字体大小）** 来增大标题。
        -   **更改“text alignment”（字体对齐）**这样让标题在屏幕上居中。

        _注意：在你保存进度之前，确定点击了**"运行"** 。_
      U4 Model Design 3: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        点击展开

        </div>

        # 增加图片

        原型在标志的地方只有一个空的黑色正方形 - 让我们增加一张图片来添加乐趣。"image"（图片）元素允许你从电脑里上传，或是图标库里选一张。

        # 这样做

        \*
        **拖出一个新的"image"（图片）**并将它放在描述和标题之间。

        -   **改变id（标识）**来匹配原型。
        -   **点击"image"属性旁的"选择..."链接**。
        -   **选择"Icons"（图标）标签**并为你的标识来选个图标。
        -   用"icon color"（图标颜色）属性来**改变图标的颜色**。
      U4 Model Design 3_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        点击展开

        </div>

        # 增加图片

        原型在标志的地方只有一个空的黑色正方形 - 让我们增加一张图片来添加乐趣。"image"（图片）元素允许你从电脑里上传，或是图标库里选一张。

        # 这样做

        \*
        **拖出一个新的"image"（图片）**并将它放在描述和标题之间。

        -   **改变id（标识）**来匹配原型。
        -   **点击"image"属性旁的"选择..."链接**。
        -   **选择"Icons"（图标）标签**并为你的标识来选个图标。
        -   用"icon color"（图标颜色）属性来**改变图标的颜色**。
      U4 Model Design 3_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        点击展开

        </div>

        # 增加图片

        原型在标志的地方只有一个空的黑色正方形 - 让我们增加一张图片来添加乐趣。"image"（图片）元素允许你从电脑里上传，或是图标库里选一张。

        # 这样做

        \*
        **拖出一个新的"image"（图片）**并将它放在描述和标题之间。

        -   **改变id（标识）**来匹配原型。
        -   **点击"image"属性旁的"选择..."链接**。
        -   **选择"Icons"（图标）标签**并为你的标识来选个图标。
        -   用"icon color"（图标颜色）属性来**改变图标的颜色**。
      U4 Model Design 4: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        点击展开

        </div>

        # 添加按钮i

        按钮允许你和应用交互。这个原型屏幕需要三个按钮（每个灰色阴影）。我们已经增加了Search（搜索）按钮，你只需要增加Contact（联系人）和About（关于）按钮。

        # 这样做

        -   为剩下的两个按钮，各**拖出一个新的"button"（按钮）元素**
        -   \*
            **改变它们的id**来和原型匹配。
        -   **改变文本**来和原型匹配。
        -   **改变其它属性**，来让屏幕变成你喜欢的样子。

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif"
        style="width: 500px;">
      U4 Model Design 4_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        点击展开

        </div>

        # 添加按钮i

        按钮允许你和应用交互。这个原型屏幕需要三个按钮（每个灰色阴影）。我们已经增加了Search（搜索）按钮，你只需要增加Contact（联系人）和About（关于）按钮。

        # 这样做

        -   为剩下的两个按钮，各**拖出一个新的"button"（按钮）元素**
        -   \*
            **改变它们的id**来和原型匹配。
        -   **改变文本**来和原型匹配。
        -   **改变其它属性**，来让屏幕变成你喜欢的样子。

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif"
        style="width: 500px;">
      U4 Model Design 4_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        点击展开

        </div>

        # 添加按钮i

        按钮允许你和应用交互。这个原型屏幕需要三个按钮（每个灰色阴影）。我们已经增加了Search（搜索）按钮，你只需要增加Contact（联系人）和About（关于）按钮。

        # 这样做

        -   为剩下的两个按钮，各**拖出一个新的"button"（按钮）元素**
        -   \*
            **改变它们的id**来和原型匹配。
        -   **改变文本**来和原型匹配。
        -   **改变其它属性**，来让屏幕变成你喜欢的样子。

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif"
        style="width: 500px;">
      U4 Model Design 5: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        点击展开

        </div>

        # 制作搜索框

        原型里的搜索框可以用一个"Text Input"（文本输入）元素。这是一个你的用户能够输入，然后你的软件能够从里读出用户输入了什么的控件。

        # 这样做

        -   **添加一个文本输入**
            元素。
        -   **改变id（标识）**来和原型匹配。
        -   **添加一个标签**到你的文本框旁边，文本是"Location"（位置）。
      U4 Model Design 5_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        点击展开

        </div>

        # 制作搜索框

        原型里的搜索框可以用一个"Text Input"（文本输入）元素。这是一个你的用户能够输入，然后你的软件能够从里读出用户输入了什么的控件。

        # 这样做

        -   **添加一个文本输入**
            元素。
        -   **改变id（标识）**来和原型匹配。
        -   **添加一个标签**到你的文本框旁边，文本是"Location"（位置）。
      U4 Model Design 5_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        点击展开

        </div>

        # 制作搜索框

        原型里的搜索框可以用一个"Text Input"（文本输入）元素。这是一个你的用户能够输入，然后你的软件能够从里读出用户输入了什么的控件。

        # 这样做

        -   **添加一个文本输入**
            元素。
        -   **改变id（标识）**来和原型匹配。
        -   **添加一个标签**到你的文本框旁边，文本是"Location"（位置）。
      U4 Model Design 6: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        点击展开

        </div>

        # 复选框

        搜索的可回收类型可以用"Checkbox"（复选框）元素。我们已经为玻璃增加了一个复选框和标签，这样你可以为纸和塑料也增加了。

        # 这样做

        -   为每个选项**增加一个复选框**。
        -   \*
            **改变它们的id（标识）**来和原型匹配。
        -   **添加标签**来描述每个复选框。
      U4 Model Design 6_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        点击展开

        </div>

        # 复选框

        搜索的可回收类型可以用"Checkbox"（复选框）元素。我们已经为玻璃增加了一个复选框和标签，这样你可以为纸和塑料也增加了。

        # 这样做

        -   为每个选项**增加一个复选框**。
        -   \*
            **改变它们的id（标识）**来和原型匹配。
        -   **添加标签**来描述每个复选框。
      U4 Model Design 6_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        点击展开

        </div>

        # 复选框

        搜索的可回收类型可以用"Checkbox"（复选框）元素。我们已经为玻璃增加了一个复选框和标签，这样你可以为纸和塑料也增加了。

        # 这样做

        -   为每个选项**增加一个复选框**。
        -   \*
            **改变它们的id（标识）**来和原型匹配。
        -   **添加标签**来描述每个复选框。
      U4 Model Design 7: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\n\n![expandable](https://curriculum.code.org/media/screen_model.png)\n\n<br/>\n\n点击展开\n\n</div>\n\n#
        最后润色\n\n现在，你应该有了一个快要完成（虽然还不能工作）的开始的纸上原型的数字版。现在要做的是检查你纸上的原型，增加任何遗漏的润色。\n\n#
        \n\n这样做\n\n-   **与原型核对**来确保加上了所有东西。\n-   **通读id（标识）**并修复任何没有描述性的标识。\n-   \\*\n
        \   通过调整大小或移动元素来**清除**任何草稿。"
      U4 Model Design 7_2018: "<div markdown=\"1\" style=\"float:\nright; margin:
        20px;\">\n\n![expandable](https://curriculum.code.org/media/screen_model.png)\n\n<br/>\n\n点击展开\n\n</div>\n\n#
        最后润色\n\n现在，你应该有了一个快要完成（虽然还不能工作）的开始的纸上原型的数字版。现在要做的是检查你纸上的原型，增加任何遗漏的润色。\n\n#
        \n\n这样做\n\n-   **与原型核对**来确保加上了所有东西。\n-   **通读id（标识）**并修复任何没有描述性的标识。\n-   \\*\n
        \   通过调整大小或移动元素来**清除**任何草稿。"
      U4 Model Design 7_2019: "<div markdown=\"1\" style=\"float:\nright; margin:
        20px;\">\n\n![expandable](https://curriculum.code.org/media/screen_model.png)\n\n<br/>\n\n点击展开\n\n</div>\n\n#
        最后润色\n\n现在，你应该有了一个快要完成（虽然还不能工作）的开始的纸上原型的数字版。现在要做的是检查你纸上的原型，增加任何遗漏的润色。\n\n#
        \n\n这样做\n\n-   **与原型核对**来确保加上了所有东西。\n-   **通读id（标识）**并修复任何没有描述性的标识。\n-   \\*\n
        \   通过调整大小或移动元素来**清除**任何草稿。"
      U4 Model Program 1: "# 添加新的屏幕\n\n为了完成你的应用程序，你需要的不仅仅是一个主屏幕。在纸上原型中创建的每张卡都由应用程序实验室中的\"屏幕\"表示。要创建更多屏幕，只需单击应用程序显示顶部的下拉列表,
        然后选择 \"新屏幕...\" \n\n<img src=\"https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png\"\nstyle=\"width:
        200px\">\n\n# 这样做\n\n-   \\*\\* 创建一个新屏幕\\*\\*并将它的ID（标识）设置为\"about\"（关于）。"
      U4 Model Program 1.5: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        点击展开

        </div>

        # 设计About（关于）屏幕

        为了添加元素到新的关于屏幕上，你需要首先从屏幕下拉框里选择它。

        # 这样做

        -   用右边的原型来**完成About（关于）屏幕**/
        -   **用屏幕下来狂**来在Home（主页）和About（关于）屏幕间切换。
      U4 Model Program 1.5_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        点击展开

        </div>

        # 设计About（关于）屏幕

        为了添加元素到新的关于屏幕上，你需要首先从屏幕下拉框里选择它。

        # 这样做

        -   用右边的原型来**完成About（关于）屏幕**/
        -   **用屏幕下来狂**来在Home（主页）和About（关于）屏幕间切换。
      U4 Model Program 1.5_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        点击展开

        </div>

        # 设计About（关于）屏幕

        为了添加元素到新的关于屏幕上，你需要首先从屏幕下拉框里选择它。

        # 这样做

        -   用右边的原型来**完成About（关于）屏幕**/
        -   **用屏幕下来狂**来在Home（主页）和About（关于）屏幕间切换。
      U4 Model Program 1_2018: "# 添加新的屏幕\n\n为了完成你的应用程序，你需要的不仅仅是一个主屏幕。在纸上原型中创建的每张卡都由应用程序实验室中的\"屏幕\"表示。要创建更多屏幕，只需单击应用程序显示顶部的下拉列表,
        然后选择 \"新屏幕...\" \n\n<img src=\"https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png\"\nstyle=\"width:
        200px\">\n\n# 这样做\n\n-   \\*\\* 创建一个新屏幕\\*\\*并将它的ID（标识）设置为\"about\"（关于）。"
      U4 Model Program 1_2019: "# 添加新的屏幕\n\n为了完成你的应用程序，你需要的不仅仅是一个主屏幕。在纸上原型中创建的每张卡都由应用程序实验室中的\"屏幕\"表示。要创建更多屏幕，只需单击应用程序显示顶部的下拉列表,
        然后选择 \"新屏幕...\" \n\n<img src=\"https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png\"\nstyle=\"width:
        200px\">\n\n# 这样做\n\n-   \\*\\* 创建一个新屏幕\\*\\*并将它的ID（标识）设置为\"about\"（关于）。"
      U4 Model Program 3_2018: |-
        # 按钮事件

        我们的屏幕现在已经到位，是时候开始实际编程应用程序，让它可以响应按钮点击。对于每个屏幕上的每个按钮，你都需要添加一个`onEvent`（当事件发生时）模块,用于监视该按钮被点击事件并进行适当的响应。刚开始我们将只看 "home_search_btn"（主页-搜索-按钮）按钮, 并在它被点击时打印一些东西到控制台。

        # 这样做

        你现在处于编码模式（你可以使用应用程序上方的按钮在编码模式和设计模式之间进行切换）。在这里你可以编写可以让响应用户你的应用程序互动的代码。

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   \*\*从代码工具箱中拖出`onEvent`（当事件发生时）模块 。
        -   \*\* 从 "id"（标识） 下拉列表中选择 "home_search_btn" \*\*（主页-搜索-按钮）。
        -   \*\* 将`console.log`（控制台.日志）模块从变量抽屉拖出。
        -   \*\* 运行你应用程序 \*\* 。
        -   \*\* 单击搜索按钮\*\* 并在控制台中查找信息。
      U4 Model Program 3_2019: |-
        # 按钮事件

        我们的屏幕现在已经到位，是时候开始实际编程应用程序，让它可以响应按钮点击。对于每个屏幕上的每个按钮，你都需要添加一个`onEvent`（当事件发生时）模块,用于监视该按钮被点击事件并进行适当的响应。刚开始我们将只看 "home_search_btn"（主页-搜索-按钮）按钮, 并在它被点击时打印一些东西到控制台。

        # 这样做

        你现在处于编码模式（你可以使用应用程序上方的按钮在编码模式和设计模式之间进行切换）。在这里你可以编写可以让响应用户你的应用程序互动的代码。

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   \*\*从代码工具箱中拖出`onEvent`（当事件发生时）模块 。
        -   \*\* 从 "id"（标识） 下拉列表中选择 "home_search_btn" \*\*（主页-搜索-按钮）。
        -   \*\* 将`console.log`（控制台.日志）模块从变量抽屉拖出。
        -   \*\* 运行你应用程序 \*\* 。
        -   \*\* 单击搜索按钮\*\* 并在控制台中查找信息。
      U4 Model Program 4_2018: |-
        # 在点击时更改屏幕

        `setScreen()`（设置屏幕）模块会将你的应用改变为你制定的任何屏幕。如果把一个`setScreen()`（设置屏幕）模块放在一个`onEvent`（当事件发生时）模块_内_，你就可以对按钮进行编码，使其改为正确的屏幕。

        # 这样做

        使用已创建的`onEvent`（当事件发生时）模块，让程序在 "home_search_btn"（主页-搜索-按钮）被点击时更改为 "搜索" 屏幕。

        -   \*\* 把 `setScreen()`（设置屏幕）模块\*\* 拉出并放入`onEvent`（当事件发生时）模块中。
        -   从 `setScreen()`（设置屏幕）下拉列表中\*\*选择"搜索" \*\*。
        -   \*\* 运行应用程序\*\* 并测试 "home_search_btn"（主页-搜索-按钮） 按钮。
      U4 Model Program 4_2019: |-
        # 在点击时更改屏幕

        `setScreen()`（设置屏幕）模块会将你的应用改变为你制定的任何屏幕。如果把一个`setScreen()`（设置屏幕）模块放在一个`onEvent`（当事件发生时）模块_内_，你就可以对按钮进行编码，使其改为正确的屏幕。

        # 这样做

        使用已创建的`onEvent`（当事件发生时）模块，让程序在 "home_search_btn"（主页-搜索-按钮）被点击时更改为 "搜索" 屏幕。

        -   \*\* 把 `setScreen()`（设置屏幕）模块\*\* 拉出并放入`onEvent`（当事件发生时）模块中。
        -   从 `setScreen()`（设置屏幕）下拉列表中\*\*选择"搜索" \*\*。
        -   \*\* 运行应用程序\*\* 并测试 "home_search_btn"（主页-搜索-按钮） 按钮。
      U4 Model Program 5: |-
        # 将其他按钮连接起来

        现在你已经让一个按钮可以正常工作了，可以遵循相同的模式来制作其他的。

        # 这样做

        -   为每个按钮**添加一个 `onEvent`（当事件发生时）模块**。
        -   从"id"（标识）下拉列表中**选择按钮ID（标识）**。
        -   **添加一个 `setScreen()`（设置屏幕）模块**到每个`onEvent`（当事件发生时）模块内。
        -   从每个 `setScreen()`（设置屏幕）下拉列表中\*\*选择屏幕 ID \*\*。
        -   \*\* 运行应用程序 \*\* 并测试所有按钮是否正常工作。
      U4 Model Program 5_2018: |-
        # 将其他按钮连接起来

        现在你已经让一个按钮可以正常工作了，可以遵循相同的模式来制作其他的。

        # 这样做

        -   为每个按钮**添加一个 `onEvent`（当事件发生时）模块**。
        -   从"id"（标识）下拉列表中**选择按钮ID（标识）**。
        -   **添加一个 `setScreen()`（设置屏幕）模块**到每个`onEvent`（当事件发生时）模块内。
        -   从每个 `setScreen()`（设置屏幕）下拉列表中\*\*选择屏幕 ID \*\*。
        -   \*\* 运行应用程序 \*\* 并测试所有按钮是否正常工作。
      U4 Model Program 5_2019: |-
        # 将其他按钮连接起来

        现在你已经让一个按钮可以正常工作了，可以遵循相同的模式来制作其他的。

        # 这样做

        -   为每个按钮**添加一个 `onEvent`（当事件发生时）模块**。
        -   从"id"（标识）下拉列表中**选择按钮ID（标识）**。
        -   **添加一个 `setScreen()`（设置屏幕）模块**到每个`onEvent`（当事件发生时）模块内。
        -   从每个 `setScreen()`（设置屏幕）下拉列表中\*\*选择屏幕 ID \*\*。
        -   \*\* 运行应用程序 \*\* 并测试所有按钮是否正常工作。
      Underground Avoiding Lava: 岩浆隐藏在某些块的下方，你得填上它们才能前进。使用`如果`命令来解决这个问题。在合适的位置添加`向前移动`命令来采集这些资源。
      Underground Avoiding Lava_2019: 岩浆隐藏在某些块的下方，你得填上它们才能前进。使用`如果`命令来解决这个问题。在合适的位置添加`向前移动`命令来采集这些资源。
      Underground If Statements: 现在事情变得越来越棘手了。挖掘3块红石, 但不要落入熔岩。使用`如果`指令将圆石放置在任何未掩盖的熔岩上。
      Underground If Statements_2019: 现在事情变得越来越棘手了。挖掘3块红石, 但不要落入熔岩。使用`如果`指令将圆石放置在任何未掩盖的熔岩上。
      Virtual Pet 1: |-
        这是杰拉尔丁，你的宠物长颈鹿。

        你觉得在按下"▶ 运行"之后点击她会发生什么事？
      Virtual Pet 2: "那边角落里有个泥坑。  \n\n创建一个 **事件** 使得杰拉尔丁碰到泥坑的时候，她的颜色会变成棕色。"
      Virtual Pet 2_2019: "那边角落里有个泥坑。  \n\n创建一个 **事件** 使得杰拉尔丁碰到泥坑的时候，她的颜色会变成棕色。"
      Virtual Pet 3: "我们不能让脏兮兮的长颈鹿到处走来走去!  \n\n1.  在屏幕上添加一个新的肥皂精灵。  \n2.  你能否使长颈鹿和肥皂接触的时候变回正常的颜色？
        \n\n* * *\n\n要重置颜色, 请使用此模块:\n<xml><block type=\"gamelab_removeTint\" inline=\"true\">\n<value
        name=\"THIS\">\n<block type=\"sprite_variables_get\">\n\n<title name=\"VAR\">mySprite</title>\n</block>\n</value>\n</block></xml>"
      Virtual Pet 3_2019: "我们不能让脏兮兮的长颈鹿到处走来走去!  \n\n1.  在屏幕上添加一个新的肥皂精灵。  \n2.  你能否使长颈鹿和肥皂接触的时候变回正常的颜色？
        \n\n* * *\n\n要重置颜色, 请使用此模块:\n<xml><block type=\"gamelab_removeTint\" inline=\"true\">\n<value
        name=\"THIS\">\n<block type=\"sprite_variables_get\">\n\n<title name=\"VAR\">mySprite</title>\n</block>\n</value>\n</block></xml>"
      Virtual Pet 4: "我们不希望每次都要等着长颈鹿花时间清理它自己。  \n\n为肥皂添加行为使其变得可拖动，完成后拖动它来清洁长颈鹿。"
      Virtual Pet 4_2019: "我们不希望每次都要等着长颈鹿花时间清理它自己。  \n\n为肥皂添加行为使其变得可拖动，完成后拖动它来清洁长颈鹿。"
      Virtual Pet 5: "玩耍是需要能量的！  \n\n对每个事件添加一个操作，使得长颈鹿每次和其他精灵碰撞时，她的尺寸减小5."
      Virtual Pet 5_2019: "玩耍是需要能量的！  \n\n对每个事件添加一个操作，使得长颈鹿每次和其他精灵碰撞时，她的尺寸减小5."
      Virtual Pet 6: "均衡的饮食非常重要，我们需要给长颈鹿喂食好让她恢复体力。  \n\n在屏幕上添加一个苹果，并使得苹果和长颈鹿相碰时，长颈鹿变回原来的大小。"
      Virtual Pet 6_2019: "均衡的饮食非常重要，我们需要给长颈鹿喂食好让她恢复体力。  \n\n在屏幕上添加一个苹果，并使得苹果和长颈鹿相碰时，长颈鹿变回原来的大小。"
      Virtual Pet 8_2019: "自由发挥：还能让长颈鹿做些什么？ \n\n-   能添加更多特殊组件吗？  \n-   能为她找到朋友吗？  "
      Virtual Pet Freeplay: "自由发挥：还能让长颈鹿做些什么？ \n\n-   能添加更多特殊组件吗？  \n-   能为她找到朋友吗？
        \ "
      'Widget: Text Compression': 在文本中找到规律（如重复的单词或词组）。在右侧的词典中输入你所发现的规律。当你将其输入到字典中时，以文本形式表现的规律就会用符号替代。
      comment_intro_maze_2018: |-
        _"我糊涂了。帮助我记住如何通过这个迷宫。"_

        * * *

        要通过这关，解决谜题，并使用新的<xml><block type="comment"><title name="TEXT"></title></block></xml>注释模块来给自己留下快速提醒。它们可以帮助记起在做什么以及原因！

        注释只用于**你自己**使用。游戏区域不会因为注释看起来不一样。
      course1_artist_loops_challenge4: _"是时候掷骰子了! 你能帮我画这些吗？"_
      course1_maze_debugging_challenge1: 调试本关卡。去掉多余的模块并添加缺少的块。让鸟到达猪那里！
      course1_maze_debugging_challenge2: 调试本关卡。这些模块是正确的, 但他们的顺序错了!
      course2_artist_nestedLoops_challenge1: |-
        你能想出怎么做像这样的图吗？

        -   两个形状都有**50像素的边长。**
        -   _八边形_要转向_45度_。
        -   _三角形_要_120度_的转向。
      course2_artist_nestedLoops_challenge2: |-
        你能想出如何画一幅这样的图吗？

        -   第一个内循环应该画一个八边形。
        -   第二个内循环应该画一个六边形。
        -   第三个内循环应该画一个正方形。
      course2_bee_conditionals_challenge2: 采所有花蜜，并酿所有蜂蜜。你可以用一个`while nectar > 0`循环，在一朵花里收集所有花蜜。
      course2_collector_prog_challenge1: 仔细看! 你能收集所有 **10** 块宝藏吗？
      course2_harvester_loops_challenge1: 收集所有的玉米。
      course2_harvester_loops_challenge2: 收集所有的莴苣。避开树木和田野!
      course2_maze_programming_challenge2: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      course3_artist_functions_challenge1: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码, 看看它是如何工作的,
        然后改变它, 让您自己的设计更出色！
      course3_artist_functions_challenge2: |-
        你不仅能跳到一些预先设定的位置，比如画布的角落，你还能用`跳到`命令来到任何想去的绝对位置上！试试看这个代码，理解它的原理，并做出自己的程序！

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      course3_bee_functions_challenge1: 你得自己独立接受这个挑战。这可能比看起来更难！
      course3_bee_functions_challenge3: 创建一个新的函数, 当前方有路的时候，收集所有的花蜜和蜂蜜。用它来完成关卡!
      course3_bee_functions_challenge4: 用你所学的来解决这个关卡。
      course3_farmer_until_challenge2: 使用如果/否则模块来跟随这条曲线的路。在每个转角处，用循环里的`移除一个`来清理土堆。
      course3_maze_debugging_challenge1: _"我一直在绕圈子吗？"_
      course3_maze_debugging_challenge2: _"如果转向得太多可能会把我搞头晕! 请帮助我使用四个`转向`指令块到达猪的位置。"_
      course3_maze_until_challenge1: 没有提示，只有挑战。把僵尸带到向日葵那里。
      course3_playLab_challenge1: "-   **松鼠**很害怕看到**恐龙**来到镇上！勇敢的**骑士**能帮忙赶走恐惧吗？\\*\n\n规则：\n\n1.
        \ _碰到松鼠得分。_\n2.  _碰到恐龙丢很多分。_\n\n这是和玩过的不同的游戏！玩一玩，看看它是如何工作的。 \n\n当你有足够的分数或者分数太低时，会发生一些事情。添加一些代码到`游戏胜利`和`游戏失败`函数中，来让游戏按照它的方法工作。
        \n点击提示获得主意！"
      course4_artist_binary_challenge1: 在这个谜题中，您只能使用每个二进制值 (0或1) 一次。请尝试使用嵌套循环来画这幅图。
      course4_artist_binary_challenge2: |-
        网格里有256个比特 - 这意味着和容易因为一点小改动而造成大问题。你能坚持下去，把图标恢复正常吗？

        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      course4_artist_concept_challenge2: 使用下面的代码创建五个风车的设计。
      course4_artist_functions_challenge2: |-
        你不仅能跳到一些预先设定的位置，比如画布的角落，你还能用`跳到`命令来到任何想去的绝对位置上！试试看这个代码，理解它的原理，并做出自己的程序！

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      course4_artist_fwp_challenge1: 请尝试运行此程序，并进行更改，看看会发生什么。你能弄清楚它是如何工作的吗？（或者你可以把这段程序删掉并且重写成其他任何你想要的程序）
      course4_bee_fwp_challenge1: 在函数中使用一个`计数循环`来收集所有的玉米。通过使用`length`（长度）参数，同样的`计数循环`可以数到不同的最大值。
      course4_collector_nested_loops_challenge2: |-
        让我们来寻找宝藏 - 用循环！

        只用工具箱里的模块来帮助收藏家至少拿到两堆宝藏。有可能收集到所有4堆。
      course4_harvester_nested_loops_challenge1: _"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"_
      course4_playlab_variables_challenge1: 使用这些模块使演员分享一个敲门问答的笑话。改变警句和设置来讲你自己的笑话！
      courseA_artist_loops10: |-
        ## 是时候回到陆地。请帮助我放一些石头，这样我不会掉下去！

        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops10_2018: |-
        ## 是时候回到陆地。请帮助我放一些石头，这样我不会掉下去！

        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops10_2019: |-
        ## 是时候回到陆地。请帮助我放一些石头，这样我不会掉下去！

        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops11: |-
        ## 帮我建一些台阶来观看船驶离。

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops11_2018: |-
        ## 帮我建一些台阶来观看船驶离。

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops11_2019: |-
        ## 帮我建一些台阶来观看船驶离。

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops12: |-
        画家看到远处有些滑稽的东西。画出你认为他看到的东西。

        * * *

        ### 点子

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2018: |-
        画家看到远处有些滑稽的东西。画出你认为他看到的东西。

        * * *

        ### 点子

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2019: |-
        画家看到远处有些滑稽的东西。画出你认为他看到的东西。

        * * *

        ### 点子

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops2: |-
        帮助艺术家向前画这条线两次。

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2018: |-
        帮助艺术家向前画这条线两次。

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2019: |-
        帮助艺术家向前画这条线两次。

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops3: "我们的艺术家试图画一条线五次, 但还是不能把它的画好。你能帮忙吗？\n![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif) "
      courseA_artist_loops3_2018: "我们的艺术家试图画一条线五次, 但还是不能把它的画好。你能帮忙吗？\n![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif) "
      courseA_artist_loops3_2019: "我们的艺术家试图画一条线五次, 但还是不能把它的画好。你能帮忙吗？\n![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif) "
      courseA_artist_loops4: |-
        现在使用 一个<xml><block type="controls_repeat_simplified_dropdown"><title
        name="TIMES" config="2-6">5</title></block></xml>循环画这条线5 次！

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2018: |-
        现在使用 一个<xml><block type="controls_repeat_simplified_dropdown"><title
        name="TIMES" config="2-6">5</title></block></xml>循环画这条线5 次！

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2019: |-
        现在使用 一个<xml><block type="controls_repeat_simplified_dropdown"><title
        name="TIMES" config="2-6">5</title></block></xml>循环画这条线5 次！

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops5: |-
        ## 画一条7步长的线。这将成为我们的地平线。

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops5_2018: |-
        ## 画一条7步长的线。这将成为我们的地平线。

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops5_2019: |-
        ## 画一条7步长的线。这将成为我们的地平线。

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops6: |-
        ## 让我们在后面放一座漂亮的小山。

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops6_2018: |-
        ## 让我们在后面放一座漂亮的小山。

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops6_2019: |-
        ## 让我们在后面放一座漂亮的小山。

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops7: |-
        ## 使用 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>

        循环添加波浪到水中。

        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_2018: |-
        ## 使用 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>

        循环添加波浪到水中。

        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_2019: |-
        ## 使用 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>

        循环添加波浪到水中。

        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops8: |-
        ## 我们需要一把梯子到船上去。

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops8_2018: |-
        ## 我们需要一把梯子到船上去。

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops8_2019: |-
        ## 我们需要一把梯子到船上去。

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops9: |-
        ## \*\* 挑战: \*\* 通向码头的楼梯坏了。 帮我修好它。

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2018: |-
        ## \*\* 挑战: \*\* 通向码头的楼梯坏了。 帮我修好它。

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2019: |-
        ## \*\* 挑战: \*\* 通向码头的楼梯坏了。 帮我修好它。

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops_challenge1: "可以使用循环在一行中绘制多条线。\n\n你能画一座房子吗？让它看起来和你喜欢的一样！尝试查找重复的模式!
        \n\n这里有一些点子: \n\n![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)"
      courseA_artist_loops_challenge1_2018: "可以使用循环在一行中绘制多条线。\n\n你能画一座房子吗？让它看起来和你喜欢的一样！尝试查找重复的模式!
        \n\n这里有一些点子: \n\n![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)"
      courseA_artist_loops_challenge1_2019: "可以使用循环在一行中绘制多条线。\n\n你能画一座房子吗？让它看起来和你喜欢的一样！尝试查找重复的模式!
        \n\n这里有一些点子: \n\n![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)"
      courseA_artist_loops_challenge2a: "_\"帮我把营地做好!\"_  \n\n使用工具箱中的模块来绘制这三个帐篷。"
      courseA_artist_loops_challenge2a_2018: "_\"帮我把营地做好!\"_  \n\n使用工具箱中的模块来绘制这三个帐篷。"
      courseA_artist_loops_challenge2a_2019: "_\"帮我把营地做好!\"_  \n\n使用工具箱中的模块来绘制这三个帐篷。"
      courseA_collector_loops1: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。

        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseA_collector_loops12: |-
        _"尤里卡! 拿到尽可能多的宝藏！"_
        (你不必得到全部。）
      courseA_collector_loops12_2018: |-
        _"尤里卡! 拿到尽可能多的宝藏！"_
        (你不必得到全部。）
      courseA_collector_loops12_2019: |-
        _"尤里卡! 拿到尽可能多的宝藏！"_
        (你不必得到全部。）
      courseA_collector_loops1_2018: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。

        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseA_collector_loops1_2019: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。

        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseA_collector_loops2: "得到所有三堆宝藏！移动罗瑞尔到每一堆宝藏，然后使用这个模块: \n  <xml><block type=\"collector_collect\"/></xml>"
      courseA_collector_loops2_2018: "得到所有三堆宝藏！移动罗瑞尔到每一堆宝藏，然后使用这个模块: \n  <xml><block
        type=\"collector_collect\"/></xml>"
      courseA_collector_loops3: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseA_collector_loops3_2018: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseA_collector_loops3_2019: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseA_collector_loops_challenge1: _"你能帮我找出一些缺陷吗？我知道想走哪条路，但我不确定要走多少步。"_
      courseA_collector_loops_challenge1_2018: _"你能帮我找出一些缺陷吗？我知道想走哪条路，但我不确定要走多少步。"_
      courseA_collector_loops_challenge1_2019: _"你能帮我找出一些缺陷吗？我知道想走哪条路，但我不确定要走多少步。"_
      courseA_collector_preLoops7: "得到所有三堆宝藏！移动罗瑞尔到每一堆宝藏，然后使用这个模块: \n  <xml><block
        type=\"collector_collect\"/></xml>"
      courseA_harvester_loops1: 帮助收割者采摘所有的玉米！
      courseA_harvester_loops10: 帮助收割者捡起所有5束玉米！
      courseA_harvester_loops10_2019: 帮助收割者捡起所有5束玉米！
      courseA_harvester_loops11: 试试自己做一个！
      courseA_harvester_loops11_2019: 试试自己做一个！
      courseA_harvester_loops1_2019: 帮助收割者采摘所有的玉米！
      courseA_harvester_loops2: 收割者需要采摘所有的玉米！找到规律了吗？
      courseA_harvester_loops2_2019: 收割者需要采摘所有的玉米！找到规律了吗？
      courseA_harvester_loops3: 你能只用**一个**移动模块来采摘所有玉米吗？
      courseA_harvester_loops3_2019: 你能只用**一个**移动模块来采摘所有玉米吗？
      courseA_harvester_loops4: |-
        _"我需要找到哪里错了！"_

        你能帮助收割者找到她代码里的错误吗？
      courseA_harvester_loops4_2019: |-
        _"我需要找到哪里错了！"_

        你能帮助收割者找到她代码里的错误吗？
      courseA_harvester_loops5: 自己试一试！你能也采摘最后的玉米吗？
      courseA_harvester_loops5_2019: 自己试一试！你能也采摘最后的玉米吗？
      courseA_harvester_loops5a: 看看所有玉米？你能自己采摘它们吗？
      courseA_harvester_loops5a_2019: 看看所有玉米？你能自己采摘它们吗？
      courseA_harvester_loops5b: 你能改变代码来让收割者采摘所有玉米吗？
      courseA_harvester_loops5b_2019: 你能改变代码来让收割者采摘所有玉米吗？
      courseA_harvester_loops6: |-
        你需要**一个** <xml><block
        type="maze_moveWest"></block></xml>模块和**一个** <xml><block type="maze_moveNorth"></block></xml>
        模块来完成这关！
      courseA_harvester_loops6_2019: |-
        你需要**一个** <xml><block
        type="maze_moveWest"></block></xml>模块和**一个** <xml><block type="maze_moveNorth"></block></xml>
        模块来完成这关！
      courseA_harvester_loops7: '自己试试吧！ '
      courseA_harvester_loops7_2019: '自己试试吧！ '
      courseA_harvester_loops9: 你能想出如何收集_所有_玉米吗？
      courseA_harvester_loops9_2019: 你能想出如何收集_所有_玉米吗？
      courseA_harvester_seq1: 帮助收割者采摘玉米！
      courseA_harvester_seq10: 收割者需要采摘所有的玉米！找到规律了吗？
      courseA_harvester_seq10_2019: 收割者需要采摘所有的玉米！找到规律了吗？
      courseA_harvester_seq11: 自己试试吧！采摘所有玉米。
      courseA_harvester_seq11_2019: 自己试试吧！采摘所有玉米。
      courseA_harvester_seq12: |-
        _谢谢你帮助我！_

        采摘所有的玉米。
      courseA_harvester_seq12_2019: |-
        _谢谢你帮助我！_

        采摘所有的玉米。
      courseA_harvester_seq13: 帮助农夫采摘玉米！
      courseA_harvester_seq13_2019: 帮助农夫采摘玉米！
      courseA_harvester_seq1_2019: 帮助收割者采摘玉米！
      courseA_harvester_seq2: '用<xml><block type="maze_moveWest"/></xml>模块 3 次来让收割者到达玉米的位置！ '
      courseA_harvester_seq2_2019: '用<xml><block type="maze_moveWest"/></xml>模块 3
        次来让收割者到达玉米的位置！ '
      courseA_harvester_seq3: 用<xml><block type="maze_moveNorth"/></xml>模块 3 次来让收割者到达玉米的位置，最后别忘了捡起它们。
      courseA_harvester_seq3_2019: 用<xml><block type="maze_moveNorth"/></xml>模块 3
        次来让收割者到达玉米的位置，最后别忘了捡起它们。
      courseA_harvester_seq4: 添加_一个_模块来帮助农夫采摘玉米。
      courseA_harvester_seq4_2019: 添加_一个_模块来帮助农夫采摘玉米。
      courseA_harvester_seq5: 能找出这代码哪里出了问题吗？改正它来帮助收割者收获玉米。
      courseA_harvester_seq5_2019: 能找出这代码哪里出了问题吗？改正它来帮助收割者收获玉米。
      courseA_harvester_seq6: 自己试一试！
      courseA_harvester_seq6_2019: 自己试一试！
      courseA_harvester_seq7: 你得在两个方向上移动才能找到那朵花! 帮助收割者选择正确的方向。
      courseA_harvester_seq7_2019: 你得在两个方向上移动才能找到那朵花! 帮助收割者选择正确的方向。
      courseA_harvester_seq8: 现在收割者需要采摘玉米两次！
      courseA_harvester_seq8_2019: 现在收割者需要采摘玉米两次！
      courseA_harvester_seq9: 添加两个模块来完成这个关卡！
      courseA_harvester_seq9_2019: 添加两个模块来完成这个关卡！
      courseA_maze_ramp2_2018: |-
        将两个<xml><block type="maze_moveEast"/></xml>
        模块附加到<xml><block type="when_run"/></xml>上来完成代码，然后点击"▶运行"。
      courseA_maze_ramp2_2019: |-
        将两个<xml><block type="maze_moveEast"/></xml>
        模块附加到<xml><block type="when_run"/></xml>上来完成代码，然后点击"▶运行"。
      courseA_maze_ramp3a_2018: 从工具箱里取出一个 <xml><block type="maze_moveNorth"/></xml>，并将它加到其它模块的最底下来完成代码，然后点击"▶
        运行"。
      courseA_maze_ramp3a_2019: 从工具箱里取出一个 <xml><block type="maze_moveNorth"/></xml>，并将它加到其它模块的最底下来完成代码，然后点击"▶
        运行"。
      courseA_maze_ramp3b_2018: |-
        在这个代码的末尾有一个多余的代码块!

        把它拖回工具箱来删除它。
      courseA_maze_ramp3b_2019: |-
        在这个代码的末尾有一个多余的代码块!

        把它拖回工具箱来删除它。
      courseA_maze_ramp4a_2018: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseA_maze_ramp4a_2019: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseA_maze_ramp5a_2018: 试试自己完成它！
      courseA_maze_ramp5a_2019: 试试自己完成它！
      courseA_maze_seq1: _"摆弄这些模块并试着把我带到坏猪那里！"_
      courseA_maze_seq10: |-
        **挑战：** 绕开TNT 把鸟带到猪那里！

        ![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)
      courseA_maze_seq10_2018: "**挑战：** 绕开TNT 把鸟带到猪那里！"
      courseA_maze_seq10_2019: "**挑战：** 绕开TNT 把鸟带到猪那里！"
      courseA_maze_seq11: |-
        到了更短的关卡了！往一个方向移动，然后另一个方向把鸟带到猪那里。

        ![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)
      courseA_maze_seq11_2018: |-
        到了更短的关卡了！往一个方向移动，然后另一个方向把鸟带到猪那里。

        ![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)
      courseA_maze_seq11_2019: |-
        到了更短的关卡了！往一个方向移动，然后另一个方向把鸟带到猪那里。

        ![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)
      courseA_maze_seq12: |-
        抓住那只猪！

        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq12_2018: |-
        抓住那只猪！

        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq12_2019: |-
        抓住那只猪！

        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq13_2019: 用各种方法把那头猪抓来!
      courseA_maze_seq1_2018: _"摆弄这些模块并试着把我带到坏猪那里！"_
      courseA_maze_seq1_2019: _"摆弄这些模块并试着把我带到坏猪那里！"_
      courseA_maze_seq2: |-
        _"一个缺陷！修复代码把我带到猪那里。"_

        ![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)
      courseA_maze_seq3: |-
        _"修复代码把我带到猪那里！"_

        ![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)
      courseA_maze_seq4: |-
        _"一些事情不太对。"_

        移除一个模块把鸟带到猪那里！

        ![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)
      courseA_maze_seq5: |-
        从头自己开始尝试这个。

        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5_2018: 尝试一下。
      courseA_maze_seq5_2019: 尝试一下。
      courseA_maze_seq5a_2018: |-
        _"在这里，小猪！"_

        要在代码最后增加什么来让小鸟到达猪那里？
      courseA_maze_seq5a_2019: |-
        _"在这里，小猪！"_

        要在代码最后增加什么来让小鸟到达猪那里？
      courseA_maze_seq6: |-
        往一条路走，然后另一条把鸟带到猪那里！

        ![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)
      courseA_maze_seq6_2018: 往一条路走，然后走另一条把鸟带到猪那里！
      courseA_maze_seq6_2019: 往一条路走，然后走另一条把鸟带到猪那里！
      courseA_maze_seq7: |-
        找出什么缺少了，然后添加模块使鸟到达猪那！

        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq8: |-
        通过这关卡把鸟带到猪那！

        ![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)
      courseA_maze_seq8_2018: 通过这关，把鸟带到猪那！
      courseA_maze_seq8_2019: 通过这关，把鸟带到猪那！
      courseA_maze_seq9: "\\*\\* 挑战: \\*\\* 通过添加模块把鸟带到猪那里来调试这个关卡! \n\n![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)"
      courseA_maze_seq_challenge1: 调试本关卡。去掉多余的模块并添加缺少的块。让鸟到达猪那里！
      courseA_maze_seq_challenge1_2018: 调试本关卡。去掉多余的模块并添加缺少的块。让鸟到达猪那里！
      courseA_maze_seq_challenge1_2019: 调试本关卡。去掉多余的模块并添加缺少的块。让鸟到达猪那里！
      courseA_maze_seq_challenge2_2019: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseA_playLab_events3: |-
        通过连接已经在工作区的<xml><block type="studio_move">
            <title name="SPRITE">1</title>
            <title
        name="DIR">8</title>
          </block></xml> 模块到<xml><block type="studio_whenArrow">
            <title
        name="VALUE">left</title>
          </block></xml>事件模块帮助乔治狗移动。

        把乔治带到旗那里来过此关卡！
      courseA_playLab_events3_2018: |-
        通过连接已经在工作区的<xml><block type="studio_move">
            <title name="SPRITE">1</title>
            <title
        name="DIR">8</title>
          </block></xml> 模块到<xml><block type="studio_whenArrow">
            <title
        name="VALUE">left</title>
          </block></xml>事件模块帮助乔治狗移动。

        把乔治带到旗那里来过此关卡！
      courseA_playLab_events3_2019: |-
        通过连接已经在工作区的<xml><block type="studio_move">
            <title name="SPRITE">1</title>
            <title
        name="DIR">8</title>
          </block></xml> 模块到<xml><block type="studio_whenArrow">
            <title
        name="VALUE">left</title>
          </block></xml>事件模块帮助乔治狗移动。

        把乔治带到旗那里来过此关卡！
      courseA_playLab_events4: 现在，添加更多的模块，来让乔治在右方向键按下时，向右移动。
      courseA_playLab_events4_2018: 现在，添加另一个模块，来让乔治在右方向键按下时，向右移动。
      courseA_playLab_events4_2019: 现在，添加另一个模块，来让乔治在右方向键按下时，向右移动。
      courseA_playLab_events5: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      courseA_playLab_events5_2018: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      courseA_playLab_events5_2019: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      courseA_playLab_events6_2019: 当乔治被点击的时候，改变背景和播放随机声音来添加一些乐趣。
      courseA_playLab_events7_2018: _任意发挥:_ 添加你想要的任何东西到这个游戏中。当乔治碰上恐龙的时候, 你能否让恐龙消失?
      courseA_playLab_events7_2019: _任意发挥:_ 添加你想要的任何东西到这个游戏中。当乔治碰上恐龙的时候, 你能否让恐龙消失?
      courseA_playlab_events_challenge1: |-
        点击奥丽芙将使罗宾出现！
        你能编写代码来显示其余的人物吗？

        在这个关卡中, 请务必点击提示！这些提示将帮助你逐步完成此项目!

        !\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challenge1_2018: |-
        点击奥丽芙将使罗宾出现！
        你能编写代码来显示其余的人物吗？

        在这个关卡中, 请务必点击提示！这些提示将帮助你逐步完成此项目!

        !\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challenge1_2019: |-
        点击奥丽芙将使罗宾出现！
        你能编写代码来显示其余的人物吗？

        在这个关卡中, 请务必点击提示！这些提示将帮助你逐步完成此项目!

        !\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challenge2: |-
        当你点击他们的时候让每个人做点什么。动物们会怎么说？还会发生什么呢？

        在这个关卡中, 请务必点击提示。这些提示会给你尝试一些有趣的事情!

        !\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challenge2_2018: |-
        当你点击他们的时候让每个人做点什么。动物们会怎么说？还会发生什么呢？

        在这个关卡中, 请务必点击提示。这些提示会给你尝试一些有趣的事情!

        !\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challenge2_2019: |-
        当你点击他们的时候让每个人做点什么。动物们会怎么说？还会发生什么呢？

        在这个关卡中, 请务必点击提示。这些提示会给你尝试一些有趣的事情!

        !\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseB_Scrat_ramp1_2018: 让斯奎特到达橡子，将<xml><block type="maze_moveEast"/></xml>模块粘到<xml><block
        type="when_run"/></xml>模块的下面，然后点击"▶ 运行"！
      courseB_Scrat_ramp1_2019: 让斯奎特到达橡子，将<xml><block type="maze_moveEast"/></xml>模块粘到<xml><block
        type="when_run"/></xml>模块的下面，然后点击"▶ 运行"！
      courseB_Scrat_ramp2_2018: |-
        将两个<xml><block type="maze_moveEast"/></xml>
        模块附加到<xml><block type="when_run"/></xml>上来完成代码，然后点击"▶ 运行"。
      courseB_Scrat_ramp2_2019: |-
        将两个<xml><block type="maze_moveEast"/></xml>
        模块附加到<xml><block type="when_run"/></xml>上来完成代码，然后点击"▶ 运行"。
      courseB_Scrat_ramp3a_2018: 从工具箱里取出一个 <xml><block type="maze_moveNorth"/></xml>，并将它加到其它模块的最底下来完成代码，然后点击"▶
        运行"。
      courseB_Scrat_ramp3a_2019: 从工具箱里取出一个 <xml><block type="maze_moveNorth"/></xml>，并将它加到其它模块的最底下来完成代码，然后点击"▶
        运行"。
      courseB_Scrat_ramp3b_2018: |-
        在这个代码的末尾有一个多余的代码块!

        把它拖回工具箱来删除它。
      courseB_Scrat_ramp3b_2019: |-
        在这个代码的末尾有一个多余的代码块!

        把它拖回工具箱来删除它。
      courseB_Scrat_ramp4a_2018: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseB_Scrat_ramp4a_2019: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseB_Scrat_ramp5a_2018: 试试自己完成它！
      courseB_Scrat_ramp5a_2019: 试试自己完成它！
      courseB_artist_loops10: |-
        运用你已经学到的知识来画一幅你认为艺术家在回到家的时会看到的画。

        * * *

        ### 点子

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops10_2018: |-
        运用你已经学到的知识来画一幅你认为艺术家在回到家的时会看到的画。

        * * *

        ### 点子

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops10_2019: |-
        运用你已经学到的知识来画一幅你认为艺术家在回到家的时会看到的画。

        * * *

        ### 点子

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops1_2019: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      courseB_artist_loops2_2019: 艺术家试图画一条线 \*\* 6 \*\* 次, 但还没画好。 你能帮忙吗？
      courseB_artist_loops3_2019: 帮助艺术家画一条线7次, 来做花园墙。
      courseB_artist_loops5_2019: 该去修楼梯了! 重复这个图案 \*\* 5\*\* 次, 这样艺术家就可以到达灌木丛的顶端。
      courseB_artist_loops6: 在灌木丛后面是一条开满美丽花朵的藤。你能够爬上藤看它延到哪里吗？
      courseB_artist_loops6_2018: 在灌木丛后面是一条开满美丽花朵的藤。你能够爬上藤看它延到哪里吗？
      courseB_artist_loops6_2019: 在灌木丛后面是一条开满美丽花朵的藤。你能够爬上藤看它延到哪里吗？
      courseB_artist_loops7: "**挑战：**这是一个隐藏的花园！让我们四处走一走。"
      courseB_artist_loops7_2018: "**挑战：**这是一个隐藏的花园！让我们四处走一走。"
      courseB_artist_loops7_2019: "**挑战：**这是一个隐藏的花园！让我们四处走一走。"
      courseB_artist_loops8_2019: 该回家了。你可以只用一个模块就能修好这个梯子让艺术家下来吗？
      courseB_artist_loops9_2019: 让我们走捷径回家，越过池塘。你能帮助艺术家待在石头上吗？
      courseB_artist_loops_challenge1: _"是时候掷骰子了! 你能帮我画这些吗？"_
      courseB_artist_loops_challenge1_2018: _"是时候掷骰子了! 你能帮我画这些吗？"_
      courseB_artist_loops_challenge1_2019: _"是时候掷骰子了! 你能帮我画这些吗？"_
      courseB_artist_loops_challenge2: |-
        让我们玩游戏吧! 尽可能多地画 X。
        你可以做到一排放3 个吗？
      courseB_artist_loops_challenge2_2018: |-
        让我们玩游戏吧! 尽可能多地画 X。
        你可以做到一排放3 个吗？
      courseB_artist_loops_challenge2_2019: |-
        让我们玩游戏吧! 尽可能多地画 X。
        你可以做到一排放3 个吗？
      courseB_collector_loops1: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。

        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseB_collector_loops10_2019: 帮助罗瑞尔从这个洞穴得到所有的宝藏。
      courseB_collector_loops11_2019: 发现宝藏了! 得到尽可能多的财富!
      courseB_collector_loops1_2018: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。

        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseB_collector_loops1_2019: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。

        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseB_collector_loops2: |-
        移动罗瑞尔到宝藏, 然后使用<xml><block type="collector_collect"/></xml>模块来捡起它。

        拿到所有四堆宝藏来通过此关卡。
      courseB_collector_loops2_2018: |-
        移动罗瑞尔到宝藏, 然后使用<xml><block type="collector_collect"/></xml>模块来捡起它。

        拿到所有四堆宝藏来通过此关卡。
      courseB_collector_loops2_2019: |-
        移动罗瑞尔到宝藏, 然后使用<xml><block type="collector_collect"/></xml>模块来捡起它。

        拿到所有四堆宝藏来通过此关卡。
      courseB_collector_loops3: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseB_collector_loops3_2018: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseB_collector_loops3_2019: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseB_collector_loops4_2019: 修复罗瑞尔的路径得到所有这些宝藏！
      courseB_collector_loops5_2019: '添加代码到最后的关卡，得到所有的宝藏。 '
      courseB_collector_loops6_2019: 写出代码, 帮助罗瑞尔得到所有的宝藏!
      courseB_collector_loops7_2019: 编写代码来获取所有这些宝藏。
      courseB_collector_loops8_2019: "\\*\\* 挑战: \\*\\* 宝藏在楼梯最底下! 编写代码来帮助罗瑞尔得到所有宝藏。"
      courseB_collector_loops9_2019: '"帮我从这个深谷里得到宝藏"\*'
      courseB_collector_loops_challenge1_2019: '这次你的模块有限。得到所有的宝藏! '
      courseB_collector_loops_challenge2a: |-
        _”让我们得到宝藏！“_

        帮助罗瑞尔得到至少**5** 片宝藏来完成此关卡。
      courseB_collector_loops_challenge2a_2018: |-
        _”让我们得到宝藏！“_

        帮助罗瑞尔得到至少**5** 片宝藏来完成此关卡。
      courseB_collector_loops_challenge2a_2019: |-
        _”让我们得到宝藏！“_

        帮助罗瑞尔得到至少**5** 片宝藏来完成此关卡。
      courseB_iceage_loops1: 帮助斯奎特穿过溜滑的冰去拿到橡子！
      courseB_iceage_loops10: 帮助斯奎特走过去拿到橡子！
      courseB_iceage_loops10_2019: 帮助斯奎特走过去拿到橡子！
      courseB_iceage_loops11: 帮助斯奎特得到橡子！
      courseB_iceage_loops11_2019: 帮助斯奎特得到橡子！
      courseB_iceage_loops12: 用各种方法来拿到橡子！
      courseB_iceage_loops12_2019: 用各种方法来拿到橡子！
      courseB_iceage_loops1_2019: 帮助斯奎特穿过溜滑的冰去拿到橡子！
      courseB_iceage_loops2: |-
        用 <xml><block type="maze_moveWest"/></xml>
        和 <xml><block type="maze_moveSouth"/></xml> 模块来获得橡子！
      courseB_iceage_loops2_2019: |-
        用 <xml><block type="maze_moveWest"/></xml>
        和 <xml><block type="maze_moveSouth"/></xml> 模块来获得橡子！
      courseB_iceage_loops3: 你能只用一个 <xml><block type="maze_moveWest"/></xml>模块来获得橡子吗？试试用循环！
      courseB_iceage_loops3_2019: 你能只用一个 <xml><block type="maze_moveWest"/></xml>模块来获得橡子吗？试试用循环！
      courseB_iceage_loops4: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseB_iceage_loops4_2019: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseB_iceage_loops6: 你能增加一个循环到达橡子吗？
      courseB_iceage_loops6_2019: 你能增加一个循环到达橡子吗？
      courseB_iceage_loops7: 斯奎特真的想要那个橡子！
      courseB_iceage_loops7_2019: 斯奎特真的想要那个橡子！
      courseB_iceage_loops8: '你能修好这段代码吗？ '
      courseB_iceage_loops8_2019: '你能修好这段代码吗？ '
      courseB_iceage_loops9: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseB_iceage_loops9_2019: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseB_maze_seq10_2019: 修复缺陷，来帮助斯奎特到达橡子。
      courseB_maze_seq11_2019: 都靠你了！让斯奎特得到橡子。
      courseB_maze_seq12_2019: 现在不管用什么办法，抓到那头猪!
      courseB_maze_seq1_2019: "玩一玩这些模块, 看看他们能让斯奎特做什么吧! \n\n把斯奎特送到橡子那里来完成这关。"
      courseB_maze_seq3: _"修复代码来让我到达那只猪！"_
      courseB_maze_seq4_2019: 添加**两个**移动模块, 让斯奎特到达橡子那里。
      courseB_maze_seq5_2019: 这一关有点棘手！
      courseB_maze_seq6_2019: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseB_maze_seq7_2019: 想想这里缺了什么，然后添加模块让鸟到达那只猪那！
      courseB_maze_seq8_2019: 该你了！ 你要怎么做才能把斯奎特送到橡子那里？
      courseB_maze_seq9: "**挑战：**绕开TNT炸药，让鸟到达猪那里。"
      courseB_maze_seq9_2018: "**挑战：**绕开破冰，让斯奎特到达橡子那里。"
      courseB_maze_seq9_2019: "**挑战：**绕开破冰，让斯奎特到达橡子那里。"
      courseB_maze_seq_challenge1: 每种移动模块你只有4个。你能在用完模块前，找到一条路吗？
      courseB_maze_seq_challenge1_2018: 每种移动模块你只有4个。你能在用完模块前，找到一条路吗？
      courseB_maze_seq_challenge1_2019: 每种移动模块你只有4个。你能在用完模块前，找到一条路吗？
      courseB_maze_seq_challenge2_2019: 调试本关卡。这些模块是正确的, 但他们的顺序错了!
      courseB_playLab_events1: |-
        这个游戏叫做"剧本实验室"。

        看看你能否指出每个模块做了什么。
      courseB_playLab_events1_2018: |-
        这个游戏叫做"剧本实验室"。

        看看你能否指出每个模块做了什么。
      courseB_playLab_events1_2019: |-
        这个游戏叫做"剧本实验室"。

        看看你能否指出每个模块做了什么。
      courseB_playlab_events2_2019: 当你点击"运行"时，让黛西龙说点什么。
      courseB_playlab_events3: 当你点击黛西龙时，用事件让她切换到随机的![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)表情。
      courseB_playlab_events3_2018: 当你点击黛西龙时，用事件让她切换到随机的![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)表情。
      courseB_playlab_events3_2019: 当你点击黛西龙时，用事件让她切换到随机的![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)表情。
      courseB_playlab_events4: "骑士时间!  \n\n添加一个事件，当点击左箭头时，让骑士移向龙。"
      courseB_playlab_events4_2018: |-
        骑士时间！到达龙来完成这关。

        添加一个事件，当点击左箭头时，让骑士移向龙。
      courseB_playlab_events4_2019: |-
        骑士时间！到达龙来完成这关。

        添加一个事件，当点击左箭头时，让骑士移向龙。
      courseB_playlab_events5_2018: "现在添加一个事件, 当你按下右方向键时, 让骑士逃离那个龙。  \n\n将骑士向右移动通过这一关。"
      courseB_playlab_events5_2019: "现在添加一个事件, 当你按下右方向键时, 让骑士逃离那个龙。  \n\n将骑士向右移动通过这一关。"
      courseB_playlab_events6: |-
        帮助你的骑士得到所有的旗帜！

        要做到这个，你需要添加事件来帮助骑士上下左右移动。
      courseB_playlab_events6_2018: |-
        帮助你的骑士得到所有的旗帜！

        要做到这个，你需要添加事件来帮助骑士上下左右移动。
      courseB_playlab_events6_2019: |-
        帮助你的骑士得到所有的旗帜！

        要做到这个，你需要添加事件来帮助骑士上下左右移动。
      courseB_playlab_events7: |-
        当骑士在获得旗帜的路上碰到龙时，让他消失。这样会让游戏更有趣！

        当它们碰撞时，播放一个声音，让它感觉起来像真的一样。

        浏览所有的目标，然后撞上龙来通过这关。
      courseB_playlab_events7_2018: |-
        当骑士在获得旗帜的路上碰到龙时，让他消失。这样会让游戏更有趣！

        当它们碰撞时，播放一个声音，让它感觉起来像真的一样。

        浏览所有的目标，然后撞上龙来通过这关。
      courseB_playlab_events7_2019: |-
        当骑士在获得旗帜的路上碰到龙时，让他消失。这样会让游戏更有趣！

        当它们碰撞时，播放一个声音，让它感觉起来像真的一样。

        浏览所有的目标，然后撞上龙来通过这关。
      courseB_playlab_eventsFP_2019: "**自由发挥：** 运用你的想象力。你能做些什么让这个游戏更有趣？"
      courseB_playlab_events_challenge1: |-
        大型的动物比赛的时间到了! 当你按`▼`时, 让动物们往下移动。

        看谁跑得最快？
      courseB_playlab_events_challenge1_2018: |-
        大型的动物比赛的时间到了! 当你按`▼`时, 让动物们往下移动。

        看谁跑得最快？
      courseB_playlab_events_challenge1_2019: |-
        大型的动物比赛的时间到了! 当你按`▼`时, 让动物们往下移动。

        看谁跑得最快？
      courseB_playlab_events_challenge2: |-
        在你点击动物时，让它们消失。
        现在用狗先试试，然后帮助其它动物加入进来。你也可以增加声音和计分来做成一个捉动物的游戏！

        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_playlab_events_challenge2_2018: |-
        在你点击动物时，让它们消失。
        现在用狗先试试，然后帮助其它动物加入进来。你也可以增加声音和计分来做成一个捉动物的游戏！

        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_playlab_events_challenge2_2019: |-
        在你点击动物时，让它们消失。
        现在用狗先试试，然后帮助其它动物加入进来。你也可以增加声音和计分来做成一个捉动物的游戏！

        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_starWars_prog1: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"BB-8，去拿到那块废旧金属！"_

        小心墙和大木箱。像这样的废旧金属：![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog10: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog10_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog10_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog11: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _“继续！”_"
      courseB_starWars_prog11_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _“继续！”_"
      courseB_starWars_prog11_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _“继续！”_"
      courseB_starWars_prog1_2018: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"BB-8，去拿到那块废旧金属！"_

        小心墙和大木箱。像这样的废旧金属：![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog1_2019: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"BB-8，去拿到那块废旧金属！"_

        小心墙和大木箱。像这样的废旧金属：![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog2: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"获得所有金属。"_
      courseB_starWars_prog2_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"获得所有金属。"_
      courseB_starWars_prog2_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"获得所有金属。"_
      courseB_starWars_prog3: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续，BB-8！"_
      courseB_starWars_prog3_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续，BB-8！"_
      courseB_starWars_prog3_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续，BB-8！"_
      courseB_starWars_prog4: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"拿到它，BB-8！"_
      courseB_starWars_prog4_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"拿到它，BB-8！"_
      courseB_starWars_prog4_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"拿到它，BB-8！"_
      courseB_starWars_prog5: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog5_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog5_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog6: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseB_starWars_prog6_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseB_starWars_prog6_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseB_starWars_prog7: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _“去拿到它！”_"
      courseB_starWars_prog7_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _“去拿到它！”_"
      courseB_starWars_prog7_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _“去拿到它！”_"
      courseB_starWars_prog8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_

        **挑战**：收集所有的废旧金属。
      courseB_starWars_prog8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_

        **挑战**：收集所有的废旧金属。
      courseB_starWars_prog8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_

        **挑战**：收集所有的废旧金属。
      courseB_starWars_prog9: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseB_starWars_prog9_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseB_starWars_prog9_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseC19_playLab_EOC1: |-
        你学到的大量知识太令人惊奇了！让我们一步步做个游戏。

        用工具箱里的新模块，选择一个新背景，然后捡起一个演员放到游戏中。
      courseC19_playLab_EOC2: |-
        用事件处理函数和动作这样的模块来让你的玩家根据键盘方向键来移动。

        让玩家到达目标来通过这关。
      courseC19_playLab_EOC3: |-
        让我们添加更多的角色到你的游戏里！

        用`设置演员`模块来增加更多的角色，然后移动到目标来完成这关。
      courseC19_playLab_EOC4: |-
        让好几个角色动起来，是游戏的好的开始，但我们需要增加更多的东西，让它感觉起来是个真游戏。让我们添加分数！

        用`当演员碰到`这样的事件模块来改变分数。得到10分来通关。
      courseC19_playLab_EOC5: 做的好！你有了一个游戏所有基本的部分了。现在花点时间来确保游戏会像你像的那样工作。加入一个胜利或失败的方法，然后玩到触发这些条件。
      courseC19_playLab_EOC6: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      courseC_PlayLab_events6_2019: 现在，写一个程序让企鹅四处移动，使用上/下/左/右键命中所有目标！
      courseC_PlayLab_events7: |-
        `一直重复`模块能让你一遍又一遍的一直运行代码。用这个代码来将恐龙迪诺（演员2）不停的上下移动400像素。

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2018: |-
        `一直重复`模块能让你一遍又一遍的一直运行代码。用这个代码来将恐龙迪诺（演员2）不停的上下移动400像素。

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2019: |-
        `一直重复`模块能让你一遍又一遍的一直运行代码。用这个代码来将恐龙迪诺（演员2）不停的上下移动400像素。

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events8: |-
        如果企鹅跑到了恐龙（演员1）那里，你能让它说"噢！"，并且播放"命中"的声音吗？

        当你写完代码, 请运行这个游戏让它发生.

        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_events8_2018: |-
        如果企鹅跑到了恐龙（演员1）那里，你能让它说"噢！"，并且播放"命中"的声音吗？

        当你写完代码, 请运行这个游戏让它发生.

        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_events8_2019: |-
        如果企鹅跑到了恐龙（演员1）那里，你能让它说"噢！"，并且播放"命中"的声音吗？

        当你写完代码, 请运行这个游戏让它发生.

        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_eventsA_embed_2019: 让我们玩个游戏。当把企鹅挪到章鱼那里时，得到5分。
      courseC_PlayLab_events_challenge1: |-
        用这个新模块，在当企鹅碰到龙或者得分时，让它自动的走回开始的地方。这会让你的游戏更有挑战，更好玩！

        玩游戏，并用方向控制企鹅，直到得到了足够的分数。企鹅必须被移动到屏幕的`左中`的位置来结束这关。
      courseC_PlayLab_events_challenge1_2018: |-
        用这个新模块，在当企鹅碰到龙或者得分时，让它自动的走回开始的地方。这会让你的游戏更有挑战，更好玩！

        玩游戏，并用方向控制企鹅，直到得到了5分或更多分数。企鹅必须被移动到屏幕的`左中`的位置来结束这关。
      courseC_PlayLab_events_challenge1_2019: |-
        用这个新模块，在当企鹅碰到龙或者得分时，让它自动的走回开始的地方。这会让你的游戏更有挑战，更好玩！

        玩游戏，并用方向控制企鹅，直到得到了5分或更多分数。企鹅必须被移动到屏幕的`左中`的位置来结束这关。
      courseC_artist_loop1: |-
        太棒了！

        在开始循环前，让我们用`设置图案`模块来改变刷子的样式。
      courseC_artist_loop1_2018: |-
        "太棒了！"

        在开始循环前，让我们用<xml><block type="draw_line_style_pattern"><title name="VALUE">默认</title></block></xml>模块来添加一些样式。
      courseC_artist_loop1_2019: |-
        "太棒了！"

        在开始循环前，让我们用<xml><block type="draw_line_style_pattern"><title name="VALUE">默认</title></block></xml>模块来添加一些样式。
      courseC_artist_loops1a: |-
        **自由发挥：** 让我们创建一些更大的，一次一步的东西！你能创造任何想要的事物，但先看看如何创造这样的！

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)

        用`往上跳200再下200`来让小艺术家到达游戏区域中心，然后用`画一个贴画`模块来让一只鸟出现。

        * * *

        当你对做的结果满意时，点击"完成"。
      courseC_artist_loops1a_2018: |-
        **自由发挥：** 让我们创建一些更大的，一次一步的东西！

        用`往上跳200再下200`来让小艺术家到达游戏区域中心，然后用`画一个贴画`模块来让一只鸟出现。

        * * *

        当你对做的结果满意时，点击"完成"。
      courseC_artist_loops1a_2019: |-
        **自由发挥：** 让我们创建一些更大的，一次一步的东西！

        用`往上跳200再下200`来让小艺术家到达游戏区域中心，然后用`画一个贴画`模块来让一只鸟出现。

        * * *

        当你对做的结果满意时，点击"完成"。
      courseC_artist_loops1b_2019: "在代码中用“旋转/turn”命令，修改你的贴纸的朝向。 \n\n* * *\n\n当你对你的作品满意是，点击\"完成/Finish\"\n\n![expandable](https://images.code.org/30fe9d37758abd27055d9a6e5a890680-image-1553097358155.png)\n![expandable](https://images.code.org/61feed00662019b99ac774322231f084-image-1553097362176.png)\n![expandable](https://images.code.org/fd123bb703ea4c630218a12eb5994053-image-1553097354066.png)"
      courseC_artist_loops2a: 现在, 用一个循环旋转你的鸟大约12次, 每次转30度。
      courseC_artist_loops2a_2018: 现在, 用一个循环旋转你的鸟大约12次, 每次转30度。
      courseC_artist_loops2a_2019: 现在, 用一个循环旋转你的鸟大约12次, 每次转30度。
      courseC_artist_loops3a: "太有趣了！ \n\n现在，在鸟的右后方加一个蝙蝠贴纸，来做一张像底下一样的图片。\n\n* * *\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops3a_2018: "太有趣了！ \n\n现在，在鸟的右后方加一个蝙蝠贴纸，来做一张像底下一样的图片。\n\n*
        * *\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops3a_2019: "太有趣了！ \n\n现在，在鸟的右后方加一个蝙蝠贴纸，来做一张像底下一样的图片。\n\n*
        * *\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops4a: |-
        添加一个魔窟开到代码中，以便你在标记鸟和蝙蝠之间向前跳跃75个像素。在这个关卡中，确保在你的循环内有个`跳到200超过200下来`, 这样你可以留在中心！

        * * *

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2018: |-
        编辑代码，以便你在标记鸟和蝙蝠之间向前跳跃75个像素。在这个关卡中，确保在你的循环内有个`跳到200超过200下来`, 这样你可以留在中心。

        * * *

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2019: |-
        编辑代码，以便你在标记鸟和蝙蝠之间向前跳跃75个像素。在这个关卡中，确保在你的循环内有个`跳到200超过200下来`, 这样你可以留在中心。

        * * *

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops5a: |-
        当你用不同的生物替换一个或两个标签时会发生什么？

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5a_2018: |-
        当你用不同的生物替换一个或两个标签时会发生什么？

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5a_2019: |-
        当你用不同的生物替换一个或两个标签时会发生什么？

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5b: "当你在循环内`向前移动`，然后`向后移动`100，200，或400 像素会发生什么？ \n\n-   在开始循环之前,
        请尝试使用`设置图案`模块来制作艺术作品。\n    * * *\n    ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops5b_2018: "当你在循环内`向前移动`，然后`向后移动`100，200，或400 像素会发生什么？ \n\n-
        \  在开始循环之前, 请尝试使用`设置图案`模块来制作艺术作品。\n    * * *\n    ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops5b_2019: "当你在循环内`向前移动`，然后`向后移动`100，200，或400 像素会发生什么？ \n\n-
        \  在开始循环之前, 请尝试使用`设置图案`模块来制作艺术作品。\n    * * *\n    ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops6a: |-
        在你想要的循环中的任意位置添加第三个标签！现在它看起来像什么？

        -   更改画笔上的图案以进行更多的变化！

        * * *

        ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops6a_2018: |-
        在你想要的循环中的任意位置添加第三个标签！现在它看起来像什么？

        -   更改画笔上的图案以进行更多的变化！

        * * *

        ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops6a_2019: |-
        在循环中的任意你想要的地方，再增加一个贴纸！ 现在看起来怎么样？

        -   修改你笔刷中的图案，创造更多变化！

        * * *

        ![expandable](https://images.code.org/edc53f27379e018e61a6ab9dcc2717ea-image-1560984648573.png)
        ![expandable](https://images.code.org/c41b00a743f245f98d2cfb66cb18e771-image-1560984690182.png)
        ![expandable](https://images.code.org/4c8910f72a7f0cd81713ded7b866a883-image-1560984706203.png)
      courseC_artist_loops7a: "尝试更改`重复`循环以运行不同的次数。 你在一个完整的圆圈内要转多远才能绕完一圈？\n\n-   试着改变你旋转的次数。
        \n-   尝试转弯6次，每次60度\n-   尝试转18次，每次20度\n    * * *\n    这张图片使用的是海盗，忍者和长颈鹿。他们循环了18次，每次转弯20度。\n\n![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)"
      courseC_artist_loops7a_2018: "尝试更改`重复`循环以运行不同的次数。 你在一个完整的圆圈内要转多远才能绕完一圈？\n\n-
        \  试着改变你旋转的次数。 \n-   尝试转弯6次，每次60度\n-   尝试转18次，每次20度\n    * * *\n    这张图片使用的是海盗，忍者和长颈鹿。他们循环了18次，每次转弯20度。\n\n![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)"
      courseC_artist_loops7a_2019: |-
        尝试修改“重复/repeat” 循环的数字。 为了沿着圆形移动，你需要转多少角度？

        -   尝试修改，转向的次数
            -   试下60度，转6次
            -   试下20度，转18次

        * * *

        第一个图像使用了一个海盗，一个忍者，一个长颈鹿。他们循环18次，每次转动20度。

        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
        ![expandable](https://images.code.org/9f28cb9b434b914846c3846bc6652f66-image-1560982666379.png)
        ![expandable](https://images.code.org/e9128684956504b0172708d63b65f93a-image-1560982686482.png)
        ![expandable](https://images.code.org/8e9cf52ecaf72678c65558f18f3e0d3e-image-1560982695632.png)
      courseC_artist_loops8a: "现在自己做点什么吧。当你制作两个不同的贴纸圈时会发生什么？ \n\n* * *\n\n需要一个点子吗？试着做一个像这样的设计。\n\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loops8a_2018: "现在自己做点什么吧。当你制作两个不同的贴纸圈时会发生什么？ \n\n* * *\n\n需要一个点子吗？试着做一个像这样的设计。\n\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loops8a_2019: "现在自己做点什么吧。当你制作两个不同的贴纸圈时会发生什么？ \n\n* * *\n\n需要一个点子吗？试着做一个像这样的设计。\n\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loopsPre1a: |-
        现在, 将此代码放入一个`重复`模块中, 并循环**6**次。

        -   请注意，我们在循环代码的末尾添加了一个60度的转弯，以获得完整的旋转。
      courseC_artist_loopsPre1a_2018: |-
        现在, 将此代码放入一个`重复`模块中, 并循环**6**次。

        -   请注意，我们在循环代码的末尾添加了一个60度的转弯，以获得完整的旋转。
      courseC_artist_loopsPre1a_2019: |-
        现在, 将此代码放入一个`重复`模块中, 并循环**6**次。

        -   请注意，我们在循环代码的末尾添加了一个60度的转弯，以获得完整的旋转。
      courseC_artist_loopsPrePre1a: |-
        使用<xml><block type="jump_to_xy"
        id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml>
        模块把艺术家带到游戏区的中心。
        然后用 <xml><block type="draw_move_by_constant"><title
        name="DIR">向前移动</title><title name="VALUE">50</title></block></xml>
        模块来画一条50 像素的线。
      courseC_artist_loopsPrePre1a_2018: "### 艺术家在错误的点上！\n\n使用<xml><block type=\"jump_to_xy\"
        id=\"callMe\"><title name=\"XPOS\">200</title><title name=\"YPOS\">200</title></block></xml>模块把艺术家带到游戏区的中心。
        \n然后用 <xml><block type=\"draw_move_by_constant\"><title\nname=\"DIR\">向前移动</title><title
        name=\"VALUE\">50</title></block></xml>\n模块来画一条50 像素的线。"
      courseC_artist_loopsPrePre1a_2019: "### 艺术家在错误的点上！\n\n使用<xml><block type=\"jump_to_xy\"
        id=\"callMe\"><title name=\"XPOS\">200</title><title name=\"YPOS\">200</title></block></xml>模块把艺术家带到游戏区的中心。
        \n然后用 <xml><block type=\"draw_move_by_constant\"><title\nname=\"DIR\">向前移动</title><title
        name=\"VALUE\">50</title></block></xml>\n模块来画一条50 像素的线。"
      courseC_artist_prog1: "_\"嗨, 我是个艺术家。你可以编写代码来让我画几乎任何东西。“_ \n\n摆弄工具箱中的模块看看它们是做什么的！"
      courseC_artist_prog1_2018: "_\"嗨, 我是个艺术家。你可以编写代码来让我画几乎任何东西。“_ \n\n摆弄工具箱中的模块看看它们是做什么的！"
      courseC_artist_prog1_2019: "_\"嗨, 我是个艺术家。你可以编写代码来让我画几乎任何东西。“_ \n\n摆弄工具箱中的模块看看它们是做什么的！"
      courseC_artist_prog2: "-   \"让我们为我的宠物怪兽做一个笼子!\"\\* \n\n将模块拖到屏幕上, 让艺术家在图片中的灰色线条上绘画。
        \n(每行100像素长)"
      courseC_artist_prog2_2018: "-   \"让我们为我的宠物怪兽做一个笼子!\"\\* \n\n将模块拖到屏幕上, 让艺术家在图片中的灰色线条上绘画。
        \n(每行100像素长)"
      courseC_artist_prog2_2019: "-   \"让我们为我的宠物怪兽做一个笼子!\"\\* \n\n将模块拖到屏幕上, 让艺术家在图片中的灰色线条上绘画。
        \n(每行100像素长)"
      courseC_artist_prog3: "_\"这艘宇宙飞船需要一扇窗户!\"_ \n\n正方形内的每条边是100像素，所有的角度都是90度。"
      courseC_artist_prog3_2018: "_\"这艘宇宙飞船需要一扇窗户!\"_ \n\n正方形内的每条边是100像素，所有的角度都是90度。"
      courseC_artist_prog3_2019: "_\"这艘宇宙飞船需要一扇窗户!\"_ \n\n正方形内的每条边是100像素，所有的角度都是90度。"
      courseC_artist_prog4: "_\"哦，不! 斯黛拉的宠物外星人刚刚飞走了! 让我们帮助女宇航员！”_\n\n完成斯黛拉的火箭，这样她就可以追逐她的宠物。
        \n(三角形的每一边都是100像素长, 有120度的外角。)"
      courseC_artist_prog4_2018: "_\"哦，不! 斯黛拉的宠物外星人刚刚飞走了! 让我们帮助女宇航员！”_\n\n完成斯黛拉的火箭，这样她就可以追逐她的宠物。
        \n(三角形的每一边都是100像素长, 有120度的外角。)"
      courseC_artist_prog4_2019: "_\"哦，不! 斯黛拉的宠物外星人刚刚飞走了! 让我们帮助女宇航员！”_\n\n完成斯黛拉的火箭，这样她就可以追逐她的宠物。
        \n(三角形的每一边都是100像素长, 有120度的外角。)"
      courseC_artist_prog5: "_\"也许我们应该为我们的每个宠物做一个标签, 以防他们走丢了!\"_ \n\n在外部绘制长方形来完成此标签。
        \n(长边分别为200像素, 短边每个都是100像素)"
      courseC_artist_prog5_2018: "_\"也许我们应该为我们的每个宠物做一个标签, 以防他们走丢了!\"_ \n\n在外部绘制长方形来完成此标签。
        \n(长边分别为200像素, 短边每个都是100像素)"
      courseC_artist_prog5_2019: "_\"也许我们应该为我们的每个宠物做一个标签, 以防他们走丢了!\"_ \n\n在外部绘制长方形来完成此标签。
        \n(长边分别为200像素, 短边每个都是100像素)"
      courseC_artist_prog6: "_\"现在为贝儿做一个标签!“_ \n\n绘制200像素边长的菱形。"
      courseC_artist_prog6_2018: "_\"现在为贝儿做一个标签!“_ \n\n绘制200像素边长的菱形。"
      courseC_artist_prog6_2019: "_\"现在为贝儿做一个标签!“_ \n\n绘制200像素边长的菱形。"
      courseC_artist_prog7: "\\*\\* 挑战: \\*\\* 这个标签是特别的一个！\n\n你能想出怎么画外框吗？ \n(长边是150像素,
        每个短边都是75像素。）"
      courseC_artist_prog7_2018: "\\*\\* 挑战: \\*\\* 这个标签是特别的一个！\n\n你能想出怎么画外框吗？ \n(长边是150像素,
        每个短边都是75像素。）"
      courseC_artist_prog7_2019: "\\*\\* 挑战: \\*\\* 这个标签是特别的一个！\n\n你能想出怎么画外框吗？ \n(长边是150像素,
        每个短边都是75像素。）"
      courseC_artist_prog8: "再来一个标签。这是圆周率的一个三角形。 \n(每边为150像素)"
      courseC_artist_prog8_2018: "再来一个标签。这是圆周率的一个三角形。 \n(每边为150像素)"
      courseC_artist_prog8_2019: "再来一个标签。这是圆周率的一个三角形。 \n(每边为150像素)"
      courseC_artist_prog_challenge1: 为每一个动物绘制房间。有许多不同的方法来通过这个关卡, 所以让我们有一些乐趣！每个正方形的边长为100个像素。
      courseC_artist_prog_challenge1_2018: 为每一个动物绘制房间。有许多不同的方法来通过这个关卡, 所以让我们有一些乐趣！每个正方形的边长为100个像素。
      courseC_artist_prog_challenge1_2019: 为每一个动物绘制房间。有许多不同的方法来通过这个关卡, 所以让我们有一些乐趣！每个正方形的边长为100个像素。
      courseC_artist_prog_challenge2a: |-
        _"帮我在这条路上画黄线!"_

        三条线段的长度为150、100和200像素！
      courseC_artist_prog_challenge2a_2018: |-
        _"帮我在这条路上画黄线!"_

        三条线段的长度为150、100和200像素！
      courseC_artist_prog_challenge2a_2019: |-
        _"帮我在这条路上画黄线!"_

        三条线段的长度为150、100和200像素！
      courseC_collector_loops_challenge2: "-   \"让我们寻宝吧!\"\\* \n\n帮助收集者至少得到 \\*\\*
        5 \\*\\*件宝物。"
      courseC_collector_loops_challenge2_2018: "-   \"让我们寻宝吧!\"\\* \n\n帮助收集者至少得到 \\*\\*
        5 \\*\\*件宝物。"
      courseC_collector_loops_challenge2_2019: "-   \"让我们寻宝吧!\"\\* \n\n帮助收集者至少得到 \\*\\*
        5 \\*\\*件宝物。"
      courseC_collector_prog1: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。使用`收集`模块来捡起宝藏！

        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种宝物来通过此关卡。
      courseC_collector_prog1_2018: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。使用`收集`模块来捡起宝藏！

        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种宝物来通过此关卡。
      courseC_collector_prog1_2019: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。使用`收集`模块来捡起宝藏！

        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种宝物来通过此关卡。
      courseC_collector_prog2: 把罗瑞尔移到宝藏那里，然后使用 <xml><block type="collector_collect"/></xml>
        把它捡起来。
      courseC_collector_prog2_2018: 把罗瑞尔移到宝藏那里，然后使用 <xml><block type="collector_collect"/></xml>
        把它捡起来。
      courseC_collector_prog2_2019: 把罗瑞尔移到宝藏那里，然后使用 <xml><block type="collector_collect"/></xml>
        把它捡起来。
      courseC_collector_prog3: |-
        _"顺序很重要！"_

        你需要的模块已经在工作区了，但还没有连起来。

        命令这些模块来收集所有的宝藏并通过此关。
      courseC_collector_prog3_2018: |-
        _"顺序很重要！"_

        你需要的模块已经在工作区了，但还没有连起来。

        命令这些模块来收集所有的宝藏并通过此关。
      courseC_collector_prog3_2019: |-
        _"顺序很重要！"_

        你需要的模块已经在工作区了，但还没有连起来。

        命令这些模块来收集所有的宝藏并通过此关。
      courseC_collector_prog4: |-
        _"顺序很重要！"_

        你需要的模块已经在工作区了，但还没有连起来。

        将这些模块按顺序连接起来，来收集所有的宝藏并通过这关。
      courseC_collector_prog4_2018: |-
        _"顺序很重要！"_

        你需要的模块已经在工作区了，但还没有连起来。

        将这些模块按顺序连接起来，来收集所有的宝藏并通过这关。
      courseC_collector_prog4_2019: |-
        _"顺序很重要！"_

        你需要的模块已经在工作区了，但还没有连起来。

        将这些模块按顺序连接起来，来收集所有的宝藏并通过这关。
      courseC_collector_prog5: |-
        _"帮我收集每个宝藏！"_

        这些模块的顺序错了。你能修好它们吗？
      courseC_collector_prog5_2018: |-
        _"帮我收集每个宝藏！"_

        这些模块的顺序错了。你能修好它们吗？
      courseC_collector_prog5_2019: |-
        _"帮我收集每个宝藏！"_

        这些模块的顺序错了。你能修好它们吗？
      courseC_collector_prog6: |-
        \*"帮我收集所有的宝藏！"

        这些模块的顺序错了。重新排列它们来收集所有的宝藏。
      courseC_collector_prog6_2018: |-
        \*"帮我收集所有的宝藏！"

        这些模块的顺序错了。重新排列它们来收集所有的宝藏。
      courseC_collector_prog6_2019: |-
        \*"帮我收集所有的宝藏！"

        这些模块的顺序错了。重新排列它们来收集所有的宝藏。
      courseC_collector_prog7: |-
        **挑战：** _这里怎么了？”_

        即使我们将顺序都排好了，还有一些东西缺失。
        使用工具箱中的模块来收集所有的宝藏。
      courseC_collector_prog7_2018: |-
        **挑战：** _这里怎么了？”_

        即使我们将顺序都排好了，还有一些东西缺失。
        使用工具箱中的模块来收集所有的宝藏。
      courseC_collector_prog7_2019: |-
        **挑战：** _这里怎么了？”_

        即使我们将顺序都排好了，还有一些东西缺失。
        使用工具箱中的模块来收集所有的宝藏。
      courseC_collector_prog8: _"继续保持良好的工作! 帮我收集所有的宝藏。“_
      courseC_collector_prog8_2018: _"继续保持良好的工作! 帮我收集所有的宝藏。“_
      courseC_collector_prog8_2019: _"继续保持良好的工作! 帮我收集所有的宝藏。“_
      courseC_collector_prog9: _"让我们得到所有的宝藏!_
      courseC_collector_prog9_2018: _"让我们得到所有的宝藏!_
      courseC_collector_prog9_2019: _"让我们得到所有的宝藏!_
      courseC_collector_prog_challenge2: 在此洞穴中有20件宝藏。收集至少**10** 来完成这一挑战！
      courseC_collector_prog_challenge2_2018: 在此洞穴中有20件宝藏。收集至少**10** 来完成这一挑战！
      courseC_collector_prog_challenge2_2019: 在此洞穴中有20件宝藏。收集至少**10** 来完成这一挑战！
      courseC_data wizard: 点击运行/run。 向导会让动物们出现。数一下，你发现了几个？
      courseC_flappy_events1: |-
        将`拍打正常数量`模块附加到`当点击时`事件, 然后按 "运行"。

        * * *

        单击或点击播放空间，将像素鸟移动到目标处。
      courseC_flappy_events10: |-
        创建你自己的像素鸟游戏！

        你可以改变视觉和规则... 甚至重力！
        当你完成后, 点击 "完成" 分享到朋友们的手机上。
      courseC_flappy_events10_2018: |-
        创建你自己的像素鸟游戏！

        你可以改变视觉和规则... 甚至重力！
        当你完成后, 点击 "完成" 分享到朋友们的手机上。
      courseC_flappy_events10_2019: |-
        创建你自己的像素鸟游戏！

        你可以改变视觉和规则... 甚至重力！
        当你完成后, 点击 "完成" 分享到朋友们的手机上。
      courseC_flappy_events1_2018: |-
        将`拍打正常数量`模块附加到`当点击时`事件, 然后按 "运行"。

        * * *

        单击或点击播放空间，将像素鸟移动到目标处。
      courseC_flappy_events1_2019: |-
        将`拍打正常数量`模块附加到`当点击时`事件, 然后按 "运行"。

        * * *

        单击或点击播放空间，将像素鸟移动到目标处。
      courseC_flappy_events2: "`当运行时`事件允许你在游戏启动后立即运行代码。 \n\n尝试添加在按下 \"运行\" 按钮时设置级别速度的模块。\n\n*
        * *\n\n播放游戏并拍打目标继续。"
      courseC_flappy_events2_2018: "`当运行时`事件允许你在游戏启动后立即运行代码。 \n\n尝试添加在按下 \"运行\" 按钮时设置级别速度的模块。\n\n*
        * *\n\n播放游戏并拍打目标继续。"
      courseC_flappy_events2_2019: "`当运行时`事件允许你在游戏启动后立即运行代码。 \n\n尝试添加在按下 \"运行\" 按钮时设置级别速度的模块。\n\n*
        * *\n\n播放游戏并拍打目标继续。"
      courseC_flappy_events3: |-
        现在我们已经增加了地面。

        将`结束游戏`模块附加到`当命中地面`事件时。

        * * *

        玩游戏, 把鸟撞向地面继续。
      courseC_flappy_events3_2018: |-
        现在我们已经增加了地面。

        将`结束游戏`模块附加到`当命中地面`事件时。

        * * *

        玩游戏, 把鸟撞向地面继续。
      courseC_flappy_events3_2019: |-
        现在我们已经增加了地面。

        将`结束游戏`模块附加到`当命中地面`事件时。

        * * *

        玩游戏, 把鸟撞向地面继续。
      courseC_flappy_events4: |-
        像素鸟会飞过障碍，除非你写代码来让它能撞上。

        附加一个模块到`当碰到障碍时`时间，在像素鸟碰到第一个管道时，让游戏结束。
      courseC_flappy_events4_2018: |-
        像素鸟会飞过障碍，除非你写代码来让它能撞上。

        附加一个模块到`当碰到障碍时`时间，在像素鸟碰到第一个管道时，让游戏结束。
      courseC_flappy_events4_2019: |-
        像素鸟会飞过障碍，除非你写代码来让它能撞上。

        附加一个模块到`当碰到障碍时`时间，在像素鸟碰到第一个管道时，让游戏结束。
      courseC_flappy_events5: |-
        我们已经增加了分数板来统计像素鸟通过的障碍数。

        增加一个模块到`当通过了一个障碍`时间来得一分，然后点击"运行"让它飞过第一组管道。
      courseC_flappy_events5_2018: |-
        我们已经增加了分数板来统计像素鸟通过的障碍数。

        增加一个模块到`当通过了一个障碍`时间来得一分，然后点击"运行"让它飞过第一组管道。
      courseC_flappy_events5_2019: |-
        我们已经增加了分数板来统计像素鸟通过的障碍数。

        增加一个模块到`当通过了一个障碍`时间来得一分，然后点击"运行"让它飞过第一组管道。
      courseC_flappy_events6: |-
        点击`拍打正常数量`模块中的下箭头，来选择一个不同的拍打力量。

        看看把像素鸟的拍打每次改小或改大后，你还能否一直得分。
      courseC_flappy_events6_2018: |-
        点击`拍打正常数量`模块中的下箭头，来选择一个不同的拍打力量。

        看看把像素鸟的拍打每次改小或改大后，你还能否一直得分。
      courseC_flappy_events6_2019: |-
        点击`拍打正常数量`模块中的下箭头，来选择一个不同的拍打力量。

        看看把像素鸟的拍打每次改小或改大后，你还能否一直得分。
      courseC_flappy_events7: 接下来, 尝试通过将一个模块附加到 "运行时" 事件来更改场景。
      courseC_flappy_events7_2018: 接下来, 尝试通过将一个模块附加到 "运行时" 事件来更改场景。
      courseC_flappy_events7_2019: 接下来, 尝试通过将一个模块附加到 "运行时" 事件来更改场景。
      courseC_flappy_events8: |-
        不只在游戏开始时，你能在任何事件下设置背景。

        试着当其它时间发生时，设置一个**随机**的场景...例如，当通过一个障碍。
      courseC_flappy_events8_2018: |-
        不只在游戏开始时，你能在任何事件下设置背景。

        试着当其它时间发生时，设置一个**随机**的场景...例如，当通过一个障碍。
      courseC_flappy_events8_2019: |-
        不只在游戏开始时，你能在任何事件下设置背景。

        试着当其它时间发生时，设置一个**随机**的场景...例如，当通过一个障碍。
      courseC_flappy_events9: 把事情混合起来, 在像素鸟击倒障碍物的时候不是让游戏停止，试着把分数归零。
      courseC_flappy_events9_2018: 把事情混合起来, 在像素鸟击倒障碍物的时候不是让游戏停止，试着把分数归零。
      courseC_flappy_events9_2019: 把事情混合起来, 在像素鸟击倒障碍物的时候不是让游戏停止，试着把分数归零。
      courseC_harvester_loops1: |-
        循环不仅能重复移动。

        用循环来收集所有4个南瓜。
      courseC_harvester_loops10: 收集所有玉米和南瓜。
      courseC_harvester_loops10_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops10_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops11: 收集所有玉米和南瓜。
      courseC_harvester_loops11_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops11_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops1_2018: |-
        循环不仅能重复移动。

        用循环来收集所有4个南瓜。
      courseC_harvester_loops1_2019: |-
        循环不仅能重复移动。

        用循环来收集所有4个南瓜。
      courseC_harvester_loops2: 你能混合两个不同的循环来朝着南瓜移动，并收集它们吗？
      courseC_harvester_loops2_2018: 你能混合两个不同的循环来朝着南瓜移动，并收集它们吗？
      courseC_harvester_loops2_2019: 你能混合两个不同的循环来朝着南瓜移动，并收集它们吗？
      courseC_harvester_loops3: 收集所有南瓜。
      courseC_harvester_loops3_2018: 收集所有南瓜。
      courseC_harvester_loops3_2019: 收集所有南瓜。
      courseC_harvester_loops4: |-
        现在，也有玉米在生长了！

        收集所有的玉米和南瓜。
      courseC_harvester_loops4_2018: |-
        现在，也有玉米在生长了！

        收集所有的玉米和南瓜。
      courseC_harvester_loops4_2019: |-
        现在，也有玉米在生长了！

        收集所有的玉米和南瓜。
      courseC_harvester_loops5: 收集所有玉米和南瓜。
      courseC_harvester_loops5_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops5_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops6: 收集所有玉米和南瓜。
      courseC_harvester_loops6_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops6_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops7: 收集所有玉米和南瓜。
      courseC_harvester_loops7_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops7_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops8: |-
        **挑战：**收集所有的玉米和南瓜。

        你可以用任何方法完成这个挑战，但要么会做很多工作，要么多思考一下！
      courseC_harvester_loops8_2018: |-
        **挑战：**收集所有的玉米和南瓜。

        你可以用任何方法完成这个挑战，但要么会做很多工作，要么多思考一下！
      courseC_harvester_loops8_2019: |-
        **挑战：**收集所有的玉米和南瓜。

        你可以用任何方法完成这个挑战，但要么会做很多工作，要么多思考一下！
      courseC_harvester_loops9: 收集所有玉米和南瓜。
      courseC_harvester_loops9_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops9_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops_challenge2: 收集所有的莴苣。避开树木和田野!
      courseC_harvester_loops_challenge2_2018: 收集所有的莴苣。避开树木和田野!
      courseC_harvester_loops_challenge2_2019: 收集所有的莴苣。避开树木和田野!
      courseC_maze_debugging1: |-
        这个代码不太正确！

        修复代码来帮助斯奎特获得橡子。
      courseC_maze_debugging1_2018: |-
        这个代码不太正确！

        修复代码来帮助斯奎特获得橡子。
      courseC_maze_debugging1_2019: |-
        这个代码不太正确！

        修复代码来帮助斯奎特获得橡子。
      courseC_maze_debugging3: |-
        有些事情不大对。

        移除模块来让斯奎特到达橡子！
      courseC_maze_debugging3_2018: |-
        有些事情不大对。

        移除模块来让斯奎特到达橡子！
      courseC_maze_debugging3_2019: |-
        有些事情不大对。

        移除模块来让斯奎特到达橡子！
      courseC_maze_debugging_challenge2: 如果斯奎特转得太频繁，他可能会头晕！只用4个`转向`命令来帮它拿到橡子。
      courseC_maze_debugging_challenge2_2018: 如果斯奎特转得太频繁，他可能会头晕！只用4个`转向`命令来帮它拿到橡子。
      courseC_maze_debugging_challenge2_2019: 如果斯奎特转得太频繁，他可能会头晕！只用4个`转向`命令来帮它拿到橡子。
      courseC_maze_programming1: 对于这个关卡，把所有的方块拖在一起，并点击 "运行" 开始!
      courseC_maze_programming1_2018: 对于这个关卡，把所有的方块拖在一起，并点击 "运行" 开始!
      courseC_maze_programming1_2019: 对于这个关卡，把所有的方块拖在一起，并点击 "运行" 开始!
      courseC_maze_programming2: |-
        从工具箱中拖出一个额外的<xml><block
        type="maze_moveForward"/></xml>模块来完成你的代码。
      courseC_maze_programming2_2018: |-
        从工具箱中拖出一个额外的<xml><block
        type="maze_moveForward"/></xml>模块来完成你的代码。
      courseC_maze_programming2_2019: |-
        从工具箱中拖出一个额外的<xml><block
        type="maze_moveForward"/></xml>模块来完成你的代码。
      courseC_maze_programming3: |-
        _"这只猪把我的羽毛弄皱了。"_

        这里有一个额外的模块会让小鸟坠落。
        将它从灰色的模块中取下，并拖回工具箱来扔掉。
      courseC_maze_programming3_2018: |-
        _"这只猪把我的羽毛弄皱了。"_

        这里有一个额外的模块会让小鸟坠落。
        将它从灰色的模块中取下，并拖回工具箱来扔掉。
      courseC_maze_programming3_2019: |-
        _"这只猪把我的羽毛弄皱了。"_

        这里有一个额外的模块会让小鸟坠落。
        将它从灰色的模块中取下，并拖回工具箱来扔掉。
      courseC_maze_programming4: |-
        _"沿着这条路带我去找那只笨猪。"_

        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseC_maze_programming4_2018: |-
        _"沿着这条路带我去找那只笨猪。"_

        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseC_maze_programming4_2019: |-
        _"沿着这条路带我去找那只笨猪。"_

        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseC_maze_programming5: |-
        _"沿着这条路，让我到猪那里！"_

        躲开TNT炸药。
      courseC_maze_programming5_2018: |-
        _"沿着这条路，让我到猪那里！"_

        躲开TNT炸药。
      courseC_maze_programming5_2019: |-
        _"沿着这条路，让我到猪那里！"_

        躲开TNT炸药。
      courseC_maze_programming6: |-
        _"保持冷静，帮我找到那只坏猪。否则，我会生气的！"_

        让小鸟到达坏猪，还要躲开TNT炸药。
      courseC_maze_programming6_2018: |-
        _"保持冷静，帮我找到那只坏猪。否则，我会生气的！"_

        让小鸟到达坏猪，还要躲开TNT炸药。
      courseC_maze_programming6_2019: |-
        _"保持冷静，帮我找到那只坏猪。否则，我会生气的！"_

        让小鸟到达坏猪，还要躲开TNT炸药。
      courseC_maze_programming7: |-
        _"该生气了！"_

        **挑战：**
        这个代码有很多缺陷。你需要移除一些模块，并加上一些。
      courseC_maze_programming7_2018: |-
        _"该生气了！"_

        **挑战：**
        这个代码有很多缺陷。你需要移除一些模块，并加上一些。
      courseC_maze_programming7_2019: |-
        _"该生气了！"_

        **挑战：**
        这个代码有很多缺陷。你需要移除一些模块，并加上一些。
      courseC_maze_programming8: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming8_2018: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming8_2019: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming8_predict1: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming8_predict1_2018: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming8_predict1_2019: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming9: _"现在，用任何方法让我偷偷到达猪那里！"_
      courseC_maze_programming9_2018: _"现在，用任何方法让我偷偷到达猪那里！"_
      courseC_maze_programming9_2019: _"现在，用任何方法让我偷偷到达猪那里！"_
      courseC_maze_programming_challenge1: '小鸟需要你的帮助！猪躲起来了，目标是找到它。 '
      courseC_maze_programming_challenge1_2018: '小鸟需要你的帮助！猪躲起来了，目标是找到它。 '
      courseC_maze_programming_challenge1_2019: '小鸟需要你的帮助！猪躲起来了，目标是找到它。 '
      courseC_maze_programming_challenge2: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      courseC_maze_programming_challenge2_2018: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      courseC_maze_programming_challenge2_2019: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      courseC_starWars_loops1: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"BB-8，去拿到那块废金属！\"_
        \n\n用5个一样的模块来拿到废金属。废金属长这样：![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops10: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)

        _"BB-8，去吧！"_

        你能做的很好！坚持下去！
      courseC_starWars_loops10_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)

        _"BB-8，去吧！"_

        你能做的很好！坚持下去！
      courseC_starWars_loops10_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)

        _"BB-8，去吧！"_

        你能做的很好！坚持下去！
      courseC_starWars_loops11: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，继续！"_

        快要成功了！这次选择你喜欢的路！
      courseC_starWars_loops11_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，继续！"_

        快要成功了！这次选择你喜欢的路！
      courseC_starWars_loops11_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，继续！"_

        快要成功了！这次选择你喜欢的路！
      courseC_starWars_loops1_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"BB-8，去拿到那块废金属！\"_
        \n\n用5个一样的模块来拿到废金属。废金属长这样：![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops1_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"BB-8，去拿到那块废金属！\"_
        \n\n用5个一样的模块来拿到废金属。废金属长这样：![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops2: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，上!"_

        为了得到所有废金属，试着用`重复`模块创建一个循环，里面只放一个模块。
      courseC_starWars_loops2_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，上!"_

        为了得到所有废金属，试着用`重复`模块创建一个循环，里面只放一个模块。
      courseC_starWars_loops2_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，上!"_

        为了得到所有废金属，试着用`重复`模块创建一个循环，里面只放一个模块。
      courseC_starWars_loops4: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持下去。"_

        在这一关，两个`重复`循环会帮你用最少的模块帮助BB-8收集到所有的废金属！
      courseC_starWars_loops4_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持下去。"_

        在这一关，两个`重复`循环会帮你用最少的模块帮助BB-8收集到所有的废金属！
      courseC_starWars_loops4_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持下去。"_

        在这一关，两个`重复`循环会帮你用最少的模块帮助BB-8收集到所有的废金属！
      courseC_starWars_loops5: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _“BB-8，上！”_"
      courseC_starWars_loops5_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _“BB-8，上！”_"
      courseC_starWars_loops5_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _“BB-8，上！”_"
      courseC_starWars_loops6: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_

        循环里面能放多个模块！你能循环这个序列吗？
      courseC_starWars_loops6_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_

        循环里面能放多个模块！你能循环这个序列吗？
      courseC_starWars_loops6_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_

        循环里面能放多个模块！你能循环这个序列吗？
      courseC_starWars_loops7: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_

        你能只用一个循环来收集所有的废金属吗？先试着完全写出代码，然后再找到重复的代码，并放到一个循环里。
      courseC_starWars_loops7_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_

        你能只用一个循环来收集所有的废金属吗？先试着完全写出代码，然后再找到重复的代码，并放到一个循环里。
      courseC_starWars_loops7_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_

        你能只用一个循环来收集所有的废金属吗？先试着完全写出代码，然后再找到重复的代码，并放到一个循环里。
      courseC_starWars_loops8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_

        **挑战**：结合前几关的主意来完成这一关。
      courseC_starWars_loops8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_

        **挑战**：结合前几关的主意来完成这一关。
      courseC_starWars_loops8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_

        **挑战**：结合前几关的主意来完成这一关。
      courseC_starWars_loops9: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续！"_

        用你学过的知识来捡起所有的废金属！
      courseC_starWars_loops9_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续！"_

        用你学过的知识来捡起所有的废金属！
      courseC_starWars_loops9_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续！"_

        用你学过的知识来捡起所有的废金属！
      courseD_artist_1_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“嗨，我是阿伦达尔的爱莎，帮我画个图形吧。”_\n\n画一个边长50像素的六边形。
        \ \n\n* * *\n\n要画这个六边形，你需要： \n\n-   向前移动**50**像素\n-   向右转**60**度\n-   \\-\n
        \   一共重复**6**次"
      courseD_artist_1_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“嗨，我是阿伦达尔的爱莎，帮我画个图形吧。”_\n\n画一个边长50像素的六边形。
        \ \n\n* * *\n\n要画这个六边形，你需要： \n\n-   向前移动**50**像素\n-   向右转**60**度\n-   \\-\n
        \   一共重复**6**次"
      courseD_artist_2_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“做得好！”_\n\n画完六边形后，向右转**60**度，然后画一条**150**像素长的线。
        \  \n\n使用<xml><block type=\"jump_to\"><title\nname=\"VALUE\">中心位置</title></block></xml>模块，将爱莎放到区域中心来结束。"
      courseD_artist_2_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“做得好！”_\n\n画完六边形后，向右转**60**度，然后画一条**150**像素长的线。
        \  \n\n使用<xml><block type=\"jump_to\"><title\nname=\"VALUE\">中心位置</title></block></xml>模块，将爱莎放到区域中心来结束。"
      courseD_artist_3_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“我们来画一个雪花。”_

        为了将这段代码变成一个雪花，将所有代码嵌入到另一个`重复`循环中，并运行它**6**次。你只需要增加一个模块。
      courseD_artist_3_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“我们来画一个雪花。”_

        为了将这段代码变成一个雪花，将所有代码嵌入到另一个`重复`循环中，并运行它**6**次。你只需要增加一个模块。
      courseD_artist_4_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"我们来画一个特别的雪花！"_

        **灵感：** 如果要在每条线的顶端画一个小正方形，需要在哪里增加代码？

        * * *

        你可以在这一关试试任何想做的事情，下面是一个主意：

        试着在每条线的顶端画一个小正方形

        -   每条边都是15像素长
        -   需要转90度
        -   总共重复4次
      courseD_artist_4_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"我们来画一个特别的雪花！"_

        **灵感：** 如果要在每条线的顶端画一个小正方形，需要在哪里增加代码？

        * * *

        你可以在这一关试试任何想做的事情，下面是一个主意：

        试着在每条线的顶端画一个小正方形

        -   每条边都是15像素长
        -   需要转90度
        -   总共重复4次
      courseD_artist_5_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"试着改变形状或线条长度来画出自己的！\"_\n\n<br/>
        \ \n\n**灵感：**\n你可以用任何方法来画自己的形状，这里是一个主意:\n\n\\-\n试着改变雪花顶端的图案！"
      courseD_artist_5_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"试着改变形状或线条长度来画出自己的！\"_\n\n<br/>
        \ \n\n**灵感：**\n你可以用任何方法来画自己的形状，这里是一个主意:\n\n\\-\n试着改变雪花顶端的图案！"
      courseD_artist_6_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"让我们试试一些新东西。这次沿着之字形滑冰。\"_\n\n<img\nsrc=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\"
        style=\"float: left; margin: 0 15px 15px 0;\" />\n用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。
        \n（过会儿你会明白为什么。）"
      courseD_artist_6_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"让我们试试一些新东西。这次沿着之字形滑冰。\"_\n\n<img\nsrc=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\"
        style=\"float: left; margin: 0 15px 15px 0;\" />\n用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。
        \n（过会儿你会明白为什么。）"
      courseD_artist_binary1: |-
        我们提供了一个"像素"网格，你可以穿过它，并通过打开某些特定的方块来做些图案。

        用下面的模块来让小艺术家在二进制的第一行画出"01010101"。
      courseD_artist_binary1_2018: |-
        我们提供了一个"像素"网格，你可以穿过它，并通过打开某些特定的方块来做些图案。

        用下面的模块来让小艺术家在二进制的第一行画出"01010101"。
      courseD_artist_binary1_2019: |-
        我们提供了一个"像素"网格，你可以穿过它，并通过打开某些特定的方块来做些图案。

        用下面的模块来让小艺术家在二进制的第一行画出"01010101"。
      courseD_artist_binary2: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。

        * * *

        当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。

        * * *

        **运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。**
      courseD_artist_binary2_2018: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。

        * * *

        当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。

        * * *

        **运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。**
      courseD_artist_binary2_2019: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。

        * * *

        当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。

        * * *

        **运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。**
      courseD_artist_binary_challenge1_2018: 在这个谜题中，您只能使用每个二进制值 (0或1) 一次。请尝试使用嵌套循环来画这幅图。
      courseD_artist_binary_challenge1_2019: 在这个谜题中，您只能使用每个二进制值 (0或1) 一次。请尝试使用嵌套循环来画这幅图。
      courseD_artist_binary_challenge2_2018: |-
        网格里有256个比特 - 这意味着和容易因为一点小改动而造成大问题。你能坚持下去，把图标恢复正常吗？

        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_binary_challenge2_2019: |-
        网格里有256个比特 - 这意味着和容易因为一点小改动而造成大问题。你能坚持下去，把图标恢复正常吗？

        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_nestedLoops1a: "现在，循环这个三角形6次。\n\n在画完每个三角形后，需要转60度。 "
      courseD_artist_nestedLoops1a_2018: "现在，循环这个三角形6次。\n\n在画完每个三角形后，需要转60度。 "
      courseD_artist_nestedLoops1a_2019: "现在，循环这个三角形6次。\n\n在画完每个三角形后，需要转60度。 "
      courseD_artist_nestedLoops2: |-
        这次，用尽可能少的模块完成这关。

        在画完每个三角形后，需要在画下一个前转60度。
        看看用**嵌套循环**的话，会有多容易？
      courseD_artist_nestedLoops2_2018: |-
        这次，用尽可能少的模块完成这关。

        在画完每个三角形后，需要在画下一个前转60度。
        看看用**嵌套循环**的话，会有多容易？
      courseD_artist_nestedLoops2_2019: |-
        这次，用尽可能少的模块完成这关。

        在画完每个三角形后，需要在画下一个前转60度。
        看看用**嵌套循环**的话，会有多容易？
      courseD_artist_nestedLoops4: |-
        太棒了！用这些圆做一样的事情。

        -   每个圆都在移动1像素前转1度，循环360次。
        -   每个圆都离一个圆结束位置50像素。
      courseD_artist_nestedLoops4_2018: |-
        太棒了！用这些圆做一样的事情。

        -   每个圆都在移动1像素前转1度，循环360次。
        -   每个圆都离一个圆结束位置50像素。
      courseD_artist_nestedLoops4_2019: |-
        太棒了！用这些圆做一样的事情。

        -   每个圆都在移动1像素前转1度，循环360次。
        -   每个圆都离一个圆结束位置50像素。
      courseD_artist_nestedLoops5: |-
        如果你在圆之间转90度，会发生什么？

        （为了画出这幅图，你需要在圆之间跳50像素）
      courseD_artist_nestedLoops5_2018: |-
        如果你在圆之间转90度，会发生什么？

        （为了画出这幅图，你需要在圆之间跳50像素）
      courseD_artist_nestedLoops5_2019: |-
        如果你在圆之间转90度，会发生什么？

        （为了画出这幅图，你需要在圆之间跳50像素）
      courseD_artist_nestedLoops7: |-
        用你学过的知识画这幅图。

        -   每个正方形有**100像素边长**和**90度的角**
        -   需要**在每个正方形间转60度**。为什么？因为有6个正方形和360度（一个整圆的度数），360除以6是60度。
        -   确保你跳了**50像素到下一个正方形**
      courseD_artist_nestedLoops7_2018: |-
        用你学过的知识画这幅图。

        -   每个正方形有**100像素边长**和**90度的角**
        -   需要**在每个正方形间转60度**。为什么？因为有6个正方形和360度（一个整圆的度数），360除以6是60度。
        -   确保你跳了**50像素到下一个正方形**
      courseD_artist_nestedLoops7_2019: |-
        用你学过的知识画这幅图。

        -   每个正方形有**100像素边长**和**90度的角**
        -   需要**在每个正方形间转60度**。为什么？因为有6个正方形和360度（一个整圆的度数），360除以6是60度。
        -   确保你跳了**50像素到下一个正方形**
      courseD_artist_nestedLoops8: |-
        用你从前面的关卡中学到的，从头构建这幅图。

        \-
        每个六边形都有**50像素的边**和**60度的转弯**
      courseD_artist_nestedLoops8_2018: |-
        用你从前面的关卡中学到的，从头构建这幅图。

        \-
        每个六边形都有**50像素的边**和**60度的转弯**
      courseD_artist_nestedLoops8_2019: |-
        用你从前面的关卡中学到的，从头构建这幅图。

        \-
        每个六边形都有**50像素的边**和**60度的转弯**
      courseD_artist_nestedLoops9: |-
        **挑战：** 你能想到如何做出这样一张图吗？

        -   两个形状都是**50像素的边长**
        -   在每一对形状间，你需要往前跳边长那么远，并转向45度。
      courseD_artist_nestedLoops9_2018: |-
        **挑战：** 你能想到如何做出这样一张图吗？

        -   两个形状都是**50像素的边长**
        -   在每一对形状间，你需要往前跳边长那么远，并转向45度。
      courseD_artist_nestedLoops9_2019: |-
        **挑战：** 你能想到如何做出这样一张图吗？

        -   两个形状都是**50像素的边长**
        -   在每一对形状间，你需要往前跳边长那么远，并转向45度。
      courseD_artist_nestedLoops9_predict1: |-
        **挑战：**
        你能想出怎么画这样的图吗？

        -   两个形状都有50像素的边
      courseD_artist_nestedLoops9_predict1_2018: |-
        **挑战：**
        你能想出怎么画这样的图吗？

        -   两个形状都有50像素的边
      courseD_artist_nestedLoops9_predict1_2019: |-
        **挑战：**
        你能想出怎么画这样的图吗？

        -   两个形状都有50像素的边
      courseD_artist_nestedLoopsFP: |-
        该你了。用你学会的技能，做些你喜欢的东西！

        需要主意吗？试试下面之一：

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2018: |-
        该你了。用你学会的技能，做些你喜欢的东西！

        需要主意吗？试试下面之一：

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2019: |-
        该你了。用你学会的技能，做些你喜欢的东西！

        需要主意吗？试试下面之一：

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoops_challenge1: |-
        你能想出怎么做像这样的图吗？

        -   两个形状都有**50像素的边长。**
        -   _八边形_要转向_45度_。
        -   _三角形_要_120度_的转向。
      courseD_artist_nestedLoops_challenge1_2018: |-
        你能想出怎么做像这样的图吗？

        -   两个形状都有**50像素的边长。**
        -   _八边形_要转向_45度_。
        -   _三角形_要_120度_的转向。
      courseD_artist_nestedLoops_challenge1_2019: |-
        你能想出怎么做像这样的图吗？

        -   两个形状都有**50像素的边长。**
        -   _八边形_要转向_45度_。
        -   _三角形_要_120度_的转向。
      courseD_artist_nestedLoops_challenge2: |-
        这个代码有点不好！你能修复它，让它在工作区画出正确的图吗？

        \-
        第一个内循环应该画一个八边形。

        -   第二个内循环应该画一个六边形。
        -   第三个内循环应该画一个正方形。
      courseD_artist_nestedLoops_challenge2_2018: |-
        这个代码有点不好！你能修复它，让它在工作区画出正确的图吗？

        \-
        第一个内循环应该画一个八边形。

        -   第二个内循环应该画一个六边形。
        -   第三个内循环应该画一个正方形。
      courseD_artist_nestedLoops_challenge2_2019: |-
        这个代码有点不好！你能修复它，让它在工作区画出正确的图吗？

        \-
        第一个内循环应该画一个八边形。

        -   第二个内循环应该画一个六边形。
        -   第三个内循环应该画一个正方形。
      courseD_artist_project1: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“你好，我是阿伦达尔的爱莎，帮我画个图形吧。”_\n\n画一个**20和50**像素之间的小图案。可以是你喜欢的任何形状。
        \ \n\n<hr/>\n\n你可以试试下面这样的多边形：\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \n\n甚至这样的抽象形状：\\\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“你好，我是阿伦达尔的爱莎，帮我画个图形吧。”_\n\n画一个**20和50**像素之间的小图案。可以是你喜欢的任何形状。
        \ \n\n<hr/>\n\n你可以试试下面这样的多边形：\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \n\n甚至这样的抽象形状：\\\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“你好，我是阿伦达尔的爱莎，帮我画个图形吧。”_\n\n画一个**20和50**像素之间的小图案。可以是你喜欢的任何形状。
        \ \n\n<hr/>\n\n你可以试试下面这样的多边形：\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \n\n甚至这样的抽象形状：\\\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1a: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"让我们试试一些新东西。这次沿着之字形滑冰。\"_\n\n<img\nsrc=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\"
        style=\"float: left; margin: 0 15px 15px 0;\" />\n用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。
        \n（过会儿你会明白为什么。）"
      courseD_artist_project1a_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"让我们试试一些新东西。这次沿着之字形滑冰。\"_\n\n<img\nsrc=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\"
        style=\"float: left; margin: 0 15px 15px 0;\" />\n用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。
        \n（过会儿你会明白为什么。）"
      courseD_artist_project1a_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"让我们试试一些新东西。这次沿着之字形滑冰。\"_\n\n<img\nsrc=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\"
        style=\"float: left; margin: 0 15px 15px 0;\" />\n用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。
        \n（过会儿你会明白为什么。）"
      courseD_artist_project2: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“现在，让我们再画一个。”_\n\n现在，将你的形状在一行里画两个或三个，每个之间往前跳一些像素。
        \n\n-   如果往前跳得比图形的宽度要**少**，它们可能会重叠。\n-   \\-\n    如果往前跳得比图形得宽度要**多**，它们之间可能会有空隙\n\n<hr/>\n\n这一行可能最后会像这些：\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>
        \ <br/>\n\n或者，你的形状可能像这样到处移动： \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“现在，让我们再画一个。”_\n\n现在，将你的形状在一行里画两个或三个，每个之间往前跳一些像素。
        \n\n-   如果往前跳得比图形的宽度要**少**，它们可能会重叠。\n-   \\-\n    如果往前跳得比图形得宽度要**多**，它们之间可能会有空隙\n\n<hr/>\n\n这一行可能最后会像这些：\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>
        \ <br/>\n\n或者，你的形状可能像这样到处移动： \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_“现在，让我们再画一个。”_\n\n现在，将你的形状在一行里画两个或三个，每个之间往前跳一些像素。
        \n\n-   如果往前跳得比图形的宽度要**少**，它们可能会重叠。\n-   \\-\n    如果往前跳得比图形得宽度要**多**，它们之间可能会有空隙\n\n<hr/>\n\n这一行可能最后会像这些：\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>
        \ <br/>\n\n或者，你的形状可能像这样到处移动： \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2a: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"现在，让我们转向并回到来的路。\"_\n\n转向180度，并再画出完全一样的楼梯图案！
        \ \n\n-   如果你把所有代码都放到循环里让爱莎画画，这个阶段剩下的都会很简单。转180度，画画，然后再转180度。\n\n<hr/>\n\n这是转向76度的楼梯的例子：\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"现在，让我们转向并回到来的路。\"_\n\n转向180度，并再画出完全一样的楼梯图案！
        \ \n\n-   如果你把所有代码都放到循环里让爱莎画画，这个阶段剩下的都会很简单。转180度，画画，然后再转180度。\n\n<hr/>\n\n这是转向76度的楼梯的例子：\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"现在，让我们转向并回到来的路。\"_\n\n转向180度，并再画出完全一样的楼梯图案！
        \ \n\n-   如果你把所有代码都放到循环里让爱莎画画，这个阶段剩下的都会很简单。转180度，画画，然后再转180度。\n\n<hr/>\n\n这是转向76度的楼梯的例子：\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project3: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"让我们把它变成雪花。\"_\n\n下次，用`向前跳200，向下跳200`模块来让艾莎回到屏幕中间，并自己转圈。从而让她自己转圈，来不停的在不同的方向画这个形状的线。
        \n\n你做的雪花太美了！\n\n<hr/>\n看看这些多边形的例子： \n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\n\n抽象形状可能做出更像这样的雪花：
        \n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_artist_project3_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"让我们把它变成雪花。\"_\n\n下次，用`向前跳200，向下跳200`模块来让艾莎回到屏幕中间，并自己转圈。从而让她自己转圈，来不停的在不同的方向画这个形状的线。
        \n\n你做的雪花太美了！\n\n<hr/>\n看看这些多边形的例子： \n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\n\n抽象形状可能做出更像这样的雪花：
        \n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_artist_project3_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"让我们把它变成雪花。\"_\n\n下次，用`向前跳200，向下跳200`模块来让艾莎回到屏幕中间，并自己转圈。从而让她自己转圈，来不停的在不同的方向画这个形状的线。
        \n\n你做的雪花太美了！\n\n<hr/>\n看看这些多边形的例子： \n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\n\n抽象形状可能做出更像这样的雪花：
        \n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_artist_project3a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们转圈，来做雪花。"_

        在一个圆里，围着这个形状转5或6次。

        -   如果选择了5次，每次转72度
        -   \-
            如果选择了6次，每次转60度
            <hr/>

        这是爱莎转6次的图案：

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project3a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们转圈，来做雪花。"_

        在一个圆里，围着这个形状转5或6次。

        -   如果选择了5次，每次转72度
        -   \-
            如果选择了6次，每次转60度
            <hr/>

        这是爱莎转6次的图案：

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project3a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们转圈，来做雪花。"_

        在一个圆里，围着这个形状转5或6次。

        -   如果选择了5次，每次转72度
        -   \-
            如果选择了6次，每次转60度
            <hr/>

        这是爱莎转6次的图案：

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project4: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"如果我们在雪花上面画雪花会如何呢？\"_\n\n试着将两个不同形状的雪花叠到一起，一个放在另一个上面
        -- 看看你能得到什么！ "
      courseD_artist_project4_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"如果我们在雪花上面画雪花会如何呢？\"_\n\n试着将两个不同形状的雪花叠到一起，一个放在另一个上面
        -- 看看你能得到什么！ "
      courseD_artist_project4_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"如果我们在雪花上面画雪花会如何呢？\"_\n\n试着将两个不同形状的雪花叠到一起，一个放在另一个上面
        -- 看看你能得到什么！ "
      courseD_artist_project4a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"现在，我们应该做什么？让我们浏览并创造自己的冬季仙境！"_

        试着摆弄你自己创建的。画自己喜欢的！

        -   如果你在楼梯图案那里转两个不同的角度会发生什么？
        -   如果你的钻石图案长一点或短一点会发生什么？
        -   如果在一个雪花上画另一个雪花看起来会是什么样子？
      courseD_artist_project4a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"现在，我们应该做什么？让我们浏览并创造自己的冬季仙境！"_

        试着摆弄你自己创建的。画自己喜欢的！

        -   如果你在楼梯图案那里转两个不同的角度会发生什么？
        -   如果你的钻石图案长一点或短一点会发生什么？
        -   如果在一个雪花上画另一个雪花看起来会是什么样子？
      courseD_artist_project4a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"现在，我们应该做什么？让我们浏览并创造自己的冬季仙境！"_

        试着摆弄你自己创建的。画自己喜欢的！

        -   如果你在楼梯图案那里转两个不同的角度会发生什么？
        -   如果你的钻石图案长一点或短一点会发生什么？
        -   如果在一个雪花上画另一个雪花看起来会是什么样子？
      courseD_artist_project5: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"用形状和角度来创造一些东西，看看我们能画出什么种类的新雪花！"_
      courseD_artist_project5_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"用形状和角度来创造一些东西，看看我们能画出什么种类的新雪花！"_
      courseD_artist_project5_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"用形状和角度来创造一些东西，看看我们能画出什么种类的新雪花！"_
      courseD_artist_ramp11: |-
        太棒了！让我们用小艺术家画一个正方形！这些模块有点不同，但概念是一样的。

        * * *

        正方形的每条边是200像素长，需要转90度来画每个角。
      courseD_artist_ramp12: |-
        用你学过的知识在三角形里画个正方形。

        * * *

        ##### 每条边都是200像素长。需要转90度来画正方形，转120度来画三角形。
      courseD_autorun_binary2_2019: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。

        * * *

        当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。

        * * *

        **运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。**
      courseD_bee_conditionals10: |-
        即使你知道每个点会有什么，条件也会有帮助！

        收集所有的花蜜，并酿造所有的蜂蜜。
      courseD_bee_conditionals10_2018: |-
        即使你知道每个点会有什么，条件也会有帮助！

        收集所有的花蜜，并酿造所有的蜂蜜。
      courseD_bee_conditionals10_2019: |-
        即使你知道每个点会有什么，条件也会有帮助！

        收集所有的花蜜，并酿造所有的蜂蜜。
      courseD_bee_conditionals1_predict1: |-
        _"这朵云挡住了我的视线！"_

        检查是否云下面有花。如果有花，采花蜜。
      courseD_bee_conditionals1_predict1_2018: |-
        _"这朵云挡住了我的视线！"_

        检查是否云下面有花。如果有花，采花蜜。
      courseD_bee_conditionals1_predict1_2019: |-
        _"这朵云挡住了我的视线！"_

        检查是否云下面有花。如果有花，采花蜜。
      courseD_bee_conditionals2: "更多的云！ \n\n在采花蜜前检查每朵云下面，看看是否藏着一朵花。如果云下面有花，蜜蜂需要采_一次_花蜜。
        \n\n记住，不是每朵云下面都藏着一样的东西！"
      courseD_bee_conditionals2_2018: "更多的云！ \n\n在采花蜜前检查每朵云下面，看看是否藏着一朵花。如果云下面有花，蜜蜂需要采_一次_花蜜。
        \n\n记住，不是每朵云下面都藏着一样的东西！"
      courseD_bee_conditionals2_2019: "更多的云！ \n\n在采花蜜前检查每朵云下面，看看是否藏着一朵花。如果云下面有花，蜜蜂需要采_一次_花蜜。
        \n\n记住，不是每朵云下面都藏着一样的东西！"
      courseD_bee_conditionals3: 你只能从花上采集花蜜，但你能检查任何空间，看看是否那里有花。如果在任何云下面有花，蜜蜂需要采集_一次_花蜜。
      courseD_bee_conditionals3_2018: 你只能从花上采集花蜜，但你能检查任何空间，看看是否那里有花。如果在任何云下面有花，蜜蜂需要采集_一次_花蜜。
      courseD_bee_conditionals3_2019: 你只能从花上采集花蜜，但你能检查任何空间，看看是否那里有花。如果在任何云下面有花，蜜蜂需要采集_一次_花蜜。
      courseD_bee_conditionals4: |-
        在这一关中，我们知道每朵花都有正好一个花蜜，但是花没有均匀的分布。

        用尽可能少的模块采集所有花蜜。
      courseD_bee_conditionals4_2018: |-
        在这一关中，我们知道每朵花都有正好一个花蜜，但是花没有均匀的分布。

        用尽可能少的模块采集所有花蜜。
      courseD_bee_conditionals4_2019: |-
        在这一关中，我们知道每朵花都有正好一个花蜜，但是花没有均匀的分布。

        用尽可能少的模块采集所有花蜜。
      courseD_bee_conditionals6: |-
        _"现在我只想酿蜂蜜。"_

        有些云下面可能有蜂窝。确保检查是否每朵云后藏着蜂窝！如果有蜂窝，蜜蜂就需要酿_一次_蜂蜜。
      courseD_bee_conditionals6_2018: |-
        _"现在我只想酿蜂蜜。"_

        有些云下面可能有蜂窝。确保检查是否每朵云后藏着蜂窝！如果有蜂窝，蜜蜂就需要酿_一次_蜂蜜。
      courseD_bee_conditionals6_2019: |-
        _"现在我只想酿蜂蜜。"_

        有些云下面可能有蜂窝。确保检查是否每朵云后藏着蜂窝！如果有蜂窝，蜜蜂就需要酿_一次_蜂蜜。
      courseD_bee_conditionals7: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！

        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：如果有花，蜜蜂只需要采_一次_花蜜。如果有蜂窝，蜜蜂也只需要酿_一次_蜂蜜。
      courseD_bee_conditionals7_2018: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！

        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：如果有花，蜜蜂只需要采_一次_花蜜。如果有蜂窝，蜜蜂也只需要酿_一次_蜂蜜。
      courseD_bee_conditionals7_2019: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！

        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：如果有花，蜜蜂只需要采_一次_花蜜。如果有蜂窝，蜜蜂也只需要酿_一次_蜂蜜。
      courseD_bee_conditionals7_predict2: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！

        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：每朵云那里只会有_一个_蜂窝或_一朵_花。
      courseD_bee_conditionals7_predict2_2018: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！

        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：每朵云那里只会有_一个_蜂窝或_一朵_花。
      courseD_bee_conditionals7_predict2_2019: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！

        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：每朵云那里只会有_一个_蜂窝或_一朵_花。
      courseD_bee_conditionals8: |-
        **挑战：** 这些云下面要么有一朵花，要么有一个蜂窝！

        如果是花，就采一次花蜜。
        否则，就酿一次蜂蜜（因为是蜂窝）。
      courseD_bee_conditionals8_2018: |-
        **挑战：** 这些云下面要么有一朵花，要么有一个蜂窝！

        如果是花，就采一次花蜜。
        否则，就酿一次蜂蜜（因为是蜂窝）。
      courseD_bee_conditionals8_2019: |-
        **挑战：** 这些云下面要么有一朵花，要么有一个蜂窝！

        如果是花，就采一次花蜜。
        否则，就酿一次蜂蜜（因为是蜂窝）。
      courseD_bee_conditionals9: 采集所有的花蜜或酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝那里酿蜂蜜。检查所有空间看看有花还是蜂窝。每朵云后面要么有一朵花，要么有一个蜂窝。
      courseD_bee_conditionals9_2018: 采集所有的花蜜或酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝那里酿蜂蜜。检查所有空间看看有花还是蜂窝。每朵云后面要么有一朵花，要么有一个蜂窝。
      courseD_bee_conditionals9_2019: 采集所有的花蜜或酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝那里酿蜂蜜。检查所有空间看看有花还是蜂窝。每朵云后面要么有一朵花，要么有一个蜂窝。
      courseD_bee_conditionals_challenge1: 采所有的花蜜并酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝酿蜂蜜。检查每个空间是否有花或者蜂窝。
      courseD_bee_conditionals_challenge1_2018: 采所有的花蜜并酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝酿蜂蜜。检查每个空间是否有花或者蜂窝。
      courseD_bee_conditionals_challenge1_2019: 采所有的花蜜并酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝酿蜂蜜。检查每个空间是否有花或者蜂窝。
      courseD_bee_conditionals_challenge2: 采所有花蜜，并酿所有蜂蜜。你可以用一个`while nectar > 0`循环，在一朵花里收集所有花蜜。
      courseD_bee_conditionals_challenge2_2018: 采所有花蜜，并酿所有蜂蜜。你可以用一个`while nectar >
        0`循环，在一朵花里收集所有花蜜。
      courseD_bee_conditionals_challenge2_2019: 采所有花蜜，并酿所有蜂蜜。你可以用一个`while nectar >
        0`循环，在一朵花里收集所有花蜜。
      courseD_bee_debugging_challenge1: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_bee_debugging_challenge1a: |-
        _"嗡嗡嗡！我知道怎么采花蜜，现在帮我酿蜂蜜！"_

        看看蜜蜂是怎么得到花蜜的。你能用同样的规律帮蜜蜂酿造所有蜂蜜吗？
      courseD_bee_nestedLoops1: |-
        "_这会非常棒！_"

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops1_2018: |-
        "_这会非常棒！_"

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops1_2019: |-
        "_这会非常棒！_"

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops1a: |-
        _"这会非常棒！"_

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops1a_2018: |-
        _"这会非常棒！"_

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops1a_2019: |-
        _"这会非常棒！"_

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops2: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_2018: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_2019: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_predict1: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_predict1_2018: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_predict1_2019: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops7: "**挑战：** 找出如何只使用现有模块得到所有的花蜜。"
      courseD_bee_nestedLoops7_2018: "**挑战：** 找出如何只使用现有模块得到所有的花蜜。"
      courseD_bee_nestedLoops7_2019: "**挑战：** 找出如何只使用现有模块得到所有的花蜜。"
      courseD_bee_nestedLoops8: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops8_2018: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops8_2019: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops9: 酿蜂蜜。
      courseD_bee_nestedLoops9_2018: 酿蜂蜜。
      courseD_bee_nestedLoops9_2019: 酿蜂蜜。
      courseD_bee_nestedLoops9_predict2: 酿蜂蜜。
      courseD_bee_nestedLoops9_predict2_2018: 酿蜂蜜。
      courseD_bee_nestedLoops9_predict2_2019: 酿蜂蜜。
      courseD_bounce_events10s_2018: "现在最上面有个篮圈。  \n\n将`得分`模块附加到`当球命中时`时间上，并将`对手得分`模块放到`当球从手中丢失时`时间里，来制作一个游戏。
        \n\n* * *\n\n看看在对手两次得分前，你能得多少分。"
      courseD_bounce_events10s_2019: "现在最上面有个篮圈。  \n\n将`得分`模块附加到`当球命中时`时间上，并将`对手得分`模块放到`当球从手中丢失时`时间里，来制作一个游戏。
        \n\n* * *\n\n看看在对手两次得分前，你能得多少分。"
      courseD_bounce_events11s_2018: |-
        现在，你控球了！将`扔出新球`模块放到游戏中所有需要一个新球得地方。

        * * *

        看看在对手得分两次前，你能得多少分！
      courseD_bounce_events11s_2019: |-
        现在，你控球了！将`扔出新球`模块放到游戏中所有需要一个新球得地方。

        * * *

        看看在对手得分两次前，你能得多少分！
      courseD_bounce_events1s_2018: "把球投到篮框里！ \n\n加一个模块到`当按左方向键时`事件，并点击\"运行\"来将玩家移动到网那里。"
      courseD_bounce_events1s_2019: "把球投到篮框里！ \n\n加一个模块到`当按左方向键时`事件，并点击\"运行\"来将玩家移动到网那里。"
      courseD_bounce_events2s_2018: 现在, 在 "当向右时" 中附加一个方块, 这样手就可以够到两个篮子。
      courseD_bounce_events2s_2019: 现在, 在 "当向右时" 中附加一个方块, 这样手就可以够到两个篮子。
      courseD_bounce_events5s_2018: 我们会朝着手发一个球。在`当球碰到手时`事件中加一个模块来确保球到达篮筐。
      courseD_bounce_events5s_2019: 我们会朝着手发一个球。在`当球碰到手时`事件中加一个模块来确保球到达篮筐。
      courseD_bounce_events6s_2018: "现在篮筐在顶部。 \n\n添加代码，当球碰到墙时，让球弹起来，这样来通过这关。"
      courseD_bounce_events6s_2019: "现在篮筐在顶部。 \n\n添加代码，当球碰到墙时，让球弹起来，这样来通过这关。"
      courseD_bounce_events7s_2018: "增加声音模块来制造出球进入篮筐时的刷刷声，在球脱手时的吹哨声。 \n\n* * *\n\n弹球，直到它命中目标。"
      courseD_bounce_events7s_2019: "增加声音模块来制造出球进入篮筐时的刷刷声，在球脱手时的吹哨声。 \n\n* * *\n\n弹球，直到它命中目标。"
      courseD_collector_debugging1: |-
        _"哦，不！我看到有个问题。"_

        修复缺陷来收集所有宝藏。
      courseD_collector_debugging10_predict1: |-
        _"这是藏宝岛！"_

        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging1a_2018: |-
        _"哦，不！我看到有个问题。"_

        修复缺陷来收集所有宝藏。
      courseD_collector_debugging1a_2019: |-
        _"哦，不！我看到有个问题。"_

        修复缺陷来收集所有宝藏。
      courseD_collector_debugging2: |-
        _"你能做到！"_

        修复缺陷来收集所有宝藏。
      courseD_collector_debugging2a_2018: |-
        _"你能做到！"_

        修复缺陷来收集所有宝藏。
      courseD_collector_debugging2a_2019: |-
        _"你能做到！"_

        修复缺陷来收集所有宝藏。
      courseD_collector_debugging3: |-
        _"坚持下去，你能找到它。"_

        修复错误来收集所有宝藏。
      courseD_collector_debugging3a_2018: |-
        _"坚持下去，你能找到它。"_

        修复错误来收集所有宝藏。
      courseD_collector_debugging3a_2019: |-
        _"坚持下去，你能找到它。"_

        修复错误来收集所有宝藏。
      courseD_collector_debugging4: |-
        _"别失望。你能做到！"_

        修复这些错误并收集所有的宝贝.
      courseD_collector_debugging4a_2018: |-
        _"别失望。你能做到！"_

        修复这些错误并收集所有的宝贝.
      courseD_collector_debugging4a_2019: |-
        _"别失望。你能做到！"_

        修复这些错误并收集所有的宝贝.
      courseD_collector_debugging5: |-
        _"这关让我疯狂！"_

        你需要的所有命令都在这里了...现在用你的调试技能来找出如何解决这个问题。
      courseD_collector_debugging5a_2018: |-
        _"这关让我疯狂！"_

        你需要的所有命令都在这里了...现在用你的调试技能来找出如何解决这个问题。
      courseD_collector_debugging5a_2019: |-
        _"这关让我疯狂！"_

        你需要的所有命令都在这里了...现在用你的调试技能来找出如何解决这个问题。
      courseD_collector_debugging6: "**挑战：**  所有你需要的模块都在这里了...现在用你的调试技巧来修复错误，收集所有的宝藏。"
      courseD_collector_debugging6a_2018: '挑战: 使用工作区的代码得到至少 \*\* 6 \*\* 块宝藏!'
      courseD_collector_debugging6a_2019: '挑战: 使用工作区的代码得到至少 \*\* 6 \*\* 块宝藏!'
      courseD_collector_debugging8: |-
        _"这么多宝藏！"_

        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging8a_2018: |-
        _"这么多宝藏！"_

        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging8a_2019: |-
        _"这么多宝藏！"_

        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging9: |-
        _"这是藏宝岛！"_

        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging9a_2018: |-
        _"这是藏宝岛！"_

        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging9a_2019: |-
        _"这是藏宝岛！"_

        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_nested_loops_challenge2: |-
        让我们来寻找宝藏 - 用循环！

        只用工具箱里的模块来帮助收藏家至少拿到两堆宝藏。有可能收集到所有4堆。
      courseD_collector_nested_loops_challenge2_2018: |-
        让我们来寻找宝藏 - 用循环！

        只用工具箱里的模块来帮助收藏家至少拿到两堆宝藏。有可能收集到所有4堆。
      courseD_collector_nested_loops_challenge2_2019: |-
        让我们来寻找宝藏 - 用循环！

        只用工具箱里的模块来帮助收藏家至少拿到两堆宝藏。有可能收集到所有4堆。
      courseD_collector_nested_loops_challenge2a: |-
        让我们来寻找宝藏 - 用循环！

        只用工具箱里的模块来帮助罗瑞尔至少拿到两堆宝藏。有可能收集到所有4堆。
      courseD_collector_ramp10: 让罗瑞尔在正方形周围走走，收集找到的宝藏。
      courseD_collector_ramp8: |-
        这一关和上一关非常像，但现在罗瑞尔是探险者了！

        * * *

        和以前的路一样，但这次，用一个循环重复来收集遇到的宝藏。
      courseD_collector_ramp9: 现在，有更多的宝藏了。你能帮罗瑞尔全收集起来吗？
      courseD_farmer_condLoops1: |-
        _"玉米，你今天帮我收获了吗？"_

        帮助收割者检查她这行玉米，看看有没有可以收获的。用条件语句在每个苗那里判断。每个玉米秆都会有**0或1**个玉米能收获了。
      courseD_farmer_condLoops1_2018: |-
        _"玉米，你今天帮我收获了吗？"_

        帮助收割者检查她这行玉米，看看有没有可以收获的。用条件语句在每个苗那里判断。每个玉米秆都会有**0或1**个玉米能收获了。
      courseD_farmer_condLoops1_2019: |-
        _"玉米，你今天帮我收获了吗？"_

        帮助收割者检查她这行玉米，看看有没有可以收获的。用条件语句在每个苗那里判断。每个玉米秆都会有**0或1**个玉米能收获了。
      courseD_farmer_condLoops2: "_\"莴苣，从这一行采摘所有庄稼！\"_\n\n这个花园是混合的。它有**玉米和莴苣**  \n\n帮助收割者收获已经成熟的。每个作物都有**一个**玉米或**一个**莴苣。"
      courseD_farmer_condLoops2_2018: "_\"莴苣，从这一行采摘所有庄稼！\"_\n\n这个花园是混合的。它有**玉米和莴苣**
        \ \n\n帮助收割者收获已经成熟的。每个作物都有**一个**玉米或**一个**莴苣。"
      courseD_farmer_condLoops2_2019: "_\"莴苣，从这一行采摘所有庄稼！\"_\n\n这个花园是混合的。它有**玉米和莴苣**
        \ \n\n帮助收割者收获已经成熟的。每个作物都有**一个**玉米或**一个**莴苣。"
      courseD_farmer_condLoops3: |-
        _"玉米、莴苣和南瓜！帮我全收了。"_

        每个作物可能是一穗玉米、一头莴苣或一个南瓜。
      courseD_farmer_condLoops3_2018: |-
        _"玉米、莴苣和南瓜！帮我全收了。"_

        每个作物可能是一穗玉米、一头莴苣或一个南瓜。
      courseD_farmer_condLoops3_2019: |-
        _"玉米、莴苣和南瓜！帮我全收了。"_

        每个作物可能是一穗玉米、一头莴苣或一个南瓜。
      courseD_farmer_condLoops4: "_\"哎呀！莴苣都长成团了！\"_  \n\n收割者想要从她的莴苣菜园里采摘所有的作物。每个作物都有一个以上的莴苣，因此只要一直有莴苣长出来，农夫就要不停的采摘。
        \n\n##### (记住：这个菜园里只有莴苣！)"
      courseD_farmer_condLoops4_2018: "_\"哎呀！莴苣都长成团了！\"_  \n\n收割者想要从她的莴苣菜园里采摘所有的作物。每个作物都有一个以上的莴苣，因此只要一直有莴苣长出来，收割者就要不停的采摘。
        \n\n##### (记住：这个菜园里只有莴苣！)"
      courseD_farmer_condLoops4_2019: "_\"哎呀！莴苣都长成团了！\"_  \n\n收割者想要从她的莴苣菜园里采摘所有的作物。每个作物都有一个以上的莴苣，因此只要一直有莴苣长出来，收割者就要不停的采摘。
        \n\n##### (记住：这个菜园里只有莴苣！)"
      courseD_farmer_condLoops5: |-
        _"多么茂盛的庄稼！"_

        这片田里有一堆玉米和莴苣涨到一起了 -- 最后还有一个南瓜。你能收获所有的作物吗？
      courseD_farmer_condLoops5_2018: |-
        _"多么茂盛的庄稼！"_

        这片田里有一堆玉米和莴苣涨到一起了 -- 最后还有一个南瓜。你能收获所有的作物吗？
      courseD_farmer_condLoops5_2019: |-
        _"多么茂盛的庄稼！"_

        这片田里有一堆玉米和莴苣涨到一起了 -- 最后还有一个南瓜。你能收获所有的作物吗？
      courseD_farmer_condLoops6: |-
        _"让我们再多走一步！"_

        你能想出怎么收获南瓜吗？确保沿途收获了所有的玉米！
      courseD_farmer_condLoops6_2018: |-
        _"让我们再多走一步！"_

        你能想出怎么收获南瓜吗？确保沿途收获了所有的玉米！
      courseD_farmer_condLoops6_2019: |-
        _"让我们再多走一步！"_

        你能想出怎么收获南瓜吗？确保沿途收获了所有的玉米！
      courseD_farmer_condLoops7: "**挑战：**收集所有的玉米和莴苣，然后捡起南瓜。"
      courseD_farmer_condLoops7_2018: "**挑战：**收集所有的玉米和莴苣，然后捡起南瓜。"
      courseD_farmer_condLoops7_2019: "**挑战：**收集所有的玉米和莴苣，然后捡起南瓜。"
      courseD_farmer_condLoops8: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops8_2018: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops8_2019: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_2018: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_2019: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_predict1: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_predict1_2018: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_predict1_2019: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops_challenge1: |-
        有南瓜标记的地方，你应该`向右转`。否则要一直向前走，但记着收集沿途所有的莴苣或玉米。

        **每个隐藏的作物只有一个玉米或莴苣。**
      courseD_farmer_condLoops_challenge1_2018: |-
        有南瓜标记的地方，你应该`向右转`。否则要一直向前走，但记着收集沿途所有的莴苣或玉米。

        **每个隐藏的作物只有一个玉米或莴苣。**
      courseD_farmer_condLoops_challenge1_2019: |-
        有南瓜标记的地方，你应该`向右转`。否则要一直向前走，但记着收集沿途所有的莴苣或玉米。

        **每个隐藏的作物只有一个玉米或莴苣。**
      courseD_farmer_condLoops_challenge2: "_\"这是多样的蔬菜迷宫！\"_ \n\n在南瓜那里向右转，在莴苣那里向左转。收集所有东西来通过这关。"
      courseD_farmer_condLoops_challenge2_2018: "_\"这是多样的蔬菜迷宫！\"_ \n\n在南瓜那里向右转，在莴苣那里向左转。收集所有东西来通过这关。"
      courseD_farmer_condLoops_challenge2_2019: "_\"这是多样的蔬菜迷宫！\"_ \n\n在南瓜那里向右转，在莴苣那里向左转。收集所有东西来通过这关。"
      courseD_farmer_until_challenge2: 使用`如果/否则`模块来跟随这条弯曲的路。在每个转角处，用循环里的`移除一个`模块来清理土堆。
      courseD_farmer_while1: |-
        _"你好，我是一个农夫。我需要你帮我把一块地翻平来为种植做准备！"_

        移动到那堆土上面，并使用`移除`模块来移除它。
      courseD_farmer_while1_2018: |-
        _"你好，我是一个农夫。我需要你帮我把一块地翻平来为种植做准备！"_

        移动到那堆土上面，并使用`移除`模块来移除它。
      courseD_farmer_while1_2019: |-
        _"你好，我是一个农夫。我需要你帮我把一块地翻平来为种植做准备！"_

        移动到那堆土上面，并使用`移除`模块来移除它。
      courseD_farmer_while3: |-
        _"移动到土堆上，然后告诉我需要多少铲能够夷平。"_

        用尽可能少的模块来通过这关。
      courseD_farmer_while3_2018: |-
        _"移动到土堆上，然后告诉我需要多少铲能够夷平。"_

        用尽可能少的模块来通过这关。
      courseD_farmer_while3_2019: |-
        _"移动到土堆上，然后告诉我需要多少铲能够夷平。"_

        用尽可能少的模块来通过这关。
      courseD_farmer_while4: |-
        _"我不知道这堆有多少土！"_

        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while4_2018: |-
        _"我不知道这堆有多少土！"_

        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while4_2019: |-
        _"我不知道这堆有多少土！"_

        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while4_predict1: |-
        _"我不知道这堆有多少土！"_

        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while4_predict1_2018: |-
        _"我不知道这堆有多少土！"_

        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while4_predict1_2019: |-
        _"我不知道这堆有多少土！"_

        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while6: "看看这些洞！每个都需要不同数量的土。 \n\n你能很容易的用`当`循环来填满它们！"
      courseD_farmer_while6_2018: "看看这些洞！每个都需要不同数量的土。 \n\n你能很容易的用`当`循环来填满它们！"
      courseD_farmer_while6_2019: "看看这些洞！每个都需要不同数量的土。 \n\n你能很容易的用`当`循环来填满它们！"
      courseD_farmer_while8: "**挑战：** 用尽可能少的模块填满这些洞。 "
      courseD_farmer_while8_2018: "**挑战：** 用尽可能少的模块填满这些洞。 "
      courseD_farmer_while8_2019: "**挑战：** 用尽可能少的模块填满这些洞。 "
      courseD_farmer_while_challenge1: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge1_2018: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge1_2019: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge2: 填补所有的洞, 并移走所有的土堆。
      courseD_harvester_nested_loops_challenge1: _"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"_
      courseD_harvester_nested_loops_challenge1_2018: _"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"_
      courseD_harvester_nested_loops_challenge1_2019: _"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"_
      courseD_iceage_loops1: 帮助斯奎特穿过溜滑的冰去拿到橡子！
      courseD_iceage_loops10: 帮助斯奎特走过去拿到橡子！
      courseD_iceage_loops10_2019: 帮助斯奎特走过去拿到橡子！
      courseD_iceage_loops11: 帮助斯奎特得到橡子！
      courseD_iceage_loops11_2019: 帮助斯奎特得到橡子！
      courseD_iceage_loops12: 用各种方法来拿到橡子！
      courseD_iceage_loops12_2019: 用各种方法来拿到橡子！
      courseD_iceage_loops1_2019: 帮助斯奎特穿过溜滑的冰去拿到橡子！
      courseD_iceage_loops2: |-
        用一个<xml><block type="maze_turn">
            <title
        name="DIR">turnLeft</title>
          </block></xml>模块来到达橡子！
      courseD_iceage_loops2_2019: |-
        用一个<xml><block type="maze_turn">
            <title
        name="DIR">turnLeft</title>
          </block></xml>模块来到达橡子！
      courseD_iceage_loops3: 你能只用一个 <xml><block type="maze_moveForward"/></xml>模块来获得橡子吗？试试用循环！
      courseD_iceage_loops3_2019: 你能只用一个 <xml><block type="maze_moveWest"/></xml>模块来获得橡子吗？试试用循环！
      courseD_iceage_loops4: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseD_iceage_loops4_2019: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseD_iceage_loops6: 你能增加一个循环到达橡子吗？
      courseD_iceage_loops6_2019: 你能增加一个循环到达橡子吗？
      courseD_iceage_loops7: 斯奎特真的想要那个橡子！
      courseD_iceage_loops7_2019: 斯奎特真的想要那个橡子！
      courseD_iceage_loops8: '你能修好这段代码吗？ '
      courseD_iceage_loops8_2019: '你能修好这段代码吗？ '
      courseD_iceage_loops9: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseD_iceage_loops9_2019: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseD_maze_intro5a_2019: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_nestedLoops3: |-
        _"僵尸饿了！"_

        用尽可能少的模块让僵尸到达向日葵。
      courseD_maze_nestedLoops3_2018: |-
        _"僵尸饿了！"_

        用尽可能少的模块让僵尸到达向日葵。
      courseD_maze_nestedLoops3_2019: |-
        _"僵尸饿了！"_

        用尽可能少的模块让僵尸到达向日葵。
      courseD_maze_nestedLoops4: '用尽可能少的模块让僵尸到达向日葵！  '
      courseD_maze_nestedLoops4_2018: '用尽可能少的模块让僵尸到达向日葵！  '
      courseD_maze_nestedLoops4_2019: '用尽可能少的模块让僵尸到达向日葵！  '
      courseD_maze_nestedLoops6: |-
        _"一定要吃到向日葵！"_

        用仅有的模块来让僵尸到达向日葵。
      courseD_maze_nestedLoops6_2018: |-
        _"一定要吃到向日葵！"_

        用仅有的模块来让僵尸到达向日葵。
      courseD_maze_nestedLoops6_2019: |-
        _"一定要吃到向日葵！"_

        用仅有的模块来让僵尸到达向日葵。
      courseD_maze_ramp1: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_maze_ramp1_2018: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_maze_ramp1_2019: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_maze_ramp2: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_maze_ramp2_2018: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_maze_ramp2_2019: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_maze_ramp3: |-
        _"这只猪把我的羽毛弄皱了。"_

        这里有一个额外的模块会让小鸟坠落。
        将它从其它模块上移除，并拖回工具箱来扔掉。
      courseD_maze_ramp3_2018: |-
        _"这只猪把我的羽毛弄皱了。"_

        这里有一个额外的模块会让小鸟坠落。
        将它从其它模块上移除，并拖回工具箱来扔掉。
      courseD_maze_ramp3_2019: |-
        _"这只猪把我的羽毛弄皱了。"_

        这里有一个额外的模块会让小鸟坠落。
        将它从其它模块上移除，并拖回工具箱来扔掉。
      courseD_maze_ramp4: |-
        _"沿着这条路带我去找那只笨猪。"_

        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseD_maze_ramp4_2018: |-
        _"沿着这条路带我去找那只笨猪。"_

        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseD_maze_ramp4_2019: |-
        _"沿着这条路带我去找那只笨猪。"_

        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseD_maze_ramp5: |-
        _"沿着这条路，让我到猪那里！"_

        躲开TNT炸药。
      courseD_maze_ramp5_2018: |-
        _"沿着这条路，让我到猪那里！"_

        躲开TNT炸药。
      courseD_maze_ramp5_2019: |-
        _"沿着这条路，让我到猪那里！"_

        躲开TNT炸药。
      courseD_maze_ramp5a: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_ramp5a_2018: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_ramp5a_2019: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_ramp5b: "**挑战：**在这个迷宫中导航，帮助小鸟找到猪！"
      courseD_maze_ramp5b_2018: "**挑战：**在这个迷宫中导航，帮助小鸟找到猪！"
      courseD_maze_ramp5b_2019: "**挑战：**在这个迷宫中导航，帮助小鸟找到猪！"
      courseD_maze_ramp5c: 帮小鸟到达猪那里。
      courseD_maze_ramp5c_2018: 帮小鸟到达猪那里。
      courseD_maze_ramp5c_2019: 帮小鸟到达猪那里。
      courseD_maze_ramp5d: 帮小鸟到达那只猪。
      courseD_maze_ramp5d_2018: 帮小鸟到达那只猪。
      courseD_maze_ramp5d_2019: 帮小鸟到达那只猪。
      courseD_maze_ramp6: |-
        _"保持冷静，帮我找到坏猪。否则，我会生气的！"_

        当你将几个同样的模块排成一列时，试试用一个`重复`循环来代替。这用更少的代码来做相同的事情！
      courseD_maze_ramp7: "_\"我该生气了！\"_  \n\n用你学到的知识来帮小鸟抓到猪！"
      courseD_maze_until10: 帮助僵尸到达向日葵。
      courseD_maze_until10_2018: 帮助僵尸到达向日葵。
      courseD_maze_until10_2019: 帮助僵尸到达向日葵。
      courseD_maze_until10_predict2: 帮助僵尸到达向日葵。
      courseD_maze_until10_predict2_2018: 帮助僵尸到达向日葵。
      courseD_maze_until10_predict2_2019: 帮助僵尸到达向日葵。
      courseD_maze_until4: |-
        _"亲爱的人。我，僵尸。我，饿了。必须... 到... 向日葵那..."_

        你能只用这些模块让僵尸到达向日葵吗？
      courseD_maze_until4_2018: |-
        _"亲爱的人。我，僵尸。我，饿了。必须... 到... 向日葵那..."_

        你能只用这些模块让僵尸到达向日葵吗？
      courseD_maze_until4_2019: |-
        _"亲爱的人。我，僵尸。我，饿了。必须... 到... 向日葵那..."_

        你能只用这些模块让僵尸到达向日葵吗？
      courseD_maze_until5: 用`如果`模块来帮助僵尸决定何时转弯，然后让僵尸到达向日葵那里。
      courseD_maze_until5_2018: 用`如果`模块来帮助僵尸决定何时转弯，然后让僵尸到达向日葵那里。
      courseD_maze_until5_2019: 用`如果`模块来帮助僵尸决定何时转弯，然后让僵尸到达向日葵那里。
      courseD_maze_until6: 帮助僵尸到达向日葵。
      courseD_maze_until6_2018: 帮助僵尸到达向日葵。
      courseD_maze_until6_2019: 帮助僵尸到达向日葵。
      courseD_maze_until7: 帮助僵尸到达向日葵。
      courseD_maze_until7_2018: 帮助僵尸到达向日葵。
      courseD_maze_until7_2019: 帮助僵尸到达向日葵。
      courseD_maze_until8: 帮助僵尸到达向日葵。
      courseD_maze_until9: "**挑战：** 躲开食人花，让僵尸到达向日葵那里。"
      courseD_maze_until9_2018: "**挑战：** 躲开食人花，让僵尸到达向日葵那里。"
      courseD_maze_until9_2019: "**挑战：** 躲开食人花，让僵尸到达向日葵那里。"
      courseD_maze_until_challenge1: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_playLab_cond1: "为了开始游戏，海盗（演员1）需要能往所有方向走动。将模块连接到正确的事件上让海盗能移动。 \n\n* *
        *\n\n帮助海盗收集旗帜来通过这关。"
      courseD_playLab_cond1_2018: "为了开始游戏，海盗（演员1）需要能往所有方向走动。将模块连接到正确的事件上让海盗能移动。 \n\n*
        * *\n\n帮助海盗收集旗帜来通过这关。"
      courseD_playLab_cond2: "该加分了！  \n\n编辑代码，当海盗（演员1）到达龙（演员 2）时，给他加一分。 "
      courseD_playLab_cond2_2018: "该加分了！  \n\n编辑代码，当海盗（演员1）到达龙（演员 2）时，给他加一分。 "
      courseD_playLab_cond3: '用`一直重复`循环来让龙（演员2）每秒钟随机改变一次表情。  '
      courseD_playLab_cond3_2018: '用`一直重复`循环来让龙（演员2）每秒钟随机改变一次表情。  '
      courseD_playLab_cond3a: "是时候用我们学到的关于条件的内容来让游戏更精彩了。 \n\n添加代码，当海盗到达龙时，_如果_龙高兴，他就得两分。否则，只能加一分。"
      courseD_playLab_cond3a_2018: "是时候用我们学到的关于条件的内容来让游戏更精彩了。 \n\n添加代码，当海盗到达龙时，_如果_龙高兴，他就得两分。否则，只能加一分。"
      courseD_playLab_cond4: |-
        开始有趣了！

        添加一些代码，让忍者（演员3）在游戏开始时尽快抓住海盗。如果忍者在游戏结束时还没有抓住，就输了。
      courseD_playLab_cond4_2018: |-
        开始有趣了！

        添加一些代码，让忍者（演员3）在游戏开始时尽快抓住海盗。如果忍者在游戏结束时还没有抓住，就输了。
      courseD_playLab_cond5: |-
        现在，我们需要一种赢得方法。

        添加`一直重复`循环，让它不断检查**如果**比分大于5，就按照**胜利**来结束游戏。
      courseD_playLab_cond5_2018: |-
        现在，我们需要一种赢得方法。

        添加`一直重复`循环，让它不断检查**如果**比分大于5，就按照**胜利**来结束游戏。
      courseD_playLab_cond6: "哇，这个游戏很难赢！\n\n让我们自定义游戏来让它更有趣。有两部分挑战：\n\n* * *\n\n1.
        \ 在你设置忍者（演员3）去抓海盗（演员1）前，让他变得更慢。  \n\n2.  用`一直重复`循环来看看是否海盗在\"安全区\"，即章鱼线下面（大于225像素下）。如果他在，设置忍者**远离**海盗。否则，让忍者**抓住**海盗。
        \ "
      courseD_playLab_cond6_2018: "哇，这个游戏很难赢！\n\n让我们自定义游戏来让它更有趣。有两部分挑战：\n\n* * *\n\n1.
        \ 在你设置忍者（演员3）去抓海盗（演员1）前，让他变得更慢。  \n\n2.  用`一直重复`循环来看看是否海盗在\"安全区\"，即章鱼线下面（大于225像素下）。如果他在，设置忍者**远离**海盗。否则，让忍者**抓住**海盗。
        \ "
      courseD_playLab_cond6a: "我们不想让海盗呆在\"安全区\"太久！ \n\n在`如果`语句下增加代码，如果海盗（演员1）在安全区里，程序等一秒，然后只要他呆在章鱼线下，就减一分。"
      courseD_playLab_cond6a_2018: "我们不想让海盗呆在\"安全区\"太久！ \n\n在`如果`语句下增加代码，如果海盗（演员1）在安全区里，程序等一秒，然后只要他呆在章鱼线下，就减一分。"
      courseD_playLab_condFP_2018: |-
        现在让我们创建自己的游戏, 并向你的朋友展示!

        * * *

        你可以:
        \-让海盗和忍者一起从章鱼那里得到分数
        \-让两个章鱼跟随海盗, 当章鱼和忍者发生碰撞的时候, 对忍者进行双重的攻击
        \-当角色被忍者碰到的时候, 这个角色就消失
        \-发明自己的游戏!
      courseD_scrat_ramp1: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_scrat_ramp2: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_scrat_ramp3: |-
        _"这只猪把我的羽毛弄皱了。"_

        这里有一个额外的模块会让小鸟坠落。
        将其拖回工具箱来扔掉它。
      courseD_scrat_ramp4: 躲开TNT炸药，否则羽毛会被炸飞！
      courseD_scrat_ramp5: |-
        _"沿着这条路，让我到猪那里！"_

        躲开TNT炸药。
      courseD_scrat_ramp6: |-
        _"保持冷静，帮我找到那只坏猪。否则，我会生气的！"_

        当你将几个同样的模块排成一列时，试试将它们挪到`重复`循环里。这能更少的代码做到相同的事情！
      courseD_scrat_ramp7: 帮助斯奎特得到橡子！
      courseD_scrat_ramp8: "**挑战：**用你学到的东西让斯奎特得到橡子!"
      courseE_artist_concept1: "重新创建图像。 \n\n\\-\n六边形边长50像素\n\n-   六边形之间相隔100像素\n-
        \  \\-\n    六边形笔的宽度是1像素，4像素和8像素。"
      courseE_artist_concept1_2018: "重新创建图像。 \n\n\\-\n六边形边长50像素\n\n-   六边形之间相隔100像素\n-
        \  \\-\n    六边形笔的宽度是1像素，4像素和8像素。"
      courseE_artist_concept4: |-
        重新创建这幅图。

        E每个正方形的边长是**20像素**，并且**每行有15个正方形**。
      courseE_artist_concept4_2018: |-
        重新创建这幅图。

        E每个正方形的边长是**20像素**，并且**每行有15个正方形**。
      courseE_artist_concept_challenge1: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png"
        width="200px"/>

        该挑战了！

        这个设计只用了你看到的模块来做的。你能想出怎么重新创建它吗？随意试错。不需要第一次就画得很完美。
      courseE_artist_concept_challenge1_2018: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png"
        width="200px"/>

        该挑战了！

        这个设计只用了你看到的模块来做的。你能想出怎么重新创建它吗？随意试错。不需要第一次就画得很完美。
      courseE_artist_concept_challenge2: 使用下面的代码创建五个风车的设计。
      courseE_artist_concept_challenge2_2018: 使用下面的代码创建五个风车的设计。
      courseE_artist_functions1: |-
        _"我僵尸艺术家。我喜欢画！"_

        帮助僵尸用边长100像素的正方形画眼镜。\
        镜片间的桥是75像素长。
      courseE_artist_functions10: |-
        这次，用8个25像素边长的六边形画线。

        -   为了画出每个六边形，重复6次，每次转60度。
        -   在每个六边形间跳25像素。
        -   为了画出一个钻石，你需要交替转向60度和120度。
      courseE_artist_functions10_2018: |-
        这次，用8个25像素边长的六边形画线。

        -   为了画出每个六边形，重复6次，每次转60度。
        -   在每个六边形间跳25像素。
        -   为了画出一个钻石，你需要交替转向60度和120度。
      courseE_artist_functions10_2019: |-
        这次，用8个25像素边长的六边形画线。

        -   为了画出每个六边形，重复6次，每次转60度。
        -   在每个六边形间跳25像素。
        -   为了画出一个钻石，你需要交替转向60度和120度。
      courseE_artist_functions2: |-
        函数能让你定义新的模块。

        我们将画正方形的模块挪到了一个叫做`draw a square`（画一个正方形）的函数里。这次，用`draw a square`（画一个正方形）函数来画个眼镜。

        <hr/>

        正方形间隔75像素。
      courseE_artist_functions2_2018: |-
        这里有一个叫做`draw a square`（画一个正方形）的函数。用它来完成这幅图。

        * * *

        正方形间隔75像素。
      courseE_artist_functions2_2019: |-
        这里有一个叫做`draw a square`（画一个正方形）的函数。用它来完成这幅图。

        * * *

        正方形间隔75像素。
      courseE_artist_functions3: |-
        我们很快就会回到函数部分。让我们先休息一下，练习画这个星星。

        可以通过增加一个重复循环来画这幅图。
      courseE_artist_functions3_2018: |-
        我们很快就会回到函数部分。让我们先休息一下，练习画这个星星。

        可以通过增加一个重复循环来画这幅图。
      courseE_artist_functions3_2019: |-
        我们很快就会回到函数部分。让我们先休息一下，练习画这个星星。

        可以通过增加一个重复循环来画这幅图。
      courseE_artist_functions4: |-
        现在，你已经能画一个星星了，试着画4个星星！

        -   每个行星的分支是25像素长
        -   在分支之间转45度
        -   在每个星星间跳100像素
      courseE_artist_functions5: |-
        什么时候画三个星星会比画4个难？当你需要跳过月亮的时候！

        只画出三个星星来完成这关。
      courseE_artist_functions5_2018: |-
        什么时候画三个星星会比画4个难？当你需要跳过月亮的时候！

        只画出三个星星来完成这关。
      courseE_artist_functions5_2019: |-
        什么时候画三个星星会比画4个难？当你需要跳过月亮的时候！

        只画出三个星星来完成这关。
      courseE_artist_functions6: "做得很好！ \n\n通过画一个正方形来制作这个窗户，然后在画另一个前转90度，以此类推。"
      courseE_artist_functions7: "让我们将画窗口的代码拿走，并增加到函数`画一个窗户`中。现在只要需要，就能调用这个函数了，还不用再写一遍这个代码。\n\n![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)\n\n试着创建一个`画一个窗户`的函数并调用它5次。小心门！\n\n-
        \  上面的的窗户每个之间50像素远。 \n-   下面的窗户和上面的相隔100像素。"
      courseE_artist_functions7_2018: "一个一个的画所有这些窗口会很痛苦！ \n\n试着创建一个`draw a window`（画一个窗户）函数，并调用它5次来解决这个问题。小心门！\n\n*
        * *\n\n-   每个窗户由4个 **25** 像素的正方形组成。\n-   最上面的窗户相距 **100** 像素。 \n-   下面的窗户离上面的有
        **150** 像素。"
      courseE_artist_functions7_2019: "一个一个的画所有这些窗口会很痛苦！ \n\n试着创建一个`draw a window`（画一个窗户）函数，并调用它5次来解决这个问题。小心门！\n\n*
        * *\n\n-   每个窗户由4个 **25** 像素的正方形组成。\n-   最上面的窗户相距 **100** 像素。 \n-   下面的窗户离上面的有
        **150** 像素。"
      courseE_artist_functions8: |-
        **挑战：**你知道怎么从其它函数_内部_调用函数吗？！

        创建尽可能多的，你觉得需要的函数来画这些50像素的正方形。
      courseE_artist_functions8a_2018: |-
        _"函数真容易!"_

        我们要开始构建一些奇特的东西！从为这个正方形创建函数开始。
      courseE_artist_functions8a_2019: |-
        _"函数真容易!"_

        我们要开始构建一些奇特的东西！从为这个正方形创建函数开始。
      courseE_artist_functions8b_2018: |-
        _"僵尸头晕了。"_

        从`draw a line of squares`（用正方形画一条线）函数中调用`draw a square`（画一个正方形）函数来让它简单点！

        * * *

        -   正方形之间相距 _50_ 像素。
      courseE_artist_functions8b_2019: |-
        _"僵尸头晕了。"_

        从`draw a line of squares`（用正方形画一条线）函数中调用`draw a square`（画一个正方形）函数来让它简单点！

        * * *

        -   正方形之间相距 _50_ 像素。
      courseE_artist_functions8c_2018: 再增加一个函数用`draw a line of squares`（用正方形画一条线）函数来创建交错正方形的堆栈。
      courseE_artist_functions8c_2019: 再增加一个函数用`draw a line of squares`（用正方形画一条线）函数来创建交错正方形的堆栈。
      courseE_artist_functions9: "用提供的有限的模块来创造这幅图。 \n\n-   每个三角形的边长是**50像素**  \n-
        \  \\-\n    为了画钻石，你需要交替转向**60度和120度**。"
      courseE_artist_functions9_2018: "**挑战**：用提供的有限的模块来创造这幅图。 \n\n-   每个三角形的边长是**50像素**
        \ \n-   \\-\n    为了画钻石，你需要交替转向**60度和120度**。"
      courseE_artist_functions9_2019: "**挑战**：用提供的有限的模块来创造这幅图。 \n\n-   每个三角形的边长是**50像素**
        \ \n-   \\-\n    为了画钻石，你需要交替转向**60度和120度**。"
      courseE_artist_functionsProj_2018: "**灵感:** 用你学过的知识来做自己想做的东西！  \n\n你能做一些像这个风车一样的东西吗？"
      courseE_artist_functionsProj_2019: "**灵感:** 用你学过的知识来做自己想做的东西！  \n\n你能做一些像这个风车一样的东西吗？"
      courseE_artist_functions_challenge1: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码, 看看它是如何工作的,
        然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge1_2018: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码,
        看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge1_2019: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码,
        看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge2: |-
        你不仅能跳到一些预先设定的位置，比如画布的角落，你还能用`跳到`命令来到任何想去的绝对位置上！试试看这个代码，理解它的原理，并做出自己的程序！

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      courseE_artist_functions_challenge2_2018: |-
        你不仅能跳到一些预先设定的位置，比如画布的角落，你还能用`跳到`命令来到任何想去的绝对位置上！试试看这个代码，理解它的原理，并做出自己的程序！

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      courseE_artist_functions_challenge2_2019: |-
        你不仅能跳到一些预先设定的位置，比如画布的角落，你还能用`跳到`命令来到任何想去的绝对位置上！试试看这个代码，理解它的原理，并做出自己的程序！

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      courseE_artist_functions_predict1: '这是用了我们已经定义过的程序的关卡。 '
      courseE_artist_functions_predict1_2018: '这是用了我们已经定义过的程序的关卡。 '
      courseE_artist_functions_predict1_2019: '这是用了我们已经定义过的程序的关卡。 '
      courseE_artist_ramp8: |-
        太棒了！让我们用`重复`和小艺术家画一个正方形！小艺术家模块和其它关有点不同，但概念是一样的。

        * * *

        ##### 正方形的每条边长度是200像素，需要转90度来形成每个角。
      courseE_artist_ramp8_2: |-
        太棒了！让我们用`重复`和小艺术家画一个正方形！小艺术家模块和其它关有点不同，但概念是一样的。

        * * *

        ##### 正方形的每条边长度是200像素，需要转90度来形成每个角。
      courseE_artist_ramp9: |-
        用你所学的来画个等边三角形。

        * * *

        ##### 这些边每条都是100像素长。每个角转120度。
      courseE_artist_ramp9_2: |-
        用你所学的来画个等边三角形。

        * * *

        ##### 这些边每条都是100像素长。每个角转120度。
      courseE_bee_concept1: "_\"你能相信这些都是花吗？\"_\n\n从每朵花收集所有的花蜜。 "
      courseE_bee_concept1_2018: "_\"你能相信这些都是花吗？\"_\n\n从每朵花收集所有的花蜜。 "
      courseE_bee_concept2: "帮助蜜蜂酿造所有蜂蜜。 \n\n只能在蜂窝酿蜂蜜，但可以检查每个空间是否有蜂窝。"
      courseE_bee_concept2_2018: "帮助蜜蜂酿造所有蜂蜜。 \n\n只能在蜂窝酿蜂蜜，但可以检查每个空间是否有蜂窝。"
      courseE_bee_concept5: "你能帮助蜜蜂从花里收集所有花蜜吗？ \n\n只能从花里收集花蜜，但可以检查任何空间，看看是否有花。"
      courseE_bee_concept5_2018: "你能帮助蜜蜂从花里收集所有花蜜吗？ \n\n只能从花里收集花蜜，但可以检查任何空间，看看是否有花。"
      courseE_bee_functions10: "_\"给我看看蜂蜜！\"_\n\n通过创建一个函数让蜜蜂做下面的事情来过关： \n\n-   朝路径前面的分支转向\n-
        \  向前移动\n-   酿造所有蜂蜜\n-   转向主路 \n-   转回原来的方向"
      courseE_bee_functions2: |-
        函数能执行多个模块来完成一个任务。

        使用`采2个花蜜`函数来从每朵花采花蜜。
      courseE_bee_functions3: 构建`获取5个`函数, 以便在这个关卡中使用。
      courseE_bee_functions4: |-
        `移动并获得花蜜`函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。

        用`移动并获得花蜜`函数收集所有的花蜜。
      courseE_bee_functions8: "**挑战：** 每次你运行这一关时，每朵花都有不同数量的花蜜。   \n\n创造一个函数，从每朵花里收集所有花蜜。"
      courseE_bee_functions_challenge1: 你得自己独立接受这个挑战。这可能比看起来更难！
      courseE_farmer_functions1: |-
        _"我们以前见过吗？我是收割者！"_

        帮助收割者到达南瓜并捡起它。
      courseE_farmer_functions10a1_2018: "**挑战:** 用你学过的知识，用最多19个模块来解决这个难题！"
      courseE_farmer_functions10a1_2019: "**挑战:** 用你学过的知识，用最多19个模块来解决这个难题！"
      courseE_farmer_functions10b: 用新函数两次来过关。
      courseE_farmer_functions11_predict: 找出要哪个函数，要删除哪个，然后通过这关！
      courseE_farmer_functions11_predict_2018: 找出要哪个函数，要删除哪个，然后通过这关！
      courseE_farmer_functions11_predict_2019: 找出要哪个函数，要删除哪个，然后通过这关！
      courseE_farmer_functions13_2018: |-
        用23个或更少的模块来解决这个难题。

        * * *

        ##### 每个芽会长出 _最多一个_ 玉米。要找到最佳方案的话，需要直接编辑函数。
      courseE_farmer_functions13_2019: |-
        用23个或更少的模块来解决这个难题。

        * * *

        ##### 每个芽会长出 _最多一个_ 玉米。要找到最佳方案的话，需要直接编辑函数。
      courseE_farmer_functions1_2018: |-
        _"我们以前见过吗？我是收割者！"_

        帮助收割者到达南瓜并捡起它。
      courseE_farmer_functions1_2019: |-
        _"我们以前见过吗？我是收割者！"_

        帮助收割者到达南瓜并捡起它。
      courseE_farmer_functions1a: |-
        _"噢，蔬菜长得到处都是！"_

        现在帮收割者捡起路上的所有玉米，直到最后的南瓜。

        * * *

        ##### 主意：路上的每个通往南瓜的正方形上都有最多_一个_玉米。你需要用`如果`语句在采摘玉米前判断一下！
      courseE_farmer_functions1a_2018: |-
        _"噢，蔬菜长得到处都是！"_

        现在帮收割者捡起路上的所有玉米，直到最后的南瓜。

        * * *

        ##### 注意：路上的每个通往南瓜的正方形上都有最多_一个_玉米。用提供的`check for corn`（检查玉米）函数来确保采摘了所有东西。
      courseE_farmer_functions1a_2019: |-
        _"噢，蔬菜长得到处都是！"_

        现在帮收割者捡起路上的所有玉米，直到最后的南瓜。

        * * *

        ##### 注意：路上的每个通往南瓜的正方形上都有最多_一个_玉米。用提供的`check for corn`（检查玉米）函数来确保采摘了所有东西。
      courseE_farmer_functions2b: |-
        帮助收割者捡起玉米和南瓜。

        * * *

        ##### 每个菜苗都会长出_最多一个_玉米。
      courseE_farmer_functions2b_2018: |-
        用函数帮助收割者捡起玉米和南瓜。

        * * *

        ##### 每个菜苗会长出_一个_玉米或什么都长不出来。
      courseE_farmer_functions2b_2019: |-
        用函数帮助收割者捡起玉米和南瓜。

        * * *

        ##### 每个菜苗会长出_一个_玉米或什么都长不出来。
      courseE_farmer_functions2ba: "_\"我感到很有用！\"_\n\n你注意到上一关中被重复的代码了吗？将它放在循环里不太好用，但我们**能**用函数。
        \ \n\n在这一管理，我们要把重复的代码移到一个叫做`玉米和南瓜`的函数里。现在，你需要做的是将小的`玉米和南瓜`**函数调用模块**放到代码里需要的地方。\n\n*
        * *\n\n##### \n\n每个菜苗都会长出_最多一个_玉米。"
      courseE_farmer_functions2ba_2018: "_\"我感到很有用！\"_\n\n你注意到上一关中被重复的代码了吗？将它放在循环里不太好用，但我们**能**用函数。
        \ \n\n在这一管理，我们要把重复的代码移到一个叫做`玉米和南瓜`的函数里。现在，你需要做的是将小的`玉米和南瓜`**函数调用模块**放到代码里需要的地方。\n\n*
        * *\n\n##### \n\n每个菜苗都会长出_最多一个_玉米。"
      courseE_farmer_functions2ba_2019: "_\"我感到很有用！\"_\n\n你注意到上一关中被重复的代码了吗？将它放在循环里不太好用，但我们**能**用函数。
        \ \n\n在这一管理，我们要把重复的代码移到一个叫做`玉米和南瓜`的函数里。现在，你需要做的是将小的`玉米和南瓜`**函数调用模块**放到代码里需要的地方。\n\n*
        * *\n\n##### \n\n每个菜苗都会长出_最多一个_玉米。"
      courseE_farmer_functions3c: "现在，通过从代码中拖拽并放到**函数定义**中来自己填满函数。  \n\n别忘了完成后，在程序里需要的地方加一个小的**函数调用**模块来使用这个函数。"
      courseE_farmer_functions3c1_2018: |-
        你注意到上一关有很多重复的代码了吗？我们可以调用`pick along path`（沿路采摘）函数来减少代码，并用一个新函数来调用其它函数！

        用`pick along path`（沿路采摘）来使用更少的模块解决这个难题。
      courseE_farmer_functions3c1_2019: |-
        你注意到上一关有很多重复的代码了吗？我们可以调用`pick along path`（沿路采摘）函数来减少代码，并用一个新函数来调用其它函数！

        用`pick along path`（沿路采摘）来使用更少的模块解决这个难题。
      courseE_farmer_functions3c_2018: "现在，通过从代码中拖拽并放到**函数定义**中来自己填满函数。  \n\n别忘了完成后，在程序里需要的地方加一个小的**函数调用**模块来使用这个函数。"
      courseE_farmer_functions3c_2019: "现在，通过从代码中拖拽并放到**函数定义**中来自己填满函数。  \n\n别忘了完成后，在程序里需要的地方加一个小的**函数调用**模块来使用这个函数。"
      courseE_farmer_functions4b: 使用你的新函数来通关。
      courseE_farmer_functions5c: 你的函数能在这里派上用场。
      courseE_farmer_functions6c: "_\"莴苣捡起所有作物！\"_\n\n现在菜苗是玉米**或**莴苣。在采摘之前，你需要在程序里加什么来检查每个菜苗？\n\n*
        * *\n\n##### \n\n主意，每个菜苗都会变成**一个**玉米或**一个**莴苣。"
      courseE_farmer_functions7a1_2018: |-
        _"**lettuce**函数用更少的代码做更多的事情！"_

        创建函数来让收割者走到正方形路径上，从每行的中间采摘单个莴苣。
      courseE_farmer_functions7a1_2019: |-
        _"**lettuce**函数用更少的代码做更多的事情！"_

        创建函数来让收割者走到正方形路径上，从每行的中间采摘单个莴苣。
      courseE_farmer_functions7b: "_\"收成太棒了！\"_\n\n帮助收割者在蜿蜒的路里找到方向，并在南瓜那里**左**转，在莴苣那里**右**转。
        \n\n_（别忘了采摘沿途所有的作物！）_"
      courseE_farmer_functions8a1_2018: 试着再写一次函数。有帮助吗？如何让它在本关中能工作？
      courseE_farmer_functions8a1_2019: 试着再写一次函数。有帮助吗？如何让它在本关中能工作？
      courseE_farmer_functions8b: "**挑战：** 不是迷宫里所有的角落都标出来了，这意味着需要多次用导航的代码来知道要去哪里。
        \ \n\n你能想出需要做什么吗？"
      courseE_farmer_functions9a1_2018: |-
        \*这一关太棒了!\*\*

        你的函数还能在这一关中有用吗？
      courseE_farmer_functions9a1_2019: |-
        \*这一关太棒了!\*\*

        你的函数还能在这一关中有用吗？
      courseE_farmer_functions9b: 好好看看这关。你能想出规律吗？
      courseE_farmer_ramp11a: "天哪！土堆太大了，很难猜有多少土。  \n\n* * *\n\n我们在工具箱里增加了一个新模块，叫做`当有土堆时`。使用它，当有土时，就不停的用它来移除土！ "
      courseE_farmer_ramp11a_2018: "天哪！土堆太大了，很难猜有多少土。  \n\n* * *\n\n我们在工具箱里增加了一个新模块，叫做`当有土堆时`。使用它，当有土时，就不停的用它来移除土！ "
      courseE_farmer_ramp11a_2019: "天哪！土堆太大了，很难猜有多少土。  \n\n* * *\n\n我们在工具箱里增加了一个新模块，叫做`当有土堆时`。使用它，当有土时，就不停的用它来移除土！ "
      courseE_farmer_ramp11b: 让我们再试试，但有更多的土堆了！
      courseE_farmer_ramp11b_2018: 让我们再试试，但有更多的土堆了！
      courseE_farmer_ramp11b_2019: 让我们再试试，但有更多的土堆了！
      courseE_farmer_ramp12_forswap: 捡起所有的莴苣。
      courseE_farmer_ramp12_forswap_2018: 捡起所有的莴苣。
      courseE_farmer_ramp12_forswap_2019: 捡起所有的莴苣。
      courseE_farmer_ramp12b: 现在收割者需要采摘所有莴苣。在一个`重复`循环里使用`当有莴苣时`来收获所有的！
      courseE_farmer_ramp12b_2018: 现在收割者需要采摘所有莴苣。在一个`重复`循环里使用`当有莴苣时`来收获所有的！
      courseE_farmer_ramp12b_2019: 现在收割者需要采摘所有莴苣。在一个`重复`循环里使用`当有莴苣时`来收获所有的！
      courseE_farmer_ramp12c: "太美好了！看看所有这些菜苗。它们有些会长成玉米，有些会是莴苣。 \n\n一直走到路的尽头，当有莴苣时，采摘莴苣，当有玉米时，采摘玉米。 "
      courseE_farmer_ramp12c_2018: "莴苣现在只在路的尽头。\n沿着路走，**直到**碰到一颗莴苣，然后**当这里还有莴苣时**，不断的采摘它。
        \ "
      courseE_farmer_ramp12c_2019: "太美好了！看看所有这些菜苗。它们有些会长成玉米，有些会是莴苣。 \n\n一直走到路的尽头，当有莴苣时，采摘莴苣，当有玉米时，采摘玉米。 "
      courseE_farmer_ramp12d: "同样的技术对花蜜和蜂蜜都有用！ \n\n看看所有这些云。有些会有蜂蜜，另一些有花蜜。\\\n帮助蜜蜂沿着路通过这关。"
      courseE_farmer_ramp12d_2018: "莴苣现在只在菜园的尽头。\n沿着每条路走，**直到**碰到一颗莴苣，然后**当这里还有莴苣时**，不断的采摘它。
        \ "
      courseE_farmer_ramp12d_2019: "同样的技术对花蜜和蜂蜜都有用！ \n\n看看所有这些云。有些会有蜂蜜，另一些有花蜜。\\\n帮助蜜蜂沿着路通过这关。"
      courseE_farmer_ramp12e: "同样的技术对花蜜和蜂蜜都有用！ \n\n看看所有这些云。有些会有蜂蜜，另一些有花蜜。\\\n帮助蜜蜂沿着路通过这关。"
      courseE_farmer_ramp12e_2018: "同样的技术对花蜜和蜂蜜都有用！ \n\n看看所有这些云。有些会有蜂蜜，另一些有花蜜。\\\n帮助蜜蜂沿着路通过这关。"
      courseE_farmer_ramp12e_2019: "同样的技术对花蜜和蜂蜜都有用！ \n\n看看所有这些云。有些会有蜂蜜，另一些有花蜜。\\\n帮助蜜蜂沿着路通过这关。"
      courseE_farmer_ramp12f: "**挑战**：获得所有庄稼的唯一办法是，一直往前走，直到获得莴苣。然后**如果**左边有路，就向左转。否则，向右转。"
      courseE_farmer_ramp12f_2018: "**挑战**：获得所有庄稼的唯一办法是，一直往前走，直到获得莴苣。然后**如果**左边有路，就向左转。否则，向右转。"
      courseE_farmer_ramp12f_2019: "**挑战**：获得所有庄稼的唯一办法是，一直往前走，直到获得莴苣。然后**如果**左边有路，就向左转。否则，向右转。"
      courseE_farmer_ramp12g: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12g_2018: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12g_2019: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_playLab_challenge1: "-   **松鼠**很害怕看到**恐龙**来到镇上！勇敢的**骑士**能帮忙赶走恐惧吗？\\*\n\n规则：\n\n1.
        \ _碰到松鼠得分。_\n2.  _碰到恐龙丢很多分。_\n\n这是和玩过的不同的游戏！玩一玩，看看它是如何工作的。 \n\n当你有足够的分数或者分数太低时，会发生一些事情。添加一些代码到`游戏胜利`和`游戏失败`函数中，来让游戏按照它的方法工作。
        \n点击提示获得主意！"
      courseE_playLab_scaffold1: |-
        你学到的大量知识太令人惊奇了！让我们一步步做个游戏。

        用工具箱里的新模块，选择一个新背景，然后捡起一个演员放到游戏中。
      courseE_playLab_scaffold2: |-
        用事件处理函数和动作这样的模块来让你的玩家根据键盘方向键来移动。

        让玩家到达目标来通过这关。
      courseE_playLab_scaffold3: |-
        让我们添加更多的角色到你的游戏里！

        用`设置演员`模块来增加更多的角色，然后移动到目标来完成这关。
      courseE_playLab_scaffold4: |-
        让好几个角色动起来，是游戏的好的开始，但我们需要增加更多的东西，让它感觉起来是个真游戏。让我们添加分数！

        用`当演员碰到`这样的事件模块来改变分数。得到10分来通关。
      courseE_playLab_scaffold5: 做的好！你有了一个游戏所有基本的部分了。现在花点时间来确保游戏会像你像的那样工作。加入一个胜利或失败的方法，然后玩到触发这些条件。
      courseE_playLab_scaffold6: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      courseF_artist_for1: "**自由发挥：** 体验`计数循环`和`counter`（计数器）变量。  \n\n拖出一些模块，看看会发生什么。 "
      courseF_artist_for10: |-
        **自由发挥：** 试着用`counter`（计数器）变量和其它画图元素来制作像这样的神奇的图画。

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2018: |-
        **自由发挥：** 试着用`counter`（计数器）变量和其它画图元素来制作像这样的神奇的图画。

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2019: |-
        **自由发挥：** 试着用`counter`（计数器）变量和其它画图元素来制作像这样的神奇的图画。

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for1_2018: "**自由发挥：** 体验`计数循环`和`counter`（计数器）变量。  \n\n拖出一些模块，看看会发生什么。 "
      courseF_artist_for1_2019: "**自由发挥：** 体验`计数循环`和`counter`（计数器）变量。  \n\n拖出一些模块，看看会发生什么。 "
      courseF_artist_for2: 在`计数循环`循环里使用`重复`循环来创建从50像素到100像素边长的三角形的堆。
      courseF_artist_for2_2018: 在`计数循环`循环里使用`重复`循环来创建从50像素到100像素边长的三角形的堆。
      courseF_artist_for2_2019: 在`计数循环`循环里使用`重复`循环来创建从50像素到100像素边长的三角形的堆。
      courseF_artist_for3: 创建这些边长从20到200像素的三角形，每个都比上一个要大20像素。
      courseF_artist_for3_2018: 创建这些边长从20到200像素的三角形，每个都比上一个要大20像素。
      courseF_artist_for3_2019: 创建这些边长从20到200像素的三角形，每个都比上一个要大20像素。
      courseF_artist_for5: |-
        只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？

        * * *

        提示：你需要移除某项！
      courseF_artist_for5_2018: |-
        只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？

        * * *

        提示：你需要移除某项！
      courseF_artist_for5_2019: |-
        只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？

        * * *

        提示：你需要移除某项！
      courseF_artist_for6: |-
        如果每次都比正常的多转或少转一些角度，这会创造一个有规律的效果。

        重新创建上一关的代码，但是每次转89度来创造螺旋形的正方形。
      courseF_artist_for6_2018: |-
        如果每次都比正常的多转或少转一些角度，这会创造一个有规律的效果。

        重新创建上一关的代码，但是每次转89度来创造螺旋形的正方形。
      courseF_artist_for6_2019: |-
        如果每次都比正常的多转或少转一些角度，这会创造一个有规律的效果。

        重新创建上一关的代码，但是每次转89度来创造螺旋形的正方形。
      courseF_artist_for7: '将上一关的代码做三个小小的改动来画出这个！  '
      courseF_artist_for7_2018: '将上一关的代码做三个小小的改动来画出这个！  '
      courseF_artist_for7_2019: '将上一关的代码做三个小小的改动来画出这个！  '
      courseF_artist_for9: |-
        **灵感：** 用`set alpha`（设置透明度）模块中的计数器来画像这个淡出中心的效果。\
        （这个六边形图形是通过60度转向来画的。）
      courseF_artist_for9_2018: |-
        **灵感：** 用`set alpha`（设置透明度）模块中的计数器来画像这个淡出中心的效果。\
        （这个六边形图形是通过60度转向来画的。）
      courseF_artist_for9_2019: |-
        **灵感：** 用`set alpha`（设置透明度）模块中的计数器来画像这个淡出中心的效果。\
        （这个六边形图形是通过60度转向来画的。）
      courseF_artist_for_challenge1: |-
        你能想出如何重新创建这幅画吗？

        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      courseF_artist_for_challenge1_2018: |-
        你能想出如何重新创建这幅画吗？

        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      courseF_artist_for_challenge1_2019: |-
        你能想出如何重新创建这幅画吗？

        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      courseF_artist_for_challenge2: "你能想出如何重画这幅画吗？ \n\n<img\nsrc=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      courseF_artist_for_challenge2_2018: "你能想出如何重画这幅画吗？ \n\n<img\nsrc=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      courseF_artist_for_challenge2_2019: "你能想出如何重画这幅画吗？ \n\n<img\nsrc=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      courseF_artist_fwp1: 今天，我们要接着用强大的函数编辑器。看看你是否记得如何编辑`画一个正方形`函数来找到缺陷。
      courseF_artist_fwp2: "编辑函数来接受一个叫做`length`（长度）的参数。 \n\n这个正方形的边应该比上一个长25像素。第一个正方形边长25像素。"
      courseF_artist_fwp2_predict1: "编辑函数来接受一个叫做`length`（长度）的参数。 \n\n这个正方形的边应该比上一个长25像素。第一个正方形边长25像素。将'???'替换成正确的值来画这幅图。"
      courseF_artist_fwp3: "现在从头来创建函数！  \n\n创建一个叫做`draw a square`（画一个正方形）的函数，然后用它画出4个盒子的轮廓。
        \n确保给`length`（长度）加一个参数。\n\n* * *\n\n从右上角开始，这些盒子的宽是50，100，150和200。"
      courseF_artist_fwp4: |-
        做的好！现在编辑函数来增加一个多边形边数的函数。

        所有形状的边长都是100像素。
      courseF_artist_fwp5: "用上一关的函数来画这一系列的形状。 \n\n三角形有21像素的边，接下来的每个形状都比上一个长7像素。\\\n用`multiplication`（乘法）模块来确保每个只有一次函数调用。\n\n*
        * *\n\n`乘法` 模块像这样 <xml><block type=\"math_arithmetic\"\ninline=\"true\">\n
        \     <title name=\"OP\">MULTIPLY</title>\n    </block></xml>"
      courseF_artist_fwp6: |-
        **挑战：** 编辑`画一个螺旋的边缘`来使用`length`（长度）和`sides`（边数）参数，然后重新创建这些形状。

        \-
        这些正方形从3个像素到90像素。

        -   这些六边形从3像素到100像素。
        -   这些三角形从3像素到95像素。
      courseF_artist_fwp7: |-
        完成`画一个螺旋边缘`的函数来为一个螺旋的中心请求最小的长度。

        \-
        中心最短边的正方形是50像素长

        -   外面螺旋形最长边是200像素长
      courseF_artist_fwp8: |-
        自由发挥！你能想出如何用刚刚创建的函数来画这个图形吗？

        -   红色的螺旋从50像素到200像素
        -   蓝色螺旋从25像素到150像素
        -   绿色螺旋从100像素到350像素
      courseF_artist_fwp9: "**自由发挥：**下面是你写的函数，还有更多的让你摆弄的函数。用笔的宽度来看看你的画看起来会如何的不同！建议都在提示里！"
      courseF_artist_fwp_challenge1: |-
        尝试运行此程序。
        进行一些更改，看看会发生什么。你能弄清楚它是如何工作的吗？你可以把这段程序删掉并且重写成其他任何你想要的程序。
      courseF_artist_fwp_challenge2: "哇！用你在前一关学到的来画这样的图形。\n\n_提示：用在数来让代码更简单。_\n\n<br/>\n<img
        src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\n<br/>
        \ "
      courseF_artist_variables10: |-
        这是你上一关的代码。试着用其它方法编辑变量。

        -   如果你从`length`（长度）小于150开始，会发生什么？
        -   如果每次都给变量乘以1.25会发生什么？
        -   如果转119度，代码会做什么？
      courseF_artist_variables10_2018: |-
        这是你上一关的代码。试着用其它方法编辑变量。

        -   如果你从`length`（长度）小于150开始，会发生什么？
        -   如果每次都给变量乘以1.25会发生什么？
        -   如果转119度，代码会做什么？
      courseF_artist_variables10_2019: |-
        这是你上一关的代码。试着用其它方法编辑变量。

        -   如果你从`length`（长度）小于150开始，会发生什么？
        -   如果每次都给变量乘以1.25会发生什么？
        -   如果转119度，代码会做什么？
      courseF_artist_variables2: |-
        现在用另一个循环来画这相邻的三个三角形。

        你可以嵌套上一关的代码。
      courseF_artist_variables2_2018: |-
        现在用另一个循环来画这相邻的三个三角形。

        你可以嵌套上一关的代码。
      courseF_artist_variables2_2019: |-
        现在用另一个循环来画这相邻的三个三角形。

        你可以嵌套上一关的代码。
      courseF_artist_variables3: |-
        在事情变得难办前，你能将长度50放到一个变量里，以便下面几关我们都能用到它吗？

        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables3_2018: |-
        在事情变得难办前，你能将长度50放到一个变量里，以便下面几关我们都能用到它吗？

        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables3_2019: |-
        在事情变得难办前，你能将长度50放到一个变量里，以便下面几关我们都能用到它吗？

        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables4: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables4_2018: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables4_2019: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables6: |-
        不好！

        我们实际上需要三角形是60像素宽，并且跳50像素。

        你不想使用一个变量吗？
      courseF_artist_variables6_2018: |-
        不好！

        我们实际上需要三角形是60像素宽，并且跳50像素。

        你不想使用一个变量吗？
      courseF_artist_variables6_2019: |-
        不好！

        我们实际上需要三角形是60像素宽，并且跳50像素。

        你不想使用一个变量吗？
      courseF_artist_variables6a: 用你学到的来制作这个80像素边长的正方形的图案，并且在每个之间让小艺术家跳过80像素。
      courseF_artist_variables6a_2018: 用你学到的来制作这个80像素边长的正方形的图案，并且在每个之间让小艺术家跳过80像素。
      courseF_artist_variables6a_2019: 用你学到的来制作这个80像素边长的正方形的图案，并且在每个之间让小艺术家跳过80像素。
      courseF_artist_variables7: |-
        让我们画150像素边长的三角形来开始这个章节。

        确保使用`length`（长度）变量和重复循环。
      courseF_artist_variables7_2018: |-
        让我们画150像素边长的三角形来开始这个章节。

        确保使用`length`（长度）变量和重复循环。
      courseF_artist_variables7_2019: |-
        让我们画150像素边长的三角形来开始这个章节。

        确保使用`length`（长度）变量和重复循环。
      courseF_artist_variables8: |-
        重新创建上一关的三角形代码，但这次要用`设置长度为`模块来在每次循环迭代的结束时，将`length`（长度）变量改为`length`+10。

        <xml>
        <block
        type="variables_set" inline="false">
                                <title
        name="VAR">length</title>
                                <value name="VALUE">
                                  <block
        type="math_arithmetic" inline="true">
                                    <title
        name="OP">ADD</title>
                                    <value name="A">
                                      <block
        type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value
        name="B">
                                      <block type="math_number">
                                        <title
        name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        三角形的第一条边长是150像素。
      courseF_artist_variables8_2018: |-
        重新创建上一关的三角形代码，但这次要用`设置长度为`模块来在每次循环迭代的结束时，将`length`（长度）变量改为`length`+10。

        <xml>
        <block
        type="variables_set" inline="false">
                                <title
        name="VAR">length</title>
                                <value name="VALUE">
                                  <block
        type="math_arithmetic" inline="true">
                                    <title
        name="OP">ADD</title>
                                    <value name="A">
                                      <block
        type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value
        name="B">
                                      <block type="math_number">
                                        <title
        name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        三角形的第一条边长是150像素。
      courseF_artist_variables8_2019: |-
        重新创建上一关的三角形代码，但这次要用`设置长度为`模块来在每次循环迭代的结束时，将`length`（长度）变量改为`length`+10。

        <xml>
        <block
        type="variables_set" inline="false">
                                <title
        name="VAR">length</title>
                                <value name="VALUE">
                                  <block
        type="math_arithmetic" inline="true">
                                    <title
        name="OP">ADD</title>
                                    <value name="A">
                                      <block
        type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value
        name="B">
                                      <block type="math_number">
                                        <title
        name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        三角形的第一条边长是150像素。
      courseF_artist_variables9: |-
        是时候来些艺术了！

        看看当你重复上一关的代码**30**次, 而不是3次会是什么结果！

        你可以选择任何颜色的线条或图案。
      courseF_artist_variables9_2018: |-
        是时候来些艺术了！

        看看当你重复上一关的代码**30**次, 而不是3次会是什么结果！

        你可以选择任何颜色的线条或图案。
      courseF_artist_variables9_2019: |-
        是时候来些艺术了！

        看看当你重复上一关的代码**30**次, 而不是3次会是什么结果！

        你可以选择任何颜色的线条或图案。
      courseF_artist_variablesFP: "**自由发挥：** 用你学会的知识来创建自己的图画。 \n\n怎样使用变量来创建正方形，五边形或六边形？"
      courseF_artist_variablesFP_2018: "**自由发挥：** 用你学会的知识来创建自己的图画。 \n\n怎样使用变量来创建正方形，五边形或六边形？"
      courseF_artist_variablesFP_2019: "**自由发挥：** 用你学会的知识来创建自己的图画。 \n\n怎样使用变量来创建正方形，五边形或六边形？"
      courseF_artist_variables_challenge1: |-
        挑战警报！
        你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      courseF_artist_variables_challenge1_2018: |-
        挑战警报！
        你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      courseF_artist_variables_challenge1_2019: |-
        挑战警报！
        你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      courseF_artist_variables_challenge2: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>

        你已经学会了制作像这样的图案的所有知识了！这关有点困难。你能坚持下去，直到找到解决方案吗？
      courseF_artist_variables_challenge2_2018: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>

        你已经学会了制作像这样的图案的所有知识了！这关有点困难。你能坚持下去，直到找到解决方案吗？
      courseF_artist_variables_challenge2_2019: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>

        你已经学会了制作像这样的图案的所有知识了！这关有点困难。你能坚持下去，直到找到解决方案吗？
      courseF_bee_conditionals10: |-
        即使你知道每个点会有什么，条件也会有帮助！

        收集所有的花蜜，并酿造所有的蜂蜜。
      courseF_bee_conditionals1_predict1: |-
        _"这朵云挡住了我的视线！"_

        检查是否云下面有花。如果有花，采花蜜。
      courseF_bee_conditionals2: "_\"太多云了，一朵花都看不到！\"_\n\n在采花蜜前，检查每朵云下面是否藏着一朵花。如果云下面有花，蜜蜂需要采**一次**花蜜。
        \n\n记住：不是所有云下面藏着一样的东西！"
      courseF_bee_conditionals3: 你只能从花上采集花蜜，但你能检查任何空间，看看是否那里有花。如果在任何云下面有花，蜜蜂需要采集**一次**花蜜。
      courseF_bee_conditionals4: |-
        在这一关中，我们知道每朵花都有正好一个花蜜，但是花没有均匀的分布。

        用尽可能少的模块采集所有花蜜。
      courseF_bee_conditionals7_predict2: |-
        有时云下面是花，有时候是蜂窝。

        用`如果/否则`来在花那里采花蜜，在蜂窝那里酿蜂蜜。
      courseF_bee_conditionals8: |-
        **挑战：** 这些云下面要么有一朵花，要么有一个蜂窝！

        如果是花，就采一次花蜜。否则，就酿一次蜂蜜（因为是蜂窝）。
      courseF_bee_for10: "**挑战：** 还用你学会的，关于`计数循环`的知识来试着解决这个问题。 \n\n记住，你可能需要多运行几次才能想出所有的步骤。"
      courseF_bee_for10_2018: "**挑战：** 还用你学会的，关于`计数循环`的知识来试着解决这个问题。 \n\n记住，你可能需要多运行几次才能想出所有的步骤。"
      courseF_bee_for10_2019: "**挑战：** 还用你学会的，关于`计数循环`的知识来试着解决这个问题。 \n\n记住，你可能需要多运行几次才能想出所有的步骤。"
      courseF_bee_for11: |-
        如果你的循环是递减的，就在每次迭代时，从计数器变量中**减去**增量。

        什么样的增量能够收集15，然后12，然后9，6，3个花蜜？
      courseF_bee_for11_2018: |-
        如果你的循环是递减的，就在每次迭代时，从计数器变量中**减去**增量。

        什么样的增量能够收集15，然后12，然后9，6，3个花蜜？
      courseF_bee_for11_2019: |-
        如果你的循环是递减的，就在每次迭代时，从计数器变量中**减去**增量。

        什么样的增量能够收集15，然后12，然后9，6，3个花蜜？
      courseF_bee_for2: |-
        写代码帮助蜜蜂收集所有的花蜜。

        这一关需要大量的模块，但我们会在下一关学到一种更容易的方法。
      courseF_bee_for2_2018: |-
        写代码帮助蜜蜂收集所有的花蜜。

        这一关需要大量的模块，但我们会在下一关学到一种更容易的方法。
      courseF_bee_for2_2019: |-
        写代码帮助蜜蜂收集所有的花蜜。

        这一关需要大量的模块，但我们会在下一关学到一种更容易的方法。
      courseF_bee_for6: |-
        你也能用`计数循环`递减。

        试着通过从**5**到**1**，每次减**1**来递减计数收集花蜜。
      courseF_bee_for6_2018: |-
        你也能用`计数循环`递减。

        试着通过从**5**到**1**，每次减**1**来递减计数收集花蜜。
      courseF_bee_for6_2019: |-
        你也能用`计数循环`递减。

        试着通过从**5**到**1**，每次减**1**来递减计数收集花蜜。
      courseF_bee_for7: |-
        循环里的最后一个数字叫做**"增量"**。每次循环运行时，counter（计数器）变量就会改变**增量**这么多值。

        试试用**增量**2来收集花。
      courseF_bee_for7_2018: |-
        循环里的最后一个数字叫做**"增量"**。每次循环运行时，counter（计数器）变量就会改变**增量**这么多值。

        试试用**增量**2来收集花。
      courseF_bee_for7_2019: |-
        循环里的最后一个数字叫做**"增量"**。每次循环运行时，counter（计数器）变量就会改变**增量**这么多值。

        试试用**增量**2来收集花。
      courseF_bee_for8: |-
        你已经明白了！

        应该**递增**多少才能收集到3, 6, 9, 12, 15个花蜜？
      courseF_bee_for8_2018: |-
        你已经明白了！

        应该**递增**多少才能收集到3, 6, 9, 12, 15个花蜜？
      courseF_bee_for8_2019: |-
        你已经明白了！

        应该**递增**多少才能收集到3, 6, 9, 12, 15个花蜜？
      courseF_bee_for9: |-
        现在，让我们将`counter`（计数器）变量和`math`（数学）模块混合起来！

        如何能用`counter`（计数器）变量来用最少的模块浏览花园？
      courseF_bee_for9_2018: |-
        现在，让我们将`counter`（计数器）变量和`math`（数学）模块混合起来！

        如何能用`counter`（计数器）变量来用最少的模块浏览花园？
      courseF_bee_for9_2019: |-
        现在，让我们将`counter`（计数器）变量和`math`（数学）模块混合起来！

        如何能用`counter`（计数器）变量来用最少的模块浏览花园？
      courseF_bee_for_challenge1: |-
        用这个`计数循环`来收集所有的花蜜。不可思议！

        这里有些简单的动作，你会希望来`重复'计数器'次`。
      courseF_bee_for_challenge1_2018: |-
        用这个`计数循环`来收集所有的花蜜。不可思议！

        这里有些简单的动作，你会希望来`重复'计数器'次`。
      courseF_bee_for_challenge1_2019: |-
        用这个`计数循环`来收集所有的花蜜。不可思议！

        这里有些简单的动作，你会希望来`重复'计数器'次`。
      courseF_bee_for_challenge2: 用最少的模块来通过这一关。
      courseF_bee_for_challenge2_2018: 用最少的模块来通过这一关。
      courseF_bee_for_challenge2_2019: 用最少的模块来通过这一关。
      courseF_bee_functions2: "为了让事情简单点儿，是时候学习函数了！\n\n从现在开始，你会用到一个新的_函数编辑器_。这个编辑器是独立的窗口，会在你编辑函数的时候出现。当你在工作区写代码时，你不会看到你的函数的所有代码。但是别担心...它一直都在的！
        \n\n* * *\n\n让我们从这个函数开始练习，它只在蜜蜂在花上时，才采花蜜。要看见里面的代码，点击蓝色的\"编辑\"按钮！\n\n用`只采花蜜`函数来从每朵花收集花蜜。"
      courseF_bee_functions3: 现在该你了，制作一个函数来**只**在有蜂窝的时候才酿蜂蜜！点击"编辑"来创建`只酿蜂蜜`函数，然后用它来通过这关。
      courseF_bee_functions3a: |-
        每朵云要么藏着一朵花，或一个蜂窝！写一个函数，如果在花上就采花蜜，否则酿蜂蜜。

        用你的函数来通过这关！
      courseF_bee_functions4: "你知道你能从一个函数_里_调用另一个函数吗？ \n\n在新的`移动并检查`函数里调用你的`检查花蜜或蜂蜜`函数，来帮助蜜蜂转弯，到达的云下的东西，然后转回来！"
      courseF_bee_functions5a: 现在，创建`移动并检查`函数来让蜜蜂能够无论右边是否有路都到达云那里，然后用它通过这关！
      courseF_bee_functions6: |-
        _"这块地太神奇了！"_

        创建你自己的函数来帮助蜜蜂在花那里左转，在蜂窝那里右转来通过这个迷宫。别忘了沿途收集所有花蜜，并酿蜂蜜！
      courseF_bee_functions7: |-
        从上一关中重建你的函数来通过这个迷宫。

        在蜂窝向左转，在花那里向右转。
        **注意：**有些角落没有标出来！
      courseF_bee_functions8a: |-
        在云的下面，可能有不知道有多少花蜜的花，或者不知道有多少蜂蜜的蜂窝

        你能写一个程序来处理这些情况吗？
      courseF_bee_functionsPre7: |-
        现在，试着创建一个函数来通过这个迷宫。这和上次的有什么不同？

        在蜂窝那里向左转，在花那里向右转。\
        **注意：** 有些角落没有标记！
      courseF_bee_functions_challenge1: 创建一个新的函数, 当前方有路的时候，收集所有的花蜜和蜂蜜。用它来完成关卡!
      courseF_bee_functions_challenge2: 用你所学的来解决这个关卡。
      courseF_bee_fwp1: "检查云下面，来看看是否花里有花蜜。 \n\n在整个阶段，每朵花都有正好**一个**花蜜，每个蜂窝也会有正好**一个**蜂蜜。 "
      courseF_bee_fwp2: "这里有一些通过上一关的代码。\\\n让我们将它拖到一个函数里，然后调用这个函数来检查一行花蜜。 \n\n* * *\n\n这现在看起来是很奇怪的一步，但它很快就真的有帮助！"
      courseF_bee_fwp3: "是时候测试函数了！ \n\n让我们看看是否有更容易的方法收集所有三行花蜜。"
      courseF_bee_fwp4: "_\"你的函数怎么样了？\"_   \n\n在这里，我们需要一些调节。点击\"编辑\"来增加一个`length`（长度）参数到函数里，这样当每行长度不同时，它也能工作。"
      courseF_bee_fwp5: |-
        _"到目前为止，你一直做得很棒！"_

        让我们用函数来采花蜜。
      courseF_bee_fwp6: "当你将函数和其它变成元素混合起来时，你的代码能够更短，更有效。  \n\n* * *\n\n你想在函数里用什么模块来为这一关创建一个又短又美的解决方案？"
      courseF_bee_fwp7: "**挑战：**有些东西看起来有点不同。编辑你的函数来酿蜂蜜。"
      courseF_bee_fwp_challenge1: 在函数中使用一个`计数循环`来收集所有的玉米。通过使用`length`（长度）参数，同样的`计数循环`可以数到不同的最大值。
      courseF_bee_fwp_challenge2: |-
        _"**莴苣** 看看你是否能通过最后的测试！吧你学到的都用上！"_

        在函数里用一个`计数循环`来收集这样的所有蔬菜。
        用`length`（长度）参数来让`计数循环`为不同的最大值计数。通过在函数外使用第二个`计数循环`来让你的程序尽可能的短。

        祝你好运！
      courseF_bee_variables_3_2018: |-
        _"这个花园太棒了！"_

        这一关中，每次补丁需要变量比上一次少1。如果想在这关用同样的函数，要在每次循环时让变量减少1。
      courseF_bee_variables_3_2019: |-
        _"这个花园太棒了！"_

        这一关中，每次补丁需要变量比上一次少1。如果想在这关用同样的函数，要在每次循环时让变量减少1。
      courseF_bee_variables_4_2018: |-
        \*"不可思议!"

        编辑代码，让它在本关中也能工作。
      courseF_bee_variables_4_2019: |-
        \*"不可思议!"

        编辑代码，让它在本关中也能工作。
      courseF_playlab_variables1a: |-
        变量能够用来存放晚一些想用的文本。

        通过将这个文本赋值给`shout`（喊叫）变量，让足球运动员琪琪喊出："进球了！"
      courseF_playlab_variables2b: |-
        我们能通过将几段文本和变量混合到一起来做出更有趣的句子。

        通过将`color`（颜色）变量放到`连接`模块的空位中，来将它插入到句子中间。
      courseF_playlab_variables3b_josh: '帮助琪琪和布赖恩对话，使用变量`age`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables4b: |-
        现在，海盗有些问题要问布赖恩。

        代码用了一个`问`模块，因此你可以在点击"运行"按钮后，输入布赖恩的回答。

        将变量放到正确的地方来创建这个对话。
      courseF_playlab_variables5c: |-
        让我们将`问`模块和一个`如果/否则`模块组合在一起来做一个游戏！

        海盗要问你一个问题。拖拽一个`answer`（回答）变量到`如果`语句的条件中，来检查是否你输入了正确的颜色。
      courseF_playlab_variables6c: |-
        在这个阶段剩下来的时间，我们要用多个`问`模块和多个`如果/否则`模块来创造一个**你**控制的游戏！

        从设置"codename"（代号）变量开始，来设置一个你能记得的词语。然后用一个`问`模块来从用户那里获得一个代号。你需要`如果/否则`模块来看是否输入的代号和你设置的代号是一样的。
      courseF_playlab_variables7b: "是时候做你自己的项目了！ \n\n将一些问题和答案创建并编制到自己的故事里。\n\n如果你需要创意，点击提示图标。"
      courseF_playlab_variables7c: |-
        添加另一个`ask`（问）模块来让用户猜一个颜色。

        保留`如果/否则`语句，这样你的代号能永远赢的游戏，但是其它的代号都会输。
      courseF_playlab_variables8c: 用`连接`模块（在工具箱的"文本"里）来制作一个输/赢的消息，通过将`codename`（代号）和`color`（颜色）变量放到响应中来进行个性化。
      courseF_playlab_variables_challenge1: 使用这些模块使演员分享一个敲门问答的笑话。改变警句和设置来讲你自己的笑话！
      courseF_playlab_variables_challenge2: |-
        现在是捉人游戏！捉住小猫（演员2）得2分。捉住企鹅（演员3）得3分。得到正好10分就赢了！

        但是小心，当小猫和企鹅互相碰到时，他们就会把分数要回去。

        * * *

        添加所需的模块能让这个游戏按照解说的运行。

        -   怎样让小狗能用方向键往所有方向移动？
        -   怎样在小狗捉住小猫或者企鹅时加分？
        -   怎样在小猫和企鹅碰到时扣分？
      coursea_maze_ramp1_2018: 让小鸟到达猪那里，将<xml><block type="maze_moveEast"/></xml>模块粘到<xml><block
        type="when_run"/></xml>模块的下面，然后点击"▶ 运行"！
      coursea_maze_ramp1_2019: 让小鸟到达猪那里，将<xml><block type="maze_moveEast"/></xml>模块粘到<xml><block
        type="when_run"/></xml>模块的下面，然后点击"▶ 运行"！
      frozen circle: 圆形是一种特殊的形. 你可以计算出什么号码能取代问号来画圆形吗?
      frozen circle function: 使用新的"创建一个圆"块来创建 10 个相互重叠的圆圈。画圈之间别忘了跳一下哦。
      frozen circle function in circle: 现在让我们创建20个交叠的圆圈，在每圆圈之间转18度。
      frozen circle function with parameter: 这里有一个“创建圆圈”的模块，可以画不同大小的圆圈。你可以用它来创建一个5像素的小圆圈和10像素的大圆圈吗?
      frozen cross: 将这些命令放到“重复”模块里来画一个加号。你注意到爱莎可以前后移动了吗？
      frozen cross rotate: 现在请尝试重复 10 次。每个行之间你需要转多少度？
      frozen cross rotate dense: 让我们重复90次！ 90进入360是多少次？提示：这是一个非常小的数目。
      frozen diamond: 将这些模块放到一个重复模块里来创建一个平行四边形。它和长方形很像，但是角度不同。这个平行四边形的角是60度和120度，而正方形的所有角度都是90度。
      frozen diamond mini snowflake: 你知道每个雪花的形状都不同吗？让我们用另一个循环来重复平行四边形4次来创建一个新的雪花。在每个平行四边形之间转90度。
      frozen diamond snowflake: 現在，让我们创建一个新的雪花, 使用“重复”块来重复一个平行四边形10次，把每一个平行四边形之间转右36度
      frozen freeplay: 你已经正式成为艺术大师！创建一个冬季仙境。
      frozen perpendicular: 现在让我们看看我们是否可以画两条直线，前提是彼此必须存着90度角的相位关系。您将需要使用“转向”块和“移动”块。
      frozen snowflake branch: 试试用“创建雪花分支”模块来创建三个分支，来让它看起来像一片雪花。
      frozen snowflake full: 现在，让我们重复8次，做一个漂亮的雪花!
      frozen snowflower: 错综复杂的雪花模式可以用非常简单的形状来创建。 你可以重复5个大小为5的圆圈和5个大小为10的圆圈来做成一个模式吗?
      frozen square iterative: 我们好像已经成功地绘制了半个正方形。来，我们一起把四行条线组合起来绘制一个完整的正方形。
      frozen square loop: 你好！我是艾伦代尔的安娜公主！我们一起应用“重复“块绘制一个正方形。这样一来，我们可以减少必须使用的代码块。你觉得“重复”块必须循环多少次（???）才能让里面的代码块绘制出一个正方形呢？
      frozen square loop 3x: 让我们绘制三个正方形，每绘制一个正方形后，别忘了先转120度后再继续绘制下一个正方形。
      frozen square snowflake: 你可以试试绘制一朵雪花。用“重复”块绘制10个正方形，而且记得在绘制成每个正方形移之后，先把它移转36度后才开始画下一个正方形。
      grade2_collector_10: |-
        快要完成了！

        收集尽可能多的宝藏来完成这个阶段！
      grade2_collector_10_2018: |-
        快要完成了！

        收集尽可能多的宝藏来完成这个阶段！
      grade2_collector_10_2019: |-
        快要完成了！

        收集尽可能多的宝藏来完成这个阶段！
      grade2_collector_A: 帮助罗瑞尔收集所有的宝藏。
      grade2_collector_A_2018: 帮助罗瑞尔收集所有的宝藏。
      grade2_collector_A_2019: 帮助罗瑞尔收集所有的宝藏。
      grade5_artist_variables_triangles1: |-
        让我们画一个等边三角形。

        它的每条边都正好是50像素。
      grade5_artist_variables_triangles1_2018: |-
        让我们画一个等边三角形。

        它的每条边都正好是50像素。
      grade5_artist_variables_triangles1_2019: |-
        让我们画一个等边三角形。

        它的每条边都正好是50像素。
      iceage_click_hello: |-
        当你点击喜得时，能帮助他呼唤他的朋友吗？
        完成后，点击"运行"来开始。点击喜得来让你的代码起作用！
      iceage_free_play: |-
        是时候创建你自己的故事了！

        完成后，点击"完成"来让朋友们在他们的手机、平板或计算机上试试你的游戏。
        不知道如何做？点击提示来获得详细方法。
      iceage_hello1: |-
        喜得（演员1）想为一次新的冒险集合所有人。你能通过拖一个`说`模块，并将它放到`当运行时`事件下，来帮助他说"你好！"吗？

        别忘了在里面输入"你好！"！
      iceage_hello2: 曼尼（演员2）发现了喜得（演员1），想邀请他一同冒险。通过使用`演员__说`模块两次来帮助他们相互打招呼。
      iceage_move_events: |-
        斯奎特一直在找橡子！

        给每个事件模块下加一个`移动演员1`的模块，并改变其方向来让每个方向键都能起作用。这样来帮助他能四处跑。
        完成后，点击"运行"并试着收集所有的橡子。
      iceage_move_to_actor: 迪亚哥（演员1）正在寻找曼尼（演员2）你能帮忙将他俩带到一起吗？将一个模块连接到`当演员碰到时`事件下，在当他俩碰到一起时，播放声音。
      iceage_move_to_flag: 斯奎特 在找他的橡子! 你能帮他移动最后200像素吗？
      iceage_repeat: "`一直重复`模块能让你连续的运行代码。你能将模块放到它里面，帮助格瑞尼不停的左右移动来进行锻炼吗？"
      iceage_sound_and_points: |-
        这是你上一关的代码，这个代码也会左右移动格瑞尼。
        你能完成这个程序，当喜得和格瑞尼碰上是，让它**播放声音**并**得一分**吗？
        点击"运行"来玩这个游戏。
      iceage_throw_hearts: |-
        喜得想让他的奶奶格瑞尼，知道他很爱她。

        用`演员 __ 扔`命令来让喜得（演员1）向格瑞尼（演员2）扔爱心！
        当格瑞尼碰到爱心时，设置她的表情为高兴。
      iceage_warn_ice_age: |-
        每个人都要快点移动，因为冰暴就要来了！
        将场景改为冰雪的背景，并设置喜得（演员1）的速度为快速。
        按下"运行"，并将喜得移动到迪亚哥那里警告他。
      ramp_artist_loops1: "多么美好的一天！ \n\n通过向前移动60像素，在冬天前，帮助小艺术家盖上他的花。"
      ramp_artist_loops1_2018: "多么美好的一天！ \n\n通过向前移动60像素，在冬天前，帮助小艺术家盖上他的花。"
      ramp_artist_loops1_2019: "多么美好的一天！ \n\n通过向前移动60像素，在冬天前，帮助小艺术家盖上他的花。"
      ramp_artist_loops2: 通过重复步骤5次，添加一些美丽，并在每次移动之间改变一个随机的颜色。
      ramp_artist_loops2_2018: 通过重复步骤5次，添加一些美丽，并在每次移动之间改变一个随机的颜色。
      ramp_artist_loops2_2019: 通过重复步骤5次，添加一些美丽，并在每次移动之间改变一个随机的颜色。
      ramp_artist_loops3: 再画5次彩色的线，这次用一个`重复`循环。
      ramp_artist_loops3_2018: 再画5次彩色的线，这次用一个`重复`循环。
      ramp_artist_loops3_2019: 再画5次彩色的线，这次用一个`重复`循环。
      ramp_artist_loops4: 当您在循环的最后添加了右转72度后, 会发生什么？
      ramp_artist_loops4_2018: 当您在循环的最后添加了右转72度后, 会发生什么？
      ramp_artist_loops4_2019: 当您在循环的最后添加了右转72度后, 会发生什么？
      ramp_artist_loops5: |-
        循环一定能让写代码更容易！

        用循环来画这个楼梯。

        -   楼梯的每一级都是50像素长，50像素高
        -   需要在每个方向上转90度
      ramp_artist_loops5_2018: |-
        循环一定能让写代码更容易！

        用循环来画这个楼梯。

        -   楼梯的每一级都是50像素长，50像素高
        -   需要在每个方向上转90度
      ramp_artist_loops5_2019: |-
        循环一定能让写代码更容易！

        用循环来画这个楼梯。

        -   楼梯的每一级都是50像素长，50像素高
        -   需要在每个方向上转90度
      ramp_artist_loops6: |-
        这个楼梯大多了，但是它用了和上一关一样数量的代码！

        修复循环来完成这一关。
      ramp_artist_loops6_2018: |-
        这个楼梯大多了，但是它用了和上一关一样数量的代码！

        修复循环来完成这一关。
      ramp_artist_loops6_2019: |-
        这个楼梯大多了，但是它用了和上一关一样数量的代码！

        修复循环来完成这一关。
      ramp_artist_loops7: 寻找规律，使用循环使此代码更短！
      ramp_artist_loops7_2018: 寻找规律，使用循环使此代码更短！
      ramp_artist_loops7_2019: 寻找规律，使用循环使此代码更短！
      ramp_artist_loops8: "**挑战：**寻找规律，使用循环使此代码更短！"
      ramp_artist_loops8_2018: "**挑战：**寻找规律，使用循环使此代码更短！"
      ramp_artist_loops8_2019: "**挑战：**寻找规律，使用循环使此代码更短！"
      ramp_artist_loops9: 画一个边长200像素的正方形来通过这关。
      ramp_artist_loops9_2018: 画一个边长200像素的正方形来通过这关。
      ramp_artist_loops9_2019: 画一个边长200像素的正方形来通过这关。
