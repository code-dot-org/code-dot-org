"nl":
  slides:
    maze_intro:
      1:
        image: notities/hoc1_1.jpg
        text: Welkom bij je eerste uur code! We duiken direct je eerste ontmoeting
          met programmeren in.
      2:
        image: notities/hoc1_1.jpg
        text: We zullen Blockly gebruiken, een visuele programmeertaal waar je met
          drag-en-drop code schrijft.
      3:
        image: notes/hoc1_3.jpg
        text: De meeste code wordt ingetypt, maar Blockly is visueel. Ieder blok komt
          overeen met een "echte" regel code.
      4:
        image: notes/hoc1_4.jpg
        text: Je zal de basis van computerwetenschappen leren. Deze concepten worden
          overal gebruikt, van apps voor je mobiele telefoon tot het besturen van
          de Mars-lander.
      5:
        image: notes/hoc1_5.jpg
        text: Een programma is een reeks instructies die de computer opvolgt.
      6:
        image: notes/hoc1_6.jpg
        text: Het doel van je eerste programma is om een Angry Bird door een doolhof
          te krijgen om een Groen Varken te raken.
      7:
        image: notes/hoc1_7.jpg
        text: De linkerkant is het doolhof waar je programma in draait. De opdrachten
          voor iedere puzzel staan onder het doolhof.
      8:
        image: notes/hoc1_8.jpg
        text: De middelste toolbox heeft de opdrachten voor de Angry Bird. Deze gebruik
          je om je code op te bouwen.
      9:
        image: notes/hoc1_9.jpg
        text: Aan de rechterkant heb je je werkruimte waar je blokken uit je toolbox
          heen sleept om je programma op te bouwen. Om een blok te verwijderen sleep
          je het naar de prullenbak in de hoek.
      10:
        image: notes/hoc1_10.jpg
        text: Ieder blok is een opdracht. Wanneer je een "vooruit"-blok naar je werkruimte
          sleept en op "Voer Programma Uit" klikt, dan beweegt de vogel een stapje
          in het doolhof.
      11:
        image: notes/hoc1_11.jpg
        text: Om meer dan één actie te doen kan je meerdere blokken naar je werkruimte
          spelen en deze aan mekaar vasthangen. De vogel zal de commando's van boven
          naar beneden uitvoeren.
      12:
        image: notes/hoc1_12.jpg
        text: Wanneer je een programma uit hebt gevoerd en het wil repareren en opnieuw
          beginnen, klik je op de "Opnieuw"-knop.
      13:
        image: notes/hoc1_13.jpg
        text: We zullen dit varkentje wel eens wassen!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hallo, ik ben JR! Elk raceauto team heeft een computer wetenschapper
          nodig om te winnen. Ze analyseren data van de auto om hem sneller te laten
          maken.
      2:
        image: notes/stage5_2.jpg
        text: In deze puzzels, ben jij de artiest dat een lijn moet laten trekken
          overal waar ze gaan.
      3:
        image: notes/stage5_3.jpg
        text: Deze blok zegt "beweeg 100 pixels vooruit." Pixels zijn zeer kleine
          puntjes op je scherm.
      4:
        image: notes/stage5_4.jpg
        text: Deze blok zegt "draai rechts voor 90 graden." Dit zal je artiest evenveel
          draaien als de "draai blok in de doolhof puzzels.
      5:
        image: notes/stage5_5.jpg
        text: Klik op de pijl in deze blokken om de afstand die de kunstenaar naar
          voren gaat of draait. Speel hier een beetje mee om handig te worden met
          deze blokken.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hallo, ik ben Paola! In deze puzzels ben jij de boer die zijn veld volledig
          vlak wilt zodat je gewassen kan aanplanten.
      2:
        image: notes/stage9_2.jpg
        text: Je zal haar moeten helpen alle hopen grond te verwijderen en alle gaten
          in te vullen.
      3:
        image: notes/stage9_3.jpg
        text: De nieuwe blokken verwijderen 1 schep modder van een hoop en vult een
          gat met 1 schep modder.
      4:
        image: notes/stage9_4.jpg
        text: De hopen en gaten zijn verschillend van grootte, dus je moet de boer
          vertellen hoeveel scheppen hij moet gebruiken.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hoi, ik ben Katie! Een van de meest spannende dingen over informatica
          is dat een computerprogramma interactief kan zijn.
      2:
        image: notes/flappy02.jpg
        text: Elke keer dat iemand klikt of drukt of typt op een computer of telefoon,
          dat genereert een gebeurtenis, en er is wat code die beslist wat er gebeurd
          als er wat gebeurd.
      3:
        image: notes/flappy03.jpg
        text: 'Bijvoorbeeld, je zou een gebeurtenis-verwerker kunnen hebben die zegt
          "wanneer iemand met de muis klikt, speel een geluid af" '
      4:
        image: notes/flappy04.jpg
        text: Heb je ooit van het spel FlappyBird gehoord? Met behulp van gebeurtenis-verwerkers
          gaan we leren om  onze eigen aangepaste versie van FlappyBird te programmeren!
      5:
        image: notes/flappy05.jpg
        text: De code die zul je schrijven omvat slepen en neerzetten van blokken
          met daarin opdrachten voor de computer. Onder de motorkap wordt elk van
          deze blokken vertegenwoordigd door echte code.
      6:
        image: notes/flappy06.jpg
        text: 'Als je een kijkje neemt in de werkplaats, zie je een aantal groene
          blokken die voor je zijn ingevuld - dit zijn "gebeurtenis-verwerkers" '
      7:
        image: notes/flappy07.jpg
        text: Als je wilt dat de vogel FLAPPERT als je met de muis KLIKT, krijg je
          dat voor elkaar door het "FLAP" blok aan de goede gebeurtenis-verwerker
          te verbinden. Telkens als je nu in je spel met de muis klikt, zal de vogel
          flapperen.
      8:
        image: notes/flappy08.jpg
        text: In elke puzzel van deze activiteit introduceren we nieuwe gebeurtenis-types
          als groene blokken op de werkplaats, en dan kun je de juiste blokken kiezen
          die reageren op de nieuwe gebeurtenissen.
      9:
        image: notes/flappy09.jpg
        text: Als je een drop-down pijl zoals deze ziet dan kun je de instellingen
          veranderen - zoals wel geluid af te spelen wanneer flappy de grond raakt.
      10:
        image: notes/flappy10.jpg
        text: In de laatste puzzel kun je je eigen spel maken en deze delen met je
          virenden. Veel plezier!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hallo, ik ben Mark! We gaan leren over lussen. Met lussen kun je een
          computer vertellen om een reeks acties telkens te herhalen, duizenden of
          zelfs miljarden keren.
      2:
        image: notes/hoc2_2.jpg
        text: In deze puzzel willen we de vogel 5 vakjes naar voren laten bewegen
          om het varken te krijgen.
      3:
        image: notes/hoc2_3.jpg
        text: We kunnen het nieuwe "herhaal"-blok gebruiken om ons te helpen.
      4:
        image: notes/hoc2_4.jpg
        text: In plaats van 5 "vooruit"-blokken hierheen te slepen...
      5:
        image: notes/hoc2_5.jpg
        text: We kunnen een "vooruit"-blok in het "herhalen"-blok zetten en een getal
          in het blok zetten om aan te geven hoe vaak het moet herhalen.
      6:
        image: notes/hoc2_6.jpg
        text: 'Dit is belangrijk: je kunt meer dan een commando in een "herhalen"-blok
          zetten.'
      7:
        image: notes/hoc2_7.jpg
        text: Veel plezier met je nieuwe "herhalen"-blok!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hallo, ik ben Chris. Voordat ik bij Miami Heat ging basketballen heb
          ik in Amerika Informatica gestudeerd. We gaan nu ons nieuwe blok uitproberen:
          het "herhalen totdat"-blok.'
      2:
        image: notes/hoc3_2.jpg
        text: Wat moeten we doen als we niet weten hoe ver de vogel moet bewegen om
          het varken te krijgen?
      3:
        image: notes/hoc3_3.jpg
        text: Wanneer we een "vooruit"-blok binnen een "herhalen totdat"-blok zetten,
          dan gaat de vogel vooruit TOT het bij het varken komt (of tegen een muur
          aanloopt).
      4:
        image: notes/hoc3_4.jpg
        text: 'En dit is belangrijk: net als eerder, kunnen we meerdere blokken binnen
          het "herhalen totdat" blok zetten, en zij zullen allemaal worden herhaald.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hallo, ik ben Bill! We gaan een fundamenteel nieuw concept leren: "Als"-statements.
          Zo maken computers beslissingen.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Je gebruikt zelf ook dagelijks "Als"-statements. Voor je ''s-ochtends
          naar buiten gaat, zeg je: ALS het regent, dan moet ik mijn regenjas aan.'
      3:
        image: notes/hoc4_3.jpg
        text: We kunnen de zombie vertellen dat ALS er een pad naar links is, hij
          die richting op moet draaien.
      4:
        image: notes/hoc4_4.jpg
        text: Om hier de code voor te schrijven slepen we ons "Als"-blok naar het
          midden en stoppen we er een "linksaf"-blok in.
      5:
        image: notes/hoc4_5.jpg
        text: Als we er nu een "vooruit"-blok boven zetten en een "herhalen"-blok
          om alles heen, dan kijkt de zombie iedere keer als hij beweegt of hij naar
          een pad naar links kan draaien. Het "herhalen"-commando is belangrijk om
          te zorgen dat hij iedere stap kijkt of er een pad is.
      6:
        image: notes/hoc4_6.jpg
        text: '"Als"-statements zijn heel belangrijk in de informatica. Een van de
          eerste programma''s die ik heb geschreven was een boter-, kaas- en eieren-spelletje,
          en er was een "Als"-statement dat zei dat ALS de ander bijna ging winnen,
          ik het vakje waarmee hij zou winnen in ging pikken.'
      7:
        image: notes/hoc4_7.jpg
        text: Veel plezier met het "Als"-blok!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hallo, ik heet Saloni! Ik gebruik informatie om problemen met gezondheid
          en medicatie op te lossen. Laat ons over het "als dan"-blok leren. Het ziet
          eruit als het "als"-blok, maar met een extra "dan"-stukje.
      2:
        image: notes/hoc5_2.jpg
        text: 'Als ik een "vooruit"-blok zet bij "uitvoeren" en een "linksaf"-blok
          bij "anders" dan betekent dat dat de zombie kan kiezen uit 2 opties: ALS
          er een pad vooruit is dan gaat de zombie vooruit, ANDERS (als er geen pad
          vooruit is) dan draait de zombie naar links.'
      3:
        image: notes/hoc5_3.jpg
        text: Net als bij de 'als' blok, kunnen we de "als anders" blokken binnen
          een "herhaal" blok plaatsen zodat de zombie blijft bewegen en de "als anders"
          blok zal blijven controleren of er ergens gedraaid moet worden.
      4:
        image: notes/hoc5_4.jpg
        text: Stuur die zombies naar waar ze horen!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Een als-anders statement is een beslissing tussen twee dingen. Laatosn
          eens kijken hoe we een als-anders statement kunnen gebruiken bij ons vriendje
          Scrat de eekhoorn.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Dit blok ziet er hetzelfde uit als het "als"-blok, maar het heeft een
          extra stuk "anders" stukje aan de onderkant. Als ik een "beweeg vooruit"
          blokje plaats waar "voer uit" staat, en een "Draai linksom" blokje plaats
          bij "anders", dan betekent dat Scrat de eekhoorn vooruit beweegt als er
          een pad is. Als er geen pad is, dan draait Scrat linksom.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Het maakt  een beslissing en doet een van de twee acties op basis van
          deze beslissing. En net als met 'als' blokken, kun je "als-anders" blokken
          binnen 'herhaal' blokken plaatsen.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Laten we nu Scrat de eekhoorn helpen om die eikel te pakken!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hoi, ik ben Brina, een engineer bij Instagram. Een functie is een aantal
          regels code dat je steeds weer wilt kunnen gebruiken, dus in plaats van
          die code iedere keer helemaal uit te schrijven, kun je gewoon een blok gebruiken.
      2:
        image: notes/stage13_2.jpg
        text: We gaan leren hoe je functies maakt. Functies hebben een ster in het
          hoekje. De naam van de functie wordt op de bovenste regel geschreven.
      3:
        image: notes/stage13_3.jpg
        text: De blokken in de definitie vertellen ons wat de functie doet. Dus deze
          functiedefinitie hebben we 'vul 5' genoemd, en bestaat uit een 'herhalen'
          en een 'vul'-blok.
      4:
        image: notes/stage13_4.jpg
        text: De definitie zit op de werkplaats, maar onze boer voert de functie niet
          uit tot we ons 'vul 5 functie'-blok uit de 'functies'-categorie slepen.
      5:
        image: notes/stage13_5.jpg
        text: Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: Het "while" blok voert alles uit wat er in staat, ZOLANG het statement
          bovenaan WAAR is.
      3:
        image: notes/stage9_7.jpg
        text: Bijvoorbeeld, als de boer op een hoop staat, blijft ze 1 schep verwijderen
          ZOLANG er nog een hoop onder haar is.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hoi, ik ben Trina, en ik werk voor Pixar. Ik heb aan een heel stel films
          gewerkt, waaronder Shrek.
      2:
        image: notes/stage11_2.jpg
        text: Dit is onze nieuwe 'teller'-lus. Het voert acties steeds weer uit, en
          je kunt de actie iedere keer ietsje anders maken.
      3:
        image: notes/stage11_3.jpg
        text: In dit voorbeeld zegt onze 'teller'-lus "tel van 50 tot 90 met 10 tegelijk",
          en in het blok hebben we ons "teken een vierkant"-blok. Sleep het 'teller'-blok
          van het 'Variabelen'-stuk naar 'lengte'.
      4:
        image: notes/stage11_4.jpg
        text: Dit betekent dat onze kunstenaar een vierkant gaat tekenen met zijden
          van 50 pixels, daarna telt het daar 10 bij op en tekent een vierkant met
          zijden van 60 pixels. Daarna blijft het 10 optellen en vierkanten tekenen
          tot het bij de 90 komt. Dus krijgen we vierkanten van 50, 60, 70, 80 en
          90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hoi, ik ben Janete, en ik ben een engineer bij Zynga.
      2:
        image: notes/stage15_2.jpg
        text: En als we nu een stel driehoeken willen tekenen met zijden van verschillende
          lengten?
      3:
        image: notes/stage15_3.jpg
        text: Ze zouden al die code met de hand kunnen schrijven, of we kunnen een
          functie met parameters maken.
      4:
        image: notes/stage15_4.jpg
        text: Klik om dat te doen op de blauwe ster op de "teken een driehoek"-functie.
          Sleep daarna 'invoer naam' naar het 'invoer'-blok.
      5:
        image: notes/stage15_5.jpg
        text: Als we dan 'lengte' schrijven op de plek waar nu 'x' staat en op 'enter'
          drukken, maak je een 'lengte'-invoer voor je functie.
      6:
        image: notes/stage15_6.jpg
        text: Klik daarna op de ster. Nu wil je op de 'variabelen'-categorie klikken
          en het 'lengte'-blok in het 'vooruit'-blok van je functie slepen. En sleep
          het oude nummer-blok weg.
      7:
        image: notes/stage15_7.jpg
        text: Klik om je nieuwe functie met parameters te gebruiken op de 'functies'-categorie
          en sleep je "teken een driehoek met lengte'-functie eruit.
      8:
        image: notes/stage15_8.jpg
        text: Je kunt nu het reken-blok gebruiken om verschillende nummers in te voeren
          om driehoeken te tekenen met verschillende groottes.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Gefeliciteerd! Met die oplossing voor de laatste puzzel heb je net code
          geschreven die IEDERE robot kan vertellen hoe hij uit een doolhof zonder
          splitsingen moet komen, of het nu een zombie is, een vogel, een Mars-lander
          of zelfs een automatisch rijdende auto.
      2:
        image: notes/hoc6_2.jpg
        text: De basisbegrippen die je hebt gebruikt zijn de kern van ieder programma
          of app die je gebruikt. We hebben geleerd over lussen, herhalings-statements,
          "als"-statements en "als anders"-statements.
      3:
        image: notes/hoc6_3.jpg
        text: Als je je eerste uur code leuk vond, ga dan naar code.org om verder
          te gaan met je informatica-opleiding! Zogau je onze cursus van 20 uur klaar
          hebt, beheers je de grondbeginselen van het programmeren, en kun je beginnen
          te leren hoe je apps kunt maken voor mobiele telefoons, programma's voor
          robots, spelletjes, je kunt het zo gek niet bedenken.
      4:
        image: notes/hoc6_4.jpg
        text: 'Technologie verandert alles wat we doen en of je nu jong of oud bent:
          programmeren is leuk, creatief, en iedereen kan het leren!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Ondertiteling komt eraan!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hallo, is mijn naam Lyndsey. Ik ben een model, ik acteer en schrijf
          mijn eigen apps. Laten we code gebruiken om Anna en Elsa te helpen bij het
          ontdekken van de magie en schoonheid van ijs.
      2:
        image: notes/frozen1_2.jpg
        text: Je maakt sneeuwvlokken en patronen terwijl je door een winter wonderlandschap
          schaatst dat je kan delen met je vrienden.
      3:
        image: notes/frozen1_3.jpg
        text: In het volgende uur zal je de basis van het coderen leren. Traditionele
          programmering maakt gebruik van tekst, wij zullen Blockly gebruiken wat
          gebruikt maakt van visuele blokken die je kan slepen en neerplaatsen om
          programma's te schrijven. Op die manier leren zelfs universiteitstudenten
          de basis. Achter deze blokken zit immers nog altijd echte code.
      4:
        image: notes/frozen1_4.jpg
        text: Een programma is een reeks van instructies die vertellen aan een computer
          wat hij moet doen. Laat ons een code bouwen of een programma dat Elsa helpt
          om een eenvoudige lijn te maken. Later zullen we dit gebruiken om meer ingewikkelde
          patronen te maken.
      5:
        image: notes/frozen1_5.jpg
        text: Je scherm is opgedeeld in drie grote deler. Links is het ijsoppervlak
          waar je het programma uitvoert. De instructies voor iedere puzzel zijn vlak
          onder het oppervlak geschreven.
      6:
        image: notes/frozen1_6.jpg
        text: Het middelste oppervlak is de gereedschapskist en elk van deze blokken
          zijn de acties die Elsa en Anna kunnen doen.
      7:
        image: notes/frozen1_7.jpg
        text: Het witte oppervlak rechts is de werkruimte en hier bouwen we ons programma.
          Om over het ijsoppervlak te bewegen gebruik je de "Beweeg vooruit" blok.
      8:
        image: notes/frozen1_8.jpg
        text: Hier zegt het "Beweeg vooruit" blok, "beweeg vooruit met 100 pixels".
          Wat gebeurt er wanneer we op "Voer uit" drukken? Elsa zal een bepaalde afstand
          vooruit bewegen op het scherm, 100 pixels om precies te zijn! Piwels zijn
          in feite zeer kleine vierkantjes op je computerscherm.
      9:
        image: notes/frozen1_9.jpg
        text: Het andere blok in deze puzzel zegr "Draai Rechts - 90 graden". Wanneer
          we deze "Draai Rechts" blok gebruiken zorgt dit ervoor dat Elsa een bepaalde
          draai maakt. Je kan er mee spelen hoe ver je Elsa wil laten draaien. De
          hoek is gemeten vanaf het pad voor Elsa. Dit is dus een draai van 90 graden.
          en dit is een draai van 120 graden.
      10:
        image: notes/frozen1_10.jpg
        text: Je kan het aantal pixels en graden wijzigen door het pijltje ernaast.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hallo, ik ben Paola! Computers zijn echt goed in het herhalen van acties.
          Je kan tellen tot 10,20 of 100. Een computer kan tellen tot een miljard
          of een biljoen en dit zal slechts enkele seconden duren. Of het nu gaat
          om tellen, tekenen of iets anders - computers kunnen dit honderden malen
          herhalen of zelfs miljarden malen.
      2:
        image: notes/frozen2_2.jpg
        text: In programmeren noemen we dit een lus. Een lus gebruik je om code te
          herhalen. Voor de volgende puzzel is je doel om Anna een vierkant te helpen
          maken met het "Herhaal" blok.
      3:
        image: notes/frozen2_3.jpg
        text: Gelijk welke blokken je binnen de "Herhaal' blok plaatst, deze zullen
          in volgorde worden uitgevoerd en dit zo vaak als je zelf wilt.
      4:
        image: notes/frozen2_4.jpg
        text: Als je een vierkant wil tekenen kan je de "Beweeg vooruit" blok en de
          "Draai Rechts" blok 4 maal gebruiken. Maar de makkelijkere manier is om
          de "Beweeg vooruit" blok en de Draai Rechts - 90 graden" blok één keer te
          gebruiken en dan dit paar acties 4 keer te herhalen. Om dit te doen plaats
          je de "Beweeg vooruit" blok en de "Draai Rechts" blok in een "Herhaal" blok.
      5:
        image: notes/frozen2_5.jpg
        text: Je kan het nummer in het "Herhaal" blok veranderen in gelijk welke waarde
          en het zal wat er binnen de blok staat zoveel maal herhalen.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hallo, ben ik Chris Bosh. Ik ben een professionele basketbalspeler en
          ik heb gecodeerd op de universiteit.
      2:
        image: notes/frozen3_2.jpg
        text: Een van de belangrijkste concepten in de informatica is hoe je nieuwe
          opdrachten definiëert. De meeste computertalen hebben slechts 100 woorden
          of commando's. En echt de kunst en de magie bestaat er in je eigen nieuwe
          woorden te maken met behulp van deze bouwstenen.
      3:
        image: notes/frozen3_3.jpg
        text: Eens je een computer geleerd hebt om een actie te doen met behulp van
          een reeks commando's, kan je je eigen naam verzinnen voor deze actie, op
          deze manier is het makkelijk om deze later te herhalen. Wanneer je je eigen
          commando definieert en deze een naam geeft noemen we dit een functie.
      4:
        image: notes/frozen3_4.jpg
        text: Hallo, ik ben Jess. Wanneer je programmeer met blokken kan je functies
          gebruiken wanneer je een reeks acties meerdere malen wil gebruiken. Bijvoorbeeld,je
          hebt je eigen code geschreven om een vierkant te maken.
      5:
        image: notes/frozen3_5.jpg
        text: 'Je kan dit definiëren als een functie genoemd "maak een vierkant" '
      6:
        image: notes/frozen3_6.jpg
        text: Nu heb je een nieuwe blok die je meerdere keren kan gebruiken om meerdere
          vierkanten te maken.
      7:
        image: notes/frozen3_7.jpg
        text: Veel simpele vormen kunnen gebruikt worden om meer complexe patronen
          te maken. In de volgende puzzel is de code die je recent schreef om een
          cirkel te maken beschikbaar als een functie, waarme je cirkels van verschillende
          grootte kan maken. Kan je deze gebruiken om Elsa te helpen om ingewikkelde
          en mooie patronen te maken in de sneeuw?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: We gaan games maken met behulp van Play Lab. Goede games hebben een
          verhaal, en elk verhaal heeft acteurs. We gaan leren hoe we onze acteurs
          zoals heksen, aliens en dieren laten praten, bewegen en interactie met elkaar
          laten hebben. Aan het einde van deze tutorial, kunt u een spel van niks
          tot iets maken en het delen met je vrienden.
      2:
        image: notes/playlab_intro_2.png
        text: Je scherm is verdeeld in 3 delen. Aan de linker zijde wordt het programma
          uitgevoerd. De instructies voor elk level worden onderaan weergegeven.
      3:
        image: notes/playlab_intro_3.png
        text: Het middelste gedeelte is de gereedschapkist, en elk van deze blokken
          is een stuk code. Het witte gedeelte aan de rechterkant is de werkruimte
          en daar bouwen we onze progamma's.
      4:
        image: notes/playlab_intro_4.png
        text: Om te beginnen, moet je blokken koppelen aan het oranje "when run" blok.
          Je kan meerdere blokken samenkoppelen door ze te slepen totdat je een gele
          lijn ziet, en dan zullen ze samengekoppelt worden.
      5:
        image: notes/playlab_intro_5.png
        text: In deze eerste puzzel is onze acteur een pinguïn en we laten hem "Hallo!"
          zeggen door een zeg-blok en deze vast te hangen aan de wanneer-uitvoeren
          blok en door "Hallo!" te typen. We laten de pinguïn ook bewegen door de
          beweeg rechts en beweeg links blokken te gebruiken. Wanneer je blokken op
          zijn plaats staan klik dan op de uitvoeren knop om te zien wat je geprogrammeerd
          hebt.
      6:
        image: notes/playlab_intro_6.png
        text: Ga aan de slag en op het einde zal je in staat zijn om je eigen spel
          te maken met verschillende soorten spelers die kunnen reageren, blij of
          verdrietig zijn, punten kunnen scoren of vuurballen gooien of zelfs verdwijnen.
          Het is helemaal aan jou welk spel je wil maken.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Nu gaan we iets leren over iets wat programmeurs van spellen iedere
          dag gebruiken. Gebeurtenissen. Een gebeurtenis vertelt aan je programma
          om te luisteren wanneer er iets gebeurt. Wanneer dat iets gebeurt voert
          het een actie uit.
      2:
        image: notes/playlab_events_2.png
        text: 'Enkele voorbeelden van gebeurtenissen zijn : luisteren voor een muisklik,
          een pijltjestoets of een tik op het scherm.'
      3:
        image: notes/playlab_events_3.png
        text: Hier zorgen we ervoor dat de ruimterobot de aardbewoners groet wanneer
          een speler hem aanklikt. We gebruiken de "wanneer geklikt" blok en hangen
          hier de "zeg" blok aan. Wanneer de speler de ruimterobot aanklikt wordt
          alles wat aan de "wanneer geklikt" eventblok vasthangt uitgevoerd. Wat zegt
          je buitenaards wezen?
      4:
        image: notes/playlab_events_4.png
        text: Er zijn ook "wanneer pijl" blokken. Als je de "beweeg" blokken vasthangt
          aan deze kan je je acteurs op en neer en links en rechts laten bewegen.
          Stap voor stap wordt je spel meer interactief.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Dit is de "Herhaal voor altijd" blok. Alles wat binnen deze blok staat
          zal voor altijd blijven gebeuren in het spel.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Als we een acteur iets herhaaldelijk willen laten doen zonder dat de
          speler er iets voor moet doen, plaatsen we deze blokken in een "herhaal
          voor altijd" blok.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In de volgende puzzel is ons doel om de tovernaar de grenzen van het
          koninkrijk te laten patrouilleren van links naar rechts en dit steeds opnieuw.
          Als je nu leert hoe de herhaal opdrachten werken, bespaar je je later veel
          tijd wanneer je je eigen spel maakt.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Dit zijn je tekenblokken. Gebruik het juiste blok om de kunstenaar te
          verplaatsen naar waar hij moet zijn om de grijze lijnen te gaan vullen.
      2:
        image: notes/C1_artist_intro_2.png
        text: Dit zijn spring-blokken. Als je deze gebruikt tekent de kunstenaar niet,
          dus gebruik deze om naar de volgende grijze lijn te springen.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Vind je bijen ook niet super cool? In de volgende puzzels is het je
          doel de bij te helpen bij de bloemen te komen, nectar uit de bloemen te
          halen en over de honingraat te vliegen om honing te maken. Je hebt de "pak
          nectar" en "maak honing"-blokken nodig voor deze oefening.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Iedere bloem heeft een verschillend aantal nectars: 1, 2, 3 of meer.
          We kunnen aan het kleine nummertje in de hoek zien hoe veel nectar er in
          de rode bloemen zit. Zorg dus dat je alle nectar eruit haalt voor je verder
          gaat. Iedere honingraat kan ook maar beperkt honing bevatten: 1, 2, 3 of
          meer. Dus zorg dat je zoveel honing maakt als de honingraat kan bevatten.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Als je alle nectar kunt pakken en alle honing kunt maken, ga je naar
          het volgende level. Anders moet je de puzzel opnieuw proberen. Probeer maar
          eens uit hoe het voelt een programmeur te zijn!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "Een lus is een herhaling van werkzaamheden. Dus, wanneer ik een bijenkorf
          betreed die ik wil inspecteren, bekijk ik een raam en stop deze daarna weer
          terug. \nIk herhaal dus de zelfde werkzaamheden meerdere keren. Het gaat
          in een lus: het meerdere keer uitvoeren van dezelfde werkzaamheden."
      2:
        image: notes/C1_bee_loops_2.png
        text: "In dit level willen we dat de bij drie stukken nectar uit de bloem
          verzamelt. In plaats van driemaal \"verkrijg nectar\" blokken te gebruiken,
          ga je het \"herhaal\" blok gebruiken om drie keer nectar te verkrijgen.
          \nKlik op \"Start\" en kijk of je het goed hebt. Mooi!"
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Deze les noemen we de grote gebeurtenis. In deze les leer je alles over
          hoe we programeren dat het programma moet werken en hoe een programma draait
          wanneer we een actie ondernemen, zoals een klik op de muis of het aanklikken
          van een knop.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Voor deze les gebruiken we een papieren afstandsbediening. Het is dus
          net als een levensechte videospel.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Een gebeurtenis is een actie die ervoor zorgt dat er iets gebeurt. Bijvoorbeeld
          wanneer je op je muisknop klikt en een webpagina laadt, dat is een gebeurtenis.
          Maar ook het aanraken van je Tablet scherm om te scrollen is een gebeurtenis.
          Gebeurtenissen zijn de manier om de gebruiker direct controle over een programma
          te geven.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: We reageren allemaal op gebeurtenissen. Wanneer honger hebben pakken
          we eten uit de koelkast. Als we de postbode een brief horen bezorgen in
          onze brievenbus halen we onze post op. Dit zijn vergelijkbare gebeurtenissen
          zoals bij het drukken op een knop of het bewegen van een joystick. Het zijn
          gebeurtenissen die ons uitlokken om actie te ondernemen.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: In computer spellen is er een gebeurtenis genaamd "Update" en dit gebeurt
          30 tot 60 keer per seconde. Voor computerspel programmeurs is zo'n gebeurtenis
          vele malen belangrijker dan de klik op een knop of beweging van een joystick.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: Het belangrijkste waar we naar uitzien, is dat de "Update" aangeraakt
          werd. En dan bekijken we de joystick in d.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: In zand sculptuur is het belangrijk om te begrijpen dat je van je fouten
          moet leren. Maar als je weet vol te houden dan wordt het alleen maar mooier
          en beter. Volhouden is het devies. Gewoon doorgaan, het wordt geweldig.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: 'Dit is de les: ''een stevige basis maken''. In deze les gaan we aan
          een taak werken die opzettelijk heel moeilijk is. Je gaat ontdekken hoe
          je een constructie moet bouwen die tenminste net zo hoog is als één van
          deze kopjes en toch sterk genoeg is om een het gewicht van een boek te dragen.'
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Soms lukt onze creatie niet goed. Soms raken we gefrustreerd en willen
          we het opgeven. Soms zijn er best vaak van die momenten. Maar als we het
          blijven proberen en keer op keer ons best blijven doen dan gaat het ons
          zeker snel lukken.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Volharding draait om doorgaan wanneer je eigenlijk had willen opgeven.
          Wanneer je iets nieuws en iets anders wilt maken dan gaan er zeker een paar
          mislukkingen op je pad komen.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Waar het om gaat bij volhouden is dat je er voor kiest om door te gaan
          en leert van je fouten in plaats van stoppen uit frustratie. Die frustratie
          betekent dat je het dus erg vindt dat het niet is gelukt en dat het dus
          de moeite waard is en dat het bijna was gelukt. Dus geef niet op en ga d'r
          voor!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hallo, mijn naam is Miral Kotb en ik ben de bedenker van Iluminate.
          Bij mijn werk is er iets dat we gebruiken bij zowel het dansen als het programmeren
          van onze verlichte kostuums. En dat zijn herhalingen! Lussen zijn acties
          die zich herhalen en herhalen en herhalen en herhalen.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Als je iets meerdere keren herhaalt, zoals mijn bewegingen om de hoepel
          rond te laten gaan. dan voer ik een lus uit van die actie. Dit is een lus.
          Dit is een lus. En dit is een lus.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Vandaag gaan we een dansfeestje vieren. We gaan lussen uitbeelden met
          een nieuwe dans. De iteratie. We gaan leren over lussen door middel van
          een dans. Je gaat een paar eenvoudige stappen leren die we steeds herhalen
          om de dans af te maken.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Hier zijn de stappen die je moet leren. Klap in je handen. Houd je handen
          achter je hoofd, Houd je handen op je heupen. Til je linker hand op. Til
          je rechter hand op. Best makkelijk, toch? Je zult ontdekken dat je de aanwijzingen
          kunt verkorten door wat herhalingen in te bouwen.
      5:
        image: notes/C1_getting_loopy_5.png
        text: We gebruiken zeker herhalingen in onze dansen. De dansers dragen computers,
          allemaal verbonden met hetzelfde netwerk. Ik zou de lichten kunnen laten
          lussen naar dezelfde dansers, steeds weer en steeds weer. In die lus kan
          ik een iteratie maken waarbij ik zeg dat deze lus zich steeds moet herhalen
          over deze zes dansers maar dan in die lus de snelheid van het licht steeds
          verhogen. Dat wordt allemaal gedaan met lussen. Lussen zijn belangrijk in
          de informatica omdat ze ons werk besparen en het makkelijker maken.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Deze les heet Vrolijke Kaarten. Vandaag gaan we onze pluizige kleine
          vriend Flurb aan haar fruit helpen.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Zorg dat jouw Flurb naar het fruit gaat. Dit doe je door te bedenken
          hoe Flurb moet lopen en haar de weg te wijzen met pijlen. Om de Flurb bij
          de appel te krijgen, welke kant moet de Flurb dan op? Lijn om het omhoog
          te laten gaan.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Om het daar te krijgen omcirkel je de richting die het op moet.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Maak je algoritme door pijlen te plakken naast de kaart die je probeert
          op te lossen. De tweede is hetzelfde, maar gaat naar beneden.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Het is zoals programmeren met papier. Dat is alles!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Debuggen is het vinden en oplossen van problemen. Er zijn veel manieren
          om problemen te debuggen. Een van de makkelijkste is om stap voor stap te
          gaan tot je iets vindt dat verkeerd gaat. Hier probeer ik een achterwaartse
          radslag op de balk te doen, maar blijf er af vallen.
      2:
        image: notes/C1_maze_debugging_2.png
        text: I ging door elk deel stap voor stap and realiseerde waar ik een fout
          gemaakt had. Ik zette mijn handen fout op de balk. Dus probeerde ik opnieuw
          met een andere positie en uiteindelijk lukte het. Ik was super blij dat
          ik terug handstand op een bal kon doen.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Om te leren debuggen beginnen we al met een paar blokken op het veld.
          Je kan misschien wel zien dat de blokken je niet naar het doel zullen krijgen.
          We zullen de oplossing moeten debuggen en het repareren. Wat is er mis gegaan?
          Je zal zien dat je één blok meer naar het westen had moeten gaan.
      4:
        image: notes/C1_maze_debugging_4.png
        text: We laten nog een west blok lopen en zien wat we juist hebben. Correct!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Voor deze puzzel moet de vogel naar het varken. Kijk naar de puzzel
          en zoeken voor de weg die de vogel moet nemen.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Sleep de blokken vanuit de toolbox naar de werkplaats. Wees er zeker
          van dat alles onder "wanneer uitvoeren" blok staat. Als je de goede oplossing
          gevonden hebt, kan je op "Uitvoeren" klikken en de het varken naar de vogel
          zien lopen.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Iets waar computers heel goed in zijn is het herhalen van commando's.
          Mensen worden het constant herhalen van dezelfde opdracht snel beu. Computers
          kunnen dezelfde opdracht miljoenen of zelfs miljarden keren nauwkeurig uitvoeren
          zonder verveeld te raken.
      2:
        image: notes/C1_maze_loops_2.png
        text: Bijvoorbeeld, als je iedereen een gelukkige verjaardag wil wensen op
          Facebook door ze een email te sturen dan zou dit een eeuwigheid duren om
          ze allemaal uit te schrijven. Een paar lijntjes code kan iedereen in een
          mum van tijd een gelukkige verjaardag wensen.
      3:
        image: notes/C1_maze_loops_3.png
        text: Om in dit level het varken naar de vogel te krijgen, moet je, in plaats
          van 3 Noord blokken naar de werkplaats te verschuiven, het "Herhaal" blok
          gebruiken. Sleep het "Herhaal" blok naar de werkplaats en voer 3 nummers
          in. Daarna sleep je de "Verschuif Noord" blok in de "Herhaal" blok en klik
          je op "Uitvoeren". Goed zo, dat is de correcte oplossing!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Deze les heet move it, move it. Samen zullen we een programma schrijven
          om onze vrienden van bij het begin met de kompas roos naar het smiley gezichtje
          te krijgen.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Maar de smiley ligt met het gezicht naar beneden en er is maar 1 persoon
          die daar kan geraken. Laten we het programma opstarten.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Een programma is een algoritme dat gecodeerd is zodat een machine deze
          kan uitvoeren. De meeste mensen denken dat we een programma schrijven voor
          de computer. Programma's zijn heel goed hierin, maar ze zijn ook heel nuttig
          op andere plekken. Je kan je eigen spelletje schrijven of zelfs een robot
          programmeren.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Mijn naam is Jeremiah. Hallo! Ik ben zeven jaar oud! Ik hou van spelletjes
          spelen op de computer van mijn moeder. Eerst heb ik wel toestemming nodig.
          "Moeder, kan ik op de computer spelen? Natuurlijk Liefje!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Ik speel graag op de computer want ik kan er op het internet. Het internet
          is een beetje zoals je woonbuurt. Je kan er leuke plekken bezoeken, met
          familie praten en vrienden maken zodat je vele nieuwe dingen leert.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Gisteren ben ik een zoo gaan bezoeken dat dicht gelegen is aan ons huis.
          Ik zag een baby zebra. Ik nam een foto en veranderde de kleuren van haar
          strepen, zette een hoed op haar kop en voegde haar toe aan de collectie
          van gekke dieren. Tof! Later ben ik een hele verre plek gaan bezoeken namelijk
          Kenia. Dat is een land waar vele zebra's leven.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Soms praat ik op het internet met mensen die ik ken zoals mijn grootmoeder
          die in een ander land leeft. Hallo grootmoeder! Ze bakt koekjes dat ze zal
          opzenden voor mijn verjaardag. "Lekker, Ik wou dat het internet een ruik-o-rama
          had!" Ik kan met vele verschillende mensen praten zoals mijn neefje, maar
          ik praat meestal enkel met mensen dat ik ken.
      5:
        image: notes/C1_going_places_safely_5.png
        text: Het leukste dat ik kan vinden op het internet is het spelen van spelletjes.
          Gescoord! Ik hou ook van tekenen of het uitvinden van dingen zodat ik ze
          kan delen met mijn vrienden. Cool! Soms bezoek ik sites waar ik nieuwe dingen
          leer, maar het liefst zit ik op websites die me het meest aanspreken. Wauw,
          dinosaurussen!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Het internet is een super leuke plek. Net zoals een straat in een knusse
          woonwijk. Je moet wel goed oppassen waar je belandt op het internet. Er
          zijn 2 gouden regels om te onthouden. Regel nummer 1: Vraag altijd toestemming
          aan je ouders. Regel nummer 2: Praat enkel met mensen dat je kent en Regel
          nummer 3: Blijf op websites dat je goed kent en waar je graag bent.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wauw, dat was leuk! Etenstijd. Ik ga offline en kan bij niet wachten
          tot de volgende keer dat ik je weer terug zie.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Vandaag gaan we leren over "Pair" programmeren. In Pair programmeren
          werk je samen in een team. Waarom zouden twee mensen dezelfde computer moeten
          gebruiken? Omdat twee mensen altijd beter zijn dan één. In Pair programmeren
          werken jij en je partner aan hetzelfde project op dezelfde computer.
      2:
        image: notes/C1_pair_programming_2.png
        text: In Pair programming is de ene persoon de bestuurder en de andere de
          navigator net zoals je met een auto zou rijden. De bestuurder mag de computer
          "besturen" en de andere is de navigator. De navigator help de bestuurder
          bij het vinden van oplossingen voor een programmeer probleem en stuurt bij
          waar nodig.
      3:
        image: notes/C1_pair_programming_3.png
        text: Communicatie is de sleutel tot het succesvol uitvoeren van Pair programmeren.
          Behandel elkaar met respect, scheld elkaar niet uit en niemand speelt de
          baas over de ander. Jullie moeten altijd met jullie gedachten bij het programma
          zijn. De bestuurder kan uitleggen wat hij/zij aan het doen is en de navigator
          probeert de voorspellen wat hij/zij verderop het programma moet doen.
      4:
        image: notes/C1_pair_programming_4.png
        text: De navigator moet zich kunnen focussen op het totaalbeeld van het programma
          terwijl de bestuurder zich bezighoudt met de details. Beide rollen zijn
          belangrijk! Als team behalen jullie de beste resultaten.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Deze les heet "een zaadje planten" en het zal ons helpen om algoritmen
          te verstaan. Algoritmen zijn een soort specifieke set van instructies dat
          de volgorde bepaalt van iets. Zelfs alledaagse dingen zoals ontbijt eten
          of je tanden poetsen zijn algoritmen dat kleine stappen vereisen om de taak
          volbracht te krijgen.
      2:
        image: notes/C1_planting_seed_2.png
        text: Computers zijn heel slim, maar ze kunnen enkel verstaan wat jij hen
          opdraagt en liefst stap voor stap. Het grote voordeel van algoritmen is
          dat je de instructies kan opvolgen. Je kan iets doen dat in de toekomst
          dat je eerder niet kon. Het heeft iets weg van een receptje opvolgen.
      3:
        image: notes/C1_planting_seed_3.png
        text: Vandaag gaan we leren over het planten van ons eigen zaadje. Creëer
          je eigen algoritme door de plaatjes in stukken te snijden. Selecteer de
          plaatjes die het planten van een zaadjes in volgorde voorstellen.
      4:
        image: notes/C1_planting_seed_4.png
        text: Nu is het moment van de waarheid. Werkt deze algoritme wel? Volg de
          stappen in het algoritme nauwkeurig op. Zijn in de correcte volgorde? Is
          het zaadje op het einde van het algoritme geplant? Programmeren met plaatjes
          is leuk!
      5:
        image: notes/C1_planting_seed_5.png
        text: Wanneer we chocolade willen maken, zijn er vele grote stappen van dat
          proces dat bestaan uit vele kleinere stappen. Er bestaan vele recepten/algoritmen
          en manieren afhankelijk van de chocolade dat we willen maken. Elke stap
          is belangrijk, zelfs de kleinste! Zonder die ene kleine stap kan de rest
          van het proces niet uitgevoerd worden. Algoritmen maken zodat anderen ze
          kunnen verstaan is heel belangrijk. Daarom zorgen we ervoor dat elke kleine
          stap uitgeschreven is zodat de oplossing van het algoritme, voor iedereen
          die ze uitvoert, hetzelfde is.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Tijd voor creativiteit! Laten we die programmeer vaardigheden gebruiken
          om een verhaal te schrijven. Jouw verhaal heeft personages die kunnen praten
          en met anderen kunnen converseren. Probeer eens te denken over het verhaal
          dat je wil vertellen.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: De kat is altijd al bang geweest voor de hond. Wat als de kat begrijpt
          dat de hond eigenlijk heel lief is? De "Wanneer uitgevoerd" blok start alles.
          De "Verplaats" blok zal je personage verplaatsen en de "Praat" blok zal
          je personage alles zeggen wat jij typt.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Dit is de "Wanneer personages samenkomen" blok die je kan verbinden
          met andere blokken.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Ik zorgde ervoor dat de hond zou komen en "Hallo" zou zeggen, maar de
          kat werd bang en liep weg. "Ah ja". Als er meer tijd was, dan zou ik een
          goed einde verzonnen hebben. Einde van het verhaal!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Dit is het "Spel het woord" niveau. Gebruik de puzzel stukken om de
          bij te verplaatsen. Terwijl de bij beweegt zal het proberen letters te verzamelen
          om woorden te spellen.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Kan jij het woord spellen dat gegeven wordt in het vakje onder het podium?
          Wees voorzichtig! Een verkeerde richting uitgaan zal verkeerde letters opleveren.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Iets waar computers heel goed in zijn is het herhalen van commando's.
          Mensen worden het constant herhalen van dezelfde opdracht snel beu. Computers
          kunnen dezelfde opdracht miljoenen of zelfs miljarden keren nauwkeurig uitvoeren
          zonder verveeld te raken.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Bijvoorbeeld, als je iedereen een gelukkige verjaardag wil wensen op
          Facebook door ze een email te sturen dan zou dit een eeuwigheid duren om
          ze allemaal uit te schrijven. Een paar lijntjes code kan iedereen in een
          mum van tijd een gelukkige verjaardag wensen.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: In dit voorbeeld is je doel om de vogel naar het varken te krijgen.
          Nu zullen we de herhaal blok gebruiken om dit makkelijk uit te voeren. Gebruik
          de verplaats commando 5 keer om de vogel een plaats vooruit te schuiven
          naar het varken of gebruik het verplaats commando 1 keer en zet herhaal
          command op "5". Beide zullen hetzelfde doen.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Om dit te doen, sleep je de verplaats blok commando en zet je dit binnen
          het herhaal blokje. Daarna kan je hierop klikken en instellen hoeveel keer
          je dit wil herhalen.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Nog een laatste opmerking is je onbeperkt commando's kan plaatsen in
          de herhaal blok. Bijvoorbeeld, je stelt in dat je eerst vooruit moet, daarna
          naar links waardoor alles 5 keer uitgevoerd wordt. Veel plezier!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Je zou niet eens kunnen starten in de race als je geen mensen hebt die
          kunnen programmeren! Je hebt ze nodig omdat de race-auto's zoveel gegevens
          produceren en die informatie moet verwerkt worden om de prestaties te kunnen
          verbeteren.
      2:
        image: notes/C2_artist_intro_2.png
        text: In deze puzzels ben je een kunstenaar die een potlood gebruikt om verschillende
          vormen te tekenen. Overal waar je tekenaar heen gaat zal hij een lijn achter
          je tekenen.
      3:
        image: notes/C2_artist_intro_3.png
        text: Om op het werkvlak te kunnen bewegen ga je het "beweeg vooruit" blok
          gebruiken. Het vooruit blok vertelt de kunstenaar om 100 pixels vooruit
          te bewegen. Wat gebeurt er als we op 'Afspelen' drukken? De kunstenaar beweegt
          vooruit met precies 100 pixels. Pixels zijn de kleinste vierkantjes die
          je kunt zien op je scherm.
      4:
        image: notes/C2_artist_intro_4.png
        text: Het andere blok in deze puzzel zegt "Draai 90 graden rechtsom". Wanneer
          we deze "Draai Rechts" blok gebruiken, zorgt dit ervoor dat de tekenaar
          een bepaalde draai maakt. Je kan er dus mee spelen hoe ver je de tekenaar
          wil laten draaien. Dit is een draai van 90 graden.
      5:
        image: notes/C2_artist_intro_5.png
        text: En dit is een 120 graden draai. En vergeet niet, u kunt deze waarden
          wijzigen door op de pijlen naast de cijfers voor pixels en graden te klikken.
          Geniet van het tekenen met uw artiest!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Dit is een voorwaardelijk blok. Het zegt ALS de nektar of honing minder
          dan, gelijk aan of meer dan een bepaald getal is DAN iets doen.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Dit is handig als we niet weten hoeveel nectar of honing we moeten hebben,
          zoals we hier zien met dit vraagteken.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: In dit voorbeeld zeggen we ALS de paarse bloem nectar heeft groter dan
          0, haal nectar op. Dat zal onze bij vertellen dat hij nectar moet halen
          zolang er voorraad is. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Dit is de binaire armband les. We gaan onze initialen op een armband
          coderen die we kunnen dragen en aan onze vrienden kunnen laten zien!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binair is een manier om informatie weer te geven met behulp van slechts
          twee opties. Soms denken mensen dat dit alleen enen en nullen kunnen zijn.
          Maar je kunt binair ook weergeven met combinaties als aan en uit, op en
          neer en werkelijk elk paar tegengestelden.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hallo, ik ben Orion en ik programmeer hier bij Play-im robots. Alle
          computer- en robothersenen zijn eigenlijk kleine elektronische poorten.
          Wanneer de poort open is, kan er elektriciteit doorheen en wanneer de poort
          gesloten is, kan elektriciteit dat niet.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: De robotogen van een robot zijn een binair voorbeeld. De robotogen zijn
          LED's en die zijn of aan of ze zijn uit. Het is een binair systeem, dus
          het is of het een of het ander. We kunnen de lampjes gebruiken om binaire
          getallen weergeven. Als we een aantal robots hebben, kunnen we zeggen dat
          de eerste robot op de eerste plaats staat en de tweede robot op de tweede
          plaats, de derde staat op de vierde plek enzovoorts. Op deze manier maak
          je een binair nummer. De robot gebruikt zijn binaire ogen en rekent het
          voor je uit.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Deze les heet conditionele kaarten. Elke dag maak je beslissingen op
          basis van wat je hoort en ziet.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Ik wil naar het park lopen, maar eerst moet ik een besluit nemen of
          ik mijn paraplu mee zal nemen of niet. Daarom kijk ik uit het raam. Als
          het bewolkt is, neem ik mijn paraplu mee. Anders neem ik mijn zonnebril
          mee. Ik denk dat ik beter mijn paraplu mee kan nemen. Wat ik zie en hoor
          bepaalt wat ik mee neem naar het park.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Voorwaarden worden ook in spellen gebruikt. Vandaag zullen we de voorwaarden
          oefenen met een kaartspel. In dit spel zullen de door mij getekende kaarten
          vertellen wat mijn vrienden gaan doen. Als ik een zeven teken, gaat iedereen
          klappen, anders zegt iedereen "awwww." laten we het proberen!
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Ik denk dat je nog leukere spellen kunt maken met voorwaarden. Probeer
          het maar eens. Voorwaarden maken de computer er slim uit zien. Een computerprogramma
          die voorwaarden heeft, kan reageren op de gebruiker en veranderen wat hij
          gaat doen.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: |-
          Denk aan je leukste videospel. Verdien je voor het een meer punten dan voor iets anders? Dit gebeurt omdat de computer voorwaarden gebruikt. Zo maakt de computer beslissingen. Wat denk je van, als je het doel raakt krijg je tien punten en anders verlies je er drie?
          Wanneer je weet hoe voorwaarden werken, kun je allemaal leuke spellen maken.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Hier hebben we al een paar blokken, maar er is iets verkeerd.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Laten we de code debuggen door de snelheid te verminderen en goed te
          kijken wanneer het door elk blok heen gaat.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Oh, er is een probleem! De haarballen van de kat zijn 75 pixels lang
          en niet 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Heb je ooit gehoord van het debuggen van een programma? Met debuggen
          kun je uitvinden wat er niet werkt aan je programma. Bij het debuggen identificeer
          en herstel je de fouten.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Hier hebben we al een paar blokken gekregen. We gebruiken de stap-knop
          om stap-voor-stap door de blokken heen te gaan om te kijken of dit de goede
          oplossing is en als dit niet zo is, waar we het dan moeten oplossen.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Het lijkt erop dat er iets fout gaat! We hebben een extra ga-vooruit
          blok nodig. de stap-knop help ons om ons probleem te debuggebm door te kijken
          waar de fout is, zodat we die kunnen oplossen.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Op je hoofd hou je je hoed en je verstand vertelt je waar je bent en
          om te denken aan de dierentuin, knik hallo naar jou en jou! Gebruik je hoofd
          als je online bent om wat van jou is van jou te houden en om te weten hoe
          je veilig bent, hoe je leven privé blijft! Van je hoofd tot aan je tenen,
          wacht, om eraan te denken. Van je voeten tot je neus, wacht en denk online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Gebruik je hart om te groeien en groeien, en om jezelf een gezonde gloed
          te geven, en om een valentijn te maken, zeg tegen iemand dat je de mijne
          zal zijn! Gebruik je hart als je online bent, voel wat goed is en altijd
          aardig, en respecteer je vrienden, door eerlijk en aardig te zijn op het
          internet. Van je hoofd tot aan je tenen, wacht, denk na. Van je voeten tot
          je neus, wacht en denk online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Gebruik je armen om je huisdier te knuffelen, om te zorgen dat je kleren
          niet nat worden, om je favoriete trui te dragen en om je te helpen vliegen
          en te laten geloven. Gebruik je armen als je online bent, om een pauze te
          nemen en je technologie achter te laten en om een boom te vinden om in te
          klimmen. Van je hoofd tot aan je tenen, wacht en denk na. Van je voeten
          tot je neus, wacht en denk online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use your gut to store your food, and to listen to its growling mood,
          to make a belly flop, and to feel the gas in soda pop. Use your gut when
          you're online, to know to watch for certain signs, and to let it guide the
          way and tell you when it's not ok. From your head down to your toes, pause,
          think about it. From your feet up to your nose, pause and think online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: So think with your head, and feel with your heart, balance with your
          arms, listen to your gut, online. Use your legs to run and kick, and to
          jump and bounce on a pogo stick, and to dance around the block, and to skip
          along in your smelly socks. Use your legs when you're online, to stand up
          to bullies who cross the line, and remember to stand tall, be nice to creatures
          great and small.
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet
          up to your nose, pause and think online! So think with your head, and feel
          with your heart, balance with your arms, listen to your gut, stand up with
          your legs. From your head down to your toes, pause, think about it. From
          your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Elke keer als je online gaat, laat je een vingerafdruk achter die kan
          worden opgezocht, gekopieerd, gedeeld, uitgezonden, maar niet kan worden
          verwijderd. Wat voor vingerafdruk wil jij achterlaten?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Deze les heet "Grafiekpapier Programming" en gaat over algoritmen. Vandaag
          gaan we leren hoe we programma's schrijven, die elkaar laten zien hoe je
          een simpele zwart-wit-afbeelding opnieuw kunt maken, met behulp van alleen
          maar handgetrokken pijlen.
      2:
        image: notes/C2_graph_paper_2.png
        text: Een algoritme is een lijst van Instructies, die vertellen hoe je een
          taak uitvoert. Met deze lijst gaan we een schaal maken. Algoritmes kunnen
          je goed helpen als iemand anders moet weten hoe je iets moet doen.
      3:
        image: notes/C2_graph_paper_3.png
        text: Als je voor een computer een algoritme schrijft, moet je het in hele
          kleine stapje opbreken. Dus, maak eerst deze rij af, daarna de volgende,
          dan de volgende en dan ben je klaar.
      4:
        image: notes/C2_graph_paper_4.png
        text: Ik gebruik algoritmes op mijn werk. Als ik alle stapjes opschrijf, kan
          ik iets opnieuw maken, of ik kan iemand anders keren hoe je het opnieuw
          maakt. Doe het glas in de oven. smelt er een bol van. Volg de rest van de
          Instructies om een schaal te maken. Algoritmes geven je een plattegrond
          van hoe je iets doet.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Hier gaan we het "herhaal"-blok gebruiken, zodat we een aantal stappen
          niet hoeven op te schrijven, als we onze tekenaar programmeren. We hebben
          al wat blokken, maar zij ons alleen om te beginnen.
      2:
        image: notes/C2_artist_loops_2.png
        text: Om de blokken vier keer te herhalen, zodat we een vierkant hebben, gebruiken
          we gewoon het herhaal-blok. We zetten er een ga-vooruit en een draai-rechts
          blok in. Wanneer we op uitvoeren drukken, zal de tekenaar de stappen vier
          keer doen en dus het vierkant afmaken.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "Een lus is een herhaling van werkzaamheden. Dus, wanneer ik een bijenkorf
          betreed die ik wil inspecteren, bekijk ik een raam en stop deze daarna weer
          terug. \nIk herhaal dus de zelfde werkzaamheden meerdere keren. Het gaat
          in een lus: het meerdere keer uitvoeren van dezelfde werkzaamheden."
      2:
        image: notes/C2_bee_loops_2.png
        text: Dit is de "herhaal"-blok. Wat je in het herhaal-blok stopt, zal zo vaak
          worden uitgevoerd, als je tegen het herhaalblok verteld. In dit level kunnen
          we in plaats van drie keer "doe een stap vooruit en pak nectar" ook een
          "herhaal"-blok gebruiken en zeggen dat ze de actie drie keer moeten uitvoeren.
          Makkelijk toch?
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Meestal programmeer je alleen met tekst, maar wij gebruiken Blockly
          die gebruik maakt van blokken die je kunt zien, slepen en neerzetten om
          een programma te schrijven. Stiekem maak je nog steeds code. Om te beginnen
          gaan we een programma schrijven om deze Angry Bird door het doolhof helpen,
          om naar het boze varkens te gaan, die de eieren hebben gestolen.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly is verdeeld in drie grote delen. Is aan de linkerkant is de
          doolhof, waar je programma wordt uitgevoerd. De instructies voor elk niveau
          worden onder het doolhof geschreven. Het midden is de gereedschapskist en
          elk blok is een commando die de vogel kan begrijpen. De witruimte aan de
          rechterkant wordt de werkruimte genoemd en dit is waar we ons programma
          gaan bouwen.
      3:
        image: notes/C2_maze_intro_3.png
        text: Wat gebeurt er als ik het blok naar onze werkplek sleep en op "uitvoeren"
          druk? Dan gaat de vogel een vakje naar voren. Wat moet ik doen als de vogel
          daarna nog iets moet doen? Dan moet je een nieuw blokje aan het programma
          vastmaken.
      4:
        image: notes/C2_maze_intro_4.png
        text: Ik kies de "draai rechts"-blok en ik sleep het onder mijn ga-vooruit
          blok, tot er een gele pijl verschijnt. Dan laat ik het blok los en de blokken
          maken zich aan elkaar vast. Als ik opnieuw op "uitvoeren" druk, voert de
          vogel alle opdrachten uit van onze werkplek.
      5:
        image: notes/C2_maze_intro_5.png
        text: Als je een blok wilt weghalen, verwijder die dan uit de stapel en sleep
          het naar de prullenmand. Als je dan op "uitvoeren" drukt, kun je op de herstelknop
          drukken om de vogel opnieuw te laten beginnen. Kom op, pak de varkens!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Deze les heet Algoritmen in het echte leven. Algoritmen beschrijven
          dingen die mensen dagelijks doen. Koekjes recepten en aanwijzingen voor
          het bouwen van een vogelhuisje zijn beide dagelijkse algoritmen.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Vandaag maken en testen we een algoritme voor een papieren vliegtuigje.
          Voordat we daaraan beginnen, moeten we dit grote project verdelen in kleinere
          makkelijk te volgen stapjes. Daarbij moeten we bedenken welke stappen er
          zijn en in welke volgorde ze gedaan moeten worden.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Je gaat je algoritme maken door eerst de afbeeldingen los te snijden.
          Vervolgens kies je 6 afbeeldingen die de stappen laten zien die nodig zijn
          om een papieren vliegtuigje te maken, en zet je ze in de juiste volgorde.
          Nadat je alles op volgorde hebt, zal je je algoritme ruilen met een andere
          groep leerlingen om te kijken of je algoritme werkt. Een goed ontworpen
          algoritme is zeer belangrijk voor het maken van het beste papieren vliegtuigje.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: When we want to make chocolate, there are many big steps to that process.
          And each of those big steps has its own set of smaller steps. And there
          are different recipes, or algorithms, depending on how we want the chocolate
          to taste. Each step is important, even the small ones. So without one step,
          the rest of them cannot be completed. Creating algorithms that others can
          understand is really important. That's why each step has to be written down,
          so no matter who does it, the result is the same.
    C2_playlab_createstory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Tot nu toe maakte je een animatie of verhaal dat telkens hetzelfde deed
          wanneer je het uitvoert. Nu kan je een interactief spel maken dat je daadwerkelijk
          kan spelen.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Er is een "Wanneer pijl' blok en de "beweeg acteur" blok. Je kan deze
          blokken samenhangen om de acteurs te bewegen met behulp van de pijltjsetoetsen.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Today we're going to do relay programming. It's all about programming
          under pressure and debugging the mistakes that sometimes happen when you
          work really quickly or in teams. We'll use graph paper programming to simulate
          coding, and use relay races to simulate having a deadline.
      2:
        image: notes/C2_relay_programming_2.png
        text: In relay programming, teams will be racing to finish a graph paper program.
          You have to check your teammate's work, or debug it, fix it if there's a
          mistake, add your arrow, and run back and tag your teammate.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmeurs gebruiken debuggen veel om problemen in hun algoritme of
          code te vinden en op te lossen. Er zijn veel manieren om problemen te debuggen.
          Een van de makkelijkste manieren is om stap voor stap door de code te gaan
          totdat je de plek vindt waar iets fout gaat en daarna het probleem op te
          lossen.
      4:
        image: notes/C2_relay_programming_4.png
        text: Here, I'm trying to do a back handspring, but I keep falling off. I
          walk through each part, step by step, and realize where my mistake was.
          My coach showed me I wasn't putting my hands on the beam correctly. So I
          tried another back handspring on the beam with my new hand position, and
          I stuck it! I was really glad I debugged my back  handspring. We figured
          it out! Debugging is finding and fixing problems. Nice, good job!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: One thing that computers are really good at is repeating commands. As
          a person, you'd get really bored if you had to do the same thing lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times, and not get bored and be able to carry that out really well.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Dus het duurt bijvoorbeeld erg lang om alle e-mails te schrijven als
          ik iedereen op Facebook een fijne verjaardag wil wensen door ze een email
          te sturen. Echter kan ik met een paar regels code een systeem maken dat
          naar iedereen op Facebook een e-mail stuurt om ze een fijne verjaardag te
          wensen. Dit is dus wat loops zijn, en waarom ze waardevol zijn, iets wat
          computers erg goed kunnen.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: In this example your goal is going to be to move the bird to get the
          pig.  Now we're gonna be able to use the "repeat" block in order to be able
          to do this very easily. You can either do this by giving the computer a
          "move forward" command five times in order to advance the bird one step
          each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Or you can just tell the computer to "move forward" once, and then tell
          it to "repeat" that 5 times, and it will do the same thing. So in order
          to do this you drag your "move forward" command, and then you put it inside
          the "repeat" block.And you can click on it and tell it how many times you
          want to repeat the block to tell it how many steps you want it to take forward.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Now one more thing is you can put as many commands as you want inside
          the "repeat" block. So in this example you're telling it to move forward
          and turn left, which it will do five times. All right good job and have
          fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Een van de fantastische dingen in program,eren is dat als je een computer
          hebt geleerd om een bepaalde actie uit te voeren, je die functie opnieuw
          kunt aanroepen. Je kunt deze een naam geven die je vervolgens kunt aanroepen.
          Het is alsof je de taal uitbreidt.
      2:
        image: notes/C3_artist_functions_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square, so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code. It will get done
          for us. We've added that concept to our programming language.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Je zou niet eens kunnen starten in de race als je geen mensen hebt die
          kunnen programmeren! Je hebt ze nodig omdat de race-auto's zoveel gegevens
          produceren en die informatie moet verwerkt worden om de prestaties te kunnen
          verbeteren.
      2:
        image: notes/C3_artist_intro_2.png
        text: In deze puzzels ben je een kunstenaar die een potlood gebruikt om verschillende
          vormen te tekenen. Overal waar je tekenaar heen gaat zal hij een lijn achter
          je tekenen.
      3:
        image: notes/C3_artist_intro_3.png
        text: Om op het werkvlak te kunnen bewegen ga je het "beweeg vooruit" blok
          gebruiken. Het vooruit blok vertelt de kunstenaar om 100 pixels vooruit
          te bewegen. Wat gebeurt er als we op 'Afspelen' drukken? De kunstenaar beweegt
          vooruit met precies 100 pixels. Pixels zijn de kleinste vierkantjes die
          je kunt zien op je scherm.
      4:
        image: notes/C3_artist_intro_4.png
        text: Het andere blok in deze puzzel zegt "Draai 90 graden rechtsom". Wanneer
          we deze "Draai Rechts" blok gebruiken, zorgt dit ervoor dat de tekenaar
          een bepaalde draai maakt. Je kan er dus mee spelen hoe ver je de tekenaar
          wil laten draaien. Dit is een draai van 90 graden.
      5:
        image: notes/C3_artist_intro_5.png
        text: En dit is een 120 graden draai. En vergeet niet, u kunt deze waarden
          wijzigen door op de pijlen naast de cijfers voor pixels en graden te klikken.
          Geniet van het tekenen met uw artiest!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: When you put a loop inside of another loop, we call that a nested loop.
          For example, here we're given the code already to draw one triangle with
          sides of length 100 pixels using the repeat times block set to three, once
          for each side of a triangle.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: But we want to draw six triangles. In order to do that, we're going
          to take that loop and place it inside of another repeat times block. Pretty
          cool!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Dit is een voorwaardelijk blok. Het zegt ALS de nektar of honing minder
          dan, gelijk aan of meer dan een bepaald getal is DAN iets doen.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Dit is handig als we niet weten hoeveel nectar of honing we moeten hebben,
          zoals we hier zien met dit vraagteken.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: In dit voorbeeld zeggen we ALS de paarse bloem nectar heeft groter dan
          0, haal nectar op. Dat zal onze bij vertellen dat hij nectar moet halen
          zolang er voorraad is. Ta-dah!
    C3_bee_debugging:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Heb je ooit gehoord van het debuggen van een programma? Met debuggen
          kun je uitvinden wat er niet werkt aan je programma. Bij het debuggen identificeer
          en herstel je de fouten.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Hier hebben we al een paar blokken gekregen. We gebruiken de stap-knop
          om stap-voor-stap door de blokken heen te gaan om te kijken of dit de goede
          oplossing is en als dit niet zo is, waar we het dan moeten oplossen.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Het lijkt erop dat er iets fout gaat! We hebben een extra ga-vooruit
          blok nodig. de stap-knop help ons om ons probleem te debuggebm door te kijken
          waar de fout is, zodat we die kunnen oplossen.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define
          new commands, how to add your own words to a computer language. Most computer
          languages have only about one hundred words or commands. The art and magic
          is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: We do this all the time in sports. For example, in basketball, you start
          by learning how to dribble, how to do a lay-up, how to rebound. Once you've
          learned these really basic moves, you learn new moves and put together these
          building blocks, like a pick and roll or give and go. You can then go from
          there to do more complex plays. Once you learn that play and give it a name,
          everybody on the team knows how to do it.
      3:
        image: notes/C3_bee_functions_3.png
        text: Similarly once you've taught a computer how to do an action once using
          these sequences of commands, you can make up your own name for that action
          so it's easy to repeat it later. When you define your own command and give
          it a name, that's called a function. Now we're going to use functions to
          help the bee.
      4:
        image: notes/C3_bee_functions_4.png
        text: In this example, our function is called get 2 nectar, this green block
          right here. We know what get 2 nectar does by looking at this grey box which
          is the function definition. If we look inside there, the get 2 nectar is
          going to get nectar and then get nectar again. Always look at what's inside
          the grey box so that you know what these green function blocks can do.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Now we're going to use nested loops with the bee. We're given some starter
          code which tells the bee to move forward and get nectar three times and
          then turn right. Let's take that whole piece of code and nest it inside
          another repeat block and set to repeat three times. Done!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Je gaat je eigen bounce-spelletje maken dat je kunt delen met je vrienden!.
          Hoe cool!
      2:
        image: notes/C3_bounce_2.png
        text: Om te beginnen moeten we de batjes aasluiten op de pijltjes toetsen
          van ons toetsenbord.
      3:
        image: notes/C3_bounce_3.png
        text: We can do this by linking the when left arrow block to the move left
          block and the when right arrow block to the move right block. Give it a
          go and you'll be programming your own bounce game in no time!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: This lesson is computational thinking. Sometimes learning a new game
          can be tough, right? At first it might seem really confusing and sometimes,
          there's no one there to teach you the rules, so you have to figure it out
          on your own.
      2:
        image: notes/C3_computational_thinking_2.png
        text: The good news is that you can get better at figuring things out on your
          own when you know a few thinking tricks. These tricks are unique ways for
          looking at and solving problems. In this lesson, you'll learn about four
          tricks and practice them with your friends to figure out the rules to a
          game.
      3:
        image: notes/C3_computational_thinking_3.png
        text: When you break down a big problem into smaller pieces, you're using
          your brain to decompose the big problem. Once we've decomposed the big problem
          into several smaller problems, we can go on to our next trick, which is
          called pattern match.
      4:
        image: notes/C3_computational_thinking_4.png
        text: That's when we look for similarities between things. Once I find the
          things that are the same, I can figure out what things are different. When
          I remove those differences, that's called abstraction.
      5:
        image: notes/C3_computational_thinking_5.png
        text: After I have figured out the steps to solving a problem, I can put those
          steps in a specific order called an algorithm so that anyone can use my
          directions to solve that problem. We're going to use these four steps to
          figure out how to play the game with no rules. By the end of the game, you'll
          be able to play something that looks like this!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: This lesson is called crowdsourcing. In this lesson we'll use a deck
          of cards to learn about how much easier some things can be to do in groups
          instead of trying to do them all alone. So grab some friends and make something
          awesome. Crowdsourcing is getting help from a large group of people to finish
          something faster.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of
          amateurs and professionals link their computers together to search through
          billions and billions of pieces of information. Looking for things like
          the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: When you see a movie, each second of the movie is 24 individual pictures,
          we call those frames. So every one of those pictures needs to be created
          and rendered and put all together. My team and I, we're all software developers.
          We all work together to create a piece of software that actually creates
          an image, creates the final image that you see on screen. That's a tool
          that artists and other developers can use as part of their teamwork and
          their process to be able to create the images that they want on screen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: For example, in Finding Nemo, when Crush and Squirt and all their friends
          are flying through the East Australian Current. You're seeing images of
          water flowing by, you're seeing the colors on the back of the turtle, you're
          seeing the sides of the fish. All of those things are generated through
          math and computer programs that we write, that we then give to the artist
          and they take that to create that final image and tweak it and make it look
          beautiful and look fun.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer
          games. Have you ever thought about how computer programmers turn the steps
          of a game into a program? The first step in creating computer games and
          in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: The thinking step of problem solving produces an algorithm, which is
          a step by step plan for solving a problem or finishing a task. In this lesson,
          you'll create an algorithm for a dice race game. Then you'll ask your friends
          to try out your plan to see if they can follow the steps to play the game.
          After the programmer is sure the steps are correct, it's time to translate
          the algorithm into a program with language that the computer can understand.
      3:
        image: notes/C3_dice_race_3.png
        text: Almost everything we do every day requires an algorithm, a list of steps
          you can follow to finish a task. Think about getting ready for school or
          planning a fun day with your friends or fixing a snack. To complete any
          of those tasks, you'll need to break it down into smaller steps and sometimes
          the steps must be in a specific order.
      4:
        image: notes/C3_dice_race_4.png
        text: Think about making a sandwich. It doesn't matter which ingredient you
          get out of the cabinet first. But you can't spread the peanut butter until
          you open the jar. Computers need algorithms and programs to show them how
          to do even simple things that we can do without thinking about it.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program
          is the actual instructions given to the computer to make it happen. An algorithm
          has to be translated into a program before a computer can run it. Breaking
          a task into steps called an algorithm is sometimes difficult. But like any
          new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: While loops are pretty similar to what you do in everyday life. Imagine
          you are washing your car, you'll keep scrubbing until it's clean. While
          it's not clean, continue to scrub. You're evaluating these things all the
          time.
      2:
        image: notes/C3_farmer_while_2.png
        text: We've got a new look to help your farmer out. It's called a while-block.
          It's pretty simple actually. While a statement at the top is true, do something.
          For example, while there's a pile move one hayful. Go ahead and give it
          a try with your farmer.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: This lesson is functional suncatchers. You'll be creating these pretty
          suncatchers using functions. There are several steps in creating one of
          these suncatchers. Some of the steps you have to repeat many times.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is
          figure out what we have to repeat over and over again. We can group these
          steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: But there is more to creating a beautiful suncatcher than following
          precise steps. Sometimes we want to be creative and change the color of
          the beads we're using. We can make every suncatcher unique if we use different
          colored beads.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the
          beads as variables which is a word that means a placeholder for information
          that can change. Have fun creating beautiful suncatchers using functions
          and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place
          and similar to this busy road. Messages like cars are zooming along to get
          to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: Acting out how the internet works will help you understand what's happening
          when you use the internet. You'll learn how messages get from your computer
          to a favorite website or from a friend to an email inbox. Just like it's
          easier to navigate busy roads when you know the roads and can read the signs,
          traveling the internet is not so complicated when you know what goes on
          behind the scenes.
      3:
        image: notes/C3_internet_3.png
        text: Sending messages on the internet is a little bit like sending messages
          in the mail but with a few differences. I'm here at Google.com. The IP address
          for this website is this number. You can think of an IP address as your
          return address in the mail. Let's imagine that I want to send a message
          in the mail to someone in the office down the there. Do you see URL and
          the IP address on that door? I've written this message and hit send.
      4:
        image: notes/C3_internet_4.png
        text: Unlike the Postal Service, the first thing that happens is that the
          internet breaks the message into smaller parts so it can be sent more easily.
          These small parts are called packets. Each packet of the message is delivered
          to the destination one at a time. These packets are all put together in
          the right order so that the receiver can read the message correctly. Of
          course, there are many more things to learn about how the internet works
          but this is a great start. You're on your way to becoming a savvy internet
          user! Be sure to tell your family and friends what you've learned!
      5:
        image: notes/C3_internet_5.png
        text: My name is Amanda Camp and I'm a software engineer at Google. I work
          on a team that works on a backend server that stores profiles and contacts.
          In my job, we think a lot about how contacts can be sent to other devices,
          such as your phone. Most people have a lot of contacts, you might have say,
          1000 contacts and we don't want to send all of those contacts at once to
          your phone because it's too large of a message. Similar to the way the internet
          breaks large messages down into packets, we use a concept called paging
          where we might only send your phone 100 contacts at a time and let your
          phone respond to us and ask for the next 100.
      6:
        image: notes/C3_internet_6.png
        text: The most exciting thing about software is the fact that it can impact
          the entire world. I first learned to program when I was about nineteen.
          I think I was already a sophomore or a junior in college. The first program
          I remember writing is something that converted Celsius to Fahrenheit. I
          like programming because I like helping people. I can write programs at
          Google that help people all over the world and that's really mind-boggling
          and exciting.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: People make decisions everyday. For example, before you go outside,
          you have an if statement that says if it's raining, then I need to get my
          jacket. Computers are amazing once you decide those kinds of statements
          that they can reliably execute those things and unbelievable speed. A computer
          program really is a little bit of math and some if statements where the
          decision gets made.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: Het als-blok helpt de zombie een beslissing te maken. Het controleert
          iets. Laten we bijvoorbeeld een blok maken dat zegt of er een pad naar links
          is, en er een 'draai linksom'-commando in zetten. We vertellen de zombie
          om om zich heen te kijken, te kijken of er links een pad is en in dat geval
          te draaien.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Dan gebruiken we het 'ga vooruit'-blok in deze herhaling om hem zo lang
          hij wil vooruit te laten gaan. Als er een bocht is zegt het als-blok dat
          hij moet draaien. Je kunt zien dat als we dat doen, als we naar links draaien
          en anders vooruit gaan, we ons doel bereiken.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: It's an example of using an if statement which is really a fundamental
          concept in computer programming. One of the first things I learned was how
          to write a program that played tic-tac-toe. I had if statements to say,
          ok, if the other person is about to win, go ahead and block that spot. Have
          fun learning how to use if statements, it's a key concept.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could
          use five move forward blocks or we could tell the computer to move forward
          and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move
          forward block inside the repeat block. Hit run and the zombie will move
          forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Tot nu toe maakte je een animatie of verhaal dat telkens hetzelfde deed
          wanneer je het uitvoert. Nu kan je een interactief spel maken dat je daadwerkelijk
          kan spelen.
      2:
        image: notes/playlab_2.png
        text: Er is een "Wanneer pijl' blok en de "beweeg acteur" blok. Je kan deze
          blokken samenhangen om de acteurs te bewegen met behulp van de pijltjsetoetsen.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program.
          The written notes and words tell the singer exactly what to do. Some parts
          of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program
          that are used over and over again are called functions. When you read song
          lyrics and it says the word chorus, do you sing the word chorus? No, you
          look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: In this lesson, you'll learn a silly little song called little bunny
          foo foo. The song has a chorus that you will sing several times over and
          over again. A function is a piece of code that you can call and use over
          and over again. It makes programming easier and more efficient so you don't
          have to write out the steps of your function over and over again. You can
          just write it once!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: This is the conditional block. It says if you're at the flower or the
          honeycomb, then do something. This is useful when we don't know how much
          honey or nectar to get as we see here with this question mark.
      2:
        image: notes/C4_bee_conditional_2.png
        text: In this example, we're going to say, if it's a flower, get all the nectar
          and then use another one to say, if it's a honeycomb, make honey. Ta-dah!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: We have a new block that's called the if/else block. It's a conditional
          statement just like the if block you've used in the puzzles before. But
          now there's a new part at the bottom that says else. The if/else block lets
          the bee make a decision between two sets of actions. If the bee is at a
          flower, the bee will do the set of actions you put in the first part where
          it says do. If the bee is not at a flower, the bee will do the set of actions
          you put in the slot where it says else.
      2:
        image: notes/C4_conditionals_2.png
        text: If statements are how computers are able to make decisions. Humans set
          up conditions for the computer that say if the computer is presented with
          a certain situation do this. Else, which just means otherwise, do that.
          The top of our if/else block says if at flower. But the top of our block
          could say other things, like if nectar equals 2 or if there's a path ahead,
          our block will behave in the same way. That if the statement at the top
          is true it will do the first set of actions. But if the statement at the
          top is false, it will do the second set of actions.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running. The benefit of using a real for loop
          instead of the repeat block is that you can actually see the counter variable
          and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Now that you've edited function blocks, it's time to create a new function
          block from scratch. It's really simple. You'll see the toolbox has a category
          called functions. If you click on this, you'll see an orange button called
          create a function. Clicking on this brings up the function editor that you've
          already used to edit existing function blocks.
      2:
        image: notes/C4_function_create_2.png
        text: Just like before, you started by naming your function, writing down
          a description for what the function is supposed to do. For instance, it's
          supposed to draw a square or draw a triangle and then drag blocks from the
          toolbox into the white work space below. Remember to drag these blocks inside
          the green wrapping block for the function.
      3:
        image: notes/C4_function_create_3.png
        text: Once you're done, click on save and exit. This will take you back to
          the main puzzle work space. The new function you created will show up as
          a green block in the function category in your toolbox. Drag and drop this
          into the main work space and use it like any other block to solve the puzzle.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Een van de fantastische dingen in program,eren is dat als je een computer
          hebt geleerd om een bepaalde actie uit te voeren, je die functie opnieuw
          kunt aanroepen. Je kunt deze een naam geven die je vervolgens kunt aanroepen.
          Het is alsof je de taal uitbreidt.
      2:
        image: notes/C4_function_edit_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code and it will get
          done for us. We've added that concept to our programming language.
      3:
        image: notes/C4_function_edit_3.png
        text: In this puzzle, we have already created a draw a square function for
          you. You'll see it in the toolbox as a green block. What you'll need to
          do is write the same code you wrote before to draw a square and put it in
          this function. To do that, click on the edit option in the green draw a
          square block. This will open up the function editor. The function editor
          has three parts. A place where you name your function. This will appear
          on the green block before that function. Then write out a short description
          of what your function is supposed to do.
      4:
        image: notes/C4_function_edit_4.png
        text: In this case, it's supposed to draw a square. The white space below
          this is the work space and works just like the work space you've already
          been using. Drag and drop blocks from the toolbox into this work space.
          Remember to put the blocks that create a square inside the green wrapping
          block for the function. Once you're done, click on save and exit. This will
          take you back to the main puzzle work space. Now you can use the draw the
          square function block just like any other block to solve the puzzle.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Here's a function that draws a square with 50 pixel sides. That's great
          but what if I wanted to draw a square with sides 50 pixels and another square
          with sides of 100 pixels? We shouldn't have to make two separate functions
          that do almost the same thing. Instead, we can use one function with a parameter.
      2:
        image: notes/C4_function_parameters_2.png
        text: Parameters allow us to pass values into a function that get used as
          variables inside the function. Let's try adding a parameter called like
          to this function so we can use it to create squares of different sizes.
          In the function editor, you can edit the name and description like before
          but now you can also add a parameter. Write the name of your parameter in
          the space and click Add Parameter. This will create a red block with the
          name of the parameter you just created. Now we can replace the move forward
          by 100 block with the parameter Length so it will move forward by Length.
      3:
        image: notes/C4_function_parameters_3.png
        text: Click save and close and drag out your new create a square block from
          the functions category in the toolbox. You'll notice there's an empty space
          next to length because the function wants to know what value the parameter
          Length should have. Drag a number block from the Math category and place
          it in this space. See how you can use the function again and again with
          different lengths to make squares of different sizes? Try it for yourself!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Meestal programmeer je alleen met tekst, maar wij gebruiken Blockly
          die gebruik maakt van blokken die je kunt zien, slepen en neerzetten om
          een programma te schrijven. Stiekem maak je nog steeds code. Om te beginnen
          gaan we een programma schrijven om deze Angry Bird door het doolhof helpen,
          om naar het boze varkens te gaan, die de eieren hebben gestolen.
      2:
        image: notes/C4_intro_2.png
        text: Blockly is verdeeld in drie grote delen. Is aan de linkerkant is de
          doolhof, waar je programma wordt uitgevoerd. De instructies voor elk niveau
          worden onder het doolhof geschreven. Het midden is de gereedschapskist en
          elk blok is een commando die de vogel kan begrijpen. De witruimte aan de
          rechterkant wordt de werkruimte genoemd en dit is waar we ons programma
          gaan bouwen.
      3:
        image: notes/C4_intro_3.png
        text: If I drag the move block to our work space and press "run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C4_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: Als je een blok wilt weghalen, verwijder die dan uit de stapel en sleep
          het naar de prullenmand. Als je dan op "uitvoeren" drukt, kun je op de herstelknop
          drukken om de vogel opnieuw te laten beginnen. Kom op, pak de varkens!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: If I want to draw a rectangle 50 pixels tall and that is twice as wide
          as it is tall, how would I program the computer to do that? Well, I could
          tell the artist to go up fifty, turn right, and then go over 100 and move
          the whole thing twice. But then I'm doing the math for the computer.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers
          are really good at doing math so we should leave it to them whenever possible.
          If I just used a variable called height instead, then I could easily change
          height to fifty and then change my algorithm to tell the artist to go up
          by height, turn right and then go over by height times 2, which gives us
          a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: This lesson is called Tangram Algorithms. A tangram is a puzzle with
          seven pieces that can be put together to make other shapes. You'll be using
          an algorithm to explain to your partner how to put the puzzle together.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a
          task. We use them every day with things like shopping lists and recipes.
          If you keep an algorithm simple, there are lots of ways to interpret it
          and whoever performs that algorithm might not get exactly what you wanted.
          If you want to make sure that everyone ends up with the exact same thing,
          then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: I'm using an algorithm today to complete a painting. I wanted to try
          doing a painting of some wolves but I'm not the most amazing painter. Luckily
          for people by me, there is paint by numbers. There are forty colors and
          it has little letters and numbers that tell you which color to paint each
          section. Paint by numbers tells me exactly what color to use and where.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: It's very specific so I'm able to follow directions and the painting
          will come out looking awesome. It's a great algorithm. If the instructions
          weren't specific enough, my wolves wouldn't look as good. When you really
          want something to turn out exactly the way that you planned it, it's best
          to be extremely precise.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Each team, the person who's instructing that's the person who's holding
          the paper, has to figure out what their off symbol is going to be and what
          their on symbol is going to be. In binary, it's kind of like an alphabet
          with two letters. Like having A and B be your entire alphabet but you've
          got a 0 and a 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: The most common way you use binary is in an if statement. It's a classic
          thing from programming. The program runs along and it says if something
          is true, then do this. Or it's not true and you do something else. What
          if you want to do something maybe a little more complicated. Instead an
          if statement, you want to work with something like an image or a sound in
          a computer.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'A computer only knows binary but an image, it''s not binary, it''s
          not ones and zeros so how do you do that? Here''s an example: You have this
          beautiful picture. Now a picture is basically a form of information. All
          information can be encoded in binary one way or another, you just have to
          figure out how to do it.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: You imagine that we're going to put a grid over this panda bear and
          for each square, we're going to decide whether that square is more black
          or more white. And then we're going to color it that way. Now each cell
          on the grid is either black or white and then the black squares we say those
          are zeros (binary digit) and the white squares are ones, the other binary
          digit. At the end, you're left with just a bunch of ones and zeros. That's
          how you represent this image in binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that
          variable in an algorithm, it opens up the container and looks at the value
          inside. This lets you write smarter algorithms that behave differently depending
          on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: For example, if you wanted to write an algorithm to say Happy birthday,
          you're turning 10! to my little brother, that's great now but when I run
          it next year I'd want it to say, Happy birthday, you're turning 11! I could
          create a variable called age to store my brother's age and write my algorithm
          to say Happy birthday, you're turning 'age' instead. Because variable can
          change, every year I can update the variable 'age' to equal 'age' plus 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: In this puzzle, we're going to be using a variable that will set the
          length of the line our artist draws. Later on in our code, the move forward
          block will look at that length variable to see what value you've set it
          to.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use
          that variable in an algorithm, it opens up the container and looks at the
          value inside. This lets you write smarter algorithms that behave differently
          depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Your screen is split into three main parts. On the left is the gamespace,
          where your program will run. The instructions for each level are written
          below. This middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace, and this
          is where we'll build our program.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Students will break into groups to write instructions and then they''ll
          switch them with another group that will have to draw the monster. Groups
          will write instructions using the four steps of computational thinking:
          decomposition, pattern location, abstraction and algorithms.'
      3:
        image: notes/unplug2_3.png
        text: First groups will decompose the task which means make a game plan. Then
          they'll look for patterns between all the monsters in the catalog. When
          they come across differences between the monsters, they'll abstract or remove
          those details. For instance, one monster in the catalog has vegitas eyes
          and another has spritem eyes. But they both have eyes so we can write a
          line that says the monster has blank eyes.
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: Hi, I'm Kathleen Kennedy and I'm the producer of Star Wars, The Force
          Awakens. Today you'll be working with one of our stars, BB-8. BB-8 is a
          spherical droid. Everything he does and every movement that he makes is
          controlled by computer software. Computer science impacts every industry,
          from marketing to health care to film. In fact, hundreds of computer engineers
          worked together to make a film like The Force Awakens.
      2:
        image: notes/starwars_intro_2.JPG
        text: Hi I'm Rachel Rose, I'm a senior R&D engineer at ILM and I lead the
          animation and creature development team. In The Force Awakens, I'm responsible
          for helping the artists develop rigs which are the parts of the character
          that move that allow the character to look very believable in a galaxy far
          far away.
      3:
        image: notes/starwars_intro_3.JPG
        text: In the next hour, we're going to build our own Star Wars game. We'll
          teach you the basic concepts of programming. Usually programming is all
          text but we're going to use blocks here so that we can drag and drop to
          write the programs. Under the hood, you're still creating code. After you
          try the basics with blocks, we'll switch you to JavaScript, one of the most
          popular programming languages on the web.
      4:
        image: notes/starwars_intro_4.JPG
        text: To start off, we're going to work with Rey to program BB-8 to walk to
          collect all of the scrap parts. Your screen is split into three parts. On
          the left is the Star Wars game space, where code will run. The instructions
          for each level are written below the game space.
      5:
        image: notes/starwars_intro_5.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that BB-8 can understand.
      6:
        image: notes/starwars_intro_6.JPG
        text: The white space on the right is called the workspace and this is where
          we are going to build our program.
      7:
        image: notes/starwars_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace and press run, what
          happens? BB-8 moves left one block on the grid.
      8:
        image: notes/starwars_intro_8.JPG
        text: And what if I want BB-8 to do something after the moveLeft(); block?
          I can add another block to our program. I'm going to choose the moveUp();
          block and I'll drag it under my moveLeft(); block until the highlight appears.
          Then I'll drop it and the two blocks will snap together.
      9:
        image: notes/starwars_intro_9.JPG
        text: When I press run again, BB-8 will perform the commands that are stacked
          from top to bottom on our workspace. If you ever want to delete a block,
          just remove it from the stack and drag it back into the tool box.
      10:
        image: notes/starwars_intro_10.JPG
        text: After you've hit run, you can always hit the reset button to get BB-8
          back to the start. Now let's get rolling!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Inside the blocks we've been using are JavaScript commands. JavaScript
          is the most popular programming language for professional developers today.
          Blocks are a great way to get started learning to code and in fact, top
          universities like Harvard and Berkeley start teaching this way. But once
          we learn the basics, engineers write code by typing because it allows us
          to go faster.
      2:
        image: notes/starwars_typing_2.JPG
        text: We can type hundreds of commands without having to find them in the
          toolbox or drag them out. Because you're learning typing may be slower at
          first but we wanted you to give it a try.
      3:
        image: notes/starwars_typing_3.JPG
        text: In the upper right corner on your workspace, you can click the show
          text button on any puzzle to switch from blocks to typing code as text.
      4:
        image: notes/starwars_typing_4.JPG
        text: In the next lesson, we'll start you out in typing mode. Here you can
          still drag the block from the toolbox or you can type the command name.
          As you start to type, you'll see names of possible commands show below where
          you're typing. Instead of typing the whole command name, you can select
          one of these to move faster. In my job, I use this auto-complete feature
          all the time when writing code.
      5:
        image: notes/starwars_typing_5.JPG
        text: When you're typing code, the computer needs you to be very precise.
          You need to spell and capitalize the command name exactly correctly, including
          the parentheses and the semi-colon. Even with a small typing mistake, BB-8
          cannot understand the code and won't be able to move.
      6:
        image: notes/starwars_typing_6.JPG
        text: When you make an error on the line, the editor highlights it for you
          so that you can try changing your text to fix it.
      7:
        image: notes/starwars_typing_7.JPG
        text: If you get stuck, you can always start over with the start over button
          and you can switch back to block mode at any time by clicking in the top-right
          corner. Ok, let's give typing a try! And if you make mistakes, don't get
          frustrated. It takes everybody a few tries to get it right.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down.
      7:
        image: notes/starwars_events_7.JPG
        text: To do this, we'll use a command called whenUp(). When you drag the command
          out of the toolbox, you'll see that it starts and ends with a curly bracket
          instead of a semi-colon. This gives us space to put other commands in the
          middle. Every command that we place inside these brackets will run when
          the player presses the up arrow.
      8:
        image: notes/starwars_events_8.JPG
        text: We want R2-D2 to go up so let's put a goUp(); block inside the command.
          And we'll do the same thing to make R2-D2 go down.
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance,
          we can let R2-D2 react to button press events that move him around the screen.
          Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_congrats_3.JPG
        text: "[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win."
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It's really hard! Sometimes you just get an advantage, an unfair
          advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Hi I''m Kathleen Kennedy and I''m the producer of Star Wars: The Force
          Awakens. Today you''ll be working with one of our stars, BB-8. BB-8 is a
          spherical droid. Everything he does and every movement that he makes is
          controlled by computer software. Computer science impacts every industry,
          from marketing to health care to film. In fact, hundreds of computer engineers
          worked together to make a film like The Force Awakens.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Hi, I'm Rachel Rose. I'm a senior R&D engineer at ILM and I lead the
          animation and creature development team. In The Force Awakens, I'm responsible
          for helping the artist develop rigs, which are the parts of the character
          that move that allow the character to look very believable in a galaxy far,
          far away.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: In the next hour, we're going to build our own Star Wars game that will
          teach you the basic concepts of programming. Usually programming is all
          text but we're going to use blocks here so we can drag and drop to write
          the programs. To start off, we're going to work with Rey to program BB-8
          to walk to collect all of the scrap parts.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Your screen is split into three parts. On the left is the Star Wars
          game space where code will run. The instructions for each level are written
          below the game space.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: This middle area is the toolbox and each of these blocks is a command
          that BB-8 can understand.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we're going to build our program.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace, what happens? BB-8
          moves left one block on the grid.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: And what if I want BB-8 to do something after the moveLeft(); block?
          I can add another block to our program. I'm going to choose the moveUp();
          block and I'll drag it under my moveLeft(); block until the highlight appears.
          Then I'll drop it and the two blocks will snap together. When I press run
          again, BB-8 will perform the commands that are stacked top to bottom on
          our workspace.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back into the toolbox.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: After you hit run, you can always hit the reset button to get BB-8 back
          to the start. Now let's get rolling!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down. Now instead
          of writing all the code to control our droid in advance, we can let R2-D2
          react to button press events that move him around the screen.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Step by step, your game is getting more interactive.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: "[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win."
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It's really hard! Sometimes you just get an advantage, an unfair
          advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: When you're done making your game, choose share to get a link you can
          share with friends or play your game on your phone. Have fun!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Mijn naam is Jens Bergensten, maar ik ben beter bekend als Jeb. Ik ben
          de hoofdontwikkelaar van Minecraft, hier bij Mojang in Stockholm. Volgens
          mij was ik elf of misschien twaalf toen ik begon met programmeren omdat
          ik games wilde maken. Een vriend van mijn vader zei dat ik om games te kunnen
          maken moest leren programmeren. Zo ben ik begonnen. Ik houd van ontwerpen
          en onderzoeken hoe games in elkaar zitten. Dat vind ik echt het leukste
          aan Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: In het komende uur leer je de basis van informatica door te programmeren
          hoe Alex of Steve zich moeten bewegen door een gesimuleerd stuk van een
          Minecraft-wereld.
      3:
        image: notes/mc_intro_3.JPG
        text: 'Meestal programmeer je met behulp van tekst, maar vandaag gebruiken
          we blockly: een systeem met blokken die je kunt slepen en plaatsen om programma''s
          te schrijven. Onder het oppervlak schrijf je JavaScript-code.'
      4:
        image: notes/mc_intro_4.JPG
        text: De concepten die je leert worden elke dag door computerprogrammeurs
          gebruikt en vormen de basis van de informatica. Hier bij Mojang, gebruiken
          we dezelfde concepten om Minecraft te laten werken.
      5:
        image: notes/mc_intro_5.JPG
        text: Voordat je begint, moet je een personage kiezen. Ik kies Alex. Laten
          we code maken voor een programma dat haar helpt over het scherm te bewegen.
      6:
        image: notes/mc_intro_6.JPG
        text: Je scherm is in drie hoofddelen gesplitst. Links bevindt zich de Minecraft-ruimte
          waar je programma draait. De instructies voor elk level worden eronder geschreven.
      7:
        image: notes/mc_intro_7.JPG
        text: Dit middelste gebied is de gereedschapskist en elk van deze blokken
          is een commando dat Alex' acties bepaalt.
      8:
        image: notes/mc_intro_8.JPG
        text: De witte ruimte rechts is de werkruimte en daar bouwen we ons programma.
      9:
        image: notes/mc_intro_9.JPG
        text: Als we het "beweeg vooruit"-blok naar onze werkruimte slepen en op Run
          klikken, wat gebeurt er dan? Alex beweegt een vakje vooruit in het raster.
      10:
        image: notes/mc_intro_10.JPG
        text: En wat als we iets willen doen nadat ze één vakje vooruit heeft bewogen?
          Dan kunnen we een ander blok toevoegen aan ons programma. Ik kies het "draai
          rechts"-blok en sleep het onder mijn "beweeg vooruit"-blok tot deze oranje
          lijn verschijnt. Dan laat ik het los en de twee blokken klikken in elkaar.
          Als we weer op Run klikken, voert Alex de commando's uit die van boven naar
          beneden zijn gestapeld in onze werkruimte.
      11:
        image: notes/mc_intro_11.JPG
        text: En als je ooit een blok wilt wissen, sleep je het gewoon van de stapel
          terug naar de gereedschapskist.
      12:
        image: notes/mc_intro_12.JPG
        text: Om veranderingen ongedaan te maken en terug te gaan naar het begin,
          gebruik je de Start Over-knop rechtsboven in de werkruimte. Nog één ding,
          zie je dat driehoekje op de draaiblokken? Als je zo'n driehoekje ziet, betekent
          dit dat je een andere optie kunt kiezen. Laten we beginnen met programmeren!
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Ik ben Lydia Winters, Mojangs merkdirecteur, en we hebben een spelletje
          gemaakt dat Minecraft heet.
      2:
        image: notes/mc_repeat_2.JPG
        text: In Minecraft ga ik het liefst verkennen. Ik ga graag op avontuur in
          grotten om te zien wat ik er kan vinden. Omdat ik geen programmeur ben,
          vind ik het echt spannend om de Minecraft-lessen te volgen en zelf een beetje
          te leren programmeren.
      3:
        image: notes/mc_repeat_3.JPG
        text: In het laatste level waren veel "beweeg vooruit"-blokken nodig. Het
          zou makkelijker zijn als we de computer gewoon konden zeggen het commando
          beweeg vooruit vier of vijf keer te gebruiken. Gelukkig voor ons, zijn computers
          erg goed in het herhalen van commando's in herhalingsloops.
      4:
        image: notes/mc_repeat_4.JPG
        text: Bij het maken van Minecraft gebruikten we herhalingsloops voor het plaatsen
          van alle basismaterialen voor een nieuwe wereld. Dat zijn duizenden blokken.
          We gebruiken loops ook op kleinere manieren, bijvoorbeeld om Alex' voeten
          heen en weer te laten bewegen tijdens het lopen. Herhalingsloops zijn een
          krachtig onderdeel van programmeren.
      5:
        image: notes/mc_repeat_5.JPG
        text: De nacht komt eraan, dus gaan we in de volgende levels een huis bouwen
          om veilig te blijven. Met het herhalingsblok wordt dit heel makkelijk.
      6:
        image: notes/mc_repeat_6.JPG
        text: Om een muur van ons huis te bouwen, kunnen we Alex vier keer de opdrachten
          "beweeg vooruit" en plaats een plank geven, of één keer de opdrachten "beweeg
          vooruit" en plaats een plank geven, en dan het herhalingsblok gebruiken
          om haar de actie vaker uit te laten voeren. Nu klikken we op het herhalingsblok
          en zeggen we hoe vaak we willen dat ze deze actie uitvoert. Laten we nu
          ons huis bouwen, voor de nacht valt! Veel plezier.
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Nu gaan we wat leren over als-instructies. Als-instructies zijn van
          groot belang als je wilt leren programmeren. Ze helpen een computer beslissingen
          maken.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Alle computers gebruiken als-instructies, inclusief mijn telefoon. Als
          ik bijvoorbeeld mijn telefoon ontgrendel, zegt het programma dat mijn telefoon
          pas wordt geopend als ik het wachtwoord correct heb ingevoerd. Anders verschijnt
          er een foutmelding.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Je kunt als-instructies in je code gebruiken om te zorgen dat Steve
          en Alex reageren op wat ze zien in de wereld. Als ze bijvoorbeeld een steen
          op hun pad vinden, kunnen ze naar links draaien. Of naar rechts als ze tegen
          een boom op lopen.
      4:
        image: notes/mc_if_statements_4.JPG
        text: In dit geval willen we niet in de lava vallen. Het is makkelijk om de
          lava te ontwijken. We zien de lava op het scherm. Maar wat doen we met de
          lava die we niet kunnen zien, onder de steen?
      5:
        image: notes/mc_if_statements_5.JPG
        text: Als we de steen hebben gedolven, moeten we kijken of er op die plek
          geen lava is voordat we verdergaan. Als er lava is, willen we een steen
          voor ons personage plaatsen, zodat we verder vooruit kunnen bewegen. Zo
          kunnen we veilig onze weg vervolgen. Tijd om verder door de mijn te gaan!
          En vergeet niet de als-instructies om veilig te blijven.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Gefeliciteerd! Je hebt daarnet de basisbouwblokken van de informatica
          geleerd.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Nu kun je deze blokken gebruiken om zelf iets te maken. Er zijn geen
          aanwijzingen meer en geen puzzels om te kraken. Je kunt alles bouwen wat
          je wilt. Je mag zelf kiezen.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[leerlingen praten] Nu wordt het echt. Knippen. Ik maakte een L met
          fakkels. Ik maakte een A met berkenhouten planken. Het werkte, het werkte.
          We hebben een huis van wol gemaakt!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Als je creatie is voltooid, kun je delen kiezen voor een link om met
          je vrienden te delen. Veel plezier!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Gefeliciteerd! Je hebt daarnet de basisbouwblokken van de informatica
          geleerd.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Nu kun je deze blokken gebruiken om zelf iets te maken. Er zijn geen
          aanwijzingen meer en geen puzzels om te kraken. Je kunt alles bouwen wat
          je wilt. Je mag zelf kiezen.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[leerlingen praten] Nu wordt het echt. Knippen. Ik maakte een L met
          fakkels. Ik maakte een A met berkenhouten planken. Het werkte, het werkte.
          We hebben een huis van wol gemaakt!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Nu kun je maken wat je maar wilt. Veel plezier!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/gumball_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/gumball_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: De witte ruimte rechts is de werkruimte en daar bouwen we ons programma.
      7:
        image: notes/gumball_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/gumball_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/iceage_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/iceage_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: De witte ruimte rechts is de werkruimte en daar bouwen we ons programma.
      7:
        image: notes/iceage_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/iceage_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    mc_2016_intro:
      1:
        image: notes/mc_2016_intro_1.jpg
        text: Hallo, mijn naam is Jens en ik ben de lead creative Designer van Minecraft
          In het komende uur ga jij je eigen Minecraft spel maken. Het lijkt op Minecraft
          maar de wereld staat stil. De schapen bewegen niet, de kippen leggen geen
          eieren en de zombies staan stil. Jij moet nu code gaan toevoegen om de Minecraft
          wereld te laten werken.
      2:
        image: notes/mc_2016_intro_2.jpg
        text: Mijn naam is Melissa en ik ben een eindgebruikers onderzoeker bij Minecraft.
          Waar ik echt in ben geïnteresseerd is hoe mensen denken en omgaan met techniek
          en zo deze baan is perfect voor mij, Hier kan ik informatica en psychologie
          samenvoegen; hoe denken en gedragen mensen zich.
      3:
        image: notes/mc_2016_intro_3.jpg
        text: Je ziet dat je scherm is gesplitst in drie stukken 1) links is het Minecraft
          scherm De wereld staat nu nog stil maar dat gaan we oplossen met wat code.
      4:
        image: notes/mc_2016_intro_4.jpg
        text: 2) het middelste stuk is de gereedschapskist Elk blok is een commando
          dat kippen, schapen of andere Minecraft figuren begrijpen.
      5:
        image: notes/mc_2016_intro_5.jpg
        text: 3) de ruimte aan de rechterkant is de werkruimte en hier ga jij je programma
          maken.
      6:
        image: notes/mc_2016_intro_6.jpg
        text: Als je vergeten bent wat je moet doen dan staan de instructies voor
          elk niveau boven aan de pagina.
      7:
        image: notes/mc_2016_intro_7.jpg
        text: Om te beginnen gaan we een kip programmeren Sleep het "beweeg vooruit"
          commando naar de werkruimte als ik op "Start" klik gaat de kip 1 stap vooruit
          Nu zetten we nog een "beweeg vooruit" blok onder eerste "beweeg vooruit"
          blok totdat hij oplicht op dat moment laat ik het blok los en zitten ze
          aan elkaar vast. Als ik nu op "Start" klik neemt de kip twee stappen.
      8:
        image: notes/mc_2016_intro_8.jpg
        text: Als je een blok weg wilt halen, dan sleep je hem gewoon terug naar de
          gereedschapskist.
      9:
        image: notes/mc_2016_intro_9.jpg
        text: Als je op "Start" hebt gedrukt kan je altijd op "Herstellen" drukken
          om het spel opnieuw op te starten Nu is het jouw beurt om je eigen Minecraft
          versie te maken Veel plezier!
    mc_2016_loops:
      1:
        image: notes/mc_2016_loops_1.jpg
        text: Hallo, ik ben Lisa ben een software developer bij Minecraft en ik werk
          aan een aantal dieren en vijanden in het spel. Een van de dieren waar ik
          aan gewerkt heb is de ocelot and ik heb gewerkt aan het onderdeel dat als
          je een vis vast hebt dat de ocelot naar je toe sluipt en als je hem de vis
          te eten geeft wordt hij tam en is de ocelot jouw kat geworden.
      2:
        image: notes/mc_2016_loops_2.jpg
        text: Mensen gaan zich snel vervelen als ze heel vaak hetzelfde ding moeten
          doen. Het mooie van computers is dat ze hetzelfde ding een miljoen keer,
          of zelfs een biljoen keer achter elkaar kunnen doen zonder dat het ze verveelt.
          Dit herhalen noemen we een "lus" en elk figuur in Minecraft gebruikt ze.
      3:
        image: notes/mc_2016_loops_3.jpg
        text: Eerder hebben we een kip laten lopen maar uiteindelijk stopte ze. In
          Minecraft lopen de kippen rond zonder dat ze ooit stoppen. Wij gaan nu een
          "Doe voor altijd" lus van de gereedschapskist gebruiken om de kippen ook
          voor altijd te laten bewegen. De kracht van de lussen gaat je veel tijd
          besparen en geeft je veel interessante opties als je je eigen versie van
          Minecraft gaat bouwen.
    mc_2016_events:
      1:
        image: notes/mc_2016_events_1.jpg
        text: Op dit level kan je kiezen of je Steve of Alex wil zijn. Selecteer de
          pijltjes op je keyboard om naar boven, naar beneden, naar links of naar
          rechts te gaan. Nu kan je waar je maar wil rondlopen op een niveau. Om een
          schepsel te gebruiken moet je er naartoe lopen, er voor gaan staan en op
          de spatiebalk drukken.
      2:
        image: notes/mc_2016_events_2.jpg
        text: Als je een touch screen gebruikt kan je naar boven, beneden, links en
          rechts vegen om rond te lopen en dan raak je het scherm aan als je het object
          voor je wilt pakken.
      3:
        image: notes/mc_2016_events_3.jpg
        text: Maar wat gebeurt er als je het gebruikt? In Minecraft laten schapen
          wol vallen als je ze scheert, koeien lopen weg als je ze slaat en creepers
          ontploffen als je vak bij ze komt. Deze acties gebeuren dankzij iets wat
          we "events" noemen. "Events" vertellen je programma om te luisteren of te
          wachten als er iets gebeurt en als het gebeurt dan moet er iets gebeuren.
      4:
        image: notes/mc_2016_events_4.jpg
        text: Tot nu toe heb je 1 event gebruikt. Code die je in je "wanneer neergezet"
          sleuf hebt neergezet doet iets als je figuur is gecreëerd bij het begin
          van het spel. In de volgende niveaus krijg je nieuwe slots for events zoals
          "wanneer aangeraakt" die iets doen als je een object aanraakt of "wanneer
          gebruikt" wanneer je het figuur gebruikt of, als je je zombies wilt laten
          verdwijnen wanneer de zon opkomt, dan stop je dat in de "overdag" sleuf
    mc_2016_spawn:
      1:
        image: notes/mc_2016_spawn_1.jpg
        text: In spellen, betekend neerzetten hetzelfde als creëren. Laten we in dit
          level zombies maken die nieuwe zombies gaan neerzetten als de zon onder
          gaat. Om dit te doen gaan we de "in de nacht" blokken gebruiken.
      2:
        image: notes/mc_2016_spawn_2.jpg
        text: Omdat we de zombies in de nacht nieuwe zombies willen laten neerzetten
          gaan we de "zombie neerzetten" blok onder de "in de nacht" blok neerzetten
          Op het moment dater een nieuwe zombie is neergezet zal hij de code gebruiken
          die je in de "wanneer neergezet" sleuf hebt gezet. Veel plezier met het
          neerzetten van zombies!
    mc_2016_congrats:
      1:
        image: notes/mc_2016_congrats_1.jpg
        text: Gefeliciteerd! Je hebt geleerd om informatica commando's te gebruiken
          om de Minecraft wereld tot leven te brengen. Je bent nu de developer! Je
          hebt alle commando's en figuren ontgrendelt. Jij bepaalt wat er gebeurt.
      2:
        image: notes/mc_2016_congrats_2.jpg
        text: Als je klaar bent met het maken van je spel, kies delen, dan krijg je
          een link die je kan delen met je vrienden, of om je spel op je telefoon
          te spelen. Veel plezier! Ik kijk er naar uit om jouw versie van Minecraft
          te gaan spelen.
    applab_intro_welcome:
      1:
        image: notes/applab_intro_welcome_1.png
        text: My name is Mei'lani. I'm an intern at code.org and I'm also a computer
          science student. I like computer science because it's really creative. I
          get to be the problem solver. I get to make everything function how I want
          it to. But I also get to be the designer. I get to be the artist and choose
          everything on the creative side of it.
      2:
        image: notes/applab_intro_welcome_2.png
        text: Making your own apps is easy with App Lab! Whether you're new to coding
          or have some experience. App Lab is a great tool for building new apps and
          sharing them with your friends.
      3:
        image: notes/applab_intro_welcome_3.png
        text: This is a App Lab. On the left side is your app. On the right side is
          the code that will make it run. You build your program by dragging in blocks
          from the toolbox. To start you'll just have one block called 'setProperty'.
      4:
        image: notes/applab_intro_welcome_4.png
        text: The set property block changes the look of the elements on your screen.
          Like the buttons, labels, or even the screen itself. First you need to decide
          which element you want to change. If you hover over an element in your app
          you can see the name or ID here. Then go select that ID from the first drop
          down.
      5:
        image: notes/applab_intro_welcome_5.png
        text: Elements have lots of properties you can change like their text color,
          background color or font size. You can see the full list and choose which
          property you want to change in the second drop down.
      6:
        image: notes/applab_intro_welcome_6.png
        text: The last drop down is where you'll write the value you want to use value
          you want to use. The block will make a suggestion for you. But you can always
          type in different colors or numbers yourself.
      7:
        image: notes/applab_intro_welcome_7.png
        text: Once you're done, the block reads a bit like a sentence:'Set button1's
          background color to green.' Hit run to see the changes you're building in
          code. If you reset you can drag in more blocks to change other things about
          your app. Like the text!
      8:
        image: notes/applab_intro_welcome_8.png
        text: For this tutorial we'll be working in block mode but App Lab also supports
          working in text.
      9:
        image: notes/applab_intro_welcome_9.png
        text: Either way you'll be programming in JavaScript, the language of the
          web. Each level has a goal, instructions and an image of what you're aiming
          to create.
      10:
        image: notes/applab_intro_welcome_10.png
        text: If you're ever stuck, click on this picture and it will show you exactly
          how to complete the level. But see if you can do it on your own first.
      11:
        image: notes/applab_intro_welcome_11.png
        text: Once you've completed the goal for this level click Finish to move on.
          That's all there is to it! Hit the orange "continue" button to go to the
          next level and start your adventure with an App Lab!
    applab_intro_events:
      1:
        image: notes/applab_intro_events_1.png
        text: Apps are really cool because it's kind of like starting your own business
          I mean, you get to design everything from the ground up, you get to manage
          everything, and you're the owner of this piece of work that you just created
          with code.
      2:
        image: notes/applab_intro_events_2.png
        text: Now that you can change the look of your app let's make it interactive
          by responding to events! Events are user actions like clicking a button,
          scrolling through a menu, or hovering over a picture. Interactive apps need
          ways to respond to events, like playing a sound when I click this button.
          To do this in App Lab you need to use a new block called 'onEvent'.
      3:
        image: notes/applab_intro_events_3.png
        text: This program sets the screen to blue. I want the screen to turn green
          when I click this button. First I'll need to drag in an onEvent block. By
          hovering I know the button's ID is "bigButton" so I'll select that in the
          first drop-down.
      4:
        image: notes/applab_intro_events_4.png
        text: Next I'll choose the type of event. There's lots of options you can
          pick from but right now I'll leave it as a regular old click.
      5:
        image: notes/applab_intro_events_5.png
        text: 'Finally I''ll add code inside the on event that will change the background
          color of the screen. You can read this block like a sentence: "On the event
          that the button is clicked run all this code."'
      6:
        image: notes/applab_intro_events_6.png
        text: Let's test it. Blocks outside an onEvent still run right away so the
          screen starts blue.
      7:
        image: notes/applab_intro_events_7.png
        text: And when I click the big button the code inside my onEvent runs and
          my screen turns green.
      8:
        image: notes/applab_intro_events_8.png
        text: If you want to change more things after the event, like the text on
          the screen just add more code to the onEvent
      9:
        image: notes/applab_intro_events_9.png
        text: To make your program respond to more events add more onEvent blocks.
          Just make sure not to put them inside of each other. Now it's time to try
          it out for yourself. Have fun!
    applab_intro_sounds:
      1:
        image: notes/applab_intro_sounds_1.png
        text: Next you'll learn about adding images and sounds to your app. Let's
          start by checking out the sound options.
      2:
        image: notes/applab_intro_sounds_2.png
        text: In the tool box you'll find a new block called "playSound". Drag it
          into the workspace. You can pick a sound to play by clicking the drop-down
          then clicking "Choose".
      3:
        image: notes/applab_intro_sounds_3.png
        text: From here you can either upload a sound file from your computer, or
          search for a sound from the sound library. The sound library has lots of
          different categories like instruments, background music or animals.
      4:
        image: notes/applab_intro_sounds_4.png
        text: Once you've got the sound you want, click "Choose". When this block
          runs, it will play the sound you chose.
      5:
        image: notes/applab_intro_sounds_5.png
        text: To add images to your elements you can just use the setProperty block.
          Select the image property in the second drop-down
      6:
        image: notes/applab_intro_sounds_6.png
        text: Then select "Choose" from the third drop down.
      7:
        image: notes/applab_intro_sounds_7.png
        text: From here you can upload an image from your computer or you can look
          through a huge library of icons in the icon library.
      8:
        image: notes/applab_intro_sounds_8.png
        text: Back in code mode you can use the "setProperty" block to change the
          icon color of your icon. Once you've picked what image your icon to use
          click "Run" to see how it looks.
      9:
        image: notes/applab_intro_sounds_9.png
        text: That's all there is to it! Now you can start adding images and sounds
          to make your apps even more fun and dynamic.
    applab_intro_designmode:
      1:
        image: notes/applab_intro_designmode_1.png
        text: To build your own apps you're going to need to start designing screens
          and elements from scratch. App Lab makes this easy to do with Design Mode.
      2:
        image: notes/applab_intro_designmode_2.png
        text: Use the switch on top of your app to go into Design Mode.
      3:
        image: notes/applab_intro_designmode_3.png
        text: You can add new elements by dragging them onto the screen. You can move
          them around to different locations and change their size by dragging the
          bottom right corner.
      4:
        image: notes/applab_intro_designmode_4.png
        text: To change an element's properties use the controls on the right. For
          example, it's really easy to change this button's text, color, and font
          size.
      5:
        image: notes/applab_intro_designmode_5.png
        text: When you add a new element to your screen it'll get a generic ID like
          button1. It's a good idea to change this button's ID to something more meaningful
          like "rightButton". So that you'll know which one it is when you go to the
          program.
      6:
        image: notes/applab_intro_designmode_6.png
        text: If you add an element to your app by mistake, just drag it out or hit
          the delete.
      7:
        image: notes/applab_intro_designmode_7.png
        text: You can add entirely new screens to your app by dragging in a screen
          element
      8:
        image: notes/applab_intro_designmode_8.png
        text: From the drop-down at the top you can quickly switch back and forth
          between the screens you create.
      9:
        image: notes/applab_intro_designmode_9.png
        text: Inside your app, you'll need a way to switch between all of these screens,
          so the setScreen block has been added to the toolbox. Use "setScreen" inside
          the "onEvent" block to change screens at the click of a button.
      10:
        image: notes/applab_intro_designmode_10.png
        text: In the next few levels you'll be working on a single project. First
          you'll add a button then you'll add a new screen and finally you'll write
          code so that the button switches to the new screen.
    applab_intro_share:
      1:
        image: notes/applab_intro_share_1.png
        text: Now that you've learned some of the basics of App Lab like adding buttons,
          sounds, images, text and new screens you can make all sorts of apps.
      2:
        image: notes/applab_intro_share_2.png
        text: In the next level you'll find the app you just finished building. With
          a little creativity, you can turn this into a personality quiz for your
          friends, a greeting card that you can share with your family or a choose-your-own-adventure
          game. All of these apps are just a combination of the skills you've already
          learned, and I bet you can come up with even more.
      3:
        image: notes/applab_intro_share_3.png
        text: Once you're done with your app you can easily send it to your phone
          to see how it looks. Just click "Share" and enter your phone number here.
      4:
        image: notes/applab_intro_share_4.png
        text: You'll receive a text message that'll let you open up your app instantly.
      5:
        image: notes/applab_intro_share_5.png
        text: You can also share a link to your app over social media or post it to
          the code.org public gallery for other people to play and share.
      6:
        image: notes/applab_intro_share_6.png
        text: You've just scratched the surface of what App Lab can do. Full App Lab
          features more advanced user interactions, new screen elements and even a
          built-in database so you can quickly build full featured apps. At "code.org/applab"
          you'll find the full tool and lots of ideas if you want to keep going.
      7:
        image: notes/applab_intro_share_7.png
        text: Thanks for coming along the ride. Now go build and share your first
          app, and keep on building apps with App Lab!
    mc_2017_agent_intro:
      1:
        image: notes/mc_2017_agent_intro_1.png
        text: 'Stacy: Stampy, Lizzy, Preston - thank you for coming with me. What
          I want to show you is just over this mesa plateau. I think you''re going
          to love it!'
      2:
        image: notes/mc_2017_agent_intro_2.png
        text: Wait a minute - there's a hole in the track! (screaming)
      3:
        image: notes/mc_2017_agent_intro_3.png
        text: 'Is everyone okay? Stampy: Ah, I see the problem. Look! There was a
          hole in the track. Stacy: Really, Stampy? Lizzy: Maybe we should gather
          blocks to fix it. Preston: Let''s make it a race. First one back to the
          top wins. Stacy: Ok, on your mark, get set, GO! Ok, I''m just gonna gather
          some of this terracotta. Wait. Guys, I can''t mine! Preston: Same. Lizzy:
          I can''t either. Stacy: Ok, that is really strange. Stampy, can you mine?
          Stampy: I can''t mine! Stacy: Ok, everyone stay calm. Stampy: Is the game
          broken? Stacy: If it is, how do we fix it? Lizzy: I don''t know. Stampy:
          Does anyone know how to write Minecraft code?'
      4:
        image: notes/mc_2017_agent_intro_4.png
        text: "(poof) Preston: What is that? Stampy: I've never seen one of these
          before. Lizzy: It's so adorable! Stacy: Is it...is it tameable? Preston:
          Okay, what is going on? Someone needs to go back to the real world and fix
          this.  All: Not it! Stacy: Not i- (Sigh.) Ok, I'll go."
      5:
        image: notes/mc_2017_agent_intro_5.png
        text: Oh, okay, hey, so I'm in the real world now. I'm going to go try to
          find the Minecraft offices.
      6:
        image: notes/mc_2017_agent_intro_6.png
        text: But, I'm going to need your help. Start doing the tutorial, start learning
          how to code, and I'll catch up with you guys after a few levels, okay? Wish
          me luck! I think it's this way. Ow! Cactus! I'm okay!
      7:
        image: notes/mc_2017_agent_intro_7.png
        text: To complete the Hour of Code challenge, you'll need to write code to
          program the agent. You'll work together with The Agent to clear any obstacles
          in your path, so you can pick up the items you'll need for your journey.
          Only the Agent can place and break blocks, and only you can collect items.
          Your screen is split into three main parts. On the left is Minecraft.
      8:
        image: notes/mc_2017_agent_intro_8.png
        text: The middle area is the toolbox with commands that the Agent can understand.
      9:
        image: notes/mc_2017_agent_intro_9.png
        text: And on the right, is the workspace. That's where you stack the commands
          to build your program to control the Agent.
      10:
        image: notes/mc_2017_agent_intro_10.png
        text: The Agent can walk, turn, and activate pressure plates. It can also
          destroy blocks and place blocks. When it places the block like these minecart
          rails, it places it underneath itself.
      11:
        image: notes/mc_2017_agent_intro_11.png
        text: Als je vergeten bent wat je moet doen dan staan de instructies voor
          elk niveau boven aan de pagina.
      12:
        image: notes/mc_2017_agent_intro_12.png
        text: If you want to try again, you can hit the blue reset button to reset
          everything to where it started. And if you need to delete a block of code,
          drag it from your workspace to the toolbox. Remember to hit run to get the
          Agent moving. Okay, go ahead and try out the first few levels. Good luck!
    mc_2017_repeat:
      1:
        image: notes/mc_2017_repeat_1.png
        text: 'Stampy: I wonder what Stacy is up to?'
      2:
        image: notes/mc_2017_repeat_2.png
        text: 'Stacy: Woah, I think I''m in the right place. This is amazing!'
      3:
        image: notes/mc_2017_repeat_3.png
        text: I feel like I'm back in Minecraft! Hello. How are you? Hello?
      4:
        image: notes/mc_2017_repeat_4.png
        text: 'Oh, there''s a creeper. You don''t do anything, do you? Katie: Stacy?
          Stacy:Hi, Katie? Katie: Yes, welcome to Minecraft!'
      5:
        image: notes/mc_2017_repeat_5.png
        text: 'Stacy: This is amazing. So you work here every day as a developer,
          right? Katie: Yeah, it''s pretty awesome. I''m a developer on the Minecraft
          marketplace team. Stacy: How many coding languages do you know? Katie: In
          my career I''ve probably worked with over a dozen. Stacy: A dozen? Katie:
          Yeah. Stacy: So now, you wouldn''t happen to know anything about this little
          golem guy that calls himself the Agent? Katie: We use the Agent to do things
          that Steve or Alex can''t, like go across lava. Stacy: Well, I want to learn
          how to code, and they want to learn how to code, so what is one of the first
          things that you need to know when you''re learning?'
      6:
        image: notes/mc_2017_repeat_6.png
        text: 'Katie: Well, you need to learn how to use loops. Loops are things that
          developers write to give commands to a computer that can be run over and
          over again. Stacy: Got it, so I think there''s actually some of that coming
          up in the levels ahead, so go ahead and give loops a try.'
      7:
        image: notes/mc_2017_repeat_7.png
        text: In the next level, you can use a loop to move the Agent along the path.
          Drag the repeat block into the workspace and place the move forward block
          inside the repeat block. This tells the computer to do the same thing many
          times in a row without having to drag a whole bunch of blocks into the workspace.
          You can choose how many times to repeat by putting a number in the repeat
          block.
      8:
        image: notes/mc_2017_repeat_8.png
        text: You can put turns and multiple commands in the repeat block too, but
          for now try using a repeat to move the Agent forward a few steps. Remember,
          if you get stuck on a puzzle you can always hit the blue reset button and
          try again.
      9:
        image: notes/mc_2017_repeat_9.png
        text: 'If you are thinking about having a cool job like Katie''s, go ahead
          and click the show code button when you finish every level. That''s going
          to actually show you the Javascript code that someone like Katie uses when
          she''s actually programming Minecraft. Katie: Yeah, good luck everyone!'
    mc_2017_functions:
      1:
        image: notes/mc_2017_functions_1.png
        text: 'Preston: I''m not trying to brag, but I''m pretty good at parkour.
          Lizzy: Let''s sleep so it''s day when Stacy comes back.'
      2:
        image: notes/mc_2017_functions_2.png
        text: 'Stacy: Ok guys, I am back from the Minecraft offices, and I think I
          know how to solve the problem I''m having in my game. I think I can use
          a function. Let me just open this.'
      3:
        image: notes/mc_2017_functions_3.png
        text: So a function is a specific set of instructions to accomplish a certain
          task, kind of like a recipe. In the next few levels, you'll have access
          to functions that you can use to solve the puzzles.
      4:
        image: notes/mc_2017_functions_4.png
        text: Look at the code in the function when it's in the workspace to see what
          it does.
      5:
        image: notes/mc_2017_functions_5.png
        text: Then, find the block with that name in the toolbox and drag it from
          the toolbox to the when run block.
      6:
        image: notes/mc_2017_functions_6.png
        text: Remember, you can use the same function every time you need to run the
          same set of instructions to do something, like build a bridge. Good luck,
          I know you can do it!
    mc_2017_congratulations:
      1:
        image: notes/mc_2017_congratulations_1.png
        text: 'Preston: Congratulations!'
      2:
        image: notes/mc_2017_congratulations_2.png
        text: 'Lizzy: Congratulations!'
      3:
        image: notes/mc_2017_congratulations_3.png
        text: 'Stampy: Congratulations, you did it!'
      4:
        image: notes/mc_2017_congratulations_4.png
        text: 'Stacy: Congratulations guys, you totally rocked that! And now that
          you''ve completed the Hour of Code, you can start coding in Minecraft. You''ve
          learned about loops, functions, and what a software Agent does.'
      5:
        image: notes/mc_2017_congratulations_5.png
        text: Now, it's time for the free play level, where you are the developer.
          Use any remaining time to write your own functions to explore, mine, and
          build.
      6:
        image: notes/mc_2017_congratulations_6.png
        text: 'You can take the code that you write in this level into your Minecraft
          world on Minecraft: Education Edition. Just click ''Finish'' and follow
          the instructions for getting the link to use in your world. to continue
          coding with the Agent. Have fun, and good job!'
      7:
        image: notes/mc_2017_congratulations_7.png
        text: 'Stacy: And I''m back! Okay, you guys, this is the Agent! Let me show
          you what it can do. Look, it''s doing it! I told it to build a staircase
          out of these terra cotta blocks, now we can just use this to get out of
          here. And you guys, it''s not just staircases. I can tell the Agent to do
          anything I want, and it will do it for me.'
      8:
        image: notes/mc_2017_congratulations_8.png
        text: 'Stampy: How did you do that? Stacy: It was easy, actually. I just used
          code!'
    csd_concept_how_computers_work:
      1:
        image: notes/csd_concept_how_computers_work_1.png
        text: 'Everywhere you look, computers are changing the world. Whether they''re
          on our desktops, in our homes, our pockets, or just about anywhere else.
          But while most of us use this revolutionary technology daily, we don''t
          often ask: "How do computers work?" In this series, you''re going to learn
          how computers really work, starting with what makes a computer a computer.
          Then, you''ll look at how information is represented inside the computer
          using tiny electrical signals going on and off at mind-boggling speeds.'
      2:
        image: notes/csd_concept_how_computers_work_2.png
        text: After that, you'll learn how computers use circuits to do everything
          from simple math to simulating entire virtual worlds. Next, you'll zoom
          out and look at the different parts of a computer that actually input, output,
          and store all that information. Finally, you'll take a look at what code
          actually is and how software controls hardware. So whether you're just curious
          about the devices you use every day or you want to design the innovations
          of the future, the first step is learning how computers work.
    csd_concept_computer:
      1:
        image: notes/csd_concept_computer_1.png
        text: My name is May-Li Khoe and I'm a designer and an inventor. So some of
          the things I've designed have been at Apple, and now I design products for
          kids to use so that they can have an easier time in school. My other jobs
          include DJ-ing and dancing.
      2:
        image: notes/csd_concept_computer_2.png
        text: Computers are everywhere! They're in people's pockets, they're in people's
          cars, people have them on their wrists. They might be in your backpack right
          now. But what makes a computer a computer? What does make a computer a computer
          anyway? And how does it even work?
      3:
        image: notes/csd_concept_computer_3.png
        text: Hi I'm Nat! I was one of the original designers of the Xbox. I've been
          working with computers since I was maybe seven years old and now I work
          on virtual reality. As humans, we've always built tools to help us solve
          problems. Tools like a wheelbarrow, a hammer, or a printing press, or a
          tractor-trailer.
      4:
        image: notes/csd_concept_computer_4.png
        text: All of these inventions helped us with manual work. Over time, people
          began to wonder if a machine could be designed and built to help us with
          the thinking work we do, like solving equations or tracking the stars in
          the sky. Rather than moving or manipulating physical things like dirt and
          stone, these machines would need to be designed to manipulate information.
          As the pioneers of computer science explored how to design a thinking machine,
          they realized that it had to perform four different tasks.
      5:
        image: notes/csd_concept_computer_5.png
        text: It would need to take input, store information process it and then output
          the results. Now this might sound simple, but these four things are common
          to all computers. That's what makes a computer a computer.
      6:
        image: notes/csd_concept_computer_6.png
        text: Computers started out as basic calculators, which was already really
          awesome at the time, and they were only manipulating numbers back then.
          But now we can use them to talk to each other, we can use them to play games,
          control robots, and do any crazy thing that you could probably imagine.
          Modern computers look nothing like those clunky old machines but they still
          do these same four things.
      7:
        image: notes/csd_concept_computer_7.png
        text: First, we're going to talk about input. You can tell computers what
          to do with the keyboard, you can tell them what to do with the mouse, the
          microphone, the camera. All these different inputs give a computer information,
          which is then stored in memory.
      8:
        image: notes/csd_concept_computer_8.png
        text: A computer's processor takes information from memory. It manipulates
          it or changes it using an algorithm, which is just a series of commands.
          And then it sends the processed information back to be stored in memory
          again. This continues until the processed information is ready to be output.
      9:
        image: notes/csd_concept_computer_9.png
        text: How a computer outputs information depends on what the computer is designed
          to do. A computer display can show text, photos, videos, or interactive
          games -- even virtual reality! The output of a computer may even include
          signals to control a robot.
      10:
        image: notes/csd_concept_computer_10.png
        text: And who knows what the computers of tomorrow will be like? My hope is
          that you get to help decide what you want the computers of tomorrow to look
          like. But across all computers, regardless of the different types of technology
          they use, they're always doing those same four things. They take in information,
          they store it as data, they process it, and then they output the results.
    csd_concept_binary_data:
      1:
        image: notes/csd_concept_binary_data_1.png
        text: Hi! My name is Limor Fried, and I'm an engineer here at Adafruit Industries.
          And this is where I do engineering and design, and I design circuits for
          fashion and music and technology.
      2:
        image: notes/csd_concept_binary_data_2.png
        text: My name is Federico Gomez Suarez, and I'm a software developer with
          Microsoft Hack for Good. And I look into using technology to help us solve
          some of the big social problems of our times.
      3:
        image: notes/csd_concept_binary_data_3.png
        text: You may have heard that computers work on ones and zeros. But almost
          nobody today actually deals directly with these ones and zeros. But ones
          and zeroes do play a big role in how computers work on the inside.
      4:
        image: notes/csd_concept_binary_data_4.png
        text: Inside a computer are electric wires and circuits that carry all the
          information in a computer. How do you store or represent information using
          electricity?
      5:
        image: notes/csd_concept_binary_data_5.png
        text: Well, if you have a single wire with electricity flowing through it,
          the signal could either be on or off. That's not a lot of choices, but it's
          a really important start. With one wire, we can represent a yes or no, true
          or false, a one or zero, or anything else with only two options. This on/off
          state of a single wire is called a bit, and it's the smallest piece of information
          a computer can store.
      6:
        image: notes/csd_concept_binary_data_6.png
        text: 'If you use more wires you get more bits: more ones and zeros. With
          more bits you can represent more complex information. But to understand
          that, we need to learn about something called the binary number system.'
      7:
        image: notes/csd_concept_binary_data_7.png
        text: 'In the decimal number system, we have ten digits from zero to nine,
          and that''s how we''ve all learned to count. In the binary number system,
          we only have two digits: zero and one. With these two digits, we can count
          up to any number.'
      8:
        image: notes/csd_concept_binary_data_8.png
        text: Here's how this works. In a decimal number system we're all used to,
          each position in a number has a different value. There's a 1 position, the
          10 position, the 100 position, and so on. For example, a 9 in the 100 position
          is a 900. In binary, each position also carries a value. But instead of
          multiplying by 10 each time, we multiply by 2. So there's the 1 position,
          the 2 position, the 4 position, the 8 position, and so on. For example,
          the number 9 in binary is 1001. To calculate the value, we add 1 times 8,
          plus 0 times 4, plus 0 times 2, plus 1 times 1. Almost nobody does this
          math because computers do it for us. What's important is that any number
          can be represented with only ones and zeros, or by a bunch of wires that
          are on or off. The more wires you use, the larger the numbers you can store.
          With 8 wires, you can store numbers between 0 and 255. That's 8 ones. With
          just 32 wires, you can store all the way from 0 to over 4 billion. Using
          the binary number system, you can represent any number you like.
      9:
        image: notes/csd_concept_binary_data_9.png
        text: But what about other types of information? Like text, images, or sound?
          It turns out that all these things can also be represented with numbers.
          Think of all the letters in the alphabet. You could assign a number to each
          letter. A could be 1, B could be 2, and so on. You can then represent any
          word or paragraph as a sequence of numbers. And as we saw, these numbers
          can be stored as on or off electrical signals. Every word you see on every
          webpage or your phone is represented using a system like this.
      10:
        image: notes/csd_concept_binary_data_10.png
        text: Now, let's consider photos, videos, and all the graphics you see on
          a screen.
      11:
        image: notes/csd_concept_binary_data_11.png
        text: All of these images are made out of teeny dots called pixels, and each
          pixel has a color. Each of the colors can be represented with numbers. When
          you consider the typical image has millions of these pixels, and the typical
          video shows 30 images per second now we're talking about a lot of data here.
      12:
        image: notes/csd_concept_binary_data_12.png
        text: Every sound is basically a series of vibrations in the air. Vibrations
          can be represented graphically as a waveform. Any point on this waveform
          can be represented by a number. And this way, any sound can be broken down
          into a series of numbers. If you want higher quality sound, you will pick
          32-bit audio or an 8-bit audio. More bits means a higher range of numbers.
      13:
        image: notes/csd_concept_binary_data_13.png
        text: When you use a computer to write code or make your own app, you're not
          dealing directly with these ones and zeros. But you will be dealing with
          images or sound or video. So if you want to understand how computers work
          on the inside, it all comes down these simple ones and zeros and the electrical
          signals in the circuits behind them.
    csd_concept_circuits_logic:
      1:
        image: notes/csd_concept_circuits_logic_1.png
        text: One of the coolest things I've discovered about circuits is circuitry
          can be an art form like if I have a creative idea, I can get that creative
          idea out using circuits. So if you have ideas, you can use technology to
          make those ideas come to life.
      2:
        image: notes/csd_concept_circuits_logic_2.png
        text: Every input or output of a computer is effectively a type of information,
          which can be represented by on or off electrical signals or ones and zeros.
      3:
        image: notes/csd_concept_circuits_logic_3.png
        text: In order to process the information that comes in as input, and to make
          the information that is output, a computer needs to modify and combine the
          input signals. To do this, a computer uses millions of teeny electronic
          components, which come together to form circuits.
      4:
        image: notes/csd_concept_circuits_logic_4.png
        text: Let's take a closer look at how circuits can modify and process information
          that's represented in ones and zeros. This is an incredibly simple circuit.
          It takes an electrical signal, on or off, and it flips it. So if the signal
          you give it is a 1, the circuit gives you a 0, and if you give the circuit
          a 0, it gives you a 1. The signal that goes in is not the same as the signal
          that comes out, and so we call this circuit NOT.
      5:
        image: notes/csd_concept_circuits_logic_5.png
        text: More complicated circuits can take multiple signals and combine them,
          and give you a different result. In this example, a circuit will take two
          electrical signals, now each one might be a 1 or a 0. If either of the signals
          coming in is a 0, then the result is also a 0. This circuit will only give
          you a 1, if the first signal and the second signal are both a 1, and so
          we call the circuit AND.
      6:
        image: notes/csd_concept_circuits_logic_6.png
        text: There are many small circuits like this that perform simple logical
          calculations. By connecting these circuits together, we can make more complex
          circuits that perform more complex calculations.
      7:
        image: notes/csd_concept_circuits_logic_7.png
        text: For example, you can make a circuit that adds 2 bits together called
          an adder. This circuit takes in 2 individual bits, each one a 1 or a 0,
          and adds them together to calculate the sum. The sum can be 0 plus 0 equals
          0, 0 plus 1 equals 1, or 1 plus 1 equals 2. You need two wires coming out
          because it can take up to two binary digits to represent the sum. Once you
          have a single adder for adding two bits of information, you can put together
          multiples of these adder circuits side-by-side to add together much larger
          numbers.
      8:
        image: notes/csd_concept_circuits_logic_8.png
        text: For example, here's how an 8-bit adder adds the numbers 25 and 50. Each
          number is represented using 8 bits, resulting in 16 different electrical
          signals that go into the circuit. The circuit for an 8-bit adder has lots
          of little adders inside of it, which together, calculate the sum.
      9:
        image: notes/csd_concept_circuits_logic_9.png
        text: Different electrical circuits can perform other simple calculations
          like subtraction or multiplication. In fact, all the information processing
          your computer does is just lots and lots of small simple operations put
          together. Each individual operation done by a computer is so, so simple
          it could be done by a human, but these circuits inside computers are way
          way faster.
      10:
        image: notes/csd_concept_circuits_logic_10.png
        text: Back in the day, these circuits were big and clunky, and an 8-bit adder
          could be as big as a fridge, and it would take minutes for them to perform
          a simple calculation. Today, computer circuits are microscopic in size,
          and way way faster. Why are smaller computers also faster? Well, because
          the smaller the circuit is, the less distance the electrical signal has
          to go. Electricity moves at just about the speed of light, which is why
          modern circuits can perform billions of calculations per second.
      11:
        image: notes/csd_concept_circuits_logic_11.png
        text: So whether you're playing a game, recording a video, or exploring the
          cosmos, everything you could possibly do with technology requires lots of
          information to be processed extremely quickly. Underneath all this complexity
          is just lots of teeny little circuits that turn binary signals into websites,
          videos, music, and games. These circuits can even help us decode DNA to
          diagnose and cure disease. So what would you like to do with all these circuits?
    csd_concept_memory_cpu_input_output:
      1:
        image: notes/csd_concept_memory_cpu_input_output_1.png
        text: Hi, my name is Madison Maxey. I have a company called Loomia, and we
          focus on making smart fabrics for smart clothing and smart soft good products.
          The sky's the limit when it comes to textiles.
      2:
        image: notes/csd_concept_memory_cpu_input_output_2.png
        text: My name is Danielle Applestone, and I'm CEO of Othermachine Company.
          We build a desktop milling machine. A milling machine takes a rotating cutting
          tool and moves it through material to create a 3D object.
      3:
        image: notes/csd_concept_memory_cpu_input_output_3.png
        text: Under the hood, all computers do the same four basic things. They input
          information, store and process the information, and then, output information.
          Each of these things is done by a different part of the computer.
      4:
        image: notes/csd_concept_memory_cpu_input_output_4.png
        text: There are input devices that take input from the outside world and convert
          it into binary information. There is memory to store this information. There's
          a central processing unit or CPU, where all the calculations are done. And,
          finally, there are output devices that take information and convert it into
          a physical output.
      5:
        image: notes/csd_concept_memory_cpu_input_output_5.png
        text: Let's talk about input first. Computers can take many different types
          of input, like the keyboard of a computer, the touchpad of a phone, a camera,
          a microphone, or a GPS. But even the sensors on a car, a thermostat, or
          a drone are also different input devices.
      6:
        image: notes/csd_concept_memory_cpu_input_output_6.png
        text: Now, let's look at a simple example of how input travels through a computer
          and becomes output. When you press a key on your keyboard - let's say the
          letter "B". The keyboard converts the letter to a number. That number is
          sent as binary, ones and zeros, into the computer.
      7:
        image: notes/csd_concept_memory_cpu_input_output_7.png
        text: Starting from this number, the CPU calculates how to display the letter
          "B" pixel by pixel. The CPU requests step-by-step instructions from memory,
          which tell it how to draw the letter "B". The CPU runs these instructions
          and stores the results as pixels in memory.
      8:
        image: notes/csd_concept_memory_cpu_input_output_8.png
        text: Finally, this pixel information is sent in binary to the screen. The
          screen is an output device, which converts the binary signals into the tiny
          lights and colors that make up what you see.
      9:
        image: notes/csd_concept_memory_cpu_input_output_9.png
        text: This all happens so quickly it feels instantaneous, but to display each
          letter a computer runs thousands of instructions, starting from the moment
          your finger presses the key point.
      10:
        image: notes/csd_concept_memory_cpu_input_output_10.png
        text: In that example, the output device was the screen, but there are many
          different types of output which take a binary signal from the computer and
          do something in the physical world. For example, a speaker will play sound,
          and a 3D printer will print an object. Output devices can also control physical
          motion like a robotic arm, the motor of a car, or the cutting tool of the
          milling machine that my company makes. New types of inputs and outputs let
          computers interact with the world in entirely new ways. This has been helped
          out by improvements to the speed and size of the memory and CPU.
      11:
        image: notes/csd_concept_memory_cpu_input_output_11.png
        text: The more complicated a task is and the more information that is input
          or output, the more processing power and memory a computer needs. Typing
          letters on a screen may be easy but to do complicated 3d graphics or record
          a high-definition movie, modern computers often have multiple CPUs to process
          all that information and many gigabytes of memory to store it.
      12:
        image: notes/csd_concept_memory_cpu_input_output_12.png
        text: 'No matter what it is you want to do with the computer, every single
          action is about: inputting information from the physical world, storing
          and processing that information, and getting some output back into the physical
          world.'
    csd_concept_hardware_software:
      1:
        image: notes/csd_concept_hardware_software_1.png
        text: Hi, my name is Erica Gomez and I'm an engineering manager at Amazon.com.
          One of the best things about working in tech, and at Amazon in particular,
          is that I get to bring my dog with me to work every day. My job is to help
          make sure software gets out the door and her job is to nap under my desk
          and snore very loudly.
      2:
        image: notes/csd_concept_hardware_software_2.png
        text: 'My name is Jerome Holman, and I''m a Program Manager on Team Xbox and
          I have a really fun job: Basically bringing the hardware and the software
          together to give you all the games that you love on your Xbox.'
      3:
        image: notes/csd_concept_hardware_software_3.png
        text: When you look inside a computing device you see a bunch of circuits,
          chips, wires, speakers, plugs, and all sorts of other stuff. This is the
          hardware.
      4:
        image: notes/csd_concept_hardware_software_4.png
        text: But what you don't see is the software. Software is all of the computer
          programs, or code, running on this machine. Software can be anything from
          apps and games to webpages and the data science software that me and my
          teams use at Amazon to understand how customers behave.
      5:
        image: notes/csd_concept_hardware_software_5.png
        text: But how do the hardware and the software interact with one another?
          Let's start at looking at a computer's central processing unit, or CPU.
      6:
        image: notes/csd_concept_hardware_software_6.png
        text: The CPU is the master chip that controls all the other parts of the
          computer. A CPU needs to do different things so inside it has smaller, simpler
          parts that handle specific tasks. It has circuits to do simple math and
          logic. It has other circuits to send and receive information to and from
          different parts of the computer.
      7:
        image: notes/csd_concept_hardware_software_7.png
        text: The real magic of the CPU is how it knows which circuits to use and
          when to use them. The CPU receives simple commands that tell it which circuit
          to use to do a specific job. For example, an "add" command tells the CPU
          to use its outer circuit to calculate a new number. And then the "store"
          command tells the CPU to use a different circuit to save that result into
          memory.
      8:
        image: notes/csd_concept_hardware_software_8.png
        text: Just like numbers, all of these simple commands can be represented in
          binary ones and zeros or on and off electrical signals. The binary commands
          are stored in memory and the CPU fetches and executes them in sequence one
          after the other. This sequence of commands is, in fact, a very simple computer
          program.
      9:
        image: notes/csd_concept_hardware_software_9.png
        text: Binary code is the most basic form of software and it controls all the
          hardware of a computer. These days, nobody writes software in binary. It
          would take forever!
      10:
        image: notes/csd_concept_hardware_software_10.png
        text: Today, the software we write looks more like this (Python), or this
          (Ruby), or even this (Blockly). Programming languages like these let you
          type in commands in something that looks a lot like English.
      11:
        image: notes/csd_concept_hardware_software_11.png
        text: To draw a rectangle on the screen, you just need a single command. This
          high-level command is converted into hundreds, or thousands, of simpler
          binary commands that the CPU understands. Software tells the CPU what to
          do, but when you're listening to music, and browsing the web, and chatting
          with a friend, your computer is running multiple pieces of software all
          at once.
      12:
        image: notes/csd_concept_hardware_software_12.png
        text: So, how do all of these programs get on the computer in the first place,
          and how can the CPU run them all at once? To find out we'll have to take
          a look at the operating system.
      13:
        image: notes/csd_concept_hardware_software_13.png
        text: The operating system of the computer is the master program that manages
          how software gets to use the hardware of the computer. For example, I helped
          create the Windows operating system that runs on most personal computers.
      14:
        image: notes/csd_concept_hardware_software_14.png
        text: The operating system is a program with special abilities that let it
          control the other software on the computer. It lets you install new programs
          by loading them into your computer's memory. It decides when a program is
          run by the central processing unit, and whether that program can access
          the computer's input and output devices. And when you think your computer
          is running many programs at once, in reality, it's the operating system
          that's quickly switching between programs sharing that CPU for fractions
          of a second.
      15:
        image: notes/csd_concept_hardware_software_15.png
        text: Inside every computer is an operating system managing software that
          controls the computer's hardware.
      16:
        image: notes/csd_concept_hardware_software_16.png
        text: The software is a series of commands made of simple binary code, and
          that binary code is just electrical signals flowing through billions of
          tiny circuits.
      17:
        image: notes/csd_concept_hardware_software_17.png
        text: Computers have the potential to do all kinds of amazing things. But
          the only thing that makes the computer smart, or useful, is you. When you
          learn to code you get to define the problem you want to solve, and write
          the software that turns those ideas into reality.
