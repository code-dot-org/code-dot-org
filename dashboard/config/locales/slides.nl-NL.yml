"nl":
  slides:
    maze_intro:
      1:
        image: notities/hoc1_1.jpg
        text: Welkom bij je eerste uur code! We duiken direct je eerste ontmoeting
          met programmeren in.
      2:
        image: notities/hoc1_1.jpg
        text: We zullen Blockly gebruiken, een visuele programmeertaal waar je met
          drag-en-drop code schrijft.
      3:
        image: notes/hoc1_3.jpg
        text: De meeste code wordt ingetypt, maar Blockly is visueel. Ieder blok komt
          overeen met een "echte" regel code.
      4:
        image: notes/hoc1_4.jpg
        text: Je zal de basis van computerwetenschappen leren. Deze concepten worden
          overal gebruikt, van apps voor je mobiele telefoon tot het besturen van
          de Mars-lander.
      5:
        image: notes/hoc1_5.jpg
        text: Een programma is een reeks instructies die de computer opvolgt.
      6:
        image: notes/hoc1_6.jpg
        text: Het doel van je eerste programma is om een Angry Bird door een doolhof
          te krijgen om een Groen Varken te raken.
      7:
        image: notes/hoc1_7.jpg
        text: De linkerkant is het doolhof waar je programma in draait. De opdrachten
          voor iedere puzzel staan onder het doolhof.
      8:
        image: notes/hoc1_8.jpg
        text: De middelste toolbox heeft de opdrachten voor de Angry Bird. Deze gebruik
          je om je code op te bouwen.
      9:
        image: notes/hoc1_9.jpg
        text: Aan de rechterkant heb je je werkruimte waar je blokken uit je toolbox
          heen sleept om je programma op te bouwen. Om een blok te verwijderen sleep
          je het naar de prullenbak in de hoek.
      10:
        image: notes/hoc1_10.jpg
        text: Ieder blok is een opdracht. Wanneer je een "vooruit"-blok naar je werkruimte
          sleept en op "Voer Programma Uit" klikt, dan beweegt de vogel een stapje
          in het doolhof.
      11:
        image: notes/hoc1_11.jpg
        text: Om meer dan één actie te doen kan je meerdere blokken naar je werkruimte
          spelen en deze aan mekaar vasthangen. De vogel zal de commando's van boven
          naar beneden uitvoeren.
      12:
        image: notes/hoc1_12.jpg
        text: Wanneer je een programma uit hebt gevoerd en het wil repareren en opnieuw
          beginnen, klik je op de "Opnieuw"-knop.
      13:
        image: notes/hoc1_13.jpg
        text: We zullen dit varkentje wel eens wassen!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hallo, ik ben JR! Elk raceauto team heeft een computer wetenschapper
          nodig om te winnen. Ze analyseren data van de auto om hem sneller te laten
          maken.
      2:
        image: notes/stage5_2.jpg
        text: In deze puzzels, ben jij de artiest dat een lijn moet laten trekken
          overal waar ze gaan.
      3:
        image: notes/stage5_3.jpg
        text: Deze blok zegt "beweeg 100 pixels vooruit." Pixels zijn zeer kleine
          puntjes op je scherm.
      4:
        image: notes/stage5_4.jpg
        text: Deze blok zegt "draai rechts voor 90 graden." Dit zal je artiest evenveel
          draaien als de "draai blok in de doolhof puzzels.
      5:
        image: notes/stage5_5.jpg
        text: Klik op de pijl in deze blokken om de afstand die de kunstenaar naar
          voren gaat of draait. Speel hier een beetje mee om handig te worden met
          deze blokken.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hallo, ik ben Paola! In deze puzzels ben jij de boer die zijn veld volledig
          vlak wilt zodat je gewassen kan aanplanten.
      2:
        image: notes/stage9_2.jpg
        text: Je zal haar moeten helpen alle hopen grond te verwijderen en alle gaten
          in te vullen.
      3:
        image: notes/stage9_3.jpg
        text: De nieuwe blokken verwijderen 1 schep modder van een hoop en vult een
          gat met 1 schep modder.
      4:
        image: notes/stage9_4.jpg
        text: De hopen en gaten zijn verschillend van grootte, dus je moet de boer
          vertellen hoeveel scheppen hij moet gebruiken.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hoi, ik ben Katie! Een van de meest spannende dingen over informatica
          is dat een computerprogramma interactief kan zijn.
      2:
        image: notes/flappy02.jpg
        text: Elke keer dat iemand klikt of drukt of typt op een computer of telefoon,
          dat genereert een gebeurtenis, en er is wat code die beslist wat er gebeurd
          als er wat gebeurd.
      3:
        image: notes/flappy03.jpg
        text: 'Bijvoorbeeld, je zou een gebeurtenis-verwerker kunnen hebben die zegt
          "wanneer iemand met de muis klikt, speel een geluid af" '
      4:
        image: notes/flappy04.jpg
        text: Heb je ooit van het spel FlappyBird gehoord? Met behulp van gebeurtenis-verwerkers
          gaan we leren om  onze eigen aangepaste versie van FlappyBird te programmeren!
      5:
        image: notes/flappy05.jpg
        text: De code die zul je schrijven omvat slepen en neerzetten van blokken
          met daarin opdrachten voor de computer. Onder de motorkap wordt elk van
          deze blokken vertegenwoordigd door echte code.
      6:
        image: notes/flappy06.jpg
        text: 'Als je een kijkje neemt in de werkplaats, zie je een aantal groene
          blokken die voor je zijn ingevuld - dit zijn "gebeurtenis-verwerkers" '
      7:
        image: notes/flappy07.jpg
        text: Als je wilt dat de vogel FLAPPERT als je met de muis KLIKT, krijg je
          dat voor elkaar door het "FLAP" blok aan de goede gebeurtenis-verwerker
          te verbinden. Telkens als je nu in je spel met de muis klikt, zal de vogel
          flapperen.
      8:
        image: notes/flappy08.jpg
        text: In elke puzzel van deze activiteit introduceren we nieuwe gebeurtenis-types
          als groene blokken op de werkplaats, en dan kun je de juiste blokken kiezen
          die reageren op de nieuwe gebeurtenissen.
      9:
        image: notes/flappy09.jpg
        text: Als je een drop-down pijl zoals deze ziet dan kun je de instellingen
          veranderen - zoals wel geluid af te spelen wanneer flappy de grond raakt.
      10:
        image: notes/flappy10.jpg
        text: In de laatste puzzel kun je je eigen spel maken en deze delen met je
          virenden. Veel plezier!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hallo, ik ben Mark! We gaan leren over lussen. Met lussen kun je een
          computer vertellen om een reeks acties telkens te herhalen, duizenden of
          zelfs miljarden keren.
      2:
        image: notes/hoc2_2.jpg
        text: In deze puzzel willen we de vogel 5 vakjes naar voren laten bewegen
          om het varken te krijgen.
      3:
        image: notes/hoc2_3.jpg
        text: We kunnen het nieuwe "herhaal"-blok gebruiken om ons te helpen.
      4:
        image: notes/hoc2_4.jpg
        text: In plaats van 5 "vooruit"-blokken hierheen te slepen...
      5:
        image: notes/hoc2_5.jpg
        text: We kunnen een "vooruit"-blok in het "herhalen"-blok zetten en een getal
          in het blok zetten om aan te geven hoe vaak het moet herhalen.
      6:
        image: notes/hoc2_6.jpg
        text: 'Dit is belangrijk: je kunt meer dan een commando in een "herhalen"-blok
          zetten.'
      7:
        image: notes/hoc2_7.jpg
        text: Veel plezier met je nieuwe "herhalen"-blok!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hallo, ik ben Chris. Voordat ik bij Miami Heat ging basketballen heb
          ik in Amerika Informatica gestudeerd. We gaan nu ons nieuwe blok uitproberen:
          het "herhalen totdat"-blok.'
      2:
        image: notes/hoc3_2.jpg
        text: Wat moeten we doen als we niet weten hoe ver de vogel moet bewegen om
          het varken te krijgen?
      3:
        image: notes/hoc3_3.jpg
        text: Wanneer we een "vooruit"-blok binnen een "herhalen totdat"-blok zetten,
          dan gaat de vogel vooruit TOT het bij het varken komt (of tegen een muur
          aanloopt).
      4:
        image: notes/hoc3_4.jpg
        text: 'En dit is belangrijk: net als eerder, kunnen we meerdere blokken binnen
          het "herhalen totdat" blok zetten, en zij zullen allemaal worden herhaald.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hallo, ik ben Bill! We gaan een fundamenteel nieuw concept leren: "Als"-statements.
          Zo maken computers beslissingen.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Je gebruikt zelf ook dagelijks "Als"-statements. Voor je ''s-ochtends
          naar buiten gaat, zeg je: ALS het regent, dan moet ik mijn regenjas aan.'
      3:
        image: notes/hoc4_3.jpg
        text: We kunnen de zombie vertellen dat ALS er een pad naar links is, hij
          die richting op moet draaien.
      4:
        image: notes/hoc4_4.jpg
        text: Om hier de code voor te schrijven slepen we ons "Als"-blok naar het
          midden en stoppen we er een "linksaf"-blok in.
      5:
        image: notes/hoc4_5.jpg
        text: Als we er nu een "vooruit"-blok boven zetten en een "herhalen"-blok
          om alles heen, dan kijkt de zombie iedere keer als hij beweegt of hij naar
          een pad naar links kan draaien. Het "herhalen"-commando is belangrijk om
          te zorgen dat hij iedere stap kijkt of er een pad is.
      6:
        image: notes/hoc4_6.jpg
        text: '"Als"-statements zijn heel belangrijk in de informatica. Een van de
          eerste programma''s die ik heb geschreven was een boter-, kaas- en eieren-spelletje,
          en er was een "Als"-statement dat zei dat ALS de ander bijna ging winnen,
          ik het vakje waarmee hij zou winnen in ging pikken.'
      7:
        image: notes/hoc4_7.jpg
        text: Veel plezier met het "Als"-blok!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hallo, ik heet Saloni! Ik gebruik informatie om problemen met gezondheid
          en medicatie op te lossen. Laat ons over het "als dan"-blok leren. Het ziet
          eruit als het "als"-blok, maar met een extra "dan"-stukje.
      2:
        image: notes/hoc5_2.jpg
        text: 'Als ik een "vooruit"-blok zet bij "uitvoeren" en een "linksaf"-blok
          bij "anders" dan betekent dat dat de zombie kan kiezen uit 2 opties: ALS
          er een pad vooruit is dan gaat de zombie vooruit, ANDERS (als er geen pad
          vooruit is) dan draait de zombie naar links.'
      3:
        image: notes/hoc5_3.jpg
        text: Net als bij de 'als' blok, kunnen we de "als anders" blokken binnen
          een "herhaal" blok plaatsen zodat de zombie blijft bewegen en de "als anders"
          blok zal blijven controleren of er ergens gedraaid moet worden.
      4:
        image: notes/hoc5_4.jpg
        text: Stuur die zombies naar waar ze horen!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Een als-anders statement is een beslissing tussen twee dingen. Laatosn
          eens kijken hoe we een als-anders statement kunnen gebruiken bij ons vriendje
          Scrat de eekhoorn.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Dit blok ziet er hetzelfde uit als het "als"-blok, maar het heeft een
          extra stuk "anders" stukje aan de onderkant. Als ik een "beweeg vooruit"
          blokje plaats waar "voer uit" staat, en een "Draai linksom" blokje plaats
          bij "anders", dan betekent dat Scrat de eekhoorn vooruit beweegt als er
          een pad is. Als er geen pad is, dan draait Scrat linksom.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Het maakt  een beslissing en doet een van de twee acties op basis van
          deze beslissing. En net als met 'als' blokken, kun je "als-anders" blokken
          binnen 'herhaal' blokken plaatsen.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Laten we nu Scrat de eekhoorn helpen om die eikel te pakken!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hoi, ik ben Brina, een engineer bij Instagram. Een functie is een aantal
          regels code dat je steeds weer wilt kunnen gebruiken, dus in plaats van
          die code iedere keer helemaal uit te schrijven, kun je gewoon een blok gebruiken.
      2:
        image: notes/stage13_2.jpg
        text: We gaan leren hoe je functies maakt. Functies hebben een ster in het
          hoekje. De naam van de functie wordt op de bovenste regel geschreven.
      3:
        image: notes/stage13_3.jpg
        text: De blokken in de definitie vertellen ons wat de functie doet. Dus deze
          functiedefinitie hebben we 'vul 5' genoemd, en bestaat uit een 'herhalen'
          en een 'vul'-blok.
      4:
        image: notes/stage13_4.jpg
        text: De definitie zit op de werkplaats, maar onze boer voert de functie niet
          uit tot we ons 'vul 5 functie'-blok uit de 'functies'-categorie slepen.
      5:
        image: notes/stage13_5.jpg
        text: Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: Het "while" blok voert alles uit wat er in staat, ZOLANG het statement
          bovenaan WAAR is.
      3:
        image: notes/stage9_7.jpg
        text: Bijvoorbeeld, als de boer op een hoop staat, blijft ze 1 schep verwijderen
          ZOLANG er nog een hoop onder haar is.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hoi, ik ben Trina, en ik werk voor Pixar. Ik heb aan een heel stel films
          gewerkt, waaronder Shrek.
      2:
        image: notes/stage11_2.jpg
        text: Dit is onze nieuwe 'teller'-lus. Het voert acties steeds weer uit, en
          je kunt de actie iedere keer ietsje anders maken.
      3:
        image: notes/stage11_3.jpg
        text: In dit voorbeeld zegt onze 'teller'-lus "tel van 50 tot 90 met 10 tegelijk",
          en in het blok hebben we ons "teken een vierkant"-blok. Sleep het 'teller'-blok
          van het 'Variabelen'-stuk naar 'lengte'.
      4:
        image: notes/stage11_4.jpg
        text: Dit betekent dat onze kunstenaar een vierkant gaat tekenen met zijden
          van 50 pixels, daarna telt het daar 10 bij op en tekent een vierkant met
          zijden van 60 pixels. Daarna blijft het 10 optellen en vierkanten tekenen
          tot het bij de 90 komt. Dus krijgen we vierkanten van 50, 60, 70, 80 en
          90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hoi, ik ben Janete, en ik ben een engineer bij Zynga.
      2:
        image: notes/stage15_2.jpg
        text: En als we nu een stel driehoeken willen tekenen met zijden van verschillende
          lengten?
      3:
        image: notes/stage15_3.jpg
        text: Ze zouden al die code met de hand kunnen schrijven, of we kunnen een
          functie met parameters maken.
      4:
        image: notes/stage15_4.jpg
        text: Klik om dat te doen op de blauwe ster op de "teken een driehoek"-functie.
          Sleep daarna 'invoer naam' naar het 'invoer'-blok.
      5:
        image: notes/stage15_5.jpg
        text: Als we dan 'lengte' schrijven op de plek waar nu 'x' staat en op 'enter'
          drukken, maak je een 'lengte'-invoer voor je functie.
      6:
        image: notes/stage15_6.jpg
        text: Klik daarna op de ster. Nu wil je op de 'variabelen'-categorie klikken
          en het 'lengte'-blok in het 'vooruit'-blok van je functie slepen. En sleep
          het oude nummer-blok weg.
      7:
        image: notes/stage15_7.jpg
        text: Klik om je nieuwe functie met parameters te gebruiken op de 'functies'-categorie
          en sleep je "teken een driehoek met lengte'-functie eruit.
      8:
        image: notes/stage15_8.jpg
        text: Je kunt nu het reken-blok gebruiken om verschillende nummers in te voeren
          om driehoeken te tekenen met verschillende groottes.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Gefeliciteerd! Met die oplossing voor de laatste puzzel heb je net code
          geschreven die IEDERE robot kan vertellen hoe hij uit een doolhof zonder
          splitsingen moet komen, of het nu een zombie is, een vogel, een Mars-lander
          of zelfs een automatisch rijdende auto.
      2:
        image: notes/hoc6_2.jpg
        text: De basisbegrippen die je hebt gebruikt zijn de kern van ieder programma
          of app die je gebruikt. We hebben geleerd over lussen, herhalings-statements,
          "als"-statements en "als anders"-statements.
      3:
        image: notes/hoc6_3.jpg
        text: Als je je eerste uur code leuk vond, ga dan naar code.org om verder
          te gaan met je informatica-opleiding! Zogau je onze cursus van 20 uur klaar
          hebt, beheers je de grondbeginselen van het programmeren, en kun je beginnen
          te leren hoe je apps kunt maken voor mobiele telefoons, programma's voor
          robots, spelletjes, je kunt het zo gek niet bedenken.
      4:
        image: notes/hoc6_4.jpg
        text: 'Technologie verandert alles wat we doen en of je nu jong of oud bent:
          programmeren is leuk, creatief, en iedereen kan het leren!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Ondertiteling komt eraan!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hallo, is mijn naam Lyndsey. Ik ben een model, ik acteer en schrijf
          mijn eigen apps. Laten we code gebruiken om Anna en Elsa te helpen bij het
          ontdekken van de magie en schoonheid van ijs.
      2:
        image: notes/frozen1_2.jpg
        text: Je maakt sneeuwvlokken en patronen terwijl je door een winter wonderlandschap
          schaatst dat je kan delen met je vrienden.
      3:
        image: notes/frozen1_3.jpg
        text: In het volgende uur zal je de basis van het coderen leren. Traditionele
          programmering maakt gebruik van tekst, wij zullen Blockly gebruiken wat
          gebruikt maakt van visuele blokken die je kan slepen en neerplaatsen om
          programma's te schrijven. Op die manier leren zelfs universiteitstudenten
          de basis. Achter deze blokken zit immers nog altijd echte code.
      4:
        image: notes/frozen1_4.jpg
        text: Een programma is een reeks van instructies die vertellen aan een computer
          wat hij moet doen. Laat ons een code bouwen of een programma dat Elsa helpt
          om een eenvoudige lijn te maken. Later zullen we dit gebruiken om meer ingewikkelde
          patronen te maken.
      5:
        image: notes/frozen1_5.jpg
        text: Je scherm is opgedeeld in drie grote deler. Links is het ijsoppervlak
          waar je het programma uitvoert. De instructies voor iedere puzzel zijn vlak
          onder het oppervlak geschreven.
      6:
        image: notes/frozen1_6.jpg
        text: Het middelste oppervlak is de gereedschapskist en elk van deze blokken
          zijn de acties die Elsa en Anna kunnen doen.
      7:
        image: notes/frozen1_7.jpg
        text: Het witte oppervlak rechts is de werkruimte en hier bouwen we ons programma.
          Om over het ijsoppervlak te bewegen gebruik je de "Beweeg vooruit" blok.
      8:
        image: notes/frozen1_8.jpg
        text: Hier zegt het "Beweeg vooruit" blok, "beweeg vooruit met 100 pixels".
          Wat gebeurt er wanneer we op "Voer uit" drukken? Elsa zal een bepaalde afstand
          vooruit bewegen op het scherm, 100 pixels om precies te zijn! Piwels zijn
          in feite zeer kleine vierkantjes op je computerscherm.
      9:
        image: notes/frozen1_9.jpg
        text: Het andere blok in deze puzzel zegr "Draai Rechts - 90 graden". Wanneer
          we deze "Draai Rechts" blok gebruiken zorgt dit ervoor dat Elsa een bepaalde
          draai maakt. Je kan er mee spelen hoe ver je Elsa wil laten draaien. De
          hoek is gemeten vanaf het pad voor Elsa. Dit is dus een draai van 90 graden.
          en dit is een draai van 120 graden.
      10:
        image: notes/frozen1_10.jpg
        text: Je kan het aantal pixels en graden wijzigen door het pijltje ernaast.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hallo, ik ben Paola! Computers zijn echt goed in het herhalen van acties.
          Je kan tellen tot 10,20 of 100. Een computer kan tellen tot een miljard
          of een biljoen en dit zal slechts enkele seconden duren. Of het nu gaat
          om tellen, tekenen of iets anders - computers kunnen dit honderden malen
          herhalen of zelfs miljarden malen.
      2:
        image: notes/frozen2_2.jpg
        text: In programmeren noemen we dit een lus. Een lus gebruik je om code te
          herhalen. Voor de volgende puzzel is je doel om Anna een vierkant te helpen
          maken met het "Herhaal" blok.
      3:
        image: notes/frozen2_3.jpg
        text: Gelijk welke blokken je binnen de "Herhaal' blok plaatst, deze zullen
          in volgorde worden uitgevoerd en dit zo vaak als je zelf wilt.
      4:
        image: notes/frozen2_4.jpg
        text: Als je een vierkant wil tekenen kan je de "Beweeg vooruit" blok en de
          "Draai Rechts" blok 4 maal gebruiken. Maar de makkelijkere manier is om
          de "Beweeg vooruit" blok en de Draai Rechts - 90 graden" blok één keer te
          gebruiken en dan dit paar acties 4 keer te herhalen. Om dit te doen plaats
          je de "Beweeg vooruit" blok en de "Draai Rechts" blok in een "Herhaal" blok.
      5:
        image: notes/frozen2_5.jpg
        text: Je kan het nummer in het "Herhaal" blok veranderen in gelijk welke waarde
          en het zal wat er binnen de blok staat zoveel maal herhalen.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hallo, ben ik Chris Bosh. Ik ben een professionele basketbalspeler en
          ik heb gecodeerd op de universiteit.
      2:
        image: notes/frozen3_2.jpg
        text: Een van de belangrijkste concepten in de informatica is hoe je nieuwe
          opdrachten definiëert. De meeste computertalen hebben slechts 100 woorden
          of commando's. En echt de kunst en de magie bestaat er in je eigen nieuwe
          woorden te maken met behulp van deze bouwstenen.
      3:
        image: notes/frozen3_3.jpg
        text: Eens je een computer geleerd hebt om een actie te doen met behulp van
          een reeks commando's, kan je je eigen naam verzinnen voor deze actie, op
          deze manier is het makkelijk om deze later te herhalen. Wanneer je je eigen
          commando definieert en deze een naam geeft noemen we dit een functie.
      4:
        image: notes/frozen3_4.jpg
        text: Hallo, ik ben Jess. Wanneer je programmeer met blokken kan je functies
          gebruiken wanneer je een reeks acties meerdere malen wil gebruiken. Bijvoorbeeld,je
          hebt je eigen code geschreven om een vierkant te maken.
      5:
        image: notes/frozen3_5.jpg
        text: 'Je kan dit definiëren als een functie genoemd "maak een vierkant" '
      6:
        image: notes/frozen3_6.jpg
        text: Nu heb je een nieuwe blok die je meerdere keren kan gebruiken om meerdere
          vierkanten te maken.
      7:
        image: notes/frozen3_7.jpg
        text: Veel simpele vormen kunnen gebruikt worden om meer complexe patronen
          te maken. In de volgende puzzel is de code die je recent schreef om een
          cirkel te maken beschikbaar als een functie, waarme je cirkels van verschillende
          grootte kan maken. Kan je deze gebruiken om Elsa te helpen om ingewikkelde
          en mooie patronen te maken in de sneeuw?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Tot nu toe maakte je een animatie of verhaal dat telkens hetzelfde deed
          wanneer je het uitvoert. Nu kan je een interactief spel maken dat je daadwerkelijk
          kan spelen.
      2:
        image: notes/playlab_2.png
        text: Er is een "Wanneer pijl' blok en de "beweeg acteur" blok. Je kan deze
          blokken samenhangen om de acteurs te bewegen met behulp van de pijltjsetoetsen.
      3:
        image: notes/playlab_3.png
        text: En er zijn een aantal blokken die dingen doen wanneer acteurs botsen
          of aangeklikt worden. Probeer ze uit en heb plezier!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: We gaan games maken met behulp van Play Lab. Goede games hebben een
          verhaal, en elk verhaal heeft acteurs. We gaan leren hoe we onze acteurs
          zoals heksen, aliens en dieren laten praten, bewegen en interactie met elkaar
          laten hebben. Aan het einde van deze tutorial, kunt u een spel van niks
          tot iets maken en het delen met je vrienden.
      2:
        image: notes/playlab_intro_2.png
        text: Je scherm is verdeeld in 3 delen. Aan de linker zijde wordt het programma
          uitgevoerd. De instructies voor elk level worden onderaan weergegeven.
      3:
        image: notes/playlab_intro_3.png
        text: Het middelste gedeelte is de gereedschapkist, en elk van deze blokken
          is een stuk code. Het witte gedeelte aan de rechterkant is de werkruimte
          en daar bouwen we onze progamma's.
      4:
        image: notes/playlab_intro_4.png
        text: Om te beginnen, moet je blokken koppelen aan het oranje "when run" blok.
          Je kan meerdere blokken samenkoppelen door ze te slepen totdat je een gele
          lijn ziet, en dan zullen ze samengekoppelt worden.
      5:
        image: notes/playlab_intro_5.png
        text: In deze eerste puzzel is onze acteur een pinguïn en we laten hem "Hallo!"
          zeggen door een zeg-blok en deze vast te hangen aan de wanneer-uitvoeren
          blok en door "Hallo!" te typen. We laten de pinguïn ook bewegen door de
          beweeg rechts en beweeg links blokken te gebruiken. Wanneer je blokken op
          zijn plaats staan klik dan op de uitvoeren knop om te zien wat je geprogrammeerd
          hebt.
      6:
        image: notes/playlab_intro_6.png
        text: Ga aan de slag en op het einde zal je in staat zijn om je eigen spel
          te maken met verschillende soorten spelers die kunnen reageren, blij of
          verdrietig zijn, punten kunnen scoren of vuurballen gooien of zelfs verdwijnen.
          Het is helemaal aan jou welk spel je wil maken.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Nu gaan we iets leren over iets wat programmeurs van spellen iedere
          dag gebruiken. Gebeurtenissen. Een gebeurtenis vertelt aan je programma
          om te luisteren wanneer er iets gebeurt. Wanneer dat iets gebeurt voert
          het een actie uit.
      2:
        image: notes/playlab_events_2.png
        text: 'Enkele voorbeelden van gebeurtenissen zijn : luisteren voor een muisklik,
          een pijltjestoets of een tik op het scherm.'
      3:
        image: notes/playlab_events_3.png
        text: Hier zorgen we ervoor dat de ruimterobot de aardbewoners groet wanneer
          een speler hem aanklikt. We gebruiken de "wanneer geklikt" blok en hangen
          hier de "zeg" blok aan. Wanneer de speler de ruimterobot aanklikt wordt
          alles wat aan de "wanneer geklikt" eventblok vasthangt uitgevoerd. Wat zegt
          je buitenaards wezen?
      4:
        image: notes/playlab_events_4.png
        text: Er zijn ook "wanneer pijl" blokken. Als je de "beweeg" blokken vasthangt
          aan deze kan je je acteurs op en neer en links en rechts laten bewegen.
          Stap voor stap wordt je spel meer interactief.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Dit is de "Herhaal voor altijd" blok. Alles wat binnen deze blok staat
          zal voor altijd blijven gebeuren in het spel.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Als we een acteur iets herhaaldelijk willen laten doen zonder dat de
          speler er iets voor moet doen, plaatsen we deze blokken in een "herhaal
          voor altijd" blok.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In de volgende puzzel is ons doel om de tovernaar de grenzen van het
          koninkrijk te laten patrouilleren van links naar rechts en dit steeds opnieuw.
          Als je nu leert hoe de herhaal opdrachten werken, bespaar je je later veel
          tijd wanneer je je eigen spel maakt.
