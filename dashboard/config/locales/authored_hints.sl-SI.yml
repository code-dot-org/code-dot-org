---
sl-SI:
  data:
    authored_hints:
      2-3 Artist 1 new:
        2-3_Artist_1_new_a: Če uporabiš blok 'premakni se naprej za 100 pikslov' avtomatično
          narišem črto.
        2-3_Artist_1_new_b: Imate težave pri obračanju? Uporabite blok 'obrni se desno
          za 90 stopinj'.
      2-3 Artist 11:
        2-3_Artist_11_a: 'Imate težave s koti? V celem krogu morate ko 360 stopinj
          razdeliti na 8 enakih kotov. Koliko je 360/8? '
      2-3 Artist 12:
        2-3_Artist_12_a: Za polni krog se morate obrniti za 360 stopinj. Če se umetnik
          vsakič obrne za 1 stopinjo v zanki, mora to narediti 360 krat, da pride
          okrog.
      2-3 Artist 2 new:
        2-3_Artist_2_new_a: Umetnik ni obrnjen v pravo smer. Ali ga lahko obrneš preden
          nariše črto?
      2-3 Artist 3new:
        2-3_Artist_3new_a: Koliko je 100-70? Rezultat te enačbe ti da višino črnega
          klobuka!
        2-3_Artist_3new_b: Umetnik ni obrnjen v pravo smer. Ali ga lahko obrneš preden
          nariše črto?
      2-3 Artist 4:
        2-3_Artist_4_a: Za dokončanje hiše, vse kar moramo narediti je narisati kvadrat!
      2-3 Artist 6:
        2-3_Artist_6_a: Če želite narediti te majhne kote, se morate vsakič obrniti
          dlje, kot ste se obrnili s kvadratom
        2-3_Artist_6_b: Začel sem obrnjen v desno, zato je lažje začeti s premikom
          naprej in se potem obrniti levo, da ustvariš trikotnik.
        2-3_Artist_6_c: Vsaka stranica trikotnika je enake dolžine kot vsaka stranica
          kvadrata....100 pikslov!
      2-3 Artist 7:
        2-3_Artist_7_a: Najlažji način, da rešiš to uganko je, da najprej narišeš
          prvi kvadrat tako, da je Umetnik obrnjen navzdol, preden začneš risati drugi
          kvadrat.
      2-3 Artist 8:
        2-3_Artist_8_a: Če prepoloviš 200, koliko pikslov mora biti vsak kvadrat širok?
      2-3 Artist 9 NEW:
        2-3_Artist_9_a: Ta diamant je pravzaprav le kvadrat, ki je obrnjen postrani
      2-3 Artist Debugging 10:
        2-3_Artist_Debugging_10_a: Ne pozabi razširiti kontrolerja za 10 pikslov...
        2-3_Artist_Debugging_10_b: |-
          \*\* Učimo se napakah! \*\*

          Začni s spreminjanjem ene številke naenkrat.

          Katere številke naredijo kaj?

          Če se preveč izgubiš, klikni »Začni znova« in koda bo ponastavljena.
      2-3 Artist Debugging 2:
        2-3_Artist_Debugging_2_a: 'Namig: vsak brk je 75 pikslov dolg'
      2-3 Artist Debugging 3:
        2-3_Artist_Debugging_3_a: Eden izmed obratov je 15 stopinj premajhen.
        2-3_Artist_Debugging_3_b: Če težko slediš zagnanemu programu, uporabi drsnik,
          da ga upočasniš.
      2-3 Artist Debugging 7:
        2-3_Artist_Debugging_7_a: Kaj se zgodi, če se Umetnik premakne ali skoči nazaj
          potem, ko nariše prvo črto?
      2-3 Artist Debugging 8:
        2-3_Artist_Debugging_8_a: |-
          Kolikokrat se je moj lik ponovil?

          Kolikokrat se mora ponoviti?

          Kje lahko spremeniš to v kodi?
      2-3 Artist Debugging 9:
        2-3_Artist_Debugging_9_a: Umetnik se mora obniti za 60 stopinj v levo preden
          začne risati!
        2-3_Artist_Debugging_9_b: Za popoln zavoj vam ni treba dodati drugega bloka,
          samo 60 stopinj dodajte bloku "Obrni levo", ki je že tam!
      2-3 Artist Functions 11:
        2-3_Artist_Functions_11_a: Spremeniti moraš število in dolžino stranic znotraj
          funkcij. Poleg tega pa moraš spremeniti tudi kot med vsako stranico.
      2-3 Artist Functions 12:
        2-3_Artist_Functions_12_a: Najprej zaženi program, da vidiš kaj moraš dodati.
      2-3 Artist Functions 3:
        2-3_Artist_Functions_3_a: "**115 + 45 = 160**"
      2-3 Artist Functions 4:
        2-3_Artist_Functions_4_a: Umetnik se mora obrniti za 120 stopinj med vsakim
          kvadratom za dokončanje vzorca.
      2-3 Artist Loops New 11:
        2-3_Artist_Loops_New_11_a: 'Koda iz prejšnje uganke:'
        2-3_Artist_Loops_New_11_b: Tvoj nov obrat naj gre na _konec_ kode v zanko.
      2-3 Artist Loops New 12:
        2-3_Artist Loops_New_12_a: Preden začneš risati diamant, se mora Umetnik obrniti
          levo za 60 stopinj, da bo na pravi poti
        2-3_Artist Loops_New_12_b: Potem, ko se Umetnik premakne naprej za 100 pikslov,
          ga obrni v desno za 120 stopinj.
        2-3_Artist Loops_New_12_c: Umetnik se mora obrniti v desno za 60 stopinj
      2-3 Artist Loops New 13:
        2-3_Artist_Loops_New_13_a: |-
          Na koncu vsakega diamanta je Umetnik že obrnjen v pravo smer, da nariše naslednjega.

          Zato ti ni potrebno dodati 'obrni se v levo' blok preden začne risati naprej.
        2-3_Artist_Loops_New_13_b: |-
          Umetnik se mora za vsak diamant:

          -   premakniti
          -   obrniti v desno za 120 stopinj
          -   premakniti
          -   obrniti v desno za 60 stopinj

          Nato vse skupaj ponoviti!
      2-3 Artist Loops New 9:
        2-3_Artist_Loops_New_9_a: Umetnik se mora obniti za 45 stopinj v levo preden
          začne risati.
        2-3_Artist_Loops_New_9_b: Ta V je polovica kvadrata. Kakšna bi bila koda,
          da narišeš pol kvadrata?
      2-3 Artist Nested Loops 1:
        2-3_Artist_Nested_Loops_1_a: Ne pozabi dati v zanko vse sive kode.
      2-3 Artist Nested Loops 3:
        2-3_Artist_Nested_Loops_3_a: |-
          Potrebuješ pomoč pri izračunu kota?

          **360/12=30**
        2-3_Artist_Nested_Loops_3_b: Ne pozabi postaviti vse sive kode in blok za
          obrat v zanko.
      2-3 Artist Nested Loops 4:
        2-3_Artist_Nested_Loops_3_a: |-
          Potrebuješ pomoč pri izračunu kota?

          **360/12=30**
      2-3 Artist Nested Loops 7:
        2-3_Artist_Nested_Loops_7_a: |-
          Za koliko stopinj se moraš obrniti v vsaki zanki?

          Koliko je 360 deljeno z 10?
      2-3 Artist Nested Loops 9:
        2-3_Artist_Nested_Loops_9_a: |-
          Ali potrebuješ namig pri določanju pravega kota?

          **360 / 12 = 30**
      2-3 Bee Conditionals 14:
        2-3_Bee_Conditionals_14_a: Poskusi z rdečo rožo ravnati popolnoma enako kot
          vijolično rožo!
        2-3_Bee_Conditionals_14_b: Če bi bile rdeče rože vijolične, ali lahko ugotoviš
          kako uporabiti dodatni blok 'Ponovi', da skrajšaš kodo?
        2-3_Bee_Conditionals_14_c: |-
          Poskusi razdeliti uganko na 2 dela:

          1.  Dobi nektar 3-krat

          2.  Premakni se naprej 5-krat

          3.  Preveri ali ima roža nektar, če ga ima, ga poberi

          4.  Obrni se levo

          5.  Naredi med:

          6.  Pojdi naprej za en premik

          7.  Naredi med 2-krat
      2-3 Bee Conditionals 15:
        2-3_Bee_Conditionals_15_a: 'Ne pozabi: Vijolične rože imajo ali 0 ali 1 nektar.
          Količina nektarja se spreminja vsakič, ko zaženeš program.'
      2-3 Bee Conditionals 3:
        2-3_Bee_Conditionals_3_a: Ta koda bo najkrajša, če uporabiš zanko vsakič,
          ko se premakneš naprej in še eno zanko, da dobiš nektar in še eno zanko,
          da narediš med.
      2-3 Bee Conditionals 6:
        2-3_Bee_Conditionals_6_a: 'Ne pozabi: Vijolične rože spreminjajo število nektarja
          med 0 in 1 vsakič, ko zaženeš program!'
      2-3 Bee Debugging 1:
        2-3_Bee_Debugging_1_a: Ko najdeš in popraviš napačen blok, ali opaziš kakšen
          vzorec, ki se ponavlja? Uporabi zanko, da poenostaviš program
      2-3 Bee Debugging 2:
        2-3_Bee_Debugging_2_a: Ko najdeš in popraviš napačen blok, ali opaziš kakšen
          vzorec, ki se ponavlja? Uporabi zanko, da poenostaviš program
      2-3 Bee Debugging 4:
        2-3_Bee_Debugging_4_a: Kje čebela počne nekaj, kar nima smisla? Kaj se zgodi,
          ko spremeniš ta blok?
      2-3 Bee Functions 4:
        2-3_Bee_Functions_4_a: Ni ti treba dati funkcije v zanko. Premakni se, pokliči
          funkcijo, premakni se in pokliči funkcijo še enkrat.
      2-3 Bee Functions 6:
        2-3_Bee_Functions_6_a: Ni ti treba dati funkcije v zanko. Premakni se, pokliči
          funkcijo, premakni se in pokliči funkcijo še enkrat.
      2-3 Bee Loops 2:
        2-3_Bee_Loops_2_a: Na koncu bi morali biti štirje bloki znotraj zanke.
      2-3 Bee Loops 3:
        2-3_Bee_Loops_3_a: V svoji zanki bi moral imeti 6 blokov.
      2-3 Bee Loops 3B:
        2-3_Bee_Loops_3B_a: Uporabiti moraš 2 različni zanki, eno za drugo.
      2-3 Bee Loops 4:
        2-3_Bee_Loops_4_a: Na koncu bi moralo biti pet blokov znotraj zanke.
      2-3 Bee Loops 4A:
        2-3_Bee_Loops_4A_a: Prvo dejanje bo obrat, ne premik.
        2-3_Bee_Loops_4A_b: Zadnji del programa lahko dokončaš tako, da napišeš kodo
          na koncu izven zanke.
        2-3_Bee_Loops_4A_c: Če še ne prepoznaš, kje moraš uporabiti zanko, poskusi
          najprej rešiti uganko brez zank, nato pa si oglej, kaj lahko na koncu združiš
          v "Ponovi" blok
      2-3 Bee Loops 5:
        2-3_Bee_Loops_5_a: Če ne opaziš blokov, ki jih lahko takoj vstaviš v „Ponovi“,
          začni s programiranjem vsake poteze posebej in poišči vzorec.
      2-3 Bee Loops 6:
        2-3_Bee_Loops_6_a: Če ne vidiš, kaj bi moralo iti v zanko 'Ponovi', poskusi
          dodajati en blok za drugim in preveri, ali lahko najdeš vzorec.
        2-3_Bee_Loops_6_b: Na koncu mora biti v zanki 6 blokov
      2-3 Bee Loops 7:
        2-3_Bee_Loops_7_a: Prvo dejanje bo obrat, ne premik.
        2-3_Bee_Loops_7_b: V primeru, da ne vidiš takoj vzorca, ki se ne ponavlja,
          poskusi sprogramirati rešitev brez uporabe zank in potem poišči vzorec.
      2-3 Maze 1:
        2-3_Maze_1_a: Blok "Premakni se naprej" uporabiš tako, da ga povlečeš iz orodne
          vrstice v delovni prostor pod blok "Ob zagonu".
      2-3 Maze 16:
        2-3_Maze_16_a: Če ne vidiš vzorca, ki se ponavlja, poskusi sprogramirati vso
          nalogo brez zanke. Zanko uporabi šele potem, ko vidiš kaj vse se ponavlja.
        2-3_Maze_16_b: |-
          Če želiš postaviti veliko blokov znotraj zanke "Ponovi", preprosto povleci zanko v delovni prostor, nato pa vanjo povleci vse bloke iz programa.

          Priključi vse nazaj na blok "Ob zagonu" in že si pripravljen!
      2-3 Maze Loops 17:
        2-3_Maze_Loops_17_a: Če ne vidiš vzorca, ki se ponavlja, poskusi sprogramirati
          vso nalogo brez zanke. Zanko uporabi šele potem, ko vidiš kaj vse se ponavlja.
        2-3_Maze_Loops_17_b: Ali se je začetna koda izbrisala? Klikni 'Začni znova'!
      2-3 Maze Loops 18:
        2-3_Maze_Loops_18_a: Če ne vidiš vzorca, ki se ponavlja, poskusi sprogramirati
          vso nalogo brez zanke. Zanko uporabi šele potem, ko vidiš kaj vse se ponavlja.
      2-3 Maze Loops 19:
        2-3_Maze_Loops_19_a: Če se ti je zataknilo, poskusi napisati kodo brez zanke
          in potem poišči vzorec, ki se ponavlja.
        2-3_Maze_Loops_19_b: Če vstavite eno ponavljajočo zanko v drugo, lahko zmanjšate
          število uporabljenih blokov.
      2-3 Maze Loops 20:
        2-3_Maze_Loops_20_a: V tej uganki poišči vzorec podoben stopnicam, da ugotoviš
          kje lahko uporabiš zanko.
      2-3 Maze Loops 21:
        2-3_Maze_Loops_21_a: Če imaš težave pri iskanju vzorca, ki spominja na stopnice,
          poskusi s prstom prekriti blokirane poti.
      4-5 Artist 11:
        4-5_Artist_11_a: Poskrbi, da znotraj zanke Umetnik skoči nazaj in navzgor
          po vsaki narisani črti.
      4-5 Artist 3:
        4-5_Artist_3_a: |-
          Če je vsa dolžina te cvetlične grede 600 pikslov in 2 stranici sta 200 pikslov dolgi, kako boš ugotovil koliko sta dolgi krajši stranici?

          **600 - 200 - 200 = 200**

          To pomeni, da je vsota krajših stranic enaka 200 pikslov.

          **Koliko je 200 / 2?**
        4-5_Artist_3_b: Če ne vidiš, kam paše zanka, poskusi sprogramirati celotno
          rešitev brez zanke in poišči vzorec.
      4-5 Artist 4:
        4-5_Artist_4_a: |-
          Krog ima 360 stopinj.

          Tolikokrat moraš tudi ponoviti to kodo (če se premakneš 1 stopinjo naenkrat) preden je krog končan!
      4-5 Artist 5:
        4-5_Artist_5_a: |-
          Uganko lahko rešiš tudi tako, da 90-stopinjski kot deliš na tretjine.

          \*\* 90/3 =?\*\*
      4-5 Artist 7:
        4-5_Artist_7_a: Kateri kot je najmanjši? Na kakšnem naklonu stoji Umetnik?
      4-5 Artist 8:
        4-5_Artist_8_a: "Dolgi stranici sta dolgi 240 pikslov. To pomeni, da je dolžina
          2 krajših stranic:\n\n**800 - 240 - 240 = 320**\n\nKoliko je **320/2** ? "
        4-5_Artist_8_b: |-
          Ta vzorec lahko narišeš na 2 načina!

          -   Nariši 2 pravokotnika, ki sta 120 pikslov dolga in 160 pikslov visoka, s stranjo, ki se prekriva

          -   Nariši 1 pravokotnik, ki je 240 pikslov dolg in 160 pikslov visok, nato dodaj črto na sredino
      4-5 Artist 9:
        4-5_Artist_9_a: Kadar je trikotnik enakostraničen, so vse stranice in vsi
          koti enaki
        4-5_Artist_9_b: Nariši 3 enako velike trikotnike. Ne pozabi skočiti na novo
          pozicijo po vsakem trikotniku.
      4-5 Artist Assessment 1:
        4-5_Artist_Assessment_1_a: Narisati moraš le zunanji del trikotnika, da dokončaš
          to uganko.
      4-5 Artist Patterns 11:
        4-5_Artist_Patterns_11_a: Če ima krog 360 stopinj in se v vsaki zanki obrneš
          za 3 stopinje. Kolikokrat moraš uporabiti zanko, da narišeš cel krog?
      4-5 Artist Patterns 2:
        4-5_Artist_Patterns_2_a: Vsak kvadrat je 20 pikslov dolg, skočiti moraš 20
          pikslov preden začneš risati naslednji kvadrat.
      4-5 Artist Patterns 3:
        4-5_Artist_Patterns_3_a: Bodi previden in izvleci celoten blok kode iz orodne
          vrstice vsakič, ko poskusiš novo.
        4-5_Artist_Patterns_3_b: Če koda postane preveč nejasna, lahko vedno klikneš
          "Začni znova" in poskusiš ponovno!
      4-5 Artist Patterns 5:
        4-5_Artist_Patterns_5_a: |-
          Zdaj, ko je umetnik dokončal vsak diamant, je obrnjen v nasprotno smer od tiste, kjer mora biti, da začne naslednji.

          Za koliko stopinj ga je treba obrniti, da se postavi naravnost?
      4-5 Bee Conditionals 6:
        4-5 Bee Conditionals 6_a: To sestavljanko lahko rešiš z uporabo le blokov
          v delovnem prostoru. V kakšnem vrstnem redu morajo biti bloki?
        4-5 Bee Conditionals 6_b: Ne pozabi preveriti ali ima roža več kot 0 nektarja
          vsaj 3-krat, da rešiš uganko.
      4-5 Bee Debugging 1:
        4-5_Bee_Debugging_1_a: Če imaš težave ugotoviti, kaj ni v redu, poskusi zagnati
          program, da vidiš, kje je napaka.
      4-5 Bee Nested Loops Rows:
        4-5_Bee_Nested_Loops_Rows_a: Poskusi to zanko obravnavati kot dolg pravokotnik,
          kjer se mora čebela premakniti naprej, nato pa večkrat zavij levo, da dokončaš
          pot
      4-5 Maze 10:
        4-5_Maze_10_a: |-
          Če ne vidiš, kako z zankami rešiti uganko takoj, najprej poskusi rešiti uganko brez zanke, nato pa poišči vzorec.

          Kaj bi moral postaviti znotraj bloka "Ponovi", da se koda skrajša?
      4-5 Maze 4:
        4-5_Maze_4_a: Če ne opaziš kam moraš dati zanko, poskusi najprej napisati
          kodo brez zanke in poišči vzorec, ki se ponavlja
      4-5 Maze 5:
        4-5_Maze_5_a: Uporabi `ponovi` zanko vedno, ko potrebuješ `premakni se naprej`
          za več kot dva koraka.
        4-5_Maze_5_b: Lahko uporabiš več kot eno `ponovi` zanko v uganki.
      4-5 Maze 6:
        4-5_Maze_6_a: |-
          Poskusi slediti poti s svojim prstom.
          Ali je to najkrajša pot, ki jo najdeš?
      4-5 Maze 7:
        4-5_Maze_7_a: |-
          Ali želiš skrajšati kodo?

          Poišči vzorec v svoji kodi. Ali opaziš kaj, kar se ponavlja? Uporabi zanko!
      4-5 Nested Loops 12:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      4-5 Nested Loops 6:
        4-5_Nested_Loops_6_a: |-
          Ne pozabi zaviti po svoji notranji zanki.

          Narisal boš 6 trikotnikov v 360 stopinjah.

          \*\* 360/6 =? \*\*
      4-5 Nested Loops 7:
        4-5_Nested_Loops_7_a: |-
          Ta oblika se bo ponovila 10-krat v 360 stopinjah.

          **360/10=?**
      4-5 Nested Loops 8:
        4-5_Nested_Loops_8_a: |-
          To obliko moraš dati v zanko 6-krat v 360 stopinjah.

          **Koliko je 360/6=?**
      4-5 While Loops 8:
        4-5_While_Loops_8_a: Vsak element potrebuje lastno zanko `Dokler`.
      Course 4 Artist 11:
        Course_4_Artist_11_a: Pol-osemkotnik ima **dolžino 30** in se obrne desno
          za **60 stopinj**.
        Course_4_Artist_11_b: 2/3 trikotnik ima **dolžino 80** in se obrne desno za
          **120 stopinj**.
      Course 4 Artist 12:
        Course_4_Artist_12_a: Vsaka ponovljena oblika je kombinacije polovice šestkotnika,
          kateri sledita 2/3 trikotnika.
        Course_4_Artist_12_c: |-
          1.  Prve tri črte so 60 pikslov dolge in obrniti se moraš za 60 stopinj.

          2.  Drugi dve črti sta 80 pikslov dolgi in obrniti se moraš za 120 stopinj.
      Course 4 Artist 6:
        Course_4_Artist_6_a: V 360 stopinjskem obratu so 3 trikotniki...koliko je
          360 deljeno s 3?
      Course 4 Artist 8a:
        Course_4_Artist_8a: |-
          Potrebujejo pomoč pri ugotovljanju za koliko se obrniti?

          Na sliki so 3 trikotniki v 360 stopinjski rotaciji.

          Koliko krat gre 3 v 360?
      Course 4 Artist 9:
        Course_4_Artist_9_a: |-
          Neveš za koliko se obrniti?

          Koliko je 360 deljeno z 10?
      Course 4 Artist For Loops 3:
        Course_4_Artist_For_Loops_3_a: Da bi lahko z zanko 'za vsako število' rešili
          to nalogo, je treba spremenljivko 'counter' uporabiti, kot dolžino stranice.
      Course 4 Artist For Loops 4:
        Course_4_Artist_For_Loops_4_a: |-
          \*\*Kakšno je najmanjše število, ki ga potrebukeš?
          Kakšno pa je največje?
          Kako velik je korak po?

          To so vprašanja, ki si jih moraš zastaviti, da boš lahko izpolnil polja v zanki 'za vsako število'.
      Course 4 Artist For Loops Challenge:
        Course_4_Artist_For_Loops_Challenge_a: Največji večkotnik ima 19 stranic,
          najmanjši pa le 2.
      Course 4 Artist Vars 13:
        Course_4_Artist_Vars_13_a: Uporabiti moraš dve `ponovi N-krat` vgnezdeni(to
          pomeni ena znotraj druge) zanki, v obeh uporabi `sides` spremeljivko.
        Course_4_Artist_Vars_13_b: |-
          Notranja zanka naj riše osemkotnik (obrača naj se levi).
          Nato se moraš v zunanji zanki premakniti naprej in obrniti na desno.
        Course_4_Artist_Vars_13_c: Da bi prilagodil obliko, ki ostane iste velikosti
          ko se število stranic spremenja moraš uporabiti matematični blok s katerim
          deliš dolžino v pikslih s številom stranic.
      Course 4 Artist Vars 8:
        Course_4_Artist_Vars_8_a: Če razdeliš začetno dolžino s številom stranic,
          bo dolžina vsake stranice krajša, ko se bo število stranic povečevalo.
      NEW Course 4 Bee For Loops 8:
        NEW_Course_4_Bee_For_Loops_8_a: |-
          Če tvoja zanka šteje, se k tvojemu števcu vsakič doda prirastek.

          Kaj moraš dodati vsaki številki, da dobiš naslednjo številko?
      course2_artist_nestedLoops_challenge1:
        courseD_artist_nestedLoops_challenge1_a: Najprej uporabi ugnezdeno zanko,
          da narišeš 4 osemkotnikov. Obrni se za 45 stopinj, da narediš osemkotnik.
          Skoči in se obrni za 90 stopinj po vsakem osemkotniku.
        courseD_artist_nestedLoops_challenge1_b: Dodaj kodo, da narišeš trikotnik
          znotraj tvoje ugnezdene zanke. Uporabi obrat za 120 stopinj za trikotnik
        courseD_artist_nestedLoops_challenge1_c: |-
          Uporabi ugnezdeno zanko:

          -   Ponovi 8-krat
          -   nariši osemkotnik
          -   nariši trikotnik
          -   skoči naprej za 50 pikslov
          -   obrni se desno za 90 stopinj
      course2_artist_prog_challenge1:
        courseC_artist_prog_challenge1_a: Pravokotnik je 200 pikslov širok in 100
          pikslov visok.
      course2_artist_prog_challenge2:
        courseC_artist_prog_challenge2_a: Ukaze lahko vstaviš v blok "Ponovi", da
          jih ponoviš znova in znova. Poskusi!
      course2_bee_conditionals_challenge1:
        courseD_bee_conditionals_challenge1_a: |-
          Najdi pot, ki doseže vsako rožico in satovje brez, da se čebelica zaleti v drevo. Najboljša pot je v obliki spirale.

          **To uganko lahko rešiš brez, da se obrneš v levo**
      course2_bee_conditionals_challenge2:
        courseD_bee_conditionals_challenge1_b: |-
          Tako kot bloki "če v cvetu", bo tudi koda znotraj "kadar nektar> 0" delovala le, če je čebela na cvetu. Glavne razlike so v tem, da se koda v notranjosti ponavlja, dokler ne zmanjka nektarja. Poskusite ta vzorec:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">&gt;</title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      course2_collector_loops_challenge2:
        courseC_maze_loops_challenge2_a: Izvirna koda bi delovala odlično - če bi
          bil v vsakem kupu samo en kos zaklada!
      course2_collector_prog_challenge1:
        courseC_collector_prog_challenge1_a: Lahko uporabiš več ukazov "Poberi", da
          zbereš več diamantov.
      course2_collector_prog_challenge2:
        courseC_collector_prog_challenge1_a: Lahko uporabiš več ukazov "Poberi", da
          zbereš več diamantov.
      course2_harvester_loops_challenge1:
        courseC_harvester_loops_challenge1_a: Sploh ne razmišljaj, da bi poskusil
          to brez zank!
        courseC_harvester_loops_challenge1_b: Lahko ponoviš "Premakni se naprej" in
          "Poberi koruzo" tolikokrat, kot moraš, nato "Obrni desno" na vsakem vogalu
        courseC_harvester_loops_challenge1_c: Najboljši način za zbiranje prvih štirih
          koruze je uporabljen blok "Ponovi" znotraj drugega bloka "Ponovi". Ta vzorec
          lahko uporabiš tudi za preostalo sestavljanko!
      course2_maze_loops_challenge1:
        courseC_maze_loops_challenge1_a: Razmisli o tej poti kot o treh različnih
          delih. Vsak ima vzorec, ki ga lahko ponovite.
        courseC_maze_loops_challenge1_b: Med vsakim blokom "Ponovi" se boš moral obrniti
          levo ali desno in pripraviti Scrata za naslednji vzorec.
        courseC_maze_loops_challenge1_c: Če si prišel/a tako daleč, se moraš samo
          obrniti levo in nato nekajkrat premakniti naprej. Ne obupaj!
      course2_maze_programming_challenge2:
        courseC_maze_programming_challenge2_a: Če uporabiš ukaz "Premakni se nazaj"
          potem bodi zelo previden, da sem obrnjen v pravo smer!
        courseC_maze_programming_challenge2_b: Najkrajša rešitev je dolga samo 5 blokov,
          ampak uporabi blok 'Ponovi'
      course3_artist_functions_challenge1:
        courseE_artist_functions_challenge1_a: Če pokličeš funkcijo še enkrat, lahko
          narišeš isti vzorec v preostalem kotu. Lahko dodaš tudi "Skoči do" drugih
          pozicij ali spremeniš vse, kar želiš!
      course3_collector_debugging_challenge2:
        courseD_collector_debugging_challenge2_a: "Začni tako, da se osredotočiš na
          zbiranje DVA dragulja iz vsakega od prvih dveh kupov.\n\n![](<https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04
          AM copy.png>)\nUporabi te bloke.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block
          type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n
          \ </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title
          name=\"DIR\">moveForward</title>\n                  </block>\n                  \n
          \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n
          \   <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
      course3_farmer_condLoops_challenge1:
        courseD_farmer_condLoops_challenge1_a: Gumb "Zaženi" ti lahko zelo pomaga
          v tem izzivu.
      course3_farmer_condLoops_challenge2:
        courseD_farmer_condLoops_challenge2_a: Število zelenjave se razlikuje. Uporabi
          "Dokler" zanko za to nalogo.
      course3_maze_debugging_challenge1:
        courseC_maze_debugging_challenge1_b: Pot je v obliki pravokotnika. Veverica
          se mora vsakič obrniti v isti smer!
        courseC_maze_debugging_challenge1_c: Če se ti je zataknilo, lahko vedno začneš
          znova, ali zbrišeš vso kodo in poskusiš še enkrat!
      course3_maze_debugging_challenge2:
        courseC_maze_debugging_challenge2_a: En način kako to rešiš je, da dodaš več
          blokov "Premakni se naprej" med obrati.
        courseC_maze_debugging_challenge2_b: Če se ti je zataknilo, lahko vedno začneš
          znova, ali zbrišeš vso kodo in poskusiš še enkrat!
        courseC_maze_debugging_challenge2_c: Obstajata dve različni poti, ki jima
          lahko slediš samo s premikom naprej, in le v štirih zavojih. Če najdeš način,
          kako uporabiti blok 'Ponovi' je možnih poti še več!
      course4_harvester_nested_loops_challenge1:
        courseD_harvester_nested_loops_challenge1_a: Verjetno si že uporabil zanko,
          da si ustvaril cik-cak vzorec. Ali se spomneš algoritma, ki si ga uporabil?
          Dodaj le še nekaj blokov, da dobiš rešitev.
      courseE_artist_concept_challenge1:
        courseE_artist_concept_challenge1_a: Pol-osemkotnik ima **dolžino 30** in
          se obrne desno za **60 stopinj**.
        courseE_artist_concept_challenge1_b: 2/3 trikotnik ima **dolžino 80** in se
          obrne desno za **120 stopinj**.
      courseE_artist_concept_challenge1_2018:
        courseE_artist_concept_challenge1_a: Pol-osemkotnik ima **dolžino 30** in
          se obrne desno za **60 stopinj**.
        courseE_artist_concept_challenge1_b: 2/3 trikotnik ima **dolžino 80** in se
          obrne desno za **120 stopinj**.
      courseF_artist_for4:
        courseF_artist_for4_a: |-
          \*\*Kakšno je najmanjše število, ki ga potrebukeš?
          Kakšno pa je največje?
          Kako velik je korak po?

          To so vprašanja, ki si jih moraš zastaviti, da boš lahko izpolnil polja v zanki 'za vsako število'.
      courseF_artist_for4_2018:
        courseF_artist_for4_a: |-
          \*\*Kakšno je najmanjše število, ki ga potrebukeš?
          Kakšno pa je največje?
          Kako velik je korak po?

          To so vprašanja, ki si jih moraš zastaviti, da boš lahko izpolnil polja v zanki 'za vsako število'.
      courseF_artist_for4_2019:
        courseF_artist_for4_a: |-
          \*\*Kakšno je najmanjše število, ki ga potrebukeš?
          Kakšno pa je največje?
          Kako velik je korak po?

          To so vprašanja, ki si jih moraš zastaviti, da boš lahko izpolnil polja v zanki 'za vsako število'.
      courseF_artist_for4_2020:
        courseF_artist_for4_a: |-
          \*\*Kakšno je najmanjše število, ki ga potrebukeš?
          Kakšno pa je največje?
          Kako velik je korak po?

          To so vprašanja, ki si jih moraš zastaviti, da boš lahko izpolnil polja v zanki 'za vsako število'.
