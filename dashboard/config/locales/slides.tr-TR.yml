"tr":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Kod saatinin ilk dakikalarına hoş geldin! Hadi, beraber programlamanın
          ilk zevkli adımlarını atalım.
      2:
        image: notes/hoc1_2.jpg
        text: Kod yazmak için, blokları sürükleyip bırakacağınız bir görsel programlama
          dili olan Blockly'i kullanacağız.
      3:
        image: notes/hoc1_3.jpg
        text: Çoğu kod yazılır, fakat Blockly görseldir. Her blok "gerçek" bir kod
          satırına karşılık gelir.
      4:
        image: notes/hoc1_4.jpg
        text: Bilgisayar biliminin temellerini, Mars aracını kontrol etmekten uygulamalar
          yapmaya kadar her yerde kullanılan kavramları öğreneceksiniz.
      5:
        image: notes/hoc1_5.jpg
        text: Bir program, bilgisayarınızın takip etmesi için yaratılmış bir talimatlar
          kümesidir.
      6:
        image: notes/hoc1_6.jpg
        text: "İlk programınızın amacı, Yeşil Domuzu vurmak için labirentten geçerek
          bir Kızgın Kuş elde etmektir."
      7:
        image: notes/hoc1_7.jpg
        text: Sol taraf programın çalıştığı labirenttir. Her bulmacanın talimatları
          labirentin altında yer almaktadır.
      8:
        image: notes/hoc1_8.jpg
        text: Ortadaki araç kutusu Kızgın Kuş için komutlara sahiptir. Kodunuzu oluşturmak
          için bunları kullanacaksınız.
      9:
        image: notes/hoc1_9.jpg
        text: Sağ taraf, programınızı inşa etmek için araç kutusundan blok sürükleyeceğiniz
          çalışma alanıdır. Blok silmek için, bloğu köşedeki çöp kutusuna sürükleyin.
      10:
        image: notes/hoc1_10.jpg
        text: Her blok bir talimattır. Eğer "ileri taşı" bloğunu çalışma alanına sürükleyip
          "Programı Çalıştır"a basarsanız, kuş labirent üzerinde bir boşluk kadar
          hareket eder.
      11:
        image: notes/hoc1_11.jpg
        text: Birden fazla eylemi gerçekleştirmek için, birden fazla bloğu çalışma
          alanına sürükleyebilir ve birbirlerine ekleyebilirsiniz. Kuş komutları yukarıdan
          aşağıya doğru yapacaktır.
      12:
        image: notes/hoc1_12.jpg
        text: Eğer bir programı çalıştırmak ve düzeltme yapıp tekrar denemek istiyorsanız
          "Sıfırla" düğmesine basın.
      13:
        image: notes/hoc1_13.jpg
        text: Haydi gidip oradaki domuzları alalım!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Merhaba, ben JR! Her yarış arabası takımı, kazanmak için bilgisayar
          mühendislerine ihtiyaç duyar. Onlar arabanın daha hızlı gitmesi için verileri
          analiz eder.
      2:
        image: notes/stage5_2.jpg
        text: Bu bulmacalarda, gidebildikleri yere kadar giden çizgileri çizen sanatçı
          olacaksınız.
      3:
        image: notes/stage5_3.jpg
        text: Bu blok "100 piksel ilerle" diyor. Pikseller, ekranındaki ufacık noktalardır.
      4:
        image: notes/stage5_4.jpg
        text: Bu blok " 90 derece dönün." diyor. Bu senin sanatçını bulmacada "dönüş"
          sayısı kadar döndürecek.
      5:
        image: notes/stage5_5.jpg
        text: Sanatçının ileri veya dönüşler hareket sayısını değiştirmek için bu
          blokların birinde yer alan aşağı oka tıklayın. Bu yeni blokları tanımak
          için onlar ile bol miktarda oynayın.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Merhaba, ben Paola! Bu bulmacalarda sen, arazisini dümdüz yapıp ekinler
          ekmek isteyen bir çiftçisin.
      2:
        image: notes/stage9_2.jpg
        text: Ona çamur yığınlarını kaldırmak ve tüm delikleri doldurmak için yardım
          etmelisin.
      3:
        image: notes/stage9_3.jpg
        text: Yeni bloklar, bir kürek dolusu toprağı yığından alıp deliğe doldurur.
      4:
        image: notes/stage9_4.jpg
        text: Farklı boyutlarda yığın ve delikler olduğu için çiftçiye kaç kürek dolusu
          toprak atması gerektiğini söylemelisin.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Merhabai Ben Katie! Bilgisayar bilimi hakkında en heyecan verici şeylerden
          birisi bilgisayar programının etkileşimli olabilmesidir.
      2:
        image: notes/flappy02.jpg
        text: Her zaman birileri tıkladığında veya bir bilgisayar veya telefonla musluklar
          veya türleri, bu bir OLAY oluşturur ve bir olay meydana geldiğinde ne yapacağını
          karar bazı kod var.
      3:
        image: notes/flappy03.jpg
        text: 'Örneğin sizin bir "farenin tuşuna basıldığında, ses çal" OLAY-TETİKLEYİCİ''niz
          olabilir '
      4:
        image: notes/flappy04.jpg
        text: FlappyBird oyununu hiç duydunuz mu? Olay tetikleyicileri kullanarak
          kendimize özel FlappyBird programı geliştirmeyi öğreneceğiz!
      5:
        image: notes/flappy05.jpg
        text: 'Sürükle bırak yöntemi ile blokları kullanarak program geliştireceksiniz,
          bu bloklar bilgisayar komutlarına tekabül edecek. Esasında bu blokların
          arkasında gerçek kod parçacıkları bulunmaktadır. '
      6:
        image: notes/flappy06.jpg
        text: 'Çalışma alanına göz atarsanız, sizin için doldurulmuş olan bazı yeşil
          bloklar göreceksiniz - bunlar "olay işleyicileri"dir. '
      7:
        image: notes/flappy07.jpg
        text: Fareyi tıkladığınızda kuşun kant ÇIRPMAsını istiyorsanız, olay işleyicisine
          "ÇIRP" bloğunu ekleyerek yapabilirsiniz, bu durumda oyununuzda fare ile
          kuşa tıklandığında kuş kanat çırpma hareketi yapacaktır.
      8:
        image: notes/flappy08.jpg
        text: Bu faliyetin her bulmacasında size yeni yeşil bloklar ile ifade edilen
          yeni tür olayları tanıtacağız ve bu bloklar için siz uygun olan olayları
          belirleyip çalışma alanına yerleşriyor olacaksınız.
      9:
        image: notes/flappy09.jpg
        text: Aşağı açılır menüde içinde buna benzer aşağı işret eden ok gördüğünüzde,
          flappy yere çarptığında çıkarttığı sesi değiştirebileceğiniz anlamına gelmekte.
      10:
        image: notes/flappy10.jpg
        text: |
          Son bulmacada kendi oyununuzu oluşturup arkadaşlarınız ile paylaşabileceksiniz.
          İyi eğlenceler!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Merhaba, ben Mark! Haydi döngüleri öğrenelim. Döngüleri kullanarak,
          bir bilgisayara herhangi bir komut dizisini defalarca tekrar etmesini söyleyebilirsiniz,
          hatta binlerce ve milyarlarca kez.
      2:
        image: notes/hoc2_2.jpg
        text: Bu bulmacada, domuzu almak için kuşu 5 boşluk ileri hareket ettirmek
          istiyoruz.
      3:
        image: notes/hoc2_3.jpg
        text: Bize yardımcı olması için yeni "tekrar" bloğunu kullanabiliriz.
      4:
        image: notes/hoc2_4.jpg
        text: 5 "ilerle" blogunu dışarı sürüklemek yerine...
      5:
        image: notes/hoc2_5.jpg
        text: '"İlerle" blogunu "tekrar" blogunun içine koyabilir ve blogun içine
          kaç kez tekrarlaması gerektiğini gösteren bir sayı yazabiliriz.'
      6:
        image: notes/hoc2_6.jpg
        text: 've bu önemli: "Tekrar" blogunun içine birden fazla komut yerleştirebiliriz.'
      7:
        image: notes/hoc2_7.jpg
        text: Yeni "Tekrar" blogunu kullanmanın keyfini çıkar!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Merhaba, ben Chris . Miami Heat'e katılmadan önce Bilgisayar Bilimleri
          Eğitim için Georgia Tech 'e gittim. Hadi bizim yeni "tekrar et" bloğumuzu
          deneyelim.
      2:
        image: notes/hoc3_2.jpg
        text: Eğer kuşun domuzu alması için gitmesi gereken uzaklığı bilmeseydik?
      3:
        image: notes/hoc3_3.jpg
        text: Eğer, "ilerle" blogunu "kadar tekrarlayın" blogunun içine koyarsak,
          kuş domuzu alana kadar (veya bir duvara çarpana kadar) ilerler.
      4:
        image: notes/hoc3_4.jpg
        text: 'Bu önemli: önceki gibi, "kadar tekrarlayın" blogunun içine birden fazla
          blok yerleştirebiliriz ve bunların tamamı tekrarlanır.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Merhaba, ben Bill! Yeni bir temel kavram öğrenelim: "Eğer" deyimleri.
          Bunlar bilgisayarların nasıl karar aldığını gösterir.'
      2:
        image: notes/hoc4_2.jpg
        text: Sen de "eğer" ifadesini her gün kullanıyorsun. Her sabah dışarı çıkmadan
          önce, EĞER dışarıda yağmur yağıyorsa ceketimi giyinmeliyim, dersin.
      3:
        image: notes/hoc4_3.jpg
        text: Zombiye solda bir yol olup olmadığını kontrol etmesini, ve EĞER solda
          bir yol bulursa o yöne dönmesi gerektiğini söyleyebiliriz.
      4:
        image: notes/hoc4_4.jpg
        text: Bunun için kod yazmak için, "if" blogunu dışarı sürükle ve bir "sola
          dön" blogunu onun içine yerleştir.
      5:
        image: notes/hoc4_5.jpg
        text: Şimdi, eğer bunun üzerine bir  "ilerle" blogu ve hepsinin çevresine
          bir "takrar" blogu koyarsak, zombi her hareket edişinde, solda bir patika
          olup olmadığını kontrol edecek ve dönecek. "Tekrar" komutu her adımda dönüşü
          kontrol etmek için çok önemli.
      6:
        image: notes/hoc4_6.jpg
        text: 'Eğer deyimleri Bilgisayar Biliminde çok önemli. Yazdığım ilk programlardan
          biri Tic Tac Toe oyunu, ve orada şöyle bir Eğer deyimi vardı:  EĞER bir
          kişi kazanmak üzereyse, kazanmasını engellemek üzere o noktanın önünü kes.'
      7:
        image: notes/hoc4_7.jpg
        text: '"if" blogunu kullanarak eğlenin!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Selam, benim adım Saloni. Bilgisayar bilimlerini sağlıksal ve tıbbi
          sorunları çözmeye yardımcı olmak için kullanıyorum. Hadi "if else" bloğu
          hakkında bir şeyler öğrenelim. "if" bloğu gibi görünüyor ama sonunda "else"
          diyen fazladan bir parçası var.
      2:
        image: notes/hoc5_2.jpg
        text: Eğer "yap" diyen noktaya "ilerle" blogu ve "ya da" diyen noktaya da
          "sola dön" blogu yerleştirirsem bu demektir ki zombi iki seçenekten birini
          seçecektir. EĞER önünde yol varsa, zombi ileri hareket edecek, aksi takdirde
          (önünde yol yoksa), zombi sola dönecektir.
      3:
        image: notes/hoc5_3.jpg
        text: '"eğer" bloğunda olduğu gibi, tekrar bloğuna "eğer değilse" bloğu da
          ekleyebiliriz, bu durumda zombi hareket etmeye devam edecek ve "eğer değilse"
          bloğu farklı bir yöne dönüp dönemeceğini kontrol edecek.'
      4:
        image: notes/hoc5_4.jpg
        text: "Şimdi, bu zombileri ait oldukları yere yerleştir!"
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: '"eğer değilse" ifadesi iki şeyin arasında bir karardır. Dostumuz sincap
          Scrat ile "eğer başka" ifadesiniz nasıl kullanabileceğimizi görelim.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Bu blok "if" bloğunun aynısı gibi gözükmektedir fakat "else" diye fazladan
          bir bölüm bulunmaktadır. Eğer "yap" diyen noktaya "ilerle" blogu ve "ya
          da" diyen noktaya da "sola dön" blogu yerleştirirsem bu demektir ki sincap
          Scrat önünde yol varsa ilerleyecek, önünde yol yoksa Scrat sola dönecektir.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Bu bir karar alma eylemidir ve bu karara göre iki eylemden biri uygulanır.
          Ve "Eğer" blokları gibi "eğer değilse" blokları "tekrar" blokları içine
          koyabilirsin.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Ve şimdi sincap Scrat'a o meşe palamudunu alması için yardım edelim!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Merhaba, Ben Brina, Instagram'ın bir mühendisiyim. Kullanmak istediğiniz
          belirli kodları tekrar tekrar yazmak yerine, bunun için sadece bir blok
          kullanabilirsiniz.
      2:
        image: notes/stage13_2.jpg
        text: Fonksiyonları tanımlamayı öğreneceğiz. Fonksiyon tanımları köşesinde
          bir yıldız vardır.  Fonksiyon isimleri üst çizgide yazılıdır.
      3:
        image: notes/stage13_3.jpg
        text: İçeri giden blokların tanımlamaları bize ne yaptıklarını söyler. Yani
          bu işlev tanımında "5 doldurun" denildi ve "tekrar" blok ve "doldurmak"
          blok oluşdu.
      4:
        image: notes/stage13_4.jpg
        text: Tanımlama çalışma alanının üzerindedir, ama çiftçimiz, biz ''5 doldur"
          fonksiyonu bloğunu işlev kategorisinden sürükleyene kadar fonksiyonu çalıştıramayacaktır.
      5:
        image: notes/stage13_5.jpg
        text: Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Selam, ben Makinde! Hadi, "süresince bloğu." hakkında bir şeyler öğrenelim. '
      2:
        image: notes/stage9_6.jpg
        text: '"süresince bloğu" bloğunun içerisine konulanlar üstündeki koşul geçerli
          olduğu sürece tekrarlanmaya devam eder.'
      3:
        image: notes/stage9_7.jpg
        text: "Örnek olarak, eğer çiftçi bir yığının üstünde duruyor ise, altındaki
          yığını SÜRESİNCE birer birer kürekdolusu kaldırmaya devam edecek."
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Selam, ben Trina. Pixar'da çalışıyorum. Shrek dahil bir takım film projelerinde
          görev aldım.
      2:
        image: notes/stage11_2.jpg
        text: Bu bizim yeni "sayaç" döngümüz. Her eylemi tekrar ve tekrar gerçekleştirir,
          sen de bu eylemin her seferinde hafifçe değişmesini sağlayabilirsin.
      3:
        image: notes/stage11_3.jpg
        text: Bu örnekte,"sayaç" döngümüz bize döngü içerisinde "sayacın 50'de 90'
          a kadar 10'ar 10'ar sayacak" oluğunu anlatıyor. "Kare çiz" bloğumuza sahibiz.
          "Değişkenler" bölümünden "sayaç" bloğunu "uzunluk" noktasına sürükleyin.
      4:
        image: notes/stage11_4.jpg
        text: Bu, sanatçımızın 50 pixel kenar uzunluğuna sahip bir kare çizeceği,
          daha sonra buna 10 ekleyerek 60 pixel kenar uzunluğuna sahip bir kare çizeceği
          anlamına geliyor. Daha sonra 90'a ulaşıncaya kadar 10 eklemeye devam edip
          kare çizmeye devam eder. Böylece uzunluğu 50, 60, 70, 80 ve 90 olan karelere
          sahip oluruz.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Selam, ben Janete. Zynga'da mühendisim.
      2:
        image: notes/stage15_2.jpg
        text: Eğer kenar uzunlukları farklı bir grup üçgen çizmek istesek ne olur?
      3:
        image: notes/stage15_3.jpg
        text: Tüm bu kodu elimizle yazabiliriz ya da parametre ile birlikte fonksiyon
          kullanabiliriz.
      4:
        image: notes/stage15_4.jpg
        text: Bunu yapmak için; fonksiyon tanımındaki "draw a triangle" butonuna tıklayın.
          Daha sonra "isim giriniz" bloğunu "girdi" bloğuna sürükleyin.
      5:
        image: notes/stage15_5.jpg
        text: Sonrasında eğer "x" yazan yere "uzunluk" yazar ve "Enter" tuşuna basar
          iseniz uzunluk işlevi için girdi oluşturmuş olursunuz.
      6:
        image: notes/stage15_6.jpg
        text: Daha sonra yıldızın üzerine tıklayın. Şimdi, istediğiniz değişkenler
          kategorisine tıklayın ve "uzunluk" blokunu fonksiyon tanımınızdaki "ilerle"
          blokunun içine sürükleyin. Ve eski numara blokunu sürükleyerek kaldırın.
      7:
        image: notes/stage15_7.jpg
        text: Fonksiyonunuzu parametre ile kullanmak için, fonksiyonlar kategorisine
          tıkla ve "uzunlıkla üçgen çiz" fonksiyonunu sürükle.
      8:
        image: notes/stage15_8.jpg
        text: "Şimdi farklı boyutlarda üçgenler çizmek için matematik bloğunu kullanarak
          farklı numaralar girebilirsin."
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Tebrikler! Çözdüğün son bulmacayla, HERHANGİ bir robota - bir zombi,
          bir kuş, bir mars gezgini ve hatta otomatik bir arabaya- dallara ayrılmayan
          bir labirentte veya herhangi bir uzunluktaki bir tünelde yolunu nasıl bulacağını
          söyleyen kodu yazmış oldun.
      2:
        image: notes/hoc6_2.jpg
        text: Kullanmış olduğun basit temeller deneyimlediğin ve deneyimleyeceğin
          her türlü program ve uygulamanın kalbinde yer alır. Tekrar döngülerini,
          'kadar tekrarla', 'eğer' ve 'eğer değilse' ifadelerini öğrendik.
      3:
        image: notes/hoc6_3.jpg
        text: Eğer kod saatinin ilk dakikalarından hoşlandıysanız, bilgisayar bilimi
          eğitiminize devam etmek için code.org 'u ziyaret edin! 20 saat kursu tamamladığınızda,
          programlamanın temellerine hakim olacaksınız. Telefon uygulamalarını, robot
          talimatlarını ve oyunları yazmayı öğreneceksiniz. Bunlarla da sınırlı değil,
          hayal gücünüz ile sınırlı...
      4:
        image: notes/hoc6_4.jpg
        text: 'Teknoloji yaptığımız her şeyi değiştiriyor ve genç ya da yaşlı olmanız
          hiç fark etmez: programlama keyifli ve yaratıcıdır, herkes öğrenebilir!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Notları gösterme yakında geliyor!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Merhaba, Benim adım Lyndsey. Kendi uygulamalarımı modelliyorum, hareket
          ettiriyorum ve yazıyorum. Onların buzun büyüsünü ve güzelliğini keşfettiği
          gibi kod kullanarak Anna ve Elsa'ya katılalım.
      2:
        image: notes/frozen1_2.jpg
        text: Buzda kaydıkça kar taneleri ve değişik desenler oluşturarak bir kış
          diyarı yaratabilir ve sonra arkadaşlarınla paylaşabilirsin.
      3:
        image: notes/frozen1_3.jpg
        text: Bir saat içerisinde, nasıl kod yazılacağının temellerini öğreneceksiniz.
          Geleneksel programlama yönteminde genellikle metin kullanılır, ama biz Blocky
          kullanacağız. Blocky ile görsel blokları sürükleyip bırakarak programlar
          yazabilirsiniz. Üniversite öğrencileri de bu yöntemle programlamanın temellerini
          öğrenir.
      4:
        image: notes/frozen1_4.jpg
        text: Program, bilgisayara ne yapacağını söyleyen komutlar dizisidir. Elsa'ya
          basit bir çizgi oluşturmakta yardımcı olacak bir program yazalım. Bu yazdığımız
          programı sonra daha karmaşık modeller oluşturmak için kullanacağız.
      5:
        image: notes/frozen1_5.jpg
        text: Ekranın üç ana parçaya bölünmüş haldedir. Soldaki buzlu yüzeyde programını
          çalıştırırsın. Her seviye için gerekli açıklamalar bu yüzeyin hemen altında
          yer alır.
      6:
        image: notes/frozen1_6.jpg
        text: Orta bölümde alet kutusu yer alır ve her bir küp Elsa ve Anna'nın yapabileceği
          şeylerdir.
      7:
        image: notes/frozen1_7.jpg
        text: Ekranın sağında yer alan beyaz alana çalışma alanı deniyor ve programlarımızı
          bu alanda oluşturacağız. Buzdan oluşan nesneyi hareket ettirebilmek için
          "İleriye taşı" bloğunu göreceksiniz.
      8:
        image: notes/frozen1_8.jpg
        text: '"İlerle" küpü diyor ki: "100 piksel ilerle". Eğer "Çalıştır"a basarsak
          ne olur? Elsa ekranda belli bir miktar ileriye gider; evet tam 100 piksel!
          Piksel, bilgisayarınızdaki ya da televizyonunuzdaki görüntüyü oluşturan
          en minik karedir.'
      9:
        image: notes/frozen1_9.jpg
        text: 'Bulmacadaki diğer küp diyor ki: "sağa doğru 90 derece dön". Bu küpü
          kullandığımız zaman Elsa belli bir miktar sağa döner. Elsa''nın ne kadar
          döneceğini değiştirmek için değerlerle biraz oynayabilirsiniz. Açı değeri,
          Elsa''nın önündeki hareket çizgisine göre ölçülür. Yani, bu bir 90 derecedir
          ve bu da bir 120 derece.'
      10:
        image: notes/frozen1_10.jpg
        text: Hatırla, yanındaki oklara tıklayarak piksellerin sayısını ve dereceyi
          değiştirebilirsin.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Merhaba, Ben Paola! Bilgisayarlar tekrarlayan eylemler konusunda gerçekten
          çok iyiler. 10, 20 yada 100 kadar sayabilirsin. Ama bir bilgisayar milyara
          yada trilyona kadar sayabilir. Sıkılmazlar ve sayma işlemi birkaç saniye
          sürer. Sayar, çizer yada tekrarlayan bir şeyi yüzlerce hatta milyarca kez
          yapabilir.
      2:
        image: notes/frozen2_2.jpg
        text: Biz buna programlamada döngü diyoruz. Döngü bir kodunuzun nasıl tekrardan
          tekrar ettiğidir. Bir sonraki puzzle için hedefiniz Anna' nın "Tekrar" bloğu
          ile bir kare oluşturmasına yardımcı olmaktır.
      3:
        image: notes/frozen2_3.jpg
        text: "'Yenile' bloğu, içine koyduğunuz her kod istediğiniz kadar sırasıyla
          tekrarlanır."
      4:
        image: notes/frozen2_4.jpg
        text: Bir kare çizmek için "ilerle" ve "Sağa dön" bloklarını 4 kez kullanabilirsiniz.
          Ama daha kolay şekilde yapmak için bilgisayara "İlerle" ve "Sağa doğru 90
          derece dön ü bir kere söyleyip aynı komutları 4 defa tekrarlamasını söyleyebilirsiniz.
          Bunu yapmak için "İlerle" ve "Sağa dön" bloklarını "Tekrarla?? kez tekrarla"
          bir bloğu içinde koymak gerekir.
      5:
        image: notes/frozen2_5.jpg
        text: Unutmayın, "Tekrar" bloğundaki herşey için sayıyı değiştirebilirsiniz
          ve bloğun içindekiler sayı kadar tekrar edecektir.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Merhaba, ben Chris Bosh. Ben bir profesyonel basketbol oyuncusuyum ve
          üniversitemde kodlama ile uğraşıyorum.
      2:
        image: notes/frozen3_2.jpg
        text: Bilgisayar Biliminde en önemli kavramlarından biri yeni komut tanımlamadır.
          Çoğu programlama dillerin yalnızca yaklaşık 100 komutu vardır. Ve gerçekten,
          işin sırrı bu yapı taşları komutların yanı sıra kendi yeni komutlarını tanımlamadır.
      3:
        image: notes/frozen3_3.jpg
        text: Bilgisayara bir eylemi nasıl yapacağını komutlar kullanarak öğrettin
          vede bu eyleme kolay hatırlanır bir isim verin. Bu isim daha sonra kolayca
          aynı eylemi gerçekleştirmek için kullanılabilir. Bu şekilde kendi komutunu
          tanımlamaya "fonksiyon" denir.
      4:
        image: notes/frozen3_4.jpg
        text: Merhaba ben Jess, bloklarla programlama yaparken fonksiyonları kullanarak
          aynı eylemi birçok kere yapabilirsiniz. Örneğin kare yapan bir fonksiyon
          yazdınız.
      5:
        image: notes/frozen3_5.jpg
        text: 'Bunu "bir kare oluşturun." adında bir fonksiyona tanımlayabilirsiniz '
      6:
        image: notes/frozen3_6.jpg
        text: "Şimdi kare yapma işlemini birçok kere yapabileceğiniz yeni bir blok
          oluşturdunuz."
      7:
        image: notes/frozen3_7.jpg
        text: Basit şekiller çok daha karmaşık desenleri oluşturmak için kullanılabilir.
          Sonraki Bulmacada, çember yapmak için yazdığınız fonksiyon size farklı boyutlarda
          çemberler çizmeniz için kullanabilirsiniz. Elsanın karda karmaşık ve güzel
          desenler oluşturması için bu fonksiyonu için kullanabilirsiniz?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Play Lab'ı kullanarak oyunlar yapacağız. İyi oyunların hikayesi vardır
          ve her hikayenin de aktörleri vardır. Cadı, uzaylı, hayvan gibi aktörler
          yaratıp onların ilerlemesini ve birbiri ile iletişime geçmelerini sağlayacağız.
          Bu öğreticinin sonunda sıfırdan bir oyun yaratıp arkadaşlarımızla paylaşacağız.
      2:
        image: notes/playlab_intro_2.png
        text: Ekran 3 ana bölüme ayrılmıştır. Sol taraf programınızın çalıştırılacağı
          oyun alanıdır. Her düzey için talimatlar aşağıda yazılmıştır.
      3:
        image: notes/playlab_intro_3.png
        text: |
          Ortadaki alan araç kutusu alanıdır. Bu alandaki her bir blok bir parça koda karşılık gelir.
          Sağdaki boş alan çalışma alanıdır. Bu alanda kod yazacaksınız.
      4:
        image: notes/playlab_intro_4.png
        text: Kendi ekleyeceğiniz blokları "Çalıştığı zaman" bloğuna bağlamak gerekir.
          Blokları sürükleyip sarı çizgi çıkana kadar birbirine yaklaştırarak bağlayabilirsiniz.
      5:
        image: notes/playlab_intro_5.png
        text: Bu ilk bulmacada bizim oyuncu bir penguen ve biz ona "Merhaba!" dedirtmek
          istiyoruz. Bunun içim Söyle bloğunu çekerek "Çalıştığı Zaman" bloğuna birleştireceğiz.
          sonra Söyle bloğuna "Merhaba." yazacağız. Ayrıca Sağa hareket, sola hareket
          bloklarını kullanarak pengueni hareket ettirebilirsiniz. Blokları yerleştirdikten
          sonra Çalıştır düğmesine basınız.
      6:
        image: notes/playlab_intro_6.png
        text: Haydi başla ve sonunda kendi oyununu yarat. Oyununda farklı oyuncular
          iletişim kurabilir, mutlu yada üzgün olabilir, puan kazanabilir, ateş topu
          atabilir ve hatta birbirini yok edebilir. Bunların hepsi senin elinde istediğin
          gibi oyununu yapabilirsin.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Şimdi oyun programcılarının her zaman kullandığı "Olay" kavramını öğreneceğiz.
          Olay  bir şey olduğunda bunu algılayıp bu eylemle ilgili eylemi gerçekleştir.
      2:
        image: notes/playlab_events_2.png
        text: Olay;  fare tıklama, yön tuşuna basma yada ekrana tıklama gibi aktivitelerdir.
      3:
        image: notes/playlab_events_3.png
        text: Burada, oyuncu uzay gemisine tıkladığında "Dünyalı,Seni Selamlıyorum!"
          diyecek. "Tıklandığında" butonunu kullanacağız ve "De" butonunu ona ekleyeceğiz.
          Oyuncu uzay robot'una tıkladığında "Tıklandığında" butonuna bağlı olan her
          şey çalışacak. Peki, senin uzaylın ne diyor?
      4:
        image: notes/playlab_events_4.png
        text: Ayrıca "zaman okları" parçaları var. Eğer "hareket" parçalarını bunlara
          bağlarsanız, karakterinizi yukarı, aşağı, sola ve sağa hareket ettirmeye
          başlayabilirsiniz!. Git gide oyununuz daha çok interaktif oluyor.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Bu "sonsuza dek tekrarla" bloğu. Bu bloktaki komutlar oyun sonuna dek
          tekrar edecek.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Eğer karakterimizin bir şey yapmasına gerek kalmadan tekrar eden işleri
          yapmasını istiyorsak, bloklarımızı "Sonsuz Tekrar" bloğunun içine koyarız.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Sonraki bulmacada, hedefimiz büyücünün krallığın sınırlarında sürekli
          sol ve sağa giderek devriye gezmesidir. Tekrar komutlarının nasıl çalıştığını
          öğrenmek, senin kendi oyununu yaparken bir ton zaman kazanmanı sağlayacak.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Bunlar senin çizim blokların. Doğru olanı kullanarak sanatçıyı ilerlet
          ve gri çizgiyi çiz.
      2:
        image: notes/C1_artist_intro_2.png
        text: Bunlar atla blokları. Bunları kullandığın zaman sanatçı ilerler fakat
          çizmez. Bu bkokları bir sonraki gri çizgiye ulaşmak için kullan.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Arılar süper havalı değil mi? Bir sonraki bulmacada amacın arıyı çiçeklere
          ilerletip nektarları toplamak ve peteklere ilerleyip bal yapmaktır. "Değer
          Al" ve "Yap" bloklarını kullanacaksın.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Her çiçek farklı sayıda nektar içerir: 1, 2 3 yada daha fazla. Kırmızı
          çiçekte ne kadar nektar olduğunu alt köşesinde yazmaktadır. Bir sonraki
          adıma ilerlemeden bütün nektarları topla. Benzer şekilde her bir petek 1,
          2, 3 yada daha fazla bal alabilir. Peteklere alabileceği kadar bal koyun.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Eğer bütün nektarları toplarsan ve bütün balları peteklere yaparsan
          başarılı olmuş olursun ve bir sonraki aşamaya geçersin. akis takdirde bulmacayı
          tekrar deneyin. Biraz takılarak "arı" programcı olmanın nasıl bir şey olduğunu
          görün!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: 'Döngü aktivitelerin tekrarlanmasıdır.  '
      2:
        image: notes/C1_bee_loops_2.png
        text: 'Bu seviyede arının üç nektar toplamasını istiyoruz. üç tane "Nektar
          Al" bloğu kullanmak yerine "tekrarla" bloğu kullanıp üç nektar alacağız.
          İpucu: "Çalıştır" tuşuna baş ve doğru yapılmış mı gör. Süperr!'
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Bu derse büyük olay denir. Bunda programlarımızı nasıl denetleyeceğimizi
          ve aslında bir programın çalışma şeklini bir düğmeye basarak veya bir fare
          tıklaması gibi olayları kullanarak anında değiştirebileceğimizi göreceğiz.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Bu ders için bir kağıttan uzaktan kumanda ile kontrol edileceksin. Sanki
          gerçek zamanlı bir video oyunu gibi.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Bir olay bir şeyin olmasını sağlayan eylemdir. Bir butona tıkladığında
          bir internet sitesinin yüklenmesi gibi. Bu bir olaydır. Kaydırmak için tabletine
          dokunman da bir olaydır. Olaylar kullanıcı programa istediği zaman veya
          ihtiyacı olduğunda müdahale etmesini sağlar.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Karşılık vermemiz gereken olaylar vardır. Aç hissettiğimiz zaman buzdolabına
          gideriz. Bir postacının geldiğini duyduğumuzda ve mektupları posta kutusuna
          koyduğunda gider ve mektuplarımızı alırız. Bu olaylar aynı bir butona basmak
          veya bir oyun kolunu hareket ettirmek gibidir. Bu gibi olaylar bizim bir
          şeyler yapmamızı tetikler.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: Video oyunlarında, "Güncelle" adlı bir olay bulunur ve bu olay saniye
          30 ya da 60 kez gerçekleşir. Video oyun programcıları için bu butonlardan
          veya oyun kollarından neredeyse daha önemlidir.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: Ana Karşılaşma için izliyoruz o "Güncelleştirme" için doğrulama oluyor.
          Ve biz doğrulama için joystick'i denetliyoruz. Yani biz, "Oh, var birisi
          düğmeye bu çerçeve? Evet ya da Hayır?" Olaylar, olmadan oyuncu hareket ettiremedim,
          seni atlamak olamaz, ne olup bittiğini kontrol etmek mümkün değil. Video
          oyunun da bir şey hareketlendirmek mümkün olmaz.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Kum heykel bu başarısızlık öğrenmem lazım programın bir parçasıdır.
          Ama sen devam edersen, hiçbir şey alamayacaksın ama daha iyi ve daha heyecanlı
          olmalısın. Oyunun adı kalıcıdır. Kalıcılığını seveceksin.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Bu ders temel inşa etme olarak adlandırılır. Bu derste, biz gerçekten
          zor olacak görevlerde çalışacağız. Siz bu bardaklardan en azından birinin
          uzunluğu kadar olan yapının nasıl yapılacağını ve bu yapı bir kitabın ağırlığını
          kaldıracak kadar yeterince güçlü olması gerektiğini anlayacaksınız.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Eserimizin istenilen sonucu vermediği zamanlar olabilir. Hayal kırıklığına
          uğradığımız ve pes etmek istediğimiz zamanlar olabilir. Böyle zamanlar çok
          fazla olabilir. Ama biz çalışmaya devam edersek ve elimizden gelenin en
          iyisini tekrar tekrar yaparsak, o zaman biz çok geçmeden karşılığını alacağımızdan
          eminiz.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistence is all about hanging in there when you really want to give
          up. If you want to create something new and different, there's going to
          be a lot of failures along the way.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: The trick to persistence is choosing to keep on going and learn from
          your failures instead of quitting because you're frustrated. Frustration
          actually just means there's something wonderful around the corner. So don't
          quit before you get to it. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Merhaba, benim ismim Miral Kotb ve ben iluzyonun kurucusuyum. Benim
          çalıstığım işte, yaptığımız danslarda ve programlarda ışıklı kıyafetler
          kullanıyoruz. Ve bunlar döngüler! Döngüler üzerinde tekrarlandıkca harekete
          geçiyor.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Birşeyi birçok kez yapınca "döngü" yapmış oluyoruz. Aynı benim bu çemberi
          çevirmek için yaptığım gibi. Bu bir döngü bu bir döngü Ve bu bir döngü.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Bugün biz bir dans partisi yapacağız. Döngü kullanarak dans edelim.
          Dans ederek döngüyü öğreneceğiz. Birkaç kolay dans adımı öğrenip onu tekrarlayarak
          dan edeceğiz.
      4:
        image: notes/C1_getting_loopy_4.png
        text: "İşte öğrenmen gereken adımlar. El çırp. Ellerini kafanın arkasına koy.
          Ellerini beline koy. Sol elini kaldır. Sağ elini kaldır. Çok kolay değil
          mi? Döngü kullanarak dans adımlarını azaltabileceğinizi göreceksiniz."
      5:
        image: notes/C1_getting_loopy_5.png
        text: Aslında dans sırasında döngüleri kullanırız. Dansçılar bilgisayar giyiyor.
          Hepsi aynı ağda. Işığı aynı dansçılar üzerinde defalarca döngüleyebilirim.
          döngüler bilgisayar mühendisliğinin en önemli kavramları çünkü yaptığımız
          işi kısaltırlar.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Bu derse mutlu haritalar denir. Bugün küçük tüylü arkadaşımız "Florb"
          un meyveyi almasını sağlayacağız.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Make your Flurb go to your fruit. To do this you'll need to figure out
          which way the Flurb needs to go and direct her with arrows. In order for
          the Flurb to get to the apple, what direction does the Flurb have to go?
          Line to make it go up.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Orada almak için gitmek zorunda olduğu yönü daire içine al.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Create your algorithm by gluing arrows next to the map that you're trying
          to solve. The second one it's the same but it's going down.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Bu kağıt ile programlama gibi. Ve bu kadar!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Hata ayıklama işlemi sorunları bulma ve giderme işlemidir. Sorunlarda
          hata ayıklamak için birçok yol vardır. En kolay adım adım ilerlemek ve hatalı
          yere kadar gelmektir. Burada ters parende yapmaya yapmaya çalışıyorum ama
          düşüp duruyorum.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Ben her bölümü adım adım yürüdüm ve nerede hatam olduğunu anladım. Denge
          aletinin üstüne doğru ellerimi doğru koymamıştım. Bu yüzden yeni el pozisyonu
          ile kiriş üzerindeki başka bir ters parende denedim ve anladım. Ters parendemdeki
          hatamı ayıkladığıma (bulup düzelttiğime) gerçekten sevindim.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Hata ayıklamayı öğrenmek için sahnede hazır bloklarla başlıyoruz. Ama
          bu blokların bizi hedefe ulaştırmadığını fark edeceksin. Çözüm üzerinde
          hata ayıklayarak düzelteceksin. Nerede hata yapılmış. Batıya doğru bir blok
          daha ilerlemen gerektiğini fark edeceksin.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Bir B (batı) bloğu daha ekleyerek hatayı düzelt. Evet öyle!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Bu bulmacada Bu bulmacada kızgın kuşu domuzcuğa götür. Bulmacaya bak
          ve hangi yöne gideceğine karar ver.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Bloklar üzerinde araç kutusundan çalışma alanına sürüklemen gerekir.
          Çalıştığı zaman bloğunun antında olmasına dikkat et. Doğru olduğunu düşünüyorsan
          "çalıştır" a tıklayın ve kızgın kuşun domuzcuğa gittiğini görün.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Bilgisayarın iyi olduğu şeylerden birisi aynı komutları tekrarlamasıdır.
          İnsan olarak aynı şeyleri yapmaktan sıkılabilirsin. Fakat bilgisayar aynı
          işlemi milyonlarca defa yapar ve sıkılmaz ve gayet güzel yapar.
      2:
        image: notes/C1_maze_loops_2.png
        text: "Örneğin Eğer Facebooktaki herkese doğum günü mesajı atmak istediğimde
          herkese ayrı mesaj yazsam yıllarca sürer. Fakat sadece birkaç kod satırıyla
          Facebooktaki herkese mesaj atıp iyiki doğdun dileklerimi iletebiliyorum."
      3:
        image: notes/C1_maze_loops_3.png
        text: Kuşu domuzcuğa götürmek için... üç tane kuzeye git bloğunu kullanmak
          yerine "Tekrarla" bloğunu kullanacaksın. Tekrarla bloğu çalışma alanına
          sürükle ve 3 yaz. Sonra bloğun içine (K) kuzeye git bloğu ekle. Çalıştır
          ve doğru yapmışmısın gör. Tebrikler!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: This lesson is called move it, move it. Together we're going to write
          a program to get our friends from the starting with the compass rose to
          the smiley face goal.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Ama gülen yüz aşağı doğru ve oraya nasıl gidileceğini bilen sadece bir
          kişi. Bu programı başltalım.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: A program is an algorithm that has been coded into something that can
          be run by a machine. Most of us think of a program as something that we
          write for a computer. Programs are really good for that but they're also
          helpful in other places. You can make your own game or even program a robot
          to do things for you.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Benim adım Jeremiah. Merhaba! Ben yedi yaşındayım. Annemin bilgisayarında
          oyun oynamayı seviyorum ama her zaman önce izin alırım. "Anne, Bilgisayarına
          geçebilir miyim? Tabii ki tatlım!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: 'Annemin bilgisayarını seviyorum çünkü internete girebiliyorum. İnternet
          senin çevren gibidir. Hoş yerleri ziyaret edebilir, ailen ve arkadaşların
          ile konuşabilir ve bir çok şey öğrenebilirsin. '
      3:
        image: notes/C1_going_places_safely_3.png
        text: Dün, hayvanat bahçesini ziyaret ettim. Bebek zebra gördüm. Ben onun
          resmini çektim. Çizgilerinin rengini değiştirdim ve sonra şapka koydum.
          Sonrada tuhaf hayvanlar koleksiyonuma ekledim. Harika! Daha sonra çok çok
          uzak bir yere gittim. Kenyayı ziyaret ettim. Afrika'da bir ülkedir. Orada
          Zebralar sürü olarak yaşıyor.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Bazen internette tanıdığım insanlarla konuşurum, başka eyalette yaşayan
          büyük annem gibi. Mehaba büyükanne! Büyükannem şimdi doğum günüm için göndereceği
          kurabiyelerden yapıyor. ''Lezzetli, İnternet keşke smelloramaya sahip olsaydı!''
          İnternette farklı insanlarla konuşabilirim, kuzenim gibi ama sadece tanıdığım
          insanlarla konuşurum.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score!
          I also like to draw and create new things and share it with my friends.
          Cool! Sometimes I visit websites where I learn new things but I always stick
          to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: "İnternet süper eğlenceli bir yer. Mahallede karşıdan karşıya geçerken
          olduğu gibi, ayrıca çevrimiçi olduğun zamanda çok dikkatli olmalısın. Burada
          hatırlaman için üç kural. Kural 1: Her zaman ilk başta anne babana sor.
          Kural 2: Sadece tanıdığın kişilerle konuş. Kural 3: Senin sadece doğru olan
          yerlerde kal."
      7:
        image: notes/C1_going_places_safely_7.png
        text: Vay canına! Bu çok eğlenceliydi! Şimdi yemek vakti. Oturumu kapatın.
          Sonraki ziyaretinizi görmek için sabırsızlanıyorum.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Bugün eşli programlamayı öğreneceğiz. Eşli programlamada takım halinde
          çalışıyorsunuz. Neden bir bilgisayarı iki kişi kullanıyor? Çünkü iki kafa
          bir kafadan iyidir. Eşli programlamada takım arkadaşınızla oturup aynı proje
          üzerinde çalışacaksınız.
      2:
        image: notes/C1_pair_programming_2.png
        text: Eşli programlamada bir kişi sürücü diğer kişi yön bulucudur. Aynı araba
          kullanır gibi. Sürücü ekranın karşısına geçer ve kodu yazar diğer kişide
          ne yazılacağına yardım eder. Yön bulucu sürücünün sorularına cevap verir
          ve yanlışlık gördüğünde uyarır.
      3:
        image: notes/C1_pair_programming_3.png
        text: "İletişim eşli programlamanın temelidir. Aşağılamak yasak, saygılı olunmalı,
          patronluk taslama. Siz ve takım arkadaşınız devamlı konuşmalı.  Sürücü pozisyonunda
          olan kişi ne yaptığını açıklamalı. Yön bulucu ise ne yapılacağını önerir."
      4:
        image: notes/C1_pair_programming_4.png
        text: Yön bulucu büyük resmi düşünürken sürücü detaylara konsantre olmalı.
          Her iki rolde önemli. Eşli programlama takım olarak iş yapma yöntemidir.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: This lesson is called planting a seed and it's going to help us understand
          algorithms. Algorithms are specific instructions that explain the order
          in which to do something. Even everyday things like eating breakfast or
          brushing your teeth are algorithms that require small steps to get a job
          done.
      2:
        image: notes/C1_planting_seed_2.png
        text: Bilgisayarlar gerçekten akıllı olabilirler fakat sadece adım adım ne
          söylemek istediğini tam anlamıyla ona söylersen seni anlayabilirler. Algoritmalar
          hakkında harika şey eğer sırayla talimatları uyarsan zamanın ötesinde nasıl
          yapıldığını bilmediğin bir şeyi yapabilirsin. Tıpkı tarife uymak gibi.
      3:
        image: notes/C1_planting_seed_3.png
        text: Today we're going to plant our own seeds using an algorithm. Create
          your own algorithm by cutting apart the pictures. Select the pictures that
          show steps in planting a seed and arrange those pictures in the correct
          order.
      4:
        image: notes/C1_planting_seed_4.png
        text: Now, it's time for you to see if your algorithm works. Follow the steps
          in the algorithm very carefully. Are they in the correct order? Did you
          succeed in planting a seed by following the algorithm? It's like programming
          with pictures!
      5:
        image: notes/C1_planting_seed_5.png
        text: When we want to make chocolate, there are many big steps to that process
          and each of those big steps has a set of smaller steps and there are different
          recipes or algorithms depending on how we want the chocolate to taste. Each
          step is important, even the small ones, so that without one step, the rest
          of them cannot be completed. Creating algorithms that others can understand
          is really important. That's why each step has to be written down so that
          no matter who does it, the result is the same.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your
          story will have actors and you will be able to make these actors talk and
          interact with each other. Start thinking of what kind of story you want
          to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: Kediler her zaman köpeklerden korkarlar. Kedi köpeğin iyi olmaya çalıştığını
          fark ettiğinde ne olacak? Çalıştığı zaman bloğu her şeyi başlatır. Hareket
          et bloğu karakteri ilerletir. "Söyle" bloğu karakterin sizin yazdığınız
          şeyi söylemesini sağlar.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: '"Ne zaman çarpışırsa" bloğu diğer bloklarla birleşebilir.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Köpeğin gelik "Hi" (merhaba) demesini sağlıyorum. Fakat sonra kedi korkuyor
          ve kaçıyor. "Ahh". Daha fazla zaman olsaydı mutlu sonla bitebilirdi. Son!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Bu arının heceleme çalışmasıdır. Bulmaca parçalarını kullanarak arıyı
          ilerlet. İlerledikçe kelimenin harflerini toplar.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Kutuda verilen kelimenin harfleri üzerinden gidebilir misin? Dikkatli
          ol yanlış yöne ilerlemen yanlış harfleri eklemene sebep olacaktır.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Bilgisayarın iyi olduğu şeylerden birisi aynı komutları tekrarlamasıdır.
          İnsan olarak aynı şeyleri yapmaktan sıkılabilirsin. Fakat bilgisayar aynı
          işlemi milyonlarca defa yapar ve sıkılmaz ve gayet güzel yapar.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: "Örneğin Eğer Facebooktaki herkese doğum günü mesajı atmak istediğimde
          herkese ayrı mesaj yazsam yıllarca sürer. Fakat sadece birkaç kod satırıyla
          Facebooktaki herkese mesaj atıp iyiki doğdun dileklerimi iletebiliyorum."
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: Bu örnekte amacın kızgın kuşu domuzcuğa götürmektir. Şimdi tekrarla
          bloğu kullanarak daha kolayca yazacağız. Aynı işi 5 defa ilerle komutuyla
          da yapabilirsin yada ilerleyip bir defa yazıp 5 defa tekrarlamasını söyleyebilirsin.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Bunu yapmak için ilerle bloğunu tekrarla bloğu içine sürükle ve kaç
          kez yapacağını yani ne kadar ilerleyeceğini yaz.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Tekrarla bloğu içine istediğiniz kadar komut ekleyebilirsiniz. Bu örnekte
          ilerle ve sola dön komutlarını 5 defa yapmasını sağlar. İyi eğlenceler!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: 'Ekibinde arabanın bilgilerini toplayan ve yazdığı programlarla aracın
          performansını nasıl geliştireceğini söyleyen bir bilgisayar mühendisi yoksa,
          yarışmada  ön elemeden bile geçemezsin. '
      2:
        image: notes/C2_artist_intro_2.png
        text: Bu bulmacada kalem kullanarak farklı şekiller çizen bir aktör olacaksın.
          Aktör ne yaparsa arkasında bir çizgi bırakır.
      3:
        image: notes/C2_artist_intro_3.png
        text: Tuvalde ilerlemek için "ileriye" bloğu kullanacaksın. Buradaki blok
          100 piksel ilerlemeni sağlıyor. Çalıştırdığımız zaman ne oluyor? Aktör 100
          piksel ilerliyor. Piksel demek ekrandaki minik kare noktalar demektir.
      4:
        image: notes/C2_artist_intro_4.png
        text: Bulmacadaki öteki blok 90 derece sağa dönmeni söylüyor. Artistin ne
          kadar döneceğine sen karar verebilirsin.
      5:
        image: notes/C2_artist_intro_5.png
        text: Bu da 120 derece döner. İlgili kısma tıklayarak piksel uzunluğunu değiştirebilirsin
          ve ne kadar döneceğini belirleye bilirsin!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Bu eğer koşul bloğu. Eğer nektar yada bal bir değerden büyükse, eşitse
          yada küçükse bir şey yap.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Bu ne kadar nektar yada bal olduğunu bilmiyorsan faydalı olur. soru
          işareti bilinmediğini gösteriyor.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: Bu örnekte mor çiçekte Eğer (IF) sıfırdan çok nektar varsa nektar al
          diyeceğiz. Bu arıya nektar olduğu sürece nektar almasını söylüyor. Da daaa!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Bu ikili bilezik dersidir. İsmimizin baş harflerini bir bileziğe kodlayacağız
          ve arkadaşlarımıza göstereceğiz!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options.
          Sometimes people think of this as only 1s and 0s. But you can represent
          binary with combinations of on or off, up and down, in and out or really
          any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hi, I'm Orion and I program robots here at Play-im. All computer and
          robot brains at their most fundamental level are little electronic gates.
          When the gate is open, electricity can flow through and when it's closed,
          electricity can't.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: An example of binary on the robot is the robot's eyes. The robot's eyes
          are LEDs and those are lights that are either on or off. It's a binary system,
          one or the other. We can use the lights to represent binary numbers. If
          we have a set of robots, we can say that the first robot is the 1s place
          and the second robot is the 2s place, the third robot is the 4s place and
          so on. That's how you represent a binary number. The robots will do it with
          their binary eyes and count it out for you.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: 'Bu derse kartlarla koşullar denir. Hergün duyfuğunuz veya gördüğünüz
          şeylere göre karar verirsiniz. '
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: I want to walk to the park but first I have to decide whether I should
          bring an umbrella or not. So I look out the window. If it's cloudy, I'm
          going to take my umbrella. Else, I'll take some sunglasses. I think I'd
          better take the umbrella. What I see and hear determines what I take to
          the park.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Conditionals are used in games too. Today we're going to practice using
          conditionals with a card game. In this game, the card that I draw determines
          what my friends are going to do. If I draw a seven, everyone claps. Else,
          everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals.
          Give it a try! Conditionals are what make computers seem smart. A computer
          program that includes conditionals can react to the user and change its
          course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Think about your favorite video game. Do you earn more points for some
          actions than you do for others? This occurs because the computer is using
          conditionals. It's the way a computer makes a decision. How about, if you
          hit the target, you earn ten points. Else, you lose three. When you know
          how conditionals work, you can create all kinds of exciting games.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: "Çalışma alanında hazır bazı bloklar var. Fakat bir şeyler yanlış."
      2:
        image: notes/C2_artist_debugging_2.png
        text: Yavaşlatıp adım adım ilerleyerek bu kodda hata ayıklayalım.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Aaa hata var! Kedinin bıyıkları 75 piksel olmalı 25 değil.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Programlardan hata ayıklamayı hiç duydunuz mu? Neyin çalışmadığını bulmanıza
          denir. Hata ayıklarken önce hatayı bulursunuz sonra düzeltirsiniz.
      2:
        image: notes/C2_bee_debugging_2.png
        text: "Çalışma alanında zaten bazı bloklar var. Adım adım ilerleyeceğiz ve
          blokların üzerinden geçeceğiz. Böylece her bir bloğun yapması gerekeni yapıp
          yapmadığını göreceğiz ve gerekirse düzelteceğiz."
      3:
        image: notes/C2_bee_debugging_3.png
        text: Görünüşe göre bizim problemimiz burada! İlerle bloğundan bir tane daha
          lazım. Adım düğmesi hatayı bulmamıza yardım eder böylelikle hatayı düzeltiriz.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: On your head you hold your hat and your smarts will tell you where you're
          at and to think about the zoo, and to nod hello to you and you! Use your
          head when you're online to keep what's yours inside your mind and to know
          how to be safe, how to give your life some private space! From your head
          down to your toes, pause, think about it. From your feet up to your nose,
          pause and think online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Use your heart to grow and grow, and to give yourself a healthy glow,
          and to make a valentine, tell someone that you'll be mine! Use your heart
          when you're online, feel what's right and always kind, and show your friends
          respect, to be fair and nice on the internet. From your head down to your
          toes, pause, think about it. From your feet up to your nose, pause and think
          online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Use your arms to hug your pet, to keep your clothes from getting wet,
          and to wear your favorite sleeves and to help you fly and make believe.
          Use your arms when you're online, to take break and balance time and leave
          your tech behind and to find yourself a tree to climb. From your head down
          to your toes, pause, think about it. From your feet up to your nose, pause
          and think online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use your gut to store your food, and to listen to its growling mood,
          to make a belly flop, and to feel the gas in soda pop. Use your gut when
          you're online, to know to watch for certain signs, and to let it guide the
          way and tell you when it's not ok. From your head down to your toes, pause,
          think about it. From your feet up to your nose, pause and think online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: So think with your head, and feel with your heart, balance with your
          arms, listen to your gut, online. Use your legs to run and kick, and to
          jump and bounce on a pogo stick, and to dance around the block, and to skip
          along in your smelly socks. Use your legs when you're online, to stand up
          to bullies who cross the line, and remember to stand tall, be nice to creatures
          great and small.
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet
          up to your nose, pause and think online! So think with your head, and feel
          with your heart, balance with your arms, listen to your gut, stand up with
          your legs. From your head down to your toes, pause, think about it. From
          your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched,
          copied, shared, broadcast and is permanent. What kind of digital footprint
          are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: This lesson is called "Graph Paper Programming" and it's all about algorithms.
          Today we're going to learn how to write programs that show each other how
          to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: Bu, algoritma oluşturma görevini tamamlamak için talimat listesi. Verilen
          işlemleri takip edin. Algoritmaların nasıl oluşturulacağını anlamanız için
          işlemler yardım edecektir.
      3:
        image: notes/C2_graph_paper_3.png
        text: Bilgisayar için bir algoritma yazıyorsanız ilk basamaktaki talimati
          yerine getirin ve aşağıdaki talimata geçin, son talimatıda uyguladığınızda
          bitmiş olacak.
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can
          recreate that same piece again, or I can teach someone else to do it. Put
          the glass in the kiln, fuse it together, follow the rest of the instructions
          to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Burada tekrarla bloğu kullanarak programlayacağız böylece daha az blok
          kullanacağız. Sahnede başlamamız için bazı bloklar bulunmakta.
      2:
        image: notes/C2_artist_loops_2.png
        text: Bu blokları dört defa kullanarak kareyi çizmek için önce tekrarla bloğunu
          sürükleyelim. Sonra Mevcut blokları tekrarla bloğu içine koyalım. Sanatçı
          4 defa aynı adımları tekrarlayarak kareyi çizecek.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Döngü tekrarlama işlemidir. Petekleri kontrol etmek için her peteği
          çıkartıyorum, inceliyorum ve sonrada tekrar yerine koyuyorum. Aynı işlemi
          tekrar tekrar yapıyorum. Döngü demek aynı işlemi tekrarlayarak birçok kere
          yapmaktır.
      2:
        image: notes/C2_bee_loops_2.png
        text: Bu "tekrarla" bloğu. Bu bloğun içine koyduğunuz işlemleri Tekrarla bloğuna
          yazdığınız sayı kadar bilgisayar tekrarlar. Örneğin, ilerle ve nektar al
          bloklarını 3 defa sürükleyip kodu yazacağımıza, sadece birer tanesini sürükleyip
          aynı işlemi üç kere tekrarlayacağız. İşleri kolaylaştırıyor!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Normalde kodlama yazı yazarak yapılıyor fakat biz burada blokları kullanacağız.
          Görsel olarak blokları sürükleyip birbirine bağlayarak kod yazacaksınız.
          Alt tarafta kod yazmış oluyoruz. Başlangıç olarak Kızgın kuşun ilerleyip
          yumurtasını çalan kötü domuzcuğa ulaşmasını sağlayacağız.
      2:
        image: notes/C2_maze_intro_2.png
        text: "Çalışma alanı üç bölgeye ayrılmıştır. Soldaki kodun çalışacağı labirenttir.
          Ne istendiğiyle ilgili bilgiler labirentin altındadır. Ortadaki bölge araç
          kutusudur. Buradaki her komuta kuş anlar ve yapar. Sağdaki boş bölge çalışma
          alanı olarak söylenir ve buraya programını yazarsın."
      3:
        image: notes/C2_maze_intro_3.png
        text: "İlerle bloğunu çalışma alanına sürükleyip Çalıştır düğmesine basınca
          ne olur? Kuş bir adım ilerler. Bir adım daha ilerlemesi için ne yapmalıyız?
          Bir ilerle bloğu daha ekleyebilirim."
      4:
        image: notes/C2_maze_intro_4.png
        text: Sağa dön bloğunu çalışma alanına sürükleyip ilerle bloğunu antına kadar
          getireceğim ve sarı okun gözükene kadar ilerleteceğim. bıraktığımda iki
          blok birleşmiş olur. Çalıştır tuşuna tekrar basacağım. Kuş programdaki adımları
          üstten alta doğru sırayla yapacak.
      5:
        image: notes/C2_maze_intro_5.png
        text: Bir bloğu silmek isterseniz sürükleyin ve çöp kutusuna bırakın. Çalıştır
          tuşu ile çalıştırdıktan sonra yeniden başla tuşu ile tekrar başlayabilirsin.
          Şimdi domuzcuğu yakalayalım!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Bu derse gerçek hayat algoritmaları denir. Algoritmalar insanlar her
          gün yaptığı şeyi açıklar. Kurabiye tarifleri ve kuş yuvası oluşturmak için
          yapılması gerekenler birer algoritmadır.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Today we're gonna make, create, and test an algorithm for a paper airplane.
          But first, we need to break this big project into easy to follow small steps.
          For making a paper airplane, we need to decide what steps to take and in
          what order to take them.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: You'll create your algorithm by first cutting apart the pictures. Next,
          you'll select the 6 pictures that show the steps needed to make a paper
          airplane and arrange those pictures in the correct order. After you have
          everything in order, you will trade algorithms with another student team
          to test out the algorithm to see if the algorithm works. A well designed
          algorithm is super important to making the best paper airplane.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: When we want to make chocolate, there are many big steps to that process.
          And each of those big steps has its own set of smaller steps. And there
          are different recipes, or algorithms, depending on how we want the chocolate
          to taste. Each step is important, even the small ones. So without one step,
          the rest of them cannot be completed. Creating algorithms that others can
          understand is really important. That's why each step has to be written down,
          so no matter who does it, the result is the same.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: "Şimdiye kadar animasyon yada hikaye yaptığında her çalıştırdığında
          aynı şeyi yapıyordu. Şimdi etkileşimli bir oyun yapabilirsiniz."
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Denemek için bazı yeni bloklar var. "Oka basıldığında" ve "hareket et"
          blokları var. Bu blokları kullanarak ok tuşları ile oyuncuyu hareket ettirebilirsiniz.
          Ayrıca aktörler çarpıştığında yada tıklandığında blokları var. İyi eğlenceler!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Today we're going to do relay programming. It's all about programming
          under pressure and debugging the mistakes that sometimes happen when you
          work really quickly or in teams. We'll use graph paper programming to simulate
          coding, and use relay races to simulate having a deadline.
      2:
        image: notes/C2_relay_programming_2.png
        text: In relay programming, teams will be racing to finish a graph paper program.
          You have to check your teammate's work, or debug it, fix it if there's a
          mistake, add your arrow, and run back and tag your teammate.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms
          or code. There are lots of ways to debug problems. One of the easiest is
          to move step by step until you find where something goes wrong, then fix
          it.
      4:
        image: notes/C2_relay_programming_4.png
        text: Here, I'm trying to do a back handspring, but I keep falling off. I
          walk through each part, step by step, and realize where my mistake was.
          My coach showed me I wasn't putting my hands on the beam correctly. So I
          tried another back handspring on the beam with my new hand position, and
          I stuck it! I was really glad I debugged my back  handspring. We figured
          it out! Debugging is finding and fixing problems. Nice, good job!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Bilgisayarın iyi olduğu şeylerden birisi aynı komutları tekrarlamasıdır.
          İnsan olarak aynı şeyleri yapmaktan sıkılabilirsin. Fakat bilgisayar aynı
          işlemi milyonlarca defa yapar ve sıkılmaz ve gayet güzel yapar.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "Örneğin Eğer Facebooktaki herkese doğum günü mesajı atmak istediğimde
          herkese ayrı mesaj yazsam yıllarca sürer. Fakat sadece birkaç kod satırıyla
          Facebook taki herkese mesaj atıp iyi ki doğdun dileklerimi iletebiliyorum.
          Döngüler budur işte. Bilgisayarın iyi yaptığı çok faydalı şeylerdir."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: Bu örnekte amacın kızgın kuşu domuzcuğa götürmektir. Şimdi tekrarla
          bloğu kullanarak daha kolayca yazacağız. Aynı işi 5 defa ilerle komutuyla
          da yapabilirsin yada bir defa ilerle yazıp 5 defa tekrarlamasını söyleyebilirsin.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Yada bilgisayara ilerlemesini bir kere söyleyip bu işi beş defa tekrarlamasını
          söylersin. Bunun için ilerle bloğunu sürükleyip Tekrarla bloğu içine koy.
          Sonra soru işaretine tıkla ve kaç kere yapacağını söyle.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Tekrarla bloğu içine istediğiniz kadar komut ekleyebilirsiniz. Bu örnekte
          ilerle ve sola dön komutlarını 5 defa yapmasını sağlar. İyi iş çıkarttın.
          İyi eğlenceler!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Bilgisayar programlamanın harika yönlerinden birisi bilgisayara bir
          işi yapmayı bir defa öğretirsen bu öğrettiğin şeyi defalarca tekrar kullanabilirsin.
          Buna fonksiyon denir. Bir isim verirsin ve tekrar tekrar çağırırsın. Böylece
          yeni bir blok oluşturmuş olursun.
      2:
        image: notes/C3_artist_functions_2.png
        text: Yazdığımız programda dört defa çizgi çizip dönerek kare çizmeyi öğrendik.
          Biz bu kodu alıp ona isim verebiliriz. draw a square, yani kare çiz. daha
          sonra ne zaman draw a square bloğunu eklersek ilgili kare çizme fonksiyonunu
          çağırır. Programlama dilimize yeni bir yetenek eklemiş olduk.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: 'Ekibinde arabanın bilgilerini toplayan ve yazdığı programlarla aracın
          performansını nasıl geliştireceğini söyleyen bir bilgisayar mühendisi yoksa,
          yarışmada  ön elemeden bile geçemezsin. '
      2:
        image: notes/C3_artist_intro_2.png
        text: Bu bulmacada kalem kullanarak farklı şekiller çizen bir aktör olacaksın.
          Aktör ne yaparsa arkasında bir çizgi bırakır.
      3:
        image: notes/C3_artist_intro_3.png
        text: Tuvalde ilerlemek için "ileriye" bloğu kullanacaksın. Buradaki blok
          100 piksel ilerlemeni sağlıyor. Çalıştırdığımız zaman ne oluyor? Aktör 100
          piksel ilerliyor. Piksel demek ekrandaki minik kare noktalar demektir.
      4:
        image: notes/C3_artist_intro_4.png
        text: Bulmacadaki öteki blok 90 derece sağa dönmeni söylüyor. Artistin ne
          kadar döneceğine sen karar verebilirsin.
      5:
        image: notes/C3_artist_intro_5.png
        text: Bu da 120 derece döner. İlgili kısma tıklayarak piksel uzunluğunu değiştirebilirsin
          ve ne kadar döneceğini belirleye bilirsin!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: Bir döngüyü başka bir döngü içine koyduğumuz zaman iç içe döngü oluşturmuş
          oluruz. Örneğin üçgen çizmek için bir kenarını 100 piksel olarak çizen blokları
          döngü içine koyarız ve tekrarla içine 3 yazarız. Üçgenin her bir kenarını
          çizmesi için.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Fakat 6 üçgen çizmek istiyoruz. bunu yapmak için mevcut tekrarla bloğunu
          yeni bir tekrarla bloğu içine koyacağız. Çok güzel!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Bu eğer koşul bloğu. Eğer nektar yada bal bir değerden büyükse, eşitse
          yada küçükse bir şey yap.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Bu ne kadar nektar yada bal olduğunu bilmiyorsan faydalı olur. soru
          işareti bilinmediğini gösteriyor.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: Bu örnekte mor çiçekte Eğer (IF) sıfırdan çok nektar varsa nektar al
          diyeceğiz. Bu arıya nektar olduğu sürece nektar almasını söylüyor. Da daaa!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Programlardan hata ayıklamayı hiç duydunuz mu? Neyin çalışmadığını bulmanıza
          denir. Hata ayıklarken önce hatayı bulursunuz sonra düzeltirsiniz.
      2:
        image: notes/C3_debugging_bee_2.png
        text: "Çalışma alanında zaten bazı bloklar var. Adım adım ilerleyeceğiz ve
          blokların üzerinden geçeceğiz. Böylece her bir bloğun yapması gerekeni yapıp
          yapmadığını göreceğiz ve gerekirse düzelteceğiz."
      3:
        image: notes/C3_debugging_bee_3.png
        text: Görünüşe göre bizim problemimiz burada! İlerle bloğundan bir tane daha
          lazım. Adım düğmesi hatayı bulmamıza yardım eder böylelikle hatayı düzeltiriz.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: Bilgisayar Biliminde en önemli kavramlarından biri yeni komut tanımlamadır.
          Kendi komutunuzu bilgisayar diline ekleyebilirsiniz. Çoğu programlama dillerin
          yalnızca yaklaşık 100 komutu vardır. Ve gerçekten, işin sırrı bu yapı taşları
          komutların yanı sıra kendi yeni komutlarını tanımlamadır.
      2:
        image: notes/C3_bee_functions_2.png
        text: Bunu sporda her zaman yapıyoruz. Örneğin basketbolda nasıl ilerleyeceğimi,
          nasıl basket atacağımı ve nasıl ribound alacağımı öğreniyorum. Bir defa
          bu temel hareketleri öğrendikten sonra bu hareketleri birlikte kullanarak
          yeni hareketler yapıyorum. buradan daha kompleks oyunlara geçebiliyorum.
          Bir defa hareketi öğrenince ona isim ver ve takımdaki herkes onu yapmayı
          bilsin.
      3:
        image: notes/C3_bee_functions_3.png
        text: Benzer şekilde, bilgisayara bir eylemi nasıl yapacağını komutlar kullanarak
          öğrettin vede bu eyleme kolay hatırlanır bir isim verin. Bu isim daha sonra
          kolayca aynı eylemi gerçekleştirmek için kullanılabilir. Bu şekilde kendi
          komutunu tanımlamaya "fonksiyon" denir. Şimdi fonksiyon kullanarak arıya
          yardım edeceğiz.
      4:
        image: notes/C3_bee_functions_4.png
        text: Bu örnekte fonksiyonumuz "get 2 nectar" olarak adlandırılıyor ve iki
          nektar toplamayı sağlıyor. Ekrandaki yeşil blok. Fonksiyonun içine bakınca
          "get 2 nectar" fonksiyonunun ne yaptığını görebiliyoruz. Her zaman gri fonksiyon
          bloğunun içine bakarak yeşil fonksiyon bloğunun ne yaptığını anla.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: "Şimdi biz arı ile iç içe geçmiş döngüleri kullanacağız. İlerleyip üç
          nektar alan ve sonra sağa dönen kod hazır olarak verilmiş. Bütün o kodu
          ve diğer tekrarla bloğu içine koyup üç defa tekrarlayalım. Bitti!"
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: "Şimdi kendi bounce oyunun yaratıp arkadaşlarınla paylaşa bileceksin.
          Harika!"
      2:
        image: notes/C3_bounce_2.png
        text: Başlamak için kontrolleri klavyedeki ok tuşlarını bağlayacağız.
      3:
        image: notes/C3_bounce_3.png
        text: Sol ok tuşu ile sola ve sağ ok tuşu ile sağa hareket ettirebilirsin.
          Haydi yap ve kendi sektirme oyununu programla!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: This lesson is computational thinking. Sometimes learning a new game
          can be tough, right? At first it might seem really confusing and sometimes,
          there's no one there to teach you the rules, so you have to figure it out
          on your own.
      2:
        image: notes/C3_computational_thinking_2.png
        text: The good news is that you can get better at figuring things out on your
          own when you know a few thinking tricks. These tricks are unique ways for
          looking at and solving problems. In this lesson, you'll learn about four
          tricks and practice them with your friends to figure out the rules to a
          game.
      3:
        image: notes/C3_computational_thinking_3.png
        text: When you break down a big problem into smaller pieces, you're using
          your brain to decompose the big problem. Once we've decomposed the big problem
          into several smaller problems, we can go on to our next trick, which is
          called pattern match.
      4:
        image: notes/C3_computational_thinking_4.png
        text: That's when we look for similarities between things. Once I find the
          things that are the same, I can figure out what things are different. When
          I remove those differences, that's called abstraction.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Problemi çözme aşamalarını çözdükten sonra, bu aşamaları algoritma denilen
          belirli sıraya koyabilirim böylece herhangi biri problemi çözmek için benim
          talimatlarımı kullanabilir. Biz bu dört aşamayı kuralsız oyunun nasıl oynancağını
          çözmek için kullanacağız. Oyunun sonunda, buna benzer bir şeyi oynayabileceksin!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: This lesson is called crowdsourcing. In this lesson we'll use a deck
          of cards to learn about how much easier some things can be to do in groups
          instead of trying to do them all alone. So grab some friends and make something
          awesome. Crowdsourcing is getting help from a large group of people to finish
          something faster.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of
          amateurs and professionals link their computers together to search through
          billions and billions of pieces of information. Looking for things like
          the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: When you see a movie, each second of the movie is 24 individual pictures,
          we call those frames. So every one of those pictures needs to be created
          and rendered and put all together. My team and I, we're all software developers.
          We all work together to create a piece of software that actually creates
          an image, creates the final image that you see on screen. That's a tool
          that artists and other developers can use as part of their teamwork and
          their process to be able to create the images that they want on screen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: For example, in Finding Nemo, when Crush and Squirt and all their friends
          are flying through the East Australian Current. You're seeing images of
          water flowing by, you're seeing the colors on the back of the turtle, you're
          seeing the sides of the fish. All of those things are generated through
          math and computer programs that we write, that we then give to the artist
          and they take that to create that final image and tweak it and make it look
          beautiful and look fun.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer
          games. Have you ever thought about how computer programmers turn the steps
          of a game into a program? The first step in creating computer games and
          in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: The thinking step of problem solving produces an algorithm, which is
          a step by step plan for solving a problem or finishing a task. In this lesson,
          you'll create an algorithm for a dice race game. Then you'll ask your friends
          to try out your plan to see if they can follow the steps to play the game.
          After the programmer is sure the steps are correct, it's time to translate
          the algorithm into a program with language that the computer can understand.
      3:
        image: notes/C3_dice_race_3.png
        text: Almost everything we do every day requires an algorithm, a list of steps
          you can follow to finish a task. Think about getting ready for school or
          planning a fun day with your friends or fixing a snack. To complete any
          of those tasks, you'll need to break it down into smaller steps and sometimes
          the steps must be in a specific order.
      4:
        image: notes/C3_dice_race_4.png
        text: Think about making a sandwich. It doesn't matter which ingredient you
          get out of the cabinet first. But you can't spread the peanut butter until
          you open the jar. Computers need algorithms and programs to show them how
          to do even simple things that we can do without thinking about it.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program
          is the actual instructions given to the computer to make it happen. An algorithm
          has to be translated into a program before a computer can run it. Breaking
          a task into steps called an algorithm is sometimes difficult. But like any
          new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: Süresince döngüleri günlük hayatta yaptıklarımıza çok benziyor. Arabamızı
          yıkadığımızı düşünelim tam olarak temiz olana kadar yıkamaya devam ederiz.
          Ve yıkanan her kısım sonrasında tam olarak yıkanıp yıkanmadığını kontrol
          ederiz, temizlenmiş ise temizleme işlemini sonlandırırız.
      2:
        image: notes/C3_farmer_while_2.png
        text: We've got a new look to help your farmer out. It's called a while-block.
          It's pretty simple actually. While a statement at the top is true, do something.
          For example, while there's a pile move one hayful. Go ahead and give it
          a try with your farmer.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: This lesson is functional suncatchers. You'll be creating these pretty
          suncatchers using functions. There are several steps in creating one of
          these suncatchers. Some of the steps you have to repeat many times.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is
          figure out what we have to repeat over and over again. We can group these
          steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: But there is more to creating a beautiful suncatcher than following
          precise steps. Sometimes we want to be creative and change the color of
          the beads we're using. We can make every suncatcher unique if we use different
          colored beads.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the
          beads as variables which is a word that means a placeholder for information
          that can change. Have fun creating beautiful suncatchers using functions
          and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place
          and similar to this busy road. Messages like cars are zooming along to get
          to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: Acting out how the internet works will help you understand what's happening
          when you use the internet. You'll learn how messages get from your computer
          to a favorite website or from a friend to an email inbox. Just like it's
          easier to navigate busy roads when you know the roads and can read the signs,
          traveling the internet is not so complicated when you know what goes on
          behind the scenes.
      3:
        image: notes/C3_internet_3.png
        text: Sending messages on the internet is a little bit like sending messages
          in the mail but with a few differences. I'm here at Google.com. The IP address
          for this website is this number. You can think of an IP address as your
          return address in the mail. Let's imagine that I want to send a message
          in the mail to someone in the office down the there. Do you see URL and
          the IP address on that door? I've written this message and hit send.
      4:
        image: notes/C3_internet_4.png
        text: Unlike the Postal Service, the first thing that happens is that the
          internet breaks the message into smaller parts so it can be sent more easily.
          These small parts are called packets. Each packet of the message is delivered
          to the destination one at a time. These packets are all put together in
          the right order so that the receiver can read the message correctly. Of
          course, there are many more things to learn about how the internet works
          but this is a great start. You're on your way to becoming a savvy internet
          user! Be sure to tell your family and friends what you've learned!
      5:
        image: notes/C3_internet_5.png
        text: My name is Amanda Camp and I'm a software engineer at Google. I work
          on a team that works on a backend server that stores profiles and contacts.
          In my job, we think a lot about how contacts can be sent to other devices,
          such as your phone. Most people have a lot of contacts, you might have say,
          1000 contacts and we don't want to send all of those contacts at once to
          your phone because it's too large of a message. Similar to the way the internet
          breaks large messages down into packets, we use a concept called paging
          where we might only send your phone 100 contacts at a time and let your
          phone respond to us and ask for the next 100.
      6:
        image: notes/C3_internet_6.png
        text: The most exciting thing about software is the fact that it can impact
          the entire world. I first learned to program when I was about nineteen.
          I think I was already a sophomore or a junior in college. The first program
          I remember writing is something that converted Celsius to Fahrenheit. I
          like programming because I like helping people. I can write programs at
          Google that help people all over the world and that's really mind-boggling
          and exciting.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: People make decisions everyday. For example, before you go outside,
          you have an if statement that says if it's raining, then I need to get my
          jacket. Computers are amazing once you decide those kinds of statements
          that they can reliably execute those things and unbelievable speed. A computer
          program really is a little bit of math and some if statements where the
          decision gets made.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: Eğer bloğu zombinin karar vermesine yardımcı olur. Bir şeyi kontrol
          eder. Örneğin, eğer bloğunu kullanalım ve eğer sola yol var ise sola dönmesi
          için sola dön bloğunu eğer bloğu içine yerleştirelim. Zombiye etrafına bakmasını
          ve eğer sola yol var ise sola dönmesini söylüyoruz.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: "İlerle bloğunu kadar tekrarla bloğu içine koyduğumuz zaman gitmek istediği
          sürece ileri gitmesini söylüyoruz. Dönüş olduğunda eğer bloğu kullanarak
          sola dönüş varsa sola dönmesini sağlıyoruz. Böylece sola yol olduğunda sola
          dönerek diğer durumlarda ilerleyerek hedefimize ulaşıyoruz."
      4:
        image: notes/C3_maze_conditionals_4.png
        text: 'eğer bloğu bilgisayar programlamanın temel konularından biridir. İlk
          öğrendiğim şeylerden birisi XOX oyununu programlamaktı.  Eğer bloğunu kullanarak
          eğer bir kişi hamle yaptığında kazanacaksa o hamleyi yapmasını söylemekti.
          Eğer bloğuyla iyi eğlenceler: çok temel bir kavram.'
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: Bu örnekte, hedef zombinin ayçiçeği için elde etmesidir. Beş ilerle
          bloğu kullanabiliriz ya da bilgisayara tekrarla bloğu içine ilerle koyarak
          aynı komutu 5 defa tekrarlatabilirsiniz.
      2:
        image: notes/C3_maze_level_4_2.png
        text: Bu zamandan tasarruf sağlar ve daha kolay yapar. Kullanmak için sadece
          ilerle bloğunu tekrarla bloğu içine koy. Çalıştır tuşuna bas ve 5 defa ilerleyerek
          ayçiçeğine ulaştır.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "Şimdiye kadar animasyon yada hikaye yaptığında her çalıştırdığında
          aynı şeyi yapıyordu. Şimdi etkileşimli bir oyun yapabilirsiniz."
      2:
        image: notes/playlab_2.png
        text: Denemek için bazı yeni bloklar var. "Oka basıldığında" ve "hareket et"
          blokları var. Bu blokları kullanarak ok tuşları ile oyuncuyu hareket ettirebilirsiniz.
          Ayrıca aktörler çarpıştığında yada tıklandığında blokları var. İyi eğlenceler!
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Bu şarkı yazma dersidir. Müzik  bilgisayar programı gibidir. Yazılı
          notalar ve kelimeler şarkıcıya tam olarak ne yapması gerektiğini söyler.
          Müzik bazı bölümleri tekrar tekrar kullanılır.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Bu koro diyoruz. Bir bilgisayar programı içinde tekrar tekrar kullanılan
          programın bazı bölümlere fonksiyon denir. Şarkı sözlerini okurken koro (nakarat)
          yazıyorsa, koro der misiniz? Hayır, hangi sözler koro (nakarat) olarak tanımlanır.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: In this lesson, you'll learn a silly little song called little bunny
          foo foo. The song has a chorus that you will sing several times over and
          over again. A function is a piece of code that you can call and use over
          and over again. It makes programming easier and more efficient so you don't
          have to write out the steps of your function over and over again. You can
          just write it once!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Burada eğer bloğu var. Eğer çiçekteysen yada petekteysen birşey yapmasını
          söylüyor. Ne kadar nektar yada bal olduğunu bilmediğinde kullanışlı bir
          bloktur. sor işareti ile ne kadar olduğunu bilmediğimizi belirtiyoruz.
      2:
        image: notes/C4_bee_conditional_2.png
        text: Bu örnekte, eğer çiçekse bal al için eğer bloğunu kullan. Benzer şekilde
          bir tanesini de eğer petekse bal yapması için kullan. Da daa!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: "Şimdi eğer/değilse isimli yeni bloğumuz var. Bu yeni koşul ifadesi
          eğer bloğu gibi. Sadece şimdi altta değilse diye yeni bir yol var. eğer/değilse
          bloğu karar vererek iki işlemden birisini yapmamızı sağlar. Eğer arı çiçekte
          ise yapacağı işleri \neğer bloğu içine, çiçekte değilse yapacağı işleri
          değilse içine koyarız.\n"
      2:
        image: notes/C4_conditionals_2.png
        text: Eğer blokları bilgisayarın karar vermesini sağlar. İnsanlar bir koşul
          oluştuğunda ne yapılacağı ile ilgili durumları bilgisayara söyler. Değilse
          durumu bu koşul oluşmadığında ne yapılacağıdır. Eğer/değilse bloğunun üst
          kısmı çiçekse diyor. İki nektar varsa yada yol varsa gibi farklı şeylerde
          diyebilirdi. Eğer bloğundaki ifade doğruysa ilk kısımdaki işleri yap. Eğer
          yanlışsa değilse kısımındaki işleri yap.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: Tekrarla bloğu kullandığımızda ne kadar yapılacağını bilgisayar nasıl
          biliyor. Aslında tekrarla bloğu arkada daha karmaşık bir kod saklıyor. Bu
          kod başlangıç değerinden bitiş değerine kadar belirli bir seri ile sayıyor.
      2:
        image: notes/C4_for_loops_2.png
        text: "Örneğin tekrarla üç bloğu birden üçe kadar birer birer sayıyor. Her
          sayışın da içindeki kodu çalıştırıyor.  For (Şununla tekrarla) döngüleri
          ne kadar çalışacağını içindeki değişkenle biliyor. Önce değişken ilk değere
          ayarlanıyor ve her seferinde artırılarak döngü çalıştırılıyor. Değişken
          bitiş değerinden büyük olunca çalıştırma sonlanıyor."
      3:
        image: notes/C4_for_loops_3.png
        text: Gerçek bir For (şununla tekrarla) döngüsü sayaç değişkenini gerçekten
          göre bilmeni ve kodun içinde kullanmayı sağlar. Örneğin, bir sıra çiçeğin
          varsa ve ilkinde bir tane ikincisinde 2 tane ve üçüncüsünde 3 tane nektar
          varsa sayaç değerini kullanabilirsiniz. Sayaç kadar nektar toplayabilirsin.
          İlkinde bir tane ikincisinde iki ve üçüncüde üç.sayaç
      4:
        image: notes/C4_for_loops_4.png
        text: Ayrıca şununla say döngüsü içinde birer birer değil farklı da sayabilirsin.
          İkişer, dörder sayabilirsin. Hatta her seferinde farklı sayıda sayabilirsin.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: Tekrarla bloğu kullandığımızda ne kadar yapılacağını bilgisayar nasıl
          biliyor. Aslında tekrarla bloğu arkada daha karmaşık bir kod saklıyor. Bu
          kod başlangıç değerinden bitiş değerine kadar belirli bir seri ile sayıyor.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: "Örneğin tekrarla üç bloğu birden üçe kadar birer birer sayıyor. Her
          sayışın da içindeki kodu çalıştırıyor.  For (Şununla tekrarla) döngüleri
          ne kadar çalışacağını içindeki değişkenle biliyor. Önce değişken ilk değere
          ayarlanıyor ve her seferinde artırılarak döngü çalıştırılıyor. Değişken
          bitiş değerinden büyük olunca çalıştırma sonlanıyor."
      3:
        image: notes/C4_for_loops_bee_3.png
        text: Gerçek bir For (şununla tekrarla) döngüsü sayaç değişkenini gerçekten
          göre bilmeni ve kodun içinde kullanmayı sağlar. Örneğin, bir sıra çiçeğin
          varsa ve ilkinde bir tane ikincisinde 2 tane ve üçüncüsünde 3 tane nektar
          varsa sayaç değerini kullanabilirsiniz. Sayaç kadar nektar toplayabilirsin.
          İlkinde bir tane ikincisinde iki ve üçüncüde üç.sayaç
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Ayrıca şununla say döngüsü içinde birer birer değil farklı da sayabilirsin.
          İkişer, dörder sayabilirsin. Hatta her seferinde farklı sayıda sayabilirsin.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: Tekrarla bloğu kullandığımızda ne kadar yapılacağını bilgisayar nasıl
          biliyor. Aslında tekrarla bloğu arkada daha karmaşık bir kod saklıyor. Bu
          kod başlangıç değerinden bitiş değerine kadar belirli bir seri ile sayıyor.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: "Örneğin tekrarla üç bloğu birden üçe kadar birer birer sayıyor. Her
          sayışın da içindeki kodu çalıştırıyor. For (Şununla tekrarla) döngüleri
          ne kadar çalışacağını içindeki değişkenle biliyor. Önce değişken ilk değere
          ayarlanıyor ve her seferinde artırılarak döngü çalıştırılıyor. Değişken
          bitiş değerinden büyük olunca çalıştırma sonlanıyor. Tekrarla döngüsü yerine
          şununla say döngüsü kullanmanın faydası döngü değişkenini görmendir."
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Fonksiyon bloklarının içini yazmayı öğrenmiştiniz. Şimdi baştan yeni
          fonksiyon yazmayı öğreneceğiz. Araç kutumuzda fonksiyon diye bölüm var.
          buna tıkladığınızda bir fonksiyon oluştur düğmesi göreceksin. Bu düğmeye
          basmak yeni bir fonksiyon bloğu getirecektir.
      2:
        image: notes/C4_function_create_2.png
        text: Daha önce olduğu gibi fonksiyonuna isim vereceksin, ne yaptığını yazacaksın.
          Örneğin kare çiz, üçgen çiz gibi. sonra blokları alttaki beyaz bölüme sürükleyeceksin.
          Bu blokları yeşil çerçeve içine sürükle.
      3:
        image: notes/C4_function_create_3.png
        text: Bir kez bitirdikten sonra kaydet ve çık. Bu sizi ana çalışma alanına
          götürecektir. Yeni fonksiyon araç kutunda fonksiyon bölümünde olacaktır.
          Bunu diğer bloklar gibi sürükleyerek kullanabilir ve bulmacayı çözebilirsin.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Bilgisayar programlamanın harika yönlerinden birisi bilgisayara bir
          işi yapmayı bir defa öğretirsen bu öğrettiğin şeyi defalarca tekrar kullanabilirsin.
          Buna fonksiyon denir. Bir isim verirsin ve tekrar tekrar çağırırsın. Böylece
          yeni bir blok oluşturmuş olursun.
      2:
        image: notes/C4_function_edit_2.png
        text: Yazdığımız programda dört defa çizgi çizip dönerek kare çizmeyi öğrendik.
          Biz bu kodu alıp ona isim verebiliriz. draw a square, yani kare çiz. daha
          sonra ne zaman draw a square bloğunu eklersek ilgili kare çizme fonksiyonunu
          çağırır. Programlama dilimize yeni bir yetenek eklemiş olduk.
      3:
        image: notes/C4_function_edit_3.png
        text: 'Bu bulmacada biz kare çiz fonksiyonunu (draw a square) sizin için yazdık.
          Yeşil blok olarak araç kutunda göreceksin. Şimdi daha önce yazdığın kodu
          bu fonksiyonu kullanarak yazacaksın. Bunun için draw a square fonksiyonu
          içindeki düzenle düğmesine bas. Bu fonksiyon düzenleyici açar. Fonksiyon
          düzenleyici üç parçadan oluşur. İsim verdiğin parça. Sonra açıklama yazdığın
          bölüm ve en altta fonsiyon kodu yazman gereken bölüm. '
      4:
        image: notes/C4_function_edit_4.png
        text: Bu durumda, bunun bir kare çizmesi gerekiyor. Bunun altındaki beyaz
          alan fonksiyon çalışma alanıdır ve zaten kullandığın çalışma alanı gibi
          kullanabilirsin. Bu çalışma alanı içine ara kutusundan blok sürükle ve bırak.
          Bir kare fonksiyonu oluşturmak için gerekli blokları yerleştirmeyi unutmayın.
          Bitirdiğinde sakla düğmesine bas ve çık. Yeni fonksiyon araç kutunda fonksiyon
          bölümünde olacaktır. Bunu diğer bloklar gibi sürükleyerek kullanabilir ve
          bulmacayı çözebilirsin.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: "İşte 50 piksel kenarlara sahip bir kare çizen bir fonksiyon. Bu harika
          ama eğer bir kenarı 50 piksel olan bir kare ve 100 piksel olan başka bir
          kare çizmek istedin? Hemen hemen aynı şeyi yapmak iki ayrı fonksiyon yazmak
          zorunda olmamalıyız. Bunun yerine, bir parametre kullanan fonksiyon kullanabilirsiniz."
      2:
        image: notes/C4_function_parameters_2.png
        text: "Parametreler fonksiyonu içinde kullanılan değişkenleri fonksiyon içine
          geçirmek için kullanılır. Farklı boyutlarda kareler oluşturmak için bu fonksiyona
          bir parametre eklemeyi deneyelim. Fonksiyon Düzenleyicisi'nde adı düzenleyebilirsiniz
          ve açıklama girebilirsiniz. Ama şimdi bir de parametre ekleyebilirsiniz.
          Boşluğa, parametrenin adını yazın ve parametre Ekle'yi tıklatın. Bu yeni
          oluşturduğunuz parametre adı ile kırmızı bir blok oluşturur. \nŞimdi ileriye
          100 ilerle bloğu içinde boyut parametresini kullanabilirsin.\n"
      3:
        image: notes/C4_function_parameters_3.png
        text: Kaydet ve Kapat'ı tıklatın ve araç kutusunun işlevler kategorisinde
          gelen bir kare blok oluşturmak yeni dışarı sürükleyin. Fonksiyonda kenar
          uzunluğunu soran bir boşluk var. Matematik kategorisinden bir sayı bloğunu
          sürükleyin ve bu alana yerleştirin. Tekrar tekrar farklı uzunluktaki farklı
          boyutlarda kareler yapmak için kullanabileceğiniz fonksiyonu görüyor musun?
          Haydi deneyin!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Normalde kodlama yazı yazarak yapılıyor fakat biz burada blokları kullanacağız.
          Görsel olarak blokları sürükleyip birbirine bağlayarak kod yazacaksınız.
          Alt tarafta kod yazmış oluyoruz. Başlangıç olarak Kızgın kuşun ilerleyip
          yumurtasını çalan kötü domuzcuğa ulaşmasını sağlayacağız.
      2:
        image: notes/C4_intro_2.png
        text: "Çalışma alanı üç bölgeye ayrılmıştır. Soldaki kodun çalışacağı labirenttir.
          Ne istendiğiyle ilgili bilgiler labirentin altındadır. Ortadaki bölge araç
          kutusudur. Buradaki her komuta kuş anlar ve yapar. Sağdaki boş bölge çalışma
          alanı olarak söylenir ve buraya programını yazarsın."
      3:
        image: notes/C4_intro_3.png
        text: "İlerle bloğunu çalışma alanına sürükleyip Çalıştır düğmesine basınca
          ne olur? Kuş bir adım ilerler. Bir adım daha ilerlemesi için ne yapmalıyız?
          Bir ilerle bloğu daha ekleyebilirim."
      4:
        image: notes/C4_intro_4.png
        text: Sağa dön bloğunu çalışma alanına sürükleyip ilerle bloğunu antına kadar
          getireceğim ve sarı okun gözükene kadar ilerleteceğim. bıraktığımda iki
          blok birleşmiş olur. Çalıştır tuşuna tekrar basacağım. Kuş programdaki adımları
          üstten alta doğru sırayla yapacak.
      5:
        image: notes/C4_intro_5.png
        text: Bir bloğu silmek isterseniz sürükleyin ve çöp kutusuna bırakın. Çalıştır
          tuşu ile çalıştırdıktan sonra yeniden başla tuşu ile tekrar başlayabilirsin.
          Şimdi domuzcuğu yakalayalım!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: 50 piksel yüksekliğinde bir dikdörtken istiyorum. Boyuda yüksekliğin
          iki katı olsun. Bunu bilgisayara nasıl programlarım? Sanatçı 50 git sağa
          dön ve, sonra 100 git diyorum. sonra bunu tekrarlıyorum. Ama bilgisayar
          için matematik yapıyorum.
      2:
        image: notes/C4_math_artist_2.png
        text: Elli çarpı iki sonucunu kafadan bulmak kolay olabilir fakat mümkün olan
          her durumda bu tür hesapları bilgisayara bırakmanız gerekir çünkü bilgisayarlar
          matematiği gerçekten çok iyi yapıyor. Eğer sadece yükseklik diye parametre
          varsa, yukarı 50 piksel gidip yüksekliğiyaıp genişlikte yüksekliğin iki
          katı kadar gidebilirim.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: This lesson is called Tangram Algorithms. A tangram is a puzzle with
          seven pieces that can be put together to make other shapes. You'll be using
          an algorithm to explain to your partner how to put the puzzle together.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a
          task. We use them every day with things like shopping lists and recipes.
          If you keep an algorithm simple, there are lots of ways to interpret it
          and whoever performs that algorithm might not get exactly what you wanted.
          If you want to make sure that everyone ends up with the exact same thing,
          then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: I'm using an algorithm today to complete a painting. I wanted to try
          doing a painting of some wolves but I'm not the most amazing painter. Luckily
          for people by me, there is paint by numbers. There are forty colors and
          it has little letters and numbers that tell you which color to paint each
          section. Paint by numbers tells me exactly what color to use and where.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: It's very specific so I'm able to follow directions and the painting
          will come out looking awesome. It's a great algorithm. If the instructions
          weren't specific enough, my wolves wouldn't look as good. When you really
          want something to turn out exactly the way that you planned it, it's best
          to be extremely precise.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Each team, the person who's instructing that's the person who's holding
          the paper, has to figure out what their off symbol is going to be and what
          their on symbol is going to be. In binary, it's kind of like an alphabet
          with two letters. Like having A and B be your entire alphabet but you've
          got a 0 and a 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: The most common way you use binary is in an if statement. It's a classic
          thing from programming. The program runs along and it says if something
          is true, then do this. Or it's not true and you do something else. What
          if you want to do something maybe a little more complicated. Instead an
          if statement, you want to work with something like an image or a sound in
          a computer.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'A computer only knows binary but an image, it''s not binary, it''s
          not ones and zeros so how do you do that? Here''s an example: You have this
          beautiful picture. Now a picture is basically a form of information. All
          information can be encoded in binary one way or another, you just have to
          figure out how to do it.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: You imagine that we're going to put a grid over this panda bear and
          for each square, we're going to decide whether that square is more black
          or more white. And then we're going to color it that way. Now each cell
          on the grid is either black or white and then the black squares we say those
          are zeros (binary digit) and the white squares are ones, the other binary
          digit. At the end, you're left with just a bunch of ones and zeros. That's
          how you represent this image in binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: Değişkenler içinde değer sakladığınız bir alandır. Bu değişkeni algoritma
          içinde kullandığınız zaman değişkenin saklandığı alan açılır ve içindeki
          değer kullanılır. Bu size değişkenini içindeki değere göre farklı çalışabilen
          daha akıllı algoritmalar yazma olanağı tanır.
      2:
        image: notes/C4_variables_artist_2.png
        text: Örneğin eğer doğum günü kutlamak için bir algoritma yazma isteseniz
          ve "İyi ki doğdun küçük kardeşim, 10 yaşına girdin" yazdınız harika oldu
          fakat gelecek yıl 11 olacak yine yeni mesaj yazacaksınız. Bunun yerine kardeşinizin
          yaşı için bir değişken kullanabilirsiniz ve "İyi ki doğdun küçük kardeşim
          `yaş`yaşına girdin" diyebilirsiniz Çünkü yaş değişkeni her yıl bir artacak
          bunu yaş=yaş+1 yapabileceksiniz.
      3:
        image: notes/C4_variables_artist_3.png
        text: Bu bulmacada sanatçının çizeceği çizginin boyunu belirlemek için length(uzunluk)
          değişkenini kullanacağız. Kodumuzda ilerle bloğu length değişkenine bakacak
          içindeki değeri görecek.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: Değişkenler içinde değer sakladığınız bir alandır. Bu değişkeni algoritma
          içinde kullandığınız zaman değişkenin saklandığı alan açılır ve içindeki
          değer kullanılır. Bu size değişkenini içindeki değere göre farklı çalışabilen
          daha akıllı algoritmalar yazma olanağı tanır.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Your screen is split into three main parts. On the left is the gamespace,
          where your program will run. The instructions for each level are written
          below. This middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace, and this
          is where we'll build our program.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Haydi başla ve sonunda kendi oyununu yarat. Oyununda farklı oyuncular
          iletişim kurabilir, mutlu yada üzgün olabilir, puan kazanabilir, micro robot,
          vişne, buz, tencere atabilir ve hatta birbirini yok edebilirsin. Bunların
          hepsi senin elinde istediğin gibi oyununu yapabilirsin.
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Students will break into groups to write instructions and then they''ll
          switch them with another group that will have to draw the monster. Groups
          will write instructions using the four steps of computational thinking:
          decomposition, pattern location, abstraction and algorithms.'
      3:
        image: notes/unplug2_3.png
        text: First groups will decompose the task which means make a game plan. Then
          they'll look for patterns between all the monsters in the catalog. When
          they come across differences between the monsters, they'll abstract or remove
          those details. For instance, one monster in the catalog has vegitas eyes
          and another has spritem eyes. But they both have eyes so we can write a
          line that says the monster has blank eyes.
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 'Merhaba, ben Star Wars: Güç Uyanıyor''un yapımcısı Kathleen Kennedy.
          Bugün starlarımızdan biri olan BB-8 ile çalışıyor olacaksınız. BB-8 küresel
          bir droiddir. Yaptığı her şey, her hareketi bir bilgisayar yazılımı ile
          kontrol edilmektedir. Bilgisayar bilimleri, pazarlamadan sağlık hizmetine
          ve film yapımcılığına kadar her endüstriyi etkiler. Hatta, Güç Uyanıyor
          gibi bir filmin yapımında yüzlerce bilgisayar mühendisi beraber çalıştı.'
      2:
        image: notes/starwars_intro_2.JPG
        text: Merhaba, ben Rachel Rose. ILM'de üst düzey bir Ar-Ge mühendisiyim, animasyon
          ve yaratık geliştirme takımının başındayım. Güç Uyanıyor'da sanatçıların
          karakterler için donanım geliştirmelerine yardımcı oluyorum. Karakterlerin
          hareket eden kısımları olan bu donanımlar, onların çok uzak bir galakside
          inandırıcı olmalarını sağlıyor.
      3:
        image: notes/starwars_intro_3.JPG
        text: "Önümüzdeki bir saatte kendi Star Wars oyunumuzu inşa edeceğiz. Sana
          programlamanın temel konseptlerini öğreteceğiz. Normalde programlama hep
          yazıdır ama biz burada blokları sürükleyip bırakarak program yazacağız.
          Aslında hala kod yaratıyor olacaksınız. Temel blokları denedikten sonra
          seni internetteki en popüler programlama dillerinden biri olan JavaScript'e
          geçireceğiz."
      4:
        image: notes/starwars_intro_4.JPG
        text: "İlk önce, Rey ile beraber BB-8'in yürüyerek hurda parçalarını toplaması
          için onu programlayacağız. Ekranın üç parçaya ayrılmış durumda. Solda kodun
          çalışacağı Star Wars oyun alanı yer alıyor. Her bölüm için yönergeler oyun
          alanının altında yazıyor."
      5:
        image: notes/starwars_intro_5.JPG
        text: Orta kısım araç kutusu ve burada BB-8'in anlayacağı komutlar olan bloklar
          yer alıyor.
      6:
        image: notes/starwars_intro_6.JPG
        text: Sağdaki beyaz kısım programı inşa edeceğimiz çalışma alanı.
      7:
        image: notes/starwars_intro_7.JPG
        text: Eğer solaİlerle(); blokunu çalışma alanına sürükleyip, oynata basarsam
          ne olur? BB-8 sola bir kare hareket eder.
      8:
        image: notes/starwars_intro_8.JPG
        text: Peki BB-8'in sola ilerledikten sonra başka bir şey yapmak istiyorsam
          ne yapmalıyım? Programımıza bir tane daha blok ekleyebilirim. yukarıİlerle();
          blokunu seçip renkli ışık belirene kadar solaİlerle(); blokumun altına sürükleyeceğim.
          Sonra bırakacağım ve iki blok birbirine kenetlenecek.
      9:
        image: notes/starwars_intro_9.JPG
        text: Oynata bir daha bastığımda, BB-8, çalışma alanımızdaki dizilmiş komutları
          yukarıdan aşağıya doğru canlandıracak. Eğer bir bloğu silmek isterseniz,
          dizilmiş komutlardan çıkarıp alet kutusuna sürüklemeniz yeterli.
      10:
        image: notes/starwars_intro_10.JPG
        text: Oynata bastıktan sonra, her zaman sıfırla tuşuna basarak BB-8'in başa
          dönmesini sağlayabilirsin. Haydi şimdi başlayalım!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Kullandığımız blokların içinde JavaScript komutları var. JavaScript,
          profesyonel geliştiriciler için günümüzdeki en popüler programlama dilidir.
          Bloklar, kodlama öğrenmeye başlamak için harika bir yol. Harvard ve Berkeley
          gibi en iyi üniversiteler bile bu yöntemi kullanıyor. Temel bilgileri öğrendikten
          sonra mühendisler yazarak kodlama yapıyor, çünkü bu bizim daha hızlı ilerlememizi
          sağlıyor.
      2:
        image: notes/starwars_typing_2.JPG
        text: Araç kutusundan bulup sürüklemek zorunda kalmadan yüzlerce komut yazabiliriz.
          Öğrenme aşamasında olduğun için başta yazmak yavaş gelebilir ama senin de
          denemeni istedik.
      3:
        image: notes/starwars_typing_3.JPG
        text: "Çalışma alanının sağında bulunan göster düğmesine tıklayarak bloklar
          ya da yazı ile kod girişi yapmak arasında geçiş yapabilirsin."
      4:
        image: notes/starwars_typing_4.JPG
        text: In the next lesson, we'll start you out in typing mode. Here you can
          still drag the block from the toolbox or you can type the command name.
          As you start to type, you'll see names of possible commands show below where
          you're typing. Instead of typing the whole command name, you can select
          one of these to move faster. In my job, I use this auto-complete feature
          all the time when writing code.
      5:
        image: notes/starwars_typing_5.JPG
        text: When you're typing code, the computer needs you to be very precise.
          You need to spell and capitalize the command name exactly correctly, including
          the parentheses and the semi-colon. Even with a small typing mistake, BB-8
          cannot understand the code and won't be able to move.
      6:
        image: notes/starwars_typing_6.JPG
        text: Herhangi bir satırda hata yaptığında, editör senin için o satırı vurgular
          böylece o satırı daha kolay düzeltebilirsin.
      7:
        image: notes/starwars_typing_7.JPG
        text: If you get stuck, you can always start over with the start over button
          and you can switch back to block mode at any time by clicking in the top-right
          corner. Ok, let's give typing a try! And if you make mistakes, don't get
          frustrated. It takes everybody a few tries to get it right.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_events_4.JPG
        text: Olayların dinlemesine bazı örnekler; fare tıklaması veya aşağı/yukarı
          tuşu veya ekrana bir kere dokunma.
      5:
        image: notes/starwars_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down.
      7:
        image: notes/starwars_events_7.JPG
        text: To do this, we'll use a command called whenUp(). When you drag the command
          out of the toolbox, you'll see that it starts and ends with a curly bracket
          instead of a semi-colon. This gives us space to put other commands in the
          middle. Every command that we place inside these brackets will run when
          the player presses the up arrow.
      8:
        image: notes/starwars_events_8.JPG
        text: We want R2-D2 to go up so let's put a goUp(); block inside the command.
          And we'll do the same thing to make R2-D2 go down.
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance,
          we can let R2-D2 react to button press events that move him around the screen.
          Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_congrats_3.JPG
        text: "[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win."
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It's really hard! Sometimes you just get an advantage, an unfair
          advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: Oyununuzu tamamladığınızda, arkadaşlarınızla paylaşabilir veya telefonunuzda
          oynayabilirsiniz. İyi eğlenceler!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Merhaba, ben Star Wars: Güç Uyanıyor''un yapımcısı Kathleen Kennedy.
          Bugün starlarımızdan biri olan BB-8 ile çalışıyor olacaksınız. BB-8 küresel
          bir droiddir. Yaptığı her şey, her hareketi bir bilgisayar yazılımı ile
          kontrol edilmektedir. Bilgisayar bilimleri, pazarlamadan sağlık hizmetine
          ve film yapımcılığına kadar her endüstriyi etkiler. Hatta, Güç Uyanıyor
          gibi bir filmin yapımında yüzlerce bilgisayar mühendisi beraber çalıştı.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Merhaba, ben Rachel Rose. ILM'de üst düzey bir Ar-Ge mühendisiyim, animasyon
          ve yaratık geliştirme takımının başındayım. Güç Uyanıyor'da sanatçıların
          karakterler için donanım geliştirmelerine yardımcı oluyorum. Karakterlerin
          hareket eden kısımları olan bu donanımlar, onların çok uzak bir galakside
          inandırıcı olmalarını sağlıyor.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: Bir saat içerisinde sana programlamanın temellerini öğretecek bir Star
          Wars oyunu oluşturacaksın. Genellikle programlama yazı yazarak yapılır fakat
          biz kod yazmayı blokları sürükleyerek yapacağız. BB-8 programını başlamak
          için Rey ile tüm hurdaları toplamaya gidiyoruz.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Ekranınız üç ana parçaya ayrılmıştır. Sol tarafta Star Wars oyun alanı
          bulunuyor, programınız işte burada çalışacak. Her bir seviyenin yönergeleri
          oyun alanının altında yazılıdır.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: Orta kısım araç kutusu ve burada BB-8'in anlayacağı komutlar olan bloklar
          yer alıyor.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: Sağdaki beyaz kısım programı inşa edeceğimiz çalışma alanı.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: Eğer solaİlerle(); blokunu çalışma alanına sürükleyip, oynata basarsam
          ne olur? BB-8 sola bir kare hareket eder.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: Peki BB-8'in sola ilerledikten sonra başka bir şey yapmak istiyorsam
          ne yapmalıyım? Programımıza bir tane daha blok ekleyebilirim. yukarıİlerle();
          blokunu seçip renkli ışık belirene kadar solaİlerle(); blokumun altına sürükleyeceğim.
          Sonra bırakacağım ve iki blok birbirine kenetlenecek.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Eğer bir bloğu silmek isterseniz, dizilmiş komutlardan çıkarıp alet
          kutusuna sürüklemeniz yeterli.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Oynata bastıktan sonra, her zaman sıfırla tuşuna basarak BB-8'in başa
          dönmesini sağlayabilirsin. Haydi şimdi başlayalım!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hello, my name is Charita Carter. I'm a senior creative producer here
          at Walt Disney Imagineering. I'm responsible for leading teams that actually
          produce the attractions that our guests get to experience. We are always
          looking for ways that we can improve and make a better experience for our
          guests and technology is at the heart of that.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Congratulations, you did it! You programmed BB-8. Now I think we're
          ready for something harder. Let's go for it. Now that you've learned the
          basics of programming, we're going to back in time to build your own game,
          starring R2-D2 and C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'To make a game, we need to learn about something that game programmers
          use every day: they''re called events. Events tell your program to listen
          or wait for when something happens and then when it does, it performs an
          action.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Olayların dinlemesine bazı örnekler; fare tıklaması veya aşağı/yukarı
          tuşu veya ekrana bir kere dokunma.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Here we're going to make R2-D2 move up to deliver a message to a rebel
          pilot and then move down to the other rebel pilot. We'll use events to make
          him move. When the player uses the up/down arrow keys, or the up/down buttons.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down. Now instead
          of writing all the code to control our droid in advance, we can let R2-D2
          react to button press events that move him around the screen.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Adım adım oyunun daha interaktif oluyor.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Hi, my name is Alice and I run the project and engineering teams here
          at Code.org and I worked on this tutorial that you're playing through right
          now.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: You just made it to the last level. Congratulations! You just learned
          everything you need to know to make your own Star Wars game. Now there are
          no more instructions, no puzzles to solve. You can make your own game and
          you choose how it works. One more thing, you've unlocked new sounds and
          new commands to do even more.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: "[students speaking] So we made a game basically where you get points
          when you get puffer pigs. The twist is everytime you get a puffer pig a
          storm trooper appears. Actually the whole screen is full of puffer pigs
          and then when you touch 10,000 of them, you win."
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything
          you kill gives you points. For my program, I reversed the keys so that whenever
          you click up, your character goes down and when you go right, your character
          goes left. It's really hard! Sometimes you just get an advantage, an unfair
          advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: Oyununuzu tamamladığınızda, arkadaşlarınızla paylaşabilir veya telefonunuzda
          oynayabilirsiniz. İyi eğlenceler!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Benim adım Jens Bergensten ama bana daha çok Jeb derler. Minecraft mojang.com'da
          baş geliştirici olarak çalışıyorum. Sanırım program yazmaya başladığımda
          11 ya da 12 yaşındaydım çünkü oyun yapmak istiyordum. Babamın bir arkadaşı
          bana oyun yapmak için program yazmayı öğrenmem gerektiğini söylemişti. İşte
          ben de böyle başladım. Mimari şeyleri tasarlamayı ve çözmeyi seviyorum.
          Minecraft'ın en sevdiğim tarafı işte bu.
      2:
        image: notes/mc_intro_2.JPG
        text: "Önümüzdeki bir saat boyunca Alex ya da Steve ile program yazarak bilgisayar
          biliminin temellerini ve Minecraft dünyasının simülasyonu çıkarılmış bir
          parçasında ilerlemeyi öğreneceksiniz."
      3:
        image: notes/mc_intro_3.JPG
        text: Geleneksel program yazma genelde metinle olur ama bugün blok olarak
          yazacağız. Bu, program yazmak için sürükleyip bırakabileceğiniz blokları
          kullanan bir sistem. Aslında burada JavaScript kodu oluşturuyorsunuz.
      4:
        image: notes/mc_intro_4.JPG
        text: Birazdan öğreneceğiniz konseptler bilgisayar programcılarının her gün
          kullandığı ve bilgisayar biliminin temelini oluşturan şeylerdir. Mojang'da
          biz de aynı konseptleri Minecraft'ın çalışması için kullanıyoruz.
      5:
        image: notes/mc_intro_5.JPG
        text: Başlamadan önce karakterinizi seçeceksiniz. Ben Alex'i seçiyorum. Şimdi
          onun ekranda hareket etmesine yardımcı olacak bir program kodu yapalım.
      6:
        image: notes/mc_intro_6.JPG
        text: Ekranınız üç ana parçaya ayrılmıştır. Sol tarafta Minecraft oyun alanı
          bulunuyor, programınız işte burada çalışacak. Her bir seviyenin talimatları
          aşağı yazılır.
      7:
        image: notes/mc_intro_7.JPG
        text: Bu ortadaki alan araç kutusudur ve bu blokların her biri Alex'in hareketlerini
          yönlendiren bir komuttur.
      8:
        image: notes/mc_intro_8.JPG
        text: Sağ taraftaki beyaz bölgenin adı iş alanıdır ve programınızı işte burada
          yaparsınız.
      9:
        image: notes/mc_intro_9.JPG
        text: '"ileri git" bloğunu çalışma alanımıza sürükleyip sonra Koş''a tıklarsak
          ne olur? Alex, panonun üzerinde bir birim ileri gider.'
      10:
        image: notes/mc_intro_10.JPG
        text: Peki Alex bir birim ileri gittikten sonra başka bir şey yapmak istersek
          ne mi yapacağız? Programımıza başka bir blok ekleyebiliriz. Şimdi "sağa
          dön" bloğunu seçeceğim ve bunu turuncu çizgi görünene kadar "ileri git"
          bloğunun altına sürükleyeceğim. Ardından bunu bırakacağım ve iki blok birbirine
          bağlanacak.  Tekrar Koş seçeneğine bastığımızda Alex çalışma alanımızda
          biriken komutları yukarıdan aşağı doğru gerçekleştirir.
      11:
        image: notes/mc_intro_11.JPG
        text: Ve bir bloğu silmek isterseniz bloğu yığından alıp araç kutusuna sürüklemeniz
          yeterli.
      12:
        image: notes/mc_intro_12.JPG
        text: Yaptığınız değişiklikleri geri almak ve seviyeyi başladığı hale getirmek
          için çalışma alanının sağ üst köşesindeki Baştan Başla düğmesini kullanın.
          Son bir şey daha; dönüş bloklarındaki küçük üçgeni görüyor musunuz? Bu üçgenleri
          gördüğünüzde farklı bir seçenek seçebilirsiniz. Şimdi kod yazmaya başlayalım!
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Ben Lydia Winters, Mojang'ın marka direktörüyüm ve Minecraft adında
          küçük bir oyun yaptık.
      2:
        image: notes/mc_repeat_2.JPG
        text: Minecraft'ta yapmayı en sevdiğim şey keşfetmek. Mağaralarda maceraya
          atılmayı ve neler bulabileceğimi görmeyi çok seviyorum. Programcı olmayan
          biri olarak, Minecraft dersleri görerek kendi başıma kod yazmayı öğrenmek
          için gerçekten sabırsızlanıyorum.
      3:
        image: notes/mc_repeat_3.JPG
        text: Son seviyede çok fazla "ileri git" bloğu gerekiyordu. Bilgisayara dört
          veya beş defa ileri git komutunu verebilseydik çok daha kolay olurdu. Neyse
          ki bilgisayarlar, tekrar döngüleriyle komutları tekrar etmede çok iyi.
      4:
        image: notes/mc_repeat_4.JPG
        text: Minecraft'ı yaparken yeni bir dünya yaratmak için gereken başlangıç
          malzemelerini yerleştirmek için tekrar döngülerini kullanıyoruz. Bu da binlerce
          blok anlamına gelir. Döngüleri ayrıca küçük şeyler için de, mesela Alex
          yürürken ayaklarını ileri geri hareket ettirmek için kullanıyoruz. Tekrar
          döngüleri, program yazmanın çok önemli bir parçasıdır.
      5:
        image: notes/mc_repeat_5.JPG
        text: Gece çökmek üzere, bu nedenle önümüzdeki birkaç seviyede güvende kalmak
          için bir ev yapacağız. Bunu çok kolay bir şekilde yapmak için tekrar bloğunu
          kullanacağız.
      6:
        image: notes/mc_repeat_6.JPG
        text: Evimizin duvarını yapmak için Alex'e dört defa ilerlemesini ve kalasları
          yerleştirmesini söyleyebilir ya da ona ileri giderek bir kalası yerleştirmesini
          söyleyip ardından bu komutu alıp tekrar bloğunu kullanarak bu eylemi birkaç
          defa gerçekleştirmesini sağlayabiliriz. Şimdi tekrar bloğuna tıklayacağız
          ve ona bu eylemi kaç defa gerçekleştirmesini istediğimizi söyleyeceğiz.
          Şimdi gece çökmeden evimizi yapalım! İyi eğlenceler.
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: "Şimdi eğer komutlarını öğreneceğiz. Eğer komutları, program yazmayı
          öğrenmenin temel bir parçasıdır. Bunlar bir bilgisayarın karar vermesine
          yardımcı olur."
      2:
        image: notes/mc_if_statements_2.JPG
        text: Tüm bilgisayarlar eğer komutlarını kullanır, buna telefonum da dahil.
          Örneğin telefonumun kilidini açtığımda eğer şifreyi doğru girersem telefonun
          kilidi açılır diyen bir kodu çalıştırır. Aksi takdirde bir hata mesajı verir.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Seteve'in ve Alice'in dünyada gördükleri bir şey için tepki vermeleri
          için kodunuzda eğer komutlarını kullanabilirsiniz. Örneğin eğer önlerinde
          bir kaya varsa sola dönebilirler. Ya da eğer bir ağaçla karşılaşırsa sağa
          dönerler.
      4:
        image: notes/mc_if_statements_4.JPG
        text: Bu durumda lavın içine düşmek de istemeyiz. Lav için de plan yapmak
          çok kolay. Lavı ekranda görebiliyoruz. Peki ya taşın altındaki göremediğimiz
          lav?
      5:
        image: notes/mc_if_statements_5.JPG
        text: Taşı çıkardıktan sonra ileri gitmeden önce orada lav olup olmadığını
          kontrol etmemiz gerekecek. Eğer orada lav varsa ileri gitmeden önce karakterimizin
          önüne bir taş yerleştirmek isteyebiliriz. Bu şekilde güvenli bir şekilde
          ilerleyebiliriz. Şimdi maden çıkarma zamanı! Nereye gittiğinize dikkat etmek
          için eğer komutlarını kullanmayı unutmayın.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Tebrikler! Bilgisayar biliminin temel blok yapımını öğrendiniz.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: "Şimdi bu blokları kullanarak kendi eserlerinizi yapabilirsiniz. Başka
          bir talimat ya da çözülecek başka bir yapboz yok. İstediğiniz her şeyi yapabilirsiniz.
          Seçim size kalmış."
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[öğrenci konuşması] Gerçek olmak üzere. Kırkıyorum. Meşalelerden bir
          L yaptım. Huş kalaslardan bir A yaptım. Oldu, başardık. Yünden bir ev yaptık!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Eserinizi tamamladığınızda arkadaşlarınızla paylaşmak için bir link
          almak üzere paylaş seçeneğini seçin. İyi eğlenceler!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Tebrikler! Bilgisayar biliminin temel blok yapımını öğrendiniz.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: "Şimdi bu blokları kullanarak kendi eserlerinizi yapabilirsiniz. Başka
          bir talimat ya da çözülecek başka bir yapboz yok. İstediğiniz her şeyi yapabilirsiniz.
          Seçim size kalmış."
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[öğrenci konuşması] Gerçek olmak üzere. Kırkıyorum. Meşalelerden bir
          L yaptım. Huş kalaslardan bir A yaptım. Oldu, başardık. Yünden bir ev yaptık!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: "Şimdi istediğiniz her şeyi yapabilirsiniz. İyi eğlenceler!"
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: Kendi oyununuzu yapmak istiyorsanız, gerçekten kolaydır. Tüm ihtiyacınız
          sadece birkaç programlama temeli ve ardından oluşturduğunuz bir oyunu oynamaya
          başlayabilirsiniz.
      2:
        image: notes/gumball_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/gumball_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/gumball_intro_4.JPG
        text: Ekran 3 ana bölüme ayrılmıştır. Sol taraf programınızın çalıştırılacağı
          oyun alanıdır. Her düzey için talimatlar aşağıda yazılmıştır.
      5:
        image: notes/gumball_intro_5.JPG
        text: Bu orta alan araç kutusu ve buradaki her blok bir kod parçasıdır.
      6:
        image: notes/gumball_intro_6.JPG
        text: Sağ taraftaki beyaz bölgenin adı iş alanıdır ve programınızı işte burada
          yaparsınız.
      7:
        image: notes/gumball_intro_7.JPG
        text: Kendi ekleyeceğiniz blokları "Çalıştığı zaman" bloğuna bağlamak gerekir.
          Blokları sürükleyip sarı çizgi çıkana kadar birbirine yaklaştırarak bağlayabilirsiniz.
      8:
        image: notes/gumball_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: Haydi başla ve sonunda kendi oyununu yarat. Oyununda farklı oyuncular
          iletişim kurabilir, mutlu yada üzgün olabilir, puan kazanabilir, birşeyler
          atabilir ve hatta birbirini yok edebilir. Bunların hepsi senin elinde istediğin
          gibi oyununu yapabilirsin.
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Şimdi oyun programcılarının her zaman kullandığı "Olay" kavramını öğreneceğiz.
          Olay  bir şey olduğunda bunu algılayıp bu eylemle ilgili eylemi gerçekleştir.
      2:
        image: notes/gumball_events_2.JPG
        text: Olayların dinlemesine bazı örnekler; fare tıklaması veya aşağı/yukarı
          tuşu veya ekrana bir kere dokunma.
      3:
        image: notes/gumball_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/gumball_events_4.JPG
        text: Ayrıca "zaman okları" parçaları var. Eğer "hareket" parçalarını bunlara
          bağlarsanız, karakterinizi yukarı, aşağı, sola ve sağa hareket ettirmeye
          başlayabilirsiniz!. Git gide oyununuz daha çok interaktif oluyor.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/gumball_repeat_3.JPG
        text: Sıradaki bu bulmacada, hedefimiz aktöre bir işi devamlı yapması için
          yardım etmek. Tekrarla komutunun nasıl çalıştığını öğrendiğin zaman sana
          kendi oyununu yaparken tonla zaman kazandıracak.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: Kendi oyununuzu yapmak istiyorsanız, gerçekten kolaydır. Tüm ihtiyacınız
          sadece birkaç programlama temeli ve ardından oluşturduğunuz bir oyunu oynamaya
          başlayabilirsiniz.
      2:
        image: notes/iceage_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/iceage_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/iceage_intro_4.JPG
        text: Ekran 3 ana bölüme ayrılmıştır. Sol taraf programınızın çalıştırılacağı
          oyun alanıdır. Her düzey için talimatlar aşağıda yazılmıştır.
      5:
        image: notes/iceage_intro_5.JPG
        text: Bu orta alan araç kutusu ve buradaki her blok bir kod parçasıdır.
      6:
        image: notes/iceage_intro_6.JPG
        text: Sağ taraftaki beyaz bölgenin adı iş alanıdır ve programınızı işte burada
          yaparsınız.
      7:
        image: notes/iceage_intro_7.JPG
        text: Kendi ekleyeceğiniz blokları "Çalıştığı zaman" bloğuna bağlamak gerekir.
          Blokları sürükleyip sarı çizgi çıkana kadar birbirine yaklaştırarak bağlayabilirsiniz.
      8:
        image: notes/iceage_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: Haydi başla ve sonunda kendi oyununu yarat. Oyununda farklı oyuncular
          iletişim kurabilir, mutlu yada üzgün olabilir, puan kazanabilir, birşeyler
          atabilir ve hatta birbirini yok edebilir. Bunların hepsi senin elinde istediğin
          gibi oyununu yapabilirsin.
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Şimdi oyun programcılarının her zaman kullandığı "Olay" kavramını öğreneceğiz.
          Olay  bir şey olduğunda bunu algılayıp bu eylemle ilgili eylemi gerçekleştir.
      2:
        image: notes/iceage_events_2.JPG
        text: Olayların dinlemesine bazı örnekler; fare tıklaması veya aşağı/yukarı
          tuşu veya ekrana bir kere dokunma.
      3:
        image: notes/iceage_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/iceage_events_4.JPG
        text: Ayrıca "zaman okları" parçaları var. Eğer "hareket" parçalarını bunlara
          bağlarsanız, karakterinizi yukarı, aşağı, sola ve sağa hareket ettirmeye
          başlayabilirsiniz!. Git gide oyununuz daha çok interaktif oluyor.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/iceage_repeat_3.JPG
        text: Sıradaki bu bulmacada, hedefimiz aktöre bir işi devamlı yapması için
          yardım etmek. Tekrarla komutunun nasıl çalıştığını öğrendiğin zaman sana
          kendi oyununu yaparken tonla zaman kazandıracak.
