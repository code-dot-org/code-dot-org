"et":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Tere tulemast oma esimesse programmeerimise tundi! Sukeldume otse sinu
          esimesse programmeerimise kogemusse.
      2:
        image: notes/hoc1_2.jpg
        text: Me hakkame kasutama Blocklyt, visuaalse programmeerimise keelt, kus
          koodi kirjutamiseks lohistatakse koodiplokid sobivasse järjestusse.
      3:
        image: notes/hoc1_3.jpg
        text: Enamik koodi on eelnevalt sisestatud, kuid Blockly on rohkem visuaalne.
          Igale plokile vastab rida "päris" koodi.
      4:
        image: notes/hoc1_4.jpg
        text: Te hakkate õppima arvutiteaduse põhialuseid, mõisteid mida kasutatakse
          igal pool, äppide tegemisest kuni Marsi kulguri kontrollimiseni.
      5:
        image: notes/hoc1_5.jpg
        text: Programm on lihtsalt üks komplekt juhiseid sinu arvuti jaoks.
      6:
        image: notes/hoc1_6.jpg
        text: Sinu esimese programmi eesmärk on aidata Angry Bird´i lind läbi labürindi
          et ta saaks lüüa Rohelist Siga.
      7:
        image: notes/hoc1_7.jpg
        text: Vasakul pool on labürint, kus teie programm töötab. Igale puslele on
          labürindi all juhised.
      8:
        image: notes/hoc1_8.jpg
        text: Keskmises tööriista kastis (programmi ja tööruumi vahel) on käsud Angry
          Bird´i linnule. Sa hakkad neid kasutama et ehitada oma koodi.
      9:
        image: notes/hoc1_9.jpg
        text: Paremal pool on tööruum, koht kus saad ehitada koodi. Ploki lisamiseks
          tööruumi lohista mõni element tööriistakastist tööruumi sobivasse kohta.
          Elemendi kustutamiseks lohista see nurgas olevasse prügikasti.
      10:
        image: notes/hoc1_10.jpg
        text: Iga plokk on üks juhis. Kui sa lohistad "liigu edasi" ploki oma tööruumi
          ja vajutad "Käivita Programm", liigub lind ühe koha labürindis.
      11:
        image: notes/hoc1_11.jpg
        text: Et teha rohkem kui ühte asja, saad sa lohistada mitu plokki oma tööruumi
          ja ühendada nad omavahel kokku. Lind täidab käske ülevalt alla.
      12:
        image: notes/hoc1_12.jpg
        text: Kui oled käivitanud programmi, aga tahad seda parandada ja uuesti proovida,
          vajuta nuppu Lähtesta.
      13:
        image: notes/hoc1_13.jpg
        text: Järele neile põrsastele!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Tere, mina olen JR! iga võidusõiduauto tiim vajab arvutiteadlast et
          võita. Nad analüüsivad autost pärinevaid andmeid ja panevad selle kiiremini
          liikuma.
      2:
        image: notes/stage5_2.jpg
        text: Nendes mõistatustes oled sa kunstnik, kes tõmbab joone igale poole kuhu
          ta läheb.
      3:
        image: notes/stage5_3.jpg
        text: See plokk ütleb "liigu edasi 100 pikslit." Pikslid on lihtsalt ühed
          väikesed punktikesed mis moodustavad pildi sinu ekraanil.
      4:
        image: notes/stage5_4.jpg
        text: See plokk ütleb "pööra 90 kraadi paremale." See pöörab sinu kunstnikku
          sama palju kui "pööra" plokid labürindi pusledes.
      5:
        image: notes/stage5_5.jpg
        text: Vajuta noolele kummaski plokis, et muuta seda, kui palju kunstnik edasi
          liigub või pöörab. Katseta nooli, et seda tundma õppida.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Tere, ma olen Paola! Nendes pusledes oled talunik, kes peab oma põllu
          täielikult siledaks saama, et midagi külvata.
      2:
        image: notes/stage9_2.jpg
        text: Sa pead aitama tal eemaldada kõik mullahunnikud ja aitama tal auke täita.
      3:
        image: notes/stage9_3.jpg
        text: Uued plokid eemaldavad 1 labidatäie mulda hunnikust ja panevad 1 kühvlitäie
          mulda auku.
      4:
        image: notes/stage9_4.jpg
        text: Mullahunnikud ja augud on erineva suurusega, seega pead ütlema mitut
          labidatäit kasutada.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Tere, mina olen Katie! Üks kõige põnevamaid asju arvutiteaduses on see,
          et arvutid saavad olla interaktiivsed.
      2:
        image: notes/flappy02.jpg
        text: "Ükskõik millal, kui keegi klõpsab, vajutab ekraanile või kirjutab arvutis
          või telefonis luuakse SÜNDMUS ja siin on jupp koodi mis otsustab mida teha
          kui SÜNDMUS aset leiab."
      3:
        image: notes/flappy03.jpg
        text: 'Näiteks sul võib olla mõni SÜNDMUSE- KÄSITSEJA mis ütleb "kui klikitakse,
          mängitakse heli" '
      4:
        image: notes/flappy04.jpg
        text: Kas sa oled kuulnud midagi FlappyBird´i mängust? Kasutades Sündmuse
          käsitsejaid hakkame õppima seda, kuidas teha oma FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Koodi mida sa plokkide lohistamisega "kirjutad" on arvuti jaoks käsud.
          Iga plokk on esindatud päris koodiga.
      6:
        image: notes/flappy06.jpg
        text: 'Kui vaatad oma tööruumi siis võid märgata, et seal on juba mõned rohelised
          plokid, need on "sündmuste käsitsejad" '
      7:
        image: notes/flappy07.jpg
        text: Kui sa tahad, et lind sinu hiireklõpsu peale tiibu lehvitaks, saad lisada
          "FLAP" ploki asjakohase sündmusetöötleja juurde ja nüüd sinu mängus millal
          iganes sa teed hiireklõpsu, siis lind lehvitab tiibu.
      8:
        image: notes/flappy08.jpg
        text: igas pusles tutvustame uusi sündmusi roheliste plokkidena tööruumis,
          sina saad otsustada selle üle, millise ploki sa sinna paned vastavalt nendele
          sündmustele.
      9:
        image: notes/flappy09.jpg
        text: Kui sa näed mõne ploki küljes alla suunatud nooli nagu see, siis tähendab
          see seda et sa saad ,uuta selle ploki seadeid- nagu näiteks mis heli mängitakse
          kui FlappyBird´i lind kukub vastu maad.
      10:
        image: notes/flappy10.jpg
        text: Viimases pusles saad luua oma enda mängu ja seda jagada oma sõpradega.
          Kasuta oma loovust!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Tere, olen Mark! Õpime kordusi. Korduste kasutamine ütleb arvutile,
          et ta kordaks valitud tegevuste gruppi uuesti ja uuesti, tuhandeid või isegi
          miljardeid kordi.
      2:
        image: notes/hoc2_2.jpg
        text: Selles pusles tahame, et lind liiguks viis kohta edasi, et püüda siga.
      3:
        image: notes/hoc2_3.jpg
        text: Saame kasutada uut "korda" plokki, et meid välja aidata.
      4:
        image: notes/hoc2_4.jpg
        text: Selle asemel, et lohistada viis "liigu edasi" plokki ritta, kasuta...
      5:
        image: notes/hoc2_5.jpg
        text: Pane "liigu edasi" plokk "korda" ploki sisse ja kirjuta plokki number,
          et määrata, mitu korda tegevust korrata tuleb.
      6:
        image: notes/hoc2_6.jpg
        text: 'Oluline on see et: sa saad "korda" ploki sisse rohkem kui ühe ploki.'
      7:
        image: notes/hoc2_7.jpg
        text: Naudi oma uue "korda" ploki kasutamist!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Tere, olen Chris. Enne Miami Heatiga läksin Georgiasse et õppida arvutiteaduse
          õpetajaks. Proovime uut plokki, "korda kuni" plokki.
      2:
        image: notes/hoc3_2.jpg
        text: Mis oleks, kui me ei teaks, kui kaugele peaks lind liikuma, et siga
          kätte saada?
      3:
        image: notes/hoc3_3.jpg
        text: Kui me paneme "liigu edasi" ploki "korda kuni" ploki sisse siis lind
          liigub nii kaua edasi KUNI ta jõuab seani (või põrkab seinaga kokku).
      4:
        image: notes/hoc3_4.jpg
        text: 'Oluline: nagu ennegi saame me nüüd panna mitu plokki "korda kuni" ploki
          sisse ja neid kõiki korratakse.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: Tere! Olen Bill! Õpime uue põhimõiste, "kui" avalduse. Arvuti teeb selle
          abil otsuseid.
      2:
        image: notes/hoc4_2.jpg
        text: Sa kasutad "kui" avaldust iga päev. Näiteks kui lähed hommikul õue,
          sa mõtled, et KUI õues sajab, pean kandma jopet.
      3:
        image: notes/hoc4_3.jpg
        text: Me saame zombil lasta kontrollida KAS vasakul pool on rada ja kui ta
          leiab raja vasakule siis me saame panna ta pöörama sinna suunas.
      4:
        image: notes/hoc4_4.jpg
        text: Et kirjutada selleks koodi, lohista tööruumi "kui" plokk ja pane sinna
          sisse "pööra vasakule" plokk.
      5:
        image: notes/hoc4_5.jpg
        text: Nüüd kui me paneme "liigu edasi" ploki selle kohale ja nad omakorda
          veel "korda" ploki sisse, siis iga kord kui zombi liigub siis ta kontrollib
          kas vasakule poole on rada ja sinna saab pöörata. Käsk "korda" on siin kriitilise
          tähtsusega, kuna zombi peab kontrollima rada iga astumise järel.
      6:
        image: notes/hoc4_6.jpg
        text: 'Kui avaldused on arvutiteaduses väga tähtsad. Üks esimestest programmidest,
          mille kirjutasin, oli trips-traps-trulli mäng. Selle mängu koodis oli "kui"
          avaldis mis ütles: KUI teine inimene hakkab võitma, siis tuleb blokeerida
          koht mis laseks tal võita.'
      7:
        image: notes/hoc4_7.jpg
        text: Lõbutse "kui" plokki kasutades!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Tere, minu nimi on Saloni. Ma kasutan arvutiteadust aitamaks lahendada
          probleeme tervise ja meditsiini valdkonnas. Õppigem "kui muidu" ploki kohta.
          See näeb välja nagu tavaline "kui" plokk, aga sellel on lõpus lisaosa, mis
          ütleb "muidu".
      2:
        image: notes/hoc5_2.jpg
        text: Kui ma asetan "liigu edasi" ploki kohale kus on kirjas "tee" ja ploki
          "pööra vasakule" sinna kus on kirjas "muidu", siis see tähendab, et zombi
          valib kahe valiku vahel. Kui ees on rada, siis zombi liigub edasi, kuid
          vastasel korral (ees ei ole rada) zombi pöörab vasakule.
      3:
        image: notes/hoc5_3.jpg
        text: Just nagu "kui" plokki, saame me ka "kui muidu" plokki lisada "korda"
          ploki sisse, selliselt et zombi liigub järjest edasi ja "kui muidu" plokk
          kontrollib jooksvalt kas on võimalik kuhugi pöörata.
      4:
        image: notes/hoc5_4.jpg
        text: Nüüd vii need zombid sinna kuhu nad kuuluvad!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Kui-muidu lause on otsus kahe valiku vahel. Vaatame kuidas me saame
          kasutada kui-muidu lauset oma sõbra orav Scrat abil.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: See plokk näeb välja samasugune nagu "kui" plokk, aga seal on allosas
          täiendav osa mis ütleb "muidu". Kui ma panen "liigu edasi" ploki sinna kus
          on kirjas "tee" ja ploki "pööra vasakule" sinna kus on kirjas "muidu", siis
          orav Scrat liigub edasi kui ees on rada. Kui rada ees ei ole, siis Scrat
          pöörab vasakule.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: See teeb otsuse ja vastavalt sellele otsusele teeb ühte kahest tegevusest.
          Ja just nagu "kui" plokke, saad sa ka "kui muidu" plokke lisada "korda"
          plokkide sisse.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Aitame Scratil, oraval jõuda tammetõruni!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Tere, olen Brina, Instagrami insener. Funktsioon on kindel rida koodi,
          mida sa tahad korduvalt kasutada, selle asemel et kirjutada seda koodi iga
          kord välja, saad sa kasutada ühte plokki.
      2:
        image: notes/stage13_2.jpg
        text: Me hakkame õppima kuidas defineerida funktsiooni. Funktsiooni definitsioonidel
          on nurgas täht. Funktsiooni nimetus on kirjutatud ülemisele joonele.
      3:
        image: notes/stage13_3.jpg
        text: Plokid, mis lähevad definitsiooni sisse, ütlevad meile, mida see teeb.
          Selle funktsiooni definitsioon on "täida 5" ja see on tehtud "korda" ja
          "täida" plokist.
      4:
        image: notes/stage13_4.jpg
        text: Definitsioon paikneb tööruumis, aga meie talunik ei käivita funktsiooni,
          kuni lohistame funktsioonide kategooriast välja oma "täida 5" funktsiooni
          ploki.
      5:
        image: notes/stage13_5.jpg
        text: 'Paneme "fun"i tagasi "FUNction"isse! (tõlkimatu nali) '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Tere, mina olen Makinde! Õpime "kuni" ploki kohta. '
      2:
        image: notes/stage9_6.jpg
        text: '"Tingimusel plokk" teeb mida iganes sa selle sisse paned NIIKAUA KUNI
          väide üleval on TÕENE.'
      3:
        image: notes/stage9_7.jpg
        text: Näiteks, kui talunik on hunniku otsas, jätkab ta 1 kühvlitäie eemaldamist
          tingimusel, et tema all on veel hunnik.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: tere, olen Trina, töötan Pixaris. Ma olen töötanud paljude filmide kallal,
          kaasa arvatud Shreki.
      2:
        image: notes/stage11_2.jpg
        text: See on meie uus "loendur" tsükkel. See sooritab korduvalt toiminguid,
          aga sa saad tegevusi igal korra jaoks natuke muuta.
      3:
        image: notes/stage11_3.jpg
        text: Siin näites meie "loendaja" silmus ütleb "loenda loendajaga alates 50st
          kuni 90ni, 10ne kaupa" ja selle sees meil on meie "joonista ruut" plokk.
          Lohista "loendaja" plokk sektsioonist "muutujad" kohale "pikkus".
      4:
        image: notes/stage11_4.jpg
        text: See tähendab, et meie kunstnik joonistab ruudu mille külgede pikkus
          on 50 pikslit, siis lisab sellele 10 ja joonistab ruutu mille külgede pikkus
          on 60 pikslit. Siis see lisab järjest juurde 10 ja joonistab ruute kuni
          saavutab küljepikkuse 90. Seega meil saavad olema ruudud küljepikkustega
          50, 60, 70, 80 ja 90 pikslit.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Tere, mina olen Janete ja ma olen Zynga insener.
      2:
        image: notes/stage15_2.jpg
        text: Mis siis kui me tahame joonistada hunniku kolmnurki ja tahame et nende
          pikkused oleksid erinevas suuruses?
      3:
        image: notes/stage15_3.jpg
        text: Me saaksime kogu selle koodi kirjutada käsitsi välja või me saame kasutada
          parameetritega funktsiooni.
      4:
        image: notes/stage15_4.jpg
        text: Selle tegemiseks klõpsa sinisel tähekesel mis asub "joonista kolmnurk"
          funktsiooni definitsioonil. Siis lohista "sisendi nimi" plokki "sisend".
      5:
        image: notes/stage15_5.jpg
        text: Kui sa siis kirjutad "pikkus" kohale kus on kirjas "x" ja vajutad "Enter",
          lood sa pikkuse sisendi oma funktsiooni jaoks.
      6:
        image: notes/stage15_6.jpg
        text: Siis klõpsa tähekesel. Nüüd sa tahad klõpsata muutujate kategoorial
          ja lohistada "pikkuse" ploki oma funktsioonide definitsiooni sisse "liigu
          edasi" plokki. Ja lohista vana numbri plokk ära.
      7:
        image: notes/stage15_7.jpg
        text: Et kasutada oma parameetritega funktsiooni, klõpsa funktsioonide kategoorial
          ja lohista välja oma "joonista kolmnurk koos pikkusega" funktsioon.
      8:
        image: notes/stage15_8.jpg
        text: Nüüd sa saad kasutada matemaatika plokki, sisestamaks erinevaid numbreid,
          et joonistada erineva suurusega kolmnurki.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: "Õnnitlused! Koos viimase lahendatud puslega kirjutasid sa just koodi,
          mis saab öelda igale robotile, kuidas leida tee läbi iga pikkusega mitte-hargneva
          labürindi või tunneli, olgu see siis zombi, lind, marsi kulgur või isegi
          isesõitev auto."
      2:
        image: notes/hoc6_2.jpg
        text: Põhimõisted, mida sa kasutasid, on iga programmi või rakenduse südames,
          mida sa eales proovid. Me õppisime silmuste, "korda kuni" lausete, "kui"
          lausete ja "kui muidu" lausete kohta.
      3:
        image: notes/hoc6_3.jpg
        text: Kui sulle meeldis su esimene kooditund, külasta code.org veebilehte,
          et jätkata oma haridust arvutiteaduses. Kui sa läbid meie 20 tunnise kursuse,
          oled õppinud selgeks programmeerimise põhialused ja saad hakata õppima kuidas
          kirjutada telefonirakendusi, robotite juhiseid, mänge ja palju muud.
      4:
        image: notes/hoc6_4.jpg
        text: 'Tehnoloogia muudab kõike, mida teeme ja pole oluline, kas oled noor
          või vana: programmeerimine on lõbus, see on loov ja igaüks saab seda õppida!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Märkused lisanduvad peagi!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Tere, olen Lyndsey. Ma modelleerin, näitlen ja kirjutan oma äppe. Kasutame
          koodi et panna Anna ja Elsa seltsima kui nad jää maagiat ja ilu avastavad.
      2:
        image: notes/frozen1_2.jpg
        text: Sa saad teha lumehelbeid ja teisi mustreid kui sa uisutad. Nii saad
          teha oma talve võlumaa, mida saad ka oma sõpradega jagada.
      3:
        image: notes/frozen1_3.jpg
        text: Järgmises tunnis hakkame õppima koodi kirjutamise põhialuseid. Traditsiooniline
          programmeerimine on tavaliselt teksti kirjutamine aga meie kasutame Blocklyt,
          see kasutab visuaalseid plokke, mida saad lohistada, et programme kirjutada.
          Sel meetodil õpitakse põhitõdesid isegi ülikoolides. Tegelikult loote ikkagi
          koodi, hoolimata sellest, et te ise näete ainult plokke.
      4:
        image: notes/frozen1_4.jpg
        text: Programm on juhiste kogum, mis ütleb arvutile mida teha. Ehitame koodi
          või programmi, mis aitab Elsal luua lihtsa sirgjoone. Hakkame seda edaspidi
          kasutama et luua raskemaid mustreid.
      5:
        image: notes/frozen1_5.jpg
        text: Sinu ekraan on jaotatud kolmeks põhiosaks. Vasakul on jääväljak, koht
          kus sinu programm käib. Iga taseme juhised on selle alla kirjutatud.
      6:
        image: notes/frozen1_6.jpg
        text: Keskmine ala on tööriistakast ja iga plokk seal on tegevus mida Elsa
          ja Anna teha saavad.
      7:
        image: notes/frozen1_7.jpg
        text: Valget ala vasakul nimetatakse tööruumiks, see on koht kus sa oma programmi
          ehitama hakkad. Jääl liikumiseks kasuta "Liigu Edasi" plokki.
      8:
        image: notes/frozen1_8.jpg
        text: Plokk "Liigu Edasi" plokk tähendab "liigu edasi 100 piksli võrra." Kui
          vajutad "Käivita", mis juhtub? Elsa liigub ekraanil edasi 100 pikslit.
      9:
        image: notes/frozen1_9.jpg
        text: Teine plokk mis meil siin pusles on ütleb "pööra paremale 90 kraadi
          võrra." "pööra paremale" plokk paneb Elsa pöörama teatud nurga. Saad katsetada
          kui kaugele tahad Elsat pöörama panna. Nurka mõõdetakse Elsa ette jäävast
          rajast. Niisiis see pöörab 90 kraadi. Ja see pöörab 120 kraadi.
      10:
        image: notes/frozen1_10.jpg
        text: Pea meeles, sa saad ploki peal olevale noolele vajutades muuta seda,
          kui palju tegelane pöörab või edasi liigub.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Tere, mina olen Paola! Arvutid on väga head tegevuste kordamisel. Sa
          saad loendada kümneni, kahekümneni või sajani. Aga arvuti saab loendada
          miljardini või triljonini. Ta ei tüdine ära ja see võtab ainult mõned sekundid.
          Olgu siis loendamine või joonistamine või ükskõik mis muu - arvutid saavad
          korrata tegevusi sadu või isegi miljardeid kordi.
      2:
        image: notes/frozen2_2.jpg
        text: Programmeerimises kutsume seda silmuseks. Silmus on vahend oma koodi
          üha uuesti ja uuesti kordamiseks. Järgmise pusle jaoks on sinu eesmärk aidata
          Annal luua ruut kasutades "korda" plokki.
      3:
        image: notes/frozen2_3.jpg
        text: Kõik plokid, mille lisad "Kordus" ploki sisse korratakse järjekorras
          ja just nii mitu korda nagu sa tahad.
      4:
        image: notes/frozen2_4.jpg
        text: Ruudu joonistamiseks võid kasutada plokki "liigu edasi" ja "pööra paremale"
          4 korda. Aga lihtsam viis on öelda arvutile üks kord "liigu edasi" ja "pööra
          90 kraadi paremale" ning siis käskida korrata neid kahte tegevust 4 korda.
          Selleks pead panema plokid "liigu edasi" ja "pööra paremale" ploki "korda"
          sisse.
      5:
        image: notes/frozen2_5.jpg
        text: Pea meeles, sa saad "korda" ploki väärtuse muuta ükskõik milleks ja
          see kordabki plokki sisestatud tegevusi niipalju kordi.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Tere, olen Chris Bosh. Olen professionaalne korvpallur, kirjutasin koodi
          kolledžis.
      2:
        image: notes/frozen3_2.jpg
        text: "Üks kõige tähtsamaid küsimusi arvutiteaduses on see, kuidas määratleda
          uusi käske. Enamikus arvutikeeltes on kõigest umbes 100 sõna või käsku.
          Ja võlu peitubki selles, kuidas nendest ehitusplokkidest kokku panna omaenda
          uusi sõnu."
      3:
        image: notes/frozen3_3.jpg
        text: Kui oled arvutile õpetanud, kuidas käsujada abil mõnd tegevust sooritada,
          saad sellele tegevusele ise nime välja mõelda, et seda oleks hiljem lihtne
          korrata. Kui määratled oma käsu ja annad sellele nime, kutsutakse seda funktsiooniks.
      4:
        image: notes/frozen3_4.jpg
        text: Tere, olen Jess! Plokkidega programmeerides kasutad funktsioone, kui
          on sari tegevusi, mida tahad korrata palju kordi. Näiteks oled kirjutanud
          koodi ruudu loomiseks.
      5:
        image: notes/frozen3_5.jpg
        text: 'Sa saad seda kutsuda funktsiooniks "loo ruut" '
      6:
        image: notes/frozen3_6.jpg
        text: Nüüd on sul uus plokk, mida saad kasutada mitu korda, et luua mitu ruutu.
      7:
        image: notes/frozen3_7.jpg
        text: Paljude lihtsate kujunditega saab luua palju keerulisemaid mustreid.
          Järgmises pusles saad kasutada varem kirjutatud koodi ringi tegemiseks uue
          funktsioonina, millega saab teha eri suuruses ringe. Kas oskad kasutada
          seda, et aidata Elsal luua keerulisi ja ilusaid mustreid lumes?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "Loome mängu Play Labiga. Headel mängudel on lugu ja igas loos on tegelased.
          Õpime, kuidas panna tegelased, nagu nõiad, tulnukad ja loomad kõnelema,
          liikuma ja \tomavahel suhtlema. Selle tunni lõpus oskad teha mängu algusest
          lõpuni ja jagada seda oma sõpradega."
      2:
        image: notes/playlab_intro_2.png
        text: Sinu ekraan on jagatud kolmeks põhiosaks. Vasakul pool on see kus sinu
          programm käib. Iga taseme juhend on selle alla kirjutatud.
      3:
        image: notes/playlab_intro_3.png
        text: Keskmine ala on tööriistakast, milles on plokid mida sinu pusles vaja
          läheb. Iga plokk on jupike koodi. Valget ala vasakul kutsutakse tööruumiks,
          see on koht kus sa oma programmi ehitad.
      4:
        image: notes/playlab_intro_4.png
        text: Alustuseks pead ühendama oma plokid oranži "pärast käivitamist" ploki
          külge. Saad ühendada mitu plokki üksteise külge lohistades neid tööruumi,
          teiste plokkide lähedusse kuni näed kollast joont, seejärel nad kinnituvad
          üksteise külge.
      5:
        image: notes/playlab_intro_5.png
        text: Selles esimeses pusles on meie tegelaseks pingviin ja me paneme ta ütlema
          "Tere!" Selleks lohista "ütle" plokk tööruumi ja ühenda see "pärast käivitamist"
          plokiga, seejärel kirjuta tekstikasti "Tere." Kui tahame siis saame pingviini
          liikuma ka panna. Pingviini liikumapanemiseks kasuta "liigu vasakule" ja
          "liigu paremale" plokke. Kui oled koodi kokku saanud vajuta "käivita" nuppu
          ja vaata mis sa programmeerisid.
      6:
        image: notes/playlab_intro_6.png
        text: Alusta, ja lõpuks oskad luua oma mängu igasuguste mängijatega, kes omavahel
          suhtlevad, on rõõmsad või kurvad, koguvad punkte, loobivad tulepalle või
          panevad üksteist lausa kaduma. Ise otsustad, milline on su mäng ja mida
          tahad selles teha.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Nüüd hakkame õppima midagi sellist, mida programmeerijad iga päev kasutavad.
          Neid kutsutakse sündmusteks. Sündmus ütleb programmile et tuleb jälgida
          kui midagi juhtub. Kui mingi kindel asi juhtub siis rakendab programm eelnevalt
          valitud käsu.
      2:
        image: notes/playlab_events_2.png
        text: Sündmusteks on näiteks hiireklõpsu, noolenupu või ekraani puudutamise
          jälgimine.
      3:
        image: notes/playlab_events_3.png
        text: Nüüd paneme kosmoseroboti tervitama maalasi, kui mängija temal klõpsab.
          Kasutame plokki "kui tegelast puudutatakse" ja ühendame selle plokiga "ütle".
          Kui mängija klõpsab kosmoserobotil, käivitatakse kõik tegevused, mis on
          ühendatud sündmuseplokiga "kui tegelast puudutatakse". Mida ütleb sinu tulnukas?
      4:
        image: notes/playlab_events_4.png
        text: Lisaks on olemas "kui nool" plokid. Kui sa ühendad "liigu" plokid nendega
          saad tegelasi liigutada üles, alla, vasakule või paremale. Samm sammult
          muutub mäng niimoodi interaktiivsemaks.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: See on "korda igavesti" plokk. Kõik mis selle ploki sees on korratakse
          mängu jooksul igavesti.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Kui me tahame, et mõni tegelane midagi korduvalt teeks, ilma et mängija
          midagi peaks tegema, paneme me need plokid "korda igavesti" ploki sisse.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Järgmises pusles pead aitama võluril oma kuningriigi piire valvata.
          Selleks pead pidevalt liikuma vasakule ja paremale. Kui õpid selgeks, kuidas
          töötavad käskluste kordused, hoiad hiljem palju aega kokku ning see on kasulik
          ka siis, kui ise oma mängu ehitad.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Need on joonistamise plokid. Kasuta õiget plokki, et kunstnik liiguks
          sinna, kuhu ta peab minema, et lõpetada hallid jooned.
      2:
        image: notes/C1_artist_intro_2.png
        text: Need on hüppamise plokid. Kui neid kasutad, siis kunstnik liigub, kuid
          ei joonista. Kasuta neid plokke, et hüpata järgmise halli joone juurde.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Kas need mesilased pole mitte ägedad? Nendes järgmistes mängudes on
          sinu eesmärk aidata mesilasel jõuda lilledeni ja koguda sealt nektarit ning
          lennata üle mesikärgede ning koguda sealt mett. Selle ülesande täitmiseks
          pead kasutama "kogu nektarit" ja "valmista mett" plokke.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Igal lillel on erinev kogus nektarit: 1, 2, 3 või rohkem. Me teame,
          kui palju on punases lilles nektarit pisikese numbri järgi, mis nurgas on.
          Kogu kindlasti kokku kogu nektar enne kui edasi liigud. Lisaks on igas meekärjes
          erinev kogus mett. 1, 2, 3 või rohkem. Kogu kindlasti kokku kogu mesi, enne
          kui edasi liigud.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Kui oled kokku kogunud kogu nektari ja kogu mee, pääsed järgmisele tasemele.
          Kui ei, siis pead seda taset kordama. Proovi ja katseta, mis tunne on olla
          mesilase programmeerija!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Tsükkel on tegevuse kordamine. Kui ma lähen taru kontrollima, vaatan
          ma raami ja panen selle siis tagasi. Ma kordan sama tegevust mitu korda.
          Tegevuste kordumine ongi tsükkel.
      2:
        image: notes/C1_bee_loops_2.png
        text: Sellel tasemel tahame me, et mesilane korjaks kokku 3 ühikut nektarit
          lillelt. Selle asemel, et kasutada "kogu nektar" plokki, kasutame hoopis
          korduse plokki, et koguda nektarit 3 korda. Vajuta "käivita" ning testi,
          kas jõudsid õige lahenduseni!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Selle tunni nimi on suursündmus. Siin räägitakse sellest, kuidas programme
          juhtida ja kuidas muuta töötavat programmi jooksvalt sündmustega, nagu nupuvajutus
          või hiireklõps.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Selles tunnis juhitakse sind paberist kaugjuhtimispuldiga. See on just
          nagu arvutimäng päris elus.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Sündmus on tegevus, mille tagajärjel midagi juhtub. Näiteks kui klõpsad
          hiirenuppu ja veebileht laaditakse, siis see on sündmus. Ka tahvelarvuti
          ekraani puudutamine, et lehte kerida, on sündmus. Sündmused on hea viis
          lasta kasutajal juhtida programmi, kui nad seda peavad või tahavad.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Me kõik reageerime asjadele, mis juhtuvad. Kõht on tühi ja me läheme
          külmkapist süüa otsima. Kuuleme, et postiljon tuleb ja paneb kirjad meie
          postkasti, mille peale läheme postkasti vaatama. Need on just nagu nupu
          vajutamise või juhtkangi liigutamise sündmused. Midagi juhtub, mille peale
          me siis midagi teeme.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: Videomängudes on sündmus nimega "uuenda", mis toimub 30 või 60 korda
          sekundis. Videomängude programmeerijate jaoks on see kohati isegi palju
          tähtsam sündmus kui nupud või juhtkang.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: 'Põhisündmus, mida me ootame, on tiks "uuenda". Alles siis vaatame,
          mida teeb juhtkang selle tiksu ajal. Ütleme: "Hmm, kas keegi vajutas selle
          kaadri sees nuppu? Jah või ei?" Ilma sündmusteta ei liiguks mängija, ei
          saaks hüpata ega juhtida toimuvat. Videomängus ei oleks mingeid animatsioone.'
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Liivaskulptuure tehes lihtsalt pead teadma, et ebaõnnestumine käib asja
          juurde. Aga kui oled järjekindel, läheb ainult paremaks ja põnevamaks. Järjekindlus
          on kõige tähtsam. Ära anna alla ja see hakkab sulle meeldima.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Selle tunni nimi on vundamendi ehitus. Siin lahendame ühte väga rasket
          ülesannet. Pead mõtlema välja, kuidas teha struktuur, mis on vähemalt sama
          kõrge kui üks nendest topsidest ja see peab olema piisavalt tugev, et kanda
          raamatu raskust.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Võib juhtuda, et meie looming ei tule välja. Võib olla pettume ja tahame
          alla anda. Selliseid hetki võib olla palju, aga kui proovime ikka uuesti
          ja uuesti ning anname endast alati parima, siis lõpuks saame kindlasti hakkama.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Järjekindlus tähendab jätkamist, kui sa ei taha midagi muud kui ainult
          alla anda. Aga kui sa tahad luua midagi uut ja erilist, siis pead arvestama
          paljude ebaõnnestumistega sellel teel.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Järjekindluse trikk seisneb selles, et pead otsustama, et jätkad ja
          õpid oma vigadest, mitte ei anna alla, sest oled pettunud. Pettumine tähendab
          tegelikult ainult seda, et nurga taga ootab midagi imelist. Ära siis anna
          alla enne, kui oled selleni jõudnud. Juhuu!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Tere, mina olen Miral Kotb ja ma olen iLuminate’i looja! Me kasutame
          oma töös nii tantsude kui ka valgusrüüde programmeerimiseks tsükleid. Tsükkel
          on tegevuse kordamine uuesti ja uuesti.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Kui kordad mingit tegevust mitu korda, nagu see, kuidas ma hularõngast
          keerutan, siis see on selle tegevuse tsükkel. See on tsükkel. See on tsükkel.
          Ja see on tsükkel.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Täna teeme tantsupeo. Esitame tsükleid uuest tantsust, mille nimi on
          Iteratsioon. Seda tantsides õpime tundma tsükleid. Õpid ära mõned lihtsad
          sammud ja pead neid kordama uuesti ja uuesti, et tants lõpuni tantsida.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Need sammud tuleb ära õppida. Plaksuta käsi. Pane käed pea taha. Pane
          käed puusa. Tõsta vasak käsi üles. Tõsta parem käsi üles. Lihtne, kas pole?
          Pane tähele, et neid juhiseid saab lühemaks teha, kui panna mõned tantsusammud
          tsüklitesse.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Me päriselt kasutamegi tsükleid oma tantsudes. Tantsijad kannavad arvuteid,
          mis on kõik omavahel võrku ühendatud. Ma näiteks lasen valguse tsüklis uuesti
          ja uuesti läbi samade tantsijate. Tsüklis on mul näiteks iteratsioon, kus
          ma tahan lasta tsükli läbi nende kuue tantsija uuesti ja uuesti ja siis
          selles tsüklis tahan suurendada valguse kiirust. Ja see kõik luuakse tsüklitega.
          Tsüklid on arvutiteaduses olulised, sest need teevad meie töö lühemaks ja
          lihtsamaks.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Selle tunni nimi on Happy Maps. Täna aitame oma väikesel karvasel sõbral
          Flurbil jõuda puuviljani.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Pane Flurb oma puuviljani minema. Selleks pead mõtlema välja, mis suunas
          peab Flurb minema ja suunama teda nooltega. Mis suunas peab Flurb minema,
          et ta jõuaks õunani? Pane ta otse üles liikuma.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Et ta sinna läheks, tee ring ümber suuna, milles ta peab liikuma.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Algoritmi loomiseks kleebi nooled selle kaardi kõrvale, mida proovid
          lahendada. Teine on samasugune, aga läheb allasuunas.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: See on nagu paberiga programmeerimine. Nii lihtne ongi!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: '"Debugging" tähendab vigade leidmist ja parandamist. Probleemide lahendamiseks
          palju erinevaid võimalusi. Kõige lihtsam viis on liikuda edasi samm sammult
          kuni leiad midagi, mis pole õigesti. Näiteks proovin trikki poomil, kuid
          muudkui kukun maha.'
      2:
        image: notes/C1_maze_debugging_2.png
        text: Ma käisin kõik sammud läbi ning sain aru, mis oli valesti. Ma ei pannud
          oma käsi õigesti poomile. Nüüd muutsin käte asendit ning proovisin trikki
          uuesti ja kõik toimis. Mul on väga hea meel, et ma selle vea avastasin ja
          parandasin.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Vigade parandamise õppimiseks alustame nende plokkidega, mis siin juba
          olemas on. Nagu näed, siis need plokid ei vii sind eesmärgini. Me peame
          lahendust parandama. Mis oli valesti? Kas märkad, et oleksid pidanud ühe
          ploki võrra veel läänepoole liikuma.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Parandame selle ära nii, et lisame veel ühe läänesuunalise ploki (west)
          ning vaatame, kas asi läks paremaks. Jee, sul õnnestus viga parandada!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Selles mängus pead linnu põrsa juurde viima. Vaata puslet ning mõtle,
          mis suunas peaks lind liikuma.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Pead lohistama need plokid tööriistakastist tööruumi. Veendu, et see
          oleks ploki "pärast käivitamist" all ja kui arvad, et õige lahendus on käes,
          siis klõpsa nuppu "Käivita" ning vaata, kuidas lind läheb sea juurde.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "Üks asi, millega arvutid suurepäraselt toime tulevad, on kordused.
          Kui inimese jaoks läheks ühe ja sama asja kordamine igavaks, siis arvuti
          võib sama asja korrata miljon või biljon korda ning temal ei hakka kunagi
          igav."
      2:
        image: notes/C1_maze_loops_2.png
        text: Näiteks kui tahaksin kõigile Facebookis palju õnne soovida e-kirjaga,
          siis võtaks see mul rohkem kui sajandi aega. Aga piisab vaid sellest, et
          kirjutan paar rida koodi ning kasutan süsteemi ja saan kõigile kiirelt õnnesoovid
          ära saata.
      3:
        image: notes/C1_maze_loops_3.png
        text: Et lind sellel tasemel sea juurde läheks, pead selle asemel, et lohistad
          kolm põhjasuunalist plokki (North) tööruumi, kasutama hoopis "korda" plokki.
          Lohista "korda" plokk tööruumi ja sisesta number 3. Siis lohista plokk "liigu
          põhjasuunas" ploki "korda" sisse ja vajuta nuppu "Käivita", et vaadata,
          kas tegid kõik õigesti. Palju õnne! Saidki hakkama!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Selle tunni nimi on liiguta, liiguta! Me kirjutame üheskoos koodi, mis
          aitab meie sõpradel jõuda kompassi juurest naerunäo juurde.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Aga naerunägu on tagurpidi ja ainult üks inimene teab, kuidas kohale
          jõuda. Paneme selle programmi käima.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Programm on algoritm, mis on kodeeritud nii, et selle saaks mingis masinas
          käivitada. Enamus meist kujutab programme ette kui midagi, mis kirjutatakse
          arvuti jaoks. Programmid sobivad selleks väga hästi, aga neist on abi ka
          mujal. Saad programmeerida oma enda mänge või panna roboti asju tegema.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Tere, minu nimi on Jeremiah. Ma olen seitse aastat vana. Mulle meeldib
          oma ema arvutis mängida, kuid ma küsin alati enne luba. "Ema, kas ma võin
          arvutisse minna? Olgu, kallis!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Ma armastan oma ema arvutit, kuna saan seal internetti kasutada. Internett
          on umbes nagu meie naabruskond. Sa saad külastada lahedaid kohtasid, rääkida
          pereliikmete ja sõpradega ning õppida palju uusi asju.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Eile käisin ma oma kodu lähedal loomaaias. Ma nägin beebi-sebrat. Ma
          tegin temast pildi ning muutsin ka triipude värve ning lisasin ta seejärel
          oma lahedate loomade kogusse. Lahe! Hiljem käisin ma ühes kauges paigas.
          Ma käisin Keenias. See on riik Aafrikas ja seal elab hästi palju sebrasid.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Mõnikord internetis ma räägin inimestega, keda ma tunnen, kuid kes elavad
          kaugemalt. Näiteks oma vanaemaga. Tere, vanaema! Ta küpsetab mulle küpsiseid
          ja saadab need mulle sünnipäevaks. "Nämma, oleks internetti võimalik nuusutada!"
          Ma saan internetis erinevate inimestega rääkida. Näiteks oma nõbuga, kuid
          ma räägin alati ainult nendega, keda ma päriselt tunnen.
      5:
        image: notes/C1_going_places_safely_5.png
        text: Mulle meeldib interneti juures kõige rohkem see, et seal saab toredaid
          mänge mängida. Mulle meeldib ka joonistada ning uusi asju luua ning neid
          oma sõpradega jagada. See on lahe! Mõnikord ma käin veebilehtedel, kus ma
          õpin uusi asju, kuid ma käin ainult nendel lehekülgedel, mis on minu jaoks
          mõeldud. Vaata, dinosaurus!
      6:
        image: notes/C1_going_places_safely_6.png
        text: Internet on tore. Aga just nagu pead olema tänavat ületades tähelepanelik,
          pead ka internetis ettevaatlik olema. Siin on 3 asja, mida peaksid meeles
          pidama. 1. reegel - küsi esmalt luba oma vanematelt. 2. reegel - räägi ainult
          inimestega, keda ta päriselt tunned. 3. reegel - käi vaid lehekülgedel,
          mis on sinuvanustele mõeldud.
      7:
        image: notes/C1_going_places_safely_7.png
        text: Oli tore, kuid nüüd on õhtusöögi aeg! Ma login nüüd välja. Ei jõua ära
          oodata, et saaksin uuesti sisse logida.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Täna õpime paarisprogrammeerimist. Paarisprogrammeerimises teete meeskonnatööd.
          Miks peaks kaks inimest kasutama ühte arvutit? Sest kaks pead on parem kui
          üks. Paaris programmeerides istute koos oma kaaslasega ühe arvuti juures
          ja töötate mõlemad sama projektiga.
      2:
        image: notes/C1_pair_programming_2.png
        text: Paarisprogrammeerimises on üks juht ja teine kaardilugeja, just nagu
          autot juhtides. Juht istub arvuti juures, kasutab klaviatuuri ja hiirt või
          puuteekraani ja teeb arvutis põhitoiminguid. Teine on kaardilugeja, kes
          abistab juhti, vastab juhi küsimustele ja näitab, kus võib olla probleeme
          või vigu.
      3:
        image: notes/C1_pair_programming_3.png
        text: 'Eduka paarisprogrammeerimise võti peitub suhtlemises. Ole viisakas,
          ära solva, ära kamanda, sest kellelegi ei meeldi, kui autojuhti kogu aeg
          kõrvalt õpetatakse. Peaksite oma partneriga kogu aeg rääkima. Juht selgitab,
          mida ta parajasti teeb. Ja kaardilugeja võib aidata soovitada, mida järgmiseks
          teha. '
      4:
        image: notes/C1_pair_programming_4.png
        text: Kaardilugeja peaks nägema suurt pilti ja juht keskenduma üksikasjadele.
          Mõlemad rollid on tähtsad. Paarisprogrammeerimine on meeskonnatöö.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Selle tunni teema on „Seemne istutamine“ ja selles selgitatakse, mis
          on algoritmid. Algoritmid on juhised, mis selgitavad, mis järjekorras midagi
          tehakse. Isegi igapäevased tegevused nagu hommikueine söömine ja hambapesu
          on algoritmid, mille sooritame väikeste sammude kaupa.
      2:
        image: notes/C1_planting_seed_2.png
        text: Arvutid on väga nutikad, kuid nad saavad sinust aru ainult juhul, kui
          selgitad neile täpselt ja samm-sammult, mida sa tahad. Algoritmide juures
          on tore see, et kui järgid juhiseid kindlas järjekorras, võid valmis saada
          midagi, mida sa varem teha ei osanud. See on nagu retsepti järgi söögitegemine.
      3:
        image: notes/C1_planting_seed_3.png
        text: 'Täna istutame algoritmi abil seemneid. Lõika pildid lahti ja loo omaenda
          algoritm. Vali pildid, mis kujutavad seemne istutamiseks vajalikke samme,
          ja sea need õigesse järjekorda. '
      4:
        image: notes/C1_planting_seed_4.png
        text: 'Nüüd on aeg vaadata, kas sinu algoritm toimib. Järgi algoritmi samme
          väga hoolikalt. Kas need on õiges järjekorras? Kas sul õnnestus seeme algoritmi
          järgides maha istutada? See on nagu piltidega programmeerimine! '
      5:
        image: notes/C1_planting_seed_5.png
        text: "Šokolaadivalmistamise protsess koosneb mitmest suurest sammust ja iga
          suur samm koosneb paljudest väiksematest sammudest. Saame valida erinevate
          retseptide ja algoritmide vahel, sõltuvalt sellest, mis maitsega šokolaadi
          soovime. Iga samm, isegi kõige väiksem, on nii oluline, et ilma seda läbimata
          ei saa sooritada ka ülejäänud toiminguid. On väga tähtis luua algoritme,
          millest teised aru saavad. Seepärast tuleb iga samm kirja panna nii, et
          ükskõik kes seda teeb, oleks tulemus sama.  "
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: 'On aeg loominguliseks tegevuseks! Kasutage oma koodikirjutamise oskusi
          selleks, et jutustada üks lugu. Teie loos on mitu tegelast ja te saate panna
          need tegelased rääkima ja omavahel suhtlema. Hakake mõtlema, millist lugu
          te rääkida soovite. '
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: Kass on alati koera kartnud. Aga mis saab siis, kui kass mõistab, et
          koer püüab kena olla? Kogu tegevuse käivitab „pärast käivitamist“. Plokk
          „liiguta“ liigutab tegelast ja plokk „ütle“ paneb tegelase ütlema seda,
          mida sa tipid.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: See on tegelaste kokkupõrkamise plokk („when actors collide“), mida
          saab teiste plokkidega siduda.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Tegin nii, et koer tuleks ja ütleks „Hei!“, aga kass hakkas kartma ja
          jooksis minema. „Aah!“ Kui aega oleks rohkem, oleks lool olnud õnnelik lõpp.
          Lõpp!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: See on sõnamesilase tase. Liiguta mesilast pusletükkide abil. Liikudes
          kogub mesilane tähti, millest saad moodustada sõna.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Vaata, kas saad tähthaaval moodustada valges kastis antud sõna. Aga
          ole ettevaatlik! Valesse suunda minnes lisatakse tähti, mis sõnasse ei sobi.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "Üks asi, millega arvutid suurepäraselt toime tulevad, on kordused.
          Kui inimese jaoks läheks ühe ja sama asja kordamine igavaks, siis arvuti
          võib sama asja korrata miljon või biljon korda ning temal ei hakka kunagi
          igav."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Näiteks kui tahaksin kõigile Facebookis palju õnne soovida e-kirjaga,
          siis võtaks see mul rohkem kui sajandi aega. Aga piisab vaid sellest, et
          kirjutan paar rida koodi ning kasutan süsteemi ja saan kõigile kiirelt õnnesoovid
          ära saata.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: 'Selles näites on sinu eesmärk liigutada lindu nii, et see tabaks siga.
          Kui kasutame kordusplokki, on see väga lihtne. Võid anda arvutile viis korda
          edasiliikumise käsu, et lind liiguks iga kord ühe sammu võrra seale lähemale,
          või käskida arvutil lihtsalt üks kord edasi liikuda ja siis käskida tal
          seda viis korda korrata ja tulemus on sama.  '
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Selleks pead välja lohistama edasiliikumise käsu ja paigutama selle
          kordusploki sisse. Siis klõpsa kordusplokil ja ütle, mitu korda tuleb plokki
          korrata, et lind astuks soovitud arvul samme.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Kordusplokki võib panna nii palju käske, kui soovid. Selles näites annad
          linnule käsu edasi liikuda ja vasakule pöörata, mida tehakse viis korda.
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Sa ei pääseks isegi võistlema, kui sul ei ole meeskonnas inimesi, kes
          on arvutiteaduses kodus, sest autod koguvad nii palju andmeid. On vaja inimesi,
          kes oskavad kirjutada programme, mis nuputavad välja, kuidas paremaks saada.
      2:
        image: notes/C2_artist_intro_2.png
        text: Nendes mängudes oled sina kunstnik, kes joonistab pliiatsitega erinevaid
          kujundeid. Kuhu iganes kunstnik liigub, sinna jääb joon järgi.
      3:
        image: notes/C2_artist_intro_3.png
        text: Lõuendil ringi liikumiseks kasutad edasiliikumise plokki. Edasiliikumise
          plokk annab korralduse liikuda edasi 100 piksli võrra. Kui vajutad "Käivita",
          mis juhtub? Kunstnik liigub edasi 100 pikslit. Pikslid on põhimõtteliselt
          tillukesed ruudud arvutiekraanil.
      4:
        image: notes/C2_artist_intro_4.png
        text: Teine plokk ütleb „Pööra 90 kraadi paremale“. Kui selle ploki välja
          lohistame, saame kunstnikku pöörata. Pöörde suurust saad muuta. See on 90-kraadine
          pööre.
      5:
        image: notes/C2_artist_intro_5.png
        text: 'Ja see on 120-kraadine pööre. Pea meeles, neid väärtusi saad muuta,
          klõpsates piksleid ja kraade näitavate arvude kõrval nooltel. Head joonistamist! '
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: 'See on tingimuslause plokk. Selles öeldakse, et KUI nektarit või mett
          on vähem, sama palju või rohkem kui mingi arvväärtus, SIIS tuleb midagi
          teha. '
      2:
        image: notes/C2_bee_conditionals_2.png
        text: See on abiks juhul, kui me ei tea, kui palju on vaja nektarit või mett
          koguda – seda näitab siin see küsimärk.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: Selles näites ütleme, et KUI sinisel lillel on nektarit rohkem kui 0,
          korja nektarit. Seepeale kogub meie mesilane nektarit nii kaua, kuniks ta
          lille juurde jääb.
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: See on binaarsete käevõrude tund. Me kirjutame oma nimetähtede koodi
          käevõrule, mida saame kanda ja oma sõpradele näidata!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: "„Binaarne“ tähendab, et infot esitatakse ainult kahe võimalusena. Mõnikord
          mõeldakse seoses binaarsega ainult ühtedest ja nullidest. Aga binaarsed
          on ka sellised paarid nagu „sisse“ ja „välja“, „üles“ ja „alla“, „sees“
          ja „väljas“ või tegelikult igat sorti vastandid. "
      3:
        image: notes/C2_binary_bracelets_3.png
        text: 'Tere! Mu nimi on Orion ja ma programmeerin Play-im‘is roboteid. Arvuti
          ja roboti ajud on põhimõtteliselt väikesed elektroonilised väravad. Kui
          värav on lahti, pääseb elekter sisse, ja kui värav on kinni, elekter sisse
          ei pääse.  '
      4:
        image: notes/C2_binary_bracelets_4.png
        text: 'Roboti juures on binaarsuse näiteks roboti silmad. Roboti silmad on
          LED-lambid, mis on kas sisse või välja lülitatud. See on binaarne süsteem,
          kas üks või teine. Võime nende lampide abil kujutada binaararve. Kui meil
          on mitu robotit, võime öelda, et esimene robot on ühtede kohal ja teine
          robot on kahtede kohal, kolmas robot on neljade kohal jne. Niimoodi saame
          kujutada binaararvu. Robotid loevad selle arvu oma binaarsete silmadega
          ette.  '
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: 'Selle õppetunni nimi on „Tingimuslaused kaartidega“. Iga päev teeme
          otsuseid selle põhjal, mida me näeme ja kuuleme. '
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Tahan minna parki jalutama, aga kõigepealt pean otsustama, kas võtta
          vihmavari kaasa või mitte. Selleks vaatan aknast välja. Kui ilm on pilves,
          võtan vihmavarju kaasa. Kui mitte, siis võtan päikeseprillid. Arvan, et
          võtan parem vihmavarju. Sellest, mida ma näen ja kuulen, sõltub, mille ma
          parki kaasa võtan.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: 'Tingimuslauseid kasutatakse ka mängudes. Täna harjutame tingimuslausete
          kasutamist kaardimänguga. Selles mängus sõltub minu tõmmatud kaardist, mida
          mu sõbrad peavad tegema. Kui tõmban seitsme, kõik plaksutavad. Kui tõmban
          mõne muu kaardi, ütlevad kõik „ooo“. Proovime! „Ooo“ '
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Kindlasti saad tingimuslausete abil mõelda välja veelgi ägedamaid mänge.
          Proovi! Tingimuslaused ongi need, mis arvutid nii targaks teevad. Tingimuslauseid
          sisaldav arvutiprogramm saab kasutajale vastata ja muuta tema tegevust.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Mõtle oma lemmikvideomängule. Kas teenid mõne tegevuse eest rohkem punkte
          kui teise eest? See on nii sellepärast, et arvuti kasutab tingimuslauseid.
          Nii saab arvuti teha otsuseid. Näiteks kui saad sihtmärgile pihta, teenid
          kümme punkti. Kui ei saa, kaotad kolm punkti. Kui tead, kuidas tingimuslaused
          toimivad, saad luua igasuguseid põnevaid mänge.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Nüüd on meil tööekraanil juba mitu plokki. Aga midagi on valesti.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Proovime seda koodi siluda, vähendades kiirust ja jälgides samm-sammult,
          kuidas see plokke läbib.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Siin on midagi valesti! Kassi vurrud on 75 pikslit pikad, mitte 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Kas oled kunagi kuulnud terminit "debugging" ehk silumine? See on viis,
          kuidas leida asju, mis ei tööta. Kui parandad koodi, siis sa tuvastad ja
          parandad vigasid.
      2:
        image: notes/C2_bee_debugging_2.png
        text: 'Meil on tööekraanil juba mitu plokki. Kasutame sammunuppu, et kõik
          need plokid samm-sammult läbi käia ja teha kindlaks, kas lahendus on õige
          ja kus on vaja seda parandada. '
      3:
        image: notes/C2_bee_debugging_3.png
        text: Tundub , et siin meie probleem ongi! Meil on vaja veel ühte edasiliikumise
          plokki. Sammunupp aitab meil leida vea, et saaksime selle parandada ja probleemi
          lahendada.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Pead on vaja selleks, et mütsi kanda ja et su nupp ütleks, mida teha,
          ja et mõelda loomaaiast, ja et sõpradele teretuseks noogutada. Internetis
          on pead vaja selleks, et osata käituda turvaliselt ja hoida oma päriselu
          ainult enda teada. Alati tuleb mõelda. Internetis tuleb alati järele mõelda,
          pealaest jalatallani ja varbaotsast ninaotsani!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Südant on vaja selleks, et kasvada, et olla terve ja rõõmus ja et saata
          sõbrale sõbrapäevakaart. Internetis on südant vaja selleks, et olla alati
          kena, lahke ja viisakas ja käituda nii, nagu on õige. Alati tuleb mõelda.
          Internetis tuleb alati järele mõelda, pealaest jalatallani ja varbaotsast
          ninaotsani!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Käsi on vaja selleks, et lemmiklooma kallistada, et vihmavarju hoida,
          et panna selga oma lemmiksärk ja saada superkangelaseks. Internetis on käsi
          vaja selleks, et vahepeal pausi pidada, arvuti või telefon sinnapaika jätta
          ja hoopis puu otsa ronida. Alati tuleb mõelda. Internetis tuleb alati järele
          mõelda, pealaest jalatallani ja varbaotsast ninaotsani!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Kõhtu on vaja selleks, et seal sööki hoida ja kuulata, kuidas see koriseb,
          et kõhukat hüpata ja et tunda limonaadigaasi. Internetis on kõhutunnet vaja
          selleks, et olla ettevaatlik ja osata lugeda märke ja et kõhutunne sind
          juhiks ja annaks märku, kui asi ei ole õige. Alati tuleb mõelda. Internetis
          tuleb alati järele mõelda, pealaest jalatallani ja varbaotsast ninaotsani!
      5:
        image: notes/C2_digital_footprint_5.png
        text: 'Nii et internetis MÕTLE peaga, TUNNE südamega, hoia kätega asju TASAKAALUS
          ja KUULA kõhutunnet. Jalgu kasuta selleks, et ringi joosta ja palli lüüa,
          et hüpata, trikke teha ja tantsida ja higistes sokkides hullata. Internetis
          kasuta jalgu selleks, et panna need kindlalt maha ja seista vastu kiusajatele.
          Pea meeles, et nii väikeste kui suurte vastu tuleb olla kena ja viisakas.  '
      6:
        image: notes/C2_digital_footprint_6.png
        text: Alati tuleb mõelda. Internetis tuleb alati järele mõelda, pealaest jalatallani
          ja varbaotsast ninaotsani! Nii et mõtle peaga, tunne südamega, hoia kätega
          tasakaalu, kuula kõhutunnet ja pane jalad kindlalt maha. Alati tuleb mõelda.
          Internetis tuleb alati järele mõelda, pealaest jalatallani ja varbaotsast
          ninaotsani!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Iga kord, kui oled internetis, jääb sinust maha jalajälg. See, mida
          sa otsisid, kopeerisid, jagasid ja avaldasid, jääb sinna igaveseks. Millise
          digitaalse jalajälje endast maha jätad? Millise digitaalse jalajälje tahaksid
          endast maha jätta?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Selle õppetunni nimi on „Programmeerimine millimeetripaberil“ ja siin
          räägitakse algoritmidest. Täna õpime, kuidas kirjutada programme, millega
          saame üksteisele näidata, kuidas taasluua lihtsaid must-valgeid kujutisi,
          kasutades ainult käsitsi joonistatud nooli.
      2:
        image: notes/C2_graph_paper_2.png
        text: " Algoritm on teatud hulk juhiseid mingi ülesande sooritamiseks. Nende
          juhiste abil saame teha klaasvaagna . Algoritmid on väga kasulikud, kui
          sul on vaja kellelegi selgitada, kuidas midagi teha."
      3:
        image: notes/C2_graph_paper_3.png
        text: Kui kirjutad arvutile algoritmi, pead selle jagama väikesteks sammukesteks.
          Lõpeta see rida ja siis mine järgmisele ja siis jälle järgmisele ja ongi
          valmis.
      4:
        image: notes/C2_graph_paper_4.png
        text: Kasutan algoritme oma töös. Kui panen kõik sammud kirja, saan sama vaagna
          uuesti teha või kellelegi teisele õpetada, kuidas seda teha. Aseta klaas
          sulatusahju, sulata see kokku, järgi kõiki juhiseid ja vaagen saabki valmis.
          Algoritmid on tegevuskava, mille abil saad midagi tehtud.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Siin kasutame kordusplokki selleks, et saaksime oma kunstniku programmeerida
          vähemate sammudega. Meil on juba tööekraanil mõned plokid, kuid need on
          alles algus.
      2:
        image: notes/C2_artist_loops_2.png
        text: Ruudu kõikide külgede joonistamiseks on neid plokke vaja neli korda
          korrata. Selleks lohistame lihtsalt tööekraanile kordusploki ja asetame
          edasiliikumise ja paremalepööramise plokid selle sisse. Kui klõpsame nupul
          „Käivita“, kordab kunstnik neid samme neli korda ja joonistab terve ruudu.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: 'Tsükkel on tegevuse kordamine. Kui ma lähen taru kontrollima, vaatan
          ma raami ja panen selle siis tagasi. Ma kordan sama tegevust mitu korda.
          Tegevuste kordumine ongi tsükkel. '
      2:
        image: notes/C2_bee_loops_2.png
        text: See on kordusplokk. Võid panna kordusplokki sisse ükskõik mis tegevuse
          ja seda korratakse nii mitu korda, kui soovid. Näiteks sellel tasemel ei
          pea me välja lohistama edasiliikumise ja nektari hankimise plokke kolm korda,
          vaid lohistame nad välja üks kord ja siis kordame tegevust kolm korda. Nii
          on lihtsam!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Harilikult programmeeritakse tekstiga, kuid meie kasutame programmeerimiskeskkonda
          Blockly, mis võimaldab programme kirjutada plokkide lohistamise ja asetamisega.
          Niimoodi puslet kokku pannes loomegi koodi. Alustuseks koostame koodi programmile,
          mis aitab sellel vihasel linnul läbida labürindi, et jõuda pahade sigadeni,
          kes varastasid ta munad.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly on jagatud kolme osasse. Vasakul on linnu labürint, kus programmi
          käitatakse. Iga taseme juhised on kirjas labürindi all. Keskmine ala on
          tööriistakast ja iga plokk seal on käsk, millest lind aru saab. Valget ala
          paremal nimetatakse tööekraaniks – siin me oma programmi loomegi.
      3:
        image: notes/C2_maze_intro_3.png
        text: 'Kui ma lohistan liigutamise ploki tööekraanile ja vajutan nupule „Käivita“,
          mis juhtub? Lind liigub ruudustikus ühe kasti võrra edasi. Ja kui ma tahan,
          et lind teeks pärast seda veel midagi? Saan lisada meie programmi veel ühe
          ploki. '
      4:
        image: notes/C2_maze_intro_4.png
        text: Ma valin ploki „Pööra paremale“ ja lohistan selle liigutamisploki alla,
          kuni kuvatakse kollane nool. Siis lasen ploki lahti ja kas plokki klõpsavad
          kokku. Kui vajutan jälle nupule „Käivita“, täidab lind käsud, mis on loetletud
          meie tööekraanil ülalt alla.
      5:
        image: notes/C2_maze_intro_5.png
        text: Kui soovite mõnd plokki kustutada, eemaldage see lihtsalt loendist ja
          lohistage prügikasti. Pärast seda, kui olete vajutanud nupule „Käivita“,
          saate alati vajutada lähtestamisnupule, et lind läheks tagasi algusesse.
          Nüüd sigu püüdma!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: 'Selle õppetunni nimi on „Algoritmid päriselus“. Algoritmidega saab
          kirjeldada igapäevategevusi. Igapäevased algoritmid on näiteks küpsiseretseptid
          ja lindude pesakasti ehitamise õpetus.   '
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Täna loome ja testime paberlennuki algoritmi. Kõigepealt peame selle
          suure projekti jagama väikesteks lihtsateks sammudeks. Peame otsustama,
          mis sammud on paberlennuki tegemiseks vajalikud ja mis järjekorras peame
          neid tegema.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: 'Esiteks lõigake pildid lahti. Järgmiseks valige kuus pilti, mis kujutavad
          paberlennuki meisterdamiseks vajalikke samme ja seadke need pildid õigesse
          järjekorda. Kui sellega valmis saate, vahetage algoritmid teise rühmaga
          ja proovige, kas algoritm toimib. Tõhusa algoritmi olemasolu on hea paberlennuki
          saamiseks äärmiselt vajalik.   '
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "Šokolaadivalmistamise protsess koosneb mitmest suurest sammust ja iga
          suur samm koosneb paljudest väiksematest sammudest. Saame valida erinevate
          retseptide ja algoritmide vahel, sõltuvalt sellest, mis maitsega šokolaadi
          soovime. Iga samm, isegi kõige väiksem, on nii oluline, et ilma seda läbimata
          ei saa sooritada ka ülejäänud toiminguid. On väga tähtis luua algoritme,
          millest teised aru saavad. Seepärast tuleb iga samm kirja panna, nii et
          ükskõik kes seda teeb, oleks tulemus sama.  "
    C2_playlab_createstory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Seni oled teinud animatsiooni või loo, mis teeb täpselt sama asja iga
          kord, kui see käivitada. Nüüd saad aga teha interaktiivse mängu, mida saab
          päriselt mängida.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Saad proovida uusi plokke. On näiteks plokk "kui nool" ja plokk "liiguta
          tegelaskuju". Saad panna need plokid kokku, et tegelasi nooleklahvidega
          liigutada. Siis on veel mõned plokid, mis teevad asju, kui tegelased kokku
          põrkavad või kui neil klõpsata. Proovi neid ja lõbutse!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Täna proovime teateprogrammeerimist. Kui tööga on kiire või töötatakse
          meeskondades, tuleb tihti programmeerida suure pinge all ja võivad sisse
          tulla vead. Millimeetripaberil programmeerimisega matkime koodikirjutamist
          ja teatejooks aitab ette kujutada olukorda, kus töö peab tähtajaks valmis
          saama.
      2:
        image: notes/C2_relay_programming_2.png
        text: Teateprogrammeerimises võistlevad meeskonnad omavahel selles, kes programmi
          millimeetripaberil kõige kiiremini valmis saab. Pead kontrollima oma meeskonnakaaslase
          tööd ja kui leiad vea, siis selle parandama, lisama oma noole, jooksma tagasi
          ja andma teate üle meeskonnakaaslasele.
      3:
        image: notes/C2_relay_programming_3.png
        text: 'Programmeerijad tegelevad palju vigade parandamise ehk silumisega,
          et leida ja kõrvaldada probleemealgoritmides või koodis. Silumiseks on palju
          võimalusi. Üks kõige lihtsamaid on liikuda samm-sammult edasi, kuni leiad
          koha, kus midagi on valesti läinud, ja parandad selle. '
      4:
        image: notes/C2_relay_programming_4.png
        text: Siin püüan sooritada tirelringi taha, aga kukun pidevalt poomilt maha.
          Võtan kogu harjutuse samm-sammult läbi ja saan aru, kus ma vea tegin. Treener
          näitas mulle, et mu käteasend poomil on vale. Proovisin veel üks kord uue
          käteasendiga ja sain hakkama! Olin väga rõõmus, et oma tirelringist vea
          üles leidsin. Lahendasime selle ära! Leidsime vea ja parandasime selle.
          Hästi tehtud!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "Üks asi, millega arvutid suurepäraselt toime tulevad, on kordused.
          Kui inimese jaoks läheks ühe ja sama asja kordamine igavaks, siis arvuti
          võib sama asja korrata miljoneid või miljardeid kordi ning temal ei hakka
          kunagi igav."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: 'Näiteks kui tahaksin kõigile Facebookis palju õnne soovida e-kirjaga,
          siis võtaks see mul rohkem kui sajandi aega. Aga piisab vaid sellest, et
          kirjutan paar rida koodi ning kasutan süsteemi ja saan kõigile kiirelt õnnesoovid
          ära saata. Selleks ongi vaja tsükleid. Ja need on asi, millega arvutid väga
          hästi hakkama saavad.  '
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: 'Selles näites on sinu eesmärk liigutada lindu nii, et see tabaks siga.
          Kui kasutame kordusplokki, on see väga lihtne. Võid anda arvutile viis korda
          edasiliikumise käsu, et lind liiguks iga kord ühe sammu võrra seale lähemale.  '
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Selle asemel võid anda arvutile üks kord käsu edasi liikuda ja siis
          anda käsu seda viis korda korrata ja tulemus on sama. Selleks pead välja
          lohistama edasiliikumise käsku ja paigutama selle kordusploki sisse. Siis
          klõpsa kordusplokil ja ütle, mitu korda tuleb plokki korrata, et lind astuks
          soovitud arvul samme.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Kordusplokki võib panna nii palju käske, kui soovid. Selles näites annad
          käsu edasi liikuda ja vasakule pöörata, mida tehakse viis korda. Edukat
          programmeerimist!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: "Üks tore asi programmeerimise juures on see, et kui olete arvutile
          õpetanud, kuidas mõnd toimingut teha, saate arvutil lasta seda funktsiooni
          uuesti teha. Saate sellele nime anda ja siis lasta arvutil seda uuesti teha.
          See on nagu keelde uute sõnade lisamine."
      2:
        image: notes/C3_artist_functions_2.png
        text: Oma programmis õppisime, kuidas joonistada ruutu neli korda edasi liikudes
          ja pöörates. Võime võtta selle funktsiooni, panna sellele nimeks „Joonista
          ruut“. Iga kord, kui tahame, et arvuti ruudu joonistaks, ütleme lihtsalt
          „Joonista ruut“, arvuti käivitab selle funktsiooni – selle koodi – uuesti
          ja joonistab meile ruudu. Oleme lisanud oma programmeerimiskeelde uue mõiste.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Sa ei pääseks isegi võistlema, kui sul ei ole meeskonnas inimesi, kes
          on arvutiteaduses kodus, sest autod koguvad nii palju andmeid. On vaja inimesi,
          kes oskavad kirjutada programme, mis nuputavad välja, kuidas paremaks saada.
      2:
        image: notes/C3_artist_intro_2.png
        text: Nendes mängudes oled sina kunstnik, kes joonistab pliiatsitega erinevaid
          kujundeid. Kuhu iganes kunstnik liigub, sinna jääb joon järgi.
      3:
        image: notes/C3_artist_intro_3.png
        text: Lõuendil ringi liikumiseks kasutad edasiliikumise plokki. Edasiliikumise
          plokk annab korralduse liikuda edasi 100 piksli võrra. Kui vajutad "Käivita",
          mis juhtub? Kunstnik liigub edasi 100 pikslit. Pikslid on põhimõtteliselt
          tillukesed ruudud arvutiekraanil.
      4:
        image: notes/C3_artist_intro_4.png
        text: Teine plokk ütleb „Pööra 90 kraadi paremale“. Kui selle ploki välja
          lohistame, saame kunstnikku pöörata. Pöörde suurust saad muuta. See on 90-kraadine
          pööre.
      5:
        image: notes/C3_artist_intro_5.png
        text: 'Ja see on 120-kraadine pööre. Pea meeles, neid väärtusi saad muuta,
          klõpsates piksleid ja kraade näitavate arvude kõrval nooltel. Head joonistamist! '
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: 'Kui asetad ühe tsükli teise tsükli sisse, nimetame seda mitmekordseks
          tsükliks. Näiteks on meil koodis juba kirjas, et tuleb joonistada üks kolmnurk
          küljepikkusega 100 pikslit, kasutades kordusplokki, kus korduste arvuks
          on määratud 3, üks kord iga kolmnurga külje kohta. '
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Aga meil on vaja joonistada kuus kolmnurka. Selleks võtame selle tsükli
          ja asetame selle teise korduste arvu ploki sisse. Lahe!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: 'See on tingimuslause plokk. Selles öeldakse, et KUI nektarit või mett
          on vähem, sama palju või rohkem kui mingi arvväärtus, SIIS tuleb midagi
          teha. '
      2:
        image: notes/C3_bee_conditionals_2.png
        text: See on abiks juhul, kui me ei tea, kui palju on vaja nektarit või mett
          koguda – seda näitab siin see küsimärk.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: Selles näites ütleme, et KUI sinisel lillel on nektarit rohkem kui 0,
          korja nektarit. Seepeale kogub meie mesilane nektarit nii kaua, kuniks ta
          lille juurde jääb.
    C3_bee_debugging:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Kas oled kunagi kuulnud terminit "debugging" ehk silumine? See on viis,
          kuidas leida asju, mis ei tööta. Kui parandad koodi, siis sa tuvastad ja
          parandad vigasid.
      2:
        image: notes/C3_debugging_bee_2.png
        text: 'Meil on tööekraanil juba mitu plokki. Kasutame sammunuppu, et kõik
          need plokid samm-sammult läbi käia ja teha kindlaks, kas lahendus on õige
          ja kus on vaja seda parandada. '
      3:
        image: notes/C3_debugging_bee_3.png
        text: Tundub , et siin meie probleem ongi! Meil on vaja veel ühte edasiliikumise
          plokki. Sammunupp aitab meil leida vea, et saaksime selle parandada ja probleemi
          lahendada.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: "Üks kõige tähtsamaid küsimusi arvutiteaduses  on see, kuidas määratleda
          uusi käske – kuidas lisada arvutikeelde uusi sõnu. Enamikus arvutikeeltes
          on kõigest umbes 100 sõna või käsku. Võlu peitub selles, kuidas nendest
          klotsidest kokku panna omaenda uusi sõnu."
      2:
        image: notes/C3_bee_functions_2.png
        text: 'Spordis teeme seda kogu aeg. Näiteks korvpallis alustatakse sellest,
          et õpitakse triblama, korvi alt viskama ja lauapalle võtma. Kui oled need
          põhiliikumised selgeks saanud, paned nendest klotsidest kokku uusi, nagu
          näiteks kate kattest mäng. Siis saad hakata mängima keerukamaid kombinatsioone.
          Kui oled mõne kombinatsiooni ära õppinud ja annad sellele nime, teab kogu
          meeskond, kuidas seda teha. '
      3:
        image: notes/C3_bee_functions_3.png
        text: Nii on ka arvutitega – kui olete arvutile õpetanud, kuidas käsujadade
          abil mõnd tegevust sooritada, saate sellele tegevusele ise nime välja mõelda,
          et seda oleks hiljem lihtne korrata. Kui määratlete oma käsu ja annate sellele
          nime, kutsutakse seda funktsiooniks. Nüüd proovime funktsioonide abil mesilast
          aidata.
      4:
        image: notes/C3_bee_functions_4.png
        text: 'Selles näites on meie funktsiooni nimi „kogu 2 nektarit „(„get 2 nectar“)
          – see on siin see roheline plokk. Me saame teada, mida see funktsioon tähendab,
          kui vaatame seda halli kasti, kus on funktsiooni selgitus. Siit on näha,
          et „kogu 2 nektarit“ tähendab, et kogu nektarit ja siis kogu veel kord nektarit.
          Vaata alati halli kasti sisse, et teada, mida roheline funktsiooniplokk
          teeb. '
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Nüüd kasutame mesilasega mitmekordseid tsükleid. Meil on stardikood,
          mis käsib mesilasel kolm korda edasi liikuda ja nektarit koguda ja siis
          paremale pöörata. Võtame kogu selle kooditüki ja paigutame selle teise kordusploki
          sisse ja määrame korduste arv kolme. Valmis!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Sa hakkad tegema päris oma pallimängu, mida saad koos sõpradega mängida.
          Lahe!
      2:
        image: notes/C3_bounce_2.png
        text: 'Alustamiseks tuleb teha nii, et reketeid saaks klaviatuuri nooleklahvidega
          juhtida. '
      3:
        image: notes/C3_bounce_3.png
        text: Selleks ühendame vasaknoole hoidmise ploki („when left arrow“) vasakule
          liikumise plokiga („move left“) ja paremnoole hoidmise ploki („when right
          arrow“) paremale liikumise plokiga („move right“). Proovige ja varsti programmeeritegi
          omaenda pallimängu!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Selles õppetunnis räägime arvutuslikust mõtlemisest. Vahel võib uue
          mängu õppimine olla päris keeruline. Alguses võib see tunduda väga segane
          ja vahel ei ole kedagi, kes sulle reegleid õpetaks, nii et pead kõik ise
          välja nuputama.
      2:
        image: notes/C3_computational_thinking_2.png
        text: Hea uudis on see, et sinu oskus asju välja nuputada võib paraneda, kui
          õpid ära mõned mõtlemisnipid. Need nipid on erilised viisid, kuidas probleemile
          läheneda ja seda lahendada. Selles õppetunnis kuuled neljast nipist ja saad
          neid koos sõpradega harjutada, kui proovite välja mõelda ühe mängu reeglid.
      3:
        image: notes/C3_computational_thinking_3.png
        text: Kui jagad suure probleemi väiksemateks osadeks, lahutad suure probleemi
          väikesteks probleemideks. Kui oleme jaotanud suure probleemi mitmeks väiksemaks
          probleemiks, võime kasutusele võtta järgmise nipi, mida nimetatakse kujuvõrdluseks.
      4:
        image: notes/C3_computational_thinking_4.png
        text: Kujuvõrdlus tähendab, et otsime asjade vahel sarnasusi. Kui leian sarnasused,
          saan hakata mõtlema erinevustele. Nende erinevuste eemaldamist nimetatakse
          abstraheerimiseks.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Kui olen välja mõelnud, mis on probleemi lahendamiseks vajalikud sammud,
          saan need järjestada jadaks, mida nimetatakse algoritmiks, et kõik saaksid
          kasutada minu juhiseid selle probleemi lahendamiseks. Proovime nüüd nende
          nelja sammu abil välja nuputada, kuidas mängida mängu, millel puuduvad reeglid.
          Mängu lõpuks oskate mängida midagi sellist!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: 'Selle õppetunni nimi on „Ühisloome“. Selles tunnis selgitame kaardipaki
          abil, kuivõrd lihtsam on mõnesid asju teha rühmas, selle asemel, et püüda
          nendega üksi hakkama saada. Nii et leia mõned sõbrad ja tehke midagi ägedat.
          Ühisloome tähendab, et kasutatakse paljude inimeste abi, et saada millegagi
          kiiremini valmis. '
      2:
        image: notes/C3_crowdsourcing_2.png
        text: Arvutiteaduses kasutame ühisloomet kogu aeg. Tuhanded amatöörid ja profid
          ühendavad oma arvutid, et vaadata läbi miljardid infokillud. Et otsida selliseid
          asju nagu järgmine Mersenne´i algarv või isegi võimalikku sidet maaväliste
          olenditega.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: Filmis koosneb iga sekund 24 üksikvõttest ehk kaadrist. Kõik need kaadrid
          tuleb ükshaaval luua ja tervikuks kokku panna. Meie oma meeskonnaga oleme
          tarkvaraarendajad. Töötame kõik koos selle nimel, et luua tarkvara, mis
          tegelikult loob selle lõpliku kujutise, mida te ekraanil näete. See on töövahend,
          mida kunstnikud ja muud filmiloojad saavad kasutada oma tööprotsessis, et
          luua kujutisi, mida nad soovivad ekraanil näha.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: 'Võtame näiteks filmi „Kalapoeg Nemo“, kus Crush ja Squirt ja kõik nende
          sõbrad kihutavad mööda Ida-Austraalia hoovust. Te näete möödalendava vee
          pilte, värve kilpkonna seljal, kalade külgi. Kõik need asjad on loonud matemaatika
          ja meie kirjutatud arvutiprogrammid. Seejärel anname need kunstnikele, kes
          neid kohendavad ja loovad lõpliku kujutise, mis näeb välja ilus ja lõbus.   '
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: 'Selle õppetunni nimi on „Täringuralli“. Peaaegu kõigile meeldib mängida
          arvutimänge. Kas oled kunagi mõelnud, kuidas programmeerijad muudavad sammud,
          millest mäng koosneb, arvutiprogrammiks? Esimene samm arvutimängude loomisel
          ja probleemide lahendamisel nõuab mõtlemist ja kavandamist,.  '
      2:
        image: notes/C3_dice_race_2.png
        text: 'Selle mõtlemise ja probleemilahendamise sammu tulemusena luuakse algoritm,
          mis on sammhaaval esitatud tegevuskava probleemi lahendamiseks või ülesande
          sooritamiseks. Selles õppetunnis koostad täringuralli mängu algoritmi. Siis
          palud sõpradel oma kava katsetada, et näha, kas nad suudavad nende sammude
          abil mängu mängida. Kui programmeerija on kindel, et sammud on õiged, on
          aeg tõlkida algoritm arvutile arusaadavas keeles programmiks. '
      3:
        image: notes/C3_dice_race_3.png
        text: Peaaegu kõik meie igapäevased tegevused nõuavad algoritmi, teatud hulka
          samme, mis sa pead läbima ülesande lõpuleviimiseks. Võtame näiteks kooliminekuks
          valmistumise või sõpradega toreda puhkepäeva kavandamise või võileiva tegemise.
          Selleks et need ülesanded tehtud saaksid, pead nad jagama väiksemateks sammudeks
          ja mõnikord peavad need sammud olema kindlas järjekorras.
      4:
        image: notes/C3_dice_race_4.png
        text: Kujutle, et teed võileiba. Ei ole oluline, millise koostisosa sa kõigepealt
          kapist välja võtad. Aga pähklivõid ei saa sa saia peale enne määrida, kui
          oled purgi lahti teinud. Arvutile tuleb algoritmide ja programmide abil
          õpetada, kuidas teha isegi selliseid lihtsaid asju, mida meie teeme täiesti
          mõtlemata.
      5:
        image: notes/C3_dice_race_5.png
        text: Algoritm on mõte selle taga, mis peaks juhtuma, samas programm on see,
          mis annab arvutile tegelikud juhised toimingu teostamiseks. Algoritm tuleb
          transleerida programmi enne, kui arvuti saab seda käitada. Ülesande jagamine
          etappidesse (algoritmideks) võib mõnikord keeruline olla. Kuid nii nagu
          mis tahes uus oskus, muutub ka see harjutades kogu aeg hõlpsamaks.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: "„Kui“ tsüklid sarnanevad sinu igapäevategevustele. Kujuta ette, et
          pesed oma autot ja nühid autot seni, kui see on puhas. Kui see pole puhas,
          jätkad nühkimist. Jälgid selliseid asju kogu aeg."
      2:
        image: notes/C3_farmer_while_2.png
        text: Mängul on uus ilme taluniku aitamiseks. Seda nimetatakse plokiks „kui“.
          See on tegelikult väga lihtne. Kui ülalasuv väide on tõene, saad midagi
          teha. Näiteks, kui on heinakuhi, liiguta üks hangutäis. Lase käia ja proovi
          seda talunikuga teha.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: See õppetükk käsitleb funktsionaalseid päikesepüüdjaid. Saad luua neid
          kauneid päikesepüüdjaid funktsioonide abil. Ühe päikesepüüdja loomiseks
          läheb vaja mitut sammu. Mõnda neist pead mitu korda kordama.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: Esimene samm päikesepüüdja loomise protsessi lihtsustamiseks on välja
          mõelda, mida ikka ja jälle kordama peab. Need sammud saab rühmitada funktsioonideks.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: Kuid ilusa päikesepüüdja loomiseks on vaja veel midagi peale sammude
          täpse jälgimise. Mõnikord me tahame olla loovad ning muuta kasutatavate
          kiirte värvi. Me saame iga päikesepüüdja muuta ainulaadseks eri värvi kiirte
          abil.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Sinu päikesepüüdja saab sulle ainuomaseks, kui mõtled kiirtest kui muutujatest.
          Muutuja on sõna, mis tähistab kohatäidet muudetava teabe jaoks. Tunne rõõmu
          kaunite päikesepüüdjate loomisest funktsioonide ja muutujate abil!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: See õppetükk räägib Internetist. Internet on väga tegevusrohke koht
          ning sarnaneb maanteele, kus sarnaselt autodele, sõnumid vuhisevad oma sihtkohtade
          poole. Sõnumid liiguvad Internetis väga kiiresti.
      2:
        image: notes/C3_internet_2.png
        text: Kui vaatame, kuidas Internet töötab, aitab see sul aru saada, mis juhtub,
          kui sa Internetti kasutate. Saad teada, kuidas sõnumid sinu arvutist lemmikveebisaidile
          või su sõbra käest sinu meilipostkasti jõuavad. Nii nagu on maanteel liiklemine
          hõlpsam, kui tunned teid ja liiklusmärke, on ka Internetis liikumine hõlpsam,
          kui tead, mis taustal toimub.
      3:
        image: notes/C3_internet_3.png
        text: Sõnumite saatmine sarnaneb veidi kirja saatmisega, kuid sellel on ka
          teatud erinevused. Ma olen praegu Google.com-is. Selle veebisaidi IP-aadress
          on see number siin. Võid IP-aadressist mõelda kui saatja aadressist. Kujutame
          ette, et tahan saata sõnumit sellesse kontorisse siin. Kas näed sellel uksel
          URL-i ja IP-aadressi? Olen sõnumi valmis kirjutanud ning valin käsu Saada.
      4:
        image: notes/C3_internet_4.png
        text: Erinevalt postiteenusest, murrab Internet sõnumi selle hõlpsamaks saatmiseks
          väiksemateks osadeks. Neid väikeseid osakesi nimetatakse pakettideks. Sõnumi
          iga pakett saadetakse sihtkohta ükshaaval. Need paketid pannakse kõik kokku
          õiges järjekorras, et vastuvõtja saaks sõnumit õigesti lugeda. Muidugi on
          Interneti toimimise kohta veel palju asju õppida, kuid alustuseks on see
          ka juba suurepärane. Oled muutumas tõeliselt targaks Interneti-kasutajaks.
          Räägi kindlasti ka oma perele ja sõpradele, mida sa just õppisid.
      5:
        image: notes/C3_internet_5.png
        text: Minu nimi on Amanda Camp ja ma olen Google’i tarkvarainsener. Töötan
          meeskonnas, mis töötab profiile ja kontakte salvestava tagaserveriga. Oma
          töös me mõtleme palju sellele, kuidas saaks kontakte saata muudesse seadmetesse
          (nt telefoni). Enamikel inimestel on palju kontakte (nt 1 000 kontakti)
          ja me ei taha kõiki neid kontakte korraga sinu telefoni saata, kuna see
          sõnum on liiga mahukas. Nii nagu Internet murrab suured sõnumid pakettideks,
          kasutame meie toimingut nimega saalimine. Saadame sinu telefoni korraga
          ainult 100 kontakti ja laseme sinu telefonil meile vastata ning paluda järgmise
          100 kontakti saatmist.
      6:
        image: notes/C3_internet_6.png
        text: Tarkvara juures on kõige põnevam see, et tarkvara võib mõjutada kogu
          maailma. Mina õppisin esimest korda programmeerimist 19-aastaselt. Olin
          siis juba teise või kolmanda kursuse üliõpilane. Mäletamist mööda oli esimene
          programm, mille kirjutasin Celsiuse teisendamine Fahrenheitiks. Mulle meeldib
          programmeerida, sest ma armastan inimesi aidata. Google’is saan ma kirjutada
          programme, mis aitavad inimesi kogu maailmas ja see on tõepoolest peadpööritav
          ja põnev.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: Inimesed võtavad iga päev otsuseid vastu. Kui sa näiteks välja lähed,
          kasutad sa „kui“ lauset, mis ütleb, et „kui“ vihma sajab, pead sa jaki kaasa
          võtma. Arvutid on hämmastavad, kui oled need laused paika pannud ning nad
          täidavad neid tingimusi uskumatu kiirusega. Arvutiprogramm sisaldab veidi
          matemaatikat ja mõnda „kui“ lauset, mille korral otsus vastu võetakse.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: "„Kui“ plokk aitab zombil otsustada. Ta kontrollib midagi. Kasutame
          näiteks plokki, mis ütleb: „Kui tee viib vasakule“ ja paneme sinna sisse
          käsu „Pööra vasakule“. Käsime zombil oma ümbrust kontrollida ning vaadata,
          kas vasakule jääb tee ja kui jääb, siis sinna pöörata."
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Siis kasutame selle korduse sees edasiliikumise plokki, et zombi liiguks
          edasi nii kaua, kui ta soovib otse minna. Kui tuleb pööre, käsib „kui“ plokk
          tal vasakule pöörata ja muul juhul edasi liikuda ning oleme eesmärgi saavutanud.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: See on „kui“ lause kasutamise näide, mis on arvutiprogrammeerimise üks
          põhikontseptsioone. Üks esimesi asju, mida ma õppisin, oli kirjutada programm,
          mis mängib trips-traps-trulli. Mul oli „kui“ lause, mis ütles, et hästi,
          „kui“ su vastane hakkab võitma, blokeeri see koht. Õppige selgeks „kui“
          lausete kirjutamine. See on põhimõiste.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: Selles näites on meie eesmärgiks viia zombi päevalille juurde. Me võiksime
          kasutada edasiliikumisplokke või käskida arvutil liikuda edasi ja korrata
          seda viis korda ühe kordamisploki abil.
      2:
        image: notes/C3_maze_level_4_2.png
        text: See säästab aega ja muudab selle palju hõlpsamaks. Selle kasutamiseks
          paigutage edasiliikumisplokk kordamisploki sisse. Klõpsake käsku Käivita
          ja zombi liigub viis korda edasi armsa päevalille juurde.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Seni oled teinud animatsiooni või loo, mis teeb täpselt sama asja iga
          kord, kui see käivitada. Nüüd saad aga teha interaktiivse mängu, mida saab
          päriselt mängida.
      2:
        image: notes/playlab_2.png
        text: Saad proovida uusi plokke. On näiteks plokk "kui nool" ja plokk "liiguta
          tegelaskuju". Saad panna need plokid kokku, et tegelasi nooleklahvidega
          liigutada. Siis on veel mõned plokid, mis teevad asju, kui tegelased kokku
          põrkavad või kui neil klõpsata. Proovi neid ja lõbutse!
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: See on laulukirjutamise õppetükk. Muusika sarnaneb paljuski arvutiprogrammile.
          Kirjapandud noodid ja sõnad ütlevad lauljale täpselt seda, mida ta tegema
          peab. Mõnda muusika osa korratakse uuesti ja uuesti.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Me nimetame seda refrääniks. Arvutiprogrammis nimetatakse ikka ja jälle
          korratavaid osi funktsioonideks. Kui sa loed laulusõnu ja näed seal sõna
          „refrään“, kas loed sõna „refrään“? Ei, sa vaatad lehe algusse, et näha,
          millised sõnad moodustavad refrääni.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: Selles õppetükis õpid selgeks lorilaulu väiksest jänesest. Sellel laulul
          on refrään, mida palju kordi kordate. Funktsioon on tükike koodi, mida saad
          kutsuda ja kasutada üha uuesti. See muudab programmeerimise hõlpsamaks ja
          tõhusamaks ning sa ei pea jälle ja jälle välja kirjutama oma funktsiooni
          samme. Pead selle vaid üks kord kirjutama.
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: See on tingimuslause plokk. Selles öeldakse, et „kui“ oled lille või
          meekärje juures, „siis“ pead midagi tegema. See on kasulik juhul, kui sa
          ei tea, kui palju mett või nektarit tuleb koguda (vaata seda küsimärki siin).
      2:
        image: notes/C4_bee_conditional_2.png
        text: Selles näites me ütleme, ei „kui“ see on lill, „siis“ korja kogu nektar
          ja siis kasutame veel ühte lauset – „kuid“ see on meekärg, „siis“ valmista
          mett.
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Selle uue ploki nimi on „kui teine“. See on samasugune tingimuslause
          nagu eelmistes ülesannetes kasutatud plokk „kui“. Kuid nüüd on siin all
          uus osa. Plokk „kui teine“ laseb mesilasel otsustada kahe toimingu vahel.
          Kui mesilane on lille juures, teeb mesilane seda, mis sa oled esimesse ossa
          (kui) pannud ning kui mesilane pole lille juures, peab ta tegema seda, mis
          oled teise ossa (teine) pannud.
      2:
        image: notes/C4_conditionals_2.png
        text: "„Kui“ lausete järgi oskavad arvutid otsuseid vastu võtta. Inimesed
          määravad arvutile tingimused, mis ütlevad, et kui arvuti on teatud olukorras,
          siis tee seda. „Teine“ tähendab, et muul juhul tee teist asja. „Kui teise“
          ploki ülaosa ütleb: „Kui oled lille juures“. Kuid meie ploki ülaosa võib
          öelda muid asju, nt kui nektar võrdub kahega või kui ees on teerada, toimib
          meie plokk samal viisil. Kui ülalasuv tingimuslause on tõene, teeb mesilane
          esimest asja, aga kui see on väär, siis teist."
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: Kui kasutad koodi korduse jaoks kordusplokki, kuidas saab arvuti aru,
          kas ta on piisavalt korranud? Tegelikult peidab kordusplokk endas veel nutikamat
          koodijuppi, mida nimetatakse „korduste arvuks“, mis loendab algusest lõpuni
          kindla vahemiku alusel.
      2:
        image: notes/C4_for_loops_2.png
        text: Näiteks kordab kordusplokk ühe kaupa ühest kolmeni. Iga kord, kui ta
          loendab, käivitab ta koodi korduse sees. „Korduste arv“ teab, mitu korda
          ta on käivitatud loenduri muutuja kaudu, mis on seadistatud algusväärtuse
          peale korduse alguses ja millele lisatakse vahemik iga kord, kui kordus
          käivitatakse. Niipea, kui loenduri muutuja on suurem kui lõppväärtus, kordus
          seiskub.
      3:
        image: notes/C4_for_loops_3.png
        text: Kordusploki asemel tegeliku „korduste arvu“ kasutamise eeliseks on see,
          et sa näed reaalselt loenduri muutujat ning saad seda korduses kasutada.
          Näiteks on mul siin mitu lille ja ühel neist on üks nektar, teisel kaks
          ja kolmandal kolm. Saan kasutada „korduste arvu“ ja öelda mesilasele, et
          ta korjaks iga kord „loenduri“ nektareid, mis tähendab siis ühte esimeselt
          lillest, kahte teiselt ja kolme kolmandalt.
      4:
        image: notes/C4_for_loops_4.png
        text: "„Korduste arvu“ abil ei pea te loenduri vahemikuks määrama ainult ühte.
          Te saate vahemikuks määrata 2, 4 või isegi iga kord muutuva arvu."
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: Kui kasutad koodi korduse jaoks kordusplokki, kuidas saab arvuti aru,
          kas ta on piisavalt korranud? Tegelikult peidab kordusplokk endas veel nutikamat
          koodijuppi, mida nimetatakse „korduste arvuks“, mis loendab algusest lõpuni
          kindla vahemiku alusel.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: Näiteks kordab kordusplokk ühe kaupa ühest kolmeni. Iga kord, kui ta
          loendab, käivitab ta koodi korduse sees. „Korduste arv“ teab, mitu korda
          ta on käivitatud loenduri muutuja kaudu, mis on seadistatud algusväärtuse
          peale korduse alguses ja millele lisatakse vahemik iga kord, kui kordus
          käivitatakse. Niipea, kui loenduri muutuja on suurem kui lõppväärtus, kordus
          seiskub.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: Kordusploki asemel tegeliku „korduste arvu“ kasutamise eeliseks on see,
          et sa näed reaalselt loenduri muutujat ning saad seda korduses kasutada.
          Näiteks on mul siin mitu lille ja ühel neist on üks nektar, teisel kaks
          ja kolmandal kolm. Saan kasutada „korduste arvu“ ja öelda mesilasele, et
          ta korjaks iga kord „loenduri“ nektareid, mis tähendab siis ühte esimeselt
          lillest, kahte teiselt ja kolme kolmandalt.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: "„Korduste arvu“ abil ei pea te loenduri vahemikuks määrama ainult ühte.
          Te saate vahemikuks määrata 2, 4 või isegi iga kord muutuva arvu."
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: Kui kasutad koodi korduse jaoks kordusplokki, kuidas saab arvuti aru,
          kas ta on piisavalt korranud? Tegelikult peidab kordusplokk endas veel nutikamat
          koodijuppi, mida nimetatakse „korduste arvuks“, mis loendab algusest lõpuni
          kindla vahemiku alusel.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: Näiteks kordab kordusplokk ühe kaupa ühest kolmeni. Iga kord, kui ta
          loendab, käivitab ta koodi korduse sees. „Korduste arv“ teab, mitu korda
          ta on käivitatud loenduri muutuja kaudu, mis on seadistatud algusväärtuse
          peale korduse alguses ja millele lisatakse vahemik iga kord, kui kordus
          käivitatakse. Niipea, kui loenduri muutuja on suurem kui lõppväärtus, kordus
          seiskub. Kordusploki asemel tegeliku „korduste arvu“ kasutamise eeliseks
          on see, et sa näed reaalselt loenduri muutujat ning saad seda korduses kasutada.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Nüüd, kui oled funktsiooniplokid redigeerinud, on aeg luua uus funktsiooniplokk
          päris otsast peale. See on tõesti lihtne. Sa näed, et tööriistakastil on
          kategooria nimega Funktsioonid. Kui klõpsad seda, näed oranži nuppu nimega
          Loo funktsioon. Seda klõpsates kuvatakse Funktsiooni redigeerija, mida oled
          olemasoleva funktsiooniploki redigeerimiseks juba kasutanud.
      2:
        image: notes/C4_function_create_2.png
        text: Täpselt nagu sa enne alustasid funktsiooni nimetamisest, selle toimingu
          kirjeldamisest, mida funktsioon peaks tegema. Näiteks tuleb joonistada ruut
          või kolmnurk seejärel lohistada tööriistakastist plokid allasuvasse tööruumi.
          Funktsiooni jaoks lohista need plokid kindlasti rohelisse mässitud plokki.
      3:
        image: notes/C4_function_create_3.png
        text: Kui oled valmis, klõpsa nuppu Salvesta ja välju. See viib sind tagasi
          mõistatuse tööruumi juurde. Uus funktsioon kuvatakse rohelise plokina tööriistakasti
          kategoorias Funktsioon. Pukseeri see põhitööruumi ja kasuta seda nagu muidki
          plokke mõistatuse lahendamiseks.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: "Üks tore asi programmeerimise juures on see, et kui olete arvutile
          õpetanud, kuidas mõnd toimingut teha, saate arvutil lasta seda funktsiooni
          uuesti teha. Saate sellele nime anda ja siis lasta arvutil seda uuesti teha.
          See on nagu keelde uute sõnade lisamine."
      2:
        image: notes/C4_function_edit_2.png
        text: Oma programmis õppisime, kuidas joonistada ruutu neli korda edasi liikudes
          ja pöörates. Võime võtta selle funktsiooni, panna sellele nimeks „Joonista
          ruut“. Iga kord, kui tahame, et arvuti ruudu joonistaks, ütleme lihtsalt
          „Joonista ruut“, arvuti käivitab selle funktsiooni, selle koodi uuesti ja
          joonistab meile ruudu. Oleme lisanud oma programmeerimiskeelde uue mõiste.
      3:
        image: notes/C4_function_edit_3.png
        text: Selles mõistatuses oleme juba loonud funktsiooni „Joonista ruut“. Näed
          seda tööriistakastis rohelise plokina. Enne ruudu joonistamist ja selle
          funktsiooni panemist, pead kirjutama eelnevalt kirjutatud koodi. Selleks
          klõpsa rohelises plokis „Joonista ruut“ redigeerimissuvandit. See avab funktsiooniredaktori.
          Funktsiooniredaktor koosneb kolmest osast. Koht, kus nimetate oma funktsiooni.
          See kuvatakse rohelisel plokil enne vastavat funktsiooni. Kirjuta lühikirjeldus
          sellest, mida funktsioon peaks tegema.
      4:
        image: notes/C4_function_edit_4.png
        text: Antud juhul peaks see ruudu joonistama. Allolev valge ala on tööruum
          ning see toimib nagu tööruum, mida oled juba kasutanud. Pukseeri plokid
          tööriistakastist siia tööruumi. Funktsiooni jaoks paiguta ruutu joonistavad
          plokid rohelise ploki sisse. Kui oled valmis, klõpsa käsku Salvesta ja välju.
          See toob sind tagasi põhiülesande tööruumi. Nüüd saad ülesande lahendamiseks
          kasutada funktsiooniplokki „Joonista ruut“ nagu iga muud plokki.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Siin on funktsioon, mis joonistab 50 pikslise küljega ruudu. See on
          suurepärane, aga kui ma tahan joonistada ühe ruudu 50-piksliste külgedega,
          aga teise ruudu 100-piksliste külgedega? Me ei peaks tegema kahte eraldi
          funktsiooni, mis teevad sama asja. Selle asemel saame kasutada parameetriga
          funktsiooni.
      2:
        image: notes/C4_function_parameters_2.png
        text: Parameetrid võimaldavad meil edastada funktsiooni väärtused, mida kasutatakse
          muutujana funktsiooni sees. Proovime sellele funktsioonile lisada parameetri
          „nagu“, et saaksime seda kasutada erineva suurusega ruutude loomiseks. Funktsiooniredaktoris
          saad redigeerida nime ja kirjeldust nagu enne, aga nüüd lisame siia ka parameetri.
          Kirjuta väljale parameetri nimi ja klõpsa nuppu Lisa parameeter. See loob
          punase ploki sinu poolt äsja loodud nimega. Nüüd saame asendada käsu „Liigu
          edasi 100 ploki võrra“ parameetriga Pikkus, et edasi saaks liikuda pikkuse
          alusel.
      3:
        image: notes/C4_function_parameters_3.png
        text: Klõpsa käsku Salvesta ja sule, lohista tööriistakasti kategooriast Funktsioonid
          välja äsja loodud ruuduplokk. Sa märkad pikkuse kõrval tühja ala, kuna funktsioon
          soovib teada, millise väärtuse pikkuseparameeter saab. Lohista numbriplokk
          kategooriast Matemaatika ja paiguta plokk sellele alale. Näed nüüd, kuidas
          saab erineva suurusega ruutude jaoks erinevate pikkustega funktsiooni ikka
          ja jälle kasutada.
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Harilikult programmeeritakse tekstiga, kuid meie kasutame programmeerimiskeskkonda
          Blockly, mis võimaldab programme kirjutada plokkide lohistamise ja asetamisega.
          Niimoodi puslet kokku pannes loomegi koodi. Alustuseks koostame koodi programmile,
          mis aitab sellel vihasel linnul läbida labürindi, et jõuda pahade sigadeni,
          kes varastasid ta munad.
      2:
        image: notes/C4_intro_2.png
        text: Blockly on jagatud kolme osasse. Vasakul on linnu labürint, kus programmi
          käitatakse. Iga taseme juhised on kirjas labürindi all. Keskmine ala on
          tööriistakast ja iga plokk seal on käsk, millest lind aru saab. Valget ala
          paremal nimetatakse tööekraaniks – siin me oma programmi loomegi.
      3:
        image: notes/C4_intro_3.png
        text: Kui ma lohistan liigutamise ploki tööruumi ja vajutan nupule „Käivita“,
          mis juhtub? Lind liigub ruudustikus ühe kasti võrra edasi. Ja kui ma tahan,
          et lind teeks pärast seda veel midagi? Saan lisada meie programmi veel ühe
          ploki.
      4:
        image: notes/C4_intro_4.png
        text: Valin ploki „pööra paremale“ ja lohistan selle liikumisploki alla, kuni
          kuvatakse kollane nool. Siis ma kukutan selle sinna ja kaks plokki kinnituvad
          teineteise külge. Kui ma vajutan uuesti käsku „Käivita“, täidab lind käske,
          mis on meie tööruumis ülalt alla virnastatud.
      5:
        image: notes/C4_intro_5.png
        text: Kui soovite mõnd plokki kustutada, eemaldage see lihtsalt loendist ja
          lohistage prügikasti. Pärast seda, kui olete vajutanud nupule „Käivita“,
          saate alati vajutada lähtestamisnupule, et lind läheks tagasi algusesse.
          Nüüd sigu püüdma!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: Kui ma tahan joonistada ristkülikut, mille kõrgus on 50 pikslit ja laius
          on kaks pikkust, kuidas saan arvuti seda programmeerima panna? Ma võin kunstnikul
          paluda 50 pikslit üles minna, pöörata paremale ja siis liikuda 100 pikslit
          ning seda kaks korda korrata, kuid siis ma arvutan arvuti eest.
      2:
        image: notes/C4_math_artist_2.png
        text: Viiekümne korrutamine kahega pole nii keeruline, kuid arvutid on matemaatikas
          väga tugevad, seega jätame arvutamise nende hooleks alati, kui see on võimalik.
          Kui ma kasutan muutujat Kõrgus, saan selle hõlpsalt muuta viiekümneks ja
          seejärel muuta algoritmi, mis palub kunstnikul liikuda ülespoole Kõrguse
          järgi, pöörata paremale ja seejärel liikuda edasi kahe kõrguse võrra ja
          nii saamegi teha ristküliku, mille laius on kaks kõrgust.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: Selle õppetüki nimi on Tangrami algoritmid. Tangram on seitsmest tükist
          koosnev piltmosaiik. Tükke kokku pannes saab moodustada erinevaid kujusid.
          Partnerile piltmosaiigi selgitamiseks saad kasutada algoritmi.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: Algoritm on sammude loend, mida saad kasutada ülesande lõpule viimiseks.
          Kasutame neid iga päev (nt ostuloendid ja toiduretseptid). Kui algoritm
          on lihtne, saab seda mitut moodi tõlgendada ja ükskõik, kes seda algoritmi
          kasutab, ei pruugi saada sinu oodatud tulemust. Kui sa tahad olla kindel,
          et kõik saavad täpselt sama tulemuse, peab su algoritm olema üksikasjalik
          ja konkreetne.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: Mina kasutan täna algoritmi joonistuse lõpetamiseks. Ma tahtsin joonistada
          pilti huntidest, aga ma pole just kõige hämmastavam joonistaja. Õnneks on
          minutaoliste jaoks olemas „Joonista numbrite järgi“. Selles on nelikümmend
          värvi ja väiksed tähed ja numbrid, mis ütlevad, millist värvi iga osa peab
          olema. „Värvi numbrite järgi“ ütleb mulle täpselt, millist värvi ma kus
          pean kasutama.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: See on väga konkreetne ja ma saan jälgida juhiseid ning pilt näeb lõpuks
          välja suurepärane. See on võrratu algoritm. Kui juhised poleks olnud nii
          täpsed, poleks mu hundid nii head välja näinud. Kui sa tahad, et asjad näeksid
          välja täpselt sellised, nagu sa plaanisid, pead olema ülimalt täpne.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Igas meeskonnas peab juhendaja välja nuputama sümboli OFF (väljas) ja
          sümboli ON (sees). Binaarväärtuse korral on see nagu kahe tähega tähestik,
          st tähestikus on A ja B, aga sul on 0 ja 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: Binaarväärtuse enim levinud kasutus on tingimuslaused. See on programmeerimise
          klassika. Programm töötab ja ütleb, et kui midagi on tõene, tee seda. Või
          kui see pole tõene, siis tee teist. Võib-olla sa tahad aga teha midagi keerulisemat.
          Tingimuslause asemel sa tahad arvutis töötada näiteks pildi või heliga.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: Arvuti tunneb ära vaid binaarväärtused, aga pilt pole binaar, see pole
          ühed ja nullid. Kuidas seda siis teha? Siin on näide. Teil on see ilus pilt.
          Pilt on põhimõtteliselt teabe vorm. Kogu teavet saab kodeerida ühel või
          teisel moel binaariks. Sa pead vaid välja nuputama, kuidas seda teha.
      4:
        image: notes/C4_unplugged_binary_4.png
        text: Kujuta ette, et paneme ruudustiku selle panda peale ja iga ruudu osas
          me otsustame, kas see on must või pigem valge. Seejärel me värvime selle
          niimoodi. Nüüd on ruudustiku iga ruut kas must või valge ja siis ütleme,
          et mustad ruudud on nullid (binaararvud) ja valged on ühed. Lõpuks on sul
          järele jäänud vaid ühed ja nullid. Nii sa esitadki pildi binaarfailina.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: Selle õppetükki nimeks on „For loop fun“ ehk kordused ja me kasutame
          siin täringumängu mängimiseks numbririda. Iga mängija veeretab algväärtuse,
          lõppväärtuse ja vahemiku määramiseks täringut kolm korda. Iga korra järel
          teeme ringi ümber algväärtuse ja iga väärtuse ümber, millel on sama arv
          samme edasi nagu meie vahemikuväärtusel. Lõpetame ringide tegemise siis,
          kui oleme jõudnud lõppväärtuseni. Suurima punktide arvuga mängija võidab.
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: Kordused on kasulikud siis, kui sa näiteks tahad meteoroloogiks hakata.
          Siis sa kasutad kordusi kogu aeg. Tere! Mina olen Becky ja töötan ettevõttes
          EverPower Renewables tuule tugevuse mõõtjana. Ma ennustan Columbia River
          Gorge’i ala tuulekiirust ettevõtte tuuleparkides.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: Me proovime aru saada, kui tugevat tuult on vaja, et teaksime, kui palju
          energiat selleks vaja läheb. Anname selle teabe edasi tegelikele elektrikauplejatele.
          Nemad ostavad ja müüvad elektrit vastavalt sellele, kui palju elektrit läheb
          vaja selleks, et elektrivõrk oleks tasakaalus, tuled põleksid ja et me saaksime
          maksimaalselt elektrit oma tuuleparkidest.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: Asume ettevõtte EverPower Renewables riiklikus juhtimiskeskuses Portlandis
          ning siia koguneb ettevõtte tuuleparkide teave kogu riigist. Isegi kõige
          võimsamad arvutid ei suuda kõikjal simuleerida atmosfääri. Arvutite ennustusmudelites
          on meil ruudustik. Iga ruudustiku punkt on laiuskraad, pikkuskraad. Peame
          välja arvutama füüsikalised suurused nagu tuulekiiruse, temperatuuri, rõhu
          jms.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Kuna need on üsna suured ruudustikud ja me teeme seda mitmes punktis,
          kordame neid asju miljoneid ja miljoneid kordi. Kõik, mis ma teen, on korduste
          arvu kasutamine. Näiteks siin on korduste arv. Kui sa ennustad tuule tugevust,
          on selleks vaja nii palju parameetreid, mis sellesse mahuvad ning inimese
          jaoks oleks võimatu istuda maha ja neid arvutusi teha. Nii palju asju mõjutavad
          tuult ja mis sellega juhtuda võib, et vajame selle ennustamiseks arvutimudelit.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: Selles õppetükis mängime tühjade lugude täitmist. Sul on mall, mida
          saad täita väga huvitavate erinevustega sarnaste lugude loomiseks.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: Selles õppetükis me õppisime ka, kuidas saab teha kahest juba loodud
          loost kokkuvõtliku malli. Abstraktsioon tähendab erinevuste ja üksikasjade
          eemaldamise kunsti, et saaksid vaadata, kuidas üks lahendus võiks toimida
          mitme erineva probleemi korral. See on arvutiõppes väga kasulik, kuna see
          võimaldab luua funktsioone, mis võivad kasulikuks osutuda mitmes erinevas
          olukorras.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: Selle õppetüki nimi on Laulude kirjutamine parameetritega. Hakkame kohe
          laule kirjutama. Mõnikord võib refrään igas laulus iga kord erineda. Kas
          mäletad laulu „Taadil tare künka peal“? Iga looma jaoks on refrään veidi
          erinev. Tal mitu lehma elab seal, muu-muu. Väikest muutust saab igas refräänis
          näidata parameetrite abil.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Mõnikord vajab funktsioon parameetrit. Parameeter on täiendav teabe
          osa, mida saad funktsioonile edasi anda selle kohandamiseks konkreetse vajaduse
          jaoks. Kui teed oma sõpradega lisandiga jäätist, kasutad sa samu toiminguid,
          mis sarnanevad parameetritele arvutiprogrammis.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: Jäätis võib olla vaniljejäätis, aga kui küsid sõpradelt, millist pealikaunistust
          nad soovivad, võivad vastused olla väga erinevad. Pealiskaunistus on funktsiooni
          nimi, aga iga tüüpi pealiskaunistus on parameeter. Funktsioonid ja parameetrid
          töötavad koos ning neist saab suurepärase arvutiprogrammi ja ka suurepärased
          lisandid.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: Selles õppetükis käsitletakse muutujaid ümbrikus. Vaatame, kuidas saab
          koostada lauset, kui osa teavet on veel puudu. Enamik meist juba teab, kuidas
          täita tühje välju. Seda teeme siis, kui paneme kodutööle oma nime. Mõnikord
          tuleb kirjutada rohkem kui üks sõna ja sel juhul anname sellele tühjale
          väljale sildi, et teaksime milline osa teabest kuhu peab minema.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Muutujad on kohatäited teabejuppide jaoks, mis võivad muutuda. Kui kasutame
          puuduva teabe jaoks muutujat, saame jätkata seda, mida parasjagu teeme ning
          laseme kellelgi teisel hiljem puuduva teabe täita. Tarkvaras me kasutame
          muutujaid väga palju. Me kasutame muutujaid nagu kohatäiteid nime, meiliaadressi
          ja isegi kasutajanime jaoks. Nii saame programmile teada anda, kus need
          üksikasjad kuvatakse pärast seda, kui kasutaja need täidab. Kasutame oma
          töös muutujaid kogu aeg.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Iga kord, kui on vaja teavet hiljem salvestada, kasutame muutujat. Ütleme,
          et meil on vaja kokku lugeda need korrad, mis kasutaja säutsus. Iga kord,
          kui kasutaja säutsub, lisame sellele arvule ühe ja iga kord, kui kasutaja
          säutsu kustutab, me vähendame arvu ühe võrra. Iga kord, kui meil on vaja
          teada, mitu säutsu kasutaja tegi, vaatame vaid seda muutujat.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: Muutuja on ümbris, kuhu saad väärtuse salvestada. Kui kasutad seda muutujat
          algoritmis, avab see ümbrise ning vaatab selle sees asuvat väärtust. See
          võimaldab kirjutada nutikamaid algoritme, mis käituvad erinevalt, sõltuvalt
          muutujasse salvestatud väärtusest.
      2:
        image: notes/C4_variables_artist_2.png
        text: Näiteks kui sa tahad oma väikevennale soovida õnne tema 10-ndal sünnipäeval,
          on see suurepärane, aga järgmisel aastal on sul vaja teda õnnitleda 11-nda
          sünnipäeva puhul. Saan selle asemel luua muutuja nimega „vanus“ ja kirjutada
          algoritmi, mis ütleb „Palju õnne sünnipäevaks, sa saad „vanus“. Kuna muutuja
          saab muutuda, siis saan iga aasta muutujat „vanus“ muuta võrdeliseks „vanus“
          + 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: Selles ülesandes me kasutame muutujat, mis määrab ära kunstniku tõmmatava
          joone pikkuse. Hiljem vaatab edasiliikumisplokk koodist järele selle pikkusemuutuja
          väärtuse.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: Muutuja on ümbris, kuhu saad väärtuse salvestada. Kui kasutad seda muutujat
          algoritmis, avab see ümbrise ning vaatab selle sees asuvat väärtust. See
          võimaldab kirjutada nutikamaid algoritme, mis käituvad erinevalt, sõltuvalt
          muutujasse salvestatud väärtusest.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Nüüd sa proovid Play Labi, kus sulle antakse erinevad mängud ja sa saad
          mängu muutmiseks muuta selliste muutujate nagu kiirus, kõrgus, punktid jne
          väärtust. Sa ei pea muutma mängu algoritmi, vaid ainult muutujat.
      3:
        image: notes/C4_variables_playlab_3.png
        text: Oma töös raamatute jaoks mõeldud programmides Kindle ja X-ray, saan
          muutujaid rakendada mitmel viisil. Üheks muutuja kasutamise võimaluseks
          on salvestada raamatu leheküljenumbrid. Kasutaja saab lehel fonti suurendada
          ja vähendada. Fondi suuruse alusel võib muutuda raamatu lehekülgede arv.
          Saame seda reguleerida, kui salvestame lehekülgede arvu muutujasse.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Nüüd me õpime midagi sellist, mida kõik mängude programmeerijad iga
          päev kasutavad. Neid nimetatakse sündmuseks. Sündmus palub programmil kuulata,
          kui midagi juhtub. Ja kui programm seda kuuleb, teostab ta mingi toimingu.
          Mõni näide sündmusest on näiteks hiireklõps, noolenupp või ekraanipuudutus.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Siin me paneme Baymaxi üles liikuma, et puudutada Hirot ja alla liikuma,
          et puudutada Rapunzlit, kui mängija kasutab üles- ja allanooleklahve või
          -nuppe. Kasutame plokki „kui hoitakse ülesnoolt“ ja liidame sellele ploki
          „liiguta tegelaskuju üles“ ning kui mängija vajutab ülesnooleklahvi, käivitatakse
          kõik plokiga „kui hoitakse ülesnoolt“ liidetut. Sama teeme selleks, et Baymax
          liiguks allapoole. Samm-sammult muutub meie mäng interaktiivsemaks.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: Mitmendas klassis sa käid? Teises? Kümnendas? Esimeses? Mina käisin
          kaheksandas klassis, kui ma õppisin programmeerima. Oma esimese arvuti sain
          ma siis, kui käisin kuuendas klassis. Mulle pakub põnevust see, kui saan
          aidata inimestel probleeme lahendada. Sa saad ennast väljendada ja ideest
          asju ehitada.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Arvutiõpe on aluseks paljudele asjadele, mida õpilased ja professionaalid
          teevad järgmise kahekümne-kolmekümne aasta jooksul. Mulle meeldib programmeerida,
          kuna mulle meeldib inimesi aidata. Mul on võimalus luua midagi sellist,
          mis muudab inimest elu hõlpsamaks. See on üsna lähedal supervõimetele. Kõige
          olulisem on alustada. Ka mina olen algaja ning ma soovin, et õpiksid koos
          minuga.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: Minu nimi on John Vechey ja ma olen üks PopCap Gamesi kaasasutajatest.
          Meie loodud on sellised mängud nagu Plants vs. Zombies, Bejeweled ja Peggle.
          Mängude juures pole alati oluline, kui ideaalne on selle kood, või selle
          kujundus, vaid see, kui hea seda mängida on ja kui palju lõbu see pakub.
          Saad sellest aimu, kui proovid seda, kui teed seda ise ja kui õpid, kohandad
          või kordad oma mängude loomise oskusi.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Kas sul on oma lemmik videomäng? Liigume ühe sammu sellise mängu loomise
          suunas Play Labi abil. Heal mängul on lugu ja igal lool on näitlejad. Näitlejad
          räägivad, liiguvad ja suhtlevad üksteisega. Võib olla isegi koguvad mängureeglite
          järgi punkte. Täna vaatame ükshaaval, kuidas neid asju teha ja selleks kasutame
          Disney tegelasi nagu Anna, Elsa, Hiro, Baymax ja Rapunzel. Loome täitsa
          algusest mängu, mida saab jagada ning telefonis mängida.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Sinu ekraan on jagatud kolme ossa. Vasakul on mänguruum, kus su programmi
          käitatakse. Allpool on kirjutatud iga taseme juhised. See keskmine osa on
          tööriistakast ja iga plokk siin on jupike koodi. Paremal pool asuvat valget
          ala kutsutakse tööruumiks ja siia ehitamegi sinu programmi.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: Alustuseks pead ühendama oma plokid oranži "pärast käivitamist" külge.
          Saad ühendada mitu plokki üksteise külge, lohistades neid välja, kuni näed
          kollast joont, seejärel nad kinnituvad üksteise külge. Esimeses pusles on
          Hiro tegelane nr 1 ja Baymax tegelane nr 2. Hiro tuleb viia Baymaxi juurde,
          lohistades „liigu paremale“ plokk välja ja ühendades selle „pärast käivitamist“.
          Kui plokid on paigas, vajuta nuppu „Käivita“ ja vaata, mis sa programmeerisid.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Hakka pihta ja programmi lõpuks lood sa ise oma mängu nende toredate
          tegelaste abil, kes suhtlevad, koguvad punkte, viskavad mikrobotte, kirsse,
          panne, sädemeid ja jääd... ja kaotavad üksteist ära. See kõik on sinu otsustada.
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Kujuta ette, kui sa peaksid midagi igavesti kordama. Loodetavasti ei
          pea sa seda tegema, sest arvutitel õnnestub kordamine paremini. See on „igavesti
          kordamise“ plokk. Kõik, mis on selle ploki sees, toimub mängus igavesti.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: Seega, kui tahame, et tegelane teeks midagi korduvalt ilma, et kasutaja
          midagi teeks, paneme need plokid „igavesti kordamise“ ploki sisse. Järgmises
          pusles on meie eesmärgiks panna Anna pidevalt üles-alla kõndima. Kordamiskäske
          kasutama õppides säästad hiljem oma mängu luues palju aega.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: Olivia, kelleks ka suurena saada tahad? Kosmonaudiks. Kas sa juhtumisi
          tead, kes on arvutiprogrammeerija? Vist mitte. Oota, mida? Ma ei oska seda
          selgitada, aga arvutiprogrammeerimine on väga lihtne. See on rida juhiseid,
          umbes nagu retsept. Pead neid samm-sammult järgima, et jõuda soovitud tulemuseni.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: Selle ripploendi abil saan muuta pikslite arvu, rea pikkust. Kui pikk
          see oligi? Nupu „käivita“ alt saad juhendeid uuesti vaadata. Siin ma kasutasin
          edasiliikumise plokki ja ma valin 100 pikslit. Saan ploki kustutada, lohistades
          selle tööriistakasti või prügikasti. Paneme selle tagasi.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Käivitage kood, vajutades nuppu „käivita“. See ei toiminud! Vajutan
          nuppu „lähtesta“ ja uurin, mis lahti. Saad proovida puslesid nii mitu korda,
          kui ise tahad, samuti neid vahele jätta ja nende juurde tagasi tulla. Anna
          lihtsalt endast parim ja ära anna alla. Lisame veel ühe edasiliikumise ploki.
          Ka see ei toiminud. Ma saan ploki teiste plokkide vahele panna.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Paneme pööramise ploki edasiliikumise plokkide vahele. Pöörame 45 kraadi
          paremale. Käivitame uuesti. Lähtestame, käivitame, suurepärane! Siin on
          veel üks pusle. Vahel antakse teile lõpetamiseks alguskood. Pean lisama
          sellele õiged pikkused ja kraadid.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: Vahel võid sa kogemata alguskoodi rikkuda. Mida siis teha? Võid vajutada
          „tühjenda pusle“ ja alustada algusest. Ma lohistan numbriploki erinevatele
          pikslialadele. Ma valin piksliteks 100, kraadideks 45 ja piksliteks uuesti
          100. Suurepärane! Siin on Code Studio mesilane. Pean viima meislase iga
          lille juurde ja koguma nektarit.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: Esimene lill asub kolme ruudu kaugusel, seega vajan kolme edasiliikumise
          plokki. 1, 2, 3. Seejärel vajan nektari korjamise plokki ja siis veel ühte.
          See ei toiminud. Panen nektari korjamise ploki vahele veel ühe edasiliikumise
          ploki ja käivitan uuesti. Tore, see toimib! Sa õppisid kaustama Code Studio
          kunstniku ja mesilase puslesid. Soovin edu Code Studio pusleväljakutses.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: Olivia, kelleks sa suurena saada tahad? Kosmonaudiks. Kas sa juhtumisi
          tead, kes on arvutiprogrammeerija? Vist mitte. Oota, mida? Ma ei oska seda
          selgitada, aga arvutiprogrammeerimine on väga lihtne. See on rida juhiseid,
          umbes nagu retsept. Pead neid samm-sammult järgima, et jõuda soovitud tulemuseni.
      2:
        image: notes/unplug1_2.png
        text: Arvutiteaduse kaudu saad maailma mõjutada. Näiteks muusikavideote või
          mängude näol. Samuti saad uurida, kes on kelle sugulane ja leida sõprade
          sõpru. Lisaks saad teha veel kõiksugu asju, millega inimeste elusid päästa.
          Kuid sul peab olema tahtmist. Minu jaoks on see nagu pintsel. Hea programmeerimine
          on ei erinegi oluliselt heast kunstist.
      3:
        image: notes/unplug1_3.png
        text: Kui ma lõpuks veidi programmeerimist õppisin, muutus tühi sein paljudeks
          usteks ja kui sa need avad, leiad nende tagant koridori, kus on omakorda
          veel palju uksi. Programmeerimine on tore ja lihtne. Saad teha kõike, mida
          vähegi tahad. Kui sa lõpuks piisavalt palju uksi avad, pääseb valgus sisse.
          Valmisprogramm on minu jaoks nagu valgusküllane maja. Kõik nurgad on hästi
          valgustatud. Sa saad suhelda ja jõuda nii paljude inimesteni, et see on
          lausa enneolematu.
      4:
        image: notes/unplug1_4.png
        text: Meie esimene õppetund selles sarjas selgitab, mis on arvutiteadus, mida
          teeb arvutiteadlane ja kuidas tehnoloogiat vastutustundlikumalt kasutada.
          See on väga tähtis õppetund, kuid siin on palju teksti. Õppetunni lõpuks
          saad teha päris oma koodi, kasutades enda nimetähti. See on tore tegevus
          ja väga kasulik, sest kahendsüsteem tundub küll väga tehniline, aga kui
          sa selle ära õpid, siis oskad justkui salakeelt.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: Arvutusliku mõtlemise õppetund näitab, kuidas lammutada üks suur ja
          raske probleem mitmeks väiksemaks probleemiks. Õppetunni eesmärgiks on kirjutada
          rida juhiseid, mille järgi keegi teine saab joonistada koletise, mille leiad
          õppetunni plaanist.
      2:
        image: notes/unplug2_2.png
        text: "Õpilased jagunevad juhiste kirjutamiseks rühmadesse ja annavad need
          üle teisele rühmale, kes peab koletise joonistama. Rühmad kirjutavad juhised,
          kasutades arvutusliku mõtlemise nelja etappi: osadeks jaotamine, mustrite
          otsimine, eraldamine ja algoritmid."
      3:
        image: notes/unplug2_3.png
        text: Rühmad jaotavad kõigepealt ülesande osadeks ehk koostavad mänguplaani.
          Seejärel otsivad nad kataloogis olevate koletiste vahel mustreid. Kui nad
          kohtavad koletiste vahel erinevusi, eemaldavad nad need detailid. Näiteks
          on ühel koletisel Vegitase silmad, teisel aga Spritemi omad. Kuid neil mõlemal
          on silmad, seega saame kirjutada rea, mis jätab koletise silmad tühjaks.
      4:
        image: notes/unplug2_4.png
        text: "Õpilased saavad kirjutada juhised, mida nimetatakse algoritmiks ja
          mis loetleb koletise osad, jättes silmad tühjaks. Nad annavad juhised edasi
          teistele õpilastele, kes loovad oma koletise."
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: Millimeetripaberil programmeerimisega selgitame kodeerimise toimimist,
          aidates inimestel joonistusi järele teha kõigest nooli ja kriipse kasutades.
          Üks inimene saab millimeetripaberil väikese joonistuse, mille ta peab läbima
          ainult kindlaid nooli kaustades ja kirjeldama, kuidas seda joonist järele
          teha.
      2:
        image: notes/unplug3_2.png
        text: 'Selles ülesandes tohib kasutada ainult järgmisi sümboleid: ühe ruudu
          võrra edasiliigutamine, ühe ruudu võrra tagasiliigutamine, ühe ruudu võrra
          üles liigutamine, ühe ruudu võrra alla liigutamine, järgmise värvi vastu
          vahetamine ja ruudu täitmine värviga. Kui kõik on kodeeritud, saame anda
          selle teisele inimesele, kes loeb koodi ja üritab pilti järele teha.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: Millimeetripaberil programmeerimisega selgitame kodeerimise toimimist,
          aidates inimestel joonistusi järele teha kõigest nooli ja kriipse kasutades.
          Üks inimene saab millimeetripaberil väikese joonistuse, mille ta peab läbima
          ainult kindlaid nooli kaustades ja kirjeldama, kuidas seda joonist järele
          teha.
      2:
        image: notes/unplug4_2.png
        text: "Ülesande teises pooles küsime õpilastelt, mitmel eri viisil on võimalik
          paberilehte voltida, et moodustada kuusteist identset ristkülikut. Seejärel
          arutame, kuidas mitu eri lahendust võivad anda sama lõpptulemuse ja miks
          mõni lahendus on parem kui teine."
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: Millimeetripaberil programmeerimisega selgitame kodeerimise toimimist,
          aidates inimestel joonistusi järele teha kõigest nooli ja kriipse kasutades.
          Üks inimene saab millimeetripaberil väikese joonistuse, mille ta peab läbima
          ainult kindlaid nooli kaustades ja kirjeldama, kuidas seda joonist järele
          teha.
      2:
        image: notes/unplug5_2.png
        text: "Ülesande teises pooles küsime õpilastelt, mitmel eri viisil on võimalik
          paberilehte voltida, et moodustada kuusteist identset ristkülikut. Seejärel
          arutame, kuidas mitu eri lahendust võivad anda sama lõpptulemuse ja miks
          mõni lahendus on parem kui teine."
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: See ülesanne on „kaartidega kodeerimine“ ja see sobib igale vanusele.
          Nagu sa varasemates õppetundides ja Blocklys juba õppisid, sisaldavad if-laused
          teavet, mida sa pead hindama ja otsustama, kas see on tõene või väär. See
          on tingimus ja seda saab kasutada mitmel eri viisil.
      2:
        image: notes/unplug6_2.png
        text: Kaustame seda ja loome paberil programme, mille käivitame juhuslikult
          tõmmatud mängukaardiga. Sul võib olla if-lause, mis ütleb, et kui tõmmatud
          kaart on suurem kui 8, saad punkti. Muul juhul saab punkti sinu vastane.
          Saad muuta selle nii lihtsaks või keeruliseks kui sa ise tahad.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: Umbes nii, nagu laulusõnades, kus refrään määratakse kohe alguses ja
          ülejäänud laul vaid kordab refrääni. See ongi funktsiooni kutsumine.
      2:
        image: notes/unplug7_2.png
        text: Selles õppetunnis määrame refrääni kohe laulu alguses, seejärel laulame
          laulu lõpuni, läheme tagasi ja märkame, et klass ei laula mitte sõna „refrään,“
          vaid nad lähevad automaatselt üles algusse, kus me refrääni defineerisime
          ja laulavad sealt. See selgitab ilmekalt programmi käitumist funktsiooni
          defineerimisel ja kutsumisel.
      3:
        image: notes/unplug7_3.png
        text: Näitame tuttavate laulude abil nagu „Old MacDonald,“ kuidas refrääni
          ikka ja jälle kutsutakse ja kuidas vahel võib refrään muutuda. Muutuvate
          sõnadega laul nagu „Old MacDonald“ on hea näide parameetrite tutvustamiseks.
          Lisatakse sõnu, et funktsioonile lisateavet saata. Kui kõik on asjast aru
          saanud, võite mõned endale tuttavad laulud osadeks jagada. Proovige sellega
          üheskoos hakkama saada.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Meie õppetund eraldamisest kasutab tuttavat Mad Libi põhimõtet, kus
          sisestame loosse tühiku, mida saab täita paljude erinevate sõnadega. Aluseks
          on see põhimõte, laste ülesandeks on mõelda välja sõnad oma loole ja selgitada
          eraldamise põhimõtet.
      2:
        image: notes/unplug8_2.png
        text: See käsitleb funktsioone, mis sarnanevad laulule „Old MacDonald,“ kus
          on kindel refräänistruktuur, kuid üks väike muutuv element. Siis sa eraldad
          selle muutuva elemendi ja asendad selle iga kord oma sõnaga. Vahel on aga
          kolm muutuvat sõna, mille asendad kolme parameetriga, millest on samuti
          abi.
      3:
        image: notes/unplug8_3.png
        text: "Üks funktsioon võib lahendada paljusid eri probleeme. Tihti kirjutatakse
          kõigi nende probleemide jaoks eraldi funktsioonid märkamata, et nende vahe
          on väga väike. Kui see väike erinevus lahendada, saab 14 funktsiooni asemel
          üht funktsiooni palju kordi kasutada"
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Teatepogrammeerimine on lõbus õppetund, mis teeb asja paremini mõistetavaks
          kui arvutiteadus. Vahel on lapsed rahutud ja tahaksid nad jalule ajada.
          See on hea võimalus arvutiteadusele veidi põnevust lisada.
      2:
        image: notes/unplug9_2.png
        text: Jagame lapsed kahte rühma nii, et nad seisavad reas ja jooksevad nagu
          teatejooksus. Kummagi rühma esimene jookseb ruumi teise otsa, kus on millimeetripaberil
          joonis ja valge paberileht. Nad kirjutavad üles esimese sammu kujuise joonistamiseks,
          jooksevad oma ritta tagasi ja sildistavad järgmise mängija, kes läheb järgmist
          sammu üles kirjutama.
      3:
        image: notes/unplug9_3.png
        text: See on hea vahend selgitamaks vigade avastamist, oma tööle korrektuuri
          tegemise ja teiste varem tehtud töö kontrollimise vajadust. Mõistad kiiresti,
          kui tähtis on olla kodeerimisel ettevaatlik, kui sinust sõltub terve meeskond.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: See tegevus selgitab arusaadaval viisil Interneti toimimist. Selgitame
          kogu vajalikku terminoloogiat lihtsate sõnadega, et õpilased saaksid simuleerida
          sõnumi (nt meili) saatmist.
      2:
        image: notes/unplug10_2.png
        text: "Õpilased edastavad sõnumeid, mängides üht kolmest edastusmeetodist:
          traadita Internet, DSL või kiudoptiline kaabel. WiFit mängivad õpilased
          peavad sõnumit peas kandma, sest WiFi kaudu on suurim tõenäosus osa teavet
          kaotada."
      3:
        image: notes/unplug10_3.png
        text: DSL-i või kaablit mängivad õpilased kannavad sõnumit käeseljal, kus
          teabe kadu on veidi väiksem. Kiudoptilist kaablit mängivad õpilased kannavad
          sõnumit mõlema käega. See on hea viis selgitamaks asja, mida paljud meist
          iga päev kaustavad.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: Nüüd on aeg vaadata üle kõik, mis te viimase 19 õppetunni jooksul tegite.
          Nüüd on õige aeg õpilastele öelda, et nad on suure saavutusega hakkama saanud.
          Nende õppetundide jooksul õppisid nad rohkem, kui enamik täiskasvanuid arvutiteadustest
          teab.
      2:
        image: notes/unplug11_2.png
        text: Arutlege klassi või väikeste rühmadega lemmikõppetundisest. Kui heidate
          pilgu tagasi õpitule, saab õpilaste loovus särada. Jagage nad rühmadesse
          ja laske neil koostada ise oma arvutivaba õppetund. Andke igale rühmale
          põhikontseptsioon (nt funktsioonid või algoritmid) ja andke nende käsutusse
          hulgaliselt käsitöömaterjale. Laske igal rühmal oma tööd esitleda või varuge
          veel üks päev õpilaste loodud õppetundide läbiviimiseks.
      3:
        image: notes/unplug11_3.png
        text: Code.org-i meeskond loodab, et sul oli kursuse jooksul väga tore. Kas
          sinu unistuseks on luua parim uus rakendus, kasutada programmeerimist haiguste
          ravimiseks või saada hiilgavaks probleemide lahendajaks, oli see kursus
          esimeseks sammuks nende unistuste täitumisel.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 'Tere! Mina olen Kathleen Kennedy, filmi „Tähtede sõda: Jõud tärkab“
          produtsent. Täna töötan koos ühe meie staari BB-8-ga. BB-8 on kerakujuline
          droid. Kõiki tema tegusid ja liigutusi kontrollib arvuti tarkvara. Arvutiteadus
          puudutab iga tööstusharu turundusest kuni tervishoiu ja filmini. Filmi „Jõud
          tärkab“ kallal töötasid sajad arvutiinsenerid.'
      2:
        image: notes/starwars_intro_2.JPG
        text: Tere! Mina olen Rachel Rose. Olen ILMi uurimis- ja arendustegevuse vaneminsener
          ning juhin animatsiooni ja olendite arendamise meeskonda. Ma aitan kunstnikel
          filmi „Jõud tärkab“ jaoks tegelaskujude struktuure arendada. Need on liikuvad
          osad, mis muudavad tegelaskuju kaugel galaktikas väga usutavaks.
      3:
        image: notes/starwars_intro_3.JPG
        text: Järgmise tunni jooksul loome ise oma Tähtede sõja mängu. Õpetame programmeerimise
          põhitõdesid. Tavaliselt koosneb programmeerimine vaid tekstist, kuid meie
          kaustame siin plokke, mida pukseerides saamegi programme kirjutada. Pealispinna
          all loome ikkagi koodi. Pärast plokkidega põhiasjade proovimist viime su
          üle JavaScriptile, mis on üks levinumaid programmeerimiskeeli.
      4:
        image: notes/starwars_intro_4.JPG
        text: Alustuseks programmeerime koos Reyga BB-8 kõndima ja varuosi kokku korjama.
          Ekraan on jagatud kolmeks osaks. Vasakul on Tähtede sõja mänguala, kus jookseb
          kood. Juhendid iga taseme jaoks on mänguala all.
      5:
        image: notes/starwars_intro_5.JPG
        text: Keskmine ala on tööriistakast ja iga plokk seal on käsk, millest BB-8
          aru saab.
      6:
        image: notes/starwars_intro_6.JPG
        text: Paremal asuv valge ala on tööala ja seal me oma programmi loomegi.
      7:
        image: notes/starwars_intro_7.JPG
        text: Mis juhtub, kui lohistan vasakule liikumise ploki tööalale ja vajutan
          käivitusnuppu? BB-8 liigub ruudustikul ühe ruudu võrra vasakule.
      8:
        image: notes/starwars_intro_8.JPG
        text: Mis siis, kui tahan, et BB-8 pärast vasakule pööramise plokki veel midagi
          teeks? Saan lisada veel ühe ploki. Ma valin selleks ülesliikumise ploki
          ja lohistan selle vasakule liikumise ploki alla, kuni need tõusevad esile.
          Siis lasen selle lahti ja kaks plokki kinnituvad üksteise külge.
      9:
        image: notes/starwars_intro_9.JPG
        text: Kui vajutan uuesti käivitusnuppu, täidab BB-8 käske, mis on tööalal
          ülevalt alla reastatud. Kui tahad plokki kustutada, eemalda see loendist
          ja lohista see tööriistakasti tagasi.
      10:
        image: notes/starwars_intro_10.JPG
        text: Pärast käsunupu vajutamist saate igal ajal vajutada lähtestamisnuppu,
          et BB-8 liiguks lähtekohale tagasi. Hakkame nüüd pihta!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Plokkide sees on JavaScripti käsud. JavaScript on populaarseim programeerimiskeel
          professionaalsetele programmeerijatele. Plokkidega on hea programmeerimise
          õppimist alustada. Isegi tippülikoolid nagu Harvard ja Berkeley alustavad
          õpetamist sel moel. Kui põhiasjad on selged, kirjutavad insenerid koodi
          tippides, sest nii on kiirem.
      2:
        image: notes/starwars_typing_2.JPG
        text: Võime tippida sadu käske ilma, et peaksime neid tööriistakastist otsima
          ja välja lohistama. Õppimise ajal võib tippimine aeglasemalt edeneda, aga
          tahame, et sa seda prooviksid.
      3:
        image: notes/starwars_typing_3.JPG
        text: Iga pusle juures saate vajutada tööala paremas ülanurgas olevat nuppu
          „näita teksti,“ et vahetada plokid koodi tekstina tippimise vastu.
      4:
        image: notes/starwars_typing_4.JPG
        text: Järgmises õppetükis harjutame tippimisrežiimi. Siin saate endiselt plokki
          tööriistakastist välja lohistada või käsunime tippida.Tippima hakates kuvatakse
          tippimiskoha all võimalikud käsunimed. Selle asemel, et tippida terve käsunimi,
          võite kiiremaks edasiliikumiseks selle valida. Mina kasutan koodi kirjutamisel
          alati automaatse lõpetamise funktsiooni.
      5:
        image: notes/starwars_typing_5.JPG
        text: Arvuti tahab, et oleksid koodi tippimisel eriti täpne. Käsunimi ja selles
          olevad suurtähed peavad olema täpselt õiged, k.a jutumärgid ja semikoolon.
          Isegi väikese trükivea korral ei saa BB-8 koodist aru ja ei saa liikuda.
      6:
        image: notes/starwars_typing_6.JPG
        text: Kui reas on viga, toob redaktor selle esile, et saaksid selle parandada.
      7:
        image: notes/starwars_typing_7.JPG
        text: Kui jääd toppama, võid alati otsast alustada, kaustades nuppu „alusta
          uuesti,“ ja saad igal ajal tagasi plokirežiimi minna, klõpsates paremat
          ülanurka. Hästi, proovime nüüd tippida. Ja ära heida meelt, kui sa vigu
          teed. Kõik peavad paar korda proovima enne, kui asi õnnestub.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Tere! Minu nimi on Charita Carter. Olen Walt Disney Imagineeringu loovprodutsent.
          Ma juhin meeskondi, mis toodavad külastajate poolt kasutatavaid atraktsioone.
          Otsime alati võimalusi täiustamiseks ja külastajatele parema elamuse pakkumiseks.
          Ja tehnoloogia ongi selle võtmeks.
      2:
        image: notes/starwars_events_2.JPG
        text: "Õnnitleme, sa said hakkama! Sa programmeerisid BB-8. Nüüd oleme valmis
          proovima midagi raskemat. Hakkame pihta. Nüüd on programmeerimise põhialused
          selged ja läheme ajas tagasi, et luua sinu oma mäng, mille peategelasteks
          on R2-D2 ja C3PO."
      3:
        image: notes/starwars_events_3.JPG
        text: Mängu loomiseks peame õppima midagi sellist, mida mänguprogrammeerijad
          iga päev kasutavad. Neid nimetatakse sündmusteks. Sündmus ütleb programmile,
          et tuleb jälgida või oodata, kui midagi juhtub. Ja kui see juhtub, rakendab
          programm käsu.
      4:
        image: notes/starwars_events_4.JPG
        text: Sündmusteks on näiteks hiireklõpsu, noolenupu või ekraani puudutamise
          jälgimine.
      5:
        image: notes/starwars_events_5.JPG
        text: Me liigutame R2-D2 üles mässuliste piloodile sõnumit viima ja seejärel
          liigutame teda alla teise mässuliste piloodi juurde. Tema liigutamiseks
          kasutame sündmusi. Kui mängija kasutab üles-/allanoolt või üles/alla nuppe.
      6:
        image: notes/starwars_events_6.JPG
        text: Me kasutame „kui üles“ sündmuseplokki, mille külge ühendame „mine üles“
          ploki. Kui mängija vajutab ülesnoolt, käivitatakse „kui üles“ plokiga seotud
          kood. R2-D2 alla liigutamiseks teeme seda sama.
      7:
        image: notes/starwars_events_7.JPG
        text: Selleks kaustame käsku „kui üles“. Kui sa käsu tööriistakastist välja
          lohistad, siis näed, et see ei alga mitte semikooloniga, vaid hoopis looksuluga.
          See tekitab meile ruumi, kuhu sisestada teised käsud. Iga käsk, mille me
          looksulgudesse paneme, käivitatakse, kui mängija vajutab ülesnoolt.
      8:
        image: notes/starwars_events_8.JPG
        text: Tahame R2-D2 üles liigutada, seega paneme käsu sisse „mine üles“ ploki.
          R2-D2 alla liigutamiseks teeme seda sama.
      9:
        image: notes/starwars_events_9.JPG
        text: Selle asemel, et droidi kontrolliv kood eelnevalt valmis kirjutada,
          saame lasta R2-D2-l reageerida nupuvajutuse sündmustele, mis teda ekraanil
          ringi liigutavad. Sinu mäng muutub samm-sammult järjest interaktiivsemaks.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Tere! Minu nimi on Alice ja mina juhin Code.org-i projekteerimis- ja
          ehitusmeeskondi. Ma töötasin ka selle õpikuga, mida sa praegu läbi mängid.
      2:
        image: notes/starwars_congrats_2.JPG
        text: Jõudsid viimasele tasemele. Soovin õnne! Sa omandasid kõik vajalikud
          teadmised, et luua ise päris oma Tähtede sõja mäng. Rohkem juhiseid ega
          puslesid pole. Nüüd saad luua oma mängu ja valida, kuidas see töötab. Veel
          üks asi. Sa avasid uued helid ja käsud, mis võimaldavad veelgi enamat.
      3:
        image: notes/starwars_congrats_3.JPG
        text: "[õpilased räägivad] Me tegime mängu, kus saab nuuskursigade eest punkte.
          Konks on sellest, et iga kord, kui sa saad nuuskursea, ilmub tormisõdur.
          Kogu ekraan on nuuskursigu täis ja kui sa kogud neid 10000 tükki, võidad
          mängu."
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[õpilased räägivad] Me tegime mängu, kus ei saa kaotada ja kõik, mille
          sa tapad, annab punkte. Vahetasin klahvid ära nii, et ülesnoolt vajutades
          liigub tegelane alla ja paremnoolt vajutades liigub tegelane vasakule. See
          on väga raske! Mängu arendajana on sul ebaõiglane eelis. Kas mul õnnestus?
          Jee!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: Kui mängu loomine on valmis, siis vali „jagamine,“ et saada link, mida
          sõpradele jagada või mängu telefonis mängida. Lõbutse!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Tere! Mina olen Kathleen Kennedy, filmi „Tähtede sõda: Jõud tärkab“
          produtsent. Täna töötan koos ühe meie staari BB-8-ga. BB-8 on kerakujuline
          droid. Kõiki tema tegusid ja liigutusi kontrollib arvutitarkvara. Arvutiteadus
          puudutab iga tööstusharu turundusest kuni tervishoiu ja filmini. Filmi „Jõud
          tärkab“ kallal töötasid sajad arvutiinsenerid.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Tere! Mina olen Rachel Rose. Olen ILMi uurimis- ja arendustegevuse vaneminsener
          ning juhin animatsiooni ja olendite arendamise meeskonda. Ma aitan kunstnikel
          filmi „Jõud tärkab“ jaoks tegelaskujude struktuure arendada. Need on liikuvad
          osad, mis muudavad tegelaskuju kaugel galaktikas väga usutavaks.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: Järgmise tunni jooksul ehitame ise oma Tähtede sõja mängu. Õpetame programmeerimise
          põhitõdesid. Tavaliselt koosneb programmeerimine vaid tekstist, kuid meie
          kaustame siin plokke, mida pukseerides saamegi programme kirjutada. Alustuseks
          programmeerime koos Reyga BB-8 kõndima ja varuosi kokku korjama.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Sinu ekraan on jagatud kolmeks põhiosaks. Vasakul pool on Tähtede sõja
          mänguala. Juhised iga taseme jaoks on mänguala all.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: Keskmine ala on tööriistakast ja iga plokk seal on käsk, millest BB-8
          aru saab.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: Paremal asuv valge ala on tööala ja seal me oma programmi loomegi.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: Mis juhtub, kui lohistan vasakule liikumise ploki tööalale? BB-8 liigub
          ruudustikul ühe ruudu võrraa vasakule.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: Mis siis, kui tahan, et BB-8 pärast vasakule liikumise plokki veel midagi
          teeks? Saan lisada programmile veel ühe ploki. Ma valin selleks ülesliikumise
          ploki ja lohistan selle vasakule liikumise ploki alla, kuni need tõusevad
          esile. Siis lasen selle lahti ja kaks plokki kinnituvad üksteise külge.
          Kui ma uuesti käivitusnuppu vajutan, täidab BB-8 tööalal ülalt alla reastatud
          käsud.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Kui soovid plokki kustutada, eemalda see lihtsalt loendist ja lohista
          tagasi tööriistakasti.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Pärast käivitusnupu vajutamist saad igal ajal vajutada lähtestamisnuppu,
          et BB-8 liiguks lähtekohale tagasi. Hakkame nüüd pihta!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Tere! Minu nimi on Charita Carter. Olen Walt Disney Imagineeringu loovprodutsent.
          Ma juhin meeskondi, mis toodavad külastajate poolt kasutatavaid atraktsioone.
          Otsime alati võimalusi täiustamiseks ja külastajatele parema elamuse pakkumiseks.
          Ja tehnoloogia ongi selle võtmeks.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: "Õnnitleme, sa said hakkama! Sa programmeerisid BB-8. Nüüd oleme valmis
          proovima midagi raskemat. Hakkame pihta. Nüüd on programmeerimise põhialused
          selged ja läheme ajas tagasi, et luua sinu oma mäng, mille peategelasteks
          on R2-D2 ja C3PO."
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: Mängu loomiseks peame õppima midagi sellist, mida mänguprogrammeerijad
          iga päev kasutavad. Neid nimetatakse sündmusteks. Sündmus ütleb programmile,
          et tuleb jälgida või oodata, kui midagi juhtub. Ja kui see juhtub, rakendab
          programm käsu.
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Sündmusteks on näiteks hiireklõpsu, noolenupu või ekraani puudutamise
          jälgimine.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Me liigutame R2-D2 üles mässuliste piloodile sõnumit viima ja seejärel
          liigutame teda alla teise mässuliste piloodi juurde. Tema liigutamiseks
          kasutame sündmusi. Kui mängija kasutab üles-/allanoolt või üles/alla nuppe.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: Me kasutame „kui üles“ sündmuseplokki, mille külge ühendame „mine üles“
          ploki. Kui mängija vajutab ülesnoolt, käivitatakse „kui üles“ plokiga seotud
          kood. R2-D2 alla liigutamiseks teeme seda sama. Selle asemel, et droidi
          kontrolliv kood eelnevalt valmis kirjutada, saame lasta R2-D2-l reageerida
          nupuvajutuse sündmustele, mis teda ekraanil ringi liigutavad.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Sinu mäng muutub samm-sammult järjest interaktiivsemaks.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Tere! Minu nimi on Alice ja mina juhin Code.org-i projekteerimis- ja
          ehitusmeeskondi. Ma töötasin ka selle õpikuga, mida sa praegu läbi mängid.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: Jõudsid viimasele tasemele. Soovin õnne! Sa omandasid kõik vajalikud
          teadmised, et luua ise päris oma Tähtede sõja mäng. Rohkem juhiseid ega
          puslesid pole. Nüüd saad luua oma mängu ja valida, kuidas see töötab. Veel
          üks asi. Sa avasid uued helid ja käsud, mis võimaldavad veelgi enamat.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: "[õpilased räägivad] Me tegime mängu, kus saab nuuskursigade eest punkte.
          Konks on sellest, et iga kord, kui sa saad nuuskursea, ilmub tormisõdur.
          Kogu ekraan on nuuskursigu täis ja kui sa kogud neid 10000 tükki, võidad
          mängu."
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[õpilased räägivad] Me tegime mängu, kus ei saa kaotada ja kõik, mille
          sa tapad, annab punkte. Vahetasin klahvid ära nii, et ülesnoolt vajutades
          liigub tegelane alla ja paremnoolt vajutades liigub tegelane vasakule. See
          on väga raske! Mängu arendajana on sul ebaõiglane eelis. Kas mul õnnestus?
          Jee!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: Kui mängu loomine on valmis, siis vali „jagamine,“ et saada link, mida
          sõpradele jagada või mängu telefonis mängida. Lõbutse!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Minu nimi on Jens Bergensten, aga mind tuntakse kui Jebi. Ma olen Minecrafti
          peaarendaja siin Stochkholmis asuvas Mojangis. Hakkasin programmeerima 11-12aastaselt,
          sest ma tahtsin mänge luua. Üks mu isa sõber ütles, et mängude loomiseks
          peab programmeerimist õppima. Nii ma alustasingi. Mulle meeldib mänge projekteerida
          ja konstrueerida. Just see mulle Minecrafti juures meeldibki.
      2:
        image: notes/mc_intro_2.JPG
        text: Järgmise tunni jooksul õpid arvutiteaduse põhialuseid, programmeerides
          Alexi või Steve’i liikuma läbi simuleeritud Minecrafti maailma.
      3:
        image: notes/mc_intro_3.JPG
        text: Traditsiooniline programmeeimine toimub tavaliselt tekstivormis, aga
          täna kasutame Blocklyt, süsteemi, kus kasutatakse visuaalseid plokke, mida
          pukseerides on võimalik programme kirjutada. Pealispinna all lood sa JavaScripti
          koodi.
      4:
        image: notes/mc_intro_4.JPG
        text: Sa õpid põhimõtteid, mida arvutiprogrammeerijad igapäevaselt kaustavad
          ja mis on arvutiteaduse aluseks. Meie siin Mojangis kasutame Minecrafti
          töölepanemiseks neid samu põhimõtteid.
      5:
        image: notes/mc_intro_5.JPG
        text: Enne, kui sa alustad, vali oma tegelane. Mina valin Alexi. Kirjutame
          koodi programmile, mis aitab tal mööda ekraani ringi liikuda.
      6:
        image: notes/mc_intro_6.JPG
        text: Sinu ekraan on jagatud kolmeks põhiosaks. Vasakul on Minecrafti mänguala,
          kus sinu programm jookseb. Juhised iga taseme jaoks on mänguala all.
      7:
        image: notes/mc_intro_7.JPG
        text: Keskmine ala on tööriistakast ja iga plokk seal on käsk, mis Alexi tegevust
          juhib.
      8:
        image: notes/mc_intro_8.JPG
        text: Paremal asuv valge ala on tööala ja seal me oma programmi loomegi.
      9:
        image: notes/mc_intro_9.JPG
        text: Kui lohistame edasiliikumise ploki tööalale ja seejärel klõpsame nuppu
          „käivita,“ mis siis juhtub? Alex liigub ruudustikul ühe ruudu võrra edasi.
      10:
        image: notes/mc_intro_10.JPG
        text: Mis siis, kui tahan, et ta pärast ühe ruudu võrra edasi liikumist veel
          midagi teeks? Saame lisada programmile veel ühe ploki. Ma valin selleks
          paremale pööramise ploki ja lohistan selle edasiliikumise ploki alla, kuni
          ilmub nähtavale oranž joon. Siis lasen selle lahti ja kaks plokki kinnituvad
          üksteise külge. Kui uuesti käivitusnuppu vajutame, täidab Alex tööalal ülalt
          alla reastatud käsud.
      11:
        image: notes/mc_intro_11.JPG
        text: Kui soovid plokki kustutada, lihtsalt lohista see tagasi tööriistakasti.
      12:
        image: notes/mc_intro_12.JPG
        text: Muutuste tagasivõtmiseks ja taseme algusse tagasi saamiseks kasuta nuppu
          „alusta uuesti,“ mis asub tööala paremas ülanurgas. Veel üks asi. Näed seda
          väikest kolmnurka pööramisplokkidel? Need kolmnurgad tähendavad, et sul
          on erinevad valikud. Hakkame kodeerima!
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Mina olen Lydia Winters, Mojangi brändijuht, ja me tegime sellise mängu
          nagu Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: Minu lemmiktegevuseks on Minecraftis ringivaatamine. Mulle meeldib seigelda
          koobastes ja põnevaid avastusi teha. Minu kui mitte programmeerija jaoks
          on väga huvitav Minecrafti õppetund läbi teha ja veidi kodeerimist õppida.
      3:
        image: notes/mc_repeat_3.JPG
        text: Viimases tasemes läks vaja palju edasiliikumisplokke. Oleks palju lihtsam,
          kui saaksime arvutile öelda, et ta täidaks edasiliikumise käsku 4-5 korda.
          Õnneks suudavad arvutid käske kordustsüklite abil korrata.
      4:
        image: notes/mc_repeat_4.JPG
        text: Minecrafti luues kaustame kordustsükleid, millega asendame uue maailma
          loomise alusmaterjali. Selleks on tuhanded plokid. Kasutame kordustsükleid
          ka väikestes asjades, näiteks Alexi jalgade kõndimise ajal edasi-tagasi
          liigutamiseks. Kordustsüklid on programmeerimises väga võimsad.
      5:
        image: notes/mc_repeat_5.JPG
        text: "Öö saabub ja paaril järgmisel tasemel ehitame maja, et meil oleks turvaline.
          Kordusploki kasutamine muudab selle meile lihtsaks."
      6:
        image: notes/mc_repeat_6.JPG
        text: Majaseina ehitamiseks võime käskida Alexil edasi liikuda ja neli planku
          asetada. Võime aga käskida tal edasi liikuida ja asetada vaid ühe plangu
          ning kasutada siis kordusplokki, et ta teeks seda tegevust mitu korda. Nüüd
          klõpsame kordusplokki ja ütleme, mitu korda ta oma tegevust peab kordama.
          Nüüd ehitame maja valmis enne, kui öö saabub. Lõbutsege!
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Nüüd õpime if-lausete kohta. If-lausetel on programmeerima õppimisel
          väga oluline osa. Need aitavad arvutil otsuseid teha.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Kõik arvutid kasutavad if-lauseid, isegi minu telefon. Näiteks kui ma
          oma telefoni lukustusest avan, käivitab see koodi, mis käsib telefoni avada
          juhul, kui ma sisestan õige parooli. Muul juhul kuvatakse tõrketeade.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Saad oma koodis kasutada if-lauseid ja panna Steve’i ja Alice’i kõigele
          ümbritsevale reageerima. Näiteks, kui nende ees on kivi, pööravad nad vasakule.
          Või pööravad paremale, kui nende ees on puu.
      4:
        image: notes/mc_if_statements_4.JPG
        text: Siin me ei taha laavasse kukkuda. Laava jaoks on lihtne plaani teha.
          Me näeme seda ekraanil. Aga see laava, mida me kivi all ei näe?
      5:
        image: notes/mc_if_statements_5.JPG
        text: Pärast kivi kaevandamist tuleb enne edasiliikumist kontrollida, kas
          kivi all on laavat. Kui seal on laavat, asetame enne edasiliikumist oma
          tegelase ette kivi. Siis saame ohutult edasi liikuda. Kaevandame veel! Pea
          meeles kasutada ohutuse tagamiseks if-lauseid.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Palju õnne! Õppisid kasutama arvutiteaduse peamisi ehitusplokke.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Nüüd saad neid plokke kasutada oma loomingu valmis ehitamiseks. Rohkem
          juhtnööre ega puslesid pole. Võid ehitada kõike, mida ise soovid. See on
          sinu valik.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[õpilased räägivad] Asi läheb tõsiseks. Pügamine. Ma tegin taskulampidest
          L-tähe. Ma tegin kaseplankudest A-tähe. See töötas! Me ehitasime villast
          maja!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Kui sinu looming on valmis, vajuta nuppu „jaga,“ et saada link selle
          sõpradega jagamiseks. Lõbutse!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Palju õnne! Õppisid kasutama arvutiteaduse peamisi ehitusplokke.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Nüüd saad neid plokke kasutada oma loomingu valmis ehitamiseks. Rohkem
          juhtnööre ega puslesid pole. Võid ehitada kõike, mida ise soovid. See on
          sinu valik.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[õpilased räägivad] Asi läheb tõsiseks. Pügamine. Ma tegin taskulampidest
          L-tähe. Ma tegin kaseplankudest A-tähe. See töötas! Me ehitasime villast
          maja!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Nüüd sa saad ehitada just seda, mida ise soovid. Lõbutse!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: Kui tahad teha oma mängu, siis see käib väga lihtsalt. Pead teadma vaid
          mõndasid programmeerimise põhitõdesid ja saadki hakata mängima enda loodud
          mängu.
      2:
        image: notes/gumball_intro_2.JPG
        text: Kas sul on oma lemmik videomäng? Liigume ühe sammu sellise mängu loomise
          suunas Play Labi abil. Heal mängul on lugu ja igal lool on näitlejad. Näitlejad
          räägivad, liiguvad ja suhtlevad üksteisega. Võib olla isegi koguvad mängureeglite
          järgi punkte. Täna vaatame ükshaaval, kuidas neid asju teha ja kasutades
          lõbusaid näitlejaid. Loome täitsa algusest mängu, mida saab jagada ning
          telefonis mängida.
      3:
        image: notes/gumball_intro_3.JPG
        text: Täna vaatame ükshaaval, kuidas neid asju teha ja kasutades lõbusaid
          näitlejaid. Loome täitsa algusest mängu, mida saab jagada ning telefonis
          mängida.
      4:
        image: notes/gumball_intro_4.JPG
        text: Sinu ekraan on jagatud kolmeks põhiosaks. Vasakul on mänguala, kus sinu
          programm jookseb. Juhised iga taseme jaoks on mänguala all.
      5:
        image: notes/gumball_intro_5.JPG
        text: Keskmine ala on tööriistakast ja iga plokk seal on jupike koodi.
      6:
        image: notes/gumball_intro_6.JPG
        text: Paremal asuv valge ala on tööala ja seal me oma programmi loomegi.
      7:
        image: notes/gumball_intro_7.JPG
        text: Alustuseks pead ühendama oma plokid oranži "pärast käivitamist" ploki
          külge. Saad ühendada mitu plokki üksteise külge lohistades neid tööruumi,
          teiste plokkide lähedusse kuni näed kollast joont, seejärel nad kinnituvad
          üksteise külge.
      8:
        image: notes/gumball_intro_8.JPG
        text: Selles esimeses pusles paneme tegelased midagi ütlema, selleks peame
          ühendama ploki "ütle" plokiga "pärast käivitamist" ja kirjutama sinna oma
          sõnumi. Kui oled plokid paika pannud, vajuta nuppu "Käivita", et näha oma
          programmi.
      9:
        image: notes/gumball_intro_9.JPG
        text: Hakka pihta ja programmi lõpuks lood sa ise oma mängu igasuguste tegelastega,
          kes suhtlevad, koguvad punkte, viskavad asju ja kaotavad üksteist ära. See
          kõik on sinu otsustada.
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Nüüd hakkame õppima midagi sellist, mida programmeerijad iga päev kasutavad.
          Neid kutsutakse sündmusteks. Sündmus ütleb programmile et tuleb jälgida
          kui midagi juhtub. Kui mingi asi juhtub siis rakendab mäng eelnevalt valitud
          käsu.
      2:
        image: notes/gumball_events_2.JPG
        text: Sündmusteks on näiteks hiireklõpsu, üles- või allanoolenupu või ekraani
          puudutamise jälgimine.
      3:
        image: notes/gumball_events_3.JPG
        text: Nüüd paneme tegelase midagi ütlema, kui mängija temal klõpsab. Kasutame
          plokki "kui tegelast puudutatakse" ja ühendame selle plokiga "ütle". Kui
          mängija klõpsab tegelasel, käivitatakse kõik tegevused, mis on ühendatud
          selle plokiga.
      4:
        image: notes/gumball_events_4.JPG
        text: Lisaks on olemas "kui nool" plokid. Kui sa ühendad "liigu" plokid nendega
          saad tegelasi liigutada nooleklahvidega üles, alla, vasakule või paremale.
          Samm sammult muutub mäng niimoodi interaktiivsemaks.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Kujuta ette, kui sa peaksid midagi igavesti kordama. Loodetavasti ei
          pea sa seda tegema, sest arvutitel õnnestub kordamine paremini.
      2:
        image: notes/gumball_repeat_2.JPG
        text: See on "korda igavesti" plokk. Kõik mis selle ploki sees on korratakse
          mängu jooksul igavesti. Kui me tahame, et mõni tegelane midagi korduvalt
          teeks, ilma et mängija midagi peaks tegema, paneme me need plokid "korda
          igavesti" ploki sisse.
      3:
        image: notes/gumball_repeat_3.JPG
        text: Järgmises pusles pead aitama tegelasel teha ühte tööd korduvalt. Kui
          õpid selgeks, kuidas töötavad käskluste kordused, hoiad hiljem palju aega
          kokku ning see on kasulik ka siis, kui ise oma mängu ehitad.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: Kui sa soovid luua enda mängu, siis see on väga lihtne. Kõik, mida sa
          vajad, on natuke teadmisi programmeerimisest ja sa saad hakata mängima mängu,
          mille sa ise lõid.
      2:
        image: notes/iceage_intro_2.JPG
        text: Kas sul on lemmik videomäng? Astume sammu lähemale selliste mängude
          loomisele PlayLabi kasutades. Head mängud jutustavad loo ning lugudes on
          tegelased. Tegelased kõnelevad, liiguvad ringi ning suhtlevad teineteisega.
          Võib-olla nad isegi koguvad punkte vastavalt mängu reeglitele. Täna õpime
          kõiki neid asju järgemööda ühe toreda tegelase abil. Seejärel ehitame mängu
          päris nullist, mida saad hiljem teistega jagada ja telefonis mängida.
      3:
        image: notes/iceage_intro_3.JPG
        text: Täna õpime, kuidas kõiki neid asju teha ühe toreda tegelase abil. Seejärel
          ehitame mängu päris nullist ning pärast saad seda mängu jagada ning telefonis
          mängida.
      4:
        image: notes/iceage_intro_4.JPG
        text: Ekraan on jaotatud kolme ossa. Vasakul on mängu ala, kus mäng jookseb.
          Iga taseme juhtnöörid on toodud allpool.
      5:
        image: notes/iceage_intro_5.JPG
        text: Keskmine osa on tööriistakast ning kõik need plokid on osake koodi.
      6:
        image: notes/iceage_intro_6.JPG
        text: Valge ala paremal on tööala ning see on see koht, kus sa oma mängu ehitad.
      7:
        image: notes/iceage_intro_7.JPG
        text: Alustuseks pead ühendama plokid oranži "käivita" plokiga. Sa võid erinevaid
          plokke kokku panna neid kokku lohistades. Kui tekib kollane joon, siis ühenduvad
          plokid omavahel.
      8:
        image: notes/iceage_intro_8.JPG
        text: See on sinu esimene mäng. Me paneme tegelased midagi ütlema. Selleks
          ühendame "ütle" plokk "käivita" plokiga ning sisestame oma sõnumi, mida
          tahame, et tegelane ütleks. Kui plokid on olemas, siis vajuta "käivita"
          nuppu ning vaata, mida sa programmeerisid.
      9:
        image: notes/iceage_intro_9.JPG
        text: Tee algust! Lõpuks saad luua oma mängu koos erinevate tegelastega, kes
          saavad omavahel suhelda, punkte koguda, asju visata ning koguni haihtuda.
          Kõik sõltub Sinust!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Nüüd õpime midagi asja kohta, mida kõik programmeerijaid iga päev kasutavad.
          Neid asju kutsutakse sündmusteks. Sündmus ütleb sinu programmile, et ta
          kuulaks, kui midagi juhtub. Kui mingi asi juhtub, siis rakendab mäng eelnevalt
          valitud käsu.
      2:
        image: notes/iceage_events_2.JPG
        text: Sündmusteks on näiteks hiireklõpsu, üles- või allanoolenupu või ekraani
          puudutamise jälgimine.
      3:
        image: notes/iceage_events_3.JPG
        text: Nüüd paneme tegelase midagi ütlema, kui mängija temal klõpsab. Kasutame
          plokki "kui tegelast puudutatakse" ja ühendame selle plokiga "ütle". Kui
          mängija klõpsab tegelasel, käivitatakse kõik tegevused, mis on ühendatud
          selle plokiga.
      4:
        image: notes/iceage_events_4.JPG
        text: Lisaks on olemas "kui nool" plokid. Kui sa ühendad "liigu" plokid nendega
          saad tegelasi liigutada nooleklahvidega üles, alla, vasakule või paremale.
          Samm sammult muutub mäng niimoodi interaktiivsemaks.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Kujuta ette, kui sa peaksid midagi igavesti kordama. Loodetavasti ei
          pea sa seda tegema, sest arvutitel õnnestub kordamine paremini.
      2:
        image: notes/iceage_repeat_2.JPG
        text: See on "korda igavesti" plokk. Kõik mis selle ploki sees on korratakse
          mängu jooksul igavesti. Kui me tahame, et mõni tegelane midagi korduvalt
          teeks, ilma et mängija midagi peaks tegema, paneme me need plokid "korda
          igavesti" ploki sisse.
      3:
        image: notes/iceage_repeat_3.JPG
        text: Järgmises mängus pead aitama tegelasel teha ühte tööd korduvalt. Kui
          õpid selgeks, kuidas töötavad käskluste kordused, hoiad hiljem palju aega
          kokku ning see on kasulik ka siis, kui ise oma mängu ehitad.
    mc_2016_intro:
      1:
        image: notes/mc_2016_intro_1.jpg
        text: Tere, minu nimi on Jens ja ma olen Minecrafti loominguline juht. Järgmise
          tunni jooksul saate teha oma Minecrafti mängu. See siin näeb välja nagu
          Minecraft, kuid maailm on siin peatunud. Lambad ei liigu, kanad ei mune,
          ja zombid seisavad lihtsalt paigal. Sinu ülesanne on lisada kood, et Minecrafti
          maailm tööle hakkaks.
      2:
        image: notes/mc_2016_intro_2.jpg
        text: 'Minu nimi on Melissa ja ma teen Minecrafti kasutajauuringuid. Mind
          huvitab tegelikult, kuidas inimesed mõtlevad ja tehnoloogiaga suhestuvad,
          ja seega on see töö minu jaoks ideaalne, sest saan ühendada arvutiteaduse
          ja psühholoogia: kuidas inimesed mõtlevad ja käituvad.'
      3:
        image: notes/mc_2016_intro_3.jpg
        text: Sa näed oma ekraani kolmes põhiosas. 1) Vasakul on Minecrafti mäng.
          Praegu seisab see maailm paigal, kuid me teeme selle koodi abil korda.
      4:
        image: notes/mc_2016_intro_4.jpg
        text: 2) See keskmine osa on tööristakast. Iga sellinne plokk on käsklus,
          mida kanad, lambad ja teised Minecrafti olendid mõistavad.
      5:
        image: notes/mc_2016_intro_5.jpg
        text: 3) Paremal olev ala on tööala ja siin hakkame me programmi ehitama.
      6:
        image: notes/mc_2016_intro_6.jpg
        text: Kui sa unustad, mida teha, siis juhised iga taseme jaoks on üleval.
      7:
        image: notes/mc_2016_intro_7.jpg
        text: Alustuseks programmeerime ühe kana. Tirime "liigu edasi" käskluse tööalale.
          Kui ma vajutan "Käivita" liigub kana ühe sammu võrra edasi. Et edasi minna,
          tirin ma veel ühe "liigu edasi" ploki esimese "liigu edasi" ploki alla kuni
          see aktiivseks muutub. Siis lasen ma sellest lahti ja kaks plokki haakuvad
          üksteisega. Kui ma vajutan uuesti "Käivita", siis astub kana kaks sammu.
      8:
        image: notes/mc_2016_intro_8.jpg
        text: Kui sa tahad mõnda plokki kustutada, eemalda see lihtsalt käskluste
          hulgast ja tiri tagasi tööriista kasti.
      9:
        image: notes/mc_2016_intro_9.jpg
        text: Peale nupu "Käivita" vajutamist on sul alati võimalik vajutada nuppu
          "Taasta", et mängu uuesti käivitada ja otsast alata. Nüüd on sinu kord teha
          täitsa oma Minecrafti versioon. Lõbutse hästi!
    mc_2016_loops:
      1:
        image: notes/mc_2016_loops_1.jpg
        text: Tere, mina olen Lisa. Ma olen Minecrafti tarkvaraarendaja ja ma töötan
          mängus mõnede loomade ja nende vaenlastega. Üks loom, kellega ma töötasin
          on otselot. Töötasin selle osaga, kus sa saad otselotile kala sööta, et
          teda endale kassiks taltsutada.
      2:
        image: notes/mc_2016_loops_2.jpg
        text: Inimestena hakkab meil igav kui me peame ühte ja sama asja ikka uuesti
          ja uuesti tegema. Arvutite puhul on lahe see, et nad võivad teha ühte asja
          miljoneid või isegi trilioneid kordi järjest ja neil ei hakka igav. Seda
          nimetatakse tsükliks ja iga olend Minecraftis kasutab tsükleid.
      3:
        image: notes/mc_2016_loops_3.jpg
        text: Varem panime me kana üle ekraani liikuma, kuid siis jäi ta seisma. Minecraftis
          liiguvad kanad kogu aeg ringi. Kasutame "Korda lõpmatuseni" tsüklit meie
          tööriistakastist, et panna kanad kogu aeg ringi liikuma. Tsüklid säästavad
          palju aega ja avavad sulle palju võimalusi kui sa enda Minecrafti versiooni
          ehitad.
    mc_2016_events:
      1:
        image: notes/mc_2016_events_1.jpg
        text: Järgmisel tasemel võid sa valida, kas olla Steve või Alex. Vajuta nooleklahve
          oma klaviatuuril, et liikuda ülesse, alla, vasakule ja paremale. Nüüd saad
          sa tasandil ringi liikuda seal, kus soovid.
      2:
        image: notes/mc_2016_events_2.jpg
        text: Kui sa kasutad puuteekraani liigu näpuga ülesse, alla, vasakule ja paremale.
          Siis puuduta mängu, et enda ees olevaid esemeid kasutada.
      3:
        image: notes/mc_2016_events_3.jpg
        text: Aga mis seda kasutades juhtub? Minecraftis kukub lammastelt vill kui
          sa neid pügad, lehmad jooksevad ära kui sa neid lööd ja kreeperid plahvatavad
          kui sa neile lähened. Sellised reaktsioonid leiavad aset "sündmuste" tõttu.
          Sündmused paluvad sinu programmil oodata, et midagi juhtuks. Ja viia läbi
          mingi tegevus kui see juhtub.
      4:
        image: notes/mc_2016_events_4.jpg
        text: Siiani oled kasutanud ühte sündmust. Kood, mille sa sisestad "kui loodud"
          pessa, käivitub siis kui oled oma olendi loonud või kui mäng algab. Järgmisel
          paaril tasemel on sul uued pesad selliste sündmuste jaoks nagu "kui puudutatakse",
          mis käivitub kui olendit puudutatakse, või "kui kasutatakse" olendi kasutamise
          jaoks. Või kui sa soovid, et zombi kaoks ära kui päev tuleb, siis tueb see
          panna "kui on päev" pesasse
    mc_2016_spawn:
      1:
        image: notes/mc_2016_spawn_1.jpg
        text: Mängudes tähendab 'spawn' midagi looma või tegema. Sellel tasemel teeme
          zombisid siis kui päike loojub. Selleks kasutame "kui öö" plokki.
      2:
        image: notes/mc_2016_spawn_2.jpg
        text: Kuna soovime zombisid teha öösel lisame "loo zombie" plokk "kui on öö"
          plokki. Kui nad on tekkinud, kasutab iga zombi koodi, mis sa paned tema
          "kui loodud" sündmuse pessa. Lõbutsege zombisid luues!
    mc_2016_congrats:
      1:
        image: notes/mc_2016_congrats_1.jpg
        text: Palju õnne! Olete õppinud arvutikäskude abil Minecraft maailmas tegutsema.
          Oled programmeerija. Oled lukust lahti teinud kõik käsud ja kõik olendid.
          Sa valida, mis juhtub.
      2:
        image: notes/mc_2016_congrats_2.jpg
        text: Kui oled mängu valmis teinud vali "jaga" ning saad lingi, mida oma sõpradega
          jagada. Mängu saad ka oma telefonis mängida. Lõbutse! Mina tahaksin samuti
          sinu Minecrafti mängida.
    applab_intro_welcome:
      1:
        image: notes/applab_intro_welcome_1.png
        text: My name is Mei'lani. I'm an intern at code.org and I'm also a computer
          science student. I like computer science because it's really creative. I
          get to be the problem solver. I get to make everything function how I want
          it to. But I also get to be the designer. I get to be the artist and choose
          everything on the creative side of it.
      2:
        image: notes/applab_intro_welcome_2.png
        text: Making your own apps is easy with App Lab! Whether you're new to coding
          or have some experience. App Lab is a great tool for building new apps and
          sharing them with your friends.
      3:
        image: notes/applab_intro_welcome_3.png
        text: This is a App Lab. On the left side is your app. On the right side is
          the code that will make it run. You build your program by dragging in blocks
          from the toolbox. To start you'll just have one block called 'setProperty'.
      4:
        image: notes/applab_intro_welcome_4.png
        text: The set property block changes the look of the elements on your screen.
          Like the buttons, labels, or even the screen itself. First you need to decide
          which element you want to change. If you hover over an element in your app
          you can see the name or ID here. Then go select that ID from the first drop
          down.
      5:
        image: notes/applab_intro_welcome_5.png
        text: Elements have lots of properties you can change like their text color,
          background color or font size. You can see the full list and choose which
          property you want to change in the second drop down.
      6:
        image: notes/applab_intro_welcome_6.png
        text: The last drop down is where you'll write the value you want to use value
          you want to use. The block will make a suggestion for you. But you can always
          type in different colors or numbers yourself.
      7:
        image: notes/applab_intro_welcome_7.png
        text: Once you're done, the block reads a bit like a sentence:'Set button1's
          background color to green.' Hit run to see the changes you're building in
          code. If you reset you can drag in more blocks to change other things about
          your app. Like the text!
      8:
        image: notes/applab_intro_welcome_8.png
        text: For this tutorial we'll be working in block mode but App Lab also supports
          working in text.
      9:
        image: notes/applab_intro_welcome_9.png
        text: Either way you'll be programming in JavaScript, the language of the
          web. Each level has a goal, instructions and an image of what you're aiming
          to create.
      10:
        image: notes/applab_intro_welcome_10.png
        text: If you're ever stuck, click on this picture and it will show you exactly
          how to complete the level. But see if you can do it on your own first.
      11:
        image: notes/applab_intro_welcome_11.png
        text: Once you've completed the goal for this level click Finish to move on.
          That's all there is to it! Hit the orange "continue" button to go to the
          next level and start your adventure with an App Lab!
    applab_intro_events:
      1:
        image: notes/applab_intro_events_1.png
        text: Apps are really cool because it's kind of like starting your own business
          I mean, you get to design everything from the ground up, you get to manage
          everything, and you're the owner of this piece of work that you just created
          with code.
      2:
        image: notes/applab_intro_events_2.png
        text: Now that you can change the look of your app let's make it interactive
          by responding to events! Events are user actions like clicking a button,
          scrolling through a menu, or hovering over a picture. Interactive apps need
          ways to respond to events, like playing a sound when I click this button.
          To do this in App Lab you need to use a new block called 'onEvent'.
      3:
        image: notes/applab_intro_events_3.png
        text: This program sets the screen to blue. I want the screen to turn green
          when I click this button. First I'll need to drag in an onEvent block. By
          hovering I know the button's ID is "bigButton" so I'll select that in the
          first drop-down.
      4:
        image: notes/applab_intro_events_4.png
        text: Next I'll choose the type of event. There's lots of options you can
          pick from but right now I'll leave it as a regular old click.
      5:
        image: notes/applab_intro_events_5.png
        text: 'Finally I''ll add code inside the on event that will change the background
          color of the screen. You can read this block like a sentence: "On the event
          that the button is clicked run all this code."'
      6:
        image: notes/applab_intro_events_6.png
        text: Let's test it. Blocks outside an onEvent still run right away so the
          screen starts blue.
      7:
        image: notes/applab_intro_events_7.png
        text: And when I click the big button the code inside my onEvent runs and
          my screen turns green.
      8:
        image: notes/applab_intro_events_8.png
        text: If you want to change more things after the event, like the text on
          the screen just add more code to the onEvent
      9:
        image: notes/applab_intro_events_9.png
        text: To make your program respond to more events add more onEvent blocks.
          Just make sure not to put them inside of each other. Now it's time to try
          it out for yourself. Have fun!
    applab_intro_sounds:
      1:
        image: notes/applab_intro_sounds_1.png
        text: Next you'll learn about adding images and sounds to your app. Let's
          start by checking out the sound options.
      2:
        image: notes/applab_intro_sounds_2.png
        text: In the tool box you'll find a new block called "playSound". Drag it
          into the workspace. You can pick a sound to play by clicking the drop-down
          then clicking "Choose".
      3:
        image: notes/applab_intro_sounds_3.png
        text: From here you can either upload a sound file from your computer, or
          search for a sound from the sound library. The sound library has lots of
          different categories like instruments, background music or animals.
      4:
        image: notes/applab_intro_sounds_4.png
        text: Once you've got the sound you want, click "Choose". When this block
          runs, it will play the sound you chose.
      5:
        image: notes/applab_intro_sounds_5.png
        text: To add images to your elements you can just use the setProperty block.
          Select the image property in the second drop-down
      6:
        image: notes/applab_intro_sounds_6.png
        text: Then select "Choose" from the third drop down.
      7:
        image: notes/applab_intro_sounds_7.png
        text: From here you can upload an image from your computer or you can look
          through a huge library of icons in the icon library.
      8:
        image: notes/applab_intro_sounds_8.png
        text: Back in code mode you can use the "setProperty" block to change the
          icon color of your icon. Once you've picked what image your icon to use
          click "Run" to see how it looks.
      9:
        image: notes/applab_intro_sounds_9.png
        text: That's all there is to it! Now you can start adding images and sounds
          to make your apps even more fun and dynamic.
    applab_intro_designmode:
      1:
        image: notes/applab_intro_designmode_1.png
        text: To build your own apps you're going to need to start designing screens
          and elements from scratch. App Lab makes this easy to do with Design Mode.
      2:
        image: notes/applab_intro_designmode_2.png
        text: Use the switch on top of your app to go into Design Mode.
      3:
        image: notes/applab_intro_designmode_3.png
        text: You can add new elements by dragging them onto the screen. You can move
          them around to different locations and change their size by dragging the
          bottom right corner.
      4:
        image: notes/applab_intro_designmode_4.png
        text: To change an element's properties use the controls on the right. For
          example, it's really easy to change this button's text, color, and font
          size.
      5:
        image: notes/applab_intro_designmode_5.png
        text: When you add a new element to your screen it'll get a generic ID like
          button1. It's a good idea to change this button's ID to something more meaningful
          like "rightButton". So that you'll know which one it is when you go to the
          program.
      6:
        image: notes/applab_intro_designmode_6.png
        text: If you add an element to your app by mistake, just drag it out or hit
          the delete.
      7:
        image: notes/applab_intro_designmode_7.png
        text: You can add entirely new screens to your app by dragging in a screen
          element
      8:
        image: notes/applab_intro_designmode_8.png
        text: From the drop-down at the top you can quickly switch back and forth
          between the screens you create.
      9:
        image: notes/applab_intro_designmode_9.png
        text: Inside your app, you'll need a way to switch between all of these screens,
          so the setScreen block has been added to the toolbox. Use "setScreen" inside
          the "onEvent" block to change screens at the click of a button.
      10:
        image: notes/applab_intro_designmode_10.png
        text: In the next few levels you'll be working on a single project. First
          you'll add a button then you'll add a new screen and finally you'll write
          code so that the button switches to the new screen.
    applab_intro_share:
      1:
        image: notes/applab_intro_share_1.png
        text: Now that you've learned some of the basics of App Lab like adding buttons,
          sounds, images, text and new screens you can make all sorts of apps.
      2:
        image: notes/applab_intro_share_2.png
        text: In the next level you'll find the app you just finished building. With
          a little creativity, you can turn this into a personality quiz for your
          friends, a greeting card that you can share with your family or a choose-your-own-adventure
          game. All of these apps are just a combination of the skills you've already
          learned, and I bet you can come up with even more.
      3:
        image: notes/applab_intro_share_3.png
        text: Once you're done with your app you can easily send it to your phone
          to see how it looks. Just click "Share" and enter your phone number here.
      4:
        image: notes/applab_intro_share_4.png
        text: You'll receive a text message that'll let you open up your app instantly.
      5:
        image: notes/applab_intro_share_5.png
        text: You can also share a link to your app over social media or post it to
          the code.org public gallery for other people to play and share.
      6:
        image: notes/applab_intro_share_6.png
        text: You've just scratched the surface of what App Lab can do. Full App Lab
          features more advanced user interactions, new screen elements and even a
          built-in database so you can quickly build full featured apps. At "code.org/applab"
          you'll find the full tool and lots of ideas if you want to keep going.
      7:
        image: notes/applab_intro_share_7.png
        text: Thanks for coming along the ride. Now go build and share your first
          app, and keep on building apps with App Lab!
    mc_2017_agent_intro:
      1:
        image: notes/mc_2017_agent_intro_1.png
        text: 'Stacy: Stampy, Lizzy, Preston - thank you for coming with me. What
          I want to show you is just over this mesa plateau. I think you''re going
          to love it!'
      2:
        image: notes/mc_2017_agent_intro_2.png
        text: Wait a minute - there's a hole in the track! (screaming)
      3:
        image: notes/mc_2017_agent_intro_3.png
        text: 'Is everyone okay? Stampy: Ah, I see the problem. Look! There was a
          hole in the track. Stacy: Really, Stampy? Lizzy: Maybe we should gather
          blocks to fix it. Preston: Let''s make it a race. First one back to the
          top wins. Stacy: Ok, on your mark, get set, GO! Ok, I''m just gonna gather
          some of this terracotta. Wait. Guys, I can''t mine! Preston: Same. Lizzy:
          I can''t either. Stacy: Ok, that is really strange. Stampy, can you mine?
          Stampy: I can''t mine! Stacy: Ok, everyone stay calm. Stampy: Is the game
          broken? Stacy: If it is, how do we fix it? Lizzy: I don''t know. Stampy:
          Does anyone know how to write Minecraft code?'
      4:
        image: notes/mc_2017_agent_intro_4.png
        text: "(poof) Preston: What is that? Stampy: I've never seen one of these
          before. Lizzy: It's so adorable! Stacy: Is it...is it tameable? Preston:
          Okay, what is going on? Someone needs to go back to the real world and fix
          this.  All: Not it! Stacy: Not i- (Sigh.) Ok, I'll go."
      5:
        image: notes/mc_2017_agent_intro_5.png
        text: Oh, okay, hey, so I'm in the real world now. I'm going to go try to
          find the Minecraft offices.
      6:
        image: notes/mc_2017_agent_intro_6.png
        text: But, I'm going to need your help. Start doing the tutorial, start learning
          how to code, and I'll catch up with you guys after a few levels, okay? Wish
          me luck! I think it's this way. Ow! Cactus! I'm okay!
      7:
        image: notes/mc_2017_agent_intro_7.png
        text: To complete the Hour of Code challenge, you'll need to write code to
          program the agent. You'll work together with The Agent to clear any obstacles
          in your path, so you can pick up the items you'll need for your journey.
          Only the Agent can place and break blocks, and only you can collect items.
          Your screen is split into three main parts. On the left is Minecraft.
      8:
        image: notes/mc_2017_agent_intro_8.png
        text: The middle area is the toolbox with commands that the Agent can understand.
      9:
        image: notes/mc_2017_agent_intro_9.png
        text: And on the right, is the workspace. That's where you stack the commands
          to build your program to control the Agent.
      10:
        image: notes/mc_2017_agent_intro_10.png
        text: The Agent can walk, turn, and activate pressure plates. It can also
          destroy blocks and place blocks. When it places the block like these minecart
          rails, it places it underneath itself.
      11:
        image: notes/mc_2017_agent_intro_11.png
        text: Kui sa unustad, mida teha, siis juhised iga taseme jaoks on üleval.
      12:
        image: notes/mc_2017_agent_intro_12.png
        text: If you want to try again, you can hit the blue reset button to reset
          everything to where it started. And if you need to delete a block of code,
          drag it from your workspace to the toolbox. Remember to hit run to get the
          Agent moving. Okay, go ahead and try out the first few levels. Good luck!
    mc_2017_repeat:
      1:
        image: notes/mc_2017_repeat_1.png
        text: 'Stampy: I wonder what Stacy is up to?'
      2:
        image: notes/mc_2017_repeat_2.png
        text: 'Stacy: Woah, I think I''m in the right place. This is amazing!'
      3:
        image: notes/mc_2017_repeat_3.png
        text: I feel like I'm back in Minecraft! Hello. How are you? Hello?
      4:
        image: notes/mc_2017_repeat_4.png
        text: 'Oh, there''s a creeper. You don''t do anything, do you? Katie: Stacy?
          Stacy:Hi, Katie? Katie: Yes, welcome to Minecraft!'
      5:
        image: notes/mc_2017_repeat_5.png
        text: 'Stacy: This is amazing. So you work here every day as a developer,
          right? Katie: Yeah, it''s pretty awesome. I''m a developer on the Minecraft
          marketplace team. Stacy: How many coding languages do you know? Katie: In
          my career I''ve probably worked with over a dozen. Stacy: A dozen? Katie:
          Yeah. Stacy: So now, you wouldn''t happen to know anything about this little
          golem guy that calls himself the Agent? Katie: We use the Agent to do things
          that Steve or Alex can''t, like go across lava. Stacy: Well, I want to learn
          how to code, and they want to learn how to code, so what is one of the first
          things that you need to know when you''re learning?'
      6:
        image: notes/mc_2017_repeat_6.png
        text: 'Katie: Well, you need to learn how to use loops. Loops are things that
          developers write to give commands to a computer that can be run over and
          over again. Stacy: Got it, so I think there''s actually some of that coming
          up in the levels ahead, so go ahead and give loops a try.'
      7:
        image: notes/mc_2017_repeat_7.png
        text: In the next level, you can use a loop to move the Agent along the path.
          Drag the repeat block into the workspace and place the move forward block
          inside the repeat block. This tells the computer to do the same thing many
          times in a row without having to drag a whole bunch of blocks into the workspace.
          You can choose how many times to repeat by putting a number in the repeat
          block.
      8:
        image: notes/mc_2017_repeat_8.png
        text: You can put turns and multiple commands in the repeat block too, but
          for now try using a repeat to move the Agent forward a few steps. Remember,
          if you get stuck on a puzzle you can always hit the blue reset button and
          try again.
      9:
        image: notes/mc_2017_repeat_9.png
        text: 'If you are thinking about having a cool job like Katie''s, go ahead
          and click the show code button when you finish every level. That''s going
          to actually show you the Javascript code that someone like Katie uses when
          she''s actually programming Minecraft. Katie: Yeah, good luck everyone!'
    mc_2017_functions:
      1:
        image: notes/mc_2017_functions_1.png
        text: 'Preston: I''m not trying to brag, but I''m pretty good at parkour.
          Lizzy: Let''s sleep so it''s day when Stacy comes back.'
      2:
        image: notes/mc_2017_functions_2.png
        text: 'Stacy: Ok guys, I am back from the Minecraft offices, and I think I
          know how to solve the problem I''m having in my game. I think I can use
          a function. Let me just open this.'
      3:
        image: notes/mc_2017_functions_3.png
        text: So a function is a specific set of instructions to accomplish a certain
          task, kind of like a recipe. In the next few levels, you'll have access
          to functions that you can use to solve the puzzles.
      4:
        image: notes/mc_2017_functions_4.png
        text: Look at the code in the function when it's in the workspace to see what
          it does.
      5:
        image: notes/mc_2017_functions_5.png
        text: Then, find the block with that name in the toolbox and drag it from
          the toolbox to the when run block.
      6:
        image: notes/mc_2017_functions_6.png
        text: Remember, you can use the same function every time you need to run the
          same set of instructions to do something, like build a bridge. Good luck,
          I know you can do it!
    mc_2017_congratulations:
      1:
        image: notes/mc_2017_congratulations_1.png
        text: 'Preston: Congratulations!'
      2:
        image: notes/mc_2017_congratulations_2.png
        text: 'Lizzy: Congratulations!'
      3:
        image: notes/mc_2017_congratulations_3.png
        text: 'Stampy: Congratulations, you did it!'
      4:
        image: notes/mc_2017_congratulations_4.png
        text: 'Stacy: Congratulations guys, you totally rocked that! And now that
          you''ve completed the Hour of Code, you can start coding in Minecraft. You''ve
          learned about loops, functions, and what a software Agent does.'
      5:
        image: notes/mc_2017_congratulations_5.png
        text: Now, it's time for the free play level, where you are the developer.
          Use any remaining time to write your own functions to explore, mine, and
          build.
      6:
        image: notes/mc_2017_congratulations_6.png
        text: 'You can take the code that you write in this level into your Minecraft
          world on Minecraft: Education Edition. Just click ''Finish'' and follow
          the instructions for getting the link to use in your world. to continue
          coding with the Agent. Have fun, and good job!'
      7:
        image: notes/mc_2017_congratulations_7.png
        text: 'Stacy: And I''m back! Okay, you guys, this is the Agent! Let me show
          you what it can do. Look, it''s doing it! I told it to build a staircase
          out of these terra cotta blocks, now we can just use this to get out of
          here. And you guys, it''s not just staircases. I can tell the Agent to do
          anything I want, and it will do it for me.'
      8:
        image: notes/mc_2017_congratulations_8.png
        text: 'Stampy: How did you do that? Stacy: It was easy, actually. I just used
          code!'
    csd_concept_how_computers_work:
      1:
        image: notes/csd_concept_how_computers_work_1.png
        text: 'Everywhere you look, computers are changing the world. Whether they''re
          on our desktops, in our homes, our pockets, or just about anywhere else.
          But while most of us use this revolutionary technology daily, we don''t
          often ask: "How do computers work?" In this series, you''re going to learn
          how computers really work, starting with what makes a computer a computer.
          Then, you''ll look at how information is represented inside the computer
          using tiny electrical signals going on and off at mind-boggling speeds.'
      2:
        image: notes/csd_concept_how_computers_work_2.png
        text: After that, you'll learn how computers use circuits to do everything
          from simple math to simulating entire virtual worlds. Next, you'll zoom
          out and look at the different parts of a computer that actually input, output,
          and store all that information. Finally, you'll take a look at what code
          actually is and how software controls hardware. So whether you're just curious
          about the devices you use every day or you want to design the innovations
          of the future, the first step is learning how computers work.
    csd_concept_computer:
      1:
        image: notes/csd_concept_computer_1.png
        text: My name is May-Li Khoe and I'm a designer and an inventor. So some of
          the things I've designed have been at Apple, and now I design products for
          kids to use so that they can have an easier time in school. My other jobs
          include DJ-ing and dancing.
      2:
        image: notes/csd_concept_computer_2.png
        text: Computers are everywhere! They're in people's pockets, they're in people's
          cars, people have them on their wrists. They might be in your backpack right
          now. But what makes a computer a computer? What does make a computer a computer
          anyway? And how does it even work?
      3:
        image: notes/csd_concept_computer_3.png
        text: Hi I'm Nat! I was one of the original designers of the Xbox. I've been
          working with computers since I was maybe seven years old and now I work
          on virtual reality. As humans, we've always built tools to help us solve
          problems. Tools like a wheelbarrow, a hammer, or a printing press, or a
          tractor-trailer.
      4:
        image: notes/csd_concept_computer_4.png
        text: All of these inventions helped us with manual work. Over time, people
          began to wonder if a machine could be designed and built to help us with
          the thinking work we do, like solving equations or tracking the stars in
          the sky. Rather than moving or manipulating physical things like dirt and
          stone, these machines would need to be designed to manipulate information.
          As the pioneers of computer science explored how to design a thinking machine,
          they realized that it had to perform four different tasks.
      5:
        image: notes/csd_concept_computer_5.png
        text: It would need to take input, store information process it and then output
          the results. Now this might sound simple, but these four things are common
          to all computers. That's what makes a computer a computer.
      6:
        image: notes/csd_concept_computer_6.png
        text: Computers started out as basic calculators, which was already really
          awesome at the time, and they were only manipulating numbers back then.
          But now we can use them to talk to each other, we can use them to play games,
          control robots, and do any crazy thing that you could probably imagine.
          Modern computers look nothing like those clunky old machines but they still
          do these same four things.
      7:
        image: notes/csd_concept_computer_7.png
        text: First, we're going to talk about input. You can tell computers what
          to do with the keyboard, you can tell them what to do with the mouse, the
          microphone, the camera. All these different inputs give a computer information,
          which is then stored in memory.
      8:
        image: notes/csd_concept_computer_8.png
        text: A computer's processor takes information from memory. It manipulates
          it or changes it using an algorithm, which is just a series of commands.
          And then it sends the processed information back to be stored in memory
          again. This continues until the processed information is ready to be output.
      9:
        image: notes/csd_concept_computer_9.png
        text: How a computer outputs information depends on what the computer is designed
          to do. A computer display can show text, photos, videos, or interactive
          games -- even virtual reality! The output of a computer may even include
          signals to control a robot.
      10:
        image: notes/csd_concept_computer_10.png
        text: And who knows what the computers of tomorrow will be like? My hope is
          that you get to help decide what you want the computers of tomorrow to look
          like. But across all computers, regardless of the different types of technology
          they use, they're always doing those same four things. They take in information,
          they store it as data, they process it, and then they output the results.
    csd_concept_binary_data:
      1:
        image: notes/csd_concept_binary_data_1.png
        text: Hi! My name is Limor Fried, and I'm an engineer here at Adafruit Industries.
          And this is where I do engineering and design, and I design circuits for
          fashion and music and technology.
      2:
        image: notes/csd_concept_binary_data_2.png
        text: My name is Federico Gomez Suarez, and I'm a software developer with
          Microsoft Hack for Good. And I look into using technology to help us solve
          some of the big social problems of our times.
      3:
        image: notes/csd_concept_binary_data_3.png
        text: You may have heard that computers work on ones and zeros. But almost
          nobody today actually deals directly with these ones and zeros. But ones
          and zeroes do play a big role in how computers work on the inside.
      4:
        image: notes/csd_concept_binary_data_4.png
        text: Inside a computer are electric wires and circuits that carry all the
          information in a computer. How do you store or represent information using
          electricity?
      5:
        image: notes/csd_concept_binary_data_5.png
        text: Well, if you have a single wire with electricity flowing through it,
          the signal could either be on or off. That's not a lot of choices, but it's
          a really important start. With one wire, we can represent a yes or no, true
          or false, a one or zero, or anything else with only two options. This on/off
          state of a single wire is called a bit, and it's the smallest piece of information
          a computer can store.
      6:
        image: notes/csd_concept_binary_data_6.png
        text: 'If you use more wires you get more bits: more ones and zeros. With
          more bits you can represent more complex information. But to understand
          that, we need to learn about something called the binary number system.'
      7:
        image: notes/csd_concept_binary_data_7.png
        text: 'In the decimal number system, we have ten digits from zero to nine,
          and that''s how we''ve all learned to count. In the binary number system,
          we only have two digits: zero and one. With these two digits, we can count
          up to any number.'
      8:
        image: notes/csd_concept_binary_data_8.png
        text: Here's how this works. In a decimal number system we're all used to,
          each position in a number has a different value. There's a 1 position, the
          10 position, the 100 position, and so on. For example, a 9 in the 100 position
          is a 900. In binary, each position also carries a value. But instead of
          multiplying by 10 each time, we multiply by 2. So there's the 1 position,
          the 2 position, the 4 position, the 8 position, and so on. For example,
          the number 9 in binary is 1001. To calculate the value, we add 1 times 8,
          plus 0 times 4, plus 0 times 2, plus 1 times 1. Almost nobody does this
          math because computers do it for us. What's important is that any number
          can be represented with only ones and zeros, or by a bunch of wires that
          are on or off. The more wires you use, the larger the numbers you can store.
          With 8 wires, you can store numbers between 0 and 255. That's 8 ones. With
          just 32 wires, you can store all the way from 0 to over 4 billion. Using
          the binary number system, you can represent any number you like.
      9:
        image: notes/csd_concept_binary_data_9.png
        text: But what about other types of information? Like text, images, or sound?
          It turns out that all these things can also be represented with numbers.
          Think of all the letters in the alphabet. You could assign a number to each
          letter. A could be 1, B could be 2, and so on. You can then represent any
          word or paragraph as a sequence of numbers. And as we saw, these numbers
          can be stored as on or off electrical signals. Every word you see on every
          webpage or your phone is represented using a system like this.
      10:
        image: notes/csd_concept_binary_data_10.png
        text: Now, let's consider photos, videos, and all the graphics you see on
          a screen.
      11:
        image: notes/csd_concept_binary_data_11.png
        text: All of these images are made out of teeny dots called pixels, and each
          pixel has a color. Each of the colors can be represented with numbers. When
          you consider the typical image has millions of these pixels, and the typical
          video shows 30 images per second now we're talking about a lot of data here.
      12:
        image: notes/csd_concept_binary_data_12.png
        text: Every sound is basically a series of vibrations in the air. Vibrations
          can be represented graphically as a waveform. Any point on this waveform
          can be represented by a number. And this way, any sound can be broken down
          into a series of numbers. If you want higher quality sound, you will pick
          32-bit audio or an 8-bit audio. More bits means a higher range of numbers.
      13:
        image: notes/csd_concept_binary_data_13.png
        text: When you use a computer to write code or make your own app, you're not
          dealing directly with these ones and zeros. But you will be dealing with
          images or sound or video. So if you want to understand how computers work
          on the inside, it all comes down these simple ones and zeros and the electrical
          signals in the circuits behind them.
    csd_concept_circuits_logic:
      1:
        image: notes/csd_concept_circuits_logic_1.png
        text: One of the coolest things I've discovered about circuits is circuitry
          can be an art form like if I have a creative idea, I can get that creative
          idea out using circuits. So if you have ideas, you can use technology to
          make those ideas come to life.
      2:
        image: notes/csd_concept_circuits_logic_2.png
        text: Every input or output of a computer is effectively a type of information,
          which can be represented by on or off electrical signals or ones and zeros.
      3:
        image: notes/csd_concept_circuits_logic_3.png
        text: In order to process the information that comes in as input, and to make
          the information that is output, a computer needs to modify and combine the
          input signals. To do this, a computer uses millions of teeny electronic
          components, which come together to form circuits.
      4:
        image: notes/csd_concept_circuits_logic_4.png
        text: Let's take a closer look at how circuits can modify and process information
          that's represented in ones and zeros. This is an incredibly simple circuit.
          It takes an electrical signal, on or off, and it flips it. So if the signal
          you give it is a 1, the circuit gives you a 0, and if you give the circuit
          a 0, it gives you a 1. The signal that goes in is not the same as the signal
          that comes out, and so we call this circuit NOT.
      5:
        image: notes/csd_concept_circuits_logic_5.png
        text: More complicated circuits can take multiple signals and combine them,
          and give you a different result. In this example, a circuit will take two
          electrical signals, now each one might be a 1 or a 0. If either of the signals
          coming in is a 0, then the result is also a 0. This circuit will only give
          you a 1, if the first signal and the second signal are both a 1, and so
          we call the circuit AND.
      6:
        image: notes/csd_concept_circuits_logic_6.png
        text: There are many small circuits like this that perform simple logical
          calculations. By connecting these circuits together, we can make more complex
          circuits that perform more complex calculations.
      7:
        image: notes/csd_concept_circuits_logic_7.png
        text: For example, you can make a circuit that adds 2 bits together called
          an adder. This circuit takes in 2 individual bits, each one a 1 or a 0,
          and adds them together to calculate the sum. The sum can be 0 plus 0 equals
          0, 0 plus 1 equals 1, or 1 plus 1 equals 2. You need two wires coming out
          because it can take up to two binary digits to represent the sum. Once you
          have a single adder for adding two bits of information, you can put together
          multiples of these adder circuits side-by-side to add together much larger
          numbers.
      8:
        image: notes/csd_concept_circuits_logic_8.png
        text: For example, here's how an 8-bit adder adds the numbers 25 and 50. Each
          number is represented using 8 bits, resulting in 16 different electrical
          signals that go into the circuit. The circuit for an 8-bit adder has lots
          of little adders inside of it, which together, calculate the sum.
      9:
        image: notes/csd_concept_circuits_logic_9.png
        text: Different electrical circuits can perform other simple calculations
          like subtraction or multiplication. In fact, all the information processing
          your computer does is just lots and lots of small simple operations put
          together. Each individual operation done by a computer is so, so simple
          it could be done by a human, but these circuits inside computers are way
          way faster.
      10:
        image: notes/csd_concept_circuits_logic_10.png
        text: Back in the day, these circuits were big and clunky, and an 8-bit adder
          could be as big as a fridge, and it would take minutes for them to perform
          a simple calculation. Today, computer circuits are microscopic in size,
          and way way faster. Why are smaller computers also faster? Well, because
          the smaller the circuit is, the less distance the electrical signal has
          to go. Electricity moves at just about the speed of light, which is why
          modern circuits can perform billions of calculations per second.
      11:
        image: notes/csd_concept_circuits_logic_11.png
        text: So whether you're playing a game, recording a video, or exploring the
          cosmos, everything you could possibly do with technology requires lots of
          information to be processed extremely quickly. Underneath all this complexity
          is just lots of teeny little circuits that turn binary signals into websites,
          videos, music, and games. These circuits can even help us decode DNA to
          diagnose and cure disease. So what would you like to do with all these circuits?
    csd_concept_memory_cpu_input_output:
      1:
        image: notes/csd_concept_memory_cpu_input_output_1.png
        text: Hi, my name is Madison Maxey. I have a company called Loomia, and we
          focus on making smart fabrics for smart clothing and smart soft good products.
          The sky's the limit when it comes to textiles.
      2:
        image: notes/csd_concept_memory_cpu_input_output_2.png
        text: My name is Danielle Applestone, and I'm CEO of Othermachine Company.
          We build a desktop milling machine. A milling machine takes a rotating cutting
          tool and moves it through material to create a 3D object.
      3:
        image: notes/csd_concept_memory_cpu_input_output_3.png
        text: Under the hood, all computers do the same four basic things. They input
          information, store and process the information, and then, output information.
          Each of these things is done by a different part of the computer.
      4:
        image: notes/csd_concept_memory_cpu_input_output_4.png
        text: There are input devices that take input from the outside world and convert
          it into binary information. There is memory to store this information. There's
          a central processing unit or CPU, where all the calculations are done. And,
          finally, there are output devices that take information and convert it into
          a physical output.
      5:
        image: notes/csd_concept_memory_cpu_input_output_5.png
        text: Let's talk about input first. Computers can take many different types
          of input, like the keyboard of a computer, the touchpad of a phone, a camera,
          a microphone, or a GPS. But even the sensors on a car, a thermostat, or
          a drone are also different input devices.
      6:
        image: notes/csd_concept_memory_cpu_input_output_6.png
        text: Now, let's look at a simple example of how input travels through a computer
          and becomes output. When you press a key on your keyboard - let's say the
          letter "B". The keyboard converts the letter to a number. That number is
          sent as binary, ones and zeros, into the computer.
      7:
        image: notes/csd_concept_memory_cpu_input_output_7.png
        text: Starting from this number, the CPU calculates how to display the letter
          "B" pixel by pixel. The CPU requests step-by-step instructions from memory,
          which tell it how to draw the letter "B". The CPU runs these instructions
          and stores the results as pixels in memory.
      8:
        image: notes/csd_concept_memory_cpu_input_output_8.png
        text: Finally, this pixel information is sent in binary to the screen. The
          screen is an output device, which converts the binary signals into the tiny
          lights and colors that make up what you see.
      9:
        image: notes/csd_concept_memory_cpu_input_output_9.png
        text: This all happens so quickly it feels instantaneous, but to display each
          letter a computer runs thousands of instructions, starting from the moment
          your finger presses the key point.
      10:
        image: notes/csd_concept_memory_cpu_input_output_10.png
        text: In that example, the output device was the screen, but there are many
          different types of output which take a binary signal from the computer and
          do something in the physical world. For example, a speaker will play sound,
          and a 3D printer will print an object. Output devices can also control physical
          motion like a robotic arm, the motor of a car, or the cutting tool of the
          milling machine that my company makes. New types of inputs and outputs let
          computers interact with the world in entirely new ways. This has been helped
          out by improvements to the speed and size of the memory and CPU.
      11:
        image: notes/csd_concept_memory_cpu_input_output_11.png
        text: The more complicated a task is and the more information that is input
          or output, the more processing power and memory a computer needs. Typing
          letters on a screen may be easy but to do complicated 3d graphics or record
          a high-definition movie, modern computers often have multiple CPUs to process
          all that information and many gigabytes of memory to store it.
      12:
        image: notes/csd_concept_memory_cpu_input_output_12.png
        text: 'No matter what it is you want to do with the computer, every single
          action is about: inputting information from the physical world, storing
          and processing that information, and getting some output back into the physical
          world.'
    csd_concept_hardware_software:
      1:
        image: notes/csd_concept_hardware_software_1.png
        text: Hi, my name is Erica Gomez and I'm an engineering manager at Amazon.com.
          One of the best things about working in tech, and at Amazon in particular,
          is that I get to bring my dog with me to work every day. My job is to help
          make sure software gets out the door and her job is to nap under my desk
          and snore very loudly.
      2:
        image: notes/csd_concept_hardware_software_2.png
        text: 'My name is Jerome Holman, and I''m a Program Manager on Team Xbox and
          I have a really fun job: Basically bringing the hardware and the software
          together to give you all the games that you love on your Xbox.'
      3:
        image: notes/csd_concept_hardware_software_3.png
        text: When you look inside a computing device you see a bunch of circuits,
          chips, wires, speakers, plugs, and all sorts of other stuff. This is the
          hardware.
      4:
        image: notes/csd_concept_hardware_software_4.png
        text: But what you don't see is the software. Software is all of the computer
          programs, or code, running on this machine. Software can be anything from
          apps and games to webpages and the data science software that me and my
          teams use at Amazon to understand how customers behave.
      5:
        image: notes/csd_concept_hardware_software_5.png
        text: But how do the hardware and the software interact with one another?
          Let's start at looking at a computer's central processing unit, or CPU.
      6:
        image: notes/csd_concept_hardware_software_6.png
        text: The CPU is the master chip that controls all the other parts of the
          computer. A CPU needs to do different things so inside it has smaller, simpler
          parts that handle specific tasks. It has circuits to do simple math and
          logic. It has other circuits to send and receive information to and from
          different parts of the computer.
      7:
        image: notes/csd_concept_hardware_software_7.png
        text: The real magic of the CPU is how it knows which circuits to use and
          when to use them. The CPU receives simple commands that tell it which circuit
          to use to do a specific job. For example, an "add" command tells the CPU
          to use its outer circuit to calculate a new number. And then the "store"
          command tells the CPU to use a different circuit to save that result into
          memory.
      8:
        image: notes/csd_concept_hardware_software_8.png
        text: Just like numbers, all of these simple commands can be represented in
          binary ones and zeros or on and off electrical signals. The binary commands
          are stored in memory and the CPU fetches and executes them in sequence one
          after the other. This sequence of commands is, in fact, a very simple computer
          program.
      9:
        image: notes/csd_concept_hardware_software_9.png
        text: Binary code is the most basic form of software and it controls all the
          hardware of a computer. These days, nobody writes software in binary. It
          would take forever!
      10:
        image: notes/csd_concept_hardware_software_10.png
        text: Today, the software we write looks more like this (Python), or this
          (Ruby), or even this (Blockly). Programming languages like these let you
          type in commands in something that looks a lot like English.
      11:
        image: notes/csd_concept_hardware_software_11.png
        text: To draw a rectangle on the screen, you just need a single command. This
          high-level command is converted into hundreds, or thousands, of simpler
          binary commands that the CPU understands. Software tells the CPU what to
          do, but when you're listening to music, and browsing the web, and chatting
          with a friend, your computer is running multiple pieces of software all
          at once.
      12:
        image: notes/csd_concept_hardware_software_12.png
        text: So, how do all of these programs get on the computer in the first place,
          and how can the CPU run them all at once? To find out we'll have to take
          a look at the operating system.
      13:
        image: notes/csd_concept_hardware_software_13.png
        text: The operating system of the computer is the master program that manages
          how software gets to use the hardware of the computer. For example, I helped
          create the Windows operating system that runs on most personal computers.
      14:
        image: notes/csd_concept_hardware_software_14.png
        text: The operating system is a program with special abilities that let it
          control the other software on the computer. It lets you install new programs
          by loading them into your computer's memory. It decides when a program is
          run by the central processing unit, and whether that program can access
          the computer's input and output devices. And when you think your computer
          is running many programs at once, in reality, it's the operating system
          that's quickly switching between programs sharing that CPU for fractions
          of a second.
      15:
        image: notes/csd_concept_hardware_software_15.png
        text: Inside every computer is an operating system managing software that
          controls the computer's hardware.
      16:
        image: notes/csd_concept_hardware_software_16.png
        text: The software is a series of commands made of simple binary code, and
          that binary code is just electrical signals flowing through billions of
          tiny circuits.
      17:
        image: notes/csd_concept_hardware_software_17.png
        text: Computers have the potential to do all kinds of amazing things. But
          the only thing that makes the computer smart, or useful, is you. When you
          learn to code you get to define the problem you want to solve, and write
          the software that turns those ideas into reality.
