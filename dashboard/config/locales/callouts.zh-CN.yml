---
zh-CN:
  data:
    callouts:
      2-3 Artist Debugging 1:
        2-3_Artist_Debugging_1_a: 小艺术家没有“步进”按钮，但可以将滑块往左拖动来仔细看看程序如何运行的。
      2-3 Bee Conditionals 5:
        Bee_Cond_5_1a: 紫花里可能有一个花蜜，也可能没有...这要等运行了代码才知道。
      4-5 Artist Patterns Free Play:
        4-5_Artist_Patterns_Free_Play_1: 所有你喜欢的模块都组织到了分类中。点击这些词语来看看它们都在哪里！
      4-5 Bee Conditionals 2:
        4_5_Bee_Conditionals_2_1: 请注意检查是否每一朵云里都有一朵花，但不用检查蜂窝。
      AppLab Intro 7 - Change Screen Color:
        applab_hoc_finish: 屏幕变绿了吗？如果是这样, 请按 "完成"。如果不是, 请点击 "重置", 更改您的代码, 然后再次点击 "运行"。
      AppLab Intro 7 - thisOrThatAddButton:
        AppLabHoCFinal11: 你现在正处于设计模式中。
      CSD U3 - conditionals - transition:
        CSD_U3_L8_S6_C1: 将控制台日志语句放到这里
      CSD U3 - conditionals - transition_2018:
        CSD_U3_L8_S6_C1: 将控制台日志语句放到这里
      CSD U3 - conditionals - transition_2019:
        CSD_U3_L8_S6_C1: 将控制台日志语句放到这里
      CSD U3 Boolean Predict:
        '': 程序会在这里打印结果
      CSD U3 Boolean Predict_2018:
        '': 程序会在这里打印结果
      CSD U3 Boolean Predict_2019:
        '': 程序会在这里打印结果
      CSD U3 Sprites anitab 1:
        '': 点击打开动画标签页
      CSD U3 Sprites anitab 1_2018:
        '': 点击打开动画标签页
      CSD U3 Sprites anitab 1_2019:
        '': 点击打开动画标签页
      CSD U3 Sprites intro sprites:
        '': 用这个模块来创建精灵图
      CSD U3 Sprites intro sprites_2018:
        '': 用这个模块来创建精灵图
      CSD U3 Sprites intro sprites_2019:
        '': 用这个模块来创建精灵图
      CSD U3 Sprites text:
        '': 使用此模块在屏幕上放置文本
      CSD U3 Sprites text_2018:
        '': 使用此模块在屏幕上放置文本
      CSD U3 Sprites text_2019:
        '': 使用此模块在屏幕上放置文本
      CSD U3 UP_ARROW:
        '': 添加如果语句，并将移动的代码放在里面
      CSD U3 UP_ARROW_2018:
        '': 添加如果语句，并将移动的代码放在里面
      CSD U3 UP_ARROW_2018_2019:
        '': 添加如果语句，并将移动的代码放在里面
      CSD U3 Variables Predict Where X:
        CSD_U3_variables: 改动这里的数字
      CSD U3 Variables Predict Where XY:
        grid: 点击这里显示网格。
      CSD U3 Variables Predict Where XY_2018:
        grid: 点击这里显示网格。
      CSD U3 Variables Predict Where XY_2019:
        grid: 点击这里显示网格。
      CSD U3 Variables Predict Where X_2018:
        CSD_U3_variables: 改动这里的数字
      CSD U3 Variables Predict Where X_2019:
        CSD_U3_variables: 改动这里的数字
      CSD U3 abstraction accelerateX:
        CSD_U3_L11_S6_C1: 在此处添加代码.
      CSD U3 abstraction accelerateX_2018:
        CSD_U3_L11_S6_C1: 在此处添加代码.
      CSD U3 abstraction accelerateX_2019:
        CSD_U3_L11_S6_C1: 在此处添加代码.
      CSD U3 abstraction accelerateY:
        CSD_U3_L11_S7_C1: 在此处添加代码.
      CSD U3 abstraction accelerateY_2018:
        CSD_U3_L11_S7_C1: 在此处添加代码.
      CSD U3 abstraction accelerateY_2019:
        CSD_U3_L11_S7_C1: 在此处添加代码.
      CSD U3 abstraction jump:
        CSD_U3_L11_S17_C1: 看看这个如果语句
        CSD_U3_L11_S17_C2: 让青蛙落回这里
      CSD U3 abstraction jump_2018:
        CSD_U3_L11_S17_C1: 看看这个如果语句
        CSD_U3_L11_S17_C2: 让青蛙落回这里
      CSD U3 abstraction jump_2018_2019:
        CSD_U3_L11_S17_C1: 看看这个如果语句
        CSD_U3_L11_S17_C2: 让青蛙落回这里
      CSD U3 abstraction jumping:
        CSD_U3_L13_S8_C1: 在这里设置速度
      CSD U3 abstraction jumping_2018:
        CSD_U3_L13_S8_C1: 在这里设置速度
      CSD U3 abstraction jumping_2019:
        CSD_U3_L13_S8_C1: 在这里设置速度
      CSD U3 abstraction looping:
        CSD_U3_L11_S17_C1: 看看这个如果语句
      CSD U3 abstraction looping_2018:
        CSD_U3_L11_S17_C1: 看看这个如果语句
      CSD U3 abstraction looping_2019:
        CSD_U3_L11_S17_C1: 看看这个如果语句
      CSD U3 abstraction rotation:
        CSD_U3_L11_S4_C1: 在这里使用 rotationSpeed 模块
      CSD U3 abstraction rotation control:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction rotation control_2018:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction rotation control_2019:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction rotation_2018:
        CSD_U3_L11_S4_C1: 在这里使用 rotationSpeed 模块
      CSD U3 abstraction rotation_2019:
        CSD_U3_L11_S4_C1: 在这里使用 rotationSpeed 模块
      CSD U3 abstraction tumbleweed:
        CSD_U3_L11_S17_C1: 看看这个如果语句
      CSD U3 abstraction tumbleweed_2018:
        CSD_U3_L11_S17_C1: 看看这个如果语句
      CSD U3 abstraction tumbleweed_2019:
        CSD_U3_L11_S17_C1: 看看这个如果语句
      CSD U3 abstraction velocityX:
        CSD_U3_L11_S4_C1: 在这里添加模块.
      CSD U3 abstraction velocityX control:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction velocityX control_2018:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction velocityX control_2019:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction velocityX if-statements:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction velocityX if-statements_2018:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction velocityX if-statements_2019:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction velocityX_2018:
        CSD_U3_L11_S4_C1: 在这里添加模块.
      CSD U3 abstraction velocityX_2019:
        CSD_U3_L11_S4_C1: 在这里添加模块.
      CSD U3 abstraction velocityY:
        CSD_U3_L11_S5_C1: 在这里添加模块.
      CSD U3 abstraction velocityY control:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction velocityY control_2018:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction velocityY control_2019:
        CSD_U3_L11_S5_C1: 看看代码。
      CSD U3 abstraction velocityY_2018:
        CSD_U3_L11_S5_C1: 在这里添加模块.
      CSD U3 abstraction velocityY_2019:
        CSD_U3_L11_S5_C1: 在这里添加模块.
      CSD U3 collisions isTouching intro:
        CSD_U3_L12_S2_C1: 在这里添加模块.
      CSD U3 collisions isTouching intro_2018:
        CSD_U3_L12_S2_C1: 在这里添加模块.
      CSD U3 collisions isTouching intro_2019:
        CSD_U3_L12_S2_C1: 在这里添加模块.
      CSD U3 collisions scoreboard:
        CSD_U3_L12_S8_C1: 这些模块显示分数。
        CSD_U3_L12_S8_C2: 这些模块会检查兔子是否抓到了胡萝卜。
      CSD U3 collisions scoreboard_2018:
        CSD_U3_L12_S8_C1: 这些模块显示分数。
        CSD_U3_L12_S8_C2: 这些模块会检查兔子是否抓到了胡萝卜。
      CSD U3 collisions scoreboard_2019:
        CSD_U3_L12_S8_C1: 这些模块显示分数。
        CSD_U3_L12_S8_C2: 这些模块会检查兔子是否抓到了胡萝卜。
      CSD U3 collisions types:
        CSD_U3_L13_S6_C1: 在此处添加代码.
      CSD U3 collisions types_2018:
        CSD_U3_L13_S6_C1: 在此处添加代码.
      CSD U3 collisions types_2019:
        CSD_U3_L13_S6_C1: 在此处添加代码.
      CSD U3 debug:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U3 debug_2018:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U3 debug_2019:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U3 ellipse:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U3 ellipse_2018:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U3 ellipse_2019:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U3 fill:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U3 fill_2018:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U3 fill_2019:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U3 keydown conditional:
        '': 将模块加到下面的如果语句里
      CSD U3 keydown conditional_2018:
        '': 将模块加到下面的如果语句里
      CSD U3 keydown conditional_2018_2019:
        '': 将模块加到下面的如果语句里
      CSD U3 rect:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 这是"运行"按钮。
      CSD U3 rect_2018:
        CSD_U3_rect_c1: 这是代码
      CSD U3 rect_2019:
        CSD_U3_rect_c1: 这是代码
      CSD U3 sequence:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U3 sequence_2018:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U3 sequence_2019:
        CSD_U3_rect_c1: 这是代码
        CSD_U3_rect_c2: 拖动此模块放到代码区域。
      CSD U6 colorLeds intensity:
        CSDU6L10_rainbow: 在此处添加代码
      CSD U6 colorLeds intensity_2018:
        CSDU6L10_rainbow: 在此处添加代码
      CSD U6 colorLeds intensity_2019:
        CSDU6L10_rainbow: 在此处添加代码
      CSD U6 getProperty input:
        CSD_U6L06P03: 在这里添加模块.
      CSD U6 getProperty input_2018:
        CSD_U6L06P03: 在这里添加模块.
      CSD U6 getProperty input_2019:
        CSD_U6L06P03: 在这里添加模块.
      CSD U6 light show:
        CSDUDL03P09: 这条线是做什么用的？
      CSD U6 light show_2018:
        CSDUDL03P09: 这条线是做什么用的？
      CSD U6 light show_2019:
        CSDUDL03P09: 这条线是做什么用的？
      CSD U6 tugowar variables 1:
        CSD_U6_startGame: 在此处定义 开始游戏
      CSD U6 tugowar variables 1_2018:
        CSD_U6_startGame: 在此处定义 开始游戏
      CSD U6 tugowar variables 1_2019:
        CSD_U6_startGame: 在此处定义 开始游戏
      CSD U6 tugowar variables 2:
        CSD_U6_movePlayer: 在这里定义 移动玩家 ()
      CSD U6 tugowar variables 2_2018:
        CSD_U6_movePlayer: 在这里定义 移动玩家 ()
      CSD U6 tugowar variables 2_2019:
        CSD_U6_movePlayer: 在这里定义 移动玩家 ()
      CSD U6 tugowar variables 3:
        CSD_U6_checkWin: 检查玩家是否赢了
      CSD U6 tugowar variables 3_2018:
        CSD_U6_checkWin: 检查玩家是否赢了
      CSD U6 tugowar variables 3_2019:
        CSD_U6_checkWin: 检查玩家是否赢了
      Course 4 Artist 4:
        repeat_full_circle: 输入僵尸至少需要移动多少次才能完成一个完整的循环
      Course 4 Artist 7:
        repeat_blocks: 用重复模块来将工作区的其它模块包起来。
      Course 4 Artist For Loops 4:
        place_counter_variable: 将计数器拖拽到这个模块中。
      Course 4 Artist Functions challenge:
        Course_4_Artist_Functions_challenge_1: 注意，所有模块都放到对应的类别里，并排好了顺序。点击这里来找到所有需要的模块。
      Course 4 Artist Vars 1:
        repeat_blocks: 用重复模块来将工作区的其它模块包起来。
      Course 4 Artist Vars 12:
        set_length: 用这个模块来设置“长度”为正确的数值。
      Course 4 Artist Vars 2:
        set_length: 用这个模块来设置“长度”为正确的数值。
      Course 4 Artist Vars 6:
        degrees_per_side: 用360除以边的数量，从而算出每次转的角度。
      Course 4 Artist Vars 8:
        Course_4_Artist_Vars_8_a: 需要更多空间？拉动这条分割线就能让代码区域更宽一些。
      Course 4 Bee 1:
        if_bee_nectar: 用 “if” 模块来决定蜜蜂应该采集花蜜还是酿蜂蜜。
      Course 4 Bee 3:
        if_else_bee: 用 “如果/否则” 模块让蜜蜂从花朵里采集花蜜，否则就酿蜂蜜。
      Course 4 Bee Params 2:
        edit_get_nectar: 用这个按钮来编辑函数，并改变蜜蜂的方向让它到达花蜜。
      Course 4 Maze 4:
        repeat: 在循环中放入模块来重复执行命令
      Course 4 Play Lab Params 2:
        Course_4 _Play_Lab_Params_2_1: 点击“编辑”来更新此函数，以便其可使用高度参数。
      Course 4 Play Lab Params 3:
        edit_function: 单击此处来编辑您的函数。
      Course 4 Play Lab Params 6:
        edit_add_parameter: 点击编辑，在你的函数中添加参数
      Course 4 Play Lab Vars 1:
        arrows_move_actor: 使用箭头移动演员
      Course 4 Play Lab Vars 9:
        Course_4_Play_Lab_Vars_9_1: 现在，所有的模块都被分别归类在目录里。点击目录标签可查看同一类别的所有模块。
      Course 4 Playlab For Loops 4b:
        Course_4_Playlab_For_Loops_4b_1: 注意到每一个角色的`counter`（计数器）变量都有不同的名字吗？所以每一个`计数循环`都可以控制自己的计数器。
        Course_4_Playlab_For_Loops_4b_2: 在这道关卡中，只允许修改`计数循环`中的“增量”。
      Course 4 SCV 6:
        Course_4_SCV_6: 这个模块可以让你设置几乎任何你想看到的颜色！尝试调整参数，看看会发生什么！
      CourseD_Dance_Party_01:
        dance_callout_01: 向程序里增加这个模块！
      CourseD_Dance_Party_02:
        dance_callout_02: 向程序里增加这个模块！
      CourseD_Dance_Party_04:
        dance_callout_04: 向程序里增加这个模块！
      CourseD_Dance_Party_06:
        dance_callout_06: 在这里添加新的跳舞者
      CourseD_Dance_Party_11:
        dance_callout_11_a: 新模块！
        dance_callout_11_b: 新模块！
      CourseD_Dance_Party_11_5:
        dance_party_11_5_groups: 在这里找到”所有鸭子“模块
      Dance_2019_01:
        dance_callout_01: 向程序里增加这个模块！
      Dance_2019_02:
        dance_callout_11_a: 将此模块添加到程序中。
        arrow_buttons: 按方向按钮控制舞者。
      Dance_2019_04:
        dance_callout_02: 向程序里增加这个模块！
      Dance_2019_05:
        dance_callout_05: 添加新事件到程序中。
      Dance_2019_06:
        dance_party_11_5_groups: 新模块！
      Dance_2019_07:
        setprop_hint: 新模块！
      Dance_2019_09:
        new_block_3: 新模块！
        new_block_4: 新模块！
      Dance_Party_01:
        dance_callout_01: 向程序里增加这个模块！
      Dance_Party_02:
        dance_callout_02: 向程序里增加这个模块！
      Dance_Party_04:
        dance_callout_04: 向程序里增加这个模块！
      Dance_Party_06:
        dance_callout_06: 在这里添加新的跳舞者
      Dance_Party_11:
        dance_callout_11_a: 新模块！
        dance_callout_11_b: 新模块！
      Dance_Party_11_5:
        dance_party_11_5_groups: 在这里找到”所有鸭子“模块
      Fish Tank 3-validated_2019:
        spritelab_comment: 使用此模块记录你的或老师的代码是如何起作用的。
      Function intro Ryan:
        Function_intro_Ryan_1: 这条小小的指令能够让电脑以与工作区中一样的名字来运行一大堆代码。
      Function intro Ryan_2019:
        Function_intro_Ryan_1: 这条小小的指令能够让电脑以与工作区中一样的名字来运行一大堆代码。
      Geometric Sun:
        4-5_Artist_Patterns_Free_Play_1: 所有你喜欢的模块都组织到了分类中。点击这些词语来看看它们都在哪里！
      Geometric Sun_2018:
        4-5_Artist_Patterns_Free_Play_1: 所有你喜欢的模块都组织到了分类中。点击这些词语来看看它们都在哪里！
      Infinity_move_collide:
        Infinity_move_collide_callout: 发生此事件时播放声音。
      Infinity_move_directions:
        Infinity_move_directions_callout: 当按上方向键时，哪个模块将会让大白向上移动？
        Infinity_move_directions_callout_arrow: 使用这些箭头键引导
      Infinity_move_right:
        Infinity_move_right_runbutton: 在这里添加移动模块
      Infinity_repeat:
        Infinity_repeat_callout: 放置移动模块到这里面
      InspirationalArtwork:
        InspirationalArtwork_1: 尝试使用这个标签下的新的`评论 `模块, 让自己能在程序里记笔记！
      InspirationalArtwork_2018:
        InspirationalArtwork_1: 尝试使用这个标签下的新的`评论 `模块, 让自己能在程序里记笔记！
      MC HOC 2016 Level 2-2:
        craft2_run_button_callout: 准备就绪后，点击“运行”试试看你的程序。
      MC HOC 2016 New Walk:
        MC_HOC_2016_New_Walk_callout2: 点击“运行”开始移动。
      MC_HOC_2017_03_Cole:
        MC_HOC_2017_03_Cole_1: 这是一个"重复"循环！点击它进入工作区，并为其添加您想要一遍遍运行的代码。
      MC_HOC_2017_03_Cole_2019:
        MC_HOC_2017_03_Cole_1: 这是一个"重复"循环！点击它进入工作区，并为其添加您想要一遍遍运行的代码。
      MC_HOC_2017_04_Cole:
        MC_HOC_2017_04_Cole_a: 代理人可以在水上悬停，但是玩家不能！
      MC_HOC_2017_04_Cole_2019:
        MC_HOC_2017_04_Cole_a: 代理人可以在水上悬停，但是玩家不能！
      MC_HOC_2017_06_Cole:
        MC_HOC_2017_06_Cole_1: 您无法将这些方块扔掉，但是您可以编辑它们！
      MC_HOC_2017_06_Cole_2019:
        MC_HOC_2017_06_Cole_1: 您无法将这些方块扔掉，但是您可以编辑它们！
      MC_HOC_2017_Ali:
        MC_HOC_2017_08_RY_1: '代理人可以在岩浆上悬停，但是斯蒂夫和艾利克斯不能！  '
      MC_HOC_2017_Ali_2019:
        MC_HOC_2017_08_RY_1: '代理人可以在岩浆上悬停，但是斯蒂夫和艾利克斯不能！  '
      NEW Course 4 Artist Functions 3:
        NEW_Course_4_Artist_Functions_3_1: 点击此处来编辑新的函数，来画一个正方形。
      NEW Course 4 Artist Functions 7:
        edit_function: 单击此处来编辑您的函数。
      NEW Course 4 Artist Functions 8:
        edit_function: 单击此处来编辑您的函数。
      NEW Course 4 Artist Params 10:
        create_function: 点击这里来打开函数的选项，然后点击“创建函数”的按钮。
      NEW Course 4 Artist Params 9:
        edit_add_parameter: 点击编辑，在你的函数中添加参数
        add_and_drag_parameter: 在这里填写参数的名称，点击添加，然后将它拖动到函数定义中
      NEW Course 4 Artist Vars 6:
        place_length_variable: 将长度变量拖拽到这里来替代问号。
      NEW Course 4 Bee For Loops 4:
        bee_for_loop: 输入想要蜜蜂收集的最大花蜜数量
      NEW Course 4 Bee For Loops 5:
        actions_category: 工具箱里有新的样子了！现在里面有“行动”模块了。
      Overworld Chop Trees:
        craft_callout_preplaced: 我们已将一些方块放在这儿，好方便你开始
      Overworld Chop Trees_2019:
        craft_callout_preplaced: 我们已将一些方块放在这儿，好方便你开始
      Overworld House Frame Chosen:
        craft_callout_preplaced_house: 此代码将开始建造你的房子。你能完成吗？
      Overworld House Frame Chosen_2019:
        craft_callout_preplaced_house: 此代码将开始建造你的房子。你能完成吗？
      Overworld Move to Sheep:
        craft_run_button_callout: 点击“运行”，试试你的程序
        craft_drag_block_callout: 拖动一个“向前移动”模块并接到其他模块下方
      Overworld Move to Sheep_2019:
        craft_run_button_callout: 点击“运行”，试试你的程序
        craft_drag_block_callout: 拖动一个“向前移动”模块并接到其他模块下方
      Overworld Place Wall:
        craft_inside_repeat: 将方块放在这里可以重复行动
      Overworld Place Wall_2019:
        craft_inside_repeat: 将方块放在这里可以重复行动
      Robot Doodle:
        4-5_Artist_Patterns_Free_Play_2: 尝试使用这个标签下的新的`评论 `模块, 让自己能在程序里记笔记！
      Robot Doodle_2018:
        4-5_Artist_Patterns_Free_Play_2: 尝试使用这个标签下的新的`评论 `模块, 让自己能在程序里记笔记！
      Underground Avoiding Lava:
        craft_callout_moveforward: 此代码会检查熔岩，你能添加一条向前移动的命令吗？
      Underground Avoiding Lava_2019:
        craft_callout_moveforward: 此代码会检查熔岩，你能添加一条向前移动的命令吗？
      Underground Iron:
        craft_what_is_iron: 开采这块铁矿！
      Underground Iron_2019:
        craft_what_is_iron: 开采这块铁矿！
      behaviors 1:
        behaviors_edit: 点这里发现如何工作。
      behaviors 3a:
        behavior_callout: 为什么该行为对中间的星星不生效？
        star2_callout: 用”精灵图“模块替换装饰模块
      behaviors 4:
        behaviors_edit: 点这里发现如何工作。
      behaviors 5:
        behaviors_edit: 对这个行为进行编码。
      behaviors free play:
        behaviors_edit: 对这个行为进行编码。
      course2_bee_conditionals_challenge2:
        courseD_bee_conditionals_challenge2_1: 使用这个循环收集所有的花蜜 (或蜂蜜) 从一朵花 (或蜂窝)。
      course3_artist_functions_challenge1:
        courseE_artist_functions_challenge1_callout1: 通过在底部添加更多代码来保持这个程序运行。
        courseE_artist_functions_challenge1_callout2: 如果你不喜欢这个设计, 把它变成你想要的任何东西!
      course3_artist_functions_challenge2:
        courseE_artist_functions_challenge2_callout1: 通过在底部添加更多代码来保持这个程序运行。
        courseE_artist_functions_challenge2_callout2: 如果你不喜欢这个设计, 把它变成你想要的任何东西!
      course3_bee_debugging_challenge1:
        courseD_bee_debugging_challenge1_callout1: 使用此命令可将蜜蜂向后移动。
      course3_bee_functions_challenge3:
        courseF_bee_functions_challenge1_1: 在这个函数中您应该放什么代码？
        courseF_bee_functions_challenge1_2: '"检查花蜜或蜂蜜" 函数可以在这里使用, 如果编辑它, 可以多次制作蜂蜜。'
      course3_playLab_challenge1:
        courseC_PlayLab_events_challenge1_1: 这个模块允许你把演员移动到游戏空间的不同部分。
      course4_artist_functions_challenge2:
        courseE_artist_functions_challenge2_callout1: 通过在底部添加更多代码来保持这个程序运行。
        courseE_artist_functions_challenge2_callout2: 如果你不喜欢这个设计, 把它变成你想要的任何东西!
      course4_bee_fwp_challenge2:
        courseF_bee_fwp_challenge2_callout1: 这个函数对玉米有很好的作用, 但是其他的蔬菜呢？
      courseA_artist_loops4:
        courseA_artist_loops4_1: 这个数字告诉你, 你可以在这个谜题中使用多少块。
      courseA_artist_loops4_2018:
        courseA_artist_loops4_1: 这个数字告诉你, 你可以在这个谜题中使用多少块。
      courseA_artist_loops4_2019:
        courseA_artist_loops4_1: 这个数字告诉你, 你可以在这个谜题中使用多少块。
      courseA_artist_loops7:
        courseA_artist_loops7_1: 这个数字意味着只有一个这样的模块可以在最终的答案中使用。
      courseA_artist_loops7_2018:
        courseA_artist_loops7_1: 这个数字意味着只有一个这样的模块可以在最终的答案中使用。
      courseA_artist_loops7_2019:
        courseA_artist_loops7_1: 这个数字意味着只有一个这样的模块可以在最终的答案中使用。
      courseA_artist_loops8:
        courseA_artist_loops8_1: 你知道在任何时候，都能往回画线吗？
      courseA_artist_loops8_2018:
        courseA_artist_loops8_1: 你知道在任何时候，都能往回画线吗？
      courseA_artist_loops8_2019:
        courseA_artist_loops8_1: 你知道在任何时候，都能往回画线吗？
      courseA_collector_loops1:
        courseA_collector_loops1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseA_collector_loops1_2019:
        courseA_collector_loops1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseA_collector_loops3:
        gradek_adventurer_loops2_1: 这个数字告诉你, 你可以在这个谜题中使用多少块。
      courseA_collector_loops3_2018:
        gradek_adventurer_loops2_1: 这个数字告诉你, 你可以在这个谜题中使用多少块。
      courseA_collector_loops3_2019:
        gradek_adventurer_loops2_1: 这个数字告诉你, 你可以在这个谜题中使用多少块。
      courseA_collector_preLoops2:
        courseA_collector_loops1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseA_collector_preLoops3:
        courseA_collector_loops1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseA_collector_preLoops4:
        courseA_collector_loops1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseA_collector_preLoops5:
        courseA_collector_loops1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseA_collector_preLoops6:
        courseA_collector_loops1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseA_maze_ramp2_2019:
        courseC_maze_programming2_1: 这是工具箱。在那里你可以找到额外的模块来完成你的关卡。
      courseA_maze_ramp3a_2018:
        courseC_maze_programming2_1: 这是工具箱。在那里你可以找到额外的模块来完成你的关卡。
      courseA_maze_seq1:
        courseA_maze_seq1_1: 当您需要提示时点击灯泡!
      courseA_maze_seq1_2018:
        courseA_maze_seq1_1: 当您需要提示时点击灯泡!
      courseA_maze_seq1_2019:
        courseA_maze_seq1_1: 当您需要提示时点击灯泡!
      courseA_maze_seq2:
        courseA_maze_seqA_callout1: 使用步骤按钮循序渐进地通过程序。这将帮助您找到 bug！
      courseA_maze_seq4:
        made_of_stone: 这些块是石头做的。 您可以移动它们, 但不能删除它们!
      courseA_playLab_events4:
        courseA_playlab_events4_callout1: 这是一个标注
      courseA_playLab_events4_2018:
        courseA_playlab_events4_callout1: 这是一个标注
      courseA_playLab_events4_2019:
        courseA_playlab_events4_callout1: 这是一个标注
      courseA_playLab_events5:
        courseA_playLab_events5_1: 单击此处可更改事件箭头的方向。
      courseA_playLab_events5_2018:
        courseA_playLab_events5_1: 单击此处可更改事件箭头的方向。
      courseA_playLab_events5_2019:
        courseA_playLab_events5_1: 单击此处可更改事件箭头的方向。
      courseA_playLab_events6:
        courseA_playLab_events6_1: 这让你选择一个 "随机" 的声音，这意味着在你听到声音前，不知道你会得到什么!
      courseA_playLab_events6_2018:
        courseA_playLab_events6_1: 这让你选择一个 "随机" 的声音，这意味着在你听到声音前，不知道你会得到什么!
      courseA_playLab_events6_2019:
        courseA_playLab_events6_1: 这让你选择一个 "随机" 的声音，这意味着在你听到声音前，不知道你会得到什么!
      courseB_Scrat_ramp1_2018:
        grade2_CaringForNewPet_0_1: 连接完所有的模块后, 按 "运行" 来启动你的程序。
      courseB_Scrat_ramp1_2019:
        grade2_CaringForNewPet_0_1: 连接完所有的模块后, 按 "运行" 来启动你的程序。
      courseB_Scrat_ramp3a_2019:
        courseC_maze_programming2_1: 这是工具箱。在那里你可以找到额外的模块来完成你的关卡。
      courseB_artist_loops3:
        courseB_artist_loops3_1: 工具箱中只有一个这样的模块。你将如何使用它？
      courseB_artist_loops3_2018:
        courseB_artist_loops3_1: 工具箱中只有一个这样的模块。你将如何使用它？
      courseB_artist_loops3_2019:
        courseB_artist_loops3_1: 工具箱中只有一个这样的模块。你将如何使用它？
      courseB_artist_loops5:
        courseB_artist_loops5_1: 这个数字意味着工具箱中不再有这个块了。
      courseB_collector_loops1:
        courseB_collector_loops1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseB_collector_loops1_2018:
        courseB_collector_loops1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseB_collector_loops1_2019:
        courseB_collector_loops1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseB_maze_seq1:
        courseB_maze_seq1: 当您需要提示时点击灯泡!
      courseB_maze_seq1_2018:
        courseB_maze_seq1: 当您需要提示时点击灯泡!
      courseB_maze_seq1_2019:
        courseB_maze_seq1: 当您需要提示时点击灯泡!
      courseB_maze_seq2:
        courseB_maze_seq2_callout1: 使用步骤按钮循序渐进地通过程序。这将帮助您找到 bug！
      courseB_maze_seq3:
        courseB_maze_seq3_1: 灰色的块是石头做的, 不能扔掉。
      courseB_playlab_events6:
        courseB_playlab_events6_a: 使用绿色下拉箭头可更改方向。
      courseB_playlab_events6_2018:
        courseB_playlab_events6_a: 使用绿色下拉箭头可更改方向。
      courseB_playlab_events6_2019:
        courseB_playlab_events6_a: 使用绿色下拉箭头可更改方向。
      courseC19_playLab_EOC3:
        courseE_playLab_scaffold3_1: 让演员到这个标志移动到下一层。
      courseC_PlayLab_events8:
        courseC_PlayLab_events8_callout1: 当企鹅和恐龙碰到一起时，使用这个模块！
      courseC_PlayLab_events8_2018:
        courseC_PlayLab_events8_callout1: 当企鹅和恐龙碰到一起时，使用这个模块！
      courseC_PlayLab_events8_2019:
        courseC_PlayLab_events8_callout1: 当企鹅和恐龙碰到一起时，使用这个模块！
      courseC_PlayLab_events_challenge1:
        courseC_PlayLab_events_challenge1_1: 这个模块允许你把演员移动到游戏空间的不同部分。
      courseC_PlayLab_events_challenge1_2018:
        courseC_PlayLab_events_challenge1_1: 这个模块允许你把演员移动到游戏空间的不同部分。
      courseC_PlayLab_events_challenge1_2019:
        courseC_PlayLab_events_challenge1_1: 这个模块允许你把演员移动到游戏空间的不同部分。
      courseC_artist_loops1a_2019:
        jumpto_callout: 这个模块对这个项目很重要。请确认使用它。
      courseC_artist_loops1b_2019:
        sticker2: 将这个加到你程序的中部。
      courseC_artist_loopsPrePre1a:
        courseC_artist_loopsPrePre1a_1: 开始使用这个块, 让艺术家到屏幕的中心。
      courseC_artist_loopsPrePre1a_2018:
        courseC_artist_loopsPrePre1a_1: 开始使用这个块, 让艺术家到屏幕的中心。
      courseC_artist_loopsPrePre1a_2019:
        courseC_artist_loopsPrePre1a_1: 开始使用这个块, 让艺术家到屏幕的中心。
      courseC_collector_prog1:
        courseC_collector_prog1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseC_collector_prog1_2018:
        courseC_collector_prog1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseC_collector_prog1_2019:
        courseC_collector_prog1_1: 你在工具箱中看到了一些新的模块吗？ 别担心, 我们会在以后的阶段告诉你如何使用它们。
      courseC_collector_prog7:
        courseC_collector_prog7_1: 如果你需要的话，可以从工具箱里取更多的模块！
      courseC_collector_prog7_2018:
        courseC_collector_prog7_1: 如果你需要的话，可以从工具箱里取更多的模块！
      courseC_collector_prog7_2019:
        courseC_collector_prog7_1: 如果你需要的话，可以从工具箱里取更多的模块！
      courseC_harvester_loops1:
        courseC_harvester_loops1_callout1: 南瓜上的数字四告诉你有四个南瓜可供挑选。
      courseC_harvester_loops1_2018:
        courseC_harvester_loops1_callout1: 南瓜上的数字四告诉你有四个南瓜可供挑选。
      courseC_harvester_loops1_2019:
        courseC_harvester_loops1_callout1: 南瓜上的数字四告诉你有四个南瓜可供挑选。
      courseC_maze_debugging5:
        courseC_maze_debugging5_1: 灰色模块不能被删除！
      courseC_maze_debugging5_2018:
        courseC_maze_debugging5_1: 这些块是锁定的, 不能删除!
      courseC_maze_debugging5_2019:
        courseC_maze_debugging5_1: 这些块是锁定的, 不能删除!
      courseC_maze_debugging9_2019:
        courseC_maze_debugging9_2019_1: 模块可以从工具区拖到你的工作区。
      courseC_maze_programming1:
        grade2_CaringForNewPet_0_1: 连接完所有的模块后, 按 "运行" 来启动你的程序。
      courseC_maze_programming1_2018:
        grade2_CaringForNewPet_0_1: 连接完所有的模块后, 按 "运行" 来启动你的程序。
      courseC_maze_programming1_2019:
        grade2_CaringForNewPet_0_1: 连接完所有的模块后, 按 "运行" 来启动你的程序。
      courseC_maze_programming2:
        courseC_maze_programming2_1: 这是工具箱。在那里你可以找到额外的模块来完成你的关卡。
      courseC_maze_programming2_2018:
        courseC_maze_programming2_1: 这是工具箱。在那里你可以找到额外的模块来完成你的关卡。
      courseC_maze_programming2_2019:
        courseC_maze_programming2_1: 这是工具箱。在那里你可以找到额外的模块来完成你的关卡。
      courseC_maze_programming3:
        courseC_maze_programming3_2: 可以将额外的模块拖动到工具箱中, 以将其丢弃。
        courseC_maze_programming3_3: 这些块是石头, 不能扔掉。
      courseC_maze_programming3_2018:
        courseC_maze_programming3_2: 可以将额外的模块拖动到工具箱中, 以将其丢弃。
        courseC_maze_programming3_3: 这些块是石头, 不能扔掉。
      courseC_maze_programming3_2019:
        courseC_maze_programming3_2: 可以将额外的模块拖动到工具箱中, 以将其丢弃。
        courseC_maze_programming3_3: 这些块是石头, 不能扔掉。
      courseC_maze_programming4:
        courseC_maze_programming4_1: 这是你的模块限制。 它告诉你还可以使用多少个模块。
      courseC_maze_programming4_2018:
        courseC_maze_programming4_1: 这是你的模块限制。 它告诉你还可以使用多少个模块。
      courseC_maze_programming4_2019:
        courseC_maze_programming4_1: 这是你的模块限制。 它告诉你还可以使用多少个模块。
      courseC_maze_programming5:
        '': 这些模块上面没有数字。可以随便使用多少个！
      courseC_maze_programming5_2018:
        '': 这些模块上面没有数字。可以随便使用多少个！
      courseC_maze_programming5_2019:
        '': 这些模块上面没有数字。可以随便使用多少个！
      courseC_maze_programming7:
        courseC_maze_programming7_1: 这是你的第一个挑战关卡！这些都是很难的，可能需要几次尝试。
        courseC_maze_programming7_2: 这些块是石头做的, 不能扔掉。
      courseC_maze_programming7_2018:
        courseC_maze_programming7_1: 这是你的第一个挑战关卡！这些都是很难的，可能需要几次尝试。
        courseC_maze_programming7_2: 这些块是石头做的, 不能扔掉。
      courseC_maze_programming7_2019:
        courseC_maze_programming7_1: 这是你的第一个挑战关卡！这些都是很难的，可能需要几次尝试。
        courseC_maze_programming7_2: 这些块是石头做的, 不能扔掉。
      courseC_starWars_loops2:
        courseC_starWars_loops2: 在这个关卡中，你只能使用一个这样的模块。
      courseC_starWars_loops2_2018:
        courseC_starWars_loops2: 在这个关卡中，你只能使用一个这样的模块。
      courseC_starWars_loops2_2019:
        courseC_starWars_loops2: 在这个关卡中，你只能使用一个这样的模块。
      courseD_artist_nestedLoops1a:
        courseD_artist_nestedLoops1a_1: 您不必使用颜色来做对这个谜题。如果您愿意的话, ‘随机颜色’模块会容易!
      courseD_artist_nestedLoops1a_2018:
        courseD_artist_nestedLoops1a_1: 您不必使用颜色来做对这个谜题。如果您愿意的话, ‘随机颜色’模块会容易!
      courseD_artist_nestedLoops1a_2019:
        courseD_artist_nestedLoops1a_1: 您不必使用颜色来做对这个谜题。如果您愿意的话, ‘随机颜色’模块会容易!
      courseD_artist_ramp11:
        courseD_artist_ramp11_1: 您可以更改此数字。
        courseD_artist_ramp11_2: 单击此处键入重复代码的次数。
      courseD_bee_conditionals2:
        4_5_Bee_Conditionals_2_1: 请注意检查是否每一朵云里都有一朵花，但不用检查蜂窝。
        4_5_Bee_Conditionals_2_2: 需要帮助吗？ 点击这里查看视频提示!
      courseD_bee_conditionals2_2018:
        4_5_Bee_Conditionals_2_1: 请注意检查是否每一朵云里都有一朵花，但不用检查蜂窝。
      courseD_bee_conditionals2_2019:
        4_5_Bee_Conditionals_2_1: 请注意检查是否每一朵云里都有一朵花，但不用检查蜂窝。
      courseD_bee_conditionals_challenge2:
        courseD_bee_conditionals_challenge2_1: 使用这个循环收集所有的花蜜 (或蜂蜜) 从一朵花 (或蜂窝)。
      courseD_bee_conditionals_challenge2_2018:
        courseD_bee_conditionals_challenge2_1: 使用这个循环收集所有的花蜜 (或蜂蜜) 从一朵花 (或蜂窝)。
      courseD_bee_conditionals_challenge2_2019:
        courseD_bee_conditionals_challenge2_1: 使用这个循环收集所有的花蜜 (或蜂蜜) 从一朵花 (或蜂窝)。
      courseD_bee_debugging_challenge1:
        courseD_bee_debugging_challenge1_callout1: 使用此命令可将蜜蜂向后移动。
      courseD_bee_debugging_challenge1a:
        courseD_bee_debugging_challenge1_callout1: 使用此命令可将蜜蜂向后移动。
      courseD_collector_ramp8:
        courseD_collector_ramp8_1: '使用此块收集一块宝藏。  '
      courseD_farmer_while7_2018:
        courseD_farmer_while7_2018_PathAhead: 要解决这个迷题，会用到`当前面有路时`模块。
      courseD_farmer_while7_2019:
        courseD_farmer_while7_2018_PathAhead: 要解决这个迷题，会用到`当前面有路时`模块。
      courseD_maze_intro4_2019:
        courseC_maze_programming4_1: 这是你的模块限制。 它告诉你还可以使用多少个模块。
      courseD_maze_intro5a_2019:
        '': 这些模块上面没有数字。可以随便使用多少个！
      courseD_maze_ramp1:
        grade2_CaringForNewPet_0_1: 连接完所有的模块后, 按 "运行" 来启动你的程序。
      courseD_maze_ramp1_2018:
        grade2_CaringForNewPet_0_1: 连接完所有的模块后, 按 "运行" 来启动你的程序。
      courseD_maze_ramp1_2019:
        grade2_CaringForNewPet_0_1: 连接完所有的模块后, 按 "运行" 来启动你的程序。
      courseD_maze_ramp2:
        courseC_maze_programming2_1: 这是工具箱。在那里你可以找到额外的模块来完成你的关卡。
      courseD_maze_ramp2_2018:
        courseC_maze_programming2_1: 这是工具箱。在那里你可以找到额外的模块来完成你的关卡。
      courseD_maze_ramp2_2019:
        courseC_maze_programming2_1: 这是工具箱。在那里你可以找到额外的模块来完成你的关卡。
      courseD_maze_ramp3:
        courseC_maze_programming3_2: 可以将额外的模块拖动到工具箱中, 以将其丢弃。
        stone_block_2: 灰色的块是石头做的, 不能扔掉。
      courseD_maze_ramp3_2018:
        courseC_maze_programming3_2: 可以将额外的模块拖动到工具箱中, 以将其丢弃。
        stone_block_2: 灰色的块是石头做的, 不能扔掉。
      courseD_maze_ramp3_2019:
        courseC_maze_programming3_2: 可以将额外的模块拖动到工具箱中, 以将其丢弃。
        stone_block_2: 灰色的块是石头做的, 不能扔掉。
      courseD_maze_ramp4:
        courseC_maze_programming4_1: 这是你的模块限制。 它告诉你还可以使用多少个模块。
      courseD_maze_ramp4_2018:
        courseC_maze_programming4_1: 这是你的模块限制。 它告诉你还可以使用多少个模块。
      courseD_maze_ramp4_2019:
        courseC_maze_programming4_1: 这是你的模块限制。 它告诉你还可以使用多少个模块。
      courseD_maze_ramp5:
        '': 这些模块上面没有数字。可以随便使用多少个！
      courseD_maze_ramp5_2018:
        '': 这些模块上面没有数字。可以随便使用多少个！
      courseD_maze_ramp5_2019:
        '': 这些模块上面没有数字。可以随便使用多少个！
      courseD_maze_ramp5a:
        '': 这些模块上面没有数字。可以随便使用多少个！
      courseD_maze_ramp5a_2018:
        '': 这些模块上面没有数字。可以随便使用多少个！
      courseD_maze_ramp5a_2019:
        '': 这些模块上面没有数字。可以随便使用多少个！
      courseD_maze_ramp6:
        courseD_maze_ramp6_1: 无论您在这里放置什么代码, 都会重复您说的次数, 然后继续运行该程序的其余部分。
      courseD_playLab_condFP:
        courseD_playLab_condFP_1: 我们将模块分类提供给你，来写更多的代码！点击这里来看看每样东西都在哪里。
      courseD_playLab_condFP_2018:
        courseD_playLab_condFP_1: 我们将模块分类提供给你，来写更多的代码！点击这里来看看每样东西都在哪里。
      courseD_scrat_ramp1:
        grade2_CaringForNewPet_0_1: 连接完所有的模块后, 按 "运行" 来启动你的程序。
      courseD_scrat_ramp2:
        courseC_maze_programming2_1: 这是工具箱。在那里你可以找到额外的模块来完成你的关卡。
      courseD_scrat_ramp3:
        courseC_maze_programming3_2: 可以将额外的模块拖动到工具箱中, 以将其丢弃。
      courseD_scrat_ramp4:
        courseC_maze_programming4_1: 这是你的模块限制。 它告诉你还可以使用多少个模块。
      courseD_scrat_ramp5:
        '': 这些模块上面没有数字。可以随便使用多少个！
      courseD_scrat_ramp6:
        courseD_maze_ramp6_1: 无论您在这里放置什么代码, 都会重复您说的次数, 然后继续运行该程序的其余部分。
      courseD_scrat_ramp7:
        courseD_maze_ramp6_1: 无论您在这里放置什么代码, 都会重复您说的次数, 然后继续运行该程序的其余部分。
      courseD_scrat_ramp8:
        courseD_maze_ramp7_1: 这是你的第一个挑战关卡！这些都是很难的，可能需要几次尝试。
      courseE_artist_functions1:
        courseD_artist_functions1_1: 让我们用这个模块来帮助创建第一个正方形。
      courseE_artist_functions2:
        courseD_artist_functions2_1: 当这些绿色的模块运行时，在函数里的所有代码都会运行。小艺术家在画出第一个正方形后，应该做什么？
      courseE_artist_functions2_2018:
        courseD_artist_functions2_1: 当这些绿色的模块运行时，在函数里的所有代码都会运行。小艺术家在画出第一个正方形后，应该做什么？
      courseE_artist_functions2_2019:
        courseD_artist_functions2_1: 当这些绿色的模块运行时，在函数里的所有代码都会运行。小艺术家在画出第一个正方形后，应该做什么？
      courseE_artist_functions8:
        courseD_artist_functions8_1: 用来创建函数的模块已经移动到了工具箱的这个标签里。
      courseE_artist_functions8a_2018:
        courseD_artist_functions8_1: 用来创建函数的模块已经移动到了工具箱的这个标签里。
      courseE_artist_functions8a_2019:
        courseD_artist_functions8_1: 用来创建函数的模块已经移动到了工具箱的这个标签里。
      courseE_artist_functions_challenge1:
        courseE_artist_functions_challenge1_callout1: 通过在底部添加更多代码来保持这个程序运行。
        courseE_artist_functions_challenge1_callout2: 如果你不喜欢这个设计, 把它变成你想要的任何东西!
      courseE_artist_functions_challenge1_2018:
        courseE_artist_functions_challenge1_callout1: 通过在底部添加更多代码来保持这个程序运行。
        courseE_artist_functions_challenge1_callout2: 如果你不喜欢这个设计, 把它变成你想要的任何东西!
      courseE_artist_functions_challenge1_2019:
        courseE_artist_functions_challenge1_callout1: 通过在底部添加更多代码来保持这个程序运行。
        courseE_artist_functions_challenge1_callout2: 如果你不喜欢这个设计, 把它变成你想要的任何东西!
      courseE_artist_functions_challenge2:
        courseE_artist_functions_challenge2_callout1: 通过在底部添加更多代码来保持这个程序运行。
        courseE_artist_functions_challenge2_callout2: 如果你不喜欢这个设计, 把它变成你想要的任何东西!
      courseE_artist_functions_challenge2_2018:
        courseE_artist_functions_challenge2_callout1: 通过在底部添加更多代码来保持这个程序运行。
        courseE_artist_functions_challenge2_callout2: 如果你不喜欢这个设计, 把它变成你想要的任何东西!
      courseE_artist_functions_challenge2_2019:
        courseE_artist_functions_challenge2_callout1: 通过在底部添加更多代码来保持这个程序运行。
        courseE_artist_functions_challenge2_callout2: 如果你不喜欢这个设计, 把它变成你想要的任何东西!
      courseE_artist_ramp8:
        courseE_artist_ramp8_1: 您可以更改此数字。
        courseE_artist_ramp8_2: 单击此处键入重复代码的次数。
      courseE_artist_ramp8_2:
        courseE_artist_ramp8_1: 您可以更改此数字。
        courseE_artist_ramp8_2: 单击此处键入重复代码的次数。
      courseE_farmer_functions1:
        courseE_farmer_functions1_2: 这个工具箱这次排放有点不同！点击不同的类别，看看有哪些模块。
      courseE_farmer_functions13_2018:
        courseE_farmer_functions1a_1: 蔬菜类型是未知的。它会在每次运行程序时都改变。
      courseE_farmer_functions13_2019:
        courseE_farmer_functions1a_1: 蔬菜类型是未知的。它会在每次运行程序时都改变。
      courseE_farmer_functions1_2018:
        courseE_farmer_functions1_2: 这个工具箱这次排放有点不同！点击不同的类别，看看有哪些模块。
      courseE_farmer_functions1_2019:
        courseE_farmer_functions1_2: 这个工具箱这次排放有点不同！点击不同的类别，看看有哪些模块。
      courseE_farmer_functions1a:
        courseE_farmer_functions1a_1: 蔬菜类型是未知的。它会在每次运行程序时都改变。
      courseE_farmer_functions1a_2018:
        courseE_farmer_functions1a_1: 蔬菜类型是未知的。它会在每次运行程序时都改变。
      courseE_farmer_functions1a_2019:
        courseE_farmer_functions1a_1: 蔬菜类型是未知的。它会在每次运行程序时都改变。
      courseE_farmer_functions2b:
        courseE_farmer_functions1a_1: 蔬菜类型是未知的。它会在每次运行程序时都改变。
      courseE_farmer_functions2b_2018:
        courseE_farmer_functions1a_1: 蔬菜类型是未知的。它会在每次运行程序时都改变。
      courseE_farmer_functions2b_2019:
        courseE_farmer_functions1a_1: 蔬菜类型是未知的。它会在每次运行程序时都改变。
      courseE_playLab_challenge1:
        courseC_PlayLab_events_challenge1_1: 这个模块允许你把演员移动到游戏空间的不同部分。
      courseE_playLab_scaffold3:
        courseE_playLab_scaffold3_1: 让演员到这个标志移动到下一层。
      courseF_artist_for1:
        courseF_artist_for1_1: 工具箱是"分类"模式，这会给代码留出更多的空间。`计数循环`在这里。
      courseF_artist_for1_2018:
        courseF_artist_for1_1: 工具箱是"分类"模式，这会给代码留出更多的空间。`计数循环`在这里。
      courseF_artist_for1_2019:
        courseF_artist_for1_1: 工具箱是"分类"模式，这会给代码留出更多的空间。`计数循环`在这里。
      courseF_artist_fwp1:
        courseF_artist_fwp1_1: 单击 "编辑" 按钮以更改函数内的代码。
      courseF_artist_fwp4:
        courseF_artist_fwp4_1: 要完成你的多边形，确保每次都转向360÷`sides`（边长）度。
      courseF_artist_fwp5:
        courseF_artist_fwp5_1: 你能在这里找到多边形函数。
      courseF_artist_variables3:
        courseF_artist_variables3_a: 用这个来设置变量`length`（长度）的值
      courseF_artist_variables3_2018:
        courseF_artist_variables3_a: 用这个来设置变量`length`（长度）的值
      courseF_artist_variables3_2019:
        courseF_artist_variables3_a: 用这个来设置变量`length`（长度）的值
      courseF_artist_variables6:
        courseF_artist_variables6_1: 当你需要改变同一个数字的多份副本时，变量会很有帮助。
      courseF_artist_variables6_2018:
        courseF_artist_variables6_1: 当你需要改变同一个数字的多份副本时，变量会很有帮助。
      courseF_artist_variables6_2019:
        courseF_artist_variables6_1: 当你需要改变同一个数字的多份副本时，变量会很有帮助。
      courseF_artist_variables6a:
        courseF_artist_variables6a_1: 当你需要改变同一个数字的多份副本时，变量会很有帮助。
      courseF_artist_variables6a_2018:
        courseF_artist_variables6a_1: 当你需要改变同一个数字的多份副本时，变量会很有帮助。
      courseF_artist_variables6a_2019:
        courseF_artist_variables6a_1: 当你需要改变同一个数字的多份副本时，变量会很有帮助。
      courseF_bee_conditionals2:
        courseF_bee_conditionals2_2: 工具箱现在处于分类模式。 所有您需要的区块都在这些标签下面!
      courseF_bee_conditionals5:
        courseF_bee_conditionals5_1: 当路径的长度改变时（在矩形的两侧！）使用这个块。
      courseF_bee_for4:
        courseF_bee_for4_1: 你会在这里发现 ' 计数循环 '!
      courseF_bee_for4_2018:
        courseF_bee_for4_1: 你会在这里发现 ' 计数循环 '!
      courseF_bee_for4_2019:
        courseF_bee_for4_1: 你会在这里发现 ' 计数循环 '!
      courseF_bee_for9:
        courseF_bee_for9_1: 你会在这里找到`math`（数学）模块。
      courseF_bee_for9_2018:
        courseF_bee_for9_1: 你会在这里找到`math`（数学）模块。
      courseF_bee_for9_2019:
        courseF_bee_for9_1: 你会在这里找到`math`（数学）模块。
      courseF_bee_functions2:
        courseF_bee_functions2_1: 此模块调用函数。点击这个“编辑”按钮看看里面是什么！
      courseF_bee_functions6:
        courseF_bee_functions6_1: 不要忘了在这里寻找更多的模块，可能有助于使这个更容易！
      courseF_bee_functions_challenge1:
        courseF_bee_functions_challenge1_1: 在这个函数中您应该放什么代码？
        courseF_bee_functions_challenge1_2: '"检查花蜜或蜂蜜" 函数可以在这里使用, 如果编辑它, 可以多次制作蜂蜜。'
      courseF_bee_fwp1:
        courseF_bee_fwp1_1: 你可以在这里找到`如果`语句。
      courseF_bee_fwp2:
        courseF_bee_fwp2_a: 调用函数的模块就住在这里。
      courseF_bee_fwp3:
        courseF_bee_fwp3_1: 同样的函数也能够像检查云一样，检查空地。
      courseF_bee_fwp4:
        courseF_bee_fwp4_1: 点击"编辑"按钮来为函数增加一个参数。
      courseF_bee_fwp_challenge2:
        courseF_bee_fwp_challenge2_callout1: 这个函数对玉米有很好的作用, 但是其他的蔬菜呢？
      courseF_bee_variables_1_2018:
        courseF_bee_functions_1_2018_1: 可以在下面找到你的变量！
      courseF_bee_variables_1_2019:
        courseF_bee_functions_1_2018_1: 可以在下面找到你的变量！
      courseF_playlab_variables1a:
        courseF_playlab_variables1a_1: 工具箱已经进行了分类，这样能够更容易找到你需要的模块。
      courseF_playlab_variables5c:
        courseF_playlab_variables5c_1: 你会发现你的变量模块在这里。
      courseF_playlab_variables6c:
        courseF_playlab_variables5c_1: 你会发现你的变量模块在这里。
      courseF_playlab_variables7c:
        courseF_playlab_variables7c_1: 在这里找到 "问" 模块!
      coursea_maze_ramp1_2018:
        grade2_CaringForNewPet_0_1: 连接完所有的模块后, 按 "运行" 来启动你的程序。
      coursea_maze_ramp1_2019:
        grade2_CaringForNewPet_0_1: 连接完所有的模块后, 按 "运行" 来启动你的程序。
      express_maze_debugging9_2019:
        express_maze_debugging9_2019_1: 模块可以从工具区拖到你的工作区。
      frozen circle function with parameter:
        frozen_circle_function_with_parameter_circle: 用“创建圆圈”模块，并且改变大小。
      frozen cross:
        repeat_blocks_1: "(1) 使用这个模块将工作区的灰色模块包围起来。"
        repeat_blocks_2: (2) 移动"重复"块到这里, 然后将灰色方块放到它里面.
      frozen cross rotate:
        replace_questions_degree: 使用下拉菜单来将"???"替换为数字
      frozen diamond:
        frozen_diamond_repeat: 用重复模块来创建这个形状。
      frozen diamond snowflake:
        frozen_diamond_repeat: 用重复模块来创建这个形状。
      frozen freeplay:
        snowflake_dropdown: 用下拉菜单来创建不一样的雪花！
      frozen line:
        run: 点击 "运行" 来尝试你的程序!
        move_elsa_forward: 拖动“向前移动”积木块，并把它拼在“当运行时”块下面，来让爱莎向前移动。
      frozen perpendicular:
        turn_elsa: 用“转”模块来让艾莎转方向。下拉菜单里的数字决定了艾莎转多少度。
      frozen snowflake branch:
        frozen_snowflake_branch: 用“创建一个雪花分支”模块
      frozen square iterative:
        frozen_create_square: 添加更多模块来创造一个正方形
      frozen square loop:
        replace_questions: 使用下拉菜单来将"???"替换为数字
      frozen square loop 3x:
        replace_questions: 使用下拉菜单来将"???"替换为数字
      frozen square snowflake:
        replace_questions: 使用下拉菜单来将"???"替换为数字
      grade5_artist_variables_triangles1:
        grade5_artist_variables_triangles1_1: 注意，模块可以用新的方法来输入数字了。这些`math`（数学）模块能被拖出来，并且四处移动了！
      grade5_artist_variables_triangles1_2018:
        grade5_artist_variables_triangles1_1: 注意，模块可以用新的方法来输入数字了。这些`math`（数学）模块能被拖出来，并且四处移动了！
      grade5_artist_variables_triangles1_2019:
        grade5_artist_variables_triangles1_1: 注意，模块可以用新的方法来输入数字了。这些`math`（数学）模块能被拖出来，并且四处移动了！
