---
es:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: "¡Bienvenido a tu primera hora de Code! Vamos a sumergirnos en tu primera
          experiencia de programación."
      2:
        image: notes/hoc1_2.jpg
        text: Usaremos Blockly, un lenguaje de programación visual en donde puedes
          arrastrar y soltar bloques para escribir código.
      3:
        image: notes/hoc1_3.jpg
        text: La mayoría del código se escribe a mano, en cambio Blockly es visual.
          Cada bloque corresponde a una línea de código "real".
      4:
        image: notes/hoc1_4.jpg
        text: Aprenderás los fundamentos de la informática, los conceptos que se utilizan
          en cualquier lugar, desde hacer aplicaciones hasta controlar el Mars Rover.
      5:
        image: notes/hoc1_5.jpg
        text: Un programa es un conjunto de instrucciones que tu ordenador sigue.
      6:
        image: notes/hoc1_6.jpg
        text: El objetivo de tu primer programa es guiar un Angry Bird a través de
          un laberinto para golpear al cerdo verde.
      7:
        image: notes/hoc1_7.jpg
        text: El lado izquierdo es el laberinto donde se ejecuta tu programa. Las
          instrucciones para cada rompecabezas están debajo del laberinto.
      8:
        image: notes/hoc1_8.jpg
        text: La barra de herramientas del medio contiene los comandos para el Angry
          Bird. Puedes usarlos para construir tu código.
      9:
        image: notes/hoc1_9.jpg
        text: A la derecha está tu área de trabajo donde podrás arrastrar los bloques
          del cuadro de herramientas para construir tu programa. Para eliminar un
          bloque, arrástralo a la papelera que se encuentra en la esquina.
      10:
        image: notes/hoc1_10.jpg
        text: Cada bloque es una instrucción. Si arrastras el bloque "avanzar" a tu
          espacio de trabajo y oprimes el botón "Ejecutar Programa", el pájaro se
          mueve una casilla en el laberinto.
      11:
        image: notes/hoc1_11.jpg
        text: Para hacer más de una acción, puedes arrastrar muchos bloques en tu
          espacio de trabajo y adjuntarlos juntos. El pájaro hará las acciones de
          arriba hacia abajo.
      12:
        image: notes/hoc1_12.jpg
        text: Si ejecutas un programa y quieres arreglarlo e intentar de nuevo, presiona
          el botón "Reiniciar".
      13:
        image: notes/hoc1_13.jpg
        text: "¡Vamos por esos cerdos!"
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: "¡Hola, me llamo JR! Cada equipo de coches de carrera necesita programadores
          informáticos para ganar. Ellos analizan datos del coche para hacerlo más
          rápido."
      2:
        image: notes/stage5_2.jpg
        text: En estos rompecabezas, serás un artista que dibuja una línea detrás
          de ellos dondequiera que vayan.
      3:
        image: notes/stage5_3.jpg
        text: Este bloque dice "avanzar 100 píxeles". Los píxeles son pequeños puntos
          en tu pantalla.
      4:
        image: notes/stage5_4.jpg
        text: Este bloque dice "girar a la derecha 90 grados". Esto girará a tu artista
          la misma cantidad como los bloques "girar" en los rompecabezas laberinto.
      5:
        image: notes/stage5_5.jpg
        text: Haga clic en la flecha en cualquiera de estos bloques para cambiar la
          cantidad que el artista se mueve hacia adelante o gira. Juega para familiarizarte
          con estos nuevos bloques.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: "¡Hola, soy Paola! En estos rompecabezas, tú eres una granjera que tiene
          que aplanar completamente su campo para iniciar la siembra de cultivos."
      2:
        image: notes/stage9_2.jpg
        text: Tienes que ayudarla a quitar todos los montones de tierra y rellenar
          todos los huecos.
      3:
        image: notes/stage9_3.jpg
        text: Los nuevos bloques eliminan una palada llena de tierra de un montón
          y rellenan con una palada de tierra un hueco.
      4:
        image: notes/stage9_4.jpg
        text: Los montones y los huecos son de diferente tamaño así que tienes que
          decirle al granjero cuántas palas debe usar.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hola, ¡Soy Katie! Una de las cosas más excitantes de la informática
          es que un programa informático puede ser interactivo.
      2:
        image: notes/flappy02.jpg
        text: Siempre que alguien hace click, pulsa o teclea en un ordenador o teléfono
          genera un EVENTO, y hay un código que decide qué ejecutar cuando ocurre
          un EVENTO.
      3:
        image: notes/flappy03.jpg
        text: 'Por ejemplo, tienes un CONTROLADOR DE EVENTOS que dice "cuando se hace
          clic con el ratón, reproduce un sonido" '
      4:
        image: notes/flappy04.jpg
        text: "¿Has oído del juego FlappyBird? ¡Mediante el uso de controladores de
          eventos, vamos a aprender a programar nuestra propia versión personalizada
          de FlappyBird!"
      5:
        image: notes/flappy05.jpg
        text: El código que escribirás consiste en arrastrar y soltar bloques que
          representan los comandos del ordenador. Sin que puedas verlo, cada uno de
          estos bloques está representado por un código real.
      6:
        image: notes/flappy06.jpg
        text: 'Si echas un vistazo en el espacio de trabajo, hay algunos bloques verdes
          que son rellenados por ti; son "los controladores de eventos" '
      7:
        image: notes/flappy07.jpg
        text: Si deseas que el pájaro ALETEE cuando haces CLIC con el ratón, puedes
          hacerlo uniendo el bloque "ALETEAR" al controlador de eventos adecuado,
          y ahora en tu juego cada vez que haces clic con el ratón, el pájaro aleteará.
      8:
        image: notes/flappy08.jpg
        text: En cada puzzle de esta actividad te presentamos nuevos tipos de eventos
          como bloques verdes en el espacio de trabajo, tu puedes decidir los bloques
          apropiados para agregar en respuesta a esos eventos.
      9:
        image: notes/flappy09.jpg
        text: Cuando ves un menú desplegable como éste, significa que puedes cambiar
          los ajustes, como qué sonido usar cuando flappy caiga al suelo.
      10:
        image: notes/flappy10.jpg
        text: En el puzzle final serás capaz de crear tu propio juego y compartirlo
          con tus amigos. ¡Que te diviertas!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: "¡Hola, soy Mark! Aprendamos acerca de las iteraciones. Usando iteraciones
          puedes decirle a un ordenador que repita una y otra vez cualquier conjunto
          de acciones, miles o incluso millones de veces."
      2:
        image: notes/hoc2_2.jpg
        text: En este puzzle, queremos que el pájaro se mueva hacia adelante 5 espacios
          para llegar al cerdo.
      3:
        image: notes/hoc2_3.jpg
        text: Podemos usar el nuevo bloque "repetir" para ayudarnos.
      4:
        image: notes/hoc2_4.jpg
        text: En lugar de arrastrar 5 bloques "avanzar"...
      5:
        image: notes/hoc2_5.jpg
        text: Podemos poner el bloque "avanzar" dentro del bloque "repetir" y escribir
          un número en el bloque para decirle cuántas veces repetirlo.
      6:
        image: notes/hoc2_6.jpg
        text: 'Y esto es importante: puedes poner más de un comando dentro de un bloque
          "repetir".'
      7:
        image: notes/hoc2_7.jpg
        text: ¡Disfruta usando tu nuevo bloque "repetir"!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Hola, soy Chris. Antes de unirme a los Miami Heat, fui a Georgia Tech
          a estudiar Ciencias de la Computación. Vamos a probar nuestro nuevo bloque,
          el bloque "repetir hasta".
      2:
        image: notes/hoc3_2.jpg
        text: "¿Qué sucedería si no supiéramos cuanto debería moverse el pájaro para
          llegar al cerdo?"
      3:
        image: notes/hoc3_3.jpg
        text: Si ponemos un bloque "avanzar" dentro del bloque "repetir hasta" , el
          pájaro avanzará HASTA que alcance al cerdo (o choque con una pared).
      4:
        image: notes/hoc3_4.jpg
        text: Y esto es importante; como antes, podemos poner múltiples bloques dentro
          del bloque "repetir hasta" y todo ello se repetirá.
    if:
      1:
        image: notes/hoc4_1.jpg
        text: '¡Hola, soy Bill! Aprendamos un nuevo concepto fundamental: las declaraciones
          "si". A través de ellas, los ordenadores toman decisiones.'
      2:
        image: notes/hoc4_2.jpg
        text: Tú mismo usas declaraciones "sí", "If", diariamente. Antes de salir
          afuera cada mañana, dices "sí", "IF" llueve, yo me pondría un chubasquero.
      3:
        image: notes/hoc4_3.jpg
        text: Podemos decirle al zombie que compruebe si hay un camino a la izquierda,
          y si encuentra un camino a la izquierda, podemos hacerlo girar en esa dirección.
      4:
        image: notes/hoc4_4.jpg
        text: Para escribir el código para esto, vamos a sacar nuestro bloque "si"
          y colocaremos un bloque "gira a la izquierda" en su interior.
      5:
        image: notes/hoc4_5.jpg
        text: Ahora, si ponemos un bloque "avanzar" encima de éste, y un bloque "repetir"
          alrededor de todo, cada vez que el zombie se mueva, él comprobará si hay
          un camino a la izquierda y girará. El comando "repetir" es crítico para
          comprobar si tiene que girar en cada paso.
      6:
        image: notes/hoc4_6.jpg
        text: Las declaraciones "si" son muy importantes en las Ciencias de la computación.
          Uno de los primeros programas que escribí era un juego de tic-tac-toe, y
          había una declaración "Si" que decía que si la otra persona está a punto
          de ganar, bloquea el lugar que le permite ganar.
      7:
        image: notes/hoc4_7.jpg
        text: ¡Diviértete cuando uses el bloque "if" (si)!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hola, mi nombre es Saloni. Yo uso la informática para ayudar a resolver
          problemas en salud y medicina. Vamos a aprender acerca del bloque "si si
          no". Se parece al bloque "si", pero tiene una parte extra al final que dice
          "si no".
      2:
        image: notes/hoc5_2.jpg
        text: Si pongo el bloque "avanzar" en el lugar donde dice "hacer" y un bloque
          "girar a la izquierda" donde dice "si no" el zombie va a elegir entre dos
          opciones. Si hay un camino delante, el zombie va a avanzar, y SI NO (si
          no hay un camino delante), el zombie va a girar hacia la izquierda.
      3:
        image: notes/hoc5_3.jpg
        text: Al igual que el bloque "si", podemos poner el bloque "si si no" dentro
          de un bloque "repetir" para que el zombie siga moviéndose y el bloque "si
          si no" seguirá comprobando si hay espacio para girar.
      4:
        image: notes/hoc5_4.jpg
        text: "¡Ahora llevemos a esos zombies a donde pertenecen!"
    if_else_scrat:
      1:
        text: Una instrucción si-si no es una decisión entre dos cosas. Vamos a ver
          cómo podemos utilizar una instrucción si-si no con nuestro amigo Scrat la
          ardilla.
      2:
        text: Este bloque se ve igual que el bloque "si", pero hay una pieza extra
          en la parte inferior que dice "sino". Si ponemos un bloque "avanzar" donde
          dice "hacer" y un bloque "girar a la izquierda" donde dice "sino", eso significa
          que la ardilla Scrat avanzará si hay un camino delante. Si no hay un camino
          a seguir, Scrat girará a la izquierda.
      3:
        text: Es tomar una decisión y realizar una de las dos acciones en base a esa
          decisión. Y al igual que los bloques "si", puedes poner bloques "si-si no"
          dentro de bloques "repetir".
      4:
        text: "¡Ahora vamos a ayudar a la ardilla Scrat a conseguir esa bellota!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: "¡Hola! soy Brina, una ingeniera de Instagram. Una función es un conjunto
          de líneas de código que quieres usar una y otra vez, por lo que en vez de
          escribir ese código cada vez, puedes usar solo un bloque."
      2:
        image: notes/stage13_2.jpg
        text: Vamos a aprender cómo definir funciones. Las definiciones de funciones
          tienen una estrella en la esquina. El nombre de la función está escrito
          en la línea superior.
      3:
        image: notes/stage13_3.jpg
        text: Los bloques que se encuentran dentro de la definición nos dicen qué
          hace. Por lo que esta definición de función se llama "rellena 5" y está
          formada por un bloque "repetir" y un bloque "rellenar".
      4:
        image: notes/stage13_4.jpg
        text: La definición se encuentra en el espacio de trabajo, pero nuestro agricultor
          no ejecutará la función hasta que arrastremos el bloque "llenar 5" desde
          la categoría de funciones.
      5:
        image: notes/stage13_5.jpg
        text: "¡Volvamos a hacer divertidas las funciones! "
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: '¡Hola! soy Makinde. Vamos a aprender acerca del bloque "mientras". '
      2:
        image: notes/stage9_6.jpg
        text: El "bloque mientras que (While)" hará todo lo que pones en su interior
          mientras la declaración en la parte superior es verdadera.
      3:
        image: notes/stage9_7.jpg
        text: Por ejemplo, si la granjera está sobre un montón, continuará eliminando
          una palada llena mientras (WHILE) quede tierra debajo de ella.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: "¡Hola! soy Trina y trabajo para Pixar. He trabajado en muchas películas,
          incluyendo Shrek."
      2:
        image: notes/stage11_2.jpg
        text: Ésta es nuestra nueva iteración "contador". Realizará acciones una y
          otra ves y puedes hacer que las acciones cambien un poco cada vez.
      3:
        image: notes/stage11_3.jpg
        text: En este ejemplo, nuestra iteración "contador" dice "cuenta con un contador
          de 50 a 90 de 10 en 10" y dentro de ella tenemos un bloque "dibuja un cuadrado".
          Arrastra el bloque "contador" desde la sección "Variables" al sitio "longitud".
      4:
        image: notes/stage11_4.jpg
        text: Esto significa que nuestro artista dibujará un cuadrado que tiene lados
          de 50 píxeles de longitud, luego agregará 10 para dibujar un cuadrado con
          lados de 60 píxeles de longitud, y después continuará agregando 10 para
          dibujar cuadrados hasta que alcance 90. Por lo que tendremos cuadrados de
          50, 60, 70, 80 y 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: "¡Hola! soy Janete y soy ingeniera en Zynga."
      2:
        image: notes/stage15_2.jpg
        text: "¿Qué pasa si queremos dibujar muchos triángulos y sus lados tienen
          que ser de longitudes diferentes?"
      3:
        image: notes/stage15_3.jpg
        text: Podemos escribir a mano ese código o podemos usar una función con parámetros.
      4:
        image: notes/stage15_4.jpg
        text: Para hacer esto, haz clic en la estrella azul sobre la definición de
          la función "dibuja un triángulo". Después arrastra "nombre de entrada" en
          el bloque "entrada".
      5:
        image: notes/stage15_5.jpg
        text: Después, si escribes "longitud" en el lugar que dice "x" y pulsas "Enter"
          crearás una entrada longitud para tu función.
      6:
        image: notes/stage15_6.jpg
        text: Después, haz clic en la estrella. Ahora, haz clic en la categoría de
          las variables y arrastra el bloque "longitud" dentro del bloque "avanzar"
          de la definición de tu función. Y arrastra hacia afuera el antiguo bloque
          número.
      7:
        image: notes/stage15_7.jpg
        text: Para usar tu función con parámetros, haz clic en la categoría funciones
          y arrastra tu función "dibuja un triángulo con longitud".
      8:
        image: notes/stage15_8.jpg
        text: Ahora puedes usar el bloque matemáticas para introducir diferentes números
          para dibujar triángulos de diferente tamaño.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: "¡Felicidades! Con el último rompecabezas resuelto, acabas de escribir
          un código que puede decirle a cualquier robot cómo encontrar su camino a
          través de un laberinto sin ramificación o túnel de cualquier longitud, sin
          importar si es un zombie, un pájaro, un Rover de Marte o incluso un coche
          sin conductor."
      2:
        image: notes/hoc6_2.jpg
        text: Los conceptos básicos que utilizaste son el corazón de cualquier programa
          o aplicación que encuentres. Aprendimos acerca de iteraciones, las declaraciones
          "repetir hasta", las declaraciones "si" y las "si si no".
      3:
        image: notes/hoc6_3.jpg
        text: Si te gustó tu primera hora de Code, visita code.org para continuar
          tu educación en Ciencias de la Computación. Una vez que completes nuestro
          curso de 20 horas, habrás dominado los fundamentos de la programación y
          podrás empezar a aprender cómo escribir aplicaciones para teléfonos, instrucciones
          para robots, juegos, o lo que quieras.
      4:
        image: notes/hoc6_4.jpg
        text: 'La tecnología está cambiando todo lo que hacemos y no importa si eres
          joven o algo más mayor: ¡la programación es divertida, es creativa, y cualquier
          persona puede aprenderla!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: "¡Mostrar notas estará disponible pronto!"
    frozen_intro:
      1:
        text: Hola, mi nombre es Lindsey. Modelo, actúo y escribo mis propias aplicaciones.
          Vamos a usar código para unirnos a Ana y Elsa en la exploración de la magia
          y la belleza del hielo.
      2:
        text: Vas a crear copos de nieve y patrones, mientras patinas sobre hielo,
          realizas un paisaje invernal que luego puedes compartir con tus amigos.
      3:
        text: En la próxima hora, vas a aprender lo básico para poder programar. La
          programación tradicional es generalmente en texto escrito, pero usaremos
          Blockly, que utiliza bloques visuales que puedes arrastrar y soltar para
          escribir programas. De esta forma, incluso aprenden las bases los estudiantes
          universitarios. Pero en realidad, todavía estás generando código.
      4:
        text: Un programa es un conjunto de instrucciones que le dice a un ordenador
          qué hacer. Vamos a construir un código o un programa que ayudará a Elsa
          a crear una línea simple. Más tarde, utilizaremos esto para crear patrones
          más complejos.
      5:
        text: Tu pantalla esta dividida en tres partes principales. Una a la izquierda,
          que es la superficie de hielo dónde tú vas a ejecutar tu programa. Las instrucciones
          de cada nivel están escritas debajo de la superficie.
      6:
        text: Esta zona media es la caja de herramientas, y cada uno de estos bloques
          es una acción que pueden hacer Elsa y Anna.
      7:
        text: El espacio en blanco a la derecha se conoce como "área de trabajo",
          y es ahí dónde crearemos nuestro programa. Para poder movernos alrededor
          de la superficie de hielo necesitarás utilizar el bloque de "Mover hacia
          adelante".
      8:
        text: 'Aquí, el bloque de "Moverse hacia adelante" dice: "Moverse hacia adelante
          100 píxeles". Cuando pulsamos el botón "Ejecutar/Run". ¿Qué ocurre? Elsa
          se mueve hacia adelante una cierta distancia en la pantalla. ¡De hecho,
          se mueve 100 píxeles! Los píxeles son básicamente cuadros muy pequeños que
          se encuentran en la pantalla del ordenador.'
      9:
        text: El otro bloque que tenemos en este rompecabezas dice "girar a la derecha
          de 90 grados". Y cuando usamos este bloque "girar a la derecha", hace girar
          a Elsa una cierta cantidad de grados. Puedes probar cuánto quieres hacer
          girar a Elsa. El ángulo se mide desde el camino delante de Elsa. Entonces,
          éste es un giro de 90 grados. Y éste es un giro de 120 grados.
      10:
        text: Recuerda, puedes cambiar el número de píxeles y grados haciendo clic
          en las flechas junto a ellos.
    frozen_loops:
      1:
        text: "¡Hola, soy Paola! Los ordenadores son muy buenos repitiendo acciones.
          Puedes contar hasta 10, 20 o 100. Pero un ordenador puede contar hasta 1
          mil millones o 1 billón. No se aburrirá y sólo le costará unos pocos segundos.
          Ya sea contando, dibujando, o haciendo cualquier otra cosa, los ordenadores
          pueden repetir acciones cientos o incluso miles de millones de veces."
      2:
        text: En programación, esto se llama bucle. Un bucle es la forma en la que
          repites una y otra vez tu código. Para el siguiente desafío, tu objetivo
          es ayudar a Anna a crear un cuadrado con el bloque "repetir".
      3:
        text: Cualquier bloque de código que pones dentro del bloque "repetir" se
          repetirá en secuencia, tantas veces como quieras.
      4:
        text: Para dibujar un cuadrado, puedes utilizar el bloque de "mover hacia
          adelante" y "girar a la derecha" 4 veces. Pero la forma más fácil es decirle
          al ordenador "mover hacia adelante" y "girar a la derecha 90 grados" una
          sola vez y luego repetir este par de acciones 4 veces. Para hacer eso, tienes
          que poner el bloque "mover hacia adelante" y el bloque "girar a la derecha"
          dentro de un bloque "repetir".
      5:
        text: Recuerda que puedes cambiar el número del bloque "repetir" por cualquier
          otro, y va a repetir lo que está dentro del bloque cuantas veces le hayas
          indicado.
    frozen_functions:
      1:
        text: Hola, soy Chris Bosh. Soy un jugador de baloncesto profesional, y programé
          en la Universidad.
      2:
        text: Uno de los conceptos más importantes en Ciencias de la Computación trata
          sobre cómo definir nuevos comandos. La mayoría de lenguajes de programación
          tienen solamente cerca de 100 palabras o comandos. Y en realidad, el arte
          y la magia está en definir tus propias nuevas palabras utilizando estos
          bloques de construcción.
      3:
        text: Una vez que has enseñado al ordenador cómo realizar una acción una vez,
          con esta secuencia de comandos, puedes ponerle un nombre para que la acción
          sea fácil de repetir más adelante. Definir tu propio comando y darle un
          nombre, se conoce como definir una función.
      4:
        text: Hola, soy Jess. Al programar con bloques, utilizarías funciones cuando
          hay un conjunto de acciones que te gustaría hacer muchas veces. Por ejemplo,
          has escrito código para crear un cuadrado.
      5:
        text: 'Puedes definir esto como una función llamada "crear un cuadrado" '
      6:
        text: Ahora tienes un nuevo bloque que puedes utilizar varias veces para crear
          múltiples cuadrados.
      7:
        text: Muchas figuras sencillas pueden utilizarse para crear patrones más complejos.
          En el siguiente desafío, el código que has escrito recientemente para hacer
          un círculo está disponible como una nueva función que puede hacer círculos
          de diferentes tamaños. ¿Lo puedes usar para ayudar a Elsa a crear patrones
          intrincados y hermosos en la nieve?
    playlab_intro:
      1:
        text: Vamos a crear juegos usando Play Lab. Los buenos juegos tienen una historia
          y cada historia tiene actores. Aprenderemos cómo hacer que nuestros actores
          sean como brujas, alienígenas, y animales que hablan, se mueven e interactúan
          con los demás. Al final de este tutorial, puedes crear un juego desde cero
          y compartirlo con tus amigos.
      2:
        text: La pantalla se divide en tres partes principales. A la izquierda, es
          el espacio de juego donde se ejecutará el programa. Las instrucciones para
          cada nivel están escritas abajo.
      3:
        text: La zona media es la caja de herramientas, y cada uno de estos bloques
          es un fragmento de código. El espacio en blanco a la derecha se llama el
          espacio de trabajo y es donde construiremos nuestro programa.
      4:
        text: Para empezar, necesitarás unir tus bloques al bloque naranja, llamado
          "cuando se ejecuta". Puedes unir múltiples bloques arrastrándolos hacia
          fuera hasta que veas la línea amarilla, y luego encajarán todos a la vez.
      5:
        text: En este primer rompecabezas, el actor es un pingüino y haremos que diga
          "¡Hola!" arrastrando el bloque "decir", uniéndolo al bloque "cuándo se ejecuta"
          y escribiendo dentro "Hola". También podemos hacer que el pingüino se mueva
          mediante los bloques mover a la derecha y mover a la izquierda. Una vez
          que tienes puestos tus bloques, presiona el botón ejecutar para ver lo que
          has programado.
      6:
        text: Comienza, y al final podrás crear tu propio juego con toda clase de
          jugadores, que pueden interactuar, volverse felices o tristes, aumentar
          la puntuación, o lanzar bolas de fuego, o incluso hacerse desaparecer unos
          a otros. Depende de ti y del juego que quieres hacer.
    playlab_events:
      1:
        text: Ahora vamos a aprender acerca de algo que todos los programadores de
          juegos usan todos los días. Se llaman eventos. Un evento le indica a tu
          programa que atienda cuando algo ocurra. Cuando eso sucede, se realiza una
          acción.
      2:
        text: Algunos ejemplos de eventos son esperar a un clic del ratón, un botón
          de flecha o pulsar en la pantalla.
      3:
        text: Aquí vamos a hacer que el robot espacial salude a los terrícolas cuando
          un jugador haga clic en él. Utilizaremos el bloque "cuando hace clic en"
          y uniremos el bloque "decir". Cuando el jugador hace clic en el robot espacial,
          todo lo que esté unido al bloque de evento "cuando hace clic en" se ejecutará.
          ¿Qué dice tu alienígena?
      4:
        text: También hay bloques "cuando se pulsa tecla de flecha". Si se unen con
          los bloques "mover", puedes empezar a mover tus actores hacia arriba, hacia
          abajo, a la izquierda o a la derecha. Paso a paso, tu juego se está volviendo
          más interactivo.
    playlab_repeat_forever:
      1:
        text: Éste es el bloque "repetir para siempre". Todo lo que haya dentro de
          este bloque se repetirá para siempre en el juego.
      2:
        text: Si queremos que un actor haga algo en varias ocasiones, sin que el jugador
          tenga que hacer nada, pondremos esos bloques dentro del bloque "repetir
          para siempre".
      3:
        text: En el siguiente rompecabezas, nuestro objetivo es ayudar a que el asistente
          patrulle continuamente los límites del reino, a la izquierda y a la derecha.
          Aprender cómo funciona el comando repetir te ahorrará mucho tiempo después,
          cuando construyas tu propio juego.
    C1_artist_intro:
      1:
        text: Éstos son tus bloques de dibujo. Usa el correcto para mover al artistas
          donde necesita ir para completar las lineas grises.
      2:
        text: Estos son bloques de tu salto. Cuando los usas, tu artista se mueve
          pero no dibuja, así que úsalos para saltar a la siguiente línea gris.
    C1_bee_level_intro:
      1:
        text: ¿No son las abejas geniales? En el siguiente grupo de rompecabezas.
          Tu objetivo es ayudar a la abeja a llegar a las flores, tomar el néctar
          de las flores y volar a la colmena para hacer miel. Vas a tener que usar
          los bloques "obtener néctar" y "hacer miel" para estos ejercicios.
      2:
        text: 'Cada flor tiene una cantidad de néctar diferente: 1, 2, 3 o más. Sabemos
          cuánto néctar está en las flores rojas, por el número pequeño en la esquina.
          Así que asegúrese de obtener todo el néctar de la flor antes de seguir adelante.
          Además, cada panal sólo puede contener cierta cantidad de miel: 1, 2, 3
          o más. Así que asegúrate de hacer tanta miel como la abeja pueda sostener.'
      3:
        text: Si eres capaz de obtener todo el néctar y toda la miel, tuviste éxito
          y pasas al siguiente nivel. De lo contrario, tienes que probar este acertijo
          otra vez. ¡Juega un rato mientras y ve lo que un programador siente al ser
          "abeja"!
    C1_bee_loops:
      1:
        text: Un bucle es una repetición de una actividad. Para entrar en una colmena
          a inspeccionar, miro un cuadro y luego lo pongo, luego repito esta actividad
          varias veces. Hacer un bucle, es hacer la misma actividad varias veces.
      2:
        text: En este nivel, queremos que la abeja colecte tres néctares de la flor.
          En lugar de utilizar tres "obtener néctar", vas a utilizar el bloque de
          repetición para obtener néctar tres veces. Pulsa «Ejecutar» y comprueba
          si es correcto. ¡Que agradable!
    C1_bigevent_unplugged:
      1:
        text: Esta lección se llama el gran evento. Es acerca de cómo podemos controlar
          nuestros programas y cambiar la forma en que un programa se ejecuta sobre
          la marcha usando eventos, como el de pulsar de un botón o hacer clic con
          el ratón.
      2:
        text: Para esta lección, serás controlado con un control remoto de papel.
          Es como un juego de vídeo real en vivo.
      3:
        text: Un evento es una acción que hace que algo pase. Es como cuando haces
          clic en el botón de un ratón y se carga un sitio web. Eso es un evento.
          Cuando tocas la pantalla de una tablet para deslizarla, también es un evento.
          Los eventos son una forma grandiosa de permitir al usuario manipular tu
          programa cuando quiera o lo necesite.
      4:
        text: Suceden cosas a las que todos respondemos. Sentimos hambre y nos vamos
          a la nevera. Escuchamos que el cartero viene y pone nuestro correo en el
          buzón y luego vamos a obtener nuestro correo. Lo mismo pasa con los eventos
          de pulsar un botón o mover una palanca de mando. Son algo que pasa que provocan
          que hagamos algo.
      5:
        text: En los videojuegos, hay un evento llamado "Actualizar" y pasa 30 o 60
          veces por segundo. Para los programadores de videojuegos eso es casi tan
          importante como un evento, los botones o la palanca de mando.
      6:
        text: Lo principal que buscamos es que pase el tick de "Actualizar". Entonces
          comprobamos el mando en el tick. Y decimos, "Oh, ¿alguien ha pulsado el
          botón en este marco? ¿Sí o no?" Sin eventos, el jugador no podría moverse,
          no podrías saltar, no serías capaz de controlar lo que pasa. El videojuego
          no sería capaz de animar nada.
    C1_building_foundation:
      1:
        text: En la escultura en arena tienes que saber que el fracaso es parte del
          programa. Pero si persistes, no conseguirás nada mejor y más emocionante.
          La persistencia es el nombre del juego. Quédate, te va a encantar.
      2:
        text: Esta lección se llama Construir un cimiento. En ella, vamos a trabajar
          en una tarea que será realmente difícil. Debes encontrar la manera de crear
          una estructura tan alta como uno de estos vasos y lo suficientemente fuerte
          como para soportar el peso de un libro.
      3:
        text: Podría haber momentos en los que nuestra creación no funcione. Podría
          haber momentos en los que nos frustremos y queramos dejarlo. Podría haber
          muchos de esos momentos. Pero si seguimos intentándolo, y lo hacemos lo
          mejor que podemos una y otra vez, entonces seguramente lo conseguiremos
          enseguida.
      4:
        text: Persistencia es mantenerse firme cuando lo que queremos realmente es
          renunciar. Si quieres crear algo nuevo y diferente, van a existir muchos
          fracasos en el camino.
      5:
        text: El truco para persistir es elegir seguir adelante y aprender de los
          fracasos en lugar de renunciar porque estás frustrado. La frustración sólo
          significa que hay algo maravilloso al doblar la esquina. Por lo que no renuncies
          antes de llegar a él. ¡Wooo!
    C1_getting_loopy:
      1:
        text: Hola, mi nombre es Miral Kotb y soy el creador de Iluminado. En mi trabajo,
          hay algo que usamos en ambas cosas, en bailes y en programación, ¡y eso
          son los bucles! Los bucles repiten acciones una y otra vez.
      2:
        text: Cuando repito algo muchas veces, como mis acciones para que el hula
          hoop siga girando, estoy haciendo un bucle de esa acción. Esto es un bucle.
          Esto es un bucle. Y esto es un bucle.
      3:
        text: Hoy vamos a dar una fiesta de baile. Haremos bucles con un nuevo baile.
          La iteración. Vamos a aprender acerca de los bucles utilizando un baile.
          Aprenderás un par de pasos fáciles y los repetirás una y otra vez para completar
          el baile.
      4:
        text: Estos son los pasos que necesitas aprender. Da las palmas. Pon tus manos
          detrás de tu cabeza. Pon tus manos en tu cintura. Sube la mano izquierda.
          Sube la mano derecha. Bastante fácil, ¿verdad? Descubrirás que puedes hacer
          más cortas las instrucciones poniendo algunos pasos de baile dentro de bucles.
      5:
        text: De hecho, utilizamos bucles en nuestros bailes. Los bailarines llevan
          ordenadores, todos en la misma red. Podría hacer un bucle poniendo las luces
          sobre los bailarines una y otra vez. El bucle podría tener una iteración
          donde digamos que quieres hacer un bucle sobre esos seis bailarines una
          y otra vez, y entonces dentro del bucle incrementar la velocidad de la luz,
          y todo eso está hecho mediante bucles. Los bucles son importantes en informática
          porque abrevian y simplifican nuestro trabajo.
    C1_happy_maps_unplugged:
      1:
        text: Esta lección se llama Mapas Felices. Hoy vamos a ayudar a nuestro pequeño
          amigo peludo Flurb a llegar a su fruta.
      2:
        text: Consigue que tu Flurb llegue a tu fruta. Para hacer eso necesitarás
          descubrir en qué dirección tiene que ir el Flurb, y dirigirla con las flechas.
          Para que el Flurb llegue a la manzana, ¿en qué dirección tiene que ir el
          Flurb? Línea para hacer que vaya arriba.
      3:
        text: Para llegar ahí, haces un círculo en la dirección que tiene que ir.
      4:
        text: Construye tu algoritmo pegando las flechas junto al mapa que estás intentando
          resolver. El segundo es igual, pero hacia abajo.
      5:
        text: Es como programar con papel. Y eso es todo!
    C1_maze_debugging:
      1:
        text: Depurar es encontrar y arreglar problemas. Hay muchas formas de depurar
          problemas. Una de las más fáciles es ir paso a paso hasta que encuentras
          que algo sale mal. Aquí estoy intentando hacer una voltereta hacia atrás
          sobre la barra de equilibrios, pero me caigo una y otra vez.
      2:
        text: Revisé cada parte paso a paso y me di cuenta de dónde estaba mi error.
          No estaba poniendo mis manos correctamente en la barra de equilibrios. Así
          que intenté otra voltereta hacia atrás sobre la barra con una nueva posición
          de manos y lo conseguí. Estaba realmente contenta de haber depurado mi voltereta
          hacia atrás.
      3:
        text: Para aprender a depurar, empezamos con un conjunto de bloques ya puestos
          en la fase. Como verás, esos bloques no te conducirán al objetivo. Necesitamos
          depurar la solución y arreglarla. ¿Qué falló? Te darás cuenta de que necesitabas
          seguir yendo al oeste una casilla más.
      4:
        text: Vamos a arreglarlo añadiendo otro bloque de ir al oeste y dando a ejecutar
          para ver si has acertado. ¡Sí, has acertado!
    C1_maze_intro_sequencing:
      1:
        text: Para este rompecabezas necesitarás llevar el pájaro al cerdo. Mira el
          rompecabezas y averigua que instrucciones necesita.
      2:
        text: Necesitas arrastrar los bloques desde la caja de herramientas al espacio
          de trabajo. Asegúrate de dejarlos debajo del bloque "cuando se ejecuta",
          y cuando creas que tienes la solución correcta, pulsa en "ejecutar" y observa
          cómo el pájaro va hacia el cerdo.
    C1_maze_loops:
      1:
        text: Una cosa que los ordenadores hacen muy bien es repetir instrucciones.
          Como persona, te aburrirías mucho si tuvieras que hacer lo mismo muchas
          veces seguidas. Pero un ordenador puede hacer lo mismo millones o incluso
          miles de millones de veces sin aburrirse, y llevarlo a cabo perfectamente.
      2:
        text: Por ejemplo, si yo quisiera felicitar a todo el mundo en Facebook por
          su cumpleaños enviándoles un mensaje de correo electrónico, me podría llevar
          más de un siglo poder escribir todos esos mensajes a todo el mundo. Pero
          con unas pocas líneas de código puedo hacer un sistema que envíe un mensaje
          de correo electrónico a todo el mundo en Facebook, felicitándoles por su
          cumpleaños.
      3:
        text: Para llevar el pájaro al cerdo en este nivel, en lugar de arrastrar
          tres bloques norte al espacio de trabajo, utilizarás el bloque "repetir".
          Arrastra el bloque "repetir" al espacio de trabajo e introduce el número
          3. Entonces arrastra el bloque "mover al norte" dentro de bloque "repetir"
          y pulsa "ejecutar" para ver si has acertado. Felicitaciones, ¡lo conseguiste!
    C1_moveitmoveit_unplugged:
      1:
        text: Esta lección se llama muévelo, muévelo. Juntos vamos a escribir un programa
          para llevar a nuestros amigos desde la salida con la brújula hasta la meta,
          con la cara sonriente.
      2:
        text: Pero la cara sonriente está boca abajo, y sólo una persona sabe como
          llegar hasta ella. Vamos a empezar este programa.
      3:
        text: Un programa es un algoritmo que ha sido codificado en algo que se puede
          ejecutar en una máquina. La mayoría de nosotros piensa en un programa como
          algo que escribimos para un ordenador. Los programas son muy buenos para
          eso pero también son útiles en otros lugares. Puedes hacer tu propio programa
          de juego o incluso un robot para hacer las cosas por ti.
    C1_going_places_safely:
      1:
        text: Me llamo Jeremiah. Hola, tengo siete años. Me encanta jugar con el ordenador
          de mamá, pero siempre le pido permiso primero. "Mami, ¿puedo usar el ordenador?
          ¡Claro que sí, cielo!"
      2:
        text: Me encanta el ordenador de mamá porque me puedo meter en Internet. Internet
          es un poco como tu barrio. Puedes visitar sitios interesantes, puedes hablar
          con tu familia y amigos, y puedes aprender muchas cosas nuevas.
      3:
        text: Ayer, visité un parque zoológico que está cerca de mi casa. Vi una cebra
          bebé. Le tomé una fotografía y cambié el color de sus rayas, luego le puse
          un sombrero y la agregué a mi colección de animales locos. ¡Impresionante!
          Más tarde, fui a un lugar lejano. Visité Kenia. Es un país en África. Allí
          viven muchas cebras.
      4:
        text: A veces, en Internet, conozco y hablo con las personas, como con mi
          abuela que vive en otro Estado. ¡Hola abuela! Ella me está haciendo galletas
          que me enviará para mi cumpleaños. "¡Delicioso, ojalá que Internet tuviera
          smellrama!" Yo puedo hablar con diferentes personas en Internet, como con
          mi prima, pero solamente hablo con la gente que conozco.
      5:
        text: Lo que más me gusta de Internet es que puedo encontrar juegos divertidos.
          ¡Puntos! También me gusta dibujar y crear cosas nuevas y compartirlas con
          mis amigos. ¡Estupendo! Algunas veces visito sitios web donde aprendo cosas
          nuevas pero siempre me quedo en sitios ideales para mí. ¡Guau, dinosaurios!
      6:
        text: 'Internet es un lugar muy divertido. Pero al igual que cruzando la calle
          en tu barrio, también debes tener cuidado cuando estés en línea. Aquí hay
          tres reglas para recordar. Regla número 1: siempre pregunta a tus padres
          primero. Regla número 2: sólo habla con gente que conozcas. Regla número
          3: Visita lugares que son adecuados para ti.'
      7:
        text: Guau, ¡eso fue divertido! Hora de la cena. Ahora estoy cerrando sesión.
          No puedo esperar para iniciar sesión otra vez para ver qué puedo visitar
          a continuación.
    C1_pair_programming:
      1:
        text: Hoy vamos a aprender sobre la programación en par. En la programación
          en par se trabaja como un equipo. ¿Por qué dos personas usan un ordenador?
          Porque dos cabezas son mejores que una. En la Programación en par, tú y
          tu pareja van a sentarse juntos en un ordenador y ambos van a trabajar en
          el mismo proyecto.
      2:
        text: En la programación en par, una persona es el conductor y la otra persona
          es el navegador, al igual que conducir un coche. El conductor se sienta
          en el ordenador, y está utilizando el teclado y el ratón o la pantalla táctil
          y el control de las principales acciones del ordenador. La otra persona
          es el navegador. El navegador ayuda al conductor contestando sus preguntas
          y señalando posibles problemas o errores.
      3:
        text: La comunicación es la clave para el éxito en la programación en par.
          Sin insultos, debes ser respetuoso, no seas un navegador mandón, porque
          a nadie le gusta un conductor en el asiento trasero. Tú y tu compañero deben
          hablarse siempre. El conductor puede explicar lo que está haciendo. Y el
          navegador puede ayudar sugiriendo qué hacer a continuación.
      4:
        text: El navegador debe estar pensando en el panorama y el conductor se centra
          en los detalles. Ambos roles son importantes. Programación en par es trabajar
          juntos como un equipo.
    C1_planting_seed:
      1:
        text: Esta lección se llama plantar una semilla y va a ayudarnos a entender
          los algoritmos. Los algoritmos son instrucciones específicas que explican
          el orden en el que se hace algo. Incluso las tareas cotidianas, cosas como
          desayunar o el cepillado de los dientes son algoritmos que requieren pequeños
          pasos para hacer un trabajo.
      2:
        text: Los ordenadores pueden ser muy inteligentes pero sólo pueden entender
          si les dices exactamente lo que quieres paso a paso. Lo bueno de los algoritmos
          es que si sigues las instrucciones en orden, puedes hacer algo que antes
          no sabías cómo hacer. Es como una receta.
      3:
        text: Hoy vamos a sembrar nuestras propias semillas utilizando un algoritmo.
          Crea tus propios algoritmos para apartar las fotos. Seleccione las imágenes
          que muestran los pasos para plantar una semilla y organiza las fotografías
          en el orden correcto.
      4:
        text: Ahora, es el momento para ver si el algoritmo funciona. Sigue atentamente
          los pasos en el algoritmo. ¿Están en el orden correcto? ¿Has tenido éxito
          en plantar una semilla siguiendo el algoritmo? ¡Es como la programación
          con imágenes!
      5:
        text: Cuando queremos hacer el chocolate, hay muchos pasos importantes en
          este proceso y cada uno de estos pasos tiene un conjunto de pequeños pasos,
          y hay diferentes recetas o algoritmos, dependiendo del gusto que queremos
          darle al chocolate. Cada paso es importante, incluso los pequeños, así que
          sin un solo paso, no se puede completar el resto de ellos. Es muy importante
          crear algoritmos que otros puedan entender. Es por ello que cada paso tiene
          que ser escrito para que el resultado sea el mismo, sin importar quién lo
          realice.
    C1_playlab_storytelling:
      1:
        text: Es el momento de ser creativo y utilizar tus habilidades de codificación
          para contar una historia. Tu historia contará con actores y tu serás capaz
          de hacer que estos actores hablen e interactúen con los demás. Comienza
          a pensar qué tipo de historia quieres contar.
      2:
        text: El gato siempre ha tenido miedo del perro, y ¿qué pasa si el perro quiere
          ser amable con el gato? El bloque "cuando se ejecuta" inicia todo. El bloque
          "mover" moverá tu personaje y el bloque "decir" hará que tu personaje diga
          todo lo que escribes.
      3:
        text: Éste es un bloque "cuando los actores colisionan" que puedes enlazar
          con otros bloques
      4:
        text: Estaba haciendo que el perro viniera y dijera "Hola", pero cuando el
          gato se asustó se fue. "Ahhh". Si hubiera más tiempo, habría sido un final
          feliz. ¡El final!
    C1_spelling_bee_intro:
      1:
        text: Éste es el nivel de ortografía. Utiliza las piezas del rompecabezas
          para mover a la abeja. Al moverse, recogerá las letras para deletrear la
          palabra.
      2:
        text: Intenta deletrear la palabra que se da en el cuadro debajo de la etapa.
          ¡Pero cuidado con la abeja! Si te mueves en la dirección equivocada se añaden
          cartas que no quieres.
    C1_zuck_repeat_loop:
      1:
        text: Una cosa que los ordenadores hacen muy bien es repetir instrucciones.
          Como persona, te aburrirías mucho si tuvieras que hacer lo mismo muchas
          veces seguidas. Pero un ordenador puede hacer lo mismo millones o incluso
          miles de millones de veces sin aburrirse, y llevarlo a cabo perfectamente.
      2:
        text: Por ejemplo, si yo quisiera felicitar a todo el mundo en Facebook por
          su cumpleaños enviándoles un mensaje de correo electrónico, me podría llevar
          más de un siglo poder escribir todos esos mensajes a todo el mundo. Pero
          con unas pocas líneas de código puedo hacer un sistema que envíe un mensaje
          de correo electrónico a todo el mundo en Facebook, felicitándoles por su
          cumpleaños.
      3:
        text: En este ejemplo, debes conseguir mover el pájaro para poder agarrar
          al cerdo. Ahora vamos a poder usar el bloque Repetir para poder hacer esto
          más fácil. Lo puedes hacer dándole al ordenador la instrucción moverse adelante
          5 veces para que el pájaro avance un paso cada vez hacia el cerdo, o puedes
          directamente indicarle al ordenador que se mueva adelante una vez y decirle
          que lo repita 5 veces, y hará la misma cosa.
      4:
        text: Para hacer esto, arrastra el comando mover hacia adelante y colócalo
          dentro del bloque repetir. Puedes hacer clic en él y decirle cuántas veces
          repetir el bloque para indicarle cuántos pasos quieres mover hacia adelante.
      5:
        text: Una cosa más, puedes insertar tantos comandos como quieras dentro del
          bloque de repetición. Así que en este ejemplo, está diciendo seguir adelante
          y girar a la izquierda, que va a hacer cinco veces. ¡Que te diviertas!
    C2_artist_intro:
      1:
        text: Ni siquiera calificas para la carrera si no tienes personas que son
          competentes en ciencias de la computación, debido a tantos datos que recogen
          los coches y la necesidad de tener personas que puedan escribir programas
          y encuentren la manera de construir rendimiento.
      2:
        text: En estos rompecabezas, tú serás un artista que usa un lápiz para dibujar
          distintas formas. Donde vaya tu artista, dibujará una linea detrás de él.
      3:
        text: Para moverte por lienzos, necesitarás usar el bloque de mover hacia
          delante. Aquí el bloque de mover dice que te muevas 100 píxeles hacia delante.
          Cuando pulsamos ejecutar, ¿qué pasa? El artista se mueve hacia delante una
          cierta cantidad de píxeles y esa cantidad son 100px. Los píxeles son básicamente
          diminutos recuadros en la pantalla de tu ordenador.
      4:
        text: El otro bloque que tenemos en este rompecabezas dice Girar a la derecha
          90 grados. Y cuando lo arrastramos, eso hace que nuestro artista gire una
          cierta cantidad. Así que puedes jugar con cuanto quieres que tu artista
          gire. Éste es un giro de 90 grados.
      5:
        text: Y éste es un giro de 120 grados. Y recuerda, tú puedes cambiar estos
          valores haciendo clic en las flechas junto a los números de píxeles y grados.
          ¡Disfruta dibujando con tu artista!
    C2_bee_conditionals:
      1:
        text: Éste es un bloque condicional. Éste dice SI hay un néctar O miel que
          sea menor, igual o mayor que un número, ENTONCES haz algo.
      2:
        text: Esto es útil cuando no sabemos cuanto néctar o miel obtener, como vemos
          aquí con este signo de interrogación.
      3:
        text: En este ejemplo, vamos a determinar SI la flor purpura tiene un néctar
          mayor que 0 y obtiene néctar. Eso le dice a nuestra abeja que continúe obteniendo
          néctar mientra haya. ¡Ta-dah!
    C2_binary_bracelets:
      1:
        text: Ésta es la lección de brazaletes binarios. ¡Vamos a codificar nuestras
          iniciales en un brazalete que podemos usar y mostrar a todos nuestros amigos!
      2:
        text: El binario es una forma de representar información utilizando sólo dos
          opciones. A veces, la gente piensa solo en unos y ceros. Pero tú puedes
          representar el binario con combinaciones de encendido ó apagado, arriba
          ó abajo, dentro ó fuera o cualquier combinación de posibilidades.
      3:
        text: Hola, soy Orion y programo robots aquí en Play-im. Todos los cerebros
          de los ordenadores y de los robots, en su nivel más fundamental, son compuertas
          electrónicas. Cuando una compuerta está abierta la electricidad puede fluir,
          y cuando ésta está cerrada, la electricidad no fluye.
      4:
        text: Un ejemplo "binario" en el robot, son los ojos. Los ojos del robot son
          LED y éstas son luces que están encendidas o apagadas. Es un sistema binario
          de un estado u otro. Podemos utilizar las luces para representar números
          binarios. Si tenemos un conjunto de robots, podemos decir que el primer
          robot es la primera posición y el segundo robot es la segunda posición,
          el tercer robot es la tercera y así sucesivamente. Así es cómo se representa
          un número binario. Los robots crean los ojos (leds) binarios y así cuentan
          por usted.
    C2_conditionals_with_cards:
      1:
        text: Esta lección se llama condicionales con cartas. Cada día tomas decisiones
          basadas en lo que ves o en lo que oyes.
      2:
        text: Quiero caminar por el parque pero primero debo decidir si debo llevar
          un paraguas o no. Entonces, miro por la ventana. Si está nublado, llevaré
          mi paraguas. Si no, llevaré mis gafas de sol. Creo que debería llevar mi
          paraguas. Lo que veo y escucho determina mi decisión sobre qué llevar al
          parque.
      3:
        text: Condicionales se utilizan en juegos también. Hoy vamos a practicar usando
          condicionales con un juego de cartas. En este juego, la carta que saque
          determina qué harán mis amigos. Si yo saco un siete, todos aplauden. Si
          no, todos dicen "awww". ¡Vamos a intentarlo! "Awww" "Aplausos"
      4:
        text: Te apuesto a que puedes hacer juegos mucho más entretenidos usando condicionales.
          ¡Inténtalo! Las condicionales son lo que hacen que los ordenadores parezcan
          inteligentes. Un programa informático que incluye condicionales puede reaccionar
          frente al usuario y cambiar su curso de acción.
      5:
        text: Pikirkan tentang permainan kesukaan kamu. Apakah kamu mendapatkan poin
          karena melakukan suatu hal dibandingkan melakukan hal lainnya? Ini terjadi
          karena komputer menggunakan persyaratan. Inilah cara komputer membuat keputusan.
          Bagaimana kalau kamu mendapatkan sepuluh poin jika kamu mengenai target.
          Lain daripada itu, kamu kehilangan tiga. Apabila kamu tahu cara persyaratan
          bekerja, kamu bisa menciptakan berbagai permainan yang menarik.
    C2_artist_debugging:
      1:
        text: Ya tenemos algunos bloques en nuestro espacio de trabajo. Sin embargo,
          algo está mal.
      2:
        text: Vamos a depurar éste código ralentizando la velocidad y observando a
          medida que avanza bloque a bloque.
      3:
        text: "¡Oh, ahí está el problema! Los bigotes del gato tienen 75 píxeles de
          largo, no 25."
    C2_bee_debugging:
      1:
        text: "¿Alguna vez has escuchado lo que es depurar un programa? Ésta es la
          manera en la que te das cuenta qué es lo que no está funcionando. Cuando
          depuras un código, identificas y arreglas errores."
      2:
        text: Aquí estamos dando algunos bloques ya en nuestro lugar de trabajo. Vamos
          a utilizar el botón de paso para caminar a través de los bloques, paso a
          paso, a ver si ésta es la solución correcta y dónde necesitemos reparar.
      3:
        text: "¡Al parecer ahí está nuestro problema! Necesitamos un bloque más de
          mover adelante. El botón de paso nos ayuda a depurar nuestro problema al
          identificar dónde está el error y cómo podemos arreglarlo."
    C2_digital_footprint:
      1:
        text: "¡En tu cabeza sostienes tu sombrero y tu inteligencia te dirá dónde
          estás y te hará pensar en el zoológico y asentir Hola a ti y a ti! ¡Usa
          la cabeza cuando estás en línea para mantener lo que es tuyo dentro de tu
          mente y saber cómo estar a salvo, cómo darle a tu vida un espacio privado!
          De tu cabeza hasta los dedos de tu pie, pausa, piensa en ello. ¡Desde tus
          pies hasta tu nariz, pausa y piensa en línea!"
      2:
        text: Usa tu corazón para crecer y crecer y date a ti mismo un brillo saludable
          y para hacer un San Valentín, dile a alguien que tú seras mío! Usa tu corazón
          cuando estás en línea, siente lo que es correcto y siempre sé amable, y
          muestra a tus amigos respeto, para ser justo y agradable en Internet. Desde
          tu cabeza a los dedos de tus pies, pausa, piensa en ello. ¡Desde tus pies
          hasta tu nariz, pausa y piensa en línea!
      3:
        text: Utiliza tus brazos para abrazar a tu mascota, mantén tu ropa sin que
          se moje y lleva tus mangas favoritas, y ayúdate a volar y hacerte creer.
          Utiliza tus brazos cuando estés en línea, tomate tiempo de descanso y equilibra
          el tiempo, deja tu tecnología y encuentra un árbol para trepar. Desde tu
          cabeza hasta los dedos de tus pies, pausa, piensa en ello. ¡Desde tus pies
          hasta tu nariz, pausa y piensa en línea!
      4:
        text: Utiliza tus tripas para almacenar tus alimentos y escucha su rugido
          estado de ánimo, haz descansar tu vientre y siente el gas de la soda. Utiliza
          tus instintos cuando estás en línea, para saber, observar ciertos signos
          y dejar que te guíe el camino y te diga cuándo no está bien. Desde tu cabeza
          hasta los dedos de tus pies, pausa, piensa en ello. ¡Desde tus pies hasta
          tu nariz, pausa y piensa en línea!
      5:
        text: Entonces, piensa con tu cabeza y siente con tu corazón, equilibra tus
          brazos, escucha tus presentimiento, en línea. Utiliza tus piernas para correr
          y patear, salta y rebota en un palo saltarín, y baila alrededor de la cuadra
          y salta sobre tus calcetines malolientes. Utiliza tus piernas cuando estás
          en línea, para enfrentar a los peleadores que cruzan la línea, y recuerda
          pararte alto, sé agradable a las criaturas grandes y pequeñas.
      6:
        text: Desde tu cabeza hasta los dedos de tus pies, pausa, piensa en ello.
          ¡Desde tus pies hasta tu nariz, pausa y piensa conectado! Así que piensa
          con la cabeza, y siente con el corazón, equilíbrate con tus brazos, escucha
          a tus entrañas, levántate con tus piernas. Desde tu cabeza hasta los dedos
          de tus pies, pausa, piensa en ello. ¡Desde tus pies hasta tu nariz, pausa
          y piensa conectado!
    C2_digital_footprint_v2:
      1:
        text: Siempre que te conectas, dejas una huella que puede ser buscada, copiada
          y transmitida, y es permanente. ¿Qué clase de huella digital estás dejando?
          ¿Qué clase de huella digital quieres dejar?
    C2_graph_paper:
      1:
        text: Esta lección se llama "Papel gráfico Programación" y se trata de algoritmos.
          Hoy vamos a aprender cómo escribir programas que muestran entre sí cómo
          recrear simples imágenes en blanco y negro, usando sólo flechas dibujadas
          a mano.
      2:
        text: Un algoritmo es una lista de instrucciones necesarias para completar
          una tarea. Vamos a seguir este set de instrucciones para hacer el tazón.
          Los algoritmos son muy útiles cuando necesitas que otra personas entienda
          como hacer algo.
      3:
        text: Si estás escribiendo un algoritmo para un ordenador, tienes que dividir
          el problema en pequeños pasos. Por lo tanto, termina esta fila y luego pasa
          a la siguiente, luego a la siguiente, y estarás listo.
      4:
        text: Yo utilizo algoritmos en mi trabajo. Si yo escribo todos los pasos puedo
          recrear esa misma pieza otra vez, o puedo enseñar a alguien que lo haga.
          Pon el vaso en el horno, fúndelo, y sigue el resto de las instrucciones
          para hacer el tazón. Algoritmos te darán una ruta para conseguir que se
          haga algo.
    C2_artist_loops:
      1:
        text: Aquí vamos a utilizar el bloque de repetición que nos ayuda a ahorrar
          pasos cuando estemos programando nuestro artista. Ya tenemos algunos bloques
          fuera en nuestro escenario pero están ahí sólo para que comencemos.
      2:
        text: Para girar los bloques cuatro veces y dibujar un cuadro, sólo arrastra
          el bloque de repetir y pon el bloques de avanzar y gira a la derecha dentro
          del bloque de repetición. Cuando damos clic en ejecutar, el artista repetirá
          los pasos cuatro veces para completar el cuadrado.
    C2_bee_loops:
      1:
        text: Un bucle es una repetición de una actividad. Para entrar en una colmena
          a inspeccionar, miro un cuadro y luego lo pongo, luego repito esta actividad
          varias veces. Hacer un bucle, es hacer la misma actividad varias veces.
      2:
        text: Éste es el bloque de repetición. Lo que pongas dentro el bloque de repetición
          repetirá las acciones el número de veces que le digas. Por ejemplo, en éste
          nivel, haremos que algo que arrastre hacia fuera, mueva hacia adelante y
          obtenga el néctar tres veces, simplemente lo arrastre hacia fuera cada uno
          y repetiremos la acción tres veces. ¡Ha sido fácil!
    C2_maze_intro:
      1:
        text: Normalmente, la programación es en texto pero nosotros usaremos Blockly
          que usa bloques visuales que puedes arrastrar y soltar para escribir programas.
          Bajo la cubierta, sigues creando el código. Para empezar, vamos a crear
          el código para el programa que ayudará a éste Angry Bird a moverse entre
          el laberinto para llegar a los cerdos malvados que robaron sus huevos.
      2:
        text: Blockly se divide en tres partes principales. A la izquierda está el
          laberinto de los pájaros, donde tu programa se ejecutará. Las instrucciones
          de cada nivel se escriben debajo del laberinto. Esta zona media es la caja
          de herramientas y cada uno de estos bloques es un comando que el pájaro
          puede entender. El espacio blanco en la derecha es el espacio de trabajo
          y es donde compilaremos nuestro programa.
      3:
        text: Si arrastro un bloque "mover" al área de trabajo y presiono "Ejecutar",
          ¿qué sucede? El pájaro se mueve hacia adelante un bloque del terreno. ¿Y
          si quiero que el pájaro haga algo más después de moverse adelante? Puedo
          añadir otro bloque al programa.
      4:
        text: Voy a elegir el bloque "girar a la derecha" y a arrastrarlo debajo de
          mi bloque de mover hasta que aparezca la flecha amarilla. Después la voy
          a soltar y los dos bloques se quedarán pegados. Cuando presione "Ejecutar"
          otra vez, el pájaro realizará los comandos que están apilados en nuestra
          área de trabajo en orden desde arriba hacia abajo.
      5:
        text: Si deseas eliminar un bloque, solo sácalo de la pila y arrástralo a
          la papelera. Después de ejecutar el programa, siempre puedes apretar el
          botón de reinicio para que el pájaro vuelva al punto de inicio. ¡Ahora vamos
          por esos cerdos!
    C2_paper_airplanes:
      1:
        text: Esta lição é designada de Real Life Algorithms. Algorismos descrevem
          coisas que as pessoas fazem todos os dias. Receitas de bolachas e instruções
          de como construir uma casa para passáros são ambos algorismos usados no
          quotidiano.
      2:
        text: Hoy vamos a realizar, crear y probar un algoritmo para un avión de papel.
          Pero primero, necesitamos romper este gran proyecto en pasos más pequeños
          y fáciles de seguir. Para hacer un avión de papel, necesitamos decidir qué
          pasos tomar y en qué orden realizarlos.
      3:
        text: Crearás tu algoritmo primero cortando aparte las fotos. Luego, seleccionarás
          las 6 fotos que muestran los pasos necesarios para hacer un avión de papel
          y arregla esas fotos en el orden correcto. Después de tener todo en orden,
          cambiarás algoritmos con otro equipo de estudiantes para probar el algoritmo
          y ver si el algoritmo funciona. Es súper importante un algoritmo bien diseñado
          para hacer el mejor aeroplano de papel.
      4:
        text: Cuando queremos hacer chocolate, hay muchos pasos importantes para ese
          proceso y cada uno de esos pasos tiene un conjunto de pequeños pasos. Y
          hay diferentes recetas o algoritmos, dependiendo de cómo queremos que sepa
          el chocolate. Cada paso es importante, incluso los pequeños. Por lo que,
          sin un solo paso, el resto de ellos no podrán ser completados. Es muy importante
          crear algoritmos que otros puedan entender. Es por ello que cada paso tiene
          que ser escrito para que el resultado sea el mismo, sin importar quién lo
          hace.
    C2_playlab_createstory:
      1:
        text: Hasta ahora, has hecho una animación o una historia que hace exactamente
          lo mismo cada vez que ejecutas el programa. Ahora puedes hacer un juego
          interactivo con el que de verdad puedes jugar.
      2:
        text: Están el bloque "cuando flecha" y el bloque "mover actor". Puedes poner
          estos bloques juntos para mover a los actores con las teclas de flecha.
    C2_relay_programming:
      1:
        text: Hoy vamos hacer programación retransmitida. Es todo sobre programación
          bajo presión y depurando los errores que a veces ocurren cuando se trabaja
          muy rápido o en equipos. Utilizaremos papel gráfico programando para simular
          la codificación y utilizaremos carreras retransmitiendo para simular que
          se tiene una fecha límite.
      2:
        text: En programación retransmitida, equipos estarán compitiendo para terminar
          un programa de papel gráfico. Tienes que comprobar el trabajo de tu compañero
          de equipo, o depurarlo, arreglarlo si hay un error, agregar tu flecha y
          ejecutarlo nuevamente, además de etiquetar a tu compañero.
      3:
        text: Programadores utilizan mucho la depuración para encontrar y solucionar
          problemas en su código o sus algoritmos. Hay muchas maneras de depurar problemas.
          Uno de lo más fáciles es seguir paso a paso hasta encontrar algo que sale
          mal, y luego arreglarlo.
      4:
        text: Aquí, estoy tratando de hacer un salto hacia atrás, pero me sigo cayendo.
          Veo cada parte, paso a paso y trato de darme cuenta dónde estaba mi error.
          Mi entrenador me demostró que no estaba poniendo mis manos sobre la viga
          correctamente. Así que probé otro salto hacia atrás en la viga con mi nueva
          posición de la mano, ¡y me quedé! Realmente me alegró de haber depurado
          mi salto hacia atrás. ¡Hemos notado que la Depuración es encontrar y resolver
          problemas! ¡Estupendo, buen trabajo!
    C2_zuck_repeat_loop:
      1:
        text: Una cosa que los ordenadores hacen muy bien es repetir instrucciones.
          Como persona, te aburrirías mucho si tuvieras que hacer lo mismo muchas
          veces seguidas. Pero un ordenador puede hacer lo mismo millones o incluso
          miles de millones de veces sin aburrirse, y llevarlo a cabo perfectamente.
      2:
        text: Así que por ejemplo, si yo quisiera desearle a todos un feliz cumpleaños
          en Facebook enviándoles un correo electrónico, tardaría más de un siglo
          para realmente escribir todos los mensajes de correo electrónico a todos.
          Pero con sólo unas pocas líneas de código, puedo tener un sistema que envía
          un correo electrónico a todos en Facebook deseándoles un feliz cumpleaños.
          Entonces, eso es lo que un ciclo es, y por qué son valiosos, y es algo que
          los ordenadores pueden hacer muy bien.
      3:
        text: En este ejemplo tu objetivo va a ser el de mover el pájaro para obtener
          el cerdo. Ahora vamos a ser capaces de utilizar el bloque "repetir" para
          poder hacer esto muy fácilmente. Tú puedes hacer esto dando al equipo un
          comando de "seguir adelante" cinco veces en orden para avanzar el pájaro
          un paso a la vez hacia el cerdo.
      4:
        text: O simplemente puedes indicarle al ordenador "avanzar" una vez y luego
          indicarle "repetir" 5 veces, y hará lo mismo. Por lo que para hacer esto,
          arrastra el comando "avanzar", y ponlo dentro del bloque "repetir". Puedes
          hacer clic en él y decirle cuántas veces deseas que repita el bloque para
          indicarle cuántos pasos quieres que avance.
      5:
        text: 'Una cosa más: puedes poner todos los comandos que desees dentro de
          un bloque "repetir". En este ejemplo, le estás diciendo que se mueva adelante
          y gire a la izquierda, y lo hará cinco veces. ¡Bien, buen trabajo y a divertirse!'
    C3_artist_functions:
      1:
        text: Una de las cosas más importantes de programar ordenadores es que una
          vez que ya le dijiste al ordenador cómo realizar una acción, puedes darle
          un nuevo nombre a esa función. Le das un nombre y así la podrás llamar.
          En realidad, es como ampliar el idioma.
      2:
        text: En el programa que construimos, aprendimos a dibujar un cuadrado moviéndose
          y girando cuatro veces. Podemos tomar esa función y darle un nombre, dibujar
          un cuadrado, para cada vez que queramos hacerlo, simplemente decimos dibuja
          un cuadrado y volverá a invocar esa función, ese código. Se hará para nosotros.
          Hemos añadido ese concepto a nuestro lenguaje de programación.
    C3_artist_intro:
      1:
        text: Ni siquiera calificas para la carrera si no tienes personas que son
          competentes en ciencias de la computación, debido a tantos datos que recogen
          los coches y la necesidad de tener personas que puedan escribir programas
          y encuentren la manera de construir rendimiento.
      2:
        text: En estos rompecabezas, tú serás un artista que usa un lápiz para dibujar
          distintas formas. Donde vaya tu artista, dibujará una linea detrás de él.
      3:
        text: Para moverte por lienzos, necesitarás usar el bloque de mover hacia
          delante. Aquí el bloque de mover dice que te muevas 100 píxeles hacia delante.
          Cuando pulsamos ejecutar, ¿qué pasa? El artista se mueve hacia delante una
          cierta cantidad de píxeles y esa cantidad son 100px. Los píxeles son básicamente
          diminutos recuadros en la pantalla de tu ordenador.
      4:
        text: El otro bloque que tenemos en este rompecabezas dice Girar a la derecha
          90 grados. Y cuando lo arrastramos, eso hace que nuestro artista gire una
          cierta cantidad. Así que puedes jugar con cuanto quieres que tu artista
          gire. Éste es un giro de 90 grados.
      5:
        text: Y éste es un giro de 120 grados. Y recuerda, tú puedes cambiar estos
          valores haciendo clic en las flechas junto a los números de píxeles y grados.
          ¡Disfruta dibujando con tu artista!
    C3_artist_nested_loops:
      1:
        text: Cuando pones un ciclo dentro de otro ciclo, nosotros llamamos eso un
          ciclo anidado. Por ejemplo, aquí nosotros ya damos el código para dibujar
          un triángulo con lados de 100 píxeles de longitud usando el bloque de repetición
          tres veces, una para cada lado del triángulo.
      2:
        text: Pero queremos dibujar seis triángulos. Para hacer eso, vamos a tomar
          ese bucle y lo pondremos dentro de otro bloque repetir. ¡Genial!, ¿No?
    C3_bee_conditionals:
      1:
        text: Éste es un bloque condicional. Éste dice SI hay un néctar O miel que
          sea menor, igual o mayor que un número, ENTONCES haz algo.
      2:
        text: Esto es útil cuando no sabemos cuanto néctar o miel obtener, como vemos
          aquí con este signo de interrogación.
      3:
        text: En este ejemplo, vamos a determinar SI la flor purpura tiene un néctar
          mayor que 0 y obtiene néctar. Eso le dice a nuestra abeja que continúe obteniendo
          néctar mientra haya. ¡Ta-dah!
    C3_bee_debugging:
      1:
        text: "¿Alguna vez has escuchado lo que es depurar un programa? Ésta es la
          manera en la que te das cuenta qué es lo que no está funcionando. Cuando
          depuras un código, identificas y arreglas errores."
      2:
        text: Aquí estamos dando algunos bloques ya en nuestro lugar de trabajo. Vamos
          a utilizar el botón de paso para caminar a través de los bloques, paso a
          paso, a ver si ésta es la solución correcta y dónde necesitemos reparar.
      3:
        text: "¡Al parecer ahí está nuestro problema! Necesitamos un bloque más de
          mover adelante. El botón de paso nos ayuda a depurar nuestro problema al
          identificar dónde está el error y cómo podemos arreglarlo."
    C3_bee_functions:
      1:
        text: Uno de los conceptos más importantes en Ciencias de la computación es
          cómo definir nuevos comandos, cómo agregar tus propias palabras a un lenguaje
          para el ordenador. La mayoría de los lenguajes de programación tienen sólo
          alrededor de cien palabras o comandos. El arte y la magia está definiendo
          tus propias nuevas palabras fuera de bloques de construcción.
      2:
        text: Hacemos esto todo el tiempo en el deporte. Por ejemplo, en baloncesto,
          tú empiezas aprendiendo cómo regatear el balón, cómo hacer un lanzamiento,
          cómo hacer un rebote. Una vez que aprendimos estos movimientos muy básicos,
          aprendes nuevos movimientos y juntas estos bloques, como agarra y roda o
          da y muévete. Entonces, puedes ir desde allí a hacer juegos más complejos.
          Una vez que aprendiste ese juego y le das un nombre, todos en el equipo
          saben cómo hacerlo.
      3:
        text: Del mismo modo, una vez que le enseñaste al ordenador cómo realizar
          una acción y usar estas secuencias de comandos, puedes darle un nombre a
          esa acción para que sea fácil repetirla más tarde. Cuando defines tu propio
          comando y le das un nombre, a eso se le llama función. Ahora vamos a usar
          funciones para ayudar a la abeja.
      4:
        text: En este ejemplo, nuestra función se llama obtén 2 néctares, este bloque
          verde de aquí. Sabemos qué es lo que hace obtén 2 néctares, viendo la caja
          gris que es la definición de función. Si vemos en el interior, va a obtener
          2 néctares y luego va a obtener 2 néctares otra vez. Entonces siempre mira
          lo que está dentro de la caja gris para que sepas qué es lo que pueden hacer
          estas funciones de bloques verdes.
    C3_bee_nested_loops:
      1:
        text: Ahora vamos a utilizar ciclos anidados con la abeja. Estamos dando un
          código de arranque que le dice a la abeja avanzar, obtener néctar tres veces
          y luego girar a la derecha. Tomemos la pieza completa de código y anidémosla
          dentro de otro bloque de repetir y establezcamos repetir tres veces. ¡Hecho!
    C3_bounce:
      1:
        text: Vas a crear tu propio juego de rebotar la pelota que podrás compartir
          con tus amigos. Genial, ¿No?
      2:
        text: Para empezar, tenemos que enlazar los controles de paleta a las flechas
          de nuestro teclado.
      3:
        text: Podemos hacer esto mediante la vinculación cuando el bloque de flecha
          izquierda mueve el bloque izquierdo y cuando el bloque de la flecha derecha
          mueve el bloque derecho. ¡Pruébalo y estarás programando tu propio juego
          al instante!
    C3_computational_thinking:
      1:
        text: Esta lección es sobre pensamiento computacional. A veces, aprender un
          nuevo juego puede ser difícil, ¿verdad? Al principio puede parecer muy confuso
          y a veces, no hay nadie allí para enseñarte las reglas, entonces tienes
          que averiguarlo tú mismo.
      2:
        text: La buena noticia es que puedes mejorar averiguando cosas por tú cuenta
          cuando sabes algunos trucos del pensamiento. Estos trucos son formas únicas
          que identifican y resuelven problemas. En esta lección, aprenderás cuatro
          formas de trucos y las practicarás con tus amigos para encontrar las reglas
          para un juego.
      3:
        text: Cuando desglosas un gran problema en secciones pequeñas, estás utilizando
          tu cerebro para descomponer el problema. Una vez que hemos descompuesto
          el problema en varios problemas más pequeños, podemos pasar a nuestro siguiente
          truco, que se llama coincidencia de patrón.
      4:
        text: Esto es cuando buscamos semejanzas entre las cosas. Una vez que encuentre
          las cosas que son iguales, puedo averiguar qué cosas son diferentes. Cuando
          elimino esas diferencias, a eso se le llama abstracción.
      5:
        text: Tras darme cuenta de los pasos para resolver un problema, puedo poner
          esos pasos en un orden específico llamado algoritmo para que cualquiera
          pueda utilizar mis instrucciones para resolver el problema. Vamos a utilizar
          estos cuatro pasos para encontrar la manera de jugar el juego sin reglas.
          Al final del juego, podrás jugar algo que se ve así.
    C3_crowdsourcing:
      1:
        text: Esta lección se llama crowdsourcing. En esta lección vamos a usar una
          baraja de cartas para aprender cuánto mas fácil algunas cosas pueden ser
          si se hace en grupos en lugar de intentar hacerlo todo solo. Así que ve
          por algunos amigos y haz algo impresionante. Crowdsourcing es conseguir
          ayuda de un grupo grande de personas para terminar algo más rápido.
      2:
        text: En ciencias de la computación, utilizamos crowdsourcing todo el tiempo.
          Miles de aficionados y profesionales enlazan sus equipos conjuntamente para
          buscar a través de miles de millones de datos. Buscando cosas como el siguiente
          número primo de Mersenne, o incluso posibles comunicaciones de extraterrestres.
      3:
        text: Cuando ves una película, cada segundo de la película son 24 cuadros
          individuales, llamamos a esos fotogramas. Por lo que cada una de esas fotos
          debe ser creado y renderizado, y se junta todo. Mi equipo y yo, somos todos
          desarrolladores de software. Todos trabajamos juntos para crear una pieza
          de software que crea una imagen, crea la imagen final que ves en pantalla.
          Es una herramienta que artistas y otros desarrolladores pueden utilizar
          como parte de su trabajo en equipo y su proceso para ser capaces de crear
          las imágenes que quieren en pantalla.
      4:
        text: Por ejemplo, en buscando a Nemo, cuando Crush y Squirt y todos sus amigos
          están volando a través de la corriente Australiana del Este. Estás viendo
          imágenes de agua que fluyen, estás viendo los colores en la parte posterior
          de la tortuga, estás viendo los lados de los peces. Todas esas cosas se
          generan a través de programas de matemáticas y programas de computación
          que nosotros escribimos, luego se los damos al artista y los toma para crear
          la imagen final y retocarla para que se vea hermosa y divertida.
    C3_dice_race:
      1:
        text: Esta lección se llama carrera de dados. A casi todos les gusta jugar
          juegos de ordenador. ¿Alguna vez has pensado cómo los programas informáticos
          convierten los pasos de un juego en un programa? El primer paso en la creación
          de juegos de ordenador y la resolución de cualquier problema es el pensamiento
          y la planificación.
      2:
        text: El paso del pensamiento en la resolución de problemas produce un algoritmo,
          el cual es un plan de paso a paso para solucionar un problema o terminar
          una tarea. Tú crearás un algoritmo para un juego de carreras de dados. Luego,
          les pedirás a tus amigos que prueben tu plan para ver si ellos pueden seguir
          los pasos para jugar al juego. Después de que el programador está seguro
          de que los pasos son correctos, es tiempo de traducir el algoritmo a un
          programa con un lenguaje que el ordenador pueda entender.
      3:
        text: Casi todo lo que hacemos todos los días requiere de un algoritmo, una
          lista de pasos que puedes seguir para terminar una tarea. Piensa en la rutina
          de estar listo para la escuela o la planificación de un día divertido con
          tus amigos o la preparación de un bocado. Para completar cualquiera de estas
          tareas, tendrás que desglosarlo en pasos más pequeños y algunas veces los
          pasos deben ser en un orden específico.
      4:
        text: Piensa en hacer un sándwich. No importa qué ingrediente saques primero
          de la alacena. Pero tú no puedes poner mantequilla de cacahuete hasta que
          abras el tarro. Los ordenadores necesitan algoritmos y programas que le
          muestren cómo hacer incluso simples cosas que podemos hacer sin pensar.
      5:
        text: Un algoritmo es el pensamiento detrás de lo que debe ocurrir mientras
          que el programa son las instrucciones reales dadas al ordenador para que
          algo ocurra. Un algoritmo tiene que traducirse en un programa antes de que
          un ordenador pueda ejecutarlo. Desglosando una tarea en pasos llamados algoritmos
          a veces es difícil. Pero como cualquier nueva habilidad, se hace cada vez
          más fácil con la práctica.
    C3_farmer_while:
      1:
        text: Mientras que los ciclos son muy similares a lo que haces en la vida
          cotidiana. Imagina que estás lavando tu coche, estarás lavando hasta que
          quede limpio. Mientras que no esté limpio, seguirás lavando. Estás evaluando
          estas cosas todo el tiempo.
      2:
        text: Tenemos un nuevo ciclo para ayudar a tu granjero. Se llama mientras-bloque.
          Es muy simple en realidad. Mientras que la declaración de la parte superior
          sea verdadera, haz algo. Por ejemplo, si hay mucha tierra, mueve una pala
          completa. Sigue adelante y dale una oportunidad a tu granjero.
    C3_functional_suncatchers:
      1:
        text: Esta lección es funcional para vitrales. Crearás bonitos vitrales usando
          funciones. Hay varios pasos en la creación de uno de estos vitrales. Algunos
          de los pasos los tienes que repetir varias veces.
      2:
        text: El primer paso para simplificar el proceso de hacer un vitral es averiguar
          lo que tenemos que repetir una y otra vez. Podemos agrupar estos pasos en
          lo que llamamos función.
      3:
        text: Pero para crear un hermoso vitral, se necesita que seguir pasos exactos.
          A veces queremos ser creativos y cambiar el color de los vidrios que estamos
          utilizando. Podemos hacer cada vitral único si utilizamos diferentes coloreados
          de vidrios.
      4:
        text: Tu vitral será únicamente tuyo cuando aprendas a pensar en los vidrios
          como las variables de una palabra que significa un marcador de la información
          que puede modificarse. ¡Diviértete creando hermosos vitrales usando funciones
          y variables!
    C3_internet:
      1:
        text: Esta lección es acerca de Internet. Internet es un lugar muy ocupado
          y similar a este camino concurrido. Se enfocan los mensajes, como los coches,
          a durante el camino, para llegar a sus destinos. Los mensajes se mueven
          muy rápidamente vía Internet.
      2:
        text: Actuando de la manera que funciona Internet, comprenderás qué sucede
          cuando usas Internet. Aprenderás cómo los mensajes van de tu ordenador a
          un sitio web favorito o de un amigo a un buzón de correo electrónico. Al
          igual que es más fácil navegar por caminos ocupados cuando conoces los caminos
          y puedes leer las señales, navegar por Internet no es tan complicado cuando
          sabes lo que está pasando detrás de escena.
      3:
        text: El envío de mensajes por Internet es como enviar mensajes por correo
          pero con algunas diferencias. Estoy aquí en Google.com. La dirección IP
          para este sitio web es este número. Puedes pensar en una dirección IP como
          la dirección del remitente en el correo. Imaginemos que quiero enviar un
          mensaje por correo a alguien en la oficina de allí. ¿Aparece la URL y la
          dirección IP en esa puerta? He escrito este mensaje y apreté enviar.
      4:
        text: A diferencia de los servicios postales, lo primero que ocurre es que
          Internet separa el mensaje en partes más pequeñas, para que se pueda enviar
          más fácilmente. Estas partes pequeñas se llaman paquetes. Cada paquete del
          mensaje se entrega al destino uno a la vez. Estos paquetes son reunidos
          en el orden correcto para que el receptor pueda leer el mensaje correctamente.
          Por supuesto, hay muchas cosas más que aprender sobre cómo funciona Internet,
          pero esto es un gran comienzo. Estás camino a convertirte en un experto
          usuario de Internet! ¡No olvides decirle a tu familia y amigos lo que has
          aprendido!
      5:
        text: Mi nombre es Amanda Camp y soy ingeniera de software en Google. Trabajo
          en un equipo que trabaja en el servidor final que almacena perfiles y contactos.
          En mi trabajo, pensamos mucho en cómo se pueden enviar contactos a otros
          dispositivos, como el teléfono. La mayoría de la gente tiene muchos contactos,
          es posible que tú tengas unos 1000 contactos, y no queremos enviar todos
          los contactos a la vez a tu teléfono, ya que es demasiado extenso el mensaje.
          Similar a la manera en que Internet separa mensajes extensos en paquetes,
          utilizamos un concepto llamado paginación, en donde solo mandaremos a tu
          teléfono 100 contactos a la vez y dejaremos que tu teléfono nos responda
          y pregunte por los próximos 100.
      6:
        text: Lo más emocionante del software es el hecho de que puede afectar a todo
          el mundo. Primero aprendí a programar, cuando tenía unos diecinueve años.
          Creo que ya era un estudiante de segundo año o novato en la Universidad.
          El primer programa que recuerdo haber escrito fue algo que convertía Celsius
          a Fahrenheit. Me gusta programar porque me gusta ayudar a la gente. Puedo
          escribir programas en Google para ayudar a las personas en todo el mundo
          y eso es realmente alucinante y emocionante.
    C3_maze_conditionals:
      1:
        text: Las personas toman decisiones todos los días. Por ejemplo, antes de
          salir al exterior, tienes una instrucción "Si..." que dice si está lloviendo,
          entonces necesito ponerme mi chaqueta. Los ordenadores son sorprendentes
          una vez que se definen ese tipo de declaraciones, ya que pueden ejecutar
          dichas sentencias de una forma efectiva y a gran velocidad. Un programa
          informático es realmente un poco de matemáticas y algunas declaraciones
          en donde se toman decisiones.
      2:
        text: El bloque "Si..." ayuda a los zombies a tomar una decisión. Comprueba
          algo. Por ejemplo, vamos a utilizar el bloque que dice que hay un camino
          a la izquierda y poner un comando de doblar a la izquierda en su interior.
          Estamos diciéndoles a los zombis que controlen su entorno, que vean si hay
          un camino a la izquierda y de ser así, que doblen.
      3:
        text: Luego usamos el bloque Avanzar dentro de esta repetición para continuar
          moviéndonos hacia adelante mientras queramos. Entonces, cuando hay un giro,
          el bloque "Si..." te indicará que hagas el giro a la izquierda. Se puede
          ver que si lo hacemos, si tomamos el giro a la izquierda y en otro caso
          seguimos adelante, alcanzamos nuestro objetivo.
      4:
        text: Es un ejemplo el uso de una sentencia "Si" que es en realidad un concepto
          fundamental en programación. Una de las primeras cosas que aprendí fue cómo
          escribir un programa que juega tic-tac-toe. Tuve sentencias "Si" para decir,
          ok, "Si" la otra persona está a punto de ganar, adelántate y bloquea ese
          lugar. Diviértete aprendiendo a utilizar las sentencias "Si", es un concepto
          clave.
    C3_maze_level_4:
      1:
        text: En este ejemplo, su meta es llevarle al zombie el girasol. Podríamos
          utilizar cinco bloques de movimiento hacia Adelante o podríamos indicarle
          al ordenador que avance 5 veces en un bloque de repetición.
      2:
        text: Esto ahorra tiempo y lo hace mucho más fácil. Para usarlo, sólo hay
          que poner el bloque de avance dentro del bloque de repetición. Pulsa ejecutar
          y el zombie avanzará cinco veces para el delicioso girasol.
    C3_playlab_create_game:
      1:
        text: Hasta ahora, has hecho una animación o una historia que hace exactamente
          lo mismo cada vez que ejecutas el programa. Ahora puedes hacer un juego
          interactivo con el que de verdad puedes jugar.
      2:
        text: Están el bloque "cuando flecha" y el bloque "mover actor". Puedes poner
          estos bloques juntos para mover a los actores con las teclas de flecha.
    C3_songwriting_with_parameters:
      1:
        text: Esta es la lección de escritura de la canción. La música es como un
          programa de ordenador. Las notas escritas y las palabras le dicen al cantante
          exactamente qué hacer. Algunas partes de la música se utilizan una y otra
          vez.
      2:
        text: Llamamos a esto el coro. En un programa de ordenador, las partes del
          programa que se utilizan una y otra vez se llaman funciones. Cuando lees
          la letra de la canción y dice la palabra "Coro", ¿Cantas la palabra "Coro"?
          No, nos fijamos en la parte superior de la página para ver qué palabras
          forman el coro.
      3:
        text: En esta lección, aprenderás una canción un poco tonta llamada conejito
          foo foo. La canción tiene un coro que cantarás varias veces, una y otra
          vez. Una función es un pedazo de código que puedes llamar y usar una y otra
          vez. Hace la programación más fácil y eficiente para que no tengas que escribir
          una y otra vez los pasos de tu función. ¡Puede escribirlo solo una vez!
    C4_bee_conditional:
      1:
        text: Éste es el bloque condicional. Indica "Si" estás en la flor o el panal,
          entonces haz algo. Esto es útil cuando no sabemos la cantidad de miel o
          néctar para conseguir, como vemos aquí con este signo de interrogación.
      2:
        text: En este ejemplo, vamos a decir, "Si" es una flor, obtén todo el néctar
          y luego usa otro para decir, Si es un panal de abejas, haz miel. ¡Ta-dah!
    C4_conditionals:
      1:
        text: Tenemos un nuevo bloque llamado el bloque Si/de oto modo. Es una sentencia
          condicional, al igual que Si, el bloque que has usado en el rompecabezas
          antes. Pero ahora hay una nueva pieza en la parte inferior que dice otra
          cosa. El bloque Si/de otro modo permite a la abeja tomar una decisión entre
          las dos acciones. Si la abeja está en la flor, la abeja hará el conjunto
          de acciones que pusiste en la primera parte en donde se indica hacer. Si
          la abeja no está en la flor, la abeja hará el conjunto de acciones que pusiste
          en la ranura donde dice otra cosa.
      2:
        text: Las sentencias "Si" son cómo los ordenadores, son capaces de tomar decisiones.
          Los seres humanos definen condiciones para los ordenadores que indican que
          "Si" el ordenador se presenta con cierta situación, se debe hacer esto.
          De otro modo, sólo significa lo contrario, haz eso. La parte superior de
          nuestro bloque Si/de otro modo dice Si en la flor. Pero la parte superior
          de nuestro bloque podría decir otras cosas, como Si el néctar es igual a
          2, o si existe un camino adelante, nuestro bloque se comportará de la misma
          manera. Si la sentencia Si en la parte superior es verdadera, hará el primer
          conjunto de acciones. Pero si la sentencia en la parte superior es falsa,
          hará el segundo conjunto de acciones.
    C4_for_loops:
      1:
        text: Cuando utilizas un bloque de repetición para un ciclo en tu código,
          ¿cómo sabe el ordenador cuando fue repetido las veces suficientes? El bloque
          de repetición actualmente esconde en realidad una pieza más sofisticada
          de código llamado desde un ciclo que cuenta de un valor inicial hasta un
          valor final de un incremento específico.
      2:
        text: Por ejemplo, una repetición de bloque tres cuenta del 1 al 3 por 1.
          Cada vez que cuenta, se ejecuta el código dentro del ciclo. El ciclo sabe
          cuántas veces se ha ejecutado mediante el uso de una variable contador,
          la cual se establece en el valor inicial al principio del ciclo y tiene
          el incremento agregado a él cada vez que el ciclo se ejecuta. Si la variable
          contador es mayor que el valor final, el ciclo deja de ejecutarse.
      3:
        text: La ventaja de utilizar un verdadero desde ciclo en lugar del bloque
          de repetición es que realmente puedes ver la variable contador y utilizarla
          en tu ciclo. Por ejemplo, si tengo una serie de flores y la primera de ellas
          tiene un néctar, la segunda tiene dos néctares y la tercera tiene tres,
          puedo usar el desde ciclo para decirle a la abeja que coloque 'contador'
          de néctares cada vez, que sería uno en la primera flor, dos en la segunda
          y tres en la tercera.
      4:
        text: También en desde ciclo, puedes incrementar el contador por un número
          distinto de uno cada vez. Potencialmente, puedes contar por 2s, 4s o incluso
          a través de una cantidad que cambia cada vez.
    C4_for_loops_bee:
      1:
        text: Cuando utilizas un bloque de repetición para un ciclo en tu código,
          ¿cómo sabe el ordenador cuando fue repetido las veces suficientes? El bloque
          de repetición actualmente esconde en realidad una pieza más sofisticada
          de código llamado desde un ciclo que cuenta de un valor inicial hasta un
          valor final de un incremento específico.
      2:
        text: Por ejemplo, una repetición de bloque tres cuenta del 1 al 3 por 1.
          Cada vez que cuenta, se ejecuta el código dentro del ciclo. El ciclo sabe
          cuántas veces se ha ejecutado mediante el uso de una variable contador,
          la cual se establece en el valor inicial al principio del ciclo y tiene
          el incremento agregado a él cada vez que el ciclo se ejecuta. Si la variable
          contador es mayor que el valor final, el ciclo deja de ejecutarse.
      3:
        text: La ventaja de utilizar un verdadero desde ciclo en lugar del bloque
          de repetición es que realmente puedes ver la variable contador y utilizarla
          en tu ciclo. Por ejemplo, si tengo una serie de flores y la primera de ellas
          tiene un néctar, la segunda tiene dos néctares y la tercera tiene tres,
          puedo usar el desde ciclo para decirle a la abeja que coloque 'contador'
          de néctares cada vez, que sería uno en la primera flor, dos en la segunda
          y tres en la tercera.
      4:
        text: También en desde ciclo, puedes incrementar el contador por un número
          distinto de uno cada vez. Potencialmente, puedes contar por 2s, 4s o incluso
          a través de una cantidad que cambia cada vez.
    C4_for_loops_no_bee:
      1:
        text: Cuando utilizas un bloque de repetición para un ciclo en tu código,
          ¿cómo sabe el ordenador cuando fue repetido las veces suficientes? El bloque
          de repetición actualmente esconde en realidad una pieza más sofisticada
          de código llamado desde un ciclo que cuenta de un valor inicial hasta un
          valor final de un incremento específico.
      2:
        text: Por ejemplo, un bloque de repetición de tres cuentas de 1 al 3 por 1.
          Cada vez que cuenta, se ejecuta el código dentro del ciclo. El desde ciclo
          sabe cuántas veces se ha ejecutado mediante el uso de una variable contador
          en la que se establece el valor inicial al principio del ciclo y tiene el
          incremento agregado de cada vez que el ciclo se ejecuta. Si la variable
          contador es mayor que el valor final, el ciclo deja de ejecutarse. La ventaja
          de utilizar un verdadero bucle en lugar de un bloque de repetición es que
          realmente puedes ver la variable contador y utilizar en tu ciclo.
    C4_function_create:
      1:
        text: Ahora que has editado bloques de función, es tiempo de crear un nuevo
          bloque de función desde cero. Es muy simple. Verás que el cuadro de herramientas
          tiene una categoría llamada funciones. Si haces clic en esto, verás un botón
          naranja que se llama crear una función. Haciendo clic en él, aparecerá el
          editor de función que ya has usado para editar bloques de función existentes.
      2:
        text: Al igual que antes, usted comenzó nombrando su función y escribiendo
          una descripción de lo que se supone que dicha función debe hacer. Por ejemplo,
          se supone que debe dibujar un cuadrado o dibujar un triángulo y luego arrastrar
          bloques de la caja de herramientas en el espacio blanco de abajo. Recuerda
          arrastrar estos bloques dentro del bloque verde que recubre la función.
      3:
        text: Una vez que terminaste, haz clic en guardar y salir. Esto te llevará
          al rompecabezas principal. La nueva función que creaste aparecerá como un
          bloque verde en la categoría de función en tu caja de herramientas. Arrástrala
          y suelta esto en el espacio de trabajo principal y utilízalo como cualquier
          otro bloque para resolver el rompecabezas.
    C4_function_edit:
      1:
        text: Una de las cosas más importantes de programar ordenadores es que una
          vez que ya le dijiste al ordenador cómo realizar una acción, puedes darle
          un nuevo nombre a esa función. Le das un nombre y así la podrás llamar.
          En realidad, es como ampliar el idioma.
      2:
        text: En el programa construimos y aprendimos a dibujar un cuadrado moviéndose
          y girando cuatro veces. Podemos tomar esa función y darle un nombre, dibuja
          un cuadrado, de esta forma, cada vez que queramos hacerlo, simplemente decimos
          dibuja un cuadrado y volverá a invocar esa función, ese código, y lo hará
          por nosotros. Hemos añadido ese concepto a nuestro lenguaje de programación.
      3:
        text: En este rompecabezas, ya hemos creado una función de dibuja un cuadrado
          para ti. La verás en la caja de herramientas como un bloque verde. Lo que
          debes hacer es escribir el mismo código que escribiste antes de dibujar
          un cuadrado y pon esta función. Para ello, haga clic en la opción de editar
          en el bloque cuadrado verde. Esto abrirá el editor de funciones. El editor
          de función tiene tres partes. Un lugar donde nombraste tu función. Ésta
          aparecerá en el bloque verde antes de esa función. Entonces, escribe una
          breve descripción de lo se supone que tu función realiza.
      4:
        text: En este caso, se supone que para dibujar un cuadrado. El espacio blanco
          de abajo es el espacio de trabajo y obras como la obra de espacio que has
          estado usando. Arrastra y suelta bloques de la caja de herramientas en este
          espacio de trabajo. Recuerda poner los bloques que creaste dentro del cuadrado
          verde envolviendo el bloque para la función. Una vez que terminaste, haz
          clic en guardar y salir. Esto te llevará al rompecabezas principal. Ahora
          puede utilizar la función bloque que dibuja el cuadrado al igual que cualquier
          otro bloque para resolver el rompecabezas.
    C4_function_parameters:
      1:
        text: Aquí hay una función que dibuja un cuadrado con lados de 50 píxeles.
          ¿Eso es genial pero que tal si quiero dibujar un cuadrado con lados de 50
          píxeles y otro cuadrado con lados de 100 píxeles? No tenemos que hacer dos
          funciones separadas que hacen casi lo mismo. Por el contrario, podemos usar
          una función con un parámetro.
      2:
        text: Parámetros nos permiten pasar valores a una función que utilice como
          variables dentro de la función. Vamos a intentar añadir un parámetro llamado
          como esta función para que podamos usarla para crear cuadrados de diferentes
          tamaños. En el editor de función, puedes editar el nombre y descripción
          como antes pero ahora también puedes agregar un parámetro. Escribe el nombre
          de tu parámetro en el espacio y haz clic en Agregar Parámetro. Esto crea
          un bloque rojo con el nombre del parámetro que acabas de crear. Ahora podemos
          reemplazar el movimiento hacia adelante por el bloque de 100 con el parámetro
          longitud para que lo mueva hacia adelante por longitud.
      3:
        text: Haz clic en guardar y cerrar y arrastra hacia fuera tu nuevo crear un
          bloque cuadrado de la categoría de las funciones de la caja de herramientas.
          Notarás que hay un espacio vacío al lado de la longitud porque la función
          quiere saber cuál es el valor del parámetro que la longitud debe tener.
          Arrastra un bloque del número de la categoría matemáticas y colócalo en
          este espacio. ¿Ve cómo puedes utilizar la función una y otra vez con diferentes
          longitudes para hacer cuadrados de diferentes tamaños? ¡Pruébalo tú mismo!
    C4_intro:
      1:
        text: Normalmente, la programación es en texto pero nosotros usaremos Blockly
          que usa bloques visuales que puedes arrastrar y soltar para escribir programas.
          Bajo la cubierta, sigues creando el código. Para empezar, vamos a crear
          el código para el programa que ayudará a éste Angry Bird a moverse entre
          el laberinto para llegar a los cerdos malvados que robaron sus huevos.
      2:
        text: Blockly se divide en tres partes principales. A la izquierda está el
          laberinto de los pájaros, donde tu programa se ejecutará. Las instrucciones
          de cada nivel se escriben debajo del laberinto. Esta zona media es la caja
          de herramientas y cada uno de estos bloques es un comando que el pájaro
          puede entender. El espacio blanco en la derecha es el espacio de trabajo
          y es donde compilaremos nuestro programa.
      3:
        text: Si arrastro un bloque "mover" al área de trabajo y presiono "Ejecutar",
          ¿qué sucede? El pájaro avanza una caja en la parrilla. ¿Y qué tal si quiero
          que el pájaro haga algo más después de que avanza una caja? Puedo agregar
          otro bloque a nuestro programa.
      4:
        text: Voy a elegir el bloque "girar a la derecha" y lo arrastraré debajo de
          mi bloque de mover hasta que aparezca la flecha amarilla. Después la voy
          a soltar y los dos bloques se quedarán pegados. Cuando presione "Ejecutar"
          otra vez, el pájaro realizará los comandos que están apilados en nuestra
          área de trabajo en orden desde arriba hacia abajo.
      5:
        text: Si deseas eliminar un bloque, solo sácalo de la pila y arrástralo a
          la papelera. Después de ejecutar el programa, siempre puedes apretar el
          botón de reinicio para que el pájaro vuelva al punto de inicio. ¡Ahora vamos
          por esos cerdos!
    C4_math_artist:
      1:
        text: Si quiero dibujar un rectángulo de 50 píxeles de alto y eso es dos veces
          más ancho que alto, ¿cómo programaré el ordenador para hacer eso? Bueno,
          podrían decirle al artista que suba cincuenta, gire a la derecha, luego
          vaya a más de 100 y mueva todo eso dos veces. Pero entonces estoy haciendo
          los cálculos para el ordenador.
      2:
        text: Multiplicar cincuenta por dos en tu cabeza puede no decir mucho pero
          los ordenadores son realmente buenos en matemáticas, entonces debemos dejársela
          a ellos siempre que sea posible. Si solo llamo a la variable altura en su
          lugar, entonces podría cambiar fácilmente la altura a los cincuenta y luego
          cambiar mi algoritmo para decirle al artista que suba por la altura, gire
          a la derecha y luego vaya más que la altura 2 veces, lo que nos da un rectángulo
          que es dos veces más ancho como lo es de alto.
    C4_unplugged_algorithms:
      1:
        text: Esta lección se denomina Tangram algoritmos. Un tangram es un rompecabezas
          con siete piezas que se pueden poner juntos y hacer otras formas. Utilizarás
          un algoritmo para explicar a tu compañero cómo armar el rompecabezas.
      2:
        text: Un algoritmo es uno de los pasos de la lista que tu puedes tomar para
          completar una tarea. Los utilizamos todos los días con cosas como recetas
          y listas de compras. Si mantienes un algoritmo simple, hay muchas maneras
          de interpretarlo y quien realiza ese algoritmo no puede conseguir exactamente
          lo que querías. Si quieres asegurarte de que todos terminen exactamente
          con lo mismo, entonces tu algoritmo tendrá que ser detallado y específico.
      3:
        text: Estoy usando un algoritmo el día de hoy para completar una pintura.
          Quería intentar hacer una pintura de algunos lobos pero no soy el mejor
          pintor. Por suerte para la gente como yo, hay pintura por números. Hay 40
          colores y tiene pocas letras y números que te dicen con qué color pintar
          cada sección. Pintar por números me dice exactamente qué color usar y dónde.
      4:
        text: Es muy específico por lo que soy capaz de seguir indicaciones y la pintura
          va a quedar impresionante. Es un gran algoritmo. Si las instrucciones no
          fueron lo suficientemente específicas, mis lobos no se verán tan bien. Cuando
          realmente quieres que salga algo exactamente de la manera en que lo planeaste,
          es mejor ser extremadamente preciso.
    C4_unplugged_binary:
      1:
        text: En cada equipo, la persona que está dando instrucciones es la persona
          que sostiene el papel, y tiene que averiguar qué símbolo va a ser y su símbolo
          puesto es lo que va a ser. En binario, es como un alfabeto con dos letras.
          Como cuando A y B es tu alfabeto completo, pero tienes un 0 y un 1.
      2:
        text: Es la forma más común en que utilizas binario en una sentencia de "Si".
          Es un clásico de la programación. El programa se ejecuta a lo largo y dice
          Si algo es verdadero, entonces haz esto. O no es verdadero y haces otra
          cosa. Qué pasa Si tu quieres hacer algo tal vez un poco más complicado.
          En su lugar una sentencia Si, deseas trabajar con algo como una imagen o
          un sonido en un ordenador.
      3:
        text: 'Un ordenador sólo sabe binario pero una imagen, no es binaria, no son
          unos y ceros entonces, ¿cómo haces esto? Aquí está un ejemplo: tienes esta
          hermosa foto. Ahora, una foto es básicamente una forma de información. Toda
          la información puede ser codificada en binario de una u otra forma, sólo
          tienes que encontrar la manera de hacerlo.'
      4:
        text: Te imaginas que vamos a poner cuadros sobre este oso panda y para cada
          cuadro, vamos a decidir si ese cuadro es más negro o más blanco. Y luego
          vamos a colorearlo de esa manera. Ahora cada celda del cuadrado ya es negra
          o blanca y luego diremos que los cuadrados negros son ceros (dígito binario)
          y los cuadros blancos son unos, los otros dígitos binarios. Al final, te
          quedan solo muchos unos y ceros. Asi es como representas esta imagen en
          binario.
    C4_unplugged_forloops:
      1:
        text: Esta lección se denomina Bucles divertidos. En esta lección, usaremos
          una recta numérica para jugar el juego del dado. Cada jugador rodará tres
          veces para asignar un valor inicial, un valor para parar y nuestro intervalo.
          Durante cada turno, rodeamos nuestro valor inicial y cada valor tiene el
          mismo número de pasos adelante que nuestro valor de intervalo. Dejamos que
          circunde al llegar a nuestro valor de parada. ¡La persona con la mayor puntuación
          gana!
      2:
        text: Para bucles, pueden ser muy útiles sobre lugares, y si llegaras a ser
          un meteorólogo, utilizarás ciclos todo el tiempo. Hola, soy Becky. Trabajo
          en EverPower Renewables como meteorólogo de viento. Pronostico la velocidad
          del viento para el área del Río George en Columbia, donde la empresa es
          propietaria de parques eólicos.
      3:
        text: Estamos tratando de entender cuánto viento va a estar ahí para que sepamos
          cuánta energía va a ser emitida. Damos esta información a proveedores de
          energía en tiempo real. Ellos compran y venden energía basándose en cuanta
          energía les decimos que estará allí para asegurarse de que la rejilla de
          energía esté equilibrada y su luz se queda encendida, y aprovechamos al
          máximo la cantidad de energía que obtenemos de nuestras granjas.
      4:
        text: Estamos en el centro de control nacional de EverPower Renewables aquí
          en Portland y es donde tenemos información proveniente de nuestras fincas
          en todo el país. Incluso los mayores equipos de potencia hoy en día no pueden
          simular la atmósfera por todas partes. En ordenadores de modelos de previsión,
          tenemos lo que llamamos una cuadrícula. Cada punto de la cuadrícula es una
          latitud, longitud. Tenemos que calcular la física y tratar de averiguar
          la velocidad del viento, la temperatura, la presión, ese tipo de cosas.
      5:
        text: Ya que éstas son redes bastante grandes y estamos haciendo esto en varios
          puntos, estamos haciendo bucles sobre estas cosas millones y millones de
          veces. En todo lo que hago se qué usaré bucles. Aquí por ejemplo hay un
          bucle. Cuando realizas la previsión del viento, hay muchos parámetros diferentes
          relacionados a él, sería imposible para un ser humano sentarse y hacer todos
          esos cálculos. Hay muchos aspectos diferentes sobre lo que va afectando
          lo que sucede con el viento, por lo que necesitamos un modelo de ordenador
          para poder preverlo.
    C4_unplugged_madlibs:
      1:
        text: En esta lección, jugaremos con algún relleno en las historias en blanco.
          Tienes una plantilla que puedes completar para crear historias similares
          que tienen diferencias muy divertidas.
      2:
        text: En esta lección, también aprendimos cómo hacer una plantilla abstraída
          de dos historias que ya se han creado. Abstracción es el arte de la eliminación
          de las diferencias y detalles para que puedas ver cómo una solución puede
          funcionar para muchos problemas diferentes. Es muy útil en Ciencias de la
          computación porque nos permite crear funciones que pueden ser útiles en
          varias situaciones diferentes.
    C4_unplugged_parameters:
      1:
        text: Esta lección se llama Escribir una canción con parámetros. Vamos a escribir
          algunas canciones aquí. A veces el coro es un poco diferente cada vez que
          canta. ¿Te acuerdas del viejo Macdonald que tenía una granja? El coro es
          ligeramente diferente para cada animal. Y en esa granja tenía una vaca,
          1-a-i-a-o. El pequeño cambio en cada coro se puede demostrar con algo que
          llamamos parámetros.
      2:
        text: A veces, una función necesita un parámetro. Un parámetro es una pieza
          adicional de información que puedes pasar a una función para personalizarla
          para una necesidad especial. Cuando haces helados con tus amigos, utilizas
          un proceso similar a los parámetros en un programa de ordenador.
      3:
        text: El disco de helado de vainilla puede ser el mismo para cada helado pero
          cuando pides a tus amigos que agreguen dos coberturas, podrías conseguir
          muchas combinaciones diferentes. Cobertura es el nombre de función pero
          cada tipo de cobertura es un parámetro. Funciones y parámetros trabajan
          juntos para hacer grandes programas informáticos y grandes copas heladas
          también.
    C4_unplugged_variables:
      1:
        text: Esta lección se llama variables en sobres. Vamos a aprender cómo podemos
          construir oraciones cuando todavía nos falta parte de la información. La
          mayoría de nosotros ya está familiarizado con la idea de rellenar un espacio
          en blanco. Lo hacemos cuando estamos poniendo nuestro nombre en nuestra
          tarea. A veces, hay más de una palabra que necesitas llenar y en ese caso,
          te damos un espacio en blanco para saber qué información va allí.
      2:
        text: Las variables son marcadores de posición para piezas de información
          que pueden cambiar. Usando una variable para la información que falta, podemos
          seguir trabajando en lo que estábamos haciendo y dejar que otra persona
          complete la información que falta más adelante. En software, utilizamos
          mucho las variables. Utilizamos variables como marcadores de posición para
          nombre, dirección de correo electrónico e incluso nombre de usuario. De
          esa manera, le damos a saber al programa dónde esos detalles aparecerán
          después de que el usuario los rellene. Utilizamos variables todo el tiempo
          en nuestro trabajo.
      3:
        text: Cualquier momento que necesites almacenar un dato para después, utilizamos
          una variable. Supongamos que tenemos que contar el número de veces que el
          usuario ha puesto un mensaje en Twitter. Cada vez que el usuario realiza
          tweets, agregaremos uno para ese número y cada vez que el usuario elimina
          un tweet, disminuiremos ese número en uno. En cualquier momento que necesitemos
          saber la cantidad de veces que el usuario ha mandado un tweet, sólo veremos
          en esa variable.
    C4_variables_artist:
      1:
        text: Una variable es un contenedor que puede almacenar un valor. Cuando utilizas
          esa variable en un algoritmo, abre el contenedor y mira el valor dentro.
          Esto te permite escribir algoritmos inteligentes que se comportan diferentemente
          dependiendo del valor almacenado en la variable.
      2:
        text: Por ejemplo, si quiero escribir un algoritmo para decir ¡Feliz cumpleaños,
          ya tienes 10 años! para mi hermanito, eso es grandioso, pero cuando lo ejecute
          el año que viene, quiero decir, ¡Feliz cumpleaños, ya tienes 11 años! Podría
          crear una variable llamada edad para que guarde la edad de mi hermano y
          escribir mi algoritmo para decir Feliz cumpleaños, ya tienes 'edad'. Porque
          la variable puede cambiar, cada año puedo actualizar la variable 'edad'
          para igualar 'edad' más 1.
      3:
        text: En este rompecabezas, vamos a utilizar una variable que pondrá la longitud
          de la línea que dibuja nuestro artista. Más tarde en nuestro código, el
          bloque de avanza verá en esa variable de longitud para ver qué valor se
          ha establecido.
    C4_variables_playlab:
      1:
        text: Una variable es un contenedor que puede almacenar un valor. Cuando utilizas
          esa variable en un algoritmo, abre el contenedor y mira el valor dentro.
          Esto te permite escribir algoritmos inteligentes que se comportan diferentemente
          dependiendo del valor almacenado en la variable.
      2:
        text: Ahora vas a probar playlab donde te dan diferentes juegos y puedes cambiar
          los valores de las variables como velocidad, altura, puntuación, con el
          fin de cambiar el juego. No tienes que cambiar el algoritmo del juego para
          cambiar cómo juega, sólo la variable.
      3:
        text: En mi trabajo para Kindle y en X-ray para libros, aplicamos las variables
          de diversas maneras. Una forma en que puedes utilizar una variable es almacenar
          los números de página de un libro. Un usuario puede aumentar y disminuir
          el tamaño de la fuente en una página. Basado en el tamaño de fuente, puede
          cambiar el número de páginas en el libro. Podemos ajustarlo con el almacenamiento
          de número de páginas en la variable.
    infinity_playlab_events:
      1:
        text: Ahora vamos a aprender de algo que todos los programadores del juego
          utilizan cada día. Se llaman eventos. Un evento le indica a tu programa
          que escuche cuando algo sucede. Y luego cuando lo hace, realiza una acción.
          Algunos ejemplos de eventos se escuchan con el clic del ratón, un botón
          de flecha o un toque en la pantalla.
      2:
        text: Aquí, vamos a hacer que Baymax se mueva hasta tocar a Hiro y bajar para
          tocar a Rapunzel cuando el jugador utiliza las teclas de flechas de arriba/abajo
          o los botones de arriba/abajo. utilizaremos el bloque de flecha arriba y
          agregaremos el bloque de movimiento del actor arriba de él, cuando el jugador
          presiona la tecla de flecha hacia arriba, todo se ejecuta unido al bloque
          "cuando la flecha está arriba". Haremos lo mismo para hacer que Baymax se
          mueva hacia abajo. Paso a paso, tu juego es cada vez más interactivo.
    infinity_playlab_intro:
      1:
        text: Entonces ¿en qué grado estás? Segundo. Décimo grado. Primer grado. Yo
          estaba en octavo grado cuando aprendí a programar. Obtuve mi primer ordenador
          cuando estaba en sexto grado. Lo que me fascina es ser capaz de solucionar
          los problemas de la gente. Puedes expresarte, puedes construir cosas de
          una idea.
      2:
        text: La ciencia de la computación es la base para muchas de las cosas que
          profesionales y estudiantes universitarios harán en los próximos veinte
          o treinta años. Me gusta la programación porque me gusta ayudar a la gente.
          Tengo la oportunidad de construir algo que va a facilitar la vida de las
          personas. Creo que es lo más cercano que tenemos a un superpoder. Empezar
          es la parte más importante. Yo soy un principiante y quiero que aprendas
          conmigo.
      3:
        text: Soy John Vechey, y soy uno de los co-fundadores de PopCap Games. Hacemos
          Juegos como Plants vs Zombies, Bejeweled y Peggle. Mucho acerca de los juegos
          no se trata de lo perfecto de su código, ni lo perfecto de sus gráficos,
          sino cómo se siente y lo divertido que es. Sólo puede obtener esa sensación
          al probarlo, aprendiendo y adaptando, e iterando en sus propias habilidades
          de hacer juegos.
      4:
        text: "¿Tienes un videojuego favorito? Bueno, vamos a dar un paso hacia la
          creación de juegos usando Play Lab. Los buenos juegos tienen una historia
          y cada historia tiene actores. Actores hacen cosas como hablar, moverse
          e interactuar con los demás. Tal vez incluso anotan puntos basado en las
          reglas del juego. Hoy vamos a aprender cómo hacer todas estas cosas, una
          por una, con personajes de Disney como Ana, Elsa, Hiro, Baymax y Rapunzel.
          Construiremos un juego desde cero que puedes compartir y reproducir en un
          teléfono."
      5:
        text: La pantalla se divide en tres partes principales. Sobre la izquierda
          está el espacio del juego, donde se ejecutará el programa. Las instrucciones
          para cada nivel se escriben a continuación. Esta área central es la caja
          de herramientas, y cada uno de estos bloques es un pedazo de código. El
          espacio en blanco a la derecha se llama el espacio de trabajo, y es aquí
          donde construimos nuestro programa.
      6:
        text: Para empezar, necesitarás vincular tus bloques en el bloque naranja
          "cuando se ejecuta". Puedes vincular varios bloques juntos arrastrándolos
          hacia fuera hasta que veas el contorno amarillo, y luego se juntarán. En
          este primer rompecabezas, Hiro es el Actor 1 y Baymax es el Actor 2. Necesitamos
          mover a Hiro para llegar a Baymax arrastrando el bloque "mover a la derecha"
          fuera y vinculándolo al bloque "cuando se ejecuta". Una vez que tengas tus
          bloques en lugar, presiona el botón "Ejecutar" para ver lo que programaste.
      7:
        text: Comienza y al final podrás crear tu propio juego con estos increíbles
          actores que pueden interactuar, obtener puntos, tiro de microbots, cerezas,
          ollas, destellos y hielo... y se desvanecen entre sí. ¡Todo depende de ti!
    infinity_playlab_repeat_forever:
      1:
        text: "¿Te imaginas si tuvieras que repetir algo por siempre y para siempre?
          Esperemos que nunca tengas que hacerlo, porque los ordenadores son realmente
          buenos en repetir cosas. Éste es el bloque de repetición por siempre. Cualquier
          cosa dentro de este bloque pasará por siempre en el juego."
      2:
        text: Por lo que si queríamos un actor que haga algo repetidamente sin el
          jugador teniendo que hacer nada, pondremos esos bloques dentro del bloque
          de repetición por siempre. En el siguiente rompecabezas, nuestro objetivo
          es ayudar a Anna a caminar hacia arriba y hacia abajo continuamente. Aprendiendo
          cómo funcionan los comandos de repetición, ahorrarás mucho tiempo después
          de que construyas tu propio juego.
    tutorial_puzzle_challenge:
      1:
        text: "¿Qué quieres ser cuando crezcas Olivia? Una astronauta. ¿Sabes qué
          es un programador informático? Sí umm, no. Umm, espera, ¿qué? No estoy realmente
          segura de cómo explicar de forma sencilla qué es la programación informática.
          Es un conjunto de instrucciones como una receta, tienes que seguirlas paso
          a paso para obtener el resultado final que deseas."
      2:
        text: Puedo cambiar el número de píxeles, la longitud de la línea, utilizando
          este desplegable. ¿Cuánto de largo era otra vez? Puedes ver las instrucciones
          otra vez mirando abajo del botón de ejecutar. Aquí he usado el bloque de
          movimiento hacia adelante y voy a seleccionar 100 píxeles. Puedo borrar
          un bloque arrastrando a la caja de herramientas o al bote de basura. Hagamos
          que vuelva.
      3:
        text: Ejecuta el código pulsando ejecutar. ¡Bueno, eso no funcionó! Presionaré
          reiniciar y averiguaré que está mal. Puedes tratar un rompecabezas tantas
          veces como quieras y omitir rompecabezas y volver a ellos. Sólo asegúrate
          de hacer el mejor esfuerzo y no te rindas. Vamos a agregar otro movimiento
          hacia adelante. Todavía no funciona. Puedo colocar un bloque entre otros
          bloques.
      4:
        text: Volvamos a tomar un bloque y coloquémoslo entre el movimiento de avance.
          Gira a la izquierda 45 grados. Vamos a intentarlo otra vez. ¡Reiniciar,
          ejecutar, impresionante! Aquí hay otro rompecabezas. A veces te dan código
          de comienzo para completar. Aquí tengo que agregar las longitudes y grados
          correspondientes.
      5:
        text: A veces, accidentalmente puedes tirar a la basura el código de arranque.
          ¿Qué hacer entonces? Puedes presionar limpiar rompecabezas y empezar de
          nuevo. Voy a arrastrar este bloque del número en las diferentes áreas de
          píxeles. Selecciona 100 píxeles, 45 para grados y 100 píxeles de nuevo.
          ¡Impresionante! Aquí esta el código Studio de abeja. Necesito mover la abeja
          a cada flor y obtener el néctar.
      6:
        text: La primera flor es tres bloques lejos así que necesito tres movimiento
          hacia adelante. 1, 2, 3. Luego, obtén néctar, después obtener otro néctar.
          ¡Bueno, eso no funcionó! Colocaré otro avanzar entre los obtener néctares
          y lo ejecutaré de nuevo. Guau, ¡funciona! Acabas de aprender como usar el
          rompecabezas artista y abeja del código studio. Buena suerte en el reto
          de rompecabezas del código studio.
    unplug1:
      1:
        text: "¿Qué quieres ser cuando crezcas Olivia? Una astronauta. ¿Sabes qué
          es un programador informático? Sí umm, no. Umm, espera, ¿qué? No estoy realmente
          segura de cómo explicar de forma sencilla qué es la programación informática.
          Es un conjunto de instrucciones como una receta, tienes que seguirlas paso
          a paso para obtener el resultado final que deseas."
      2:
        text: Ciencias de la computación es una manera de impactar el mundo. Pueden
          ser vídeos de música, pueden ser juegos, detectar si alguien se relaciona
          con otra persona o no. Encontrar y conocer a los amigos de las personas.
          Puedes hacer todo tipo de cosas locas que realmente salvan vidas. Tienes
          que tener un disco, creo. Para mí es como un pincel. Yo creo que una gran
          programación no es tan diferente de un gran arte.
      3:
        text: Cuando por fin aprendí un poco de programación, esa pared en blanco
          resultó un montón de puertas, y las abres y por supuesto entonces encuentras
          que detrás de ellas hay otro pasillo lleno de un montón de puertas. La programación
          es fácil y divertida. Puedes hacer cualquier cosa que tu mente quiera hacer.
          Finalmente, comienzas a abrir suficientes puertas, y la luz entra. Para
          mí, un programa acabado es como una estructura llena de luz. Todos los rincones
          están iluminados. Un número de personas que puedes tocar y con las que puedes
          interactuar es algo que el mundo nunca antes había visto.
      4:
        text: Nuestra primera lección de estas series es acerca de Ciencias de la
          computación, lo que hace un informático y cómo puedes ser más responsable
          en el uso de tecnología. Es una lección muy importante pero es mucho texto.
          Al final, llegas a hacer tu propia codificación modificada usando tus iniciales.
          Es una divertida actividad y está muy enriquecida, ya que binario es una
          de esas cosas que se siente muy técnica pero una vez que lo entiendas, es
          como si tú hablaras un idioma secreto.
    unplug2:
      1:
        text: La lección de pensamiento computacional pretende enseñarte a desglosar
          un problema difícil en varios problemas más simples. El objetivo de esta
          lección es escribir un conjunto de instrucciones para que alguien las pueda
          seguir y dibujar uno de los monstruos incluidos en el plan de la lección.
      2:
        text: 'Los estudiantes formarán grupos para escribir instrucciones y luego
          las cambiarán con otro grupo que tendrá que dibujar el monstruo. Los Grupos
          escribirán las instrucciones usando los cuatro pasos del pensamiento computacional:
          descomposición, patrón de ubicación, abstracción y algoritmos.'
      3:
        text: Primeros grupos descomponen la tarea que significa hacer un plan de
          juego. Entonces buscarán patrones entre todos los monstruos en el catálogo.
          Cuando se encuentren diferencias entre los monstruos, quitarán o eliminarán
          esos datos. Por ejemplo, un monstruo en el catálogo tiene ojos de vegitas
          y otro tiene ojos spritem. Pero ambos tienen ojos, entonces podemos escribir
          una línea que diga el monstruo que tiene los ojos en blanco.
      4:
        text: Así, los estudiantes serán capaces de escribir un conjunto de instrucciones,
          llamar a un algoritmo, el cual numere las partes de los monstruos con espacios
          en blanco, para los que los estilos deberían ser. Éste es el conjunto de
          instrucciones que pasarán a otros estudiantes para crear su propio monstruo.
    unplug3:
      1:
        text: En papel gráfico de programación, ayudamos a explicar cómo trabaja la
          codificación tratando de ayudar a las personas a recrear dibujos usando
          únicamente flechas y garabatos. A una persona se le da un pequeño dibujo
          en papel gráfico y necesitan avanzar usando sólo flechas específicas y tratar
          de describir cómo recrear ese dibujo.
      2:
        text: 'En esta actividad, los símbolos que sólo se pueden utilizar son estos:
          mueve un cuadrado hacia delante, un cuadrado atrás, mueve un cuadrado hacia
          arriba, mueve un cuadrado hacia abajo, cambia al siguiente color y rellena
          tu cuadrado con color. Una vez que tenemos eso codificado, podemos entregarlo
          a otra persona que pueda leer el código y probar y recrear la imagen.'
    unplug4:
      1:
        text: En papel gráfico de programación, ayudamos a explicar cómo trabaja la
          codificación tratando de ayudar a las personas a recrear dibujos usando
          únicamente flechas y garabatos. A una persona se le da un pequeño dibujo
          en papel gráfico y necesitan avanzar usando sólo flechas específicas y tratar
          de describir cómo recrear ese dibujo.
      2:
        text: En la segunda mitad de la actividad, les preguntamos a los estudiantes
          de cuántas maneras diferentes pueden doblar un pedazo de papel para crear
          dieciséis rectángulos idénticos. Luego, comentarás cuántas soluciones múltiples
          pueden conducir al mismo resultado final y por qué algunas soluciones son
          mejores en ciertas situaciones.
    unplug5:
      1:
        text: En papel gráfico de programación, ayudamos a explicar cómo trabaja la
          codificación tratando de ayudar a las personas a recrear dibujos usando
          únicamente flechas y garabatos. A una persona se le da un pequeño dibujo
          en papel gráfico y necesitan avanzar usando sólo flechas específicas y tratar
          de describir cómo recrear ese dibujo.
      2:
        text: En la segunda mitad de la actividad, les preguntamos a los estudiantes
          de cuántas maneras diferentes pueden doblar un pedazo de papel para crear
          dieciséis rectángulos idénticos. Luego, comentarás cuántas soluciones múltiples
          pueden conducir al mismo resultado final y por qué algunas soluciones son
          mejores en ciertas situaciones.
    unplug6:
      1:
        text: Esta actividad se llama codificación con tarjetas y es ideal para cualquier
          edad. Como aprendiste con la sentencia "Si" en lecciones anteriores, durante
          Blockly, las sentencias "Si" tienen algo de ellos, tienes que evaluar para
          saber si es verdadero o falso. Esa es la condicional y puede ser utilizada
          de muchas maneras diferentes.
      2:
        text: Tomamos ventaja porque, mediante la creación de programas en papel que
          ejecutas, toman cartas de juego aleatorios. Podrías tener una sentencia
          de "Si" que dice algo como "Si" la carta que tomas es mayor que 8, obtendrás
          un punto. De lo contrario, tu oponente obtiene un punto. Puedes hacerlo
          tan simple o tan complicado como tú quieras.
    unplug7:
      1:
        text: "¿Sabes cuando buscas la letra de una canción y definen el estribillo
          al principio y luego, durante el resto de la canción, solo te regresan el
          estribillo? Así es como llamas a una función."
      2:
        text: En esta lección, definimos el estribillo al principio de nuestra canción
          y luego cantamos nuestra canción y regresamos y notamos que la clase no
          canta la palabra del estribillo, automáticamente va a la cima en donde definimos
          el coro y cantar eso. Utilizamos eso como una gran introducción a cómo entender
          lo que está haciendo un programa cuando se define y llama a una función.
      3:
        text: Utilizamos canciones conocidas como Old Macdonald para hablar de cómo
          un estribillo se llama una y otra vez y cómo a veces un coro puede cambiar.
          Cuando tienes una canción como Old Macdonald, donde cambian ciertas palabras,
          es un gran lugar para introducir la idea de los parámetros. Pasando ciertas
          palabras para que puedas enviar información adicional a tu función. Una
          vez que estamos seguros de que todos lo entienden, puedes tomar tus propias
          canciones familiares y separarlas tú mismo. Ve si pueden descubrirlo juntos.
    unplug8:
      1:
        text: Nuestra lección de abstracción utiliza un concepto familiar de madlibs,
          en donde básicamente se inserta un espacio en blanco en una historia que
          puede ser llenada con muchas palabras diferentes. Tomamos esa idea, desafiando
          a niños a que hagan sus propias palabras para sus propias historias y realmente
          explicar el concepto de abstracción.
      2:
        text: Se trata de funciones y cómo puedes tener una función, como en Old Macdonald,
          donde tienes una estructura para tu estribillo pero tienes algo pequeño
          que cambia y quitas esa cosita que cambia y puede llenarlo con tu propia
          palabra cada vez. Pero a veces tienes tres palabras que cambian y entonces
          las rellenas con tres parámetros, eso es aún bastante útil.
      3:
        text: Puedes tener una función que se encarga de muchos problemas diferentes.
          Muchas veces, la gente escribirá funciones separadas para todos los problemas,
          sin darse cuenta de que hay sólo una pequeña diferencia. Si sólo podrían
          encontrar una forma de manejar esa pequeña diferencia, podría simplemente
          reutilizar una función una y otra vez, en lugar de tener 14 funciones diferentes.
    unplug9:
      1:
        text: Programación Relay es una lección muy divertida que tiene más que sólo
          ciencias de la computación. Algunas veces todos se sienten un poquito impacientes
          y quieres mantenerlos en pie. Ésta es una gran manera de agregar algo de
          aliento a las ciencias de computación.
      2:
        text: Separas a todos en dos grupos en donde estén parados en una línea y
          ejecuten el estilo de transmisión. La primera persona de cada grupo corre
          al otro lado de la habitación en donde tienen un dibujo en papel gráfico
          y un pedazo de papel en blanco esperándolos. Ellos escriben el primer paso
          para crear esa imagen, regresan a su línea, y etiquetan al siguiente jugador,
          quien escribirá el siguiente paso.
      3:
        text: Ésta es una excelente manera de entender la idea de depuración, la necesidad
          de corregir tu propio trabajo y la necesidad de revisar el trabajo que la
          gente hace antes de ti. Rápidamente, entenderás lo importante que es tener
          cuidado en tu codificación cuando todo el equipo está dependiendo de ti.
    unplug10:
      1:
        text: Esta actividad explica de una manera fácil de entender cómo trabaja
          Internet. Explicamos en términos simples toda la terminología que necesitarás
          para que los estudiantes pueden simular mensajes que se transmiten, como
          un correo electrónico.
      2:
        text: Los estudiantes transmitirán mensajes mientras que pretenden ser uno
          de los tres métodos de transmisión. Conexión inalámbrica a Internet, ADSL
          o fibra óptica. Los estudiantes que representan Wi-Fi tendrán que llevar
          el mensaje que están transmitiendo en su cabeza porque es más probable que
          Wi-Fi deje caer alguna información.
      3:
        text: Los estudiantes que pretenden ser de ADSL o cable llevarán el mensaje
          en la parte posterior de su mano, donde son ligeramente menos propensos
          a soltar información. Y los estudiantes que representan a la fibra óptica
          lo llevarán con ambas manos. Esta actividad es una gran manera de entender
          algo que muchos de nosotros usamos todos los días.
    unplug11:
      1:
        text: Así que ya es tiempo de dar un paso atrás y echar una vistazo a todo
          lo que has hecho en los últimas diecinueve lecciones. Éste es un buen momento
          de informar a los estudiantes que lo que han hecho es un gran logro. Que
          han aprendido más sobre las lecciones que la mayoría de los adultos sabe
          sobre ciencias de la computación.
      2:
        text: Comenta en clase o en pequeños grupos acerca de sus lecciones favoritas.
          Una vez que viste todo lo que has aprendido, aquí es donde la creatividad
          de sus estudiantes puede brillar. Divídelos en grupos y que hagan una lección
          sin Internet por si mismos. Asignar a cada grupo un concepto clave como
          funciones o algoritmos y tener a mano mucho material de arte para que lo
          usen. Que cada grupo presente su nueva actividad sin Internet o incluso
          establezca otro día para hacer algunas de las actividades que el estudiante
          creó.
      3:
        text: Desde todos lados, aquí en Code.org, esperamos que hayas tenido MUCHA
          diversión durante este curso. Y si tu sueño es crear la mejor aplicación,
          utiliza la programación para ayudar a curar enfermedades, o si sólo deseas
          ser un solucionador de problemas estelar, este curso fue el primer paso
          para lograr esos sueños.
    starwars_intro:
      1:
        text: Hola, soy Kathleen Kennedy, la productora de Star Wars, El Despertar
          de La Fuerza. Hoy trabajarás con una de nuestras estrellas, el BB-8. BB-8
          es un androide esférico. Todo lo que hace, cada movimiento que ejecuta,
          es controlado por un programa de ordenador. La informática tiene impacto
          en cualquier industria, desde el marketing hasta la atención sanitaria,
          o en una película. De hecho, cientos de ingenieros informáticos trabajaron
          conjuntamente para hacer una película como El Despertar de La Fuerza.
      2:
        text: Hola, soy Rachel Rose. Soy una ingeniera de I+D en ILM y lidero el equipo
          de desarrollo de criaturas y animación. En El Despertar de la Fuerza, soy
          la responsable de ayudar a los artistas a desarrollar plataformas, que son
          las partes de los personajes que se mueven y que permiten que parezcan muy
          creíbles en una galaxia lejana, muy lejana.
      3:
        text: En la siguiente hora, vamos a construir nuestro propio juego de Star
          Wars, el cual te enseñará los conceptos básicos de la programación. Normalmente,
          la programación es totalmente textual, pero nosotros utilizaremos bloques
          de tal manera que podremos arrastrarlos y soltarlos para escribir programas.
          Bajo esta apariencia, nosotros también estaremos creando código. Despues
          de que pruebes los conceptos básicos, cambiaremos a JavaScript, uno de los
          lenguajes de programación más populares en la web.
      4:
        text: Para empezar, vamos a trabajar con Rey para programar a BB-8 para que
          se mueva para recoger todos los trozos de chatarra. Tu pantalla esta dividida
          en tres partes. La de la izquierda es el espacio del juego Star Wars, en
          donde se ejecutará el código. Las instrucciones para cada nivel se escriben
          debajo del espacio de juego.
      5:
        text: La parte intermedia es la caja de herramientas y cada uno de estos bloques
          es un comando que BB-8 puede entender.
      6:
        text: El espacio blanco de la derecha se llama espacio de trabajo y es donde
          vamos a construir nuestro programa.
      7:
        text: Si arrastro el bloque moveLeft(); a nuestro espacio de trabajo y pulso
          ejecutar, ¿qué pasa? BB-8 mueve un bloque en la cuadrícula.
      8:
        text: "¿Y qué pasa si quiero que BB-8 haga algo después del bloque moveLeft();?
          Puedo añadir otro bloque a nuestro programa. Voy a elegir el bloque moveUp();
          y lo arrastraré bajo mi bloque moveLeft(); hasta que se destaque. Entonces
          lo soltaré y los dos bloques se engancharán juntos."
      9:
        text: Cuando pulse ejecutar otra vez, BB-8 realizará las acciones que he apilado
          de arriba a abajo en nuestro espacio de trabajo. Si quieres eliminar un
          bloque en algún momento, simplemente elimínalo del montón y devuélvelo arrastrándolo
          a la caja de herramientas.
      10:
        text: Después de pulsar ejecutar, siempre puedes pulsar el botón de reiniciar
          para devolver a BB-8 al principio. ¡Ahora, vamos a probar!
    starwars_typing:
      1:
        text: Dentro de los bloques que hemos estado utilizando hay comandos JavaScript.
          JavaScript es hoy en día el lenguaje de programación más popular para los
          desarrolladores profesionales. Los bloques son una magnífica forma de empezar
          a aprender a escribir código y de hecho, las mejore universidades como Harvard
          y Berkeley empiezan a enseñar de esta forma. Pero una vez que aprendemos
          los conceptos básicos, los ingenieros escribimos código tecleado texto ya
          que de esta forma programamos más rápido.
      2:
        text: Podemos teclear cientos de comandos sin tener que encontrarlos en la
          caja de herramientas y arrastrarlos, dado que estás aprendiendo a escribir
          texto, puede ser más lento al principio, pero queremos que lo intentes.
      3:
        text: En la esquina superior derecha de tu espacio de trabajo, puedes pulsar
          el botón de mostrar texto de cualquier puzzle para cambiar de mostrar bloques
          a introducir código como texto.
      4:
        text: En la próxima lección, empezaremos en modo de teclear texto. Aún podrás
          arrastrar el bloque desde la caja de herramientas, o bien, podrás teclear
          el nombre del comando. Cuando empiezas a teclear, verás que los nombres
          de los posibles comandos aparecen debajo de dónde estés tecleando. En vez
          de teclear el nombre completo del comando, puedes seleccionar uno de ellos
          para ir más rápido. En mi trabajo, uso esta característica de autocompletar
          continuamente cuando escribo código.
      5:
        text: Cuando escribas código, el ordenador necesita que seas muy preciso.
          Deberás teclear y usar las mayúsculas en el nombre del comando exactamente,
          incluyendo los paréntesis y el punto y coma. Aunque sólo cometas un pequeño
          error, BB-8 no podrá entender el código y no será capaz de moverse.
      6:
        text: Cuando cometas un error en la línea, el editor lo marcará para que puedas
          intentar cambiar el texto para corregirlo.
      7:
        text: Si te atascas, siempre podrás comenzar de nuevo con el botón de recomenzar
          y también podrás volver al modo de bloques en cualquier momento pulsando
          en la esquina superior derecha. ¡Ok, vamos a probar escribir! Y si cometes
          errores, no te preocupes. Todo el mundo necesita varios intentos para hacerlo
          correctamente.
    starwars_events:
      1:
        text: Hola, me llamo Charita Carter. Soy una productora creativa en Walt Disney
          Imagineering. Mi trabajo es liderar los equipos que crean las atracciones
          que nuestros visitantes disfrutan. Siempre estamos buscando formas de mejorar
          y proponer mejores experiencias a nuestros visitantes y la tecnología está
          en el centro de todo ello.
      2:
        text: "¡Felicitaciones, lo conseguiste! Has programado a BB-8. Ahora creo
          que estamos listos para un trabajo más duro. Vamos a ello. Ahora que has
          aprendido los fundamentos de la programación, vamos a volver atrás para
          construir tu propio juego, protagonizado por R2-D2 y C3PO."
      3:
        text: 'Para hacer un juego, necesitamos aprender algunas cosas sobre algo
          que los programadores de juegos utilizan a diario: los eventos. Los eventos
          le indican a tu programa que escuche o espere hasta el momento en que pase
          algo y que cuando ésto ocurre, realice una acción.'
      4:
        text: Algunos ejemplos de eventos son esperar un clic del ratón, de una tecla
          de flecha o un toque en la pantalla.
      5:
        text: Aquí vamos a hacer que R2-D2 se mueva para entregar un mensaje a un
          piloto rebelde y después se mueva hacia abajo adonde está el otro piloto
          rebelde. Utilizaremos eventos para hacer que se mueva. Cuando el jugador
          use las teclas de flecha arriba/abajo, o los botones arriba/abajo.
      6:
        text: Usamos el bloque de evento whenUp() y le añadimos el bloque goUp().
          Cuando el jugador pulse la tecla de flecha hacia arriba, el código asociado
          al bloque whenUp() se ejecutará. Y haremos lo mismo para mover a R2-D2 hacia
          abajo.
      7:
        text: Para conseguirlo utilizaremos un comando que se llama whenUp(). Cuando
          arrastramos el comando desde la caja de herramientas, verás que empieza
          y acaba con una llave en vez de un punto y coma. Esto nos proporciona espacio
          para poner comandos dentro. Cada comando que pongamos entre las llaves se
          ejecutará cuando el jugador apriete la flecha arriba.
      8:
        text: Queremos que R2-D2 vaya hacia arriba, por lo que pondremos el bloque
          goUp(); dentro del comando. Y haremos lo mismo para hacer que R2-D2 vaya
          hacia abajo.
      9:
        text: Ahora, en vez de escribir todo el código para controlar nuestro androide
          a priori, podemos dejar que R2-D2 reaccione a los eventos de pulsación de
          botón que lo mueven por la pantalla. Paso a paso, tu juego se va haciendo
          cada vez más interactivo.
    starwars_congrats:
      1:
        text: Hola, mi nombre es Alice y me encargo de los equipos de producto e ingeniería
          aquí en Code.org y he trabajado en este tutorial que estás siguiendo ahora.
      2:
        text: Acabas de terminar el último nivel. ¡Felicitaciones! ¡Ya has aprendido
          todo lo que necesitas saber para hacer un patrón como éste! Ya no hay más
          instrucciones, ni rompecabezas que resolver. Puedes hacer tu propio juego
          y elegir lo que hará. Una cosa más, has desbloqueado sonidos nuevos y nuevos
          comandos para hacer aún más cosas.
      3:
        text: "[alumnos hablando] Así que nosotros hicimos un juego en el que obtienes
          puntos cuando obtienes cerdos inflables. La idea es que cada vez que obtienes
          un cerdo inflable aparezca un soldado de asalto. En realidad toda la pantalla
          está llena de cerdos inflables y cuando tocas 10.000, ganas."
      4:
        text: Направихме игра в която неможете да губите печелите точки от всичко.
          В моята програма обърнах бутоните, когато натиснете горе, вашият герой отива
          долу, като натиснете дясно, той отива на ляво. Трудно е! Понякога това е
          предимство ако сте създателя на играта. Правилно ли го разбрах? Уау!
      5:
        text: След като сте направите играта, изберете сподели за да я споделите с
          приятели или да играете на телефон. Забавлявайте се!
    starwars_blocks_intro:
      1:
        text: 'Hola, soy Kathleen Kennedy, productora de Star Wars: El Despertar de
          la Fuerza. Hoy trabajarás con BB-8, uno de nuestros protagonistas. BB-8
          es un androide esférico. Todo lo que hace, cada movimiento que ejecuta,
          es controlado por un programa informático. Las ciencias de la computación
          tienen influencia en todas las industrias, desde el marketing hasta la salud
          o una película. De hecho, cientos de ingenieros informáticos trabajaron
          juntos para hacer una película como El Despertar de la Fuerza.'
      2:
        text: Hola, soy Rachel Rose. Soy una ingeniera de I+D en ILM y lidero el equipo
          de desarrollo de criaturas y animación. En El Despertar de la Fuerza, soy
          la responsable de ayudar a los artistas a desarrollar plataformas, que son
          las partes de los personajes que se mueven y que permiten que parezcan muy
          creíbles en una galaxia lejana, muy lejana.
      3:
        text: En la siguiente hora, vamos a construir nuestro propio juego de Star
          Wars, el cual te enseñará los conceptos básicos de la programación. Normalmente,
          la programación es totalmente textual, pero nosotros utilizaremos bloques
          de tal manera que podremos arrastrarlos y soltarlos para escribir programas.
          Para empezar, vamos a trabajar con Rey para programar a BB-8 para que se
          mueva para recoger todos los trozos de chatarra.
      4:
        text: Tu pantalla esta dividida en tres partes. La de la izquierda es el espacio
          del juego Star Wars, en donde se ejecutará el código. Las instrucciones
          para cada nivel se escriben debajo del espacio de juego.
      5:
        text: La parte intermedia es la caja de herramientas y cada uno de estos bloques
          es un comando que BB-8 puede entender.
      6:
        text: El espacio blanco de la derecha se llama espacio de trabajo y ahí es
          donde construiremos nuestro programa.
      7:
        text: Si arrastro el bloque moveLeft(); a nuestro espacio de trabajo, ¿qué
          pasará? BB-8 se mueve un bloque a la izquierda en la cuadrícula.
      8:
        text: "¿Y qué pasa si quiero que BB-8 haga algo después del bloque moveLeft();?
          Puedo añadir otro bloque a nuestro programa. Voy a elegir el bloque moveUp();
          y lo arrastraré bajo mi bloque moveLeft(); hasta que se destaque. Entonces
          lo soltaré y los dos bloques se engancharán juntos. Cuando pulse ejecutar
          otra vez, BB-8 realizará las acciones que he apilado de arriba a abajo en
          nuestro espacio de trabajo."
      9:
        text: Si quieres eliminar un bloque en algún momento, simplemente elimínalo
          del montón y devuélvelo arrastrándolo a la caja de herramientas.
      10:
        text: Después de pulsar ejecutar, siempre puedes pulsar el botón de reiniciar
          para devolver a BB-8 al principio. ¡Ahora, vamos a probar!
    starwars_blocks_events:
      1:
        text: Hola, me llamo Charita Carter. Soy una productora creativa en Walt Disney
          Imagineering. Mi trabajo es liderar los equipos que crean las atracciones
          que nuestros visitantes disfrutan. Siempre estamos buscando formas de mejorar
          y proponer mejores experiencias a nuestros visitantes y la tecnología está
          en el centro de todo ello.
      2:
        text: "¡Felicitaciones, lo conseguiste! Has programado a BB-8. Ahora creo
          que estamos listos para un trabajo más duro. Vamos a ello. Ahora que has
          aprendido los fundamentos de la programación, vamos a volver atrás para
          construir tu propio juego, protagonizado por R2-D2 y C3PO."
      3:
        text: 'Para hacer un juego, necesitamos aprender algunas cosas sobre algo
          que los programadores de juegos utilizan a diario: los eventos. Los eventos
          le indican a tu programa que escuche o espere hasta el momento en que pase
          algo y que cuando ésto ocurre, realice una acción.'
      4:
        text: Algunos ejemplos de eventos son esperar un clic del ratón, de una tecla
          de flecha o un toque en la pantalla.
      5:
        text: Aquí vamos a hacer que R2-D2 se mueva para entregar un mensaje a un
          piloto rebelde y después se mueva hacia abajo adonde está el otro piloto
          rebelde. Utilizaremos eventos para hacer que se mueva. Cuando el jugador
          use las teclas de flecha arriba/abajo, o los botones arriba/abajo.
      6:
        text: Usamos el bloque de evento whenUp() y le añadimos el bloque goUp().
          Cuando el jugador pulse la tecla de flecha hacia arriba, el código asociado
          al bloque whenUp() se ejecutará. Y haremos lo mismo para mover a R2-D2 hacia
          abajo. Ahora, en vez de escribir todo el código para controlar nuestro androide
          a priori, podemos dejar que R2-D2 reaccione a los eventos de pulsación de
          botón que lo mueven por la pantalla.
      7:
        text: Paso a paso, tu juego se va haciendo cada vez más interactivo.
    starwars_blocks_congrats:
      1:
        text: Hola, mi nombre es Alice y me encargo de los equipos de producto e ingeniería
          aquí en Code.org y he trabajado en este tutorial que estás siguiendo ahora.
      2:
        text: Acabas de terminar el último nivel. ¡Felicitaciones! ¡Ya has aprendido
          todo lo que necesitas saber para hacer un patrón como éste! Ya no hay más
          instrucciones, ni rompecabezas que resolver. Puedes hacer tu propio juego
          y elegir lo que hará. Una cosa más, has desbloqueado sonidos nuevos y nuevos
          comandos para hacer aún más cosas.
      3:
        text: "[alumnos hablando] Así que nosotros hicimos un juego en el que obtienes
          puntos cuando obtienes cerdos inflables. La idea es que cada vez que obtienes
          un cerdo inflable aparezca un soldado de asalto. En realidad toda la pantalla
          está llena de cerdos inflables y cuando tocas 10.000, ganas."
      4:
        text: "[alumnos hablando] Hicimos un juego en el que no se puede perder y
          todo lo que te mata te da puntos. Para mi programa, invertí las teclas de
          modo que cada vez que se hace clic, tu personaje va hacia abajo y cuando
          vas a la derecha, el personaje va a la izquierda. ¡Es muy difícil! A veces,
          que acaba de obtener una ventaja, una ventaja injusta si usted es el desarrollador
          del juego. ¿Lo entendí? ¡Hurra!"
      5:
        text: Cuando haya terminado de hacer su juego, elige compartir para obtener
          un enlace que se puede compartir con amigos o jugar su juego en su teléfono.
          ¡Que te diviertas!
    mc_intro:
      1:
        text: Me llamo Jens Bergensten, pero se me conoce como Jeb. Soy el jefe de
          diseño de Minecraft en Mojang, en Estocolmo. Creo que tenía 11 o 12 años
          cuando decidí aprender a programar, porque quería hacer juegos. Un amigo
          de mi padre me dijo que para hacer juegos hay que saber programación. De
          modo que así empecé. Me gusta mucho diseñar y desentrañar la arquitectura
          de los juegos. Eso es lo que me fascina de Minecraft.
      2:
        text: A lo largo de la próxima hora, vas a aprender los fundamentos de la
          programación haciendo que Alex o Steve se muevan por un tramo simulado de
          un mundo de Minecraft.
      3:
        text: Normalmente, la programación utiliza texto, pero hoy vamos a usar Blockly,
          un sistema de bloques que se pueden mover y soltar para escribir programas.
          En realidad, estarás usando código JavaScript.
      4:
        text: Los conceptos que aprenderás son los que usan a diario los programadores
          y constituyen los cimientos de las ciencias informáticas. Son los que usamos
          en Mojang para Minecraft.
      5:
        text: Antes de que empecemos, tienes que escoger un personaje. Yo voy a elegir
          a Alex. Vamos a crear el código de un programa para moverlo por la pantalla.
      6:
        text: La pantalla se divide en tres partes. A la izquierda, está el área de
          juego de Minecraft, donde se ejecutará el programa. Debajo se escriben las
          instrucciones del nivel.
      7:
        text: En el centro están las herramientas. Estos bloques son comandos para
          dar órdenes a Alex.
      8:
        text: El espacio en blanco a la derecha se llama espacio de trabajo y es aquí
          donde construimos nuestro programa.
      9:
        text: Si arrastramos el bloque "avanzar" a la zona de trabajo y hacemos clic
          en Ejecutar, ¿qué sucede? Que Alex avanza un espacio en la cuadrícula.
      10:
        text: ¿Y si queremos que haga algo después de avanzar? Podemos añadir otro
          bloque al programa. Voy a coger el de "girar a la derecha" y colocarlo debajo
          del de "avanzar" hasta que aparezca esta línea de color naranja. Entonces
          lo suelto y los dos se acoplan. Cuando volvamos a pulsar Ejecutar, Alex
          realizará los comandos que hayamos colocados en la zona de trabajo, en el
          orden indicado.
      11:
        text: Y si alguna vez queremos borrar un bloque, solo tenemos que arrastrarlo
          de nuevo a la caja de herramientas.
      12:
        text: Para deshacer los cambios y volver al principio podemos usar el botón
          Empezar de nuevo, situado arriba, a la derecha de la zona de trabajo. Ahora,
          ¿ves el triángulo de los bloques de giro? Estos triángulos significan que
          puedes escoger otra opción. Vamos, ¡empecemos a programar!
    mc_repeat:
      1:
        text: Soy Lydia Winters, directora de marca de Mojang. Somos los creadores
          de Minecraft.
      2:
        text: Lo que más me gusta hacer en Minecraft es explorar. Me encanta adentrarme
          en cuevas y ver lo que puedo encontrar. Para alguien que no es programadora,
          como yo, es fascinante recibir estas clases y aprender unas nociones sobre
          código.
      3:
        text: En el último nivel tuvimos que usar muchos bloques "avanzar". Sería
          mucho más cómodo decirle al ordenador que ejecutase el comando cuatro o
          cinco veces. Por suerte para nosotros, a los ordenadores se les da muy bien
          esto de los bucles.
      4:
        text: A la hora de construir Minecraft, usamos bucles de repetición para colocar
          los materiales iniciales que conforman el mundo. Hablamos de millares de
          bloques. También usamos los bucles para otras cosas, como hacer que los
          pies de Alex se muevan al caminar. Los bucles son realmente útiles en programación.
      5:
        text: Está anocheciendo, así que en los dos próximos niveles vamos a construir
          una casa para refugiarnos. Usaremos el bloque de repetición para que sea
          más fácil.
      6:
        text: Para levantar el muro de la casa, podemos decirle a Alex que avance
          y coloque tablones cuatro veces o hacerlo una sola vez y luego tomar el
          comando y usar el bloque de repetición para que realice la misma acción
          varias veces seguidas. Ahora, hacemos clic en el bloque de repetición y
          le diremos cuántas veces queremos que repita la acción. Vamos, ¡hay que
          levantar la casa! Que te diviertas.
    mc_if_statements:
      1:
        text: Vamos a aprender a usar las sentencias "si". Estas sentencias son fundamentales
          para aprender a programar. Ayudan al ordenador a tomar decisiones.
      2:
        text: Todos los ordenadores las usan, incluido mi teléfono. Por ejemplo, cuando
          quieras desbloquearlo, ejecuta unas líneas de código que dicen que si la
          contraseña es correcta se desbloquee y si no, muestre un mensaje de error.
      3:
        text: Puedes usar las sentencias "si" para que Steve y Alex reaccionen a lo
          que vean en el mundo. Por ejemplo, si hay una roca adelante, pueden girar
          a la izquierda. O a la derecha si se encuentran con un árbol.
      4:
        text: En este caso, no queremos caernos en la lava. En principio no hay problema,
          porque la lava aparece en la pantalla. Pero, ¿qué pasa con la que no vemos,
          la que está bajo la piedra?
      5:
        text: Cuando excavemos, tendremos que ver si hay lava en un sitio antes de
          avanzar. Y si resulta que la hay, habrá que colocar una piedra delante del
          personaje para que avance. De este modo, podrá desplazarse sin peligro.
          ¡Vamos a excavar un poco! Y no te olvides de usar las sentencias "si" para
          moverte.
    mc_congrats_share:
      1:
        text: "¡Felicitaciones! Acabas de aprender los fundamentos de la programación."
      2:
        text: Ya puedes usar estos bloques para construir tus propias creaciones.
          No hay más instrucciones ni rompecabezas. Puedes construir lo que te guste.
          La decisión es solo tuya.
      3:
        text: "[los estudiantes hablan] Hay que hacerlo real. Trasquilar. He hecho
          una L de antorchas. Yo una A con tablones de abedul. Ha funcionado. ¡Hemos
          hecho una casa de lana!"
      4:
        text: Al terminar, dale a Compartir. Recibirás un enlace para mandarles tu
          creación a tus amigos. ¡Que te diviertas!
    mc_congrats_no_share:
      1:
        text: "¡Felicitaciones! Acabas de aprender los fundamentos de la programación."
      2:
        text: Ya puedes usar estos bloques para construir tus propias creaciones.
          No hay más instrucciones ni rompecabezas. Puedes construir lo que te guste.
          La decisión es solo tuya.
      3:
        text: "[los estudiantes hablan] Hay que hacerlo real. Trasquilar. He hecho
          una L de antorchas. Yo una A con tablones de abedul. Ha funcionado. ¡Hemos
          hecho una casa de lana!"
      4:
        text: Ya puedes construir lo que quieras. ¡Que te diviertas!
    gumball_intro:
      1:
        text: Si deseas hacer su propio juego, es muy fácil. Todo lo que necesita
          son unos pocos conceptos básicos de programación y puede empezar a jugar
          un juego que tú creaste.
      2:
        text: "¿Tienes un videojuego favorito? Vamos a dar un paso hacia la creación
          de juegos, sólo así, en el LabDeJuego. Los buenos juegos tienen una historia
          y cada historia tiene actores. Actores que hacen cosas como hablar, moverse
          e interactuar con los demás. Tal vez incluso marcan puntos basados en las
          reglas del juego. Hoy aprenderemos cómo hacer todas estas cosas uno por
          uno con divertidos actores y luego construiremos un juego desde cero que
          puede compartir y reproducir en un teléfono."
      3:
        text: Hoy aprenderemos cómo hacer todas estas cosas uno por uno con divertidos
          actores y luego construiremos un juego desde cero que puede ser compartido
          y reproducido en un teléfono.
      4:
        text: La pantalla se divide en tres partes principales. A la izquierda, es
          el espacio de juego donde se ejecutará el programa. Las instrucciones para
          cada nivel están escritas abajo.
      5:
        text: El área del medio es de la caja de herramientas y cada uno de estos
          bloques es un pedazo de código.
      6:
        text: El espacio en blanco a la derecha se llama espacio de trabajo y es aquí
          donde construimos nuestro programa.
      7:
        text: Para empezar, necesitarás unir tus bloques al bloque naranja, llamado
          "cuando se ejecuta". Puedes unir múltiples bloques arrastrándolos hacia
          fuera hasta que veas la línea amarilla, y luego encajarán todos a la vez.
      8:
        text: En este primer rompecabezas, haremos que los actores digan algo poniendo
          el bloque de "decir" para cuando se ejecute el bloque y escribiendo tu mensaje.
          Una vez que tus bloques estén en lugar, haz clic en el botón de ejecutar
          para ver lo que programaste.
      9:
        text: Comienza y al final podrás crear tu propio juego con todo tipo de jugadores
          que puedan interactuar, tener puntos, tirar cosas y desaparecer unos a otros.
          ¡Todo depende de ti!
    gumball_events:
      1:
        text: Ahora aprenderemos algo que todos los programadores de juego usan cada
          día. Son llamados eventos. Un evento le indica a tu programa que escuche
          para cuando algo sucede y entonces cuando lo hace, el juego realiza una
          acción.
      2:
        text: Algunos ejemplos de eventos están escuchando por un clic del ratón o
          la flecha de arriba o abajo del teclado o un toque en la pantalla.
      3:
        text: Aquí, vamos a hacer al actor decir algo cuando el jugador haga clic
          en él. Lo usaremos cuando haga clic en el bloque y agregue el bloque de
          "decir" a éste. Cuando el jugador haga clic en todos los bloques agregados
          a este bloque, se realizarán.
      4:
        text: También hay con bloques de flecha. Si tu enlace mueve bloques a esos,
          puedes comenzar a mover tus actores para arriba, abajo, izquierda, derecha,
          con las teclas de flecha. Poco a poco, tu juego es cada vez más interactivo.
    gumball_repeat:
      1:
        text: "¿Te imaginas si tuvieras que repetir algo por siempre y para siempre?
          Esperemos que nunca tengas, porque los equipos son realmente buenos en repetir
          cosas."
      2:
        text: Éste es el bloque de repetición por siempre. Cualquier cosa dentro de
          este bloque pasará por siempre en el juego. Si queremos que un actor haga
          algo repetidamente sin que el jugador haga nada, pondremos eso bloques dentro
          del bloque de repetición por siempre.
      3:
        text: En el siguiente rompecabezas, nuestro objetivo es ayudar al actor a
          que haga un trabajo continuamente. Aprendiendo cómo el comando de repetición
          trabaja te ahorrará mucho tiempo más tarde cuando construyas tu propio juego.
    iceage_intro:
      1:
        text: Si deseas hacer su propio juego, es muy fácil. Todo lo que necesita
          son unos pocos conceptos básicos de programación y puede empezar a jugar
          un juego que tu creaste.
      2:
        text: "¿Tienes un video juego favorito? Vamos a dar un paso hacia la creación
          de juegos sólo asi en el LabDeJuego. Buenos juegos tienen una historia y
          cada historia tiene actores. Actores que hacen cosas como hablar, mover
          e interactúar con los demás. Tal vez incluso marcan puntos basado en las
          reglas del juego. Hoy aprenderemos cómo hacer todas estas cosas uno por
          uno con divertidos actores y luego construiremos un juego desde cero que
          puede compartir y reproducir en un teléfono."
      3:
        text: Hoy aprenderemos cómo hacer todas estas cosas uno por uno con divertidos
          actores y luego construiremos un juego desde cero que puede ser compartido
          y reproducir en un teléfono.
      4:
        text: La pantalla se divide en tres partes principales. A la izquierda es
          el espacio de juego donde se ejecutará el programa. Las instrucciones para
          cada nivel están escritas abajo.
      5:
        text: En el área de en medio es de la caja de herramientas y cada uno de estos
          bloques es un pedazo de código.
      6:
        text: El espacio blanco de la derecha se llama zona de trabajo y es donde
          crearemos nuestro programa.
      7:
        text: Para empezar, necesitarás unir tus bloques al bloque naranja llamado
          "cuando se ejecuta". Puedes unir múltiples bloques arrastrándolos hacia
          fuera hasta que veas la línea amarilla, y luego encajarán todos a la vez.
      8:
        text: En este primer rompecabezas, haremos que los actores digan algo poniendo
          el bloque de "decir" para cuando se ejecute el bloque y escribiendo tu mensaje.
          Una vez que tus bloques esten en lugar, da clic en el botón de ejecutar
          para ver lo que programaste.
      9:
        text: Comienza y al final podrás crear tu propio juego con todo tipo de jugadores
          que puedan interactuar, tener puntos, tirar cosas y desaparece unos a otros.
          Todo depende de ti!
    iceage_events:
      1:
        text: Ahora aprenderemos algo que todos los programadores de juego usan cada
          día. Son llamados eventos. Un evento le indica a tu programa escuchar para
          cuando algo sucede y entonces cuando lo hace, el juego realiza una acción.
      2:
        text: Algunos ejemplos de eventos estan escuchando por un clic del ratón o
          un teclado de la flecha de arriba o abajo en la pantalla.
      3:
        text: Aquí, vamos a hacer al actor decir algo cuando el jugador haga clic
          en él. Usaremos el cuando haga clic en el bloque y agregar el bloque de
          "decir" a éste. Cuando el jugador haga clic en todos los bloques agregados,
          a este bloque se realizarán.
      4:
        text: También hay cuando bloques de flecha. Si tu enlace mueve bloques a esos,
          puedes comenzar a mover tus actores para arriba, abajo, izquierda, derecha,
          con las teclas de flecha. Poco a poco, tu juego es cada vez más interactivo.
    iceage_repeat:
      1:
        text: "¿Te imaginas si tuvieras que repetir algo por siempre y para siempre?
          Esperemos que nunca tengas orque los equipos son realmente buenos en repetir
          cosas."
      2:
        text: Este es el bloque de repetición por siempre. Cualquier cosa dentro de
          este bloque pasara por siempre en el juego. Si queremos que un actor haga
          algo repetidamente sin el jugador haga nada, pondremos eso bloques dentro
          del bloque de repetición por siempre.
      3:
        text: En el sigueinte rompecabezas, nuestro objetivo es ayudar al actor a
          que haga un trabajo continuamente. Aprendiendo cómo el comando de repetición
          trabaja te ahorrará mucho tiempo más tarde cuando construyas tu propio juego.
    mc_2016_intro:
      1:
        text: Hola, me llamo Jens y soy el diseñador creativo jefe de Minecraft. Durante
          la próxima hora, vas a crear tu propia versión de Minecraft. Esto se parece
          a Minecraft, pero el mundo se ha detenido. Las ovejas no se mueven, las
          gallinas no ponen huevos y los zombis están parados. Depende de ti añadir
          el código para hacer que este mundo de Minecraft funcione.
      2:
        text: 'My name is Melissa and I am a user researcher at Minecraft. What I''m
          really interested in is how people think and interact with technology and
          so this job is the perfect job for me to put together the computer engineering
          with the psychology: cómo se comporta y piensa la gente.'
      3:
        text: Verás que la pantalla está dividida en tres partes principales. 1) A
          la izquierda está Minecraft. Ahora mismo el mundo está congelado, pero vamos
          a arreglarlo con el código.
      4:
        text: 2) La zona central es la caja de herramientas. Cada uno de estos bloques
          es un comando que las gallinas, las ovejas y otras criaturas de Minecraft
          entienden.
      5:
        text: 3) La zona derecha se llama espacio de trabajo y es donde construiremos
          nuestro programa.
      6:
        text: Si te olvidas de qué hacer, las instrucciones de cada nivel están en
          la parte superior.
      7:
        text: Vamos a programar una gallina para empezar. Arrastra el comando "avanzar"al
          espacio de trabajo. Cuando hago clic en "Ejecutar", la gallina se mueve
          un paso hacia delante. Para llegar más lejos, arrastro otro bloque "avanzar"
          debajo del primero hasta que aparezca la marca. Luego lo suelto y los dos
          bloques se unen. Si vuelvo a darle a "Ejecutar", la gallina camina dos pasos.
      8:
        text: Si alguna vez quieres borrar un bloque, elimínalo del montón y arrástralo
          de vuelta a la caja de herramientas.
      9:
        text: Después de darle a "Ejecutar", siempre puedes darle al botón "Restablecer"
          para reiniciar la partida y comenzar de nuevo. Ahora te toca a ti crear
          tu propia versión de Minecraft. ¡Diviértete!
    mc_2016_loops:
      1:
        text: Hola, me llamo Lisa. Soy desarrolladora de software en Minecraft y trabajo
          en algunos de los animales y enemigos del juego. Uno de los animales en
          los que he trabajado es el ocelote. Me he ocupado de la parte en la que
          puedes darle de comer un pescado para domarlo y convertirlo en tu gato.
      2:
        text: Como humanos, nos aburrimos mucho si tenemos que hacer lo mismo una
          y otra y otra vez. Pero lo que mola de los ordenadores es que pueden hacer
          la misma cosa millones de veces de forma seguida sin que se aburran. Esta
          repetición se llama bucle y todas las criaturas de Minecraft usan bucles.
      3:
        text: Antes conseguimos que una gallina se moviera por la pantalla, pero luego
          se detuvo. En Minecraft, las gallinas se mueven toooodo el rato, no paran.
          Vamos a usar un bucle "hacer para siempre" de la caja de herramientas para
          hacer que las gallinas no dejen de moverse nunca. El poder de los bucles
          te ahorrará muchísimo tiempo y te descubrirá todo tipo de opciones chulas
          mientras construyes tu propia versión de Minecraft.
    mc_2016_events:
      1:
        text: En este nivel, puedes elegir ser Steve o Alex. Pulsa las flechas del
          teclado para moverte arriba, abajo, izquierda y derecha. Ahora te puedes
          mover por el nivel como quieras. Para usar una criatura, camina hacia ella,
          gírate para mirar hacia ella y pulsa espacio.
      2:
        text: Si estás usando una pantalla táctil, desliza el dedo hacia arriba, abajo,
          izquierda y derecha para moverte. Luego toca el juego para usar el objeto
          que tengas delante.
      3:
        text: Pero ¿qué sucede cuando lo usas? En Minecraft, las ovejas dan lana cuando
          las esquilas, las vacas salen corriendo cuando las atacas y los Creepers
          explotan cuando te acercas a ellos. Estas reacciones ocurren gracias a algo
          llamado eventos. Los eventos le dicen al programa que escuche o espere hasta
          que suceda algo. Y cuando lo hace, realiza una acción.
      4:
        text: Hasta ahora has usado un evento. El código que pones en la ranura "al
          generarse" se ejecuta cuando la criatura se crea o cuando comienza la partida.
          Durante los próximos niveles tendrás nuevas ranuras para eventos como "al
          ser tocado", que se ejecuta cuando tocas a la criatura, o "al usarse" para
          cuando usas a la criatura. O, si quieres que el zombi desaparezca cuando
          salga el sol, ponlo en la ranura "de día".
    mc_2016_spawn:
      1:
        text: En el juego, generar significa lo mismo que crear. En este nivel, vamos
          a hacer que los zombis se generen cuando se ponga el sol. Para ello, vamos
          a usar el bloque "de noche".
      2:
        text: Ya que queremos que los zombis aparezcan de noche, vamos a añadir el
          bloque "generar zombi" debajo del bloque "de noche". En cuanto se generen,
          cada zombi ejecutará el código que has puesto en su ranura de evento "al
          generarse". ¡Diviértete generando zombis!
    mc_2016_congrats:
      1:
        text: "¡Enhorabuena! Has aprendido a usar comandos de ciencia computacional
          para darle vida al mundo de Minecraft. Ahora tú eres el desarrollador. Has
          desbloqueado todos los comandos y todas las criaturas. Tú eliges qué sucede."
      2:
        text: Cuando termines de crear tu juego, elige compartir para obtener un enlace
          con el que compartirlo con tus amigos o para jugarlo en tu teléfono. ¡Diviértete!
          Estoy deseando jugar a tu versión de Minecraft.
    applab_intro_welcome:
      1:
        image: notes/applab_intro_welcome_1.png
        text: Mi nombre es Mei'lani. Soy pasante en code.org y estudiante de ciencias
          de la computación. Me gusta esta ciencia porque es muy creativa. Puedo ser
          la que soluciona los problemas y hacer que todo funcione como yo quiero.
          Pero también puedo ser la diseñadora, la artista, y tomar decisiones desde
          el lado creativo.
      2:
        image: notes/applab_intro_welcome_2.png
        text: "¡Crear tus propias aplicaciones es muy fácil con el Laboratorio de
          aplicaciones! No importa si recién comienzas a programar o si tienes algo
          de experiencia, el Laboratorio de aplicaciones es una herramienta genial
          para crear nuevas aplicaciones que puedes compartir con tus amigos."
      3:
        image: notes/applab_intro_welcome_3.png
        text: Este es el Laboratorio de aplicaciones. A la izquierda se encuentra
          tu aplicación. A la derecha, el código que hará que se ejecute. Arrastra
          bloques desde la caja de herramientas para crear tu programa. Para empezar
          solo necesitas un bloque llamado 'establecerPropiedad'.
      4:
        image: notes/applab_intro_welcome_4.png
        text: El bloque 'establecerPropiedad' cambia la apariencia de los elementos
          en tu pantalla, como los botones, las etiquetas, o incluso la pantalla misma.
          Primero necesitas decidir qué elemento quieres cambiar. Si pasas el cursor
          sobre un elemento de tu aplicación, podrás ver el nombre o el ID aquí. Luego,
          selecciona ese ID en el primer menú desplegable.
      5:
        image: notes/applab_intro_welcome_5.png
        text: Los elementos tienen muchas propiedades que puedes cambiar, como el
          color del texto, el color de fondo o el tamaño de la fuente. Puedes ver
          la lista completa y seleccionar qué propiedad deseas cambiar en el segundo
          menú desplegable.
      6:
        image: notes/applab_intro_welcome_6.png
        text: En el último menú desplegable escribirás el valor que deseas utilizar.
          El bloque hará una sugerencia. Pero siempre puedes ingresar diferentes colores
          o números.
      7:
        image: notes/applab_intro_welcome_7.png
        text: 'Una vez que termines, el bloque lee el bit como una oración: ''Establecer
          el color de fondo de button1 a verde''. Ejecútalo para ver los cambios que
          haces en el código. Al reiniciar, puedes arrastrar más bloques para cambiar
          otras cosas de tu aplicación, como el texto.'
      8:
        image: notes/applab_intro_welcome_8.png
        text: Para este tutorial vamos a trabajar con el modo de bloques, pero el
          Laboratorio de aplicaciones también te permite trabajar con texto.
      9:
        image: notes/applab_intro_welcome_9.png
        text: De cualquier manera, estarás programando en JavaScript, el lenguaje
          de la web. Cada nivel tiene una meta, instrucciones y una imagen de lo que
          se pretende crear.
      10:
        image: notes/applab_intro_welcome_10.png
        text: Si alguna vez tienes dificultades, puedes hacer clic en la imagen y
          ver exactamente cómo completar el nivel. Pero intenta hacerlo primero por
          tu cuenta.
      11:
        image: notes/applab_intro_welcome_11.png
        text: Una vez que hayas completado la meta para este nivel, haz clic en Terminar
          para seguir adelante. ¡Esto es todo! Presiona el botón naranja "Continuar"
          para pasar al siguiente nivel y empezar tu aventura con el Laboratorio de
          aplicaciones.
    applab_intro_events:
      1:
        image: notes/applab_intro_events_1.png
        text: Las aplicaciones son geniales porque son como comenzar tu propio negocio.
          Es decir que puedes diseñar todo desde el comienzo, administrarlo y ser
          el dueño de esta obra que acabas de crear gracias al código.
      2:
        image: notes/applab_intro_events_2.png
        text: Ahora que puedes cambiar la apariencia de tu aplicación, ¡responde a
          eventos para hacerla interactiva! Los eventos son acciones del usuario,
          como hacer clic en un botón, moverse por un menú o pasar sobre una imagen.
          Las aplicaciones interactivas necesitan formas de responder a eventos, como
          reproducir un sonido cuando se hace clic en un botón. Para hacer esto en
          el Laboratorio de aplicaciones, necesitas usar un nuevo bloque denominado
          'enEvento'.
      3:
        image: notes/applab_intro_events_3.png
        text: Este programa configura la pantalla en azul. Yo quiero que la pantalla
          cambie a verde cuando hago clic en este botón. Primero, necesitaré arrastrar
          un bloque de enEvento. Si paso por encima de él, sabré que el nombre del
          botón es "granBotón" y lo seleccionaré en el primer menú desplegable.
      4:
        image: notes/applab_intro_events_4.png
        text: Luego, seleccionaré el tipo de evento. Hay muchas opciones para escoger
          pero voy a dejarlo como un clic normal.
      5:
        image: notes/applab_intro_events_5.png
        text: 'Por último, voy a añadir el código dentro del evento para cambiar el
          color de fondo de la pantalla. Puedes leer este bloque como una oración:
          "En el evento en el que se hace clic en el botón se ejecuta todo este código".'
      6:
        image: notes/applab_intro_events_6.png
        text: Vamos a probarlo. Los bloques fuera de un bloque 'enEvento' se ejecutan
          justo después, para que la pantalla sea azul al comienzo.
      7:
        image: notes/applab_intro_events_7.png
        text: Cuando hago clic en el botón grande, se ejecuta el código dentro de
          mi bloque 'enEvento' y mi pantalla se pone verde.
      8:
        image: notes/applab_intro_events_8.png
        text: Si deseas cambiar más cosas después de este evento, como el texto en
          la pantalla, solo tienes que agregar más código al bloque 'enEvento'
      9:
        image: notes/applab_intro_events_9.png
        text: Para que tu programa responda a más eventos, añade mas bloques 'enEvento'.
          Solo asegúrate de no colocar uno dentro del otro. Ahora es momento de intentarlo
          por tu propia cuenta. ¡Diviértete!
    applab_intro_sounds:
      1:
        image: notes/applab_intro_sounds_1.png
        text: Ahora aprenderás a agregar imágenes y sonidos a tu aplicación. Empecemos
          con las opciones de sonido.
      2:
        image: notes/applab_intro_sounds_2.png
        text: En la caja de herramientas encontrarás un nuevo bloque llamado "reproducirSonido".
          Arrástralo al espacio de trabajo. Haz clic en el menú desplegable y luego
          en "Elegir" para escoger un sonido y reproducirlo.
      3:
        image: notes/applab_intro_sounds_3.png
        text: Desde aquí puedes subir un archivo de sonido de tu computadora o buscar
          un sonido en la biblioteca de sonidos. Esta biblioteca tiene muchas categorías
          diferentes, como instrumentos, música de fondo o animales.
      4:
        image: notes/applab_intro_sounds_4.png
        text: Una vez que tengas el sonido que deseas, haz clic en "Elegir". El sonido
          se reproducirá al ejecutar este bloque.
      5:
        image: notes/applab_intro_sounds_5.png
        text: Puedes usar el bloque 'establecerPropiedad' para agregar imágenes a
          tus elementos. Selecciona las propiedades de la imagen en el segundo menú
          desplegable
      6:
        image: notes/applab_intro_sounds_6.png
        text: Luego, selecciona "Elegir" en el tercer menú desplegable.
      7:
        image: notes/applab_intro_sounds_7.png
        text: Desde aquí puedes subir una imagen de tu computadora o buscar en una
          enorme biblioteca de íconos.
      8:
        image: notes/applab_intro_sounds_8.png
        text: De vuelta en el código, puedes usar el bloque "establecerPropiedad"
          para cambiar el color de tu ícono. Una vez que hayas seleccionado qué imagen
          va a usar tu ícono, haz clic en "Ejecutar" para ver cómo se ve.
      9:
        image: notes/applab_intro_sounds_9.png
        text: "¡Eso es todo! Ahora puedes a empezar a agregar imágenes y sonidos para
          que tus aplicaciones sean aún más divertidas y dinámicas."
    applab_intro_designmode:
      1:
        image: notes/applab_intro_designmode_1.png
        text: Para crear tus propias aplicaciones, necesitarás empezar a diseñar pantallas
          y elementos desde cero. Puedes hacerlo fácilmente con el Modo Diseño del
          Laboratorio de aplicaciones.
      2:
        image: notes/applab_intro_designmode_2.png
        text: Utiliza el interruptor en la parte superior de tu aplicación para entrar
          al Modo Diseño.
      3:
        image: notes/applab_intro_designmode_3.png
        text: Puedes arrastrar nuevos elementos a la pantalla para agregarlos. Muévelos
          a diferentes lugares y arrastra la esquina inferior derecha para cambiar
          su tamaño.
      4:
        image: notes/applab_intro_designmode_4.png
        text: Utiliza los controles que se encuentran a la derecha para cambiar las
          propiedades de un elemento. Por ejemplo, es muy fácil cambiar el texto,
          color y tamaño de la fuente de este botón.
      5:
        image: notes/applab_intro_designmode_5.png
        text: Los elementos nuevos que agregas a tu pantalla tendrán una identificación
          genérica, como botón1. Te recomendamos cambiar esta identificación a algo
          que tenga más sentido, como "botónDerecho". Así sabrás cuál es cuando estés
          en el programa.
      6:
        image: notes/applab_intro_designmode_6.png
        text: Si agregas un elemento a tu aplicación por error, arrástralo afuera
          o presiona la tecla borrar.
      7:
        image: notes/applab_intro_designmode_7.png
        text: Puedes arrastrar un elemento de la pantalla para añadir pantallas totalmente
          nuevas a tu aplicación
      8:
        image: notes/applab_intro_designmode_8.png
        text: Puedes alternar rápidamente entre las pantallas que creas desde el menú
          desplegable en la parte superior.
      9:
        image: notes/applab_intro_designmode_9.png
        text: Como necesitarás una forma de alternar entre todas estas pantallas dentro
          de tu aplicación, se añadió el bloque 'establecerPantalla' a tu caja de
          herramientas. Usa "establecerPantalla" dentro del bloque "enEvento" para
          cambiar de pantalla con el clic de un botón.
      10:
        image: notes/applab_intro_designmode_10.png
        text: En los próximos niveles trabajarás en un solo proyecto. Primero, añadirás
          un botón y, luego, una nueva pantalla. Por último, escribirás código para
          que el botón cambie a la nueva pantalla.
    applab_intro_share:
      1:
        image: notes/applab_intro_share_1.png
        text: Ahora que has aprendido los aspectos básicos del Laboratorio de aplicaciones,
          como añadir botones, sonido, imágenes, texto y nuevas pantallas, puedes
          crear todo tipo de aplicaciones.
      2:
        image: notes/applab_intro_share_2.png
        text: En el siguiente nivel encontrarás la aplicación que acabas de crear.
          Con un poco de creatividad podrás convertirla en una prueba de personalidad
          para tus amigos, una carta de agradecimiento que puedes compartir con tu
          familia o un juego del tipo elige tu propia aventura. Todas estas aplicaciones
          son solo una combinación de las habilidades que ya has aprendido, y apuesto
          que puedes crear muchas más.
      3:
        image: notes/applab_intro_share_3.png
        text: Una vez que has terminado tu aplicación, puedes enviarla fácilmente
          a tu teléfono y ver cómo ha quedado. Solo tienes que hacer clic en "Compartir"
          e ingresar tu número de teléfono aquí.
      4:
        image: notes/applab_intro_share_4.png
        text: Recibirás un mensaje de texto que te permitirá abrir tu aplicación de
          inmediato.
      5:
        image: notes/applab_intro_share_5.png
        text: También puedes compartir un enlace a tu aplicación en las redes sociales
          o publicarla en la galería pública de code.org para que otras personas puedan
          jugar con ella y compartirla.
      6:
        image: notes/applab_intro_share_6.png
        text: Estas son solo algunas de las cosas que el Laboratorio de aplicaciones
          puede hacer. El laboratorio completo cuenta con interacciones de usuario
          más avanzadas, nuevos elementos de pantalla y hasta una base de datos para
          que puedas crear aplicaciones completas rápidamente. En "code.org/applab",
          encontrarás la herramienta completa y muchas ideas para seguir avanzando.
      7:
        image: notes/applab_intro_share_7.png
        text: Gracias por acompañarnos durante esta etapa. Ahora vamos a crear y compartir
          tu primera aplicación. ¡Y no dejes de crear con el Laboratorio de aplicaciones!
    mc_2017_agent_intro:
      1:
        image: notes/mc_2017_agent_intro_1.png
        text: 'Stacy: Stampy, Lizzy, Preston, gracias por venir conmigo. Lo que quiero
          mostrarles está justo sobre esta meseta. ¡Creo que les va a encantar!'
      2:
        text: Esperen un minuto. ¡Hay un hoyo en la pista! (gritando)
      3:
        text: "¿Están todos bien? Stampy: Ah, ya sé cuál es el problema. ¡Miren! Hay
          un hoyo en la pista. Stacy: ¿De verdad, Stampy? Lizzy: Puede que tengamos
          que recoger bloques para arreglarlo. Preston: Hagamos una carrera. El primero
          que vuelve a la cima gana. Stacy: Bien. Preparados, listos, ¡YA! Voy a recoger
          algunos de estos bloques de terracota. Esperen. Chicos, ¡no puedo minar!
          Preston: Yo tampoco. Lizzy: Ni yo. Stacy: Esto es muy raro. Stampy, ¿puedes
          minar? Stampy: ¡No puedo! Stampy: Bien, todos tranquilos. Stampy: ¿El juego
          está roto? Stacy: Si es así, ¿cómo lo arreglamos? Lizzy: No lo sé. Stampy:
          ¿Alguien sabe cómo escribir código en Minecraft?"
      4:
        text: "(ufff) Preston: ¿Qué es eso? Stampy: Nunca había visto uno de esos
          antes. Lizzy: ¡Qué adorable! Stacy: ¿Es... es bueno? Preston: ¿Qué está
          pasando? Alguien tiene que volver al mundo real y arreglar esto. Todos:
          ¡Yo no! Stacy: Yo n... (suspira). Bien, iré."
      5:
        text: Oh, bueno, ahora estoy en el mundo real. Voy a intentar encontrar las
          oficinas de Minecraft.
      6:
        text: Pero voy a necesitar su ayuda. ¡Empiecen a ver el tutorial, aprendan
          a escribir código y me pondré al día con ustedes dentro de unos niveles,
          ¿está bien? ¡Deséenme suerte! Creo que es por aquí. ¡Ay! ¡Cactus! ¡Estoy
          bien!
      7:
        text: Para completar el desafío de la Hora del Código, necesitarás escribir
          código para programar al agente. Trabajarás junto con el Agente para quitar
          los obstáculos del camino y recoger los elementos que necesitas para tu
          viaje. Solo el Agente puede colocar y romper bloques, y solo tú puedes recoger
          objetos. Tu pantalla se divide en tres partes. A la izquierda está Minecraft.
      8:
        text: En el área que está en el medio verás la caja de herramientas con los
          comandos que el Agente puede entender.
      9:
        text: A la derecha, está el espacio de trabajo. Allí agruparás los comandos
          para crear el programa que controlará al Agente.
      10:
        text: El Agente puede caminar, girar y activar las placas de presión. También
          puede destruir y colocar bloques. Cuando coloca el bloque, como en el caso
          de estos raíles de vagoneta, lo hace debajo de sí mismo.
      11:
        text: Si te olvidas de qué hacer, las instrucciones de cada nivel están en
          la parte superior.
      12:
        text: Si quieres volver a intentarlo, puedes pulsar el botón de reinicio azul
          para reiniciar todo al punto en el que comenzó. Y si necesitas eliminar
          un bloque de código, puedes arrastrarlo desde tu espacio de trabajo hacia
          la barra de herramientas. Recuerda pulsar Ejecutar para que el Agente se
          mueva. Ahora sigue adelante y prueba los primeros niveles. ¡Buena suerte!
    mc_2017_repeat:
      1:
        text: 'Stampy: ¿Qué estará haciendo Stacy?'
      2:
        text: 'Stacy: Ohhh, creo que estoy en el lugar correcto. ¡Esto es increíble!'
      3:
        text: "¡Siento como si estuviera de vuelta en Minecraft! Hola, ¿cómo estás?
          ¿Hola?"
      4:
        image: notes/mc_2017_repeat_4.png
        text: 'Oh, allí hay un creeper. No estás haciendo nada, ¿no? Katie: ¿Stacy?
          Stacy: Hola, ¿Katie? Katie: Sí, ¡bienvenida a Minecraft!'
      5:
        image: notes/mc_2017_repeat_5.png
        text: 'Stacy: Esto es increíble. ¿Así que trabajas aquí como desarrolladora?
          Katie: Sí, es muy impresionante. Soy desarrolladora en el equipo de mercado
          de Minecraft. Stacy: ¿Cuántos lenguajes de programación conoces? Katie:
          Debo haber trabajado con más de una decena durante mi carrera. Stacy: ¿Una
          decena? Katie: Sí. Stacy: ¿Sabes algo acerca de este pequeño golem que se
          hace llamar el Agente? Katie: Utilizamos al Agente para hacer cosas que
          Steve o Alex no pueden, como atravesar la lava. Stacy: Bueno, yo quiero
          aprender a programar y ellos quieren aprender a programar. ¿Cuál sería una
          de las primeras cosas que necesitamos saber al respecto?'
      6:
        image: notes/mc_2017_repeat_6.png
        text: 'Katie: Bueno, tienes que aprender a usar bucles. Los bucles son cosas
          que los desarrolladores escriben para dar órdenes a una computadora y que
          se pueden ejecutar una y otra vez. Stacy: Entiendo. Creo que hay algunos
          en los siguientes niveles, así que sigamos adelante y probemos los bucles.'
      7:
        image: notes/mc_2017_repeat_7.png
        text: En el siguiente nivel, puedes usar un bucle para mover al Agente a lo
          largo del camino. Arrastra el bloque 'repetir' al espacio de trabajo y coloca
          el bloque 'avanzar' dentro del bloque 'repetir'. Esto le ordena a la computadora
          que haga lo mismo muchas veces seguidas sin tener que arrastrar un montón
          de bloques al espacio de trabajo. Puedes asignar un número al bloque 'repetir'
          para que algo se repita una cierta cantidad de veces.
      8:
        image: notes/mc_2017_repeat_8.png
        text: También puedes poner giros y diversos comandos en el bloque 'repetir',
          pero por ahora usaremos una repetición para que el Agente avance unos pocos
          pasos. Recuerda que, si no puedes seguir avanzando en el desafío, siempre
          puedes pulsar el botón de reinicio azul y volver a intentarlo.
      9:
        image: notes/mc_2017_repeat_9.png
        text: 'Si estás pensando en tener un trabajo genial como el de Katie, sigue
          adelante y haz clic en el botón de mostrar código cuando finalices cada
          nivel. Así verás el código JavaScript que alguien como Katie usa cuando
          está programando Minecraft. Katie: ¡Buena suerte a todos!'
    mc_2017_functions:
      1:
        image: notes/mc_2017_functions_1.png
        text: 'Preston: No quiero ser presumido, pero soy bastante bueno en parkour.
          Lizzy: Vamos a dormir que ya será de día cuando Stacy vuelva.'
      2:
        image: notes/mc_2017_functions_2.png
        text: 'Stacy: Bien chicos, ya volví de las oficinas de Minecraft. Creo que
          sé cómo resolver el problema que tengo en mi juego. Puedo usar una función.
          Vamos a abrir esto.'
      3:
        image: notes/mc_2017_functions_3.png
        text: Una función es un conjunto específico de instrucciones que permiten
          llevar a cabo una determinada tarea; o sea que es como una receta. En los
          próximos niveles tendrás acceso a funciones que puedes usar para resolver
          los desafíos.
      4:
        image: notes/mc_2017_functions_4.png
        text: Mira el código de la función cuando está en el espacio de trabajo para
          ver qué es lo que hace.
      5:
        image: notes/mc_2017_functions_5.png
        text: Luego, busca un bloque con ese nombre en la caja de herramientas y arrástralo
          desde allí hasta el bloque 'cuando se ejecuta'.
      6:
        image: notes/mc_2017_functions_6.png
        text: Recuerda que puedes usar la misma función cada vez que necesites ejecutar
          el mismo conjunto de instrucciones para hacer algo, como construir un puente.
          Buena suerte. ¡Sé que puedes hacerlo!
    mc_2017_congratulations:
      1:
        image: notes/mc_2017_congratulations_1.png
        text: 'Preston: ¡Felicitaciones!'
      2:
        image: notes/mc_2017_congratulations_2.png
        text: 'Lizzy: ¡Felicitaciones!'
      3:
        image: notes/mc_2017_congratulations_3.png
        text: 'Stampy: ¡Felicitaciones, lo has conseguido!'
      4:
        image: notes/mc_2017_congratulations_4.png
        text: 'Stacy: ¡Felicitaciones chicos, son geniales! Y ahora que han completado
          la Hora del Código, pueden empezar a programar en Minecraft. Han aprendido
          sobre bucles, funciones y qué hace un Agente de software.'
      5:
        image: notes/mc_2017_congratulations_5.png
        text: Ahora, vayamos al nivel de juego libre, donde eres el desarrollador.
          Usa el tiempo que te resta para escribir funciones que te permitirán explorar,
          minar y construir.
      6:
        image: notes/mc_2017_congratulations_6.png
        text: 'Puedes tomar el código que escribiste en este nivel de tu mundo de
          Minecraft en Minecraft: Education Edition. Simplemente haz clic en ''Finalizar''
          y sigue las instrucciones para obtener el enlace que puedes usar en tu mundo
          para seguir programando con el Agente. ¡Que te diviertas y hagas un buen
          trabajo!'
      7:
        image: notes/mc_2017_congratulations_7.png
        text: 'Stacy: ¡Estoy de regreso! Bueno, chicos, ¡este es el Agente! Les mostraré
          qué puede hacer. Vean, ¡está haciéndolo! Le dije que construya una escalera
          con estos bloques de terracota. Ahora podemos utilizarla para salir de aquí.
          Y no pasa solo con escaleras. Puedo decirle al Agente que haga lo que yo
          quiera, y lo hará.'
      8:
        image: notes/mc_2017_congratulations_8.png
        text: 'Stampy: ¿Cómo lo hiciste? Stacy: Realmente es muy fácil. ¡Utilicé el
          código!'
    csd_concept_how_computers_work:
      1:
        image: notes/csd_concept_how_computers_work_1.png
        text: 'Las computadoras están cambiando el mundo, ya sea que estén en nuestros
          escritorios, en nuestras casas, en nuestros bolsillos o en cualquier otro
          lugar. Aunque la mayoría de nosotros usamos esta revolucionaria tecnología
          todos los días, no solemos preguntarnos: "¿Cómo funcionan?". En esta serie
          aprenderemos cómo funcionan realmente las computadoras, empezando por aquello
          que hace que una computadora sea una computadora. Estudiarás cómo la información
          está representada dentro de la computadora mediante pequeñas señales eléctricas
          que entran y salen a velocidades alucinantes.'
      2:
        image: notes/csd_concept_how_computers_work_2.png
        text: Luego, aprenderás cómo las computadoras utilizan circuitos para hacer
          de todo, desde cálculos simples hasta simular mundos virtuales enteros.
          A continuación, verás las diferentes partes de una computadora que ingresa,
          genera y almacena toda esa información. Por último, echarás un vistazo a
          qué es el código y cómo el software controla el hardware. Si tienes curiosidad
          acerca de los dispositivos que usas cada día o quieres diseñar las innovaciones
          del futuro, el primer paso es aprender cómo funcionan las computadoras.
    csd_concept_computer:
      1:
        image: notes/csd_concept_computer_1.png
        text: Mi nombre es May-Li Khoe. Soy diseñadora e inventora. He diseñado algunas
          cosas mientras estuve en Apple, y ahora diseño productos que ayudan a los
          niños a adaptarse más fácilmente en la escuela. Mis otros trabajos son pasar
          música y bailar.
      2:
        image: notes/csd_concept_computer_2.png
        text: "¡Las computadoras están en todas partes! En los bolsillos de las personas,
          en sus automóviles o incluso en sus muñecas. Pueden estar en tu mochila
          ahora mismo. Pero, ¿qué hace que una computadora sea una computadora? ¿Cómo
          funciona?"
      3:
        image: notes/csd_concept_computer_3.png
        text: "¡Hola, soy Nat! Fui una de las diseñadoras originales de la Xbox. He
          estado trabajando con computadoras desde que tenía siete años y ahora trabajo
          en realidad virtual. Como humanos, siempre construimos herramientas que
          nos ayudan a resolver problemas. Herramientas como una carretilla, un martillo,
          una imprenta o un remolque."
      4:
        image: notes/csd_concept_computer_4.png
        text: Todos estos inventos nos ayudaron con el trabajo manual. Con el tiempo,
          las personas comenzaron a preguntarse si era posible diseñar y construir
          una máquina que ayudara con el trabajo intelectual, como resolver ecuaciones
          o seguir las estrellas en el cielo. En lugar de mover o manipular cosas
          físicas, como tierra o piedras, estas máquinas tendrían que poder manejar
          información. A medida que los pioneros de la ciencia de la computación exploraron
          cómo diseñar una máquina de pensar, se dieron cuenta de que tendría que
          realizar cuatro tareas diferentes.
      5:
        image: notes/csd_concept_computer_5.png
        text: Tiene que recibir información, almacenarla, procesarla y, luego, generar
          los resultados. Esto puede sonar sencillo, pero estas cuatro cosas están
          presentes en todas las computadoras. Eso es lo que hace que una computadora
          sea una computadora.
      6:
        image: notes/csd_concept_computer_6.png
        text: Las computadoras primero fueron calculadoras básicas, algo increíble
          ya en aquel momento, y solo manipulaban números. Pero ahora podemos usarlas
          para hablar con otras personas, jugar, controlar robots y hacer casi cualquier
          cosa loca que se nos ocurra. Las computadoras modernas no se parecen en
          nada a esas máquinas viejas y toscas, pero aún hacen las mismas cuatro cosas.
      7:
        text: Primero, hablemos de la información. Puedes decir a las computadoras
          qué hacer con el teclado, el ratón, el micrófono o la cámara. A partir de
          estas entradas diferentes, la computadora obtiene datos, que almacena en
          la memoria.
      8:
        text: El procesador de la computadora toma la información de la memoria, y
          la manipula o la cambia mediante un algoritmo, que es una serie de comandos.
          Luego, vuelve a enviar la información procesada para ser almacenada en la
          memoria. Esto continúa hasta que la información procesada está lista para
          generar resultados.
      9:
        text: La forma en que una computadora genera información depende de aquello
          para lo que está diseñada. Una pantalla de computadora puede mostrar texto,
          fotos, videos, juegos interactivos, ¡o incluso realidad virtual! El resultado
          generado por una computadora hasta puede incluir señales para controlar
          un robot.
      10:
        text: "¿Y quién sabe cómo serán las computadoras del futuro? Mi deseo es que
          puedas ayudar a decidirlo. Pero todas las computadoras, independientemente
          de los diferentes tipos de tecnología que utilicen, hacen esas mismas cuatro
          cosas. Toman una información, la almacenan como datos, los procesan y, luego,
          generan resultados."
    csd_concept_binary_data:
      1:
        text: "¡Hola! Mi nombre es Limor Fried, y soy ingeniero en Adafruit Industries.
          Allí es donde hago ingeniería y diseño, y creo circuitos para moda, música
          y tecnología."
      2:
        text: Mi nombre es Federico Gómez Suárez y soy desarrollador de software para
          Microsoft Hack for Good. Me interesa que la tecnología nos ayude a resolver
          algunos de los grandes problemas sociales de nuestros tiempos.
      3:
        text: Puede que hayas oído que las computadoras funcionan con unos y ceros.
          Pero, hoy en día, casi nadie trata directamente con ellos. Sin embargo,
          desempeñan un papel importante en su funcionamiento interno.
      4:
        text: En una computadora hay cables y circuitos eléctricos que transmiten
          toda la información. ¿Cómo se puede almacenar o representar información
          mediante la electricidad?
      5:
        text: Bueno, si tienes un solo cable con electricidad, la señal podría estar
          encendida o apagada. No hay muchas opciones, pero es un comienzo realmente
          importante. Con un cable, podemos representar un sí o un no, verdadero o
          falso, uno o cero, o cualquiera otra posibilidad que tenga solo dos opciones.
          Este estado de encendido/apagado de un solo cable se llama bit, y es la
          pieza más pequeña de información que puede almacenar una computadora.
      6:
        text: 'Si usas más cables, obtienes más bits: más unos y ceros. Más bits significa
          que puedes representar información más compleja. Pero, para entenderlo,
          necesitamos aprender sobre algo llamado el sistema de números binarios.'
      7:
        text: 'En el sistema de números decimales, tenemos diez dígitos de cero a
          nueve, y así es como aprendemos a contar. En el sistema de números binarios,
          solo tenemos dos dígitos: cero y uno, que nos permiten contar hasta cualquier
          número.'
      8:
        text: Así es cómo funciona. En el sistema numérico decimal al que todos estamos
          acostumbrados, cada posición en un número tiene un valor diferente. Está
          la posición 1, la posición 10, la posición 100 y así sucesivamente. Por
          ejemplo, un 9 en la posición 100 es 900. En el sistema binario, cada posición
          también tiene un valor. Pero, en lugar de multiplicar por 10 cada vez, multiplicamos
          por 2. Así, está la posición 1, la posición 2, la posición 4, la posición
          8 y así sucesivamente. Por ejemplo, el número 9 en binario es 1001. Para
          calcular el valor, sumamos 1 vez 8, más 0 veces 4, más 0 veces 2 más 1 vez
          1. Casi nadie hace este cálculo porque las computadoras lo hacen por nosotros.
          Lo importante es que se puede representar cualquier número con unos y ceros,
          o con un manojo de cables que se enciendan y apaguen. Cuantos más cables
          uses, más números puedes almacenar. Con 8 cables, puedes almacenar los números
          del 0 al 255. Esos son 8 unos. Con solo 32 cables, puedes almacenar desde
          0 hasta 4 mil millones. Con el sistema numérico binario, puedes representar
          cualquier número que quieras.
      9:
        text: "¿Pero qué ocurre con otros tipos de información, como texto, imágenes
          o sonido? Resulta que todas estas cosas también pueden representarse con
          números. Piensa en todas las letras del alfabeto. Podrías asignar un número
          a cada letra. La A podría ser 1, la B podría ser 2, etcétera. Puedes representar
          cualquier palabra o párrafo como una secuencia de números. Y, como vimos,
          estos números se pueden almacenar como señales eléctricas encendidas o apagadas.
          Cada palabra que ves en una página web o tu teléfono se representa mediante
          un sistema como este."
      10:
        text: Ahora, veamos qué pasa con las fotos, los videos y todos los gráficos
          que aparecen en una pantalla.
      11:
        text: Todas estas imágenes están hechas de puntos minúsculos llamados pixeles,
          y cada pixel tiene un color. Cada uno de los colores se puede representar
          con números. Si consideramos que una imagen típica tiene millones de estos
          pixeles, y un video típico muestra 30 imágenes por segundo, estamos hablando
          de muchos datos.
      12:
        text: Cada sonido es, básicamente, una serie de vibraciones en el aire. Las
          vibraciones se pueden representar gráficamente como una onda. Cualquier
          punto en esa onda se puede representar con un número. De esta manera, se
          puede dividir un sonido en una serie de números. Si quieres una mejor calidad
          de sonido, seleccionarás el audio de 32 bits o uno de 8 bits. Más número
          de bits significa un mayor rango de números.
      13:
        image: notes/csd_concept_binary_data_13.png
        text: Si usas una computadora para escribir código o crear tu propia aplicación,
          no trabajas directamente con estos ceros y unos, pero sí con imágenes, sonido
          o videos. Así, si quieres entender cómo funcionan las computadoras por dentro,
          todo se reduce a estos simples ceros y unos, y a las señales eléctricas
          en los circuitos que están detrás de ellos.
    csd_concept_circuits_logic:
      1:
        image: notes/csd_concept_circuits_logic_1.png
        text: Una de las cosas más geniales que he descubierto acerca de los circuitos
          es que sus componentes pueden ser una forma de arte. Si tengo una idea creativa,
          puedo hacerla realidad mediante los circuitos. Entonces, si tienen ideas,
          pueden usar la tecnología para que cobren vida.
      2:
        image: notes/csd_concept_circuits_logic_2.png
        text: Cada entrada o salida de la computadora es un tipo de información, que
          se puede representar con señales eléctricas que se encienden o apagan, o
          con ceros y unos.
      3:
        image: notes/csd_concept_circuits_logic_3.png
        text: Para procesar la información que ingresa como entrada y para generar
          la información que sale, una computadora necesita modificar y combinar las
          señales de entrada. Para ello, usa millones de componentes electrónicos
          diminutos que, juntos, forman los circuitos.
      4:
        image: notes/csd_concept_circuits_logic_4.png
        text: Echemos un vistazo a cómo los circuitos pueden modificar y procesar
          información que se representa con ceros y unos. Este es un circuito muy
          simple. Utiliza una señal eléctrica, encendida o apagada, y la voltea. Si
          la señal que le das es un 1, el circuito devuelve un cero; si ingresas un
          0 al circuito, te devolverá un 1. La señal que entra no es igual a la que
          sale; por eso a este circuito lo llamamos NO.
      5:
        image: notes/csd_concept_circuits_logic_5.png
        text: Los circuitos más complejos pueden tomar varias señales, combinarlas
          y devolver un resultado diferente. En este ejemplo, un circuito tomará dos
          señales eléctricas y dará un valor de 1 o 0 a cada una. Si alguna de las
          señales entrantes es un 0, el resultado también será un 0. Este circuito
          solo devolverá un 1 si la primera y la segunda señal tienen un valor de
          1; por eso se lo denomina Y.
      6:
        image: notes/csd_concept_circuits_logic_6.png
        text: Hay muchos circuitos pequeños como este que realizan cálculos lógicos
          simples. Al conectarlos, podemos crear circuitos más complejos que realizan
          cálculos más complejos.
      7:
        image: notes/csd_concept_circuits_logic_7.png
        text: Por ejemplo, puedes crear un circuito, llamado sumador, que agregue
          2 bits juntos. Este circuito toma 2 bits individuales, un 1 o un 0 cada
          uno, y los junta para calcular la suma. La suma puede ser 0 mas 0 igual
          a 0, 0 mas 1 igual a 1, o 1 mas 1 igual a 2. Necesitas dos cables de salida
          porque puedes necesitar hasta dos bits de salida para representar la suma.
          Una vez que tienes un sumador simple para añadir dos bits de información,
          puedes colocar varios de estos circuitos sumadores uno al lado del otro,
          para agregar una mayor cantidad de números.
      8:
        image: notes/csd_concept_circuits_logic_8.png
        text: Por ejemplo, así es cómo un sumador de 8 bits suma los números 25 y
          50. Cada número se representa con 8 bits, lo que da como resultado 16 señales
          eléctricas diferentes que entran al circuito. El circuito para una sumador
          de 8 bits posee muchos sumadores pequeños dentro, y todos juntos calculan
          la suma.
      9:
        image: notes/csd_concept_circuits_logic_9.png
        text: Diferentes circuitos eléctricos pueden realizar otros cálculos simples,
          como restar o multiplicar. De hecho, toda esta información que procesa tu
          computadora no es más que cantidades enormes de pequeñas operaciones simples
          que trabajan juntas. Cada operación individual realizada por una computadora
          es tan simple que puede ser hecha por un humano, pero estos circuitos dentro
          de las computadoras son muy rápidos.
      10:
        image: notes/csd_concept_circuits_logic_10.png
        text: Antiguamente, estos circuitos eran grandes y toscos, y un sumador de
          8 bits podía ser tan grande como un refrigerador y tardar varios minutos
          para realizar un cálculo simple. Hoy en día, los circuitos de las computadoras
          son microscópicos y muy rápidos. ¿Por qué las computadoras pequeñas también
          son más rápidas? Porque mientras más pequeño sea el circuito, menor es la
          distancia que debe recorrer la señal eléctrica. La electricidad se mueve
          a la velocidad de la luz, lo cual explica por qué los circuitos modernos
          pueden realizar miles de millones de cálculos por segundo.
      11:
        image: notes/csd_concept_circuits_logic_11.png
        text: Ya se que juegues un juego, grabes un video o mires el cosmos, todo
          lo que hagas con tecnología requiere cantidades enormes de información que
          se procesará rápidamente. Debajo de toda esa complejidad están los diminutos
          circuitos que convierten las señales binarias en sitios web, videos, música
          y juegos. Estos circuitos también pueden ayudarnos a decodificar el ADN
          para diagnosticar y curar enfermedades. Entonces, ¿qué es lo que te gustaría
          hacer con todos estos circuitos?
    csd_concept_memory_cpu_input_output:
      1:
        image: notes/csd_concept_memory_cpu_input_output_1.png
        text: Hola, mi nombre es Madison Maxey. Tengo una empresa llamada Loomia en
          la cual fabricamos telas inteligentes para ropa y productos inteligentes.
          Cuando se trata de textiles, el único límite es el cielo.
      2:
        image: notes/csd_concept_memory_cpu_input_output_2.png
        text: Mi nombre es Danielle Applestone y soy CEO de Othermachine Company.
          Construimos una fresadora de escritorio. Una fresadora usa un instrumento
          de corte giratorio que se mueve a través de un material para crear un objeto
          3D.
      3:
        image: notes/csd_concept_memory_cpu_input_output_3.png
        text: Todas las computadoras hacen las mismas cuatro cosas básicas. Reciben
          información, almacenan y procesan información y, finalmente, generan información.
          Cada una de estas cosas es realizada por una parte diferente de la computadora.
      4:
        image: notes/csd_concept_memory_cpu_input_output_4.png
        text: Hay dispositivos que toman información del mundo exterior y la convierten
          en información binaria. Existe una memoria para almacenar esta información;
          una unidad de procesamiento central o CPU, donde se hacen todos los cálculos,
          y, finalmente, dispositivos de salida que toman información y la convierten
          en una producción física.
      5:
        image: notes/csd_concept_memory_cpu_input_output_5.png
        text: Primero hablemos de la entrada de información. Las computadoras pueden
          tomar muchos tipos diferentes de entrada, como el teclado, el panel táctil
          de un teléfono, una cámara, un micrófono o un GPS. Incluso los sensores
          de un carro, un termostato o un drone son diferentes dispositivos de entrada.
      6:
        image: notes/csd_concept_memory_cpu_input_output_6.png
        text: Ahora, veamos un simple ejemplo de cómo una entrada viaja a través de
          la computadora y se convierte en salida. Cuando presionas una tecla en tu
          teclado, por ejemplo la letra "B", el teclado convierte la letra en un número.
          Ese número es enviado como binario, o sea ceros y unos, dentro de la computadora.
      7:
        image: notes/csd_concept_memory_cpu_input_output_7.png
        text: A partir de este número, la CPU calcula cómo mostrar la letra "B" pixel
          por pixel. La CPU pide instrucciones paso a paso a la memoria, que dice
          cómo dibujar la letra "B". La CPU ejecuta estas instrucciones y almacena
          los resultados como pixeles en la memoria.
      8:
        image: notes/csd_concept_memory_cpu_input_output_8.png
        text: Finalmente, esta información en pixeles es enviada en binario a la pantalla.
          La pantalla es un dispositivo de salida, el cual convierte las señales binarias
          en las pequeñas luces y colores que dan forma a lo que se ve.
      9:
        image: notes/csd_concept_memory_cpu_input_output_9.png
        text: Todo esto sucede tan rápido que parece instantáneo, pero, para mostrar
          cada letra, una computadora ejecuta miles de instrucciones desde el momento
          en que el dedo presiona el punto clave.
      10:
        image: notes/csd_concept_memory_cpu_input_output_10.png
        text: En ese ejemplo, el dispositivo de salida fue la pantalla, pero hay varios
          tipos diferentes que toman una señal binaria de la computadora y hacen algo
          con ella en el mundo físico. Por ejemplo, un bocina reproducirá un sonido
          y una impresora 3D imprimirá un objeto. Los dispositivos de salida también
          pueden controlar movimientos físicos como el brazo de un robot, el motor
          de un carro o la herramienta de corte de la fresadora que produce mi compañía.
          Gracias a los nuevos tipos de entradas y salidas, y las mejoras en la velocidad
          y el tamaño de la memoria y la CPU, las computadoras pueden interactuar
          con el mundo en nuevas maneras.
      11:
        image: notes/csd_concept_memory_cpu_input_output_11.png
        text: Mientras más difícil sea la tarea y más información de entrada o salida
          haya, mayor será el poder de procesamiento y la memoria que una computadora
          necesita. Escribir letras en una pantalla puede ser sencillo pero, a la
          hora de crear gráficos complejos en 3D o grabar una película en alta definición,
          las computadoras modernas suelen tener varias CPU, para procesar toda esa
          información, y muchos gigabytes de memoria, para almacenarla.
      12:
        image: notes/csd_concept_memory_cpu_input_output_12.png
        text: No importa qué es lo que quieres hacer con la computadora, cada acción
          sencilla involucra la entrada de información del mundo físico, el almacenamiento
          y procesamiento de esa información, y la generación de un resultado que
          vuelve al mundo físico.
    csd_concept_hardware_software:
      1:
        image: notes/csd_concept_hardware_software_1.png
        text: Hola, mi nombre es Érica Gómez y soy gerente de ingeniería en Amazon.com.
          Una de las mejores cosas que tiene trabajar en tecnología, y en Amazon en
          particular, es que puedo llevar a mi perra a trabajar conmigo todos los
          días. Mi trabajo es ayudar a garantizar que el software llegue a las personas
          y su trabajo es dormir una siesta debajo de mi escritorio y roncar muy fuerte.
      2:
        image: notes/csd_concept_hardware_software_2.png
        text: Mi nombre es Jerome Holman, y soy administrador de programa en Team
          Xbox. Tengo un trabajo realmente divertido que consiste, básicamente, en
          integrar el hardware y el software para dar forma a todos los juegos que
          te encantan de la Xbox.
      3:
        image: notes/csd_concept_hardware_software_3.png
        text: Cuando miro dentro de un dispositivo informático, veo muchos circuitos,
          chips, cables, bocinas, conectores y todo tipo de cosas. Eso es lo que se
          conoce como hardware.
      4:
        image: notes/csd_concept_hardware_software_4.png
        text: Pero lo que no se ve es el software, esto es, todos los programas de
          la computadora, o el código, que se ejecutan en este equipo. El software
          puede ser cualquier cosa, desde aplicaciones y juegos hasta páginas web
          o el software de ciencia de datos que mis equipos y yo usamos en Amazon
          para entender cómo se comportan los clientes.
      5:
        image: notes/csd_concept_hardware_software_5.png
        text: Pero, ¿cómo se relacionan el hardware y el software entre sí? Echemos
          un vistazo a la unidad de procesamiento central de una computadora, también
          conocida como CPU.
      6:
        image: notes/csd_concept_hardware_software_6.png
        text: La CPU es el chip maestro que controla todas las demás partes de la
          computadora. Como una CPU necesita hacer cosas diferentes, en su interior
          hay partes más pequeñas y simples que manejan tareas específicas. Tiene
          algunos circuitos para hacer cálculos y operaciones lógicas simples, y otros
          para enviar y recibir información a y desde diferentes partes de la computadora.
      7:
        image: notes/csd_concept_hardware_software_7.png
        text: La verdadera magia de la CPU reside en cómo saber qué circuitos usar
          y cuándo usarlos. La CPU recibe comandos simples que le dicen qué circuito
          usar para hacer una tarea específica. Por ejemplo, un comando "sumar" le
          dice a la CPU que utilice su circuito externo para calcular un nuevo número,
          y un comando "almacenar" le dice que use un circuito diferente para guardar
          ese resultado en la memoria.
      8:
        image: notes/csd_concept_hardware_software_8.png
        text: Al igual que los números, todos estos comandos simples se pueden representar
          en unos y ceros binarios o en señales eléctricas de encendido y apagado.
          Los comandos binarios se almacenan en la memoria, y la CPU los busca y los
          ejecuta en secuencia uno tras otro. Esta secuencia de comandos es, de hecho,
          un programa informático muy simple.
      9:
        image: notes/csd_concept_hardware_software_9.png
        text: El código binario es la forma más básica de software y controla todo
          el hardware de una computadora. Hoy en día, nadie escribe software en binario.
          ¡Tardaría mucho tiempo!
      10:
        image: notes/csd_concept_hardware_software_10.png
        text: Hoy, el software que escribimos se parece más a este (Python) o a este
          (Ruby), o incluso a este (Blockly). Estos lenguajes de programación permiten
          escribir comandos en algo que se parece mucho al inglés.
      11:
        image: notes/csd_concept_hardware_software_11.png
        text: Para dibujar un rectángulo en la pantalla, necesitas un solo comando.
          Este comando de alto nivel se convierte en cientos, o miles, de comandos
          binarios más simples que la CPU entiende. El software le dice a la CPU qué
          hacer pero, cuando escuchas música, navegas por Internet y chateas con un
          amigo, tu computadora ejecuta varias piezas de software a la vez.
      12:
        image: notes/csd_concept_hardware_software_12.png
        text: Entonces, ¿cómo llegan todos estos programas a la computadora en primer
          lugar, y cómo la CPU puede ejecutarlos al mismo tiempo? Para descubrirlo,
          tendremos que echar un vistazo al sistema operativo.
      13:
        text: El sistema operativo de la computadora es el programa principal que
          maneja la forma en que el software usa el hardware de la computadora. Por
          ejemplo, yo ayudé a crear el sistema operativo Windows que se ejecuta en
          la mayoría de las computadoras personales.
      14:
        text: El sistema operativo es un programa con habilidades especiales que permite
          controlar el resto del software en la computadora. Permite instalar nuevos
          programas y cargarlos en la memoria de tu computadora. Decide cuándo la
          unidad de procesamiento central ejecuta un programa, y si ese programa puede
          acceder a los dispositivos de entrada y salida del dispositivo. Cuando piensas
          que tu computadora ejecuta varios programa al mismo tiempo, en realidad
          lo que ocurre es que el sistema operativo cambia rápidamente en fracciones
          de segundo entre los programas que comparte esa CPU.
      15:
        text: Dentro de cada computadora hay un sistema operativo que maneja el software
          que controla el hardware.
      16:
        text: El software es una serie de comandos de código binario simple, y ese
          código no es más que señales eléctricas que fluyen a través de miles de
          millones de circuitos diminutos.
      17:
        text: Las computadoras pueden hacer todo tipo de cosas asombrosas. Pero lo
          único que hace que una computadora sea inteligente, o útil, eres tú. Cuando
          aprendes a programar, puedes definir el problema que quieres resolver y
          escribir el software que hace realidad esas ideas.
    hoc_dance_warmup:
      1:
        text: 'Hora del Código | Fiesta de baile: calentamiento'
      2:
        text: "¡Hola! Mi nombre es Miral Kotb y soy bailarina, desarrolladora de software
          y creadora de iLuminate."
      3:
        text: Las ciencias de la computación se relacionan con la creatividad de muchas
          maneras. Muchísimas, de hecho. Me refiero a que, una vez que tienes la capacidad
          de escribir software, puedes innovar en lo que sea. Yo lo hago en los trajes
          de luces. Hay tanto que puedes hacer una vez que tienes las herramientas
          para escribir software, y las posibilidades son realmente infinitas.
      4:
        text: Durante la siguiente hora darás tus primeros pasos con las ciencias
          de la computación y programarás tu propia fiesta. Hemos reunido algunas
          canciones exitosas y un equipo de grandes bailarines con los que puedes
          jugar.
      5:
        text: Usarás bloques de código para elegir diferentes bailarines, cambiar
          sus movimientos de baile, hacerlos responder a la música y que puedan interactuar.
      6:
        text: Verás que tu pantalla está dividida en tres partes. A la izquierda está
          el espacio de juego. Aquí es donde aparecerán tus bailarines.
      7:
        text: El área del medio es la caja de herramientas. En este espacio verás
          nuevos bloques de código a medida que avances de lección.
      8:
        text: El área a la derecha es el espacio de trabajo. Puedes arrastrar bloques
          desde la caja de herramientas para crear tu programa.
      9:
        text: Las instrucciones para cada nivel estarán en la parte superior de la
          pantalla. Si necesitas una pista, simplemente haz clic en la bombilla.
      10:
        text: Para empezar, crearemos un nuevo bailarín con este bloque rojo. Primero,
          arrástralo desde la caja de herramientas y colócalo bajo este bloque naranja
          de "configuración". Este bailarín es un gato y su nombre es "mi_primer_bailarín".
          Puedes hacer clic aquí para cambiar el nombre.
      11:
        text: Con esto puedes cambiar el lugar en el que aparece el bailarín en tu
          espacio de juego.
      12:
        text: Arriba del espacio de juego verás un menú para seleccionar música. Diviértete
          encontrando tus canciones favoritas entre una gran cantidad de opciones.
          Debajo del espacio de juego está el botón Ejecutar. Si lo presionas, aparecerán
          los bailarines de tu programa y sonará la música.
      13:
        text: "¡Pruébalo tú mismo! Si no puedes avanzar, ¡no te preocupes! Sigue adelante
          y, pronto, habrás creado tu propia fiesta de baile. Entonces, ¿qué vas a
          crear?"
    hoc_dance_events:
      1:
        text: 'Hora del Código | Fiesta de baile: eventos'
      2:
        text: Soy Aloe Blacc, cantante, compositor y artista. Creo que las ciencias
          de la computación son el futuro, y por eso son realmente importantes de
          aprender. Además, pienso que es importante que las personas tengan el control
          de la tecnología que controla literalmente sus vidas.
      3:
        text: Para que los diferentes movimientos de baile acompañen la música, puedes
          usar algo llamado eventos. Un evento le indica a tu programa que escuche
          algo que ocurre y que reaccione inmediatamente.
      4:
        text: Algunos ejemplos de eventos son escuchar un clic del ratón, un botón
          de flecha o un toque en la pantalla. El evento que vamos a utilizar ahora
          escuchará un cambio en la canción. El cambio activará a tu bailarín para
          que haga un nuevo movimiento de baile.
      5:
        text: Los bailarines profesionales cuentan los tiempos de una canción para
          practicar su coreografía.
      6:
        text: En música, un compás se refiere a un cierto número de tiempos. En las
          canciones más populares, el compás tiene cuatro tiempos.
      7:
        text: Para que tus bailarines se muevan, necesitarás un bloque verde de eventos.
          Este bloque de eventos dice, "después de 4 compases".
      8:
        text: Si arrastra un bloque púrpura "hacer siempre", puedes escoger un baile
          para el bailarín. Al estar debajo del bloque de evento "después de 4 compases",
          tu bailarín esperará cuatro compases de la canción antes de empezar a bailar.
      9:
        text: Ten en cuenta el contador de compases en la parte superior de la pantalla.
      10:
        text: Mira y escucha el evento que activará el código del baile. En ese momento
          comenzará a moverse el bailarín.
    hoc_dance_properties:
      1:
        text: 'Hora del Código | Fiesta de baile: propiedades'
      2:
        text: Mi nombre es María. Soy estudiante de tercer año en la Universidad de
          Washington y futura ingeniera en Amazon.
      3:
        text: Me encantan las ciencias de la computación porque incorporan la resolución
          de problemas y el pensamiento crítico, y porque, luego de horas de trabajar
          en algo, puedes obtener resultados realmente geniales y gratificantes.
      4:
        text: Hasta ahora, has tenido la oportunidad de jugar con diferentes tipos
          de bailarines y los has programado para que hagan diferentes tipos de baile.
          Pero, ¿cómo funcionan estos movimientos?
      5:
        text: Cada movimiento de baile está compuesto por una serie de imágenes llamadas
          fotogramas. Cada fotograma es un poco diferente del anterior. Cuando se
          ejecuta tu programa, la computadora muestra un fotograma tras otro. Aparecen
          tan rápido que parece que el bailarín se mueve. Ese es el secreto detrás
          de toda animación.
      6:
        text: No solo puedes cambiar los movimientos de tu bailarín, sino también
          sus propiedades. Las propiedades describen cosas como la posición del bailarín
          en la pantalla, su tamaño y su color.
      7:
        text: Para cambiar las propiedades de un bailarín, usarás un bloque 'establecer'.
          Usaremos uno de estos bloques para que nuestros bailarines sean más pequeños.
          Primero, arrastra el bloque 'establecer' a tu programa. Luego, selecciona
          al bailarín que te gustaría cambiar y escribe el tamaño en que aparecerá
          en la pantalla.
      8:
        text: El tamaño completo es 100. Si eliges un número inferior, el bailarín
          será más pequeño. Cuanto más pequeño sea, más lejos se verá. Esta es una
          gran manera de crear bailarines de fondo.
      9:
        text: Con el bloque 'establecer' también puedes cambiar las dimensiones, la
          rotación, la posición y el color del bailarín. Puedes jugar con estas propiedades
          para hacer todo tipo de cambios y conectarlos a diferentes partes de la
          canción.
      10:
        text: Recuerda que solo puedes establecer las propiedades de un bailarín que
          ya existe. Asegúrate de que tu bloque venga después del bloque "Hacer un
          nuevo bailarín". Aprovecha para ser creativo y divertirte.
    hoc_dance_congrats:
      1:
        text: 'Hora del Código | Fiesta de baile: ¡que comience la fiesta!'
      2:
        text: "¡Felicitaciones! Acabas de aprender los aspectos básicos de las ciencias
          de la computación. Ahora puedes usar estos bloques para crear tu propia
          fiesta de baile y compartirla con tus amigos."
      3:
        text: Si miras en la caja de herramientas, encontrarás algunos bloques nuevos
          que no has visto antes. Por ejemplo, puedes usar el bloque 'disposición'
          para organizar a los bailarines de diferentes maneras en la pantalla.
      4:
        text: Echa un vistazo y comienza a experimentar con estos nuevos bloques y
          características. ¿Crearás una coreografía perfecta para tu baile con tu
          canción favorita?
      5:
        text: "¿Una competencia de baile con tus amigos?"
      6:
        text: "¿U otra cosa?"
      7:
        text: Al final del tutorial podrás compartir un enlace a tu creación con tus
          amigos. ¡Diviértete a pura imaginación!
    mc_2018_intro:
      1:
        text: "¡Hola! Justo a tiempo. Bienvenido a Voyage Aquatic. Estoy a punto de
          embarcarme en una búsqueda para encontrar un tesoro submarino oculto y sería
          genial que me ayudes. Quién sabe qué encontraremos a lo largo de estos misteriosos
          cursos de agua. Deberíamos conocer a nuestro primer guía en algún lugar
          de este muelle."
      2:
        text: "¡Bienvenido, aventurero! Para completar Voyage Aquatic tendrás que
          resolver una serie de desafíos a través del código. Así es cómo funciona.
          Tu pantalla se divide en tres partes."
      3:
        text: A la izquierda, verás el mundo de Minecraft.
      4:
        text: El área del medio es tu caja de herramientas, donde puedes encontrar
          comandos de programación.
      5:
        text: Y el área grande a la derecha es tu espacio de trabajo. Aquí puedes
          colocar comandos para crear tu programa y controlar tus movimientos.
      6:
        text: Las instrucciones de cada nivel están en la parte superior de la página.
          Haz clic en el signo más para alternar entre instrucciones largas y cortas.
      7:
        text: Intenta arrastrar bloques desde la caja de herramientas hacia el espacio
          de trabajo, pon uno arriba del otro y luego haz clic en el botón Ejecutar
          para ejecutar tus comandos.
      8:
        text: Puede que tengas que intentarlo varias veces hasta hacerlo bien y algunos
          de los desafíos tienen más de una solución. No dudes en experimentar para
          ver qué funciona.
      9:
        text: Si quieres volver a intentarlo, haz clic en el botón 'reiniciar' para
          volver a donde comenzaste.
      10:
        text: Si necesitas eliminar un comando, simplemente arrastra el bloque desde
          tu espacio de trabajo hacia la caja de herramientas. Recuerda hacer clic
          en "Ejecutar" para ver tu código en acción.
      11:
        text: Bueno, basta de perder el tiempo, aventurero. Empecemos a programar
          para encontrar algún tesoro submarino.
    MC_2018_loops:
      1:
        text: "¡Genial! ¡Hemos capturado un bacalao! ¿Sabías que si alimentas con
          bacalao a un delfín, este te guiará a un naufragio donde puede haber un
          tesoro? Debemos estar cerca. El próximo conjunto de desafíos será más difícil;
          aprendamos más habilidades de programación. ¿Qué es esto? Una cueva?"
      2:
        text: "¡Bienvenido, aventurero! Mi nombre es Squid. Me di cuenta de que usé
          el mismo conjunto de comandos una y otra vez en los últimos desafíos. Debe
          haber sido un poco tedioso. ¿No sería bueno encontrar una forma de hacer
          algo, como lavar los platos o cepillarte los dientes, una y otra vez sin
          cansarte o que sea aburrido?"
      3:
        text: Las computadoras son realmente buenas en hacer lo mismo una y otra vez
          mediante bucles de programación. Si quieres que tu programa siga las mismas
          instrucciones muchas veces, ¡puedes usar un bucle!
      4:
        text: El bloque 'bucle' contiene instrucciones que se repiten hasta alcanzar
          el objetivo. Una vez que el programa inicia un bucle "Repetir hasta el objetivo",
          seguirá repitiendo las instrucciones dentro de él hasta que se logre el
          objetivo.
      5:
        text: ¡Pruébalo por ti mismo! Coloca los comandos que quieres repetir dentro
          del bloque "Repetir hasta el objetivo", haz clic en "Ejecutar" y míralo
          en acción.
      6:
        text: Bueno, eso fue un poco raro. ¿Quién hubiese imaginado que los calamares
          saben programar? Ni siquiera sabía que tenían dedos. Ahora que sabemos sobre
          bucles, vamos a usarlos para conseguir algún otro tesoro.
    mc_2018_conditionals:
      1:
        text: "¡Qué bien! ¡Resolvimos otros tres desafíos! Y hemos capturado... un
          salmón. No es tan emocionante como las pilas de oro, pero igual está bien.
          Y tengo la sensación de que la concha de nautilo aparecerá dentro de poco.
          Me pregunto qué se oculta en estas ruinas. ¡Quizás sea otra pista! Echemos
          un vistazo."
      2:
        text: Mi nombre es Netty. Bienvenidos a mis ruinas. Tomamos decisiones todo
          el tiempo según las condiciones. Si parece que va a llover, tomamos un paraguas.
          Si tenemos hambre, comemos un refrigerio.
      3:
        text: Si vemos un creeper, debemos correr en la dirección opuesta. Las computadoras
          también toman este tipo de decisiones. En realidad, usan el código para
          responder a las condiciones.
      4:
        text: Para programar una respuesta como esta mediante los comandos de tu código,
          selecciona un bloque 'si hay camino'.
      5:
        text: Selecciona el menú desplegable para crear el comando.
      6:
        text: Por ejemplo, si escribes el comando "si hay camino a la derecha" y colocas
          el giro a la derecha dentro del condicional, Steve siempre girará a la derecha
          si llega a un camino abierto a la derecha (no lo hará si no hay camino abierto
          a la derecha). Estos comandos 'si' condicionales son útiles cuando ejecutas
          código en situaciones impredecibles, como las ruinas misteriosas de las
          cuevas submarinas.
      7:
        text: Intenta usar los bloques 'si' y genera un giro con tu código.
      8:
        text: "¡Oh! Las ruinas de Netty son impresionantes. Realmente debo mudarme
          de la casa de mis padres. ¿Qué piensan? ¿Están dadas las condiciones para
          que completemos los desafíos finales? Vamos a intentarlo."
    mc_2018_closing:
      1:
        text: 'Amy Lee33: ¡Felicitaciones, lo has conseguido!'
      2:
        text: 'Squid: ¡Felicitaciones!'
      3:
        text: 'Netty: ¡Lo has logrado! ¡Felicitaciones!'
      4:
        text: 'Tomohawk: ¡Felicitaciones!'
      5:
        text: "¡Qué gran día! La búsqueda de tesoros nos llevó a construir un canalizador
          de Minecraft, encontrar conchas de nautilo y descubrir cofres de tesoro.
          Me encanta el color del prismarina. También aprendimos cómo programar con
          bucles y condicionales."
      6:
        text: Hablando de programación, queda un nivel más en esta misión. ¿Estás
          listo, aventurero?
      7:
        text: Es un nivel de juego libre y puedes usar tus habilidades de programación
          para construir algo increíble.
      8:
        text: Mmmm... ¿un lugar para ocultar tu tesoro, un monumento submarino, un
          castillo de coral? Ahhh... tantas ideas. Intenta usar bucles, para crear
          una acción repetitiva, y condicionales, para prepararte para todos esos
          escenarios imprevisibles.
      9:
        text: Seguramente ya eres un programador intrépido. Estoy ansioso por ver
          lo que construyes. Esperamos que tus aventuras con el código no terminen
          aquí. ¡Buen viaje!
    teaching_csf_how_it_works:
      1:
        image: notes/teaching_cs_fundamentals_1.png
        text: Este curso se divide en etapas.
      2:
        image: notes/teaching_cs_fundamentals_2.png
        text: Las primeras etapas cuentan qué es la ciencia de la computación y presentan
          vocabulario clave.
      3:
        image: notes/teaching_cs_fundamentals_3.png
        text: A continuación, aprenderás a programar de la misma manera que tus estudiantes.
          Las etapas finales del curso te ayudarán a crear un plan para enseñar ciencias
          de la computación en tu aula. A lo largo del curso, verás ejemplos de lecciones
          conectadas, o en línea, así como lecciones sin conexión que no necesitan
          de una computadora.
      4:
        image: notes/teaching_cs_fundamentals_4.png
        text: La plataforma de aprendizaje seguirá tu progreso, para que puedas retomar
          desde donde dejaste, en cualquier momento.
    what_is_cs:
      1:
        image: notes/what_is_cs.png
        text: La programación es el conjunto de instrucciones que le das a una computadora.
          Las ciencias de la computación son un campo en el que las personas utilizan
          el poder de las computadoras para resolver grandes problemas. Esta ciencia
          incluye la programación y otras cosas, por ejemplo, cómo funciona Internet
          y su impacto en la sociedad, qué hacer con los grandes datos y cómo solucionar
          problemas importantes. Las ciencias de la computación se caracterizan por
          la resolución de problemas, el pensamiento crítico y la perseverancia.
    writing_first_program:
      1:
        image: notes/writing_first_program_1.png
        text: Code.org utiliza un lenguaje de programación visual del tipo 'arrastrar
          y soltar' llamado Blockly. Este lenguaje utiliza instrucciones coloridas
          llamadas bloques para crear programas y resolver desafíos.
      2:
        image: notes/writing_first_program_2.png
        text: Cada desafío tiene cuatro partes.
      3:
        image: notes/writing_first_program_3.png
        text: El espacio de juego está a la izquierda, donde se ejecuta tu programa.
      4:
        image: notes/writing_first_program_4.png
        text: Al centro se encuentra el área de la caja de herramientas, que tiene
          todos los bloques que necesitas.
      5:
        image: notes/writing_first_program_5.png
        text: A la derecha está el espacio de trabajo, hacia el cual arrastrarás los
          bloques para crear tu programa.
      6:
        image: notes/writing_first_program_6.png
        text: Arriba del espacio de trabajo están las instrucciones para cada desafío.
      7:
        image: notes/writing_first_program_7.png
        text: Si has arrastrado demasiados bloques desde la caja de herramientas,
          solo tienes que arrastrar el bloque que sobra de vuelta a la caja. Presiona
          Ejecutar para probar tu programa y Reiniciar para volver a intentarlo.
    repeat_block:
      1:
        image: notes/repeat_block.png
        text: El bloque 'repetir' te permite repetir el código dentro de él tantas
          veces como le digas.
    what_is_an_event:
      1:
        image: notes/what_is_an_event.png
        text: Un evento le indica a tu programa que escuche algo que sucede para que,
          cuando suceda, realice una acción. Una computadora podría escuchar un clic
          del ratón, un botón de flecha que se presiona o un toque en la pantalla.
    lesson_planning:
      1:
        image: notes/lesson_planning_1.png
        text: Las lecciones de Fundamentos de Ciencias de la Computación comienzan
          con resúmenes para que sepas qué abarcará cada lección.
      2:
        image: notes/lesson_planning_2.png
        text: Las lecciones tienen fases de preparación, actividades y cierres. Si
          quieres crear tus propios planes de lecciones, puedes tener en cuenta estos
          consejos.
      3:
        image: notes/lesson_planning_3.png
        text: 1. Intenta usar un diseño de plan de estudios en espiral. Introduce
          conceptos una vez y vuelve a revisarlos.
      4:
        image: notes/lesson_planning_4.png
        text: 2. Combina estas lecciones en línea con lecciones sin conexión para
          crear una experiencia de aprendizaje mixto.
      5:
        image: notes/lesson_planning_5.png
        text: 3. Divide tu plan de estudios en partes más pequeñas.
      6:
        image: notes/lesson_planning_6.png
        text: 4. Asegúrate de estar alineado con las normas locales y las habilidades
          de preparación para la universidad y las carreras profesionales.
    opd_closing:
      1:
        image: notes/opd_closing_1.png
        text: "¡Felicitaciones! Has completado el curso en línea de Enseñanza de los
          Fundamentos de las Ciencias de la Computación. Ahora eres parte de la creciente
          comunidad de docentes que preparan a sus estudiantes para el futuro."
      2:
        image: notes/opd_closing_2.png
        text: 'Echa un vistazo a estos recursos en caso de que necesites más soporte:
          1. forum.code.org 2. @teachcode en Twitter 3. studio.code.org '
    hoc_dance_warmup_2019:
      1:
        text: 'Hora del Código | Fiesta de baile: calentamiento'
      2:
        text: "¡Hola! Mi nombre es Miral Kotb y soy bailarina, desarrolladora de software
          y creadora de iLuminate."
      3:
        text: Las ciencias de la computación se relacionan con la creatividad de muchas
          maneras. Muchísimas, de hecho. Me refiero a que, una vez que tienes la capacidad
          de escribir software, puedes innovar en lo que sea. Yo lo hago en los trajes
          de luces. Hay tantas cosas que puedes hacer una vez que tienes las herramientas
          para escribir software, y las posibilidades son realmente infinitas.
      4:
        text: Durante la siguiente hora darás tus primeros pasos con las ciencias
          de la computación y programarás tu propia fiesta. Hemos reunido algunas
          canciones exitosas y un equipo de grandes bailarines con los que puedes
          jugar.
      5:
        image: notes/hoc_dance_warmup_2019_5.png
        text: Usarás bloques de código para elegir diferentes bailarines, cambiar
          sus movimientos de baile, hacerlos responder a la música y que puedan interactuar.
      6:
        image: notes/hoc_dance_warmup_2019_6.png
        text: Verás que tu pantalla está dividida en tres partes. A la izquierda está
          el espacio de juego. Aquí es donde aparecerán tus bailarines.
      7:
        image: notes/hoc_dance_warmup_2019_7.png
        text: El área del medio es la caja de herramientas. En este espacio verás
          nuevos bloques de código a medida que avances de lección.
      8:
        image: notes/hoc_dance_warmup_2019_8.png
        text: El área a la derecha es el espacio de trabajo. Puedes arrastrar bloques
          desde la caja de herramientas para crear tu programa.
      9:
        image: notes/hoc_dance_warmup_2019_9.png
        text: Las instrucciones para cada nivel estarán en la parte superior de la
          pantalla. Si necesitas una pista, simplemente haz clic en la bombilla.
      10:
        image: notes/hoc_dance_warmup_2019_10.png
        text: Para comenzar, hagamos un nuevo bailarín con este bloque rojo. Primero,
          arrástralo fuera de la caja de herramientas y ponlo debajo de este bloque
          naranja de "configuración". Este bailarín es un gato.
      11:
        image: notes/hoc_dance_warmup_2019_11.png
        text: Con esto puedes cambiar el lugar en el que aparece el bailarín en tu
          espacio de juego.
      12:
        image: notes/hoc_dance_warmup_2019_12.png
        text: Arriba del espacio de juego verás un menú para seleccionar música. Diviértete
          encontrando tus canciones favoritas entre una gran cantidad de opciones.
          Debajo del espacio de juego está el botón Ejecutar. Si lo presionas, aparecerán
          los bailarines de tu programa y sonará la música.
      13:
        text: "¡Pruébalo tú mismo! Si no puedes avanzar, ¡no te preocupes! Sigue adelante
          y, pronto, habrás creado tu propia fiesta de baile. Entonces, ¿qué vas a
          crear?"
    hoc_dance_events_2019:
      1:
        text: 'Hora del Código | Fiesta de baile: eventos'
      2:
        image: notes/hoc_dance_events_2019_2.png
        text: Mi nombre es Erin, soy ingeniera de software aquí en Code.org y ayudé
          a construir Fiesta de baile.
      3:
        image: notes/hoc_dance_events_2019_3.png
        text: Para que los diferentes movimientos de baile acompañen la música, puedes
          usar algo llamado eventos. Un evento le indica a tu programa que "escuche"
          algo que ocurre y que reaccione inmediatamente.
      4:
        image: notes/hoc_dance_events_2019_4.png
        text: Algunos ejemplos de eventos son esperar a un clic del ratón, un botón
          de flecha o pulsar en la pantalla.
      5:
        image: notes/hoc_dance_events_2019_5.png
        text: Aquí vamos a programar un bailarín para que realice un movimiento cuando
          presionas los botones de flecha en la pantalla o las teclas de tu teclado.
      6:
        image: notes/hoc_dance_events_2019_6.png
        text: Podemos usar el bloque de eventos "cuando flecha arriba" y conectarnos
          al bloque "una vez". Cuando alguien presiona la flecha hacia arriba, se
          ejecuta el código adjunto al bloque "cuando flecha arriba". ¿Qué movimiento
          de baile elegirás?
      7:
        image: notes/hoc_dance_events_2019_7.png
        text: Asegúrate de que el tipo de bailarín que elijas coincida con uno de
          los bailarines que creaste dentro del bloque "configuración", o es posible
          que no suceda nada.
      8:
        image: notes/hoc_dance_events_2019_8.png
        text: Eventualmente, puedes crear más eventos como este para que tus bailarines
          realicen diferentes movimientos con cada tecla. Pruébalo y, con unas pocas
          líneas de código, puedes crear tu propio baile interactivo.
    hoc_dance_measures_2019:
      1:
        image: notes/hoc_dance_measures_2019_1.png
        text: 'Hora del Código | Fiesta de baile: compases'
      2:
        image: notes/hoc_dance_measures_2019_2.png
        text: Soy Aloe Blacc, cantante, compositor y artista. Creo que las ciencias
          de la computación son el futuro, y por eso son realmente importantes de
          aprender. Además, pienso que es importante que las personas tengan el control
          de la tecnología que controla literalmente sus vidas.
      3:
        image: notes/hoc_dance_measures_2019_3.png
        text: El evento que vamos a usar ahora escuchará un cambio en la canción.
          Ese cambio hará que tu bailarín dance un nuevo baile.
      4:
        image: notes/hoc_dance_measures_2019_4.png
        text: Los bailarines profesionales practican su coreografía contando los ritmos
          de la canción. En música, un compás se refiere a un cierto número de ritmos.
          En las canciones más populares, un compás tiene cuatro tiempos.
      5:
        image: notes/hoc_dance_measures_2019_5.png
        text: Para que tus bailarines se muevan, necesitarás un bloque verde de eventos.
          Este bloque de eventos dice, "después de 4 compases".
      6:
        image: notes/hoc_dance_measures_2019_6.png
        text: Si arrastra un bloque púrpura "hacer siempre", puedes escoger un baile
          para el bailarín. Al estar debajo del bloque de evento "después de 4 compases",
          tu bailarín esperará cuatro compases de la canción antes de empezar a bailar.
      7:
        image: notes/hoc_dance_measures_2019_7.png
        text: Ten en cuenta el contador de compases en la parte superior de la pantalla.
      8:
        image: notes/hoc_dance_measures_2019_8.png
        text: Mira y escucha el evento que activará el código del baile. En ese momento
          comenzará a moverse el bailarín.
    hoc_dance_properties_2019:
      1:
        text: 'Hora del Código | Fiesta de baile: propiedades'
      2:
        text: Mi nombre es María. Soy estudiante de tercer año en la Universidad de
          Washington y futura ingeniera en Amazon.
      3:
        text: Me encantan las ciencias de la computación porque incorporan la resolución
          de problemas y el pensamiento crítico, y porque, luego de horas de trabajar
          en algo, puedes obtener resultados realmente geniales y gratificantes.
      4:
        text: Hasta ahora, has tenido la oportunidad de jugar con diferentes tipos
          de bailarines y los has programado para que hagan diferentes tipos de baile.
          Pero, ¿cómo funcionan estos movimientos?
      5:
        text: Cada movimiento de baile está compuesto por una serie de imágenes llamadas
          fotogramas. Cada fotograma es un poco diferente del anterior. Cuando se
          ejecuta tu programa, la computadora muestra un fotograma tras otro. Aparecen
          tan rápido que parece que el bailarín se mueve. Ese es el secreto detrás
          de toda animación.
      6:
        text: No solo puedes cambiar los movimientos de tu bailarín, sino también
          sus propiedades. Las propiedades describen cosas como la posición del bailarín
          en la pantalla, su tamaño y su color.
      7:
        image: notes/hoc_dance_properties_2019_7.png
        text: Para cambiar las propiedades de un bailarín, usarás un bloque establecer.
          Usemos un bloque establecer para que nuestros bailarines se vean más pequeños.
          Primero, arrastra el bloque establecer a tu programa.
      8:
        image: notes/hoc_dance_properties_2019_8.png
        text: Luego selecciona un bailarín que te gustaría cambiar y escribe el tamaño
          en que aparecerá en la pantalla. El tamaño completo es 100. Si eliges un
          número más bajo, eso hará que el bailarín sea más pequeño. Cuanto más pequeño
          es el bailarín, más lejos se ve.
      9:
        image: notes/hoc_dance_properties_2019_9.png
        text: Con el bloque 'establecer' también puedes cambiar las dimensiones, la
          rotación, la posición y el color de un bailarín. Puedes jugar con estas
          propiedades para hacer todo tipo de cambios y conectarlos a diferentes partes
          de la canción.
      10:
        image: notes/hoc_dance_properties_2019_10.png
        text: Recuerda que solo puedes establecer las propiedades de un bailarín que
          ya existe. Asegúrate de que tu bloque venga después del bloque "Hacer un
          nuevo bailarín".¡Aprovecha para ser creativo y divertirte!
    hoc_dance_congrats_2019:
      1:
        text: 'Hora del Código | Fiesta de baile: ¡que comience la fiesta!'
      2:
        text: "¡Felicitaciones! Acabas de aprender los aspectos básicos de las ciencias
          de la computación. Ahora puedes usar estos bloques para crear tu propia
          fiesta de baile y compartirla con tus amigos."
      3:
        text: Si miras en la caja de herramientas, encontrarás algunos bloques nuevos
          que no has visto antes. Por ejemplo, puedes usar el bloque 'disposición'
          para organizar a los bailarines de diferentes maneras en la pantalla.
      4:
        text: Echa un vistazo y comienza a experimentar con estos nuevos bloques y
          características. ¿Crearás una coreografía perfecta para tu baile con tu
          canción favorita?
      5:
        text: "¿Una competencia de baile con tus amigos?"
      6:
        text: "¿U otra cosa?"
      7:
        image: notes/hoc_dance_congrats_7.png
        text: Al final del tutorial podrás compartir un enlace a tu creación con tus
          amigos. ¡Diviértete a pura imaginación!
