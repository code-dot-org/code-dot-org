"ar":
  slides:
    maze_intro:
      1:
        image: |
          notes/hoc1_1.jpg
        text: "مرحباً في أول ساعة من البرمجة! دعنا نتجه إلى تذوقك الأول للبرمجة ."
      2:
        image: notes/hoc1_2.jpg
        text: "بلوكلي هي لغة برمجية مرئية تمكنك من سحب وافلات القطع لكتابة الكود البرمجي."
      3:
        image: notes/hoc1_3.jpg
        text: تتم كتابة معظم الاكواد البرمجية، ولكن بلوكلي هو مرئي. بحيث ان كل القطع
          تطابق سطر من الكود البرمجي " الحقيقي ".
      4:
        image: |
          notes/hoc1_4.jpg
        text: "أنت ستتعلم أسس علوم الكمبيوتر، والمفاهيم التي يتم استخدامها في أي مكان
          من صنع تطبيقات للتحكم في تجول المريخ."
      5:
        image: |
          notes/hoc1_5.jpg
        text: "البرنامج هو مجموعة من الإيعازات التي يتبعها جهاز الكمبيوتر الخاص بك."
      6:
        image: |
          notes/hoc1_6.jpg
        text: الهدف من برنامجك الاول هو  توصيل "الطيور الغاضبة" عبر المتاهة لضرب "
          المخلوق الاخضر".
      7:
        image: |
          notes/hoc1_7.jpg
        text: "الجانب الايسر هو مكان تنفيذ المتاهة. حيث يمكنك ايجاد الارشادات لكل
          لغز والتي تكون اسفل المتاهة."
      8:
        image: |
          notes/hoc1_8.jpg
        text: شريط الادوات الوسطي يمتلك مجموعة من الاوامر المتعلقة بلعبة "الطيور الغاضبة"
          . والتي ستستخدم في بناء الكود البرمجي الخاص بك.
      9:
        image: |
          notes/hoc1_9.jpg
        text: "على الجانب الايمن توجد مساحة عمل بيضاء حيث يتم عليها سحب القطع من شريط
          الادوات من اجل بناء برنامجك . لحذف القطعة الغير مرغوب بها , عليك القيام
          بسحبها الى سلة المهملات الواقعة في الزاوية."
      10:
        image: |
          notes/hoc1_10.jpg
        text: كل قطعة تقوم بأمر واحد. بحيث إذا سحبت قطعة "تقدم للامام" الى مساحة العمل
          البيضاء وضغطت على  "تنفيذ البرنامج" ، سوف يتحرك الطير مسافة واحدة في المتاهة.
      11:
        image: |
          notes/hoc1_11.jpg
        text: "للقيام بأكثر من عمل أو حركة واحدة ، يمكنك سحب العديد من القطع إلى مساحة
          العمل البيضاء وربطهم معاً. سوف يقوم الطائر بنفيذ الأوامر من الأعلى إلى الأسفل."
      12:
        image: |
          notes/hoc1_12.jpg
        text: إذا قمت بتنفيذ برنامج وترغب في إصلاحه ومحاولة تنفيذه مرة أخرى، اضغط
          على الزر "اعادة تعيين".
      13:
        image: |
          notes/hoc1_13.jpg
        text: "دعنا نذهب للحصول على المخلوق الاخضر!"
    artist_intro:
      1:
        image: |
          notes/stage5_1.jpg
        text: "مرحبا، أنا جر! كل فريق سباق سيارات بحاجة إلى علماء الكمبيوتر من اجل
          الفوز.  هم يحللون البيانات من السيارة لجعلها تسير بسرعة."
      2:
        image: |
          notes/stage5_2.jpg
        text: "في هذه الألغاز، أنت ستكون رسام يرسم خط في كل مكان."
      3:
        image: |
          notes/stage5_3.jpg
        text: هذه القطعة تقول "التقدم للامام" بمقدار 100 بكسل . " البكسلات هي النقاط
          الصغيرة الموجودة في شاشة الكمبيوتر.
      4:
        image: |
          notes/stage5_4.jpg
        text: 'هذه القطعة تقول "الانعطاف يمينا بدرجة 90" . " هذا سيمكن الرسام من الانعطاف
          بنفس المقدار مثل قطعة "اتجه" المستخدمة في الغاز المتاهة. '
      5:
        image: |
          notes/stage5_5.jpg
        text: "اضغط على السهم في أي من هذه القطع لتغيير مقدار تحرك الرسام للامام او
          الانعطاف. العب من اجل ان تكون على دراية باستخدام هذه القطع الجديدة."
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: "مرحبا، أنا باولا! في هذه الألغاز، انت ستصبح المزارع الذي يجب ان يقوم
          بجعل حقله الزراعي مسطحا تماما من اجل البدء بزراعة المحاصيل."
      2:
        image: notes/stage9_2.jpg
        text: "بامكانك مساعدتها بأزلة جميع الاكداس من التراب و ملاْ جميع الثقوب."
      3:
        image: notes/stage9_3.jpg
        text: "القطعة الجديدة ازالة مجرفة تراب واحدة من الكدس وتملأ مجرفة واحدة من
          التراب في الحفرة."
      4:
        image: notes/stage9_4.jpg
        text: "الاكداس والثقوب مختلفة الاحجام, لذلك يجب ان تخبر المزارع كم عدد من
          الجرافات تحتاج."
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: "مرحبا، أنا كاتي! واحدة من الأمور الأكثر إثارة حول علوم الحاسوب هي ان
          البرامج الحاسوبية تمكن أن تكون تفاعلية."
      2:
        image: notes/flappy02.jpg
        text: "أي وقت شخص ينقر أو الصنابير أو أنواع على جهاز الكمبيوتر أو الهاتف،
          الذي يولد هذا الحدث، وهناك بعض التعليمات البرمجية التي تقرر ما يجب القيام
          به عند حدوث الحدث."
      3:
        image: notes/flappy03.jpg
        text: 'على سبيل المثال، يمكن أن يكون لديك معالج الحدث الذي يقول "عندما يتم
          النقر على الماوس، تشغيل صوت" '
      4:
        image: notes/flappy04.jpg
        text: "هل سمعت من أي وقت مضى من فلابيبيرد اللعبة؟ باستخدام معالجات الأحداث،
          نحن ذاهبون للتعرف إلى البرنامج الخاص بنا إصدار مخصص من فلابيبيرد!"
      5:
        image: notes/flappy05.jpg
        text: "التعليمات البرمجية التي سوف تكتب ينطوي على سحب وإسقاط القطع التي تمثل
          أوامر لجهاز الكمبيوتر. تحت غطاء محرك السيارة، يمثل كل من هذه الكتل البرمجية
          الحقيقية."
      6:
        image: notes/flappy06.jpg
        text: 'إذا كنت نلقي نظرة على مساحة العمل، وهناك بعض الكتل الخضراء التي تمتلئ
          لك--هذه "معالجات الأحداث" '
      7:
        image: notes/flappy07.jpg
        text: إذا كنت تريد الطيور إلى رفرف عند النقر بالماوس، يمكنك القيام بذلك عن
          طريق ربط كتلة "رفرف" إلى معالج الحدث المناسب، والآن في اللعبة الخاصة بك
          كلما قمت بالنقر فوق الماوس، الطيور سوف رفرف.
      8:
        image: notes/flappy08.jpg
        text: "في كل لغز هذا النشاط سوف نقدم أنواع جديدة من الأحداث ككتل خضراء على
          مساحة العمل، ويمكنك أن تقرر القطع المناسبة لإضافة ردا على تلك الأحداث."
      9:
        image: notes/flappy09.jpg
        text: "عند ظهور القائمة المنسدلة السهم بمثل هذا، وهذا يعني يمكنك تغيير الإعدادات--مثل
          ما الصوت للعب عندما يضرب flappy الأرض."
      10:
        image: notes/flappy10.jpg
        text: "عليك أن تكون قادراً على إنشاء اللعبة الخاصة بك ومشاركتها مع أصدقائك
          في اللغز النهائي. استمتع!"
    loop_times:
      1:
        image: |
          notes/hoc2_1.jpg
        text: "مرحباً، أنا مارك! دعنا نتعرف على الحلقات التكرارية. بإستخدام الحلقات
          التكرارية يمكنك أن تأمر الكمبيوتر بتكرار أي مجموعة من الإجراءات عدة مرات،
          بالاف أو حتى بلايين من المرات."
      2:
        image: |
          notes/hoc2_2.jpg
        text: "في هذا اللغز، نريد أن نقدم الطير الى الامام 5 خطوات من اجل الوصول الى
          المخلوق الاخضر ."
      3:
        image: |
          notes/hoc2_3.jpg
        text: يمكننا استخدام قطعة "أكرر" الجديدة لمساعدتنا حل المشكلة.
      4:
        image: |
          notes/hoc2_4.jpg
        text: بدلاً من سحب 5  قطع "تقدم للامام" ...
      5:
        image: |
          notes/hoc2_5.jpg
        text: يمكننا وضع قطعة "تقدم للامام" داخل قطعة "أكرر" وكتابة عدد معين في القطعة
          من اجل ان تقوم بتكرار الامر العديد من المرات.
      6:
        image: |
          notes/hoc2_6.jpg
        text: 'وهذا أمر مهم: يمكنك وضع أمر واحد أو أكثر داخل القطعة "أكرر".'
      7:
        image: |
          notes/hoc2_7.jpg
        text: تمتع بإستخدام قطعتك "أكرر" الجديدة!
    loop_until:
      1:
        image: |
          notes/hoc3_1.jpg
        text: مرحبا، أنا كريس. قبل أنضمامي إلى "ميامي هيت"، ذهبت إلى معهد "جورجيا
          للتكنولوجيا" لدراسة "علوم الكمبيوتر". دعونا نجرب قطعتنا الجديدة، قطعة "أكرر
          حتى".
      2:
        image: |
          notes/hoc3_2.jpg
        text: "ماذا اذا لم نعرف كم مسافة التقدم بين الطير والمخلوق الاخضر ؟"
      3:
        image: |
          notes/hoc3_3.jpg
        text: إذا وضعنا قطعة "تقدم للامام" داخل قطعة "أكرر حتى" ، سوف يتقدم الطير
          إلي الأمام حتى يصل للمخلوق الاخضر (أو يتحطم في الجدار).
      4:
        image: |
          notes/hoc3_4.jpg
        text: هذا مهم كما في السابق، نحن نستطيع أن نضع قطع متعددة داخل قطعة "أكرر
          حتى"، من اجل تكرار القطع جميعا.
    if:
      1:
        image: |
          notes/hoc4_1.jpg
        text: 'مرحبا، أنا بيل! دعونا نتعلم مفهوم أساسي جديد: عبارات "اذا". هذه هي
          الطريقة التي تجعل أجهزة الكمبيوتر تتخذ القرارات.'
      2:
        image: |
          notes/hoc4_2.jpg
        text: أنت بنفسك تستخدم  عبارات"اذا" يومياً. قبل الذهاب إلى الخارج كل صباح،
          أنت تقول 'اذا' كانت تمطر بالخارج، يجب ان ارتدي الجاكيت.
      3:
        image: |
          notes/hoc4_3.jpg
        text: يمكن أن نقول للزومبي التحقق "إذا كان" يوجد طريق على اليسار، و "إذا وجد
          طريق على اليسار، نحن بأستطاعتنا أن نجعلة يدور في هذاك الاتجاه.
      4:
        image: |
          notes/hoc4_4.jpg
        text: لكتابة الكود البرمجي لهذا اللغز، دعونا نسحب قطعة "اذا كان" ونضعها داخل
          قطعة "اتجه لليسار".
      5:
        image: |
          notes/hoc4_5.jpg
        text: الآن، إذا وضعنا قطعة "تقدم للامام" فوقها قطعة "أكرر" حول كل شيء، في
          كل مرة يتحرك الزومبي، هو سوف يتحقق من إذا يوجد طريق على اليسار ومنعطف .
          أمر "أكرر" هو  حاسم،لانه يقوم بالتحقق من وجود منعطفاً في كل خطوة.
      6:
        image: |
          notes/hoc4_6.jpg
        text: إذا كانت العبارات هامة جداً في علوم الكمبيوتر. من أولى البرامج التي
          كتبتها هى لعبة تيك تاك تو، وكانت هناك عبارة تقول "اذا" كان الشخص الآخر على
          وشك الفوز، أمنع الاماكن التي تسمح لهم بالفوز.
      7:
        image: |
          notes/hoc4_7.jpg
        text: أستمتع بإستخدام قطعة "اذا كان" !
    if_else:
      1:
        image: |
          notes/hoc5_1.jpg
        text: مرحبا، إسمي سالوني. استخدم "علوم الكمبيوتر" للمساعدة في حل المشاكل الصحيّة
          والطبيّة. دعنا نتعلم عن المكعب البرمجي "أذا والا". انها تشبه قطعة "اذا"،
          ولكن قد أضيف جزءً إضافي في النهاية و هى كلمة "والا".
      2:
        image: |
          notes/hoc5_2.jpg
        text: إذا وضعت قطعة "تقدم للامام" في موقع الحدث حيث تقول القطعة "شغل" و "اتجه
          لليسار" حيث تقول "والا" وهذا يعني أن الزومبي سيختار بين خيارين أثنين. 'اذا'
          كان الطريق سالكا، الزومبي سوف يتقدم للمام، وإلا  (لن تكون الطرق سالكة)،
          وسوف يتجه الزومبي يساراً.
      3:
        image: |
          notes/hoc5_3.jpg
        text: تماما مثل قطعة "اذا"، يمكننا أن نضع قطع "اذا والا" داخل قطع "أكرر" بحيث
          تستمر الزومبي بمتابعة التقدم وسوف تستمر قطعة "اذا والا" من التحقق إذا كان
          هناك أي مكان أخر للإنعطاف.
      4:
        image: |
          notes/hoc5_4.jpg
        text: "الآن، وصل هؤلاء الزومبي إلى حيث ينتمون!"
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: بيان إذا-آخر هو قرار بين شيئين. دعونا نرى كيف يمكننا استخدام عبارة إذا-آخر
          مع شركائنا الأصدقاء "Scrat" السنجاب.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: هذه الكتلة تبدو نفس كتلة "لو"، ولكن هناك جزءا إضافية في أسفل التي تقول
          "آخر". إذا وضعت كتلة "المضي قدما" حيث تقول "لا" و كتلة "الاتجاه يسارا" حيث
          تقول "آخر"، وهذا يعني "Scrat" السنجاب سوف يتحرك إلى الأمام إذا كان هناك
          مسار أو طريق مفتوح. إذا لم يكن هناك مسار للتقدم، سوف يتحول "Scrat" إلى اليسار.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: إتخاذ القرار والقيام بأحد الإجراءات الأثنين بناء على هذا القرار. وتماما
          مثل كتلة "لو"، يمكنك وضع كتل "إذا-آخر" داخل كتلة "تكرار".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "الآن دعنا نساعد السنجاب سكارت للحصول على ثمرة البلوط!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: "مرحباً، أنا برينا، مهندسة في إينستاجرام. الدالة عبارة عن بعض الأسطر
          من الكود البرمجي التي تريد استخدامها مراراً وتكراراً، لذا بدلاً من كتابة
          الكود البرمجي عدة مرات، يمكنك فقط استخدام قطعة واحدة."
      2:
        image: notes/stage13_2.jpg
        text: "نحن في طريقنا لمعرفة كيفية تعريف الدوال . تعرف الدالة بنجمة في الزاوية.
          يتم كتابة اسم الدالة في السطر العلوي."
      3:
        image: notes/stage13_3.jpg
        text: القطع التي تذهب داخل التعريف تخبرنا بعملها . لذلك هذه تعريف الدالة التي
          تسمى "املأ 5" والتي تصنع من قطعة "كرر" و قطعة "املأ".
      4:
        image: notes/stage13_4.jpg
        text: التعريف يجلس على مساحة العمل . ولكن مزارعنا لايرغب بتنفيذ الدالة حتى
          نقوم بسحب قطعة "دالة املأ 5" من قسم الدول.
      5:
        image: notes/stage13_5.jpg
        text: دعنا نضع "المتعة" مرة اخرى في "الدالة!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'مرحبا، أنا ماكندي! دعنا نتعرف على قطعة "اكرر طالما." '
      2:
        image: notes/stage9_6.jpg
        text: قطعة "اكرر طالما" ستنفذ اي شي في داخلها ما دام العبارة في الاعلى صحيحة.
      3:
        image: notes/stage9_7.jpg
        text: "على سبيل المثال، إذا كان المزارع يقف على التكدس ، سستمر الجرافة بالازالة
          في حين لايزال يوجد تكدس تحتها."
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: "مرحبا، أنا ترينا، أعمل على بيكسار. لقد عملت على مجموعة من الأفلام،
          من ضمنها فلم شريك."
      2:
        image: notes/stage11_2.jpg
        text: هذه هي حلقة "العداد" الجديدة. ستقوم بتنفيذ الإجراءات مراراً وتكراراً،
          ويمكنك أن تجعل الإجراءات تتغير قليلاً في كل مرة.
      3:
        image: notes/stage11_3.jpg
        text: في هذا المثال، حلقة"العداد" تقول " قم بالعد مع العداد من 50 إلى 90 من
          10" ، وداخله يوجد لدينا قطعة "ارسم مربع". اسحب قطعة "العداد" من قسم "المتغيرات"
          الى مكان "الطول".
      4:
        image: notes/stage11_4.jpg
        text: "وهذا يعني الرسام سيقوم برسم مربع طول اضلاعه 50 بكسل، ثم يضيف 10 بكسلات
          ورسم مربعاً طول اضلاعه 60 بكسل. ثم نضيف 10 بكسلات اخرى ورسم المربعات حتى
          تصل إلى 90. لذا سوف نحصل على مربعات من 50، 60، 70، 80 و 90."
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: "مرحباً، أنا جانيت، وأنا مهندسة في Zynga."
      2:
        image: notes/stage15_2.jpg
        text: "ماذا اذا كنا نرغب برسم مجموعة من المثلثات ويكون اطوالهم بأحجام مختلفة؟"
      3:
        image: notes/stage15_3.jpg
        text: "يمكن أن نكتب جميع الكود البرمجي هذا باليد، أو يمكن أن نستخدم دالة مع
          المعلمات."
      4:
        image: notes/stage15_4.jpg
        text: للقيام بهذا، اضغط فوق النجمة الزرقاء في "رسم المثلث" تعريف الدالة .
          ثم اسحب "اسم الادخال" إلى قطعة "الادخال".
      5:
        image: notes/stage15_5.jpg
        text: ثم إذا قمت بكتابة "الطول" في المكان حيث يقول "x" ثم اضغط "ادخل" سوف
          تقوم بإنشاء الإدخال الطولي للدالة الخاصة بك.
      6:
        image: notes/stage15_6.jpg
        text: ثم اضغط على النجمة. الآن، انت ترغب بالضغط على قسم المتغيرات وسحب قطعة
          "الطول" الى قطعة "التقدم للامام" لتعريف الدالة الخاصة بك. واسحب بعيداً قطعة
          الأرقام القديمة.
      7:
        image: notes/stage15_7.jpg
        text: لاستخدام الدالة الخاص بك مع المعلمات، اضغط على قسم الدوال واسحب الدالة
          "ارسم مثلث مع الطول".
      8:
        image: notes/stage15_8.jpg
        text: "الآن يمكنك استخدام قطعة الرياضيات لإدخال أرقام مختلفة لرسم مثلثات ذات
          أحجام مختلفة."
    hoc_wrapup:
      1:
        image: |
          notes/hoc6_1.jpg
        text: "تهانينا! مع حل اللغز الاخر، انت لقد كتبت الكود البرمجي الذي يمكن أن
          يخبر اي روبوت عن كيفية العثور على طريقها من خلال المتاهات غير المتفرعة أو
          الأنفاق بأي طول، سواء أكان الزومبي، الطيور، مارس روفر (عربة المريخ)، أو
          حتى سيارة ذاتية القيادة."
      2:
        image: |
          notes/hoc6_2.jpg
        text: الفكرة أو المفاهيم الأساسية التي أستخدمتها هى الجوهر لكل البرامج أو
          التطبيقات التي أستخدمتها في أي وقت مضى.  تعلمنا عن الحلقات المتكررة، عبارة
          "أكرر حتى", عبارة "أذا" و أيضاً عبارة "أذا والا".
      3:
        image: |
          notes/hoc6_3.jpg
        text: "إذا احببت الساعة الاولى من البرمجة ، قم بزيارة code.org لمواصلة تعلمك
          علوم الكمبيوتر! بمجرد إكمالك 20 ساعة من دورتنا التعليمية، ستكون قد أتقنت
          أساسيات البرمجة، ويمكن البدء بتعلم كيفية كتابة تطبيقات الهاتف الخليوي وأوامر
          الروبوت والألعاب، وأختر ما شئت."
      4:
        image: |
          notes/hoc6_4.jpg
        text: "التكنلوجيا غيرت كل شي نقوم به، ولا يهم إذا كنت صغير أو كبير فالبرمجة
          متعة و إبداع، ويمكن للجميع تعلمها!"
    20_wrapup:
      1:
        image: |
          notes/bird.png
        text: "بيان الملاحظات قريبا!"
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "مرحباً، اسمي لِندسي وأنا عارضة أزياء وممثلة وأبرمج التطبيقات الخاصة
          بي. هيا نبرمج معاً لننضم إلى آنا وإلسا فر رحلتهما لاكتشاف سحر وجمال الجليد."
      2:
        image: notes/frozen1_2.jpg
        text: "سنقوم بإنشاء ندفات الثلج والأشكال المختلفة بينما نتزلج على الجليد ونصنع
          شتاء عجائب يمكنكم مشاركته مع أصدقائكم."
      3:
        image: notes/frozen1_3.jpg
        text: "خلال الساعة القادمة، سنتعلّم أساسيات البرمجة. عادةً ما تكون البرمجة
          التقليدية من خلال النص، ولكن سنقوم باستخدام بلوكلي، وهو استخدام الكتل المرئية
          التي يمكنكم سحبها وإفلاتها لكتابة البرامج. هكذا يتعلّم الطلاب الأساسيات،
          حتى في الجامعات لكن في الحقيقة لا زلتم تكتبون التعليمات البرمجية."
      4:
        image: notes/frozen1_4.jpg
        text: "البرنامج هو عبارة عن مجموعة من الإرشادات التي تخبر الكمبيوتر ما يجب
          فعله. دعونا نكتب تعليمات برمجية، أو برنامج، ليساعد إلسا في إنشاء خط بسيط.
          سوف نستخدم هذا في وقت لاحق لإنشاء أنماط أكثر تعقيداً."
      5:
        image: notes/frozen1_5.jpg
        text: "تنقسم الشاشة إلى ثلاثة أجزاء رئيسية. على اليسار، يوجد السطح الجليدي
          حيث يجب تشغيل برنامجك. وتتم كتابة التعليمات الخاصة بكل مستوى تحت سطحها تماماً."
      6:
        image: notes/frozen1_6.jpg
        text: "أما المساحة الوسطى، فهي علبة الأدوات، وكل من هذه القطع البرمجية هي
          أعمال من الممكن لآنا وإلسا القيام بها."
      7:
        image: notes/frozen1_7.jpg
        text: المساحة البيضاء على اليمين تُسَمّى مساحة العمل، وهنا سنقوم ببناء برنامجنا.
          للتحرك على سطح الجليد، سنقوم باستخدام القطعة البرمجية "تقدم للأمام".
      8:
        image: notes/frozen1_8.jpg
        text: الآن, القطعة البرمجية "القدم إلى الأمام" تقول, "التقدم إلى الأمام بمقدار
          100 بكسل." عندما نضغط على "تشغيل", ماذا يحصل؟ إلسا تتحرك إلى الأمام بمقدار
          معين على الشاشة, في الحقيقة 100 بكسل! البكسل في الواقع هي مربعات صغيرة جداً
          على شاشة كمبيوترك.
      9:
        image: notes/frozen1_9.jpg
        text: الكتلة البرمجية الأخرى التي لدينا في هذا اللغز تقول "استدر يميناً بمقدار
          90 درجة."وعندما نستخدم هذه الكتلة "استدر يميناً", هذا يجعل إلسا تستدير بقدار
          معين. يمكنك أن تتحكم بالمقدار الذي تريد لإلسا أن تستديره. الزاوية يتم قياسها
          من المسار الذي كانت فيه إلسا. لذالك, هذا يعني استدارة بمقدار 90 درجة. وأيضاً
          يعني استدارة بقدار 120 درجة.
      10:
        image: notes/frozen1_10.jpg
        text: "تذكر, يمكنك ان تغير رقم البكسل والدرجات بالنقر على الأسهم الموجودة
          بجانبهم."
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "مرحبا, أنا باولا! أجهزة الكمبيوتر جيدة حقاً بتكرار العمليات. يمكنك
          أن تعد إلى 10, 20, أو 100. ولكن الكمبيوتر يمكنه العد حتى إلى البليون أو
          الترليون. ذلك لن يكون ممل بالنسبة له و إنه سوف يستغرق فقط بضعة ثواني. سواء
          كان عد, أو رسم أو أي شيء آخر--أجهزة الكمبيوتر يمكنها تكرار الأشياء مئات
          أو حتى بلايين المرات."
      2:
        image: notes/frozen2_2.jpg
        text: في البرمجة, نسمي هذه بحلقة. الحلقة هي كيف تكرر تعليماتك البرمجية مراراً
          وتكراراً, من أجل اللغز القدم, هدفك هو مساعدة أنا في إنشاء مربع بواسطة تعليمة
          "التكرار".
      3:
        image: notes/frozen2_3.jpg
        text: أية كتل من التعليمات البرمجية الموضوعة داخل كتلة "التكرار" سوف تتكرر
          بتسلسل, بعدد من المرات كما تريد.
      4:
        image: notes/frozen2_4.jpg
        text: لكي ترسم مربع, يمكنك استخدام كتل "التقدم أماماً" و "الإستدارة يميناً"
          أربع مرات. ولكن الطريقة الأسهل أن تطلب من الكمبيوتر "التقدم أماماً" و "الإستدارة
          يميناً" بمقدار 90 درجة مرة واحدة, وبعدها تطلب منه أن يكرر هذين التعليمتين
          4 مرات, تحتاج أن تضع كتلتي " التقدم أماماً" و "الإستدارة يميناً" بداخل كتلة
          "التكرار".
      5:
        image: notes/frozen2_5.jpg
        text: تذكر, يمكنك تغيير العدد في كتلة "التكرار" إلى أي شيء, و سوف يتم تكرار
          القطع البرمجية التي في داخلها ذلك العدد من المرات.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: "مرحبا, أنا كريس بوش. أنا لاعب كرة سلة محترف و اكتب التعليمات البرمجية
          في الكلية."
      2:
        image: notes/frozen3_2.jpg
        text: "واحد من أهم المفاهيم في علم الحاسوب كيفية تعريف الأوامر الجديدة. معظم
          لغات الكمبيوتر تحوي فقط حوالي 100 من كلمة أو أمر. وحقاً، بالفن والمهارة
          تكمن في تحديد الكلمات الجديدة الخاصة بك خارج هذه القطع البرمجية."
      3:
        image: notes/frozen3_3.jpg
        text: "بمجرد دراستك للكمبيوتر وكيفية القيام بعمل مرة واحدة باستخدام هذا التسلسل
          من الأوامر، يمكنك عمل الاسم الخاص بك لهذا العمل حتى يكون من السهل تكرار
          ذلك في وقت لاحق. عند تعريف الأوامر الخاصة بك وتعطيها اسماً، تسمى الدالة."
      4:
        image: notes/frozen3_4.jpg
        text: "مرحبا، أنا جيس. عند البرمجة بواسطة القطع البرمجية، يمكنك استخدام دالات
          إذا كانت هناك مجموعة من الإجراءات التي ترغب في استخدامها عدة مرات. على سبيل
          المثال، لقد كتبت الكود لإنشاء مربع."
      5:
        image: notes/frozen3_5.jpg
        text: 'يمكنك تسمية هذه كدالة تسمى "إنشاء مربع" '
      6:
        image: notes/frozen3_6.jpg
        text: "الان لديك مربع جديد يمكنك استخدامه عدة مرات لإنشاء عدة مربعات."
      7:
        image: notes/frozen3_7.jpg
        text: "يمكن استخدام الكثير من الأشكال البسيطة لإنشاء أنماط أكثر تعقيداً. في
          اللغز القادم، الكود التي كتبته مؤخراً لعمل الدائرة متاح لك كوظيفة جديدة
          يمكنها عمل دوائر ذات أحجام مختلفة. هل يمكنك استخدامه لمساعدة إلسا في إنشاء
          أنماط معقدة وجميلة في الثلج؟"
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: سوف نقوم بإنشاء العاب باستخدام "بلاي لاب". الالعاب الرائعة لها قصة،
          ولكل قصة ممثلين. سوف نتعلم كيفية عمل ممثلينا مثل السحرة، الكائنات الفضائية،
          والحيوانات التي تتكلم وتتحرك، وتتفاعل مع بعضها البعض. بنهاية هذا البرنامج
          التعليمي، يمكنك تصميم لعبة من الصفر وتقاسمها مع أصدقائك.
      2:
        image: notes/playlab_intro_2.png
        text: "الشاشة مقسمة إلى ثلاثة أجزاء رئيسية. على اليسار مساحة اللعبة حيث سيتم
          تشغيل برنامجك. التعليمات لكل مستوى مذكورة في الأسفل."
      3:
        image: notes/playlab_intro_3.png
        text: "المنطقة الوسطى يوجد بها صندوق الأدوات، وكل من هذه المربعات هي قطعة
          من الكود. المساحة البيضاء على اليمين تسمى مساحة العمل، وهذه المنطقة التي
          سوف نبني برنامجنا."
      4:
        image: notes/playlab_intro_4.png
        text: لنبدأ، ستحتاج إلى ربط المربعات الخاصة بك إلى أمر "عند الركض" البرتقالي.
          يمكنك ربط أوامر متعددة معا عن طريق سحبهم حتى ترى الخط الأصفر, وبعدها سيلتصقون
          معا.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          في اللغز الأول, ممثلنا هو البطريق وسوف نجعله يقول "مرحباً" عبر سحب القطعة البرمجية للنطق, و ربطها في قطعة عند التشغيل, و كتابة "مرحباً" بداخلها.
          يمكننا أيضاً جعل البطريق يتحرك عبر سحب القطعة البرمجية تحرك لليمين و تحرك لليسار.
          حالما تحصل على قطعك البرمجية في الأمكنة, أضغط على زر التشغيل لترى ما قد قمت ببرمجته.
      6:
        image: notes/playlab_intro_6.png
        text: "إبدأ وعند النهاية, سوف تكون قادر على إنشاء العابك الخاصة مع جميع أنواع
          اللاعبين القادرين على التفاعل, تحول لسعيد أو حزين, سجل النقاط, أو ارمي كرة
          نارية, أو حتى أزيلوا بعضكم البعض. كل شيء عائد لك و للعبة التي تريد إنشائها."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: |-
          الأن, سوف نقوم بتعلم شيئاً يستخدمه جميع مبرمجي الالعاب يومياً.
          ويسمونه بالأحداث.
          الحدث يخبر برنامجك بالاستماع عندما يحدث شيئاً معيناً. وعند حدوث ذلك الشيء, سوف يقوم الحدث باتخاذ فعل.
      2:
        image: notes/playlab_events_2.png
        text: "بعض الأمثلة من الأحداث الاستماع لنقر الفأرة أو مفتاح السهم، أو النقر
          على الشاشة."
      3:
        image: notes/playlab_events_3.png
        text: |-
          هنا, سوف نقوم بإنشاء روبوت فضائي يقوم بتحية أهل الأرض عندما يقوم اللاعب بالضغط عليه.
          سوف نستخدم القطعة البرمجية "عند الضغط" و ارفاق القطعة البرمجية "إنطق" لها. عندما يضغط اللاعب على الروبوت الفضائي, كل شيء مرفق بحدث القطعة البرمجية "عند الضغط" سوف يقوم بالتنفيذ. ماذا سيقول المخلوق الفضائي الخاص بك ؟
      4:
        image: notes/playlab_events_4.png
        text: هناك أيضاً قطعة برمجية تسمى "عند التمرير". إذا قمت بإرفاق القطعة البرمجية
          "تحرك" لها, يمكنك بدء تحريك ممثلك نحو الأعلى, نحو الأسفل, نحو اليمين أو
          نحو اليسار. خطوة بخطوة, لعبتك تصبح أكثر تفاعلاً.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: هذه هي القصطعة البرمجية "تكرار إلى الأبد". كل شيء داخل هذه القطعة البرمجية
          سوف يحدث للأبد في هذه اللعبة.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: إذا أردت لممثل أن يقوم بشيء ما بشكل متكرر, بدون الحاجة لجعل اللاعب أن
          يقوم بأي شيئ, سوف نقوم بوضع هذه القطع البرمجية داخل القطعة البرمجية "تكرار
          إلى الأبد".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: |-
          في اللغز التالي, هدفنا هو مساعدة دورية حرس الحدود لهذه المملكة, يساراً ويميناً بشكل متكرر.
          تَعلَّم كيف تعمل الأوامر المتكررة, والتي سوف توفر عليك الكثير من الوقت لاحقاً عندما تريد إنشاء لعبتك الخاصة.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: "هذه هي القطع البرمجية الخاصة بالرسم. أختر القطع الصحيحة لجعل الممثل
          يتحرك بحيث أن يُملأ الخطوط الرمادية."
      2:
        image: notes/C1_artist_intro_2.png
        text: "هؤلاء هم القطع البرمجية للقفز. عندما تستخدم هذه القطع, سوف يقوم فنانك
          بالتحرك وكنه لن يرسم, لذلك استخدم هذه القطع للقفز إلى الخط الرمادي التالي."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: أليس النحل بشيء رائع؟ في المجموعة القادمة من الألغاز, هدفك هو مساعدة
          النحل للوصول للأزهار للحصول على الرحيق من الأزهار و الطيران للمنحلة لصنع
          العسل. سوف تحتاج للقطع البرمجية "أحصل على الرحيق" و "أصنع العسل" لهذا التمرين.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: "كل زهرة لها رقم مختلف من الرحيق: 1,2,3 أو أكثر. نحن نعلم كم من الرحيق
          يوجد في الزهور الحمراء, من خلال الرقم الصغير في الزاوية. لذلك أحرص على الحصول
          على كل الرحيق الموجود في الزهرة قبل المضي للزهرة التالية. كذلك, كل منحلة
          يمكن أن تحتوي على عدد محدد من الرحيق: 1,2,3 أو أكثر. لذلك أحرص على صنع عسل
          على القدر الذي يمكن أن تحتويه كل منحلة."
      3:
        image: notes/C1_bee_level_intro_3.png
        text: "إذا كنت قادر على الحصول على كل الرحيق و صنع كل العسل, بهذه الحالة تكون
          قد نجحت و انتقلت للمرحلة التالية. وبخلاف ذلك, سوف تحتاج لتجربة هذا اللغز
          مرة أخرى. استرخي و قم بأخذ استراحة ذهنية و فكر ماهو شعورك بأن تكون مبرمج!"
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "الحلقة الغير منتهية هي تكرار غير منتهي للنشاط. ولضرب المثال أنا انظر
          لصورة و لاحقاً أزيح نظري عنها, وبهذا أعيد تكرار الفعل ذاته مرات عديدة. بالتالي
          هي الدوران في حلقة غير منتهية معيدةً الفعل ذاته مرات عديدة."
      2:
        image: notes/C1_bee_loops_2.png
        text: في هذه المرحلة, نريد للنحلة أن تجمع 3 رحيق من الزهور. وعوضاً عن استخدام
          القطعة البرمجية "أحصل على الرحيق", سوف نحتاج لتكرار القطعة البرمجية للحصول
          على الرحيق ثلاث مرات. أضغط "نفذ" و انظر إن أصبت بذلك. رائع!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: "هذا الدرس يسمى الحدث الكبير. وهو يتحدث عن كيفية التحكم و فعلياً تغيير
          الطريقة التي يعمل بها البرنامج على الفور وذلك باستخدام الأحداث, مثل الضغط
          على زر أو النقر على الفأرة."
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: "في هذا الدرس, سوف يتم التحكم بك من خلال جهاز تحكم ورقي. وهي بالظبط
          مثل لعبة فيديو حقيقية."
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: "الحدث هو فعل يسبب وقوع شيء ما. وهو مثل عندما تقوم بالنقر على زر الفأرة
          و تقوم بتحميل صفحة على الانترنت. هذا هو الحدث. عندما تقوم بلمس شاشة الجهاز
          اللوحي الخاص بك للتمرير, فهذا حدث أيضاَ. الأحداث هي طريقة رائعة للسماح للمستخدم
          بتوجيه برنامجك بالطريقة و الوقت الذي يريدونه."
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: "الأشياء تحدث ونحن نستجيب لها. نحن نشعر بالجوع فنذهب للثلاجة. ونحن نسمع
          ساعي البريد قد أتى ووضع الرسائل في صندوق البريد فنذهب حينها لصندوق بريدنا
          للحصول على البريد. هذه الأمثلة هي تماماً مثل الأحداث التي تتجسد بنقر زر
          معين أو تحريك عصا التحكم. هؤلاء هم أشياء تحدث و تحفزنا للقيام بشيء ما."
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: في ألعاب الفيديو, يوجد حدث يسمى "تحديث" وهو يحدث 30 أو 60 مرة في الثانية
          الواحدة. ولمبرمجي ألعاب الفيديو هذا يكاد أن يكون أهم بكثير كحدث من الزر
          أو من عصا التحكم.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: الحدث الرئيسي الذي ننظر له هو أن "تحديث" يحفز الوقوع. وعندها نتحقق من
          عصا التحكم في النقر. لذلك نقول, " ياللهول, هل قام أحدهم بضغط الزر في هذا
          الإطار؟ نعم أو لا؟" بدون أحداث, اللاعب لا يمكنه اللعب, لا يمكنك القفز, لا
          يمكنك التحكم بما يجري. لعبة الفيديو لا يمكنها تحريك أي شيء.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: "عليك أن تعلم أن الفشل هو جزء من البرنامج. ولكن إن ثابرت, فسوف تصبح
          أفضل و أكثر متعة لك. المثابرة هو أسم اللعبة. ابقى معها, سوف تحب ذلك."
      2:
        image: notes/C1_building_foundation_2.jpg
        text: |-
          يسمى هذا الدرس بناء مؤسسة. في هذا الدرس, سوف نعمل في مهمة التي تعتبر صعبة حقاً.
          سوف تعرف كيفية صنع منشأة لها على الأقل نفس طول إحدى هذه المكعبات و يجب أن تكون قوية كفاية لتتحمل وزن الكتاب.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: "قد نمر بأوقات الأشياء التي صنعناها لا تعمل. و قد نمر بأوقات نصبح فيها
          محبطين و نريد الإستسلام. قد نمر بكثير من هذه اللحظات. و لكن إذا استمرينا
          بالمحاولة, و اعطينا أفضل ما لدينا مرة بعد مرة, عندها سنكون متأكدين أننا
          سنحقق ما نريد قريباً."
      4:
        image: notes/C1_building_foundation_4.jpg
        text: "المثابرة لا تعني سوى الصمود عندما ترغب بالإستسلام، إذا كنت تريد صنع
          شيء جديد ومختلف فلا بد أن تواجه العديد من الإخفاقات في الطريق."
      5:
        image: notes/C1_building_foundation_5.jpg
        text: The trick to persistence is choosing to keep on going and learn from
          your failures instead of quitting because you're frustrated. Frustration
          actually just means there's something wonderful around the corner. So don't
          quit before you get to it. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hi, my name is Miral Kotb and I'm the creator of Iluminate. In my work,
          there is something we use in both dances and in programming lightsuits.
          And that is loops! Loops are repeating an action over and over.
      2:
        image: notes/C1_getting_loopy_2.png
        text: When you repeat something multiple times, like my actions to keep the
          hula hoop spinning, I'm performing a loop of that action. This is a loop.
          This is a loop. And this is a loop.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Today we're going to have a dance party. We'll act out loops with a
          new dance. The Iteration. We're going to learn about loops using a dance.
          You will learn a couple of easy steps and repeat them over and over to complete
          the dance.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands
          behind your head. Put your hands on your waist. Lift your left hand up.
          Lift your right hand up. Pretty simple, right? You will discover that you
          can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: We actually do use loops in our dancing. The dancers are wearing computers,
          all in the same network. I might loop the lights through to the same dancers
          over and over again. In the loop I might have an iteration where I'll say
          you want to go loop through these six dancers over and over again and then
          within the loop you want to increase the speed of the light. And that's
          all created through loops. Loops are important in computer science because
          they make our work shorter and easier.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: This lesson is called Happy Maps. Today we're gonna help our furry little
          friend Flurb get to her fruit.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Make your Flurb go to your fruit. To do this you'll need to figure out
          which way the Flurb needs to go and direct her with arrows. In order for
          the Flurb to get to the apple, what direction does the Flurb have to go?
          Line to make it go up.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Create your algorithm by gluing arrows next to the map that you're trying
          to solve. The second one it's the same but it's going down.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: It's like programming with paper. And that's it!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Debugging is finding and fixing problems. There are lots of ways to
          debug problems. One of the easiest is to move step by step until where you
          find where something goes wrong. Here I'm trying to do a back handspring
          on the beam but I keep falling off.
      2:
        image: notes/C1_maze_debugging_2.png
        text: I walked through each part step by step and realized where my mistake
          was. I wasn't putting my hands on the beam correctly. So I tried another
          back handspring on the beam with my new hand position and I got it. I was
          really glad I debugged my back handspring.
      3:
        image: notes/C1_maze_debugging_3.png
        text: "لمعرفة المزيد حول تصحيح الأخطاء، نبدأ مع مجموعة من القطع فعلا في المرحلة.
          ستلاحظ أن هذه الكتل لن تحصل على الهدف. نحن بحاجة إلى تصحيح الحل وإصلاحه.
          ما هو الخطأ؟ ستلاحظ أن كنت في حاجة للحفاظ على الذهاب الغرب كتلة واحدة أكثر."
      4:
        image: notes/C1_maze_debugging_4.png
        text: Let's fix this by adding another west block and hitting run to see if
          you got it right. Yay, you got it!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle
          and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: You need to drag the blocks over from the toolbox to the workspace.
          Make sure it's under the "when run" block and when you think you've got
          the right solution, then you can click "Run" and watch the bird go to the
          pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: To get the bird to the pig in this level... rather than drag three North
          blocks on to the workspace, you will use the "repeat" block. Drag the "repeat"
          block on to the workspace and enter the number 3. Then drag the "move North"
          block into the "repeat" block and hit "Run" to see if you got it right.
          Congratulations, you got it!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: This lesson is called move it, move it. Together we're going to write
          a program to get our friends from the starting with the compass rose to
          the smiley face goal.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: But the smiley is face down and only one person knows how to get there.
          Let's get this program started.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: A program is an algorithm that has been coded into something that can
          be run by a machine. Most of us think of a program as something that we
          write for a computer. Programs are really good for that but they're also
          helpful in other places. You can make your own game or even program a robot
          to do things for you.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: My name is Jeremiah. Hi! I am seven years old. I love playing on my
          mom's computer but I always get permission first. "Mom, can I go on the
          computer? Sure honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: I love my mom's computer because I can go on the internet. The internet
          is kind of like your neighborhood. You can visit cool places, you can talk
          to family and friends and you can learn lots of new things.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Yesterday, I visited a zoo that's near my house. I saw a baby zebra.
          I took her picture and changed the color of her stripes, then added a hat
          and added it to my collection of wacky animals. Awesome! Later, I went to
          a place far far away. I visited Kenya. That's a country in Africa. Lots
          of zebras live there.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Sometimes on the internet I talk to peeople I know, like my grandma
          who lives in another state. Hi grandma! She's making me cookies that she'll
          send me for my birthday. "Yummy, I wish the internet had smellorama!" I
          can talk to different people on the internet, like my cousin but I only
          talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score!
          I also like to draw and create new things and share it with my friends.
          Cool! Sometimes I visit websites where I learn new things but I always stick
          to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The internet is a super fun place. But just like when you cross a street
          in your neighborhood, you also have to be careful when you go online. Here
          are three rules to remember. Rule number 1: Always ask your parents first.
          Rule number 2: Only talk to people you know. Rule number 3: Stick to places
          that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to
          log on again to see where I can visit next.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Today we're going to learn about Pair Programming. In pair programming
          you work as a team. Why should two people use one computer? Because two
          heads are better than one. In pair programming you and your partner are
          going to sit down together at one computer and you are both going to work
          on the same project.
      2:
        image: notes/C1_pair_programming_2.png
        text: In pair programming, one person is the driver and the other person is
          the navigator, just like driving a car. The driver sits at the computer
          and is the one using the keyboard and mouse or touchscreen and controlling
          the main actions of the computer. The other person is the navigator. The
          navigator helps the driver by answering the driver's questions and pointing
          out potential problems or mistakes.
      3:
        image: notes/C1_pair_programming_3.png
        text: Communication is key to successful pair programming. No insults, be
          respectful, don't be a bossy navigator, because nobody likes a backseat
          driver. You and your partner should always be talking. The driver can explain
          what she or he is doing. And the navigator can help suggest what to do next.
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver
          focuses on the details. Both roles are important. Pair programming is all
          about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: This lesson is called planting a seed and it's going to help us understand
          algorithms. Algorithms are specific instructions that explain the order
          in which to do something. Even everyday things like eating breakfast or
          brushing your teeth are algorithms that require small steps to get a job
          done.
      2:
        image: notes/C1_planting_seed_2.png
        text: Computers can be really smart but they can only understand you if you
          tell them exactly what you want step by step. The great thing about algorithms
          is that if you follow the instructions in order, you can do something that
          you didn't know how to do ahead of time. It's like following a recipe.
      3:
        image: notes/C1_planting_seed_3.png
        text: Today we're going to plant our own seeds using an algorithm. Create
          your own algorithm by cutting apart the pictures. Select the pictures that
          show steps in planting a seed and arrange those pictures in the correct
          order.
      4:
        image: notes/C1_planting_seed_4.png
        text: Now, it's time for you to see if your algorithm works. Follow the steps
          in the algorithm very carefully. Are they in the correct order? Did you
          succeed in planting a seed by following the algorithm? It's like programming
          with pictures!
      5:
        image: notes/C1_planting_seed_5.png
        text: When we want to make chocolate, there are many big steps to that process
          and each of those big steps has a set of smaller steps and there are different
          recipes or algorithms depending on how we want the chocolate to taste. Each
          step is important, even the small ones, so that without one step, the rest
          of them cannot be completed. Creating algorithms that others can understand
          is really important. That's why each step has to be written down so that
          no matter who does it, the result is the same.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your
          story will have actors and you will be able to make these actors talk and
          interact with each other. Start thinking of what kind of story you want
          to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: The cat's always been afraid of the dog and what if the cat figures
          out that the dog is trying to be nice? The "when run" block starts everything.
          The "move" block will move your character and the "say" block will make
          your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: This is the "when actors collide" block which you can link up to the
          other blocks.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: I was making the dog come over and say "Hi" but then the cat got scared
          so it ran away. "Ahh" If there was more time, it would have been a happy
          ending. The end!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee.
          As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: See if you can spell the word they give you in the box below the stage.
          But bee careful! Moving the wrong direction will add letters you don't want.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: In this example, your goal is going to be to move the bird to get the
          pig. Now, we're going to be able to use the repeat block in order to be
          able to do this very easily. You can either do this by giving the computer
          a move forward command five times in order to advance the bird one step
          each time to the pig or you can just tell the computer to move forward once,
          and then tell it to repeat that five times and it'll do the same thing.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: In order to do this, you drag your move forward command and then you
          put it inside the repeat block. And you can click on it and tell it how
          many times you  to repeat the block to tell it how many steps you want it
          to take forward.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: One more thing is you can put as many commands as you want inside the
          repeat block. So in this example, you're telling it to move forward and
          turn left, which it'll do five times. Have fun!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: You wouldn't even qualify for the race if you don't have people who
          are proficient in computer science because of how much data the cars collect
          and the necessity to be able to have people that can write programs to figure
          out how you continue to figure out how to build performance.
      2:
        image: notes/C2_artist_intro_2.png
        text: In these puzzles, you'll be an artist that uses a pencil to draw different
          shapes. Wherever your artist goes, it will draw a line behind you.
      3:
        image: notes/C2_artist_intro_3.png
        text: To move around the canvas, you'll use the move forward block. Here the
          move forward block says move forward by 100 pixels. When we hit run, what
          happens? The artist moves forward a certain amount and that amount is 100
          pixels. Pixels are basically very tiny squares on your computer screen.
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees.
          And when we drag that out that makes our artist turn a certain amount. So
          you can play around with how far you want the artist to turn. This is a
          90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values
          by clicking the arrows next to the numbers for pixels and degrees. Enjoy
          drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that
          is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: This is useful when we don't know how much nectar or honey to get, as
          we see here with this question mark.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: In this example, we're going to say IF the purple flower has nectar
          greater than 0, get nectar. That will tell our bee to keep getting nectar
          as long as it's there. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials
          on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options.
          Sometimes people think of this as only 1s and 0s. But you can represent
          binary with combinations of on or off, up and down, in and out or really
          any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hi, I'm Orion and I program robots here at Play-im. All computer and
          robot brains at their most fundamental level are little electronic gates.
          When the gate is open, electricity can flow through and when it's closed,
          electricity can't.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: An example of binary on the robot is the robot's eyes. The robot's eyes
          are LEDs and those are lights that are either on or off. It's a binary system,
          one or the other. We can use the lights to represent binary numbers. If
          we have a set of robots, we can say that the first robot is the 1s place
          and the second robot is the 2s place, the third robot is the 4s place and
          so on. That's how you represent a binary number. The robots will do it with
          their binary eyes and count it out for you.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions
          based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: I want to walk to the park but first I have to decide whether I should
          bring an umbrella or not. So I look out the window. If it's cloudy, I'm
          going to take my umbrella. Else, I'll take some sunglasses. I think I'd
          better take the umbrella. What I see and hear determines what I take to
          the park.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Conditionals are used in games too. Today we're going to practice using
          conditionals with a card game. In this game, the card that I draw determines
          what my friends are going to do. If I draw a seven, everyone claps. Else,
          everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals.
          Give it a try! Conditionals are what make computers seem smart. A computer
          program that includes conditionals can react to the user and change its
          course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Think about your favorite video game. Do you earn more points for some
          actions than you do for others? This occurs because the computer is using
          conditionals. It's the way a computer makes a decision. How about, if you
          hit the target, you earn ten points. Else, you lose three. When you know
          how conditionals work, you can create all kinds of exciting games.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is
          something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Let's debug this code by slowing down the speed and watching it as it
          goes through each block step by step.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Oh, there's the problem! The cat's whiskers are 75 pixels long, not
          25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Have you ever heard of debugging a program? This is the way you figure
          out what's not working. When you debug code, you identify and remove errors.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Here we're given a few blocks already in our workplace. We're going
          to use the step button to walk through the blocks, step by step, to see
          if this is the right solution and where we may need to fix it.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Looks like there's our problem! We need one more move forward block.
          The step button helps us debug our problem by identifying where the error
          is so we can fix it.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: On your head you hold your hat and your smarts will tell you where you're
          at and to think about the zoo, and to nod hello to you and you! Use your
          head when you're online to keep what's yours inside your mind and to know
          how to be safe, how to give your life some private space! From your head
          down to your toes, pause, think about it. From your feet up to your nose,
          pause and think online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Use your heart to grow and grow, and to give yourself a healthy glow,
          and to make a valentine, tell someone that you'll be mine! Use your heart
          when you're online, feel what's right and always kind, and show your friends
          respect, to be fair and nice on the internet. From your head down to your
          toes, pause, think about it. From your feet up to your nose, pause and think
          online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Use your arms to hug your pet, to keep your clothes from getting wet,
          and to wear your favorite sleeves and to help you fly and make believe.
          Use your arms when you're online, to take break and balance time and leave
          your tech behind and to find yourself a tree to climb. From your head down
          to your toes, pause, think about it. From your feet up to your nose, pause
          and think online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use your gut to store your food, and to listen to its growling mood,
          to make a belly flop, and to feel the gas in soda pop. Use your gut when
          you're online, to know to watch for certain signs, and to let it guide the
          way and tell you when it's not ok. From your head down to your toes, pause,
          think about it. From your feet up to your nose, pause and think online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: So think with your head, and feel with your heart, balance with your
          arms, listen to your gut, online. Use your legs to run and kick, and to
          jump and bounce on a pogo stick, and to dance around the block, and to skip
          along in your smelly socks. Use your legs when you're online, to stand up
          to bullies who cross the line, and remember to stand tall, be nice to creatures
          great and small.
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet
          up to your nose, pause and think online! So think with your head, and feel
          with your heart, balance with your arms, listen to your gut, stand up with
          your legs. From your head down to your toes, pause, think about it. From
          your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched,
          copied, shared, broadcast and is permanent. What kind of digital footprint
          are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: This lesson is called "Graph Paper Programming" and it's all about algorithms.
          Today we're going to learn how to write programs that show each other how
          to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: An algorithm is a list of instructions for completing a task. We'll
          follow this set of instructions to make the bowl. Algorithms are really
          helpful when you need someone else to understand how to do something.
      3:
        image: notes/C2_graph_paper_3.png
        text: If you're writing an algorithm for a computer, you have to break it
          down to little tiny steps. So finish this row and go to the next, then the
          next one, and you'll be done.
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can
          recreate that same piece again, or I can teach someone else to do it. Put
          the glass in the kiln, fuse it together, follow the rest of the instructions
          to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when
          we are programming our artist. We already have some blocks out on our stage
          but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag
          out the repeat block and put the moveforward and turn right blocks inside
          the repeat block. When we hit run, the artist will repeat those steps four
          times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: A loop is a repetition of activity. Going into a hive to inspect, I
          look at a frame, and then I put it back. I repeat that same activity multiple
          times. It's looping around, doing the same activity multiple times.
      2:
        image: notes/C2_bee_loops_2.png
        text: This is the repeat block. Whatever you put inside the repeat block will
          repeat those actions the number of times that you tell it to. For example,
          in this level, rather than drag out move forward and get nectar three times,
          we're going to just drag them out once each and repeat the action three
          times. That made it easy!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Usually programming is all in text but we'll use Blockly which uses
          visual blocks that you drag and drop to write programs. Under the hood,
          you're still creating code. To start off, we're going to build code for
          a program that will help this Angry Bird move through a maze to get to the
          evil pigs that stole its eggs.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly is split into three main parts. On the left is the bird's maze,
          where your program will run. The instructions for each level are written
          below the maze. This middle area is the toolbox and each of these blocks
          is a command that the bird can understand. The white space on the right
          is called the workspace and this is where we'll build our program.
      3:
        image: notes/C2_maze_intro_3.png
        text: If I drag the move block to our work space and press "Run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C2_maze_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "Run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: If you ever want to delete a block, just remove it from the stack and
          drag it to the trash can. After you've hit run, you can always hit the reset
          button to get the bird back to the start. Now let's get those pigs!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things
          that people do everyday. Cookie recipes and directions for building a birdhouse
          are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Today we're gonna make, create, and test an algorithm for a paper airplane.
          But first, we need to break this big project into easy to follow small steps.
          For making a paper airplane, we need to decide what steps to take and in
          what order to take them.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: You'll create your algorithm by first cutting apart the pictures. Next,
          you'll select the 6 pictures that show the steps needed to make a paper
          airplane and arrange those pictures in the correct order. After you have
          everything in order, you will trade algorithms with another student team
          to test out the algorithm to see if the algorithm works. A well designed
          algorithm is super important to making the best paper airplane.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: When we want to make chocolate, there are many big steps to that process.
          And each of those big steps has its own set of smaller steps. And there
          are different recipes, or algorithms, depending on how we want the chocolate
          to taste. Each step is important, even the small ones. So without one step,
          the rest of them cannot be completed. Creating algorithms that others can
          understand is really important. That's why each step has to be written down,
          so no matter who does it, the result is the same.
    C2_playlab_createstory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: So far you've been making an animation or a story that does the exact
          same thing every time you run it. Now you can make an interactive game that
          you can actually play.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: There are some new blocks to try out. There's the "when arrow" block
          and the "move actor" block. You can put these blocks together to move the
          actors around with the arrow keys. And there are some blocks that do stuff
          when actors collide or are clicked. Check them out and have fun!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Today we're going to do relay programming. It's all about programming
          under pressure and debugging the mistakes that sometimes happen when you
          work really quickly or in teams. We'll use graph paper programming to simulate
          coding, and use relay races to simulate having a deadline.
      2:
        image: notes/C2_relay_programming_2.png
        text: In relay programming, teams will be racing to finish a graph paper program.
          You have to check your teammate's work, or debug it, fix it if there's a
          mistake, add your arrow, and run back and tag your teammate.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms
          or code. There are lots of ways to debug problems. One of the easiest is
          to move step by step until you find where something goes wrong, then fix
          it.
      4:
        image: notes/C2_relay_programming_4.png
        text: Here, I'm trying to do a back handspring, but I keep falling off. I
          walk through each part, step by step, and realize where my mistake was.
          My coach showed me I wasn't putting my hands on the beam correctly. So I
          tried another back handspring on the beam with my new hand position, and
          I stuck it! I was really glad I debugged my back  handspring. We figured
          it out! Debugging is finding and fixing problems. Nice, good job!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: One thing that computers are really good at is repeating commands. As
          a person, you'd get really bored if you had to do the same thing lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times, and not get bored and be able to carry that out really well.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: So for example if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than a century to actually
          write out all of those emails to everyone. But with just a few lines of
          code, I can have a system send an email to everyone on Facebook wishing
          them a happy birthday. So that's what loops are, and why they're valuable,
          and something that computers can do very well.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: In this example your goal is going to be to move the bird to get the
          pig.  Now we're gonna be able to use the "repeat" block in order to be able
          to do this very easily. You can either do this by giving the computer a
          "move forward" command five times in order to advance the bird one step
          each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Or you can just tell the computer to "move forward" once, and then tell
          it to "repeat" that 5 times, and it will do the same thing. So in order
          to do this you drag your "move forward" command, and then you put it inside
          the "repeat" block.And you can click on it and tell it how many times you
          want to repeat the block to tell it how many steps you want it to take forward.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Now one more thing is you can put as many commands as you want inside
          the "repeat" block. So in this example you're telling it to move forward
          and turn left, which it will do five times. All right good job and have
          fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C3_artist_functions_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square, so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code. It will get done
          for us. We've added that concept to our programming language.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: You wouldn't even qualify for the race if you don't have people who
          are proficient in computer science because of how much data the cars collect
          and the necessity to be able to have people that can write programs to figure
          out how you continue to figure out how to build performance.
      2:
        image: notes/C3_artist_intro_2.png
        text: In these puzzles, you'll be an artist that uses a pencil to draw different
          shapes. Wherever your artist goes, it will draw a line behind you.
      3:
        image: notes/C3_artist_intro_3.png
        text: To move around the canvas, you'll use the move forward block. Here the
          move forward block says move forward by 100 pixels. When we hit run, what
          happens? The artist moves forward a certain amount and that amount is 100
          pixels. Pixels are basically very tiny squares on your computer screen.
      4:
        image: notes/C3_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees.
          And when we drag that out that makes our artist turn a certain amount. So
          you can play around with how far you want the artist to turn. This is a
          90 degree turn.
      5:
        image: notes/C3_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values
          by clicking the arrows next to the numbers for pixels and degrees. Enjoy
          drawing with your artist!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: When you put a loop inside of another loop, we call that a nested loop.
          For example, here we're given the code already to draw one triangle with
          sides of length 100 pixels using the repeat times block set to three, once
          for each side of a triangle.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: But we want to draw six triangles. In order to do that, we're going
          to take that loop and place it inside of another repeat times block. Pretty
          cool!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that
          is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: This is useful when we don't know how much nectar or honey to get, as
          we see here with this question mark.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: In this example, we're going to say IF the purple flower has nectar
          greater than 0, get nectar. That will tell our bee to keep getting nectar
          as long as it's there. Ta-dah!
    C3_bee_debugging:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Have you ever heard of debugging a program? This is the way you figure
          out what's not working. When you debug code, you identify and remove errors.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Here we're given a few blocks already in our workplace. We're going
          to use the step button to walk through the blocks, step by step, to see
          if this is the right solution and where we may need to fix it.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Looks like there's our problem! We need one more move forward block.
          The step button helps us debug our problem by identifying where the error
          is so we can fix it.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define
          new commands, how to add your own words to a computer language. Most computer
          languages have only about one hundred words or commands. The art and magic
          is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: We do this all the time in sports. For example, in basketball, you start
          by learning how to dribble, how to do a lay-up, how to rebound. Once you've
          learned these really basic moves, you learn new moves and put together these
          building blocks, like a pick and roll or give and go. You can then go from
          there to do more complex plays. Once you learn that play and give it a name,
          everybody on the team knows how to do it.
      3:
        image: notes/C3_bee_functions_3.png
        text: Similarly once you've taught a computer how to do an action once using
          these sequences of commands, you can make up your own name for that action
          so it's easy to repeat it later. When you define your own command and give
          it a name, that's called a function. Now we're going to use functions to
          help the bee.
      4:
        image: notes/C3_bee_functions_4.png
        text: In this example, our function is called get 2 nectar, this green block
          right here. We know what get 2 nectar does by looking at this grey box which
          is the function definition. If we look inside there, the get 2 nectar is
          going to get nectar and then get nectar again. Always look at what's inside
          the grey box so that you know what these green function blocks can do.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Now we're going to use nested loops with the bee. We're given some starter
          code which tells the bee to move forward and get nectar three times and
          then turn right. Let's take that whole piece of code and nest it inside
          another repeat block and set to repeat three times. Done!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: You're going to be creating your very own bounce game that you'll be
          able to share with your friends! How cool!
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow
          keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: We can do this by linking the when left arrow block to the move left
          block and the when right arrow block to the move right block. Give it a
          go and you'll be programming your own bounce game in no time!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: This lesson is computational thinking. Sometimes learning a new game
          can be tough, right? At first it might seem really confusing and sometimes,
          there's no one there to teach you the rules, so you have to figure it out
          on your own.
      2:
        image: notes/C3_computational_thinking_2.png
        text: The good news is that you can get better at figuring things out on your
          own when you know a few thinking tricks. These tricks are unique ways for
          looking at and solving problems. In this lesson, you'll learn about four
          tricks and practice them with your friends to figure out the rules to a
          game.
      3:
        image: notes/C3_computational_thinking_3.png
        text: When you break down a big problem into smaller pieces, you're using
          your brain to decompose the big problem. Once we've decomposed the big problem
          into several smaller problems, we can go on to our next trick, which is
          called pattern match.
      4:
        image: notes/C3_computational_thinking_4.png
        text: That's when we look for similarities between things. Once I find the
          things that are the same, I can figure out what things are different. When
          I remove those differences, that's called abstraction.
      5:
        image: notes/C3_computational_thinking_5.png
        text: After I have figured out the steps to solving a problem, I can put those
          steps in a specific order called an algorithm so that anyone can use my
          directions to solve that problem. We're going to use these four steps to
          figure out how to play the game with no rules. By the end of the game, you'll
          be able to play something that looks like this!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: This lesson is called crowdsourcing. In this lesson we'll use a deck
          of cards to learn about how much easier some things can be to do in groups
          instead of trying to do them all alone. So grab some friends and make something
          awesome. Crowdsourcing is getting help from a large group of people to finish
          something faster.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of
          amateurs and professionals link their computers together to search through
          billions and billions of pieces of information. Looking for things like
          the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: When you see a movie, each second of the movie is 24 individual pictures,
          we call those frames. So every one of those pictures needs to be created
          and rendered and put all together. My team and I, we're all software developers.
          We all work together to create a piece of software that actually creates
          an image, creates the final image that you see on screen. That's a tool
          that artists and other developers can use as part of their teamwork and
          their process to be able to create the images that they want on screen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: For example, in Finding Nemo, when Crush and Squirt and all their friends
          are flying through the East Australian Current. You're seeing images of
          water flowing by, you're seeing the colors on the back of the turtle, you're
          seeing the sides of the fish. All of those things are generated through
          math and computer programs that we write, that we then give to the artist
          and they take that to create that final image and tweak it and make it look
          beautiful and look fun.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer
          games. Have you ever thought about how computer programmers turn the steps
          of a game into a program? The first step in creating computer games and
          in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: The thinking step of problem solving produces an algorithm, which is
          a step by step plan for solving a problem or finishing a task. In this lesson,
          you'll create an algorithm for a dice race game. Then you'll ask your friends
          to try out your plan to see if they can follow the steps to play the game.
          After the programmer is sure the steps are correct, it's time to translate
          the algorithm into a program with language that the computer can understand.
      3:
        image: notes/C3_dice_race_3.png
        text: Almost everything we do every day requires an algorithm, a list of steps
          you can follow to finish a task. Think about getting ready for school or
          planning a fun day with your friends or fixing a snack. To complete any
          of those tasks, you'll need to break it down into smaller steps and sometimes
          the steps must be in a specific order.
      4:
        image: notes/C3_dice_race_4.png
        text: Think about making a sandwich. It doesn't matter which ingredient you
          get out of the cabinet first. But you can't spread the peanut butter until
          you open the jar. Computers need algorithms and programs to show them how
          to do even simple things that we can do without thinking about it.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program
          is the actual instructions given to the computer to make it happen. An algorithm
          has to be translated into a program before a computer can run it. Breaking
          a task into steps called an algorithm is sometimes difficult. But like any
          new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: While loops are pretty similar to what you do in everyday life. Imagine
          you are washing your car, you'll keep scrubbing until it's clean. While
          it's not clean, continue to scrub. You're evaluating these things all the
          time.
      2:
        image: notes/C3_farmer_while_2.png
        text: We've got a new look to help your farmer out. It's called a while-block.
          It's pretty simple actually. While a statement at the top is true, do something.
          For example, while there's a pile move one hayful. Go ahead and give it
          a try with your farmer.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: This lesson is functional suncatchers. You'll be creating these pretty
          suncatchers using functions. There are several steps in creating one of
          these suncatchers. Some of the steps you have to repeat many times.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is
          figure out what we have to repeat over and over again. We can group these
          steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: But there is more to creating a beautiful suncatcher than following
          precise steps. Sometimes we want to be creative and change the color of
          the beads we're using. We can make every suncatcher unique if we use different
          colored beads.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the
          beads as variables which is a word that means a placeholder for information
          that can change. Have fun creating beautiful suncatchers using functions
          and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place
          and similar to this busy road. Messages like cars are zooming along to get
          to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: Acting out how the internet works will help you understand what's happening
          when you use the internet. You'll learn how messages get from your computer
          to a favorite website or from a friend to an email inbox. Just like it's
          easier to navigate busy roads when you know the roads and can read the signs,
          traveling the internet is not so complicated when you know what goes on
          behind the scenes.
      3:
        image: notes/C3_internet_3.png
        text: Sending messages on the internet is a little bit like sending messages
          in the mail but with a few differences. I'm here at Google.com. The IP address
          for this website is this number. You can think of an IP address as your
          return address in the mail. Let's imagine that I want to send a message
          in the mail to someone in the office down the there. Do you see URL and
          the IP address on that door? I've written this message and hit send.
      4:
        image: notes/C3_internet_4.png
        text: Unlike the Postal Service, the first thing that happens is that the
          internet breaks the message into smaller parts so it can be sent more easily.
          These small parts are called packets. Each packet of the message is delivered
          to the destination one at a time. These packets are all put together in
          the right order so that the receiver can read the message correctly. Of
          course, there are many more things to learn about how the internet works
          but this is a great start. You're on your way to becoming a savvy internet
          user! Be sure to tell your family and friends what you've learned!
      5:
        image: notes/C3_internet_5.png
        text: My name is Amanda Camp and I'm a software engineer at Google. I work
          on a team that works on a backend server that stores profiles and contacts.
          In my job, we think a lot about how contacts can be sent to other devices,
          such as your phone. Most people have a lot of contacts, you might have say,
          1000 contacts and we don't want to send all of those contacts at once to
          your phone because it's too large of a message. Similar to the way the internet
          breaks large messages down into packets, we use a concept called paging
          where we might only send your phone 100 contacts at a time and let your
          phone respond to us and ask for the next 100.
      6:
        image: notes/C3_internet_6.png
        text: The most exciting thing about software is the fact that it can impact
          the entire world. I first learned to program when I was about nineteen.
          I think I was already a sophomore or a junior in college. The first program
          I remember writing is something that converted Celsius to Fahrenheit. I
          like programming because I like helping people. I can write programs at
          Google that help people all over the world and that's really mind-boggling
          and exciting.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: People make decisions everyday. For example, before you go outside,
          you have an if statement that says if it's raining, then I need to get my
          jacket. Computers are amazing once you decide those kinds of statements
          that they can reliably execute those things and unbelievable speed. A computer
          program really is a little bit of math and some if statements where the
          decision gets made.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: The if block helps the zombie make a decision. It checks something.
          For example, let's use the block that says if there's a path to the left,
          and put a turn left command inside it. We're telling the zombie to check
          its surroundings, see if there's a path on the left and if so, make that
          turn.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Then we use the move forward block inside this repeat to get it to keep
          moving forward as long as it just wants to go straight. Then when there's
          a turn, the if block will tell it to make that turn to the left. You can
          see that if we do that, if we take the turn to the left and otherwise moving
          forward, we'll achieve our goal.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: It's an example of using an if statement which is really a fundamental
          concept in computer programming. One of the first things I learned was how
          to write a program that played tic-tac-toe. I had if statements to say,
          ok, if the other person is about to win, go ahead and block that spot. Have
          fun learning how to use if statements, it's a key concept.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could
          use five move forward blocks or we could tell the computer to move forward
          and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move
          forward block inside the repeat block. Hit run and the zombie will move
          forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: So far you've been making an animation or a story that does the exact
          same thing every time you run it. Now you can make an interactive game that
          you can actually play.
      2:
        image: notes/playlab_2.png
        text: There's the "when arrow" block and the "move actor" block. You can put
          these blocks together to move the actors around with the arrow keys.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program.
          The written notes and words tell the singer exactly what to do. Some parts
          of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program
          that are used over and over again are called functions. When you read song
          lyrics and it says the word chorus, do you sing the word chorus? No, you
          look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: In this lesson, you'll learn a silly little song called little bunny
          foo foo. The song has a chorus that you will sing several times over and
          over again. A function is a piece of code that you can call and use over
          and over again. It makes programming easier and more efficient so you don't
          have to write out the steps of your function over and over again. You can
          just write it once!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: This is the conditional block. It says if you're at the flower or the
          honeycomb, then do something. This is useful when we don't know how much
          honey or nectar to get as we see here with this question mark.
      2:
        image: notes/C4_bee_conditional_2.png
        text: In this example, we're going to say, if it's a flower, get all the nectar
          and then use another one to say, if it's a honeycomb, make honey. Ta-dah!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: We have a new block that's called the if/else block. It's a conditional
          statement just like the if block you've used in the puzzles before. But
          now there's a new part at the bottom that says else. The if/else block lets
          the bee make a decision between two sets of actions. If the bee is at a
          flower, the bee will do the set of actions you put in the first part where
          it says do. If the bee is not at a flower, the bee will do the set of actions
          you put in the slot where it says else.
      2:
        image: notes/C4_conditionals_2.png
        text: If statements are how computers are able to make decisions. Humans set
          up conditions for the computer that say if the computer is presented with
          a certain situation do this. Else, which just means otherwise, do that.
          The top of our if/else block says if at flower. But the top of our block
          could say other things, like if nectar equals 2 or if there's a path ahead,
          our block will behave in the same way. That if the statement at the top
          is true it will do the first set of actions. But if the statement at the
          top is false, it will do the second set of actions.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running. The benefit of using a real for loop
          instead of the repeat block is that you can actually see the counter variable
          and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Now that you've edited function blocks, it's time to create a new function
          block from scratch. It's really simple. You'll see the toolbox has a category
          called functions. If you click on this, you'll see an orange button called
          create a function. Clicking on this brings up the function editor that you've
          already used to edit existing function blocks.
      2:
        image: notes/C4_function_create_2.png
        text: Just like before, you started by naming your function, writing down
          a description for what the function is supposed to do. For instance, it's
          supposed to draw a square or draw a triangle and then drag blocks from the
          toolbox into the white work space below. Remember to drag these blocks inside
          the green wrapping block for the function.
      3:
        image: notes/C4_function_create_3.png
        text: Once you're done, click on save and exit. This will take you back to
          the main puzzle work space. The new function you created will show up as
          a green block in the function category in your toolbox. Drag and drop this
          into the main work space and use it like any other block to solve the puzzle.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C4_function_edit_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code and it will get
          done for us. We've added that concept to our programming language.
      3:
        image: notes/C4_function_edit_3.png
        text: In this puzzle, we have already created a draw a square function for
          you. You'll see it in the toolbox as a green block. What you'll need to
          do is write the same code you wrote before to draw a square and put it in
          this function. To do that, click on the edit option in the green draw a
          square block. This will open up the function editor. The function editor
          has three parts. A place where you name your function. This will appear
          on the green block before that function. Then write out a short description
          of what your function is supposed to do.
      4:
        image: notes/C4_function_edit_4.png
        text: In this case, it's supposed to draw a square. The white space below
          this is the work space and works just like the work space you've already
          been using. Drag and drop blocks from the toolbox into this work space.
          Remember to put the blocks that create a square inside the green wrapping
          block for the function. Once you're done, click on save and exit. This will
          take you back to the main puzzle work space. Now you can use the draw the
          square function block just like any other block to solve the puzzle.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Here's a function that draws a square with 50 pixel sides. That's great
          but what if I wanted to draw a square with sides 50 pixels and another square
          with sides of 100 pixels? We shouldn't have to make two separate functions
          that do almost the same thing. Instead, we can use one function with a parameter.
      2:
        image: notes/C4_function_parameters_2.png
        text: Parameters allow us to pass values into a function that get used as
          variables inside the function. Let's try adding a parameter called like
          to this function so we can use it to create squares of different sizes.
          In the function editor, you can edit the name and description like before
          but now you can also add a parameter. Write the name of your parameter in
          the space and click Add Parameter. This will create a red block with the
          name of the parameter you just created. Now we can replace the move forward
          by 100 block with the parameter Length so it will move forward by Length.
      3:
        image: notes/C4_function_parameters_3.png
        text: Click save and close and drag out your new create a square block from
          the functions category in the toolbox. You'll notice there's an empty space
          next to length because the function wants to know what value the parameter
          Length should have. Drag a number block from the Math category and place
          it in this space. See how you can use the function again and again with
          different lengths to make squares of different sizes? Try it for yourself!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Usually programming is all in text but we'll use Blockly which uses
          visual blocks that you drag and drop to write programs. Under the hood,
          you're still creating code. To start off, we're going to build code for
          a program that will help this Angry Bird move through a maze to get to the
          evil pigs that stole its eggs.
      2:
        image: notes/C4_intro_2.png
        text: Blockly is split into three main parts. On the left is the bird's maze,
          where your program will run. The instructions for each level are written
          below the maze. This middle area is the toolbox and each of these blocks
          is a command that the bird can understand. The white space on the right
          is called the workspace and this is where we'll build our program.
      3:
        image: notes/C4_intro_3.png
        text: If I drag the move block to our work space and press "run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C4_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: If you ever want to delete a block, just remove it from the stack and
          drag it to the trash can. After you've hit run, you can always hit the reset
          button to get the bird back to the start. Now let's get those pigs!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: If I want to draw a rectangle 50 pixels tall and that is twice as wide
          as it is tall, how would I program the computer to do that? Well, I could
          tell the artist to go up fifty, turn right, and then go over 100 and move
          the whole thing twice. But then I'm doing the math for the computer.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers
          are really good at doing math so we should leave it to them whenever possible.
          If I just used a variable called height instead, then I could easily change
          height to fifty and then change my algorithm to tell the artist to go up
          by height, turn right and then go over by height times 2, which gives us
          a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: This lesson is called Tangram Algorithms. A tangram is a puzzle with
          seven pieces that can be put together to make other shapes. You'll be using
          an algorithm to explain to your partner how to put the puzzle together.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a
          task. We use them every day with things like shopping lists and recipes.
          If you keep an algorithm simple, there are lots of ways to interpret it
          and whoever performs that algorithm might not get exactly what you wanted.
          If you want to make sure that everyone ends up with the exact same thing,
          then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: I'm using an algorithm today to complete a painting. I wanted to try
          doing a painting of some wolves but I'm not the most amazing painter. Luckily
          for people by me, there is paint by numbers. There are forty colors and
          it has little letters and numbers that tell you which color to paint each
          section. Paint by numbers tells me exactly what color to use and where.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: It's very specific so I'm able to follow directions and the painting
          will come out looking awesome. It's a great algorithm. If the instructions
          weren't specific enough, my wolves wouldn't look as good. When you really
          want something to turn out exactly the way that you planned it, it's best
          to be extremely precise.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Each team, the person who's instructing that's the person who's holding
          the paper, has to figure out what their off symbol is going to be and what
          their on symbol is going to be. In binary, it's kind of like an alphabet
          with two letters. Like having A and B be your entire alphabet but you've
          got a 0 and a 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: The most common way you use binary is in an if statement. It's a classic
          thing from programming. The program runs along and it says if something
          is true, then do this. Or it's not true and you do something else. What
          if you want to do something maybe a little more complicated. Instead an
          if statement, you want to work with something like an image or a sound in
          a computer.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'A computer only knows binary but an image, it''s not binary, it''s
          not ones and zeros so how do you do that? Here''s an example: You have this
          beautiful picture. Now a picture is basically a form of information. All
          information can be encoded in binary one way or another, you just have to
          figure out how to do it.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: You imagine that we're going to put a grid over this panda bear and
          for each square, we're going to decide whether that square is more black
          or more white. And then we're going to color it that way. Now each cell
          on the grid is either black or white and then the black squares we say those
          are zeros (binary digit) and the white squares are ones, the other binary
          digit. At the end, you're left with just a bunch of ones and zeros. That's
          how you represent this image in binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that
          variable in an algorithm, it opens up the container and looks at the value
          inside. This lets you write smarter algorithms that behave differently depending
          on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: For example, if you wanted to write an algorithm to say Happy birthday,
          you're turning 10! to my little brother, that's great now but when I run
          it next year I'd want it to say, Happy birthday, you're turning 11! I could
          create a variable called age to store my brother's age and write my algorithm
          to say Happy birthday, you're turning 'age' instead. Because variable can
          change, every year I can update the variable 'age' to equal 'age' plus 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: In this puzzle, we're going to be using a variable that will set the
          length of the line our artist draws. Later on in our code, the move forward
          block will look at that length variable to see what value you've set it
          to.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use
          that variable in an algorithm, it opens up the container and looks at the
          value inside. This lets you write smarter algorithms that behave differently
          depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Your screen is split into three main parts. On the left is the gamespace,
          where your program will run. The instructions for each level are written
          below. This middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace, and this
          is where we'll build our program.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Students will break into groups to write instructions and then they''ll
          switch them with another group that will have to draw the monster. Groups
          will write instructions using the four steps of computational thinking:
          decomposition, pattern location, abstraction and algorithms.'
      3:
        image: notes/unplug2_3.png
        text: First groups will decompose the task which means make a game plan. Then
          they'll look for patterns between all the monsters in the catalog. When
          they come across differences between the monsters, they'll abstract or remove
          those details. For instance, one monster in the catalog has vegitas eyes
          and another has spritem eyes. But they both have eyes so we can write a
          line that says the monster has blank eyes.
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 'مرحبا، أنا كاثلين كينيدي وأنا منتجة فلم حرب النجوم: القوة تنهض. اليوم
          سوف تعمل مع أحد نجومنا، ب ب8 و هو انسان الي كروي. أي شيء يفعله، و كل حركة
          يقوم بها، يقع التحكم بها ببرمجيات في الحاسوب.علوم الحاسوب تؤثر على كل صناعة
          من الصناعات، من التسويق للرعاية الصحية و الأفلام. في الواقع، مئات مهندسي
          الحاسوب عملوا معا لصناعة فيلم مثل "القوة تنهض".'
      2:
        image: notes/starwars_intro_2.JPG
        text: مرحبا أنا راشيل روز، أنا مهندسة خبيرة في البحث و التطوير في شركة ILM
          وأنا أقود فريق الرسوم المتحركة والمخلوقات. في "القوة تنهض"، أنا مسؤولة عن
          مساعدة الفنانين في تطوير المعدات التي هي الأجزاء من الإنسان الالي التي تتحرك
          و تشعرنا ان شكل الروبوت مقنع جداً في مجرة بعيداً جدا.
      3:
        image: notes/starwars_intro_3.JPG
        text: "في الساعة القادمة، سنقوم ببناء لعبتنا الخاصة من حرب النجوم. سوف نعلمك
          المفاهيم الأساسية للبرمجة. عادة البرمجة نكون بشكل نصوص ولكن نحن سنستخدم
          \ القطع التي يمكن سحبها وإسقاطها لكتابة البرامج. وراء الستار، انت لا تزال
          تكتب التعليمات البرمجية. بعد أن جربت الأساسيات باستعمال القطع، سوف نتحول
          إلى جافا سكريبت، واحد من لغات البرمجة الأكثر شعبية على شبكة الإنترنت."
      4:
        image: notes/starwars_intro_4.JPG
        text: "في البداية، سنعمل مع ري برنامجا يجعل ب ب -8 يمشي لجمع كافة أجزاء الخردة.
          يتم تقسيم الشاشة إلى ثلاثة أجزاء. على اليمين فضاء لعبة حرب النجوم، حيث سيتم
          تشغيل التعليمات البرمجية. تتم كتابة التعليمات الخاصة بكل لغز أسفل فضاء اللّعب."
      5:
        image: notes/starwars_intro_5.JPG
        text: "المنطقة الوسطى تحتوي صندوق الأدوات وكل واحدة من هذه المقاطع البرمجيّة
          هو أمر يمكن ل ب ب - 8 أن يفهمه."
      6:
        image: notes/starwars_intro_6.JPG
        text: "المساحة البيضاء على اليمين تسمى مساحة العمل، و هو مكان إنتاج البرنامج."
      7:
        image: notes/starwars_intro_7.JPG
        text: "إذا سحبنا المقطع تحريك إلى اليسار لمساحة العمل ثم نضغط على تشغيل، ماذا
          يحدث؟ ب ب 8 يتحرك لليسار بخطوة واحدة."
      8:
        image: notes/starwars_intro_8.JPG
        text: "وماذا لو كنت أريد من ب ب-8 أن يفعل شيئا آخر بعد مقطع التّحرك إلى اليسار؟
          يمكنني أن أضيف مقطعا آخر إلى برنامجنا. سأختار المقطع التّحرّك إلى الأعلى،
          وسوف اسحبها تحت مقطع التّحرك إلى اليسار حتى يظهر اللّون البرتقالي. ثم سوف
          أسقطها فيلتصق المقطعان معا."
      9:
        image: notes/starwars_intro_9.JPG
        text: "عندما اضغط على تشغيل مرة أخرى، سيقوم ب ب 8 بتطبيق التعليمات مرتبة من
          الأعلى إلى الأسفل في مساحة العمل. إذا كنت تريد حذف مقطع، أزله من مجموعة
          المقاطع وأرجعه مرة أخرى إلى فضاء لأدوات."
      10:
        image: notes/starwars_intro_10.JPG
        text: "بعد النقر على تشغيل، يمكنك دائماً نقر الزر إعادة تعيين لتجعل ب ب 8
          يعود إلى البداية. إنطلق الآن!"
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: "يوجد داخل المقاطع المستعملة أوامر جافا سكريبت. جافا سكريبت هي لغة البرمجة
          الأكثر شعبية للمبرمجين المحترفين اليوم. المقاطع البرمجية طريقة رائعة للبدء
          في تعلم البرمجة، وفي الواقع، أفضل الجامعات مثل جامعة هارفارد وبيركلي تبدء
          التدريس بهذه الطريقة. ولكن بعد تعلم الأساسيات، يستعمل المهندسون طريقة كتابة
          التعليمات البرمجية لأن ذلك أسرع."
      2:
        image: notes/starwars_typing_2.JPG
        text: "يمكننا كتابة المئات من الأوامر دون الاضطرار إلى العثور عليها في فضاء
          الأدوات أو نقلها. لأنك في مرحلة التّعلّم الكتابة قد تكون أبطأ في البداية
          ولكننا نريد أن نعطيك الفرصة للتجربة."
      3:
        image: notes/starwars_typing_3.JPG
        text: In the upper right corner on your workspace, you can click the show
          text button on any puzzle to switch from blocks to typing code as text.
      4:
        image: notes/starwars_typing_4.JPG
        text: In the next lesson, we'll start you out in typing mode. Here you can
          still drag the block from the toolbox or you can type the command name.
          As you start to type, you'll see names of possible commands show below where
          you're typing. Instead of typing the whole command name, you can select
          one of these to move faster. In my job, I use this auto-complete feature
          all the time when writing code.
      5:
        image: notes/starwars_typing_5.JPG
        text: When you're typing code, the computer needs you to be very precise.
          You need to spell and capitalize the command name exactly correctly, including
          the parentheses and the semi-colon. Even with a small typing mistake, BB-8
          cannot understand the code and won't be able to move.
      6:
        image: notes/starwars_typing_6.JPG
        text: When you make an error on the line, the editor highlights it for you
          so that you can try changing your text to fix it.
      7:
        image: notes/starwars_typing_7.JPG
        text: If you get stuck, you can always start over with the start over button
          and you can switch back to block mode at any time by clicking in the top-right
          corner. Ok, let's give typing a try! And if you make mistakes, don't get
          frustrated. It takes everybody a few tries to get it right.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: "مرحبا، أنا شريتا كارتر. أنا مختصّة في الإنتاج الإبداعي في والت ديزني.
          أنا مسؤولة على قيادة الفرق المنتجة للألعاب التي سيجرّبها ضيوفنا. نحن نبحث
          دائما عن طرق تمكننا من تحسين التجارب و التكنولوجيا في قلب ذلك."
      2:
        image: notes/starwars_events_2.JPG
        text: "تهانينا، لقد استطعت فعل ذلك! لقد برمجت ب ب 8. والآن أعتقد أننا مستعدون
          لشيء أكثر صعوبة. دعونا ننطلق. والآن بعد أن كنت قد تعلمت أساسيات البرمجة،
          سنعود في الوقت المناسب لبناء لعبتنا، بطولة ر2 د 2 و س3 بو."
      3:
        image: notes/starwars_events_3.JPG
        text: "لصنع لعبة، نحن بحاجة إلى معرفة شيء يستخدمه المبرمجون كل يوم: يسمى الأحداث.
          الأحداث تطلب من برنامجك الإستماع أو الانتظار حتى يحدث شيء ما وثم عندما يحدث
          ذلك، فإنهم ينفذون التّعليمات."
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: "هنا سنجعل ر2-د2 يتحرّك للأعلى ليسلّم رسالة إلى الطيّارين المتمردين
          وثم يتحرّك للأسفل لبقيّة الطيّارين المتمردين. سنستخدم الأحداث لإجباره على
          التحرك. عندما يستخدم اللاعب مفاتيح الأسهم أعلى/أسفل ، أوالأزرار الأعلى/أسفل."
      6:
        image: notes/starwars_events_6.JPG
        text: سنستخدم المقطع الحدث "عند نقر السّهم أعلى" وسنرفق المقطع "إذهب إلى الأعلى".
          عندما يقوم اللاعب بالضغط على مفتاح السهم العلوي، يتم تشغيل التعليمات البرمجية
          المرفقة إلى المقطع "عند نقر السّهم أعلى". وسوف نفعل نفس الشيء لجعل ر2-د2
          يتحرك للأسفل.
      7:
        image: notes/starwars_events_7.JPG
        text: To do this, we'll use a command called whenUp(). When you drag the command
          out of the toolbox, you'll see that it starts and ends with a curly bracket
          instead of a semi-colon. This gives us space to put other commands in the
          middle. Every command that we place inside these brackets will run when
          the player presses the up arrow.
      8:
        image: notes/starwars_events_8.JPG
        text: We want R2-D2 to go up so let's put a goUp(); block inside the command.
          And we'll do the same thing to make R2-D2 go down.
      9:
        image: notes/starwars_events_9.JPG
        text: "الآن بدلاً من كتابة كافة التعليمات البرمجية للتحكم مسبقا بالروبوت،
          يمكننا أن ندع ر2 - د 2 يتفاعل مع أحداث الضغط على الزر الذي ينقله حول الشاشة.
          في كل خطوة، لعبتك تصبح أكثر تفاعلية."
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: "مرحبا، اسمي أليس و أقود فرق البرمجة و الهندسة في موقع Code.org وعملت
          في هذا البرنامج التعليمي الذي كنت تلعب به الآن."
      2:
        image: notes/starwars_congrats_2.JPG
        text: "لقد استطعت إنجاز ذلك للمستوى الأخير. تهانينا! تعلمت كل ما تحتاج إلى
          معرفته لإنشاء لعبتك الخاصة من حرب النجوم. ليس هناك الآن المزيد من التعليمات،
          و لا الألغاز لحلها. يمكنك إنشاء لعبتك الخاصة، ويمكنك اختيار كيف تعمل. آخرا،
          لقد تحصّلت على أصوات وأوامر جديدة للقيام بالمزيد من الأشياء."
      3:
        image: notes/starwars_congrats_3.JPG
        text: "[الطلاب يتحدثون] هكذا أنجزنا لعبة حيث يمكنك الحصول على نقاط عند الإمساك
          بالخنازير. في كل مرة تحصل على خنزير يظهر جندي العاصفة. حاليّا الشاشة بأكملها
          مليئة بالخنازير وعند لمس 10,000 منها، يمكنك الفوز."
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[الطلاب يتحدثون] صنعنا لعبة لا تخسر فيها أبدا وكل شيء تقتله تمنحك النقاط.
          في برنامجي، عكس المفاتيح حيث أنه كلما قمت بالنقر فوق المفتاح العلوي لاعبك
          ينزل، وعندما تذهب إلى اليمين، يذهب اللاعب إلى اليسار. هذا صعب حقاً! في بعض
          الأحيان يمكنك فقط الحصول على ميزة، ميزة غير عادلة إذا كنت مطور اللعبة. تحصل
          عليه؟ ياي!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: عند الانتهاء من صناعة اللعبة الخاصة بك، اختر "شارك" للحصول على رابط
          يمكنك مشاركته مع الأصدقاء أو اللعب بلعبتك على الهاتف الخاص بك. استمتع!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'مرحبا، أنا كاثلين كينيدي وأنا منتجة فلم حرب النجوم: القوة تنهض. اليوم
          سوف تعمل مع أحد نجومنا، ب ب8 و هو انسان الي كروي. أي شيء يفعله، و كل حركة
          يقوم بها، يقع التحكم بها ببرمجيات في الحاسوب. علوم الحاسوب تؤثر على كل صناعة
          من الصناعات، من التسويق للرعاية الصحية و الأفلام. في الواقع، مئات مهندسي
          الحاسوب عملوا معا لصناعة فيلم مثل "القوة تنهض".'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: مرحبا أنا راشيل روز، أنا مهندسة خبيرة في البحث و التطوير في شركة ILM
          وأنا أقود فريق الرسوم المتحركة والمخلوقات. في "القوة تنهض"، أنا مسؤولة عن
          مساعدة الفنانين في تطوير المعدات التي هي الأجزاء من الإنسان الالي التي تتحرك
          و تشعرنا ان شكل الروبوت مقنع جداً في مجرة بعيداً جدا.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: "في الساعة القادمة، سنقوم ببناء لعبتنا الخاصة من حرب النجوم. سوف نعلمك
          المفاهيم الأساسية للبرمجة. عادة البرمجة نكون بشكل نصوص ولكن نحن سنستخدم
          القطع التي يمكن سحبها وإسقاطها لكتابة البرامج. في البداية، سنعمل مع ري برنامجا
          يجعل ب ب -8 يمشي لجمع كافة أجزاء الخردة."
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: "تنقسم الشاشة إلى 3 أجزاء أساسيين. يوجد على اليمين فضاء اللّعب بحرب
          النجوم، أين سيشتغل البرنامج. التعليمات لكل مستوى مكتوبة أسفله."
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: "المنطقة الوسطى تحتوي صندوق الأدوات وكل واحدة من هذه المقاطع البرمجيّة
          هو أمر يمكن ل ب ب - 8 أن يفهمه."
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we're going to build our program.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: If I drag the moveLeft(); block to our workspace, what happens? BB-8
          moves left one block on the grid.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: "وماذا لو كنت أريد من ب ب-8 أن يفعل شيئا آخر بعد مقطع التّحرك إلى اليسار؟
          يمكنني أن أضيف مقطعا آخر إلى برنامجنا. سأختار المقطع التّحرّك إلى الأعلى،
          وسوف اسحبها تحت مقطع التّحرك إلى اليسار حتى يظهر اللّون البرتقالي. ثم سوف
          أسقطها فيلتصق المقطعان معا. عندما أضغط على تشغيل مرة أخرى، سيقوم ب ب 8 بتطبيق
          التعليمات مرتبة من الأعلى إلى الأسفل في مساحة العمل."
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back into the toolbox.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: "بعد النقر على تشغيل، يمكنك دائماً نقر الزر إعادة تعيين لتجعل ب ب 8
          يعود إلى البداية. إنطلق الآن!"
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: "مرحبا، أنا شريتا كارتر. أنا مختصّة في الإنتاج الإبداعي في والت ديزني.
          أنا مسؤولة على قيادة الفرق المنتجة للألعاب التي سيجرّبها ضيوفنا. نحن نبحث
          دائما عن طرق تمكننا من تحسين التجارب و التكنولوجيا في قلب ذلك."
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: "تهانينا، لقد استطعت فعل ذلك! لقد برمجت ب ب 8. والآن أعتقد أننا مستعدون
          لشيء أكثر صعوبة. دعونا ننطلق. والآن بعد أن كنت قد تعلمت أساسيات البرمجة،
          سنعود في الوقت المناسب لبناء لعبتنا، بطولة ر2 د 2 و س3 بو."
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: "لصنع لعبة، نحن بحاجة إلى معرفة شيء يستخدمه المبرمجون كل يوم: يسمى الأحداث.
          الأحداث تطلب من برنامجك الإستماع أو الانتظار حتى يحدث شيء ما وثم عندما يحدث
          ذلك، فإنهم ينفذون التّعليمات."
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button
          or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: "هنا سنجعل ر2-د2 يتحرّك للأعلى ليسلّم رسالة إلى الطيّارين المتمردين
          وثم يتحرّك للأسفل لبقيّة الطيّارين المتمردين. سنستخدم الأحداث لإجباره على
          التحرك. عندما يستخدم اللاعب مفاتيح الأسهم أعلى/أسفل ، أوالأزرار الأعلى/أسفل."
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: We use the whenUp() event block and attach the goUp() block to it. When
          the player presses the up arrow key, the code attached to the whenUp() block
          is run. And we'll do the same thing to make R2-D2 move down. Now instead
          of writing all the code to control our droid in advance, we can let R2-D2
          react to button press events that move him around the screen.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: "رويدا رويدا، اللعبة تصبح أكثر تفاعلية."
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: "مرحبا، اسمي أليس و أقود فرق البرمجة و الهندسة في موقع Code.org وعملت
          في هذا البرنامج التعليمي الذي كنت تلعب به الآن."
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: "لقد استطعت إنجاز ذلك للمستوى الأخير. تهانينا! تعلمت كل ما تحتاج إلى
          معرفته لإنشاء لعبتك الخاصة من حرب النجوم. ليس هناك الآن المزيد من التعليمات،
          و لا الألغاز لحلها. يمكنك إنشاء لعبتك الخاصة، ويمكنك اختيار كيف تعمل. آخرا،
          لقد تحصّلت على أصوات وأوامر جديدة للقيام بالمزيد من الأشياء."
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: "[الطلاب يتحدثون] هكذا أنجزنا لعبة حيث يمكنك الحصول على نقاط عند الإمساك
          بالخنازير. في كل مرة تحصل على خنزير يظهر جندي العاصفة. حاليّا الشاشة بأكملها
          مليئة بالخنازير وعند لمس 10,000 منها، يمكنك الفوز."
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[الطلاب يتحدثون] صنعنا لعبة لا تخسر فيها أبدا وكل شيء تقتله تمنحك النقاط.
          في برنامجي، عكس المفاتيح حيث أنه كلما قمت بالنقر فوق المفتاح العلوي لاعبك
          ينزل، وعندما تذهب إلى اليمين، يذهب اللاعب إلى اليسار. هذا صعب حقاً! في بعض
          الأحيان يمكنك فقط الحصول على ميزة، ميزة غير عادلة إذا كنت مطور اللعبة. تحصل
          عليه؟ ياي!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: عند الانتهاء من صناعة اللعبة الخاصة بك، اختر "شارك" للحصول على رابط
          يمكنك مشاركته مع الأصدقاء أو اللعب بلعبتك على الهاتف الخاص بك. استمتع!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: "اسمي Jens Bergensten ولكن الاسم المفضل لي هو Jeb. أنا المطور الرئيسي
          في Minecraft هنا في Mojang في ستوكهولم. أعتقد أنني كنت أبلغ من العمر 11
          أو 12 عامًا حين بدأت البرمجة لرغبتي في تصميم الألعاب. وقد أخبرني أحد أصدقاء
          أبي أنني بحاجة لتعلم البرمجة من أجل تصميم الألعاب. ومن هنا بدأ الأمر. فأنا
          معجب بتصميم بنية الألعاب واكتشافها. وهذا ما أعجبني حقًا في Minecraft."
      2:
        image: notes/mc_intro_2.JPG
        text: "خلال الساعة القادمة، ستتمكن من تعلم أساسيات علوم الكمبيوتر من خلال
          برمجة Alex أو Steve للتنقل على قطعة مخصصة لمحاكاة عالم Minecraft."
      3:
        image: notes/mc_intro_3.JPG
        text: "تعتمد البرمجة التقليدية عادة على النصوص ولكن اليوم سنستخدم Blockly،
          وهو نظام يستخدم كتل مرئية يمكنك سحبها وإفلاتها لكتابة البرامج. ما تقوم به،
          بكل بساطة، هو إنشاء تعليمات Javascript البرمجية."
      4:
        image: notes/mc_intro_4.JPG
        text: "المفاهيم التي ستتعلمها هي التي يستخدمها مبرمجو الكمبيوتر يوميًا وهي
          أساس علوم الكمبيوتر. هنا في Mojang، نستخدم نفس المفاهيم لتصميم العمل الخاص
          بـ Minecraft."
      5:
        image: notes/mc_intro_5.JPG
        text: "قبل أن تبدأ، ستختار شخصيتك. بالنسبة لي، سأختار Alex. هيا ننشئ تعليمة
          برمجية لبرنامج يساعدها على التنقل في الشاشة."
      6:
        image: notes/mc_intro_6.JPG
        text: "وتنقسم شاشتك إلى ثلاثة أجزاء رئيسية. على اليسار، ستجد مكان لعب Minecraft
          والذي سيتم تشغيل البرنامج خلاله. تظهر التعليمات الخاصة بكل مستوى بالأسفل."
      7:
        image: notes/mc_intro_7.JPG
        text: "هذه المنطقة الموجودة بالمنتصف هي مربع الأدوات، وكل كتلة من تلك الكتل
          بمثابة أمر يوجه الإجراءات التي تتخذها Alex."
      8:
        image: notes/mc_intro_8.JPG
        text: "والمنطقة البيضاء الموجودة على اليمين تعرف باسم مساحة العمل، وهي المكان
          المخصص لإنشاء البرنامج الخاص بنا."
      9:
        image: notes/mc_intro_9.JPG
        text: "فإذا قمنا بسحب الكتلة moveForward(); إلى مساحة العمل، وبعد ذلك قمت
          بالنقر فوق تشغيل، فما الذي يحدث؟ تتحرك Alex للأمام رقعة واحدة على الشبكة."
      10:
        image: notes/mc_intro_10.JPG
        text: "وما الذي يحدث إذا كنا نرغب في تنفيذ أمر معيّن بعد تقدمها للأمام رقعة
          واحدة؟ يمكننا إضافة كتلة أخرى إلى البرنامج الخاص بنا. سأختار الكتلة turnRight();
          واسحبها أسفل كتلة moveForward(); التي اخترتها مسبقًا حتى يظهر هذا الخط البرتقالي.
          وبعد ذلك سأفلتها وتتم محاذاة الكتلتين معًا. وعندما نضغط على تشغيل مرة أخرى،
          ستنفّذ Alex الأوامر المكدسة من الأعلى إلى الأسفل في مساحة العمل الخاصة بنا."
      11:
        image: notes/mc_intro_11.JPG
        text: "وإذا كنت ترغب في حذف أي كتلة، فما عليك إلا سحبها من التكدس وإعادتها
          إلى مربع الأدوات."
      12:
        image: notes/mc_intro_12.JPG
        text: للتراجع عن أي تغييرات والعودة إلى بداية المستوى، استخدم الزر Start Over
          "البدء من جديد" في الزاوية العلوية اليمنى من مساحة العمل. شيء آخر تلاحظ
          المثلث الصغير الموجود على كتل الاتجاهات؟ في أي وقت تلاحظ هذه المثلثات، يشير
          ذلك إلى إمكانية اختيار خيار مختلف. هيا نبدأ تعلم التعليمات البرمجية!
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: "أنا Lydia Winters، مدير العلامة التجارية بشركة Mojang، وقد قمنا بتصميم
          لعبة صغيرة اسمها Minecraft."
      2:
        image: notes/mc_repeat_2.JPG
        text: "الأمر المفضل لي في Minecraft هو الاستكشاف. أحب خوض المغامرات داخل الكهوف
          واكتشاف ما يمكنني العثور عليه. كشخص لا يعمل في البرمجة، كانت لدي حماسة كبيرة
          للبحث في درس Minecraft وبالفعل أتعلم بعض التعليمات البرمجية بنفسي."
      3:
        image: notes/mc_repeat_3.JPG
        text: "فالمستوى الأخير يحتاج إلى الكثير من كتل moveForward();. وسيكون من الأسهل
          أن نخبر الكمبيوتر بتنفيذ الأمر moveForward(); أربع أو خمس مرات. ومن حسن
          حظنا، تعد أجهزة الكمبيوتر جيدة في تكرار الأوامر من خلال التكرارات الحلقية."
      4:
        image: notes/mc_repeat_4.JPG
        text: "عند إنشاء Minecraft، نستخدم التكرارات الحلقية لوضع جميع المواد الأولية
          لإنشاء عالم جديد. فهناك الآلاف والآلاف من الكتل. نستخدم الحلقات من خلال
          طرق بسيطة، على سبيل المثال لنجعل قدمي Alex تتحرك للأمام والخلف أثناء سيرها.
          فالتكرارات الحلقية جزء فعال من البرمجة."
      5:
        image: notes/mc_repeat_5.JPG
        text: "بدأ الليل في الحلول، لذا فخلال المستويين التاليين سنقوم ببناء منزل
          لنشعر بالأمان. سنستخدم كتلة التكرار لبناء المنزل بسهولة كبيرة."
      6:
        image: notes/mc_repeat_6.JPG
        text: "لبناء جدار بالمنزل، يمكننا إما إخبار Alex بتنفيذ الأمر moveForward();
          ووضع ألواح الخشب أربع مرات، أو إخبارها بتنفيذ الأمر moveForward(); ووضع
          لوح خشب واحد، ثم نقل هذا الأمر واستخدام كتلة التكرار لدفعها لتنفيذ الإجراء
          مرات متعددة. والآن سننقر فوق كتلة التكرار ونخبرها بعدد المرات التي نرغب
          في أن تنفّذ هذا الإجراء خلالها. والآن هيا نبني منزلنا قبل أن يحل الليل.
          استمتع."
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: "الآن سنتعلم العبارات الشرطية. تعد العبارات الشرطية جزءًا أساسيًا في
          تعلم البرمجة، حيث تساعد الكمبيوتر على اتخاذ قرارات."
      2:
        image: notes/mc_if_statements_2.JPG
        text: "تستخدم جميع أجهزة الكمبيوتر العبارات الشرطية، بما في ذلك هاتفي. على
          سبيل المثال، عند إلغاء قفل هاتفي، يتم تشغيل بعض التعليمات البرمجية التي
          تفيد بأنه في حالة قيامي بإدخال كلمة المرور بشكل صحيح، فحينها يتم إلغاء قفل
          الهاتف. وإلا، سيعرض الهاتف رسالة خطأ."
      3:
        image: notes/mc_if_statements_3.JPG
        text: "يمكنك استخدام العبارات الشرطية في التعليمات البرمجية لمساعدة Steve
          وAlice في التفاعل مع ما يرونه في العالم. على سبيل المثال، في حالة وجود صخرة
          أمامهما، يمكنهما الاتجاه إلى اليسار. أو الاتجاه إلى اليمين في حالة الذهاب
          نحو شجرة."
      4:
        image: notes/mc_if_statements_4.JPG
        text: "في الحالة المبينة، نريد تفادي السقوط في الحمم. ومن السهل التخطيط لتجنب
          الحمم، التي نراها على الشاشة. ولكن ماذا عن الحمم التي لا يمكننا رؤيتها تحت
          الحجر؟"
      5:
        image: notes/mc_if_statements_5.JPG
        text: "بعد أن نحفر الحجر، نحتاج إلى التأكد مما إذا كانت هناك أي حمم في المكان
          قبل المضي قدمًا. ففي حالة وجود حمم، نرغب في وضع حجر أمام الشخصية التي اخترناها
          قبل أن نتقدم للأمام. وبهذه الطريقة يمكننا التقدم بسهولة. حان الوقت للتعدين
          بصورة أكبر! وتذكر استخدام العبارات الشرطية لمزيد من الحرص أثناء التقدم."
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: "تهانينا! لقد تعلمت للتو العناصر الأساسية لعلوم الكمبيوتر."
      2:
        image: notes/mc_congrats_share_2.JPG
        text: "والآن يمكنك استخدام تلك اللبنات لبناء الابتكار الخاص بك. فلم يعد هناك
          المزيد من التعليمات والألغاز التي يتعين عليك حلها. يمكنك بناء أي شيء تريده.
          يمكنك الاختيار."
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[الطلاب يتحدثون] الأمر يوشك أن يكون حقيقيًا. قص. نجحت في تصميم حرف
          L من المصابيح. نجحت في تصميم حرف A من ألواح خشب البتولا. لقد نجح الأمر،
          لقد نجح الأمر. نجحنا في تصميم منزل من الصوف."
      4:
        image: notes/mc_congrats_share_4.JPG
        text: "عندما تنتهي من تصميم الابتكار الخاص بك، اختر مشاركة للحصول على ارتباط
          لمشاركته مع أصدقائك. استمتع!"
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: "تهانينا! لقد تعلمت للتو العناصر الأساسية لعلوم الكمبيوتر."
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: "والآن يمكنك استخدام تلك اللبنات لبناء الابتكار الخاص بك. فلم يعد هناك
          المزيد من التعليمات والألغاز التي يتعين عليك حلها. يمكنك بناء أي شيء تريده.
          يمكنك الاختيار."
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[الطلاب يتحدثون] الأمر يوشك أن يكون حقيقيًا. قص. نجحت في تصميم حرف
          L من المصابيح. نجحت في تصميم حرف A من ألواح خشب البتولا. لقد نجح الأمر،
          لقد نجح الأمر. نجحنا في تصميم منزل من الصوف."
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: "الآن، يمكنك بناء أي شيء تريده. استمتع!"
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: "إذا كنت ترغب بإنشاء اللعبة الخاصة بك، فإن ذلك سهل جدا. كل ما تحتاجه
          هو القليل من أساسيات البرمجة ويمكنك البدء بلعب اللعبة الذي قمت بإنشائها."
      2:
        image: notes/gumball_intro_2.JPG
        text: "هل لديك لعبة فيديو مفضلة؟ نحن في طريقنا إلى إنشاء لعبة مشابهة لتلك
          المفضلة لديك من خلال PlayLab. الألعاب الجيدة تروي قصص ولكل قصة شخصياتها.
          تقوم هذه الشخصيات بأفعال كالكلام، أيضاً التحرك والتفاعل مع شخصيات أخرى.
          كم يمكن أن تجمع النقاط إعتماداً على قواعد اللعب. اليوم، سنتعلم كيفية تنفيذ
          هذه الأشياء الممتعة مع الشخصيات و ثم نبني اللعبة من الصفر التي يمكن أن نشاركها
          ونلعبها من الهاتف."
      3:
        image: notes/gumball_intro_3.JPG
        text: "اليوم، سنتعلم كيفية تنفيذ هذه الأشياء الممتعة مع الشخصيات و ثم نبني
          اللعبة من الصفر التي يمكن أن نشاركها ونلعبها من الهاتف."
      4:
        image: notes/gumball_intro_4.JPG
        text: "الشاشة مقسمة إلى ثلاثة أجزاء رئيسية. على اليسار هو مساحة اللعبة حيث
          سيتم تشغيل البرنامج. التعليمات لكل مستوى مذكورة في الأسفل."
      5:
        image: notes/gumball_intro_5.JPG
        text: "هذه المنطقة الوسطى هي صندوق الأدوات وكل واحد من هذه القطع هو أمر من
          التعليمات البرمجية."
      6:
        image: notes/gumball_intro_6.JPG
        text: "ويطلق على المساحة البيضاء على اليمين مساحة العمل وهذا هو المكان الذي
          سوف نبني فيه برنامجنا."
      7:
        image: notes/gumball_intro_7.JPG
        text: "لتبدأ، ستحتاج إلى ربط القطع الخاصة بك إلى البرتقالي وهو أمرعند الركض.
          يمكنك ربط أوامر متعددة معا عن طريق سحبهم حتى ترى الخط الأصفر ثم سيلتصقون
          معا."
      8:
        image: notes/gumball_intro_8.JPG
        text: "في هذا اللغز الأول، سنجعل الشخصيات تقول شيء وذلك من خلال ربط أمر القول
          بأمر الركض عندما يكتب اللاعب القول. عند الانتهاء من وضع الأوامر إضغط زر
          التشغيل لترى نتيجة ما قمت ببرمجته."
      9:
        image: notes/gumball_intro_9.JPG
        text: "قم بالبدء وعندما تصل إلى النهاية ستصبح قادراً على إنشاء كل أنواع الشخصيات
          اللتي يمكن أن تتفاعل، تسجل النقاط، وترمي الأشياء، وتخفي بعضها البعض. لكم
          حرية الاختيار!"
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: "نحن الآن في طريقنا لمعرفة شيء يستخدمه مبرمجي الألعاب يوميا. يطلق عليه
          مسمى الأحداث. الحدث يخبر البرنامج للاستماع عندما يقوم المستخدم بشيء ثم تقوم
          اللعبة بتنفيذ هذا العمل."
      2:
        image: notes/gumball_events_2.JPG
        text: "أحد الأمثلة على الأحداث هي الاستماع إلى نقرة الماوس أو ضغط مفتاح السهم
          الأعلى أو الأسفل أو حتى النقرعلى الشاشة."
      3:
        image: notes/gumball_events_3.JPG
        text: "هنا،سوف نجعل الشخصية تقول شيئا عندما ينقراللاعب عليها. سوف نستخدم أمر
          الحظرعند النقر عليها ونربط به محتوى الكلام. عندما ينقر اللاعب، جميع محتوى
          الكلام المربوط سوف يظهر."
      4:
        image: notes/gumball_events_4.JPG
        text: "يوجد أيضا أوامرالأسهم. إذا قمت بربط أمر التحرك بذلك، يمكنك البدء في
          نقل الشخصية الخاصة بك إلى أعلى أو أسفل و يسارأو يمين، باستخدام مفاتيح الأسهم.
          شيئا فشيئا تصبح اللعبة أكثر تفاعلا و تقارب أن تكتمل."
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: "هل لك أن تتخيل لو اردت تكريرأحد الأوامر مرةً بعد مرة و للأبد؟ \nنأمل
          أن لا يضطر أحد لذلك حيث أن أجهزة الحاسوب تقوم بهذا و بسهولة."
      2:
        image: notes/gumball_repeat_2.JPG
        text: "يسمى هذا بأمرالتكرار للأبد. وأي شيء يربط به يتكرر باستمرار في اللعبة.
          إذا كنا نريد أحد الشخصيات بالقيام بحركة ما مرارا وتكرارا دون أن يفعل اللاعب
          أي شيء، سوف نربط أمر تلك الحركة بأمر التكرار إلى الأبد."
      3:
        image: notes/gumball_repeat_3.JPG
        text: "في هذا اللغز القادم، هدفنا هو مساعدة الشخصية بالقيام بحركة مستمرة.
          عندما تتعلم كيفية القيام بأوامر التكرار سيوفر لك ذلك طن من الوقت عند بناء
          اللعبة خاصتك."
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: "إذا كنت ترغب بإنشاء اللعبة الخاصة بك، فإن ذلك سهل جدا. كل ما تحتاجه
          هو القليل من أساسيات البرمجة ويمكنك البدء بلعب اللعبة الذي قمت بإنشائها."
      2:
        image: notes/iceage_intro_2.JPG
        text: "هل لديك لعبة فيديو مفضلة؟ نحن في طريقنا إلى إنشاء لعبة مشابهة لتلك
          المفضلة لديك من خلال PlayLab. الألعاب الجيدة تروي قصص ولكل قصة شخصياتها.
          تقوم هذه الشخصيات بأفعال كالكلام، أيضاً التحرك والتفاعل مع شخصيات أخرى.
          كم يمكن أن تجمع النقاط إعتماداً على قواعد اللعب. اليوم، سنتعلم كيفية تنفيذ
          هذه الأشياء الممتعة مع الشخصيات و ثم نبني اللعبة من الصفر التي يمكن أن نشاركها
          ونلعبها من الهاتف."
      3:
        image: notes/iceage_intro_3.JPG
        text: "اليوم، سنتعلم كيفية تنفيذ هذه الأشياء الممتعة مع الشخصيات و ثم نبني
          اللعبة من الصفر التي يمكن أن نشاركها ونلعبها من الهاتف."
      4:
        image: notes/iceage_intro_4.JPG
        text: "الشاشة مقسمة إلى ثلاثة أجزاء رئيسية. على اليسار هو مساحة اللعبة حيث
          سيتم تشغيل البرنامج. التعليمات لكل مستوى مذكورة في الأسفل."
      5:
        image: notes/iceage_intro_5.JPG
        text: "هذه المنطقة الوسطى هي صندوق الأدوات وكل واحد من هذه القطع هو أمر من
          التعليمات البرمجية."
      6:
        image: notes/iceage_intro_6.JPG
        text: "والمنطقة البيضاء الموجودة على اليمين تعرف باسم مساحة العمل، وهي المكان
          المخصص لإنشاء البرنامج الخاص بنا."
      7:
        image: notes/iceage_intro_7.JPG
        text: "لتبدأ، ستحتاج إلى ربط القطع الخاصة بك إلى البرتقالي وهو أمرعند الركض.
          يمكنك ربط أوامر متعددة معا عن طريق سحبهم حتى ترى الخط الأصفر ثم سيلتصقون
          معا."
      8:
        image: notes/iceage_intro_8.JPG
        text: "في هذا اللغز الأول، سنجعل الشخصيات تقول شيء وذلك من خلال ربط أمر القول
          بأمر الركض عندما يكتب اللاعب القول. عند الانتهاء من وضع الأوامر إضغط زر
          التشغيل لترى نتيجة ما قمت ببرمجته."
      9:
        image: notes/iceage_intro_9.JPG
        text: "قم بالبدء وعندما تصل إلى النهاية ستصبح قادراً على إنشاء كل أنواع الشخصيات
          اللتي يمكن أن تتفاعل، تسجل النقاط، وترمي الأشياء، وتخفي بعضها البعض. لكم
          حرية الاختيار!"
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: "نحن الآن في طريقنا لمعرفة شيء يستخدمه مبرمجي الألعاب يوميا. يطلق عليه
          مسمى الأحداث. الحدث يخبر البرنامج للاستماع عندما يقوم المستخدم بشيء ثم تقوم
          اللعبة بتنفيذ هذا العمل."
      2:
        image: notes/iceage_events_2.JPG
        text: "أحد الأمثلة على الأحداث هي الاستماع إلى نقرة الماوس أو ضغط مفتاح السهم
          الأعلى أو الأسفل أو حتى النقرعلى الشاشة."
      3:
        image: notes/iceage_events_3.JPG
        text: "هنا،سوف نجعل الشخصية تقول شيئا عندما ينقراللاعب عليها. سوف نستخدم أمر
          الحظرعند النقر عليها ونربط به محتوى الكلام. عندما ينقر اللاعب، جميع محتوى
          الكلام المربوط سوف يظهر."
      4:
        image: notes/iceage_events_4.JPG
        text: "يوجد أيضا أوامرالأسهم. إذا قمت بربط أمر التحرك بذلك، يمكنك البدء في
          نقل الشخصية الخاصة بك إلى أعلى أو أسفل و يسارأو يمين، باستخدام مفاتيح الأسهم.
          شيئا فشيئا تصبح اللعبة أكثر تفاعلا و تقارب أن تكتمل."
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: "هل لك أن تتخيل لو اردت تكريرأحد الأوامر مرةً بعد مرة و للأبد؟ \nنأمل
          أن لا يضطر أحد لذلك حيث أن أجهزة الحاسوب تقوم بهذا و بسهولة."
      2:
        image: notes/iceage_repeat_2.JPG
        text: "يسمى هذا بأمرالتكرار للأبد. وأي شيء يربط به يتكرر باستمرار في اللعبة.
          إذا كنا نريد أحد الشخصيات بالقيام بحركة ما مرارا وتكرارا دون أن يفعل اللاعب
          أي شيء، سوف نربط أمر تلك الحركة بأمر التكرار إلى الأبد."
      3:
        image: notes/iceage_repeat_3.JPG
        text: "في هذا اللغز القادم، هدفنا هو مساعدة الشخصية بالقيام بحركة مستمرة.
          عندما تتعلم كيفية القيام بأوامر التكرار سيوفر لك ذلك طن من الوقت عند بناء
          اللعبة خاصتك."
    mc_2016_intro:
      1:
        image: notes/mc_2016_intro_1.jpg
        text: Hi, my name is Jens and I'm the lead creative designer of Minecraft.
          In the next hour, you'll make your own Minecraft game. This looks like Minecraft
          but the world has stopped. The sheep aren't moving, the chickens aren't
          laying eggs, and zombies are just standing still. It's up to you to add
          the code to make the Minecraft world work.
      2:
        image: notes/mc_2016_intro_2.jpg
        text: 'My name is Melissa and I am a user researcher at Minecraft. What I''m
          really interested in is how people think and interact with technology and
          so this job is the perfect job for me to put together the computer engineering
          with the psychology: how people think and behave.'
      3:
        image: notes/mc_2016_intro_3.jpg
        text: You'll see your screen is split into three main parts. 1) On the left
          is the Minecraft game. Right now the world is frozen but we're going to
          fix that with code.
      4:
        image: notes/mc_2016_intro_4.jpg
        text: 2) This middle area is the toolbox. Each of these blocks is a command
          that chickens, sheep, and other Minecraft creatures can understand.
      5:
        image: notes/mc_2016_intro_5.jpg
        text: 3) The space on the right is called the workspace and this is where
          we'll build our program.
      6:
        image: notes/mc_2016_intro_6.jpg
        text: If you forget what to do, the instructions for each level are at the
          top.
      7:
        image: notes/mc_2016_intro_7.jpg
        text: To start off, we're going to program a chicken. Let's drag the "move
          forward" command to the workspace. When I hit "Run" the chicken moves forward
          one step. To go further, I'll drag another "move forward" block underneath
          the first "move forward" block until the highlight appears. Then I'll drop
          it and the two blocks snap together. If I hit "Run" again, the chicken walks
          two steps.
      8:
        image: notes/mc_2016_intro_8.jpg
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back to the toolbox.
      9:
        image: notes/mc_2016_intro_9.jpg
        text: After you've hit "Run" you can always hit the "Reset" button to reset
          the game and start over. Now, it's your turn to make your very own version
          of Minecraft. Have fun!
    mc_2016_loops:
      1:
        image: notes/mc_2016_loops_1.jpg
        text: Hi, I'm Lisa. I'm a software developer on Minecraft and I work on some
          of the animals and enemies in the game. One of the animals that I worked
          on is the ocelot. I worked on the part where you can feed an ocelot a fish
          to tame it into your own cat.
      2:
        image: notes/mc_2016_loops_2.jpg
        text: As humans, we get really bored if we have to do the same thing over
          and over and over again. But the cool thing about computers is that they
          can do the same thing millions or even billions of times in a row without
          getting bored. This repetition is called a loop and every creature in Minecraft
          uses loops.
      3:
        image: notes/mc_2016_loops_3.jpg
        text: Earlier, we got a chicken to move across the screen but then she stopped.
          In Minecraft, the chickens wander around forever and ever. Let's use a "forever
          do" loop from our toolbox to keep our chickens moving around forever too.
          The power of loops will save you tons of time and open up all kinds of neat
          options as you build your own version of Minecraft.
    mc_2016_events:
      1:
        image: notes/mc_2016_events_1.jpg
        text: On this next level, you can pick to be either Steve or Alex. Press the
          arrow buttons on your keyboard to move up, down, left, and right. Now you
          can move around a level wherever you want. To use a creature, just walk
          towards it, turn to face it, and press the spacebar.
      2:
        image: notes/mc_2016_events_2.jpg
        text: If you're using a touch screen, swipe up, down, left, and right to move
          around. Then tap the game to use the item in front of you.
      3:
        image: notes/mc_2016_events_3.jpg
        text: But what happens when you use it? In Minecraft, sheep drop wool when
          you shear them, cows run away when you hit them, and creepers explode when
          you get near them. These reactions happen thanks to something called events.
          Events tell your program to listen or wait for when something happens. And
          when it does, perform an action.
      4:
        image: notes/mc_2016_events_4.jpg
        text: So far, you've used one event. Code you put in the "when spawned" slot
          runs when your creature is created or when the game starts. Over the next
          few levels you'll have new slots for events such as "when touched" that
          runs when you touch the creature, or "when used" for when you use the creature.
          Or, if you want your zombie to disappear when the sun comes up, put that
          in the "when day" slot
    mc_2016_spawn:
      1:
        image: notes/mc_2016_spawn_1.jpg
        text: In games, spawn means the same thing as create. In this level, let's
          make zombies spawn when the sun goes down. To do this, we'll use the "when
          night" block.
      2:
        image: notes/mc_2016_spawn_2.jpg
        text: Since we want the zombies to spawn at night we'll add the "spawn zombie"
          block under the "when night" block. As soon as they're spawned, each zombie
          will run the code that you put in their "when spawned" event slot. Have
          fun spawning zombies!
    mc_2016_congrats:
      1:
        image: notes/mc_2016_congrats_1.jpg
        text: Congratulations! You've learned to use computer science commands to
          bring the Minecraft world to life. You are the developer now. You've unlocked
          all the commands and all the creatures. You choose what happens.
      2:
        image: notes/mc_2016_congrats_2.jpg
        text: When you're done making your game, choose share to get a link that you
          can share with your friends or to play your game on your phone. Have fun!
          I'm looking forward to playing your version of Minecraft.
