"sr":
  data:
    script:
      name:
        20-hour:
          desc: K-8 увод у курс Информатике
          Unplug1: Фаза 1
          Maze: Фаза 2
          Unplug2: Фаза 3
          Unplug3: Фаза 4
          Artist: Фаза 5
          Unplug4: Фаза 6
          Artist2: Фаза 7
          Unplug5: Фаза 8
          Farmer: Фаза 9
          Unplug6: Фаза 10
          Artist3: Фаза 11
          Unplug7: Фаза 12
          Farmer2: Фаза 13
          Unplug8: Фаза 14
          Artist4: Фаза 15
          Unplug9: Фаза 16
          Farmer3: Фаза 17
          Unplug10: Фаза 18
          Artist5: Фаза 19
          Unplug11: Фаза 20
        Hour of Code:
          desc: Час кода
          Maze: Фаза 1
        Edit Code:
          desc: Измени Код
          MazeEC: Фаза 1
        2014 Levels:
          desc: 2014 Puzzles (beta)
          Bounce: Фаза 1
        Builder Levels:
          desc: User-Created Puzzles (beta)
          Custom: Фаза 1
        Flappy Levels:
          desc: Flappy Bird
          Flappy: Фаза 1
        Jigsaw Levels:
          desc: Слагалица (проба)
          Jigsaw: Фаза 1
        Step Levels:
          desc: Лавиринт (проба)
          MazeStep: Stage Step
        edit-code:
          desc: Edit Code (beta)
          MazeEC: Фаза 1
          Webapp: Фаза 2
          ArtistEC: Фаза 3
          StudioEC: Фаза 4
        events:
          desc: Bounce (beta)
          Bounce: Фаза 1
          Studio: Фаза 2
        builder:
          desc: User-Created Puzzles (beta)
          Custom: Фаза 1
        flappy:
          desc: Flappy Bird
          Flappy: Фаза 1
        jigsaw:
          desc: Слагалица (проба)
          Jigsaw: Фаза 1
        step:
          desc: Лавиринт (проба)
          MazeStep: Stage Step
        wordsearch:
          desc: Spelling Bee (beta)
          WordSearch: Фаза 1
    game:
      name:
        Unplug1: Увод у Компјутерске Науке
        Maze: Лавиринт
        Multi: Multiple Choice Stuffs
        Unplug2: Компјутерско Размишљање
        Unplug3: Графиконско - Папирно Програмирање
        Artist: Уметник
        Unplug4: Алгоритми
        Artist2: Уметник 2
        Unplug5: Функције
        Farmer: Фармер
        Unplug6: Кондиционали
        Artist3: Уметник 3
        Unplug7: Писање Песама
        Farmer2: Фармер 2
        Unplug8: Апстракција
        Artist4: Уметник 4
        Unplug9: Релејно Програмирање
        Farmer3: Фармер 3
        Unplug10: Интернет
        Artist5: Уметник 5
        Unplug11: Замотај-Умотај
        MazeEC: Лавиринт
        Bounce: Bounce
        Flappy: Flappy Bird
        Jigsaw: Слагалица
        MazeStep: Maze Step Mode
        Wordsearch: Wordsearch
        Webapp: Webapp
        ArtistEC: Уметник
        TextMatch: Text Match
        StudioEC: Play Lab
    trophy:
      name:
        Bronze: Бронза
        Silver: Сребро
        Gold: Злато
    concept:
      description:
        sequence: Низ Акција
        if: Ако Блок
        if_else: Ако-друго блок
        loop_times: Поновите пута блок
        loop_until: Понављајте док Блок
        loop_while: Док (While  Петља) Блок
        loop_for: Бројач Блок
        function: Функције
        parameters: функције са параметрима
    level:
      instructions:
        maze_2_2: Можеш ли ми помоћи да ухватим неваљало прасе? Поређај пар "крећи
          напред" блокова заједно и притисни "Покрени програм" како бих ми помогао
          да дођем до тамо.
        maze_2_1: Ово прасе ми разбацује перје. Помози ми да га пронађем!
        maze_2_2_5: Прати стазу и води ме до луцкастог прасета. Избегавај експлозив
          или ће перје летети!
        maze_2_3: Наводи ме до зеленог зла! (Пази се експлозива)
        maze_2_4: Буди смирен и помози ми да пронађем неваљало прасе. У супротном
          бих могао да се наљутим!
        maze_2_5: Постоји начин на који могу доћи до луцкастог прасета користећи само
          два блока. Можеш ли схватити како?
        maze_2_6: Покушај да ме доведеш до зеленог уљеза користећи само три блока.
        maze_2_7: Помози ми да протерам ово неваљало прасе користећи што мањи број
          блокова. Покушај да искористиш више од једног "Понављај пута" блока.
        maze_2_8: 'Како бих сте решили овај, покушајте са "repeat" блоком са ова три
          блока унутар нјега: move, move, turn.'
        maze_2_9: Уреду, пробај нови "repeat until - (Понављај док)" блок - понавља
          ће блок док ја стигнем до досадног прасета.
        maze_2_10: Ок, последњи пут ради увежбавања - можете ли да решите ово користећи
          само 4 блока?
        maze_2_11: Драга особо. Ја зомби. Ја гладан. Морам... доћи... до сунцокрета...
          Можете ли ме довести до њега са само 5 блокова?
        maze_2_12: Уреду, ово је слично, али мало другачије. Можете ли урадити то
          са само 5 блокова?
        maze_2_13: 'Користите нови "Ако" блок како бих могао да одредим када да скренем.
          Помоћ: Потребан вам је само још један блок, али запамтите како смо га ми
          искористили, тако да следећи пут то можете урадити сами.'
        maze_2_14: Уреду, ово је слично последњој загонетци, али мораш да запамтиш
          како си користио "if" блок и "repeat" блок заједно.
        maze_2_15: Ја желим сунцокрет! Користи "Ако" блок да ме доведеш до њега са
          што мањим бројем блокова.
        maze_2_16: Уреду, хајде да то урадимо још једном ради вежбе - ово није много
          другачије, али пази се Грицкала!
        maze_2_17: '"Ако-иначе" блок проверава услов, и затим извршава једну или другу
          ствар. Како бих ме довео до сунцокрета покушај да користиш овај нови блок.'
        maze_2_18: Још једна вежба "ако-иначе" блока, можеш ли је урадити како треба
          из првог пута?
        maze_2_19: Можеш ли додати само три блока како бих ми помогао да решим још
          компликованији лавиринт? Ако га урадиш како треба, моћи ћу да шетам било
          којом кривудавом стазом, без обзира на њену дужину.
        turtle_1_1: Здраво, ја сам уметник. Можеш написати код да нацртам скоро било
          шта. Користи пар блокова да цртам преко сивих линија на слици.
        turtle_1_2: 'А сада, нацртај квадрат. НАПОМЕНА: користи своју најомиљенију
          боју узимајући је са новог "set color" блока.'
        turtle_1_3: Направи квадрат користећи само 3 блока.
        turtle_1_4: 'Нацртај троугао чије су странице различитих боја, користећи опцију
          "случајна боја", која сваки пут бира различиту боју. Савет: мораћете сами
          да схватите колико пута треба да се окренете, кликћући на број у "Окрени"
          блоку.'
        turtle_1_5: А сада, ради вежбе, нацртај троугао па затим квадрат како бих
          нацртали коверту.
        turtle_1_6: 'Да ли можете да схватите како извући овај троугао и квадрат?
          Савет: Урадите прво троугао, а затим схватите колико вам је потребно да
          окренете пре цртања квадрата .'
        turtle_1_7: 'Уреду, хајде да мало закомпликујемо - видите да ли можете да
          нацртате ове зелене наочаре. Квадрати су 100 пиксела са свих страна, и 50
          пиксела је раздаљина између њих. Не заоравите да их нацртате зеленом бојом. '
        turtle_1_8: У реду, пробај да сазнаш шта ће се десити ако покренеш овај код
          (или кликни "Run" да испробаш). Затим, понови онолико пута колико је потребно
          да завршиш цртање. Боје ће сваки пут бити другачије.
        turtle_1_9: Можеш ли да сазнаш који број да замениш у наводницима како бих
          нацртао круг?
        turtle_1_10: 'Успео си! А сада нацртај шта год желиш. Неке интересантне идеје:
          фигуру штапа, пахуљица, или спирала. Такође испробај "set width" (подеси
          дужину) блок. Уживај!'
        turtle_4_1: 'Можеш ли нацртати троугао (са ивицама 100 пиксела) са само три
          блока? Савет: користи "repeat" (понављање) блок.'
        turtle_4_2: 'Пробај додати један блок да завршиш ову загонетку. Савет: ми
          смо обезбедили блокове да нацртамо 2 идентична троугла, потребно је да ставиш
          "turn" (скрени) између, и одлучиш када да скренеш.'
        turtle_4_3: Уреду, ево га код који си написао да нацрташ троугао. Можеш ли
          додати "repeat" и "turn" блок како бих направио леп цвет?
        turtle_4_4: 'Ево га исти код као из предходне загонетке, али скрећући само
          36 степени  после цртања сваког троугла. Колико пута је ово потребно да
          се понови? (Савет: после 360 степени скретања цртеж ће постати цео круг)'
        turtle_4_5: 'Ево га исти код као из предходне загонетке, али понављајући скретање
          36 пута. Колико степени бих скретања требала да буду? (Савет: после 360
          степени скретања цртеж ће постати пун круг)'
        turtle_4_6: Користећи само 3 блока, можеш ли нацртати квадрат са ивицама од
          20 пиксела?
        turtle_4_7: 'Ево га код за цртање квадрата из претходне загонетке. Можеш ли
          га поновити тако да нацрта 10 суседних квадрата као мердевине? Савет: Потребно
          ти је још само 2 блока.'
        turtle_4_8: Ево га решење за претходну загонетку. можеш ли додати још само
          2 блока да бих завршио цртање?
        turtle_4_9: Ево га решење за претходну загонетку. За колико степени је потребно
          да се окренеш како бих завршио цртање? (Вероватно је потребно да погађаш
          пар пута)
        turtle_4_10: Ево га решење за претходну загонетку. Колико пута бих требало
          да поновиш, како бих завршио цртеж?
        turtle_4_11: Пробај да промениш бројеве у "скрени" и "понови" блоковима да
          бих направио другачије шеме. или, експериментиши мењајући остатак кода да
          бих нацртали шта год пожелите.
        maze_karel_1_1: Здраво, ја сам фармер. Потребна ми је твоја помоћ да поравнам
          поље на мојој фарми, тако да буде спремно за садњу. Помери ме до гомиле
          прљавштине и употреби "уклони" блок да бих је уклонио.
        maze_karel_1_2: Следеће, помери ме до рупе и испуни је са ДВЕ пуне лопате
          прљавштине, користећи "попуни" блок.
        maze_karel_1_3: Помери ме до гомиле прљавштине и реци ми колико пуних лопата
          да уклоним користећи што мање блокова.
        maze_karel_1_4: 'Можеш ли да ми помогнеш да уклоним све четири гомиле прљавштине?
          Напомена: користи понови блок ако можеш.'
        maze_karel_1_5: 'Помози ми да попуним све ове рупе са 5 пуних лопата прљавштине.
          Напомена: можеш ставити "понови"("repeat") блок  унутар "док"("while) блока.'
        maze_karel_1_6: Уклони све гомиле прљавштине, користећи што мањи број блокова,  Нова
          опција у спуштеном менију на "while"(док) блоку говори ми да ли стојим на
          гомили или рупи.
        maze_karel_1_7: Вау, нашао сам стварно дубоку рупу! не знам колико пуних лопата
          прљавштине ми је потребно да је испуним. Можеш ли ти написати програм који
          је испуњава док не буде поравната са земљиштем?
        maze_karel_1_8: Помози ми да испуним рупу на крају поља, користећи што мањи
          број блокова.
        maze_karel_1_9: 'Натерај ме да уклоним све ове гомиле прљавштине. Покушај
          да користиш што мањи број блокова. Напомена: покушај да искористиш "while"(док)
          блок.'
        maze_karel_1_10: Радим до касно, тако да је напољу мрачно, и не могу да проценим
          колико су гомиле велике. Немам све опције које сам имао на "while"(док)
          блоку. Померај ме по пољу, и ако наиђем на гомилу уклони је.
        maze_karel_1_11: 'И даље је мрачно напољу. Померај ме по пољу. Ако наиђем
          на гомилу, уклони је , а ако наиђем на рупу, попуни је. Напомена: употреби
          спуштајући мени опција на "if"(ако) блок.'
        turtle_2_1: |
          Здраво. Ја зомби уметник. Ја волим цртам! Помози ми да нацртам квадрат посебном бојом.
          Важна напомена: имаш све исте блокове, али су сада сви постављени у категорије.
        turtle_2_2: Добро дошао на коришћење функција, што вам омогућава да дефинишете
          нове блокове! Испробај нови "draw a square" (нацртај квадрат) блок, налази
          се у категорији функија, и нацртај мали 50x50 зелени квадрат.
        turtle_2_3: Употреби "repeat"(понови) блок(У категоријама петљи) да нацрташ
          3 квадрата исте величине 100, и сваки 120 степени одвојено. И нека сва три
          буду различитих боја.
        turtle_2_4: 'Сада ће мо да будемо фенци. Промени код да нацрташ 36 квадрата,
          100 пиксела широке, и раздвојености 10 степени. Напомена: желите да употребите
          слајдер  како бих ме натерали на идем брже.'
        turtle_2_5: Нацртај квадрате са страницама од 50, 60, 70, 80 и 90 пиксела.
          Мораћете да користите "draw a square" функцију пет пута.
        turtle_2_6: 'Уреду, овај програм ће користити бројач, да нацрта исте квадрате
          као и прошли пут. Ви желите да  квадрат буде исте величине као и бројач,
          зато користите ''Бројач'' Блок. Савет: Налази се у категорији променјивих.'
        turtle_2_7: Ево га програм за цртање спирале, али блокови су онемогућени ,
          тако да неће радити. Направи нови програм користећи "count with"(број са)(из
          категорије петљи) и "counter" блок (из категорије промењивих) како бих нацртао
          исту спиралу.
        turtle_2_7_5: Постоји нова "draw a snowman"(нацртај снешка) функција  (у категоријама
          функције). нацртај два снешка  висине 250 и 100.
        turtle_2_8: Овај пример је нешто тежи.Користите функцију "нацртај Снешка Белића"
          и блок "скочи напред" ( којa се налази у категорији "Акција"). Нацртајте
          3 Снешка са различитим бојама, који су међусобно одвојени са 100 px.
        turtle_2_9: Користи "count with" петљу да нацрташ породицу снешка са висинама
          од 110, 100, 90, 80 и 70. Раздаљина између сваког снешка треба да буде 60
          пиксела.
        turtle_2_10: Ево га код, како бих сте са њим експериментисали са различитим
          спиралама. Шта ће се десити ако промените количину окретања? Или подесите
          насумичност боја у петљи? Нацртај шта год пожелиш.
        maze_karel_2_1: 'Покушај користећи блокове да ми помогнеш да уклоним све гомиле  и
          попуним све рупе на земљи. Покушај да користиш петље како не бих користио
          превише блокова. Напомена: Можеш ставити петљу унутар друге петље.'
        maze_karel_2_2: Дефинисали смо наш блок назван "fill 5", који се налази у
          категорији функција. Искористи га како бих ми помогао да попуним ову рупу.
        maze_karel_2_3: Искористи нови "fill 5" блок функције да попуним све рупе.
          Мораћеш да извучеш "fill 5" блок из категорије функција.
        maze_karel_2_4: Дефиниши нову функцију која уклања 7 пуних лопата. Затим је
          искористи да напишеш програм који ми помаже да уклоним све гомиле.
        maze_karel_2_5: Креирај нову функцију која уклања 6 пуних лопата са гомиле,
          и искористи је да ми помогнеш да поравнам све гомиле.
        maze_karel_2_6: Употреби две нове функције, "fill 8" и "remove 8", како бих
          ми помогао да изравнам гомиле и попуним рупе.
        maze_karel_2_7: Крава је на мом пољу! Напиши нову функцију  која ми помаже
          да избегнем краву и уклоним гомилу. Стави све своје блокове унутар нове
          функције.
        maze_karel_2_8: Употреби ову нову функцију,  "avoid the cow and remove 1 (избегни
          краву и уклони 1)", како бих ми помогао да уклоним све гомиле.
        maze_karel_2_9: Уреду, ево је функција која уклања 4 различите гомиле рљавштине
          на вертикалној колони. Пробај да поставиш ову функцију унутар петље, тако
          да уклониш све гомиле прљавштине користећи само пар нових блокова.
        maze_karel_2_10: Помери ме преко поља, и искористи ове две функције како бих
          ми помогао да уклоним све гомиле и попуним све рупе.
        turtle_3_1: Ова загонетка вам показује како су "draw a square (нацртај квадрат)"
          и "нацртај круг" функције дефинисане. Дефинисање функције не покреће њене
          блокове. Морате извући "draw a square" блок како бих нацртали квадрат.
        turtle_3_2: Користећи "draw a square"(нацртај квадрат) функцију као пример,
          направи "draw a triangle"(нацртај троугао) функцију и искористи је.
        turtle_3_3: 'Нацртај троугласте ограде око мачака, и квадрате око крава. Савет:
          успут истестирај програм.'
        turtle_3_4: Пробај да сазнаш како да користиш "draw a square"(нацртај квадрат)
          и "draw a triangle"(нацртај троугао) (и још неке блокове) како бих нацртао
          кућу око лава.
        turtle_3_5: 'А сада, креирај нову "draw a house(нацртај кућу)" функцију и
          искористи је да удомиш две мачке. Напомена: Креирај нову функцију користећи
          "do something(уради нешто)" блок, и унеси свој текст како бих дао име блоку.'
        turtle_3_6: 'Користите  "draw a square(нацртај квадрат)" као пример, додајте
          унос кутију назван "length(дужина)" како бих сте нацртали троугао. Затим,
          нацртајте троуглове различитих величина.(Напомена: кликни на звезду како
          бих додали унос кутију у функцији)'
        turtle_3_7: Додај унос назван "length"(дужина) да бих "нацртао кућу" и направио
          велику кућу за слона (са ивицама од 150 пиксела дужине)
        turtle_3_8: Ево их сви блокови из прошле загонетке. Измени "draw a house(нацртај
          кућу)" функцију, тако да ја завршим у доњем десном углу по завршетку цртања
          нове куће. Користи измењену функцију да нацрташ три куће.
        turtle_3_9: Можеш ли реконструисати  "draw a house (нацртај кућу)" функцију,
          без ичије помоћи? Покушај, а затим нацртај ред кућа.
        turtle_3_10: 'Много сте научили! А сада искористите то знање да нацртате шта
          год пожелите. Покушајте да нацртате звезду, или спиралу, или кул пахуљицу. '
        maze_karel_debug_seq_1: Добро дошао у дебаговање!  Мој код не ради како бих
          требало. Можеш ли одкрити проблем и  исправити га, тако да могу да поравнам
          своје поље како бих било спремно за сејање?
        maze_karel_debug_seq_2: Шта није уреду са овим програмом? Како бих га ти поправио,
          тако да могу да уклоним ту гомилу?
        maze_karel_debug_repeat: Дебагуј овај програм за мене, тако да моје поље буде
          лепо и равно.
        maze_karel_debug_while: Како бих променуо овај програм да ми помогне да попуним
          ову рупу?
        maze_karel_debug_if: Помози! поправи мој програм тако да моје поље буде потпуно
          равно.
        maze_karel_debug_if_else: Дебагуј овај програм тако да могу да попуним рупе
          и уклоним све гомиле.
        maze_karel_debug_function_1: Шта бих променио на овом програму тако да ми
          помогнеш да уклоним све гомиле?
        maze_karel_debug_function_2: Можеш ли да дебагујеш овај програм за мене, тако
          да могу да начиним моје поље равним?
        maze_karel_debug_function_3: 'Измени овај програм па ћу уклонити све гомиле
          на свом пољу. '
        turtle_5_1: Пробај да покренеш овај програм, и направи измене да видиш шта
          ће се догодити. Можеш ли сазнати како функционише? (Или га избриши и замени
          га са нечим потпуно другачијим)
        turtle_5_2: Пробај да покренеш овај програм, и направи измене да видиш шта
          ће се догодити. Можеш ли сазнати како функционише? (Или га избриши и замени
          га са нечим потпуно другачијим)
        turtle_5_3: Пробај да покренеш овај програм, и направи измене да видиш шта
          ће се догодити. Можеш ли сазнати како функционише? (Или га избриши и замени
          га са нечим потпуно другачијим)
        turtle_5_4: Пробај да покренеш овај програм, и направи измене да видиш шта
          ће се догодити. Можеш ли сазнати како функционише? (Или га избриши и замени
          га са нечим потпуно другачијим)
        turtle_5_5: Пробај да покренеш овај програм, и направи измене да видиш шта
          ће се догодити. Можеш ли сазнати како функционише? (Или га избриши и замени
          га са нечим потпуно другачијим)
        turtle_5_6: Пробај да покренеш овај програм, и направи измене да видиш шта
          ће се догодити. Можеш ли сазнати како функционише? (Или га избриши и замени
          га са нечим потпуно другачијим)
        maze_3_1: Морам да стигнем до тог прасета! Искуцај пар позива за кретање();
          тако да могу да повратим своја јаја.
        maze_3_2: Напиши ми програм, тако да могу да дођем целим путем до прасета.
        maze_3_3: Како да дођем до прасета? Постарај се да не натрчим на кутију са
          експлозивом!
        maze_3_4: АРГХ! Напиши ми програм који ме води око експлозива па до прасета.
        bounce_1: Attach a block to the "when left arrow" block, then run and move
          the paddle with the left arrow key to the finish target.
        bounce_2: Attach a block to the "when right arrow" and "when left arrow" blocks,
          then run and move the paddle with the both arrow key to both finish targets.
        bounce_3: TBD
        bounce_4: TBD
        bounce_5: Attach a blocks to the "when right arrow", "when left arrow", "when
          ball hits wall", and "when ball hits paddle" blocks.
        bounce_6: Try again with more balls.
        bounce_7: Now it is getting crazy!
        bounce_10: There is a now a goal at the top. Attach "increment score" blocks
          to the the "when ball in goal" and "when ball misses paddle" blocks to make
          a game.
        bounce_11: You can now attach blocks to the "when run" block. Try changing
          the speed of the paddle and the ball and see how many points you can score
          before your opponent scores twice.
        bounce_12: Create your own Bounce game. You can change all the visuals and
          the rules. When you're done, click Share to let friends try your game on
          their phones.
        Custom_builder: Drag blocks from the toolbox to the workspace to draw the
          level you wish to create. Press "Run Program" when you are ready.
        flappy_1: Attach a block to the "when click" block, then press "Run Program"
          and click or tap to move Flappy to the target.
        flappy_2: Now we've added some ground.  Attach a block to the "when hit the
          ground" block, then press "Run Program". To pass this puzzle, your code
          needs to 'END GAME' when Flappy crashes into the ground.
        flappy_3: The "when Run is clicked" block allows you to run code when your
          game first starts.  Try setting the level speed and flapping to the target.
        flappy_4: Flappy will fly through obstacles unless you write code to make
          him crash. Attach a block to the "when hit an obstacle" block. To pass the
          puzzle, your code needs to 'END GAME' and make Flappy crash into the first
          pipe so he can reach the target.
        flappy_5: Let's add a scoreboard, and count points when Flappy makes it past
          obstacles. Add to the "when pass an obstacle" block, and then score a point
          by flying Flappy through the first set of pipes.
        flappy_6: See if you can still score a point after making Flappy flap either
          a smaller or larger amount.
        flappy_7: Next, try changing the scene by attaching another block to the "when
          Run is clicked".
        flappy_8: You can set visuals anytime, not just when the game starts. Try
          setting a RANDOM scene when other events happen, for example, when passing
          an obstacle.
        flappy_9: To mix things up, when hitting an obstacle or the ground, instead
          of ending the game try setting the score back to 0.
        flappy_11: Create your own Flappy game and share it. You can change the visuals,
          or even the rules. Try changing visuals each time Flappy passes an obstacle.
          Or make Flappy invincible so he never dies.
        flappy_k1_1: Play Flappy
        flappy_k1_2: Attach a block to the "when click" block, then press "Run". Click
          or tap the screen to move Flappy to the target.
        flappy_k1_3: Now we've added some ground.  Attach a block to the "when hit
          the ground" block.  Your code needs to 'END GAME' when Flappy crashes.
        flappy_k1_4: The "when run" block allows you to run code when your game starts.  Try
          setting the level speed and flapping to the target.
        flappy_k1_5: Flappy will fly through obstacles unless you write code to make
          him crash. Attach a block to the "when hit an obstacle" block. Your code
          needs to 'END GAME' when Flappy crashes into the first set of pipes.
        flappy_k1_6: Let's add a scoreboard, and count points when Flappy makes it
          past obstacles. Add to the "when pass an obstacle" block, and then score
          a point by flying Flappy through the first set of pipes.
        flappy_k1_7: See if you can score multiple points for making it past an obstacle
        flappy_k1_8: Next, try changing the scene by attaching another block to the
          "when run" block.
        flappy_k1_9: Try changing the player by attaching a "set player" block to
          the "when run" block.
        jigsaw_1: Klikni na blok
        jigsaw_2: Drag the block to the target
        jigsaw_3: Arrange the blocks to form the image
        jigsaw_4: Arrange the blocks to form the image
        jigsaw_5: Arrange the blocks to form the image
        jigsaw_6: Arrange the blocks to form the image
        jigsaw_7: Arrange the blocks to form the image
        jigsaw_8: Arrange the blocks to form the image
        jigsaw_9: Arrange the blocks to form the image
        jigsaw_10: Arrange the blocks to form the image
        jigsaw_11: Arrange the blocks to form the image
        jigsaw_12: Arrange the blocks to form the image
        jigsaw_13: Поправи слагалицу!
        mazestep_1: Maze step description here
        mazestep_2: Maze step description here
        mazestep_3: Maze step description here
        mazestep_4: Maze step description here
        mazestep_5: Maze step description here
        studio_c2_1: Can you make this dog say "hello world"?
        studio_c2_2: Can you make the dog say something and then have the cat say
          something afterwards?
        studio_c2_3: Can you write a program to make this dog move to the cat?
        studio_c2_4: Can you write a program that makes the dog move to the cat, and
          have the cat say "hello" when the dog reaches him?
        studio_c2_5: Can you write a program to make the octopus say "hello" when
          it is clicked?
        studio_c2_6: Can you write a program to make this penguin move around using
          the up / down / left /right keys to hit all of the targets?
        studio_c2_7: The "repeat forever" block allows you to run code continuously.
          Can you attach blocks to move this dinosaur up and down repeatedly?
        studio_c2_8: Can you have the penguin say "Ouch!" and play a "hit" sound if
          he runs into the dinosaur, and then move him with the arrows to make that
          happen?
        studio_c2_9: Can you add a block to score a point when the penguin runs into
          the octopus, and then move him with the arrows until you score?
        studio_c2_10: Can you add blocks to change the background and the speed of
          the penguin, and then move him with the arrows until you score?
        studio_c2_11: Create your own story. When you're done, click Finish to let
          friends try your story on their phones.
        studio_c3_story_1: Can you make this dog say "hello world"?
        studio_c3_story_2: Can you make the dog say something and then have the cat
          say something afterwards?
        studio_c3_story_3: Can you write a program to make this dog move to the cat?
        studio_c3_story_4: Can you write a program that makes the dog move to the
          cat, and have the cat say "hello" when the dog reaches him?
        studio_c3_story_5: Can you add a block to make the octopus happy?
        studio_c3_story_6: Create your own story. When you're done, click Finish to
          let friends try your story on their phones.
        studio_c3_game_1: Can you write a program to make the octopus say "hello"
          when it is clicked?
        studio_c3_game_2: Can you write a program to make this penguin move around
          using the up / down / left /right keys to hit all of the targets?
        studio_c3_game_3: The "repeat forever" block allows you to run code continuously.
          Can you attach blocks to move this dinosaur up and down repeatedly?
        studio_c3_game_4: Can you have the penguin say "Ouch!" and play a "hit" sound
          if he runs into the dinosaur, and then move him with the arrows to make
          that happen?
        studio_c3_game_5: Can you add a block to score a point when the penguin runs
          into the octopus, and then move him with the arrows until you score?
        studio_c3_game_6: Can you add blocks to change the background and the speed
          of the penguin, and then move him with the arrows until you score?
        studio_c3_game_7: Create your own game. When you're done, click Finish to
          let friends try your story on their phones.
        studio_playlab_1: Can you make this dog say "hello world"?
        studio_playlab_2: Can you make the dog say something and then have the cat
          say something afterwards?
        studio_playlab_3: Can you write a program to make this dog move to the cat?
        studio_playlab_4: Can you write a program that makes the dog move to the cat,
          and have the cat say "hello" when the dog reaches him?
        studio_playlab_5: Can you write a program to make the octopus say "hello"
          when it is clicked?
        studio_playlab_6: Can you write a program to make this penguin move around
          using the up / down / left /right keys to hit all of the targets?
        studio_playlab_7: The "repeat forever" block allows you to run code continuously.
          Can you attach blocks to move this dinosaur up and down repeatedly?
        studio_playlab_8: Can you add a block to score a point when the penguin runs
          into the octopus, and then move him with the arrows until you score?
        studio_playlab_9: Can you add blocks to change the background and the speed
          of the penguin, and then move him with the arrows until you score?
        studio_playlab_10: Create your own game. When you're done, click Finish to
          let friends try your story on their phones.
        studio_full_sandbox: Create your own game. When you're done, click Finish
          to let friends try your story on their phones.
        studio_k1_1: Can you make this dog say "hello world"?
        studio_k1_2: Can you make the dog say something and then have the cat say
          something afterwards?
        studio_k1_3: Can you write a program to make this dog move to the target?
        studio_k1_4: Make the dog move to the cat and the cat say "hello" when he
          gets there.
        studio_k1_5: Can you add a block to make the octopus happy?
        studio_k1_6: Can you write a program to make this penguin move around using
          the up / down / left /right keys to hit all of the targets?
        maze_wordsearch_k_1: Move me to spell the word EAST
        maze_wordsearch_k_2: Move me to spell the word SOUTH
        maze_wordsearch_k_3: Move me to spell the word WEST
        maze_wordsearch_k_4: Move me to spell the word NORTH
        maze_wordsearch_k_6: Move me East and then South to spell the word JUMP
        maze_wordsearch_k_9: Move me one way, then another to spell the word CODE
        maze_wordsearch_k_13: Move me one way, then another to spell the word DEBUG
        maze_wordsearch_k_15: Move me one way, then another to spell the word ABOVE
        maze_wordsearch_k_16: Move me one way, then another to spell the word BELOW
        maze_wordsearch_k_20: This is a test! Move me one way, then another to spell
          the word STORY
        webapp_ec_simple: Create your web app by using createHtmlBlock.
        turtle_ec_1_2: 'Now, draw a square. NOTE: use your favorite color by picking
          it in the new "penColour" block.'
        turtle_ec_1_10: 'You made it! Now, draw anything you want. Some fun ideas:
          a stick figure, snowflake, or spiral. Also try the new "penWidth" block.
          Have fun!'
        studio_ec_sandbox: Create your own game. When you're done, click Finish to
          let friends try your game on their phones.
    levelbuilder:
      frozen line:
        instructions: Hi! I'm Elsa of Arendelle. Help me create a single line.
      frozen perpendicular:
        instructions: Now let's see if we can create two lines that are at a 90 degree
          angle to each other. You will need to use the "Turn" block as well as the
          "Move" block.
      frozen square iterative:
        instructions: It seems like we're halfway to making a square. Let's put 4
          lines together to create a square.
      frozen square loop:
        instructions: Hi, I'm Anna of Arendelle! Let's make a square with the "Repeat"
          block, which uses fewer blocks. How many times (???) should the "Repeat"
          block loop the blocks inside it to make a square?
      frozen square loop 3x:
        instructions: Let's create three squares, turning after each square. Be sure
          to turn by 120 degrees before each new square.
      frozen square snowflake:
        instructions: Can you create a snowflake using the "Repeat" block to make
          a square 10 times, and the "Turn" block to turn 36 degrees between each
          square?
      frozen cross:
        instructions: Use the "Repeat" block to create a plus sign. Did you notice
          Elsa can move forward and backward?
      frozen cross rotate:
        instructions: Now try repeating it 10 times. How many degrees do you need
          to turn between each line?
      frozen cross rotate dense:
        instructions: 'Let''s repeat it 90 times! How many times does 90 go into 360?
          Hint: It''s a really small number.'
      frozen diamond:
        instructions: 'Let''s create a parallelogram. It''s just like a square but
          has different angles: 60 and 120 degree angles instead of 90 degree angles.'
      frozen diamond mini snowflake:
        instructions: Did you know every snowflake is a different shape? Let's create
          a new snowflake by using the "Repeat" block to repeat a parallelogram 4
          times, turning right by 90 degrees between each parallelogram.
      frozen diamond snowflake:
        instructions: Now, let's create a new snowflake by using the repeat block
          to repeat a parallelogram 10 times, turning right by 36 degrees between
          each one.
      frozen circle:
        instructions: A circle is a special shape. Can you figure out what number
          to replace the question marks with to draw a circle?
      frozen circle function:
        instructions: Use the new "Create a circle" block to create 10 overlapping
          circles. Don't forget to jump forward between circles.
      frozen circle function in circle:
        instructions: Now let's create 20 overlapping circles, turning 18 degrees
          between each circle.
      frozen circle function with parameter:
        instructions: Here's a "Create circle" block that can make circles of different
          sizes. Can you use this to create a small circle of size 5 and a larger
          circle of size 10?
      frozen snowflower:
        instructions: Intricate snow patterns can be created with very simple shapes.
          Can you make a pattern by repeating 5 circles of size 5 and 5 circles of
          size 10?
      frozen snowflake branch:
        instructions: Try using the "Create a snowflake branch" block to create three
          branches, which starts to look like a snowflake.
      frozen snowflake full:
        instructions: Now let's repeat it 8 times to make a beautiful snowflake!
      frozen freeplay:
        instructions: You've officially become a master artist! Create a winter wonderland.
      scrat 16:
        instructions: Acorn! Acorn! Acorn! Use an "if" block to get me there with
          the fewest number of blocks.
      scrat 17:
        instructions: Ok, let's do that again for practice - this isn't very different,
          but watch out for the wall!
      scrat 18:
        instructions: The "If-else" blocks checks a condition, and then does one thing
          OR another. To get me to the acorn try to use this new block.
      scrat 19:
        instructions: Још једна вежба "ако-иначе" блока, можеш ли је урадити како
          треба из првог пута?
      scrat 20:
        instructions: Can you add just 3 blocks to help me solve a more complex maze?
          If you do it right, I can walk any curvy path no matter the length. Hurry!
          The ice is melting!
      Standalone_Artist_1:
        instructions: Welcome to Artist! First off, let's try to make a simple square
          using the turn right block and move forward block. Each side should be 100
          pixels long.
      Standalone_Artist_2:
        instructions: Draw this diamond with 120 and 60 degree angles and 150 pixel
          long sides.
      Standalone_Artist_3:
        instructions: Can you draw this hexagon with 100 pixel sides and 60 degree
          turns?
      Standalone_Artist_4:
        instructions: Now you've got a new block to play with, the loop. This will
          repeat a set of commands. What happens if you loop these commands 6 times?
      Standalone_Artist_5:
        instructions: How many times do you need to loop this diamond to draw the
          flower?
      Standalone_Artist_5.5:
        instructions: 'Notice how we simplified the diamond code by turning it into
          a loop. You can loop that whole sequence 12 times to draw the flower. Hint:
          You''ll need to turn 30 degrees after your diamond loop so you don''t keep
          drawing over the same diamond.'
      Standalone_Artist_6:
        instructions: 'Loop this hexagon code 6 times to create the design. How many
          degrees will you need to turn each time? Hint: divide the number of degrees
          in a circle by the number of times you are looping.'
      Standalone_Artist_7:
        instructions: 'A function is another programming tool to help you avoid repeating
          yourself. This function draws a flower, so you can use it any time you want
          to draw a flower. Use this and the new jump block to draw these flowers.
          Hint: The flowers are 150 pixels apart'
      Standalone_Artist_8:
        instructions: Here's a function called "Draw a shape" that we've programmed
          to draw hexagons. Run the code to see what it does and then experiment with
          the function to see what happens. Can you make it draw a pattern of squares,
          triangles, or octagons?
      Standalone_Artist_9:
        instructions: Now go ahead and make whatever picture you'd like! You've even
          got an empty function that you can make do whatever you want!
    video:
      name:
        maze_intro: Лавиринт увод-представљање
        artist_intro: Уметник Увод
        farmer_intro: Фармер Увод
        flappy_intro: Flappy Intro
        loop_times: Поновите пута блок
        loop_until: Понављајте док Блок
        if: Ако Блок
        if_else: Ако/Друго Блок
        if_else_scrat: Ако/Друго Блок
        function: Функције
        loop_while: Док (While  Петља) Блок
        loop_for: Бројач Блок
        parameters: функције са параметрима
        hoc_wrapup: Час Кодирања Умотавање
        Unplug1: What is CS?
        Unplug2: Компјутерско Размишљање
        Unplug3: Графиконско - Папирно Програмирање
        Unplug4: Алгоритми
        Unplug5: Функције
        Unplug6: Кондиционали
        Unplug7: Songwriting
        Unplug8: Апстракција
        Unplug9: Relay programming
        Unplug10: Internet
        Unplug11: Замотај-Умотај
        C1_happy_maps_unplugged: Happy Maps
        C1_moveitmoveit_unplugged: Move It, Move It
        C1_bigevent_unplugged: The Big Event
        C1_getting_loopy: Getting Loopy
        C1_pair_programming: Pair Programming
        C1_maze_intro_sequencing: Maze Sequencing Intro
        C1_maze_debugging: Maze Debugging
        C1_bee_level_intro: Bee Level - Intro
        C1_artist_intro: Уметник Увод
        C1_spelling_bee_intro: Spelling Bee Intro
        C1_zuck_repeat_loop: Maze Loops
        C1_bee_loops: Bee Loops
        C1_maze_loops: Maze Loops
        C1_playlab_storytelling: Play Lab - Create a Story
        C1_planting_seed: Planting a Seed
        C1_building_foundation: Building a Foundation
        C1_going_places_safely: Going Places Safely
        C2_maze_intro: Лавиринт увод-представљање
        C2_artist_intro: Уметник Увод
        C2_zuck_repeat_loop: Maze Loops
        C2_artist_loops: Artist Loops
        C2_artist_debugging: Artist Debugging
        C2_bee_loops: Bee Loops
        C2_bee_debugging: Bee Debugging
        C2_bee_conditionals: Bee Conditionals
        C2_playlab_createstory: Play Lab - Create a Story
        C2_graph_paper: Графиконско - Папирно Програмирање
        C2_conditionals_with_cards: Кондиционали
        C2_binary_bracelets: Binary Bracelets
        C2_relay_programming: Релејно Програмирање
        C2_paper_airplanes: Paper Airplanes
        C2_digital_footprint: Your Digital Footprint
        C3_maze_level_4: Maze Loops
        C3_artist_intro: Уметник Увод
        C3_artist_functions: Artist Functions
        C3_bee_functions: Bee Functions
        C3_bee_conditionals: Bee Conditionals
        C3_maze_conditionals: Maze Conditionals
        C3_artist_nested_loops: Nested Loops
        C3_farmer_while: While Loops
        C3_bee_nested_loops: Nested Loops
        C3_bee_debugging: Bee Debugging
        C3_bounce: Bounce
        C3_playlab_create_game: Play Lab - Create a Game
        C3_computational_thinking: Компјутерско Размишљање
        C3_dice_race: Dice Race
        C3_internet: Internet
        C3_crowdsourcing: Crowdsourcing
        C3_functional_suncatchers: Functional Suncatchers
        C3_songwriting_with_parameters: Songwriting With Parameters
        C4_intro: Introduction
        C4_bee_conditional: Bee Conditionals
        C4_variables_artist: Variables - Artist
        C4_variables_playlab: Variables - Play Lab
        C4_for_loops: For Loops
        C4_math_artist: Programming the Artist with Math
        C4_function_edit: Editing Functions
        C4_function_create: Creating Functions
        C4_function_parameters: функције са параметрима
        C4_conditionals: Кондиционали
        C4_unplugged_algorithms: Algorithms with Tangrams
        C4_unplugged_madlibs: Mad Libs
        C4_unplugged_variables: Variables in Envelopes
        C4_unplugged_forloops: For Loops
        C4_unplugged_parameters: Songwriting with Parameters
        C4_unplugged_binary: Binary
        frozen_intro: Hour of Code Intro
        frozen_loops: Introduction to Loops
        frozen_functions: Introduction to Functions
        playlab_intro: Introduction to Play Lab
        playlab_events: Play Lab Events
        playlab_repeat_forever: Play Lab Repeat Forever
    callout:
      text:
        drag_blocks: Drag a "move" block and snap it below the other block
        run: Hit "Run" to try your program
        watch_again: Click here to watch the video again
        gray_block_explanation: Blocks that are grey can't be moved or deleted. Can
          you solve the puzzle anyway?
        show_code_explanation: Click here to see the code for the program you're making
        instructions_repeat_explanation: The instructions for each puzzle are repeated
          here
        category_explanation: You have all the same blocks but they've now been arranged
          in categories
        set_sprite_image: Attach a "set actor to image" block to the "when story starts"
          block to enable an actor for this story
        studio_say_text: Type what you want your actor to say within these quotes
        jigsaw_click: Click this block!
        move_elsa_forward: Drag a "Move Forward" block and snap it below the "When
          Run" block to make Elsa move forward
        turn_elsa: Use the "Turn" block to make Elsa turn. The number in the drop-down
          determines how much Elsa turns
        replace_questions: Use the drop-down to replace "???" with a number
        replace_questions_degree: Use the drop-down to replace "???" with the correct
          degree to turn
        repeat_blocks: Use the "Repeat" block and wrap it around the blocks in the
          workspace
        repeat_blocks_1: (1) Use this block and put it around the grey blocks in the
          workspace
        repeat_blocks_2: (2) Move the "Repeat" block here, and place the gray blocks
          inside
        snowflake_dropdown: Use this drop-down to create different snowflakes!
        degrees_per_side: Divide 360 by the number of sides to get the size of each
          angle in degrees.
        set_sides: Use this block to set "sides" to the number needed to complete
          the puzzle.
        set_length: Use this block to set "length" to the correct value.
        which_equation: Which equation makes each side shorter for shapes with more
          sides?  Try each equation!
        get_nectar: Use the new "get nectar" block.
        actions_category: The tool box got a new look! The "Actions" blocks are in
          here now.
        draw_square_hint: 'Hint: Use the square loop you just made in the last puzzle.'
        edit_function: Use this button to edit the function.
        create_function: Click here to open the "Functions" flyout, then click the
          "Create a Function" button.
        house_hint: It's ok if the picture doesn't look like a house yet. We will
          fix it in the next puzzle.
        edit_draw_square: Use this button to edit the function and add the loop.
        edit_get_nectar: Use this button to edit the function and change the direction
          the Bee will turn to get the nectar.
        logic_category: Open the "Logic" flyout to find the "if/else" block.
        length_parameter: Can you update this function so it uses the "length" parameter?
        frozen_diamond_repeat: Use the repeat block to create this shape.
        frozen_circle_function_in_circle_turn: Don't forget to turn after creating
          each circle.
        frozen_circle_function_with_parameter_circle: Use the "create a circle" block
          and change the size.
        frozen_snowflake_branch: Use the "create a snowflake branch" block
        frozen_create_square: Attach more blocks here to create a square
        playlab_drag_say: Drag the "say" block here and type "hello"
        playlab_use_twice: Use this block twice and remember to change the actor number
        playlab_move_girl: Use the "move right" block to move Tennis Girl
        playlab_play_sound: Add "play sound" block here
        playlab_arrow_keys: Remember to use these to move the witch after clicking
          on Run
        playlab_add_move: Add "move" blocks inside this repeat block
        playlab_add_score: Add score blocks here
        playlab_add_blocks: Add your blocks here
        set_variable: Drag a number block here to set your variable
        place_variable: Drag your variable inside this block
        bee_for_loop: Drag the largest number of nectar you want the bee to collect
          here
        place_counter_variable: Drag your counter variable inside this block
        function_editor_draw_square: This is your function definition. These blocks
          run everytime you use the "draw a square" block
        change_here: Make your change here
        write_draw_square_function: Drag blocks from the toolbox into here that draw
          a square
        write_draw_triangle_function: Drag blocks from the toolbox into here that
          draw a triangle
        edit_add_parameter: Click edit to add a parameter in your function
        add_and_drag_parameter: Write in the name of your parameter here, click add,
          and then drag it into your function definition
        fill_in_actor: Fill in the ??? with numbers that correspond to each actor
          (1, 2, and 3)
        repeat: Put blocks inside the loop to repeat commands
        if_bee_nectar: Use the "if" block to decide if the bee should get nectar
        if_else_bee: Use the "if/else" block so that the Bee gets nectar from a flower,
          and makes honey if it's not a flower
        repeat_full_circle: Enter in the number of times the zombie has to move to
          make a full circle
        place_length_variable: Drag the length variable here to replace the question
          marks
        arrows_move_actor: Use the arrows to move the actor
        right_arrow_fireball: Use the right arrow to shoot fireballs
        name_function: Write the name of your function here
