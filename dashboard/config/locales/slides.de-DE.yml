"de":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Willkommen zu deiner ersten Programmierstunde! Fangen wir gleich mit
          der ersten Übung an.
      2:
        image: notes/hoc1_2.jpg
        text: Wir werden Blocky, eine Grafische Programmiersprache in der du mit Drag&Drop
          Bausteine setzt, benutzen um Programme zu schreiben.
      3:
        image: notes/hoc1_3.jpg
        text: Meistens werden Programme geschrieben, aber Blockly ist grafisch. Jeder
          Baustein entspricht einer Zeile "echten" Codes.
      4:
        image: notes/hoc1_4.jpg
        text: Du wirst die Grundlagen der Informatik lernen. Konzepte die überall
          genutzt werden, von erstellen von Apps bis zum Kontrollieren des Mars Rovers.
      5:
        image: notes/hoc1_5.jpg
        text: Ein Programm ist eine Ansammlung von Anweisungen, die dein Computer
          befolgt.
      6:
        image: notes/hoc1_6.jpg
        text: Das Ziel deines ersten Programmes ist es Angry Bird durch ein Laybrinth
          zum grünen Schwein zu führen.
      7:
        image: notes/hoc1_7.jpg
        text: Die linke Seite ist das Labybrinth wo dein Programm ausgeführt wird.
          Die Anweisungen für jedes Puzzle findest du unter dem Laybrinth.
      8:
        image: notes/hoc1_8.jpg
        text: Der mittlere Werkzeugkasten enthält die Befehlsbausteine für den Vogel.
          Verwende sie, um das Programm zu erstellen.
      9:
        image: notes/hoc1_9.jpg
        text: Rechts ist der Arbeitsbereich, wo die Bausteine aus dem Werkzeugkasten
          zum Programm zusammengesteckt werden. Um einen Block zu löschen, ziehe ihn
          in den Papierkorb in der Ecke.
      10:
        image: notes/hoc1_10.jpg
        text: Jeder Baustein ist eine Anweisung. Wenn du einen "vorwärts bewegen"-Baustein
          auf deinen Arbeitsbereich ziehst und anschließend "Programm Starten" drückst,
          dann bewegt sich der Vogel im Labyrinth einen Schritt nach vorne.
      11:
        image: notes/hoc1_11.jpg
        text: Um mehr als eine Aktion zu auszuführen, kannst du viele Bausteine in
          den Arbeitsbereich ziehen und sie zusammenstecken. Der Vogel wird die Befehle
          von oben nach unten abarbeiten.
      12:
        image: notes/hoc1_12.jpg
        text: Wenn Du ein Programm reparieren und es nochmals versuchen möchtest,
          dann drücke den "Zurücksetzen" Knopf.
      13:
        image: notes/hoc1_13.jpg
        text: Holen wir die Schweine!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hallo, ich heiße JR! Jedes Autorennteam braucht ComputerspezialistInnen,
          um erfolgreich zu sein. Sie analysieren Messdaten des Autos, um es noch
          schneller zu machen.
      2:
        image: notes/stage5_2.jpg
        text: In diesen Rätseln sind Sie ein Künstler, der eine Linie hinter sich
          zeichnet, überall da, wo er hin geht.
      3:
        image: notes/stage5_3.jpg
        text: Dieser Baustein sagt "Bewege dich 100 Pixel nach vorne". Pixel sind
          sehr kleine Punkte auf dem Bildschirm.
      4:
        image: notes/stage5_4.jpg
        text: Dieser Block bedeutet „um 90 Grad nach rechts drehen.“ Damit dreht sich
          die Künstlerfigur, genau wie beim „Drehen“-Baustein in den Labyrinth-Puzzles.
      5:
        image: notes/stage5_5.jpg
        text: Klicke auf den Pfeil in den Bausteinen, um zu verändern, wie weit sich
          die Künstlerfigur nach vorne läuft oder in welche Richtung sie sich dreht.
          Spiele etwas mit diesen Bausteinen herum, um mit ihnen vertraut zu werden.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hallo, bin ich Paola! In diesen Rätseln sind Sie ein Bauer, der sein
          Feld völlig flach bekommen muss, um mit dem Anpflanzen zu beginnen.
      2:
        image: notes/stage9_2.jpg
        text: Du musst ihr helfen alle Erdhaufen zu entfernen und alle Löcher zu füllen.
      3:
        image: notes/stage9_3.jpg
        text: Die neuen Bausteine entferne eine Schauel voll Erde von einem Haufen
          und fülle eine Schaufel voll Erde in ein Loch.
      4:
        image: notes/stage9_4.jpg
        text: Die Haufen und Löcher sind unterschiedlich groß, weshalb du dem Bauer
          sagen musst, wie viele Schaufeln er benutzen muss.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hallo, ich bin Katie! Etwas vom Interessantesten an der Informatik ist,
          dass ein Computerprogramm interaktiv sein kann.
      2:
        image: notes/flappy02.jpg
        text: Jedes Mal, wenn jemand auf einem Computer oder Smartphone klickt, den
          Bildschirm berührt oder tippt, wird ein Event erzeugt und Code wird ausgeführt,
          der entscheidet was bei diesem Event zu tun ist.
      3:
        image: notes/flappy03.jpg
        text: 'Zum Beispiel könntest du einen Event-Handler haben, der sagt: "Wenn
          mit der Maus geklickt wird, spiele einen Ton" '
      4:
        image: notes/flappy04.jpg
        text: Hast du schon von FlappyBird gehört? Durch Benutzen von Event-Handlern
          werden wir eine eigene Version von FlappyBird programmieren!
      5:
        image: notes/flappy05.jpg
        text: Den Code wirst du durch Drag-and-drop von Blöcken schreiben, die Kommandos
          für den Computer sind. Unter der Haube steht jeder dieser Blöcke für wirklichen
          Code.
      6:
        image: notes/flappy06.jpg
        text: 'Wenn du einen Blick auf den Arbeitsbereich wirfst, siehst du einige
          grüne Blöcke, die für dich eingefügt wurden - das sind "Event-Handler" '
      7:
        image: notes/flappy07.jpg
        text: Wenn du den Vogel beim Mausklick mit den Flügeln schlagen lassen willst,
          kannst du das durch Anhängen des "FLAP"-Blocks an den passenden Event-Handler
          erreichen. Nun wird der Vogel jedes Mal seine Flügel bewegen, wenn mit der
          Maus geklickt wird.
      8:
        image: notes/flappy08.jpg
        text: In jedem Puzzle dieser Übung werden wir neue Typen von Events als grüne
          Blocks im Arbeitsbereich einfügen und du kannst die passenden Blöcke für
          Events auswählen.
      9:
        image: notes/flappy09.jpg
        text: Wenn du einen Dropdown-Pfeil wie diesen siehst, kannst du die Einstellungen
          ändern - zum Beispiel, was für ein Ton abgespielt werden soll, wenn der
          Vogel den Boden berührt.
      10:
        image: notes/flappy10.jpg
        text: Im letzten Puzzle wirst du dein eigenes Spiel erstellen und deinen Freunden
          zeigen können. Viel Spass!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hi, ich bin Mark! Lass uns etwas über Schleifen lernen. Wenn Du Schleifen
          verwendest, kannst du dem Computer befehlen, dass er jede beliebige Anweisung
          wieder und wieder, tausendmal oder sogar milliardenmal, wiederholen soll.
      2:
        image: notes/hoc2_2.jpg
        text: In diesem Puzzle möchten wir, dass sich der Vogel 5 Schritte nach vorne
          zum Schwein bewegt.
      3:
        image: notes/hoc2_3.jpg
        text: Wir können den neuen "Wiederholen"-Block verwenden, um uns zu helfen.
      4:
        image: notes/hoc2_4.jpg
        text: Anstatt 5 "vorwärts gehen"-Bausteine zu stapeln...
      5:
        image: notes/hoc2_5.jpg
        text: Wir können den "vorwärts bewegen"-Baustein in einen "Wiederholen"-Baustein
          ziehen und eine Zahl im Baustein angeben, wie oft es wiederholt werden soll.
      6:
        image: notes/hoc2_6.jpg
        text: 'Und wichtig: Man kann mehr als einen Baustein in einen "Wiederholen"-Baustein
          ziehen.'
      7:
        image: notes/hoc2_7.jpg
        text: Viel Spaß mit deinem neuen "Wiederholen" Baustein!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Hi, ich bin Chris. Bevor ich angefangen habe Basketball für das Team
          "Miami Heat" zu spielen, habe ich an der "Georgia Tech"-Universität Informatik
          studiert. Lass uns den neuen "Wiederholen bis"-Baustein ausprobieren.
      2:
        image: notes/hoc3_2.jpg
        text: Was wäre wenn wir nicht wüssten, wie weit sich der Vogel bewegen muss,
          um zum Schwein zu kommen?
      3:
        image: notes/hoc3_3.jpg
        text: Wenn wir einen "vorwärts bewegen"-Baustein in den "Wiederholen bis"-Baustein
          setzen, wird sich der Vogel nach vorne bewegen BIS er bei einem Schwein
          ankommt (oder in eine Wand kracht).
      4:
        image: notes/hoc3_4.jpg
        text: 'Und das ist wichtig: wie zuvor auch, können wir in den "wiederhole
          bis"-Baustein mehrere Bausteine setzten, die dann alle wiederholt werden.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hi, ich bin Bill! Lass uns ein neues, fundamentales Konzept lernen:
          Die "Wenn"-Anweisungen. Damit trifft der Computer Entscheidungen.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Du benutzt "Wenn"-Anweisungen tagtäglich selbst. Zum Beispiel überlegst
          Du jeden Morgen bevor du aus dem Haus gehst: "Wenn" es regnet, muss ich
          meinen Regenmantel anziehen.'
      3:
        image: notes/hoc4_3.jpg
        text: Wir können den Zombie anweisen zu überprüfen WENN es einen Weg nach
          links gibt und wenn er einen Weg nach links findet, dass er sich in diese
          Richtung drehen soll.
      4:
        image: notes/hoc4_4.jpg
        text: Um ein Programm dafür zu schreiben, ziehe zuerst unseren "Wenn"-Baustein
          heraus und setze danach einen "nach links drehen"-Baustein hinein.
      5:
        image: notes/hoc4_5.jpg
        text: Wenn wir jetzt einen "gehe vorwärts"-Baustein darüber stapeln und um
          alles einen "Wiederholen"-Baustein legen, wird der Zombie bei jeder Bewegung
          prüfen, ob es einen Weg nach links gibt und sich in dem Fall drehen. Der
          "Wiederholen" Befehl ist wichtig, um bei jedem Schritt auf eine Drehmöglichkeit
          zu prüfen.
      6:
        image: notes/hoc4_6.jpg
        text: Wenn Anweisung sind in der Informatik wirklich wichtig. Eines meiner
          ersten Programme war Tic Tac Toe, und es gab eine Wenn Anweisung, die sagte,
          wenn die andere Person gewinnen sollte, blockiere das Feld, mit dem sie
          gewinnen kann.
      7:
        image: notes/hoc4_7.jpg
        text: Viel Spaß mit dem "Wenn"-Baustein!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hi, ich heiße Saloni. Ich verwende Informatik um Probleme im Gesundheits-
          und Medizinbereich zu lösen. Lass uns etwas über den "Wenn-Ansonsten"-Baustein
          lernen. Er sieht ähnlich wie ein "Wenn"-Baustein aus, aber er hat einen
          Zusatzteil am Ende der "Ansonsten" heißt.
      2:
        image: notes/hoc5_2.jpg
        text: Wenn ich einen "gehe vorwärts"-Baustein, an der Stelle, wo es heißt
          "tun", und einen "drehe links"-Baustein, wo es heißt "sonst", setzte, kann
          der Zombie zwischen 2 Optionen wählen. Gibt es einen Weg geradeaus, bewegt
          sich der Zombie vorwärts. Gibt es ist keinen Weg geradeaus, dreht sich der
          Zombie nach links.
      3:
        image: notes/hoc5_3.jpg
        text: Genau wie einen "Wenn"-Baustein, können wir einen "Wenn-Ansonsten"-Baustein
          in einen "Wiederholen"-Baustein setzen, so dass der Zombie sich weiter bewegt
          und der "Wenn-Ansonsten"-Baustein prüft, ob es einen Weg zum Drehen gibt.
      4:
        image: notes/hoc5_4.jpg
        text: Jetzt bring die Zombies dahin, wo sie hingehören!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: An if-else statement is a decision between two things. Let's see how
          we can use an if-else statement with our buddy Scrat the squirrel.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: This block looks the same as the "if" block, but there's an extra part
          at the bottom that says "else". If I put a "move forward" block where it
          says "do" and a "turn left" block where it says "else", that means Scrat
          the squirrel will move forward if there's a path ahead. If there's not a
          path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: It's making a decision and doing one of the two actions based on that
          decision. And just like "if" blocks, you can put "if-else" blocks inside
          "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Now let's help Scrat the squirrel get that acorn!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hi, bin ich Brina, Ingenieur bei Instagram. Eine Funktion ist eine Zusammenfassung
          bestimmter Codezeilen, die Du immer und immer wieder verwenden möchtest,
          statt den Code jedesmal auszuschreiben, kannst du einfach einen Baustein
          verwenden.
      2:
        image: notes/stage13_2.jpg
        text: Wir lernen jetzt, wie man Funktionen definiert. Funktionsdefinitionen
          haben einen Stern in der Ecke. Der Name der Funktion ist in der obersten
          Zeile geschrieben.
      3:
        image: notes/stage13_3.jpg
        text: Die Bausteine, die in der Definition liegen, sagen uns, was sie tut.
          Daher heißt diese Funktionsdefinition "5 hinzufügen" und ist aus einem "wiederhole"-Baustein
          und einem "hinzufügen"-Baustein aufgebaut.
      4:
        image: notes/stage13_4.jpg
        text: Die Definition ist auf dem Arbeitsplatz, aber unserer Bauer wird die
          Funktion nicht ausführen, bis wir unseren "5 hinzufügen"-Baustein aus der
          Funktionen-Kategorie hinzufügen.
      5:
        image: notes/stage13_5.jpg
        text: Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hi, Ich bin Makinde! Lernen wir was über den "solange" Baustein. '
      2:
        image: notes/stage9_6.jpg
        text: Der "solange"-Baustein wird alles, was du hereintust, ausführen, SOLANGE
          die Anweisung darüber WAHR ist.
      3:
        image: notes/stage9_7.jpg
        text: Zum Beispiel, wenn der Bauer auf einem Haufen steht, wird sie immer
          wieder einen Haufen entfernen, SOLANGE sie immernoch auf einem Haufen steht.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hi, ich bin Trina und ich arbeite für Pixar. Ich habe an vielen Filmen,
          einschließlich Shrek mitgearbeitet.
      2:
        image: notes/stage11_2.jpg
        text: Dies ist unsere neue "Zähler"-Schleife. Sie wiederholt Befehle immer
          und immer wieder und du kannst die Befehle jedes mal leicht verändern lassen.
      3:
        image: notes/stage11_3.jpg
        text: In diesem Beispiel sagt die "Zähler"-Schleife "Zähle mit Zähler von
          50 bis 90 mit 10" und in der Schleife gibt es einen "Zeichne ein Quadrat"-Baustein.
          Ziehe den "Zähler"-Baustein aus dem "Variablen"-Abschnitt auf die Stelle,
          wo der "Länge"-Baustein ist.
      4:
        image: notes/stage11_4.jpg
        text: Dies bedeutet, dass unser Künstler ein Quadrat zeichnen wird, das eine
          Seitenlänge von 50 Pixeln hat, dann wird er 10 hinzufügen und ein Quadrat
          mit einer Seitenlänge von 60 Pixeln zeichnen. Er wird immer 10 hinzufügen
          und Quadrate malen, bis er 90 erreicht hat. Also gibt es Quadrate mit Seitenlängen
          von 50, 60, 70, 80 und 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hi, ich bin Janete und ich bin Ingenieurin bei Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Was, wenn wir ein paar Dreiecke mit verschiedenen Längen malen wollen?
      3:
        image: notes/stage15_3.jpg
        text: Wir könnten den ganzen Code per Hand schreiben, oder wir benutzen eine
          Funktion mit Parametern.
      4:
        image: notes/stage15_4.jpg
        text: Um dies zu tun, klicke auf den blauen Stern der "Zeichne ein Dreieck"-Funktionsdefinition.
          Ziehe dann "Name eingeben" in den "Eingeben"-Baustein.
      5:
        image: notes/stage15_5.jpg
        text: Schreibe dann "Länge" and sie Stelle, wo "x" steht, drücke "Enter" und
          du erstellst eine Längeneingabe für deine Funktion.
      6:
        image: notes/stage15_6.jpg
        text: Dann klicke auf den Stern. Jetzt klickst du auf die "Variablen"-Kategorie
          und ziehst den "Länge"-Baustein in den "vorwärts bewegen"-Baustein deiner
          Funktionsdefinition. Ziehe den alten Nummernblock weg.
      7:
        image: notes/stage15_7.jpg
        text: Um deine Funktion mit Parametern zu benutzen, klicke auf die "Funktionen"-Kategorie
          und ziehe deine "Zeichne ein Dreieck mit Länge"-Funktion heruas.
      8:
        image: notes/stage15_8.jpg
        text: Jetzt kannst du den Mathe-Baustein verändern, um Dreiecke in verschiedenen
          Größen zu zeichnen.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Herzlichen Glückwunsch! Mit dem letzten Rätsel, das du gerade gelöst
          hast, hast du ein Prgramm geschrieben, das JEDER Roboter dazu verwenden
          kann, um seinen Weg durch nicht-verzweigte Labyrinthe oder Tunnel aller
          Längen zu finden. Ganz egal ob es ein Zombie, ein Vogel, ein Mars-Rover,
          oder sogar ein selbstfahrendes Auto ist.
      2:
        image: notes/hoc6_2.jpg
        text: Die grundlegenden Konzepte, die du verwendet hast, sind das Herzstück
          jedes Programms. Wir haben etwas über Schleifen, Wiederholungen, Wenn-Dann-Befehle
          und Wenn-Ansonsten gelernt.
      3:
        image: notes/hoc6_3.jpg
        text: Wenn Dir die ersten Stunden Programmieren gefallen haben, dann besuche
          code.org, um Deine Ausbildung in der Informatik fortzuführen! Sobald Du
          unseren 20 Stunden-Kurs abgeschlossen hast, hast Du die Grundlagen des Programmieren
          gemeistert und kannst anfangen zu lernen wie man Handy-Apps, Roboter-Anweisungen,
          Spiele, oder was immer Du möchtest, programmiert.
      4:
        image: notes/hoc6_4.jpg
        text: 'Technologie verändert alles was wir tun und es ist egal ob du jung
          oder alt bist: Programmieren macht Spaß, es ist kreativ, und jeder kann
          es lernen!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: In Text Form anzeigen kommt bald!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use
          code to join Anna and Elsa as they explore the magic and beauty of ice.
      2:
        image: notes/frozen1_2.jpg
        text: You'll create snowflakes and patterns as you ice skate and make a winter
          wonderland that you can then share with your friends.
      3:
        image: notes/frozen1_3.jpg
        text: In the next hour, you're going to learn the basics of how to code. Traditional
          programming is usually in text, but we'll use Blockly, which uses visual
          blocks that you can drag and drop to write programs. This is how even university
          students learn the basics. Under the hood, you're still creating code.
      4:
        image: notes/frozen1_4.jpg
        text: A program is a set of instructions that tells a computer what to do.
          Let's build a code, or a program, that will help Elsa create a simple line.
          We will use this later to create more complex patterns.
      5:
        image: notes/frozen1_5.jpg
        text: Your screen is split into three main parts. On the left, is the ice
          surface where you'll run your program. The instructions for each level are
          written right below the surface.
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action
          that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: The white space on the right is called the workspace, and this is where
          we'll build our program. To move around the ice surface, you'll use the
          "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: Here, the "Move Forward" block says, "move forward by 100 pixels." When
          we press "Run", what happens? Elsa moves forward a certain amount on the
          screen, 100 pixels in fact! Pixels are basically very tiny squares on your
          computer screen.
      9:
        image: notes/frozen1_9.jpg
        text: The other block we have in this puzzle says "turn right by 90 degrees."
          And when we use this "Turn Right" block, that makes Elsa turn a certain
          amount. You can play around with how far you want Elsa to turn. The angle
          is measured from the path ahead of Elsa. So, this is a 90 degree turn. And
          this is a 120 degree turn.
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking
          the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hi, I’m Paola! Computers are really good at repeating actions. You can
          count to 10, 20, or 100. But a computer can count to a billion or a trillion.
          It won't get bored and it will only take a few seconds. Whether it's counting,
          or drawing, or anything--computers can repeat things hundreds or even billions
          of times.
      2:
        image: notes/frozen2_2.jpg
        text: In programming, we call this a loop. A loop is how you repeat your code
          over and over again. For the next puzzle, your goal is to help Anna create
          a square with the "Repeat" block.
      3:
        image: notes/frozen2_3.jpg
        text: Any blocks of code you put inside the "Repeat" block will be repeated
          in sequence, as many times as you want.
      4:
        image: notes/frozen2_4.jpg
        text: To draw a square, you can use the "Move Forward" and "Turn Right" block
          4 times. But the easier way is to tell the computer to "Move Forward" and
          "Turn Right by 90 degrees" once, and then tell it to repeat this pair of
          actions 4 times. To do that, you need to put the "Move Forward" and "Turn
          Right" block inside a "Repeat" block.
      5:
        image: notes/frozen2_5.jpg
        text: Remember, you can change the number in the "Repeat" block to anything,
          and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, ich bin Chris Bosh. Ich bin ein professioneller Basketball Spieler
          und ich habe in der Schule programmiert.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define
          new commands. Most computer languages have only about 100 words or commands.
          And really, the art and magic is in defining your own new words out of these
          building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: Once you've taught a computer how to do an action once using this sequence
          of commands, you can make up your own name for that action so it's easy
          to repeat it later. When you define your own command and give it a name,
          that's called a function.
      4:
        image: notes/frozen3_4.jpg
        text: Hi, I’m Jess. When programming with blocks, you would use functions
          if there are a set of actions you would like to use lots of times. For example,
          you've written code to create a square.
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple
          squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns.
          In the next puzzle, the code you recently wrote to make a circle is available
          to you as a new function that can make circles of different sizes. Can you
          use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: So far you've been making an animation or a story that does the exact
          same thing every time you run it. Now you can make an interactive game that
          you can actually play.
      2:
        image: notes/playlab_2.png
        text: There's the "when arrow" block and the "move actor" block. You can put
          these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked.
          Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: We're going to create games using Play Lab. Good games have a story,
          and every story has actors. We'll learn how to make our actors like witches,
          alinens, and animals speak, move, and interact with each other. By the end
          of this tutorial, you can build a game from scratch and share it with your
          friends.
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space
          where your program will run. The instructions for each level are written
          below.
      3:
        image: notes/playlab_intro_3.png
        text: The middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace and this is
          where we'll build our program.
      4:
        image: notes/playlab_intro_4.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: In this first puzzle, our actor is a penguin and we'll be making it
          say "Hello!" by dragging the say block out, linking it to the when run block,
          and typing in "Hello." We can also make the penguin move by using the move
          right and move left blocks. Once you have your blocks in place, hit the
          run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: Get started and by the end, you'll be able to create your own game with
          all kinds of players that can interact, turn happy or sad, score points,
          or throw fireballs, or even vanish each other. It's all up to you and the
          game you want to make.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Now, we're going to learn about something that all game programmers
          use everyday. They're called events. An event tells your program to listen
          for when something happens. When that thing happens, it performs an action.
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button,
          or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: Here, we're going to make the space bot greet the earthlings when a
          player clicks on him. We'll use the "when clicked" block and attach the
          "say" block to it. When the player clicks on the space bot, everything attached
          to this "when clicked" event block will be performed. What does your alien
          say?
      4:
        image: notes/playlab_events_4.png
        text: There are also "when arrow" blocks. If you link the "move" blocks to
          these, you can start to move your actors up, down, left, or right. Step
          by step, your game is getting more interactive.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: This is the "repeat forever" block. Anything inside this block will
          happen forever in the game.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: If we want an actor to do something repeatedly, without the player having
          to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries
          of the kingdom, left and right continuously. Learning how the repeat commands
          works, will save you a ton of time later when you build your own game.
