---
fr:
  slides:
    maze_intro:
      1:
        text: Bienvenue à ta première heure de code ! Plongeons dans ton premier moment
          de programmation.
      2:
        text: Nous allons utiliser Blockly, un langage de programmation visuel où
          tu glisses et déposes des blocs pour écrire le code.
      3:
        text: La plupart du code est écrit, mais Blockly est visuel. Chaque bloc correspond
          à une ligne de code «réel».
      4:
        text: 'Tu vas apprendre les bases de l''informatique, des concepts utilisés
          partout : de la création d''applications jusqu''au contrôle du véhicule
          qui s''est posé sur Mars.'
      5:
        text: Un programme est un ensemble d'instructions que ton ordinateur suit.
      6:
        text: Le but de ton premier programme est de guider un Angry Bird dans un
          labyrinthe, afin qu’il attrape un Cochon Vert.
      7:
        text: À gauche se trouve le labyrinthe où ton programme est exécuté. Les instructions
          de chaque puzzle figurent sous le labyrinthe.
      8:
        text: La boîte à outils du milieu a les commandes pour Angry Bird. Tu vas
          utiliser celles-ci pour construire ton code.
      9:
        text: À droite, il y a ton espace de travail où tu déposeras les blocs de
          la boîte à outils pour construire ton programme. Pour supprimer un bloc,
          déplace-le vers la poubelle dans le coin.
      10:
        text: Chaque bloc est une instruction. Si tu fais glisser un bloc «Avancer»
          dans ton espace de travail et appuies sur «Exécuter le programme», l'oiseau
          se déplacera d'un espace dans le labyrinthe.
      11:
        text: Pour faire plusieurs actions, tu peux faire glisser de nombreux blocs
          sur ton espace de travail et les attacher les uns aux autres. L'oiseau exécutera
          toutes les commandes indiquées de haut en bas.
      12:
        text: Si tu exécutes un programme et que tu veux le corriger et réessayer,
          appuies sur le bouton «Réinitialiser».
      13:
        text: Allons attraper ces cochons!
    artist_intro:
      1:
        text: Salut, je suis JR ! Chaque équipe de voitures de course a besoin d'informaticiens
          pour gagner. Ils analysent les données de la voiture pour la faire aller
          plus vite.
      2:
        text: Dans ces puzzles, tu seras un artiste qui dessine une ligne derrière
          eux partout où ils vont.
      3:
        text: Ce bloc dit « Avance de 100 pixels. » Les pixels sont en réalité de
          tous petits points sur ton écran.
      4:
        text: Ce bloc dit « Tourner à droite de 90 degrés. » Cela fera tourner ton
          artiste du même angle que les blocs « Tourner » dans les puzzles du labyrinthe.
      5:
        text: Clique sur la flèche dans l'un de ces blocs pour changer le nombre de
          pas en avant ou de virages que l'artiste fera. Joue un peu avec l’artiste
          pour te familiariser avec ces nouveaux blocs.
    farmer_intro:
      1:
        text: Salut, je suis Paola ! Dans ces puzzles, tu es un fermier qui doit complètement
          niveler son terrain avant de commencer à planter.
      2:
        text: Tu dois l'aider à enlever tous les tas de terre et remplir tous les
          trous.
      3:
        text: Les nouveaux blocs enlèvent 1 pelletée de terre d'un tas et remplissent
          1 trou d’une pelletée de terre.
      4:
        text: Les tas et les trous sont de tailles différentes, donc tu devras dire
          au fermier combien de pelletées il doit utiliser.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Salut, je suis Katie ! Une des choses les plus excitantes à propos de
          l'informatique est qu'un programme informatique peut être interactif.
      2:
        image: notes/flappy02.jpg
        text: Chaque fois que quelqu'un clique ou appuie ou tapote sur un ordinateur
          ou un téléphone, ça génère un ÉVÈNEMENT, et il y a un code qui décide quoi
          faire quand un ÉVÈNEMENT a lieu.
      3:
        image: notes/flappy03.jpg
        text: 'Par exemple, tu pourrais avoir un GESTIONNAIRE D’ÉVÉNEMENTS qui dit
          «quand on clique sur la souris, joue un son.» '
      4:
        image: notes/flappy04.jpg
        text: As-tu déjà entendu parler du jeu Flappy l’oiseau? En utilisant les Gestionnaires
          d'événements, nous allons apprendre à programmer notre version personnalisée
          de Flappy l’oiseau!
      5:
        image: notes/flappy05.jpg
        text: Le code que tu vas écrire implique de glisser et de déposer des blocs
          qui représentent des commandes pour l'ordinateur. Mais en fait, chacun de
          ces blocs est représenté par du code réel.
      6:
        image: notes/flappy06.jpg
        text: 'Si tu regardes dans l''espace de travail, il y a quelques blocs verts
          qui sont déjà remplis pour toi - ce sont des «Gestionnaires d''événements.» '
      7:
        image: notes/flappy07.jpg
        text: Si tu veux que l'oiseau BATTE DES AILES quand tu CLIQUES sur la souris,
          tu peux le faire en attachant le bloc «BATTRE DES AILES» au gestionnaire
          d'événements approprié; et maintenant dans ton jeu, chaque fois que tu cliqueras
          sur la souris, l'oiseau battra des ailes.
      8:
        image: notes/flappy08.jpg
        text: Dans chaque puzzle de cette activité, nous allons introduire des nouveaux
          types d'événements sous la forme de blocs verts sur l'espace de travail,
          et tu pourras décider quel est le bloc approprié à ajouter en réponse à
          ces événements.
      9:
        image: notes/flappy09.jpg
        text: Quand tu vois une flèche déroulante comme ça, cela veut dire que tu
          peux changer les paramètres - comme par exemple, quel son jouer quand Flappy
          l’oiseau touche le sol.
      10:
        image: notes/flappy10.jpg
        text: Dans le puzzle final, tu seras capable de créer ton propre jeu et de
          le partager avec tes amis. Amuse-toi bien!
    loop_times:
      1:
        text: Salut, je suis Mark ! Découvrons les boucles. En utilisant les boucles,
          tu peux dire à un ordinateur de répéter chaque série d'actions une ou plusieurs
          fois, jusqu'à des milliers ou même des milliards de fois.
      2:
        text: Dans ce puzzle, nous voulons faire avancer l'oiseau de 5 cases pour
          arriver au cochon.
      3:
        text: Nous pouvons tout simplement utiliser le nouveau bloc « Répéter ».
      4:
        text: Au lieu d'utiliser 5 blocs « Avancer »...
      5:
        text: Nous pouvons mettre le bloc « Avancer » à l'intérieur du bloc « Répéter
          » et écrire un nombre dans le bloc lui indiquant combien de fois il doit
          répéter l’action.
      6:
        text: 'Et ceci est important: tu peux mettre plus d''une commande à l''intérieur
          d''un bloc « Répéter » .'
      7:
        text: Amuse-toi en utilisant ton nouveau bloc « Répéter »!
    loop_until:
      1:
        text: Salut, je suis Chris. Avant de rejoindre le Heat de Miami, je suis allé
          à Georgia Tech pour étudier l'informatique. Essayons notre nouveau bloc,
          le bloc «Répéter jusqu'à».
      2:
        text: Et si on ne sait pas de quelle distance l'oiseau doit se déplacer pour
          arriver au cochon?
      3:
        text: Si nous mettons un bloc « Avancer » à l'intérieur d'un bloc «Répéter
          jusqu'à», l'oiseau va avancer JUSQU'À ce qu'il atteigne le cochon (ou qu'il
          se cogne contre un mur).
      4:
        text: 'Et ceci est important: comme avant, on peut mettre plusieurs blocs
          à l''intérieur du bloc « Répéter jusqu’à », et ils seront tous répétés.'
    if:
      1:
        text: 'Salut, je suis Bill ! Nous allons apprendre un nouveau concept fondamental
          : les instructions «Si». C''est de cette manière que les ordinateurs prennent
          des décisions.'
      2:
        text: 'Tu utilises des instructions « Si » toi-même tous les jours. Avant
          de sortir chaque matin, tu dis: «SI il pleut dehors, je dois mettre mon
          imperméable.»'
      3:
        text: Nous pouvons dire au zombie de vérifier SI il y a un chemin à gauche,
          et si il en trouve un, nous pouvons le faire tourner dans cette direction.
      4:
        text: Afin d'écrire le code pour ceci, déposons un bloc « Si » et mettons-y
          un bloc «Tourner à gauche» à l'intérieur.
      5:
        text: Maintenant, si nous mettons un bloc « Avancer » au-dessus et englobons
          le tout d'un bloc « Répéter », chaque fois que le zombie bouge, il va vérifier
          s’il y a un chemin à gauche et tourner. La commande « Répéter » est essentielle
          pour vérifier si on peut tourner à chaque étape.
      6:
        text: Les instructions «Si» sont vraiment importantes en informatique. Un
          des premiers programmes que j'ai écrits était un jeu de morpion, et il y
          avait une instruction «Si» qui disait «SI l'autre personne est sur le point
          de gagner, bloque la case qui va le faire gagner.»
      7:
        text: Amuse-toi à utiliser le bloc « Si »!
    if_else:
      1:
        text: Salut, mon nom est Saloni. J'utilise l'informatique pour résoudre des
          problèmes dans le domaine de la santé et de la médecine. Apprenons-en un
          peu plus sur le bloc «Si-Sinon». Il ressemble au bloc « Si », mais il contient
          une partie supplémentaire à la fin qui dit «Sinon».
      2:
        text: Si je mets un bloc « Avancer » à l'endroit où «Faire» est indiqué, et
          un bloc «Tourner à gauche» à l’endroit où « Sinon » est indiqué, cela signifie
          que le zombie choisira entre 2 options. SI il y a un chemin devant, le zombie
          avancera et AUTREMENT (s’il n’y a pas de chemin devant), le zombie tournera
          à gauche.
      3:
        text: Comme pour le bloc « Si », nous pouvons mettre des blocs « Si-Sinon
          » à l'intérieur de blocs « Répéter », afin que le zombie continue à se déplacer
          et le bloc « Si-Sinon » continuera de vérifier s'il y a un endroit où tourner.
      4:
        text: Maintenant, ramène ces zombies à leur place!
    if_else_scrat:
      1:
        text: Une instruction « Si-Sinon » est une décision entre deux choses. Nous
          allons voir comment nous pouvons utiliser une instruction « Si-Sinon » avec
          notre copain Scrat l'écureuil.
      2:
        text: Ce bloc ressemble au bloc « Si », mais il y a une partie supplémentaire
          en bas qui dit «Sinon». Si je mets un bloc « Avancer » à l’endroit où «
          Faire » est indiqué, et un bloc « Tourner à gauche » à l’endroit où « Sinon
          » est indiqué, cela signifie que Scrat l’écureuil avancera s’il y a un chemin
          devant. S'il n'y a pas de chemin devant, Scrat tournera à gauche.
      3:
        text: C'est prendre une décision et faire l'une des deux actions basées sur
          cette décision. Et tout comme les blocs « Si », tu peux mettre des blocs
          «Si-Sinon» à l'intérieur de blocs « Répéter ».
      4:
        text: Maintenant, aidons Scrat l'écureuil à obtenir ce gland !
    function:
      1:
        text: Salut, je suis Brina, ingénieur chez Instagram. Une fonction est un
          ensemble de lignes de code que tu veux utiliser encore et encore, alors
          plutôt que de ré-écrire le même code plusieurs fois, tu peux utiliser un
          seul bloc.
      2:
        text: Nous allons apprendre comment définir les fonctions. Les définitions
          de fonctions ont une étoile dans le coin. Le nom de la fonction est écrit
          sur la ligne supérieure.
      3:
        text: Les blocs qui vont à l'intérieur de la définition nous disent ce qu'elle
          fait. Ainsi cette définition de fonction s'appelle « Remplir 5 » et est
          composée d'un bloc « Répéter » et d'un bloc « Remplir ».
      4:
        text: La définition se trouve sur l'espace de travail, mais notre fermier
          n’exécutera pas la fonction tant que nous ne sortirons pas le bloc de fonction
          «Remplir 5» de la catégorie fonctions.
      5:
        text: Amusons-nous avec les fonctions!
    loop_while:
      1:
        text: 'Salut, je suis Makinde ! Découvrons le bloc «Tant que». '
      2:
        text: Le bloc « Tant que » fera tout ce que tu mets dedans TANT QUE la condition
          énoncée au-dessus reste VRAIE.
      3:
        text: Par exemple, si la fermière se tient sur un tas de terre, elle continuera
          à enlever 1 pelletée TANT QUE il reste un tas de terre sous elle.
    loop_for:
      1:
        text: Salut, je suis Trina, et je travaille pour Pixar. J'ai travaillé sur
          plusieurs films, y compris celui de Shrek.
      2:
        text: Il s'agit de notre nouvelle boucle «Compteur». Cette boucle répète des
          actions encore et encore, et tu peux modifier légèrement les actions à chaque
          fois.
      3:
        text: Dans cet exemple, notre boucle «Compteur» dit «Compter avec un compteur
          de 50 à 90 par saut de 10» et à l'intérieur, nous avons notre bloc «Dessiner
          un carré». Déplace le bloc «Compteur» de la section «Variables» à l'emplacement
          de «Longueur».
      4:
        text: Cela signifie que notre artiste va dessiner un carré qui a des côtés
          de 50 pixels de longueur, puis 10 pixels seront rajoutés, et l’artiste va
          dessiner un carré avec des côtés de 60 pixels de longueur. Puis il va continuer
          en ajoutant 10 pixels, et dessiner des carrés jusqu'à ce qu'ils atteignent
          90 pixels. Donc nous aurons des carrés aux côtés long de 50, 60, 70, 80
          et 90 pixels.
    parameters:
      1:
        text: Salut, je m'appelle Janete, et je suis ingénieur chez Zynga.
      2:
        text: Que faudrait-il faire pour dessiner un ensemble de triangles de différentes
          tailles ?
      3:
        text: Nous pouvons écrire tout ce code à la main, ou bien utiliser une fonction
          accompagnée de paramètres.
      4:
        text: Pour ce faire, clique sur l'étoile bleue dans la définition de la fonction
          «Dessiner un triangle». Ensuite, déplace le bloc «Nom d'entrée» vers le
          bloc «Entrée».
      5:
        text: Ensuite, si tu écris «Longueur» à l'endroit où se trouve le «x» et appuies
          sur «Entrée», tu vas créer une longueur donnée à ta fonction.
      6:
        text: Clique ensuite sur l'étoile. Maintenant clique sur la catégorie variables
          et déplace le bloc «Longueur» dans le bloc « Avancer » de ta définition
          de fonction. Finalement, déplace le vieux bloc «Nombre» à l'extérieur.
      7:
        text: Pour utiliser ta fonction avec des paramètres, clique sur la catégorie
          des fonctions et déplace ta fonction «Dessine un triangle avec une longueur»
          vers l'extérieur.
      8:
        text: Tu peux maintenant utiliser le bloc « Mathématique » pour saisir différents
          chiffres et dessiner des triangles de différentes tailles.
    hoc_wrapup:
      1:
        text: Félicitations ! Avec le dernier puzzle que tu viens de résoudre, tu
          viens d'écrire un code qui dit à N'IMPORTE QUEL robot comment trouver son
          chemin dans un labyrinthe sans ramifications ou dans un tunnel de n'importe
          quelle longueur, que ce soit un zombie, un oiseau, un engin spatial ou même
          une voiture qui se conduit toute seule.
      2:
        text: Les concepts de base que tu as utilisés sont au cœur de chaque programme
          ou application que tu essaieras.  Nous avons découvert les boucles «Répéter»,
          les instructions «Répéter jusqu'à», les instructions « Si », et les instructions
          « Si-Sinon ».
      3:
        text: Si tu as aimé ta première heure du code, alors consulte le site Web
          code.org pour poursuivre ton apprentissage de l’informatique ! Lorsque tu
          auras terminé notre cours de 20 heures, tu maîtriseras les bases de la programmation,
          et tu pourras commencer à apprendre comment écrire des applications pour
          téléphones, des instructions pour un robot, des jeux... C'est toi qui choisis.
      4:
        text: 'La technologie change tout ce que nous faisons, peu importe qu''on
          soit jeune ou moins jeune: programmer est amusant, c''est un processus créatif,
          et n''importe qui peut apprendre à le faire !'
    20_wrapup:
      1:
        text: Notes bientôt disponibles !
    frozen_intro:
      1:
        text: Salut, mon nom est Lyndsey. Je conçois, je joue et j’écris mes propres
          applications. Utilisons du code pour rejoindre Anna et Elsa tandis qu’elles
          explorent la magie et la beauté de l’hiver.
      2:
        text: Tu vas créer des flocons de neige et des motifs tout en patinant ; et
          ainsi tu créeras un monde magique hivernal que tu pourras partager avec
          tes amis.
      3:
        text: Dans la prochaine heure, tu apprendras les fondamentaux de la programmation.
          La programmation se fait traditionnellement avec du texte, mais nous allons
          utiliser Blockly, qui utilise des blocs visuels que tu peux glisser et déposer
          pour écrire des programmes. C’est ainsi que même les étudiants à l’université
          apprennent les fondamentaux. Mais en fait, tu crées toujours du code.
      4:
        text: Un programme est un ensemble d'instructions qui dit à un ordinateur
          quoi faire. Construisons un code ou un programme qui aidera Elsa à créer
          une ligne simple. Nous utiliserons cela plus tard pour créer des motifs
          plus complexes.
      5:
        text: Ton écran est divisé en trois parties principales. Sur la gauche, il
          y a la surface de glace où tu vas exécuter ton programme. Les instructions
          pour chaque niveau sont écrites juste en dessous de la surface de glace.
      6:
        text: La zone du milieu est la boîte à outils, et chacun des blocs est une
          action qu'Elsa et Anna peuvent faire.
      7:
        text: La zone blanche à droite est l'espace de travail, et c'est ici que nous
          allons construire notre programme. Pour te déplacer autour de la surface
          de glace, tu utiliseras le bloc « Avancer ».
      8:
        text: 'Ici, le bloc « Avancer » dit: « Avancer par 100 pixels ». Lorsque nous
          appuyons sur « Exécuter», que se passe-t-il ? Elsa avance d’un certain montant
          de pixels sur l''écran, 100 pixels en fait ! Les pixels sont en réalité
          de tous petits carrés sur ton écran.'
      9:
        text: L'autre bloc que nous avons dans ce puzzle dit « Tourner à droite de
          90 degrés. » Et lorsque nous utilisons ce bloc «Tourner à droite», cela
          fait tourner Elsa un certain nombre de degrés. Tu peux jouer avec ces blocs
          pour faire tourner Elsa comme tu veux. L'angle est mesuré à partir du chemin
          devant Elsa. Ainsi, c’est un virage à 90 degrés. Et c’est un virage à 120
          degrés.
      10:
        text: N'oublie pas, tu peux changer le nombre de pixels et de degrés en cliquant
          sur les flèches qui se trouvent à leurs côtés.
    frozen_loops:
      1:
        text: Salut, je suis Paola ! Les ordinateurs sont vraiment excellents lorsqu’il
          s’agit de répéter des actions. Tu peux compter jusqu'à 10, 20 ou 100. Mais
          un ordinateur peut compter jusqu’à un milliard ou mille milliards. Il ne
          s'ennuiera pas et cela ne lui prendra que quelques secondes. Que ce soit
          pour compter, ou dessiner, ou autre choses -- les ordinateurs peuvent répéter
          des choses des centaines, voire des milliards de fois.
      2:
        text: En programmation, nous appelons cela une boucle. Une boucle est la façon
          dont tu répètes ton code encore et encore. Pour le prochain puzzle, ton
          but est d'aider Anna à créer un carré avec le bloc « Répéter ».
      3:
        text: Tous les blocs de code que tu places à l'intérieur du bloc « Répéter
          » seront répétés en séquence, autant de fois que tu le souhaites.
      4:
        text: Pour dessiner un carré, tu peux utiliser le bloc « Avancer » et «Tourner
          à droite» 4 fois. Mais le plus simple consiste à indiquer à l'ordinateur
          d’« Avancer » et de «Tourner à droite de 90 degrés» une fois, et de lui
          dire de répéter cette paire d'actions 4 fois. Pour ce faire, tu dois mettre
          les blocs «Avancer» et «Tourner à droite» à l'intérieur d'un bloc « Répéter
          ».
      5:
        text: Souviens-toi, tu peux changer le nombre dans le bloc « Répéter » en
          ce que tu veux, et cela va répéter ce qu’il y a à l'intérieur du bloc ce
          nombre de fois.
    frozen_functions:
      1:
        text: Salut, je suis Chris Bosh. Je suis un joueur de basket professionnel,
          et j'ai codé au lycée.
      2:
        text: Un des concepts les plus importants en informatique est la façon de
          définir de nouvelles commandes. La plupart des langages informatiques possèdent
          uniquement environ 100 mots ou commandes. Et vraiment, l'art et la magie
          sont dans la définition de tes propres nouveaux mots pour ces blocs de construction.
      3:
        text: Lorsque tu as appris à un ordinateur comment faire une action une fois
          en utilisant cette suite de commandes, tu peux donner un nom à cette action
          pour qu'elle soit plus facile à répéter ensuite. Quand tu définis ta propre
          commande et lui donnes un nom, on appelle ça une fonction.
      4:
        text: Salut, je suis Jess ! Lorsque tu programmes avec des blocs, tu utilises
          des fonctions s’il y a un ensemble d’actions que tu veux utiliser plusieurs
          fois. Par exemple, tu as écrit du code pour créer un carré.
      5:
        text: Tu peux définir ceci comme une fonction « Créer un carré ».
      6:
        text: Tu dispose maintenant d'un nouveau bloc que tu peux utiliser plusieurs
          fois pour créer plusieurs carrés.
      7:
        text: Beaucoup de formes simples peuvent être utilisées pour créer des motifs
          plus complexes. Dans le prochain puzzle, le code que tu as écrit récemment
          pour faire un cercle est à ta disposition en tant que nouvelle fonction
          qui peut faire des cercles de différentes tailles. Peux-tu l'utiliser pour
          aider Elsa à créer de beaux motifs complexes dans la neige ?
    playlab_intro:
      1:
        text: Nous allons créer des jeux à l'aide du Labo de jeux. Les bons jeux ont
          une histoire et chaque histoire présente des acteurs. Nous allons apprendre
          comment faire pour que nos acteurs - des sorcières, des extra-terrestres
          et des animaux - parlent, se déplacent et interagissent entre eux. À la
          fin de ce tutoriel, tu pourras créer un jeu à partir de zéro et le partager
          avec tes amis.
      2:
        text: Ton écran est divisé en trois parties principales. Sur la gauche, il
          y a l'espace de jeu où ton programme s'exécutera. Les instructions pour
          chaque niveau sont écrites ci-dessous.
      3:
        text: La zone centrale est la boîte à outils et chacun de ces blocs est un
          morceau de code. La zone blanche à droite est l'espace de travail et c'est
          ici que nous allons construire notre programme.
      4:
        text: Pour commencer, tu devras lier tes blocs au bloc orange «Lors du lancement».
          Tu peux lier plusieurs blocs en les glissant jusqu'à ce que tu voies la
          ligne jaune, et alors ils s'emboîteront.
      5:
        text: Dans le premier puzzle, notre acteur est un pingouin et on va lui faire
          dire « Bonjour! » en faisant glisser le bloc «Dire» dehors, en le liant
          au bloc « Lors du lancement » et en écrivant «Bonjour». Nous pouvons également
          faire bouger le pingouin en utilisant les blocs « Déplacer vers la droite
          » et « Déplacer vers la gauche ». Lorsque tes blocs sont en place, clique
          sur le bouton «Exécuter» pour voir ce que tu as programmé.
      6:
        text: Commençons, et à la fin tu seras capable de créer ton propre jeu avec
          toutes sortes de joueurs qui peuvent interagir, devenir contents ou tristes,
          marquer des points, ou jeter des boules de feu, ou même se faire disparaître.
          Tout dépend de toi et du jeu que tu souhaites faire.
    playlab_events:
      1:
        text: Maintenant, nous allons apprendre quelque chose que tous les programmeurs
          de jeux utilisent tous les jours. On les appelle des événements. Un événement
          dit à ton programme d’écouter lorsque quelque chose se passe. Lorsque cette
          chose se passe, il effectue une action.
      2:
        text: 'Quelques exemples d''évènements sont: l''écoute des clics de souris,
          l’activation d’une touche fléchée du clavier ou un tapotement de l''écran.'
      3:
        text: Ici, nous allons faire en sorte que le robot venu de l’espace salue
          les terriens lorsqu'un joueur clique sur lui. Nous allons utiliser le bloc
          « Quand clic » et lui attacher le bloc «Dire». Lorsque le joueur clique
          sur le robot venu de l'espace, tout ce qui est attaché à l’événement « Quand
          clic » sera effectué. Que dit ton extra-terrestre ?
      4:
        text: Il y a aussi des blocs «Quand flèche». Si tu lies les blocs «Déplacer»
          à ces derniers, tu peux commencer à déplacer tes acteurs vers le haut, vers
          le bas, vers la gauche ou vers la droite. Étape par étape, ton jeu devient
          plus interactif.
    playlab_repeat_forever:
      1:
        text: C'est le bloc « Répéter à l’infini ». Tout ce qui se trouve dans ce
          bloc sera effectué à l’infini tout au long du jeu.
      2:
        text: Si tu veux qu'un acteur fasse quelque chose de manière répétée, sans
          que le joueur ait à faire quoi que ce soit, nous allons placer cela dans
          le bloc « Répéter à l’infini ».
      3:
        text: Dans le prochain puzzle, notre objectif est d'aider l'Assistant à patrouiller
          le long des frontières du royaume, à gauche et à droite en continu. Apprendre
          comment les commandes de répétition fonctionnent te permettra d'économiser
          beaucoup de temps plus tard lorsque tu développeras ton propre jeu.
    C1_artist_intro:
      1:
        text: Ce sont tes blocs de dessin. Utilise le bon bloc pour déplacer l'artiste
          là où il doit se rendre pour remplir les lignes grises.
      2:
        text: Ce sont des blocs de saut. Lorsque tu les utilises, ton artiste se déplace
          sans dessiner, alors utilise-les pour sauter jusqu'à la prochaine ligne
          grise.
    C1_bee_level_intro:
      1:
        text: Les abeilles ne sont-elles pas super cool ? Dans cette prochaine série
          de puzzles, ton objectif est d'aider l'abeille à aller jusqu’aux fleurs,
          recueillir le nectar des fleurs et voler jusqu’au nid d'abeilles pour faire
          du miel. Tu devras utiliser les blocs « Recueillir du nectar » et «Faire
          du miel» pour cet exercice.
      2:
        text: 'Chaque fleur possède un nombre différent de nectars : 1, 2, 3 ou plus.
          Nous savons combien de nectars il y a dans les fleurs rouges, grâce au petit
          nombre dans le coin. Alors n’oublie pas de prendre tout le nectar de la
          fleur avant d’avancer. De même, chaque nid d''abeilles ne peut contenir
          que cette quantité de miel : 1, 2, 3 ou plus. Alors assure-toi de faire
          autant de miel que ce que peut contenir le nid d''abeilles.'
      3:
        text: Si tu es en mesure de prendre tout le nectar et de faire tout le miel,
          tu réussis et passes au prochain niveau. Dans le cas contraire, tu dois
          réessayer ce puzzle. Joue un peu avec le puzzle pour ressentir ce que c’est
          d’être un programmeur !
    C1_bee_loops:
      1:
        text: Une boucle est une répétition de l'activité. Alors, pour entrer inspecter
          dans une ruche, je regarde un cadre et puis je le remets, alors je répète
          cette même activité plusieurs fois. C'est faire des boucles, ou faire la
          même activité plusieurs fois.
      2:
        text: Dans ce niveau, nous voulons que l'abeille recueille trois nectars de
          la fleur. Au lieu d'utiliser trois blocs « Recueillir du nectar », tu vas
          utiliser le bloc « Répéter » pour prendre le nectar trois fois. Clique sur
          « Exécuter » et regarde si tu as réussi. Joli !
    C1_bigevent_unplugged:
      1:
        text: Cette leçon s’appelle le Grand Événement. Elle concerne la façon dont
          nous pouvons contrôler nos programmes et changer réellement la façon dont
          un programme fonctionne directement en utilisant des événements, comme pousser
          un bouton ou effectuer un clic de souris.
      2:
        text: Pour cette leçon, tu seras contrôlé avec une télécommande en papier.
          C'est comme un jeu vidéo en direct.
      3:
        text: Un événement est une action qui fait que quelque chose se produit. C'est
          comme quand tu cliques sur la souris et une page Web se charge. C'est un
          événement. Lorsque tu tapotes ton écran pour faire défiler une liste sur
          une tablette, c'est aussi un événement. Les événements sont un excellent
          moyen de laisser l'utilisateur diriger ton programme chaque fois qu'il en
          a besoin ou envie.
      4:
        text: Des choses se produisent auxquelles nous répondons tous. Nous avons
          faim, et donc, nous allons au réfrigérateur. Nous entendons le facteur et
          il met notre courrier dans la boîte aux lettres, et ensuite nous allons
          chercher notre courrier. Ce sont des événements, tout comme appuyer sur
          un bouton ou déplacer un joystick. Ce sont des choses qui se produisent
          et nous poussent à faire quelque chose, à agir.
      5:
        text: Dans les jeux vidéo, il y a un événement appelé «Mise à jour» et il
          se produit 30 ou 60 fois par seconde. Pour les programmeurs de jeux vidéo,
          c'est presque plus important en tant qu’événement que les boutons ou le
          joystick.
      6:
        text: Le principal événement que nous surveillons est ce moment de la «Mise
          à jour». Et ensuite nous vérifions le joystick. Et donc nous disons «Oh,
          quelqu'un a appuyé sur le bouton de ce cadre ? Oui ou non?» Sans événements,
          le joueur ne pourrait pas bouger, tu ne pourrais pas sauter, tu ne serais
          pas en mesure de contrôler ce qui se passe. Le jeu vidéo ne serait pas en
          mesure d'animer quoi que ce soit.
    C1_building_foundation:
      1:
        text: Dans une sculpture de sable, tu dois savoir que l'échec fait partie
          du programme. Mais si tu persistes, ça va aller mieux et être plus amusant
          pour toi. Persévérance est le nom du jeu. Reste avec nous, et tu vas adorer.
      2:
        text: Cette leçon s'appelle la Création d'une fondation. Dans cette leçon,
          nous allons travailler sur une tâche qui semble vraiment difficile. Tu va
          essayer de comprendre comment fabriquer une structure au moins aussi grande
          qu'une de ces tasses, et elle doit être suffisamment solide pour supporter
          le poids d'un livre.
      3:
        text: Parfois, notre création ne fonctionnera pas. Parfois, nous serons frustrés
          et nous voudrons tout abandonner. Ces moments peuvent être nombreux... Mais
          si nous continuons à essayer, si nous donnons le meilleur de nous-même encore
          et encore, alors nous sommes sûrs d’y arriver.
      4:
        text: La persévérance consiste à s’accrocher encore un peu plus lorsque tu
          veux vraiment tout abandonner. Si tu veux créer quelque chose de nouveau
          et de différent, il va y avoir beaucoup d'échecs le long du chemin.
      5:
        text: Le truc pour persévérer est de choisir de continuer à avancer et à apprendre
          de tes échecs, au lieu de tout arrêter parce que tu es frustré. En fait,
          la frustration signifie juste qu'il y a quelque chose de merveilleux qui
          est sur le point d’arriver. Alors ne laisse pas tout tomber avant d'y parvenir.
          Wooo !
    C1_getting_loopy:
      1:
        text: Bonjour, mon nom est Miral Kotb, et je suis le créateur de Iluminate.
          Dans mon travail, il y a quelque chose que nous utilisons dans les danses
          et la programmation des costumes de lumière. Et ce sont des boucles ! Les
          boucles répètent une action encore et encore.
      2:
        text: Quand tu répètes quelque chose plusieurs fois, comme par exemple les
          mouvements pour que le cerceau continue de tourner, tu fais ce qui s'appelle
          une «Boucle». Ceci est une boucle. Ceci est une boucle. Et ceci est une
          boucle.
      3:
        text: Aujourd'hui, nous allons organiser une soirée dansante. Nous allons
          utiliser les boucles avec une nouvelle danse. L'itération. Nous allons découvrir
          les boucles à l'aide de la danse. Tu vas apprendre quelques pas faciles
          et les répéter encore et encore pour terminer la danse.
      4:
        text: Voici les pas que tu dois apprendre. Tape dans tes mains. Mets tes mains
          derrière ta tête. Mets tes mains sur tes hanches. Lève la main gauche. Lève
          la main droite. Assez simple, non ? Tu vas découvrir que tu peux raccourcir
          les instructions en mettant quelques pas de danse dans des boucles.
      5:
        text: En fait, nous utilisons des boucles dans notre danse. Les danseurs portent
          des ordinateurs, tous sur le même réseau. Je peux mettre en boucle les lumières
          à travers les mêmes danseurs maintes et maintes fois. Dans la boucle, je
          pourrais avoir une itération où je dirais que je veux mettre en boucle encore
          et encore ces six danseurs, et puis dans cette boucle, que je veux augmenter
          la vitesse de la lumière. Et tout ça est créé par le biais de boucles. Les
          boucles sont importantes en informatique car elles raccourcissent et simplifient
          notre travail.
    C1_happy_maps_unplugged:
      1:
        text: Cette leçon s’appelle Cartes joyeuses. Aujourd'hui, nous allons aider
          notre petit copain poilu, Flurb, à arriver à ses fruits.
      2:
        text: Fais aller ton Flurb jusqu’à tes fruits. Pour ce faire, tu devras trouver
          quel chemin Flurb doit prendre et le diriger avec les flèches. Quelle direction
          Flurb doit-il prendre pour arriver à la pomme ? Trace une ligne pour le
          faire monter.
      3:
        text: Pour qu'il y parvienne, tu dois encercler la direction dans laquelle
          il doit aller.
      4:
        text: Crée ton algorithme en collant des flèches à côté de la carte que tu
          essaies de résoudre. Le deuxième algorithme sera le même sauf qu'il descendra.
      5:
        text: C'est comme de programmer avec du papier. Et c'est tout !
    C1_maze_debugging:
      1:
        text: Le débogage consiste à rechercher et à résoudre les problèmes. Il y
          a plusieurs façons de déboguer les problèmes. L'une des façons les plus
          faciles est d’avancer étape par étape jusqu'au moment où tu trouves que
          quelque chose ne va pas. Ici, j’essaie de faire un salto arrière sur la
          poutre, mais je continue de tomber.
      2:
        text: J’ai traversé chaque partie étape par étape et réalisé où était mon
          erreur. Je ne mettais pas mes mains correctement sur la poutre. Alors j'ai
          essayé un autre salto arrière sur la poutre avec ma nouvelle position des
          mains et j’ai réussi. J'étais vraiment content d’avoir débogué mon salto
          arrière.
      3:
        text: Pour découvrir le débogage, nous commençons par un ensemble de blocs
          qui sont déjà en place. Tu remarqueras que ces blocs ne t’emmènent pas vers
          ton objectif. Nous avons besoin de déboguer la solution et de la réparer.
          Qu’est-ce qui s’est mal passé? Tu remarqueras que tu devais aller vers l’ouest
          un bloc de plus.
      4:
        text: Réparons cela en ajoutant un autre bloc «Vers l'ouest» et en appuyant
          sur « Exécuter » pour voir si tu as réussi. Oui, tu as réussi !
    C1_maze_intro_sequencing:
      1:
        text: Pour ce puzzle, tu dois amener l’oiseau jusqu’au cochon. Regarde le
          puzzle et pense à comment tu le réaliseras.
      2:
        text: Tu dois faire glisser les blocs de la boîte à outils vers l'espace de
          travail. Assure-toi que c'est sous le bloc « Lors du lancement » et lorsque
          tu penses que tu as la bonne solution, alors tu peux cliquez sur « Exécuter
          » et regarder l'oiseau aller jusqu'au cochon.
    C1_maze_loops:
      1:
        text: Une chose que les ordinateurs font vraiment bien, c’est de répéter des
          commandes. En tant que personne, tu t’ennuierais vraiment si tu devais faire
          la même chose plusieurs fois de suite. Mais un ordinateur peut faire la
          même chose des millions ou même des milliards de fois sans s’ennuyer, en
          étant capable de le faire vraiment bien.
      2:
        text: Par exemple, si je voulais souhaiter à tout le monde sur Facebook un
          Joyeux Anniversaire en leur envoyant un e-mail, ça pourrait me prendre plus
          d’un siècle pour écrire tous ces e-mails personnels. Mais avec seulement
          quelques lignes de code, je pourrais demander à un système d’envoyer un
          e-mail à tout le monde sur Facebook en leur souhaitant un Joyeux Anniversaire.
      3:
        text: Pour que l'oiseau arrive au cochon dans ce niveau... plutôt que de faire
          glisser trois blocs «Nord» vers l'espace de travail, tu utiliseras le bloc
          « Répéter ». Fais glisser le bloc « Répéter » sur l'espace de travail et
          entre le chiffre 3. Ensuite, fais glisser le bloc «Déplacer vers le nord»
          dans le bloc « Répéter » et clique sur «Exécuter» pour voir si tu as réussi.
          Félicitations, tu as réussi !
    C1_moveitmoveit_unplugged:
      1:
        text: Cette leçon s’appelle «Déplace-le, déplace-le». Ensemble, nous allons
          écrire un programme pour déplacer nos amis depuis la rose des vents jusqu'au
          smiley.
      2:
        text: Mais le smiley regarde vers le bas et une seule personne sait comment
          y aller. Démarrons ce programme.
      3:
        text: Un programme est un algorithme qui a été codé en quelque chose qui peut
          être exécuté par une machine. La plupart d'entre nous visualise un programme
          comme quelque chose que nous écrivons pour un ordinateur. Les programmes
          sont vraiment bons pour ça, mais ils sont également utiles en d'autres endroits.
          Tu peux faire ton propre jeu ou même programmer un robot qui fera des choses
          pour toi.
    C1_going_places_safely:
      1:
        text: Mon nom est Jeremiah. Salut! J'ai sept ans. J'aime jouer sur l'ordinateur
          de ma mère mais je dois toujours avoir la permission d’abord. «Maman, puis-je
          utiliser ton ordinateur ? Bien sûr mon chéri !»
      2:
        text: J'aime ordinateur de ma mère parce que je peux naviguer sur Internet.
          L'Internet est un peu comme ton voisinage. Tu peux visiter des endroits
          cool, tu peux parler à la famille et aux amis et tu peux apprendre plein
          de nouvelles choses.
      3:
        text: Hier, j'ai visité un zoo qui est près de ma maison. J'ai vu un bébé
          zèbre. J'ai pris sa photo et changé la couleur de ses rayures, puis je lui
          ai ajouté un chapeau et je l’ai ajouté à ma collection d'animaux farfelus.
          Génial ! Plus tard, je suis allé à un endroit très éloigné. J’ai visité
          le Kenya. C'est un pays d'Afrique. On y trouve beaucoup de zèbres.
      4:
        text: Parfois sur Internet, je parle à des gens que je connais, comme ma grand-mère
          qui vit dans un autre État. Bonjour mamie ! Elle me fait des cookies qu’elle
          m'enverra pour mon anniversaire. «Délicieux, je voudrais qu'Internet puisse
          transmettre les odeurs!» Je peux parler à différentes personnes sur Internet,
          comme mon cousin, mais je parle seulement aux personnes que je connais.
      5:
        text: Ce qui me plaît le plus sur Internet, c'est que je peux jouer à des
          jeux amusants. But ! J'aime aussi dessiner et créer de nouvelles choses
          et les partager avec mes amis. Cool ! Parfois, je consulte des sites Web
          où j'apprends de nouvelles choses, mais je m'en tiens toujours aux sites
          Web qui sont bien pour moi. Wow, des dinosaures !
      6:
        text: 'L’Internet est un endroit super amusant. Mais tout comme lorsque tu
          traverses une rue dans ton quartier, tu dois également faire attention quand
          tu vas en ligne. Voici trois règles à retenir. Règle numéro 1 : toujours
          demander à tes parents d''abord. Règle numéro 2 : ne parle qu’aux personnes
          que tu connais. Règle numéro 3 : s''en tenir aux endroits qui sont biens
          pour toi.'
      7:
        text: Wow, c'était amusant ! Heure du dîner. Je me déconnecte maintenant.
          Je suis impatient de me reconnecter pour voir ce que je peux encore découvrir.
    C1_pair_programming:
      1:
        text: Aujourd'hui, nous allons découvrir la programmation en binôme. Dans
          la programmation en binôme, tu travailles en équipe. Pourquoi deux personnes
          devraient-elles utiliser un ordinateur ? Parce que deux têtes valent mieux
          qu'une. Dans la programmation en binôme, toi et ton partenaire allez vous
          asseoir ensemble à un ordinateur et allez travailler tous les deux sur le
          même projet.
      2:
        text: Dans la programmation en binôme, une personne est le pilote et l'autre
          personne est le navigateur, tout comme pour conduire une voiture. Le pilote
          est assis à l'ordinateur et c’est lui qui utilise le clavier et la souris
          ou l'écran tactile et qui contrôle les principales actions de l'ordinateur.
          L'autre personne est le navigateur. Le navigateur aide le conducteur en
          répondant aux questions du conducteur et en soulignant des problèmes potentiels
          ou des erreurs.
      3:
        text: La communication est la clé de la réussite de la programmation en binôme.
          Pas d'insultes, sois respectueux, ne sois pas un navigateur autoritaire,
          parce que personne n'aime les mouches du coche. Toi et ton partenaire devez
          toujours communiquer. Le pilote peut expliquer ce qu'il ou elle fait. Et
          le navigateur peut suggérer quoi faire ensuite.
      4:
        text: Le navigateur doit penser à la vue d'ensemble et le pilote se concentre
          sur les détails. Les deux rôles sont importants. La programmation en binôme
          consiste à travailler ensemble en tant qu’équipe.
    C1_planting_seed:
      1:
        text: Cette leçon s'appelle Planter une graine et elle va nous aider à comprendre
          les algorithmes. Les algorithmes sont des instructions spécifiques qui expliquent
          l'ordre dans lequel faire quelque chose. Même les choses quotidiennes, comme
          manger le petit déjeuner ou se brosser les dents, sont des algorithmes qui
          exigent de petites étapes pour que ces actions soient faites.
      2:
        text: Les ordinateurs peuvent être vraiment intelligents, mais ils ne peuvent
          comprendre que si tu leur dis exactement ce que tu veux qu’ils fassent,
          étape par étape. Le mieux au sujet des algorithmes, c'est que si tu suis
          les instructions dans l'ordre, tu peux arriver à faire des choses que tu
          n’imaginais pas pouvoir faire avant de commencer. C'est comme suivre une
          recette de cuisine.
      3:
        text: Aujourd'hui, nous allons planter nos propres graines à l'aide d'un algorithme.
          Crée ton propre algorithme en découpant les photos. Sélectionne des photos
          qui montrent comment planter une graine étape par étape, et mets ces images
          dans le bon ordre.
      4:
        text: Maintenant, il est temps pour toi de voir si ton algorithme fonctionne.
          Suis les étapes de l'algorithme très soigneusement. Sont-elles dans le bon
          ordre ? As-tu réussi à planter une graine en suivant l'algorithme ? C'est
          comme faire de la programmation avec des photos.
      5:
        text: Quand on veut faire du chocolat, il y a plusieurs grandes étapes à suivre
          et chacune de ces grandes étapes comportent un ensemble de plus petites
          étapes, et il y a différentes recettes ou algorithmes selon le goût souhaité
          du chocolat. Chaque étape est importante, même les plus petites, de sorte
          que si une seule étape manque, les autres ne peuvent pas être achevées.
          Créer des algorithmes que les autres peuvent comprendre est vraiment important.
          C'est pourquoi chaque étape doit être écrite de sorte que, peu importe qui
          le fait, le résultat est le même.
    C1_playlab_storytelling:
      1:
        text: Il est temps de faire preuve de créativité et d'utiliser tes compétences
          en codage pour raconter une histoire. Ton histoire aura des acteurs et tu
          pourras les faire parler et les faire interagir. Commence à réfléchir à
          quelle sorte d'histoire tu veux raconter.
      2:
        text: Le chat a toujours eu peur du chien et que se passe-t-il si le chat
          comprend que le chien essaie d'être gentil ? Le bloc « Lors du lancement
          » commence tout. Le bloc «Déplacer» déplacera ton personnage et le bloc
          «Dire» fera dire à ton personnage tout ce que tu écris.
      3:
        text: Ceci est le bloc « Quand les acteurs se cognent » que tu peux connecter
          aux autres blocs.
      4:
        text: J’indiquais au chien de venir dire «Salut», mais alors le chat a eu
          peur et donc s'est enfui. «Ah!» si on avait plus de temps, on aurait pu
          inventer une fin heureuse. La fin!
    C1_spelling_bee_intro:
      1:
        text: Voici le niveau du concours d'orthographe. Utilise les pièces du puzzle
          pour déplacer l'abeille. Lorsqu'elle se déplace, elle recueille les lettres
          pour épeler les mots.
      2:
        text: Vois si tu peux épeler le mot qu’on te montre dans la zone sous la scène.
          Mais attention à l’abeille ! La déplacer dans la mauvaise direction ajoutera
          des lettres que tu ne veux pas.
    C1_zuck_repeat_loop:
      1:
        text: Une chose que les ordinateurs font vraiment bien, c’est de répéter des
          commandes. En tant que personne, tu t’ennuierais vraiment si tu devais faire
          la même chose plusieurs fois de suite. Mais un ordinateur peut faire la
          même chose des millions ou même des milliards de fois sans s’ennuyer, en
          étant capable de le faire vraiment bien.
      2:
        text: Par exemple, si je voulais souhaiter à tout le monde sur Facebook un
          Joyeux Anniversaire en leur envoyant un e-mail, ça pourrait me prendre plus
          d’un siècle pour écrire tous ces e-mails personnels. Mais avec seulement
          quelques lignes de code, je pourrais demander à un système d’envoyer un
          e-mail à tout le monde sur Facebook en leur souhaitant un Joyeux Anniversaire.
      3:
        text: Dans cet exemple, ton but est de déplacer l'oiseau pour qu’il attrape
          le cochon. Maintenant, nous allons pouvoir utiliser le bloc « Répéter »
          afin de pouvoir faire ça très facilement. Tu peux soit donner à l'ordinateur
          une commande « Avancer » cinq fois afin de faire avancer l'oiseau d'un pas
          à chaque fois vers le cochon, ou tu peux juste demander à l'ordinateur d'avancer
          une seule fois, puis de lui demander de répéter l’action cinq fois, cela
          donnera le même résultat.
      4:
        text: Pour ce faire, tu fais glisser ta commande « Avancer » et puis tu la
          mets à l'intérieur du bloc «Répéter». Et puis tu peux cliquer dessus et
          lui dire combien de fois répéter le bloc pour lui dire de combien de pas
          tu veux l’avancer.
      5:
        text: Encore une chose, tu peux mettre autant de commandes que tu veux à l'intérieur
          du bloc « Répéter ». Ainsi dans cet exemple, tu lui dis d’avancer et de
          tourner à gauche, ce qu’il fera cinq fois. Amuse-toi bien!
    C2_artist_intro:
      1:
        text: Tu ne serais même pas qualifié pour la course si tu n'avais pas les
          gens compétents en informatique - à cause de la quantité de données recueillies
          par les voitures et de la nécessité d'avoir des gens capable d'écrire des
          programmes afin de savoir comment continuer à être performant.
      2:
        text: Dans ces puzzles, tu seras un artiste qui utilise un crayon pour dessiner
          différentes formes. Partout où va ton artiste, il dessinera une ligne derrière
          lui.
      3:
        text: Pour te déplacer dans la toile, tu utiliseras le bloc « Avancer ». Ici,
          le bloc « Avancer » dit d’avancer de 100 pixels. Lorsque nous appuyons sur
          « Exécuter », que se passe-t-il ? L'artiste avance d’un certain montant
          de pixels et ce montant est de 100 pixels. Les pixels sont en réalité de
          tous petits carrés sur ton écran.
      4:
        text: L'autre bloc que nous avons dans ce puzzle dit « Tourner à droite de
          90 degrés. » Et quand nous le faisons glisser, notre artiste tourne d’un
          certain nombre de degrés. Tu peux jouer avec ce bloc pour faire tourner
          l’artiste comme tu veux. C’est un virage à 90 degrés.
      5:
        text: Et c’est un virage à 120 degrés. N'oublie pas, tu peux changer ces valeurs
          en cliquant sur les flèches qui se trouvent à côté des chiffres pour les
          pixels et les degrés. Amuse-toi à dessiner avec ton artiste !
    C2_bee_conditionals:
      1:
        text: Il s'agit d’un bloc conditionnel. Il dit que SI il y a du nectar ou
          du miel qui est inférieur, égal ou supérieur à un certain nombre, ALORS
          il faut faire quelque chose.
      2:
        text: Cela est utile lorsque nous ne savons pas combien de nectar ou miel
          recueillir, comme nous le voyons ici avec ce point d'interrogation.
      3:
        text: Dans cet exemple, nous allons dire que SI la fleur pourpre a du nectar
          supérieur à 0, alors il faut « Recueillir du nectar ». Cela va dire à notre
          abeille de continuer à recueillir du nectar tant qu’il y en a. La-la !
    C2_binary_bracelets:
      1:
        text: C'est la leçon des bracelets binaires. Nous allons coder nos initiales
          sur un bracelet que nous pourrons porter et montrer à tous nos amis !
      2:
        text: Le binaire est une manière de représenter des informations à l'aide
          de seulement deux options. Parfois les gens s’imaginent que ce sont simplement
          des «1» et des «0». Mais tu peux représenter le binaire avec des combinaisons  comme
          allumé ou éteint, haut et bas, dedans et dehors ou vraiment tout ensemble
          de notions contraires.
      3:
        text: Salut, je suis Orion et je programme des robots ici à Play-im. Tous
          les ordinateurs et les cerveaux de robots à leur niveau le plus fondamental
          sont de petites portes électroniques. Lorsque la porte est ouverte, l’électricité
          peut circuler à l’intérieur, et lorsqu’elle est fermée, l’électricité ne
          peut pas passer.
      4:
        text: Les yeux du robot sont un exemple de fichier binaire. Les yeux du robot
          sont des LED et ce sont les lumières qui sont allumées ou éteintes. C'est
          un système binaire, l’un ou l'autre fonctionne. Nous pouvons utiliser les
          lumières pour représenter des nombres binaires. Si nous avons un ensemble
          de robots, nous pouvons dire que le premier robot est la 1re place et le
          deuxième robot est la 2e place, le troisième robot est la 4e place et ainsi
          de suite. Voilà comment tu représentes un nombre binaire. Les robots le
          feront avec leurs yeux binaires et compteront pour toi.
    C2_conditionals_with_cards:
      1:
        text: Cette leçon s’appelle les Instructions conditionnelles avec des cartes.
          Chaque jour tu prends des décisions fondées sur ce que tu vois et entends.
      2:
        text: Je veux marcher vers le parc, mais tout d'abord, je dois décider si
          je dois prendre un parapluie ou non. Alors, je regarde par la fenêtre. Si
          c’est nuageux, je vais prendre mon parapluie. Sinon, je vais prendre des
          lunettes de soleil. Je pense que je ferais mieux de prendre le parapluie.
          Ce que je vois et entends détermine ce que j’emmène au parc.
      3:
        text: Les instructions conditionnelles sont également utilisées dans les jeux.
          Aujourd'hui, nous allons nous entraîner aux instructions conditionnelles
          avec un jeu de cartes. Dans ce jeu, la carte que je tire détermine ce que
          mes amis vont faire. Si je tire un sept, tout le monde applaudit. Sinon,
          tout le monde dit «Ahhh». Essayons ! «Ahhh» « Santé »
      4:
        text: Je parie que tu peux faire des jeux qui sont encore plus amusants avec
          des instructions conditionnelles. Faisons un essai ! Les instructions conditionnelles
          sont ce qui fait que les ordinateurs semblent intelligents. Un programme
          informatique qui comprend des instructions conditionnelles peut réagir à
          l'utilisateur et modifier sa façon d'agir.
      5:
        text: Pense à ton jeu vidéo préféré. Gagnes-tu plus de points pour certaines
          actions que tu le fais pour les autres ? Cela se produit car l'ordinateur
          utilise des instructions conditionnelles. C'est la façon dont un ordinateur
          prend une décision. Que dirais-tu, si tu touches la cible, de gagner dix
          points. Sinon, tu en perds trois. Quand on sait comment fonctionnent les
          instructions conditionnelles, on peut créer toutes sortes de jeux passionnants.
    C2_artist_debugging:
      1:
        text: Ici nous avons déjà quelques blocs positionnés dans notre espace de
          travail. Mais il y a quelque chose qui ne va pas.
      2:
        text: Déboguons ce code en ralentissant la vitesse et en regardant ce qui
          se passe étape par étape, et dans chaque bloc.
      3:
        text: Oh, voilà le problème ! Les moustaches du chat font 75 pixels de long,
          et non pas 25 pixels.
    C2_bee_debugging:
      1:
        text: As-tu déjà entendu parler de déboguer un programme ? C’est la façon
          dont tu découvres ce qui ne fonctionne pas. Lorsque tu débogues le code,
          tu identifies et supprimes les erreurs.
      2:
        text: Ici, on nous donne quelques blocs qui sont déjà dans notre espace de
          travail. Nous allons utiliser le bouton Étape pour parcourir les blocs étape
          par étape, et voir si c'est la bonne solution et où nous devrions effectuer
          une réparation.
      3:
        text: On dirait que notre problème est là ! Nous avons besoin d'un autre bloc
          « Avancer ». Le bouton Étape nous aide à déboguer notre problème en identifiant
          où est l’erreur, ainsi et de cette façon, nous pouvons la réparer.
    C2_digital_footprint:
      1:
        text: Sur ta tête tu tiens ton chapeau et ton intelligence te dira où tu en
          es et de penser au zoo et de dire bonjour à celui-ci et celui-là ! Utilise
          ta tête lorsque tu es en ligne afin de conserver le bien en toi et de savoir
          comment être en sécurité - comment donner à ta vie un peu d’espace privé.
          De la tête jusqu’aux pieds, fais une pause, et penses-y. Des pieds jusqu’au
          nez, fais une pause et pense en ligne !
      2:
        text: Utilise ton cœur pour croître et grandir et pour te donner bonne mine
          et pour faire une carte de St-Valentin, et dire à quelqu'un « Je serai à
          toi !» Utilise ton cœur quand tu es en ligne, ressens ce qui est juste et
          sois toujours aimable et montre du respect à tes amis, pour être juste et
          agréable sur Internet. De la tête jusqu’aux pieds, fais une pause, et penses-y.
          Des pieds jusqu’au nez, fais une pause et pense en ligne !
      3:
        text: Utilise tes bras pour câliner ton animal de compagnie, pour empêcher
          tes vêtements de se mouiller et pour porter tes manches préférées et te
          permettre de voler et de rêver. Utilise tes bras lorsque tu es en ligne,
          pour prendre le temps de faire une pause et d'équilibrer le temps et de
          laisser la technologie derrière toi et de te retrouver en train de grimper
          à un arbre. De la tête jusqu’aux pieds, fais une pause, et penses-y. Des
          pieds jusqu’au nez, fais une pause et pense en ligne !
      4:
        text: Utilise ton instinct pour stocker tes aliments et pour écouter son humeur
          ronchonne, faire un flop sur le ventre dans la piscine et sentir les bulles
          dans les boissons gazeuses. Utilise ton instinct quand tu es en ligne, pour
          savoir surveiller certains signes et de le laisser guider le chemin et te
          dire quand ça ne va pas. De la tête jusqu’aux pieds, fais une pause, et
          penses-y. Des pieds jusqu’au nez, fais une pause et pense en ligne !
      5:
        text: Alors pense avec ta tête et ressens avec ton cœur, équilibre avec tes
          bras, écoute ton instinct, en ligne. Utilise tes jambes pour courir et frapper
          et sauter et rebondir sur un bâtonnet de pogo, et danser autour du pâté
          de maisons et sautiller dans tes chaussettes puantes. Utilise tes jambes
          lorsque tu es en ligne, pour résister aux tyrans qui franchissent la ligne
          et n’oublie pas de te tenir debout, sois gentil avec les créatures - qu’elles
          soient grandes ou petites.
      6:
        text: De la tête jusqu’aux pieds, fais une pause, et penses-y. Des pieds jusqu’au
          nez, fais une pause et pense en ligne ! Alors pense avec ta tête et ressens
          avec ton cœur, équilibre avec tes bras, écoute ton instinct, tiens-toi droit
          sur tes jambes. De la tête jusqu’aux pieds, fais une pause, et penses-y.
          Des pieds jusqu’au nez, fais une pause et pense en ligne !
    C2_digital_footprint_v2:
      1:
        text: Chaque fois que tu vas en ligne, tu laisses une empreinte qui peut être
          recherchée, copiée, partagée, diffusée et reste permanente. Quel genre d'empreinte
          numérique laisses-tu ? Quel genre d'empreinte numérique veux-tu laisser
          ?
    C2_graph_paper:
      1:
        text: Cette leçon s’appelle «Programmation avec Papier millimétré» et elle
          aborde les algorithmes. Aujourd'hui, nous allons apprendre à écrire des
          programmes qui montrent comment recréer de simples images en noir et blanc,
          uniquement à l’aide de flèches dessinées à la main.
      2:
        text: Un algorithme est une liste d'instructions qui sert à mener à bien une
          tâche. Nous allons suivre cet ensemble d'instructions destinées à faire
          le bol. Les algorithmes sont vraiment utiles quand tu as besoin de quelqu'un
          d'autre pour comprendre comment faire quelque chose.
      3:
        text: Si tu écris un algorithme pour un ordinateur, tu dois le décomposer
          en toutes petites étapes. Alors, termine cette ligne et passe à la suivante,
          puis à la suivante, et tu auras fini.
      4:
        text: J'utilise des algorithmes dans mon travail. Si j'écris toutes les étapes,
          je peux recréer ce même morceau encore une fois, ou je peux apprendre à
          quelqu'un à le faire. Mets le verre dans le fourneau, il fusionne - suis
          le reste des instructions pour faire le bol. Les algorithmes te donnent
          une feuille de route pour effectuer des choses.
    C2_artist_loops:
      1:
        text: Ici nous allons utiliser le bloc « Répéter » pour nous aider à sauter
          des étapes lorsque nous programmons notre artiste. Nous avons déjà quelques
          blocs dehors sur notre scène, mais ils sont juste là pour nous aider à démarrer.
      2:
        text: Pour faire boucler 4 fois ces blocs afin de dessiner le carré complet,
          nous devons juste faire glisser le bloc «Répéter» et mettre les blocs «Avancer»
          et «Tourner à droite» à l'intérieur du bloc «Répéter». Lorsque nous appuyons
          sur « Exécuter », l'artiste répète ces étapes quatre fois pour compléter
          le carré.
    C2_bee_loops:
      1:
        text: Une boucle est une répétition de l'activité. En entrant dans une ruche
          pour inspecter, j'examine un cadre, et puis je le remets. Je répète cette
          même activité plusieurs fois. C'est faire des boucles, ou faire la même
          activité plusieurs fois.
      2:
        text: C'est le bloc « Répéter ». Quoi que tu mettes à l'intérieur, le bloc
          « Répéter » va répéter ces actions le nombre de fois que tu lui dis de le
          faire. Par exemple, dans ce niveau, plutôt que de glisser les blocs « Avancer
          » et « Recueillir du nectar » trois fois, nous allons juste tous les faire
          glisser une fois, et répéter l'action trois fois. Ça rend la chose plus
          facile !
    C2_maze_intro:
      1:
        text: La programmation se fait habituellement avec du texte, mais nous allons
          utiliser Blockly qui utilise des blocs visuels que tu peux glisser et déposer
          pour écrire des programmes. Mais en fait, tu crées toujours du code. Pour
          commencer, nous allons générer du code pour un programme qui aidera l’oiseau
          mécontent Angry Bird à se déplacer dans un labyrinthe afin d’atteindre les
          méchants cochons qui ont volé ses œufs.
      2:
        text: Blockly est divisé en trois grandes parties. Sur la gauche, il y a un
          labyrinthe d’oiseaux où ton programme s'exécutera. Les instructions pour
          chaque niveau sont écrites sous le labyrinthe. La zone du milieu est la
          boîte à outils, et chacun de ces blocs est une action que l’oiseau peut
          comprendre. La zone blanche à droite est l'espace de travail et c'est ici
          que nous allons construire notre programme.
      3:
        text: Si je fais glisser le bloc «Déplacer» dans notre espace de travail et
          appuie sur « Exécuter », que se passe-t-il ? L'oiseau avance d’une case
          sur la grille. Et si je veux que l’oiseau fasse quelque chose après avoir
          avancé d’une case ? Je peux ajouter un autre bloc à notre programme.
      4:
        text: Je vais choisir le bloc «Tourner à droite» et je vais le glisser sous
          mon bloc «Déplacer» jusqu'à ce que la flèche jaune apparaisse. Puis je le
          dépose et les deux blocs s’emboîteront. Lorsque j'appuie sur « Exécuter
          » à nouveau, l'oiseau effectue les commandes qui sont empilées de haut en
          bas sur notre espace de travail.
      5:
        text: Si jamais tu veux supprimer un bloc, il suffit de le retirer de la pile
          et de le faire glisser dans la corbeille. Après avoir cliqué sur « Exécuter
          », tu peux toujours cliquer sur le bouton «Réinitialiser» pour faire revenir
          l’oiseau au départ. Maintenant attrapons ces cochons !
    C2_paper_airplanes:
      1:
        text: Cette leçon s’appelle les Algorithmes de la vraie vie. Les algorithmes
          décrivent des choses que les gens font tous les jours. Les recettes de biscuits
          et les instructions pour construire un nichoir sont tous les deux des algorithmes
          de tous les jours.
      2:
        text: Aujourd'hui nous allons faire, créer et tester un algorithme pour un
          avion en papier. Mais tout d'abord, il faut décomposer ce grand projet en
          petites étapes faciles à suivre. Pour faire un avion en papier, nous devons
          décider quelles étapes suivre et dans quel ordre les suivre.
      3:
        text: Tu vas créer ton propre algorithme en découpant d’abord les photos.
          Ensuite, tu sélectionneras les 6 photos qui montrent les étapes nécessaires
          pour faire un avion en papier, et tu vas organiser ces images dans le bon
          ordre. Lorsque tu auras tout dans l'ordre, tu vas échanger tes algorithmes
          avec une autre équipe d'élèves pour tester ton algorithme et voir si celui-ci
          fonctionne. Un algorithme bien conçu est super important pour faire le meilleur
          avion en papier.
      4:
        text: Quand on veut faire du chocolat, il y a plusieurs étapes importantes
          à suivre pour compléter le processus. Et chacune de ces grandes étapes comporte
          son propre ensemble d’étapes plus petites. Et il y a différentes recettes,
          ou algorithmes, en fonction de la saveur que tu veux donner à ton chocolat.
          Chaque étape est importante, même les petites. Alors, si une étape manque,
          les autres ne peuvent pas être achevées. Créer des algorithmes que les autres
          peuvent comprendre est vraiment important. C'est pourquoi chaque étape doit
          être écrite, pour que peu importe qui suit ces étapes, le résultat reste
          le même.
    C2_playlab_createstory:
      1:
        text: Jusqu'ici, tu as fait une animation ou une histoire qui se rejoue à
          l'identique à chaque fois que tu l'exécutes. À présent, tu vas faire un
          jeu interactif auquel tu pourras véritablement jouer.
      2:
        text: Voici quelques nouveaux blocs à essayer. Il y a le bloc « Quand flèche
          » et le bloc « Déplacer acteur ». Tu peux mettre ces blocs ensemble pour
          que les acteurs se déplacent avec les touches fléchées du clavier. Et il
          y a quelques blocs qui font des choses quand l'acteur entre en collision
          ou reçoit un clic. Essaye-les et amuse-toi !
    C2_relay_programming:
      1:
        text: Aujourd'hui, nous allons faire la programmation de relais. Cela concerne
          la programmation sous pression et le débogage des erreurs qui se produisent
          parfois lorsque l’on travaille très rapidement ou en équipes. Nous utilisons
          la programmation sur papier millimétré pour simuler le codage, et nous utilisons
          les courses de relais pour simuler une date limite.
      2:
        text: Dans la programmation de relais, les équipes concourent pour terminer
          un programme sur papier millimétré. Tu devras vérifier le travail de ton
          coéquipier, ou le déboguer, le réparer s'il y a une erreur, ajouter ta flèche,
          l’exécuter de nouveau et marquer ton coéquipier.
      3:
        text: Les programmeurs utilisent beaucoup le débogage pour rechercher et résoudre
          des problèmes dans leurs algorithmes ou leur code. Il y a plusieurs façons
          de déboguer les problèmes. L’une des façons les plus faciles est d’avancer
          étape par étape jusqu’au moment où tu trouves que quelque chose ne va pas,
          et ensuite de le réparer.
      4:
        text: Ici, j’essaie de faire un salto arrière, mais je continue de tomber.
          J’ai traversé chaque partie étape par étape et réalisé où était mon erreur.
          Mon entraîneur m’a montré que je ne mettais pas mes mains correctement sur
          la poutre. Alors j'ai essayé un autre salto arrière sur la poutre avec ma
          nouvelle position des mains, et j’y suis arrivé ! J'étais vraiment content
          d’avoir débogué mon salto arrière. Nous avons trouvé ! Le débogage consiste
          à rechercher et à résoudre les problèmes. Bien, bon travail !
    C2_zuck_repeat_loop:
      1:
        text: Une chose que les ordinateurs font vraiment bien, c’est de répéter des
          commandes. En tant que personne, tu t’ennuierais vraiment si tu devais faire
          la même chose plusieurs fois de suite. Mais un ordinateur peut faire la
          même chose des millions ou même des milliards de fois sans s’ennuyer, en
          étant capable de le faire vraiment bien.
      2:
        text: Par exemple, si je voulais souhaiter à tout le monde sur Facebook un
          Joyeux Anniversaire en leur envoyant un e-mail, ça pourrait me prendre plus
          d’un siècle pour écrire tous ces e-mails personnels. Mais avec seulement
          quelques lignes de code, je pourrais demander à un système d’envoyer un
          e-mail à tout le monde sur Facebook en leur souhaitant un Joyeux Anniversaire.
          Voilà donc ce que sont les boucles et pourquoi celles-ci sont précieuses,
          et restent quelque chose que les ordinateurs peuvent très bien faire.
      3:
        text: Dans cet exemple, ton but va être de déplacer l'oiseau pour attraper
          le cochon.  Maintenant, nous utiliserons le bloc « Répéter » afin de pouvoir
          faire ça très facilement. Tu peux le faire en donnant cinq fois à l'ordinateur
          une commande « Avancer » afin de faire avancer l’oiseau d’un pas à chaque
          fois vers le cochon.
      4:
        text: Ou tu peux juste dire à l'ordinateur d’«Avancer» une fois et puis lui
          dire de le « Répéter » 5 fois, et il fera la même chose. Pour faire cela,
          tu dois déplacer la commande « Avancer » et la mettre à l'intérieur du bloc
          « Répéter ». Alors, tu pourras cliquer dessus pour indiquer au bloc « Répéter
          » de combien de pas tu veux avancer.
      5:
        text: Maintenant, encore une chose, tu peux mettre autant de commandes que
          tu veux à l'intérieur du bloc « Répéter ». Ainsi dans cet exemple, tu lui
          dis d’avancer et de tourner à gauche, ce qu’il fera cinq fois. Très bien,
          bon boulot et amuse-toi !
    C3_artist_functions:
      1:
        text: Une des choses géniales dans la programmation informatique c’est qu'une
          fois qu'on a appris à un ordinateur comment faire une action, on peut toujours
          rappeler cette fonction. Tu lui donnes un nom et ensuite tu l’appelles.
          C'est vraiment comme prolonger le langage.
      2:
        text: Dans le programme que nous avons construit, nous avons appris comment
          dessiner un carré en avançant et en tournant quatre fois. Nous pouvons prendre
          cette fonction et lui donner un nom comme «Dessiner un carré» pour que chaque
          fois qu’on en a envie, on puisse simplement dire « Dessiner un carré »,
          et l’ordinateur appellera cette fonction, ce code. Il le fera pour nous.
          Nous avons ajouté cette notion dans notre langage de programmation.
    C3_artist_intro:
      1:
        text: Tu ne serais même pas qualifié pour la course si tu n'avais pas les
          gens compétents en informatique - à cause de la quantité de données recueillies
          par les voitures et de la nécessité d'avoir des gens capable d'écrire des
          programmes afin de savoir comment continuer à être performant.
      2:
        text: Dans ces puzzles, tu seras un artiste qui utilise un crayon pour dessiner
          différentes formes. Partout où va ton artiste, il dessinera une ligne derrière
          lui.
      3:
        text: Pour te déplacer dans la toile, tu utiliseras le bloc « Avancer ». Ici,
          le bloc « Avancer » dit d’avancer de 100 pixels. Lorsque nous appuyons sur
          « Exécuter », que se passe-t-il ? L'artiste avance d’un certain montant
          de pixels et ce montant est de 100 pixels. Les pixels sont en réalité de
          tous petits carrés sur ton écran.
      4:
        text: L'autre bloc que nous avons dans ce puzzle dit « Tourner à droite de
          90 degrés. » Et quand nous le faisons glisser, notre artiste tourne d’un
          certain nombre de degrés. Tu peux jouer avec ce bloc pour faire tourner
          l’artiste comme tu veux. C’est un virage à 90 degrés.
      5:
        text: Et c’est un virage à 120 degrés. N'oublie pas, tu peux changer ces valeurs
          en cliquant sur les flèches qui se trouvent à côté des chiffres pour les
          pixels et les degrés. Amuse-toi à dessiner avec ton artiste !
    C3_artist_nested_loops:
      1:
        text: Quand tu mets une boucle à l'intérieur d'une autre boucle, on appelle
          ça une boucle imbriquée. Par exemple, ici, nous avons déjà le code pour
          dessiner un triangle de 100 pixels de côté en utilisant le bloc « Répéter
          » calé sur trois, une fois pour chaque côté du triangle.
      2:
        text: Mais nous voulons dessiner six triangles. Pour faire cela, nous allons
          prendre cette boucle et la placer dans un autre bloc « Répéter jusqu’à».
          Plutôt cool!
    C3_bee_conditionals:
      1:
        text: Il s'agit d’un bloc conditionnel. Il dit que SI il y a du nectar ou
          du miel qui est inférieur, égal ou supérieur à un certain nombre, ALORS
          il faut faire quelque chose.
      2:
        text: Cela est utile lorsque nous ne savons pas combien de nectar ou miel
          recueillir, comme nous le voyons ici avec ce point d'interrogation.
      3:
        text: Dans cet exemple, nous allons dire que SI la fleur pourpre a du nectar
          supérieur à 0, alors il faut « Recueillir du nectar ». Cela va dire à notre
          abeille de continuer à recueillir du nectar tant qu’il y en a. La-la !
    C3_bee_debugging:
      1:
        text: As-tu déjà entendu parler de déboguer un programme ? C’est la façon
          dont tu découvres ce qui ne fonctionne pas. Lorsque tu débogues le code,
          tu identifies et supprimes les erreurs.
      2:
        text: Ici, on nous donne quelques blocs qui sont déjà dans notre espace de
          travail. Nous allons utiliser le bouton Étape pour parcourir les blocs étape
          par étape, et voir si c'est la bonne solution et où nous devrions effectuer
          une réparation.
      3:
        text: On dirait que notre problème est là ! Nous avons besoin d'un autre bloc
          « Avancer ». Le bouton Étape nous aide à déboguer notre problème en identifiant
          où est l’erreur, ainsi et de cette façon, nous pouvons la réparer.
    C3_bee_functions:
      1:
        text: Un des concepts les plus importants en informatique est la façon de
          définir de nouvelles commandes, en d’autres mots la façon d’ajouter tes
          propres mots à un langage informatique. La plupart des langages informatiques
          possèdent plus ou moins cent mots ou commandes. L’art et la magie sont dans
          la définition de tes propres nouveaux mots pour ces blocs de construction.
      2:
        text: Nous faisons ça tout le temps en sport. Par exemple, au basket, tu commences
          par apprendre à dribbler, à tirer en courant et à faire rebondir le ballon.
          Lorsque tu as appris ces mouvements de base, tu apprends de nouveaux mouvements
          et tu mets en place ces blocs de construction, comme les techniques de jeux
          du «pick and roll» ou du «passe et cours». De là, tu peux passer à des jeux
          plus complexes. Lorsque tu apprends ce jeu et que tu lui donnes un nom,
          tout le monde dans l'équipe sait comment le faire.
      3:
        text: De même, lorsque tu as appris à un ordinateur comment faire une action
          une fois en utilisant cette suite de commandes, tu peux donner un nom à
          cette action pour qu'elle soit facile à répéter ensuite. Quand tu définis
          ta propre commande et lui donnes un nom, on appelle ça une fonction. Maintenant,
          nous allons utiliser des fonctions pour aider l'abeille.
      4:
        text: Dans cet exemple, notre fonction s’appelle «Recueillir 2 nectars», ce
          bloc vert juste là. Nous savons à quoi ressemble « Recueillir 2 nectars
          » en regardant cette boîte grise qui donne la définition de la fonction.
          Si nous regardons à l'intérieur, le bloc « Recueillir 2 nectars » va « Recueillir
          du nectar » et puis recueillir à nouveau du nectar. Regarde toujours ce
          qui est à l'intérieur de la boîte grise, afin que tu saches ce que ces blocs
          de fonction verts peuvent faire.
    C3_bee_nested_loops:
      1:
        text: Maintenant nous allons utiliser les boucles imbriquées avec l'abeille.
          On nous a donné un code de démarrage qui dit à l'abeille d’avancer et d’obtenir
          le nectar trois fois et puis de tourner à droite. Prenons ce morceau entier
          de code et imbriquons-le à l'intérieur d’un autre bloc « Répéter » et réglons
          la répétition à trois fois. Fait !
    C3_bounce:
      1:
        text: Tu vas maintenant créer ton propre jeu de casse-brique à rebond, que
          tu pourras partager avec tes amis. Super cool !
      2:
        text: Pour démarrer, nous devons lier les commandes de la palette aux touches
          fléchées de notre clavier.
      3:
        text: Nous pouvons le faire en liant le bloc «Quand flèche vers le gauche»
          au bloc « Déplacer vers la gauche », et le bloc « Quand flèche vers le droite
          » au bloc « Déplacer vers la droite ». Fais un essai et tu vas programmer
          ton propre jeu de casse-brique à rebond en moins de deux !
    C3_computational_thinking:
      1:
        text: Cette leçon enseigne la Pensée computationnelle. Parfois, apprendre
          un nouveau jeu peut être difficile, pas vrai ? Au début, cela peut te paraître
          vraiment confus et parfois il n'y a personne pour t’apprendre les règles,
          alors tu dois les déchiffrer par toi-même.
      2:
        text: La bonne nouvelle, c’est que tu comprends mieux les choses   lorsque
          tu connais quelques astuces de raisonnement. Ces astuces sont des moyens
          uniques d’examiner et de résoudre les problèmes. Dans cette leçon, tu vas
          apprendre quatre astuces et les mettre en pratique avec tes amis pour comprendre
          les règles d'un jeu.
      3:
        text: Lorsque tu décomposes un gros problème en plus petits morceaux, tu utilises
          ton cerveau pour décomposer le gros problème. Lorsque nous avons décomposé
          le gros problème en plusieurs petits problèmes, nous pouvons avancer à la
          prochaine astuce, qui s’appelle la correspondance de modèle.
      4:
        text: À cette étape-là, nous recherchons des similitudes entre les choses.
          Lorsque j'ai trouvé les choses qui sont pareilles, je peux comprendre les
          choses qui sont différentes. Lorsque je retire ces différences, cela s'appelle
          une abstraction.
      5:
        text: Lorsque j'ai trouvé les étapes à suivre pour résoudre un problème, je
          peux mettre ces étapes dans un ordre spécifique - appelé algorithme, de
          sorte que n'importe qui peut utiliser mes instructions pour résoudre ce
          problème. Nous allons utiliser ces quatre étapes pour comprendre comment
          jouer le jeu sans règles. À la fin du jeu, tu pourras jouer à quelque chose
          qui ressemble à ceci !
    C3_crowdsourcing:
      1:
        text: Cette leçon s’appelle la Production participative. Dans cette leçon,
          nous allons utiliser un jeu de cartes pour comprendre à quel point il est
          plus facile de faire les choses en groupes, que d'essayer de les faire tout
          seul. Rassemble quelques amis et fais quelque chose de génial. La production
          participative consiste à obtenir de l'aide d'un grand groupe de personnes
          afin de terminer quelque chose rapidement.
      2:
        text: En informatique, nous utilisons la production participative tout le
          temps. Des milliers d'amateurs et de professionnels relient leurs ordinateurs
          pour chercher parmi des milliards et des milliards d'éléments d'information.
          Ils cherchent des choses comme le prochain nombre premier de Mersenne ou
          même d’éventuelles communications extraterrestres.
      3:
        text: Quand tu vois un film, chaque seconde du film est composé de 24 images
          individuelles, nous les appelons des cadres. Car chacune de ces images doit
          être créée et rendue, et ensuite rassemblée. Mon équipe et moi-même, nous
          sommes tous des développeurs de logiciels. Nous travaillons tous ensemble
          pour créer un morceau de logiciel qui en fait crée une image - crée l'image
          finale que tu vois à l'écran. C'est un outil que les artistes et les autres
          développeurs peuvent utiliser dans le cadre de leur travail d'équipe et
          de leurs processus afin de créer les images qu'ils veulent voir à l'écran.
      4:
        text: Par exemple, dans Nemo, lorsque Crush et Squirt et tous leurs amis volent
          à travers le courant est-australien. Tu vois des images de l'eau qui coule,
          tu vois les couleurs du dos de la tortue, tu vois les flancs du poisson.
          Toutes ces choses sont générées par le biais de programmes de mathématiques
          et d'informatique que nous écrivons, et que nous donnons ensuite à l'artiste.
          Celui-ci prend tout ça pour créer l'image finale, la mettre au point et
          la rendre belle et amusante à regarder.
    C3_dice_race:
      1:
        text: Cette leçon s’appelle la Course de dés. Presque tout le monde aime jouer
          aux jeux vidéo. As-tu jamais pensé à la façon dont les programmeurs transforment
          les étapes d'un jeu en un programme ? La première étape dans la création
          de jeux vidéo et dans la résolution de tout problème est la réflexion et
          la planification.
      2:
        text: L'étape de réflexion du problème produit un algorithme, qui est un plan
          étape par étape établi afin de résoudre un problème ou terminer une tâche.
          Dans cette leçon, tu vas créer un algorithme pour un jeu de course de dés.
          Ensuite, tu vas demander à tes amis d'essayer ton plan pour voir si ils
          peuvent suivre les étapes et jouer au jeu. Lorsque le programmeur est sûr
          que les étapes sont correctes, il est temps de traduire l'algorithme en
          un programme avec un langage que l'ordinateur peut comprendre.
      3:
        text: Presque tout ce que nous faisons tous les jours nécessite un algorithme,
          une liste d'étapes à suivre pour terminer une tâche. Comme lorsque tu te
          prépares pour l'école ou que tu planifies un jour de loisirs avec tes amis
          ou que tu prépares une collation. Pour effectuer ces tâches, tu devras les
          décomposer en plus petites étapes, et parfois les étapes doivent se faire
          dans un ordre spécifique.
      4:
        text: Réfléchis à la fabrication d’un sandwich. Peu importe quel ingrédient
          tu sors en premier de l’armoire. Mais tu ne peux pas étaler le beurre de
          cacahuète avant d’avoir ouvert le pot. Les ordinateurs ont besoin d'algorithmes
          et de programmes pour leur montrer comment faire des choses même simples,
          que nous pouvons faire sans y penser.
      5:
        text: Un algorithme est le raisonnement qui sous-tend ce qui doit se produire,
          tandis que le programme est l'instruction donnée à l'ordinateur pour y arriver.
          Un algorithme doit être traduit en un programme avant qu’un ordinateur puisse
          l’exécuter. Il est parfois difficile de décomposer une tâche en étapes appelées
          un algorithme. Mais comme pour toute nouvelle compétence, cela devient de
          plus en plus facile avec de la pratique.
    C3_farmer_while:
      1:
        text: Les boucles «Tant que» sont assez similaires à ce que tu fais dans la
          vie quotidienne. Imagine que tu laves ta voiture, tu vas frotter jusqu'à
          ce qu'elle soit propre. Tant qu’elle n'est pas propre, continue à frotter.
          Tu évalues ces choses tout le temps.
      2:
        text: Nous avons quelque chose de nouveau pour dépanner ton fermier. Cela
          s’appelle un bloc «Tant que». C'est assez simple en fait. Tant qu’une instruction
          indiquée en haut est vraie, fais quelque chose. Par exemple, tant qu’il
          y a un tas de foin, déplace une fourche de foin. Vas-y, et fais un essai
          avec ton fermier.
    C3_functional_suncatchers:
      1:
        text: Cette leçon enseigne comment faire des Vitraux fonctionnels. Tu vas
          créer ces jolis vitraux à l'aide de fonctions. Il y a plusieurs étapes dans
          la création d'un de ces vitraux. Tu devras répéter certaines de ces étapes
          plusieurs fois.
      2:
        text: La première étape pour simplifier le processus de fabrication d'un vitrail
          consiste à déterminer ce que nous devons répéter maintes et maintes fois.
          Nous pouvons regrouper ces étapes dans ce qu'on appelle une fonction.
      3:
        text: Mais la création d'un beau vitrail qui capte bien le soleil implique
          plus que de simplement suivre des étapes précises. Parfois, nous voulons
          faire preuve de créativité et changer la couleur des perles que nous utilisons.
          Nous pouvons rendre chaque vitrail ou attrape-soleil unique si on utilise
          des perles de couleur différentes.
      4:
        text: Ton vitrail attrape-soleil t’appartiendra vraiment lorsque tu pourras
          imaginer les perles comme des variables - qui signifie un espace réservé
          pour les informations qui peuvent changer. Amuse-toi à créer de beaux vitraux
          qui captent bien le soleil en utilisant des fonctions et variables !
    C3_internet:
      1:
        text: Cette leçon concerne l’Internet. L’Internet est un endroit très occupé
          et semblable à une route très fréquentée. Les messages, comme les voitures,
          se ruent pour parvenir à leur destination. Les messages passent par Internet
          très rapidement.
      2:
        text: Agir sur la façon dont fonctionne l’Internet t’aidera à comprendre ce
          qui se passe lorsque tu l’utilises. Tu apprendras comment les messages vont
          de ton ordinateur vers ton site préféré ou d'un ami à une boîte de courrier
          électronique. Tout comme il est plus facile de conduire sur une route embouteillée
          que tu connais et où tu peux lire les panneaux, voyager sur l’Internet n'est
          pas si compliqué quand on sait ce qui se passe dans les coulisses.
      3:
        text: Envoyer des messages sur l’Internet, c'est un peu comme envoyer des
          messages par la poste, mais avec quelques différences. Je suis ici sur Google.com.
          L'adresse IP de ce site Web est ce numéro. Tu peux penser à une adresse
          IP comme à ton adresse postale. Imaginons que je veux envoyer un message
          par la poste à quelqu'un dans le bureau là-bas. Vois-tu l’URL et l'adresse
          IP sur cette porte ? J'ai écrit ce message et cliqué sur envoyer.
      4:
        text: Contrairement à la poste, la première chose qui se passe lorsque j’envoie
          mon message, c’est qu'Internet décompose le message en parties plus petites
          afin qu’il puisse être envoyé plus facilement. Ces petites parties sont
          appelées des paquets. Chaque paquet du message est livré à destination,
          un par un. Ces paquets sont tous remis dans le bon ordre afin que le destinataire
          puisse lire le message correctement. Bien sûr, il y a beaucoup plus de choses
          à apprendre sur le fonctionnement d'Internet, mais c’est un très bon départ.
          Tu es en passe de devenir un utilisateur chevronné d’Internet ! N'oublie
          pas de raconter à ta famille et à tes amis ce que tu as appris !
      5:
        text: Mon nom est Amanda Camp et je suis ingénieur logiciel chez Google. Je
          fais partie d’une équipe qui travaille sur un serveur dorsal qui stocke
          les profils et les contacts. Dans mon travail, nous pensons beaucoup à la
          façon dont les contacts peuvent être envoyés à d'autres appareils, comme
          ton téléphone. La plupart des gens ont beaucoup de contacts; tu peux avoir,
          disons, 1000 contacts et nous ne voulons pas envoyer tous ces contacts en
          une fois à ton téléphone, car ce message serait beaucoup trop long. Semblable
          à la façon dont l'Internet décompose des messages volumineux en paquets,
          nous utilisons un concept appelé «pagination» où nous pourrions envoyer
          à ton téléphone seulement 100 contacts à la fois, et laisser ton téléphone
          nous répondre et nous demander les 100 contacts suivants.
      6:
        text: La chose la plus excitante à propos d’un logiciel est le fait qu'il
          puisse impacter le monde entier. J'ai d'abord appris à programmer quand
          j'avais environ dix-neuf ans. Je pense que j'étais déjà étudiant en première
          ou deuxième année d’université. Le premier programme que je me souviens
          avoir écrit est quelque chose qui convertissait les degrés Celsius en degrés
          Fahrenheit. J’aime programmer parce que j’aime aider les gens. Je peux écrire
          des programmes chez Google qui aident les gens dans le monde entier, et
          c'est vraiment ahurissant et passionnant.
    C3_maze_conditionals:
      1:
        text: Les gens prennent des décisions tous les jours. Par exemple, avant de
          sortir, tu penses à une instruction «Si» qui dit que si il pleut, alors
          tu devras prendre ta veste. Les ordinateurs sont incroyables, car lorsque
          tu décides de ce genre d’instructions, ils peuvent les exécuter avec fiabilité
          et à une vitesse incroyable. Un programme informatique c’est vraiment un
          peu de maths et un peu d’instructions «Si» lorsque la décision est prise.
      2:
        text: Le bloc « Si » aide le zombie à prendre une décision. Il vérifie quelque
          chose. Par exemple, utilisons le bloc «S’il y a un chemin vers la gauche»,
          et mets une commande « Tourner à gauche » à l'intérieur. Nous allons dire
          au zombie de vérifier autour de lui, voir s'il y a un chemin sur la gauche
          et dans l'affirmative, d’aller dans cette direction.
      3:
        text: Ensuite, nous utilisons le bloc «Avancer» à l'intérieur de ce bloc «Répéter»
          pour qu'il puisse continuer à avancer, car il veut juste aller tout droit.
          Puis quand il y a un virage, le bloc «Si» lui dira de tourner à gauche.
          Tu peux voir que si nous faisons cela, si nous tournons à gauche et autrement
          si nous avançons, nous allons atteindre notre objectif.
      4:
        text: C'est un exemple d'utilisation d'une instruction « Si » qui est vraiment
          un concept fondamental en programmation informatique. Une des premières
          choses que j'ai apprises était comment écrire un programme qui jouait au
          morpion. J’avais des instructions « Si » pour dire «OK, si l'autre personne
          s'apprête à gagner, vas-y et bloque cet endroit». Amuse-toi à apprendre
          comment utiliser les instructions « Si », car c'est un concept-clé.
    C3_maze_level_4:
      1:
        text: Dans cet exemple, ton but est que les zombies atteignent le tournesol.
          Nous pourrions utiliser cinq blocs « Avancer » ou nous pourrions dire à
          l'ordinateur d’avancer et de répéter cinq fois l’action à l'aide du bloc
          «Répéter».
      2:
        text: Cela fait gagner du temps et simplifie beaucoup le code. Pour l'utiliser,
          il suffit de mettre le bloc « Avancer » à l'intérieur du bloc « Répéter
          ». Appuie sur «Exécuter» et le zombie va avancer cinq fois vers le délicieux
          tournesol.
    C3_playlab_create_game:
      1:
        text: Jusqu'ici, tu as fait une animation ou une histoire qui se rejoue à
          l'identique à chaque fois que tu l'exécutes. À présent, tu vas faire un
          jeu interactif auquel tu pourras véritablement jouer.
      2:
        text: Voici quelques nouveaux blocs à essayer. Il y a le bloc « Quand flèche
          » et le bloc « Déplacer acteur ». Tu peux mettre ces blocs ensemble pour
          que les acteurs se déplacent avec les touches fléchées du clavier. Et il
          y a quelques blocs qui font des choses quand l'acteur entre en collision
          ou reçoit un clic. Essaye-les et amuse-toi !
    C3_songwriting_with_parameters:
      1:
        text: C'est la leçon qui enseigne la Composition de chansons. La musique ressemble
          beaucoup à un programme informatique. Les notes écrites et les mots disent
          au chanteur exactement quoi faire. Certaines sections de la musique sont
          utilisées encore et encore.
      2:
        text: Nous appelons cela le refrain. Dans un programme informatique, les parties
          du programme qui sont utilisées à plusieurs reprises sont appelées les fonctions.
          Lorsque tu lis les paroles de la chanson, et qu’il est écrit le mot refrain,
          chantes-tu le mot refrain ? Non, tu regardes en haut de la page pour voir
          quels mots composent le refrain.
      3:
        text: Dans cette leçon, tu vas apprendre une petite chanson idiote appelée
          «le petit lapin Foo Foo». La chanson a un refrain que tu vas répéter plusieurs
          fois. Une fonction est un morceau de code que tu peux appeler et utiliser
          maintes et maintes fois. Elle rend la programmation plus facile et plus
          efficace pour que tu n'aies pas à écrire les étapes de ta fonction encore
          et encore. Tu peux les écrire juste une fois !
    C4_bee_conditional:
      1:
        text: Il s'agit d’un bloc conditionnel. Il dit « Si » tu es à la fleur ou
          au nid d'abeilles, alors fais quelque chose. Cela est utile lorsque nous
          ne savons pas combien de miel ou de nectar recueillir, comme nous le voyons
          ici avec ce point d'interrogation.
      2:
        text: Dans cet exemple, nous allons dire, «Si c'est une fleur, recueillir
          tout le nectar», et ensuite utiliser un autre bloc pour dire «Si c'est un
          nid d'abeilles, faire du miel». La-la !
    C4_conditionals:
      1:
        text: Nous avons un nouveau bloc qui s’appelle le bloc « Si-Sinon ». Il s'agit
          d'une instruction conditionnelle, tout comme le bloc « Si » que tu as utilisé
          dans le puzzle auparavant. Mais il y a maintenant une nouvelle partie en
          bas qui dit « Sinon ». Le bloc « Si-Sinon » laisse l'abeille prendre une
          décision entre deux séries d'actions. Si l'abeille est sur une fleur, l'abeille
          va faire l'ensemble des actions que tu as mis dans la première partie où
          il est dit «Faire». Si l'abeille n’est pas sur une fleur, l'abeille va faire
          l'ensemble des actions que tu mets dans le créneau « Sinon ».
      2:
        text: 'Les instructions «Si» sont la façon dont les ordinateurs sont capables
          de prendre des décisions. Les humains mettent en place des conditions pour
          l''ordinateur qui disent: si l’ordinateur rencontre cette situation, alors
          il doit faire cette action. « Sinon », qui signifie simplement dans le cas
          contraire, l’ordinateur doit faire cela. La partie supérieure de notre bloc
          « Si-Sinon » dit « Si à une fleur». Mais la partie supérieure de notre bloc
          pourrait dire d’autres choses, comme «Si le nectar est égal à 2» ou «S''il
          y a un chemin devant», notre bloc se comportera de la même manière. Si l’instruction
          dans la partie supérieure est vraie, alors elle fera la première série d''actions.
          Mais si l''instruction dans la partie supérieure est fausse, alors elle
          fera la deuxième série d''actions.'
    C4_for_loops:
      1:
        text: Quand tu utilises un bloc « Répéter » pour créer une boucle dans ton
          code, comment l'ordinateur sait-il quand le code a été répété suffisamment
          de fois ? Le bloc « Répéter » cache en fait un morceau de code plus sophistiqué,
          appelé une « Boucle pour », qui compte depuis une valeur de départ jusqu'à
          une valeur de fin avec une augmentation spécifique.
      2:
        text: Par exemple, un bloc « Répéter 3» compte de 1 à 3 par saut de 1. Chaque
          fois que ça compte, il exécute le code à l'intérieur de la boucle. La «Boucle
          pour» sait combien de fois elle a exécuté l’action en utilisant une variable
          «Compteur» qui est définie sur la valeur de départ au début de la boucle
          et ajoute l’augmentation chaque fois que la boucle est exécuté. Dès que
          la variable de «Compteur» est supérieure à la valeur de fin, la boucle s'arrête
          de fonctionner.
      3:
        text: L'avantage d'utiliser une vraie « Boucle pour » au lieu du bloc « Répéter
          » est que tu peux réellement voir la variable «Compteur» et l’utiliser dans
          ta boucle. Par exemple, si j'ai une série de fleurs, et que la première
          a un nectar, la seconde a deux nectars et la troisième en a trois, je peux
          utiliser la «Boucle pour» afin de dire à l'abeille de butiner les nectars
          du «Compteur» à chaque fois, ce qui fait un à la première fleur, deux à
          la deuxième fleur et trois à la troisième.
      4:
        text: De même, dans une « Boucle pour », tu peux augmenter le nombre du compteur
          par un chiffre autre que 1 à chaque fois. Tu peux éventuellement compter
          par 2, 4 ou même un montant qui change à chaque fois.
    C4_for_loops_bee:
      1:
        text: Quand tu utilises un bloc « Répéter » pour créer une boucle dans ton
          code, comment l'ordinateur sait-il quand le code a été répété suffisamment
          de fois ? Le bloc « Répéter » cache en fait un morceau de code plus sophistiqué,
          appelé une « Boucle pour », qui compte depuis une valeur de départ jusqu'à
          une valeur de fin avec une augmentation spécifique.
      2:
        text: Par exemple, un bloc « Répéter 3» compte de 1 à 3 par saut de 1. Chaque
          fois que ça compte, il exécute le code à l'intérieur de la boucle. La «Boucle
          pour» sait combien de fois elle a exécuté l’action en utilisant une variable
          «Compteur» qui est définie sur la valeur de départ au début de la boucle
          et ajoute l’augmentation chaque fois que la boucle est exécuté. Dès que
          la variable de «Compteur» est supérieure à la valeur de fin, la boucle s'arrête
          de fonctionner.
      3:
        text: L'avantage d'utiliser une vraie « Boucle pour » au lieu du bloc « Répéter
          » est que tu peux réellement voir la variable «Compteur» et l’utiliser dans
          ta boucle. Par exemple, si j'ai une série de fleurs, et que la première
          a un nectar, la seconde a deux nectars et la troisième en a trois, je peux
          utiliser la «Boucle pour» afin de dire à l'abeille de butiner les nectars
          du «Compteur» à chaque fois, ce qui fait un à la première fleur, deux à
          la deuxième fleur et trois à la troisième.
      4:
        text: De même, dans une « Boucle pour », tu peux augmenter le nombre du compteur
          par un chiffre autre que 1 à chaque fois. Tu peux éventuellement compter
          par 2, 4 ou même un montant qui change à chaque fois.
    C4_for_loops_no_bee:
      1:
        text: Quand tu utilises un bloc « Répéter » pour créer une boucle dans ton
          code, comment l'ordinateur sait-il quand le code a été répété suffisamment
          de fois ? Le bloc « Répéter » cache en fait un morceau de code plus sophistiqué,
          appelé une « Boucle pour », qui compte depuis une valeur de départ jusqu'à
          une valeur de fin avec une augmentation spécifique.
      2:
        text: Par exemple, un bloc « Répéter 3» compte de 1 à 3 par saut de 1. Chaque
          fois que ça compte, il exécute le code à l'intérieur de la boucle. La «Boucle
          pour» sait combien de fois elle a exécuté l’action en utilisant une variable
          «Compteur» qui est définie sur la valeur de départ au début de la boucle
          et ajoute l’augmentation chaque fois que la boucle est exécuté. Dès que
          la variable de «Compteur» est supérieure à la valeur de fin, la boucle s'arrête
          de fonctionner. L'avantage d'utiliser une vraie « Boucle pour » au lieu
          du bloc « Répéter » est que tu peux réellement voir la variable «Compteur»
          et l’utiliser dans ta boucle.
    C4_function_create:
      1:
        text: Maintenant que tu as modifié des blocs de fonctions, il est temps de
          créer un nouveau bloc de fonction à partir de zéro. C'est vraiment simple.
          Tu verras que la boîte à outils a une catégorie appelée «fonctions». Si
          tu cliques dessus, tu verras un bouton orange appelé «Créer une fonction».
          Cliquer dessus affiche l'éditeur de fonction que tu as déjà utilisé pour
          modifier des blocs de fonctions existants.
      2:
        text: Tout comme avant, tu as commencé en nommant ta fonction, en rédigeant
          une description de ce que la fonction doit faire. Par exemple, elle doit
          dessiner un carré ou dessiner un triangle, et ensuite faire glisser des
          blocs depuis la boîte à outils vers l'espace de travail blanc ci-dessous.
          N'oublie pas de glisser ces blocs à l'intérieur du bloc d’emballage vert
          de la fonction.
      3:
        text: Lorsque tu as terminé, clique sur Enregistrer et Quitter. Cela te ramènera
          à l’espace de travail principal du puzzle. La nouvelle fonction que tu as
          créée apparaîtra comme un bloc vert dans la catégorie fonctions de ta boîte
          à outils. Fais glisser et dépose ce bloc dans l'espace de travail principal
          et utilise-le comme n’importe quel autre bloc pour résoudre le puzzle.
    C4_function_edit:
      1:
        text: Une des choses géniales dans la programmation informatique c’est qu'une
          fois qu'on a appris à un ordinateur comment faire une action, on peut toujours
          rappeler cette fonction. Tu lui donnes un nom et ensuite tu l’appelles.
          C'est vraiment comme prolonger le langage.
      2:
        text: Dans le programme que nous avons construit, nous avons appris comment
          dessiner un carré en avançant et en tournant quatre fois. Nous pouvons prendre
          cette fonction et lui donner un nom comme « Dessiner un carré » pour que
          chaque fois qu’on en a envie, on puisse simplement dire « Dessiner un carré
          », et l’ordinateur appellera cette fonction, ce code et il le fera pour
          nous. Nous avons ajouté cette notion dans notre langage de programmation.
      3:
        text: Dans ce puzzle, nous avons déjà créé une fonction « Dessiner un carré
          » pour toi. Tu la verras dans la boîte à outils comme un bloc vert. Ce que
          tu devras faire est d'écrire le même code que tu as écrit avant pour dessiner
          un carré et le mettre dans cette fonction. Pour ce faire, clique sur l'option
          Modifier dans le bloc vert « Dessiner un carré ». Cela va ouvrir l'éditeur
          de fonction. L'éditeur de fonction comporte trois parties. Un endroit où
          tu donnes un nom à ta fonction. Cela apparaîtra sur le bloc vert avant cette
          fonction. Puis écris une courte description de ce que ta fonction doit faire.
      4:
        text: Dans ce cas, elle doit dessiner un carré. L'espace blanc ci-dessous
          est l'espace de travail et il fonctionne exactement comme l'espace de travail
          que tu utilises déjà. Fais glisser et dépose les blocs de la boîte à outils
          dans cet espace de travail. N'oublie pas de mettre ces blocs qui créent
          un carré à l'intérieur du bloc d’emballage vert de la fonction. Lorsque
          tu as terminé, clique sur Enregistrer et Quitter. Cela te ramènera à l’espace
          de travail principal du puzzle. Maintenant, tu peux utiliser le bloc de
          fonction « Dessiner un carré » comme n’importe quel autre bloc pour résoudre
          le puzzle.
    C4_function_parameters:
      1:
        text: Voici une fonction qui dessine un carré avec des côtés de 50 pixels.
          C'est très bien, mais si je voulais dessiner un carré avec des côtés de
          50 pixels et un autre carré avec des côtés de 100 pixels ? Nous ne devrions
          pas avoir à faire deux fonctions séparées qui font presque la même chose.
          Au lieu de cela, nous pouvons utiliser une fonction avec un paramètre.
      2:
        text: Les paramètres nous permettent de transmettre des valeurs à une fonction,
          qui est utilisée comme variable à l'intérieur de la fonction. Nous allons
          essayer d'ajouter un paramètre à cette fonction afin de pouvoir l'utiliser
          pour créer des carrés de différentes tailles. Dans l'éditeur de fonction,
          tu peux modifier le nom et la description comme tu l’as fait auparavant,
          mais maintenant, tu peux également rajouter un paramètre. Écris le nom de
          ton paramètre dans l'espace, puis clique sur Ajouter un paramètre. Cela
          va créer un bloc rouge avec le nom du paramètre que tu viens de créer. Maintenant,
          nous pouvons remplacer le bloc « Avancer » de 100 par le paramètre «Longueur»
          et il va donc avancer de la longueur indiquée.
      3:
        text: Clique sur Enregistrer et Fermer et glisse ton nouveau bloc «Dessiner
          un carré» de la catégorie Fonctions de la boîte à outils. Tu remarqueras
          qu'il y a un espace vide à côté de «Longueur» parce que la fonction veut
          savoir quelle valeur le paramètre « Longueur » doit avoir. Fais glisser
          un bloc numérique de la catégorie Maths et place-le dans cet espace. Tu
          vois comment tu peux utiliser la fonction encore et encore avec des longueurs
          différentes pour faire des carrés de différentes tailles ? Essaie de faire
          un carré tout seul !
    C4_intro:
      1:
        text: La programmation se fait habituellement avec du texte, mais nous allons
          utiliser Blockly qui utilise des blocs visuels que tu peux glisser et déposer
          pour écrire des programmes. Mais en fait, tu crées toujours du code. Pour
          commencer, nous allons générer du code pour un programme qui aidera l’oiseau
          mécontent Angry Bird à se déplacer dans un labyrinthe afin d’atteindre les
          méchants cochons qui ont volé ses œufs.
      2:
        text: Blockly est divisé en trois grandes parties. Sur la gauche, il y a un
          labyrinthe d’oiseaux où ton programme s'exécutera. Les instructions pour
          chaque niveau sont écrites sous le labyrinthe. La zone du milieu est la
          boîte à outils, et chacun de ces blocs est une action que l’oiseau peut
          comprendre. La zone blanche à droite est l'espace de travail et c'est ici
          que nous allons construire notre programme.
      3:
        text: Si je fais glisser le bloc «Déplacer» dans notre espace de travail et
          appuie sur « Exécuter », que se passe-t-il ? L'oiseau avance d’une case
          sur la grille. Et si je veux que l’oiseau fasse quelque chose après avoir
          avancé d’une case ? Je peux ajouter un autre bloc à notre programme.
      4:
        text: Je vais choisir le bloc «Tourner à droite» et je vais le glisser sous
          mon bloc «Déplacer» jusqu'à ce que la flèche jaune apparaisse. Puis je le
          dépose et les deux blocs s’emboîteront. Lorsque j'appuie à nouveau sur «
          Exécuter », l'oiseau effectue les commandes qui sont empilées de haut en
          bas sur notre espace de travail.
      5:
        text: Si jamais tu veux supprimer un bloc, il suffit de le retirer de la pile
          et de le faire glisser dans la corbeille. Après avoir cliqué sur « Exécuter
          », tu peux toujours cliquer sur le bouton «Réinitialiser» pour faire revenir
          l’oiseau au départ. Maintenant attrapons ces cochons !
    C4_math_artist:
      1:
        text: Si je veux dessiner un rectangle de 50 pixels de hauteur qui soit deux
          fois plus large que haut, comment dois-je programmer l'ordinateur pour faire
          ça ? Eh bien, je pourrais dire à l'artiste de monter jusqu'à cinquante,
          de tourner à droite et puis d’aller à 100 et de déplacer le tout deux fois.
          Mais alors je fais des maths pour l'ordinateur.
      2:
        text: Multiplier cinquante par deux dans ta tête n’est pas difficile, mais
          les ordinateurs sont vraiment bons pour faire des maths, alors il faut leur
          laisser faire les calculs autant que possible. Si j'avais simplement utilisé
          une variable appelée «Hauteur», alors j'aurais pu facilement changer la
          hauteur à cinquante, et ensuite changer mon algorithme pour indiquer à l'artiste
          de monter de la hauteur voulue, de tourner à droite, et ensuite d'avancer
          de deux fois la hauteur; ce qui nous donne un rectangle deux fois plus large
          que haut.
    C4_unplugged_algorithms:
      1:
        text: Cette leçon s’appelle les Algorithmes Tangram. Un Tangram est un puzzle
          à sept pièces qui peuvent être assemblées pour créer d'autres formes. Tu
          vas utiliser un algorithme pour expliquer à ton partenaire comment assembler
          le puzzle.
      2:
        text: Un algorithme est simplement une liste d’étapes que tu peux suivre pour
          effectuer une tâche. Nous les utilisons tous les jours avec des choses comme
          des listes de courses et des recettes. Si ton algorithme est simple, il
          y a beaucoup de façons de l'interpréter et celui qui effectue cet algorithme
          peut ne pas obtenir exactement ce que tu voulais. Si tu veux t’assurer que
          tout le monde termine avec exactement la même chose, alors ton algorithme
          doit être détaillé et très précis.
      3:
        text: Aujourd’hui, j'utilise un algorithme pour terminer un tableau. Je voulais
          essayer de faire un tableau avec des loups, mais je ne suis pas le meilleur
          des peintres. Heureusement, pour les gens comme moi, il y a la peinture
          par numéros. Il existe quarante couleurs et il y a des petites lettres et
          des chiffres qui te disent de quelle couleur peindre chaque section. La
          peinture par numéros me dit exactement quelle couleur utiliser et à quel
          endroit.
      4:
        text: Elle est très précise, donc je suis en mesure de suivre les instructions
          et le tableau va devenir incroyablement beau. C’est un super algorithme.
          Si les instructions n'étaient pas suffisamment précises, mes loups n’auraient
          pas l’air aussi beaux. Lorsque tu veux que quelque chose se réalise exactement
          de la façon dont tu l’avais prévu, il est préférable d'être extrêmement
          précis.
    C4_unplugged_binary:
      1:
        text: La personne qui donne des instructions est la personne qui tient le
          papier; chaque équipe doit imaginer ce que va être son symbole «Éteint»
          et ce que va être son symbole «En marche».  En binaire, c'est un peu comme
          un alphabet avec deux lettres. Comme si A et B formaient tout alphabet,
          mais tu as un 0 et un 1.
      2:
        text: La façon la plus courante d’utiliser le binaire est avec l’instruction
          «Si». C'est un classique de la programmation. Le programme s'exécute et
          dit si quelque chose est vrai, et ensuite le fait. Ou si ce n’est pas vrai,
          fais quelque chose d’autres. Et si tu voulais faire quelque chose d’un peu
          plus compliqué peut-être. Au lieu d’une instruction « Si », tu voulais travailler
          avec quelque chose comme une image ou un son sur un ordinateur.
      3:
        text: 'Un ordinateur ne connaît que le binaire, mais une image n''est pas
          binaire, ce n’est pas des uns et des zéros, alors comment fais-tu cela ?
          Voici un exemple : Tu as cette belle photo. Maintenant, une image est essentiellement
          une forme d''information. Toutes les informations peuvent être encodées
          en binaire d’une façon ou d’une autre, il suffit de comprendre comment le
          faire.'
      4:
        text: Tu imagines que nous allons mettre une grille sur ce panda et pour chaque
          carré, nous allons décider si cette zone est plutôt noire ou plutôt blanche.
          Et puis, nous allons le colorier de cette façon. Maintenant, chaque cellule
          de la grille est noire ou blanche, puis nous disons que les carrés noirs
          sont des zéros (chiffre binaire) et les carrés blancs sont des uns, l'autre
          chiffre binaire. À la fin, tu te retrouves avec tout un tas de uns et de
          zéros. Voilà comment tu représentes cette image en binaire.
    C4_unplugged_forloops:
      1:
        text: Cette leçon s’appelle Jouer avec la «Boucle pour». Dans cette leçon,
          nous allons utiliser une ligne de numéros pour jouer à un jeu de dés. Chaque
          joueur va faire rouler les dés trois fois pour assigner une valeur initiale,
          une valeur d'arrêt et notre intervalle. À chaque tour, nous encerclons notre
          valeur de départ, et chaque valeur qui est le même nombre de pas en avant
          que la valeur de notre intervalle. Nous nous arrêtons d’encercler lorsque
          nous arriverons à notre valeur d'arrêt. La personne avec le plus haut score
          gagne !
      2:
        text: Les «Boucles pour» peuvent être très pratiques à plusieurs endroits
          et si un jour tu deviens météorologue, tu utiliseras des « Boucles pour
          » tout le temps. Salut, je suis Becky. Je travaille à EverPower Renewables
          comme météorologue du vent. Je prédis les vitesses des vents pour la région
          de la gorge du fleuve Columbia où la société possède des parcs éoliens.
      3:
        text: Nous essayons de comprendre les vents à venir afin de définir de combien
          de puissance nous disposons. Nous donnons cette information en temps réel
          aux négociants d’électricité. Ils achètent et vendent l’énergie sur la base
          de la quantité d’énergie que nous leur annonçons afin de s'assurer que le
          réseau électrique reste équilibré, que les lumières restent allumées et
          que nous maximisions la quantité d'énergie produite par nos parcs éoliens.
      4:
        text: Nous sommes au centre de contrôle national de EverPower Renewables ici
          à Portland, et c'est là où nous recevons les informations provenant de tous
          les parcs éoliens du pays. Aujourd’hui, même les ordinateurs les plus puissants
          ne peuvent pas simuler l'atmosphère partout. Dans les modèles de prévisions
          informatiques, nous avons ce que nous appelons une grille. Chaque point
          de la grille est une latitude et une longitude. Il faut calculer la physique
          et essayer de trouver la vitesse du vent, la température, la pression -
          ce genre de choses.
      5:
        text: Puisque ce sont des grilles plutôt grandes et que nous faisons cela
          à plusieurs endroits, nous faisons ces choses en boucle des millions et
          des millions de fois. Dans tout ce que je fais, j’utilise des «Boucles pour».
          Voici par exemple une « Boucles pour » juste là. Lorsque tu prévois le vent,
          il y a tellement de paramètres différents qui entrent en jeu, qu’il serait
          impossible pour un être humain de s'asseoir et de faire tous ces calculs.
          Il y a tant d’aspects différents qui ont une incidence sur ce qui se passe
          en ce qui concerne le vent, qu’il nous faut un modèle informatique afin
          de le prévoir.
    C4_unplugged_madlibs:
      1:
        text: Dans cette leçon, nous allons jouer à remplir un peu les vides. Tu as
          un modèle que tu peux remplir pour créer des histoires similaires qui ont
          des différences très amusantes.
      2:
        text: Dans cette leçon, nous avons aussi appris comment faire un modèle abstrait
          à partir de deux histoires qui ont déjà été créées. L’abstraction est l'art
          d'enlever les différences et les détails afin que tu puisses voir comment
          une solution peut fonctionner pour de nombreux problèmes différents. C’est
          très utile en informatique, car cela permet de créer des fonctions qui peuvent
          être utiles dans plusieurs situations différentes.
    C4_unplugged_parameters:
      1:
        text: Cette leçon s’appelle la Composition de chansons avec des paramètres.
          Nous allons écrire quelques chansons ici. Le refrain est parfois juste un
          peu différent chaque fois que tu le chantes. Tu te souviens de Le vieux
          Macdonald avait une ferme ? Le refrain est légèrement différent pour chaque
          animal. Et sur cette ferme, il avait une vache, i-a-i-a-o. Le petit changement
          dans chaque refrain peut être montré en utilisant quelque chose que nous
          appelons les «paramètres».
      2:
        text: Parfois, une fonction nécessite un paramètre. Un paramètre est un morceau
          supplémentaire d'information que tu peux donner à une fonction afin de le
          personnaliser pour un besoin particulier. Quand tu fais des crèmes glacées
          avec tes amis, tu utilises un processus semblable aux paramètres dans un
          programme informatique.
      3:
        text: Le disque de glace à la vanille peut être le même pour chaque coupe
          de glace, mais lorsque tu demandes à tes amis quelles sont les deux garnitures
          qu'ils aimeraient, tu peux obtenir plusieurs combinaisons différentes. La
          garniture est le nom de la fonction, mais chaque type de garniture est un
          paramètre. Les fonctions et les paramètres travaillent ensemble pour faire
          de grands logiciels et de grandes coupes de glaces également.
    C4_unplugged_variables:
      1:
        text: Cette leçon s'appelle les Variables en enveloppes. Nous allons apprendre
          comment construire des phrases lorsqu’il nous manque encore des éléments
          d'information. La plupart d'entre nous est déjà familiarisé avec l'idée
          de combler un vide. Nous le faisons lorsque nous mettons notre nom sur nos
          devoirs. Parfois, il y a plus d'un mot qui doit être rempli et dans ce cas,
          nous donnons à ce vide une étiquette afin de savoir où va tel ou tel élément
          d'information.
      2:
        text: Les variables sont des espaces réservés aux éléments d'information qui
          peuvent changer. En utilisant une variable pour les informations manquantes,
          nous pouvons continuer à travailler sur ce que nous faisons et laisser quelqu'un
          d'autre compléter les informations manquantes plus tard. Dans un logiciel,
          nous utilisons beaucoup les variables. Nous utilisons les variables comme
          espaces réservés aux noms, aux adresses e-mail et même au nom d’utilisateur.
          De cette façon, nous pouvons indiquer au programme que ces détails apparaîtront
          plus tard lorsque l’utilisateur les renseignera. Nous utilisons les variables
          tout le temps dans notre travail.
      3:
        text: Chaque fois que tu dois stocker un élément d'information pour plus tard,
          nous utilisons une variable. Disons que nous devons compter le nombre de
          fois où l'utilisateur a envoyé un message sur Twitter ou qu’il a «twitté»,
          ou gazouillé en français. Chaque fois que l'utilisateur envoie un message
          sur Twitter, nous allons ajouter 1 à ce nombre et chaque fois que l'utilisateur
          supprime l’un de ses «gazouillis» (pour utiliser un terme français), nous
          allons réduire ce nombre de 1. Chaque fois que nous devons savoir combien
          de fois l'utilisateur a gazouillé, nous regarderons seulement cette variable.
    C4_variables_artist:
      1:
        text: Une variable est un conteneur dans lequel tu peux stocker une valeur.
          Lorsque tu utilises cette variable dans un algorithme, elle ouvre le conteneur
          et examine la valeur à l'intérieur. Cela te permet d'écrire des algorithmes
          plus intelligents qui se comportent différemment en fonction de la valeur
          stockée dans la variable.
      2:
        text: Par exemple, si tu voulais écrire un algorithme permettant de dire «Joyeux
          Anniversaire, tu as 10 ans !» à mon petit frère, c'est très bien maintenant,
          mais quand j’exécuterai l’algorithme l'année prochaine je voudrais lui dire,
          «Joyeux Anniversaire, tu as 11 ans !» Je pourrais créer une variable appelée
          «Âge» pour stocker l'âge de mon frère et écrire mon algorithme pour dire
          Joyeux Anniversaire, tu as « Âge » à la place. Comme la variable peut changer,
          chaque année, je peux mettre à jour la variable « Âge » égale à « Âge »
          plus 1.
      3:
        text: Dans ce puzzle, nous allons utiliser une variable qui définira la longueur
          de la ligne que notre artiste dessinera. Par la suite dans notre code, le
          bloc « Avancer » examinera cette variable «Longueur» pour voir à quelle
          valeur tu l’as réglée.
    C4_variables_playlab:
      1:
        text: Une variable est un conteneur dans lequel tu peux stocker une valeur.
          Lorsque tu utilises cette variable dans un algorithme, elle ouvre le conteneur
          et examine la valeur à l'intérieur. Cela te permet d'écrire des algorithmes
          plus intelligents qui se comportent différemment en fonction de la valeur
          stockée dans la variable.
      2:
        text: Maintenant, tu vas essayer le Labo de jeux où tu trouveras différents
          jeux et tu pourras modifier les valeurs des variables comme la vitesse,
          la hauteur, le score, afin de changer le jeu. Tu n’auras pas à changer l'algorithme
          du jeu pour changer la façon dont il joue, juste la variable.
      3:
        text: Dans le cadre de mon travail sur les livres chez Kindle et X-Ray, nous
          appliquons des variables de nombreuses manières différentes. Une façon d’utiliser
          une variable consiste à stocker les numéros de page d'un livre. Un utilisateur
          peut augmenter et diminuer la taille de la police sur une page. En fonction
          de la taille de la police, le nombre de pages du livre peut changer. Nous
          pouvons l’ajuster en stockant le nombre de pages dans la variable.
    infinity_playlab_events:
      1:
        text: 'Maintenant, nous allons apprendre quelque chose que tous les programmeurs
          de jeux utilisent tous les jours. On les appelle des événements. Un événement
          dit à ton programme d’écouter lorsque quelque chose se passe. Et puis, quand
          cela arrive, il exécute une action. Quelques exemples d''évènements sont:
          l''écoute des clics de souris, l’activation d’une touche fléchée du clavier
          ou un tapotement de l''écran.'
      2:
        text: Ici, nous allons faire monter Baymax pour toucher Hiro et redescendre
          pour toucher Raiponce lorsque le joueur utilise les flèches du clavier ou
          les boutons haut/bas. Nous allons utiliser le bloc « Quand flèche vers le
          haut » et lui attacher le bloc « Déplacer acteur vers le haut », donc lorsque
          le joueur appuie sur la flèche vers le haut du clavier, tout ce qui est
          attaché au bloc « Quand flèche vers le haut » est exécuté. Nous ferons la
          même chose pour faire descendre Baymax. Étape par étape, ton jeu devient
          plus interactif.
    infinity_playlab_intro:
      1:
        text: Alors dans quelle classes es-tu ? CE1. Seconde. CP. J'étais en quatrième
          quand j'ai appris à programmer. J'ai eu mon premier ordinateur quand j'étais
          en sixième. Ce qui m’amuse, c’est d’être capable de réparer les problèmes
          des gens. Tu peux t’exprimer, tu peux construire des choses à partir d'une
          idée.
      2:
        text: L'informatique est la base de beaucoup de choses que les professionnels
          et les étudiants à l’université vont faire pour les vingt ou trente prochaines
          années. J’aime programmer parce que j’aime aider les gens. J'ai l'occasion
          de construire quelque chose qui va simplifier la vie des gens. Je pense
          que c'est la chose que nous avons qui se rapproche le plus d’un super-pouvoir.
          Le démarrage est la partie la plus importante. Je suis moi-même un débutant
          et je veux que tu apprennes avec moi.
      3:
        text: Je suis John Vechey, je suis l'un des cofondateurs de PopCap Games.
          Nous faisons des jeux comme Plants vs. Zombies, Bejeweled et Peggle. L’important
          dans un jeu, ce n'est pas à quel point ton code est parfait ou à quel point
          ton art est parfait - c’est ce qu’on ressent en jouant et à quel point c’est
          amusant. Tu ne peux obtenir cette sensation qu’en l'essayant ou en le faisant;
          ou encore, en apprenant, en adaptant et en réitérant tes propres compétences
          à créer des jeux.
      4:
        text: As-tu un jeu vidéo préféré ? Eh bien, nous allons faire un pas vers
          la création de jeux - juste comme ça - à l'aide du Labo de jeux. Les bons
          jeux ont une histoire et chaque histoire présente des acteurs. Les acteurs
          font des choses comme parler, se déplacer et interagir. Peut-être même marquer
          des points selon les règles du jeu. Aujourd'hui, nous allons apprendre comment
          faire toutes ces choses, une par une, avec des personnages de Disney comme
          Anna, Elsa, Hiro, Baymax et Raiponce. Nous allons construire un jeu à partir
          de zéro qui peut être partagé et joué sur un téléphone.
      5:
        text: Ton écran est divisé en trois parties principales. Sur la gauche, il
          y a l'espace de jeu, où ton programme s'exécutera. Les instructions pour
          chaque niveau sont écrites ci-dessous. La zone centrale est la boîte à outils
          et chacun de ces blocs est un morceau de code. La zone blanche à droite
          est l'espace de travail, et c'est ici que nous allons construire notre programme.
      6:
        text: Pour commencer, tu devras lier tes blocs au bloc orange «Lors du lancement».
          Tu peux lier plusieurs blocs en les glissant jusqu'à ce que tu voies la
          ligne jaune, et ainsi, ils s'emboîteront. Dans ce premier puzzle, Hiro est
          Acteur 1 et Baymax est Acteur 2. Nous devons aider Hiro à rejoindre Baymax
          en tirant le bloc « Déplacer vers la droite » dehors et en le liant au bloc
          « Lors du lancement ». Lorsque tu as tes blocs en place, clique sur le bouton
          « Exécuter » pour voir ce que tu as programmé.
      7:
        text: Commence, et à la fin tu pourras créer ton propre jeu avec ces incroyables
          acteurs qui peuvent interagir, marquer des points, lancer des microbots,
          des cerises, des poêles, des étincelles et de la glace... et se faire disparaitre.
          Ça ne dépend que de toi !
    infinity_playlab_repeat_forever:
      1:
        text: Tu imagines si tu devais répéter quelque chose encore et toujours? Heureusement
          tu n’auras jamais à faire ça parce que les ordinateurs savent vraiment bien
          répéter les choses. C'est le bloc « Répéter à l’infini». Tout ce qui se
          trouve dans ce bloc sera effectué à l’infini tout au long du jeu.
      2:
        text: Alors si on voulait qu'un acteur fasse quelque chose de manière répétée,
          sans que le joueur ait à faire quoi que ce soit, nous placerions ces blocs
          à l’intérieur du bloc « Répéter à l’infini ». Dans le prochain puzzle ,
          notre objectif est d'aider Anna à monter et à descendre en permanence. Apprendre
          comment toutes les commandes « Répéter » fonctionnent te permettra d'économiser
          énormément de temps plus tard lorsque tu développeras ton propre jeu.
    tutorial_puzzle_challenge:
      1:
        text: Que veux-tu faire quand tu seras grande Olivia ? Devenir astronaute.
          Sais-tu ce qu’est un programmeur informatique ? Oui euh non. Hum, attends,
          quoi ? Je ne sais pas vraiment comment l'expliquer mais la programmation
          informatique est plutôt simple. C’est un ensemble d’instructions comme une
          recette; tu dois les suivre pas à pas pour obtenir le résultat souhaité.
      2:
        text: Je peux changer le nombre de pixels et la longueur de la ligne à l'aide
          de ce menu déroulant. C’était long comment déjà ? Tu peux revoir les instructions
          en regardant sous le bouton « Exécuter ». Ici j'ai utilisé le bloc « Avancer
          » et je vais sélectionner 100 pixels. Je peux supprimer un bloc en le faisant
          glisser dans la boîte à outils ou dans la poubelle. Remettons-le en place.
      3:
        text: Exécute le code en appuyant sur « Exécuter ». Eh bien, cela n’a pas
          fonctionné ! Je vais appuyer sur Réinitialiser et essayer de comprendre
          ce qui ne marche pas. Tu peux essayer un puzzle autant de fois que tu le
          souhaites et sauter des puzzles et y revenir plus tard. Assure-toi de faire
          de ton mieux et de ne pas abandonner. Ajoutons un autre « Avancer ». Cela
          ne fonctionne toujours pas. Je peux placer un bloc entre d’autres blocs.
      4:
        text: Nous allons prendre un bloc «Tourner» et le placer entre les blocs «Avancer».
          Tourner à gauche de 45 degrés. Exécutons-le à nouveau. Remise à zéro, exécution,
          génial ! Voici un autre puzzle. Parfois, on te donne un code de démarrage
          à compléter. Ici, je dois ajouter les longueurs et les degrés appropriés.
      5:
        text: Tu peux parfois supprimer accidentellement le code de démarrage. Que
          fais-tu alors ? Tu peux appuyer sur «Supprimer le puzzle» et tout recommencer.
          Je vais faire glisser ce pavé numérique dans les différentes zones de pixels.
          Sélectionne 100 pour les pixels, 45 pour les degrés et de nouveau 100 pour
          les pixels. Génial ! Voici l'abeille de Code Studio. J'ai besoin de déplacer
          l'abeille vers chaque fleur et recueillir du nectar.
      6:
        text: La première fleur est à trois blocs, alors j’ai besoin de trois « Avancer
          ». 1, 2, 3. Puis un bloc « Recueillir du nectar », puis un autre bloc «
          Recueillir du nectar ». Eh bien, cela n’a pas fonctionné ! Je vais placer
          un autre bloc « Avancer » entre « Recueillir du nectar » et «Exécuter» à
          nouveau. Youpi, ça marche ! Tu viens d'apprendre comment utiliser l’artiste
          de Code Studio et les puzzles des abeilles. Bonne chance pour le Défi du
          puzzle de Code Studio.
    unplug1:
      1:
        text: Que veux-tu faire quand tu seras grande Olivia ? Euh, un astronaute
          ! Sais-tu ce qu’est un programmeur informatique ? Oui, euh, non. Euh, quoi,
          quoi ? Je ne sais pas vraiment comment l'expliquer. Le programmation informatique
          est assez simple. C'est un ensemble d'instructions, comme une recette. Tu
          dois les suivre étape par étape pour obtenir le résultat souhaité.
      2:
        text: L’informatique est une façon d’avoir un impact sur le monde. Ce peut
          être des vidéos de musique, ce peut être des jeux, détecter si une personne
          est liée ou non à une autre personne. Trouver, tu sais, les amis des gens.
          Tu peux faire toutes sortes d'autres choses complètement folles qui sauvent
          vraiment des vies. Mais je pense que tu dois en avoir vraiment envie. Pour
          moi, c'est comme un pinceau. Je crois qu’une grande programmation n'est
          pas du tout différente d’un grand art.
      3:
        text: Lorsque j'ai enfin appris un peu de programmation, le mur blanc cachait
          un tas de portes à ouvrir, et bien sûr, en les ouvrant on trouve alors un
          autre couloir longé de portes. La programmation est facile et amusante.
          Tu peux faire tout ce que tu as en tête. Finalement, tu ouvres suffisamment
          de portes pour que la lumière puisse entrer. Pour moi, un programme fini
          est comme une structure remplie de lumière. Tous les coins sont éclairés.
          Le nombre de personnes que tu peux toucher et avec qui tu peux interagir
          est quelque chose que le monde n'a jamais rencontré auparavant.
      4:
        text: La première leçon de cette série porte sur ce qu’est l’informatique,
          sur ce que fait un informaticien et sur la façon dont tu peux devenir plus
          responsable lors de ton utilisation de la technologie. C'est une leçon très
          importante, mais elle comporte beaucoup de textes. À la fin, tu arriveras
          à faire ton propre encodage personnalisé à l'aide de tes initiales. C'est
          une activité amusante et c'est très encourageant parce que le binaire est
          une de ces choses qui a l’air très technique, mais une fois que tu le comprends,
          c'est comme si tu parlais une langue secrète.
    unplug2:
      1:
        text: La leçon sur la pensée computationnelle est destinée à t’apprendre comment
          prendre un gros problème difficile, et le décomposer en plusieurs problèmes
          plus simples. L'objectif de cette leçon est d'écrire une série d'instructions
          que quelqu'un peut suivre pour dessiner un des monstres inclus dans le plan
          de la leçon.
      2:
        text: 'Les élèves vont se répartir en groupes pour écrire des instructions,
          et ensuite les échanger avec un autre groupe qui devra dessiner le monstre.
          Les groupes vont écrire des instructions en utilisant les quatre étapes
          de la pensée computationnelle : la décomposition, l’emplacement du modèle,
          l’abstraction et les algorithmes.'
      3:
        text: Les premiers groupes décomposeront la tâche - ce qui signifie faire
          un plan du jeu. Ensuite, ils rechercheront des modèles de monstres dans
          le catalogue. Quand ils tombent sur des différences entre les monstres,
          ils font abstraction ou suppriment ces détails. Par exemple, un monstre
          dans le catalogue a des yeux de Vegitas et un autre a des yeux de Spritem.
          Mais ils ont tous les deux des yeux, donc nous pouvons écrire une ligne
          disant que le monstre a les yeux vides.
      4:
        text: Alors les élèves pourront écrire une série d'instructions, appelée un
          algorithme, qui énumère les parties du corps des monstres - en laissant
          des vides en ce qui concerne les différents styles. C'est la série d'instructions,
          qu'ils vont passer à d'autres élèves afin de recréer leur propre monstre.
    unplug3:
      1:
        text: Dans la programmation sur papier millimétré, nous expliquons comment
          fonctionne le code en essayant d'aider les gens à recréer des dessins uniquement
          à l’aide de flèches et de gribouillages. La personne reçoit un petit dessin
          sur du papier millimétré et elle doit le réaliser en utilisant seulement
          des flèches précises et en essayant de décrire comment recréer ce dessin.
      2:
        text: 'Dans cette activité, les seuls symboles que tu peux utiliser sont les
          suivants : avancer d’un carré, reculer d’un carré, monter d’un carré, descendre
          d’un carré, changer la couleur suivante et remplir le carré avec de la couleur.
          Dès que nous aurons codé ça, nous pouvons le transmettre à une autre personne
          qui pourra lire le code et essayer de recréer l''image.'
    unplug4:
      1:
        text: Dans la programmation sur papier millimétré, nous expliquons comment
          fonctionne le code en essayant d'aider les gens à recréer des dessins uniquement
          à l’aide de flèches et de gribouillages. La personne reçoit un petit dessin
          sur du papier millimétré et elle doit le réaliser en utilisant seulement
          des flèches précises et en essayant de décrire comment recréer ce dessin.
      2:
        text: Dans la seconde moitié de l'activité, nous demandons aux élèves de combien
          de façons différentes ils peuvent plier un morceau de papier pour créer
          seize rectangles identiques. Ensuite vous discuterez de la façon dont plusieurs
          solutions peuvent mener au même résultat final, et pourquoi certaines solutions
          sont meilleures dans certaines situations.
    unplug5:
      1:
        text: Dans la programmation sur papier millimétré, nous expliquons comment
          fonctionne le code en essayant d'aider les gens à recréer des dessins uniquement
          à l’aide de flèches et de gribouillages. La personne reçoit un petit dessin
          sur du papier millimétré et elle doit le réaliser en utilisant seulement
          des flèches précises et en essayant de décrire comment recréer ce dessin.
      2:
        text: Dans la seconde moitié de l'activité, nous demandons aux élèves de combien
          de façons différentes ils peuvent plier un morceau de papier pour créer
          seize rectangles identiques. Ensuite vous discuterez de la façon dont plusieurs
          solutions peuvent mener au même résultat final, et pourquoi certaines solutions
          sont meilleures dans certaines situations.
    unplug6:
      1:
        text: Cette activité s’appelle coder avec des cartes et s’avère formidable
          pour tous les âges. Comme tu l’as appris avec les instructions «Si» dans
          les leçons précédentes avec Blockly, les instructions « Si » détiennent
          une partie que tu dois évaluer afin de savoir si c'est vrai ou faux. C'est
          l’instruction conditionnelle, et elle peut être utilisée de plusieurs manières
          différentes.
      2:
        text: Nous en profitons en créant des programmes sur papier que tu exécutes
          à l'aide d'un tirage au sort de cartes à jouer. Tu pourrais avoir une instruction
          « Si » qui dit quelque chose comme, si la carte que tu tires est supérieure
          à 8, tu obtiens un point. Autrement, ton adversaire gagne un point. Tu peux
          rendre le jeu aussi simple ou aussi compliqué que tu le souhaites.
    unplug7:
      1:
        text: Par exemple, quand tu recherches les paroles d'une chanson, en général
          le refrain est présenté au tout début et ensuite pour le reste de la chanson,
          tu dois y revenir après chaque couplet. Voilà le parfait exemple d’une fonction.
      2:
        text: Dans cette leçon, nous définissons le refrain au début de notre chanson
          et puis nous chantons notre chanson - nous remarquons que la classe ne chante
          pas le mot «refrain», mais plutôt, les chanteurs reviennent automatiquement
          en haut de la page où le refrain à été défini, et le chante. Nous utilisons
          cela comme une excellente introduction à la façon de comprendre ce que fait
          un programme lorsqu'il définit et appelle une fonction.
      3:
        text: Nous utilisons des chansons connues, dont le vieux Macdonald, pour parler
          de la façon dont un refrain est appelé encore et encore, et comment un refrain
          peut parfois être modifier. Lorsque tu as une chanson comme le vieux Macdonald,
          où certains mots changent, c'est un endroit idéal pour introduire l'idée
          de paramètres. C’est introduire certains mots pour envoyer des informations
          supplémentaires à ta fonction. Lorsque tu es sûr que tout le monde comprend,
          tu peux utiliser tes propres chansons familières et les décomposer toi-même.
          Vois si tu trouves la solution.
    unplug8:
      1:
        text: Notre leçon sur l'abstraction utilise le concept familier du jeu Mad
          Libs (histoire à trous), où tu insères essentiellement un vide dans une
          histoire, qui peut être rempli par beaucoup de mots différents. Nous prenons
          cette idée, mettons les enfants au défi de venir avec leurs propres mots
          pour leurs propres histoires, et expliquons vraiment la notion d'abstraction.
      2:
        text: Il s'agit de fonctions et de la façon dont tu peux utiliser une fonction.
          Comme dans la chanson le vieux Macdonald, où tu as une structure pour ton
          refrain, mais tu as une petite chose qui change et tu fais abstraction de
          cette petite chose qui change, car tu peux la remplir chaque fois avec tes
          propres mots. Mais parfois, tu as trois mots qui changent et alors tu les
          remplis avec trois paramètres, c'est toujours très utile.
      3:
        text: Tu peux avoir une fonction qui gère beaucoup de problèmes différents.
          Souvent, des personnes vont écrire des fonctions distinctes pour tous ces
          problèmes, ne réalisant pas qu’il y a seulement une petite différence. Si
          ces personnes pouvaient juste trouver un moyen de gérer cette petite différence,
          elles pourraient simplement réutiliser une fonction encore et encore, au
          lieu d’avoir 14 fonctions différentes.
    unplug9:
      1:
        text: La programmation de relais est une leçon très amusante qui permet de
          comprendre plus que l’informatique. Parfois, tout le monde devient un peu
          nerveux et tu veux les aider à s’activer. C’est une excellente façon d'ajouter
          un peu d’excitation à l'informatique.
      2:
        text: Tu divises tout le monde en deux groupes et ils se mettent à la queue-leu-leu
          pour jouer à une course de style relais. La première personne de chaque
          groupe court vers l'autre côté de la salle où se trouve un dessin sur papier
          millimétré et une feuille de papier blanc qui attend le coureur. Le coureur
          écrit la première étape pour créer cette image, retourne en courant vers
          sa file et touche le prochain joueur qui court écrire l’étape suivante.
      3:
        text: C’est un excellent moyen de faire passer l'idée de débogage, de devoir
          relire ton propre travail et de vérifier le travail que les autres ont fait
          avant toi. Tu comprendras rapidement à quel point il est important de faire
          un codage soigné lorsque toute une équipe dépend de toi.
    unplug10:
      1:
        text: Cette activité explique de manière simple comment l’Internet fonctionne.
          Nous expliquons toute la terminologie de façon simple, afin que les élèves
          puissent simuler la transmission de messages, comme un e-mail.
      2:
        text: Les élèves transmettront les messages tout en faisant semblant d'être
          un des trois modes de transmission. L’Internet sans fil, ADSL ou fibre optique.
          Les étudiants qui représentent l’Internet sans fil devront porter le message
          qu'ils transmettent sur leur tête, car le wifi est le moyen de transmission
          qui est le plus susceptible de laisser tomber certaines informations.
      3:
        text: Les élèves faisant semblant d'être l’ADSL ou le câble porteront le message
          sur le dos de leur main, où ils sont légèrement moins susceptibles de laisser
          tomber des informations. Et les élèves représentant la fibre optique les
          transporteront avec les deux mains. Cette activité est une excellente façon
          de comprendre quelque chose que beaucoup d'entre nous utilisent tous les
          jours.
    unplug11:
      1:
        text: Alors maintenant, il est temps de prendre du recul et d’avoir une vue
          aérienne de tout ce que tu as fait au cours de ces dix-neuf dernières leçons.
          C’est une excellente occasion d’annoncer aux élèves que ce qu'ils ont créé
          est formidable. Lors de ces leçons, les élèves en ont appris plus sur l’informatique
          que ce que la plupart des adultes connaissent.
      2:
        text: Discutez en tant que classe ou en petits groupes de leurs leçons préférées.
          Lorsqu’on analyse tout ce qu’on a appris, c'est là que la créativité des
          élèves ressort vraiment. Divisez les élèves en groupes et faites-leur créer
          leur propre leçon débranchée. Assignez un concept-clé à chaque groupe, comme
          les fonctions ou les algorithmes, et gardez beaucoup de matériel de bricolage
          sous la main pour qu’ils puissent l’utiliser. Chaque groupe devrait présenter
          sa nouvelle activité débranchée, ou une journée entière pourrait être consacrée
          à faire les activités créées par les élèves.
      3:
        text: Nous tous ici chez Code.org, nous espérons que tu t’es vraiment beaucoup
          amusé lors de ce cours. Si ton rêve est de créer la meilleure nouvelle application,
          d’utiliser la programmation pour aider à guérir des maladies, ou simplement
          d’être un programmateur stellaire, ce cours a été la première étape dans
          la réalisation de ce rêve.
    starwars_intro:
      1:
        text: 'Salut, je suis Kathleen Kennedy et je suis la productrice de Star Wars
          : Le réveil de la force. Aujourd’hui tu vas travailler avec une de nos stars,
          BB-8. BB-8 est un droïde sphérique. Tout ce qu''il fait et tous les mouvements
          qu''il fait sont contrôlés par un logiciel informatique. L’informatique
          a un impact sur toutes les industries, du marketing aux soins de santé et
          au cinéma. En fait, des centaines d''ingénieurs informaticiens ont travaillé
          ensemble pour faire un film comme Le Réveil de la Force.'
      2:
        text: Salut je suis Rachel Rose, je suis ingénieur senior R & D chez ILM,
          et je dirige l'équipe d’animation et de développement des créatures. Dans
          Le Réveil de la Force, je suis chargée d'aider les artistes à développer
          des équipements mobiles qui forment des parties du personnage et qui permettent
          de le rendre crédible dans une galaxie très lointaine.
      3:
        text: Dans la prochaine heure, nous allons construire notre propre jeu Star
          Wars. Nous t’enseignerons les concepts de base de la programmation. La programmation
          se fait habituellement avec du texte, mais ici, nous allons utiliser des
          blocs à faire glisser et à déposer pour écrire nos programmes. Mais en fait,
          tu crées toujours du code. Après avoir essayé les bases avec des blocs,
          nous te basculerons vers JavaScript, un des langages de programmation le
          plus populaire sur le Web.
      4:
        text: Pour commencer, nous allons travailler avec Rey afin de programmer BB-8
          pour qu’il aille récupérer tous les morceaux de ferraille. Ton écran est
          divisé en trois parties. Sur la gauche, il y a l'espace de jeu Star Wars
          où ton code s'exécutera. Les instructions pour chaque niveau sont écrites
          sous l’espace de jeu.
      5:
        text: La zone du milieu est la boîte à outils, et chacun de ces blocs est
          une action que BB-8 peut comprendre.
      6:
        text: L'espace blanc à droite est appelé l'espace de travail et c'est là que
          nous allons construire notre programme.
      7:
        text: Si je fais glisser le bloc « Se déplacer vers la gauche(); » dans notre
          espace de travail et appuie sur Démarrer, que se passe-t-il ? BB-8 se déplace
          à gauche d’un bloc sur la grille.
      8:
        text: Et si je veux que BB-8 fasse quelque chose après le bloc « Se déplacer
          vers la gauche();» ? Je peux ajouter un autre bloc à notre programme. Je
          vais choisir le bloc « Se déplacer vers le haut(); » et je vais le glisser
          sous mon bloc « Se déplacer vers la gauche(); » jusqu'à ce que le surlignage
          apparaisse. Puis je le dépose et les deux blocs s’emboîteront.
      9:
        text: Lorsque j'appuie à nouveau sur Démarrer, BB-8 effectue les commandes
          qui sont empilées de haut en bas dans notre espace de travail. Si jamais
          tu veux supprimer un bloc, il suffit de le retirer de la pile et de le refaire
          glisser dans la boîte à outils.
      10:
        text: Après avoir cliqué sur « Exécuter », tu peux toujours cliquer sur le
          bouton «Réinitialiser» pour faire revenir BB-8 au départ. Maintenant allons-y
          !
    starwars_typing:
      1:
        text: À l’intérieur des blocs que nous venons d’utiliser se trouve des commandes
          JavaScript. Aujourd’hui, JavaScript est le langage de programmation le plus
          populaire des développeurs professionnels. Les blocs sont une excellente
          façon de commencer l'apprentissage du code et, en fait, les meilleures universités
          comme Harvard et Berkeley commencent leur enseignement de cette façon. Mais
          lorsque les rudiments appris, les ingénieurs écrivent du code en tapant
          sur le clavier, car cela nous permet d'aller plus vite.
      2:
        text: Nous pouvons écrire des centaines de commandes sans avoir à les trouver
          dans la boîte à outils ou à les faire glisser. Comme tu es en train d’apprendre,
          écrire peut être moins rapide au début, mais nous voulions que tu essayes.
      3:
        text: Dans le coin supérieur droit de ton espace de travail, tu peux cliquer
          sur le bouton afficher le texte sur n'importe quel puzzle afin de passer
          des blocs à du code sous forme de texte.
      4:
        text: Dans la leçon suivante, nous te ferons commencer en mode saisie. Ici,
          tu peux toujours faire glisser le bloc de la boîte à outils, ou tu peux
          écrire le nom de la commande avec ton clavier. Quand tu commences à écrire,
          tu verras les noms des commandes possibles s’afficher dessous au fur et
          à mesure. Au lieu d’écrire tout le nom de la commande, tu peux sélectionner
          l'une d'entre elles pour aller plus vite. Dans mon travail, j'utilise cette
          fonctionnalité de saisie semi-automatique tout le temps quand j’écris du
          code.
      5:
        text: Lorsque tu écris du code, l’ordinateur exige que tu sois très précis.
          Tu dois orthographier et mettre en majuscules le nom de la commande très
          correctement, y compris les parenthèses et le point-virgule. Même avec une
          petite faute de frappe, BB-8 ne pourra pas comprendre le code et ne pourra
          donc pas se déplacer.
      6:
        text: Lorsque tu fais une erreur, l'éditeur la met en évidence afin que tu
          modifies le texte pour la réparer.
      7:
        text: Si tu es coincé, tu peux toujours recommencer avec le bouton Recommencer
          et tu peux rebasculer en mode bloc à tout moment en cliquant dans le coin
          supérieur droit. OK, essayons de faire une saisie ! Et si tu fais des erreurs,
          ne sois pas frustré. Tout le monde a besoin de quelques essais pour réussir.
    starwars_events:
      1:
        text: Bonjour, mon nom est Charita Carter. Je suis productrice créative senior
          ici à Walt Disney Imagineering. Je suis chargée de diriger les équipes qui
          produisent les attractions dont nos hôtes font l’expérience. Nous recherchons
          toujours des moyens d’améliorer et de faire vivre une meilleure expérience
          à nos clients et la technologie est au cœur de cette recherche.
      2:
        text: Félicitations, tu as réussi ! Tu as programmé BB-8. Maintenant, je pense
          que nous sommes prêts pour quelque chose de plus difficile. Allons-y. Maintenant
          que tu as appris les bases de la programmation, nous allons revenir en arrière,
          et construire ton propre jeu, avec en vedette R2-D2 et C-3PO.
      3:
        text: 'Pour faire un jeu, nous avons besoin d''apprendre quelque chose que
          les programmeurs de jeux utilisent tous les jours : cela s’appelle les événements.
          Les événements disent à ton programme d’écouter ou d’attendre que quelque
          chose se passe, et puis quand cela se passe, d’effectuer une action.'
      4:
        text: Quelques exemples d'évènements sont l'écoute des clics de souris, l’activation
          d’une touche fléchée du clavier ou un tapotement de l'écran.
      5:
        text: Ici nous allons faire monter R2-D2 pour qu’il remettre un message au
          pilote rebelle, et ensuite descendre vers l’autre pilote rebelle. Nous allons
          utiliser des événements pour qu’il se déplace. Lorsque le joueur utilise
          les flèches haut/bas du clavier ou les boutons haut/bas.
      6:
        text: Nous utilisons le bloc d'événement «Quand vers le haut()» et lui attachons
          le bloc «Monter()». Lorsque le joueur appuie sur la touche de la flèche
          vers le hautdu clavier, le code attaché au bloc « Quand vers le haut() »
          est exécuté. Et nous ferons la même chose pour faire descendre Baymax.
      7:
        text: Pour ce faire, nous allons utiliser une commande appelée « Quand vers
          le haut() ». Lorsque tu fais glisser la commande hors de la boîte à outils,
          tu verras qu'elle se commence et se termine par une parenthèse bouclée au
          lieu d'un point-virgule. Cela nous donne de l'espace pour mettre d’autres
          commandes au milieu. Toutes les commandes que nous mettons à l'intérieur
          de ces parenthèses seront exécutées lorsque le joueur appuie sur la flèche
          du haut du clavier.
      8:
        text: Nous voulons que R2-D2 monte alors mettons un bloc « Monter(); » à l'intérieur
          de la commande. Et nous ferons la même chose pour faire descendre R2-D2.
      9:
        text: Maintenant, au lieu d'écrire tout le code pour contrôler notre droïde
          à l'avance, nous pouvons laisser R2-D2 réagir aux événements «bouton pressé»
          pour le déplacer sur l'écran. Étape par étape, ton jeu devient plus interactif.
    starwars_congrats:
      1:
        text: Salut, mon nom est Alice et je dirige les équipes produits et ingénierie
          ici chez Code.org. J'ai travaillé sur ce tutoriel avec lequel tu joues en
          ce moment.
      2:
        text: Tu viens de terminer le dernier niveau. Félicitations ! Tu as appris
          tout ce qu'il faut savoir pour créer ton propre jeu Star Wars. Maintenant,
          il n’y a plus d'instructions, plus de puzzles à résoudre. Tu peux créer
          ton propre jeu et tu choisiras comment celui-ci va fonctionner. Une dernière
          chose, tu as déverrouillé de nouveaux sons et de nouvelles commandes pour
          faire encore plus de choses.
      3:
        text: "[élèves parlant] Donc nous avons fait un jeu où, essentiellement, tu
          obtiens des points lorsque tu attrapes des cochons globes. La subtilité
          est que chaque fois que tu attrapes un cochon globe un Stormtrooper apparaît.
          En fait, l'écran entier est rempli de cochons globes et quand tu en touches
          10 000, tu gagnes."
      4:
        text: "[élèves parlant] Nous avons fait un jeu où tu ne peux pas perdre et
          tout que tu tues te donne des points. Pour mon programme, j'ai inversé les
          clés afin que chaque fois que tu cliques sur monter, ton personnage descende,
          et quand tu vas à droite, ton personnage va à gauche. C'est vraiment difficile
          ! Parfois, tu obtiens juste un avantage, un avantage inéquitable si tu es
          le développeur du jeu. Est-ce que j’ai réussi ? Ouais !"
      5:
        text: Lorsque tu as terminé de créer ton jeu, choisis «Partager» pour obtenir
          un lien à partager avec tes amis, ou pour jouer à ton jeu sur ton téléphone.
          Amuse-toi bien!
    starwars_blocks_intro:
      1:
        text: 'Salut, je suis Kathleen Kennedy et je suis la productrice de Star Wars
          : Le réveil de la force. Aujourd’hui tu vas travailler avec une de nos stars,
          BB-8. BB-8 est un droïde sphérique. Tout ce qu''il fait et tous les mouvements
          qu''il fait sont contrôlés par un logiciel informatique. L’informatique
          a un impact sur toutes les industries, du marketing aux soins de santé et
          au cinéma. En fait, des centaines d''ingénieurs informaticiens ont travaillé
          ensemble pour faire un film comme Le Réveil de la Force.'
      2:
        text: Salut, je suis Rachel Rose. Je suis ingénieur senior R & D chez ILM
          et je dirige l'équipe d’animation et de développement des créatures. Dans
          Le Réveil de la Force, je suis chargée d’aider les artistes à développer
          des équipements mobiles qui forment des parties du personnage et qui permettent
          de le rendre crédible dans une galaxie très lointaine.
      3:
        text: Dans l'heure qui vient, nous allons construire notre propre jeu Star
          Wars qui t’apprendra les concepts de base de la programmation. La programmation
          se fait habituellement avec du texte, mais ici, nous allons utiliser des
          blocs à faire glisser et à déposer pour écrire nos programmes. Pour commencer,
          nous allons travailler avec Rey afin de programmer BB-8 pour qu’il aille
          récupérer tous les morceaux de ferraille.
      4:
        text: Ton écran est divisé en trois parties. Sur la gauche, il y a l'espace
          de jeu Star Wars où ton code s'exécutera. Les instructions pour chaque niveau
          sont écrites sous l’espace de jeu.
      5:
        text: La zone du milieu est la boîte à outils, et chacun de ces blocs est
          une action que BB-8 peut comprendre.
      6:
        text: L'espace blanc à droite est appelé l'espace de travail et c'est là que
          nous allons construire notre programme.
      7:
        text: Si je fais glisser le bloc « Se déplacer vers la gauche(); » dans notre
          espace de travail, que se passe-t-il ? BB-8 se déplace à gauche d’un bloc
          sur la grille.
      8:
        text: Et si je veux que BB-8 fasse quelque chose après le bloc « Se déplacer
          vers la gauche();» ? Je peux ajouter un autre bloc à notre programme. Je
          vais choisir le bloc « Se déplacer vers le haut(); » et je vais le glisser
          sous mon bloc « Se déplacer vers la gauche(); » jusqu'à ce que le surlignage
          apparaisse. Puis je le dépose et les deux blocs s’emboîteront. Lorsque j’appuie
          à nouveau sur Démarrer, BB-8 effectue les commandes qui sont empilées de
          haut en bas dans notre espace de travail.
      9:
        text: Si jamais tu veux supprimer un bloc, il suffit de le retirer de la pile
          et de le faire glisser dans la boîte à outils.
      10:
        text: Si tu cliques sur Démarrer, tu peux toujours cliquer sur le bouton Réinitialiser
          pour ramener BB-8 au départ. Maintenant allons-y !
    starwars_blocks_events:
      1:
        text: Bonjour, mon nom est Charita Carter. Je suis productrice créative senior
          ici à Walt Disney Imagineering. Je suis chargée de diriger les équipes qui
          produisent les attractions dont nos hôtes font l’expérience. Nous recherchons
          toujours des moyens d’améliorer et de faire vivre une meilleure expérience
          à nos clients et la technologie est au cœur de cette recherche.
      2:
        text: Félicitations, tu as réussi ! Tu as programmé BB-8. Maintenant, je pense
          que nous sommes prêts pour quelque chose de plus difficile. Allons-y. Maintenant
          que tu as appris les bases de la programmation, nous allons revenir en arrière,
          et construire ton propre jeu, avec en vedette R2-D2 et C-3PO.
      3:
        text: 'Pour faire un jeu, nous avons besoin d''apprendre quelque chose que
          les programmeurs de jeux utilisent tous les jours : cela s’appelle les événements.
          Les événements disent à ton programme d’écouter ou d’attendre que quelque
          chose se passe, et puis quand cela se passe, d’effectuer une action.'
      4:
        text: Quelques exemples d'évènements sont l'écoute des clics de souris, l’activation
          d’une touche fléchée du clavier ou un tapotement de l'écran.
      5:
        text: Ici nous allons faire monter R2-D2 pour qu’il remettre un message au
          pilote rebelle, et ensuite descendre vers l’autre pilote rebelle. Nous allons
          utiliser des événements pour qu’il se déplace. Lorsque le joueur utilise
          les flèches haut/bas du clavier ou les boutons haut/bas.
      6:
        text: Nous utilisons le bloc d'événement «Quand vers le haut()» et lui attachons
          le bloc «Monter()». Lorsque le joueur appuie sur la touche de la flèche
          vers le hautdu clavier, le code attaché au bloc « Quand vers le haut() »
          est exécuté. Et nous ferons la même chose pour faire descendre Baymax. Maintenant,
          au lieu d'écrire tout le code pour contrôler notre droïde à l'avance, nous
          pouvons laisser R2-D2 réagir aux événements «bouton pressé» pour le déplacer
          sur l'écran.
      7:
        text: Étape par étape, ton jeu devient plus interactif.
    starwars_blocks_congrats:
      1:
        text: Salut, mon nom est Alice et je dirige les équipes produits et ingénierie
          ici chez Code.org. J'ai travaillé sur ce tutoriel avec lequel tu joues en
          ce moment.
      2:
        text: Tu viens de terminer le dernier niveau. Félicitations ! Tu as appris
          tout ce qu'il faut savoir pour créer ton propre jeu Star Wars. Maintenant,
          il n’y a plus d'instructions, plus de puzzles à résoudre. Tu peux créer
          ton propre jeu et tu choisiras comment celui-ci va fonctionner. Une dernière
          chose, tu as déverrouillé de nouveaux sons et de nouvelles commandes pour
          faire encore plus de choses.
      3:
        text: "[élèves parlant] Donc nous avons fait un jeu où, essentiellement, tu
          obtiens des points lorsque tu attrapes des cochons globes. La subtilité
          est que chaque fois que tu attrapes un cochon globe un Stormtrooper apparaît.
          En fait, l'écran entier est rempli de cochons globes et quand tu en touches
          10 000, tu gagnes."
      4:
        text: "[élèves parlant] Nous avons fait un jeu où tu ne peux pas perdre et
          tout que tu tues te donne des points. Pour mon programme, j'ai inversé les
          clés afin que chaque fois que tu cliques sur monter, ton personnage descende,
          et quand tu vas à droite, ton personnage va à gauche. C'est vraiment difficile
          ! Parfois, tu obtiens juste un avantage, un avantage inéquitable si tu es
          le développeur du jeu. Est-ce que j’ai réussi ? Ouais !"
      5:
        text: Lorsque tu as terminé de créer ton jeu, choisis «Partager» pour obtenir
          un lien à partager avec tes amis, ou pour jouer à ton jeu sur ton téléphone.
          Amuse-toi bien!
    mc_intro:
      1:
        text: Mon nom est Jens Bergensten, mais je suis mieux connu sous le nom de
          Jeb. Je suis le développeur en chef de Minecraft, ici chez Mojang à Stockholm.
          Je pense que j'avais onze ou douze ans quand j'ai commencé à programmer
          parce que je voulais faire des jeux. Un ami de mon père m'a dit que pour
          faire des jeux, je devais apprendre à programmer. Voilà comment j'ai commencé.
          J'aime concevoir et imaginer l'architecture des jeux. C'est ce que j'aime
          vraiment à propos de Minecraft.
      2:
        text: Pendant l'heure qui vient, tu vas apprendre les bases de l'informatique
          en programmant les déplacements d'Alex ou de Steve dans un endroit simulé
          du monde de Minecraft.
      3:
        text: La programmation se fait traditionnellement avec du texte, mais aujourd'hui
          nous allons utiliser Blockly qui utilise des blocs visuels que tu peux glisser
          et déposer pour écrire des programmes. Mais en fait, tu crées du code Javascript.
      4:
        text: Les concepts que tu vas apprendre sont ceux que les programmeurs utilisent
          chaque jour et sont les fondamentaux de l'informatique. Chez Mojang, nous
          utilisons ces mêmes concepts pour faire fonctionner Minecraft.
      5:
        text: Avant de commencer, tu vas choisir ton personnage. Je vais choisir Alex.
          Construisons du code pour un programme qui lui permettra de se déplacer
          partout sur l'écran.
      6:
        text: Ton écran est divisé en trois parties principales. Sur la gauche, il
          y a l'espace de jeu Minecraft où ton programme s'exécutera. Les instructions
          pour chaque niveau sont écrites ci-dessous.
      7:
        text: 'Au milieu, la boîte à outils : chacun de ces blocs est une commande
          qui dirige les actions d''Alex.'
      8:
        text: La zone blanche à droite s’appelle l'espace de travail, et c'est ici
          que nous allons construire notre programme.
      9:
        text: Si nous glissons le bloc « Avancer ();» dans l'espace de travail et
          cliquons sur »Exécuter», que se passe-t-il ? Alex avance d'un espace sur
          la grille.
      10:
        text: Et que se passe-t-il si nous voulons faire quelque chose après qu'elle
          a avancé d'un espace ? Nous pouvons ajouter un autre bloc à notre programme.
          Je vais choisir le bloc « Tourner à droite de 90 degrés();» et je vais le
          faire glisser sous mon bloc « Avancer ();» jusqu'à ce que cette ligne orange
          apparaisse. Puis je le dépose et les deux blocs s’emboîteront. Lorsque nous
          appuyons à nouveau sur « Exécuter », Alex effectuera les commandes qui sont
          empilées du haut vers le bas sur notre espace de travail.
      11:
        text: Si jamais tu veux supprimer un bloc, il te suffit de le refaire glisser
          de la pile vers la boîte à outils.
      12:
        text: 'Pour annuler tes modifications et revenir à la façon dont le niveau
          a démarré, utilise le bouton Recommencer dans le coin supérieur droit de
          l''espace de travail. Une dernière chose : tu vois le petit triangle sur
          les blocs «Tourner» ? Chaque fois que tu vois ces triangles, cela signifie
          que tu peux choisir une option différente. Commençons à coder !'
    mc_repeat:
      1:
        text: Je suis Lydia Winters, directrice de la marque Mojang, et nous avons
          fait un petit jeu appelé Minecraft.
      2:
        text: Ce que je préfère faire dans Minecraft, c'est explorer. J'aime m'aventurer
          dans les grottes et voir ce que je peux y trouver. En tant que personne
          qui n'est pas un programmeur, je suis vraiment enthousiasmée à l’idée de
          suivre la leçon sur Minecraft et d’apprendre un peu de codage.
      3:
        text: Le dernier niveau avait besoin de beaucoup de blocs « Avancer (); ».
          Ce serait plus facile si nous pouvions juste dire à l'ordinateur d’exécuter
          la commande « Avancer (); » quatre ou cinq fois. Heureusement pour nous,
          les ordinateurs savent vraiment bien répéter les choses.
      4:
        text: Lors de la construction de Minecraft, nous utilisons des boucles « Répéter
          » pour placer tout le matériel initial afin de créer un monde nouveau. Ce
          sont des milliers et des milliers de blocs. Nous utilisons également des
          boucles pour faire des petites choses, par exemple pour faire bouger les
          pieds d’Alex lorsqu’elle se promène. Les boucles « Répéter » sont un élément
          puissant de la programmation.
      5:
        text: La nuit tombe, alors dans les deux prochains niveaux, nous allons construire
          une maison pour être en sécurité. Nous allons utiliser le bloc « Répéter
          » pour faire ça très facilement.
      6:
        text: Pour construire le mur de notre maison, nous pouvons soit dire à Alex
          d’« Avancer (); » et de placer des planches quatre fois, ou nous pouvons
          lui dire d’« Avancer (); » et de placer une planche, et ensuite prendre
          cette commande et utiliser le bloc «Répéter» pour qu'elle exécute l'action
          plusieurs fois.  Maintenant, nous allons cliquer sur le bloc « Répéter »
          et lui dire combien de fois nous voulons qu'il exécute cette action. Maintenant
          nous allons construire notre maison avant que la nuit tombe ! Amuse-toi.
    mc_if_statements:
      1:
        text: Maintenant, nous allons apprendre les instructions «Si». Les instructions
          « Si » sont un élément fondamental de l’apprentissage de la programmation.
          Elles aident un ordinateur à prendre des décisions.
      2:
        text: Tous les ordinateurs utilisent des instructions « Si », y compris mon
          téléphone. Par exemple, quand je déverrouille mon téléphone, il exécute
          un code qui dit que si j'entre correctement le mot de passe, alors il déverrouillera
          le téléphone. Dans le cas contraire, il affiche un message d'erreur.
      3:
        text: Tu peux utiliser des instructions «Si» dans ton code pour faire réagir
          Steve et Alice à ce qu'ils voient dans le monde. Par exemple, s'il y a un
          rocher en face d'eux, ils peuvent tourner à gauche. Ou tourner à droite
          s’ils courent vers un arbre.
      4:
        text: Dans ce cas, nous ne voulons pas tomber dans la lave. C’est facile de
          prévoir pour la lave. Nous pouvons la voir sur l'écran. Mais qu'en est-il
          de la lave que nous ne pouvons pas voir sous la pierre ?
      5:
        text: Après avoir extrait les pierres, nous devrons vérifier s’il y a de la
          lave à cet endroit avant d'avancer. S'il y a de la lave, nous voulons placer
          une pierre en face de notre personnage avant qu’il avance. De cette façon,
          nous pouvons passer en toute sécurité. Il faut encore extraire quelques
          pierres ! Et n'oubliez pas d'utiliser l’instruction «Si» pour faire attention
          où tu marches.
    mc_congrats_share:
      1:
        text: Félicitations ! Tu viens juste d'apprendre les blocs de construction
          de base de l'informatique.
      2:
        text: Maintenant, tu peux utiliser ces blocs pour construire ta propre création.
          Il n’y a plus d'instructions et plus de puzzles à résoudre. Tu peux construire
          tout ce que tu veux. Tu dois choisir.
      3:
        text: "[élèves parlant] C' est sur le point de se réaliser. Cisaillement.
          J'ai fait un L avec des torches. J'ai fait un A en planches de bouleau.
          Cela a fonctionné, cela a fonctionné. Nous avons construit une maison avec
          de la laine !"
      4:
        text: Lorsque tu as terminé ta création, sélectionne «Partager» pour obtenir
          un lien et partager tes créations avec tes amis. Amuse-toi bien!
    mc_congrats_no_share:
      1:
        text: Félicitations ! Tu viens juste d'apprendre les blocs de construction
          de base de l'informatique.
      2:
        text: Maintenant, tu peux utiliser ces blocs pour construire ta propre création.
          Il n’y a plus d'instructions et plus de puzzles à résoudre. Tu peux construire
          tout ce que tu veux. Tu dois choisir.
      3:
        text: "[élèves parlant] C' est sur le point de se réaliser. Cisaillement.
          J'ai fait un L avec des torches. J'ai fait un A en planches de bouleau.
          Cela a fonctionné, cela a fonctionné. Nous avons construit une maison avec
          de la laine !"
      4:
        text: Maintenant tu peux construire tout ce que tu veux. Amuse-toi bien!
    gumball_intro:
      1:
        text: Si tu souhaites faire ton propre jeu, c’est vraiment facile. Tu as simplement
          besoin de quelques rudiments de programmation et tu peux commencer à jouer
          à un jeu que tu as créé.
      2:
        text: As-tu un jeu vidéo préféré ? Nous allons franchir une étape vers la
          création de jeux, tout comme dans le Labo de jeux. Les bons jeux ont une
          histoire et chaque histoire présente des acteurs. Les acteurs qui font des
          choses comme parler, se déplacer et interagir. Peut-être même marquer des
          points selon les règles du jeu. Aujourd'hui, nous allons apprendre comment
          faire toutes ces choses une par une avec des acteurs amusants, et puis construire
          un jeu à partir de zéro qui peut être partagé et joué sur un téléphone.
      3:
        text: Aujourd'hui, nous allons apprendre comment faire toutes ces choses une
          par une avec des acteurs amusants, et puis construire un jeu à partir de
          zéro qui peut être partagé et joué sur un téléphone.
      4:
        text: Ton écran est divisé en trois parties principales. Sur la gauche, il
          y a l'espace de jeu où ton programme s'exécutera. Les instructions pour
          chaque niveau sont écrites ci-dessous.
      5:
        text: Cette zone centrale est la boîte à outils et chacun de ces blocs est
          un morceau de code.
      6:
        text: La zone blanche à droite s’appelle l'espace de travail, et c'est ici
          que nous allons construire notre programme.
      7:
        text: Pour commencer, tu devras lier tes blocs au bloc orange « Lors du lancement
          ». Tu peux lier plusieurs blocs en les glissant jusqu'à ce que tu voies
          la ligne jaune, et de cette façon, ils s'emboîteront.
      8:
        text: Dans ce premier puzzle, nous allons faire dire quelque chose aux acteurs
          en liant le bloc «Dire» au bloc « Lors du lancement » et en y écrivant ton
          message. Lorsque tes blocs sont en place, clique sur le bouton « Exécuter
          » pour voir ce que tu as programmé.
      9:
        text: Commence, et à la fin tu pourras créer ton propre jeu, avec toutes sortes
          de joueurs qui peuvent interagir, marquer des points, jeter des objets et
          se faire disparaitre. Ça ne dépend que de toi !
    gumball_events:
      1:
        text: Maintenant, nous allons apprendre quelque chose que tous les programmeurs
          de jeux utilisent tous les jours. On les appelle des événements. Un événement
          dit à ton programme d’écouter ou d’attendre que quelque chose se passe,
          et puis quand cela se passe, d’effectuer une action.
      2:
        text: Parmi les exemples d’événements figurent l'écoute d'un clic de souris
          ou d'une touche flèche vers en haut ou en bas du clavier, ou même un tapotement
          de l'écran.
      3:
        text: Ici, nous allons faire dire quelque chose à l'acteur lorsque le joueur
          clique dessus. Nous allons utiliser le bloc « Quand clic » et lui attacher
          le bloc «Dire». Lorsque le joueur clique, tous les blocs attachés à ce bloc
          seront exécutés.
      4:
        text: Il y a aussi des blocs « Quand flèche ». Si tu lies les blocs «Déplacer»
          à ces derniers, tu peux commencer à déplacer tes acteurs vers le haut, vers
          le bas, vers la gauche ou vers la droite avec les touches fléchées du clavier.
          Petit à petit, ton jeu devient plus interactif.
    gumball_repeat:
      1:
        text: Tu imagines si tu devais répéter quelque chose encore et toujours? Heureusement
          tu n’auras jamais à faire ça parce que les ordinateurs savent vraiment bien
          répéter les choses.
      2:
        text: C'est le bloc « Répéter à l’infini». Tout ce qui se trouve dans ce bloc
          sera effectué à l’infini tout au long du jeu. Si tu veux qu'un acteur fasse
          quelque chose de manière répétée, sans que le joueur ait à faire quoi que
          ce soit, nous allons placer ces blocs à l’intérieur du bloc «Répéter à l'infini».
      3:
        text: Dans le prochain puzzle, notre objectif est d'aider l'acteur à faire
          un travail en continu. Apprendre comment toutes les commandes « Répéter
          » fonctionnent te permettra d'économiser énormément de temps plus tard lorsque
          tu développeras ton propre jeu.
    iceage_intro:
      1:
        text: Si tu souhaites faire ton propre jeu, c’est vraiment facile. Tu as simplement
          besoin de quelques rudiments de programmation et tu peux commencer à jouer
          à un jeu que tu as créé.
      2:
        text: As-tu un jeu vidéo préféré ? Nous allons franchir une étape vers la
          création de jeux, tout comme dans le Labo de jeux. Les bons jeux ont une
          histoire et chaque histoire présente des acteurs. Les acteurs qui font des
          choses comme parler, se déplacer et interagir. Peut-être même marquer des
          points selon les règles du jeu. Aujourd'hui, nous allons apprendre comment
          faire toutes ces choses une par une avec des acteurs amusants, et puis construire
          un jeu à partir de zéro qui peut être partagé et joué sur un téléphone.
      3:
        text: Aujourd'hui, nous allons apprendre comment faire toutes ces choses une
          par une avec des acteurs amusants, et puis construire un jeu à partir de
          zéro qui peut être partagé et joué sur un téléphone.
      4:
        text: Ton écran est divisé en trois parties principales. Sur la gauche, il
          y a l'espace de jeu où ton programme s'exécutera. Les instructions pour
          chaque niveau sont écrites ci-dessous.
      5:
        text: Cette zone centrale est la boîte à outils et chacun de ces blocs est
          un morceau de code.
      6:
        text: La zone blanche à droite s’appelle l'espace de travail, et c'est ici
          que nous allons construire notre programme.
      7:
        text: Pour commencer, tu devras lier tes blocs au bloc orange « Lors du lancement
          ». Tu peux lier plusieurs blocs en les glissant jusqu'à ce que tu voies
          la ligne jaune, et de cette façon, ils s'emboîteront.
      8:
        text: Dans ce premier puzzle, nous allons faire dire quelque chose aux acteurs
          en liant le bloc «Dire» au bloc « Lors du lancement » et en y écrivant ton
          message. Lorsque tes blocs sont en place, clique sur le bouton « Exécuter
          » pour voir ce que tu as programmé.
      9:
        text: Commence, et à la fin tu pourras créer ton propre jeu, avec toutes sortes
          de joueurs qui peuvent interagir, marquer des points, jeter des objets et
          se faire disparaitre. Ça ne dépend que de toi !
    iceage_events:
      1:
        text: Maintenant, nous allons apprendre quelque chose que tous les programmeurs
          de jeux utilisent tous les jours. On les appelle des événements. Un événement
          dit à ton programme d’écouter ou d’attendre que quelque chose se passe,
          et puis quand cela se passe, d’effectuer une action.
      2:
        text: Parmi les exemples d’événements figurent l'écoute d'un clic de souris
          ou d'une touche flèche vers en haut ou en bas du clavier, ou même un tapotement
          de l'écran.
      3:
        text: Ici, nous allons faire dire quelque chose à l'acteur lorsque le joueur
          clique dessus. Nous allons utiliser le bloc « Quand clic » et lui attacher
          le bloc «Dire». Lorsque le joueur clique, tous les blocs attachés à ce bloc
          seront exécutés.
      4:
        text: Il y a aussi des blocs « Quand flèche ». Si tu lies les blocs «Déplacer»
          à ces derniers, tu peux commencer à déplacer tes acteurs vers le haut, vers
          le bas, vers la gauche ou vers la droite avec les touches fléchées du clavier.
          Petit à petit, ton jeu devient plus interactif.
    iceage_repeat:
      1:
        text: Tu imagines si tu devais répéter quelque chose encore et toujours? Heureusement
          tu n’auras jamais à faire ça parce que les ordinateurs savent vraiment bien
          répéter les choses.
      2:
        text: C'est le bloc « Répéter à l’infini». Tout ce qui se trouve dans ce bloc
          sera effectué à l’infini tout au long du jeu. Si tu veux qu'un acteur fasse
          quelque chose de manière répétée, sans que le joueur ait à faire quoi que
          ce soit, nous allons placer ces blocs à l’intérieur du bloc «Répéter à l'infini».
      3:
        text: Dans le prochain puzzle, notre objectif est d'aider l'acteur à faire
          un travail en continu. Apprendre comment toutes les commandes « Répéter
          » fonctionnent te permettra d'économiser énormément de temps plus tard lorsque
          tu développeras ton propre jeu.
    mc_2016_intro:
      1:
        text: Bonjour, je suis Jens, concepteur créatif en chef de Minecraft. Dans
          l'heure à venir, vous allez créer votre propre jeu Minecraft. Cet écran
          ressemble à Minecraft, mais le monde s'est arrêté. Les moutons sont immobiles,
          les poulets ne pondent pas et les zombies restent sur place. À vous d'ajouter
          le code qui anime le monde de Minecraft.
      2:
        text: 'My name is Melissa and I am a user researcher at Minecraft. What I''m
          really interested in is how people think and interact with technology and
          so this job is the perfect job for me to put together the computer engineering
          with the psychology: la façon dont les gens pensent et se comportent.'
      3:
        text: Votre écran est divisé en trois grandes sections. 1) À gauche, l'aire
          de jeu Minecraft. Pour l'instant, le monde est immobile, mais on va arranger
          ça avec du code.
      4:
        text: 2) Au milieu, la boîte à outils. Chacun de ces blocs est une commande
          que les poulets, moutons, etc. comprennent.
      5:
        text: '3) À droite, l''espace de travail : c''est là que nous allons créer
          notre programme.'
      6:
        text: Si vous oubliez quoi faire, les instructions de chaque niveau sont en
          haut.
      7:
        text: Commençons par programmer un poulet. On glisse la commande « avancer »
          dans l'espace de travail. Quand je choisis « Exécuter », le poulet avance
          d'un pas. Pour aller plus loin, je glisse un autre bloc « avancer » sous
          le premier jusqu'à ce qu'il apparaisse en surbrillance. Je le lâche et les
          deux blocs s'ancrent l'un à l'autre. Si je choisis à nouveau « Exécuter »,
          le poulet avance de deux pas.
      8:
        text: Si vous avez besoin de supprimer un bloc, retirez-le de la pile et remettez-le
          dans la boîte à outils.
      9:
        text: Après avoir choisi « Exécuter », le bouton « Réinitialiser » vous permet
          de tout recommencer. À vous de créer votre version de Minecraft. Amusez-vous
          bien !
    mc_2016_loops:
      1:
        text: Bonjour, je m'appelle Lisa. Je suis développeuse logicielle pour Minecraft
          et je m'occupe de certains animaux et ennemis du jeu. J'ai notamment travaillé
          sur l'ocelot et sur le mécanisme qui permet de l'apprivoiser en lui donnant
          du poisson.
      2:
        text: Nous les humains, on s'ennuie quand il faut faire la même chose encore
          et encore. L'avantage des ordinateurs, c'est qu'ils peuvent faire la même
          chose des millions voire des milliards de fois sans se lasser. Cette répétition
          est appelée boucle ; chaque créature de Minecraft en utilise.
      3:
        text: Avant ça, notre poulet a avancé et puis s'est arrêté. Dans Minecraft,
          ils se promènent tout le temps. Utilisons une boucle « faire à l'infini »
          de notre boîte à outils pour que là aussi, les poulets se déplacent tout
          le temps. Les boucles font gagner énormément de temps et ouvrent plein de
          possibilités pour créer votre version de Minecraft.
    mc_2016_events:
      1:
        text: Dans le prochain niveau, vous pouvez incarner Steve ou Alex. Appuyez
          sur les flèches du clavier pour aller vers le haut, le bas, la gauche ou
          la droite. Vous pouvez ainsi aller où vous voulez dans le niveau. Pour utiliser
          une créature, marchez vers elle, tournez-vous face à elle et appuyez sur
          la barre d'espace.
      2:
        text: Avec un écran tactile, balayez vers le haut, le bas, la gauche ou la
          droite pour vous déplacer, puis touchez l'aire de jeu pour utiliser l'objet
          devant vous.
      3:
        text: Mais que se passe-t-il ensuite ? Les moutons lâchent de la laine quand
          on les tond, les vaches fuient quand on les frappe et les creepers explosent
          quand on s'approche. Ces réactions sont dues à ce qu'on appelle des événements,
          qui disent au programme d'écouter (attendre) que quelque chose se passe
          et d'effectuer une certaine action.
      4:
        text: Jusqu'ici, vous avez utilisé un événement. Le code de la case « après
          génération » se lance quand votre créature est créée ou au début de la partie.
          Dans les prochains niveaux, vous aurez d'autres cases pour des événements
          comme « si touché » quand vous touchez la créature, ou « après utilisation »
          quand vous l'utilisez. Si vous voulez que votre zombie disparaisse au lever
          du Soleil, indiquez-le dans la case « de jour ».
    mc_2016_spawn:
      1:
        text: Dans un jeu, générer veut dire ajouter quelque chose. Dans ce niveau,
          nous allons générer des zombies au coucher du Soleil. Pour cela, utilisons
          le bloc « de nuit ».
      2:
        text: Pour générer les zombies de nuit, nous ajoutons « générer zombie » sous
          la case « de nuit ». Dès qu'un zombie est généré, il exécute le code de
          sa case « après génération ». Amusez-vous bien à générer des zombies !
    mc_2016_congrats:
      1:
        text: Félicitations ! Vous savez utiliser les commandes informatiques pour
          donner vie au monde de Minecraft. À présent, c'est vous le développeur.
          Vous avez déverrouillé toutes les commandes et créatures. À vous de choisir
          ce qui va arriver.
      2:
        text: Une fois votre création terminée, choisissez Share (Partager) et envoyez
          le lien à vos amis ou utilisez-le pour jouer sur votre téléphone. Amusez-vous
          bien ! Je suis impatient de tester votre version de Minecraft.
    applab_intro_welcome:
      1: 
      2: 
      3: 
      4: 
      5: 
      6: 
      7: 
      8: 
      9:
        text: Dans tous les cas vous allez programmer en Javascript, le langage le
          plus utilisé sur internet. Chaque niveau a un objectif, instructions et
          une image afin de vous aider dans votre création.
      10:
        image: notes/applab_intro_welcome_10.png
        text: Si vous êtes bloqué, cliquez sur cette image pour voir une explication
          complète du niveau. Essayez d'abord de le faire tout seul.
      11:
        image: notes/applab_intro_welcome_11.png
        text: Quand vous avez finit votre objectif pour ce niveau cliquez sur "Finir"
          pour avancer. C'est tout ! Appuyez sur le bouton orange "continuer" pour
          allez au niveau suivant et commencez votre aventure avec App Lab !
    applab_intro_events:
      1:
        image: notes/applab_intro_events_1.png
      2:
        image: notes/applab_intro_events_2.png
      3:
        image: notes/applab_intro_events_3.png
      4:
        image: notes/applab_intro_events_4.png
      5:
        image: notes/applab_intro_events_5.png
      6:
        image: notes/applab_intro_events_6.png
      7:
        image: notes/applab_intro_events_7.png
      8:
        image: notes/applab_intro_events_8.png
      9:
        image: notes/applab_intro_events_9.png
    applab_intro_sounds:
      1:
        image: notes/applab_intro_sounds_1.png
      2:
        image: notes/applab_intro_sounds_2.png
      3:
        image: notes/applab_intro_sounds_3.png
      4:
        image: notes/applab_intro_sounds_4.png
      5:
        image: notes/applab_intro_sounds_5.png
      6:
        image: notes/applab_intro_sounds_6.png
      7:
        image: notes/applab_intro_sounds_7.png
      8:
        image: notes/applab_intro_sounds_8.png
      9:
        image: notes/applab_intro_sounds_9.png
    applab_intro_designmode:
      1:
        image: notes/applab_intro_designmode_1.png
      2:
        image: notes/applab_intro_designmode_2.png
      3:
        image: notes/applab_intro_designmode_3.png
      4:
        image: notes/applab_intro_designmode_4.png
      5:
        image: notes/applab_intro_designmode_5.png
      6: 
      7: 
      8: 
      9: 
      10: 
    mc_2017_agent_intro:
      1:
        text: 'Stacy: Stampy, Lizzy, Preston - merci de venir avec moi. Ce que je
          veux vous montrer est juste au dessus de ce plateau. Je pense que vous allez
          adorer!'
      2:
        text: Attendez une minute - il y a un trou sur la voie! (Aaaahhhhh)
      3:
        text: 'Tout le monde va bien? Stampy: Ah, je vois le problème. Regarde! Il
          y avait un trou dans la voie. Stacy: Vraiment Stampy? Lizzy: Peut-être qu''on
          doit assembler des blocs pour la réparer. Preston: Faisons-en une course.
          Le premier arrivé en haut gagne. Stacy: D''accord, à vos marques, prêts,
          partez! Ok, je vais juste prendre un peu de cette terre cuite. Attendez.
          Les amis, je ne peux pas creuser! Preston: Pareil. Lizzy: Je ne peux pas
          non plus. Stacy: Ok, c''est vraiment bizarre. Stampy, est-ce que tu peux
          creuser? Stampy: Je n''y arrive pas! Stacy: Ok, tout le monde reste calme.
          Stampy: Est-ce que le jeu est cassé? Stacy: Si c''est le cas, comment allons-nous
          le réparer? Lizzy: Aucune idée. Stampy: Est-ce que quelqu''un sait écrire
          du code pour Minecraft?'
      4:
        image: notes/mc_2017_agent_intro_4.png
        text: "(pouf) Preston: Qu'est-ce que c'est que ça? Stampy: Je n'en ai jamais
          vu avant. Lizzy: C'est trop mignon! Stacy: Est-ce que... est-ce qu'on peut
          l'apprivoiser? Preston: Ok, qu'est-ce qui se passe? Quelqu'un doit retourner
          dans le monde réel et réparer. Tous: Pas ça! Stacy: Pas moi (pfffff) Ok,
          j'y vais."
      5:
        image: notes/mc_2017_agent_intro_5.png
        text: Oh, d'accord, donc je suis maintenant dans le monde réel. Je vais voir
          si je peux trouver les bureaux de Minecraft.
      6:
        image: notes/mc_2017_agent_intro_6.png
        text: Mais je vais avoir besoin de votre aide. Commencez par suivre le tutoriel,
          commencer à apprendre à coder, et je vous retrouve après quelques niveaux,
          d'accord? Souhaitez-moi bonne chance! Je pense que c'est par là. Aie! Un
          cactus! Je vais bien!
      7:
        image: notes/mc_2017_agent_intro_7.png
        text: Pour terminer le défi de l'Heure de Code, vous allez devoir coder pour
          programmer l'agent. Vous allez travailler avec l'Agent pour supprimer les
          obstacles sur votre chemin, de manière à récolter les objets nécessaires
          à votre voyage. Seul l'Agent peut placer et casser des blocs, et vous seul
          pouvez récolter des objets. L'écran est divisé en trois parties principales.
          À gauche, vous trouvez Minecraft.
      8:
        image: notes/mc_2017_agent_intro_8.png
        text: La zone centrale est la boîte à outils avec les commandes que l'Agent
          peut comprendre.
      9:
        image: notes/mc_2017_agent_intro_9.png
        text: Et sur la droite se trouve l'espace de travail. C'est à cet endroit
          que vous allez empiler les commandes pour construire le programme contrôlant
          l'Agent.
      10:
        image: notes/mc_2017_agent_intro_10.png
        text: L'Agent peut avancer, tourner et activer des plaques par pression. Il
          peut aussi détruire des blocs et placer des blocs. Quand il place un bloc
          comme des rails de wagonnet, il les place en dessous de lui.
      11:
        image: notes/mc_2017_agent_intro_11.png
        text: Si vous oubliez quoi faire, les instructions de chaque niveau sont en
          haut.
      12:
        image: notes/mc_2017_agent_intro_12.png
        text: Si vous voulez recommencer, vous pouvez appuyer sur le bouton bleu réinitialiser
          pour tout remettre comme au début. Et si vous voulez supprimer un bloc de
          code, glissez-le de l'espace de travail vers la boîte à outils. N'oubliez
          pas d'appuyer sur démarrer pour que l'Agent se déplace. Alors allez-y et
          essayez ces quelques premiers niveaux. Bonne chance!
    mc_2017_repeat:
      1:
        image: notes/mc_2017_repeat_1.png
        text: 'Stampy: Je me demande ce que fait Stacy?'
      2:
        image: notes/mc_2017_repeat_2.png
        text: 'Stacy: Ouaah, je pense que je suis au bon endroit. C''est impressionnant!'
      3:
        image: notes/mc_2017_repeat_3.png
        text: C'est comme si j'étais de nouveau dans Minecraft! Bonjour. Comment vas-tu?
          Bonjour?
      4:
        image: notes/mc_2017_repeat_4.png
        text: 'Oh, il y a une plante grimpante. Tu ne fais rien, n''est-ce pas? Katie:
          Stacy? Stacy: Bonjour, Katie? Katie: Oui, bienvenue chez Minecraft!'
      5:
        image: notes/mc_2017_repeat_5.png
        text: 'Stacy: C''est incroyable. Donc tu travailles ici tous les jours comme
          développeur. Katie: Oui, c''est assez impressionnant. Je suis développeur
          dans l''équipe qui s''occupe de la place du marché de Minecraft. Stacy:
          Combien connais-tu de langages de programmation? Katie: Dans ma carrière,
          j''ai probablement travaillé avec plus d''une douzaine. Stacy: Une douzaine?
          Katie: Oui. Stacy: Donc maintenant, est-ce que tu connaîtrais des choses
          sur ce petit golem qui se fait appelé l''Agent? Katie: Nous utilisons l''Agent
          pour faire des choses que Steve et Alex ne peuvent pas faire, comme survoler
          la lave. Stacy: Super, je veux apprendre à coder, et ils veulent aussi apprendre
          à coder, alors quelle est l''une des premières choses à connaître quand
          on apprend?'
      6:
        image: notes/mc_2017_repeat_6.png
        text: 'Katie: Et bien, vous devez apprendre comment utiliser les boucles.
          Une boucle est ce que les développeurs écrivent pour donner des ordres à
          un ordinateur qui peuvent être exécuter encore et encore. Stacy: Compris,
          donc je pense que les niveaux suivant vont aborder le sujet, alors continuez
          et essayez les boucles.'
      7:
        image: notes/mc_2017_repeat_7.png
        text: Dans le prochain niveau, vous pouvez utiliser une boucle pour déplacer
          l'Agent le long du chemin. Glisse le bloc répéter dans l'espace de travail
          et place un bloc avancer plus à l'intérieur du bloc répéter. Ça signifie
          que l'ordinateur doit faire plusieurs fois de suite la même chose sans avoir
          à glisser un tas de blocs à l'intérieur de l'espace de travail. Vous pouvez
          choisir combien de répétitions effectuer en plaçant un nombre dans le bloc
          répéter.
      8:
        image: notes/mc_2017_repeat_8.png
        text: Vous pouvez aussi mettre des blocs tourner et plusieurs commandes à
          l'intérieur d'un bloc répéter, mais pour le moment, essayez d'utiliser répéter
          pour faire avancer l'Agent de quelques pas. Rappelez-vous, si vous êtes
          coincés sur un puzzle, vous pouvez toujours utiliser le bouton bleu Réinitialiser
          et recommencer.
      9:
        image: notes/mc_2017_repeat_9.png
        text: 'Si vous pensez avoir un travail aussi cool que Katie, allez-y et cliquez
          sur le bouton montrer le code quand vous finissez chaque niveau. Cela va
          vous montrer le code Javascript que quelqu''un comme Katie utilise quand
          elle programme Minecraft. Katie: Oui, bonne chance à tous!'
    mc_2017_functions:
      1:
        image: notes/mc_2017_functions_1.png
        text: 'Preston: Ce n''est pas pour frimer mais je suis plutôt bon en parkour.
          Lizzy: Dormons comme ça il fera jour quand Stacy reviendra.'
      2:
        image: notes/mc_2017_functions_2.png
        text: 'Stacy: Ok les amis, je reviens des bureaux de Minecraft, et je pense
          que je sais comment résoudre le problème que j''ai dans le jeu. Je pense
          que je peux utiliser une fonction. J''ouvre juste ceci.'
      3:
        image: notes/mc_2017_functions_3.png
        text: Alors une fonction est une liste spécifique d'instructions pour accomplir
          une certaine tâche, un peu comme une recette. Dans les niveaux suivants,
          vous aurez accès aux fonctions et vous pourrez les utiliser pour résoudre
          les puzzles.
      4:
        image: notes/mc_2017_functions_4.png
        text: Examinez le code dans la fonction quand celle-ci est dans l'espace de
          travail pour voir ce qu'elle fait.
      5:
        image: notes/mc_2017_functions_5.png
        text: Ensuite, trouvez le bloc avec ce nom dans la boîte à outils et glissez-le
          de la boîte à outils vers le bloc quand l'exécution commence.
      6:
        image: notes/mc_2017_functions_6.png
        text: Rappelez-vous, vous pouvez utiliser la même fonction à chaque fois que
          vous voulez exécuter la même série d'instructions pour faire quelque chose,
          comme construire un pont. Bonne chance, je sais que vous allez y arriver!
    mc_2017_congratulations:
      1:
        image: notes/mc_2017_congratulations_1.png
        text: 'Preston: Félicitations!'
      2:
        image: notes/mc_2017_congratulations_2.png
        text: 'Lizzy: Félicitations!'
      3:
        image: notes/mc_2017_congratulations_3.png
        text: 'Stampy: Félicitations, vous avez réussi!'
      4:
        image: notes/mc_2017_congratulations_4.png
        text: 'Stacy: Félicitations les amis, vous avez assuré! Et maintenant que
          vous avez terminé l''Heure de Code, vous pouvez commencer à coder dans Minecraft.
          Vous avez appris les boucles, les fonctions et ce que l''Agent peut faire.'
      5:
        image: notes/mc_2017_congratulations_5.png
        text: Maintenant, c'est le moment de jouer sur un niveau libre, où vous êtes
          le développeur. Utiliser le reste du temps pour écrire vos propres fonctions
          pour explorer, creuser et construire.
      6:
        image: notes/mc_2017_congratulations_6.png
        text: 'Vous pouvez prendre le code que vous avez écrit dans ce niveau pour
          l''utiliser dans votre monde Minecraft de Minecraft: Education Edition.
          Cliquez juste sur ''Finir'' et suivez les instructions pour avoir un lien
          à utiliser dans votre monde, pour continuer à coder avec l''Agent. Amusez-vous
          bien, et bon travail!'
      7:
        image: notes/mc_2017_congratulations_7.png
        text: 'Stacy: Et je suis de retour! Donc là les amis, c''est l''Agent! Laissez-moi
          vous montrer ce qu''il peut faire. Regardez, il le fait! Je lui ai dit de
          construire un escalier à partir de blocs de terre cuite, et maintenant nous
          pouvons l''utiliser pour sortir de là. Et en plus, il n''y a pas que des
          escaliers. Je peux dire à l''Agent de faire tout ce que je veux, et il le
          fera pour moi.'
      8:
        image: notes/mc_2017_congratulations_8.png
        text: 'Stampy: Comment tu as fait ça? Stacy: C''était facile en fait. J''ai
          juste utilisé du code!'
    csd_concept_how_computers_work:
      1:
        image: notes/csd_concept_how_computers_work_1.png
      2:
        image: notes/csd_concept_how_computers_work_2.png
    csd_concept_computer:
      1:
        image: notes/csd_concept_computer_1.png
      2:
        image: notes/csd_concept_computer_2.png
      3:
        image: notes/csd_concept_computer_3.png
      4:
        image: notes/csd_concept_computer_4.png
      5:
        image: notes/csd_concept_computer_5.png
      6:
        image: notes/csd_concept_computer_6.png
      7:
        image: notes/csd_concept_computer_7.png
      8: 
      9: 
      10: 
    csd_concept_circuits_logic:
      1: 
      2: 
      3: 
      4: 
      5: 
      6:
        image: notes/csd_concept_circuits_logic_6.png
      7:
        image: notes/csd_concept_circuits_logic_7.png
      8:
        image: notes/csd_concept_circuits_logic_8.png
      9:
        image: notes/csd_concept_circuits_logic_9.png
      10:
        image: notes/csd_concept_circuits_logic_10.png
      11:
        image: notes/csd_concept_circuits_logic_11.png
    csd_concept_memory_cpu_input_output:
      1:
        image: notes/csd_concept_memory_cpu_input_output_1.png
      2:
        image: notes/csd_concept_memory_cpu_input_output_2.png
      3:
        image: notes/csd_concept_memory_cpu_input_output_3.png
      4:
        image: notes/csd_concept_memory_cpu_input_output_4.png
      5:
        image: notes/csd_concept_memory_cpu_input_output_5.png
      6:
        image: notes/csd_concept_memory_cpu_input_output_6.png
      7:
        image: notes/csd_concept_memory_cpu_input_output_7.png
      8:
        image: notes/csd_concept_memory_cpu_input_output_8.png
      9:
        image: notes/csd_concept_memory_cpu_input_output_9.png
      10:
        image: notes/csd_concept_memory_cpu_input_output_10.png
      11:
        image: notes/csd_concept_memory_cpu_input_output_11.png
      12:
        image: notes/csd_concept_memory_cpu_input_output_12.png
    csd_concept_hardware_software:
      1:
        image: notes/csd_concept_hardware_software_1.png
        text: Bonjour, je m'appelle Erica Gomez et je suis directrice en ingénierie
          chez Amazon.com. Une des meilleures choses quand on travaille dans le secteur
          technologique, et chez Amazon en particulier, c'est que je peux amener ma
          chienne au travail tous les jours. Mon travail consiste à s'assurer que
          le logiciel sorte par la porte et son travail à elle est d'être étendue
          sous le bureau et de ronfler bruyamment.
      2:
        image: notes/csd_concept_hardware_software_2.png
        text: 'Mon nom est Jerome Holman, et je suis directeur de programme pour l''équipe
          Xbox, et mon travail est vraiment amusant : fondamentalement, c''est d''amener
          le matériel et le logiciel en même temps pour vous permettre d''accéder
          à tous les jeux que vous aimez sur votre Xbox.'
      3:
        image: notes/csd_concept_hardware_software_3.png
        text: Quand vous regardez à l'intérieur d'un ordinateur, vous voyez un tas
          de circuits, des composants, des fils, des haut-parleurs, des prises et
          toute sorte d'autres choses. C'est le matériel.
      4:
        image: notes/csd_concept_hardware_software_4.png
        text: Mais ce que vous ne pouvez pas voir, c'est le logiciel. Le logiciel
          est l'ensemble de tous les programmes, ou code, qui s'exécute sur cette
          machine. Le logiciel peut prendre toute sorte de forme, des applications
          et des jeux jusqu'aux pages internet et au logiciel de données scientifiques
          que j'utilise avec mon équipe à Amazon pour comprendre le comportement des
          clients.
      5:
        image: notes/csd_concept_hardware_software_5.png
        text: Mais alors, comment le matériel et le logiciel interagissent-ils? Commençons
          par regarder le processeur principal d'un ordinateur, ou CPU (Central Processing
          Unit).
      6:
        image: notes/csd_concept_hardware_software_6.png
        text: Le CPU est le composant maître qui contrôle toutes les autres parties
          de l'ordinateur. Un CPU a besoin d'exécuter différentes tâches, il est donc
          composé en interne de parties plus petites et plus simples pour réaliser
          chaque tâche spécifique. Il a des circuits dédiés aux maths simples et à
          la logique. Il a d'autres circuits qui envoient et reçoivent des informations
          vers et en provenance des autres composants de l'ordinateur.
      7:
        image: notes/csd_concept_hardware_software_7.png
        text: La vraie magie du CPU est comment il connaît les circuits à utiliser
          et quand les utiliser. Le processeur reçois des commandes simples qui lui
          disent quel circuit utiliser pour une tâche spécifique. Par exemple, une
          commande "add" (ajouter) ordonne au processeur d'utiliser un de ses circuits
          externes pour calculer un nouveau nombre. Ensuite, la commande "store" (ranger)
          ordonne au processeur d'utiliser un autre circuit pour enregistrer le résultat
          dans la mémoire.
      8:
        image: notes/csd_concept_hardware_software_8.png
        text: Comme pour les nombres, toutes ces commandes simples peuvent être représentées
          en binaire par des zéros et des uns ou des signaux électriques ouvert et
          fermé. Les commandes binaires sont rangées dans la mémoire et le processeur
          accède à ces commandes en séquence, l'une après l'autre. Cette séquence
          de commandes est en fait un programme informatique très simple.
      9:
        image: notes/csd_concept_hardware_software_9.png
        text: Le code binaire est la forme la plus basique de logiciel, et il contrôle
          le matériel dans un ordinateur. De nos jours, personne n'écrit plus de logiciel
          en binaire. Cela prendrait une éternité!
      10:
        image: notes/csd_concept_hardware_software_10.png
        text: De nos jours, le logiciel que nous écrivons ressemble plus à ça (Python),
          ou ça (Ruby), ou bien même à ça (Blockly). Ces langages de programmation
          vous permettent de saisir des commandes dans quelque chose de proche de
          l'anglais.
      11:
        image: notes/csd_concept_hardware_software_11.png
        text: Pour dessiner un rectangle à l'écran, vous n'avez besoin que d'une seule
          commande. Cette commande de haut niveau est transformée en centaines, voire
          en milliers, de commandes binaires plus simples que le processeur comprend.
          Le logiciel ordonne au processeur ce qu'il a à faire, mais quand vous écoutez
          de la musique en regardant une page web, et que vous chattez avec un ami,
          votre ordinateur exécute plusieurs logiciels en même temps.
      12:
        image: notes/csd_concept_hardware_software_12.png
        text: Comment ces logiciels arrivent-ils tous sur l'ordinateur, et comment
          le processeur arrive à tous les exécuter en même temps? Pour le comprendre,
          nous allons jeter un coup d’œil sur le système d'exploitation.
      13:
        image: notes/csd_concept_hardware_software_13.png
        text: Le système d'exploitation d'un ordinateur est le programme maître qui
          dirige la façon dont les logiciels utilisent le matériel dans l'ordinateur.
          Par exemple, j'ai participé à la création du système d'exploitation Windows
          qui s'exécute sur une majorité d'ordinateurs personnels.
      14:
        text: Le système d'exploitation est un programme avec des capacités spéciales
          qui lui permettent de contrôler les autres logiciels sur l'ordinateur. Il
          permet d'installer de nouveaux programmes en les chargeant dans la mémoire
          de l'ordinateur. Il décide quand un programme est exécuté par le processeur,
          et aussi si ce programme a accès aux périphériques d'entrées et de sorties
          de l'ordinateur. Et quand vous pensez que l'ordinateur exécute plusieurs
          programmes en même temps, en fait, c'est le système d'exploitation qui va
          basculer d'un programme à un autre, partageant l'utilisation du processeur
          en fractions de seconde.
      15:
        text: Dans tous les ordinateurs, il y a un logiciel de système d'exploitation
          qui contrôle le matériel de l'ordinateur.
      16:
        text: Le logiciel est une séquence de commandes faites de simple codes binaires,
          et ce code binaires est juste un flot de signaux électriques circulant dans
          des milliards de minuscules circuits.
      17:
        text: Les ordinateurs ont le potentiel de faire des tas de choses étonnantes.
          Mais ce qui rend l'ordinateur intelligent ou utile, c'est vous. Quand vous
          apprenez à coder, vous allez devoir définir le problème que vous voulez
          résoudre, et écrire le logiciel pour que cette idée devienne une réalité.
