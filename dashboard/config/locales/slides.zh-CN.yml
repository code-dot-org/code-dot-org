"zh":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: 欢迎来到你第一个小时的编程！让我们立刻开始吧。
      2:
        image: notes/hoc1_2.jpg
        text: 我们将使用Blockly，一个可视化编程语言。你只需要拖放块来进行编程。
      3:
        image: notes/hoc1_3.jpg
        text: 大多数代码都是通过打字输入的，但Blockly是可视的。每个块对应于一行"真正的"代码。
      4:
        image: notes/hoc1_4.jpg
        text: 你将会学习计算机科学的基础概念。这些概念广泛的应用于各个领域，从应用程序到控制火星车。
      5:
        image: notes/hoc1_5.jpg
        text: 一个程序是一组让计算机遵循的指令。
      6:
        image: notes/hoc1_6.jpg
        text: 您的第一个程序的目标是要让愤怒的小鸟通过一个迷宫去打绿色的猪。
      7:
        image: notes/hoc1_7.jpg
        text: 左边的迷宫是运行你的程序的地方。迷宫下面是每个谜题的说明。
      8:
        image: notes/hoc1_8.jpg
        text: 中间的工具栏里有愤怒的小鸟的命令。你将用他们来生成你的代码。
      9:
        image: notes/hoc1_9.jpg
        text: 在右边是你的工作区，你可以从工具栏里面把块拖到上面来编程。要删除一个块，将它拖到角落的垃圾箱里面。
      10:
        image: notes/hoc1_10.jpg
        text: 每个块对应一条命令。如果你把”向前移动“块拖到工作区，并按”运行程序“，这只小鸟将在迷宫里向前移动一步。
      11:
        image: notes/hoc1_11.jpg
        text: 需执行多个操作时，将多个块拖到您的工作区，并将他们连在一起。小鸟会从头到尾执行所有命令。
      12:
        image: notes/hoc1_12.jpg
        text: 如果你运行了一个程序，但是想要修改它再重试，按”重置“按钮。
      13:
        image: notes/hoc1_13.jpg
        text: 让我们去抓住那些猪!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: 你好，我叫 JR!每一辆赛车团队都需要计算机科学家来帮助其队伍赢得比赛。他们通过分析数据来帮助赛车跑得更快。
      2:
        image: notes/stage5_2.jpg
        text: 在下面的这些益智游戏中，你会扮演一名画家，你的任务就是在他们所到之处的后面画一条线。
      3:
        image: notes/stage5_3.jpg
        text: 该模块的意思是"向前移动 100 个像素。"像素是构成你屏幕画面的一个个小点。
      4:
        image: notes/stage5_4.jpg
        text: 这个模块的意思是"右转 90 度"。改代码会将你的艺术家在迷宫拼图块"转"相同的量。
      5:
        image: notes/stage5_5.jpg
        text: 选中任意模块上的箭头来改变游戏中艺术家转向的度数。试玩几局来熟悉这个新模块。
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: 你好，我是 Paola ！在接下来的益智游戏中，你将扮演一个准备平整土地开始播种的农夫。
      2:
        image: notes/stage9_2.jpg
        text: 你要帮助她移出所有的土堆和填平所有的洞。
      3:
        image: notes/stage9_3.jpg
        text: 新块从土堆上移走一铲土并填到洞里。
      4:
        image: notes/stage9_4.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
    flappy_intro:
      1:
        image: 标记/ flappy01.jpg
        text: 你好，我是凯蒂 ！计算机科学最令人兴奋的事情之一就是计算机程序可以互动。
      2:
        image: 标记/ flappy02.jpg
        text: 当有人在电脑或手机上点击或打字时，都会触发一个『事件』，由某些代码决定当『事件』发生时要做什么。
      3:
        image: 标记/ flappy03.jpg
        text: 例如，您可能有一个事件处理程序，说："当鼠标单击时播放声音"
      4:
        image: 标记/ flappy04.jpg
        text: 你听说过游戏 FlappyBird 吗?通过使用事件处理程序，我们要学习编程让 FlappyBird 变成我们自己自定义的版本 ！
      5:
        image: 标记/ flappy05.jpg
        text: 你将要写代码涉及拖放代表对计算机的命令块。引擎下，每个块是由真正的代码表示。
      6:
        image: 标记/ flappy06.jpg
        text: 如果你看看工作区中，有一些为您填写的绿色块-这些都是"事件处理程序"
      7:
        image: 标记/ flappy07.jpg
        text: 如果要让鸟在您单击鼠标时飞行，你可以通过将"飞行"块附加到适当的事件处理程序中，现在在你的游戏只要你点击鼠标，鸟将飞起来。
      8:
        image: 标记/ flappy08.jpg
        text: 在这项活动的每个拼图我们会介绍新类型的事件作为在工作区中，绿色块，您可以决定适当的块添加响应这些事件。
      9:
        image: 标记/ flappy09.jpg
        text: 当你看到一个下拉箭头像这样时，这意味着您可以更改的设置-像什么进屋落到地面时播放声音。
      10:
        image: 标记/ flappy10.jpg
        text: 在最后的谜题，你会能够创建自己的游戏和它分享给你的朋友。玩得愉快！
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: 你好，我是马克 ！让我们来学习循环。通过使用循环你可以让计算机将任何一组动作不停重复, 直至数千或甚至几十亿次。
      2:
        image: notes/hoc2_2.jpg
        text: 在这个谜题中，我们想要将这只鸟向前移动 5个空格从而到达那只猪。
      3:
        image: notes/hoc2_3.jpg
        text: 让我们使用新的”重复“块来帮我们走出迷宫。
      4:
        image: notes/hoc2_4.jpg
        text: 尝试不用5个”向前移动“块...
      5:
        image: notes/hoc2_5.jpg
        text: 我们可以在“重复”块里放入”向前移动“块，并且在上面写一个数字来告诉小鸟我们要重复多少次。
      6:
        image: notes/hoc2_6.jpg
        text: 这一点很重要： 你可以在"重复"块中放多个命令。
      7:
        image: notes/hoc2_7.jpg
        text: 试试看使用新的"重复"块吧！
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 你好，我是克里斯。在加盟迈阿密热之前，我在乔治亚理工学院学习计算机科学。让我们试试我们新的块，在"重复直到"块。
      2:
        image: notes/hoc3_2.jpg
        text: 如果我们不知道小鸟要走多少步才能到达猪呢？
      3:
        image: notes/hoc3_3.jpg
        text: 如果我们在”重复直到“块里放一个”向前移动“块，小鸟会向前移动知道它抓到猪（或者撞上一堵墙）。
      4:
        image: notes/hoc3_4.jpg
        text: 这一点很重要： 就像之前，我们可以在"重复直到"块里放多个块，所有这些块都会被重复。
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 你好，我是比尔！让我们来学习一个新的基本概念："判断"语句。计算机通过这个语句做决定。
      2:
        image: notes/hoc4_2.jpg
        text: 你每天都在使用"如果"语句。在你早上出门之前，你会想如果外面在下雨，我最好穿上我的夹克。
      3:
        image: notes/hoc4_3.jpg
        text: 我们可以让僵尸去检查左边是不是有路，而且如果他发现左边确实有路，我们就让他向左转。
      4:
        image: notes/hoc4_4.jpg
        text: 要编写这段代码，我们需要拖出一个"如果"块，并在里面放一个"左转"块。
      5:
        image: notes/hoc4_5.jpg
        text: 现在，如果我们在这段代码上面放一个"向前移动"的块，并且用一个"重复"块来包含住这段代码，每一次僵尸移动时候，他就会检查是否左边有路并且向左转。要做到每一步都进行这个检查，"重复"命令是关键。
      6:
        image: notes/hoc4_6.jpg
        text: 如果语句是计算机科学中非常重要的一种语句。我写的第一个程序是一个井字游戏，在里面，我使用了“如果”语句说，如果对方马上就要赢了，就在那个位置上打上自己的符号。
      7:
        image: notes/hoc4_7.jpg
        text: 学习如何使用"判断"块
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 你好，我是 Saloni。我用计算机科学来帮助解决健康和医学上的问题。让我们来学习如何使用 "如果-否则“ 模块。这个模块和"如果"模块类似，区别仅是在”如果“模块的结尾加上”否则”部分。
      2:
        image: notes/hoc5_2.jpg
        text: 如果我把”向前移动“块放在标注着”做“的地方，并且把”左转“块放在写着”否则“的地方，这表明僵尸将会在这两者之间做一个选择。如果前面有路，僵尸就会往前走，否则（意味着前面没有路），僵尸就会向左转。
      3:
        image: notes/hoc5_3.jpg
        text: 与“如果”模块类似，我们可以将“如果-否则”模块放在一个“循环”模块内，这样僵尸就不停的移动，“如果-否则”模块则不断的检查是否有其他地方可以拐弯。
      4:
        image: notes/hoc5_4.jpg
        text: 现在，让这些僵尸回老家吧！
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: If-else 语句描述在两个事件间的选择。让我们看看一个例子，与我们的好朋友松鼠Scrat一起使用if-else语句。
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: This block looks the same as the "if" block, but there's an extra part
          at the bottom that says "else". If I put a "move forward" block where it
          says "do" and a "turn left" block where it says "else", that means Scrat
          the squirrel will move forward if there's a path ahead. If there's not a
          path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: It's making a decision and doing one of the two actions based on that
          decision. And just like "if" blocks, you can put "if-else" blocks inside
          "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Now let's help Scrat the squirrel get that acorn!
    function:
      1:
        image: notes/stage13_1.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      2:
        image: notes/stage13_2.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      3:
        image: notes/stage13_3.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      4:
        image: notes/stage13_4.jpg
        text: 定义在工作区中，但农民不会运行该函数，直到我们拖出我们"填充 5"功能块从函数类别。
      5:
        image: notes/stage13_5.jpg
        text: Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      3:
        image: notes/stage9_7.jpg
        text: 打个比方，当(WHILE)农民站在土堆上时，她将会用1个铲子移除之
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      2:
        image: notes/stage11_2.jpg
        text: 这是我们马上要接触的“计数”循环，它能反复执行某操作，您也可以在它执行时对某操作进行少量修改。
      3:
        image: notes/stage11_3.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      4:
        image: notes/stage11_4.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      2:
        image: notes/stage15_2.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      3:
        image: notes/stage15_3.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      4:
        image: notes/stage15_4.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      5:
        image: notes/stage15_5.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      6:
        image: notes/stage15_6.jpg
        text: 然后单击的星星上。现在，你想要点击的变量类别并将"长度"块拖动到您的函数定义的"向前"块。并将旧编号块拖走。
      7:
        image: notes/stage15_7.jpg
        text: 我们要工资！我们要工资！翻译尼玛这么多代码还有提示语神马的也不给我们付工资！严正抗议~~~
      8:
        image: notes/stage15_8.jpg
        text: 现在你可以使用数学块来输入不同的数字来绘制不同大小的三角形。
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: 恭喜你！用你在上一个谜题当中写的程序，你可以让任何一个机器人（僵尸，小鸟，火星探测器，自动驾驶车），在任何一个无分支的迷宫里找到出去的路。
      2:
        image: notes/hoc6_2.jpg
        text: 你在这里所使用的基本概念是所有程序的核心。我们学习了重复循环语句，重复直到语句，如果语句，和如果其他语句。
      3:
        image: notes/hoc6_3.jpg
        text: 如果你很喜欢这一个小时的编程体验，欢迎访问 code.org 来继续你在计算机科学的学习！当你完成我们的20小时课程，你就熟练掌握了编程的基础，可以开始学习如何编写手机应用程序，机器人程序，游戏，随便你。
      4:
        image: notes/hoc6_4.jpg
        text: 技术正在改变我们所做的一切，而不管你是否年轻： 编程是一件很好玩、 很有创意的事，任何人都可以学习 ！
    20_wrapup:
      1:
        image: notes/bird.png
        text: 即将推出笔记版本！
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use
          code to join Anna and Elsa as they explore the magic and beauty of ice.
      2:
        image: notes/frozen1_2.jpg
        text: You'll create snowflakes and patterns as you ice skate and make a winter
          wonderland that you can then share with your friends.
      3:
        image: notes/frozen1_3.jpg
        text: In the next hour, you're going to learn the basics of how to code. Traditional
          programming is usually in text, but we'll use Blockly, which uses visual
          blocks that you can drag and drop to write programs. This is how even university
          students learn the basics. Under the hood, you're still creating code.
      4:
        image: notes/frozen1_4.jpg
        text: A program is a set of instructions that tells a computer what to do.
          Let's build a code, or a program, that will help Elsa create a simple line.
          We will use this later to create more complex patterns.
      5:
        image: notes/frozen1_5.jpg
        text: Your screen is split into three main parts. On the left, is the ice
          surface where you'll run your program. The instructions for each level are
          written right below the surface.
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action
          that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: The white space on the right is called the workspace, and this is where
          we'll build our program. To move around the ice surface, you'll use the
          "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: Here, the "Move Forward" block says, "move forward by 100 pixels." When
          we press "Run", what happens? Elsa moves forward a certain amount on the
          screen, 100 pixels in fact! Pixels are basically very tiny squares on your
          computer screen.
      9:
        image: notes/frozen1_9.jpg
        text: The other block we have in this puzzle says "turn right by 90 degrees."
          And when we use this "Turn Right" block, that makes Elsa turn a certain
          amount. You can play around with how far you want Elsa to turn. The angle
          is measured from the path ahead of Elsa. So, this is a 90 degree turn. And
          this is a 120 degree turn.
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking
          the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hi, I’m Paola! Computers are really good at repeating actions. You can
          count to 10, 20, or 100. But a computer can count to a billion or a trillion.
          It won't get bored and it will only take a few seconds. Whether it's counting,
          or drawing, or anything--computers can repeat things hundreds or even billions
          of times.
      2:
        image: notes/frozen2_2.jpg
        text: In programming, we call this a loop. A loop is how you repeat your code
          over and over again. For the next puzzle, your goal is to help Anna create
          a square with the "Repeat" block.
      3:
        image: notes/frozen2_3.jpg
        text: Any blocks of code you put inside the "Repeat" block will be repeated
          in sequence, as many times as you want.
      4:
        image: notes/frozen2_4.jpg
        text: To draw a square, you can use the "Move Forward" and "Turn Right" block
          4 times. But the easier way is to tell the computer to "Move Forward" and
          "Turn Right by 90 degrees" once, and then tell it to repeat this pair of
          actions 4 times. To do that, you need to put the "Move Forward" and "Turn
          Right" block inside a "Repeat" block.
      5:
        image: notes/frozen2_5.jpg
        text: Remember, you can change the number in the "Repeat" block to anything,
          and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded
          in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define
          new commands. Most computer languages have only about 100 words or commands.
          And really, the art and magic is in defining your own new words out of these
          building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: Once you've taught a computer how to do an action once using this sequence
          of commands, you can make up your own name for that action so it's easy
          to repeat it later. When you define your own command and give it a name,
          that's called a function.
      4:
        image: notes/frozen3_4.jpg
        text: Hi, I’m Jess. When programming with blocks, you would use functions
          if there are a set of actions you would like to use lots of times. For example,
          you've written code to create a square.
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple
          squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns.
          In the next puzzle, the code you recently wrote to make a circle is available
          to you as a new function that can make circles of different sizes. Can you
          use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: So far you've been making an animation or a story that does the exact
          same thing every time you run it. Now you can make an interactive game that
          you can actually play.
      2:
        image: notes/playlab_2.png
        text: There's the "when arrow" block and the "move actor" block. You can put
          these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked.
          Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: We're going to create games using Play Lab. Good games have a story,
          and every story has actors. We'll learn how to make our actors like witches,
          alinens, and animals speak, move, and interact with each other. By the end
          of this tutorial, you can build a game from scratch and share it with your
          friends.
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space
          where your program will run. The instructions for each level are written
          below.
      3:
        image: notes/playlab_intro_3.png
        text: The middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace and this is
          where we'll build our program.
      4:
        image: notes/playlab_intro_4.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: In this first puzzle, our actor is a penguin and we'll be making it
          say "Hello!" by dragging the say block out, linking it to the when run block,
          and typing in "Hello." We can also make the penguin move by using the move
          right and move left blocks. Once you have your blocks in place, hit the
          run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: Get started and by the end, you'll be able to create your own game with
          all kinds of players that can interact, turn happy or sad, score points,
          or throw fireballs, or even vanish each other. It's all up to you and the
          game you want to make.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Now, we're going to learn about something that all game programmers
          use everyday. They're called events. An event tells your program to listen
          for when something happens. When that thing happens, it performs an action.
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button,
          or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: Here, we're going to make the space bot greet the earthlings when a
          player clicks on him. We'll use the "when clicked" block and attach the
          "say" block to it. When the player clicks on the space bot, everything attached
          to this "when clicked" event block will be performed. What does your alien
          say?
      4:
        image: notes/playlab_events_4.png
        text: There are also "when arrow" blocks. If you link the "move" blocks to
          these, you can start to move your actors up, down, left, or right. Step
          by step, your game is getting more interactive.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: This is the "repeat forever" block. Anything inside this block will
          happen forever in the game.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: If we want an actor to do something repeatedly, without the player having
          to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries
          of the kingdom, left and right continuously. Learning how the repeat commands
          works, will save you a ton of time later when you build your own game.
