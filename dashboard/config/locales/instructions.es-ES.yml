"es":
  data:
    instructions:
      2-3 _instruction: Las flores moradas tienen 1 o 0 de néctar. Ten cuidado de
        no recolectar néctar de una flor morada, si no tiene nada.
      2-3 Artist 1 new_instruction: Hola, soy un artista. Puedes escribir código para
        hacerme dibujar cualquier cosa. Usa algunos bloques para hacerme dibujar sobre
        las líneas grises en la imagen. (Cada línea tiene 100 píxeles de largo)
      2-3 Artist 11_instruction: 'Dale un borde a la señal de alto haciendo un octágono
        con ocho lados, cada uno de 100 píxeles de largo. ¿Cuántos grados debes girar?
        (Pista: ¿Cuánto es 360 dividido entre 8?) '
      2-3 Artist 12_instruction: Establece el bloque "Repetir" para crear un "círculo"
        y terminar el ojo. Si cada movimiento gira a la derecha en un grado, ¿Cuantas
        veces tienes que repetir para completar un círculo? ¿180, 360 o 500?
      2-3 Artist 2 new_instruction: 'Esta casa tiene una pared a medio terminar. Cada
        lado es de 100, pero el lado sin terminar es solamente 50. Completa el muro. '
      2-3 Artist 2_instruction: Esta casa tiene una pared a medio terminar. Cada lado
        es 100, pero la pared a medio terminar es sólo 50. Termine la pared.
      2-3 Artist 3.4_instruction: |
        El bloque Salta mueve el artista sin dibujar.
        Dibuja la línea punteada utilizando los bloques Salta y Dibuja.
      2-3 Artist 3_instruction: Este sombrero tiene 100 pixeles de alto.  Dibuja un
        sombrero que tenga 70 pixeles o menos.
      2-3 Artist 3new_instruction: El sombrero rojo tiene 100 pixeles de alto. Termina
        de dibujar un sombrero negro que tiene 70 pixeles menos. El ancho del sombrero
        negro es de 50 pixeles.
      2-3 Artist 4_instruction: Ayúdame a completar la casa para este gato.
      2-3 Artist 5_instruction: Sustituye este código con el bloque "Repetir" para
        dibujar la misma casa usando sólo 3 bloques.
      2-3 Artist 6_instruction: '¡Esta casa necesita un techo! Dibuja el triángulo.
        Pista: Los 3 lados tienen la misma longitud.'
      2-3 Artist 7_instruction: "Termina de dibujar la mitad derecha de la última
        ventana. \nCada cuadado de la ventana mide 25 pixeles. \n"
      2-3 Artist 8_instruction: Completa las habitaciones para cada uno de los naimales
        dividiendo el recángulo en 2 cuadrados del mismo tamaño. El rectángulo mide
        200 pixeles de ancho y 100 pixeles de alto.
      2-3 Artist 9_instruction: Termina esta cometa
      2-3 Artist Assessment 1_instruction: |
        Evaluación: Termina de dibujar el último diente,
        25 pixeles de ancho por 25 pixeles de alto.
      2-3 Artist Debugging 1_instruction: ¿Puedes hacer este sombrero con una longitud
        máxima de 100?
      2-3 Artist Debugging 10_instruction: 'El pad de dirección en mi control es demasiado
        angosto. Sugerencia: Hazlo 10 pixeles mas ancho'
      2-3 Artist Debugging 11_instruction: |
        Ayúdame a terminar mi hermoso copo de nieve.
        ¿Cuantas veces necesito "Repetir" para finalizarlo?
      2-3 Artist Debugging 12_instruction: Tengo que añadir una ola del oceáno a esta
        escena. ¿Puedes ayudarme?
      2-3 Artist Debugging 2_instruction: 'El código para los tres bigotes que ves
        es incorrecto. Sugerencia: cada bigote tiene 75 pixeles de largo. Repara este
        código para dibujar los bigotes.'
      2-3 Artist Debugging 3_instruction: '¡Mi barco tiene un agujero! ¿Puedes repararlo
        cambiando el ángulo de la línea? Sugerencia: el último ángulo está errado
        por 15 grados.'
      2-3 Artist Debugging 4_instruction: ¿Qué imagen intentamos representar? Termina
        de unir los puntos mediante los ángulos y líneas adecuados.
      2-3 Artist Debugging 5_instruction: 'El código para la pierna y el pie está
        equivocado. Sugerencia: El pie es demasiado largo, podríamos necesistar eliminar
        un paso (juego de palabras intencional)'
      2-3 Artist Debugging 6_instruction: |
        Parece que estoy sentado un una silla
        que le falta una pata. Edita los Bloques para dibujar la pata.
      2-3 Artist Debugging 7_instruction: |
        Parece que la C en Código está dibujada al revés-
        ¿Puedes hacer que parezca una C?
      2-3 Artist Debugging 8_instruction: Mi molinillo de viento no está terminado.
        Cuántas veces necesito repetir para terminarlo?
      2-3 Artist Debugging 9_instruction: 'El código de este tallo es incorrecto.
        Sugerencia: El ángulo está fuera por 60 grados'
      2-3 Artist Debugging Assessment 1_instruction: 'Esta figura es demasiado pequeña.
        ¿Puedes hacerla más grande? Pista: debería tener 75 píxeles más por cada lado.'
      2-3 Artist Free Play_instruction: ¡Juego libre! Dibuja lo que quieras.
      2-3 Artist Functions 1_instruction: |
        Hola. Yo artista zombie. Yo amo dibujar!
        Ayúdame a dibujar las gafas cuadradas.  Sugerencia: el puente entre las gafas es 25 píxeles más corto que la longitud cuadrada.
      2-3 Artist Functions 10_instruction: Aquí hay dos funciones, una para dibujar
        un engranaje grande y otra para dibujar un engranaje pequeño. Utilizarlos
        para dibujar el interior de una máquina!
      2-3 Artist Functions 11.5_instruction: Aquí está la misma función "Dibuja un
        hexágono". ¿Que pasa si sólo giras 60 grados en cada iteración?
      2-3 Artist Functions 11_instruction: Hemos renombrado la función "dibuja un
        cuadrado" a "dibuja un hexágono", ¡pero sigue dibujando cuadrados! ¿Puedes
        modificar la función "dibuja un hexágono" para que dibuje un hexágono con
        50 píxeles de cada lado y que dibuje la imagen usando la función?
      2-3 Artist Functions 12_instruction: 'Las funciones son geniales para dibujar
        las cosas complejas varias veces. Puedes utilizar la función "dibujar una
        flor" para llenar el resto de la caja del jardinero. (Pista: las plantas están
        separadas por una longitud de 100 píxeles)  '
      2-3 Artist Functions 13_instruction: |
        Tienes cuatro funciones.
        Utilízalas como quieras dentro de uno o varios bucles para hacer dibujos que puedes compartir con tus amigos. Pulsa "run" para ver un ejemplo.
      2-3 Artist Functions 2_instruction: ¡Las funciones permiten definir nuevos bloques!
        Hemos movido los bloques para dibujar un cuadrado en la función llamada "dibuja
        un cuadrado". ¿Puedes utilizar la función "dibuja un cuadrado" para crear
        los lentes? Los cuadrados están separados por 75 píxeles.
      2-3 Artist Functions 3_instruction: Editar la función para dibujar un cuadrado
        con una longitud lateral de 115 y dibuja los lentes más grandes. Los cuadrados
        están ahora separados 45 píxeles.
      2-3 Artist Functions 4_instruction: Usa el bloque "repetir" para dibujar estos
        3 cuadrados.
      2-3 Artist Functions 7_instruction: 'Utiliza la función "dibuja una casa" para
        dibujar dos casas utilizando dos parámetros diferentes. (Sugerencia: la primera
        casa es de 100 pixeles).'
      2-3 Artist Functions 9_instruction: Esta es la función copo de nieve. ¡Experimenta
        con ella para crea una escena invernal! Este es un nivel libre de acertijos,
        puedes jugar libremente . ¡Diviértete!
      2-3 Artist Loops 1_instruction: ¿Podrías hacer un hexágono que sus lados midan
        100 pixeles de largo para terminar la célula? Recuerda, eso significa que
        ¡sólo deberas girar 60 grados!
      2-3 Artist Loops 10_instruction: ¿Qué pasa con el diseño cuando hacemos nuestro
        último paso hacia adelante tanto la mitad?
      2-3 Artist Loops 11_instruction: Ahora vamos a poner * otro * bucle alrededor
        de toda la creación!  No olvide añadir un ángulo al final del bucle externo.
      2-3 Artist Loops 2_instruction: Ahora utilice un bloque de repetición para hacer
        de célula a cáscara.
      2-3 Artist Loops 4_instruction: ¿Quieres ver lo que pasa cuando repetimos la
        forma otra vez y otra vez utilizando un bucle?
      2-3 Artist Loops 5_instruction: Ahora vamos a hacer un pequeño cambio en el
        bucle y ver que diferente se convierte nuestro foto.
      2-3 Artist Loops 6_instruction: Añadir un paso más y otra vez dentro del bucle
        y ver cómo cambia su diseño.
      2-3 Artist Loops 7_instruction: Podemos usar bucles para hacer todas las clases
        de polígonos.  ¿Puede crear un rombo dentro de este hexágono?
      2-3 Artist Loops 8_instruction: Pongamos ambos elementos dentro de un ciclo.
      2-3 Artist Loops 9_instruction: "Vamos a iterar sobre los mismos elementos,
        pero ahora vamos a añadir algo de separación entre ellos. \r\nUsa el mismo
        código de antes pero añade un paso mas al final del bucle exterior."
      2-3 Artist Loops New 1_instruction: Dibujemos la cabeza de este robot! ¿Puedes
        hacer un cuadrado con lados que son 100 píxeles?
      2-3 Artist Loops New 10_instruction: Ahora conectemos un montón de V juntos,
        dibujándolos en un bucle.
      2-3 Artist Loops New 11_instruction: Esta vez vamos a dibujarlo 24 veces. Añadir
        un giro a la izquierda de 30 grados a este código y ponerlo todo en un bloque
        de repetición.
      2-3 Artist Loops New 12_instruction: |
        Dibuja un diamante con lados de 100 píxeles.
      2-3 Artist Loops New 13_instruction: Ahora dibuja un diamante 3 veces en una
        iteración.
      2-3 Artist Loops New 14_instruction: Ahora a dibujar el diamante 10 veces pero
        gire 90 grados entre cada diamante.
      2-3 Artist Loops New 15_instruction: Dibuja algo divertido.
      2-3 Artist Loops New 2_instruction: Aquí hay parte del código que utilizas para
        dibujar ese cuadro. ¿Qué sucede si se utiliza el bloque de repetición para
        ejecutar este código 4 veces?
      2-3 Artist Loops New 9_instruction: Dibujar una "V" simple donde ambos lados
        sean 50 píxeles para completar la flecha.
      2-3 Artist Match Hex Pic_instruction: 'Unir: Ayuda a terminar el hexágono.'
      2-3 Artist Match Rho Pic_instruction: 'Iguala: Terminar el código faltante.'
      2-3 Artist Match Sq Pic_instruction: 'Iguala: Completar el código faltante'
      2-3 Artist Match Tri pic_instruction: 'Igualando: Rellene el código faltante.'
      2-3 Artist Nested Loops 1_instruction: "Has usado bucles para dibujar formas
        anteriormente, \npero sabías que puedes poner un bucle dentro de otro bucle\r
        \nbucle todo esto \nbloque de código 3 veces para dibujar el patrón."
      2-3 Artist Nested Loops 10_instruction: Itera este código 12 veces para completar
        el patrón.
      2-3 Artist Nested Loops 11_instruction: |
        bucle este código 4 veces para completar
        el patrón, gire 90 grados después de cada círculo.
      2-3 Artist Nested Loops 12_instruction: |
        Itera este código 12 veces para completar
        las curvas.
      2-3 Artist Nested Loops 2_instruction: "Ahora bucle el triángulo 6 veces. Después
        \nde cada triángulo, usted necesitará girar 60 grados antes de dibujar el
        siguiente.\n"
      2-3 Artist Nested Loops 3_instruction: "Usted necesitará el triángulo del bucle
        12\nveces para dibujar este patrón. Divida el número de grados en un círculo
        (360) \npor el número de formas que dibujas (12) para averiguar cuánto debe
        girar \ndespués de cada forma.\n"
      2-3 Artist Nested Loops 4_instruction: |
        bucle este diamante 12 veces para dibujar
        una flor. Sugerencia: 12 diamantes es igual a los 12 triángulos que hiciste - ¿cuánto necesitas
        para girar después de cada forma?
      2-3 Artist Nested Loops 5_instruction: "Llenar en las ventanas del edificio
        con \nun bucle anidado. Las ventanas son 20 píxeles de largos y 20 píxeles
        aparte.\n"
      2-3 Artist Nested Loops 6_instruction: "Este dinosaurio tiene 8 picos \nsubiendo
        su cola; cada espiga es 30 píxeles de largo. El triángulo del bucle 8 veces,
        pero\nasegúrese de mover hacia adelante después de cada uno.\n"
      2-3 Artist Nested Loops 7_instruction: "Bucle este triángulo 10 veces para dibujar\nel
        sol, Necesitarás moverte y girar después de cada triángulo. Puedes averiguar
        \ncuanto girar dividiendo la cantidad de grados en un circulo por \nla cantidad
        de figuras que lo componen.\n"
      2-3 Artist Nested Loops 8_instruction: |
        Ahora vamos a agregar un poco de hierba a nuestra imagen.
        Cada penacho de césped es 50 píxeles aparte.
      2-3 Artist Nested Loops 9_instruction: |
        Terminaremos esta foto agregandole
        una flor. Enrolle el diamante 12 veces para dibujar tu flor.
      2-3 Artist Nested Loops Free Play_instruction: |
        jugo libre, dibujar algo fascinante
        con bucles anidados.
      2-3 Bee Conditionals 1_instruction: |
        Hola! Soy una abeja. Ayúdame a obtener
        néctar de la flor.
      2-3 Bee Conditionals 10_instruction: "Flores de color púrpura pueden tener 1
        o 0 \nnéctar. Tenga cuidado de no recogen néctar de una flor morada si no\ntiene
        ninguno.\r\n"
      2-3 Bee Conditionals 11_instruction: Colecta néctar donde las flores tienen
        néctar.
      2-3 Bee Conditionals 12_instruction: "Utilizar un bucle para comprobar y recolectar
        el néctar \nde todas estas flores.\n"
      2-3 Bee Conditionals 13_instruction: 'Recoge néctar y haz miel. Pista: ¿Qué
        ocurre si usas el condicional "Si nectar" en una flor roja? ¿Puedes completar
        esto con un bucle (loop)?'
      2-3 Bee Conditionals 14_instruction: "Colecta néctar y miel. Tenga cuidado \nde
        no recogen néctar de una flor morada si no tiene ninguno.\n"
      2-3 Bee Conditionals 15_instruction: Recoge néctar de las cuatro flores.
      2-3 Bee Conditionals 2_instruction: Hola, soy una abeja! Ayúdame a recoger todo
        el néctar de las flores. Utiliza un bucle (loop).
      2-3 Bee Conditionals 3_instruction: Ayúdame a recoger todo el néctar de las
        flores y a hacer miel. Usa un bucle (loop).
      2-3 Bee Conditionals 4_instruction: 'Ayúdame a recoger todo el néctar de las
        flores y a hacer toda la miel. '
      2-3 Bee Conditionals 5_instruction: "Flores de color púrpura pueden tener 1
        o 0 \nnéctar, pero no sabes cuál! Tenga cuidado de no recogen néctar de \nuna
        flor morada si no tiene ninguno. Compruebe si el néctar es igual a 1\nutilizando
        el bloque if.\n"
      2-3 Bee Conditionals 6_instruction: |
        Checa esta flor con un bloque de "if"
        para ver si hay cualquier néctar disponible.
      2-3 Bee Conditionals 7_instruction: "Colecta néctar de cada flor si \ntiene
        alguno.\n"
      2-3 Bee Conditionals 8_instruction: |
        Este campo tiene flores rojas y púrpura.
        Flores rojas tienen una cantidad conocida de néctar, pero se desconoce el néctar de la flor de color púrpura.
        Colecta todo el néctar.
      2-3 Bee Conditionals 9_instruction: Colecta todo el néctar de cada flor.
      2-3 Bee Conditionals Assessment 1_instruction: "Evaluación: Colecta todo \nel
        néctar. Tenga cuidado de no recogen néctar de una flor morada si no tiene\nninguno.\n"
      2-3 Bee Debugging 1_instruction: Estos bloques realmente me molesta. Corregir
        el error(s) para recoger todo el néctar y hacer todo de la miel.
      2-3 Bee Debugging 10_instruction: |
        Estos bloques realmente me molesta. Corregir
        el error(s) para colectar todo el néctar y hacer toda la miel.
      2-3 Bee Debugging 2_instruction: Estos bloques realmente me molesta. Corregir
        el error(s) para recoger todo el néctar y hacer todo de la miel.
      2-3 Bee Debugging 3_instruction: Estos bloques realmente me molesta. Corregir
        el error(s) para recoger todo el néctar y hacer todo de la miel.
      2-3 Bee Debugging 4_instruction: Estos bloques realmente me molesta. Corregir
        el error(s) para recoger todo el néctar y hacer todo de la miel.
      2-3 Bee Debugging 5_instruction: "Estos bloques realmente me molestan. Corregir
        \nel error(s) para recoger todo el néctar y hacer todo de la miel.  Usted
        puede \nahora usar ejecutar y paso.\n"
      2-3 Bee Debugging 6_instruction: "Estos bloques realmente me molestan. Corregir
        \nel error(s) para recoger todo el néctar y hacer toda la miel. \n"
      2-3 Bee Debugging 7_instruction: Estos bloques realmente me molesta. Corregir
        el error(s) para recoger todo el néctar y hacer todo de la miel.
      2-3 Bee Debugging 8_instruction: Estos bloques realmente me molesta. Corregir
        el error(s) para recoger todo el néctar y hacer todo de la miel.
      2-3 Bee Debugging 9_instruction: Estos bloques realmente me molesta. Corregir
        el error(s) para recoger todo el néctar y hacer todo de la miel.
      2-3 Bee Debugging Assessment 1_instruction: |
        Evaluación: Estos bloques
        realmente me molestan. Corregir el error(s) para recoger todo el néctar y hacer
        todo de la miel.
      2-3 Bee Functions 1_instruction: "Las funciones son bloques de código que realizan
        \nuna tarea. Utilice la función \"get 2 néctar\" para recolectar el néctar
        de cada\nflor.\n"
      2-3 Bee Functions 10_instruction: Las flores moradas pueden tener 1 o 0 néctar.
        Crea una función que recoja el néctar solo de aquellas flores que lo tengan.
      2-3 Bee Functions 2_instruction: "Las funciones son bloques de código que realizan\nuna
        tarea. Utilice la función \"get 5\" para obtener 5 néctares a cada momento.
        Asegúrese de \nutilizar un bucle para obtener un recuento ideal de bloque,
        también.\n"
      2-3 Bee Functions 3_instruction: Colecta todo el néctar de cada flor.
      2-3 Bee Functions 4_instruction: La función "mover y obtener néctar" realizada
        por la abeja, recoge néctar, y entonces devuelve a la abeja al principio.
        Usa la función para recoger todo el néctar.
      2-3 Bee Functions 5_instruction: 'Ahora hay más néctar en las flores. Edita
        la función dada de manera que recoja 4 néctar y úsalo para recoger todo el
        néctar de las flores. '
      2-3 Bee Functions 6_instruction: |
        Ahora utilizar la misma función para recoger el néctar
        de las tres flores.
      2-3 Bee Functions 7_instruction: |
        Las flores estan ahora más lejos. Editar la
        función dada y usarlo para recoger todo el néctar de las flores.
      2-3 Bee Functions 8_instruction: Crea tu propia función que obtiene 7 de néctar,
        avanza hacia adelante y obtén 7 de miel. Utiliza la función para recoger néctar
        en cada flor y hacer miel en cada panal de miel.
      2-3 Bee Functions 9_instruction: Crear tu propia función que desciende por un
        camino, obtiene néctar, hace miel y luego devuelve la abeja a la cima de la
        ruta.
      2-3 Bee Functions Assessment 1_instruction: Utilice la función dada para recolectar
        néctar de cada flor.
      2-3 Bee Functions Assessment 2_instruction: Crea una función para hacer 3 mieles
        a la vez.
      2-3 Bee Loops 1_instruction: 'Cada flor continene una unidad de néctar. Recolecta
        néctar de cada una de las flores. '
      2-3 Bee Loops 10_instruction: ¿Podrías utilizar un ciclo while dentro de otros
        dos ciclos para recolectar todo el néctar?
      2-3 Bee Loops 11_instruction: |
        Utiliza ciclos while para recolectar todo el néctar
        de las flores en este campo.
      2-3 Bee Loops 12_instruction: |
        Utiliza ciclos while para recolectar todo el néctar
        de las flores en este campo.
      2-3 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      2-3 Bee Loops 1A_instruction: "Hola, soy una abeja. ¿Puedes ayudarme a recolectar
        \nel néctar de estas flores? \n"
      2-3 Bee Loops 2_instruction: "Usa un ciclo para recolectar el néctar y hacer
        la \nmiel.\n"
      2-3 Bee Loops 2A_instruction: "¿Podrías hacer la misma tarea más fácilmente
        con un \nciclo?\n"
      2-3 Bee Loops 3_instruction: "Recolecta el néctar de cada flor y haz miel \nen
        cada panal.\n"
      2-3 Bee Loops 3A_instruction: ¿Podrías utilizar un ciclo para recolectar todo
        el néctar?
      2-3 Bee Loops 3B_instruction: |
        Ahora usa el nuevo bloque repeat para recolectar todo
        el néctar y hacer toda la miel.
      2-3 Bee Loops 4_instruction: |
        Utiliza un ciclo similar al del último problema, pero ahora utiliza
        un bloque turn.
      2-3 Bee Loops 4A_instruction: |
        ¿Qué pasa si haces un ciclo con esta secuencia 3 veces?
        ¡No olvides hacer la miel al final!
      2-3 Bee Loops 5_instruction: "Utiliza un ciclo para seguir los pasos y recolectar
        el \nnéctar.\n"
      2-3 Bee Loops 6_instruction: |
        Utiliza un ciclo para recolectar néctar de cada flor
        y hacer miel en cada panal.
      2-3 Bee Loops 7_instruction: |
        Pon estos bloques en un ciclo para recolectar néctar
        de cada flor.
      2-3 Bee Loops 8_instruction: |
        Estas flores moradas tienen una cantidad desconocida de
        néctar. Utiliza el ciclo "while nectar" para recolectar todo el néctar. Este ciclo
        va a ejecutarse mientras la condición sea verdadera, en este caso Nectar > 0.
      2-3 Bee Loops 9_instruction: |
        El ciclo while puede ejecutar la misma acción como
        un estatuto if en un ciclo. Añade un ciclo while a este código para ejecutar la misma
        tarea.
      2-3 Bee Loops Assessment 1_instruction: |
        Evaluación - Utiliza un ciclo while para recolectar
        todo el néctar de esta flor.
      2-3 Maze 1_instruction: "¿Me puedes ayudar a atrapar al cerdo malo? Apila un\npar
        de bloques \"avanzar\" juntos y presiona \"Ejecutar\". \n"
      2-3 Maze 10_instruction: ¡Guíame al demonio verde! (Cuidado con el TNT)
      2-3 Maze 11_instruction: "¡Llévame a la flor que tengo hambre! ¿Cuántas veces
        \nse tiene que repetir un bloque?\n"
      2-3 Maze 12 (copy 1)_instruction: |
        ¿Podrías reemplazar la respuesta anterior con
        solo dos bloques? (Sugerencia: Crea un ciclo utilizando un bloque de "repeticiones".)
      2-3 Maze 12 (copy 2)_instruction: |
        ¿Podrías reemplazar la respuesta anterior con
        solo dos bloques? (Sugerencia: Crea un ciclo utilizando un bloque de "repeticiones".)
      2-3 Maze 12 (old)_instruction: ¡Llévame al cerdo, ahora con el bloque repetir!
      2-3 Maze 12_instruction: |
        ¿Podrías reemplazar estos cinco bloques con solo dos?
        (Sugerencia: Crea un ciclo usando un bloque de "repeticiones".)
      2-3 Maze 13 (old)_instruction: ¡Llévame al cerdo, ahora con el bloque repetir
        hasta!
      2-3 Maze 13_instruction: Llévame al cerdo usando solo dos bloques.
      2-3 Maze 14 (old)_instruction: ¡Llévame al cerdo con el bloque repetir hasta!
      2-3 Maze 14_instruction: ¡Llévame al girasol! (¿Dónde está ese bloque "repeticiones"
        cuando lo necesito?)
      2-3 Maze 15 (old)_instruction: ¡Llévame al cerdo con el bloque repetir hasta!
      2-3 Maze 15_instruction: Usa dos ciclos para hacer que el cerdo use menos bloques.
      2-3 Maze 16 (old)_instruction: ¡Llévame al cerdo con el bloque repetir hasta!
      2-3 Maze 16 before_instruction: Tráeme al cerdo.
      2-3 Maze 16_instruction: Llévame al girasol. ¡Haz un ciclo con la secuencia!
      2-3 Maze 2_instruction: Este cerdo me está colmando la paciencia. ¡Ayúdame a
        llegar a él!
      2-3 Maze 3_instruction: Traza el camino y llévame al maldito cerdo. ¡Evita el
        TNT o las plumas volarán!
      2-3 Maze 4_instruction: ¡Guíame al demonio verde! (Cuidado con el TNT)
      2-3 Maze 5_instruction: ¡Guíame al demonio verde! (Cuidado con el TNT)
      2-3 Maze 6_instruction: Manten la calma y ayúdame a encontrar al cerdo malo.
        Sino, puede que me enfade!
      2-3 Maze 7_instruction: ¡Guíame al demonio verde! (Cuidado con el TNT)
      2-3 Maze 8_instruction: ¡ Tráeme al cerdo!
      2-3 Maze 9_instruction: ¡Guíame al demonio verde! (Cuidado con el TNT)
      2-3 Maze Loops 1_instruction: ¿Puedes llevarme hasta el cerdo usando 5 bloques?
      2-3 Maze Loops 17_instruction: ¡Llévame al girasol!
      2-3 Maze Loops 18_instruction: ¡Llévame al girasol!
      2-3 Maze Loops 19_instruction: ¡Llévame al girasol!
      2-3 Maze Loops 20_instruction: ¡Llévame al girasol!
      2-3 Maze Loops 21_instruction: ¡Llévame al girasol!
      2-3 Maze Loops Assessment 1_instruction: 'Evaluación: ¡Llévame al girasol usando
        solo 5 bloques! '
      2-3 Maze sq1 _instruction: Este cerdo me está colmando la paciencia. ¡Ayúdame
        a encontrarlo!
      2-3 Maze sq10_instruction: ¡Llévame hasta el cerdo! ¿Qué bloques se han repetido?
      2-3 Maze sq10v2_instruction: ¡Llévame hasta el cerdo! ¿Qué bloques se han repetido?
      2-3 maze sq11_instruction: ¡Llévame hasta el cerdo! ¿Qué bloques se han repetido?
      2-3 maze sq12_instruction: ¿Podrías reemplazar la respuesta anterior con un
        ciclo usando un bloque de "repeticiones"?
      2-3 maze sq13_instruction: |
        Querida persona. Yo zombie. Debo... llegar... a girasol.
        Crear ciclo con bloque "repetir hasta".
      2-3 maze sq14_instruction: ¿Podrías llegar al girasol usando solo cuatro bloques?
      2-3 maze sq15_instruction: ¿Podrías llegar al girasol usando solo cinco bloques?
      2-3 maze sq16_instruction: Ok, esto es similar, pero un poco diferente. ¿Puedes
        hacerlo con solo cinco bloques?
      2-3 Maze sq2_instruction: Traza el camino y llévame al maldito cerdo. ¡Evita
        el TNT o las plumas volarán!
      2-3 Maze sq3_instruction: ¡Guíame al demonio verde! (Cuidado con el TNT)
      2-3 Maze sq4_instruction: Manten la calma y ayúdame a encontrar al cerdo malo.
        Sino, puede que me enfade!
      2-3 Maze sq5_instruction: ¡Llévame al cerdo! ¿Cuántas veces debemos repetir
        un bloque?
      2-3 Maze sq6_instruction: |
        ¿Podrías reemplazar la respuesta anterior con solo dos
        bloques? (Sugerencia: Crea un ciclo usando un bloque de "repeticiones".)
      2-3 Maze sq7_instruction: Llévame al intruso verde usando solo tres bloques.
      2-3 Maze sq8_instruction: Llevame hacia el cerdo! (¿Dónde está el bloque "repeticiones"
        cuando lo necesito?)
      2-3 Maze sq9_instruction: Crea bucles para llegar al cerdo usando menos bloques.
      2-3level1_instruction: Ayuda el pájaro para que atrape al cerdo travieso moviéndolo
        hacia adelante
      4-5 Artist 1_instruction: 'Ayudarme a terminar de dibujar mi caja. (Cada línea
        tiene 300 píxeles de  largo) '
      4-5 Artist 10_instruction: Presione "Ejecutar" para probar el código. Luego,
        repita varias veces para completar el dibujo. Los colores serán diferentes
        cada vez.
      4-5 Artist 11_instruction: Completa las líneas verdes. Las líneas son de 300
        píxeles de largo y están separadas por 15 píxeles.
      4-5 Artist 2_instruction: ¿Puedes crear un bucle de código para completar el
        cuadrado?
      4-5 Artist 3.5_instruction: Muy bien, tratar de averiguar qué pasaría si ejecutas
        este código (o presiona "Run" para probarlo). Luego, repitítelo la suficiente
        cantidad de veces para completar el dibujo. Los colores serán (probablemente)
        diferentes cada vez.
      4-5 Artist 3_instruction: |
        Este parterre de flores rectangular tiene un perímetro de 600.
        El lado más largo tiene una longitud de 200. Dibuja el rectángulo.
      4-5 Artist 4_instruction: ¿Cuántos grados son en un círculo?  Crea bucles con
        los bloques para crear un círculo de colores.
      4-5 Artist 5_instruction: ¿Qué ángulo utilizas?
      4-5 Artist 6_instruction: Este triángulo equilátero tiene ángulos de 60, 60
        y 60 grados. Cada lado es de 200 píxeles. Completa el dibujo.
      4-5 Artist 7_instruction: Este triángulo rectángulo tiene ángulos de 30, 60
        y 90 grados. La longitud de la hipotenusa es del doble de la altura de 100
        píxeles. Completa el dibujo.
      4-5 Artist 8_instruction: La línea media en un campo de fútbol es perpendicular
        al margen. Este campo tiene un perímetro de 800 píxeles y es 240 pixeles de
        largo. ¿Qué tan amplia es? Dibujar los límites y la línea media.
      4-5 Artist 9_instruction: dibuja la otra mitad para que el diseño sea simétrico.
        Los triángulos son equiláteros y tienen 50 píxeles de largo.
      4-5 Artist Assessment 1_instruction: 'Evaluación: Utilizar un bucle para dibujar
        el triángulo equilátero. Cada lado es de 300 píxeles.'
      4-5 Artist For Loops 1_instruction: Pon los números 1 a 10 en el ancho de los
        bloques y ejecuta el código.
      4-5 Artist For Loops 11_instruction: Completa el bloque "for" de manera que
        cuente 0, 20, 40, 60, 80 ... 200.
      4-5 Artist For Loops 12_instruction: '¿Qué sucedería si inviertes los números
        "desde" y "hasta"? Completa el bloque "para" para que cuente 200, 180, 160,
        140, 120...0. '
      4-5 Artist For Loops 13_instruction: "Este diseño  inicia sin un bucle \"for\"
        y está tomando demasiados bloques! Use un bloque \"for\" para completar la
        espiral.\n Sugerencia: \nLa longitud de la última línea es de 250 píxeles.\n"
      4-5 Artist For Loops 14_instruction: "Alguien comenzó el código, pero se dio
        cuenta que debe haber una manera más rápida! Utilice un bloque \"for\" para
        reemplazar los bloques y completar la espiral triangular. \nSugerencia:\nLa
        longitud de la última línea es de 300 píxeles.\n"
      4-5 Artist For Loops 15_instruction: "Alguien comenzó el código, pero se dio
        cuenta que debe haber una manera más rápida! Utilice un bloque \"for\" para
        reemplazar los bloques y completar la espiral hexagonal.\nSugerencia: \nLa
        longitud de la última línea es de 200 píxeles.\n"
      4-5 Artist For Loops 2_instruction: "Este es un bloque \"for\". En lugar de
        escribir 1,2,3... 10, el bloque \"for\" puede repetir los bloques en su interior
        y contar los números para ti. \nColoque el número 10 en la sección \"to\"
        del bloque \"for\".\n"
      4-5 Artist For Loops 3_instruction: |
        ¿Cómo podemos contar de 1 a 50?
        Editar el bloque "for" .
      4-5 Artist For Loops 4_instruction: Completar el bloque "for" para que lo cuente
        de 1 a 10 de 1 por 1.
      4-5 Artist For Loops 6_instruction: "Dibujar cuadrados con lados de 50, 60,
        70, 80 y 90 píxeles. \nUsted necesitará utilizar la función \"draw a square\"
        cinco veces.\n"
      4-5 Artist For Loops 7_instruction: "Dibujar los mismos cuadros  pero utilice
        un bloque \"counter\" para cambiar los tamaños. \ncoloque  el bloque \"counter\"
        de la función \"draw a square\". \nSugerencia:\nEs en la categoría de las
        Variables.\n"
      4-5 Artist For Loops 8_instruction: |
        Se puede completar el programa colocando los bloques dentro de un bloque "for" que se cuenta desde 10 a 200 de 10 por 10.
         Puedes encontrar el bloque "for" en la categoría de bucles.
      4-5 Artist For Loops 9_instruction: "Estos círculos son tamaño 5, 10, 15, 20,
        25, 30 y 35. \nDibujar los círculos usando un bloque de \"for\".\n"
      4-5 Artist Free Draw 1_instruction: Dibujo libre!  Dibujar lo que estes inspirado
        para crear.
      4-5 Artist Functions 1_instruction: Utilice un bucle de repetición para dibujar
        este triángulo.
      4-5 Artist Functions 10a_instruction: "Poner este código en la función 'draw
        a snowflake' y reemplaze 50 con el parámetro 'size'. \nLa función esta lista
        para dibujar un copo de nieve de 100 píxeles.\n"
      4-5 Artist Functions 10b_instruction: |
        Utilice la función "draw a snowflake" para crear copos de diverso tamaño.  Sugerencia:
        El primer copo de nieve es de un tamaño de 25 en longitud y cada copo de nieve es el doble del anterior.
      4-5 Artist Functions 11_instruction: "La  función \"draw a hexagon\" utiliza
        la función \"draw a triangle\". Completa la función del hexágono. \nPista:\nUn
        hexágono tiene 6 lados, y cada lado con 100 píxeles de largo\n"
      4-5 Artist Functions 12_instruction: "Completa la función 'draw waves'.  \nCada
        onda está compuesta por una onda superior y una inferior.  \n Sugerencia:
        \nDibujar 5 ondas azules.\n"
      4-5 Artist Functions 13 Free play_instruction: "Aquí están algunas funciones
        para dibujar los planetas, las estrellas, los cohetes y los robots. \nUtiliza
        cualquier forma que te guste para hacer imagenes que puedas compartir con
        tus amigos.\n"
      4-5 Artist Functions 14 Free play_instruction: "Aquí te ofrecemos varias funciones.
        \ \nUtilizarlas como quiera dentro de uno o más bucles para hacer imagenes
        que puedas compartir con tus amigos. \nHaga clic en 'Run' para ver un ejemplo.\n"
      4-5 Artist Functions 15 Assessment_instruction: "Evaluación: \nUtilice la función
        \"draw a square\" para crear los cuadros.  Los cuadros tienen 50, 100 y 150
        píxeles.\n"
      4-5 Artist Functions 2a_instruction: Ahora utiliza bloques en una nueva función
        llamada "draw a small triangle" y llamala.
      4-5 Artist Functions 2b_instruction: Ahora cree una función llamada "draw a
        small triangle" usando los bloques proporcionados.
      4-5 Artist Functions 3_instruction: "Ahora crear las funciones \"draw a medium
        triangle\" y \"dibujar un triángulo grande\".\n La función \"draw a small
        triangle\" está hecha para ti. \nLos triángulos tienen longitudes laterales
        de 50 (pequeño), 100 (medio) y 150 (grande). \n"
      4-5 Artist Functions 4_instruction: "Esta nueva función de \"draw a triangle\"
        tiene un parámetro y puede hacer el trabajo de las tres funciones de antes.
        \nDibujar los mismos triángulos usando esta nueva función.\n"
      4-5 Artist Functions 5_instruction: ¿Puedes modificar la función "draw a triangle"
        en una función "draw a square" y cambiar el dibujo?
      4-5 Artist Functions 6_instruction: "Utilice  \"draw a square\" y \"draw a triangle\"
        para dibujar una casa. \nSugerencia:\nLos lados del cuadrado son de 200 píxeles\n"
      4-5 Artist Functions 6b_instruction: Utilice "draw a triangle" y funciones de
        triángulo junto con otros bloques para crear una casa añadiéndolos a la funcion
        "draw a house"  y llamala.
      4-5 Artist Functions 7_instruction: Utilice la función "'draw a house" para
        dibujar casas de 100 píxeles y 50 píxeles. Las dos casas están separadas por
        50 píxeles.
      4-5 Artist Functions 8_instruction: La función de "draw a flower" tiene un parámetro
        que le permite ajustar la altura del tallo.  Establézcalo en 200 y vea qué
        pasa.
      4-5 Artist Functions 9_instruction: Dibujar estas 3 flores. La primera de una
        altura de 100 y la siguiente flor es siempre de 50 píxeles más que la altura
        de la anterior. Las flores también son separadas por 100 píxeles.
      4-5 Artist Patterns 1_instruction: ¿Puedes dibujar esta cuadro utilizando un
        bucle? Cada lado es de 20 píxeles de largo.
      4-5 Artist Patterns 10_instruction: "Este código dibuja dos filas de hexágonos
        -utilice un bucle de 4 veces para dibujar el panal entero. \nConsejo:\n Tendrás
        que retroceder 120 píxeles en su bucle para asegurarse de que el artista no
        dibuja fuera de la pantalla.\n"
      4-5 Artist Patterns 11_instruction: |
        ¿Cuántas veces necesitas buclepara dibujar un semicírculo.
        Sugerencia: si hay 360 grados en un círculo y cada bucle se desplaza 3 grados, ¿cuántas veces necesitarías para que el  bucle dibuje un círculo completo?
      4-5 Artist Patterns 12_instruction: Si copia ese bucle y girar a la izquierda
        en lugar de la derecha, ¿qué pasa? ¿Puedes repetir eso para dibujar esta ola?
      4-5 Artist Patterns 13_instruction: Ahora repitamos todo eso cuatro veces para
        crear este cuadro. Cuidado con las esquinas - ¡simplemente no puedes girar
        90 grados! Si repetir 60 veces un giro de 3 grados hace un semicírculo, ¿cuál
        de estos bloques de código hará un cuarto de círculo para las esquinas?
      4-5 Artist Patterns 2_instruction: Si usted pone su bucle cuadrado dentro de
        otro bucle, lo llamamos un bucle anidado. ¿Qué necesitas agregar a su bucle
        externo para asegurarse de que todos los 15 cuadrados se alinean al lado del
        otro?
      4-5 Artist Patterns 3_instruction: Ahora vamos a un nivel más profundo. Hemos
        anidado todo el bloque de código en otro bucle, pero tienes que poner al artista
        en su lugar para dibujar la línea siguiente. ¿Cuál de estos bloques de código
        puede usted colocar al final del bucle exterior para dibujar la red entera?
      4-5 Artist Patterns 4_instruction: "Este diamante tiene 50 píxeles lados y ángulos
        de 120 y 60 grados. \nUtiliza un bucle para dibujarlo.\n"
      4-5 Artist Patterns 5.5_instruction: ¿Cuántas veces necesitas repetir este bloque
        para dibujar la red completa de diamantes?
      4-5 Artist Patterns 5_instruction: |
        Repetimos para hacer una fila de 6 diamantes.
        Observe que hemos cambiado nuestro código del diamante para repetir 3 veces en lugar de 2 - ¿por qué crees que es asi?
      4-5 Artist Patterns 6_instruction: ¿Cuántas veces necesitas repetir este bloque
        para dibujar la red completa de diamantes?
      4-5 Artist Patterns 7_instruction: Vamos a modificar el código del último rompecabezas
        para hacer este patrón más complejo. ¿Observe cómo los diamantes se superponen
        ahora, intente cambiar el primer "jump backwards" de 100 a 50 (medio en la
        medida) - ahora hasta dónde debe ir el artista en el segundo "jump backwards"?
      4-5 Artist Patterns 8_instruction: Utilice un bucle para dibujar este hexágono
        con 40 píxeles lados y ángulos de 60 grados.
      4-5 Artist Patterns 9.5_instruction: |
        Ciclemos este código para dibujar dos filas de hexágonos.
        Observe cómo nuestra segunda fila se desplaza hacia la derecha.
      4-5 Artist Patterns 9_instruction: "Ahora repite que código 3 veces para dibujar
        toda la fila. \nSugerencia, cada hexágono es 80 píxeles de ancho desde los
        puntos más lejano de izquierda a derecha.\n"
      4-5 Artist Patterns Free Play_instruction: Juego libre - prueba tu destreza
        en la fabricación de un patrón propio!
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: La abeja no puede decir si se trata de una
        flor o un panal de miel. Reúnen néctar de las flores, pero primero tienes
        que comprobar si es una flor o un panal de miel.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: "La abeja sólo quiere néctar ahora . \nRecuerde
        que no todos los objetos son flores, recoge néctar solamente de las flores.\n"
      4-5 Bee Conditionals 3_instruction: "Ahora la abeja sólo quiere hacer miel.
        \nAsegúrese de que sólo hacer miel en el panal .\n"
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: El objeto desconocido es una flor o un panal
        de miel. Use el bloque "if/else" para recoger néctar si es una flor, sino
        haz miel (porque es un panal de abejas).
      4-5 Bee Conditionals 5_instruction: Puede haber una flor o un panal bajo esas
        nubes. Usa el bloque if/else para recoger néctar si hay una flor, sino haz
        miel (porque hay un panal de abejas).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: Esta flor púrpura puede tener 3, 2 o 1 néctar.
        Aquí un bloque if-else se combina con otro bloque if-else para crear un bloque
        if,else-if, else. Completa la solución para recoger la cantidad desconocida
        de néctar.
      4-5 Bee Conditionals 7_instruction: Recuerda que las flores púrpura pueden tener
        1, 2 ó 3 néctares. Completa la función "revisar flor púrpura" y úsala para
        recoger todo el néctar de las flores.
      4-5 Bee Conditionals 8_instruction: Escribe una función dentro del bloque llamada
        "revisar que la flor hace miel." Tu función debe comprobar cuánto néctar tiene
        la flor púrpura, recogerla, avanzar y luego hacer miel.
      4-5 Bee Conditionals Assessment 1_instruction: |
        Evaluación: Este código está errado.
        Completa la función "consigue néctar o produce miel" entonces llámalo para recolectar todo el néctar y la miel. Recuerda que las rosas púrpuras pueden tener 3,2 o 1 néctares.
      4-5 Bee Debugging 1_instruction: Estos bloques realmente me molestan. ¿Puedes
        arreglarlos?
      4-5 Bee Debugging 10_instruction: Encuentra los errores y arréglalos.
      4-5 Bee Debugging 11_instruction: ¿Esto está contado correctamente?
      4-5 Bee Debugging 2_instruction: Ayuda a la abeja a conseguir el néctar para
        hacer la miel.
      4-5 Bee Debugging 3_instruction: Encuentra los errores y arréglalos.
      4-5 Bee Debugging 4_instruction: Estos bloques no funcionan. ¿Cúal es el patrón?
      4-5 Bee Debugging 5_instruction: Algo no está bien aquí...
      4-5 Bee Debugging 6_instruction: La flor púrpura contiene una cantidad desconocida
        de néctar. Arrela los bloques, para obtener todo el néctar de la flor.
      4-5 Bee Debugging 7_instruction: La función le falta algo...
      4-5 Bee Debugging 8_instruction: Esta función está bien, pero no fue usada correctamente.
      4-5 Bee Debugging 9_instruction: ¿Por qué la abeja no está haciendo suficiente
        miel?
      4-5 Bee Debugging Assessment 1_instruction: 'Evaluación: Arregla el código.'
      4-5 Bee Nested Loops 1_instruction: Utiliza un bucle para recolectar todo el
        néctar.
      4-5 Bee Nested Loops 2_instruction: 'Recolecta todo el néctar de cada flor.
        Utiliza un bucle anidado. '
      4-5 Bee Nested Loops 3_instruction: Recolecta todo el néctar poniendo el código
        de arranque en un bucle anidado.
      4-5 Bee Nested Loops 4_instruction: 'Recolecta todo el néctar de cada flor y
        haz miel en cada panel. Utiliza un bucle anidado. '
      4-5 Bee Nested Loops 5_instruction: Recolecta todo el néctar creando un bucle
        anidado.
      4-5 Bee Nested Loops 6_instruction: Recolecta el néctar.
      4-5 Bee Nested Loops 7_instruction: Pon este bucle dentro de otro bucle para
        crear un bucle anidado y recolectar todo el néctar de las flores.
      4-5 Bee Nested Loops 8_instruction: Recolecta todo el néctar de estas flores
        anidando un bucle de tiempo. Reemplaza el bloque interno repetidas veces con
        un bucle de tiempo.
      4-5 Bee Nested Loops 9_instruction: Recolecta todo el néctar de estas flores,
        anidando un bucle de tiempo dentro de un bloque de repetición.
      4-5 Bee Nested Loops Assessment 1_instruction: Evaluación - Recolecta todo el
        néctar y haz toda la miel mediante el uso de bucles.
      4-5 Bee Nested Loops Rows_instruction: |
        Reune todo el néctar de las filas de las flores!
        Utiliza un bucle anidado.
      4-5 Maze 1 (copy 1)_instruction: Estimada persona. Yo zombie. Debe...llegar...al
        girasol.
      4-5 Maze 1_instruction: Estimada persona. Yo zombie. Debe...llegar...al girasol.
      4-5 Maze 10_instruction: ¿Podrías llegar al girasol usando solo cuatro bloques?
      4-5 Maze 11_instruction: ¿Puedes llegar al girasol utilizando sólo seis bloques?
      4-5 Maze 12_instruction: Ok, esto es ligeramente diferente. ¿Puedes hacerlos
        con sólo seis bloques?
      4-5 Maze 13_instruction: ¡ Tráeme al cerdo!
      4-5 Maze 14_instruction: ¡Tráeme al cerdo! Utiliza la repetición hasta el bloque.
      4-5 Maze 2 (copy 1)_instruction: Lleva al zombie hasta el girasol, pero evade
        al ¡chomper!
      4-5 Maze 2_instruction: Lleva al zombie hasta el girasol, pero evade al ¡chomper!
      4-5 Maze 3 (copy 1)_instruction: Debe...llegar... al girasol.
      4-5 Maze 3_instruction: Debe...llegar... al girasol.
      4-5 Maze 4 (copy 1)_instruction: Intenta usar el bloque "repeat" para utilizar
        menos bloques.
      4-5 Maze 4_instruction: Intenta usar el bloque "repeat" para utilizar menos
        bloques.
      4-5 Maze 5 (copy 1)_instruction: ¿Puedes resolver este rompecabezas utilizando
        el menor número de bloque posibles?
      4-5 Maze 5_instruction: ¿Puedes resolver este rompecabezas utilizando el menor
        número de bloque posibles?
      4-5 Maze 6 (copy 1)_instruction: ¿Puedes resolver este rompecabezas utilizando
        el menor número de bloque posibles?
      4-5 Maze 6_instruction: ¿Puedes resolver este rompecabezas utilizando el menor
        número de bloque posibles?
      4-5 Maze 7_instruction: Estimada persona. Yo zombie. Debe...llegar...al girasol.
      4-5 Maze 8_instruction: Utiliza el bloque "repeat" para llevar al zombie hasta
        el girasol. (¡Evadiendo a los chompers!)
      4-5 Maze 9_instruction: Crear un lazo en el bloque "repetir hasta".
      4-5 Maze Assessment 1_instruction: |
        Evaluzción: LLega hasta el girasol.
      4-5 Maze Conditionals 1_instruction: Utiliza el bloque repetir hasta para llevar
        al zombie hasta el girasol.
      4-5 Maze Conditionals 10_instruction: ¿Puedes agregar sólo tres bloques para
        ayudarme a resolver un laberinto más complejo? si lo haces correctamente,
        puedo caminar cualquier camino curvo sin importar la longitud.
      4-5 Maze Conditionals 2_instruction: Utiliza el bloque repetir hasta para llevar
        al zombie hasta el girasol.
      4-5 Maze Conditionals 3_instruction: 'Utiliza el bloque "if" para dejarme decidir
        cuando voltear. Sugerencia: Sólo necesitas un bloque mas, pero aprende como
        se configura, con eso lo puedes hacer por ti mismo la próxima vez.'
      4-5 Maze Conditionals 4_instruction: Ok, esto es como con el rompecabezas pasado,
        pero recuerda como utilizaste el bloque "if" y el bloque "repeat" juntos.
      4-5 Maze Conditionals 5_instruction: ¡Yo querer girasol! Utiliza in bloque "if"
        para llevarme allá, con el menor número de bloques.
      4-5 Maze Conditionals 6_instruction: ¡Yo querer girasol! Utiliza in bloque "if"
        para llevarme allá, con el menor número de bloques.
      4-5 Maze Conditionals 7_instruction: Ok, hagámoslo de nuevo para pacticar -
        esto no es muy diferente, pero hay que estar pendiente de los ¡chompers!
      4-5 Maze Conditionals 8_instruction: Los bloques "if-else" comprueban una condición,
        y luego realizan una cosa o la otra. Para llevarme al girasol trata usando
        este nuevo bloque.
      4-5 Maze Conditionals 9_instruction: Una práctica mas con el bloque "if-else",
        ¿Puedes hacerlo corectamente en el primer intento?
      4-5 Maze Conditionals Assessment 1_instruction: Utiliza un bloque "repeat until"
        y un bloque "if-else" para llevarme al girasol usando la mínima cantidad de
        bloques posible.
      4-5 Nested Loops 1_instruction: 'Completa el código para dibujar estos triángulos.
        El primero es hecho por ti. Sugerencia: 3 triángulos en una rotación de 360
        grados.'
      4-5 Nested Loops 10_instruction: Dibuja la última fila de estrellas de esta
        bandera, por medio de un bucle de bloques proporcionados. Las estrellas son
        de 50 píxeles, pero recuerda que las estrellas por si mismas son 30 píxeles
        de ancho.
      4-5 Nested Loops 11_instruction: ¿Puedes dibujar estas 10 plazas de esta acera,
        usando un bucle anidado? Cada cuadrado tiene 30 píxeles.
      4-5 Nested Loops 12_instruction: ¿Puedes dibujar estos 36 triángulos utilizando
        un bucle anidado?
      4-5 Nested Loops 2_instruction: 'Ahora anida este bucle dentro de otro bucle
        para dibujar 10 triángulos.  Esto se llama un bucle anidado.  Sugerencia:
        Todos 10 triángulos completan una rotación de 360 grados.  '
      4-5 Nested Loops 3_instruction: "Crea un sol anidando el código de arranque
        en otro bucle. Esto se llama un bucle anidado. \r\n"
      4-5 Nested Loops 5_instruction: has un bucle con el código dado para crear un
        molino de viento.
      4-5 Nested Loops 6_instruction: ¿Puedes dibujar un hexágono con un bucle del
        código del triángulo?
      4-5 Nested Loops 7_instruction: 'con el bucle repite este diseño 10 veces. ¿Cuánto
        tienes que girar el bucle cada vez? (Pista: ¿Cuanto es 360 dividido por 10?)'
      4-5 Nested Loops 8_instruction: 'Repite el bucle 6 veces. ¿Cuánto tienes que
        girar cada vez el bucle? (Pista: ¿Cuánto es 360 dividido por 6?)'
      4-5 Nested Loops 9_instruction: Dibuja los dientes en la boca de cocodrilo!
      4-5 Nested Loops Assessment 1_instruction: Usar un bucle anidado para completar
        el diseño.
      4-5 While Loops 1_instruction: Mueveme al agujero y rellena con dos palas de
        tierra, usando el bloque de "relleno".
      4-5 While Loops 2_instruction: Mueveme a la pila de tierra y remueve con 5 paleos,
        usando el bloque 'remover'.
      4-5 While Loops 3_instruction: 'Mueveme a la pila y remueve todo, despues mueveme
        hacia el agujero y llenalo completamente.  Sugerencia: Utiliza tan pocos bloques
        como sea posible.'
      4-5 While Loops 4_instruction: 'Wow, encontre un agujero realmente profundo!
        no se cuantas paleadas de tierra necesita. ¿Puedes escribir un programa que
        llene hasta que el suelo este parejo? Sugerencia: trata usando el bucle mientras.'
      4-5 While Loops 5_instruction: Wow, ahora hay dos agujeros  muy profundos. ¿Puedes
        escribir un programa que llene los dos hasta que el suelo este parejo?
      4-5 While Loops 6_instruction: Wow, ahora hay un monton de tierra! ¿Puedes escribir
        un programa que quite todo eso para que el suelo quede parejo?
      4-5 While Loops 7_instruction: ¡Wow, ahora hay tres montones de tierra! ¿Puedes
        escribir un programa que elimine cada uno de ellos hasta que la tierre quede
        plana?
      4-5 While Loops 8_instruction: ' Hay un hueco muy profundo y mucha tierra amontonada.
        ¿Cúantas paladas son necesarias para aplanar la tierra? Sugerencia: Utiliza
        el circuito de bloque "while" para ambas.'
      4-5 While Loops Assessment 1_instruction: Existen un montón de huecos y pilotes.
        Ayúdame a llenarlos y removerlos para aplanar la tierra.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin
        another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: Utiliza un circuito anidado
        para completar el diseño.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click run to see what your game can currently do (not much!), update any variables
        you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The 'update-target' function takes the
        target's current x value, and returns an updated value. Complete the 'update-target'
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The 'update-danger' function should work
        just like 'update-target', except that the danger should move from the right
        side over towards the left. Complete the 'update-danger' function to make
        the danger fly across the screen.
      Big Game Animation 4_instruction: |
        At this point your game your danger should
        run across the screen from right to left, and your target should run across
        from left to right. They don't ever come back on screen once they've left,
        but we'll take care of that later. Take a minute to make sure your game is
        working like you want it to, and then click finish to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Now that your onscreen? function is checking
        safe-left? and safe-right? we can complete those functions. Go to the "Functions"
        section of the toolbox and complete the safe-left? function so that it returns
        true if the sprite's x coordinate is greater than -50. If you're successful
        you should see the Danger go off the left side and then return on right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        We've provided a couple of empty functions
        for safe-left? and safe-right? The first thing you need to do is complete
        the onscreen? function so that it checks whether both safe-left? and safe-right?
        are true. TIP - even after you add safe-left? and safe-right? your sprites
        won't return to the screen - why do you think that is?
      Big Game Booleans 5_instruction: |
        At this point your danger should run across
        the screen from right to left, your target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        Finish to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving target and danger, both of which return to the screen once
        they've left, and a player that responds to keyboard input. Click run to
        see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Let's fix this distance function so our
        collision detection works properly. Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy). We've provided a working
        line-length function to help you out.
      Big Game Collision 4_instruction: |
        The 'distance' function returns the distance
        between two sprites. Complete the 'collide?' function so that it returns
        true if the distance between two points is less than 100 pixels apart. If
        you're successful, your sprites will instantly collide - why do you think
        that is?
      Big Game Complete (copy 1)_instruction: |
        A demo of the completed CS in Algebra
        Big Game project
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so the player moves up when
        the up arrow is pressed, and moves down when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the 'title' and 'subtitle' variables
        and change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the 'bg' variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for Addition which
        takes two numbers and returns their sum. Use this Addition block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a multiplication block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function "f" that takes a parameter
        "x" and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function 'f'
        every time; create a function called 'times-ten' that should take a parameter
        'x' and return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called 'half' that takes
        a number 'x' and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called "cube" - this function should have a domain of Number, range
        of Number, and return the given number to the power of 3. Make sure to write
        two example cases! When you're done, use your new function to calculate 7
        cubed.
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou
        need to track the cost of making each cookie, the money paid, and the\ntotal
        profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe
        function `cost`, which takes in the number of cookies you intend to sell,\nand
        returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function `sales` which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function `profit`, which takes in the number of cookies you sold, and
        gives you back the total profit you make from selling your cookies, accounting
        for the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor
        the function \"rocket-height\" that states it has a range of Number, domain\nof
        Number, and should return the height of the rocket traveling at 15 m/s\nafter
        a given number of seconds. Let's write an example case now for the\nheight
        of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: "In the last puzzle you wrote a contract for the\nfunction
        \"rocket-height\" that states it has a range of Number, domain of\nNumber,
        and should return the height of the rocket traveling at 15 m/s after\na given
        number of seconds. Let's write an example case now for the height\nof the
        rocket at 3 seconds.\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the "age" variable to 17 years.
        Can you write an expression that calculates "age" in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called "age". Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called "age-in-months"
        - use the variable "age" to set "age-in-months"
      Calc Vars 2_instruction: |
        Can you write an expression that calculates "age"
        in months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      course 1 artist 1 level 10_instruction: |
        Draw the dashed line by using both
        the jump and draw blocks
      course 1 artist 1 level 9_instruction: Draw this using three lines
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: ¿Puedes llevarme hasta el cerdo usando 5
        bloques?
      Course 4 2_instruction: La abeja solo quiere néctar ahora mismo. Recuerda, no
        todos los objetos son flores, así que chequea, para solo recoger néctar de
        las flores.
      Course 4 Artist 1_instruction: Ayúdame a terminar de dibujar mi caja. (Cada
        línea es de 300 píxeles de largo)
      Course 4 Artist 10_instruction: ¡ Es hora de jugar gratis! Diviértete y dibuja
        lo que quieras.
      Course 4 Artist 2_instruction: ¿Puedes enlazar este código para que dibuje de
        gris el cuadrado?
      Course 4 Artist 3_instruction: Muy bien, trat de averiguar que sucede si ejecutas
        este código (o presionas "Run" para comprobarlo). Entonces repítelo varias
        veces hasta completar el dibujo.
      Course 4 Artist 4_instruction: ¿Cúantos grados tiene un círculo? Rellena el
        bloque de repetición con ese número para crear un círculo de colores.
      Course 4 Artist 5_instruction: Dibuja la otra mitad de este diseño de tal manera
        que sea simétrico. Los triángulos son equiláteros y tienen 50 píxeles de longitud.
      Course 4 Artist 6_instruction: |
        Completa el código para dibujar estos triángulos.
        Sugerencia: 3 triángulos en una rotación de 360 grados.
      Course 4 Artist 7_instruction: 'Ahora anida este circuito dentro de otro circuito
        para dibujar 3 triángulos. Esto es llamado un circuito anidado. Sugerencia:
        Todos los 10 triángulos completan una rotación de 360 grados.'
      Course 4 Artist 8_instruction: Dibuje este sol enlazando este bloque de código
        íntegramente 12 veces.
      Course 4 Artist 9_instruction: 'Continúe con este diseño 10 veces y asegúrese
        que cada forma que dibuja apunte hacia adentro.  Aquí hay una sugerencia cuánto
        más debe apuntar: ¿Cuánto es 360 dividido entre 10?'
      Course 4 Artist Binary 1_instruction: Aquí hay una función que toma una cadena
        binaria de 0 y 1 e instruye al artista a que gire de izquierda a derecha,
        de arriba hacia abajo, llenando  los cuadrados cuando ve 1 e ignorándolos
        cuando ve 0. Corre este código para ver como el artista usa el binario para
        dibujar el patrón.
      Course 4 Artist Binary 2_instruction: ¿Cuántas de estas secuencias binarias
        podría enlazar 8 veces para dibujar esta imagen?
      Course 4 Artist Binary 3_instruction: ¿Puede dibujar este molde enlazando una
        secuencia binaria de tres dígitos?
      Course 4 Artist Binary 4_instruction: Cada secuencia binaria representa una
        fila de esta figura.  ¿Puede re acomodarla de tal manera que dibuje una cara
        con una sonrisa en lugar de una cara de aspecto fruncido?
      Course 4 Artist Binary 5_instruction: ¿Cual de las secuencias binarias de 6
        dígitos, repetidas 11 veces, dibujará esta imagen?
      Course 4 Artist Binary 6_instruction: ¿Cuál es la secuencia binaria más corta
        que puede repetir para dibujar esta imagen?
      Course 4 Artist Binary 7_instruction: Termine este dibujo.
      Course 4 Artist Binary Free Play 2_instruction: 'Juego Libre: Aquí tiene un
        lienzo de alta resolución para dibujar - 16 bits por 16 bits!'
      Course 4 Artist Binary Free Play_instruction: 'Juego Gratis: Dibuje lo que quiera
        con binarios!'
      Course 4 Artist For  Functions 10_instruction: Elevemos un poco el nivel de
        dificultad ¿Puede dibujar una forma de estrella usando el la función "Dibuje
        una Línea Cuadrada"? ¡Buena suerte!
      Course 4 Artist For  Functions 11_instruction: Elevemos un poco el nivel de
        dificultad ¿Puede dibujar una forma de estrella usando el la función "Dibuje
        una Línea Cuadrada"? ¡Buena suerte!
      Course 4 Artist For Loops 1_instruction: 'Dibuje este triángulo que tiene un
        tamaño de 50 pixeles.  Sugerencia: Use un bloque de repetición.'
      Course 4 Artist For Loops 10_instruction: 'Juego Gratis: Diviértase dibujando
        lo que le guste con los bloques que ha aprendido a usar'
      Course 4 Artist For Loops 11_instruction: '¿Recuerdas cuando usamos una variable
        para controlar el número de lados de una forma? Este patrón empieza con un
        triángulo y agrega un cada lado a la vez hasta que dibuja un decágono (10
        lados). cada lado debe ser de 100 píxeles de largo. Sugerencia: 360 dividido
        por el número de lados de una forma, es el número de grados que necesitarás
        para girar.'
      Course 4 Artist For Loops 12_instruction: 'Eso se ve muy bien, pero ahora me
        gustaría que dibuje cada forma junto a la otra.  Esta vez, cada lado es de
        20 pixeles.  Use un bloque de salto para saltar 20 pixeles adelante después
        de cada forma. '
      Course 4 Artist For Loops 13_instruction: ¡Hmmm, esas formas están creciendo
        a cada instante! ¿No solucionamos este problema con las variables? ¿Cómo podemos
        usar la variable de contar para hacer lados mas pequenos, ya que hay mas de
        ellos? En lugar de mover hacia adelante estableciendo una cantidad, tratemos
        de avanzar (100/counter) píxeles.
      Course 4 Artist For Loops 14 _instruction: Si girara un poco más o menos de
        lo que normalmente haría para una forma, crearía un efecto más nítido.  Intente
        girar 89 grados para crear esta espiral cuadrada torcida.
      Course 4 Artist For Loops 14_instruction: Si girara un poco más o menos de lo
        que normalmente haría para una forma, crearía un efecto más nítido.  Intente
        girar 89 grados para crear esta espiral cuadrada torcida.
      Course 4 Artist For Loops 15_instruction: 'Juego Gratis: Intente hacer algunos
        dibujos propios usando Para Vueltas.  Hemos añadido también algunas variables
        genéricas para su uso.'
      Course 4 Artist For Loops 2_instruction: 'He puesto un código para dibujar un
        triángulo dentro de una iteración que cuenta de 50 a 100 por 10.  Revise cómo
        he creado el código y presione "Ejecutar" cuando esté listo para verlo en
        acción. '
      Course 4 Artist For Loops 3_instruction: El triángulo más pequeño tiene 20 píxeles
        de lado, el más grande tiene 200 píxeles de lado y cada triángulo es 20 píxeles
        más grande que el anterior. Actualiza el bucle "for" para dibujar estos triángulos.
      Course 4 Artist For Loops 4_instruction: Usa un bucle "FOR" para dibujar estos
        cuadrados. Empiezan a 50 píxeles de largo, el más grande es de 300 píxeles
        de largos, y cada cuadrado es 25 píxeles más grande que el anterior. Te he
        dado casi todo el código que vas a necesitar - haz perdido un bloque, ¿cuál
        es?
      Course 4 Artist For Loops 5_instruction: ¡Buen trabajo en el último rompecabezas!
        Usemos ese bloque variable "counter" de nuevo para dibujar esta asombrosa
        pintura.
      Course 4 Artist For Loops 6_instruction: ¡Juego gratis! Intenta usando un circuito
        para dibujar un patrón de forma creciente con tu propio diseño.
      Course 4 Artist For Loops 7_instruction: Que pasa si eliminas el "repeat 3"
        de este algoritmo, manteniendo los bloques "move" y "turn" en el circuito.
        En este triángulo en espiral, cada lado es 20 píxeles mas largo que el anterior.
      Course 4 Artist For Loops 8_instruction: La línea mas pequeña de este espiral
        cuadrado es 10, el mas largo es 200, y cada línea es 10 píxeles mas larga
        que la anterior. ¿Puedes llenar los bloques faltantes para completar este
        sorprendente dibujo?
      Course 4 Artist For Loops 9_instruction: ¿Puedes hacer un espiral? avanza de
        1 a 75 píxeles, incrementando de  1 a 1 píxeles.
      Course 4 Artist Functions 1_instruction: ¿Puedes dibujar en cuadrado que tiene
        100 píxeles de longitud, utilizando un circuito?
      Course 4 Artist Functions 10_instruction: ¿Cúal bloque necesitas agregar para
        conseguir que el triángulo se ubique en la cima del cuadrado?
      Course 4 Artist Functions 11_instruction: Mira este código que dibuja un cubo
        - ¿Puedes moverlo en una función llamada "Draw a cube"?
      Course 4 Artist Functions 12_instruction: La función circuito cudrado para dibujar
        una línea
      Course 4 Artist Functions 13_instruction: Mira, tenemos una nueva función llamada
        "draw a line of squares". No dudes en echar un vistazo dentro de la función
        de bloque para ver como se construye. Haz click en "Run" cuando  estés listo
        para el siguiente rompezabezas.
      Course 4 Artist Functions 14_instruction: ¡Estás haciéndolo muy bien! Usemos
        tu nueva función "Draw a line of squares" para dibujar un cuadrado. Recuerda
        que cada cuadrado es de 40 píxeles de longitud.
      Course 4 Artist Functions 15_instruction: '¡Demos un pequeño paso hacia adelante!
        ¿Puedes dibujar una forma de estrella usando la función "dibuja una línea
        de cuadrados"? ¡Buena Suerte! Sugerencia: Debes girar a 144 grados'
      Course 4 Artist Functions 2_instruction: '¿Puedes dibujar 3 cuadrados de 20
        píxeles separado uno del otro? Sugerencia: cada cuadrado es de medida 100
        píxeles '
      Course 4 Artist Functions 3_instruction: 'Usando la función de bloque "dibuja
        un cuadrado" ¿Puedes dibujar este dibujo? Sugerencia: cada cuadrado debe ser
        de 120 píxeles entre uno y otro.'
      Course 4 Artist Functions 4_instruction: '¿Estás listo para crear tu propio
        "Function Block"? Haz click en el bloque "functions" en la caja de herramientas,
        donde dice "draw a triangle", entonces crea un triángulo como lo has hecho
        con anterioridad con los bloques acción y circuitos. Haz click en guardar
        y cerrar en la esquina superior derecha . Sugerencia: Crea un triángulo que
        tiene 100 píxeles de longitud. ¡Buena suerte!'
      Course 4 Artist Functions 5 OLD_instruction: Tratemos de usar nuestras dos funciones
        para dibujar una casa - ¿Qué se necesita arreglar en este código para dibujar
        la casa correctamente?
      Course 4 Artist Functions 5_instruction: 'Usando la función de bloque "dibuja
        un cuadrado" ¿Puedes dibujar este dibujo? Sugerencia: cada cuadrado debe ser
        de 120 píxeles entre uno y otro.'
      Course 4 Artist Functions 6_instruction: ¿Cúal bloque necesitas agregar para
        conseguir que el triángulo se ubique en la cima del cuadrado?
      Course 4 Artist Functions 7_instruction: ¿Puedes dibujar una línea de cuadrados
        usando la función de cuadrado? Cada cuadrado es 40 píxeles de longutud.
      Course 4 Artist Functions 8_instruction: '¿Le estás agarrando el tiro de como
        usar la función de los bloques? Modifiquemos este cuadrado de medida 200 píxeles.
        Sugerencia: haz click en "edit" para cambiar el tamaño del "draw a square"
        en la función editor. Recuerda hacer click en "guardar y cerrar" para salir
        de la función editor.'
      Course 4 Artist Functions 9_instruction: Te hemos dado la mayor parte del código
        para crear una función. Sin embargo parece que falta algo. ¿Puedes completar
        esta función de bloques?
      Course 4 Artist Params 1_instruction: Editemos una función que dibuje un cuadrado
        de 50 píxeles cada lado
      Course 4 Artist Params 10_instruction: ¡Puedes llamar una función dentro de
        otra función! Utilizando tu función "shape" como base, crea 3 formas de casa
        cada una de 20 píxeles mas larga que la anterior, empezando con 50 píxeles
        de longitud. Usar un circuito de contar puede ser útil.
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: Utilice la función "pinwheel" (molinete)
        para dibujar cada una de estas formas. La longitud del lado de cada imagen
        es 50.
      Course 4 Artist Params 13_instruction: 'Freeplay: Aquí están las funciones que
        has escrito y un algunas más para que juegues. Dibuja algo impresionante!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Impresionante, ¿puedes dibujar cada uno
        de estos triángulos con esa nueva función? El primero es 25 píxeles de largo,
        el segundo es de 50, y el tercero es de 75. '
      Course 4 Artist Params 4_instruction: ¿Puede agregar una nueva función llamada
        cuadrado? También debe tomar un parámetro de longitud, al igual que el triángulo.
        Esta vez dibuja 3 cuadrados, 25, 50 y 75 píxeles de lado, aparte uno de 100
        píxeles.
      Course 4 Artist Params 5_instruction: Usa tus dos funciones para dibujar esta
        imagen. Para hacer esto más fácil, usa un bucle con un parámetro de "contador".
      Course 4 Artist Params 6_instruction: "Vamos a editar esta función \"dibujar
        una forma\".\nYa tiene un parámetro de \"longitud\". Ahora, vamos  a editar
        la función para añadir un parámetro \"lados\". Recuerda que el ángulo de una
        forma determinada es 360 dividido por la cantidad de lados que tiene. Sugerencia:
        las longitudes para cada forma son: el triángulo 100 píxeles, el hexágono
        es 25 píxeles y el cuadrado es de 50 píxeles. \n"
      Course 4 Artist Params 7_instruction: 'Puedes dibujar estas formas rellenando
        el "???" El cuadrado y triángulo son 100 píxeles de tamaño mientras que el
        hexágono es 75 píxeles de tamaño. '
      Course 4 Artist Params 8_instruction: "¿Puedes calcular cómo dibujar esta forma?
        \nAquí hay una pista, crea una nueva función con 6 lados llamada hexágono.
        \n"
      Course 4 Artist Params 9_instruction: ¿Recuerdas cuando usamos el bucle con
        Contador pero habíamos quitado un bucle dentro? Vamos a divertirnos y usa
        la función "dibujar una forma" con parámetros de "lados" y "longitud". ¿Puede
        volver a crear estas formas? El contador de cuadrados debe ser 5/100/5, el
        contador del triángulo debe ser 10/100/10 y el hexágono es 2/100/2.
      Course 4 Artist Var 9_instruction: 'Aquí está el algoritmo para dibujar un triángulo,
        modificarlo para que utilice la variable "lados". Reemplazar el número 3 con
        la variable "lados". Sugerencia: Recuerda que debes utilizar el bloque de
        "set sides to".'
      Course 4 Artist Vars 1_instruction: ¿Puedes ayudarme a dibujar un triángulo?
        Es de 100 píxeles de largo en cada lado.
      Course 4 Artist Vars 10_instruction: Aquí encontrarás un algoritmo que dibuja
        un triángulo de pequeños triángulos. ¿Podrías modificarlo usando la variable
        de "sides" para dibujar cada triángulo? Observa a través del código y cada
        vez que veas el número 3, reemplázalo con tu variable "sides". Recuerda el
        uso del bloque "set sides".
      Course 4 Artist Vars 11_instruction: Aquí está el mismo algoritmo que ideamos
        con el último rompecabezas - ¿Qué debes establecer en la variable "sides"
        para dibujar este dibujo de cuadrados?
      Course 4 Artist Vars 12_instruction: Vamos a poner la variable "sides" en 5.
        Si agrego mas lados a este algoritmo, ¡mas grande es el patrón entero!. Agreguemos
        una nueva variable llamada longitud "lengh" y úsala si tienes que avanzar
        "move forward". Establece la variable longitud "lengh" a 75 para esta figura.
      Course 4 Artist Vars 13_instruction: Entre mas lados tenga una figura, mas cortos
        estos lados deben ser, para que el patrón se ajuste a la pantalla. En lugar
        de establecer manualmente la variable de longitud "lengh" usemos la variable
        lados "sides" y un bloque de matemáticas para definir la longitud "lengh".
        Escoje la ecuación correcta de la caja de herramientas para establecer la
        variable de  longitud "lengh" además de actualizar la variable lados"sides".
      Course 4 Artist Vars 14_instruction: 'Juego Gratis: revísalo, ahora tu algoritmo
        está anidado dentro de otro circuito. Experimenta cambiando los valores de
        tus dos variables para dibujar patrones asombrosos.'
      Course 4 Artist Vars 2_instruction: En lugar de avanzar por 100 "moving forward
        by 100", el bloque mover "move" ahora referencia la variable longitud "lengh".
        ¿ Podrías establecer la longitud "lengh" a 150 para dibujar este nuevo triángulo?.
      Course 4 Artist Vars 3_instruction: 'Aquí es un bucle que dibuja un cuadrado,
        pero algo esta mal. ¿Puedes arreglarlo para que utiliza la variable "largo"
        para averiguar que tan largo debe se cada lado? '
      Course 4 Artist Vars 4_instruction: Ahora quiero hacer un rectángulo que es
        dos veces tan alto como ancha. Tenemos una variable llamada "ancho" que se
        encuentra a 100. ¿Puedes usar los bloques de matemáticas para completar el
        código?
      Course 4 Artist Vars 5_instruction: Utiliza las variable "caras" para controlar
        cuántas veces el bucle se repite.
      Course 4 Artist Vars 6_instruction: 'Hmmm, trata de cambiar la variable "lados"
        a 4 del código en el problema anterior, pero sigue dibujando un triángulo.
        ¿Puedes usar la variable "caras" (junto a un bloque de matemáticas) para asegurarse
        de que se especifico la cantidad correcta? Sugerencia: 360 dividido por el
        número de lados le dará el número de grados a girar.'
      Course 4 Artist Vars 7_instruction: ¿Puedes modificar la variable "caras" para
        ayudarme a dibujar este hexágono?
      Course 4 Artist Vars 8_instruction: 'Juego libre: Experimento con el número
        de lados de esta forma. ¿Puedes cambiar el algoritmo de modo que el tamaño
        total de la forma sigue siendo el mismo, no importa cuántos lados tengá? Consejo:
        Tendrás que usar tus bloques de matemáticas (360 dividido por "caras" en dos
        lugares esta vez) '
      Course 4 Artist Vars 9_instruction: Modificar este algoritmo para utilizar la
        variable "caras" en lugar de un número fijo para dibujar un triángulo. Reemplazar
        el número 3 con la variable "caras" y utilizar el bloque de "establecer lados".
      Course 4 Bee 1_instruction: 'La abeja no puede decir si se trata de una flor
        o un panal de miel. Compruebe primero si se trata de una flor o un panal de
        abejas y entonces sólo recogen néctar de si es una flor. '
      Course 4 Bee 2_instruction: Revisa cada uno de los objetos para ver si es una
        flor - ¿si es?, recoge el néctar.
      Course 4 Bee 3_instruction: El objeto desconocido es una flor o un panal de
        miel. Usa el bloque if/else para recoger el néctar, "if" si es una flor, "else"
        hacer miel (porque entonces sería un panal de abejas).
      Course 4 Bee 4_instruction: Esta flor púrpura puede tener 3, 2 o 1 néctar. Aquí
        un bloque if-else se combina con otro bloque if-else para crear un bloque
        if,else-if, else. Completa la solución para recoger la cantidad desconocida
        de néctar.
      Course 4 Bee For Loops 1_instruction: Utilizar un bucle para recolectar el néctar
        de cada flor.
      Course 4 Bee For Loops 10_instruction: Si tu ciclo es regresivo, se resta el
        incremento de la variable contador en cada bucle. Lo que debería ser un incremento
        a recoger néctar 9, luego 6 y 3 ?
      Course 4 Bee For Loops 2_instruction: Aquí es un nuevo tipo de lazo, llamado
        el bucle "for" . Este particular bucle for contará de 1 a 5 por 1 y ejecutar
        el contenido del bucle cada vez cuenta. Ayudar a la abeja el néctar.
      Course 4 Bee For Loops 3_instruction: Puede resolver este problema utilizando
        un bucle para contar del 1 al 3 por 1. Ahora vamos a obtener un néctar!
      Course 4 Bee For Loops 4_instruction: Recoge todo el néctar de las flores. Me
        pregunto si hay una manera más fácil de hacer esto...
      Course 4 Bee For Loops 5_instruction: 'Ah, el bucle esto hace mucho más fácil!
        Usando la variable "contador" de la de circuito a circuito el "obtener néctar"
        bloquea el mismo número de veces que el bucle. Wow! Eso es un montón de bucles.
        Todo el código que necesitas, echa un vistazo a cómo es juntar a continuación,
        haga clic en ejecutar y ver cómo funciona. '
      Course 4 Bee For Loops 6_instruction: También puedes utilizar un bucle a contar
        hacia atrás. Trata de recoger este néctar por la cuenta regresiva del 5 al
        1 por 1.
      Course 4 Bee For Loops 7_instruction: Usa tu variable "contador" de bucle para
        el controlar que tan lejos debe moverse horizontalmente.
      Course 4 Bee For Loops 8_instruction: ¿Puedes usar la variable del bucle para
        controlar el movimiento y la recolección de néctar?
      Course 4 Bee For Loops 9_instruction: El último número en tu bucle for se llama
        "incremento", y cada vez que se ejecuta el bucle la variable contador cambia
        por el incremento, Trata de recoger la flores usando un incremento de 2.
      Course 4 Bee Params 1_instruction: |
        Use the function "get 3 nectar" which
        turns, moves to collect the nectar, and then returns to the original location.
        Write a sequence to collect all of the nectar using "get 3 nectar."
      Course 4 Bee Params 2_instruction: |
        Modify the "get 3 nectar" function so
        it makes me turn right instead of left to the flowers.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Now there are flowers on both
        sides! Maybe you can use a parameter so that the same function works for flowers
        on either side. I've added a parameter called "direction" to the function.
        If the "direction" parameter equals 0 I should turn left, if it's 1 I should
        turn right.
      Course 4 Bee Params 3_instruction: |
        Now there are flowers on both sides! I've
        added a parameter called "direction" to the function. Use the "left" and
        "right" variables to control direction. Fill in the rest of the function
        definition and then click "Save and Close."
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Try using your new function to
        collect all of the flowers. Remember, 0 = left and 1 = right.
      Course 4 Bee Params 4 backup_instruction: |
        Wouldn't it be nice if we could
        collect all of these nectars with the a single function? Try adding a new
        parameter to your function called "nectars" to control the amount of nectar
        to collect. You'll probably want to rename the function too!
      Course 4 Bee Params 4_instruction: |
        Try using your new function to collect
        all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 5_instruction: ¿Vamos a empezar desde cero - Con un parámetro
        de dirección, se puede crear una nueva función llamada "consigue 5 néctares"?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 6_instruction: |
        Wouldn't it be nice if we could collect
        all of these nectars with the a single function? Try adding a new parameter
        to your function called "nectars" to control the amount of nectar to collect.
        You'll probably want to rename the function too!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 7_instruction: |
        Try using your new function to collect
        all of this nectar.
      Course 4 Bee Params 8_instruction: |
        Oooh, now there's honey to deal with too!
        How could you update your function to either get nectar or make honey.
      Course 4 Binary 1_instruction: |
        Here's a function that takes a binary string
        of 1's and 0's and instructs the farmer to turn on the go from left to right,
        top to bottom, turning on the squares where the number has a zero. Run the
        code provided to see how the farmers uses binary to draw an image.
      Course 4 Binary 2_instruction: |
        What binary string could you loop 8 times to
        draw this image? Hint: the number "1" fills a hole.
      Course 4 Binary 3_instruction: |
        Can you draw this pattern by looping a single
        binary string?
      Course 4 Binary 5 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 5_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 6 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 6_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 7 (copy 1)_instruction: |
        You can complete the most of this
        image by looping a 5 bit binary number - then you'll need one more 4 bit
        number to get the bottom right-hand corner.
      Course 4 Binary 7_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 8_instruction: |
        You can complete the most of this image by
        looping a 5 bit binary number - then you'll need one more 4 bit number to
        get the bottom right-hand corner.
      Course 4 Maze 1_instruction: Get the angry bird to the pig!
      Course 4 Maze 2_instruction: Avoid the TNT!
      Course 4 Maze 3_instruction: 'Program the angry bird to get to the pig. '
      Course 4 Maze 4_instruction: Intenta usar el bloque "repeat" para utilizar menos
        bloques.
      Course 4 Maze 5_instruction: ¿Puedes resolver este rompecabezas utilizando el
        menor número de bloque posibles?
      Course 4 Maze 6_instruction: ¿Puedes resolver este rompecabezas utilizando el
        menor número de bloque posibles?
      Course 4 Play Lab For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Lab Params 1 (copy 1)_instruction: |
        Here's a function called
        "jump" that causes your main character to jump up 100 pixels. Use the jump
        function to collect all of the flags.
      Course 4 Play Lab Params 1_instruction: |
        Here's a function called "jump"
        that causes your main character to jump up 100 pixels. Use the jump function
        to collect all of the flags.
      Course 4 Play Lab Params 10_instruction: |
        We've added one last function for
        you to use. Program your game to call the "level_up" function if "player_points"
        > 10. Play the game, and make it past level 4 to move to the next puzzle.
      Course 4 Play Lab Params 2 (copy 1)_instruction: |
        Now we've got flags that
        are too high for our current jump! Let's add a parameter to our jump function
        called "height." The up arrow should jump 100 pixels, but the down arrow
        should jump 300 pixels. Watch out, you don't want to hit the <future barrier
        above lower flags>!
      Course 4 Play Lab Params 2_instruction: |
        Now we've got flags that are too
        high for our current jump! Let's add a parameter to our jump function called
        "height." The up arrow should jump 200 pixels, but the down arrow should
        jump 100 pixels. Click "edit" on the jump function and update it so that
        it uses the height parameter instead of just jumping 100 pixels.
      Course 4 Play Lab Params 3_instruction: "Let's add another parameter to the\njump
        function so that we can use it with other actors. Each actor is represented\nby
        a number, starting from one. Edit the \"jump\" function so that the definition\nincludes
        the \"actor\" parameter. \n"
      Course 4 Play Lab Params 4_instruction: |
        Here's a function called "patrol."
        Edit it to move the Cat up 400 pixels and then down 400 pixels.
      Course 4 Play Lab Params 5_instruction: |
        Fill in the "actor" parameter input
        so that we can call the "patrol" function for each of the actors. Remember,
        the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6_instruction: |
        Add another parameter called "speed"
        to the "patrol" function. Use a "set speed" block with the new "speed"
        parameter.
      Course 4 Play Lab Params 7_instruction: |
        Use the arrow keys to control the
        Dog and collect all of the flags.
      Course 4 Play Lab Params 8_instruction: |
        Use a "when touching" block to send
        the Dog back to the top-left if the Dog touches any of the other actors.
      Course 4 Play Lab Params 9_instruction: "Here's one of the games we were working\non
        earlier. We've added a function called \"score_points\" that takes a parameter\n\"points.\"
        Edit the function so that the \"points\" parameter is added to\nthe \"player_points\"
        variable. Have the Dog score 10 points to move on to\nthe next puzzle. \n"
      Course 4 Play Lab Vars 1_instruction: |
        You don't have to write any code, just
        hit "run" to play the game! In this game, you're the Dog who is trying
        to collect more flags than the Cat. Use the down arrow to control the Dog.
        Press "Finish" when you're done playing.
      Course 4 Play Lab Vars 2_instruction: |
        That race wasn't very fair! Change
        the "dog_speed" variable to make sure you can collect more flags than the
        Cat. The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3 (copy 1)_instruction: |
        Here's a new kind of game!
        Use the left and right arrows to move, and the up arrow to jump. See if you
        can collect all of the flags.
      Course 4 Play Lab Vars 3_instruction: |
        Here's a new kind of game! Use the
        left and right arrows to move, and the up arrow to jump. See if you can collect
        all of the flags.
      Course 4 Play Lab Vars 4_instruction: |
        Now we're using a variable called "height"
        to control how high the dog can jump. Update the "height" variable so that
        the dog can jump high enough to reach all the flags. Hint: the new flags are
        200 pixels high.
      Course 4 Play Lab Vars 5_instruction: "Let's build a game! First we'll need\na
        score. Use the \"set points to\" block to set the score to 10. \n"
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Cool, now we've got our score
        variable, but how are we going to make it useful? How about adding to your
        score variable each time you hit the enemy with a fireball? Use the "when
        actor 2 touches anything" event to trigger an update to your score when your
        fireballs hit the cat. You can increment the score by setting score = score
        + 1. Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 6_instruction: |
        In our game, how should we score points?
        Add 1 to your "points" variable each time the Dog hits the Cat with a fireball.
        Use the "when actor 2 touches anything" event to trigger an update to your
        score. You can increment your variable by setting "points = points + 1."
        Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 7 (copy 1)_instruction: |
        Nice, now let's make sure
        this game isn't too easy - any time you get hit by a fireball, you should
        lose a point. Let's also start with 10 points so it's not too hard. Let
        your score drop down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 7_instruction: |
        Nice, now let's make sure this game
        isn't too easy - any time the Dog (actor 1) gets hit by a fireball, you should
        lose a point. Start with 10 points so it's not too hard. Let your score drop
        down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Alright, one last thing for
        this game - let's set it up so the player can win (or lose). Use a forever
        loop to check the value of score - if score is ever greater that 20, make
        the enemy vanish. If the score is every less than 0, make the player vanish.
        Click "Finish" when the game works like you'd like it to.
      Course 4 Play Lab Vars 8_instruction: |
        Let's set up this game so the Dog can
        win (or lose). Use a forever loop to check the value of score - if score is
        ever greater that 20, make the enemy (the Cat) vanish. If the score is ever
        less than 0, make the player (the Dog) vanish. Click "Finish" when the game
        works like you'd like it to.
      Course 4 Play Lab Vars 9_instruction: |
        Free Play time! Here are all of the
        variables we've played with so far, as well as a few more in case you want
        them. Make a game or story that uses these variables. Hint: scroll down to
        see all the commands in the work space.
      Course 4 Play Lab Vars_instruction: |
        Alright, one last thing for this game
        - let's set it up so the player can win (or lose). Use a forever loop to
        check the value of score - if score is ever greater that 20, make the emeny
        vanish. If the score is every less than 0, make the player vanish.
      Course 4 Play Labs For Loops 1_instruction: |
        Let's make the dog speak every
        number from 1 to 100. Use a for loop and the counter block to speak the counter
        variable each time the loop is run.
      Course 4 Play Labs For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Labs For Loops 3_instruction: |
        If we count by larger numbers,
        we count even higher in the same amount of time. Try making the dog count
        from 10 up to 1000, by 10 at a time.
      Course 4 Play Labs For Loops 4 (copy 1)_instruction: |
        Changing the increment
        can be helpful, but we're still counting linearly (each number is the same
        distance from the last) What if I wanted to count exponentially? Without changing
        the settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter
        squared)?
      Course 4 Play Labs For Loops 4_instruction: |
        Changing the increment can be
        helpful, but we're still counting linearly (each number is the same distance
        from the last) What if I wanted to count exponentially? Without changing the
        settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter squared)?
      Course 4 Play Labs For Loops 5_instruction: |
        In the last stage we counted the
        square of each number. Try changing "counter ^ 2" to "counter ^ 3" to
        count the cube of each number (1, 8, 27, 64, 125, 216, 343….)
      Course 4 Play Labs For Loops 6_instruction: |
        You may recall that a prime number
        is any whole number that is only divisible by itself and 1. Use the "is_prime"
        function to speak out only the prime numbers from 1 to 100.
      Course 4 Play Labs For Loops 7_instruction: |
        Could you use a for loop to help
        me speak the sequence 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 8_instruction: |
        What for loop would make me speak
        19, 27, 35, 43, 51?
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig."
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either "true" or "false." Click "Run"
        to see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as "true"?
      Eval Booleans 3_instruction: |
        The "string-length" function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        "true."
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the "string=?" function to make conditionals
        that respond to text input. Here's a function called "green shape" that
        takes a string parameter for the shape. Complete the conditions so that the
        correct shape is drawn when the function is run with "circle," "triangle,"
        "square," or "rectangle."
      Eval Cond 5_instruction: |
        Here's a similar function "red shape" with an
        additional parameter for size. Complete the conditionals so the correct image
        is drawn for "circle," "triangle," and "star."
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin
        the name of a food and produces a String that says how you feel about that\nfood.
        For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic
        “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review,
        but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne
        example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes
        in the name of a shape and produces a solid green shape. Your function\nshould
        work with at least “circle”, “star” and “rectangle”, but you can add\nother
        shapes if you like. You can choose the size of each shape. Don’t forget\nto
        add an “else” clause!\r\nOne example - and part of the definition -  has\nalready
        been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave
        your own business by 30. Write a function called life-goals, which takes\nin
        an age and produces a string that describes your life goals by then. Don’t\nforget
        to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The "scale" function returns an image that
        is either larger or smaller than the input image. Try scaling this circle
        by a factor of 10. How is the returned image different than if you'd just
        made a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the "star" function to produce a solid
        red star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the "text" function to write this
        "Hello, world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called "green-triangle"
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle
      Eval Define Funcs 2_instruction: |
        Let's look inside that "green-triangle"
        function to see how it works. Can you modify it so that the "green-triangle"
        function always draws outlined green triangles?
      Eval Define Funcs 3_instruction: "Here's the start of another new function\ncalled
        \"purple-circle\" with a domain of one Number (the radius) and a range\nof
        Image. The body of the function is broken though, it always draws a circle\nof
        50 pixel radius instead of using the radius parameter. Replace the current\nNumber
        with the \"radius\" block from the domain. \n"
      Eval Define Funcs 4_instruction: |
        Create a new function called "aqua-star"
        that has a Domain of a single Number for radius and returns an aqua star of
        the given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that "aqua-star" function to
        make a row of different sized stars. From left to right, the stars should
        have radiuses of 25, 50, and 75.
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called "square-circle" with domain Number String and range Image. Click
        Edit to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The design recipe for "wide-rect" already
        has a contract and one example. Can you write a second example and then complete
        the definition. The "wide-rect" function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        "starburst" that has two domains. 1) a number of points and 2) a radius.
        "starburst" returns a yellow radial star with given points, and an inner
        radius that is half the outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        "striped-flag" that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Using the Design Recipe, write a function
        "large-polygon" that should output a polygon of given sides and color that
        takes up most of the window, regardless of the number of sides. To make sure
        that the polygon doesn't get too large as you increase the number of sides,
        side length should be inversely proportional to side number, with a length
        of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the design recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The "string-append" function takes two
        Strings and returns a single combined String. Add a String "Universe" to
        the second argument of "string-append."
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This "star" function takes in a Number and two Strings,
        and it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the "rectangle" block to draw
        this solid red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        "overlay" to place a 100 pixel white triangle on top of a 200 pixel red
        circle.
      Eval Strings Images 6_instruction: |
        Use the overlay function to place a 75
        pixel radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The "offset" block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called "radial-star" and it allows you to draw stars with any number
        of points! Use it to create a solid orange star with an inner radius of 75
        pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      frozen circle function in circle_instruction: Ahora crearemos 20 círculos superpuestos,
        girando 18 grados entre cada círculo.
      frozen circle function with parameter_instruction: Aquí está un bloque "Crear
        círculo" que puede dibujar círculos de diferentes tamaños. ¿Puedes usarlo
        para dibujar un circulo pequeño de tamaño 5 y uno más grande de tamaño 10?
      frozen circle function_instruction: Utiliza el nuevo bloque "Crear un círculo"
        para crear 10 círculos superpuestos. No te olvides de saltar hacia adelante
        entre cada círculo.
      frozen circle_instruction: Un círculo es una figura especial. ¿Puedes adivinar
        qué número debe reemplazar los signos de interrogación para dibujar un círculo?
      frozen cross rotate dense_instruction: '¡Ahora repitámoslo 90 veces! ¿Cuántas
        veces cabe 90 en 360? Pista: Es un número muy pequeño.'
      frozen cross rotate_instruction: Ahora trata de repetirlo 10 veces. ¿Cuántos  grados
        necesitas girar entre cada línea?
      frozen cross_instruction: Utiliza el bloque "Repetir" para crear un signo de
        más (+). ¿Notaste que Elsa puede moverse hacia adelante y hacia atrás?
      frozen diamond mini snowflake_instruction: ¿Sabías que cada copo de nieve tiene
        una forma distinta? Crearemos un nuevo copo de nieve utilizando el bloque
        "Repetir" para repetir el paralelogramo 4 veces, girando hacia la derecha
        90 grados entre cada paralelogramo.
      frozen diamond snowflake_instruction: Ahora crearemos un nuevo copo de nieve,
        utilizando el bloque "Repetir" para repetir el paralelogramo 10 veces, girando
        a la derecha 36 grados entre cada uno.
      frozen diamond_instruction: 'Ahora crearemos un paralelogramo. Es como un cuadrado
        pero tiene diferentes ángulos: 60 y 120 grados en lugar de ángulos de 90 grados.'
      frozen freeplay_instruction: ¡Te has convertido oficialmente en un artista maestro!
        Crea un paraíso invernal.
      frozen line_instruction: ¡Hola! Soy Elsa de Arendelle. Ayúdame a crear una línea.
      frozen perpendicular_instruction: Ahora veamos si podemos crear dos líneas que
        se encuentran a un ángulo de 90 grados una de la otra. Necesitarás usar tanto
        el bloque de "Giro" como el bloque de "Mover".
      frozen snowflake branch_instruction: Intenta utilizar el bloque "Crear una rama
        de copo de nieve" para dibujar 3 ramas, lo que empezará a parecerse a un copo
        de nieve.
      frozen snowflake full_instruction: ¡Ahora repitámoslo 8 veces para dibujar un
        hermoso copo de nieve!
      frozen snowflower_instruction: Formas complejas de nieve pueden crearse usando
        figuras geométricas muy simples. ¿Puedes crear uno repitiendo 5 círculos de
        tamaño 5 y 5 círculos de tamaño 10?
      frozen square iterative_instruction: Parece que estamos a la mitad de completar
        un cuadrado. Ahora pongamos 4 líneas juntas para crear un cuadrado.
      frozen square loop 3x_instruction: Ahora crearemos tres cuadrados, girando al
        terminar cada cuadrado. Asegúrate de girar 120 grados antes de iniciar un
        nuevo cuadrado.
      frozen square loop_instruction: ¡Hola! Soy Anna de Arandelle. Dibujemos un cuadrado
        con el bloque de "Repetir", lo que nos permitirá utilizar menos bloques. ¿Cuántas
        veces (???) se deberían repetir los bloques que están dentro del bloque "Repetir"
        para formar un cuadrado?
      frozen square snowflake_instruction: ¿Puedes dibujar un copo de nieve utilizando
        el bloque "Repetir" para dibujar un cuadrado 10 veces y el bloque "Girar"
        para girar 36 grados entre cada cuadrado?
      Infinity_catch_instruction: |
        Can you make Elsa ("actor 2") catch up with
        Anna by using the arrow keys?
      Infinity_finale_instruction: Create anything you like and share it!
      Infinity_move_collide_instruction: |
        Hiro is "actor 1".  Move him right to
        Baymax, and play a sound when they touch.
      Infinity_move_directions_instruction: |
        Baymax is "actor 2".  Add Move blocks
        and then move Baymax using the arrows.  Make him touch the two other characters.
      Infinity_move_right_instruction: |
        Hiro is "actor 1".  Use the Move block
        to move Hiro right to touch Baymax.
      Infinity_repeat_instruction: |
        Use a "repeat forever" block to make Anna move
        up and down 400 pixels.
      Infinity_say_instruction: Make Anna say "Hi there." by using the Say block.
      Infinity_shoot_instruction: |
        Baymax is "actor 2".  Make Baymax throw a rocket
        at Hiro.
      Infinity_shoot_directions_instruction: |
        Hiro is "actor 3".  Make Hiro throw
        a projectile to each of the four characters.  Wait one second between each
        throw.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Touch even more snowflakes!
      Infinity_touch_four_instruction: |
        Move Anna up, down left, and right to touch
        each of the four snowflakes.
      Infinity_touch_score_instruction: |
        Make Anna score a point when she touches
        a snowflake.  Then click "Run" and steer her to touch each snowflake once.
      K-1 Artist 1 Assessment 1_instruction: |
        Draw a short line up and a long one
        to the right!
      K-1 artist 1 level 10_instruction: |
        Draw the dashed line by using both the
        jump and draw blocks
      K-1 artist 1 level 9_instruction: Draw this using three lines
      K-1 Artist Loops 1_instruction: Draw this line by moving East 4 times.
      K-1 Artist Loops 2_instruction: Can you draw the same line using a loop?
      K-1 Artist Loops 3_instruction: Can you loop these blocks to draw 6 lines?
      K-1 Artist Loops 4_instruction: |
        Could a loop help us draw the top of this
        castle?
      K-1 Artist Loops 5_instruction: What can you loop 4 times to draw these stairs?
      K-1 Artist Loops 6_instruction: |
        This one needs two loops: one to go up the
        stairs and one to go down.
      K-1 Artist Loops 7_instruction: Can you finish this pattern with two loops?
      K-1 Artist Loops 8_instruction: This staircase has longer steps.
      K-1 Artist Loops 9_instruction: 'Assessment: Use a loop to draw the stairs'
      K-1 Artist Loops Free Play_instruction: Free play, draw something fun!
      K-1 Artist1 1_instruction: Draw the foot of the man with one line
      K-1 Artist1 10_instruction: |
        Draw and Jump to make the dashed path to the treasure
        X
      K-1 Artist1 2_instruction: Draw the whisker on the cat with two lines!
      K-1 Artist1 3_instruction: |
        Draw two lines east and two lines north to finish
        the house!
      K-1 Artist1 4_instruction: Draw lines up, over, and down to complete the castle!
      K-1 Artist1 5.5_instruction: |
        Complete the third tower of the castle using
        short lines
      K-1 Artist1 5_instruction: Draw the stem of this flower with two lines!
      K-1 Artist1 6_instruction: Finish the picture by using a jump block!
      K-1 Artist1 7_instruction: |
        Use the jump block to move without drawing. Jump
        up and draw a line.
      K-1 Artist1 8_instruction: |
        Draw the dashed line by using both the jump and
        draw blocks
      K-1 Artist1 9_instruction: Draw and Jump to make the dashed line
      K-1 Artist1 Assessment 1_instruction: Draw the short and long lines!
      K-1 Artist1 Assessment 2_instruction: Draw the short dashed lines!
      K-1 Artist2 1_instruction: Draw a square below the triangle.
      K-1 Artist2 2_instruction: Jump and draw a square next to the house.
      K-1 Artist2 3_instruction: Draw a square above the other square
      K-1 Artist2 4_instruction: Draw a rectangle to complete the bridge.
      K-1 Artist2 5_instruction: Draw a rectangle to complete the bridge supports
      K-1 Artist2 6_instruction: Draw two squares to make a rectangle!
      K-1 Artist2 Assessment1_instruction: |
        Assessment: Draw a square next to the
        other square.
      K-1 Artist2 Free Draw_instruction: Draw anything!
      K-1 Artist2_7_instruction: Draw a rectangle to give the dresser a top drawer!
      K-1 Bee 1_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 10_instruction: Get four nectar and then make two honey!
      K-1 Bee 11.5_instruction: Get four nectar to make four honey!
      K-1 Bee 11_instruction: Get three nectar and then make one honey
      K-1 Bee 12_instruction: Get three nectar and then make two honey!
      K-1 Bee 13_instruction: Get three nectar and then make one honey!
      K-1 Bee 14_instruction: |
        Get me to the nectar, pick it up, get me to the honey,
        and make honey
      K-1 Bee 15_instruction: ¡Consigue dos unidades de néctar para hacer dos unidades
        de miel!
      K-1 Bee 2_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 3_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 4_instruction: ¡Consigue dos unidades de néctar y luego has dos unidades
        de miel!
      K-1 Bee 5_instruction: Get three nectar and then make three honey!
      K-1 Bee 6_instruction: ¡Consigue dos unidades de néctar y luego has dos unidades
        de miel!
      K-1 Bee 7_instruction: Get three nectar and then make two honey!
      K-1 Bee 8_instruction: ¡Consigue dos unidades de néctar y luego has dos unidades
        de miel!
      K-1 Bee 9_instruction: ¡Consigue dos unidades de néctar y luego has dos unidades
        de miel!
      K-1 Bee Assessment 1_instruction: ¡Consigue néctar para hacer miel!
      K-1 Bee Assessment 2_instruction: ¡Consigue néctar para hacer miel!
      K-1 Bee Loops 1_instruction: Get the nectar to make honey!
      K-1 Bee Loops 10_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops 11_instruction: |
        Assessment: Use loops and get the nectar and
        honey!
      K-1 Bee Loops 12_instruction: |
        Assessment: Use loops to get the nectar, honey,
        and to move!
      K-1 Bee Loops 2_instruction: |
        Use a loop to move and then get the nectar and
        make honey!
      K-1 Bee Loops 3_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 4_instruction: |
        Use loops to get the nectar, make honey, and
        to move!
      K-1 Bee Loops 5_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 6_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops 7_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 8_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 9_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops Assessment 1_instruction: |
        Get nectar to make honey and use loops
        to move!
      K-1 Bee Loops Assessment 2_instruction: Get nectar to make honey using loops!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      k-1 maze 1_instruction: Can you make me move West to get to the pig?
      K-1 Maze 10_instruction: 'Go around the TNT to get me to the pig! '
      K-1 Maze 11_instruction: |
        Trace the path and lead me to the silly pig. Avoid
        TNT or the feathers will fly! Hint: He's South of me.
      K-1 Maze 2_instruction: Move me East to get me to the pig!
      K-1 Maze 3_instruction: Move me South to get me to the pig!
      K-1 Maze 4_instruction: Move me North to get me to the pig!
      K-1 Maze 5_instruction: Move me East to get me to the pig!
      K-1 Maze 6_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 7_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 8_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 9_instruction: Move one way, then another to get me to the pig!
      K-1 Maze Assessment 1_instruction: Assessment -- Get me to the pig!
      K-1 Maze Assessment 12_instruction: Assessment Level
      K-1 Maze Assessment 13_instruction: Assessment Level
      K-1 Maze Assessment 2_instruction: Assessment -- Get me to the pig!
      K-1 maze debug 1_instruction: Change the code to get me to the pig!
      K-1 maze debug 10_instruction: |
        Debug this level by rearranging and adding
        blocks to get me to the pig!
      K-1 maze debug 11_instruction: "This is a test!\r\nDebug this level by rearranging\nand
        adding blocks to get me to the pig"
      K-1 maze debug 2_instruction: |
        Figure out what is missing and then add blocks
        to get me to the pig!
      K-1 maze debug 3_instruction: |
        Figure out what is missing and then REMOVE blocks
        to get me to the pig!
      K-1 maze debug 4_instruction: |
        Run through these blocks and fix them! I think
        I might be going in the wrong direction.
      K-1 maze debug 5_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 6_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 7_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 8_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 9_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 Maze debug Assessment 1_instruction: |
        Assessment -- Debug this level by
        rearranging and adding blocks to get me to the pig!
      K-1 Maze Loops 1_instruction: ¡ Tráeme al cerdo!
      K-1 Maze Loops 10_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 11_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 12_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 2_instruction: Use the Repeat block to get me to the pig!
      K-1 Maze Loops 3_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 4_instruction: ¡ Tráeme al cerdo!
      K-1 Maze Loops 5_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 6_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 7_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 8_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 9_instruction: ¡ Tráeme al cerdo!
      K-1 Maze Loops Assessment 1_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Loops Assessment 2_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Multi 14_instruction: Assessment Level
      K-1 Maze Multi 15_instruction: Assessment Level
      K-1 Maze Sequence Assessment 1_instruction: "This is a test!\r\nMove one way,\nthen
        another to get me to the pig"
      K-1 Maze Sequence Assessment 2_instruction: "This is a test!\r\nMove one way,\nthen
        another to get me to the pig."
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the "cost" function, and we'll return the
        price of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the "cost" function. Once you've added your toppings, test out
        the function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the "else" clause so that we charge them
        a premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: "Free Play: What can you do to make Luigi's cost\nfunction
        even better? Try one (or more) of the following:\r\n- Display an\nimage of
        the chosen pizza\r\n- Allow for multiple topping combinations\r\n-\nAllow
        for ordering multiple pizzas\r\n- Add a coupon code for a 50% discount"
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called "my-shape" and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your "my-shape" variable and use it
        with this provided code to draw two identical green triangles that are 50
        pixels in size.
      MSM Defining Vars 4_instruction: |
        Edit your "my-shape" variable so that it
        draws 75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        Draw something awesome! Your code is saved
        as a project that you can return to at any time.
      NEW Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is
        100 pixels in length, using a loop?
      NEW Course 4 Artist Functions 10_instruction: |
        Click "edit" to fill out the
        blocks in the function definition to make a 40 pixel square.
      NEW Course 4 Artist Functions 11_instruction: |
        We have a new function called
        "draw a line of squares." Feel free to take a look inside the function block
        to see how we built it. Click on "Run" when your are ready for the next
        puzzle.
      NEW Course 4 Artist Functions 12_instruction: |
        Use the "draw a line of squares"
        function from the last puzzle to draw this pattern."
      NEW Course 4 Artist Functions 13_instruction: |
        Can you draw a star shape using
        the "draw a line of squares" function? Hint: you may have to move forward
        60 pixels and  turn 144 degrees
      NEW Course 4 Artist Functions 14_instruction: 'Free Play time! '
      NEW Course 4 Artist Functions 2_instruction: '¿Puedes dibujar 3 cuadrados de
        20 píxeles separado uno del otro? Sugerencia: cada cuadrado es de medida 100
        píxeles '
      NEW Course 4 Artist Functions 3_instruction: "Here is a new type of Block.\nIt
        is called a \"Function block.\" Click \"Run\" to see what it can do. \n"
      NEW Course 4 Artist Functions 4_instruction: |
        Use the "draw a square" function
        to draw this pattern. Hint: You will have to use a "turn right by 120 degrees"
        block after each square.
      NEW Course 4 Artist Functions 5_instruction: |
        How did the "draw a square"
        block know what commands to run? Click on "edit" in the "draw a square"
        function block. The blocks in the function editor are the definition that
        make up "draw a square." When you're done looking around, click "Save
        and Close" and then "Run."
      NEW Course 4 Artist Functions 6_instruction: "Using the \"draw a square\" function\nblock,
        can you draw this picture? Hint: each square is 20 pixels apart.\r\n"
      NEW Course 4 Artist Functions 7_instruction: "Are you getting the hang of how\nto
        use function blocks? Let's modify this square so that it is 200 pixels\nin
        size. Hint: click on \"edit\" to change the size of the \"draw a square\"\nfunction
        editor. Remember to click on \"save and close\" to get out of the\nfunction
        editor. \n"
      NEW Course 4 Artist Functions 8_instruction: |
        We have given you most of the
        code to create a function. However there seems to be something missing. Can
        you edit the function definition to draw the triangle?
      NEW Course 4 Artist Functions 9_instruction: |
        Which block do you need to add
        to get the triangle to sit on top of the square?
      New Course 4 Artist Functions Level 4_instruction: |
        Use the "draw a square"
        function to draw this pattern.
      NEW Course 4 Artist Params 1_instruction: |
        Let's define this function to draw
        a square with 50 pixel sides. Click "edit" to get started.
      NEW Course 4 Artist Params 10_instruction: "Create a \"draw a hexagon\" function\nblock
        with a length parameter. Hint: this hexagon is 100 pixels in size. \n"
      NEW Course 4 Artist Params 11_instruction: |
        Can you figure out how to draw
        this shape? Edit the function to use the "sides" parameter.
      NEW Course 4 Artist Params 12_instruction: |
        Can you complete this drawing?
        The sides of all the shapes are 100 pixels long.
      NEW Course 4 Artist Params 13_instruction: |
        Let's edit this "draw a shape"
        function. It already has a "length" parameter. Now, let's edit the function
        to also add a "sides" parameter. Remember the angle to turn for a given
        shape is 360 divided by the sides it has. Hint: lengths for each shape are;
        the triangle is 100 pixels, the hexagon is 25 pixels and the square is 50
        pixels.
      NEW Course 4 Artist Params 14_instruction: "Can you recreate these shapes?\nDrag
        the \"length\" parameter into the function definition. \n"
      NEW Course 4 Artist Params 15_instruction: |
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
      NEW Course 4 Artist Params 2 _instruction: Crea un "dibujo con la función triángulo
        que contenga 50 píxeles de lado" desde el principio
      NEW Course 4 Artist Params 2_instruction: Crea un "dibujo con la función triángulo
        que contenga 50 píxeles de lado" desde el principio
      NEW Course 4 Artist Params 3_instruction: "Now let's use the function to draw\n3
        triangles from the last puzzle in a row. Hint: each triangle is 50 pixel\napart.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5_instruction: "Fill in the ??? in the length parameter\ninput
        block. Hint: The pentagon is 100 pixels in size. \n"
      NEW Course 4 Artist Params 6_instruction: |
        Fill in the "length" parameter
        to draw these shapes by replacing the "???" with the right numbers. The
        square and triangle are 100 pixels in size while the hexagon is 75 pixels
        in size.
      NEW Course 4 Artist Params 7_instruction: |
        Can you complete this drawing? Hint:
        each triangle is 25 pixels larger than the last.  The first triangle is 25
        pixels in size.
      NEW Course 4 Artist Params 8_instruction: |
        Can you draw each of these triangles
        with that new function? The first is 25 pixels long, the second is 50, and
        the third is 75. Hint: start by clicking on "edit" on your function block.
      NEW Course 4 Artist Params 9_instruction: |
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      NEW Course 4 Artist Vars 1.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. \n"
      NEW Course 4 Artist Vars 12_instruction: |
        Modify this algorithm so it uses
        the "sides" variable instead of a fixed number to draw a pentagon. Replace
        the number 5 with the "sides" variable, and use the "set sides to" block.
      NEW Course 4 Artist Vars 2.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. \n"
      NEW Course 4 Artist Vars 2_instruction: "Drag a number block to the \"set length\"\nblock
        to draw a set of 50 pixel triangles. \n"
      NEW Course 4 Artist Vars 4 5_instruction: |
        Awesome job on the last puzzle,
        let's try it again this time let's make this cool design with with 60 pixel
        hexagon's.
      NEW Course 4 Artist Vars 4_instruction: |
        Let's try it again. Now, let's make
        this cool design with with 60 pixel hexagons.
      NEW Course 4 Artist Vars 6_instruction: |
        Can you help me draw this cool pattern
        by dropping in the "length" variable block into the correct places?
      NEW Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar
        from each flower.
      NEW Course 4 Bee For Loops 10_instruction: Usa tu variable "contador" de bucle
        para el controlar que tan lejos debe moverse horizontalmente.
      NEW Course 4 Bee For Loops 11_instruction: |
        Can you use the loop variable to
        control movement and nectar collection?
      NEW Course 4 Bee For Loops 2_instruction: |
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3_instruction: "Ah, the for loop makes this much\neasier!
        All the code you need is there, take a look at how it is put together\nthen
        click \"Run\" to see how it works. \n"
      NEW Course 4 Bee For Loops 4 4_instruction: "Can you help the Bee collect the\nrest
        of the honey using this for loop? \n"
      NEW Course 4 Bee For Loops 4_instruction: "Replace the ??? in the for loop\nwith
        the largest amount of nectar the bee has to collect. \n"
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Are you getting the hang of using
        the for loop? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_instruction: También puedes utilizar un bucle a
        contar hacia atrás. Trata de recoger este néctar por la cuenta regresiva del
        5 al 1 por 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        The last number in your for loop
        is called the "increment,"  and each time the loop is run the counter variable
        changes by the increment. Try collecting these flowers using an increment
        of 2.
      NEW Course 4 Bee For Loops 7_instruction: |
        Are you getting the hang of for
        Loops? This is similar to last puzzle, but you have to get 2,4,6,8,10 nectar.
        You’re given the starter code except for the numbers in the counter loops.
        Let's collect some nectar!
      NEW Course 4 Bee For Loops 8_instruction: "If your loop is counting up, the\nincrement
        is added to your counter variable each loop. What should your increment\nbe
        to collect 3, 6, 9 nectar?\r\n"
      NEW Course 4 Bee For Loops 9_instruction: Si tu ciclo es regresivo, se resta
        el incremento de la variable contador en cada bucle. Lo que debería ser un
        incremento a recoger néctar 9, luego 6 y 3 ?
      NEW Course 4 Play Lab Params 11 (copy 1)_instruction: "It's Free Play time!\nHave
        fun with all the blocks in your tool box. \n"
      NEW Course 4 Play Lab Params 11_instruction: "It's Free Play time! Have fun\nwith
        all the blocks in your tool box. \n"
      NEW Course 4 Play Lab Params 5 5_instruction: "Fill in actor parameter inputs\nwith
        numbers (1, 2, and 3) to make these actors patrol. \n"
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        “What do you think this code will
        do? Press “Run” to see what happens.”
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "It's Free Play\ntime,
        have fun with all the blocks in your tool box. \n"
      New Play Lab Project_instruction: |
        Create your own story or game! Your code
        is saved as a project you can return to at any time.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame,
        and then figuring out how it works. You can use the arrow keys\nto move the
        ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n
        \ \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: ¡Las funciones permiten definir nuevos bloques!
        Hemos movido los bloques para dibujar un cuadrado en la función llamada "dibuja
        un cuadrado". ¿Puedes utilizar la función "dibuja un cuadrado" para crear
        los lentes? Los cuadrados están separados por 75 píxeles.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image!  Find error and fix it!  Hint: a few extra bits
        were added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'.  The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101.  Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want.  Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2 (copy 1)_instruction: |
        We've added your contract and two
        examples into the Design Recipe for rocket-height. Now write the function
        for rocket-height.
      Play Lab Rocket 2 (copy 2)_instruction: |
        We've started the Design Recipe for
        rocket-height using the contract and examples you just wrote. Complete the
        function definition for rocket-height and run your animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B (copy 1)_instruction: |
        We've started the Design Recipe
        for rocket-height using the contract and examples you just wrote. Complete
        the function definition for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3 (copy 1)_instruction: |
        Awesome, now can you update that function
        so that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Use the arrow keys to move Sam
        around his yard, making note of Sam's coordinates at different locations.
        Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called "safe-left?"
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's inside the left boundary of the yard (x > -25). If
        your function works, Sam shouldn't be able to leave the yard from the left
        side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Fill out the "safe-right?"
        function to make sure Sam can't go past x = 425.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        from going either direction? Try using the "AND" block to program the function
        "on-screen?" to check if Sam is safe-left? AND safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, now Sam can't leave
        the yard from the left or the right, but what about up and down? We've added
        an additional parameter 'y' to the 'onscreen?' function. Can you update
        your program so Sam can't leave from the top (y = 425) or bottom (y = -25)
        either? Test your program by moving Sam as far as he can go in all four directions.
        Click Finish when Sam is completely protected.
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: ¡Bellota! ¡Bellota! ¡Bellota! Utiliza un bloque "si" para
        llevarme ahí con el menor número de bloques.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: Ok, vamos a hacerlo de nuevo para practicar - este no
        es muy diferente, ¡Pero ten cuidado con la pared!
      scrat 18 (copy 1)_instruction: El bloque "If-else" verifica una condición y
        después hace o una cosa u otra. Para llevarme a la bellota intenta usar este
        nuevo bloque.
      scrat 18_instruction: El bloque "If-else" verifica una condición y después hace
        o una cosa u otra. Para llevarme a la bellota intenta usar este nuevo bloque.
      scrat 19 (copy 1)_instruction: Una práctica más del bloque "si-sino", ¿Puedes
        hacerlo bien en tu primer intento?
      scrat 19_instruction: Una práctica más del bloque "si-sino", ¿Puedes hacerlo
        bien en tu primer intento?
      scrat 20_instruction: ¿Puedes agregar sólo 3 bloques para ayudarme a resolver
        un laberinto más complejo? Si lo haces correctamente puedo caminar cualquier
        camino curvo sin importar su longitud. !Date prisa! ¡El hielo se está derritiendo!
      SpecialFrozenLevel_instruction: ¡Te has convertido oficialmente en un maestro
        artista! Crea un paraíso invernal.
      Standalone_Artist_1_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Standalone_Artist_2_instruction: |
        Draw this diamond with 120 and 60 degree
        angles and 150 pixel long sides.
      Standalone_Artist_3_instruction: |
        Can you draw this hexagon with 100 pixel
        sides and 60 degree turns?
      Standalone_Artist_4_instruction: |
        Now you've got a new block to play with,
        the loop. This will repeat a set of commands. What happens if you loop these
        commands 6 times?
      Standalone_Artist_5.5_instruction: |
        Notice how we simplified the diamond code
        by turning it into a loop. You can loop that whole sequence 12 times to draw
        the flower. Hint: You'll need to turn 30 degrees after your diamond loop
        so you don't keep drawing over the same diamond.
      Standalone_Artist_5_instruction: |
        How many times do you need to loop this diamond
        to draw the flower?
      Standalone_Artist_6_instruction: |
        Loop this hexagon code 6 times to create
        the design. How many degrees will you need to turn each time? Hint: divide
        the number of degrees in a circle by the number of times you are looping.
      Standalone_Artist_7_instruction: |
        A function is another programming tool to
        help you avoid repeating yourself. This function draws a flower, so you can
        use it any time you want to draw a flower. Use this and the new jump block
        to draw these flowers. Hint: The flowers are 150 pixels apart
      Standalone_Artist_8_instruction: |
        Here's a function called "Draw a shape"
        that we've programmed to draw hexagons. Run the code to see what it does
        and then experiment with the function to see what happens. Can you make it
        draw a pattern of squares, triangles, or octagons?
      Standalone_Artist_9_instruction: |
        Now go ahead and make whatever picture you'd
        like! You've even got an empty function that you can make do whatever you
        want!
      Standalone_Artist_v2_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Text Compression Peter Piper_instruction: |
        This poem has been compressed by
        replacing two common phrases with symbols in the dictionary. Can you identify
        another common pattern to compress the poem further?
      U1L4 NetSim SendAB_instruction: |
        NetSim: Variant 1 playground: UNDER CONSTRUCTION:
        Variant 1 is not yet functional because P2P connections have not been implemented.
        Variant 1 allows students to manually work out the timing of sending bits
        back and forth.
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the simulator a
        DNS service is provided for you. Send a message in the form GET [hostname]
        to the DNS service at address 15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L2 NetSim Hub Mode_instruction: "You'll now play the \"Game of Messages\"\ngame
        you just played in person, but this time using the Internet Simulator.\nJoin
        a room to be connected to your group, and then follow the instructions\non
        the worksheet handed out by your teacher.\r\n"
      U2L3 NetSim Hub Mode_instruction: "With your group, invent a standard addressing\nscheme
        for the \"Game of Messages\" game, and try it out using the Internet\nSimulator.
        \n"
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter
        with the others in your group. Important note: The router will only\nproperly
        route messages where the first 4 bits are the To: address and the\nsecond
        4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na
        router with the others in your group. The Internet Simulator now provides\na
        place for you to put the To and From addresses, so you don't have to type\nout
        the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U313 Two Buttons with Ids_instruction: |
        Now you try it! We've given you some
        starting code with two buttons and two event handlers on the screen, but we've
        just left the default Ids of "id".  You need to change the ids to connect
        the right event handler to the right button. (Interestingly, the incorrect
        program does work, but exhibits some bizarre behavior.  We'll discuss this
        more in the next lesson.  Make the buttons work correctly for now).
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Write the turnAround() function
        and use it to make the turtle move as depicted.
      U3L03 define turnRight and draw a rectangle_instruction: "Create a turnRight()\nfunction
        and draw a rectangle twice as tall as it is wide by having the turtle\nnavigate
        clockwise to draw the rectangle. \n"
      U3L03 Draw a T using turnAround_instruction: |
        The turnAround function is now
        provided for you in the code.  Use the turnAround() function to draw a T as
        depicted.
      U3L03 draw diamond_instruction: "Use any and all of the functions you wrote\npreviously
        to make a 'diamond' shape as shown in the image.\r\n\r\nNOTE:\nthis is another
        tricky one.  The 4 sides of the diamond are made by drawing\nthree steps with
        other movement made between calls.  HINT: you might want\nto make another
        function that handles drawing one side of the diamond. "
      U3L03 Three Steps_instruction: |
        Draw 3 "steps" moving up and to the right.  Notice
        the pattern in the movement. You should define a function called drawStep()
        which draws one of the steps, and then call it 3 times to achieve the effect.
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 Challenge 1 triangle_instruction: |
        Check out the extended Turtle palette
        now made available to you. These new commands accept parameters, allowing
        you to specify precisely how the function operates rather than only being
        able to move or turn a predetermined amount. Make use of these functions to
        draw the triangle as shown.
      U3L06 Challenge 2 purple square_instruction: |
        This time we're going to learn
        a little bit about changing the turtle's pen. Read through the documentation
        for penWidth() and penColor(), and then draw the purple square as shown.
      U3L06 Challenge 3 fill pink_instruction: |
        Now let's try to fill in the entire
        background of the screen. To make it a little easier for you, we can tell
        you the color we chose is one of the 140 named colors.  If you don't know
        what the named colors are, take a closer look at the documentation for penColor()
        again. Hint: you need to use dot().
      U3L06 Challenge 4 bullseye_instruction: |
        Let's try this out one more time.
        This time the colors are NOT named colors - you need to use the hex-color
        number to set the color.  So that you're not randomly guessing, we'll give
        you a hint -- each of the colors shown in the target image is one of these
        one of the five in the following list:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  You might be able to guess correctly if you apply what you know about
        RGB colors.
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Next we're going to be adding some
        curves to our drawing. Read the documentation for the "arc" commands and
        then draw the squiggles as shown. To make things easier here's a hint: all
        the parameters are multiples of 10, and the colors are from the following
        list of named colors: PowderBlue, lightBlue, Indigo, Purple, Magenta.
      U3L06 Challenge 7 smiley face_instruction: |
        To make this smiley face you'll
        need to look at the documentation for the move() command and then use it with
        the others you've learned.  You can make reasonable guesses about the colors.
      U3L06 Challenge 8 make your own_instruction: |
        Use the tools you've learned
        today to create a drawing of your own creation. If you have time, challenge
        your friends to see if they can duplicate your image.  We'll show you the
        drawing we made for ourselves.  You can try to duplicate that if you want
        to, otherwise, have fun making your own!
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play!  Use what you learned
        from loops and random to make your own little scene.  Have fun.
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof
        syntax error.  App Lab did not understand which object it should be listening\nto
        for a \"click\" event so it showed an error message in the console to let\nyou
        know.  Another kind of error is a logical error - the program is valid,\nbut
        it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA
        (tricky) syntax error and logical error.  Find them, fix them, and make\nthe
        program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        This program has problem!  Can you figure
        it out?  Run the program and see if you can figure out from the error messages
        in the console what the issue is.  There is not much code, so you might be
        able to figure it out just by reading carefully.  Make a change that will
        make the program work as expected.
      U3L13 - Turtle Driver Project_instruction: |
        Challenge: Create a “turtle driver”
        with at least three buttons on the screen to move the turtle forward, and
        turn the turtle right and left. You can copy/paste code from a previous level
        if you like but it will help build your coding muscles if you create this
        small program from scratch.  If you have time, try adding additional buttons!  You
        can also have fun changing the parameters on the turtle functions, using colors,
        etc.
      U3L13 - Turtle move with button_instruction: "Drag a button out onto the screen\nand
        set its text to \"Go forth!\".  Add an event handler for the button, that\nmakes
        the turtle move forward.  Run the program to make sure it works. \n"
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L16 - challenge say hi app_instruction: "In this challenge we give you starter\ncode
        that lays all the elements out on the screen.  Here’s what you need to\ndo:\r\nAdd
        event handler to textInput with the event type ‘input’ that shows\nthe “Say
        hi” button when that event occurs.\r\nAdd event handler to button\nso that
        on click, it writes a hello message to the screen and hides the textInput\nand
        button."
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command!  Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: "We'll be building upon some simple\nstarting
        code throughout this lesson.  Your first task: use moveTo and randomNumber\nto
        get the turtle to move to a random location with each button click.  We've\ngiven
        you starting code for our common setup: a button that moves the turtle\nwhen
        clicked.  You should modify this code.  \n"
      U3L16 - text labels_instruction: "Introducing textLabels.  First try replacing\nyour
        button with a textLabel.  Will the text respond to events just like the\nbutton?
        \ Try connecting an event handler to it.  We've started you out with\ncode
        similar to the result of the last level, you can copy your code from\nthat
        level into here if you prefer. \n"
      U3L16 - textInput getText write_instruction: |
        Introducing textInput, getText
        and write.  First run the starter code several times.  Try to change what's
        written to the screen when the button is clicked. Then use getText to write
        to the screen what the user entered in the text box.
      U3L16 - use images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer.
      U3L19 - Debugging with consoleLog_instruction: |
        This example shows how you
        might insert console.log statements in your code to verify for yourself how
        the values in the variables change during the running of the code.  This is
        an important debugging technique to use when each line in your program doesn't
        have a visual effect on the app that you can see to verify things are working
        right.  Run the code to see the output in the console.
      U3L19 - DEMO up down count practice app_instruction: |
        This is a demonstration
        of a simple App that uses variables, arithmetic and setText.  Play with it
        a little bit here to see what it does.  You can also come back to experiment
        if you want.  You are going to try to create this app yourself on the next
        screen.  Don't worry, we'll start you out with some of the code and leave
        the rest for you to complete.
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof
        code from the previous screen.  Try changing the value assigned to foo\nto
        see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto
        foo to see the string change. \r\n2. By only modifying the lines of code\nthat
        were given to you, try to get the output to say: “The value of foo is:\n9.
        \ And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error_instruction: "We've given you some code\nwith
        an error.  It doesn’t recognize the variable.  Can you figure out why?  Fix\nthe
        error and get the program to run.  Also note the error message since it\nmight
        come up at some point later in your life.\r\n\r\n"
      U3L19 - practice with setText_instruction: |
        We've started you out with the
        code shown on the previous screen.  First experiment with the app.  Identify
        where setText is being used.  CHALLENGE: modify the code to also use setText
        to change the text on the button itself when it's clicked.  GIF: U3L19 -
        setTextOfButton.gif
      U3L19 - Target Clicker App_instruction: "# A motivating example\r\n\r\nHere\nis
        an example of the kind of app we want to make.  Study this for the elements\ncontained
        in the app rather than what it is or does.  Things to investigate:\n\r\n\r\n1.
        what happens when you click on the Code.org logo? \r\n2. What happens\nwhen
        you click somewhere else? \r\n3. Try the reset button.   \r\n\r\nThe\nelements
        contained in this app appear to be simple, and they are in some ways.\nHowever,
        the computing principles involved - controlling and keeping track\nof things
        in memory while the program is running - get into some deeper issues\nof programming
        and computer science in general.  There are some devilish details\nand paths
        that can lead to misunderstanding if you're not careful.\r\n\r\nSo,\nkeep
        this app in mind as you go through the different levels in this lesson.  It\nmight
        seem like you need to learn a lot in order to get this simple thing\nworking.
        \ But it's worth taking the time to understand at a deeper level\nwhat is
        going on.  Because this one topic: controlling memory leads to many\npossible
        misunderstandings about coding, and how computers work.  We want\nto make
        sure you get it right from the outset.  \r\n\r\nSo take your time.  Work\nthrough
        the issues.  Read the explanations.  You'll come out on the other\nside a
        better programmer with much deeper knowledge and understanding of how\nthings
        work.  \r\n\r\nAre you ready?  Click 'finish' to move to the next\npage and
        start the lesson."
      U3L19 - test reassignment of two vars_instruction: |
        Why is this happening?
        The code given here is the same as the example from the previous page where
        we asked you to make a prediction about what will happen.  Run this code to
        find out if you were right.  If you weren't, that's okay.  You might experiment  a
        little if you want to, but bon't spend too much time here. We'll explain
        more on the next page.
      U3L19 - three basic ops of variables_instruction: "Do this:\r\nWe've given\nyou
        the three lines of code shown in the previous page.  Add three lines of\ncode
        just below the ones shown here to make your own variable, assign it a\nvalue
        and write it to the screen.  NOTE: change the variable name from the\ndefault
        x to something else.\r\n"
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe
        statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).
        \ Run\nthe program and you should see the output show up in the console area
        below\nthe workspace.  Then try adding a few more console.log statements.
        \ Display\nsome text.  Make another variable and display that.  \r\nThe app
        screen will\nbe blank -- that's the point.  With console.log you can test
        output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF:
        U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        This app is only SLIGHTLY
        different from the previous one, but much more dynamic.  See if you can figure
        out how and why the count is going up.  Once you've figured it out then you
        should be able to DO THIS: add a button to the app that when clicked makes
        the count go down, and updates the label.  When you're done the app should
        work as shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        We've given you
        the code from the previous page.  Right now, because the code only sets the
        values of variables, the app doesn't display anything. DO THIS: insert write
        or console.log statements into the code to figure out what the values of a,
        b, and c are after the code has executed.  You should have first made a prediction
        to see if your mental model of how the computer works is correct.  We'll
        ask for the answer on the next page.
      U3L19 - variable scope problem 2_instruction: |
        First run the program to see
        the problem.  You don't need to write code to solve any problem here.  But
        you do need to investigate the code and come up with an explanation for WHY
        what's happening is happening.  Why aren't 3 things being written to the
        screen?  Why does the variable foo seem to exist once but not the other times?  If
        you switch to code mode you'll see some warning messages next to two lines
        of code -- why do you get those messages?  Once you think you have a good
        answer, continue to the next page.
      U3L19 - variable scoping problem debugging_instruction: "Here is the code from\nprevious
        page that has a subtle problem with it.  FIRST: run the app and try\nit to
        see the problem. NOTE: NaN stands for \"Not a Number\".   DO THIS: figure\nout
        what's happening, where, and fix the problem.  We'll explain the issue\non
        the next page. \n"
      U3L19 - write var and string with same name_instruction: |
        Now look at this
        example. We’ve added another write statement.  Before you run the code, see
        if you can predict what the output will be.  Seriously, write it down. THEN
        run the code, mess with it if you like, and continue to the next page for
        an explanation.
      U3L2 Using Simple Commands_instruction: |
        Draw a square using only moveForward
        and turnLeft.  The square should be drawn above and to the left of the turtle's
        starting position.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid above and to the right of
        the turtle. Try to do so with the fewest number of commands possible. NOTE:
        This is a very challenging problem.  You may need to play with it for a while
        and tweak it.  You might also consider using pencil and paper to sketch your
        ideas.
      U3L2_TurtleSquare_right_instruction: |
        Draw a square using only moveForward
        and turnLeft, but this time, make the square appear ABOVE and to the RIGHT
        of the starting location.
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
