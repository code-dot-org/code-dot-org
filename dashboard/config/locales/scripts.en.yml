# Autogenerated scripts locale file.
---
en:
  data:
    script:
      name:
        course1:
          title: Course 1
          description: Start with Course 1 for early readers. Students will create computer programs that will help them learn to collaborate with others, develop problem-solving skills, and persist through difficult tasks. By the end of this course, students create their very own custom game or story that they can share. Recommended for grades K-1.
          description_short: Introduction to computer science for early readers.
          description_audience: Ages 4-6
          lesson_groups: {}
          student_description: Start with Course 1 for early readers. Students will create computer programs that will help them learn to collaborate with others, develop problem-solving skills, and persist through difficult tasks. By the end of this course, students create their very own custom game or story that they can share. Recommended for grades K-1.
          lessons: {}
          name: course1
        course2:
          title: Course 2
          description: Start with Course 2 for students who can read and have no prior programming experience. In this course students will create programs to solve problems and develop interactive games or stories they can share. Recommended for grades 2-5.
          description_short: Introduction to computer science for students who can read.
          description_audience: Ages 6+ (reading required)
          lesson_groups: {}
          student_description: Start with Course 2 for students who can read and have no prior programming experience. In this course students will create programs to solve problems and develop interactive games or stories they can share. Recommended for grades 2-5.
          lessons: {}
          name: course2
        course3:
          title: Course 3
          description: Course 3 is designed for students who have taken Course 2. Students will delve deeper into programming topics introduced in previous courses to create flexible solutions to more complex problems. By the end of this course, students create interactive stories and games they can share with anyone. Recommended for grades 4-5.
          description_short: Delve even deeper into programming while building games and interactive stories. This is a follow-up to Course 2.
          description_audience: Ages 8-18
          lesson_groups: {}
          student_description: Course 3 is designed for students who have taken Course 2. Students will delve deeper into programming topics introduced in previous courses to create flexible solutions to more complex problems. By the end of this course, students create interactive stories and games they can share with anyone. Recommended for grades 4-5.
          lessons: {}
          name: course3
        playlab:
          title: Play Lab
          description: Create a story or make a game with Play Lab!
          description_short: Create a story or make a game with Play Lab!
          lesson_groups: {}
          description_audience: ''
          student_description: Create a story or make a game with Play Lab!
          name: playlab
          lessons: {}
        artist:
          title: Artist
          description: Draw cool pictures and designs with the Artist!
          description_short: Draw cool pictures and designs with the Artist!
          lesson_groups: {}
          student_description: Draw cool pictures and designs with the Artist!
          name: artist
          description_audience: ''
          lessons: {}
        hourofcode:
          title: Classic Maze
          description: Try the basics of computer science with characters from Angry Birds, Plants vs. Zombies, and Scrat from Ice Age!
          description_short: Try the basics of computer science with many fun characters!
          description_audience: ''
          lesson_groups: {}
          student_description: Try the basics of computer science with characters from Angry Birds, Plants vs. Zombies, and Scrat from Ice Age!
          name: hourofcode
          lessons: {}
        frozen:
          title: Code with Anna and Elsa
          description: Let's use code to join Anna and Elsa as they explore the magic and beauty of ice. You will create snowflakes and patterns as you ice-skate and make a winter wonderland that you can then share with your friends!
          description_short: Let's use code to join Anna and Elsa as they explore the magic and beauty of ice.
          lesson_groups: {}
          student_description: Let's use code to join Anna and Elsa as they explore the magic and beauty of ice. You will create snowflakes and patterns as you ice-skate and make a winter wonderland that you can then share with your friends!
          name: frozen
          description_audience: ''
          lessons: {}
        course4:
          title: Course 4
          description: Course 4 is designed for students who have taken Courses 2 and 3. Students will learn how to tackle puzzles with increased complexity as they learn how to combine several concepts when solving each challenge. By the time this Course is completed, students will be creating programs that let them showcase multiple skills, including for loops and functions with parameters. Recommended for grades 4-8.
          description_short: Build more complex programs with concepts such as for loops and functions with parameters. This is a follow-up to Course 3.
          description_audience: Ages 9-18
          lesson_groups: {}
          student_description: Course 4 is designed for students who have taken Courses 2 and 3. Students will learn how to tackle puzzles with increased complexity as they learn how to combine several concepts when solving each challenge. By the time this Course is completed, students will be creating programs that let them showcase multiple skills, including for loops and functions with parameters. Recommended for grades 4-8.
          lessons: {}
          name: course4
        Course4pre:
          title: Course 4 Prerequisite
          description: A brief rampup of concepts for students who have not taken Course 2 and 3.
          description_short: A brief rampup of concepts for students who have not taken Course 2 and 3.
          description_audience: ''
          lesson_groups: {}
          student_description: A brief rampup of concepts for students who have not taken Course 2 and 3.
        usability:
          title: Usability Testing
          description: A selection of Course 4 levels for usability testing.
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          student_description: A selection of Course 4 levels for usability testing.
        algebra:
          title: Computer Science in Algebra
          description: Learn Functional Programming through Algebra.
          description_short: Learn Functional Programming through Algebra.
          description_audience: ''
          lesson_groups: {}
          student_description: Learn Functional Programming through Algebra.
          lessons: {}
          name: algebra
        infinity:
          title: Disney Infinity Play Lab
          description: Use Play Lab to create a story or game starring Disney Infinity characters.
          description_short: Use Play Lab to create a story or game starring Disney Infinity characters.
          lesson_groups: {}
          student_description: Use Play Lab to create a story or game starring Disney Infinity characters.
          name: infinity
          description_audience: ''
          lessons: {}
        algebrademo:
          title: Algebra Demo
          description: A handful of puzzles to demonstrate the environment and programming language used in Code.org CS in Algebra
          description_short: A handful of puzzles to demonstrate the environment and programming language used in Code.org CS in Algebra
          lesson_groups: {}
          student_description: A handful of puzzles to demonstrate the environment and programming language used in Code.org CS in Algebra
        K5PD:
          title: K5 Professional Development (old)
          description: 'For the latest online Professional Development resources for elementary school teachers here: https://studio.code.org/s/k5-onlinepd'
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          student_description: 'For the latest online Professional Development resources for elementary school teachers here: https://studio.code.org/s/k5-onlinepd'
        netsim:
          title: Internet Simulator
          description: Learn about how the Internet works.
          description_short: Learn about how the Internet works.
          description_audience: ''
          lesson_groups: {}
          student_description: Learn about how the Internet works.
        pixelation:
          title: Pixelation
          description: Create images with bits and bytes.
          description_short: Create images with bits and bytes.
          description_audience: ''
          lesson_groups: {}
          student_description: Create images with bits and bytes.
          lessons: {}
          name: pixelation
        20-hour:
          title: Accelerated Intro to CS Course
          description: This 20-hour course covers the core computer science and programming concepts in courses 2-4. The course is designed for use with ages 10-18. Check out courses 2-4 for a more complete experience!
          description_short: This 20-hour course covers the core computer science and programming concepts in courses 2-4.
          description_audience: Ages 10-18
          lesson_groups: {}
          student_description: This 20-hour course covers the core computer science and programming concepts in courses 2-4. The course is designed for use with ages 10-18. Check out courses 2-4 for a more complete experience!
          lessons: {}
          name: 20-hour
        edit-code:
          title: Edit Code
          description: Edit Code
          description_short: Edit Code
          description_audience: ''
          lesson_groups: {}
          student_description: Edit Code
        events:
          title: Events
          description: Events
          description_short: Events
          description_audience: ''
          lesson_groups: {}
          student_description: Events
        flappy:
          title: Flappy Code
          description: Wanna write your own game in less than 10 minutes? Try our Flappy Code tutorial!
          description_short: Write your own Flappy game!
          description_audience: ''
          lesson_groups: {}
          student_description: Wanna write your own game in less than 10 minutes? Try our Flappy Code tutorial!
          name: flappy
          lessons: {}
        jigsaw:
          title: Jigsaw
          description: Try our Jigsaw tutorial.
          description_short: Try our Jigsaw tutorial.
          description_audience: ''
          lesson_groups: {}
          student_description: Try our Jigsaw tutorial.
          name: jigsaw
          lessons: {}
        step:
          title: Step
          description: Step tutorial
          description_short: Step tutorial
          description_audience: ''
          lesson_groups: {}
          student_description: Step tutorial
        Hour of Code:
          title: Hour of Code 2013
          description: Try the basics of computer science with characters from Angry Birds and Plants vs. Zombies!
          description_short: Try the basics of computer science with many fun characters!
          description_audience: ''
          lesson_groups: {}
          student_description: Try the basics of computer science with characters from Angry Birds and Plants vs. Zombies!
          lessons: {}
          name: Hour of Code
        CodeStudioPuzzleChallenge:
          title: Code Studio Puzzle Challenge
          description: Try out these fun coding puzzles. Do your best!
          description_short: Challenge yourself!
          description_audience: ''
          lesson_groups: {}
          student_description: Try out these fun coding puzzles. Do your best!
        Tutorial Video - Code Studio Puzzle Challenge:
          title: Tutorial - Code Studio Puzzle Challenge
          description: Try out these fun coding puzzles. Do your best!
          description_short: Challenge yourself!
          description_audience: ''
          lesson_groups: {}
          student_description: Try out these fun coding puzzles. Do your best!
        cspunit1:
          title: "(old) CS Principles Unit 1 - Digital Information"
          description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers and transfer it between people and computational devices. This unit is a pilot version and is no longer supported or updated. You can find the new units at code.org/educate/csp.
          description_short: This unit is a pilot version and is no longer supported or updated. You can find the new units at code.org/educate/csp.
          description_audience: ''
          lesson_groups: {}
          student_description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers and transfer it between people and computational devices. This unit is a pilot version and is no longer supported or updated. You can find the new units at code.org/educate/csp.
        algebraPD:
          title: Computer Science in Algebra PD
          description: 'Phase 1: Online Introduction'
          description_short: 'Phase 1: Online Introduction'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 1: Online Introduction'
        algPDmiami:
          title: Computer Science in Algebra PD
          description: Teach Algebra through Functional Programming
          description_short: Teach Algebra through Functional Programming
          description_audience: ''
          lesson_groups: {}
          student_description: Teach Algebra through Functional Programming
        text-compression:
          title: Text Compression
          description: Compress text by identifying repeated patterns.
          description_short: Compress text by identifying repeated patterns.
          description_audience: ''
          lesson_groups: {}
          student_description: Compress text by identifying repeated patterns.
          name: text-compression
          lessons: {}
        CSPPD:
          title: Computer Science Principles PD
          description: 'Phase 1: Online Introduction for CSP'
          description_short: 'Phase 1: Online Introduction for CSP'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 1: Online Introduction for CSP'
        CSPLessonSamples:
          title: CSP Lesson Samples
          description: Lesson samples for CSP
          description_short: Lesson samples for CSP
          description_audience: ''
          lesson_groups: {}
          student_description: Lesson samples for CSP
        ECSPD:
          title: Exploring Computer Science PD
          description: 'Phase 1: Online Introduction'
          description_short: 'Phase 1: Online Introduction'
          lesson_groups: {}
          student_description: 'Phase 1: Online Introduction'
          name: ECSPD
          description_audience: ''
        sciencePD:
          title: Computer Science in Science PD
          description: 'Phase 1: Online Introduction'
          description_short: 'Phase 1: Online Introduction'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 1: Online Introduction'
        rbo-reference:
          title: rbo-reference
          description: rbo-reference
          description_short: rbo-reference
          description_audience: ''
          lesson_groups: {}
          student_description: rbo-reference
        Test Wednesday:
          title: Test Wednesday
          description: Test Wednesday
          description_short: Test Wednesay
          lesson_groups: {}
          student_description: Test Wednesday
        cspunit3:
          title: "(old) CS Principles Unit 3 - Programming"
          description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          description_short: This unit is a pilot version and is no longer supported or updated. You can find the new units at code.org/educate/csp.
          description_audience: ''
          lesson_groups: {}
          student_description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
        algebraPD3:
          title: Phase 3 PD
          description: Teach Algebra through block-based Functional Programming
          description_short: Teach Algebra through block-based Functional Programming
          description_audience: ''
          lesson_groups: {}
          student_description: Teach Algebra through block-based Functional Programming
        ECSPD-NexTech:
          title: Exploring Computer Science PD
          description: 'Phase 1: Online Introduction'
          description_short: 'Phase 1: Online Introduction'
          logo_image: nextech_logo.png
          lesson_groups: {}
          student_description: 'Phase 1: Online Introduction'
        ECSPD-iZone:
          title: Exploring Computer Science PD
          description: 'Phase 1: Online Introduction'
          description_short: 'Phase 1: Online Introduction'
          logo_image: izone_logo.png
          lesson_groups: {}
          student_description: 'Phase 1: Online Introduction'
        algebraPD-NexTech:
          title: Computer Science in Algebra PD
          description: 'Phase 1: Online Introduction'
          description_short: 'Phase 1: Online Introduction'
          logo_image: nextech_logo.png
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 1: Online Introduction'
        algebraPD-iZone:
          title: Computer Science in Algebra PD
          description: 'Phase 1: Online Introduction'
          description_short: 'Phase 1: Online Introduction'
          logo_image: izone_logo.png
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 1: Online Introduction'
        sciencePD-NexTech:
          title: Computer Science in Science PD
          description: 'Phase 1: Online Introduction'
          description_short: 'Phase 1: Online Introduction'
          logo_image: nextech_logo.png
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 1: Online Introduction'
        sciencePD-iZone:
          title: Computer Science in Science PD
          description: 'Phase 1: Online Introduction'
          description_short: 'Phase 1: Online Introduction'
          logo_image: izone_logo.png
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 1: Online Introduction'
        sciencePD2:
          title: 'CS in Science: Part 2'
          description: Phase 2 Online Blended Summer Study
          description_short: Phase 2 Online Blended Summer Study
          lesson_groups: {}
          student_description: Phase 2 Online Blended Summer Study
        sciencePD3:
          title: 'CS in Science: Part 3'
          description: Academic Year Support - Semester 1
          description_short: Academic Year Support - Semester 1
          lesson_groups: {}
          student_description: Academic Year Support - Semester 1
        Testing:
          title: Testing
          description: Testing
          description_short: Testing
          description_audience: ''
          lesson_groups: {}
          student_description: Testing
        cspunit2:
          title: "(old) CS Principles Unit 2 - The Internet"
          description: In this unit, students extend their understanding of the internet and how it functions by building off the concepts learned when sending bits in Unit 1. This unit is a pilot version and is no longer supported or updated. You can find the new units at code.org/educate/csp.
          description_short: This unit is a pilot version and is no longer supported or updated. You can find the new units at code.org/educate/csp.
          description_audience: ''
          lesson_groups: {}
          student_description: In this unit, students extend their understanding of the internet and how it functions by building off the concepts learned when sending bits in Unit 1. This unit is a pilot version and is no longer supported or updated. You can find the new units at code.org/educate/csp.
        algebraPD2a:
          title: Computer Science in Algebra PD
          description: 'Phase 2 Online: Blended Summer Study'
          description_short: 'Phase 2 Online: Blended Summer Study'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 2 Online: Blended Summer Study'
        allthethings:
          title: All the Things!
          description: |-
            Hi there! This is a special unit that Code.org uses for User Interface (UI) testing. None of the lessons or levels in this unit are meant to be used in classrooms!

            If you're not a code.org engineer but managed to discover this unit: congratulations! It's like you discovered a secret on our website! But if you're looking for more info about our curricula or tools, we recommend checking out [https://code.org/educate/](https://code.org/educate/) instead.

            If you are a code.org engineer: this script contains all the level types for UI testing. Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for this script).
          description_short: All the level types for UI testing
          description_audience: ''
          lesson_groups: {}
          student_description: |-
            Hi there! This is a special unit that Code.org uses for User Interface (UI) testing. None of the lessons or levels in this unit are meant to be used in classrooms!

            If you're not a code.org engineer but managed to discover this unit: congratulations! It's like you discovered a secret on our website! But if you're looking for more info about our curricula or tools, we recommend checking out [https://code.org/educate/](https://code.org/educate/) instead.

            If you are a code.org engineer: this script contains all the level types for UI testing. Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for this script).
          name: allthethings
          lessons:
            lesson-49:
              name: Music
            lesson-50:
              name: AI Chat
            lesson-51:
              name: AI Rubrics
            lesson-52:
              name: Dance Lab2
            lesson-53:
              name: Python Lab
            lesson-54:
              name: Web Lab 2
            lesson-55:
              name: Lab2 Showcase
        algebraPD2b:
          title: Computer Science in Algebra PD
          description: 'Phase 2 Online: Blended Summer Study'
          description_short: 'Phase 2 Online: Blended Summer Study'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 2 Online: Blended Summer Study'
        cspfacilitator:
          title: 'CS Principles Facilitator Workshop '
          description: Online levels for PD workshop
          description_short: Online levels for PD workshop
          description_audience: ''
          lesson_groups: {}
          student_description: Online levels for PD workshop
        K5-OnlinePD:
          title: Teaching Computer Science Fundamentals (2017)
          description: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course.
          description_short: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course.
          description_audience: ''
          lesson_groups: {}
          student_description: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course.
          name: K5-OnlinePD
        ECSPD2:
          title: 'Exploring Computer Science PD: Blended Summer Study'
          description: 'Phase 2 Online: Blended Summer Study'
          description_short: 'Phase 2 Online: Blended Summer Study'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 2 Online: Blended Summer Study'
        equityPD:
          title: Leading a Discussion on Equity
          description: How to lead a discussion on equity in a Code.org PD
          description_short: How to lead a discussion on equity in a Code.org PD
          lesson_groups: {}
          student_description: How to lead a discussion on equity in a Code.org PD
        algebraPD2:
          title: CS in Algebra Part 2
          description: Academic Year Support
          description_short: Academic Year Support
          description_audience: ''
          lesson_groups: {}
          student_description: Academic Year Support
        sciencePD2b:
          title: Computer Science in Science PD Phase 2b
          description: 'Phase 2 Online: Blended Summer Study'
          description_short: 'Phase 2 Online: Blended Summer Study'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 2 Online: Blended Summer Study'
        equity-pd:
          title: Leading a Discussion on Equity
          description: How to lead a discussion on equity in a Code.org PD
          description_short: How to lead a discussion on equity in a Code.org PD
          description_audience: ''
          lesson_groups: {}
          student_description: How to lead a discussion on equity in a Code.org PD
        science-PD2:
          title: Computer Science in Science PD Phase 2b
          description: Phase 2 Online Blended Summer Study
          description_short: Phase 2 Online Blended Summer Study
          description_audience: ''
          lesson_groups: {}
          student_description: Phase 2 Online Blended Summer Study
        Equity-OnlinePD:
          title: Creating More Equitable Computer Science Classrooms
          description: Develop strategies for creating equity in your classroom with this free, self-paced online course.
          description_short: Develop equitable teaching strategies with this free, self-paced online course.
          description_audience: ''
          lesson_groups: {}
          student_description: Develop strategies for creating equity in your classroom with this free, self-paced online course.
        sciencePD2b-iZone:
          title: Computer Science in Science PD Phase 2b
          description: 'Phase 2 Online: Blended Summer Study'
          description_short: 'Phase 2 Online: Blended Summer Study'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 2 Online: Blended Summer Study'
        ECSPD2-iZone:
          title: 'Exploring Computer Science PD: Blended Summer Study'
          description: 'Phase 2 Online: Blended Summer Study'
          description_short: 'Phase 2 Online: Blended Summer Study'
          lesson_groups: {}
          description_audience: ''
          student_description: 'Phase 2 Online: Blended Summer Study'
        ECSPD2-NexTech:
          title: 'Exploring Computer Science PD: Blended Summer Study'
          description: 'Phase 2 Online: Blended Summer Study'
          description_short: 'Phase 2 Online: Blended Summer Study'
          lesson_groups: {}
          description_audience: ''
          student_description: 'Phase 2 Online: Blended Summer Study'
        CSPPD2:
          title: 'Computer Science Principles PD: Blended Summer Study'
          description: 8-hour online PD that builds on the 5-day in-person experience and helps teachers prepare for the beginning of the semester
          description_short: 'Blended Summer Study: 8 hour online'
          lesson_groups: {}
          student_description: 8-hour online PD that builds on the 5-day in-person experience and helps teachers prepare for the beginning of the semester
        odometer:
          title: Odometer Widget
          description: Use the Odometer widget to control odometers with various number bases. Binary, Decimal and Hexadecimal are the most common number systems to see in computer science.
          description_short: Use the Odometer widget to control odometers with various number bases.
          description_audience: ''
          lesson_groups: {}
          student_description: Use the Odometer widget to control odometers with various number bases. Binary, Decimal and Hexadecimal are the most common number systems to see in computer science.
        asUnplugged:
          title: Afterschool Unplugged
          description: Afterschool Unplugged is designed to teach computational thinking and computer science ideas through offline games and crafts. Created with informal classrooms in mind, these lessons are fantastic on their own, or in combination with Afterschool 1 . This course focuses on learning through entertainment. Recommended for grades K-8.
          description_short: Short unplugged course designed for informal learning
          description_audience: Ages 6-13
          lesson_groups: {}
          student_description: Afterschool Unplugged is designed to teach computational thinking and computer science ideas through offline games and crafts. Created with informal classrooms in mind, these lessons are fantastic on their own, or in combination with Afterschool 1 . This course focuses on learning through entertainment. Recommended for grades K-8.
        afterschool1:
          title: Afterschool 1
          description: Afterschool 1 is designed to for informal classrooms where students vary in age and assessment is not required. This course focuses on learning through entertainment, with varying options for implementation, all in 10 sessions or less. Use alone or with Afterschool Unplugged. Recommended for grades 3-8.
          description_short: Short course designed for informal learning
          description_audience: Ages 7-13
          stage: {}
        vigenere:
          title: Vigenere Cipher Widget
          description: Use the Vigenere Cipher Widget to explore encrypting and decrypting messages using a Vigenere Cipher.
          description_short: Use the Vigenere Cipher Widget to explore encrypting and decrypting messages using a Vigenere Cipher.
          description_audience: ''
          lesson_groups: {}
          student_description: Use the Vigenere Cipher Widget to explore encrypting and decrypting messages using a Vigenere Cipher.
        algebraPD3a:
          title: Computer Science in Algebra PD
          description: 'Phase 3 (Part 2): CS in Algebra blended online school year study'
          description_short: 'Phase 3 (Part 1): CS in Algebra blended online school year study'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 3 (Part 2): CS in Algebra blended online school year study'
        sciencePD3_pre1:
          title: CS in Science PD3 Before 1st In-Person
          description: 'Phase 3: Academic Year Development (Segment One)'
          description_short: 'Phase 3: Academic Year Development Pre 1'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 3: Academic Year Development (Segment One)'
        frequency_analysis:
          title: Frequency Analysis Widget
          description: Use the Frequency Analysis Widget to analyze letter frequencies in an input text compared to expected frequencies for standard English. Use that comparison to explore cracking Shift and Substitution Ciphers.
          description_short: Use the Frequency Analysis Widget to analyze letter frequencies in a text compared to expected frequencies. Crack Shift and Substitution Ciphers.
          description_audience: ''
          lesson_groups: {}
          student_description: Use the Frequency Analysis Widget to analyze letter frequencies in an input text compared to expected frequencies for standard English. Use that comparison to explore cracking Shift and Substitution Ciphers.
        ECSPD3-Unit2:
          title: 'Exploring Computer Science: Unit 2'
          description: Online Professional Development Course
          description_short: Unit 2 Online PD
          description_audience: ''
          lesson_groups: {}
          student_description: Online Professional Development Course
        ECSPD3-Unit3:
          title: 'Exploring Computer Science: Unit 3'
          description: Academic Year Development
          description_short: Academic Year Development
          description_audience: ''
          lesson_groups: {}
          student_description: Academic Year Development
        ECSPD3-Unit4:
          title: 'Exploring Computer Science: Unit 4'
          description: Academic Year Development
          description_short: Academic Year Development
          description_audience: ''
          lesson_groups: {}
          student_description: Academic Year Development
        ECSPD3-Unit5:
          title: 'Exploring Computer Science PD: Academic Year Development'
          description: Academic Year Development
          description_short: Academic Year Development
          description_audience: ''
          lesson_groups: {}
          student_description: Academic Year Development
        ECSPD3-Unit6:
          title: 'Exploring Computer Science PD: Academic Year Development'
          description: Academic Year Development
          description_short: Academic Year Development
          description_audience: ''
          lesson_groups: {}
          student_description: Academic Year Development
        cspunit4draft:
          title: CS Principles Unit 4 - Data
          description: "Collect, analyze, and extract knowledge from data by programming and\r\nbuilding apps. Process data imported from other sources and also pull\r\ndata from live data APIs."
          description_short: Data
          description_audience: ''
          lesson_groups: {}
          student_description: "Collect, analyze, and extract knowledge from data by programming and\r\nbuilding apps. Process data imported from other sources and also pull\r\ndata from live data APIs."
        ScienceP3OLPT2:
          title: Computer Science in Science PD Phase 3A Post Work
          description: Phase 3 Academic Year Development
          description_short: Phase 3 Academic Year Development
          description_audience: ''
        algebraPD3b:
          title: Computer Science in Algebra PD
          description: 'Phase 3 (Part 2): CS in Algebra mid year lesson support'
          description_short: 'Phase 3 (Part 2): CS in Algebra mid year lesson support'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Phase 3 (Part 2): CS in Algebra mid year lesson support'
        CSPPD3-Unit2:
          title: 'Computer Science Principles: Unit 2 PD'
          description: Online Exploration of CSP Unit 2
          description_short: Online Exploration of CSP Unit 2
          description_audience: ''
          lesson_groups: {}
          student_description: Online Exploration of CSP Unit 2
        duino:
          title: Experimenting with Arduino stuff
          description: Testing some tools for teaching with Arduinos
          lesson_groups: {}
          student_description: Testing some tools for teaching with Arduinos
        Special Fun:
          title: Special Fun
          description_short: Something special for those who know it exists. These puzzles might not be around long, so enjoy them while you can!
          description_audience: Ages 10-18
          description: ''
          lesson_groups: {}
          student_description: ''
        SpecialSeries:
          title: Special Levels
          description: Something special for those who know it exists. These puzzles might not be around long, so enjoy them while you can!
          description_short: Something special for those who know it exists. These puzzles might not be around long, so enjoy them while you can!
          description_audience: Ages 10-18
          lesson_groups: {}
          student_description: Something special for those who know it exists. These puzzles might not be around long, so enjoy them while you can!
        iceage:
          title: Ice Age Play Lab
          description: Create a story or make a game with Ice Age Play Lab!
          description_short: Create a story or make a game with Ice Age Play Lab!
          description_audience: ''
          lesson_groups: {}
          student_description: Create a story or make a game with Ice Age Play Lab!
          name: iceage
          lessons: {}
        CSPPD3-Unit3:
          title: 'Computer Science Principles: Unit 3 PD'
          description: Online Exploration of CSP Unit 3
          description_short: Online Exploration of CSP Unit 3
          lesson_groups: {}
          student_description: Online Exploration of CSP Unit 3
        cspunit3temp:
          title: "(old) CS Principles Unit 3 - Programming"
          description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          description_short: This unit is a pilot version and is no longer supported or updated. You can find the new units at code.org/educate/csp.
          description_audience: ''
          lesson_groups: {}
          student_description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
        CSP-Unit3-Support:
          title: 'Computer Science Principles: Unit 3 PD'
          description: Online Exploration of CSP Unit 3
          description_short: Online Exploration of CSP Unit 3
          lesson_groups: {}
          student_description: Online Exploration of CSP Unit 3
        gumball:
          title: Gumball Play Lab
          description: Create a story or make a game with Gumball Play Lab!
          description_short: Create a story or make a game with Gumball Play Lab!
          lesson_groups: {}
          description_audience: ''
          student_description: Create a story or make a game with Gumball Play Lab!
          name: gumball
          lessons: {}
        starwars:
          title: 'Star Wars: Building a Galaxy With Code (JavaScript)'
          description: Learn to program droids, and create your own Star Wars game in a galaxy far, far away.
          description_short: Learn to program droids, and create your own Star Wars game in a galaxy far, far away.
          description_audience: ''
          lesson_groups: {}
          student_description: Learn to program droids, and create your own Star Wars game in a galaxy far, far away.
          name: starwars
          lessons: {}
        starwarsblocks:
          title: 'Star Wars: Building a Galaxy With Code (Blockly)'
          description: Learn to program droids, and create your own Star Wars game in a galaxy far, far away.
          description_short: Learn to program droids, and create your own Star Wars game in a galaxy far, far away.
          description_audience: ''
          lesson_groups: {}
          student_description: Learn to program droids, and create your own Star Wars game in a galaxy far, far away.
          name: starwarsblocks
          lessons: {}
        mc:
          title: Minecraft Adventurer
          description: Use blocks of code to take Steve or Alex on an adventure through this Minecraft world.
          description_short: Explore a Minecraft world through code.
          description_audience: ''
          lesson_groups: {}
          student_description: Use blocks of code to take Steve or Alex on an adventure through this Minecraft world.
          name: mc
          lessons: {}
        oceans:
          title: AI for Oceans
          description: Learn how AI and machine learning can be used to address world problems.
          description_short: Learn how AI and machine learning can be used to address world problems.
          description_audience: ''
          lesson_groups: {}
          student_description: Learn how AI and machine learning can be used to address world problems.
          name: oceans
          lessons: {}
        CSPPD3-Unit3-pt2:
          title: 'Computer Science Principles: Unit 3 PD Challenges'
          description: Online Exploration of CSP Unit 3-- Lesson Challenges
          description_short: Online Exploration of CSP Unit 3-- Lesson Challenges
          lesson_groups: {}
          student_description: Online Exploration of CSP Unit 3-- Lesson Challenges
        ScienceP3OLPT3:
          title: Computer Science in Science PD Pre-Phase 3B
          description: Phase 3 Academic Year Development
          description_short: Phase 3 Academic Year Development
          description_audience: ''
          lesson_groups: {}
          student_description: Phase 3 Academic Year Development
        cspunit5:
          title: "(old) CS Principles Unit 5 - Performance Tasks"
          description: This unit covers the preparation and completion of the Explore and Create Performance Tasks.
          description_short: This unit is a pilot version and is no longer supported or updated. You can find the new units at code.org/educate/csp.
          description_audience: ''
          lesson_groups: {}
          student_description: This unit covers the preparation and completion of the Explore and Create Performance Tasks.
        cspunit4:
          title: "(old) CS Principles Unit 4 - Data"
          description: Being able to digitally manipulate data, visualize it, and identify patterns, trends and possible meanings are important practical skills that computer scientists do every day. The data-rich world we live in also introduces many complex questions related to public policy, law, ethics and societal impact. Understanding where data comes from, having intuitions about what could be learned or extracted from it, and being able to use computational tools to manipulate data and communicate about it are the primary skills addressed in the unit.
          description_short: This unit is a pilot version and is no longer supported or updated. You can find the new units at code.org/educate/csp.
          description_audience: ''
          lesson_groups: {}
          student_description: Being able to digitally manipulate data, visualize it, and identify patterns, trends and possible meanings are important practical skills that computer scientists do every day. The data-rich world we live in also introduces many complex questions related to public policy, law, ethics and societal impact. Understanding where data comes from, having intuitions about what could be learned or extracted from it, and being able to use computational tools to manipulate data and communicate about it are the primary skills addressed in the unit.
        CSPPD3-Unit4:
          title: 'Computer Science Principles: Unit 4 PD'
          description: Online Support for CSP Unit 4
          description_short: Support for CSP Unit 4
          lesson_groups: {}
          student_description: Online Support for CSP Unit 4
        cspunit6draft:
          title: CSP Post-AP Material - Databases and Using Data in Your Apps
          description: App Lab has a number of tools that allow you to collect and use data in your apps. The following material provides an overview of how these tools work, and it concludes with a sampling of example projects that can be built using these tools.
          description_short: Data Apps
          description_audience: ''
          lesson_groups: {}
          student_description: App Lab has a number of tools that allow you to collect and use data in your apps. The following material provides an overview of how these tools work, and it concludes with a sampling of example projects that can be built using these tools.
        CSPPD3-Unit5:
          title: 'Computer Science Principles: Unit 5 PD'
          description: Online Support for CSP Unit 5
          description_short: Support for CSP Unit 5
          lesson_groups: {}
          student_description: Online Support for CSP Unit 5
        cspunit6:
          title: CSP Post-AP Material - Databases and Using Data in Your Apps
          description: App Lab has a number of tools that allow you to collect and use data in your apps. The following material provides an overview of how these tools work, a sampling of example projects that can be built using these tools, and a space in which to build and submit a final project.
          description_short: Learn to collect and use data in App Lab apps.
          description_audience: ''
          lesson_groups: {}
          student_description: App Lab has a number of tools that allow you to collect and use data in your apps. The following material provides an overview of how these tools work, a sampling of example projects that can be built using these tools, and a space in which to build and submit a final project.
        AlgebraA:
          title: 'Computer Science in Algebra: Course A'
          description: Learn Functional Programming through Algebra
          description_short: Learn Functional Programming through Algebra
          description_audience: ''
          lesson_groups: {}
          student_description: Learn Functional Programming through Algebra
          lessons: {}
          name: AlgebraA
        AlgebraB:
          title: 'Computer Science in Algebra: Course B'
          description: Learn Functional Programming through Algebra
          description_short: Learn Functional Programming through Algebra
          description_audience: ''
          lesson_groups: {}
          student_description: Learn Functional Programming through Algebra
          lessons: {}
          name: AlgebraB
        gamelab-hackathon:
          title: Gamelab Hackathon
          description: A place to try things out in Game Lab
          description_short: Gamelab Hackathon
          lesson_groups: {}
          student_description: A place to try things out in Game Lab
        algebraPD1:
          title: CS in Algebra Part 1
          description: Teach Algebra through Functional Programming
          description_short: 'Phase 1: Online Introduction'
          description_audience: ''
          lesson_groups: {}
          student_description: Teach Algebra through Functional Programming
        algebraPD3c:
          title: Computer Science in Algebra PD
          description: CS in Algebra end of year reflection
          description_short: CS in Algebra end of year reflection
          description_audience: ''
          lesson_groups: {}
          student_description: CS in Algebra end of year reflection
        csp1-2017:
          title: CSP Unit 1 - The Internet ('17-'18)
          description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers and transfer it between people and computational devices. The unit then explores the structure and design of the internet and the implications of those design decisions.
          description_short: Explore the challenges about representing information as bits and how to get those bits from one place to another.
          description_audience: ''
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csp1_1:
              display_name: 'Chapter 1: Representing and Transmitting Information'
            csp1_2:
              display_name: 'Chapter 2: Inventing the Internet'
          student_description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers and transfer it between people and computational devices. The unit then explores the structure and design of the internet and the implications of those design decisions.
        csp2-2017:
          title: CSP Unit 2 - Digital Information ('17-'18)
          description: This unit further explores the ways that digital information is encoded, represented and manipulated. Being able to digitally manipulate data, visualize it, and identify patterns, trends and possible meanings are important practical skills that computer scientists do every day. Understanding where data comes from, having intuitions about what could be learned or extracted from it, and being able to use computational tools to manipulate data and communicate about it are the primary skills addressed in the unit.
          description_short: Explore how more complex digital information is represented and manipulated through computation and visualization.
          description_audience: ''
          lesson_groups:
            csp2_1:
              display_name: 'Chapter 1: Encoding and Compressing Complex Information'
            csp2_2:
              display_name: 'Chapter 2: Manipulating and Visualizing Data'
            cspSurvey:
              display_name: Survey
          student_description: This unit further explores the ways that digital information is encoded, represented and manipulated. Being able to digitally manipulate data, visualize it, and identify patterns, trends and possible meanings are important practical skills that computer scientists do every day. Understanding where data comes from, having intuitions about what could be learned or extracted from it, and being able to use computational tools to manipulate data and communicate about it are the primary skills addressed in the unit.
        csp3-2017:
          title: CSP Unit 3 - Intro to Programming ('17-'18)
          description: "This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.\r\n\r\nThis unit was last updated October 30th, 2017. Read more about curriculum updates at forum.code.org/c/csp/updates."
          description_short: Learn the basics of programming in JavaScript through a top-down design approach using classic turtle drawing.
          description_audience: ''
          lesson_groups:
            csp3_1:
              display_name: 'Chapter 1: Programming Languages and Algorithms'
            cspAssessment:
              display_name: Chapter Assessment
            cspSurvey:
              display_name: Survey
          student_description: "This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.\r\n\r\nThis unit was last updated October 30th, 2017. Read more about curriculum updates at forum.code.org/c/csp/updates."
        csp4-2017:
          title: CSP Unit 4 - Big Data and Privacy ('17-'18)
          description: "The data-rich world we live in introduces many complex questions related to public policy, law, ethics and societal impact. The goals of this unit are to develop a well-rounded and balanced view about data in the world, including the positive and negative effects of it, and to understand the basics of how and why modern encryption works.\r\n\r\nThis unit was last updated November, 2017. Read more about curriculum updates at forum.code.org/c/csp/updates."
          description_short: Explore the data-rich world we live, and how data impacts public policy, personal privacy, security, the law, and ethics.
          description_audience: ''
          lesson_groups:
            csp4_1:
              display_name: 'Chapter 1: The World of Big Data and Encryption'
            cspAssessment:
              display_name: Chapter Assessment
            cspSurvey:
              display_name: Survey
          student_description: "The data-rich world we live in introduces many complex questions related to public policy, law, ethics and societal impact. The goals of this unit are to develop a well-rounded and balanced view about data in the world, including the positive and negative effects of it, and to understand the basics of how and why modern encryption works.\r\n\r\nThis unit was last updated November, 2017. Read more about curriculum updates at forum.code.org/c/csp/updates."
        csp5-2017:
          title: CSP Unit 5 - Building Apps ('17-'18)
          description: This unit continues the introduction of foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          description_short: Continue to learn foundational concepts of computer programming in JavaScript by making rich, interactive apps.
          description_audience: ''
          lesson_groups:
            csp5_1:
              display_name: 'Chapter 1: Event-Driven Programming'
            csp5_2:
              display_name: 'Chapter 2: Programming with Data Structures'
            cspSurvey:
              display_name: Survey
          student_description: This unit continues the introduction of foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
        csp6:
          title: CSP Unit 6 - AP Performance Tasks
          description: This unit covers the preparation and completion of the Create and Explore Performance Tasks.
          description_short: Lessons guide students to prepare for and complete the AP Performance Tasks.
          description_audience: ''
          lesson_groups: {}
          student_description: This unit covers the preparation and completion of the Create and Explore Performance Tasks.
        CSDU3-Draft:
          title: " TEMP CSD Unit 3 - Interactive Games and Animations"
          description: Temp place to work on U3 of Disco
          description_short: Programming
          description_audience: ''
        2016_sciencePD_phase1:
          title: 'CS in Science: Part 1'
          description: In Partnership with Project GUTS
          description_short: In Partnership with Project GUTS
          description_audience: ''
          lesson_groups: {}
          student_description: In Partnership with Project GUTS
        TEMP CSD Unit 3:
          title: " TEMP CSD Unit 3 - Interactive Games and Animations"
          description: ''
          description_short: Programming
          description_audience: ''
        CSF_Secret_Sample:
          title: Secret Sample
          description: Test of new educational philosophy
          description_short: This is a secret...shhhhh
          description_audience: Ages 8-18
          lesson_groups: {}
          student_description: Test of new educational philosophy
        ECSPD1:
          title: ECS Part 1
          description: Two hour introduction to your Professional Learning Program for the ECS Version 5 curriculum
          description_short: 'Phase 1: Online Introduction'
          description_audience: ''
          lesson_groups: {}
          student_description: Two hour introduction to your Professional Learning Program for the ECS Version 5 curriculum
        algebraFacilitator:
          title: Computer Science in Algebra Facilitator Pre Work
          description: Teach Algebra through Functional Programming
          description_short: Teach Algebra through Functional Programming
          description_audience: ''
          lesson_groups: {}
          student_description: Teach Algebra through Functional Programming
        sciencePD1:
          title: 'CS in Science: Part 1'
          description: In Partnership with Project GUTS
          description_short: 'Phase 1: Online Introduction'
          description_audience: ''
          lesson_groups: {}
          student_description: In Partnership with Project GUTS
        cspoptional:
          title: CS Principles Optional Lessons
          description: Optional lessons and content across all of the CS Principles units are listed here
          description_short: Optional
          description_audience: ''
          lesson_groups: {}
          student_description: Optional lessons and content across all of the CS Principles units are listed here
        cspunit1-support:
          title: Online Support for CSP Unit 1
          description: This is a test Professional Learning Course
          description_audience: ''
          description_short: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
            practice:
              display_name: Teaching Practices
          student_description: This is a test Professional Learning Course
        test-teaching-ap-cs-unit-1:
          title: Test CPS PD
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
            practice:
              display_name: Teaching Practices
          student_description: ''
        allthehiddenthings:
          title: All the Hidden Things!
          description: Unreleased level types for UI testing as admin
          description_short: Unreleased level types for UI testing as admin
          lesson_groups: {}
          student_description: Unreleased level types for UI testing as admin
        cspunit1-support-test:
          title: CSP Unit 1 teacher support
          description: Online Supports for CSP Unit 1
          description_audience: ''
          description_short: ''
          lesson_groups: {}
          student_description: Online Supports for CSP Unit 1
        cspunit1-tools:
          title: netsim task completion
          description: introduction to the internet simulator and a discussion of how we use it to teach the internet
          lesson_groups: {}
          student_description: introduction to the internet simulator and a discussion of how we use it to teach the internet
        csp-facilitators:
          title: CSP Tool Overview
          description: A collection of tools from the CS Principles course. These levels provide a glimpse into the tools we use throughout the curriculum to
          description_short: Introduction to CS Principles for new Facilitators
          description_audience: ''
          lesson_groups: {}
          student_description: A collection of tools from the CS Principles course. These levels provide a glimpse into the tools we use throughout the curriculum to
        cspassessment:
          title: "[Deprecated] CS Principles Culminating Assessment"
          description: 'This assessment has been deprecated and is scheduled for removal in Summer of 2017.  Students may complete the test and see their own results, but a teacher will not be able to see results for students in a section.  Please use the official CSP practice exam from the College Board.  [This 55-question multiple choice assessment covers questions across 7 big ideas of computer science: Creativity, Abstraction, Data, Algorithms, Programming, The Internet, and Global Impact.]'
          description_short: This assessment has been deprecated and is scheduled for removal in Summer of 2017.
          description_audience: ''
          lesson_groups: {}
          student_description: 'This assessment has been deprecated and is scheduled for removal in Summer of 2017.  Students may complete the test and see their own results, but a teacher will not be able to see results for students in a section.  Please use the official CSP practice exam from the College Board.  [This 55-question multiple choice assessment covers questions across 7 big ideas of computer science: Creativity, Abstraction, Data, Algorithms, Programming, The Internet, and Global Impact.]'
        cspexam1-mWU7ilDYM9:
          title: CS Principles Culminating Assessment - Part 1
          description: 'This 25 question multiple choice assessment covers questions across 7 big ideas of computer science: Creativity, Abstraction, Data, Algorithms, Programming, The Internet, and Global Impact.'
          description_short: This multiple choice assessment covers questions across 7 big ideas of computer science. It is part 1 of a two-part 50 question exam.
          description_audience: ''
          lesson_groups: {}
          student_description: 'This 25 question multiple choice assessment covers questions across 7 big ideas of computer science: Creativity, Abstraction, Data, Algorithms, Programming, The Internet, and Global Impact.'
        cspexam2-AKwgAh1ac5:
          title: CS Principles Culminating Assessment - Part 2
          description: 'This 25 question multiple choice assessment covers questions across 7 big ideas of computer science: Creativity, Abstraction, Data, Algorithms, Programming, The Internet, and Global Impact.  It is part 2 of a two-part 50 question exam'
          description_short: This multiple choice assessment covers questions across 7 big ideas of computer science. It is part 2 of a two-part 50 question exam.
          description_audience: ''
          lesson_groups: {}
          student_description: 'This 25 question multiple choice assessment covers questions across 7 big ideas of computer science: Creativity, Abstraction, Data, Algorithms, Programming, The Internet, and Global Impact.  It is part 2 of a two-part 50 question exam'
        CSDU4-Draft:
          title: " TEMP CSD Unit 4 - The Design Process"
          description: Temp place to work on U4 of Disco
          description_short: Design Process and App Lab
          description_audience: ''
        CSDU1-Draft:
          title: " TEMP CSD Unit 1"
          description: Temp place to work on U1 of Disco
          description_short: Problem Solving
        CSDU2-Draft:
          title: " TEMP CSD Unit 2"
          description: Temp place to work on U2 of Disco
          description_short: Web Development
          description_audience: ''
        CSDU5-Draft:
          title: " TEMP CSD Unit 5"
          description: Temp place to work on U5 of Disco
          description_short: Data
          stage: {}
        CSDU6-Draft:
          title: " TEMP CSD Unit 6 "
          description: Temp place to work on U6 of Disco
          description_short: Makerlab
          stage: {}
        CSF_Secret_Sample_Story:
          title: Secret Sample with Story
          description: Test of new educational philosophy with guiding storyline
          description_short: This is a secret...shhhh
          description_audience: Ages 8-18+
          lesson_groups: {}
          student_description: Test of new educational philosophy with guiding storyline
        MikeTest:
          title: MikeTest
          description: Trying not to break anything
          description_short: Just a script for playing around
          description_audience: Ages 8-98
          lesson_groups: {}
          student_description: Trying not to break anything
        artistExemplar:
          title: Artist Exemplar
          description: These artist levels will knock the socks off of third graders
          description_short: How can we make the artist levels really hum?
          description_audience: Ages 8-18
          lesson_groups: {}
          student_description: These artist levels will knock the socks off of third graders
        teachercon:
          title: TeacherCon Supports
          description: We will use this during TeacherCon to deliver supports and materials for sessions
          description_short: We will use this during TeacherCon to deliver supports and materials for sessions
          description_audience: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
            practice:
              display_name: Teaching Practices
          student_description: We will use this during TeacherCon to deliver supports and materials for sessions
        kinderTest:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        gradeKinder:
          title: Kindergarten
          description: Planning Script for CSF 2.0
          description_short: Planning Script for CSF 2.0
          description_audience: Ages 5-18
        grade4:
          title: Grade 4
          description: Planning Script for CSF 2.0
          description_short: Planning Script for CSF 2.0
          description_audience: Ages 9-99
        grade1:
          title: Grade 1
          description: Planning Script for CSF 2.0
          description_short: Planning Script for CSF 2.0
          description_audience: Ages 5-18
        grade5:
          title: Grade 5
          description: Planning Script for CSF 2.0
          description_short: Planning Script for CSF 2.0
          description_audience: Ages 10-110
          lesson_groups: {}
          student_description: Planning Script for CSF 2.0
        ecs-unit1:
          title: ECS Unit 1
          description: 'Unit 1: Human-Computer Interaction'
          description_short: 'Unit 1: Human-Computer Interaction'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Unit 1: Human-Computer Interaction'
        ecs-unit2:
          title: ECS Unit 2
          description: 'Unit 2: Problem Solving'
          description_short: 'Unit 2: Problem Solving'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Unit 2: Problem Solving'
        ecs-unit3:
          title: ECS Unit 3
          description: 'Unit 3: Web Design'
          description_short: 'Unit 3: Web Design'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Unit 3: Web Design'
        ecs-unit4:
          title: ECS Unit 4
          description: 'Unit 4: Programming'
          description_short: 'Unit 4: Programming'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Unit 4: Programming'
        ecs-unit5:
          title: ECS Unit 5
          description: 'Unit 5: Computer and Data Analysis'
          description_short: 'Unit 5: Computer and Data Analysis'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Unit 5: Computer and Data Analysis'
        ecs-unit6:
          title: ECS Unit 6
          description: 'Unit 6: Robotics'
          description_short: 'Unit 6: Robotics'
          description_audience: ''
          lesson_groups: {}
          student_description: 'Unit 6: Robotics'
        grade3:
          title: Grade 3
          description: Planning Script for CSF 2.0
          description_short: Planning Script for CSF 2.0
          description_audience: Ages 5-18
        alltheplcthings:
          title: Sample course for PLC things
          description: This is a sample course that has all of the plc special things. Enrollment in this course does nothing. Right now, it's just a copy of TeacherCon
          description_short: This is a sample course that has all of the plc special things
          description_audience: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
            practice:
              display_name: Teaching Practices
          student_description: This is a sample course that has all of the plc special things. Enrollment in this course does nothing. Right now, it's just a copy of TeacherCon
        csd3-2017:
          title: CSD Unit 3 - Animations and Games ('17-'18)
          description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          description_short: Programación
          description_audience: ''
          lesson_groups:
            csd3_1:
              display_name: 'Chapter 1: Images and Animations'
            csd3_2:
              display_name: 'Chapter 2: Building Games'
            cspSurvey:
              display_name: Survey
            csd_survey:
              display_name: Post-Course Survey
          student_description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
        grade2:
          title: Grade 2
          description: Planning Script for CSF 2.0
          description_short: Planning Script for CSF 2.0
          description_audience: Ages 5-18
        transferring-over:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        k5concepts:
          title: K5 Concepts
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        algebrapdnext:
          title: Computer Science in Algebra PD Phase 2
          description: Teach Algebra through Functional Programming
          description_short: "\tPhase 3: School Year Support"
          description_audience: ''
          lesson_groups: {}
          student_description: Teach Algebra through Functional Programming
        csp-pre-survey:
          title: CS Principles Pre-Survey
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
          name: csp-pre-survey
        csd1-2017:
          title: CSD Unit 1 - Problem Solving ('17-'18)
          description_short: "  Learn how humans work with computers to solve problems."
          description: " \r\nUnit 1 is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
          description_audience: ''
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csd1_1:
              display_name: 'Chapter 1: The Problem Solving Process'
            csd1_2:
              display_name: 'Chapter 2: Computers and Problem Solving'
          student_description: " \r\nUnit 1 is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
        csp-online-test:
          title: test space for csp online support
          description_short: This is a sample course for testing csp online pd
          description: This is a test space for online pd. Enrollment in this course does nothing.
          description_audience: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
            practice:
              display_name: Teaching Practices
          student_description: This is a test space for online pd. Enrollment in this course does nothing.
        csp1-support:
          title: Unit 1 Online Professional Learning Course
          description_short: Teacher Professional Learning Course for CSP Unit 1
          description: This is a set of online supports arranged into a Professional Learning Course for CSP teachers preparing to teach Unit 1.
          description_audience: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
            practice:
              display_name: Teaching Practices
          student_description: This is a set of online supports arranged into a Professional Learning Course for CSP teachers preparing to teach Unit 1.
        basketball:
          title: Choose your team and make a basketball game
          description_audience: ''
          description_short: Choose your team and make a basketball game
          description: Choose your team and make a basketball game
          lesson_groups: {}
          student_description: Choose your team and make a basketball game
          name: basketball
          lessons: {}
        sample-csp5: {}
        hoc-encryption:
          title: 'Hour of Code: Simple Encryption'
          description_audience: ''
          description_short: In this lesson, students are introduced to the need for encryption and simple techniques for breaking (or cracking) secret messages.
          description: In this lesson, students are introduced to the need for encryption and simple techniques for breaking (or cracking) secret messages.
          lesson_groups: {}
          student_description: In this lesson, students are introduced to the need for encryption and simple techniques for breaking (or cracking) secret messages.
          name: hoc-encryption
          lessons: {}
        csd2-2017:
          title: CSD Unit 2 - Web Development ('17-'18)
          description_audience: ''
          description_short: "  Learn to build your own web site in Web Lab."
          description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging and commenting.  By the end of the unit, you’ll have a personal website that you can publish to the Internet."
          lesson_groups:
            csd2_1:
              display_name: 'Chapter 1: Web Content and HTML'
            csd2_2:
              display_name: 'Chapter 2: Styling and CSS'
            csd_survey:
              display_name: Post-Course Survey
          student_description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging and commenting.  By the end of the unit, you’ll have a personal website that you can publish to the Internet."
        csp2-support:
          title: Unit 2 Online Professional Learning Course
          description_audience: ''
          description_short: Teacher Professional Learning Course for CSP Unit 2
          description: 'This is a set of online supports arranged into a Professional Learning Course for CSP teachers preparing to teach Unit 2. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
            practice:
              display_name: Teaching Practices
          student_description: 'This is a set of online supports arranged into a Professional Learning Course for CSP teachers preparing to teach Unit 2. '
        csd4-2017:
          title: CSD Unit 4 - The Design Process ('17-'18)
          description_audience: ''
          description_short: "  Learn how to design a program that meets the needs of your users."
          description: Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          lesson_groups:
            csd4_1:
              display_name: 'Chapter 1: User Centered Design'
            csd4_2:
              display_name: 'Chapter 2: App Prototyping'
            csd_survey:
              display_name: Post-Course Survey
          student_description: Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
        minecraft:
          title: Minecraft Designer
          description_audience: ''
          description_short: Program animals and other Minecraft creatures in your own version of Minecraft.
          description: Program animals and other Minecraft creatures in your own version of Minecraft.
          lesson_groups: {}
          student_description: Program animals and other Minecraft creatures in your own version of Minecraft.
          name: minecraft
          lessons: {}
        flappy-impact-study:
          title: Flappy Code with Survey
          description_audience: ''
          description_short: 'Write your own Flappy game in less than 10 minutes! '
          description: Want to write your own game in less than 10 minutes? Try our Flappy Code tutorial! This version includes pre and post surveys to help us continue to improve Hour of Code. Ask your class to skip ahead to the post survey 10 minutes before class ends.
          lesson_groups: {}
          student_description: Want to write your own game in less than 10 minutes? Try our Flappy Code tutorial! This version includes pre and post surveys to help us continue to improve Hour of Code. Ask your class to skip ahead to the post survey 10 minutes before class ends.
        coursea-draft:
          title: 'CS Fundamentals: Course A'
          description_audience: ''
          description_short: An introduction to computer science for early readers.
          description: "Course A is for early readers. Students will create computer programs that will help them learn to collaborate with others, develop problem-solving skills, and persist through difficult tasks. By the end of this course, students create their very own custom game or story that they can share. \r\nRecommended for grade K."
          lesson_groups: {}
          student_description: "Course A is for early readers. Students will create computer programs that will help them learn to collaborate with others, develop problem-solving skills, and persist through difficult tasks. By the end of this course, students create their very own custom game or story that they can share. \r\nRecommended for grade K."
        courseb-draft:
          title: 'CS Fundamentals: Course B'
          description_audience: ''
          description_short: An introduction to computer science for early readers.
          description: Course B is for early readers. Students will create computer programs that will help them learn to collaborate with others, develop problem-solving skills, and persist through difficult tasks. By the end of this course, students create their very own custom game or story that they can share. Recommended for 1st grade.
          lesson_groups: {}
          student_description: Course B is for early readers. Students will create computer programs that will help them learn to collaborate with others, develop problem-solving skills, and persist through difficult tasks. By the end of this course, students create their very own custom game or story that they can share. Recommended for 1st grade.
        coursec-draft:
          title: 'CS Fundamentals: Course C'
          description_audience: ''
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description: In this course students will create programs to solve problems and develop interactive games or stories they can share. Recommended for 2nd grade.
          lesson_groups: {}
          student_description: In this course students will create programs to solve problems and develop interactive games or stories they can share. Recommended for 2nd grade.
        coursed-draft:
          title: 'CS Fundamentals: Course D'
          description_audience: ''
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description: In this course students will create programs to solve problems and develop interactive games or stories they can share. Recommended for 3rd grade.
          lesson_groups: {}
          student_description: In this course students will create programs to solve problems and develop interactive games or stories they can share. Recommended for 3rd grade.
        coursee-draft:
          title: 'CS Fundamentals: Course E'
          description_audience: ''
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description: In this course students will create programs to solve problems and develop interactive games or stories they can share. The course culminates in a multi-day project. Recommended for 4th grade.
          lesson_groups:
            content:
              display_name: Content
            end_of_course_project:
              display_name: End of Course Project
            extra_course_content:
              display_name: Extra Course Content
          student_description: In this course students will create programs to solve problems and develop interactive games or stories they can share. The course culminates in a multi-day project. Recommended for 4th grade.
        coursef-draft:
          title: 'CS Fundamentals: Course F'
          description_audience: ''
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description: In this course students will create programs to solve problems and develop interactive games or stories they can share. The course culminates in a multi-day project. Recommended for 5th grade.
          lesson_groups:
            content:
              display_name: Content
            end_of_course_project:
              display_name: End of Course Project
          student_description: In this course students will create programs to solve problems and develop interactive games or stories they can share. The course culminates in a multi-day project. Recommended for 5th grade.
        classic-hoc-impact-study:
          title: Hour of Code with Survey
          description_audience: ''
          description_short: Try the basics of computer science with many fun characters!
          description: Try the basics of computer science with characters from Angry Birds and Plants vs. Zombies! This version includes pre and post surveys to help us continue to improve Hour of Code. Ask your class to skip ahead to the post survey 10 minutes before class ends.
        hoc-impact-study:
          title: Classic Maze with Survey
          description_audience: ''
          description_short: Try the basics of computer science with many fun characters!
          description: Try the basics of computer science with characters from Angry Birds and Plants vs. Zombies! This version includes pre and post surveys to help us continue to improve Hour of Code. Ask your class to skip ahead to the post survey 10 minutes before class ends.
          lesson_groups: {}
          student_description: Try the basics of computer science with characters from Angry Birds and Plants vs. Zombies! This version includes pre and post surveys to help us continue to improve Hour of Code. Ask your class to skip ahead to the post survey 10 minutes before class ends.
        sports:
          title: Code your own sports game
          description_audience: ''
          description_short: Mix and match across sports
          description: Mix and match across sports
          lesson_groups: {}
          student_description: Mix and match across sports
          name: sports
          lessons: {}
        2016_sciencePD-phase2b:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        2016_sciencePD_phase2b:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        sciencepd3-2016:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csp3-support:
          title: Unit 3 Online Professional Learning Course
          description_audience: ''
          description_short: Teacher Professional Learning Course for CSP Unit 3
          description: This is a set of online supports arranged into a Professional Learning Course for CSP teachers preparing to teach Unit 3.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
            practice:
              display_name: Teaching Practices
          student_description: This is a set of online supports arranged into a Professional Learning Course for CSP teachers preparing to teach Unit 3.
        csdgraveyard:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csp4-support:
          title: Unit 4 Online Professional Learning Course
          description_audience: ''
          description_short: Teacher Professional Learning Course for CSP Unit 4
          description: This is a set of online supports arranged into a Professional Learning Course for CSP teachers preparing to teach Unit 4.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
            practice:
              display_name: Teaching Practices
          student_description: This is a set of online supports arranged into a Professional Learning Course for CSP teachers preparing to teach Unit 4.
        sciencepd4:
          title: 'CS in Science: Part 4'
          description_audience: ''
          description_short: 'Phase 3: Reflect on semester 1 workshop'
          description: 'Phase 3: Reflect on semester 1 workshop'
          lesson_groups: {}
          student_description: 'Phase 3: Reflect on semester 1 workshop'
        csp-ca-a:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        science-pd-ol-pt-5:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        csf2harvey:
          title: Mr. Harvey's Class
          description_audience: ''
          description_short: ''
          description: Special bubbles just for our class!
          lesson_groups:
            end_of_course_project:
              display_name: End of Course Project
            content:
              display_name: Content
          student_description: Special bubbles just for our class!
        sciencepd5:
          title: 'CS in Science: Part 5'
          description_audience: ''
          description_short: 'Phase 3: Prepare for semester 2 workshop'
          description: 'Phase 3: Prepare for semester 2 workshop'
          lesson_groups: {}
          student_description: 'Phase 3: Prepare for semester 2 workshop'
        csp5-support:
          title: Unit 5 Online Professional Learning Course
          description_audience: ''
          description_short: Teacher Professional Learning Course for CSP Unit 5
          description: "####  **This course is associated with a version of the course that is no longer supported.  Please visit our Courses Overview page (https://studio.code.org/courses) to see our most current curricula.**\r\n\r\nThis is a set of online supports arranged into a Professional Learning Course for CSP teachers preparing to teach Unit 5."
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
            practice:
              display_name: Teaching Practices
          student_description: This is a set of online supports arranged into a Professional Learning Course for CSP teachers preparing to teach Unit 5.
          name: csp5-support
        csp6-support:
          stage: {}
          title: AP Preparation and Resources for Teachers
          description_audience: ''
          description_short: ''
          description: 'COMING SOON: soon this page will host a set of resources for teachers preparing for the AP exam'
          lesson_groups: {}
          student_description: 'COMING SOON: soon this page will host a set of resources for teachers preparing for the AP exam'
        csppostap-2017:
          title: CSP Post-AP - Databases and Using Data in Your Apps ('17-'18)
          description_audience: ''
          description_short: Learn to collect and use data in App Lab apps.
          description: App Lab has a number of tools that allow you to collect and use data in your apps. The following material provides an overview of how these tools work, a sampling of example projects that can be built using these tools, and a space in which to build and submit a final project.
          lesson_groups:
            content:
              display_name: Content
            cspSurvey:
              display_name: Survey
          student_description: App Lab has a number of tools that allow you to collect and use data in your apps. The following material provides an overview of how these tools work, a sampling of example projects that can be built using these tools, and a space in which to build and submit a final project.
        unit6-csd-draft:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        gamelab-demo:
          lesson_groups: {}
        csd6-draft:
          title: CSD Unit 6 Revisions Draft
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csd6_1:
              display_name: 'Chapter 1: Programming with Hardware'
            csd6_2:
              display_name: 'Chapter 2: Building Physical Prototypes'
          student_description: ''
        workshop-gamelab:
          title: Game Lab Workshop
          description_audience: Teachers attending an in-person Game Lab Workshop
          description_short: Level progression to accompany an in-person Game Lab Workshop
          description: This level progression is intended to accompany an in-person Game Lab Workshop. This is not intended to teach the tool or CS concepts, but rather to support a workshop facilitator in introducing attendees to the breadth of Game Lab.
          lesson_groups: {}
          student_description: This level progression is intended to accompany an in-person Game Lab Workshop. This is not intended to teach the tool or CS concepts, but rather to support a workshop facilitator in introducing attendees to the breadth of Game Lab.
        csd5-draft:
          title: Draft of CSD5
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csd5_1:
              display_name: 'Chapter 1: Representing Information'
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
          student_description: ''
        applab-1hour:
          title: App Lab 1 Hour Workshop
          description_audience: Middle and High School Students
          description_short: ''
          description: This workshop is designed to give students a basic introduction to app lab in 1 hour. Students should be able to come in with different backgrounds in computer science and have fun creating something.
          lesson_groups: {}
          student_description: This workshop is designed to give students a basic introduction to app lab in 1 hour. Students should be able to come in with different backgrounds in computer science and have fun creating something.
        applab-2hour:
          title: App Lab 2 Hour Workshop
          description_audience: Middle and High School Students
          description_short: ''
          description: This workshop is designed to give students a basic introduction to app lab in 2 hours. Students should be able to come in with different backgrounds in computer science and have fun creating something.
          lesson_groups: {}
          student_description: This workshop is designed to give students a basic introduction to app lab in 2 hours. Students should be able to come in with different backgrounds in computer science and have fun creating something.
        coursed-ramp:
          title: 'CS Fundamentals: Course D'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        workshop-maker:
          title: Maker Toolkit Workshop
          description_audience: Teachers attending an in-person Maker Toolkit Workshop
          description_short: Level progression to accompany an in-person Maker Toolkit Workshop
          description: This level progression is intended to accompany an in-person Maker Toolkit Workshop. This is not intended to teach the tool or CS concepts, but rather to support a workshop facilitator in introducing attendees to the breadth of App Lab and the Maker Toolkit.
          lesson_groups: {}
          student_description: This level progression is intended to accompany an in-person Maker Toolkit Workshop. This is not intended to teach the tool or CS concepts, but rather to support a workshop facilitator in introducing attendees to the breadth of App Lab and the Maker Toolkit.
        coursee-ramp:
          title: coursee-ramp
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csd6-2017:
          title: CSD Unit 6 - Physical Computing ('17-'18)
          description_audience: ''
          description_short: Learn to program with physical devices.
          description: Unit 6 explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          lesson_groups:
            csd6_1:
              display_name: 'Chapter 1: Programming with Hardware'
            csd6_2:
              display_name: 'Chapter 2: Building Physical Prototypes'
            csd_survey:
              display_name: Post-Course Survey
          student_description: Unit 6 explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
        csd3-draft:
          title: 'CSD Unit 3 - Programming: Animations and Games'
          description_audience: ''
          description_short: Animations and Games
          description: ''
        csd5-2017:
          title: CSD Unit 5 - Data and Society ('17-'18)
          description_audience: ''
          description_short: Learn how people use computers to solve data problems.
          description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          lesson_groups:
            csd5_1:
              display_name: 'Chapter 1: Representing Information'
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
            csd_survey:
              display_name: Post-Course Survey
          student_description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
        csd3-old:
          title: CSD Unit 3 (DEPRECATED)
          description_audience: ''
          description_short: 2016/2017 Draft of CSD Unit 3
          description: This is the original draft of CSD Unit 3, released in the fall of 2016. Unless you have students currently using this course, you should instead use the updated version of this unit at studio.code.org/s/csd3-2019 - this original draft will remain available until July 1, 2017.
          lesson_groups: {}
          student_description: This is the original draft of CSD Unit 3, released in the fall of 2016. Unless you have students currently using this course, you should instead use the updated version of this unit at studio.code.org/s/csd3-2019 - this original draft will remain available until July 1, 2017.
        csd1-old:
          title: CSD Unit 1 (DEPRECATED)
          description_audience: ''
          description_short: 2016/2017 Draft of CSD Unit 1
          description: This is the original draft of CSD Unit 1, originally published in the fall of 2016. This version has been replaced with an updated unit at studio.code.org/s/csd1-2019 and will only remain available until July 1, 2017.
          lesson_groups: {}
          student_description: This is the original draft of CSD Unit 1, originally published in the fall of 2016. This version has been replaced with an updated unit at studio.code.org/s/csd1-2019 and will only remain available until July 1, 2017.
        csd2-draft:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        csd1-draft:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        csd3-chapters:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        coursef-ramp:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csppostsurvey-staging:
          title: "[Deprecated] CSP post survey staging area"
          description_audience: ''
          description_short: ''
          description: Moved to /s/csp-post-survey.  Destory after 05.05.17
        fmscsd3preview:
          title: CSD - Drawing in Game Lab
          description_audience: Falmouth Middle School (Mike Harvey)
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csppostsurvey:
          title: CSP Student Post-Course Survey
          description_audience: CSP Students
          description_short: CSP Student Post Course Survey
          description: 'Welcome to the Code.org CS Principles Post-Course Survey.  This survey takes about 10 minutes to complete.  Your responses are private and anonymous.  '
        csp-post-survey:
          title: CSP Student Post-Course Survey ('17-'18)
          description_audience: CSP Students
          description_short: CSP Student Post Course Survey
          description: Welcome to the Code.org CS Principles Post-Course Survey.  This survey takes about 15 minutes to complete.  Your responses are private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration.
          lesson_groups:
            cspSurvey:
              display_name: Survey
          student_description: Welcome to the Code.org CS Principles Post-Course Survey.  This survey takes about 15 minutes to complete.  Your responses are private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration.
          name: csp-post-survey
        public-key-cryptography:
          title: Public Key Cryptography Widgets
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csd2-old:
          title: CSD Unit 2 (DEPRECATED)
          description_audience: ''
          description_short: Web Development
          description: ''
          lesson_groups: {}
          student_description: ''
        artist-and-bb8:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        coursea-2017:
          title: Course A
          assignment_family_title: Course A
          description_audience: 'Ages: 4-7'
          description_short: An introduction to computer science for pre-readers.
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          lesson_groups: {}
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          name: coursea-2017
        courseb-2017:
          title: Course B
          assignment_family_title: Course B
          description_audience: 'Ages: 5-8'
          description_short: An introduction to computer science for pre-readers. (Similar to Course A, but with more variety for older students.)
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          lesson_groups: {}
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          name: courseb-2017
        coursec-2017:
          title: Course C
          assignment_family_title: Course C
          description_audience: 'Ages: 6-10'
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
          lesson_groups: {}
          student_description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
          name: coursec-2017
        coursed-2017:
          title: Course D
          assignment_family_title: Course D
          description_audience: 'Ages: 7-11'
          description_short: Quickly cover concepts from Course C, then go further with algorithms, nested loops, conditionals, and more.
          description: Learn new coding concepts including algorithms, nested loops, while loops, conditionals, and events. Get an introduction to digital citizenship before creating your very own game or story that you can share.
          lesson_groups: {}
          student_description: Learn new coding concepts including algorithms, nested loops, while loops, conditionals, and events. Get an introduction to digital citizenship before creating your very own game or story that you can share.
          name: coursed-2017
        coursee-2017:
          title: Course E
          assignment_family_title: Course E
          description_audience: 'Ages: 8-12'
          description_short: Quickly cover concepts in Course C & D and then go further with functions.
          description: Start coding with algorithms, loops, conditionals, and events and then you’ll move on functions. In the second part of this course, design and create a capstone project you can share with your friends and family.
          lesson_groups:
            csf_e_1:
              display_name: Ramp Up to Course E (Optional)
            csf_e_2:
              display_name: Course E Content
            end_of_course_project:
              display_name: End of Course Project
            extra_course_content:
              display_name: Extra Course Content
          student_description: Start coding with algorithms, loops, conditionals, and events and then you’ll move on functions. In the second part of this course, design and create a capstone project you can share with your friends and family.
          name: coursee-2017
        coursef-2017:
          title: Course F
          assignment_family_title: Course F
          description_audience: 'Ages: 9-13'
          description_short: Learn all the concepts in Computer Science Fundamentals and create your own art, story or game.
          description: Learn to use different kinds of loops, events, functions, and conditionals. Investigate different problem-solving techniques and discuss societal impacts of computing and the internet. In the second part of this course, design and create a capstone project you can share with friends and family.
          lesson_groups:
            csf_f_1:
              display_name: Ramp Up to Course F (Optional)
            csf_f_2:
              display_name: Course F Content
            end_of_course_project:
              display_name: End of Course Project
          student_description: Learn to use different kinds of loops, events, functions, and conditionals. Investigate different problem-solving techniques and discuss societal impacts of computing and the internet. In the second part of this course, design and create a capstone project you can share with friends and family.
          name: coursef-2017
        csdnovice:
          title: CS Discoveries TeacherCon Novice Facilitators
          description_audience: CSD Novice Facilitators
          description_short: Reflection questions for novice facilitators at TeacherCon.
          description: 'A place to keep track of your reflection from TeacherCon as a novice facilitator. '
          lesson_groups: {}
          student_description: 'A place to keep track of your reflection from TeacherCon as a novice facilitator. '
        csp-explore-task:
          title: CSP Explore PT Prep
          description_audience: ''
          description_short: These lessons cover the preparation and completion of the CS Principles AP Explore Performance Task.
          description: These lessons cover the preparation and completion of the CS Principles AP Explore Performance Task.
        csp-create-task:
          title: ''
          description_audience: ''
          description_short: These lessons cover the preparation and completion of the CS Principles AP Create Performance Task.
          description: These lessons cover the preparation and completion of the CS Principles AP Create Performance Task.
        csp-ap-tech-setup:
          title: CSP AP Digital Portfolio and Other Tools
          description_audience: ''
          description_short: ''
          description: Covers AP Digital Portfolio setup and other technical tools required for completing and submitting the AP Performance Tasks.
        csp-ap:
          title: CSP AP Exam and Performance Tasks
          description_audience: ''
          description_short: Lessons guide students to prepare for and complete the AP exam and Performance Tasks.
          description: Lessons guide students to prepare for and complete the AP exam and Performance Tasks.
          lesson_groups:
            csp_ap_1:
              display_name: 'Chapter 1: AP Tech Setup'
            csp_ap_3:
              display_name: 'Chapter 3: AP Create Performance Task'
            csp_ap_2:
              display_name: 'Chapter 2: AP Explore Performance Task'
          student_description: Lessons guide students to prepare for and complete the AP exam and Performance Tasks.
        cspnovice:
          title: CS Principles TeacherCon Novice Facilitator Reflection
          description_audience: CSP Novice Facilitators
          description_short: Reflection questions for novice facilitators at TeacherCon.
          description: 'A place to keep track of your reflection from TeacherCon as a novice facilitator. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'A place to keep track of your reflection from TeacherCon as a novice facilitator. '
        novice-view:
          title: view novice responses
          description_audience: brook, dani, mal
          description_short: NA
          description: NA
          lesson_groups: {}
          student_description: NA
        csp1-dlp:
          title: CSP Unit 1 Deeper Learning
          description_audience: CS Principles Facilitators in Training
          description_short: 'Deeper Learning materials for CSP facilitators in training '
          description: 'This is Unit 1 of the Deeper Learning Plan for Code.org CSP facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 1 of the Code.org CSP Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 1 of the Deeper Learning Plan for Code.org CSP facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 1 of the Code.org CSP Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          name: csp1-dlp
        csp2-dlp:
          title: CSP Unit 2 Deeper Learning
          description_audience: CS Principles Facilitators in Training
          description_short: 'Unit 2 Deeper Learning materials for CSP facilitators in training '
          description: 'This is Unit 2 of the Deeper Learning Plan for Code.org CSP facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 2 of the Code.org CSP Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 2 of the Deeper Learning Plan for Code.org CSP facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 2 of the Code.org CSP Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
        csp3-dlp:
          title: CSP Unit 3 Deeper Learning
          description_audience: CS Principles Facilitators in Training
          description_short: 'Unit 3 Deeper Learning materials for CSP facilitators in training '
          description: 'This is Unit 3 of the Deeper Learning Plan for Code.org CSP facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 3 of the Code.org CSP Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 3 of the Deeper Learning Plan for Code.org CSP facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 3 of the Code.org CSP Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
        csp4-dlp:
          title: CSP Unit 4 Deeper Learning
          description_audience: CS Principles Facilitators in Training
          description_short: 'Deeper Learning materials for CSP facilitators in training '
          description: 'This is Unit 4 of the Deeper Learning Plan for Code.org CSP facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 4 of the Code.org CSP Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 4 of the Deeper Learning Plan for Code.org CSP facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 4 of the Code.org CSP Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
        csp5-dlp:
          title: CSP Unit 5 Deeper Learning
          description_audience: CS Principles Facilitators in Training
          description_short: 'Deeper Learning materials for CSP facilitators in training '
          description: 'This is Unit 5 of the Deeper Learning Plan for Code.org CSP facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 5 of the Code.org CSP Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 5 of the Deeper Learning Plan for Code.org CSP facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 5 of the Code.org CSP Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
        csd1-dlp:
          title: CS Discoveries Unit 1 Deeper Learning
          description_audience: CS Discoveries Facilitators in Training
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: 'This is Unit 1 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 1 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 1 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 1 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
        csd6-dlp:
          title: CS Discoveries Unit 6 Deeper Learning
          description_audience: CS Discoveries Facilitators in Training
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: This is Unit 6 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 6 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you've submitted your own reflections for the unit.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: This is Unit 6 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 6 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you've submitted your own reflections for the unit.
        csd5-dlp:
          title: CS Discoveries Unit 5 Deeper Learning
          description_audience: CS Discoveries Facilitators in Training
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: This is Unit 5 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 5 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you've submitted your own reflections for the unit.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: This is Unit 5 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 5 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you've submitted your own reflections for the unit.
        csd4-dlp:
          title: CS Discoveries Unit 4 Deeper Learning
          description_audience: CS Discoveries Facilitators in Training
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: This is Unit 4 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 4 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you've submitted your own reflections for the unit.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: This is Unit 4 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 4 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you've submitted your own reflections for the unit.
        csd3-dlp:
          title: CS Discoveries Unit 3 Deeper Learning
          description_audience: CS Discoveries Facilitators in Training
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: This is Unit 3 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 3 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you've submitted your own reflections for the unit.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: This is Unit 3 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 3 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you've submitted your own reflections for the unit.
        csd2-dlp:
          title: CS Discoveries Unit 2 Deeper Learning
          description_audience: CS Discoveries Facilitators in Training
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: This is Unit 2 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 2 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you've submitted your own reflections for the unit.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: This is Unit 2 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidances for demonstrating proficiency of Unit 2 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you've submitted your own reflections for the unit.
        allthettsthings:
          lesson_groups: {}
        express-2017:
          title: Express Course
          assignment_family_title: Express Course
          description_audience: 'Ages: 9-18'
          description_short: 'An introduction to computer science: combines the best of our elementary school curriculum for older students.'
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          lesson_groups:
            content:
              display_name: Content
            end_of_course_project:
              display_name: End of Course Project
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          name: express-2017
        pre-express-2017:
          title: Pre-reader Express
          assignment_family_title: Pre-reader Express
          description_audience: 'Ages: 4-8'
          description_short: 'An introduction to computer science for pre-readers: combines the best of our kindergarten and first grade courses.'
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          lesson_groups: {}
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          name: pre-express-2017
        subgoal-labels-opt-in:
          title: Subgoal Labels Study Opt-in
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csp-pre-survey-test-2017:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        csp3-research-mxghyt:
          title: CSP Unit 3 - Intro to Programming (subgoals)
          description_audience: ''
          description_short: Learn the basics of programming in JavaScript through a top-down design approach using classic turtle drawing.
          description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          lesson_groups:
            csp3_1:
              display_name: 'Chapter 1: Programming Languages and Algorithms'
            cspAssessment:
              display_name: Chapter Assessment
            cspSurvey:
              display_name: Survey
          student_description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
        csd4-draft:
          title: CSD Unit 4 Revisions Draft
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csd4_1:
              display_name: 'Chapter 1: User Centered Design'
            csd4_2:
              display_name: 'Chapter 2: App Prototyping'
          student_description: ''
        craft17:
          title: Craft17 Development Script
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        applab-intro:
          title: Intro to App Lab
          description_audience: ''
          description_short: Create your own app in JavaScript using either block based programming or text. If you've already done some programming with blocks, take your skills to the next level.
          description: Create your own app in JavaScript using either block based programming or text. If you've already done some programming with blocks, take your skills to the next level.
          lesson_groups: {}
          student_description: Create your own app in JavaScript using either block based programming or text. If you've already done some programming with blocks, take your skills to the next level.
          name: applab-intro
          lessons: {}
        e-f-ramp:
          title: Course E & F Ramp
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csf_e_1:
              display_name: Ramp Up to Course E (Optional)
            csf_e_2:
              display_name: Course E Content
            end_of_course_project:
              display_name: End of Course Project
            extra_course_content:
              display_name: Extra Course Content
          student_description: ''
        new-d:
          title: New Course D Script
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csp3-a:
          title: CSP Unit 3 - Subgoals Group A
          description_audience: ''
          description_short: Alternate version of CSP Unit 3 for subgoal labels experiment group A.
          description: This unit introduces the foundational concepts of computer programming, for students in Subgoals Group A.
          lesson_groups:
            csp3_1:
              display_name: 'Chapter 1: Programming Languages and Algorithms'
          student_description: This unit introduces the foundational concepts of computer programming, for students in Subgoals Group A.
        new-express:
          title: New Express Script
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            content:
              display_name: Content
            end_of_course_project:
              display_name: End of Course Project
          student_description: ''
        new-stages-sept-2017:
          title: New stages for 9/17
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        new-e:
          title: New Script for E
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csf_e_1:
              display_name: Ramp Up to Course E (Optional)
            csf_e_2:
              display_name: Course E Content
            end_of_course_project:
              display_name: End of Course Project
            extra_course_content:
              display_name: Extra Course Content
          student_description: ''
        new-f:
          title: New Script for F
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csf_f_1:
              display_name: Ramp Up to Course F (Optional)
            csf_f_2:
              display_name: Course F Content
            end_of_course_project:
              display_name: End of Course Project
          student_description: ''
        csd5-old:
          title: CSD Unit 5 - Data and Society
          description_audience: ''
          description_short: Learn how people use computers to solve data problems.
          description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of the your choosing.
          lesson_groups:
            csd5_1:
              display_name: 'Chapter 1: Representing Information'
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
          student_description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of the your choosing.
        subgoals-assessment-staging:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        hocali:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        colehoc2017:
          title: 'HoC 17 - Cole '
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        craft17-kiki:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csd4-old:
          title: "(DEPRECATED) CSD Unit 4 - The Design Process"
          description_audience: ''
          description_short: 2016/17 Beta version of CSD Unit 4
          description: ''
          lesson_groups:
            csd4_1:
              display_name: 'Chapter 1: User Centered Design'
            csd4_2:
              display_name: 'Chapter 2: App Prototyping'
          student_description: ''
        csp3-staging:
          title: CSP 3 Proposed Changes Temporary Staging Ground
          description_audience: ''
          description_short: Temporary staging ground for Oct. changes to csp3
          description: "This is a replica of live levels in /s/csp3-2017 with new and modified stages added.  DO NOT EDIT LIVE LEVELS.\r\n"
          lesson_groups:
            csp3_1:
              display_name: 'Chapter 1: Programming Languages and Algorithms'
            cspAssessment:
              display_name: Chapter Assessment
          student_description: "This is a replica of live levels in /s/csp3-2017 with new and modified stages added.  DO NOT EDIT LIVE LEVELS.\r\n"
        pwc:
          title: PwC's Access Your Potential curriculum
          description_audience: ''
          description_short: ''
          description: At PwC, we believe that all students have the potential to be tomorrow’s leaders and tech-driven workforce. Access Your Potential is our commitment to help close the opportunity gap by equipping young people, especially those from disadvantaged communities, with the financial, technology and career-selection skills they need to change the trajectory of their lives. As part of our commitment, we’re excited to launch our Access Your Potential middle school technology and careers curriculum.
          lesson_groups: {}
          student_description: At PwC, we believe that all students have the potential to be tomorrow’s leaders and tech-driven workforce. Access Your Potential is our commitment to help close the opportunity gap by equipping young people, especially those from disadvantaged communities, with the financial, technology and career-selection skills they need to change the trajectory of their lives. As part of our commitment, we’re excited to launch our Access Your Potential middle school technology and careers curriculum.
        allthesurveys:
          title: All the surveys
          description_audience: ''
          description_short: Place to stage and test Code.org surveys
          description: ''
          lesson_groups: {}
          student_description: ''
          name: allthesurveys
        k1hoc2017:
          title: K-1 Hour of Code 2017
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        hero:
          title: 'Minecraft: Hero''s Journey'
          description_audience: ''
          description_short: Minecraft is back with a brand new activity for Hour of Code!
          description: Minecraft is back for the Hour of Code with a brand new activity! Journey through Minecraft with code.
          lesson_groups: {}
          student_description: Minecraft is back for the Hour of Code with a brand new activity! Journey through Minecraft with code.
          name: hero
          lessons: {}
        applab-intro-staging:
          title: Intro to App Lab Staging
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csp-explore-2017:
          title: Explore - AP Performance Task Prep ('17-'18)
          description_audience: ''
          description_short: Lessons and resources to help students prepare for and complete the AP Explore Performance Tasks.
          description: "These lessons are here to help you understand, prepare for, and do the AP Explore Performance Task.  Each \"lesson\" contains links to helpful documents that your teacher can help walk you through. NOTE: the second item in the first lesson is not related to the Explore PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.\r\n\r\nThis unit was last updated November, 2017. Read more about curriculum updates at forum.code.org/c/csp/updates."
          lesson_groups:
            csp_ap_2:
              display_name: 'Chapter 2: AP Explore Performance Task'
            cspSurvey:
              display_name: Survey
          student_description: "These lessons are here to help you understand, prepare for, and do the AP Explore Performance Task.  Each \"lesson\" contains links to helpful documents that your teacher can help walk you through. NOTE: the second item in the first lesson is not related to the Explore PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.\r\n\r\nThis unit was last updated November, 2017. Read more about curriculum updates at forum.code.org/c/csp/updates."
        csp-create-2017:
          title: Create - AP Performance Task Prep ('17-'18)
          description_audience: ''
          description_short: Lessons and resources to help students prepare for and complete the AP Create Performance Tasks.
          description: "These lessons are here to help you understand, prepare for, and do the AP Create Performance Task.  Each \"lesson\" contains links to helpful documents that your teacher can help walk you through. NOTE: the first item in the first lesson is not related to the Create PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.\r\n\r\nThis unit was last updated December, 2017. Read more about curriculum updates at forum.code.org/c/csp/updates."
          lesson_groups:
            csp_ap_3:
              display_name: 'Chapter 3: AP Create Performance Task'
            cspSurvey:
              display_name: Survey
          student_description: "These lessons are here to help you understand, prepare for, and do the AP Create Performance Task.  Each \"lesson\" contains links to helpful documents that your teacher can help walk you through. NOTE: the first item in the first lesson is not related to the Create PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.\r\n\r\nThis unit was last updated December, 2017. Read more about curriculum updates at forum.code.org/c/csp/updates."
        csp3-reovery:
          title: 'csp3 under the sea student work recovery '
          description_audience: ''
          description_short: ''
          description: ''
        csp3-recovery:
          title: 'CSP3 under the sea student work recovery '
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        aws-demo:
          title: AWS Demo
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        halloween:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        valentine:
          title: Valentine Special
          description_audience: ''
          description_short: Have fun creating valentines
          description: ''
          lesson_groups: {}
          student_description: ''
        colehoc17:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        course-e-2018:
          title: Course E 2018 (Outdated!)
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csf_e_1:
              display_name: Ramp Up to Course E (Optional)
            csf_e_2:
              display_name: Course E Content
            end_of_course_project:
              display_name: End of Course Project
            extra_course_content:
              display_name: Extra Course Content
          student_description: ''
        course-f-2018:
          title: Course F 2018 (Outdated)
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csf_f_1:
              display_name: Ramp Up to Course F (Optional)
            csf_f_2:
              display_name: Course F Content
            end_of_course_project:
              display_name: End of Course Project
          student_description: ''
        csd6-old:
          title: "(DEPRECATED) CSD Unit 6 - Physical Computing"
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csd6_1:
              display_name: 'Chapter 1: Programming with Hardware'
            csd6_2:
              display_name: 'Chapter 2: Building Physical Prototypes'
          student_description: ''
        unembeddedlevels:
          title: Unembedded Levels
          description_audience: ''
          description_short: ''
          description: ''
        unembedded:
          title: Unembedded Levels
          description_audience: ''
          description_short: ''
          description: ''
        csd3-1819draft:
          title: CSD Unit 3 - Animations and Games
          description_audience: ''
          description_short: " Learn to program animations, interactive art, and games in Game Lab."
          description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          lesson_groups:
            csd3_1:
              display_name: 'Chapter 1: Images and Animations'
            csd3_2:
              display_name: 'Chapter 2: Building Games'
            cspSurvey:
              display_name: Survey
          student_description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
        textbook:
          title: CSF Textbook Pages
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        glj-behavior-test:
          title: Game Lab Jr. Test - Behavior
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csd3-2018:
          title: CSD Unit 3 - Animations and Games ('18-'19)
          description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          description_short: " Learn to program animations, interactive art, and games in Game Lab."
          description_audience: ''
          lesson_groups:
            csd3_1:
              display_name: 'Chapter 1: Images and Animations'
            csd3_2:
              display_name: 'Chapter 2: Building Games'
            cspSurvey:
              display_name: Survey
          student_description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
        csd2-2018:
          title: CSD Unit 2 - Web Development ('18-'19)
          description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging and commenting.  By the end of the unit, you’ll have a personal website that you can publish to the Internet."
          description_short: "  Learn to build your own web site in Web Lab."
          description_audience: ''
          lesson_groups:
            csd2_1:
              display_name: 'Chapter 1: Web Content and HTML'
            csd2_2:
              display_name: 'Chapter 2: Styling and CSS'
            cspSurvey:
              display_name: Survey
          student_description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging and commenting.  By the end of the unit, you’ll have a personal website that you can publish to the Internet."
        coursea-2018:
          title: Course A (2018)
          assignment_family_title: Course A
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers.
          description_audience: 'Ages: 4-7'
          lesson_groups: {}
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
        express-2018:
          title: Express Course
          assignment_family_title: Express Course
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: 'An introduction to computer science: combines the best of our elementary school curriculum for older students.'
          description_audience: 'Ages: 9-18'
          lesson_groups: {}
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
        courseb-2018:
          title: Course B (2018)
          assignment_family_title: Course B
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers. Similar to Course A, but with added concept depth.
          description_audience: 'Ages: 5-8'
          lesson_groups: {}
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
        coursed-2018:
          title: Course D (2018)
          assignment_family_title: Course D
          description: Students develop their understanding of nested loops, while loops, conditionals, and events. Beyond coding, students learn about digital citizenship.
          description_short: Learn about conditional statements and create your own art, story or game.
          description_audience: 'Ages: 7-11'
          lesson_groups: {}
          student_description: Students develop their understanding of nested loops, while loops, conditionals, and events. Beyond coding, students learn about digital citizenship.
        jr-test:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        petgame:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csp-exam:
          title: CS Principles AP Exam Prep
          description_audience: ''
          description_short: CS Principles AP Exam Prep
          description: 'This page contains copies of all the multiple choice assessment questions that appeared in Units 1-5 in the course.  Students may want to practice for the multiple choice exam by re-taking these little tests.  '
          lesson_groups: {}
          student_description: 'This page contains copies of all the multiple choice assessment questions that appeared in Units 1-5 in the course.  Students may want to practice for the multiple choice exam by re-taking these little tests.  '
        coursec-2018:
          title: Course C (2018)
          assignment_family_title: Course C
          description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description_audience: 'Ages: 6-10'
          lesson_groups: {}
          student_description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
        csd6-2018:
          title: CSD Unit 6 - Physical Computing ('18-'19)
          description: Unit 6 explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          description_short: Learn to program with physical devices.
          description_audience: ''
          lesson_groups:
            csd6_1:
              display_name: 'Chapter 1: Programming with Hardware'
            csd6_2:
              display_name: 'Chapter 2: Building Physical Prototypes'
            cspSurvey:
              display_name: Survey
          student_description: Unit 6 explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
        coursee-2018:
          title: Course E (2018)
          assignment_family_title: Course E
          description: Start coding with algorithms, loops, conditionals, and events and then you’ll move on functions. In the second part of this course, design and create a capstone project you can share with your friends and family.
          description_short: Review concepts in Courses C & D, then go further by learning functions.
          description_audience: 'Ages: 8-12'
          lesson_groups:
            csf_e_1:
              display_name: Ramp Up to Course E (Optional)
            csf_e_2:
              display_name: Course E Content
            end_of_course_project:
              display_name: End of Course Project
            extra_course_content:
              display_name: Extra Course Content
          student_description: Start coding with algorithms, loops, conditionals, and events and then you’ll move on functions. In the second part of this course, design and create a capstone project you can share with your friends and family.
        coursef-2018:
          title: Course F (2018)
          assignment_family_title: Course F
          description: Learn to use different kinds of loops, events, functions, and conditionals. Investigate different problem-solving techniques and discuss societal impacts of computing and the internet. In the second part of this course, design and create a capstone project you can share with friends and family.
          description_short: Learn all the concepts in Computer Science Fundamentals and create your own art, story or game.
          description_audience: 'Ages: 9-13'
          lesson_groups:
            csf_f_1:
              display_name: Ramp Up to Course F (Optional)
            csf_f_2:
              display_name: Course F Content
            end_of_course_project:
              display_name: End of Course Project
          student_description: Learn to use different kinds of loops, events, functions, and conditionals. Investigate different problem-solving techniques and discuss societal impacts of computing and the internet. In the second part of this course, design and create a capstone project you can share with friends and family.
        csp1-2018:
          title: CSP Unit 1 - The Internet ('18-'19)
          description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers and transfer it between people and computational devices. The unit then explores the structure and design of the internet and the implications of those design decisions.
          description_short: Explore the challenges about representing information as bits and how to get those bits from one place to another.
          description_audience: ''
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csp1_1:
              display_name: 'Chapter 1: Representing and Transmitting Information'
            csp1_2:
              display_name: 'Chapter 2: Inventing the Internet'
          student_description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers and transfer it between people and computational devices. The unit then explores the structure and design of the internet and the implications of those design decisions.
        csd1-2018:
          title: CSD Unit 1 - Problem Solving ('18-'19)
          description: " \r\nUnit 1 is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
          description_short: "  Learn how humans work with computers to solve problems."
          description_audience: ''
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csd1_1:
              display_name: 'Chapter 1: The Problem Solving Process'
            csd1_2:
              display_name: 'Chapter 2: Computers and Problem Solving'
          student_description: " \r\nUnit 1 is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
        csd4-2018:
          title: CSD Unit 4 - The Design Process ('18-'19)
          description: Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          description_short: "  Learn how to design a program that meets the needs of your users."
          description_audience: ''
          lesson_groups:
            csd4_1:
              display_name: 'Chapter 1: User Centered Design'
            csd4_2:
              display_name: 'Chapter 2: App Prototyping'
            cspSurvey:
              display_name: Survey
          student_description: Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
        csd5-2018:
          title: CSD Unit 5 - Data and Society ('18-'19)
          description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          description_short: Learn how people use computers to solve data problems.
          description_audience: ''
          lesson_groups:
            csd5_1:
              display_name: 'Chapter 1: Representing Information'
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
            cspSurvey:
              display_name: Survey
          student_description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
        csp2-2018:
          title: CSP Unit 2 - Digital Information ('18-'19)
          description: This unit further explores the ways that digital information is encoded, represented and manipulated. Being able to digitally manipulate data, visualize it, and identify patterns, trends and possible meanings are important practical skills that computer scientists do every day. Understanding where data comes from, having intuitions about what could be learned or extracted from it, and being able to use computational tools to manipulate data and communicate about it are the primary skills addressed in the unit.
          description_short: Explore how more complex digital information is represented and manipulated through computation and visualization.
          description_audience: ''
          lesson_groups:
            csp2_1_2018:
              display_name: 'Unit 2: Digital Information'
            cspAssessment:
              display_name: Chapter Assessment
          student_description: This unit further explores the ways that digital information is encoded, represented and manipulated. Being able to digitally manipulate data, visualize it, and identify patterns, trends and possible meanings are important practical skills that computer scientists do every day. Understanding where data comes from, having intuitions about what could be learned or extracted from it, and being able to use computational tools to manipulate data and communicate about it are the primary skills addressed in the unit.
        csp3-2018:
          title: CSP Unit 3 - Intro to Programming ('18-'19)
          description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          description_short: Learn the basics of programming in JavaScript through a top-down design approach using classic turtle drawing.
          description_audience: ''
          lesson_groups:
            csp3_1_2018:
              display_name: 'Unit 3: Intro to Programming'
            cspAssessment:
              display_name: Chapter Assessment
            cspSurvey:
              display_name: Survey
          student_description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          name: csp3-2018
        csp-explore-2018:
          title: Explore - AP Performance Task Prep ('18-'19)
          description: 'These lessons are here to help you understand, prepare for, and do the AP Explore Performance Task.  Each "lesson" contains links to helpful documents that your teacher can help walk you through. NOTE: the second item in the first lesson is not related to the Explore PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.'
          description_short: Lessons and resources to help students prepare for and complete the AP Explore Performance Tasks.
          description_audience: ''
          lesson_groups:
            csp_ap_2:
              display_name: 'Chapter 2: AP Explore Performance Task'
            cspSurvey:
              display_name: Survey
          student_description: 'These lessons are here to help you understand, prepare for, and do the AP Explore Performance Task.  Each "lesson" contains links to helpful documents that your teacher can help walk you through. NOTE: the second item in the first lesson is not related to the Explore PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.'
        csp-create-2018:
          title: Create - AP Performance Task Prep ('18-'19)
          description: 'These lessons are here to help you understand, prepare for, and do the AP Create Performance Task.  Each "lesson" contains links to helpful documents that your teacher can help walk you through. NOTE: the first item in the first lesson is not related to the Create PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.'
          description_short: Lessons and resources to help students prepare for and complete the AP Create Performance Tasks.
          description_audience: ''
          lesson_groups:
            csp_ap_3:
              display_name: 'Chapter 3: AP Create Performance Task'
            cspSurvey:
              display_name: Survey
          student_description: 'These lessons are here to help you understand, prepare for, and do the AP Create Performance Task.  Each "lesson" contains links to helpful documents that your teacher can help walk you through. NOTE: the first item in the first lesson is not related to the Create PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.'
        csp4-2018:
          title: CSP Unit 4 - Big Data and Privacy ('18-'19)
          description: The data-rich world we live in introduces many complex questions related to public policy, law, ethics and societal impact. The goals of this unit are to develop a well-rounded and balanced view about data in the world, including the positive and negative effects of it, and to understand the basics of how and why modern encryption works.
          description_short: Explore the data-rich world we live, and how data impacts public policy, personal privacy, security, the law, and ethics.
          description_audience: ''
          lesson_groups:
            csp4_1_2018:
              display_name: 'Unit 4: Big Data and Privacy'
            cspAssessment:
              display_name: Chapter Assessment
            cspSurvey:
              display_name: Survey
          student_description: The data-rich world we live in introduces many complex questions related to public policy, law, ethics and societal impact. The goals of this unit are to develop a well-rounded and balanced view about data in the world, including the positive and negative effects of it, and to understand the basics of how and why modern encryption works.
        csp5-2018:
          title: CSP Unit 5 - Building Apps ('18-'19)
          description: This unit continues the introduction of foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          description_short: Continue to learn foundational concepts of computer programming in JavaScript by making rich, interactive apps.
          description_audience: ''
          lesson_groups:
            csp5_1:
              display_name: 'Chapter 1: Event-Driven Programming'
            csp5_2:
              display_name: 'Chapter 2: Programming with Data Structures'
            cspSurvey:
              display_name: Survey
          student_description: This unit continues the introduction of foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
        csppostap-2018:
          title: Post AP - Data Tools ('18-'19)
          description: "In the first chapter of this unit students develop skills interpreting visual data and using spreadsheet and visualization tools to create their own digital artifacts.  Through an ongoing project  - the “class data tracker” - students learn how to collect and clean data, and to use a few common tools for computing aggregations and creating visualizations. \r\n\r\nThe second chapter explores the importance of data within apps. App Lab has a number of tools that allow you to collect and use data in your apps. The second chapter provides an overview of how these tools work, a sampling of example projects that can be built using these tools, and a space in which to build and submit a final project."
          description_short: Learn to collect and use data in App Lab apps.
          description_audience: ''
          lesson_groups:
            csp_postap_1:
              display_name: 'Chapter 1: Manipulating and Visualizing Data'
            csp_postap_2:
              display_name: 'Chapter 2: Apps and Databases'
            cspSurvey:
              display_name: Survey
          student_description: "In the first chapter of this unit students develop skills interpreting visual data and using spreadsheet and visualization tools to create their own digital artifacts.  Through an ongoing project  - the “class data tracker” - students learn how to collect and clean data, and to use a few common tools for computing aggregations and creating visualizations. \r\n\r\nThe second chapter explores the importance of data within apps. App Lab has a number of tools that allow you to collect and use data in your apps. The second chapter provides an overview of how these tools work, a sampling of example projects that can be built using these tools, and a space in which to build and submit a final project."
        spritelab:
          title: Introduction to Sprite Lab (PILOT)
          description_audience: Course E/F Students
          description_short: This is a pilot course for Code.org's new Sprite Lab tool for Courses E and F
          description: This is a pilot course for Code.org's new Sprite Lab tool for Courses E and F
          lesson_groups: {}
          student_description: This is a pilot course for Code.org's new Sprite Lab tool for Courses E and F
        csd1-dlp-18:
          title: CS Discoveries Unit 1 Deeper Learning 2018-2019
          description_audience: CS Discoveries Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: 'This is Unit 1 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 1 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 1 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 1 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          name: csd1-dlp-18
        csd2-dlp-18:
          title: CS Discoveries Unit 2 Deeper Learning 2018-2019
          description_audience: CS Discoveries Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: 'This is Unit 2 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 2 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 2 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 2 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          name: csd2-dlp-18
        csd3-dlp-18:
          title: CS Discoveries Unit 3 Deeper Learning 2018-2019
          description_audience: CS Discoveries Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: 'This is Unit 3 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 3 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 3 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 3 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          name: csd3-dlp-18
        csd4-dlp-18:
          title: CS Discoveries Unit 4 Deeper Learning 2018-2019
          description_audience: CS Discoveries Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: 'This is Unit 4 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 4 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 4 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 4 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          name: csd4-dlp-18
        csd5-dlp-18:
          title: CS Discoveries Unit 5 Deeper Learning 2018-2019
          description_audience: CS Discoveries Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: 'This is Unit 5 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 5 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 5 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 5 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          name: csd5-dlp-18
        csd6-dlp-18:
          title: CS Discoveries Unit 6 Deeper Learning 2018-2019
          description_audience: CS Discoveries Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Discoveries facilitators in training '
          description: 'This is Unit 6 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 6 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 6 of the Deeper Learning Plan for Code.org CS Discoveries facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 6 of the Code.org CS Discoveries Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          name: csd6-dlp-18
        csp1-dlp-18:
          title: CS Principles Unit 1 Deeper Learning 2018-2019
          description_audience: CS Principles Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Principles facilitators in training '
          description: 'This is Unit 1 of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 1 of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 1 of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 1 of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          name: csp1-dlp-18
        csp2-dlp-18:
          title: CS Principles Unit 2 Deeper Learning 2018-2019
          description_audience: CS Principles Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Principles facilitators in training '
          description: 'This is Unit 2 of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 2 of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 2 of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 2 of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          name: csp2-dlp-18
        csp3-dlp-18:
          title: CS Principles Unit 3 Deeper Learning 2018-2019
          description_audience: CS Principles Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Principles facilitators in training '
          description: 'This is Unit 3 of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 3 of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 3 of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 3 of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
        csp4-dlp-18:
          title: CS Principles Unit 4 Deeper Learning 2018-2019
          description_audience: CS Principles Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Principles facilitators in training '
          description: 'This is Unit 4 of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 4 of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 4 of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 4 of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
        csp5-dlp-18:
          title: CS Principles Unit 5 Deeper Learning 2018-2019
          description_audience: CS Principles Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Principles facilitators in training '
          description: 'This is Unit 5 of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 5 of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is Unit 5 of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of Unit 5 of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
        csp-explore-dlp-18:
          title: CS Principles Explore Deeper Learning 2018-2019
          description_audience: CS Principles Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Principles facilitators in training '
          description: 'This is the Explore AP Unit of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of the Explore AP Unit of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is the Explore AP Unit of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of the Explore AP Unit of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
        csp-create-dlp-18:
          title: CS Principles Create Deeper Learning 2018-2019
          description_audience: CS Principles Facilitators in Training 2018-2019
          description_short: 'Deeper Learning materials for CS Principles facilitators in training '
          description: 'This is the Create AP Unit of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of the Create AP Unit of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: 'This is the Create AP Unit of the Deeper Learning Plan for Code.org CS Principles facilitators in training. Here you will find reflection prompts and guidance for demonstrating proficiency as a facilitator of the Create AP Unit of the Code.org CS Principles Curriculum. Peer review items are available at the bottom of this page, once you''ve submitted your own reflections for the unit. '
        csd-post-survey:
          title: CSD Student Post-Course Survey ('18-'19)
          description_audience: CSD Students
          description_short: CSD Student Post-Course Survey
          description: Welcome to the Code.org CS Discoveries Post-Course Survey.  This survey takes about 15 minutes to complete.  Your responses are private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration.
          lesson_groups:
            csd_survey:
              display_name: Post-Course Survey
          student_description: Welcome to the Code.org CS Discoveries Post-Course Survey.  This survey takes about 15 minutes to complete.  Your responses are private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration.
          name: csd-post-survey
        csd-novice-18:
          title: CS Discoveries Novice Reflections 2018-2019
          description_audience: CS Discoveries Facilitators in Training 2018-2019
          description_short: 'Novice reflection materials for CS Discoveries facilitators in training '
          description: This is the set of novice reflections for Code.org CS Discoveries facilitators in training during their 5-day summer workshop. Here you will find reflection prompts for each day of your in-person 5-day summer workshop. This questions will be the foundation of work we do at the Facilitator Training Weekend.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: This is the set of novice reflections for Code.org CS Discoveries facilitators in training during their 5-day summer workshop. Here you will find reflection prompts for each day of your in-person 5-day summer workshop. This questions will be the foundation of work we do at the Facilitator Training Weekend.
        csd-apprentice-18:
          title: CS Discoveries Apprentice Reflections 2018-2019
          description_audience: CS Discoveries Facilitators in Training 2018-2019
          description_short: 'Apprentice reflection materials for CS Discoveries facilitators in training '
          description: This is the set of apprentice reflections for Code.org CS Discoveries facilitators in training during their 5-day summer workshop. Here you will find reflection prompts for each day of your in-person 5-day summer workshop. This questions will be the foundation of work we do at the Facilitator Training Weekend.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: This is the set of apprentice reflections for Code.org CS Discoveries facilitators in training during their 5-day summer workshop. Here you will find reflection prompts for each day of your in-person 5-day summer workshop. This questions will be the foundation of work we do at the Facilitator Training Weekend.
        csp-novice-18:
          title: CS Principles Novice Reflections 2018-2019
          description_audience: CS Principles Facilitators in Training 2018-2019
          description_short: 'Novice reflection materials for CS Principles facilitators in training '
          description: This is the set of novice reflections for Code.org CS Principles facilitators in training during their 5-day summer workshop. Here you will find reflection prompts for each day of your in-person 5-day summer workshop. This questions will be the foundation of work we do at the Facilitator Training Weekend.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: This is the set of novice reflections for Code.org CS Principles facilitators in training during their 5-day summer workshop. Here you will find reflection prompts for each day of your in-person 5-day summer workshop. This questions will be the foundation of work we do at the Facilitator Training Weekend.
        csp-apprentice-18:
          title: CS Principles Apprentice Reflections 2018-2019
          description_audience: CS Principles Facilitators in Training 2018-2019
          description_short: 'Apprentice reflection materials for CS Principles facilitators in training '
          description: This is the set of apprentice reflections for Code.org CS Principles facilitators in training during their 5-day summer workshop. Here you will find reflection prompts for each day of your in-person 5-day summer workshop. This questions will be the foundation of work we do at the Facilitator Training Weekend.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: This is the set of apprentice reflections for Code.org CS Principles facilitators in training during their 5-day summer workshop. Here you will find reflection prompts for each day of your in-person 5-day summer workshop. This questions will be the foundation of work we do at the Facilitator Training Weekend.
        pre-express-2018:
          title: Pre-reader Express (2018)
          assignment_family_title: Pre-reader Express
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: 'An introduction to computer science for pre-readers: combines the best of our kindergarten and first grade courses.'
          description_audience: 'Ages: 4-8'
          lesson_groups: {}
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
        spritelab-validated:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        2018hoc-ab:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        deepdive-debugging:
          title: Debugging Lessons for Educators
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
          lessons: {}
          name: deepdive-debugging
        fit-test:
          title: FIT Training Practice PLC Course
          description_audience: Facilitators in Training
          description_short: FIT Training Course
          description: To be used to demonstrate how the PLC courses work.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: To be used to demonstrate how the PLC courses work.
        spritelab-simple:
          title: Introduction to Sprite Lab (EE)
          description: This is a pilot course for Code.org's new Sprite Lab tool for Courses E and F
          description_short: This is a pilot course for Code.org's new Sprite Lab tool for Courses E and F
          description_audience: Course E/F Students
          lesson_groups: {}
          student_description: This is a pilot course for Code.org's new Sprite Lab tool for Courses E and F
        spritelab-ee:
          title: Introduction to Sprite Lab (EE)
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        craft18:
          title: craft18 test script
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        frozen-2018:
          title: New Frozen Script
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        frozen-2018-test:
          title: New Frozen Script
          description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          student_description: ''
        dance:
          title: Dance Party (2018)
          description_audience: ''
          description_short: Featuring Katy Perry, Madonna, J. Balvin, Sia, Keith Urban, Ciara, and 25 more!
          description: Code your own dance party to share with your friends!
          lesson_groups: {}
          student_description: Code your own dance party to share with your friends!
          name: dance
          lessons: {}
        frozen-2018-test-b:
          title: New Frozen Script
          description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          student_description: ''
        aquatic:
          title: 'Minecraft: Voyage Aquatic'
          description_audience: ''
          description_short: Use your creativity and problem solving skills to explore and build underwater worlds with code!
          description: Minecraft is back with a brand new activity! Use your creativity and problem solving skills to explore and build underwater worlds with code.
          lesson_groups: {}
          student_description: Minecraft is back with a brand new activity! Use your creativity and problem solving skills to explore and build underwater worlds with code.
          name: aquatic
          lessons: {}
        sconyers:
          title: Tracey's Playground
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        dance--draft:
          title: ''
          description: ''
          description_short: ''
          description_audience: ''
        dance-draft:
          title: DO NOT USE
          description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          student_description: ''
          lessons: {}
          name: dance-draft
        cspplayground:
          title: CSP Playground
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          student_description: ''
        dance-extras:
          title: Keep On Dancing (2018)
          description_audience: ''
          description_short: Go beyond the Hour of Code with this follow-up activity to Code.org's Dance Party tutorial.
          description: Go beyond the first hour with extended project ideas.
          lesson_groups: {}
          student_description: Go beyond the first hour with extended project ideas.
          name: dance-extras
          lessons: {}
        coursef-2019:
          title: Course F (2019)
          description: Learn to use different kinds of loops, events, functions, and conditionals. Investigate different problem-solving techniques and discuss societal impacts of computing and the internet. In the second part of this course, design and create a capstone project you can share with friends and family.
          description_short: Learn all the concepts in Computer Science Fundamentals and create your own art, story or game.
          description_audience: 'Ages: 9-13'
          lesson_groups:
            ramp_up:
              display_name: Ramp-Up
            csf_variables:
              display_name: Variables
            csf_data:
              display_name: Data
            csf_for_loops:
              display_name: For Loops
            csf_internet:
              display_name: Internet
            csf_sprites:
              display_name: Sprites
            csf_digcit:
              display_name: Digital Citizenship
            end_of_course_project:
              display_name: End of Course Project
          student_description: Learn to use different kinds of loops, events, functions, and conditionals. Investigate different problem-solving techniques and discuss societal impacts of computing and the internet. In the second part of this course, design and create a capstone project you can share with friends and family.
        dance-low:
          title: Dance Party (Low Bandwidth)
          description_audience: ''
          description_short: Code your own dance party to share with your friends! (This version is for slow connections)
          description: ''
          lesson_groups: {}
          student_description: ''
        coursed-2019:
          title: Course D (2019)
          description: Students develop their understanding of loops, conditionals, and events. Beyond coding, students learn about digital citizenship.
          description_short: Learn about conditional statements. Create your own art, games, and even a dance party.
          description_audience: 'Ages: 7-11'
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_events:
              display_name: Events
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            csf_binary:
              display_name: Binary
            csf_digcit:
              display_name: Digital Citizenship
            end_of_course_project:
              display_name: End of Course Project
          student_description: Students develop their understanding of loops, conditionals, and events. Beyond coding, students learn about digital citizenship.
        coursee-2019:
          title: Course E (2019)
          description: Start coding with algorithms, loops, conditionals, and events and then you’ll move on functions. In the second part of this course, design and create a capstone project you can share with your friends and family.
          description_short: Review concepts in Courses C & D, then go further by learning functions.
          description_audience: 'Ages: 8-12'
          lesson_groups:
            ramp_up:
              display_name: Ramp-Up
            csf_sprites:
              display_name: Sprites
            csf_digcit:
              display_name: Digital Citizenship
            csf_impacts:
              display_name: Impacts of Computing
            csf_nested_loops:
              display_name: Nested Loops
            csf_functions:
              display_name: Functions
            end_of_course_project:
              display_name: End of Course Project
          student_description: Start coding with algorithms, loops, conditionals, and events and then you’ll move on functions. In the second part of this course, design and create a capstone project you can share with your friends and family.
        express-2019:
          title: Express Course (2019)
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          description_short: 'An introduction to computer science: combines the best of our elementary school curriculum for older students.'
          description_audience: 'Ages: 9-18'
          lesson_groups:
            csf_warmup:
              display_name: Warm-Up
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            csf_functions:
              display_name: Functions
            csf_variables:
              display_name: Variables
            csf_for_loops:
              display_name: For Loops
            csf_sprites:
              display_name: Sprites
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          name: express-2019
        csd1-2019:
          title: CSD Unit 1 - Problem Solving and Computing ('19-'20)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
          description_short: "  Learn how humans work with computers to solve problems."
          description_audience: ''
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csd1_1:
              display_name: 'Chapter 1: The Problem Solving Process'
            csd1_2:
              display_name: 'Chapter 2: Computers and Problem Solving'
          student_description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
        andrea-test:
          title: andrea-test
          description_audience: 6-12 Facilitators-in-Training
          description_short: this is to test my skills in making a course
          description: longer description on my attempt to create a course....   stilling wondering where overview, content came from....
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          name: andrea-test
          student_description: longer description on my attempt to create a course....   stilling wondering where overview, content came from....
        dance-extras-gallery:
          title: Keep On Dancing
          description_audience: ''
          description_short: Go beyond the Hour of Code with this follow-up activity to Code.org's Dance Party tutorial.
          description: Go beyond the first hour with extended project ideas.
          lesson_groups: {}
          student_description: Go beyond the first hour with extended project ideas.
        coursec-2019:
          title: Course C (2019)
          description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description_audience: 'Ages: 6-10'
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_binary:
              display_name: Binary
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
            csf_data:
              display_name: Data
            end_of_course_project:
              display_name: End of Course Project
          student_description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
        csp-mid-survey:
          title: CSP Student Mid-year Survey
          description_audience: CSP Students
          description_short: CSP Student Mid-year Survey
          description: Welcome to the Code.org CS Principles Mid-Year Survey.  This survey takes about 15 minutes to complete.  Your responses are private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration.
          lesson_groups:
            cspSurvey:
              display_name: Survey
          student_description: Welcome to the Code.org CS Principles Mid-Year Survey.  This survey takes about 15 minutes to complete.  Your responses are private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration.
          name: csp-mid-survey
        gamelab:
          title: Game Lab
          description_audience: ''
          description_short: ''
          description: Teacher-facing tutorials for development in Game Lab.  These tutorials go beyond the concepts covered in CSD.
          lesson_groups: {}
          student_description: Teacher-facing tutorials for development in Game Lab.  These tutorials go beyond the concepts covered in CSD.
        coursea-2019:
          title: Course A (2019)
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers.
          description_audience: 'Ages: 4-7'
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
        courseb-2019:
          title: Course B (2019)
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers. Similar to Course A, but with added concept depth.
          description_audience: 'Ages: 5-8'
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_impacts:
              display_name: Impacts of Computing
            csf_events:
              display_name: Events
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
        pre-express-2019:
          title: Pre-reader Express (2019)
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          description_short: 'An introduction to computer science for pre-readers: combines the best of our kindergarten and first grade courses.'
          description_audience: 'Ages: 4-8'
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          name: pre-express-2019
        removed19:
          title: Removed from CSF for 2019
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        dani-test-script:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        csd2-2019:
          title: CSD Unit 2 - Web Development ('19-'20)
          description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging and commenting.  By the end of the unit, you’ll have a personal website that you can publish to the Internet."
          description_short: "  Learn to build your own web site in Web Lab."
          description_audience: ''
          lesson_groups:
            csd2_1:
              display_name: 'Chapter 1: Web Content and HTML'
            csd2_2:
              display_name: 'Chapter 2: Styling and CSS'
            cspSurvey:
              display_name: Survey
          student_description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging and commenting.  By the end of the unit, you’ll have a personal website that you can publish to the Internet."
        csd3-2019:
          title: CSD Unit 3 - Animations and Games ('19-'20)
          description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          description_short: " Learn to program animations, interactive art, and games in Game Lab."
          description_audience: ''
          lesson_groups:
            csd3_1:
              display_name: 'Chapter 1: Images and Animations'
            csd3_2:
              display_name: 'Chapter 2: Building Games'
            cspSurvey:
              display_name: Survey
          student_description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
        csd4-2019:
          title: CSD Unit 4 - The Design Process ('19-'20)
          description: Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          description_short: "  Learn how to design a program that meets the needs of your users."
          description_audience: ''
          lesson_groups:
            csd4_1:
              display_name: 'Chapter 1: User Centered Design'
            csd4_2:
              display_name: 'Chapter 2: App Prototyping'
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
            cspSurvey:
              display_name: Survey
          student_description: Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
        csd5-2019:
          title: CSD Unit 5 - Data and Society ('19-'20)
          description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          description_short: Learn how people use computers to solve data problems.
          description_audience: ''
          lesson_groups:
            csd5_1:
              display_name: 'Chapter 1: Representing Information'
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
            cspSurvey:
              display_name: Survey
          student_description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
        csd6-2019:
          title: CSD Unit 6 - Physical Computing ('19-'20)
          description: Unit 6 explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          description_short: Learn to program with physical devices.
          description_audience: ''
          lesson_groups:
            csd6_1:
              display_name: 'Chapter 1: Programming with Hardware'
            csd6_2:
              display_name: 'Chapter 2: Building Physical Prototypes'
            cspSurvey:
              display_name: Survey
          student_description: Unit 6 explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
        csp4-pilot:
          title: CSP Unit 4 Pilot - Variables, Conditionals, and Functions
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
            required:
              display_name: Overview
            optional_stages:
              display_name: Optional Stages
          student_description: ''
        csp1-2019:
          title: CSP Unit 1 - The Internet ('19-'20)
          description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers and transfer it between people and computational devices. The unit then explores the structure and design of the internet and the implications of those design decisions.
          description_short: Explore the challenges about representing information as bits and how to get those bits from one place to another.
          description_audience: ''
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csp1_1:
              display_name: 'Chapter 1: Representing and Transmitting Information'
            csp1_2:
              display_name: 'Chapter 2: Inventing the Internet'
          student_description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers and transfer it between people and computational devices. The unit then explores the structure and design of the internet and the implications of those design decisions.
        csp2-2019:
          title: CSP Unit 2 - Digital Information ('19-'20)
          description: This unit further explores the ways that digital information is encoded, represented and manipulated. Being able to digitally manipulate data, visualize it, and identify patterns, trends and possible meanings are important practical skills that computer scientists do every day. Understanding where data comes from, having intuitions about what could be learned or extracted from it, and being able to use computational tools to manipulate data and communicate about it are the primary skills addressed in the unit.
          description_short: Explore how more complex digital information is represented and manipulated through computation and visualization.
          description_audience: ''
          lesson_groups:
            csp2_1_2018:
              display_name: 'Unit 2: Digital Information'
            cspAssessment:
              display_name: Chapter Assessment
            cspSurvey:
              display_name: Survey
          student_description: This unit further explores the ways that digital information is encoded, represented and manipulated. Being able to digitally manipulate data, visualize it, and identify patterns, trends and possible meanings are important practical skills that computer scientists do every day. Understanding where data comes from, having intuitions about what could be learned or extracted from it, and being able to use computational tools to manipulate data and communicate about it are the primary skills addressed in the unit.
        csp3-2019:
          title: CSP Unit 3 - Intro to Programming ('19-'20)
          description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          description_short: Learn the basics of programming in JavaScript through a top-down design approach using classic turtle drawing.
          description_audience: ''
          lesson_groups:
            csp3_1_2018:
              display_name: 'Unit 3: Intro to Programming'
            cspAssessment:
              display_name: Chapter Assessment
            cspSurvey:
              display_name: Survey
          student_description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
        csp4-2019:
          title: CSP Unit 4 - Big Data and Privacy ('19-'20)
          description: The data-rich world we live in introduces many complex questions related to public policy, law, ethics and societal impact. The goals of this unit are to develop a well-rounded and balanced view about data in the world, including the positive and negative effects of it, and to understand the basics of how and why modern encryption works.
          description_short: Explore the data-rich world we live, and how data impacts public policy, personal privacy, security, the law, and ethics.
          description_audience: ''
          lesson_groups:
            csp4_1_2018:
              display_name: 'Unit 4: Big Data and Privacy'
            cspAssessment:
              display_name: Chapter Assessment
            optional:
              display_name: Optional
            cspSurvey:
              display_name: Survey
          student_description: The data-rich world we live in introduces many complex questions related to public policy, law, ethics and societal impact. The goals of this unit are to develop a well-rounded and balanced view about data in the world, including the positive and negative effects of it, and to understand the basics of how and why modern encryption works.
        csp5-2019:
          title: CSP Unit 5 - Building Apps ('19-'20)
          description: This unit continues the introduction of foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          description_short: Continue to learn foundational concepts of computer programming in JavaScript by making rich, interactive apps.
          description_audience: ''
          lesson_groups:
            csp5_1:
              display_name: 'Chapter 1: Event-Driven Programming'
            csp5_2:
              display_name: 'Chapter 2: Programming with Data Structures'
            cspSurvey:
              display_name: Survey
          student_description: This unit continues the introduction of foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
        csp-explore-2019:
          title: Explore - AP Performance Task Prep ('19-'20)
          description: 'These lessons are here to help you understand, prepare for, and do the AP Explore Performance Task.  Each "lesson" contains links to helpful documents that your teacher can help walk you through. NOTE: the second item in the first lesson is not related to the Explore PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.'
          description_short: Lessons and resources to help students prepare for and complete the AP Explore Performance Tasks.
          description_audience: ''
          lesson_groups:
            csp_ap_2:
              display_name: 'Chapter 2: AP Explore Performance Task'
            cspSurvey:
              display_name: Survey
          student_description: 'These lessons are here to help you understand, prepare for, and do the AP Explore Performance Task.  Each "lesson" contains links to helpful documents that your teacher can help walk you through. NOTE: the second item in the first lesson is not related to the Explore PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.'
        csp-create-2019:
          title: Create - AP Performance Task Prep ('19-'20)
          description: 'These lessons are here to help you understand, prepare for, and do the AP Create Performance Task.  Each "lesson" contains links to helpful documents that your teacher can help walk you through. NOTE: the first item in the first lesson is not related to the Create PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.'
          description_short: Lessons and resources to help students prepare for and complete the AP Create Performance Tasks.
          description_audience: ''
          lesson_groups:
            csp_ap_3:
              display_name: 'Chapter 3: AP Create Performance Task'
            cspSurvey:
              display_name: Survey
          student_description: 'These lessons are here to help you understand, prepare for, and do the AP Create Performance Task.  Each "lesson" contains links to helpful documents that your teacher can help walk you through. NOTE: the first item in the first lesson is not related to the Create PT directly, but covers general tech setup and tools you need to do various elements of both the Explore and Create tasks.'
        csppostap-2019:
          title: Post AP - Data Tools ('19-'20)
          description: "In the first chapter of this unit students develop skills interpreting visual data and using spreadsheet and visualization tools to create their own digital artifacts.  Through an ongoing project  - the “class data tracker” - students learn how to collect and clean data, and to use a few common tools for computing aggregations and creating visualizations. \r\n\r\nThe second chapter explores the importance of data within apps. App Lab has a number of tools that allow you to collect and use data in your apps. The second chapter provides an overview of how these tools work, a sampling of example projects that can be built using these tools, and a space in which to build and submit a final project."
          description_short: Learn to collect and use data in App Lab apps.
          description_audience: ''
          lesson_groups:
            csp_postap_1:
              display_name: 'Chapter 1: Manipulating and Visualizing Data'
            csp_postap_2:
              display_name: 'Chapter 2: Apps and Databases'
            cspSurvey:
              display_name: Survey
          student_description: "In the first chapter of this unit students develop skills interpreting visual data and using spreadsheet and visualization tools to create their own digital artifacts.  Through an ongoing project  - the “class data tracker” - students learn how to collect and clean data, and to use a few common tools for computing aggregations and creating visualizations. \r\n\r\nThe second chapter explores the importance of data within apps. App Lab has a number of tools that allow you to collect and use data in your apps. The second chapter provides an overview of how these tools work, a sampling of example projects that can be built using these tools, and a space in which to build and submit a final project."
        csp1-pilot:
          title: CSP Unit 1 Pilot - Digital Information
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            cspSurvey:
              display_name: Survey
            required:
              display_name: Overview
          student_description: ''
        csd-tests:
          title: Post-Project Tests for CSD
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csd-videos:
          title: CSD Videos
          description_audience: ''
          description_short: All the Videos in CS Discoveries
          description: All the Videos in CS Discoveries
          lesson_groups: {}
          student_description: All the Videos in CS Discoveries
        time4csdemo:
          title: Time4CS Florida's Diversity
          description_audience: 4th grade
          description_short: This module focuses on the 4th grade's science and social study standards. In science, they view life standards that encompass habitats, ecosystems, native species, and invasive species. In social studies, students contemplate the branches of Florida's government and how everyday citizens can impact local and state policies.
          description: This module focuses on the 4th grade's science and social study standards. In science, they view life standards that encompass habitats, ecosystems, native species, and invasive species. In social studies, students contemplate the branches of Florida's government and how everyday citizens can impact local and state policies.
          lesson_groups:
            ramp_up:
              display_name: Ramp-Up
            csf_sprites:
              display_name: Sprites
            time4cs_c1:
              display_name: 'Collection 1: The Everglades & its Ecosystems'
            time4cs_c2:
              display_name: 'Collection 2: Food Chains (in the Everglades)'
            time4cs_c3:
              display_name: 'Collection 3: Native Species (in the Everglades)'
            time4cs_c4:
              display_name: 'Collection 4: Impact of Invasive Species (on the Everglades)'
            time4cs_c5:
              display_name: 'Collection 5: Citizens Take Action'
          student_description: This module focuses on the 4th grade's science and social study standards. In science, they view life standards that encompass habitats, ecosystems, native species, and invasive species. In social studies, students contemplate the branches of Florida's government and how everyday citizens can impact local and state policies.
        csp1-pilot-staging:
          title: 'Unit 1: Bits & Bytes'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          student_description: ''
        csp2-pilot-staging:
          title: 'Unit 2: The Internet'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          student_description: ''
        csp3-pilot-staging:
          title: 'Unit 3: Intro to App Development'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csp4-pilot-staging:
          title: 'Unit 4: Variables, Conditionals, and Functions'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          student_description: ''
        csp5-pilot-staging:
          title: 'Unit 5: Lists, Loops, and Traversals'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_lists:
              display_name: Lists
            csp_loops:
              display_name: Loops
            csp_traversals:
              display_name: Traversals
            csp_project:
              display_name: Project
            csp_libraries:
              display_name: Libraries
          student_description: ''
        csp6-pilot-staging:
          title: 'Unit 6: Algorithms'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          student_description: ''
        csp7-pilot-staging:
          title: 'Unit 7: Functions and Libraries'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_parameters_return_values:
              display_name: Parameters and Return Values
            csp_libraries:
              display_name: Libraries
          student_description: ''
        csp8-pilot-staging:
          title: 'Unit 8: Create PT'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          student_description: ''
        csp9-pilot-staging:
          title: 'Unit 9: Data'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          student_description: ''
        csp10-pilot-staging:
          title: 'Unit 10: Global Impact'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          student_description: ''
        pluralsight:
          title: Get access to Pluralsight One
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
          lessons: {}
          name: pluralsight
        express-2018-vn:
          title: Express For Vietnam (2018)
          description_audience: ''
          description_short: Giới thiệu Khoa học máy tính cơ bản cho học sinh Việt Nam.
          description: "Khoa Học Máy Tính (Computer Science) \x1Dlà môn học cơ bản của thời đại kinh tế số và đã được đưa vào dạy đại trà từ tiểu học ở Mỹ, Canada, Anh, Nhật và các nước phát triển khác. Khoá học này nhằm giới thiệu Khoa Học Máy Tính cơ bản đến với học sinh Việt Nam. Chương trình được xây dựng trực tiếp từ chương trình hiện hành cho học sinh tiểu học ở Mỹ và cô động cho phù hợp với học sinh Việt Nam.\r\n"
        csd-post-survey-2018:
          title: CSD Student Post-Course Survey ('18-'19)
          description_audience: CSD Students
          description_short: CSD Student Post-Course Survey 2018
          description: "The CS Discoveries Post-Course Survey is an important tool we use to get feedback from you and make improvements to the course. \r\n The survey is private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration."
          lesson_groups:
            cspSurvey:
              display_name: Survey
          student_description: "The CS Discoveries Post-Course Survey is an important tool we use to get feedback from you and make improvements to the course. \r\n The survey is private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration."
          name: csd-post-survey-2018
        csp-post-survey-2018:
          title: CSP Student Post-Course Survey ('18-'19)
          description_audience: CSP Students
          description_short: CSP Student Post Course Survey
          description: Welcome to the Code.org CS Principles Post-Course Survey.  This survey takes about 15 minutes to complete.  Your responses are private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration.
          lesson_groups:
            cspSurvey:
              display_name: Survey
          student_description: Welcome to the Code.org CS Principles Post-Course Survey.  This survey takes about 15 minutes to complete.  Your responses are private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration.
          name: csp-post-survey-2018
        csp5-pilot:
          title: CSP Unit 5 Pilot - Lists, Loops, and Traversals
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_lists:
              display_name: Lists
            csp_loops:
              display_name: Loops
            csp_traversals:
              display_name: Traversals
            csp_project:
              display_name: Project
            required:
              display_name: Overview
            optional_stages:
              display_name: Optional Stages
          student_description: ''
        fit2019-novice:
          title: Novice Reflections for Summer Workshop 2019
          description_audience: 6 - 12 Novice Facilitators in Training
          description_short: 'Novice reflection materials for 2019 facilitators in training '
          description: This is the set of novice reflections for Code.org facilitators in training during their 5-day summer workshop. Here, you will find reflection prompts for each day of your in-person 5-day summer workshop. These questions will be the foundation of work we do at the Facilitator Training Workshop.
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: This is the set of novice reflections for Code.org facilitators in training during their 5-day summer workshop. Here, you will find reflection prompts for each day of your in-person 5-day summer workshop. These questions will be the foundation of work we do at the Facilitator Training Workshop.
        csd-test-saving-state:
          title: Sample of online activities
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        fit2019-apprentice:
          title: Apprentice Reflections for Summer Workshop 2019
          description_audience: 6 - 12 Apprentice Facilitators in Training
          description_short: 'Apprentice reflection materials for 2019 facilitators in training '
          description: This is the set of apprentice reflections for Code.org facilitators in training during their 5-day summer workshop. Here, you will find reflection prompts for each day of your in-person 5-day summer workshop. These questions will be the foundation of work we do at the Facilitator Training Workshop
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: This is the set of apprentice reflections for Code.org facilitators in training during their 5-day summer workshop. Here, you will find reflection prompts for each day of your in-person 5-day summer workshop. These questions will be the foundation of work we do at the Facilitator Training Workshop
          name: fit2019-apprentice
        csd-sample-online:
          title: Sample of online activities for CS Discoveries
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csd1-pilot:
          title: CSD Unit 1 - Problem Solving (Pilot Version)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
          description_short: "  Learn how humans work with computers to solve problems."
          description_audience: ''
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csd1_1:
              display_name: 'Chapter 1: The Problem Solving Process'
            csd1_2:
              display_name: 'Chapter 2: Computers and Problem Solving'
          student_description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
        csd2-pilot:
          title: CSD Unit 2 - Web Development (Pilot Version)
          description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging and commenting.  By the end of the unit, you’ll have a personal website that you can publish to the Internet."
          description_short: "  Learn to build your own web site in Web Lab."
          description_audience: ''
          lesson_groups:
            csd2_1:
              display_name: 'Chapter 1: Web Content and HTML'
            csd2_2:
              display_name: 'Chapter 2: Styling and CSS'
            cspSurvey:
              display_name: Survey
          student_description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging and commenting.  By the end of the unit, you’ll have a personal website that you can publish to the Internet."
        csd3-pilot:
          title: CSD Unit 3 - Animations and Games (Pilot Version)
          description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          description_short: " Learn to program animations, interactive art, and games in Game Lab."
          description_audience: ''
          lesson_groups:
            csd3_1:
              display_name: 'Chapter 1: Images and Animations'
            csd3_2:
              display_name: 'Chapter 2: Building Games'
            cspSurvey:
              display_name: Survey
          student_description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
        csd-bugs:
          title: Example of Bugs for CSD Teachers
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        maddie-test:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        csp3-pilot:
          title: CSP Unit 3 Pilot - Intro to App Design
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            content:
              display_name: Content
            required:
              display_name: Overview
          student_description: ''
        csl-vn:
          title: Computer Science Literacy for Vietnam
          description_audience: Tuổi 5-10
          description_short: Khoa học máy tính cơ bản cho học sinh Việt Nam
          description: 'Khoa Học Máy Tính (Computer Science) là môn học cơ bản của thời đại kinh tế số và đã được đưa vào dạy đại trà từ tiểu học ở Mỹ, Canada, Anh, Nhật và các nước phát triển khác. Khoá học này nhằm giới thiệu Khoa Học Máy Tính cơ bản đến với học sinh Việt Nam. Chương trình được xây dựng trực tiếp từ chương trình hiện hành cho học sinh tiểu học ở Mỹ và cô đọng cho phù hợp với học sinh Việt Nam. '
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
          student_description: 'Khoa Học Máy Tính (Computer Science) là môn học cơ bản của thời đại kinh tế số và đã được đưa vào dạy đại trà từ tiểu học ở Mỹ, Canada, Anh, Nhật và các nước phát triển khác. Khoá học này nhằm giới thiệu Khoa Học Máy Tính cơ bản đến với học sinh Việt Nam. Chương trình được xây dựng trực tiếp từ chương trình hiện hành cho học sinh tiểu học ở Mỹ và cô đọng cho phù hợp với học sinh Việt Nam. '
        dlp19-csd-mod-fit:
          title: CS Discoveries Deeper Learning 2019 Module for FiT
          description_audience: CS Discoveries Facilitators in Training 2019
          description_short: Background information and practice prompt for FiT workshop
          description: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          name: dlp19-csd-mod-fit
          student_description: ''
        dlp19-csp-mod-fit:
          title: CS Principles Deeper Learning 2019 FiT Workshop
          description_audience: CS Principles Facilitators in Training 2019
          description_short: ''
          description: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: ''
        pl-csd-bugs:
          title: CSD Workshop 1 Bugs
          description_audience: ''
          description_short: Debugging in Game Lab - Academic Year Workshop 1
          description: ''
          lesson_groups: {}
          student_description: ''
        dlp19-csd-mod-w1:
          title: 'CS Discoveries Deeper Learning 2019 Module for Workshop 1 '
          description_audience: CS Discoveries Facilitators in Training 2019
          description_short: Academic Year Workshop 1
          description: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: ''
        dlp19-csd-mod-w2:
          title: CS Discoveries Deeper Learning Module for Workshop 2
          description_audience: CS Discoveries Facilitators in Training 2019
          description_short: ''
          description: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: ''
        dlp19-csd-mod-w3:
          title: CS Discoveries Deeper Learning Module for Workshop 3
          description_audience: CS Discoveries Facilitators in Training 2019
          description_short: ''
          description: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: ''
        dlp19-csd-mod-w4:
          title: CS Discoveries Deeper Learning Module for Workshop 4
          description_audience: CS Discoveries Facilitators in Training 2019
          description_short: ''
          description: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: ''
        dlp19-csp-mod-w1:
          title: CS Principles Deeper Learning Module for Workshop 1
          description_audience: CS Principles Facilitators in Training 2019
          description_short: ''
          description: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: ''
        dlp19-csp-mod-w2:
          title: CS Principles Deeper Learning Module for Workshop 2
          description_audience: CS Principles Facilitators in Training 2019
          description_short: ''
          description: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: ''
          name: dlp19-csp-mod-w2
        dlp19-csp-mod-w3:
          title: CS Principles Deeper Learning Module for Workshop 3
          description_audience: CS Principles Facilitators in Training 2019
          description_short: ''
          description: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: ''
        dlp19-csp-mod-w4:
          title: CS Principles Deeper Learning Module for Workshop 4
          description_audience: CS Principles Facilitators in Training 2019
          description_short: ''
          description: ''
          lesson_groups:
            required:
              display_name: Overview
            content:
              display_name: Content
          student_description: ''
          name: dlp19-csp-mod-w4
        csd-pilot:
          title: CSD Pilot Course
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csd4-pilot:
          title: Computing and Problem Solving
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csd1_2:
              display_name: 'Chapter 2: Computers and Problem Solving'
          student_description: ''
        csp2-pilot:
          title: CSP Unit 2 Pilot - The Internet
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            content:
              display_name: Content
            required:
              display_name: Overview
          student_description: ''
        denny-science:
          title: Earthquake Detector
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        peru-2019:
          title: Hora del Código Perú 2019
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csp6-pilot:
          title: CSP Unit 6 Pilot - Algorithms
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            content:
              display_name: Content
            required:
              display_name: Overview
          student_description: ''
        denny-science-8:
          title: Collision Detector
          description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          student_description: ''
        denny-science-copy:
          lesson_groups: {}
        dance-2019:
          title: Dance Party
          description_audience: ''
          description_short: Code a Dance Party to share with friends and family. Featuring Beyoncé, Harry Styles, Lizzo, Lil Nas X, Selena Gomez, music from Disney's "Encanto," and more!
          description: Code your own dance party to share with your friends!
          lesson_groups: {}
          student_description: Code your own dance party to share with your friends!
          name: dance-2019
          lessons: {}
        k5-onlinepd-2019:
          title: Teaching Computer Science Fundamentals (2019)
          description: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course!
          description_short: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course.
          description_audience: ''
          lesson_groups:
            k5_getting_started:
              display_name: Getting Started
            k5_basic_concepts:
              display_name: Basic Coding Concepts and Teaching Practices
            k5_diving_deeper:
              display_name: 'Diving Deeper: Courses E and F'
            k5_next_steps:
              display_name: Next Steps
          student_description: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course!
          name: k5-onlinepd-2019
        dance-extras-2019:
          title: Keep On Dancing
          description: Go beyond the first hour with extended project ideas.
          description_short: Go beyond the Hour of Code with this follow-up activity to Code.org's Dance Party tutorial.
          description_audience: ''
          lesson_groups: {}
          student_description: Go beyond the first hour with extended project ideas.
          name: dance-extras-2019
          lessons: {}
        csp10-pilot:
          title: Cybersecurity and Global Impacts
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csp4-preview:
          title: 'CSP Preview: Variables, Conditionals, and Functions'
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          student_description: ''
        time4cs-original-unit-1:
          title: Time4CS Original Unit 1
          description_audience: ''
          description_short: ''
          description: ''
        time4cs-control-unit-2:
          title: Time4CS Control Unit 2
          description_audience: ''
          description_short: ''
          description: Description for the unit goes here
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_conditionals:
              display_name: Conditionals
            csf_nested_loops:
              display_name: Nested Loops
            csf_functions:
              display_name: Functions
            end_of_course_project:
              display_name: End of Course Project
          student_description: Description for the unit goes here
        time4cs-experiment-unit-2:
          title: Time4CS Experiment Unit 2
          description_audience: ''
          description_short: "[Add description]"
          description: "[Add description]"
          lesson_groups:
            time4cs_c1:
              display_name: 'Collection 1: The Everglades & its Ecosystems'
            time4cs_c2:
              display_name: 'Collection 2: Food Chains (in the Everglades)'
            time4cs_c3:
              display_name: 'Collection 3: Native Species (in the Everglades)'
            time4cs_c4:
              display_name: 'Collection 4: Impact of Invasive Species (on the Everglades)'
            time4cs_c5:
              display_name: 'Collection 5: Citizens Take Action'
          student_description: "[Add description]"
        time4cs-control-unit-1:
          title: Time4CS Control Unit 1
          description: ''
          description_short: ''
          description_audience: ''
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            csf_events:
              display_name: Events
            csf_sprites:
              display_name: Sprites
            csf_digcit:
              display_name: Digital Citizenship
            csf_impacts:
              display_name: Impacts of Computing
            ramp_up:
              display_name: Ramp-Up
          student_description: ''
        time4cs-experiment-unit-1:
          title: Time4CS Experiment Unit 1
          description: ''
          description_short: ''
          description_audience: ''
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            csf_events:
              display_name: Events
            csf_sprites:
              display_name: Sprites
            csf_digcit:
              display_name: Digital Citizenship
            csf_impacts:
              display_name: Impacts of Computing
            ramp_up:
              display_name: Ramp-Up
          student_description: ''
        csp7-pilot:
          title: CSP Unit 7 Pilot - Parameters, Return, and Libraries
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            csp_parameters_return_values:
              display_name: Parameters and Return Values
            csp_libraries:
              display_name: Libraries
            required:
              display_name: Overview
            optional_stages:
              display_name: Optional Stages
          student_description: ''
        csp8-pilot:
          title: CSP Unit 8 Pilot - Create PT Prep
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csp4-2020:
          title: CSP Unit 4 - Variables, Conditionals, and Functions ('20-'21)
          description_audience: ''
          description_short: Learn how to build apps that store information, make decisions, and keep code organized.
          description: This unit explores how variables, conditionals, and functions allow for the design of increasingly complex apps. Learn how to program with these three new concepts through a sequence of collaborative activities. Then build your own decision maker app to share with friends and help them make a decision.
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
            cspSurvey2020:
              display_name: Post-Course Survey
          student_description: This unit explores how variables, conditionals, and functions allow for the design of increasingly complex apps. Learn how to program with these three new concepts through a sequence of collaborative activities. Then build your own decision maker app to share with friends and help them make a decision.
          name: csp4-2020
        csp5-2020:
          title: CSP Unit 5 - Lists, Loops, and Traversals ('20-'21)
          description_audience: ''
          description_short: Learn how to build apps that use lists, loops, and traversals to store and process large amounts of information.
          description: This unit introduces lists, loops, and traversals, and explores the way they can be used to build apps that store and process large amounts of information. Learn to program with the data library in App Lab and complete a 5-day hackathon project at the end of the unit where you can design a program about any topic of your choosing.
          lesson_groups:
            csp_lists:
              display_name: Lists
            csp_loops:
              display_name: Loops
            csp_traversals:
              display_name: Traversals
            csp_project:
              display_name: Project
            cspSurvey2020:
              display_name: Post-Course Survey
          student_description: This unit introduces lists, loops, and traversals, and explores the way they can be used to build apps that store and process large amounts of information. Learn to program with the data library in App Lab and complete a 5-day hackathon project at the end of the unit where you can design a program about any topic of your choosing.
          name: csp5-2020
        csp7-2020:
          title: CSP Unit 7 - Parameters, Return, and Libraries ('20-'21)
          description_audience: ''
          description_short: Learn how to design clean and reusable code that you can share with a single classmate or the entire world.
          description: This unit introduces parameters, return, and libraries. Learn how to use these concepts to build new kinds of apps as well as libraries of code that you can share with your classmates. End the unit by designing a library of functions around any topic of your choosing.
          lesson_groups:
            csp_parameters_return_values:
              display_name: Parameters and Return Values
            csp_libraries:
              display_name: Libraries
            cspSurvey2020:
              display_name: Post-Course Survey
          name: csp7-2020
          student_description: This unit introduces parameters, return, and libraries. Learn how to use these concepts to build new kinds of apps as well as libraries of code that you can share with your classmates. End the unit by designing a library of functions around any topic of your choosing.
        csd2-projects-temp:
          title: CSD Web Projects - TEMP
          description_audience: ''
          description_short: ''
          description: Temporary place to hold the new mini-projects for CSD Web Development
          lesson_groups: {}
          student_description: Temporary place to hold the new mini-projects for CSD Web Development
        csp9-pilot:
          title: CSP Unit 9 Pilot - Data
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        csd2-2020:
          title: CSD Unit 2 - Web Development ('20-'21)
          description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
          description_short: "  Learn to build your own web site in Web Lab."
          description_audience: ''
          lesson_groups:
            csd2_1:
              display_name: 'Chapter 1: Web Content and HTML'
            csd2_2:
              display_name: 'Chapter 2: Styling and CSS'
            cspSurvey:
              display_name: Survey
            csd2_1v2:
              display_name: 'Chapter 1: Creating Webpages'
            csd2_2v2:
              display_name: 'Chapter 2: Multi-page Websites'
          student_description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
          name: csd2-2020
        csd1-2020:
          title: CSD Unit 1 - Problem Solving and Computing ('20-'21)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
          description_short: "  Learn how humans work with computers to solve problems."
          description_audience: ''
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csd1_1:
              display_name: 'Chapter 1: The Problem Solving Process'
            csd1_2:
              display_name: 'Chapter 2: Computers and Problem Solving'
            csd1_3:
              display_name: Alternate Lessons
          student_description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
        csd4-2020:
          title: CSD Unit 4 - The Design Process ('20-'21)
          description: Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          description_short: "  Learn how to design a program that meets the needs of your users."
          description_audience: ''
          lesson_groups:
            csd4_1:
              display_name: 'Chapter 1: User Centered Design'
            csd4_2:
              display_name: 'Chapter 2: App Prototyping'
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
            cspSurvey:
              display_name: Survey
          student_description: Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          name: csd4-2020
        csd5-2020:
          title: CSD Unit 5 - Data and Society ('20-'21)
          description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          description_short: Learn how people use computers to solve data problems.
          description_audience: ''
          lesson_groups:
            csd5_1:
              display_name: 'Chapter 1: Representing Information'
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
            cspSurvey:
              display_name: Survey
          student_description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
        csd6-2020:
          title: CSD Unit 6 - Physical Computing ('20-'21)
          description: Unit 6 explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          description_short: Learn to program with physical devices.
          description_audience: ''
          lesson_groups:
            csd6_1:
              display_name: 'Chapter 1: Programming with Hardware'
            csd6_2:
              display_name: 'Chapter 2: Building Physical Prototypes'
            cspSurvey:
              display_name: Survey
          student_description: Unit 6 explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
        csd3-2020:
          title: CSD Unit 3 - Interactive Animations and Games ('20-'21)
          description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          description_short: " Learn to program animations, interactive art, and games in Game Lab."
          description_audience: ''
          lesson_groups:
            csd3_1:
              display_name: 'Chapter 1: Images and Animations'
            csd3_2:
              display_name: 'Chapter 2: Building Games'
            cspSurvey:
              display_name: Survey
          name: csd3-2020
          student_description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
        moneppo-1:
          lesson_groups: {}
        coursea-2020:
          title: Course A (2020)
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers.
          description_audience: 'Ages: 4-7'
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
        courseb-2020:
          title: Course B (2020)
          description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers. Similar to Course A, but with added concept depth.
          description_audience: 'Ages: 5-8'
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_impacts:
              display_name: Impacts of Computing
            csf_events:
              display_name: Events
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
        coursec-2020:
          title: Course C (2020)
          description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description_audience: 'Ages: 6-10'
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_binary:
              display_name: Binary
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
            csf_data:
              display_name: Data
            end_of_course_project:
              display_name: End of Course Project
          student_description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
        coursed-2020:
          title: Course D (2020)
          description: Students develop their understanding of loops, conditionals, and events. Beyond coding, students learn about digital citizenship.
          description_short: Learn about conditional statements. Create your own art, games, and even a dance party.
          description_audience: 'Ages: 7-11'
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_events:
              display_name: Events
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            csf_binary:
              display_name: Binary
            csf_digcit:
              display_name: Digital Citizenship
            end_of_course_project:
              display_name: End of Course Project
          student_description: Students develop their understanding of loops, conditionals, and events. Beyond coding, students learn about digital citizenship.
        coursee-2020:
          title: Course E (2020)
          description: Start coding with algorithms, loops, conditionals, and events and then you’ll move on functions. In the second part of this course, design and create a capstone project you can share with your friends and family.
          description_short: Review concepts in Courses C & D, then go further by learning functions.
          description_audience: 'Ages: 8-12'
          lesson_groups:
            ramp_up:
              display_name: Ramp-Up
            csf_sprites:
              display_name: Sprites
            csf_digcit:
              display_name: Digital Citizenship
            csf_nested_loops:
              display_name: Nested Loops
            csf_functions:
              display_name: Functions
            csf_impacts:
              display_name: Impacts of Computing
            end_of_course_project:
              display_name: End of Course Project
          student_description: Start coding with algorithms, loops, conditionals, and events and then you’ll move on functions. In the second part of this course, design and create a capstone project you can share with your friends and family.
        coursef-2020:
          title: Course F (2020)
          description: Learn to use different kinds of loops, events, functions, and conditionals. Investigate different problem-solving techniques and discuss societal impacts of computing and the internet. In the second part of this course, design and create a capstone project you can share with friends and family.
          description_short: Learn all the concepts in Computer Science Fundamentals and create your own art, story or game.
          description_audience: 'Ages: 9-13'
          lesson_groups:
            ramp_up:
              display_name: Ramp-Up
            csf_digcit:
              display_name: Digital Citizenship
            csf_variables:
              display_name: Variables
            csf_data:
              display_name: Data
            csf_for_loops:
              display_name: For Loops
            csf_sprites:
              display_name: Sprites
            end_of_course_project:
              display_name: End of Course Project
          student_description: Learn to use different kinds of loops, events, functions, and conditionals. Investigate different problem-solving techniques and discuss societal impacts of computing and the internet. In the second part of this course, design and create a capstone project you can share with friends and family.
          name: coursef-2020
        express-2020:
          title: Express Course (2020)
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          description_short: 'An introduction to computer science: combines the best of our elementary school curriculum for older students.'
          description_audience: 'Ages: 9-18'
          lesson_groups:
            csf_warmup:
              display_name: Warm-Up
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            csf_functions:
              display_name: Functions
            csf_variables:
              display_name: Variables
            csf_for_loops:
              display_name: For Loops
            csf_sprites:
              display_name: Sprites
            end_of_course_project:
              display_name: End of Course Project
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
        pre-express-2020:
          title: Pre-reader Express (2020)
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          description_short: 'An introduction to computer science for pre-readers: combines the best of our kindergarten and first grade courses.'
          description_audience: 'Ages: 4-8'
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
        csp1-2020:
          title: CSP Unit 1 - Digital Information ('20-'21)
          description_audience: ''
          description_short: Explore the challenges and impacts of representing information about the world around you in bits.
          description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers. Learn how complex information like numbers, text, images, and sound are represented in text, how compression works, and the broader social impacts of digitizing the world's information.
          lesson_groups:
            csp_unit1_2020:
              display_name: 'Unit 1: Digital Information'
            cspSurvey:
              display_name: Survey
            cspSurvey2020:
              display_name: Post-Course Survey
          student_description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers. Learn how complex information like numbers, text, images, and sound are represented in text, how compression works, and the broader social impacts of digitizing the world's information.
          name: csp1-2020
        csp2-2020:
          title: CSP Unit 2 - The Internet ('20-'21)
          description_audience: ''
          description_short: Build the internet from the ground up using the Internet Simulator.
          description: This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.
          lesson_groups:
            csp_unit2_2020:
              display_name: 'Unit 2: The Internet'
            cspSurvey2020:
              display_name: Post-Course Survey
          student_description: This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.
          name: csp2-2020
        csp3-2020:
          title: CSP Unit 3 - Intro to App Design ('20-'21)
          description_audience: ''
          description_short: Design your first app and learn how programmers collaborate and interact with users to build the best possible solutions to problems.
          description: This unit is an introduction to programming and app design with a heavy focus on important skills like debugging, pair programming, and user testing. Learn how to design user interfaces and write event-driven programs in App Lab and then design a project that teaches your classmates about a topic of your choosing.
          lesson_groups:
            csp_unit3_2020:
              display_name: 'Unit 3: Intro to App Design'
            cspSurvey2020:
              display_name: Post-Course Survey
          name: csp3-2020
          student_description: This unit is an introduction to programming and app design with a heavy focus on important skills like debugging, pair programming, and user testing. Learn how to design user interfaces and write event-driven programs in App Lab and then design a project that teaches your classmates about a topic of your choosing.
        csp6-2020:
          title: CSP Unit 6 - Algorithms ('20-'21)
          description_audience: ''
          description_short: Design and analyze algorithms to understand how they work and why some are considered better than others.
          description: This unit is a quick exploration of how computer scientists design algorithms to solve problems and how they analyze the speed of different algorithms. Learn about the concept of algorithmic efficiency through a variety of hands-on activities and learn how it's being applied in modern computing.
          lesson_groups:
            csp_unit6_2020:
              display_name: 'Unit 6: Algorithms'
            cspSurvey2020:
              display_name: Post-Course Survey
          student_description: This unit is a quick exploration of how computer scientists design algorithms to solve problems and how they analyze the speed of different algorithms. Learn about the concept of algorithmic efficiency through a variety of hands-on activities and learn how it's being applied in modern computing.
          name: csp6-2020
        csp8-2020:
          title: CSP Unit 8 - Create PT Prep ('20-'21)
          description_audience: ''
          description_short: Practice and complete the Create Performance Task (PT).
          description: "In this unit prepare for, and do the AP Create Performance Task. Each lesson contains links to helpful documents and activities to help you understand the task and develop a plan for completing it.\r\n\r\n"
          lesson_groups: {}
          student_description: "In this unit prepare for, and do the AP Create Performance Task. Each lesson contains links to helpful documents and activities to help you understand the task and develop a plan for completing it.\r\n\r\n"
          name: csp8-2020
        csp9-2020:
          title: CSP Unit 9 - Data ('20-'21)
          description_audience: ''
          description_short: Explore and visualize datasets from a wide variety of topics as you hunt for patterns and try to learn more about the world around you.
          description: 'In this unit learn how data analysis helps turn raw data into useful information about the world. Learn how to use data visualization to find patterns inside of data sets and learn how this data analysis process is being used in contexts like open data or machine learning to help make decisions or learn more about our world. In the unit project you''ll analyze a dataset of your choosing and present your findings. '
          lesson_groups:
            csp_unit9_2020:
              display_name: 'Unit 9: Data'
            cspSurvey2020:
              display_name: Post-Course Survey
          student_description: 'In this unit learn how data analysis helps turn raw data into useful information about the world. Learn how to use data visualization to find patterns inside of data sets and learn how this data analysis process is being used in contexts like open data or machine learning to help make decisions or learn more about our world. In the unit project you''ll analyze a dataset of your choosing and present your findings. '
          name: csp9-2020
        csp10-2020:
          title: CSP Unit 10 - Cybersecurity and Global Impacts ('20-'21)
          description_audience: ''
          description_short: Research and debate current events at the intersection of data, public policy, law, ethics, and societal impact.
          description: "In this unit learn how computing innovations have impacted our world in beneficial and harmful ways. Learn how data can pose a threat to our privacy and security, and the ways that encryption and other techniques are used to complete it. Throughout the unit participate in a \"school of the future\" conference in which you and a team make a proposal for how best to improve school life with computing innovations.\r\n\r\n"
          lesson_groups:
            csp_unit10_2020:
              display_name: 'Unit 10: Cybersecurity and Global Impacts'
            cspSurvey2020:
              display_name: Post-Course Survey
          student_description: "In this unit learn how computing innovations have impacted our world in beneficial and harmful ways. Learn how data can pose a threat to our privacy and security, and the ways that encryption and other techniques are used to complete it. Throughout the unit participate in a \"school of the future\" conference in which you and a team make a proposal for how best to improve school life with computing innovations.\r\n\r\n"
          name: csp10-2020
        csp-march-virtual:
          title: CS Principles 20-21 Curriculum Training for Facilitators
          description_audience: CS Principles Facilitators
          description_short: ''
          description: Welcome to the CSP Facilitator Pre-work for the April call! This will be focused on deepening the understanding of EIPM, content in Unit 5, and the new datasets available in the course. This work is essential to completing before the April call since we will be processing and discussing the work together in the call.
          lesson_groups: {}
          student_description: Welcome to the CSP Facilitator Pre-work for the April call! This will be focused on deepening the understanding of EIPM, content in Unit 5, and the new datasets available in the course. This work is essential to completing before the April call since we will be processing and discussing the work together in the call.
        csp3-virtual:
          title: Self Paced Introduction to Turtle Programming In App Lab
          description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          description_short: Learn the basics of programming in JavaScript through a top-down design approach using classic turtle drawing.
          description_audience: ''
          lesson_groups:
            csp3_1_2018:
              display_name: 'Unit 3: Intro to Programming'
          student_description: This unit introduces the foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This course uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
        jess-test-script:
          title: Jess's Script
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
          name: jess-test-script
        csd2-virtual:
          title: Self Paced Introduction to Web Lab
          description: You’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging and commenting.  By the end of the unit, you’ll have a personal website that you can publish to the Internet.
          description_short: Learn to build your own web site in Web Lab.
          description_audience: ''
          lesson_groups:
            csd2_1:
              display_name: 'Chapter 1: Web Content and HTML'
            csd2_2:
              display_name: 'Chapter 2: Styling and CSS'
          student_description: You’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging and commenting.  By the end of the unit, you’ll have a personal website that you can publish to the Internet.
        csp5-virtual:
          title: Event-Driven Programming in App Lab
          description: This self-paced module introduces foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This unit uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          description_short: Learn foundational concepts of computer programming in JavaScript by making rich, interactive apps.
          description_audience: ''
          lesson_groups: {}
          student_description: This self-paced module introduces foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This unit uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          lessons: {}
          name: csp5-virtual
        virtual-holding-place:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups:
            content:
              display_name: Content
            csd3_2:
              display_name: 'Chapter 2: Building Games'
          student_description: ''
        code-break:
          title: Code Break
          description_audience: ''
          description_short: ''
          description: 'With schools closed and tens of millions of students at home, Code.org is launching Code Break — a live weekly interactive classroom where our team will teach your children at home while school is closed, and a weekly challenge to engage students of all abilities, even those without computers. More info at Code.org/break. Ages 13+. '
          lesson_groups: {}
          student_description: 'With schools closed and tens of millions of students at home, Code.org is launching Code Break — a live weekly interactive classroom where our team will teach your children at home while school is closed, and a weekly challenge to engage students of all abilities, even those without computers. More info at Code.org/break. Ages 13+. '
          lessons: {}
          name: code-break
        code-break-staging:
          title: Code Break Staging
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        code-break-younger-staging:
          title: Code Break Younger Staging
          description_audience: ''
          description_short: ''
          description: ''
          lesson_groups: {}
          student_description: ''
        code-break-younger:
          title: Code Break for Younger Students
          description_audience: ''
          description_short: ''
          description: 'With schools closed and tens of millions of students at home, Code.org is launching Code Break — a live weekly interactive classroom where our team will teach your children at home while school is closed, and a weekly challenge to engage students of all abilities, even those without computers. More info at Code.org/break. Ages 6-12. '
          lesson_groups: {}
          student_description: 'With schools closed and tens of millions of students at home, Code.org is launching Code Break — a live weekly interactive classroom where our team will teach your children at home while school is closed, and a weekly challenge to engage students of all abilities, even those without computers. More info at Code.org/break. Ages 6-12. '
          lessons: {}
          name: code-break-younger
        no-lg:
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        csp5-virtual-part2:
          title: Self Paced Introduction to App Lab
          description_audience: ''
          description_short: Learn foundational concepts of computer programming in JavaScript by making rich, interactive apps.
          description: This unit introduces foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This uni uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
          lesson_groups:
            csp5_1:
              display_name: 'Chapter 1: Event-Driven Programming'
            csp5_2:
              display_name: 'Chapter 2: Programming with Data Structures'
          student_description: This unit introduces foundational concepts of computer programming, which unlocks the ability to make rich, interactive apps. This uni uses JavaScript as the programming language, and App Lab as the programming environment to build apps, but the concepts learned in these lessons span all programming languages and tools.
        gamelabprojects:
          lesson_groups: {}
        k5-onlinepd-2020:
          title: Teaching Computer Science Fundamentals (2020)
          description: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course!
          description_short: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course.
          description_audience: ''
          lesson_groups:
            k5_getting_started_1:
              display_name: Getting Started
            k5_basic_concepts_1:
              display_name: Basic Coding Concepts and Teaching Practices
            k5_diving_deeper_1:
              display_name: 'Diving Deeper: Courses E and F'
            k5_next_steps_1:
              display_name: Next Steps
          student_description: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course!
          name: k5-onlinepd-2020
        dani-test-2020:
          lesson_groups:
            lesson group:
              display_name: display name
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        dani-june-2020-test:
          lesson_groups:
            lesson group:
              display_name: display name
            lg_1:
              display_name: DISPLAYNAME
            cspSurvey:
              display_name: Survey
            csp5_1:
              display_name: 'Chapter 1: Event-Driven Programming'
            cs_lg:
              display_name: LG GOOD
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csd3-virtual:
          title: Self Paced Introduction to Game Lab
          description: You’ll program animations, interactive art, and games in Game Lab. Start off with simple shapes and build up to more sophisticated sprite-based animations and games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program.
          description_short: " Learn to program animations, interactive art, and games in Game Lab."
          description_audience: ''
          lesson_groups:
            csd3_1:
              display_name: Content
            csd3_2:
              display_name: Content
            cspSurvey:
              display_name: Content
          student_description: You’ll program animations, interactive art, and games in Game Lab. Start off with simple shapes and build up to more sophisticated sprite-based animations and games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program.
          lessons: {}
          name: csd3-virtual
        ui-test-script-in-course-2017:
          lesson_groups:
            lg_1:
              display_name: Content
        ui-test-script-in-course-2019:
          lesson_groups:
            lg_1:
              display_name: Content
        ui-test-versioned-script-2017:
          lesson_groups:
            lg_1:
              display_name: Content
        ui-test-versioned-script-2019:
          lesson_groups:
            lg_1:
              display_name: Content
        kaitie-test-script:
          lesson_groups:
            lesson group:
              display_name: display name
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          name: kaitie-test-script
        vpl-csd-2020:
          lesson_groups: {}
          title: CS Discoveries Virtual Professional Learning 2020 - 21
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          name: vpl-csd-2020
        vpl-csp-2020:
          lesson_groups: {}
          title: CS Principles Virtual Professional Learning
          description_audience: ''
          description_short: ''
          description: ''
          name: vpl-csp-2020
          student_description: ''
        curriculum-sandbox-levels:
          lesson_groups:
            lesson group:
              display_name: Teacher Levels
              description: These are teaching-facing levels that are linked to lesson plans. The levels do not appear in other scripts.
            slides:
              display_name: Translator Levels
              description: These levels contain editable start code that aligns to curriculum slide decks.
            video:
              display_name: Video Capture Levels
              description: These levels are for use by video creators.
          title: Curriculum Sandbox Levels
          description_audience: 'Internal - Do not delete. This script houses important curriculum levels that would otherwise not have a script. '
          description_short: 'Levels that are linked directly in lesson plans but do not appear in other scripts. '
          description: ''
          student_description: ''
          name: curriculum-sandbox-levels
        virustest:
          lesson_groups:
            csf_data:
              display_name: Virus Simulation for Code Bytes
          title: Simulating an Outbreak
          description_audience: ''
          description_short: 'Use Sprite Lab to create a simulation out of a virus outbreak. '
          description: ''
          student_description: ''
        ml-playground:
          lesson_groups: {}
          title: ML/AI Unit - CSD
          description_audience: ''
          description_short: ML/AI Unit
          description: Brainstorm / Playground area for ML/AI Unit Development for CSD. For future questions about this, ask Dan Schneider.
          name: ml-playground
          student_description: Brainstorm / Playground area for ML/AI Unit Development for CSD. For future questions about this, ask Dan Schneider.
        outbreak:
          lesson_groups:
            outbreak:
              display_name: Outbreak Simulation
          title: Outbreak Simulator
          description_audience: ''
          description_short: 'Use Sprite Lab to program a simulation out of a virus outbreak. '
          description: 'Use Sprite Lab to program a simulation out of a virus outbreak. '
          name: outbreak
          student_description: 'Use Sprite Lab to program a simulation out of a virus outbreak. '
          lessons: {}
        apps-for-good:
          lesson_groups: {}
          title: Apps for Good
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        2021drafting:
          lesson_groups:
            Toolbox Levels:
              display_name: Toolbox Levels
            introduction:
              display_name: Introduction
              description: Explore projects created with Sprite Lab. Learn the basics of coding with sprites and events!
            lessonGroup-3:
              display_name: Variables
              description: Store values in variables and retrieve them later in your program. Modify the values stored in variables to create exciting interactive projects!
            outbreak:
              display_name: Outbreak Simulator
            Loom Levels:
              display_name: Loom Levels
            contagion:
              display_name: Contagion
            lesson group:
              display_name: Contagion-Guided-Practice
            haiku bot:
              display_name: Haiku Bot
            AB EOC:
              display_name: Course A and B EOC Project
            debugging:
              display_name: Debugging
            Argentina:
              display_name: Argentina
          title: Planning script for CI and CSF 2021
          description_audience: Internal
          description_short: Internal
          name: 2021drafting
          description: ''
          student_description: ''
        csd1-2021:
          title: Problem Solving and Computing ('21-'22)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n**Implementation Guidance for Unit 1**\n- Unit 1 Chapter 1 should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in Unit 1, depending on your classroom context\n- You can view the full [Curriculum Guide](https://docs.google.com/document/d/1myJwrDyRlAjwVNDS3gs-3JaJNhogsGMt9Swo-bpySgE/preview) and [Implementation Guide](https://docs.google.com/document/d/1u-eIlB2cAwMuSckzbMWkteQIcsXgez7FTrbjP8PBB4o/preview) for more information about this unit\n"
          description_short: "  Learn how humans work with computers to solve problems."
          description_audience: ''
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csd1_1:
              display_name: 'Chapter 1: The Problem Solving Process'
              big_questions: "* What strategies and processes can I use to become a more effective problem solver?"
              description: This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.
            csd1_2:
              display_name: 'Chapter 2: Computers and Problem Solving'
              big_questions: |-
                * How do computers help people to solve problems?
                * How do people and computers approach problems differently?
                * What does a computer need from people in order to solve problems effectively?
              description: This chapter presents computers as machines that solve information problems. Students begin by building a common definition for a computer that focuses on functionality instead of specific hardware. They then explore the ways that computers approach problems. For their final project, students propose an app that could be used to solve a problem of their choosing.
            csd1_3:
              display_name: Alternate Lessons
              description: 'This chapter provides alternate lessons for this unit.  '
          name: csd1-2021
          student_description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
          lessons: {}
        csd2-2021:
          title: Web Development ('21-'22)
          description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.   \n\n**Implementation Guidance for Unit 2**\n- Complete Unit 1 Chapter 1 before starting this unit\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Debugging Guide](https://docs.google.com/document/d/1-mXz53CAQ1dy3-RVGkoUnR0hfAwdWeza4kch6NAvLb8/preview) and [Differentiation Guide](https://docs.google.com/document/d/15Y6Mo3fMUtHq16SSskABgcYE-5xfk-Ewv0z_o4uaLdI/preview)\n- You can view the full [Curriculum Guide](https://docs.google.com/document/d/1myJwrDyRlAjwVNDS3gs-3JaJNhogsGMt9Swo-bpySgE/preview) and [Implementation Guide](https://docs.google.com/document/d/1u-eIlB2cAwMuSckzbMWkteQIcsXgez7FTrbjP8PBB4o/preview) for more information about this unit"
          description_short: "  Learn to build your own web site in Web Lab."
          description_audience: ''
          lesson_groups:
            csd2_1v2:
              display_name: 'Chapter 1: Creating Webpages'
              big_questions: |-
                * Why do people create websites?
                * How can text communicate content, structure, and style on a web page?
                * How do I safely and appropriately make use of the content published on the Internet?
                * What strategies can I use when coding to find and fix issues?
              description: Students use computing as a form of self expression as they design and develop basic web pages.   Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page. They also explore the privacy and intellectual property implications of publishing their work online.
            csd2_2v2:
              display_name: 'Chapter 2: Multi-page Websites'
              big_questions: |-
                * How can websites be used to address problems in the world?
                * What strategies can teams use to work better together?
                * How do I know what information can be trusted online?
              description: Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.
            cspSurvey:
              display_name: Survey
          name: csd2-2021
          student_description: " In Unit 2, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
          lessons: {}
        csd3-2021:
          title: Interactive Animations and Games ('21-'22)
          description: |2-
             In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program.

            **Implementation Guidance for Unit 3**
            - Complete Unit 1 Chapter 1 before starting this unit
            - Chapter 1 of this unit is a pre-requisite for Unit 6
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Debugging Guide](https://docs.google.com/document/d/1-mXz53CAQ1dy3-RVGkoUnR0hfAwdWeza4kch6NAvLb8/preview) and [Differentiation Guide](https://docs.google.com/document/d/15Y6Mo3fMUtHq16SSskABgcYE-5xfk-Ewv0z_o4uaLdI/preview)
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1myJwrDyRlAjwVNDS3gs-3JaJNhogsGMt9Swo-bpySgE/preview) and [Implementation Guide](https://docs.google.com/document/d/1u-eIlB2cAwMuSckzbMWkteQIcsXgez7FTrbjP8PBB4o/preview) for more information about this unit
          description_short: " Learn to program animations, interactive art, and games in Game Lab."
          description_audience: ''
          lesson_groups:
            csd3_1:
              display_name: 'Chapter 1: Images and Animations'
              big_questions: |
                * What is a computer program?
                * What are the core features of most programming languages?
                * How does programming enable creativity and individual expression?
                * What practices and strategies will help me as I write programs?
              description: Students build up toward programming interactive animations in the Game Lab environment.  They begin with simple shapes and sprite objects, then use loops to create flipbook style animations.  Next, they learn to use booleans and conditionals to respond to user input.  At the end of the chapter, students design and create an interactive animation that they can share with the world.
            csd3_2:
              display_name: 'Chapter 2: Building Games'
              big_questions: |-
                * How do software developers manage complexity and scale?
                * How can programs be organized so that common problems only need to be solved once?
                * How can I build on previous solutions to create even more complex behavior?
              description: In this chapter students combine the constructs that they learned in the first chapter to program more complex movement and collisions in their sprites.  As they create more complex programs, they begin to use functions to organize their code.  In the end, students use a design process to create an original game.
            cspSurvey:
              display_name: Survey
          name: csd3-2021
          student_description: " In Unit 3, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          lessons: {}
        csd4-2021:
          title: The Design Process ('21-'22)
          description: |-
            Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.

            **Implementation Guidance for Unit 4**
            - Complete Unit 1 Chapter 1 before starting this unit
            - This unit is a pre-requisite for Unit 6 and Unit 7
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1myJwrDyRlAjwVNDS3gs-3JaJNhogsGMt9Swo-bpySgE/preview) and [Implementation Guide](https://docs.google.com/document/d/1u-eIlB2cAwMuSckzbMWkteQIcsXgez7FTrbjP8PBB4o/preview) for more information about this unit
          description_short: "  Learn how to design a program that meets the needs of your users."
          description_audience: ''
          lesson_groups:
            csd4_1:
              display_name: 'Chapter 1: User Centered Design'
              big_questions: |-
                * How do designers identify the needs of their user?
                * How can we ensure that a user's needs are met by our designs?
                * What processes will best allow us to efficiently create, test, and iterate upon our designs?
              description: This chapter introduces the design process as a specific version of the problem solving process in which empathy for a user's needs is consistently integrated. Students learn strategies for identifying user needs and assessing how well different designs address them. In particular they learn how to develop a paper prototype, how to gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps.
            csd4_2:
              display_name: 'Chapter 2: App Prototyping'
              big_questions: |-
                * How do teams effectively work together to develop software?
                * What roles beyond programming are necessary to design and develop software?
                * How do designers incorporate feedback into multiple iterations of a product?
              description: This chapter is focused on a long running group project that allows students to apply all they've learned about User-Centered Design to develop an app prototype.  Working in teams, students identify a social issue that they care about and design and prototype an app to address that issue.  This is an opportunity for students to explore other roles in software development, such as product management, marketing, design, and testing.
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
            cspSurvey:
              display_name: Survey
          name: csd4-2021
          student_description: Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          lessons: {}
        csd5-2021:
          title: Data and Society ('21-'22)
          description: |-
            Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.

            **Implementation Guidance for Unit 5**
            - Complete Unit 1 Chapter 1 before starting this unit
            - This unit could be swapped out with Unit 7 - see the [Implementation Guide](https://docs.google.com/document/d/1u-eIlB2cAwMuSckzbMWkteQIcsXgez7FTrbjP8PBB4o/preview) for more information on this option
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1myJwrDyRlAjwVNDS3gs-3JaJNhogsGMt9Swo-bpySgE/preview) for more information about this unit
          description_short: Learn how people use computers to solve data problems.
          description_audience: ''
          lesson_groups:
            csd5_1:
              display_name: 'Chapter 1: Representing Information'
              big_questions: |
                * Why is representation important in problem solving?
                * What features does a representation system need to be useful?
                * What is necessary to create usable binary representation systems?
                * How can we combine systems together to get more complex information?
              description: This chapter focuses on data representation and its role in solving information problems.  Students learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.  For the chapter project, students represent their perfect day in a binary punch card and trade with classmates to decipher.
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
              big_questions: |-
                * How does data help us to solve problems?
                * How do computers and humans use data differently?
                * What parts of the data problem solving process can be automated?
                * What kinds of problems do computers use data to solve in the real world?
              description: Students explore how data can be used to answer interesting questions and solve problems.  Using a modified version of the general Problem Solving Process, students look at how computers and humans use data differently and the pros and cons of automating problem solving.  After learning ways that computers use data in the real world, students choose their own problem and use data to address it.
            cspSurvey:
              display_name: Survey
          name: csd5-2021
          student_description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          lessons: {}
        csd6-2021:
          title: Physical Computing ('21-'22)
          description: |-
            Unit 6 explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.

            **Implementation Guidance for Unit 6**
            - Complete Unit 1 Chapter 1 before starting this unit
            - This unit assumes students have completed Unit 3 Chapter 1 and all of Unit 4. Students without this background may struggle in this unit.
            - This unit requires students to have access to Circuit Playground's - [click here](https://code.org/circuitplayground) for more information about using Circuit Playground's in your classroom
            - This unit could be swapped out with Unit 7 - see the [Implementation Guide](https://docs.google.com/document/d/1u-eIlB2cAwMuSckzbMWkteQIcsXgez7FTrbjP8PBB4o/preview) for more information on this option
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Debugging Guide](https://docs.google.com/document/d/1-mXz53CAQ1dy3-RVGkoUnR0hfAwdWeza4kch6NAvLb8/preview) and [Differentiation Guide](https://docs.google.com/document/d/15Y6Mo3fMUtHq16SSskABgcYE-5xfk-Ewv0z_o4uaLdI/preview)
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1myJwrDyRlAjwVNDS3gs-3JaJNhogsGMt9Swo-bpySgE/preview) for more information about this unit
          description_short: Learn to program with physical devices.
          description_audience: ''
          lesson_groups:
            csd6_1:
              display_name: 'Chapter 1: Programming with Hardware'
              big_questions: |-
                * How does software interact with hardware?
                * How can computers sense and respond to their environment?
                * What kind of information can be communicated with simple hardware outputs?
              description: This unit begins with an activity that encourages students to explore a wide variety of non-traditional computing platforms, before kicking off a review of programming in App Lab, with a particular focus on better understanding the event-driven programming model that was first introduced in Unit 4. Students learn techniques to make the apps they write more flexible by modifying design elements through code instead of always relying on design mode. Using the Circuit Playground, they then explore different approaches to taking input and producing output using hardware. By the end of this chapter, students will design a develop a game that uses physical hardware for input and output.
            csd6_2:
              display_name: 'Chapter 2: Building Physical Prototypes'
              big_questions: |-
                * How do programmers work with larger amounts of similar values?
                * How can complex real-world information be represented in code?
                * How can simple hardware be used to develop innovative new products?
              description: With an understanding of how to use hardware to take input and produce output, students move to thinking about more complex programs that integrate hardware and software. Using the color LEDs as an example of a a group of like objects, students learn how to use arrays to keep track of lists of values. From there we introduce the for loop, first simply as a way to repeat a block of code, and then as a way to run code on each element of an array. By the end of this chapter students will have explored all components of their boards while learning to structure their code using arrays, loops, and parametric functions. In the final two lessons students have an opportunity to dig into building physical prototypes using their boards.
            cspSurvey:
              display_name: Survey
          name: csd6-2021
          student_description: Unit 6 explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          lessons: {}
        csp1-2021:
          title: Digital Information ('21-'22)
          description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers. Learn how complex information like numbers, text, images, and sound are represented in text, how compression works, and the broader social impacts of digitizing the world's information.
          description_short: Explore the challenges and impacts of representing information about the world around you in bits.
          description_audience: ''
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csp_unit1_2020:
              display_name: 'Unit 1: Digital Information'
              description: |-
                ### Unit Philosophy and Pedagogy


                * **Establishing a Strong Classroom Culture:** This unit is designed to be hands-on, collaborative, and exploratory. A major focus of the unit is building a positive classroom culture in which students work together, explore problems, and communicate about their thinking. Most lessons either feature physical manipulatives or a digital widget, and the bulk of lesson time should be spent with students exploring these tools together to develop an understanding of the concepts they highlight. The course intentionally does not start with programming since, in many classrooms, some students have experience with programming and others do not. Choosing to begin with digital information and the internet lets you build community in the room while exploring a topic that is likely to be accessible to all students. The supportive and inclusive classroom environment built in this unit should help set a positive tone that can be carried through the school year.


                * **Empowering "Deciders":**  An important goal of the course is not merely to teach students technical knowledge, but to put those skills to work in meaningful ways. This unit builds towards the unit project, which provides an opportunity for students to be "deciders" about the impacts of computing on modern life. Other units will emphasize empowering units as "creators."

                ### Major Assessment and Projects

                The unit project asks students to consider and debate issues that arise in modern society due to the digitizing of information. Students will analyze an article that addresses the intersection of digitizing information and current events. They will evaluate what data is being digitized and evaluate the benefits and harms caused by making this information digital. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.

                ### AP Connections

                This unit and its associated project help build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the "Standards" page for this unit.

                * DAT-1: The way a computer represents data internally is different from the way the data is interpreted and displayed for the user. Programs are used to translate data into a representation more easily understood by people.
                * IOC-1: while computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences

                This unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1dqYF5u0AULjw049gaCwAP34ZSe0VuEWbAjWoH1-YMW0/edit?usp=sharing).

                * 2.1 Binary Numbers
                * 2.2 Data Compression
                * 5.5 Legal and Ethical Concerns.
          name: csp1-2021
          student_description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers. Learn how complex information like numbers, text, images, and sound are represented in text, how compression works, and the broader social impacts of digitizing the world's information.
        csp2-2021:
          title: The Internet ('21-'22)
          description: This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.
          description_short: Build the internet from the ground up using the Internet Simulator.
          description_audience: ''
          lesson_groups:
            csp_unit2_2020:
              display_name: 'Unit 2: The Internet'
              description: "### Unit Philosophy and Pedagogy\n\n* **Inventing the Internet with the Internet Simulator:** This unit features many different versions of the Internet Simulator, a digital widget that simulates how different features or \"layers\" of the Internet work. As students move from lesson to lesson, the version of the Internet Simulator they use will have slightly more functionality than the last. Lessons will present students with challenges that closely mimic those that the internet's original inventors needed to solve. Students will collaboratively design and test solutions to those problems to develop an intuitive understanding of how the internet works and why it was designed that way. By the end of the unit, students will have \"invented the internet\" themselves! \n\n* **Continuing to Establish a Strong Classroom Culture:** Much like the Digital Information unit that comes before it, this unit emphasizes collaborative problem solving and developing a supportive and inclusive classroom culture. \n\n### Major Assessment and Projects\n\nThe unit project asks students to design a policy position for an imaginary political candidate related to an \"Internet Dilemma.\" Students must analyze news stories about their topic to identify impacted groups, explain those groups' interests, explain technical background about the dilemma, and then recommend a policy solution that the candidate should advocate for. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n### AP Connections\n\nThis unit and its associated project help build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CSN-1: that computer systems and networks facilitate how data are transferred\n* IOC-1: and that while computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1dqYF5u0AULjw049gaCwAP34ZSe0VuEWbAjWoH1-YMW0/edit?usp=sharing).\n\n* 4.1 The Internet\n* 4.2 Fault Tolerance\n* 5.2 Digital Divide"
            lessonGroup-2:
              display_name: Survey
              big_questions: Big question
              description: helllo
          name: csp2-2021
          student_description: This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.
        csp3-2021:
          title: Intro to App Design ('21-'22)
          description: This unit is an introduction to programming and app design with a heavy focus on important skills like debugging, pair programming, and user testing. Learn how to design user interfaces and write event-driven programs in App Lab and then design a project that teaches your classmates about a topic of your choosing.
          description_short: Design your first app and learn how programmers collaborate and interact with users to build the best possible solutions to problems.
          description_audience: ''
          lesson_groups:
            csp_unit3_2020:
              display_name: 'Unit 3: Intro to App Design'
              description: "### Unit Philosophy and Pedagogy\n\n\n* **New Topics, Same Classroom Culture:** This unit is students' first experience with programming. It is designed to maintain the collaborative and inclusive classroom environment developed in the previous two units. The collaborative project, fun, unplugged activities, and the focus on experimenting should help keep your whole class working together and trying out ideas. \n\n* **Emphasizing Skills:** Since this is the first of many programming units, it emphasizes attitudes and skills that will serve your students well for the remainder of the year. The project that runs through this unit emphasizes that programming is a creative and collaborative endeavor that students can use to help others. Key practices like pair programming and debugging help normalize working with a partner, asking for help, and making mistakes. While students have a lot to learn about programming and App Lab, there is just as much emphasis on establishing these positive habits and mindsets. \n\n* **Empowering \"Creators\":** This unit empowers students to be creators with a major emphasis on making personally meaningful apps. Students have a lot to learn about programming. Still, the goal is for students to come away from this unit, seeing programming as a powerful form of personal expression that allows them to draw on their innate talents and interests to help solve problems in their community.\n\n### Major Assessment and Projects\n\nThe unit project asks students to collaborate with a classmate to design an app that can teach others about a topic of shared interest. Students practice interviewing classmates to identify the project's goals, mockup designs, collaboratively program the app and run simple user tests. The app itself must include at least three screens and demonstrate what students have learned about user interface design and event-driven programming. Students submit their app, project guide, and written responses to reflection questions about how the app is designed and the development process used to make it. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n### AP Connections\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CRD-1: incorporating multiple perspectives through collaboration improves computing innovations as they are developed.\n* CRD-2: developers create and innovate using an iterative design process that is user-focused, that incorporates implementation/feedback cycles, and that leaves ample room for experimentation and risk-taking.\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that can be reused. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and with more confidence.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1dqYF5u0AULjw049gaCwAP34ZSe0VuEWbAjWoH1-YMW0/edit?usp=sharing).\n\n* 1.1 Collaboration\n* 1.2 Program Function and Purpose\n* 1.3 Program Design and Development\n\nThe College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.\n\n* 3.a.i.\n* 3.a.ii.\n* 3.a.iii\n"
          name: csp3-2021
          student_description: This unit is an introduction to programming and app design with a heavy focus on important skills like debugging, pair programming, and user testing. Learn how to design user interfaces and write event-driven programs in App Lab and then design a project that teaches your classmates about a topic of your choosing.
        csp4-2021:
          title: Variables, Conditionals, and Functions ('21-'22)
          description: This unit explores how variables, conditionals, and functions allow for the design of increasingly complex apps. Learn how to program with these three new concepts through a sequence of collaborative activities. Then build your own decision maker app to share with friends and help them make a decision.
          description_short: Learn how to build apps that store information, make decisions, and keep code organized.
          description_audience: ''
          lesson_groups:
            csp_variables:
              display_name: Variables
              description: |-
                ### Unit Philosophy and Pedagogy


                * **Intro to EIPM:** This unit is students' first experience with the Explore, Investigate, Practice, Make lesson sequence, or EIPM. This structured approach to teaching programming is covered in detail in the curriculum guide. We highly recommend watching the [accompanying video series](https://www.youtube.com/playlist?list=PLzdnOPI1iJNeqEl6MN7c2KyM3gdBSo8t3) to better understand what EIPM should look like in the classroom. When used effectively, it supports deep learning of content and helps maintain a collaborative classroom culture, even as you move into more complex programming concepts.

                * **Scaffolding Towards Independent Projects:** A major goal of this course is to empower students to design and build projects independently. The Create PT in Unit 8 offers students enormous freedom to scope and build projects, and even this unit begins scaffolding towards that goal. Individual EIPM sequences of lessons gradually prepare students for scoped, independent Make projects. The unit project has a few requirements, but students are largely free to choose the design, topic, and implementation of their ideas. As you teach the unit, look for the opportunities to scaffold the skills and knowledge students will need to creatively and independently tackle the unit project.


                ### Major Assessment and Projects

                The unit project asks students to design an app that makes a recommendation based on information from user input. Students are given a great deal of freedom to choose their topic, design their user interface, and decide how to actually program their app's behavior. Students submit their app, project guide, and written responses to reflection questions about how the app is designed and the development process they used to make it. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.

                ### AP Connections

                This unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the "Standards" page for this unit.

                * CRD-2: Developers create and innovate using an iterative design process that is user-focused, that incorporates implementation/feedback cycles, and that leaves ample room for experimentation and risk-taking.
                * AAP-1: To find specific solutions to generalizable problems, programmers represent and organize data in multiple ways.
                * AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.
                * AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that can be reused. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and with more confidence.

                This unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1dqYF5u0AULjw049gaCwAP34ZSe0VuEWbAjWoH1-YMW0/edit?usp=sharing).

                * 1.4 Identifying and Correcting Errors
                * 3.1 Variables and Assignment
                * 3.3 Mathematical Expressions
                * 3.5 Boolean Expressions
                * 3.6 Conditionals
                * 3.7 Nested Conditionals
                * 3.15 Random Values

                The College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.

                * 3.a.i.
                * 3.a.ii.
                * 3.a.iii
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          name: csp4-2021
          student_description: This unit explores how variables, conditionals, and functions allow for the design of increasingly complex apps. Learn how to program with these three new concepts through a sequence of collaborative activities. Then build your own decision maker app to share with friends and help them make a decision.
        csp5-2021:
          title: Lists, Loops, and Traversals ('21-'22)
          description: This unit introduces lists, loops, and traversals, and explores the way they can be used to build apps that store and process large amounts of information. Learn to program with the data library in App Lab and complete a 5-day hackathon project at the end of the unit where you can design a program about any topic of your choosing.
          description_short: Learn how to build apps that use lists, loops, and traversals to store and process large amounts of information.
          description_audience: ''
          lesson_groups:
            csp_lists:
              display_name: Lists
              description: |-
                ### Unit Philosophy and Pedagogy

                * **Independent Creation and The Hackathon Project:** Much like the project in Unit 4, the "Hackathon" project in this unit is designed as an opportunity for students to creatively and independently build something with their programming skills. While students are asked to include some technical requirements in their program to ensure they demonstrate mastery of new programming concepts, they have free rein to choose the goals, design, and implementation of their project. To avoid asking students to complete a major programming project right before the Create PT, this hackathon is the most "Create-PT-like" project of the course. It is the best chance for students to practice skills like budgeting time or scoping an open-ended project. In many classrooms, if you maintain the recommended pacing of the course, this project serves as an excellent end to the first semester.

                * **Growing Comfort with EIPM:** By Unit 5, students (and teachers!) should be developing greater comfort with the flow of EIPM lessons. Students may begin to anticipate that sequences build towards an independent Make lesson or look forward to stepping away from computers to Explore. A nice feature of EIPM is that you will find strategies and modifications to each lesson type that work best for your students. Keep an eye out for how you and your students are developing comfort with EIPM and note strategies that help meet your classroom's needs.

                * **Programming with Real-world Data:** The Data Library is a new feature in App Lab for the 2020-21 school year and was designed to let students program with data from the real world. This tool aims to motivate students to build new kinds of data-powered apps that they find personally interesting. This tool also facilitates programming with lists of information since students will need to manipulate lists of data to incorporate the different data sources. Encourage students to use datasets they find personally relevant as they draw on their creative ideas for bringing data to life.



                ### Major Assessment and Projects

                The unit project asks students to spend five days as part of a "Hackathon" project that they have nearly complete independence to scope and design. Students must choose one dataset from the Data Library in AppLab to be a component of their project to demonstrate what they have learned about lists and list processing; otherwise, scoping the project is completely up to them. Students submit their app, project guide, and written responses to reflection questions about how the app is designed and the development process they used to make it. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.

                ### AP Connections

                This unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the "Standards" page for this unit.

                * CRD-2: Developers create and innovate using an iterative design process that is user-focused, incorporating implementation/feedback cycles, which leaves ample room for experimentation and risk-taking.
                * AAP-1: To find specific solutions to generalizable problems, programmers represent and organize data in multiple ways.
                * AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.
                * AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that they can reuse. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and more confidently.

                This unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1dqYF5u0AULjw049gaCwAP34ZSe0VuEWbAjWoH1-YMW0/edit?usp=sharing).

                * 3.2 Data Abstraction
                * 3.4 Strings
                * 3.8 Iteration
                * 3.10 Lists
                * 3.16 Simulations

                The College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.

                * 3.b.i
                * 3.b.ii
                * 3.b.iii
                * 3.b.iv
                * 3.b.v
            csp_loops:
              display_name: Loops
            csp_traversals:
              display_name: Traversals
            csp_project:
              display_name: Project
            lessonGroup-5:
              display_name: Post-Course Survey
          name: csp5-2021
          student_description: This unit introduces lists, loops, and traversals, and explores the way they can be used to build apps that store and process large amounts of information. Learn to program with the data library in App Lab and complete a 5-day hackathon project at the end of the unit where you can design a program about any topic of your choosing.
        csp6-2021:
          title: Algorithms ('21-'22)
          description: This unit is a quick exploration of how computer scientists design algorithms to solve problems and how they analyze the speed of different algorithms. Learn about the concept of algorithmic efficiency through a variety of hands-on activities and learn how it's being applied in modern computing.
          description_short: Design and analyze algorithms to understand how they work and why some are considered better than others.
          description_audience: ''
          lesson_groups:
            csp_unit6_2020:
              display_name: Algorithms
              description: |-
                ### Unit Philosophy and Pedagogy


                * **A Break from Programming:** This unit is intentionally designed as a short respite from programming. After three units and a major hackathon project, it is a great opportunity to get away from screens for a while before the final programming push that leads to the Create PT.

                * **Just Enough Math:** This unit includes some mathematical concepts which enrich students' understanding of how algorithms are analyzed, which might at first be a little intimidating to some students (and teachers!). The mathematical topics included in this unit are only those necessary to provide a solid foundation in algorithmic analysis to the depth described in the CS Principles framework. If you are a teacher with a strong mathematical background, check carefully that you do not needlessly add complexity to a unit that might already prove challenging for some students. All teachers should keep an eye out for the ways visuals, hands-on examples, and patterns in presentation style are used to ensure a consistent presentation of these mathematical topics.


                ### Major Assessment and Projects

                This unit does not conclude with a major project. Students will complete an end-of-unit assessment that is aligned with CS Principles framework objectives covered in this unit.

                ### AP Connections

                This unit helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the "Standards" page for this unit.

                * AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.
                * AAP-4: There exist problems that computers cannot solve, and even when a computer can solve a problem, it may not be able to do so in a reasonable amount of time.
                * CSN-2: Parallel and distributed computing leverage multiple computers to more quickly solve complex problems or process large data sets.

                This unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1dqYF5u0AULjw049gaCwAP34ZSe0VuEWbAjWoH1-YMW0/edit?usp=sharing).

                * 3.9 Developing Algorithms
                * 3.11 Binary Search
                * 3.17 Algorithmic Efficiency
                * 3.18 Undecidable Problems
                * 4.3 Parallel and Distributed Computing
            lessonGroup-2:
              display_name: Post-Course Survey
          name: csp6-2021
          student_description: This unit is a quick exploration of how computer scientists design algorithms to solve problems and how they analyze the speed of different algorithms. Learn about the concept of algorithmic efficiency through a variety of hands-on activities and learn how it's being applied in modern computing.
        csp7-2021:
          title: Parameters, Return, and Libraries ('21-'22)
          description: This unit introduces parameters, return, and libraries. Learn how to use these concepts to build new kinds of apps as well as libraries of code that you can share with your classmates. End the unit by designing a library of functions around any topic of your choosing.
          description_short: Learn how to design clean and reusable code that you can share with a single classmate or the entire world.
          description_audience: ''
          lesson_groups:
            csp_parameters_return_values:
              display_name: Parameters and Return Values
              description: "### Unit Philosophy and Pedagogy\n\n* **Learning by Building Libraries:** In the second EIPM sequence of this unit, students learn to use the Student-Create Libraries tool in App Lab. This tool allows them to build and share libraries of functions that they can use in many different projects. This tool serves many purposes besides simply teaching students about libraries. By having to write functions that other students find useful, they will need to think about common patterns or situations that they have seen in projects across the course. Students will also practice commenting their code so others can understand how it works, practice designing functions that use parameters and return.  \n\n* **Final Preparation for the Create PT:** Students learn very few new concepts in this unit; nevertheless, it can be challenging because students need to learn how to integrate the ideas of parameters and return with every other concept they have learned in this course. This unit presents a good opportunity to do a final review of every programming construct covered in the course as students prepare to demonstrate what they've learned on the Create PT.\n\n### Major Assessment and Projects\n\nThe unit project asks students to design a library of functions that they can share with classmates. Their library must contain at least two functions, and at least one of those functions must include a parameter, return, a loop, and an if-statement. This requirement ensures students practice skills they willll use in the Create PT. Using a project guide, students choose a theme for their library, build it, test it, and exchange feedback with other students. Students submit their library code, project guide, and written responses to reflection questions about how the app is designed and the development process they used to make it. They will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n### AP Connections\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CRD-2: Developers create and innovate using an iterative design process that is user-focused, that incorporates implementation/feedback cycles, and that leaves ample room for experimentation and risk-taking.\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that can be reused. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and with more confidence.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1dqYF5u0AULjw049gaCwAP34ZSe0VuEWbAjWoH1-YMW0/edit?usp=sharing).\n\n* 3.12 Calling Procedures\n* 3.13 Developing Procedures\n* 3.14 Libraries\n\nThe College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.\n\n* 3.c.i\n* 3.c.ii\n* 3.c.iii\n* 3.c.iv\n* 3.d.i\n* 3.d.ii\n* 3.d.iii"
            csp_libraries:
              display_name: Libraries
            lessonGroup-3:
              display_name: Survey
          name: csp7-2021
          student_description: This unit introduces parameters, return, and libraries. Learn how to use these concepts to build new kinds of apps as well as libraries of code that you can share with your classmates. End the unit by designing a library of functions around any topic of your choosing.
        csp8-2021:
          title: Create PT Prep ('21-'22)
          description: "In this unit prepare for, and do the AP Create Performance Task. Each lesson contains links to helpful documents and activities to help you understand the task and develop a plan for completing it.\r\n\r\n"
          description_short: Practice and complete the Create Performance Task (PT).
          description_audience: ''
          lesson_groups:
            lessonGroup-2:
              display_name: Create PT
            lessonGroup-3:
              display_name: Survey
          name: csp8-2021
          student_description: 'In this unit prepare for, and do the AP Create Performance Task. Each lesson contains links to helpful documents and activities to help you understand the task and develop a plan for completing it.

            '
        csp9-2021:
          title: Data ('21-'22)
          description: 'In this unit learn how data analysis helps turn raw data into useful information about the world. Learn how to use data visualization to find patterns inside of data sets and learn how this data analysis process is being used in contexts like open data or machine learning to help make decisions or learn more about our world. In the unit project, you''ll analyze a dataset of your choosing and present your findings. '
          description_short: Explore and visualize datasets from a wide variety of topics as you hunt for patterns and try to learn more about the world around you.
          description_audience: ''
          lesson_groups:
            csp_unit9_2020:
              display_name: 'Unit 9: Data'
              description: "### Unit Philosophy and Pedagogy\n\n\n* **The Data Analysis Process:** This unit is built around a data analysis process that helps students break down how data is turned into new information about the world. Some lessons are designed around different steps of this process, like cleaning data or building visualizations. Other lessons focus on ways this process is applied in real-world contexts like citizen science or machine learning. The data analysis process helps provide a consistent reference point as students explore the importance of data analysis in computing. \n\n* **Exploring Data with the Data Visualizer:** The Data Visualizer is a tool built into App Lab that allows students to quickly create visualizations of the data they've added to their projects. The set of possible visualizations is intentionally limited to a few ways to change or modify the chart. This tool aims to encourage exploring the different kinds of questions that can be answered with data visualizations, with a greater emphasis on students' ability to create a variety of visualizations quickly.\n\n\n### Major Assessment and Projects\n\nStudents use the data visualizer to find and present a data story. Using what they've learned about the data analysis process, students either choose a dataset inside the data library or upload one of their own and create visualizations that find interesting patterns that may reveal new insights and knowledge. Students complete an activity guide describing their findings and the process they used in identifying them. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n### AP Connections\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs please see the \"Standards\" page for this unit.\n\n* DAT-2: Programs can be used to process data, which allows users to discover information and create new knowledge.\n* IOC-1: While computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences.\n\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1dqYF5u0AULjw049gaCwAP34ZSe0VuEWbAjWoH1-YMW0/edit?usp=sharing).\n\n* 2.3 Extracting Information from Data\n* 2.4 Using Programs with Data\n* 5.3 Computing Bias\n* 5.4 Crowdsourcing"
            lessonGroup-2:
              display_name: Survey
          name: csp9-2021
          student_description: 'In this unit learn how data analysis helps turn raw data into useful information about the world. Learn how to use data visualization to find patterns inside of data sets and learn how this data analysis process is being used in contexts like open data or machine learning to help make decisions or learn more about our world. In the unit project, you''ll analyze a dataset of your choosing and present your findings. '
        csp10-2021:
          title: Cybersecurity and Global Impacts ('21-'22)
          description: "In this unit learn how computing innovations have impacted our world in beneficial and harmful ways. Learn how data can pose a threat to our privacy and security and the ways that encryption and other techniques are used to protect it. Throughout the unit participate in a \"school of the future\" conference in which you and a team make a proposal for how best to improve school life with computing innovations.\n\n"
          description_short: Research and debate current events at the intersection of data, public policy, law, ethics, and societal impact.
          description_audience: ''
          lesson_groups:
            csp_unit10_2020:
              display_name: 'Unit 10: Cybersecurity and Global Impacts'
              description: "### Unit Philosophy and Pedagogy\n\n* **Learning Through Full-class Simulation:** The simulation project that runs through this unit serves several important goals. It helps contextualize what students are learning by moving from abstract ideas of privacy or security to concrete potential innovations. Since the simulation is based on modernizing schools, students can consider the consequences of computing innovations in a familiar setting. By taking on an assigned role and interacting with a group of teammates who have done the same, students must consider a breadth of interests and goals beyond their own when it comes to innovating in schools. \n\n* **Ending the Year as \"Deciders\":** A major theme students engage with throughout this unit is the need to consider both sides of technological innovation. Computing technology has led to both benefits and harms to culture, economy, and society at large. Responding to important questions facing our world requires understanding technology and an ability to identify and interpret the impacts it causes. This unit is not designed to advocate for any particular point of view on the impact of technology. Still, it should empower students to adeptly see and weigh the consequences of the technology around them. While the Create PT may feel like the most significant project of this course, the Explore Curricular requirement and the questions faced in this unit are arguably more crucial. Many of the young people who take CS Principles may pursue studies or careers in which they are \"creators\" with technology, but all of them will need to be thoughtful \"deciders\" in a world profoundly shaped by computing. \n\n\n### Major Assessment and Projects\n\nStudents complete the Future School Convention simulation throughout this unit. Working in teams of roughly five people, students are assigned a role and a set of interests they'll need to investigate. They research real-world innovations that could improve schools and align with the interests of their character. Throughout the unit, they are given opportunities to refine their proposals as a team and debate the benefits and risks of different computing innovations. Eventually, their team submits an overall proposal for the Future School, and all students vote for the team and innovation they believe to be the best. Students will also complete an end-of-unit assessment aligned with the CS Principles framework objectives covered in this unit.\n\n### AP Connections\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs please see the \"Standards\" page for this unit.\n\n* IOC-1: While computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences.\n* IOC-2: The use of computing innovations may involve risks to your personal safety and identity.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1dqYF5u0AULjw049gaCwAP34ZSe0VuEWbAjWoH1-YMW0/edit?usp=sharing).\n\n* 5.1 Beneficial and Harmful Effects\n* 5.6 Safe Computing"
            lessonGroup-2:
              display_name: Survey
          name: csp10-2021
          student_description: 'In this unit learn how computing innovations have impacted our world in beneficial and harmful ways. Learn how data can pose a threat to our privacy and security and the ways that encryption and other techniques are used to protect it. Throughout the unit participate in a "school of the future" conference in which you and a team make a proposal for how best to improve school life with computing innovations.

            '
        coursea-2021:
          title: Course A (2021)
          description: 'Course A offers a computer science curriculum for beginning readers, including Kindergarten students. Students will learn to program using commands like loops and events. The lessons featured in this course also teach students to meaningfully collaborate with others, investigate different problem-solving techniques, persist in the face of challenging tasks, and learn about internet safety. '
          description_short: An introduction to computer science for pre-readers.
          description_audience: 'Ages: 4-7'
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
            lessonGroup-5:
              display_name: End of Course Project
          name: coursea-2021
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          lessons: {}
        courseb-2021:
          title: Course B (2021)
          description: We developed Course B with first graders in mind. While the concepts in Course B parallel those in Course A, students learn more sophisticated unplugged activities and work through a greater variety of puzzles. Students will learn the basics of programming, collaboration techniques, investigation and critical thinking skills, persistence in the face of difficulty, and internet safety. At the end of this course, students create games in the Play Lab programming environment.
          description_short: An introduction to computer science for pre-readers. Similar to Course A, but with added concept depth.
          description_audience: 'Ages: 5-8'
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_impacts:
              display_name: Impacts of Computing
            csf_events:
              display_name: Events
            lessonGroup-6:
              display_name: End of Course Project
              description: |2-


                ![](https://images.code.org/0c33f6c158290834562bf8a6a39769b5-flower.png)
          name: courseb-2021
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          lessons: {}
        coursec-2021:
          title: Course C (2021)
          description: We developed Course C for students in second grade. Students will create programs with sequencing, loops, and events. They will investigate problem-solving techniques and develop strategies for building positive communities both online and offline. By the end of the course, students will create interactive games that they can share.
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description_audience: 'Ages: 6-10'
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_binary:
              display_name: Binary
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
            csf_data:
              display_name: Data
            end_of_course_project:
              display_name: End of Course Project
          name: coursec-2021
          student_description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
          lessons: {}
        coursed-2021:
          title: Course D (2021)
          description: 'We created course D for students in third grade.  The course begins with a review of the concepts found in earlier courses, including loops and events. Afterward, students will develop their understanding of algorithms, nested loops, while loops, conditionals, and more. '
          description_short: Learn about conditional statements. Create your own art, games, and even a dance party.
          description_audience: 'Ages: 7-11'
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_events:
              display_name: Events
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            csf_binary:
              display_name: Binary
            csf_digcit:
              display_name: Digital Citizenship
            end_of_course_project:
              display_name: End of Course Project
            lessonGroup-6:
              display_name: Digital Citizenship
          name: coursed-2021
          student_description: Learn about loops, conditionals, and events. Beyond coding, learn about digital citizenship.
          lessons: {}
        coursee-2021:
          title: Course E (2021)
          description: We created Course E for students in fourth grade. The course begins with an introduction to the Sprite Lab programming tool. Students will learn to make fun, interactive projects that reinforce what they’ll learn about online safety. Following these lessons, students will engage in more complex coding. Students will learn about nested loops, functions, and conditionals. By the end of the course, students will combine these concepts to solve challenging puzzles. The course ends with an open-ended project where students create a game or drawing.
          description_short: Learn the basics of sprites, nested loops, and functions.
          description_audience: 'Ages: 8-12'
          lesson_groups:
            ramp_up:
              display_name: Nested Loops
            csf_sprites:
              display_name: Sprites
            csf_digcit:
              display_name: Digital Citizenship
            csf_nested_loops:
              display_name: Conditionals
            csf_functions:
              display_name: Functions
            csf_impacts:
              display_name: Impacts of Computing
            end_of_course_project:
              display_name: End of Course Project
            lessonGroup-8:
              display_name: Removed
            lessonGroup-7:
              display_name: Impacts of Computing
          name: coursee-2021
          student_description: Start coding with algorithms, events, loops, conditionals, and functions! By the end of this course, design and create a game or drawing that you can share with your friends and family.
          lessons: {}
        coursef-2021:
          title: Course F (2021)
          description: We created Course F for students in the fifth grade. The course begins by looking at how users make choices in the apps they use. Students then learn to make a variety of Sprite Lab apps that also offer choices for the user. In the later lessons in the course, students will learn more advanced concepts, including variables and “for” loops. Students are given greater autonomy and more choices throughout this course. By the end of the course, students will have created interactive projects and artwork to share with their friends and family.
          description_short: Learn all the concepts in Computer Science Fundamentals and create your own art, story or game.
          description_audience: 'Ages: 9-13'
          lesson_groups:
            ramp_up:
              display_name: Sprites
            csf_digcit:
              display_name: Digital Citizenship
            csf_variables:
              display_name: For Loops
            csf_data:
              display_name: Data and Simulations
            csf_for_loops:
              display_name: For Loops
            csf_sprites:
              display_name: Impacts of Computing
            end_of_course_project:
              display_name: End of Course Project
            lessonGroup-8:
              display_name: Variables
            lessonGroup-9:
              display_name: remove
            lessonGroup-7:
              display_name: Digital Citizenship
          name: coursef-2021
          student_description: Learn to code with sprites, variables, and loops and discuss societal impacts of computing and the internet. By the end of this course, design and create a project you can share with friends and family.
          lessons: {}
        express-2021:
          title: Express Course (2021)
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          description_short: 'An introduction to computer science: combines the best of our elementary school curriculum for older students.'
          description_audience: 'Ages: 9-18'
          lesson_groups:
            csf_warmup:
              display_name: Warm Up
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            csf_functions:
              display_name: Functions
            csf_variables:
              display_name: Variables
            csf_for_loops:
              display_name: For Loops
            csf_sprites:
              display_name: Sprites
            end_of_course_project:
              display_name: End of Course Project
            lessonGroup-9:
              display_name: Events
          name: express-2021
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          lessons: {}
        pre-express-2021:
          title: Pre-reader Express (2021)
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          description_short: 'An introduction to computer science for pre-readers: combines the best of our kindergarten and first grade courses.'
          description_audience: 'Ages: 4-8'
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
          name: pre-express-2021
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          lessons: {}
        csf-2021-pilot:
          lesson_groups:
            ramp_up:
              display_name: Introduction
            outbreak:
              display_name: Outbreak Simulation
            introduction:
              display_name: Introduction to Sprite Lab
              description: Explore projects created with Sprite Lab. Learn the basics of coding with sprites and events!
            lessonGroup-3:
              display_name: Variables
              description: Store values in variables and retrieve them later in your program. Modify the values stored in variables to create exciting interactive projects!
            Sprites:
              display_name: Sprites
              description: Learn the basics of coding with sprites!
            variables:
              display_name: Variables
              description: Store values in variables and retrieve them later in your program. Modify the values stored in variables to create exciting interactive projects!
          name: csf-2021-pilot
          title: CS Fundamentals 2021 Pilot
          description_audience: Upper Elementary
          description_short: Learn about events, variables, and conditionals, and create your own animations, games, and simulations.
          description: "Learn to use events by programming in Sprite Lab. Investigate different design techniques and discuss societal impacts of computing. \n\n**Pilot 2021**: Thank you for trying out these new lessons. We appreciate any feedback. This pilot course will be available until June, 2021 only."
          student_description: "Learn to use events by programming in Sprite Lab. Investigate different design techniques and discuss societal impacts of computing. \n\n**Pilot 2021**: Thank you for trying out these new lessons. We appreciate any feedback. This pilot course will be available until June, 2021 only."
        csd4-preview-2021:
          title: CSD Unit 4 - The Design Process ('21-'22 Beta Preview)
          description: Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          description_short: "  Learn how to design a program that meets the needs of your users."
          description_audience: ''
          lesson_groups:
            csd4_1:
              display_name: 'Chapter 1: User Centered Design'
            csd4_2:
              display_name: 'Chapter 2: App Prototyping'
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
            cspSurvey:
              display_name: Survey
            csdSurvey:
              display_name: Survey
          name: csd4-preview-2021
          student_description: Unit 4 introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
        csd5-preview-2021:
          title: CSD Unit 5 - Data and Society ('21-'22 Beta Preview)
          description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          description_short: Learn how people use computers to solve data problems.
          description_audience: ''
          lesson_groups:
            csd5_1:
              display_name: 'Chapter 1: Representing Information'
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
            cspSurvey:
              display_name: Survey
          name: csd5-preview-2021
          student_description: Unit 5 is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
        testtess:
          lesson_groups:
            lesson group:
              display_name: lesson group display name
          name: testtess
          title: ''
          description_audience: ''
          description_short: ''
          description: |-
            I get the error only when trying to add this markdown chunk.
             ### Unit Philosophy and Pedagogy
            * **Intro to EIPM:** This unit is students' first experience with the Explore, Investigate, Practice, Make lesson sequence, or EIPM. This structured approach to teaching programming is covered in detail in the curriculum guide and we highly recommend that you watch the [accompanying video series](https://www.youtube.com/playlist?list=PLzdnOPI1iJNeqEl6MN7c2KyM3gdBSo8t3) to better understand what EIPM should look like in the classroom. When used effectively, it supports deep learning of content and helps maintain a collaborative classroom culture, even as you move into more complex programming concepts.
            * **Scaffolding Towards Independent Projects:** A major goal of this course is to empower students to design and build projects independently. The Create PT in Unit 8 offers students enormous freedoms to scope and build projects, and even this unit begins scaffolding towards that goal. Individual EIPM sequences of lessons gradually prepare students for scoped, independent Make projects. The unit project has a few requirements, but students are largely free to choose the design, topic, and implementation of their ideas. As you teach the unit, look for the opportunities to scaffold the skills and knowledge students will need to creatively and independently tackle the unit project.
            ### Major Assessment and Projects
            The unit project asks students to design an app that makes a recommendation based on input information from the user. Students are given a great deal of freedom to choose their topic, design their user interface, and decide how to actually program their app's behavior. Students submit their app, project guide, and written responses to reflection questions about how the app is designed and the development process they used to make it. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.
            ### AP Connections
            This unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs please see the "Standards" page for this unit.
            * CRD-2: Developers create and innovate using an iterative design process that is user-focused, that incorporates implementation/feedback cycles, and that leaves ample room for experimentation and risk-taking.
            * AAP-1: To find specific solutions to generalizable problems, programmers represent and organize data in multiple ways.
            * AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.
            * AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that can be reused. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and with more confidence.
            This unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1dqYF5u0AULjw049gaCwAP34ZSe0VuEWbAjWoH1-YMW0/edit?usp=sharing).
            * 1.4 Identifying and Correcting Errors
            * 3.1 Variables and Assignment
            * 3.3 Mathematical Expressions
            * 3.5 Boolean Expressions
            * 3.6 Conditionals
            * 3.7 Nested Conditionals
            * 3.15 Random Values
            The College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.
            * 3.a.i.
            * 3.a.ii.
            * 3.a.iii
          student_description: ''
        contagion-pilot:
          lesson_groups:
            lesson group:
              display_name: Contagion-Guided-Practice
            contagion:
              display_name: Contagion
            haiku bot:
              display_name: Haiku Bot
          name: contagion-pilot
          title: 'Contagion Simulator '
          description_audience: Grade 5
          description_short: 'Use Sprite Lab to program a simulation out of a virus outbreak. '
          description: 'Use Sprite Lab to program a simulation out of a virus outbreak. '
          student_description: 'Use Sprite Lab to program a simulation out of a virus outbreak. '
        contagion-guided-practice:
          lesson_groups:
            lesson group:
              display_name: Contagion-Guided-Practice
          name: contagion-guided-practice
          title: Contagion Guided Practice [Teacher only]
          description_audience: 5th grade
          description_short: These levels are for teachers to use when demonstrating CS and science concepts in the Contagion Simulator levels
          description: These levels are for teachers to use when demonstrating CS and science concepts in the Contagion Simulator levels
          student_description: ''
        ai-unit-pilot:
          lesson_groups:
            lesson group:
              display_name: lesson group display name
          name: ai-unit-pilot
          title: AI Unit Pilot
          description_audience: ''
          description_short: Pilot for AI Unit in CSD
          description: ''
          student_description: ''
        teststandard:
          lesson_groups: {}
        csa1-pilot:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
              description: Believing in one's own software engineering identity develops confidence and perseverance. This lesson introduces the core values of software engineering and explores common perceptions students may have. Students reflect on how they already practice many of these values to discover their own software engineering identity.
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          name: csa1-pilot
          title: Object Oriented Programming
          description_audience: ''
          description_short: ''
          description: 'Believing in one''s own software engineering identity develops confidence and perseverance. This lesson introduces the core values of software engineering and explores common perceptions students may have. Students reflect on how they already practice many of these values to discover their own software engineering identity.

            '
          student_description: ''
        csa2-pilot:
          lesson_groups:
            lesson group:
              display_name: Content
            lessonGroup-2:
              display_name: Show What You Know
            lessonGroup-3:
              display_name: Pilot Survey
            lessonGroup-4:
              display_name: Sandbox
          name: csa2-pilot
          title: Giving Objects State
          description_audience: ''
          description_short: ''
          description: In this unit, students create objects and define instance variables to represent attributes. Students explore creating and using constructors to establish values for these attributes and learn how to work with the data stored in objects. Students implement accessor and mutator methods to access and modify the values stored in the instance variables as well as write `toString` methods to output information about the state of the object. While creating and working with objects, students use the `Scanner` class to obtain user input to use as program data, learn about data types, operators, and expressions to store and manipulate data in variables, and develop an understanding of data encapsulation and object-oriented design decisions.
          student_description: In this unit, you create objects and define instance variables to represent attributes. You explore creating and using constructors to establish values for these attributes and learn how to work with the data stored in objects. You implement accessor and mutator methods to access and modify the values stored in the instance variables as well as write `toString` methods to output information about the state of the object. While creating and working with your objects, you use the `Scanner` class to obtain user input to use as program data, learn about data types, operators, and expressions to store and manipulate data in variables, and develop an understanding of data encapsulation and object-oriented design decisions.
        csa3-pilot:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          name: csa3-pilot
          title: Expanding Program Data
          description_audience: ''
          description_short: ''
          description: In this unit, students create one-dimensional arrays to store primitive values and object references. Students represent constants using the keyword `final` and data that needs to be shared between objects as static variables. While working with one-dimensional arrays, students use conditionals and iteration to search for values that meet specific criteria or to perform manipulations to solve problems.
          student_description: In this unit, you create one-dimensional arrays to store primitive values and object references. You represent constants using the keyword `final` and data that needs to be shared between objects as static variables. While working with one-dimensional arrays, you use conditionals and iteration to search for values that meet specific criteria or to perform manipulations to solve problems.
        csa4-pilot:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandbox
            lessonGroup-5:
              display_name: Pilot Survey
          name: csa4-pilot
          title: Expanding Program Logic
          description_audience: ''
          description_short: ''
          description: In this unit, students learn how the use of APIs and libraries can expand the functionalities of their programs. Students learn to use relational and logical operators to expand the decisions for conditionals and iteration. Students use casting operators and `Math` class methods as they evaluate expressions and perform calculations, including implementing random in program decisions and behaviors. While working with compound Boolean expressions and logical operators, students develop an understanding of De Morgan's Laws and writing truth tables. Students use these expanded conditions and expressions to evaluate primitive values and object references and make decisions based on the results.
          student_description: In this unit, you learn how the use of APIs and libraries can expand the functionalities of your programs. You learn to use relational and logical operators to expand the decisions for conditionals and iteration. You use casting operators and `Math` class methods as you evaluate expressions and perform calculations, including implementing random in program decisions and behaviors. While working with compound Boolean expressions and logical operators, you develop an understanding of De Morgan's Laws and writing truth tables. You use these expanded conditions and expressions to evaluate primitive values and object references and make decisions based on the results.
        csa5-pilot:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandbox
            lessonGroup-5:
              display_name: Pilot Survey
          name: csa5-pilot
          title: Giving Objects Organization
          description_audience: ''
          description_short: ''
          description: In this unit, students use two-dimensional (2D) arrays to expand storage and organization capabilities in their programs. Students identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing these data structures. Students traverse 2D arrays using nested `for` loops and nested enhanced `for` loops in row-major and column-major order to apply the standard algorithms they developed in Unit 3 to access and manipulate elements.
          student_description: In this unit, you use two-dimensional (2D) arrays to expand storage and organization capabilities in their programs. You identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing these data structures. You traverse 2D arrays using nested `for` loops and nested enhanced `for` loops in row-major and column-major order to apply the standard algorithms you developed in Unit 3 to access and manipulate elements.
        csa6-pilot:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          name: csa6-pilot
          title: Expanding Program Capabilities
          description_audience: ''
          description_short: ''
          description: In this unit, students use `ArrayList`s to store program data and differentiate between when to use 1D and 2D arrays and `ArrayList`s. Students explore the benefits and functionality of an `ArrayList`, using these to solve problems involving numerical and object data. Students use methods in the `String` class to analyze and process text obtained from user and file input. Throughout the unit, students write program documentation using single-line comments, multi-line comments, and Javadoc comments to create API documentation. In the process, students identify and document preconditions and postconditions of objects and methods.
          student_description: In this unit, you use `ArrayList`s to store program data and differentiate between when to use 1D and 2D arrays and `ArrayList`s. You explore the benefits and functionality of an `ArrayList`, using these to solve problems involving numerical and object data. You use methods in the `String` class to analyze and process text obtained from user and file input. Throughout the unit, you write program documentation using single-line comments, multi-line comments, and Javadoc comments to create API documentation. In the process, you identify and document preconditions and postconditions of objects and methods.
        csa7-pilot:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          name: csa7-pilot
          title: Expanding Software Design
          description_audience: ''
          description_short: ''
          description: In this unit, students practice software design and development using the skills and programming constructs they have learned to develop a title sequence for their favorite content creator. Students use decomposition strategies and object-oriented principles to plan and implement their ideas while ensuring their projects meet specified requirements. Students explore recursive methods by tracing and writing recursive methods and comparing recursive and iterative solutions for efficiency. At the end of the unit, students consider the need for maximizing system reliability as they explore bugs and issues in existing programs.
          student_description: In this unit, you practice software design and development using the skills and programming constructs you have learned to develop a title sequence for your favorite content creator. You use decomposition strategies and object-oriented principles to plan and implement your ideas while ensuring your projects meet specified requirements. You explore recursive methods by tracing and writing recursive methods and comparing recursive and iterative solutions for efficiency. At the end of the unit, you consider the need for maximizing system reliability as you explore bugs and issues in existing programs.
        csa8-pilot:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          name: csa8-pilot
          title: Giving Objects Life
          description_audience: ''
          description_short: ''
          description: In this unit, students implement searching and sorting algorithms to work with lists of primitive and object data stored in 1D and 2D arrays and `ArrayList`s. Students analyze the efficiency of searching and sorting algorithms and expand the standard algorithms they have developed throughout the course to solve more complex problems. Throughout the unit, students apply their knowledge and programming skills to develop a game that incorporates object-oriented design and efficiency. Students wrap up the unit and course considering the privacy and security of their programs and users.
          student_description: In this unit, you implement searching and sorting algorithms to work with lists of primitive and object data stored in 1D and 2D arrays and `ArrayList`s. You analyze the efficiency of searching and sorting algorithms and expand the standard algorithms you have developed throughout the course to solve more complex problems. Throughout the unit, you apply your knowledge and programming skills to develop a game that incorporates object-oriented design and efficiency. You wrap up the unit and course considering the privacy and security of their programs and users.
        csa9-pilot:
          lesson_groups:
            lessonGroup-2:
              display_name: Review and Practice
            lessonGroup-3:
              display_name: Mock Exams
          name: csa9-pilot
          title: AP Exam Review and Practice
          description_audience: ''
          description_short: ''
          description: This unit prepares students for the AP CSA Exam by reviewing concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. Students identify strengths and areas of improvement to create individualized study plans to focus their practice and self-assess their progress.
          student_description: This unit prepares you for the AP CSA Exam by reviewing concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. You identify strengths and areas of improvement to create individualized study plans to focus their practice and self-assess their progress.
        k5-onlinepd-2021:
          title: Teaching Computer Science Fundamentals ('21-'22)
          description: "Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! \n"
          student_description: 'Welcome to Code.org’s free online educator course for CS Fundamentals! '
          description_short: 'Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! '
          description_audience: 'Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! '
          lesson_groups:
            k5_getting_started_1:
              display_name: Introduction
            k5_basic_concepts_1:
              display_name: 'Part II:  Concepts in Courses A - F'
            k5_diving_deeper_1:
              display_name: 'Diving Deeper: Courses E and F'
            k5_next_steps_1:
              display_name: 'Part III:  Next Steps'
            Introduction:
              display_name: Introduction
            Implementing and Teaching CS:
              display_name: 'Part I:  Teaching and Implementing Computer Science'
          name: k5-onlinepd-2021
        haikubot-pilot:
          lesson_groups:
            haiku bot:
              display_name: Haiku Bot
            poem bot:
              display_name: Programming Poem Bot
            rampup:
              display_name: Programming Ramp Up for Poem Bot
              description: Learn the basics of coding with sprites and text!
            write a haikut:
              display_name: Write a Haiku
            plan your poem:
              display_name: Plan Your Haiku Poem
            poetry circle:
              display_name: Poetry Circle
            Lesson 1:
              display_name: Lesson 1
              description: Learn the basics of coding with sprites and text!
            Lesson 2:
              display_name: Lesson 2
            Lesson 3:
              display_name: Lesson 3
            Lesson 4:
              display_name: Lesson 4
            Lesson 5:
              display_name: Lesson 5
            Peom Bot:
              display_name: Poem Bot
          name: haikubot-pilot
          title: Poem Bot (Pilot)
          description_audience: Grade 4, Grade 5
          description_short: 'In this module, students will create a haiku poem generator in a Mad Libs style using what they know about the elements of poetry, diction, and coding with variables. '
          description: "**Overview:** \nIn this module, students will create a Poem Bot that recites different versions of a haiku poem they write. First, students will study the structure and elements of a haiku poem by reading poems together, decomposing a haiku poem into its parts, and writing a haiku. Then, students will learn how computers can take in user input and store it in its memory and will build a Poem Bot. Once they’ve built their Poem Bot, they will test their programs with their classmates and complete the project by sharing their user-generated poems in a poetry circle."
          student_description: Use Sprite Lab to make a Haiku Bot!
        allthemigratedthings:
          lesson_groups:
            lessonGroup-2:
              display_name: Lesson Group 1
              big_questions: |-
                * Who?
                * What?
                * Where?
              description: Lesson group 1 description
            lessonGroup-3:
              display_name: Lesson Group 2
            lessonGroup-4:
              display_name: UI/Eyes Test Content
              description: All lessons which are examined by automated UI or Eyes tests.
          name: allthemigratedthings
          title: All the Migrated Things
          description_audience: ''
          description_short: ''
          description: Teacher overview of the unit.
          student_description: Student overview of the unit.
        fancygeometry-pilot:
          lesson_groups:
            Fancy Geometry:
              display_name: Fancy Geometry
          name: fancygeometry-pilot
          title: Fancy Geometry
          description_audience: Grade 3, Grade 4
          description_short: " In this module, students will explore different geometric shapes by examining the relationships between angles, sides, and lengths. They will also compare the different affordances of using different tools to complete an artistic task."
          description: "**Overview**\nThe Artist tool is an especially explorative and creative platform to build and decompose intricate geometric patterns. Fourth grade math standards focus on developing student proficiency in geometry, encouraging students to discover the relationships between angles, sides, and lengths of different shapes. With the Artist, teachers can help make these geometric relationships come to life. "
          student_description: ''
        ai-classroom-test:
          lesson_groups: {}
          name: ai-classroom-test
          title: AI Lab Classroom Test
          description_audience: ''
          description_short: Let's Test AI Tools!
          description: Let's Test AI Tools!
          student_description: Let's Test AI Tools!
        poembot-springforum21:
          lesson_groups:
            lesson group:
              display_name: Poem Bot - Spring Forum 2021
          name: poembot-springforum21
          title: Poem Bot for Spring Forum 2021
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        pl-playground:
          lesson_groups:
            lesson group:
              display_name: lesson group display name
          name: pl-playground
          title: PL Playground
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        outbreakmodule:
          lesson_groups:
            Outbreak Module:
              display_name: Outbreak Module
          name: outbreakmodule
          title: Outbreak Module_V2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csp-post-survey-2020:
          lesson_groups:
            cspSurvey2020:
              display_name: Survey
          name: csp-post-survey-2020
          title: CSP Student Post-Course Survey ('20-'21)
          description_audience: CSP Students
          description_short: CSP Student Post Course Survey
          description: Welcome to the Code.org CS Principles Post-Course Survey.  This survey takes about 15 minutes to complete.  Your responses are private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration.
          student_description: Welcome to the Code.org CS Principles Post-Course Survey.  This survey takes about 15 minutes to complete.  Your responses are private and anonymous -- your teacher can see anonymous aggregate results for the whole class.  The results are vital for your teacher and for Code.org to sustain and improve the course.  Thanks for your time and consideration.
        aiml-2021:
          name: aiml-2021
          title: AI and Machine Learning Module
          description_audience: ''
          description_short: ''
          description: |-
            This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.

            This unit assumes students are familiar with App Lab, specifically using Design Mode to create a user interface and using Events to change the screen when clicking a button. [Click Here](https://docs.google.com/document/d/1SkMCN4Eid3-mGoRUQkurQGJqoOJ9PydfB7uGE0xZyFA/preview) to learn more about recommendations for introducing students to App Lab before this unit.

            **Professional Development:** If you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](http://studio.code.org/s/self-paced-pl-csd5-2022). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.
          student_description: |-
            This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.

            **For Teachers:** [Click here](https://studio.code.org/s/aiml-2021?viewAs=Teacher) to see lesson plans and teacher resources for this unit.
          lesson_groups:
            lessonGroup-2:
              display_name: Chapter 1 - Understanding Machine Learning
              description: Students learn the basics of machine learning and use a tool called AI Lab to create machine learning models that can be used in App Lab. The unit starts with an overview of machine learning and how computers can use patterns in data to make decisions and predictions. Then, students learn how to use AI Lab to train models from tabular data while exploring issues of bias. Lessons follow a repeating "unplugged - AI Lab - App Lab" pattern so students are continually exposed to the concepts and tools of machine learning. The chapter culminates in a project where students select from a set of real-world datasets to train a machine learning model and create an app.
              big_questions: |-
                - How does machine learning find patterns in data to make decisions?
                - How can we avoid bias when training a machine learning model?
            lessonGroup-3:
              display_name: Chapter 2 - Design a Machine Learning App
              big_questions: "- How can machine learning be used to solve problems in our community?"
              description: This chapter prepares students to be machine learning scientists to create an app that addresses an issue in their community. Students follow along with a fictional group of students as they define an issue, develop a survey to collect data, analyze their data in AI Lab, create a model card, and create an app to solve their problem. Then, in the final project, students repeat these same steps with an issue they care about in their community.
            lessonGroup-4:
              display_name: Survey
        csd7-2021:
          lesson_groups:
            lessonGroup-2:
              display_name: Chapter 1 - Understanding Machine Learning
              big_questions: |-
                - How does machine learning find patterns in data to make decisions?
                - How can we avoid bias when training a machine learning model?
              description: Students learn the basics of machine learning and use a tool called AI Lab to create machine learning models that can be used in App Lab. The unit starts with an overview of machine learning and how computers can use patterns in data to make decisions and predictions. Then, students learn how to use AI Lab to train models from tabular data while exploring issues of bias. Lessons follow a repeating "unplugged - AI Lab - App Lab" pattern so students are continually exposed to the concepts and tools of machine learning. The chapter culminates in a project where students select from a set of real-world datasets to train a machine learning model and create an app.
            lessonGroup-3:
              display_name: Chapter 2 - Design a Machine Learning App
              big_questions: "- How can machine learning be used to solve problems in our community?"
              description: This chapter prepares students to be machine learning scientists to create an app that addresses an issue in their community. Students follow along with a fictional group of students as they define an issue, develop a survey to collect data, analyze their data in AI Lab, create a model card, and create an app to solve their problem. Then, in the final project, students repeat these same steps with an issue they care about in their community.
            lessonGroup-4:
              display_name: Survey
          name: csd7-2021
          title: AI and Machine Learning
          description_audience: ''
          description_short: ''
          description: |-
            Unit 7 is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.

            **Implementation guidance for Unit 7**

            - Complete Unit 1 Chapter 1 before starting this unit
            - This unit assumes students are familiar with App Lab, specifically using Design Mode to create a user interface and using Events to change the screen when clicking a button. [Click Here](https://docs.google.com/document/d/1SkMCN4Eid3-mGoRUQkurQGJqoOJ9PydfB7uGE0xZyFA/preview) to learn more about recommendations for introducing students to App Lab before this unit.
            - This is an optional unit that can be used in place of another CSD unit - see the [Implementation Guide](https://docs.google.com/document/d/1SkMCN4Eid3-mGoRUQkurQGJqoOJ9PydfB7uGE0xZyFA/preview) for more information
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1myJwrDyRlAjwVNDS3gs-3JaJNhogsGMt9Swo-bpySgE/preview) for more information about this unit

            **Professional Development:** If you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](https://studio.code.org/s/self-paced-pl-csd5-2021). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.
          student_description: Unit 7 is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop your own machine learning projects around real-world data. The unit culminates with designing your own machine learning app to solve a personally relevant problem.
          lessons: {}
        kodea-pd-2021:
          title: Enseñando Fundamentos de la Computación
          description: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course.
          student_description: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course.
          description_short: Learn how to teach computer science using Code.org's Computer Science Fundamentals with this free, self-paced online course.
          description_audience: ''
          lesson_groups: {}
          name: kodea-pd-2021
          lessons: {}
        vpl-csd-2021:
          title: CS Discoveries Virtual Professional Learning 2021 - 22
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups:
            CSD_Module 1:
              display_name: Module 1
            CSD_Module 2:
              display_name: Module 2
            CSD_Module 3:
              display_name: Module 3
            CSD_Module 4:
              display_name: Module 4
            CSD_Module 5:
              display_name: Module 5
            CSD_Module 6:
              display_name: Module 6
            CSD_Module 7:
              display_name: Module 7
            CSD_Module 8:
              display_name: Module 8
            lesson group:
              display_name: lesson group display name
          name: vpl-csd-2021
        vpl-csp-2021:
          title: CS Principles Virtual Professional Learning 21 - 22
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups:
            lesson group:
              display_name: lesson group display name
          name: vpl-csp-2021
        self-paced-pl-csd1-2021:
          lesson_groups:
            lessonGroup-2:
              display_name: Welcome
            lessonGroup-3:
              display_name: Navigating Code.org
            lessonGroup-5:
              display_name: Preparing to Teach CS Discoveries
          name: self-paced-pl-csd1-2021
          title: 'Module 1: Welcome '
          description_audience: ''
          description_short: ''
          description: "This module is a short introduction to both Code.org and this professional learning course. \n\n**You will:**\n* Get an introduction to Code.org and CS Discoveries.\n* Learn how to engage in this professional learning course.\n\n**Suggested Time:** 10 minutes"
          student_description: "This module is a short introduction to both Code.org and this professional learning course. \n\n**You will:**\n* Get an introduction to Code.org and CS Discoveries.\n* Learn how to engage in this professional learning course.\n\n**Suggested Time:** 10 minutes"
          lessons: {}
        self-paced-pl-csd2-2021:
          lesson_groups:
            lessonGroup-2:
              display_name: Navigating Code.org
            lessonGroup-3:
              display_name: Navigating Lesson Plans and Resources
            lessonGroup-4:
              display_name: Navigating Support
          name: self-paced-pl-csd2-2021
          title: 'Module 2: Navigating Code.org'
          description_audience: ''
          description_short: ''
          description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Discoveries. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes\n\n\n\n\n"
          student_description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Discoveries. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes"
          lessons: {}
        self-paced-pl-csd3-2021:
          lesson_groups:
            lessonGroup-2:
              display_name: Overview of CS Discoveries
          name: self-paced-pl-csd3-2021
          title: 'Module 3: Overview of CS Discoveries'
          description_audience: ''
          description_short: ''
          description: "This module will provide you with an overview of the CS Discoveries course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom. \n\n**You will:**\n\n* Gain a high-level understanding of the CS Discoveries curriculum.\n* Become familiar with the programming environments used within CS Discoveries.\n* Decide which units of CS Discoveries you will teach in your class.\n\n**Suggested time:** 60 minutes"
          student_description: "This module will provide you with an overview of the CS Discoveries course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom. \n\n**You will:**\n\n* Gain a high-level understanding of the CS Discoveries curriculum.\n* Become familiar with the programming environments used within CS Discoveries.\n* Decide which units of CS Discoveries you will teach in your class.\n\n**Suggested time:** 60 minutes"
          lessons: {}
        self-paced-pl-csd4-2021:
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching and learning CS Discoveries
          name: self-paced-pl-csd4-2021
          title: 'Module 4: Teaching and learning CS Discoveries'
          description_audience: ''
          description_short: ''
          description: "In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Discoveries course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Discoveries classroom and make a plan for how you will support student learning while teaching the course. \n\n**You will:**\n* Consider the role of the teacher in a CS Discoveries classroom. \n* Learn about authentic CS practices that students will develop throughout the CS Discoveries course.\n* Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion. \n\n**Suggested Time:** 50 minutes"
          student_description: "In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Discoveries course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Discoveries classroom and make a plan for how you will support student learning while teaching the course. \n\n**You will:**\n* Consider the role of the teacher in a CS Discoveries classroom. \n* Learn about authentic CS practices that students will develop throughout the CS Discoveries course.\n* Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion. \n\n**Suggested Time:** 50 minutes"
          lessons: {}
        self-paced-pl-csd5-2021:
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching Artificial Intelligence and Machine Learning
              description: Students learn the problem-solving process, the input-output-store-process model of a computer, and how computers help humans solve problems. Students end the unit by proposing their own app to solve a problem.
            lessonGroup-3:
              display_name: 'Preparing to Teach Unit 2 '
              description: 'Students learn to create websites using HTML and CSS inside Code.org''s Web Lab environment. Throughout the unit, students consider questions of privacy and ownership on the Internet as they develop their own personal websites.  '
            lessonGroup-4:
              display_name: Preparing to Teach Unit 3
              description: 'Students learn fundamental programming constructs and practices in the JavaScript programming language while developing animations and games in Code.org''s Game Lab environment. Students end the unit by designing their own animations and games. '
            lessonGroup-5:
              display_name: Preparing to Teach Unit 4
              description: 'Students apply the problem solving process to the problems of others, learning to empathize with the needs of a user and design solutions to address those needs. During the second half of the unit, students form teams to prototype an app of their own design, first on paper, and eventually in Code.org''s App Lab environment. '
            lessonGroup-6:
              display_name: Preparing to Teach Unit 5
              description: Students explore different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second half of the unit, students learn how collections of data are used to solve problems and how computers help to automate the steps of this process.
            lessonGroup-7:
              display_name: Preparing to Teach Unit 6
              description: 'Students use Code.org''s App Lab environment, in conjunction with the Adafruit Circuit Playground, to explore the relationship between hardware and software. Throughout the unit, students develop prototypes that mirror existing innovative computing platforms, before ultimately designing and prototyping one of their own. '
            lessonGroup-8:
              display_name: Preparing to Teach Artificial Intelligence and Machine Learning
              description: 'Students learn how machine learning can be used to solve problems by preparing data, training a machine model, the testing the model for accuracy and bias. Students use Code.org''s AI Lab environment to train machine learning models, then import their models into App Lab to create apps that solve problems. '
            lessonGroup-9:
              display_name: Preparing to Teach Unit 1
          name: self-paced-pl-csd5-2021
          title: Teaching AI and machine learning
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit.  \n\n**In this professional learning module, you will:**\n* Get an introduction to artificial intelligence and machine learning. \n* Practice key concepts included in the unit.\n* Engage with AI Lab and App Lab.\n* Explore end of chapter projects. \n* Make a plan for implementing the unit with your students.\n\n**Suggested Time:** 120 minutes\n"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit.  \n\n**In this professional learning module, you will:**\n* Get an introduction to artificial intelligence and machine learning. \n* Train a machine learning model using AI Lab.\n* Engage with machine learning apps. \n* Consider real-world implications of AI and machine learning. \n* Explore end of chapter projects.\n\n**Suggested Time:** 120 minutes"
          lessons: {}
        self-paced-pl-csd6-2021:
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach Artificial Intelligence and Machine Learning
            lessonGroup-3:
              display_name: 'Preparing to Teach Unit 2: Web Development'
            lessonGroup-4:
              display_name: 'Preparing to Teach Unit 3: Interactive Animations and Games'
            lessonGroup-5:
              display_name: 'Preparing to Teach Unit 4: The Design Process'
            lessonGroup-6:
              display_name: 'Preparing to Teach Unit 5: Data and Society'
            lessonGroup-7:
              display_name: 'Preparing to Teach Unit 6: Physical Computing'
            lessonGroup-8:
              display_name: 'Preparing to Teach Unit 7: AI and Machine Learning'
          name: self-paced-pl-csd6-2021
          title: 'Teaching AI and machine learning '
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit.  \n\n**In this professional learning module, you will:**\n* Get an introduction to artificial intelligence and machine learning. \n* Train a machine learning model using AI Lab.\n* Engage with machine learning apps. \n* Consider real-world implications of AI and machine learning. \n* Explore end of chapter projects.\n\n**Suggested Time:** 120 minutes"
          student_description: "This professional learning module is designed to help you prepare for teaching Code.org's AI and Machine Learning unit.  \n\n**In this professional learning module, you will:**\n* Get an introduction to artificial intelligence and machine learning. \n* Train a machine learning model using AI Lab.\n* Engage with machine learning apps. \n* Consider real-world implications of AI and machine learning. \n* Explore end of chapter projects.\n\n**Suggested Time:** 120 minutes"
          lessons: {}
        self-paced-pl-csd7-2021:
          lesson_groups: {}
          name: self-paced-pl-csd7-2021
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        self-paced-pl-csd8-2021:
          lesson_groups: {}
          name: self-paced-pl-csd8-2021
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        self-paced-pl-csp1-2021:
          lesson_groups: {}
          name: self-paced-pl-csp1-2021
          title: 'Module 1: Welcome'
          description_audience: ''
          description_short: ''
          description: "This module is a short introduction to both Code.org and professional learning modules. \n\n**You will:**\n* Get an introduction to Code.org and CS Principles.\n* Learn how to engage in professional learning modules.\n\n**Suggested Time:** 10 minutes"
          student_description: "This module is a short introduction to both Code.org and professional learning modules. \n\n**You will:**\n* Get an introduction to Code.org and CS Principles.\n* Learn how to engage in professional learning modules.\n\n**Suggested Time:** 10 minutes"
          lessons: {}
        self-paced-pl-csp2-2021:
          lesson_groups: {}
          name: self-paced-pl-csp2-2021
          title: 'Module 2: Navigating Code.org'
          description_audience: ''
          description_short: ''
          description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Principles. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes"
          student_description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Principles. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes"
          lessons: {}
        self-paced-pl-csp3-2021:
          lesson_groups: {}
          name: self-paced-pl-csp3-2021
          title: Overview of CS Principles
          description_audience: ''
          description_short: ''
          description: |-
            This module will provide you with an overview of the CS Principles course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom.

            **You will**:

            * Gain a high-level understanding of the CS Principles curriculum.
            * Learn more about the pedagogical approaches used to teach both non-programming and programming units.
            * Become familiar with the student learning tools used within CS Principles.
            * Explore the components of the AP Exam, as well as your responsibilities as a teacher if you plan to offer CS Principles as an AP course.
            * Build an implementation plan for the school year.

            **Suggested time**: 90 minutes
          student_description: |-
            This module will provide you with an overview of the CS Principles course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom.

            **You will**:

            * Gain a high-level understanding of the CS Principles curriculum.
            * Learn more about the pedagogical approaches used to teach both non-programming and programming units.
            * Become familiar with the student learning tools used within CS Principles.
            * Explore the components of the AP Exam, as well as your responsibilities as a teacher if you plan to offer CS Principles as an AP course.
            * Build an implementation plan for the school year.

            **Suggested time**: 90 minutes
          lessons: {}
        self-paced-pl-csp4-2021:
          lesson_groups: {}
          name: self-paced-pl-csp4-2021
          title: Teaching and learning CS Principles
          description_audience: ''
          description_short: ''
          description: |-
            In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Principles course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Principles classroom and make a plan for how you will support student learning while teaching the course.

            **You will**:

            * Consider the role of the teacher in a CS Principles classroom.
            * Learn about authentic CS practices that students will develop throughout the CS Principles course.
            * Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion.

            **Suggested Time**: 50 minutes
          student_description: |-
            In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Discoveries course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Discoveries classroom and make a plan for how you will support student learning while teaching the course.

            **You will**:

            * Consider the role of the teacher in a CS Discoveries classroom.
            * Learn about authentic CS practices that students will develop throughout the CS Discoveries course.
            * Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion.

            **Suggested Time**: 50 minutes
          lessons: {}
        self-paced-pl-csp5-2021:
          lesson_groups: {}
          name: self-paced-pl-csp5-2021
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        self-paced-pl-csp6-2021:
          lesson_groups: {}
          name: self-paced-pl-csp6-2021
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        self-paced-pl-csp7-2021:
          lesson_groups: {}
          name: self-paced-pl-csp7-2021
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        self-paced-pl-csp8-2021:
          lesson_groups: {}
          name: self-paced-pl-csp8-2021
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        self-paced-pl-csp9-2021:
          lesson_groups: {}
          name: self-paced-pl-csp9-2021
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        self-paced-pl-csp10-2021:
          lesson_groups: {}
          name: self-paced-pl-csp10-2021
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        self-paced-pl-csp11-2021:
          lesson_groups: {}
          name: self-paced-pl-csp11-2021
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        poster:
          lesson_groups:
            about me_ip:
              display_name: 'Interactive Poster: Self-Expression'
              description: 'Version 1 of Interactive Poster: Self-Expression'
          name: poster
          title: 'V1_Interactive Poster: Self-Expression'
          description_audience: ''
          description_short: '(Need to change name) Interactive Poster project in an "About Me" format for HoC - V1 '
          description: ''
        poster-draft:
          lesson_groups: {}
          name: poster-draft
          title: Story Board (V1 - Control)
          description_audience: ''
          description_short: Story Board (V1)
          description: ''
          student_description: '(Need to change name) Interactive Poster project in an "About Me" format for HoC - V1 '
        poembot:
          lesson_groups: {}
          name: poembot
          title: Poembot
          description_audience: ''
          description_short: ''
          description: ''
        outbreak-module:
          lesson_groups: {}
          name: outbreak-module
          title: Outbreak
          description_audience: ''
          description_short: ''
          description: ''
        csa1-exemplars:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
          name: csa1-exemplars
          title: Unit 1 - Object Oriented Programming [Exemplars]
          description_audience: ''
          description_short: ''
          description: ''
        csa2-exemplars:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
          name: csa2-exemplars
          title: Unit 2 - Giving Objects State [Exemplars]
          description_audience: ''
          description_short: ''
          description: ''
        csa-videos:
          lesson_groups:
            lessonGroup-3:
              display_name: Resources
            lessonGroup-2:
              display_name: Unit 1
            lessonGroup-4:
              display_name: Unit 2
            lessonGroup-5:
              display_name: Unit 3
            lessonGroup-6:
              display_name: Unit 4
            lessonGroup-7:
              display_name: Unit 5
          name: csa-videos
          title: CSA Videos
          description_audience: ''
          description_short: ''
          description: ''
        csa3-exemplars:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
          name: csa3-exemplars
          title: Unit 3 - Expanding Program Data [Exemplars]
          description_audience: ''
          description_short: ''
          description: ''
        ai-lab:
          lesson_groups: {}
          name: ai-lab
          title: AI Lab
          description_audience: ''
          description_short: ''
          description: Use these levels to explore AI Lab and use in other lessons or activities.
          student_description: Use these levels to explore AI Lab and use in other lessons or activities. You will need to create a Code.org account and sign-in in order to use these tools.
          lessons: {}
        poster-experiment:
          lesson_groups: {}
          name: poster-experiment
          title: Story Board (V1 - Experiment)
          description_audience: ''
          description_short: ''
          description: ''
        tesspltest:
          lesson_groups: {}
          name: tesspltest
          title: Testing PL Course Unit 1
          description_audience: ''
          description_short: ''
          description: ''
        tesspl2:
          lesson_groups: {}
          name: tesspl2
          title: Tess PL 2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        sb-pt-cont:
          lesson_groups: {}
          name: sb-pt-cont
          title: Story Board (playtest control)
          description_audience: ''
          description_short: ''
          description: ''
        sb-pt-exp:
          lesson_groups: {}
          name: sb-pt-exp
          title: Story Board (playtest experiment)
          description_audience: ''
          description_short: ''
          description: ''
        dc-standalone:
          lesson_groups: {}
          name: dc-standalone
          title: Story Board (DC Standalone)
          description_audience: ''
          description_short: ''
          description: ''
        storyboard-playtest-control:
          lesson_groups: {}
        sb-chardev-v1:
          lesson_groups: {}
          name: sb-chardev-v1
          title: Story Board Character Development
          description_audience: ''
          description_short: ''
          description: ''
        dlp21-csp-mod4:
          lesson_groups:
            lessonGroup-2:
              display_name: Stage 1
            lessonGroup-3:
              display_name: Stage 2
          name: dlp21-csp-mod4
          title: 2021 CS Principles Deeper Learning Module 4  for Workshop 4
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        dlp21-csp-mod1:
          lesson_groups: {}
          name: dlp21-csp-mod1
          title: 2021 CS Principles Deeper Learning Module 1 for Workshop 1
          description_audience: ''
          description_short: ''
          description: ''
        dlp21-csd:
          lesson_groups:
            lessonGroup-2:
              display_name: Module 1
              description: test
            lessonGroup-3:
              display_name: Module 2
            lessonGroup-4:
              display_name: Module 3
            lessonGroup-5:
              display_name: Module 4
          name: dlp21-csd
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        dlp21-csd-mod1:
          lesson_groups: {}
          name: dlp21-csd-mod1
          title: 2021 CS Discoveries Deeper Learning Module 1 for Workshop 1
          description_audience: ''
          description_short: ''
          description: ''
        dlp21-csd-mod2:
          lesson_groups: {}
          name: dlp21-csd-mod2
          title: 2021 CS Discoveries Deeper Learning Module 2 for Workshop 2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        dlp21-csd-mod3:
          lesson_groups: {}
          name: dlp21-csd-mod3
          title: 2021 CS Discoveries Deeper Learning Module 3 for Workshop 3
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        dlp21-csd-mod4:
          lesson_groups: {}
          name: dlp21-csd-mod4
          title: 2021 CS Discoveries Deeper Learning Module 4 for Workshop 4
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        dlp21-csp-mod2:
          lesson_groups: {}
          name: dlp21-csp-mod2
          title: 2021 CS Principles Deeper Learning Module 2 for Workshop 2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        dlp21-csp-mod3:
          lesson_groups: {}
          name: dlp21-csp-mod3
          title: 2021 CS Principles Deeper Learning Module 3 for Workshop 3
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        dlp21-overview:
          lesson_groups: {}
          name: dlp21-overview
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
        dlp21-csd-overview:
          lesson_groups: {}
          name: dlp21-csd-overview
          title: CS Discoveries Deeper Learning Overview
          description_audience: ''
          description_short: ''
          description: Welcome to the 2021 Deeper Learning program for onboarding CS Discoveries facilitators.
        dlp21-csp-overview:
          lesson_groups: {}
          name: dlp21-csp-overview
          title: 2021 CS Principles Deeper Learning Overview
          description_audience: ''
          description_short: ''
          description: "###Welcome to the 2021 Deeper Learning program for onboarding CS Principles facilitators."
        csa-u6-dev:
          lesson_groups:
            lessonGroup-2:
              display_name: Lessons
            lessonGroup-3:
              display_name: Project
            lessonGroup-4:
              display_name: Demos and Resources
          name: csa-u6-dev
          title: CSA Unit 6 Development
          description_audience: ''
          description_short: ''
          description: ''
        hello-world-draft:
          lesson_groups: {}
          name: hello-world-draft
          title: Hello, World!
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-self-paced-pl:
          lesson_groups:
            lessonGroup-2:
              display_name: Navigating Code.org
          title: Navigating Code.org for CSA Pilot Teachers
          description: "This module is designed to orient you to the tools you will use to support student learning while teaching CSA. \n\n**You will learn how to:**\n\n* Navigate the Code.org website and teacher tools.\n* Locate and use course lesson plans and teacher resources. \n\n**Suggested time:** 1 hour\n\n\n\n\n"
          student_description: ''
          description_short: ''
          description_audience: ''
          name: csa-self-paced-pl
        csa1-pilot-facilitator:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          title: Object Oriented Programming
          description: 'Believing in one''s own software engineering identity develops confidence and perseverance. This lesson introduces the core values of software engineering and explores common perceptions students may have. Students reflect on how they already practice many of these values to discover their own software engineering identity.

            '
          student_description: ''
          description_short: ''
          description_audience: ''
          name: csa1-pilot-facilitator
        csa2-pilot-facilitator:
          lesson_groups:
            lesson group:
              display_name: Content
            lessonGroup-2:
              display_name: Show What You Know
            lessonGroup-3:
              display_name: Pilot Survey
            lessonGroup-4:
              display_name: Sandbox
          title: Giving Objects State
          description: |-
            In this unit, students create objects and define instance variables to represent attributes. Students explore creating and using constructors to establish values for these attributes and learn how to work with the data stored in objects. Students implement accessor and mutator methods to access and modify the values stored in the instance variables as well as write `toString` methods to output information about the state of the object. While creating and working with objects, students use the `Scanner` class to obtain user input to use as program data, learn about data types, operators, and expressions to store and manipulate data in variables, and develop an understanding of data encapsulation and object-oriented design decisions.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa2-pilot-facilitator/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 1
            * Personal Progress Check 5
            * Personal Progress Check 9

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*
          student_description: In this unit, you create objects and define instance variables to represent attributes. You explore creating and using constructors to establish values for these attributes and learn how to work with the data stored in objects. You implement accessor and mutator methods to access and modify the values stored in the instance variables as well as write `toString` methods to output information about the state of the object. While creating and working with your objects, you use the `Scanner` class to obtain user input to use as program data, learn about data types, operators, and expressions to store and manipulate data in variables, and develop an understanding of data encapsulation and object-oriented design decisions.
          description_short: ''
          description_audience: ''
          name: csa2-pilot-facilitator
        csa3-pilot-facilitator:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          title: Expanding Program Data
          description: |-
            In this unit, students create one-dimensional arrays to store primitive values and object references. Students represent constants using the keyword `final` and data that needs to be shared between objects as static variables. While working with one-dimensional arrays, students use conditionals and iteration to search for values that meet specific criteria or to perform manipulations to solve problems.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa3-pilot-facilitator/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 4
            * Personal Progress Check 6

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*
          student_description: In this unit, you create one-dimensional arrays to store primitive values and object references. You represent constants using the keyword `final` and data that needs to be shared between objects as static variables. While working with one-dimensional arrays, you use conditionals and iteration to search for values that meet specific criteria or to perform manipulations to solve problems.
          description_short: ''
          description_audience: ''
          name: csa3-pilot-facilitator
        csa4-pilot-facilitator:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandbox
            lessonGroup-5:
              display_name: Unit 4 Pilot Survey
          title: Expanding Program Logic
          description: |-
            In this unit, students learn how the use of APIs and libraries can expand the functionalities of their programs. Students learn to use relational and logical operators to expand the decisions for conditionals and iteration. Students use casting operators and `Math` class methods as they evaluate expressions and perform calculations, including implementing random in program decisions and behaviors. While working with compound Boolean expressions and logical operators, students develop an understanding of De Morgan's Laws and writing truth tables. Students use these expanded conditions and expressions to evaluate primitive values and object references and make decisions based on the results.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa4-pilot-facilitator/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 3

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*
          student_description: In this unit, you learn how the use of APIs and libraries can expand the functionalities of your programs. You learn to use relational and logical operators to expand the decisions for conditionals and iteration. You use casting operators and `Math` class methods as you evaluate expressions and perform calculations, including implementing random in program decisions and behaviors. While working with compound Boolean expressions and logical operators, you develop an understanding of De Morgan's Laws and writing truth tables. You use these expanded conditions and expressions to evaluate primitive values and object references and make decisions based on the results.
          description_short: ''
          description_audience: ''
          name: csa4-pilot-facilitator
        csa5-pilot-facilitator:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandbox
            lessonGroup-5:
              display_name: Pilot Survey
          title: Giving Objects Organization
          description: |-
            In this unit, students use two-dimensional (2D) arrays to expand storage and organization capabilities in their programs. Students identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing these data structures. Students traverse 2D arrays using nested `for` loops and nested enhanced `for` loops in row-major and column-major order to apply the standard algorithms they developed in Unit 3 to access and manipulate elements.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa5-pilot-facilitator/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 8

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*
          student_description: In this unit, you use two-dimensional (2D) arrays to expand storage and organization capabilities in their programs. You identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing these data structures. You traverse 2D arrays using nested `for` loops and nested enhanced `for` loops in row-major and column-major order to apply the standard algorithms you developed in Unit 3 to access and manipulate elements.
          description_short: ''
          description_audience: ''
          name: csa5-pilot-facilitator
        poetry-hoc:
          lesson_groups: {}
          name: poetry-hoc
          title: Poetry HoC
          description_audience: ''
          description_short: 'Hour of Code Activity - V2 '
          description: ''
          student_description: ''
        csdu6-playground:
          lesson_groups:
            lessonGroup-3:
              display_name: Templates
            lessonGroup-2:
              display_name: Chapter 1
            lessonGroup-4:
              display_name: Chapter 2
          name: csdu6-playground
          title: CSD Unit 6 Playground
          description_audience: ''
          description_short: CSD U6 Playground. See Dan Schneider for questions
          description: ''
          student_description: CSD U6 Playground. See Dan Schneider for questions
        hello-world-food:
          lesson_groups: {}
          name: hello-world-food
          title: 'Hello World: Food'
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-u7-dev:
          lesson_groups:
            lessonGroup-2:
              display_name: Lessons
            lessonGroup-3:
              display_name: Project
            lessonGroup-4:
              display_name: Demos and Resources
          name: csa-u7-dev
          title: CSA Unit 7 Development
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        tesstest921:
          lesson_groups: {}
          name: tesstest921
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        hello-world-animals:
          lesson_groups: {}
          name: hello-world-animals
          title: 'Hello World: Animals'
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        hello-world-emoji:
          lesson_groups: {}
          name: hello-world-emoji
          title: 'Hello World: Emoji'
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        hello-world-retro:
          lesson_groups: {}
          name: hello-world-retro
          title: 'Hello World: Retro'
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        hello-world-batman:
          lesson_groups: {}
          name: hello-world-batman
          title: Hello World
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        csa4-exemplars:
          lesson_groups:
            lesson group:
              display_name: Content
            content:
              display_name: Content
            show_what_you_know:
              display_name: Show What You Know
            lesson_group:
              display_name: Content
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
          name: csa4-exemplars
          title: Unit 4 - Expanding Program Logic [Exemplars]
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        ai-ethics:
          lesson_groups: {}
          name: ai-ethics
          title: Our AI Code of Ethics
          description_audience: grades 6-12
          description_short: 'In small groups, students conduct research using articles and videos that expose ethical pitfalls in an Artificial Intelligence (AI) area of their choice. '
          description: In small groups, students conduct research using articles and videos that expose ethical pitfalls in an Artificial Intelligence (AI) area of their choice. Afterward, each group develops at least one solution-oriented principle that addresses their chosen area. These principles are then assembled into a class-wide “Our AI Code of Ethics” resource (e.g. a slide presentation, document, or webpage) for AI creators and legislators everywhere.
          student_description: 'Conduct research using articles and videos that expose ethical pitfalls in an Artificial Intelligence (AI) area of your choice. '
        dance-unplugged:
          lesson_groups: {}
          name: dance-unplugged
          title: Dance Party Unplugged
          description_audience: grades K-12
          description_short: 'Learners of all ages get an introductory experience with coding and computer science in a safe, supportive environment and learn to think about controlling actions using events. '
          description: Students will learn that events are a useful way to control when an action happens, and can even be used to make make multiple things act in sync. In programming, you can use events to respond to a user controlling it (like pressing buttons or clicking the mouse). Events can make your program more interesting and interactive.
          student_description: Learn to think about controlling actions using events. Events are widely used in programming and should be easily recognizable after this lesson.
          lessons: {}
        csc-things:
          lesson_groups:
            lessonGroup-2:
              display_name: Scratch Paper
          name: csc-things
          title: 'CSC Brain Dump '
          description_audience: ''
          description_short: ''
          description: 'These are just a work in progress :) '
          student_description: ''
          lessons:
            lesson-2:
              name: book cover
        poetry-hoc2:
          lesson_groups: {}
          name: poetry-hoc2
          title: Poetry HoC v2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        poetry-hoc3:
          lesson_groups: {}
          name: poetry-hoc3
          title: Poetry HoC v3
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        spritelab-effects-challenge:
          lesson_groups: {}
          name: spritelab-effects-challenge
          title: Sprite Effect Challenge
          description_audience: Intermediate/advanced users of Sprite Lab
          description_short: Take the challenge to create your own sprite effect using Sprite Lab!
          description: ''
          student_description: ''
        csa-u8-dev:
          lesson_groups:
            lessonGroup-2:
              display_name: Demos and Resources
          name: csa-u8-dev
          title: CSA Unit 8 Development
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        poem-art:
          lesson_groups: {}
          name: poem-art
          title: Poem Art
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        poetry:
          lesson_groups: {}
          name: poetry
          title: Computer Science and Poetry
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        spelling-bee:
          lesson_groups: {}
          name: spelling-bee
          title: Spelling Bee
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        outbreak-csc:
          lesson_groups: {}
          name: outbreak-csc
          title: Outbreak
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        explore-data-1:
          lesson_groups: {}
          name: explore-data-1
          title: Exploring Box Plots and Histograms
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        counting-csc:
          lesson_groups: {}
          name: counting-csc
          title: Counting with Laurel
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa5-exemplars:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
          name: csa5-exemplars
          title: Unit 5 - Giving Objects Organization [Exemplars]
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-examples-21:
          lesson_groups: {}
          name: csa-examples-21
          title: CSA Unit Project Examples [2021-2022]
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csd-post-survey-2021:
          lesson_groups: {}
          name: csd-post-survey-2021
          title: CS Discoveries Post-Course Survey
          description_audience: ''
          description_short: ''
          description: This unit contains the CS Discoveries Post-Course Survey. This unit can be assigned after students complete their final unit in CS Discoveries.
          student_description: This unit contains a survey for when your class is finished with the units in CS Discoveries. Your teacher will tell you when it's time to take this survey.
          lessons: {}
        csa-pl-test:
          lesson_groups: {}
          name: csa-pl-test
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-pl-module-1-test:
          lesson_groups: {}
          name: csa-pl-module-1-test
          title: Orientation to Code.org and CSA
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-pl-module-2-test:
          lesson_groups: {}
          name: csa-pl-module-2-test
          title: Navigating Code.org’s tools
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-pl-module-3-test:
          lesson_groups: {}
          name: csa-pl-module-3-test
          title: Support with text-based programming
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa6-pilot-facilitator:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          title: Expanding Program Capabilities
          description: |-
            In this unit, students use `ArrayList`s to store program data and differentiate between when to use 1D and 2D arrays and `ArrayList`s. Students explore the benefits and functionality of an `ArrayList`, using these to solve problems involving numerical and object data. Students use methods in the `String` class to analyze and process text obtained from user and file input. Throughout the unit, students write program documentation using single-line comments, multi-line comments, and Javadoc comments to create API documentation. In the process, students identify and document preconditions and postconditions of objects and methods.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa6-pilot-facilitator/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 2
            * Personal Progress Check 7

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*
          student_description: In this unit, you use `ArrayList`s to store program data and differentiate between when to use 1D and 2D arrays and `ArrayList`s. You explore the benefits and functionality of an `ArrayList`, using these to solve problems involving numerical and object data. You use methods in the `String` class to analyze and process text obtained from user and file input. Throughout the unit, you write program documentation using single-line comments, multi-line comments, and Javadoc comments to create API documentation. In the process, you identify and document preconditions and postconditions of objects and methods.
          description_short: ''
          description_audience: ''
          name: csa6-pilot-facilitator
        ai-ethics-2021:
          title: Our AI Code of Ethics
          description: In small groups, students conduct research using articles and videos that expose ethical pitfalls in an Artificial Intelligence (AI) area of their choice. Afterward, each group develops at least one solution-oriented principle that addresses their chosen area. These principles are then assembled into a class-wide “Our AI Code of Ethics” resource (e.g. a slide presentation, document, or webpage) for AI creators and legislators everywhere.
          student_description: 'Conduct research using articles and videos that expose ethical pitfalls in an Artificial Intelligence (AI) area of your choice. '
          description_short: 'In small groups, students conduct research using articles and videos that expose ethical pitfalls in an Artificial Intelligence (AI) area of their choice. '
          description_audience: Grades 6-12
          lesson_groups: {}
          name: ai-ethics-2021
          lessons: {}
        poem-art-2021:
          title: Poem Art
          description: "This lesson can be completed as a 1-hour standalone lesson. There is also an option to use this lesson as the first lesson of the multi-lesson module called [Coding with Poetry](https://studio.code.org/s/poetry). \n\nThe Coding with Poetry is part of Code.org’s [CS Connections](code.org/educate/csc) curriculum, which is meant to integrate CS into other subject areas like math, ELA, and science with alignment to CCSS, NGSS, and CSTA standards. "
          student_description: ''
          description_short: 'This lesson can be completed as a 1-hour standalone lesson. There is also an option to use this lesson as the first lesson of the multi-lesson module called Coding with Poetry. '
          description_audience: ''
          lesson_groups: {}
          name: poem-art-2021
          lessons: {}
        poetry-2021:
          title: Coding with Poetry
          description: "This module is designed to ensure students have a shareable app by the end of each lesson, so each lesson is a potential stopping point. If your class finishes the entire 7-part module, students will write their own poems, investigate word choice, learn how to use prompts and variables, learn how to code conditional statements, and create a poem generator app to share with friends. \n\nThe Coding with Poetry is part of Code.org’s [CS Connections](https://www.code.org/educate/csc) curriculum, which is meant to integrate CS into other subject areas like math, ELA, and science with alignment to CCSS, NGSS, and CSTA standards. \n\n**First time teaching with Code.org?** To get started, watch these videos:\n* [Basic Features of Code.org](https://www.youtube.com/watch?v=lYZq1HVTAIY) \n* [Creating a Class Section](https://youtu.be/4Wugxc80fNU)\n* [The Student Experience](https://youtu.be/wzz3jJZoj20)\n* [Progress, Feedack, and Assessment](https://youtu.be/c0pGfCpd6MI)"
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: poetry-2021
          lessons: {}
        hello-world-food-2021:
          title: 'Hello World: Food'
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: hello-world-food-2021
          lessons: {}
        hello-world-emoji-2021:
          title: 'Hello World: Emoji'
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: hello-world-emoji-2021
          lessons: {}
        hello-world-animals-2021:
          title: 'Hello World: Animals'
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: hello-world-animals-2021
          lessons: {}
        hello-world-retro-2021:
          title: 'Hello World: Retro'
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: hello-world-retro-2021
          lessons: {}
        spelling-bee-2021:
          title: Spelling With Bee
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: spelling-bee-2021
          lessons: {}
        explore-data-1-2021:
          title: Data Visualization
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: explore-data-1-2021
          lessons: {}
        counting-csc-2021:
          title: Counting with Laurel
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: counting-csc-2021
          lessons: {}
        hello-world-gabrielle-validation:
          lesson_groups: {}
          name: hello-world-gabrielle-validation
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa6-exemplars:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
          name: csa6-exemplars
          title: Unit 6 - Expanding Program Capabilities [Exemplars]
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        2022drafting:
          lesson_groups:
            lessonGroup-2:
              display_name: Variables, Pt 2
            lessonGroup-3:
              display_name: Modified Lessons
            lessonGroup-4:
              display_name: Toolboxes, etc.
            lessonGroup-5:
              display_name: Course F Variables (Deprecated)
            lessonGroup-6:
              display_name: Course F For Loops (Deprecated)
            lessonGroup-7:
              display_name: Course E Sprites (Deprecated)
            lessonGroup-8:
              display_name: Hour of Code
          name: 2022drafting
          title: Planning Script for CSF 2022
          description_audience: ''
          description_short: Internal
          description: ''
          student_description: ''
        csa7-exemplars:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
          name: csa7-exemplars
          title: Unit 7 - Expanding Software Design [Exemplars]
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csf-2022-pilot:
          lesson_groups:
            lessonGroup-2:
              display_name: Sprites
            lessonGroup-3:
              display_name: Variables
            lessonGroup-4:
              display_name: End of Course Project
          name: csf-2022-pilot
          title: Course F 2022 Pilot
          description_audience: Fifth grade
          description_short: 'Learn about sprites and variables by programming in Sprite Lab. '
          description: "Learn about sprites and variables by programming in Sprite Lab.  \n\n**Pilot 2022**: Thank you for trying out these new lessons. We appreciate any feedback. This pilot course will be available until June 2022 only. Note that the final version of Course F (2022) will include additional lessons and may have other differences. CS Fundamentals (2022) will launch this summer.\n\nWe need your feedback, especially on the lessons marked **[New]**. If you are eager to start the new lessons, you can give students a basic introduction to Sprite Lab using our  [Hello World](https://code.org/helloworld) Hour of Code tutorial."
          student_description: "Learn about sprites and variables by programming in Sprite Lab. \n\n**Pilot 2022**: Thank you for trying out these new lessons. We appreciate any feedback. This pilot course will be available until June 2022 only."
        csd6-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Chapter 1
            lessonGroup-3:
              display_name: Chapter 2
          name: csd6-pilot-2022
          title: Physical Computing Pilot (2022)
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa8-exemplars:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
          name: csa8-exemplars
          title: Unit 8 - Giving Objects Life [Exemplars]
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        alltheselfpacedplthings:
          lesson_groups: {}
          name: alltheselfpacedplthings
          title: All the Self Paced PL Things
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa7-pilot-facilitator:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          title: Expanding Software Design
          description: In this unit, students practice software design and development using the skills and programming constructs they have learned to develop a title sequence for their favorite content creator. Students use decomposition strategies and object-oriented principles to plan and implement their ideas while ensuring their projects meet specified requirements. Students explore recursive methods by tracing and writing recursive methods and comparing recursive and iterative solutions for efficiency. At the end of the unit, students consider the need for maximizing system reliability as they explore bugs and issues in existing programs.
          student_description: In this unit, you practice software design and development using the skills and programming constructs you have learned to develop a title sequence for your favorite content creator. You use decomposition strategies and object-oriented principles to plan and implement your ideas while ensuring your projects meet specified requirements. You explore recursive methods by tracing and writing recursive methods and comparing recursive and iterative solutions for efficiency. At the end of the unit, you consider the need for maximizing system reliability as you explore bugs and issues in existing programs.
          description_short: ''
          description_audience: ''
          name: csa7-pilot-facilitator
        csa8-pilot-facilitator:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          title: Giving Objects Life
          description: |-
            In this unit, students implement searching and sorting algorithms to work with lists of primitive and object data stored in 1D and 2D arrays and `ArrayList`s. Students analyze the efficiency of searching and sorting algorithms and expand the standard algorithms they have developed throughout the course to solve more complex problems. Throughout the unit, students apply their knowledge and programming skills to develop a game that incorporates object-oriented design and efficiency. Students wrap up the unit and course considering the privacy and security of their programs and users.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa8-pilot-facilitator/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 10

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*
          student_description: In this unit, you implement searching and sorting algorithms to work with lists of primitive and object data stored in 1D and 2D arrays and `ArrayList`s. You analyze the efficiency of searching and sorting algorithms and expand the standard algorithms you have developed throughout the course to solve more complex problems. Throughout the unit, you apply your knowledge and programming skills to develop a game that incorporates object-oriented design and efficiency. You wrap up the unit and course considering the privacy and security of their programs and users.
          description_short: ''
          description_audience: ''
          name: csa8-pilot-facilitator
        csa9-pilot-facilitator:
          title: AP Exam Review and Practice
          description: This unit prepares students for the AP CSA Exam by reviewing concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. Students identify strengths and areas of improvement to create individualized study plans to focus their practice and self-assess their progress.
          student_description: This unit prepares you for the AP CSA Exam by reviewing concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. You identify strengths and areas of improvement to create individualized study plans to focus their practice and self-assess their progress.
          description_short: ''
          description_audience: ''
          lesson_groups:
            lessonGroup-2:
              display_name: Review and Practice
            lessonGroup-3:
              display_name: Mock Exams
          name: csa9-pilot-facilitator
        coursea-2022:
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
            lessonGroup-5:
              display_name: End of Course Project
          title: Course A (2022)
          description: 'Course A offers a computer science curriculum for beginning readers, including Kindergarten students. Students will learn to program using commands like loops and events. The lessons featured in this course also teach students to meaningfully collaborate with others, investigate different problem-solving techniques, persist in the face of challenging tasks, and learn about internet safety. '
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers.
          description_audience: 'Ages: 4-7'
          name: coursea-2022
          lessons: {}
        express-2022:
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_sprites:
              display_name: Sprites
            lessonGroup-9:
              display_name: Events
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            csf_functions:
              display_name: Functions
            csf_variables:
              display_name: Variables
            csf_for_loops:
              display_name: For Loops
            end_of_course_project:
              display_name: End of Course Project
          title: Express Course (2022)
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          description_short: 'An introduction to computer science: combines the best of our elementary school curriculum for older students.'
          description_audience: 'Ages: 9-18'
          name: express-2022
          lessons: {}
        csp1-2022:
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csp_unit1_2020:
              display_name: 'Unit 1: Digital Information'
          title: Digital Information ('22-'23)
          description: 'This unit explores the technical challenges and questions that arise from the need to represent digital information in computers. Learn how complex information like numbers, text, images, and sound are represented in text, how compression works, and the broader social impacts of digitizing the world''s information.

            '
          student_description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers. Learn how complex information like numbers, text, images, and sound are represented in text, how compression works, and the broader social impacts of digitizing the world's information.
          description_short: Explore the challenges and impacts of representing information about the world around you in bits.
          description_audience: ''
          name: csp1-2022
          lessons: {}
        csp2-2022:
          lesson_groups:
            csp_unit2_2020:
              display_name: 'Unit 2: The Internet'
          title: The Internet ('22-'23)
          description: This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.
          student_description: This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.
          description_short: Build the internet from the ground up using the Internet Simulator.
          description_audience: ''
          name: csp2-2022
          lessons: {}
        csp3-2022:
          lesson_groups:
            csp_unit3_2020:
              display_name: 'Unit 3: Intro to App Design'
          title: Intro to App Design ('22-'23)
          description: This unit is an introduction to programming and app design with a heavy focus on important skills like debugging, pair programming, and user testing. Learn how to design user interfaces and write event-driven programs in App Lab and then design a project that teaches your classmates about a topic of your choosing.
          student_description: This unit is an introduction to programming and app design with a heavy focus on important skills like debugging, pair programming, and user testing. Learn how to design user interfaces and write event-driven programs in App Lab and then design a project that teaches your classmates about a topic of your choosing.
          description_short: Design your first app and learn how programmers collaborate and interact with users to build the best possible solutions to problems.
          description_audience: ''
          name: csp3-2022
          lessons: {}
        csp4-2022:
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          title: Variables, Conditionals, and Functions ('22-'23)
          description: This unit explores how variables, conditionals, and functions allow for the design of increasingly complex apps. Learn how to program with these three new concepts through a sequence of collaborative activities. Then build your own decision maker app to share with friends and help them make a decision.
          student_description: This unit explores how variables, conditionals, and functions allow for the design of increasingly complex apps. Learn how to program with these three new concepts through a sequence of collaborative activities. Then build your own decision maker app to share with friends and help them make a decision.
          description_short: Learn how to build apps that store information, make decisions, and keep code organized.
          description_audience: ''
          name: csp4-2022
          lessons: {}
        csp5-2022:
          lesson_groups:
            csp_lists:
              display_name: Lists
            csp_loops:
              display_name: Loops
            csp_traversals:
              display_name: Traversals
            csp_project:
              display_name: Project
            lessonGroup-5:
              display_name: Post-Course Survey
          title: Lists, Loops, and Traversals ('22-'23)
          description: This unit introduces lists, loops, and traversals, and explores the way they can be used to build apps that store and process large amounts of information. Learn to program with the data library in App Lab and complete a 5-day hackathon project at the end of the unit where you can design a program about any topic of your choosing.
          student_description: This unit introduces lists, loops, and traversals, and explores the way they can be used to build apps that store and process large amounts of information. Learn to program with the data library in App Lab and complete a 5-day hackathon project at the end of the unit where you can design a program about any topic of your choosing.
          description_short: Learn how to build apps that use lists, loops, and traversals to store and process large amounts of information.
          description_audience: ''
          name: csp5-2022
          lessons: {}
        courseb-2022:
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_impacts:
              display_name: Impacts of Computing
            csf_events:
              display_name: Events
            lessonGroup-6:
              display_name: End of Course Project
          title: Course B (2022)
          description: We developed Course B with first graders in mind. While the concepts in Course B parallel those in Course A, students learn more sophisticated unplugged activities and work through a greater variety of puzzles. Students will learn the basics of programming, collaboration techniques, investigation and critical thinking skills, persistence in the face of difficulty, and internet safety. At the end of this course, students create games in the Play Lab programming environment.
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers. Similar to Course A, but with added concept depth.
          description_audience: 'Ages: 5-8'
          name: courseb-2022
          lessons: {}
        coursec-2022:
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
            csf_data:
              display_name: Data
            end_of_course_project:
              display_name: End of Course Project
          title: Course C (2022)
          description: We developed Course C for students in second grade. Students will create programs with sequencing, loops, and events. They will investigate problem-solving techniques and develop strategies for building positive communities both online and offline. By the end of the course, students will create interactive games that they can share.
          student_description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description_audience: 'Ages: 6-10'
          name: coursec-2022
          lessons: {}
        csp6-2022:
          lesson_groups:
            csp_unit6_2020:
              display_name: 'Unit 6: Algorithms'
            lessonGroup-2:
              display_name: Post-Course Survey
          title: Algorithms ('22-'23)
          description: This unit is a quick exploration of how computer scientists design algorithms to solve problems and how they analyze the speed of different algorithms. Learn about the concept of algorithmic efficiency through a variety of hands-on activities and learn how it's being applied in modern computing.
          student_description: This unit is a quick exploration of how computer scientists design algorithms to solve problems and how they analyze the speed of different algorithms. Learn about the concept of algorithmic efficiency through a variety of hands-on activities and learn how it's being applied in modern computing.
          description_short: Design and analyze algorithms to understand how they work and why some are considered better than others.
          description_audience: ''
          name: csp6-2022
          lessons: {}
        csp7-2022:
          lesson_groups:
            csp_parameters_return_values:
              display_name: Parameters and Return Values
            csp_libraries:
              display_name: Libraries
            lessonGroup-3:
              display_name: Post-Course Survey
          title: Parameters, Return, and Libraries ('22-'23)
          description: This unit introduces parameters, return, and libraries. Learn how to use these concepts to build new kinds of apps as well as libraries of code that you can share with your classmates. End the unit by designing a library of functions around any topic of your choosing.
          student_description: This unit introduces parameters, return, and libraries. Learn how to use these concepts to build new kinds of apps as well as libraries of code that you can share with your classmates. End the unit by designing a library of functions around any topic of your choosing.
          description_short: Learn how to design clean and reusable code that you can share with a single classmate or the entire world.
          description_audience: ''
          name: csp7-2022
          lessons: {}
        csp8-2022:
          title: Create PT Prep ('22-'23)
          description: "In this unit prepare for, and do the AP Create Performance Task. Each lesson contains links to helpful documents and activities to help you understand the task and develop a plan for completing it.\r\n\r\n"
          student_description: 'In this unit prepare for, and do the AP Create Performance Task. Each lesson contains links to helpful documents and activities to help you understand the task and develop a plan for completing it.

            '
          description_short: Practice and complete the Create Performance Task (PT).
          description_audience: ''
          lesson_groups:
            lessonGroup-2:
              display_name: Create PT
            lessonGroup-3:
              display_name: Post-Course Survey
          name: csp8-2022
          lessons: {}
        csp9-2022:
          lesson_groups:
            csp_unit9_2020:
              display_name: 'Unit 9: Data'
            lessonGroup-2:
              display_name: Post-Course Survey
          title: Data ('22-'23)
          description: 'In this unit learn how data analysis helps turn raw data into useful information about the world. Learn how to use data visualization to find patterns inside of data sets and learn how this data analysis process is being used in contexts like open data or machine learning to help make decisions or learn more about our world. In the unit project, you''ll analyze a dataset of your choosing and present your findings. '
          student_description: 'In this unit learn how data analysis helps turn raw data into useful information about the world. Learn how to use data visualization to find patterns inside of data sets and learn how this data analysis process is being used in contexts like open data or machine learning to help make decisions or learn more about our world. In the unit project, you''ll analyze a dataset of your choosing and present your findings. '
          description_short: Explore and visualize datasets from a wide variety of topics as you hunt for patterns and try to learn more about the world around you.
          description_audience: ''
          name: csp9-2022
          lessons: {}
        csp10-2022:
          lesson_groups:
            csp_unit10_2020:
              display_name: 'Unit 10: Cybersecurity and Global Impacts'
            lessonGroup-2:
              display_name: Post-Course Survey
          title: Cybersecurity and Global Impacts ('22-'23)
          description: "In this unit learn how computing innovations have impacted our world in beneficial and harmful ways. Learn how data can pose a threat to our privacy and security and the ways that encryption and other techniques are used to protect it. Throughout the unit participate in a \"school of the future\" conference in which you and a team make a proposal for how best to improve school life with computing innovations.\n\n"
          student_description: 'In this unit learn how computing innovations have impacted our world in beneficial and harmful ways. Learn how data can pose a threat to our privacy and security and the ways that encryption and other techniques are used to protect it. Throughout the unit participate in a "school of the future" conference in which you and a team make a proposal for how best to improve school life with computing innovations.

            '
          description_short: Research and debate current events at the intersection of data, public policy, law, ethics, and societal impact.
          description_audience: ''
          name: csp10-2022
          lessons: {}
        coursed-2022:
          lesson_groups:
            lessonGroup-6:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_events:
              display_name: Events
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            end_of_course_project:
              display_name: End of Course Project
          title: Course D (2022)
          description: 'We created course D for students in third grade.  The course begins with a review of the concepts found in earlier courses, including loops and events. Afterward, students will develop their understanding of algorithms, nested loops, while loops, conditionals, and more. '
          student_description: Learn about loops, conditionals, and events. Beyond coding, learn about digital citizenship.
          description_short: Learn about conditional statements. Create your own art, games, and even a dance party.
          description_audience: 'Ages: 7-11'
          name: coursed-2022
          lessons: {}
        coursee-2022:
          lesson_groups:
            csf_sprites:
              display_name: Sprites
            csf_digcit:
              display_name: Digital Citizenship
            ramp_up:
              display_name: Nested Loops
            csf_functions:
              display_name: Functions
            csf_nested_loops:
              display_name: Conditionals
            lessonGroup-7:
              display_name: Impacts of Computing
            end_of_course_project:
              display_name: End of Course Project
            lessonGroup-8:
              display_name: Deprecated
          title: Course E (2022)
          description: We created Course E for students in fourth grade. The course begins with an introduction to the Sprite Lab programming tool. Students will learn to make fun, interactive projects that reinforce what they’ll learn about online safety. Following these lessons, students will engage in more complex coding. Students will learn about nested loops, functions, and conditionals. By the end of the course, students will combine these concepts to solve challenging puzzles. The course ends with an open-ended project where students create a game or drawing.
          student_description: Start coding with algorithms, events, loops, conditionals, and functions! By the end of this course, design and create a game or drawing that you can share with your friends and family.
          description_short: Learn the basics of sprites, nested loops, and functions.
          description_audience: 'Ages: 8-12'
          name: coursee-2022
          lessons: {}
        coursef-2022:
          lesson_groups:
            ramp_up:
              display_name: Sprites
            lessonGroup-7:
              display_name: Digital Citizenship
            lessonGroup-8:
              display_name: Variables
            csf_variables:
              display_name: Deprecated
            csf_data:
              display_name: Data and Simulations
            end_of_course_project:
              display_name: End of Course Project
          title: Course F (2022)
          description: We created Course F for students in the fifth grade. The course begins by looking at how users make choices in the apps they use. Students then learn to make a variety of Sprite Lab apps that also offer choices for the user. In the later lessons in the course, students will learn about variables in a variety of contexts. Students are given greater autonomy and more choices throughout this course. By the end of the course, students will have created interactive projects to share with their friends and family.
          student_description: Learn to code with sprites and variables, and discuss societal impacts of computing and the internet. By the end of this course, design and create a project you can share with friends and family.
          description_short: Learn all the concepts in Computer Science Fundamentals and create your own art, story or game.
          description_audience: 'Ages: 9-13'
          name: coursef-2022
          lessons: {}
        csp-post-survey-2021:
          lesson_groups: {}
          name: csp-post-survey-2021
          title: CS Principles Post-Course Survey
          description_audience: ''
          description_short: ''
          description: This unit contains the CS Principles Post-Course Survey.
          student_description: This unit contains a survey about the CS Principles Course. Your teacher will tell you when it's time to take this survey.
        csa1-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
            lessonGroup-5:
              display_name: Survey
          name: csa1-2022
          title: Object-Oriented Programming ('22-'23)
          description_audience: ''
          description_short: Students learn fundamental Java concepts, discover their identity as software engineers, and use debugging strategies and code reviews to improve their programming skills.
          description: |-
            This unit exposes students to object-oriented programming principles as they explore The Neighborhood. Students learn fundamental Java concepts as they navigate and interact with The Neighborhood with `Painter` objects and create new types of `Painter`s to expand the capabilities of their programs. Students practice predicting the outcome of program code and use their `Painter` objects with conditional statements, `while` loops, and Boolean expressions to navigate mazes and create drawings. While students work with the `Painter`, they practice identifying syntax and logic errors to explain why code segments will not compile or work as intended. Additionally, students learn to document program code using comments to describe the behavior of specific code segments. Throughout this unit, students discover their identity as software engineers and use debugging strategies and code reviews to improve their programming skills.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa1-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went.
          student_description: This unit exposes you to object-oriented programming principles as you explore The Neighborhood. You learn fundamental Java concepts as you navigate and interact with The Neighborhood with `Painter` objects and create new types of `Painter`s to expand the capabilities of your programs. You practice predicting the outcome of program code and use your `Painter` objects with conditional statements, `while` loops, and Boolean expressions to navigate mazes and create drawings. While you work with the `Painter`, you practice identifying syntax and logic errors to explain why code segments will not compile or work as intended. Additionally, you learn to document program code using comments to describe the behavior of specific code segments. Throughout this unit, you discover your identity as a software engineer and use debugging strategies and code reviews to improve your programming skills.
          lessons: {}
        pre-express-2022:
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
          name: pre-express-2022
          title: Pre-reader Express (2022)
          description_audience: 'Ages: 4-8'
          description_short: 'An introduction to computer science for pre-readers: combines the best of our kindergarten and first grade courses.'
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          lessons: {}
        csa2-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
          name: csa2-2022
          title: Class Structure and Design ('22-'23)
          description_audience: ''
          description_short: Students develop an understanding of data encapsulation and object-oriented design decisions.
          description: |-
            This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as students develop classes with attributes and behaviors and work with primitive and object data. Students learn to work with variables and user input as they develop and utilize classes and objects to represent desserts, customers, and food trucks for the Project Mercury Pastries Food Truck business. As students work with the `Dessert` class, they build on their knowledge of inheritance to design subclasses that represent specific types of desserts. While working with variables, students learn to create and evaluate expressions using assignment and relational operators and trace code segments to determine the result of output. Throughout this unit, students continue to develop software engineering skills as they learn to use UML diagrams to represent classes and the DRY principle to refactor program code.

            ###AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa2-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:

            * Personal Progress Check 1
            * Personal Progress Check 5
            * Personal Progress Check 9

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went.
          student_description: This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as you develop classes with attributes and behaviors and work with primitive and object data. You learn to work with variables and user input as you develop and utilize classes and objects to represent desserts, customers, and food trucks for the Project Mercury Pastries Food Truck business. As you work with the `Dessert` class, you build on your knowledge of inheritance to design subclasses that represent specific types of desserts. While working with variables, you learn to create and evaluate expressions using assignment and relational operators and trace code segments to determine the result of output. Throughout this unit, you continue to develop software engineering skills as you learn to use UML diagrams to represent classes and the DRY principle to refactor program code.
          lessons: {}
        csa3-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
          name: csa3-2022
          title: Arrays and Algorithms ('22-'23)
          description_audience: ''
          description_short: Students use one-dimensional (1D) arrays to store lists of primitive values and object references.
          description: |-
            This unit introduces students to data structures to store primitive values and object references. Students use one-dimensional (1D) arrays to represent lists of data while expanding their knowledge of loops and conditionals to analyze and process data in a 1D array. Students learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, students develop and modify standard algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. As part of the planning process, students identify the preconditions and postconditions that an algorithm must satisfy. Additionally, students learn to use the `static` and `final` keywords to create static variables to represent values shared with all classes and constants to represent values that cannot be changed.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa3-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 4
            * Personal Progress Check 6

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went.
          student_description: This unit introduces you to data structures to store primitive values and object references. You use one-dimensional (1D) arrays to represent lists of data while expanding your knowledge of loops and conditionals to analyze and process data in a 1D array. You learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, you develop and modify standard algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. As part of the planning process, you identify the preconditions and postconditions that an algorithm must satisfy. Additionally, you learn to use the `static` and `final` keywords to create static variables to represent values shared with all classes and constants to represent values that cannot be changed.
          lessons: {}
        tessplayground:
          lesson_groups: {}
          name: tessplayground
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        cs4all-invasive-species:
          lesson_groups:
            lessonGroup-2:
              display_name: Collection 1
            lessonGroup-3:
              display_name: Collection 2
            lessonGroup-4:
              display_name: Collection 3
            lessonGroup-5:
              display_name: Collection 4
            lessonGroup-6:
              display_name: Collection 5
          name: cs4all-invasive-species
          title: 'Invasive Species '
          description_audience: ''
          description_short: 'This is a NSF funded research grant for CS4All '
          description: 'This integrated Science+CS module invites students to learn about impacts of invasive species on their environment and to consider ways that computers might help. Please review [Lesson 0: Getting Started](https://docs.google.com/document/d/1EROJbMkqi-cs8grmyre5cgv91jCcerF2oVNEXgSNL6I/edit?usp=sharing) to learn about the module.'
          student_description: ''
          lessons:
            lesson-21:
              name: Getting Started
        csa4-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
          name: csa4-2022
          title: Conditions and Logic ('22-'23)
          description_audience: ''
          description_short: Students improve decision-making in their programs using relational and logical operators to evaluate primitive values and object references and use the Math class to perform calculations and generate random numbers.
          description: "This unit revisits the use of packages to access existing functionalities in their programs, such as The Neighborhood, to expand their knowledge of APIs and libraries and explore The Theater. With The Theater, students learn to improve the decisions made in conditionals and loops with relational and logical operators to evaluate primitive values and object references. While working with conditionals and logical operators, students expand their knowledge of the `static` keyword to write static methods and explore their functionality. Additionally, students use casting operators and `Math` class methods to evaluate expressions and perform calculations, including incorporating random in program decisions and behaviors. While working with compound Boolean expressions and logical operators, students develop an understanding of De Morgan’s Laws and learn how to evaluate truth tables.\n\n### AP Classroom Personal Progress Checks\nTo assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org\t/s/csa4-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n* Personal Progress Check 3\n\n***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit revisits the use of packages to access existing functionalities in your programs, such as The Neighborhood, to expand your knowledge of APIs and libraries and explore The Theater. With The Theater, you learn to improve the decisions made in conditionals and loops with relational and logical operators to evaluate primitive values and object references. While working with conditionals and logical operators, you expand your knowledge of the `static` keyword to write static methods and explore their functionality. Additionally, you use casting operators and `Math` class methods to evaluate expressions and perform calculations, including incorporating random in program decisions and behaviors. While working with compound Boolean expressions and logical operators, you develop an understanding of De Morgan's Laws and learn how to evaluate truth tables.
          lessons: {}
        csa5-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know Week
            lessonGroup-4:
              display_name: Sandboxes
          name: csa5-2022
          title: Two-Dimensional Arrays ('22-'23)
          description_audience: ''
          description_short: Students use two-dimensional (2D) arrays to expand storage and organization capabilities in their programs.
          description: |-
            This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. Students identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As students analyze problems involving 2D arrays, they revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. Students apply these concepts to manipulate pixels and in The Theater to create image filters in addition to working with primitive values and various object references. Additionally, students use the programming knowledge and skills they have acquired to consider the impacts of programs on society, economies, and culture.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa5-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:

            * Personal Progress Check 8

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went.
          student_description: This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. You identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As you analyze problems involving 2D arrays, you revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. You apply these concepts to manipulate pixels using The Theater to create image filters in addition to working with primitive values and various object references. Additionally, you use the programming knowledge and skills you have acquired to consider the impacts of programs on society, economies, and culture.
          lessons: {}
        tess-test-csa:
          lesson_groups: {}
          name: tess-test-csa
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa1-2022-exemplars:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
          name: csa1-2022-exemplars
          title: Unit 1 - Object-Oriented Programming [Exemplars]
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        pltess:
          lesson_groups:
            lessonGroup-2:
              display_name: Tess lesson
          name: pltess
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        pltess2:
          lesson_groups: {}
        self-paced-pl-csa1-2022:
          lesson_groups: {}
          name: self-paced-pl-csa1-2022
          title: 'Module 1: Welcome'
          description_audience: ''
          description_short: ''
          description: |-
            This module is for anyone using these professional learning modules for CSA.

            **You will:**
            * Get an introduction to Code.org.
            * Learn how to engage in these professional learning modules.
            * Get an introduction to the AP Computer Science A course
            * Learn Code.org’s curricular approach to CSA

            **Estimated Time:** 60 minutes
          student_description: |-
            This module is for anyone using these professional learning modules for CSA.

            **You will:**
            * Get an introduction to Code.org.
            * Learn how to engage in these professional learning modules.
            * Get an introduction to the AP Computer Science A course
            * Learn Code.org’s curricular approach to CSA

            **Estimated Time:** 60 minutes
        self-paced-pl-csa2-2022:
          lesson_groups: {}
          name: self-paced-pl-csa2-2022
          title: 'Module 2: Navigating Code.org'
          description_audience: ''
          description_short: ''
          description: "This module is intended for teachers who are new to Code.org and the Code.org platform. \n\n**You will:**\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching the course.\n\n**Estimated Time:** 70 minutes\n"
          student_description: |-
            This module is intended for teachers who are new to Code.org and the Code.org platform.

            **You will:**
            * Navigate the Code.org website and teacher tools.
            * Set up a classroom section.
            * Locate and use course lesson plans and teacher resources.
            * Learn how to access support while teaching the course.

            **Estimated Time:** 70 minutes
        self-paced-pl-csa3-2022:
          lesson_groups: {}
          name: self-paced-pl-csa3-2022
          title: 'Module 3: Support for text-based programming'
          description_audience: ''
          description_short: ''
          description: |
            This module is for any teacher who is experienced in using variables, conditionals, loops and arrays in other programming languages, but is new to Java.

            **You will:**
            * Create a new file in the Java Lab IDE
            * Become familiar with the basics of Java syntax
            * Declare and initialize variables
            * Use variables in arithmetic operations
            * Print variables and text to the console
            * Write and read if, if-else, if-else-if-else statements
            * Read, write, and debug for loops in Java
            * Declare and  initialize a 1D array of primitive data types
            * Access and modify elements in arrays
            * Traverse arrays

            **Estimated Time:** 7.5 hours
          student_description: |
            This module is for any teacher who is experienced in using variables, conditionals, loops and arrays in other programming languages, but is new to Java.

            **You will:**
            * Create a new file in the Java Lab IDE
            * Become familiar with the basics of Java syntax
            * Declare and initialize variables
            * Use variables in arithmetic operations
            * Print variables and text to the console
            * Write and read if, if-else, if-else-if-else statements
            * Read, write, and debug for loops in Java
            * Declare and  initialize a 1D array of primitive data types
            * Access and modify elements in arrays
            * Traverse arrays

            **Estimated Time:** 7.5 hours
        csa7-pilot-extra:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          title: 'Expanding Software Design '
          description: In this unit, students practice software design and development using the skills and programming constructs they have learned to develop a title sequence for their favorite content creator. Students use decomposition strategies and object-oriented principles to plan and implement their ideas while ensuring their projects meet specified requirements. Students explore recursive methods by tracing and writing recursive methods and comparing recursive and iterative solutions for efficiency. At the end of the unit, students consider the need for maximizing system reliability as they explore bugs and issues in existing programs.
          student_description: In this unit, you practice software design and development using the skills and programming constructs you have learned to develop a title sequence for your favorite content creator. You use decomposition strategies and object-oriented principles to plan and implement your ideas while ensuring your projects meet specified requirements. You explore recursive methods by tracing and writing recursive methods and comparing recursive and iterative solutions for efficiency. At the end of the unit, you consider the need for maximizing system reliability as you explore bugs and issues in existing programs.
          description_short: ''
          description_audience: ''
          name: csa7-pilot-extra
        csa8-pilot-extra:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Pilot Survey
            lessonGroup-5:
              display_name: Sandbox
          title: Giving Objects Life
          description: In this unit, students implement searching and sorting algorithms to work with lists of primitive and object data stored in 1D and 2D arrays and `ArrayList`s. Students analyze the efficiency of searching and sorting algorithms and expand the standard algorithms they have developed throughout the course to solve more complex problems. Throughout the unit, students apply their knowledge and programming skills to develop a game that incorporates object-oriented design and efficiency. Students wrap up the unit and course considering the privacy and security of their programs and users.
          student_description: In this unit, you implement searching and sorting algorithms to work with lists of primitive and object data stored in 1D and 2D arrays and `ArrayList`s. You analyze the efficiency of searching and sorting algorithms and expand the standard algorithms you have developed throughout the course to solve more complex problems. Throughout the unit, you apply your knowledge and programming skills to develop a game that incorporates object-oriented design and efficiency. You wrap up the unit and course considering the privacy and security of their programs and users.
          description_short: ''
          description_audience: ''
          name: csa8-pilot-extra
        csa-backpack-2022:
          lesson_groups: {}
          name: csa-backpack-2022
          title: CSA Backpack Versions ['22-'23]
          description_audience: ''
          description_short: ''
          description: Versions of classes students have in their **Backpack** throughout the course.
          student_description: ''
        csd6-projects:
          lesson_groups: {}
          name: csd6-projects
          title: CSD Unit 6 Projects
          description_audience: ''
          description_short: ''
          description: These are the new projects for the CS Discoveries Physical Computing unit. This unit exists to help playtesting the new MicroBit features in the Code.org platform
          student_description: ''
        coursef-2022-pilot:
          lesson_groups:
            lessonGroup-7:
              display_name: Digital Citizenship
            ramp_up:
              display_name: Sprites
            lessonGroup-8:
              display_name: Variables
            csf_data:
              display_name: Data and Simulations
            end_of_course_project:
              display_name: End of Course Project
          name: coursef-2022-pilot
          title: Course F (2022)
          description_audience: 'Ages: 9-13'
          description_short: Learn all the concepts in Computer Science Fundamentals and create your own art, story or game.
          description: |
            We created Course F for students in the fifth grade. The course begins by looking at how users make choices in the apps they use. Students then learn to make a variety of Sprite Lab apps that also offer choices for the user. In the later lessons in the course, students will learn about variables in a variety of contexts. Students are given greater autonomy and more choices throughout this course. By the end of the course, students will have created interactive projects to share with their friends and family.

            ## Spring 2022 Open Preview
            This new version of Course F includes three new lessons, and we need your feedback! The new lessons are:
            * Lesson 9 - Lots of Sprites - [give feedback](https://docs.google.com/forms/d/e/1FAIpQLSdgGilUP1l2i7Cie_kojOBjq_UMVDA8O1NFX4hLt4Ts4IMvnQ/viewform)
            * Lesson 10 - Counting with Variables - [give feedback](https://docs.google.com/forms/d/e/1FAIpQLSeuqnSbdJEgUY9paU2HNLN0RymYogBIRYrAtttTg826QXjK0w/viewform)
            * Lesson 11 - Mini-Project: Collector Game - [give feedback](https://docs.google.com/forms/d/e/1FAIpQLSe5IU4p57sowVOUuJyk_1Nv_R8XwELRwto75zPdre50aYy9DA/viewform)

            Please note that these new lessons may change between now and July 2022. We appreciate any feedback. Courses A-E of CS Fundamentals (2022) will launch in July 2022.

            We have also added a full slide deck covering all lessons in Course F. We welcome your [feedback](https://docs.google.com/forms/d/e/1FAIpQLScDJ_UUYW1fw36uCiupsB96F8O8zoiSuppGQ7YrQfVn0ma_5w/viewform) on the lesson slides as well!
          student_description: Learn to code with sprites and variables, and discuss societal impacts of computing and the internet. By the end of this course, design and create a project you can share with friends and family.
        csa6-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
            lessonGroup-5:
              display_name: Sandbox
          title: ArrayLists and String Methods ('22-'23)
          description: |-
            This unit continues to expand on data structures to introduce students to creating lists using the `ArrayList` class. In the process, students learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. Students differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. Students apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, students learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, students further develop software engineering skills by writing Javadoc comments to create API documentation for their programs.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa6-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 2
            * Personal Progress Check 7

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went.
          student_description: This unit continues to expand on data structures to introduce you to creating lists using the `ArrayList` class. In the process, you learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. You differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. You apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, you learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, you further develop software engineering skills by writing Javadoc comments to create API documentation for your programs.
          description_short: Students use ArrayLists to store program data and work with methods in the String class to manipulate and evaluate String objects.
          description_audience: ''
          name: csa6-2022
          lessons: {}
        csa7-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
            lessonGroup-5:
              display_name: Sandbox
          title: Method Decomposition and Recursion ('22-'23)
          description: |-
            This unit allows students to practice software design and development using the skills they have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. Students use decomposition strategies and object-oriented principles to plan and implement their ideas while ensuring their projects meet specified requirements. In the process, students learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, students practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, students consider the need for maximizing system reliability as they explore bugs and issues in existing programs.

            ###AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa7-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went.
          student_description: This unit allows you to practice software design and development using the skills you have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. You use decomposition strategies and object-oriented principles to plan and implement your ideas while ensuring your project meet specified requirements. In the process, you learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, you practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, you consider the need for maximizing system reliability as you explore bugs and issues in existing programs.
          description_short: Students practice software design and development using the skills and programming constructs they have learned and explore recursion.
          description_audience: ''
          name: csa7-2022
          lessons: {}
        csa8-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
            lessonGroup-5:
              display_name: Survey
          title: Searching and Sorting ('22-'23)
          description: |-
            This unit expands on algorithms students have learned to introduce common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, students analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, students apply their programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, students consider the privacy and security of programs and users.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa8-pilot-facilitator/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 10

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=8) to let the Code.org curriculum team know how the unit went.
          student_description: In this unit, you expand on the algorithms you have learned to explore common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, you analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, you apply your programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, you consider the privacy and security of programs and users.
          description_short: ''
          description_audience: ''
          name: csa8-2022
          lessons: {}
        ui-test-csa-family-script:
          lesson_groups: {}
          name: ui-test-csa-family-script
          title: UI Test CSA Family Script
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-preview:
          lesson_groups: {}
          name: csa-preview
          title: CSA Curriculum and Tools Preview
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd1-summer-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: vpl-csd1-summer-pilot-2022
          title: 'Module 1: Introduction to CS Discoveries '
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd2-summer-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: vpl-csd2-summer-pilot-2022
          title: 'Module 2: Tools and Instructional Strategies'
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd3-summer-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: vpl-csd3-summer-pilot-2022
          title: 'Module 3: Classroom Context and Culture'
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd4-summer-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Curriculum Investigation
          name: vpl-csd4-summer-pilot-2022
          title: 'Module 4: Planning and Practicing '
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd5-summer-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
          name: vpl-csd5-summer-pilot-2022
          title: 'Module 5: Preparing to Teach CS Discoveries'
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa2-2022-exemplars:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
          name: csa2-2022-exemplars
          title: Unit 2 - Class Structure and Design [Exemplars]
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        k5-onlinepd-2022:
          lesson_groups:
            Implementing and Teaching CS:
              display_name: 'Part I:  Teaching and Implementing Computer Science'
            k5_basic_concepts_1:
              display_name: 'Part II:  Concepts in Courses A - F'
            k5_next_steps_1:
              display_name: 'Part III:  Next Steps'
          title: Teaching Computer Science Fundamentals ('22-'23)
          description: "Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! \n"
          student_description: 'Welcome to Code.org’s free online educator course for CS Fundamentals! '
          description_short: 'Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! '
          description_audience: 'Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! '
          name: k5-onlinepd-2022
        vpl-csd1-ci-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching Problem Solving and Computing
          name: vpl-csd1-ci-pilot-2022
          title: Preparing to Teach Problem Solving and Computing
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Problem Solving and Computing unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Problem Solving and Computing.\n* Practice key concepts included in the unit.\n* Explore end of chapter projects.\n\n**Suggested time:** 30 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Problem Solving and Computing unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Problem Solving and Computing.\n* Practice key concepts included in the unit.\n* Explore end of chapter projects.\n\n**Suggested time:** 30 minutes"
          lessons: {}
        vpl-csd2-ci-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching Web Development
          name: vpl-csd2-ci-pilot-2022
          title: Preparing to Teach Web Development
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Web Development unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Web Development.\n* Practice key concepts included in the unit.\n* Engage with Web Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 90 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Web Development unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Web Development.\n* Practice key concepts included in the unit.\n* Engage with Web Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 90 minutes"
          lessons: {}
        vpl-csd3-ci-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach Interactive Animations and Games
          name: vpl-csd3-ci-pilot-2022
          title: 'Preparing to Teach Interactive Animations and Games '
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Interactive Animations and Games unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Interactive Animations and Games.\n* Practice key concepts included in the unit.\n* Engage with Game Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 120 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Interactive Animations and Games unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Interactive Animations and Games.\n* Practice key concepts included in the unit.\n* Engage with Game Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 120 minutes"
          lessons: {}
        vpl-csd4-ci-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach the Design Process
          name: vpl-csd4-ci-pilot-2022
          title: Preparing to Teach The Design Process
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Design Process unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to The Design Process.\n* Practice key concepts included in the unit.\n* Engage with App Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 90 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Design Process unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to The Design Process.\n* Practice key concepts included in the unit.\n* Engage with App Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 90 minutes"
          lessons: {}
        vpl-csd5-ci-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching Data and Society
          name: vpl-csd5-ci-pilot-2022
          title: Preparing to Teach Data and Society
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Data and Society unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Data and Society.\n* Practice key concepts included in the unit.\n* Explore end of chapter projects.\n\n**Suggested time:** 60 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Data and Society unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Data and Society.\n* Practice key concepts included in the unit.\n* Explore end of chapter projects.\n\n**Suggested time:** 60 minutes"
          lessons: {}
        vpl-csd6-ci-pilot-2022:
          lesson_groups: {}
          name: vpl-csd6-ci-pilot-2022
          title: Preparing to Teach Physical Computing
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Physical Computing unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Physical Computing.\n* Practice key concepts included in the unit.\n* Engage with the maker app.\n* Explore end of chapter projects.\n\n**Suggested time:** 90 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Physical Computing unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Physical Computing.\n* Practice key concepts included in the unit.\n* Engage with the maker app.\n* Explore end of chapter projects.\n\n**Suggested time:** 90 minutes"
        vpl-csd7-ci-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching AI and machine learning
          name: vpl-csd7-ci-pilot-2022
          title: Preparing to Teach AI and Machine Learning
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to AI and Machine Learning.\n* Practice key concepts included in the unit.\n* Engage with AI Lab and App Lab.\n* Explore end of chapter projects.\n* Make a plan for implementing the unit with your students.\n\n**Suggested time:** 120 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to AI and Machine Learning.\n* Practice key concepts included in the unit.\n* Engage with AI Lab and App Lab.\n* Explore end of chapter projects.\n* Make a plan for implementing the unit with your students.\n\n**Suggested time:** 120 minutes"
          lessons: {}
        hello-world-csc:
          lesson_groups: {}
          name: hello-world-csc
          title: Hello World
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        csd-playground:
          lesson_groups: {}
          name: csd-playground
          title: CSD Playground
          description_audience: Curriculum Writers
          description_short: For staging updates to lessons or levels between curriculum versions
          description: For staging updates to lessons or levels between curriculum versions
          student_description: ''
          lessons:
            lesson-7:
              name: Intro to Sprites
            lesson-8:
              name: Physical Computing PSP
            lesson-9:
              name: Microbit Playground
            lesson-10:
              name: Pulse Survey to Clone
            lesson-12:
              name: AI Playground
            lesson-13:
              name: Gen AI Blocks Playground
            lesson-14:
              name: Test micro:bit lesson
            lesson-15:
              name: Testing Slides Lesson Plan
            lesson-17:
              name: Showin Emma How Cool I Am
        csc-pilot-2022-ecosystems:
          lesson_groups: {}
          name: csc-pilot-2022-ecosystems
          title: Ecosystems
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        csc-pilot-2022-timecapsule:
          lesson_groups: {}
          name: csc-pilot-2022-timecapsule
          title: Time Capsule
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        csc-pilot-2022-starquilts:
          lesson_groups: {}
          name: csc-pilot-2022-starquilts
          title: Star Quilts Module
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        csc-pilot-2022-fables:
          lesson_groups: {}
          name: csc-pilot-2022-fables
          title: Fables
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons: {}
        csd1-2022:
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csd1_1:
              display_name: 'Chapter 1: The Problem Solving Process'
            csd1_2:
              display_name: 'Chapter 2: Computers and Problem Solving'
            csd1_3:
              display_name: Alternate Lessons
          title: Problem Solving and Computing ('22-'23)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n**Implementation Guidance for Problem Solving and Computing**\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- You can view the full [Curriculum Guide](https://docs.google.com/document/d/1VUbXHxXqHj5QCb4eSb756KKc7NDzbOLZUE5bPPQmJR8/preview) and [Implementation Guide](https://docs.google.com/document/d/112OA3_KbicOotqopqUyvXoWPWszz3_LHeMlg0ikCabk/preview) for more information about this unit\n"
          student_description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.\r\n"
          description_short: "  Learn how humans work with computers to solve problems."
          description_audience: ''
          name: csd1-2022
          lessons: {}
        csd2-2022:
          lesson_groups:
            csd2_1v2:
              display_name: 'Chapter 1: Creating Webpages'
            csd2_2v2:
              display_name: 'Chapter 2: Multi-page Websites'
            cspSurvey:
              display_name: Survey
          title: Web Development ('22-'23)
          description: |-
            In Web Development, students are empowered to create and share content on their own web pages. They begin by thinking about the role of the web and how it can be used as a medium for creative expression. As students develop their pages and begin to see themselves as programmers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem solving as it relates to programming while they learn valuable skills such as debugging, using resources, and teamwork. At the conclusion of the unit, students will have created a personal website they can publish and share.


            **Implementation Guidance for Web Development**
            - Complete the first three lessons of the Problem Solving and Computing unit before starting
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1WGywQ25khB6-FB20x6wO9dGVO9_qJlWkuLVLREJS4Jo/preview) and [Differentiation Guide](https://docs.google.com/document/d/15Y6Mo3fMUtHq16SSskABgcYE-5xfk-Ewv0z_o4uaLdI/preview)
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1VUbXHxXqHj5QCb4eSb756KKc7NDzbOLZUE5bPPQmJR8/preview) and [Implementation Guide](https://docs.google.com/document/d/112OA3_KbicOotqopqUyvXoWPWszz3_LHeMlg0ikCabk/preview) for more information about this unit

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went.
          student_description: " In this unit, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
          description_short: "  Learn to build your own web site in Web Lab."
          description_audience: ''
          name: csd2-2022
          lessons: {}
        csd3-2022:
          lesson_groups:
            csd3_1:
              display_name: 'Chapter 1: Images and Animations'
            csd3_2:
              display_name: 'Chapter 2: Building Games'
            cspSurvey:
              display_name: Survey
          title: Interactive Animations and Games ('22-'23)
          description: |-
            In the Interactive Animations and Games unit, students create programmatic images, animations, interactive art, and games. Starting off with simple, primitive shapes and building up to more sophisticated sprite-based games, students become familiar with the programming concepts and the design process computer scientists use daily. They then learn how these simpler constructs can be combined to create more complex programs. In the final project, students develop a personalized, interactive program.

            **Implementation Guidance for Interactive Animations and Games**
            - Complete the first three lessons of the Problem Solving and Computing unit before starting
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1WGywQ25khB6-FB20x6wO9dGVO9_qJlWkuLVLREJS4Jo/preview) and [Differentiation Guide](https://docs.google.com/document/d/15Y6Mo3fMUtHq16SSskABgcYE-5xfk-Ewv0z_o4uaLdI/preview)
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1VUbXHxXqHj5QCb4eSb756KKc7NDzbOLZUE5bPPQmJR8/preview) and [Implementation Guide](https://docs.google.com/document/d/112OA3_KbicOotqopqUyvXoWPWszz3_LHeMlg0ikCabk/preview) for more information about this unit

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went.
          student_description: " In this unit, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          description_short: " Learn to program animations, interactive art, and games in Game Lab."
          description_audience: ''
          name: csd3-2022
          lessons: {}
        csd4-2022:
          lesson_groups:
            csd4_1:
              display_name: 'Chapter 1: User Centered Design'
            csd4_2:
              display_name: 'Chapter 2: App Prototyping'
            cspSurvey:
              display_name: Survey
          title: The Design Process ('22-'23)
          description: |-
            The Design Process unit transitions students from thinking about computer science as a tool to solve their own problems towards considering the broader social impacts of computing. Through a series of design challenges, students are asked to consider and understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which students have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test their solutions with real users to get feedback and drive further iteration.

            **Implementation Guidance for The Design Process**
            - Complete the first three lessons of the Problem Solving and Computing unit before starting
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1VUbXHxXqHj5QCb4eSb756KKc7NDzbOLZUE5bPPQmJR8/preview) and [Implementation Guide](https://docs.google.com/document/d/112OA3_KbicOotqopqUyvXoWPWszz3_LHeMlg0ikCabk/preview) for more information about this unit

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went.
          student_description: This unit introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          description_short: "  Learn how to design a program that meets the needs of your users."
          description_audience: ''
          name: csd4-2022
          lessons: {}
        csd5-2022:
          lesson_groups:
            csd5_1:
              display_name: 'Chapter 1: Representing Information'
            csd5_2:
              display_name: 'Chapter 2: Solving Data Problems'
            cspSurvey:
              display_name: Survey
          title: Data and Society ('22-'23)
          description: |-
            The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.

            **Implementation Guidance for Data and Society**
            - Complete the first three lessons of the Problem Solving and Computing unit before starting
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1VUbXHxXqHj5QCb4eSb756KKc7NDzbOLZUE5bPPQmJR8/preview) and [Implementation Guide](https://docs.google.com/document/d/112OA3_KbicOotqopqUyvXoWPWszz3_LHeMlg0ikCabk/preview) for more information about this unit

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went.
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          description_short: Learn how people use computers to solve data problems.
          description_audience: ''
          name: csd5-2022
          lessons: {}
        csd7-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Chapter 1 - Understanding Machine Learning
            lessonGroup-3:
              display_name: Chapter 2 - Design a Machine Learning App
            lessonGroup-4:
              display_name: Survey
          title: AI and Machine Learning ('22-'23)
          description: |-
            This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.

            **Implementation guidance for the AI and Machine Learning Unit**

            - Complete the first three lessons of the Problem Solving and Computing unit before starting
            - This unit assumes students are familiar with App Lab, specifically using Design Mode to create a user interface and using Events to change the screen when clicking a button. This can be accomplished by having students complete the [App Lab Hour of Code](https://studio.code.org/s/applab-intro/reset) before starting this unit.
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1WGywQ25khB6-FB20x6wO9dGVO9_qJlWkuLVLREJS4Jo/preview) and [Differentiation Guide](https://docs.google.com/document/d/15Y6Mo3fMUtHq16SSskABgcYE-5xfk-Ewv0z_o4uaLdI/preview)
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1VUbXHxXqHj5QCb4eSb756KKc7NDzbOLZUE5bPPQmJR8/preview) and [Implementation Guide](https://docs.google.com/document/d/112OA3_KbicOotqopqUyvXoWPWszz3_LHeMlg0ikCabk/preview) for more information about this unit

            **Professional Development:** If you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](https://studio.code.org/s/self-paced-pl-csd5-2021). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went.
          student_description: This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop your own machine learning projects around real-world data. The unit culminates with designing your own machine learning app to solve a personally relevant problem.
          description_short: Learn to about Artificial Intelligence and Machine Learning
          description_audience: ''
          name: csd7-2022
          lessons: {}
        csd6-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Physical Prototypes'
            lessonGroup-4:
              display_name: Survey
          name: csd6-2022
          title: Physical Computing ('22-'23)
          description_audience: ''
          description_short: Learn to program with physical devices.
          description: |-
            In the Physical Computing unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.

            **Implementation Guidance for Physical Computing**
            - Complete the first three lessons of the Problem Solving and Computing unit before starting
            - This unit assumes students are familiar with App Lab, specifically using Design Mode to create a user interface and using Events to change the screen when clicking a button. This can be accomplished by having students complete the [App Lab Hour of Code](https://studio.code.org/s/applab-intro/reset) before starting this unit.
            - This unit requires students to have access to Circuit Playground's - [click here](https://code.org/circuitplayground) for more information about using Circuit Playground's in your classroom
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1WGywQ25khB6-FB20x6wO9dGVO9_qJlWkuLVLREJS4Jo/preview) and [Differentiation Guide](https://docs.google.com/document/d/15Y6Mo3fMUtHq16SSskABgcYE-5xfk-Ewv0z_o4uaLdI/preview)
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1VUbXHxXqHj5QCb4eSb756KKc7NDzbOLZUE5bPPQmJR8/preview) and [Implementation Guide](https://docs.google.com/document/d/112OA3_KbicOotqopqUyvXoWPWszz3_LHeMlg0ikCabk/preview) for more information about this unit

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went.
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          lessons: {}
        csd-post-survey-2022:
          lesson_groups: {}
          name: csd-post-survey-2022
          title: CS Discoveries Post-Course Survey
          description_audience: ''
          description_short: ''
          description: This unit contains the CS Discoveries Post-Course Survey. This unit can be assigned after students complete their final unit in CS Discoveries.
          student_description: This unit contains a survey for when your class is finished with the units in CS Discoveries. Your teacher will tell you when it's time to take this survey.
          lessons: {}
        testtess2:
          lesson_groups: {}
          name: testtess2
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csp-post-survey-2022:
          lesson_groups: {}
          name: csp-post-survey-2022
          title: CS Principles Post-Course Survey
          description_audience: ''
          description_short: ''
          description: This unit contains the CS Principles Post-Course Survey.
          student_description: This unit contains a survey about the CS Principles Course. Your teacher will tell you when it's time to take this survey.
        aiml-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Chapter 1 - Understanding Machine Learning
            lessonGroup-3:
              display_name: Chapter 2 - Design a Machine Learning App
          name: aiml-2022
          title: AI and Machine Learning Module
          description_audience: ''
          description_short: Learn about Artificial Intelligence and Machine Learning
          description: |-
            This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.

            This unit assumes students are familiar with App Lab, specifically using Design Mode to create a user interface and using Events to change the screen when clicking a button. [Click Here](https://docs.google.com/document/d/1Wkg4DqfTDQVAxau217P0W_LmiGpNbfTSiHpkJbN2we4/preview) to learn more about recommendations for introducing students to App Lab before this unit.

            **Professional Development:** If you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](http://studio.code.org/s/self-paced-pl-csd5-2022). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.
          student_description: |-
            This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.

            **For Teachers:** [Click here](https://studio.code.org/s/aiml-2022?viewAs=Instructor) to see lesson plans and teacher resources for this unit.
        vpl-csd-2022:
          title: CS Discoveries Virtual Professional Learning 2022 - 23
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: vpl-csd-2022
          lessons: {}
        vpl-csp-2022:
          title: CS Principles Virtual Professional Learning 22 - 23
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: vpl-csp-2022
          lessons: {}
        self-paced-pl-csd1-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Welcome
          title: 'Module 1: Welcome '
          description: "This module is a short introduction to both Code.org and this professional learning course. \n\n**You will:**\n* Get an introduction to Code.org and CS Discoveries.\n* Learn how to engage in this professional learning course.\n\n**Suggested Time:** 10 minutes"
          student_description: "This module is a short introduction to both Code.org and this professional learning course. \n\n**You will:**\n* Get an introduction to Code.org and CS Discoveries.\n* Learn how to engage in this professional learning course.\n\n**Suggested Time:** 10 minutes"
          description_short: ''
          description_audience: ''
          name: self-paced-pl-csd1-2022
          lessons: {}
        self-paced-pl-csd2-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Navigating Code.org
          title: 'Module 2: Navigating Code.org'
          description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Discoveries. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes\n\n\n\n\n"
          student_description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Discoveries. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes"
          description_short: ''
          description_audience: ''
          name: self-paced-pl-csd2-2022
          lessons: {}
        self-paced-pl-csd3-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Overview of CS Discoveries
          title: 'Module 3: Overview of CS Discoveries'
          description: "This module will provide you with an overview of the CS Discoveries course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom. \n\n**You will:**\n\n* Gain a high-level understanding of the CS Discoveries curriculum.\n* Become familiar with the programming environments used within CS Discoveries.\n* Decide which units of CS Discoveries you will teach in your class.\n\n**Suggested time:** 60 minutes"
          student_description: "This module will provide you with an overview of the CS Discoveries course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom. \n\n**You will:**\n\n* Gain a high-level understanding of the CS Discoveries curriculum.\n* Become familiar with the programming environments used within CS Discoveries.\n* Decide which units of CS Discoveries you will teach in your class.\n\n**Suggested time:** 60 minutes"
          description_short: ''
          description_audience: ''
          name: self-paced-pl-csd3-2022
          lessons: {}
        self-paced-pl-csd4-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching and learning CS Discoveries
          title: 'Module 4: Teaching and learning CS Discoveries'
          description: "In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Discoveries course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Discoveries classroom and make a plan for how you will support student learning while teaching the course. \n\n**You will:**\n* Consider the role of the teacher in a CS Discoveries classroom. \n* Learn about authentic CS practices that students will develop throughout the CS Discoveries course.\n* Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion. \n\n**Suggested Time:** 50 minutes"
          student_description: "In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Discoveries course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Discoveries classroom and make a plan for how you will support student learning while teaching the course. \n\n**You will:**\n* Consider the role of the teacher in a CS Discoveries classroom. \n* Learn about authentic CS practices that students will develop throughout the CS Discoveries course.\n* Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion. \n\n**Suggested Time:** 50 minutes"
          description_short: ''
          description_audience: ''
          name: self-paced-pl-csd4-2022
          lessons: {}
        self-paced-pl-csp1-2022:
          title: 'Module 1: Welcome'
          description: "This module is a short introduction to both Code.org and professional learning modules. \n\n**You will:**\n* Get an introduction to Code.org and CS Principles.\n* Learn how to engage in professional learning modules.\n\n**Suggested Time:** 10 minutes"
          student_description: "This module is a short introduction to both Code.org and professional learning modules. \n\n**You will:**\n* Get an introduction to Code.org and CS Principles.\n* Learn how to engage in professional learning modules.\n\n**Suggested Time:** 10 minutes"
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: self-paced-pl-csp1-2022
          lessons: {}
        self-paced-pl-csp2-2022:
          title: 'Module 2: Navigating Code.org'
          description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Principles. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes"
          student_description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Principles. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes"
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: self-paced-pl-csp2-2022
          lessons: {}
        self-paced-pl-csp3-2022:
          title: Overview of CS Principles
          description: |-
            This module will provide you with an overview of the CS Principles course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom.

            **You will**:

            * Gain a high-level understanding of the CS Principles curriculum.
            * Learn more about the pedagogical approaches used to teach both non-programming and programming units.
            * Become familiar with the student learning tools used within CS Principles.
            * Explore the components of the AP Exam, as well as your responsibilities as a teacher if you plan to offer CS Principles as an AP course.
            * Build an implementation plan for the school year.

            **Suggested time**: 90 minutes
          student_description: |-
            This module will provide you with an overview of the CS Principles course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom.

            **You will**:

            * Gain a high-level understanding of the CS Principles curriculum.
            * Learn more about the pedagogical approaches used to teach both non-programming and programming units.
            * Become familiar with the student learning tools used within CS Principles.
            * Explore the components of the AP Exam, as well as your responsibilities as a teacher if you plan to offer CS Principles as an AP course.
            * Build an implementation plan for the school year.

            **Suggested time**: 90 minutes
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: self-paced-pl-csp3-2022
          lessons: {}
        self-paced-pl-csp4-2022:
          title: Teaching and learning CS Principles
          description: |-
            In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Principles course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Principles classroom and make a plan for how you will support student learning while teaching the course.

            **You will**:

            * Consider the role of the teacher in a CS Principles classroom.
            * Learn about authentic CS practices that students will develop throughout the CS Principles course.
            * Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion.
            * Learn about opportunities to connect with the broader CS community.

            **Suggested Time**: 70 minutes
          student_description: |-
            In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Principles course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Principles classroom and make a plan for how you will support student learning while teaching the course.

            **You will**:

            * Consider the role of the teacher in a CS Principles classroom.
            * Learn about authentic CS practices that students will develop throughout the CS Principles course.
            * Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion.
            * Learn about opportunities to connect with the broader CS community.

            **Suggested Time**: 70 minutes
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: self-paced-pl-csp4-2022
          lessons: {}
        csa9-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Review and Practice
            lessonGroup-3:
              display_name: Mock Exams
            lessonGroup-4:
              display_name: Sandboxes
          name: csa9-2022
          title: AP Exam Review and Practice ('22-'23)
          description_audience: ''
          description_short: Students prepare for the AP CSA Exam by practicing strategies for the multiple-choice and free response questions.
          description: This unit prepares students for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. Students identify strengths and areas of improvement to create individualized study plans to focus their practice and self-assess their progress.
          student_description: This unit prepares you for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. You identify strengths and areas of improvement to create individualized study plans to focus you practice and self-assess your progress.
        csa-pl-standalone-code-2022:
          lesson_groups: {}
          name: csa-pl-standalone-code-2022
          title: CSA Professional Learning Coding Projects
          description_audience: ''
          description_short: ''
          description: Workshop participants will be able to see example projects and code during PL from the neighborhood, console, and theater.
          student_description: ''
        csc-ecosystems-1:
          lesson_groups: {}
        csc-ecosystems:
          lesson_groups: {}
          lessons: {}
          name: csc-ecosystems
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        dlp-csd-overview-2022:
          title: 2022 CS Discoveries Deeper Learning Overview
          description: Welcome to the 2022 Deeper Learning program for onboarding CS Discoveries facilitators.
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: dlp-csd-overview-2022
          lessons: {}
        dlp-csd-mod1-2022:
          title: 2022 CS Discoveries Deeper Learning FiT Module
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: dlp-csd-mod1-2022
          lessons: {}
        dlp-csd-mod2-2022:
          title: 2022 CS Discoveries Deeper Learning Module A
          description: "## Completed module due by November 1, 2022"
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: dlp-csd-mod2-2022
          lessons: {}
        dlp-csd-mod3-2022:
          title: 2022 CS Discoveries Deeper Learning Module B
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: dlp-csd-mod3-2022
          lessons: {}
        dlp-csd-mod4-2022:
          title: 2022 CS Discoveries Deeper Learning Module 4 for Workshop 4
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: dlp-csd-mod4-2022
        dlp-csp-mod1-2022:
          title: 2022 CS Principles Deeper Learning FiT Module
          description: "##This module is for training purposes only.  No submissions will be officially evaluated."
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: dlp-csp-mod1-2022
        dlp-csp-mod2-2022:
          title: 2022 CS Principles Deeper Learning Module A
          description: "##Completed submissions due by November 1, 2022."
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: dlp-csp-mod2-2022
          lessons: {}
        dlp-csp-mod3-2022:
          title: 2022 CS Principles Deeper Learning Module B
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: dlp-csp-mod3-2022
          lessons: {}
        dlp-csp-mod4-2022:
          title: 2022 CS Principles Deeper Learning Module 4  for Workshop 4
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: dlp-csp-mod4-2022
        dlp-csp-overview-2022:
          title: 2022 CS Principles Deeper Learning Overview
          description: "###Welcome to the 2021 Deeper Learning program for onboarding CS Principles facilitators."
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: dlp-csp-overview-2022
          lessons: {}
        csc-ecosystems-2022:
          title: Ecosystems
          description: This is a beta version of our new CS Connections curriculum. We're still adding our finishing touches to these lessons. Do you have any [feedback](https://docs.google.com/forms/d/e/1FAIpQLScJMEBHXFcBQjkztOrZcrE9O9uuOqxGNZQ-F_v9QWjLtevv9w/viewform) you'd like to share?
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: csc-ecosystems-2022
          lessons: {}
        csc-starquilts-2022:
          title: Star Quilts Module
          description: This is a beta version of our new CS Connections curriculum. We're still adding our finishing touches to these lessons. Do you have any [feedback](https://docs.google.com/forms/d/e/1FAIpQLScJMEBHXFcBQjkztOrZcrE9O9uuOqxGNZQ-F_v9QWjLtevv9w/viewform) you'd like to share?
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: csc-starquilts-2022
          lessons: {}
        csc-fables-2022:
          title: Fables
          description: This is a beta version of our new CS Connections curriculum. We're still adding our finishing touches to these lessons. Do you have any [feedback](https://docs.google.com/forms/d/e/1FAIpQLScJMEBHXFcBQjkztOrZcrE9O9uuOqxGNZQ-F_v9QWjLtevv9w/viewform) you'd like to share?
          student_description: ''
          description_short: ''
          description_audience: ''
          lesson_groups: {}
          name: csc-fables-2022
          lessons: {}
        csc-timecapsule-2022:
          title: Time Capsule
          description: This is a beta version of our new CS Connections curriculum. We're still adding our finishing touches to these lessons. Do you have any [feedback](https://docs.google.com/forms/d/e/1FAIpQLScJMEBHXFcBQjkztOrZcrE9O9uuOqxGNZQ-F_v9QWjLtevv9w/viewform) you'd like to share?
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: csc-timecapsule-2022
        vpl-csd1-ayw-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Part 1: Synchronous Session'
            lessonGroup-3:
              display_name: 'Part 2: Asynchronous Post-Work'
          lessons:
            lesson-1:
              name: Workshop Opener
            lesson-2:
              name: Content Workshop
            lesson-3:
              name: Debugging on the Code.org Platform
            lesson-4:
              name: Identity and Debugging
            lesson-5:
              name: Closing
            lesson-6:
              name: Asynchronous Debugging Extension
          name: vpl-csd1-ayw-pilot-2022
          title: CS Discoveries Virtual Module 1
          description_audience: ''
          description_short: ''
          description: |-
            **Participants will:**

            * Build confidence and skill in core computer science concepts.
            * Revisit debugging content and learn about platform and curriculum tools to support students.
            * Reflect on personal moments of failure and debugging to consider their role in building classroom culture.
          student_description: |-
            **You will:**

            * Reconnect with your community to celebrate successes, vent frustrations, and troubleshoot roadblocks.
            * Build confidence and skill in core computer science concepts.
            * Reflect on personal moments of failure and debugging to consider your role in building classroom culture.
        alltheblocklythings:
          lesson_groups:
            lessonGroup-2:
              display_name: Google Blockly
            lessonGroup-3:
              display_name: CDO Blockly
          name: alltheblocklythings
          title: All the Blockly Things!
          description_audience: ''
          description_short: A selection of Blockly levels for internal testing
          description: ''
          student_description: ''
        self-paced-pl-csd5-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching Artificial Intelligence and Machine Learning
          name: self-paced-pl-csd5-2022
          title: Teaching AI and Machine Learning
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit.  \n\n**In this professional learning module, you will:**\n* Get an introduction to artificial intelligence and machine learning. \n* Practice key concepts included in the unit.\n* Engage with AI Lab and App Lab.\n* Explore end of chapter projects. \n* Make a plan for implementing the unit with your students.\n\n**Suggested Time:** 120 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit.  \n\n**In this professional learning module, you will:**\n* Get an introduction to artificial intelligence and machine learning. \n* Practice key concepts included in the unit.\n* Engage with AI Lab and App Lab.\n* Explore end of chapter projects. \n* Make a plan for implementing the unit with your students.\n\n**Suggested Time:** 120 minutes"
          lessons: {}
        vpl-csa-2022:
          lesson_groups: {}
          name: vpl-csa-2022
          title: CSA Virtual Professional Learning
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons:
            lesson-2:
              name: 'Module 2 post-work: Understanding Unit 4 content'
            lesson-4:
              name: 'Module 4 post-work: 2D Arrays in Unit 5 and FRQs'
            lesson-5:
              name: 'Module 5 post-work: The Unit 5 Project'
            lesson-6:
              name: 'Module 6 post-work: String methods in Unit 6'
        csa-labs-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Magpie Lab
            lessonGroup-3:
              display_name: Celebrity Lab
            lessonGroup-4:
              display_name: Consumer Review Lab
            lessonGroup-5:
              display_name: Data Lab
          name: csa-labs-2022
          title: AP CSA College Board Labs
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
          lessons:
            lesson-7:
              name: 'The Celebrity Class: A Simple Version'
            lesson-8:
              name: Putting It All Together
            lesson-9:
              name: Extending the Celebrity Class
            lesson-10:
              name: Open-Ended Activity
            lesson-11:
              name: Multiple Choice / Free Response
            lesson-12:
              name: Introduction (Reviews & Sentiment Value)
            lesson-13:
              name: 'Sentiment Value & Star Ratings '
            lesson-14:
              name: Autogenerated Review
            lesson-15:
              name: Create a Positive or Negative Review
            lesson-16:
              name: Open-Ended Activity
            lesson-17:
              name: Data, Data, Data!
            lesson-18:
              name: Designing and Implementing a Custom Class
            lesson-19:
              name: Putting It All Together
            lesson-20:
              name: Open-Ended Activity
        csa-draft-pl:
          lessons:
            lesson-2:
              name: 'Module 3 post-work: The Theater and datasets in Unit 4'
            lesson-3:
              name: 'Module 4 post-work: FRQs and Unit 5'
            lesson-4:
              name: 'Module 5 post-work: Unit 5 Project'
            lesson-5:
              name: 'Module 6 post-work: String methods in Unit 6'
            lesson-6:
              name: 'Module 7 post-work: The Unit 7 project'
            lesson-7:
              name: 'Module 8 post-work: Preparing students for the AP Exam'
            lesson-8:
              name: 'Module 8 post-work: Preparing students for the AP Exam'
            lesson-9:
              name: Module X
          lesson_groups: {}
          name: csa-draft-pl
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd2-ayw-pilot-2022:
          lessons:
            lesson-1:
              name: Workshop Opener
            lesson-2:
              name: Content Workshop
            lesson-3:
              name: Debugging Projects
            lesson-4:
              name: Inclusion Scenarios
            lesson-5:
              name: Closing
            lesson-6:
              name: Module 2 Asynchronous Work
          lesson_groups:
            lessonGroup-2:
              display_name: 'Part 1: Synchronous Session'
            lessonGroup-3:
              display_name: 'Part 2: Asynchronous Post-Work'
          name: vpl-csd2-ayw-pilot-2022
          title: CS Discoveries Virtual Module 2
          description_audience: ''
          description_short: ''
          description: |
            **Participants will:**

            * Build confidence and skill in core computer science concepts.
            * Extend their knowledge of debugging by looking at longer, more complex sections of code.
            * Examine common classroom scenarios to reflect on threats to inclusion and belonging, and how to avoid them.
          student_description: |-
            **You will:**

            * Build confidence and skill in core computer science concepts.
            * Extend your knowledge of debugging by looking at longer, more complex sections of code.
            * Examine common classroom scenarios to reflect on threats to inclusion and belonging, and how to avoid them.
        soccer:
          lessons: {}
          lesson_groups: {}
          name: soccer
          title: Code your own soccer game
          description_audience: ''
          description_short: Make a soccer game
          description: Make a soccer game
          student_description: ''
        katie-practice:
          lessons: {}
          lesson_groups: {}
        csa1-validation-pilot-2022:
          lesson_groups:
            lessonGroup-5:
              display_name: Survey
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
          title: Object-Oriented Programming ('22-'23)
          description: |-
            This unit exposes students to object-oriented programming principles as they explore The Neighborhood. Students learn fundamental Java concepts as they navigate and interact with The Neighborhood with `Painter` objects and create new types of `Painter`s to expand the capabilities of their programs. Students practice predicting the outcome of program code and use their `Painter` objects with conditional statements, `while` loops, and Boolean expressions to navigate mazes and create drawings. While students work with the `Painter`, they practice identifying syntax and logic errors to explain why code segments will not compile or work as intended. Additionally, students learn to document program code using comments to describe the behavior of specific code segments. Throughout this unit, students discover their identity as software engineers and use debugging strategies and code reviews to improve their programming skills.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa1-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went.
          student_description: This unit exposes you to object-oriented programming principles as you explore The Neighborhood. You learn fundamental Java concepts as you navigate and interact with The Neighborhood with `Painter` objects and create new types of `Painter`s to expand the capabilities of your programs. You practice predicting the outcome of program code and use your `Painter` objects with conditional statements, `while` loops, and Boolean expressions to navigate mazes and create drawings. While you work with the `Painter`, you practice identifying syntax and logic errors to explain why code segments will not compile or work as intended. Additionally, you learn to document program code using comments to describe the behavior of specific code segments. Throughout this unit, you discover your identity as a software engineer and use debugging strategies and code reviews to improve your programming skills.
          description_short: Students learn fundamental Java concepts, discover their identity as software engineers, and use debugging strategies and code reviews to improve their programming skills.
          description_audience: ''
        csa2-validation-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
          title: Class Structure and Design ('22-'23)
          description: |-
            This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as students develop classes with attributes and behaviors and work with primitive and object data. Students learn to work with variables and user input as they develop and utilize classes and objects to represent desserts, customers, and food trucks for the Project Mercury Pastries Food Truck business. As students work with the `Dessert` class, they build on their knowledge of inheritance to design subclasses that represent specific types of desserts. While working with variables, students learn to create and evaluate expressions using assignment and relational operators and trace code segments to determine the result of output. Throughout this unit, students continue to develop software engineering skills as they learn to use UML diagrams to represent classes and the DRY principle to refactor program code.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa2-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 1
            * Personal Progress Check 5
            * Personal Progress Check 9

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went.
          student_description: This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as you develop classes with attributes and behaviors and work with primitive and object data. You learn to work with variables and user input as you develop and utilize classes and objects to represent desserts, customers, and food trucks for the Project Mercury Pastries Food Truck business. As you work with the `Dessert` class, you build on your knowledge of inheritance to design subclasses that represent specific types of desserts. While working with variables, you learn to create and evaluate expressions using assignment and relational operators and trace code segments to determine the result of output. Throughout this unit, you continue to develop software engineering skills as you learn to use UML diagrams to represent classes and the DRY principle to refactor program code.
          description_short: Students develop an understanding of data encapsulation and object-oriented design decisions.
          description_audience: ''
        csa3-validation-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
          title: Arrays and Algorithms ('22-'23)
          description: |-
            This unit introduces students to data structures to store primitive values and object references. Students use one-dimensional (1D) arrays to represent lists of data while expanding their knowledge of loops and conditionals to analyze and process data in a 1D array. Students learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, students develop and modify standard algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. As part of the planning process, students identify the preconditions and postconditions that an algorithm must satisfy. Additionally, students learn to use the `static` and `final` keywords to create static variables to represent values shared with all classes and constants to represent values that cannot be changed.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa3-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 4
            * Personal Progress Check 6

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went.
          student_description: This unit introduces you to data structures to store primitive values and object references. You use one-dimensional (1D) arrays to represent lists of data while expanding your knowledge of loops and conditionals to analyze and process data in a 1D array. You learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, you develop and modify standard algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. As part of the planning process, you identify the preconditions and postconditions that an algorithm must satisfy. Additionally, you learn to use the `static` and `final` keywords to create static variables to represent values shared with all classes and constants to represent values that cannot be changed.
          description_short: Students use one-dimensional (1D) arrays to store lists of primitive values and object references.
          description_audience: ''
        csa4-validation-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
          title: Conditions and Logic ('22-'23)
          description: "This unit revisits the use of packages to access existing functionalities in their programs, such as The Neighborhood, to expand their knowledge of APIs and libraries and explore The Theater. With The Theater, students learn to improve the decisions made in conditionals and loops with relational and logical operators to evaluate primitive values and object references. While working with conditionals and logical operators, students expand their knowledge of the `static` keyword to write static methods and explore their functionality. Additionally, students use casting operators and `Math` class methods to evaluate expressions and perform calculations, including incorporating random in program decisions and behaviors. While working with compound Boolean expressions and logical operators, students develop an understanding of De Morgan’s Laws and learn how to evaluate truth tables.\n\n### AP Classroom Personal Progress Checks\nTo assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org\t/s/csa4-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n* Personal Progress Check 3\n\n***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit revisits the use of packages to access existing functionalities in your programs, such as The Neighborhood, to expand your knowledge of APIs and libraries and explore The Theater. With The Theater, you learn to improve the decisions made in conditionals and loops with relational and logical operators to evaluate primitive values and object references. While working with conditionals and logical operators, you expand your knowledge of the `static` keyword to write static methods and explore their functionality. Additionally, you use casting operators and `Math` class methods to evaluate expressions and perform calculations, including incorporating random in program decisions and behaviors. While working with compound Boolean expressions and logical operators, you develop an understanding of De Morgan's Laws and learn how to evaluate truth tables.
          description_short: Students improve decision-making in their programs using relational and logical operators to evaluate primitive values and object references and use the Math class to perform calculations and generate random numbers.
          description_audience: ''
        csa5-validation-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know Week
            lessonGroup-4:
              display_name: Sandboxes
          title: Two-Dimensional Arrays ('22-'23)
          description: |-
            This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. Students identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As students analyze problems involving 2D arrays, they revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. Students apply these concepts to manipulate pixels and in The Theater to create image filters in addition to working with primitive values and various object references. Additionally, students use the programming knowledge and skills they have acquired to consider the impacts of programs on society, economies, and culture.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa5-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:

            * Personal Progress Check 8

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went.
          student_description: This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. You identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As you analyze problems involving 2D arrays, you revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. You apply these concepts to manipulate pixels using The Theater to create image filters in addition to working with primitive values and various object references. Additionally, you use the programming knowledge and skills you have acquired to consider the impacts of programs on society, economies, and culture.
          description_short: Students use two-dimensional (2D) arrays to expand storage and organization capabilities in their programs.
          description_audience: ''
        csa6-validation-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
          title: ArrayLists and String Methods ('22-'23)
          description: |-
            This unit continues to expand on data structures to introduce students to creating lists using the `ArrayList` class. In the process, students learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. Students differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. Students apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, students learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, students further develop software engineering skills by writing Javadoc comments to create API documentation for their programs.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa6-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 2
            * Personal Progress Check 7

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went.
          student_description: This unit continues to expand on data structures to introduce you to creating lists using the `ArrayList` class. In the process, you learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. You differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. You apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, you learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, you further develop software engineering skills by writing Javadoc comments to create API documentation for your programs.
          description_short: Students use ArrayLists to store program data and work with methods in the String class to manipulate and evaluate String objects.
          description_audience: ''
        csa7-validation-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
          title: Method Decomposition and Recursion ('22-'23)
          description: |-
            This unit allows students to practice software design and development using the skills they have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. Students use decomposition strategies and object-oriented principles to plan and implement their ideas while ensuring their projects meet specified requirements. In the process, students learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, students practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, students consider the need for maximizing system reliability as they explore bugs and issues in existing programs.

            ###AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa7-2022/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went.
          student_description: This unit allows you to practice software design and development using the skills you have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. You use decomposition strategies and object-oriented principles to plan and implement your ideas while ensuring your project meet specified requirements. In the process, you learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, you practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, you consider the need for maximizing system reliability as you explore bugs and issues in existing programs.
          description_short: Students practice software design and development using the skills and programming constructs they have learned and explore recursion.
          description_audience: ''
        csa8-validation-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Sandboxes
            lessonGroup-5:
              display_name: Survey
          title: Searching and Sorting ('22-'23)
          description: |-
            This unit expands on algorithms students have learned to introduce common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, students analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, students apply their programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, students consider the privacy and security of programs and users.

            ### AP Classroom Personal Progress Checks
            To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's [**Standards**](https://studio.code.org/s/csa8-pilot-facilitator/standards) page. You can find instructions and video demonstrations to do this on [**AP Central**](https://apcentral.collegeboard.org/instructional-resources/ap-classroom).

            The following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:
            * Personal Progress Check 10

            ***Note:*** *Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.*

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=8) to let the Code.org curriculum team know how the unit went.
          student_description: In this unit, you expand on the algorithms you have learned to explore common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, you analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, you apply your programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, you consider the privacy and security of programs and users.
          description_short: ''
          description_audience: ''
        csa9-validation-pilot-2022:
          lesson_groups:
            lessonGroup-2:
              display_name: Review and Practice
            lessonGroup-3:
              display_name: Mock Exams
            lessonGroup-4:
              display_name: Sandboxes
          title: AP Exam Review and Practice ('22-'23)
          description: This unit prepares students for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. Students identify strengths and areas of improvement to create individualized study plans to focus their practice and self-assess their progress.
          student_description: This unit prepares you for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. You identify strengths and areas of improvement to create individualized study plans to focus you practice and self-assess your progress.
          description_short: Students prepare for the AP CSA Exam by practicing strategies for the multiple-choice and free response questions.
          description_audience: ''
        csa1-2023:
          lessons:
            lesson-1:
              name: Welcome to CSA
            lesson-3:
              name: Asphalt Art Project [1-Day Version]
            lesson-2:
              name: Java Lab
            lesson-4:
              name: The Neighborhood
            lesson-5:
              name: Navigating and Painting
            lesson-6:
              name: Loops
            lesson-7:
              name: Inheritance
            lesson-8:
              name: Writing Methods
            lesson-9:
              name: Programming Style and Feedback
            lesson-10:
              name: Selection Statements
            lesson-11:
              name: Debugging Strategies
            lesson-12:
              name: Decomposition and Design
            lesson-13:
              name: Two-Way Selection Statements
            lesson-14:
              name: Instantiating Objects
            lesson-15:
              name: Methods with Parameters
            lesson-16:
              name: Unit 1 Survey
            lesson-17:
              name: Asphalt Art Project – Day 1
            lesson-18:
              name: 'Sandbox: The Neighborhood'
            lesson-19:
              name: Asphalt Art Project – Day 3
            lesson-20:
              name: FRQ Practice
            lesson-21:
              name: Unit 1 Assessment
          lesson_groups:
            lessonGroup-2:
              display_name: Survey
            lessonGroup-3:
              display_name: Content
            lessonGroup-4:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: End of Unit Survey
            lessonGroup-7:
              display_name: Sandboxes
          name: csa1-2023
          title: Object-Oriented Programming
          description_audience: ''
          description_short: Students learn fundamental Java concepts, discover their identity as software engineers, and use debugging strategies and code reviews to improve their programming skills.
          description: "This unit introduces students to object-oriented programming principles as they explore The Neighborhood and discover their identity as a software engineer. Students learn fundamental Java concepts as they navigate and paint in The Neighborhood with `Painter` objects and extend the `Painter` class to expand the capabilities of their programs. Students practice predicting the outcome of program code and developing algorithms using sequencing, selection, and iteration to navigate mazes and paint murals. Students also learn to document program code using comments to describe the behavior of specific code segments and conduct code reviews to receive feedback from their peers.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use inheritance to create subclasses that extend an existing class\n\n* Write methods with and without parameters to perform a specific task\n\n* Implement algorithms sequencing, selection, and iteration\n\n* Write clear and readable code using methods, control structures, and comments\n\n* Improve a program through iterative development based on feedback\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit introduces you to object-oriented programming principles as you explore The Neighborhood and discover your identity as a software engineer. You learn fundamental Java concepts as you navigate and paint in The Neighborhood with `Painter` objects and extend the `Painter` class to expand the capabilities of your programs. You practice predicting the outcome of program code and developing algorithms using sequencing, selection, and iteration to navigate mazes and paint murals. You also learn to document program code using comments to describe the behavior of specific code segments and conduct code reviews to receive feedback from your peers.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use inheritance to create subclasses that extend an existing class\n\n* Write methods with and without parameters to perform a specific task\n\n* Implement algorithms sequencing, selection, and iteration\n\n* Write clear and readable code using methods, control structures, and comments\n\n* Improve a program through iterative development based on feedback\n    </div>\n</details>"
        csa2-2023:
          lessons:
            lesson-1:
              name: Attributes
            lesson-2:
              name: No-Argument Constructors
            lesson-3:
              name: Parameterized Constructors
            lesson-4:
              name: Variables
            lesson-5:
              name: Accessor Methods
            lesson-6:
              name: User Input
            lesson-7:
              name: Operators and Expressions
            lesson-8:
              name: Mutator Methods
            lesson-9:
              name: Printing Objects
            lesson-10:
              name: Store Management Project
            lesson-11:
              name: FRQ Practice
            lesson-12:
              name: Unit 2 Assessment
            lesson-13:
              name: Store Management Project [1-Day Version]
            lesson-14:
              name: The this Keyword
            lesson-15:
              name: Unit 2 Survey
            lesson-16:
              name: 'Sandbox: Console'
            lesson-17:
              name: 'Sandbox: The Neighborhood'
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-6:
              display_name: Sandboxes
          name: csa2-2023
          title: Class Structure and Design
          description_audience: ''
          description_short: Students develop an understanding of data encapsulation and object-oriented design decisions.
          description: "This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as students develop classes with attributes and behaviors and work with primitive and object data. Students learn to write no-argument constructors to assign default values and parameterized constructors to assign specific values to an object's instance variables. They explore how the `this` keyword can be used to reduce ambiguity and redundancies in their program and how the `super` keyword can be used to call a superclass constructor or method. Students also learn how to work with variables and write expressions using arithmetic and compound assignment operators and practice tracing code segments to determine the output. After working with instance variables and constructors, they write accessor and mutator methods to work with the values assigned to an object's instance variables and `toString()` methods to display information about an object to the console. Throughout this unit, students continue to develop software engineering skills as they learn to make design decisions and use inheritance to create class hierarchies.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Represent attributes of an object using instance variables\n\n* Write no-argument and parameterized constructors to set the state of an object\n\n* Use the `super` keyword to refer to the superclass in constructors and methods\n\n* Write expressions using arithmetic operators and compound assignment operators with variables and object data\n\n* Write accessor and mutator methods to obtain and modify object data\n\n* Write `toString()` methods and use escape sequences to display and format information about an object to the console\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 1\n\n* Personal Progress Check 5\n\n* Personal Progress Check 9\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as you develop classes with attributes and behaviors and work with primitive and object data. You learn to work with variables and user input as you develop and utilize classes and objects to represent desserts, customers, and food trucks for the Project Mercury Pastries Food Truck business. As you work with the `Dessert` class, you build on your knowledge of inheritance to design subclasses that represent specific types of desserts. While working with variables, you learn to create and evaluate expressions using assignment and relational operators and trace code segments to determine the result of output. Throughout this unit, you continue to develop software engineering skills as you learn to use UML diagrams to represent classes and the DRY principle to refactor program code.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Represent attributes of an object using instance variables\n\n* Write no-argument and parameterized constructors to set the state of an object\n\n* Use the `super` keyword to refer to the superclass in constructors and methods\n\n* Write expressions using arithmetic operators and compound assignment operators with variables and object data\n\n* Write accessor and mutator methods to obtain and modify object data\n\n* Write `toString()` methods and use escape sequences to display and format information about an object to the console\n    </div>\n</details>"
        csa3-2023:
          lessons:
            lesson-1:
              name: One-Dimensional (1D) Arrays
            lesson-2:
              name: Modifying Elements
            lesson-3:
              name: For Loops
            lesson-4:
              name: Preconditions and Postconditions
            lesson-5:
              name: Enhanced For Loops
            lesson-6:
              name: Static Variables and Constants
            lesson-7:
              name: Polymorphism
            lesson-8:
              name: Array Algorithms
            lesson-9:
              name: Finding Duplicates
            lesson-10:
              name: Data for Social Good Project
            lesson-11:
              name: FRQ Practice
            lesson-12:
              name: Unit 3 Assessment
            lesson-13:
              name: Data for Social Good Project [1-Day Version]
            lesson-14:
              name: Unit 3 Survey
            lesson-15:
              name: 'Sandbox: Console'
            lesson-16:
              name: 'Sandbox: The Neighborhood'
            lesson-17:
              name: 'Sandbox: The Theater'
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-6:
              display_name: Sandboxes
          name: csa3-2023
          title: Arrays and Algorithms
          description_audience: ''
          description_short: Students use one-dimensional (1D) arrays to store lists of primitive values and object references.
          description: "This unit introduces students to data structures to store primitive values and object references. Students use one-dimensional (1D) arrays to store multiple related values while expanding their knowledge of loops and conditionals to analyze and process data in a 1D array. Students learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, students develop and modify algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. While developing algorithms, students identify preconditions and postconditions and implement solutions to ensure that these conditions are satisfied. Students continue to develop software engineering skills as they learn to make design decisions and use 1D arrays to store and analyze data.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Declare and initialize one-dimensional (1D) arrays to store primitive values and objects using the `new` keyword and initializer lists\n\n* Traverse the elements in one-dimensional (1D) arrays using `for` loops, `while` loops, and enhanced `for` loops\n\n* Write algorithms to find and modify elements in one-dimensional (1D) arrays\n\n* Implement solutions to satisfy the preconditions and postconditions of an algorithm\n\n* Debug common errors that occur when traversing one-dimensional (1D) arrays\n\n* Use polymorphism to create and traverse one-dimensional (1D) arrays of a superclass type\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 4\n\n* Personal Progress Check 6\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit introduces you to data structures to store primitive values and object references. You use one-dimensional (1D) arrays to store multiple related values while expanding your knowledge of loops and conditionals to analyze and process data in a 1D array. You learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, you develop and modify algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. While developing algorithms, you identify preconditions and postconditions and implement solutions to ensure that these conditions are satisfied. You continue to develop software engineering skills as you learn to make design decisions and use 1D arrays to store and analyze data.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Declare and initialize one-dimensional (1D) arrays to store primitive values and objects using the `new` keyword and initializer lists\n\n* Traverse the elements in one-dimensional (1D) arrays using `for` loops, `while` loops, and enhanced `for` loops\n\n* Write algorithms to find and modify elements in one-dimensional (1D) arrays\n\n* Implement solutions to satisfy the preconditions and postconditions of an algorithm\n\n* Debug common errors that occur when traversing one-dimensional (1D) arrays\n\n* Use polymorphism to create and traverse one-dimensional (1D) arrays of a superclass type\n    </div>\n</details>"
        csa4-2023:
          lessons:
            lesson-2:
              name: Abstract Data Art Project
            lesson-3:
              name: BingoCaller FRQ
            lesson-4:
              name: Unit 4 Assessment
            lesson-1:
              name: Abstract Data Art Project [1-Day Version]
            lesson-5:
              name: The Theater
            lesson-6:
              name: Static Variables and Methods
            lesson-7:
              name: The Math Class
            lesson-8:
              name: Casting and Rounding
            lesson-9:
              name: Random
            lesson-10:
              name: Object Aliases and Equality
            lesson-11:
              name: Nested If Statements
            lesson-12:
              name: Logical Operators
            lesson-13:
              name: De Morgan's Laws
            lesson-14:
              name: Multi-Selection Statements
            lesson-15:
              name: Unit 4 Survey
            lesson-16:
              name: 'Sandbox: Console'
            lesson-17:
              name: 'Sandbox: The Neighborhood'
            lesson-18:
              name: 'Sandbox: The Theater'
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-6:
              display_name: Sandboxes
          name: csa4-2023
          title: Conditions and Logic
          description_audience: ''
          description_short: Students improve decision-making in their programs using relational and logical operators to evaluate primitive values and object references and use the Math class to perform calculations and generate random numbers.
          description: "This unit expands on the use of APIs, object-oriented programming concepts, and conditional statements to develop visuals and animations using The Theater. Students learn about the functionality of the `static` keyword and explore the methods in the `Math` class to perform calculations and incorporate randomness in program decisions and behaviors. While working with conditional statements and Boolean expressions, students realize the difference between using the `==` operator and the `equals()` method to compare objects for equality and discover the need for overriding the `equals()` method in their own classes. They deepen their understanding of conditional statements and logical operators as they learn to write nested conditional statements, use the AND ( `&&` ) and OR ( `||` ) operators, and write multi-selection statements to test multiple conditions. Using their knowledge of Boolean expressions and logical operators, they practice evaluating truth tables to compare two expressions for equivalence and applying De Morgan's Laws to simplify expressions.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use the `static` keyword to to create static variables and methods in a class\n\n* Call `Math` class methods and constants to perform calculations and generate random numbers\n\n* Use casting operators to assign a value of one type to another\n\n* Explain the difference between `==` and `equals()`\n\n* Write nested `if` statements to test a combination of conditions\n\n* Construct a conditional statement involving logical operators\n\n* Evaluate compound Boolean expressions for equivalence\n\n* Write multi-selection statements to test multiple conditions\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 3\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>"
          student_description: "This unit expands on the use of APIs, object-oriented programming concepts, and conditional statements to develop visuals and animations using The Theater. You learn about the functionality of the `static` keyword and explore the methods in the `Math` class to perform calculations and incorporate randomness in program decisions and behaviors. While working with conditional statements and Boolean expressions, you realize the difference between using the `==` operator and the `equals()` method to compare objects for equality and discover the need for overriding the `equals()` method in their own classes. You deepen your understanding of conditional statements and logical operators as they learn to write nested conditional statements, use the AND ( `&&` ) and OR ( `||` ) operators, and write multi-selection statements to test multiple conditions. Using your knowledge of Boolean expressions and logical operators, you practice evaluating truth tables to compare two expressions for equivalence and applying De Morgan's Laws to simplify expressions.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use the `static` keyword to to create static variables and methods in a class\n\n* Call `Math` class methods and constants to perform calculations and generate random numbers\n\n* Use casting operators to assign a value of one type to another\n\n* Explain the difference between `==` and `equals()`\n\n* Write nested `if` statements to test a combination of conditions\n\n* Construct a conditional statement involving logical operators\n\n* Evaluate compound Boolean expressions for equivalence\n\n* Write multi-selection statements to test multiple conditions\n    </div>\n</details>"
        csa5-2023:
          lessons:
            lesson-1:
              name: Two-Dimensional (2D) Arrays
            lesson-2:
              name: 2D Array Elements
            lesson-3:
              name: Row-Major Traversal
            lesson-4:
              name: Column-Major Traversal
            lesson-5:
              name: Enhanced For Loops
            lesson-6:
              name: Images in The Theater
            lesson-7:
              name: 2D Array Algorithms
            lesson-8:
              name: Modifying Images
            lesson-9:
              name: Impacts of Programs
            lesson-10:
              name: Personal Narrative Project
            lesson-11:
              name: GrayscaleImage FRQ
            lesson-12:
              name: Unit 5 Assessment
            lesson-13:
              name: Personal Narrative Project [1-Day Version]
            lesson-14:
              name: Unit 5 Survey
            lesson-15:
              name: 'Sandbox: Console'
            lesson-16:
              name: 'Sandbox: The Neighborhood'
            lesson-17:
              name: 'Sandbox: The Theater'
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-6:
              display_name: Sandboxes
          name: csa5-2023
          title: Two-Dimensional Arrays
          description_audience: ''
          description_short: Students use two-dimensional (2D) arrays to expand storage and organization capabilities in their programs.
          description: "This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. Students identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As students analyze problems involving 2D arrays, they revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. Students apply these concepts to manipulate pixels and in The Theater to create image filters in addition to working with primitive values and various object references. Additionally, students use the programming knowledge and skills they have acquired to consider the impacts of programs on society, economies, and culture.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Declare and initialize a two-dimensional (2D) array using the `new` keyword and an initializer list\n\n* Access and modify elements in a two-dimensional (2D) array using row and column indexes\n\n* Write nested loops to traverse a two-dimensional (2D) array in row-major and column-major order\n\n* Write nested enhanced `for` loops to traverse a two-dimensional (2D) array\n\n* Apply standard 1D array algorithms to a 2D array\n\n* Discuss the beneficial and harmful impacts of programs\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 8\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. You identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As you analyze problems involving 2D arrays, you revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. You apply these concepts to manipulate pixels using The Theater to create image filters in addition to working with primitive values and various object references. Additionally, you use the programming knowledge and skills you have acquired to consider the impacts of programs on society, economies, and culture.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Declare and initialize a two-dimensional (2D) array using the `new` keyword and an initializer list\n\n* Access and modify elements in a two-dimensional (2D) array using row and column indexes\n\n* Write nested loops to traverse a two-dimensional (2D) array in row-major and column-major order\n\n* Write nested enhanced `for` loops to traverse a two-dimensional (2D) array\n\n* Apply standard 1D array algorithms to a 2D array\n\n* Discuss the beneficial and harmful impacts of programs\n    </div>\n</details>"
        csa6-2023:
          lessons:
            lesson-1:
              name: Project Planning
            lesson-2:
              name: Substrings
            lesson-3:
              name: Integer and Double Objects
            lesson-4:
              name: ArrayLists
            lesson-5:
              name: Manipulating Elements
            lesson-6:
              name: Comparing Strings
            lesson-7:
              name: Lists of Objects
            lesson-8:
              name: Removing Elements
            lesson-9:
              name: ArrayList and String Algorithms
            lesson-10:
              name: Natural Language Processing Project
            lesson-11:
              name: TemperatureAction FRQ
            lesson-12:
              name: Unit 6 Assessment
            lesson-13:
              name: Natural Language Processing Project [1-Day Version]
            lesson-14:
              name: Unit 6 Survey
            lesson-15:
              name: 'Sandbox: Console'
            lesson-16:
              name: 'Sandbox: The Neighborhood'
            lesson-17:
              name: 'Sandbox: The Theater'
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-6:
              display_name: Sandboxes
          name: csa6-2023
          title: ArrayLists and String Methods
          description_audience: ''
          description_short: Students use ArrayLists to store program data and work with methods in the String class to manipulate and evaluate String objects.
          description: "This unit continues to expand on data structures to introduce students to creating lists using the `ArrayList` class. In the process, students learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. Students differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. Students apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, students learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, students further develop software engineering skills by writing Javadoc comments to create API documentation for their programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use the `Integer` and `Double` class to represent primitive values as objects\n\n* Describe the structure and functionality of an `ArrayList`\n\n* Use methods in the `ArrayList` class to obtain the size of an `ArrayList`, add elements, retrieve elements, set values, and remove elements\n\n* Apply standard algorithms used with one-dimensional (1D) arrays to an `ArrayList`\n\n* Use methods in the `String` class to retrieve substrings and perform comparisons\n\n* Write standard algorithms to traverse a `String` object\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 2\n* Personal Progress Check 7\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit continues to expand on data structures to introduce you to creating lists using the `ArrayList` class. In the process, you learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. You differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. You apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, you learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, you further develop software engineering skills by writing Javadoc comments to create API documentation for your programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use the `Integer` and `Double` class to represent primitive values as objects\n\n* Describe the structure and functionality of an `ArrayList`\n\n* Use methods in the `ArrayList` class to obtain the size of an `ArrayList`, add elements, retrieve elements, set values, and remove elements\n\n* Apply standard algorithms used with one-dimensional (1D) arrays to an `ArrayList`\n\n* Use methods in the `String` class to retrieve substrings and perform comparisons\n\n* Write standard algorithms to traverse a `String` object\n    </div>\n</details>"
        csa7-2023:
          lessons:
            lesson-1:
              name: Project Planning
            lesson-2:
              name: Object References as Parameters
            lesson-3:
              name: Overloaded Methods
            lesson-4:
              name: Private Methods
            lesson-5:
              name: Overriding Methods
            lesson-6:
              name: Intellectual Property
            lesson-7:
              name: Recursion
            lesson-8:
              name: Project Development
            lesson-9:
              name: System Reliability
            lesson-10:
              name: Creative Coding with The Theater Project
            lesson-11:
              name: MusicQueue FRQ
            lesson-12:
              name: Unit 7 Assessment
            lesson-13:
              name: Unit 7 Survey
            lesson-14:
              name: Creative Coding with The Theater Project [1-Day Version]
            lesson-15:
              name: 'Sandbox: Console'
            lesson-16:
              name: 'Sandbox: The Neighborhood'
            lesson-17:
              name: 'Sandbox: The Theater'
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: End of Unit Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          name: csa7-2023
          title: Method Decomposition and Recursion
          description_audience: ''
          description_short: Students practice software design and development using the skills and programming constructs they have learned and explore recursion.
          description: "This unit allows students to practice software design and development using the skills they have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. Students use decomposition strategies and object-oriented principles to plan and implement their ideas while ensuring their projects meet specified requirements. In the process, students learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, students practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, students consider the need for maximizing system reliability as they explore bugs and issues in existing programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Differentiate between passing primitive values and object references as parameters\n\n* Write and call overloaded, `private`, and overridden methods\n\n* Explain the legal issues and intellectual property concerns of programs that create AI-generated images\n\n* Trace a recursive method to determine its result\n\n* Identify strategies to maximize system reliability\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit allows you to practice software design and development using the skills you have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. You use decomposition strategies and object-oriented principles to plan and implement your ideas while ensuring your project meet specified requirements. In the process, you learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, you practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, you consider the need for maximizing system reliability as you explore bugs and issues in existing programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Differentiate between passing primitive values and object references as parameters\n\n* Write and call overloaded, `private`, and overridden methods\n\n* Explain the legal issues and intellectual property concerns of programs that create AI-generated images\n\n* Trace a recursive method to determine its result\n\n* Identify strategies to maximize system reliability\n    </div>\n</details>"
        csa8-2023:
          lessons:
            lesson-1:
              name: Project Planning
            lesson-2:
              name: Searching
            lesson-3:
              name: Binary Search
            lesson-4:
              name: Selection Sort
            lesson-5:
              name: Insertion Sort
            lesson-6:
              name: Merge Sort
            lesson-7:
              name: Searching and Sorting
            lesson-8:
              name: Project Development
            lesson-9:
              name: Privacy and Security
            lesson-10:
              name: Creative Coding with the Console
            lesson-11:
              name: FRQ Practice
            lesson-12:
              name: Unit 8 Assessment
            lesson-13:
              name: Creative Coding with the Console Project [1-Day Version]
            lesson-14:
              name: 'Sandbox: Console'
            lesson-15:
              name: 'Sandbox: The Neighborhood'
            lesson-16:
              name: 'Sandbox: The Theater'
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          name: csa8-2023
          title: Searching and Sorting
          description_audience: ''
          description_short: ''
          description: "This unit expands on algorithms students have learned to introduce common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, students analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, students apply their programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, students consider the privacy and security of programs and users.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Explain the functionality of standard searching and sorting algorithms\n\n* Analyze the efficiency of searching and sorting algorithms using execution counts\n\n* Implement algorithms involving multiple 1D or 2D arrays or `ArrayList`s\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 10\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=8) to let the Code.org curriculum team know how the unit went."
          student_description: "In this unit, you expand on the algorithms you have learned to explore common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, you analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, you apply your programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, you consider the privacy and security of programs and users.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Explain the functionality of standard searching and sorting algorithms\n\n* Analyze the efficiency of searching and sorting algorithms using execution counts\n\n* Implement algorithms involving multiple 1D or 2D arrays or `ArrayList`s\n    </div>\n</details>"
        vpl-csd3-ayw-pilot-2022:
          lessons:
            lesson-1:
              name: Workshop Opener
            lesson-2:
              name: Content Workshop
            lesson-3:
              name: Formative Assessment in CS Discoveries
            lesson-4:
              name: Equity and Data
            lesson-5:
              name: Closing
            lesson-6:
              name: Module 3 Asynchronous Work
            lesson-7:
              name: Data Inquiry Cycles
          lesson_groups:
            lessonGroup-2:
              display_name: 'Part 1: Synchronous Session'
            lessonGroup-3:
              display_name: 'Part 2: Asynchronous Post-Work'
          name: vpl-csd3-ayw-pilot-2022
          title: CS Discoveries Virtual Module 3
          description_audience: ''
          description_short: ''
          description: |-
            **Participants will:**

            * Build confidence and skill in core computer science concepts.
            * Revisit summer workshop content about formative assessment by reflecting on how formatively assessing students has played out in classroom culture and routines.
            * Describe how the use of a data inquiry cycle with student data supports improving access, diversity, and inclusion in CS.
          student_description: |-
            **You will:**

            * Build confidence and skill in core computer science concepts.
            * Revisit summer workshop content about formative assessment by reflecting on how formatively assessing students has played out in classroom culture and routines.
            * Describe how the use of a data inquiry cycle with student data supports improving access, diversity, and inclusion in CS.
        vpl-csd4-ayw-pilot-2022:
          lessons:
            lesson-1:
              name: Workshop Opener
            lesson-2:
              name: Content Workshop
            lesson-3:
              name: Defining Student Success in Summative Assessment
            lesson-4:
              name: Closing
            lesson-5:
              name: Module 4 Asynchronous Work
          lesson_groups:
            lessonGroup-2:
              display_name: 'Part 1: Synchronous Session'
            lessonGroup-3:
              display_name: 'Part 2: Asynchronous Post-Work'
          name: vpl-csd4-ayw-pilot-2022
          title: CS Discoveries Virtual Module 4
          description_audience: ''
          description_short: ''
          description: |-
            **Participants will:**

            * Build confidence and skill in core computer science concepts.
            * Gain a deeper understanding of how rubrics are used in the CS Discoveries curriculum.
            * Calibrate with their cohort on how to define and measure success in CS Discoveries projects by scoring and discussing a sample student project.
          student_description: |-
            **You will:**

            * Build confidence and skill in core computer science concepts.
            * Gain a deeper understanding of how rubrics are used in the CS Discoveries curriculum.
            * Calibrate with your cohort on how to define and measure success in CS Discoveries projects by scoring and discussing a sample student project.
        csa-magpie-lab:
          lessons:
            lesson-1:
              name: Experiment with Existing Chatbots
            lesson-2:
              name: Work with Magpie Code
            lesson-3:
              name: Work with API for Magpie and String
            lesson-4:
              name: Modify Responses
            lesson-5:
              name: Use Arrays to Get Random Responses
          lesson_groups: {}
          name: csa-magpie-lab
          title: AP CSA Magpie Lab
          description_audience: ''
          description_short: The Magpie Lab explores the basics of natural language processing as students create a chatbot program. Students work with a variety of methods of the String class and practice using if statements to evaluate user input to determine an appropriate response.
          description: |-
            From Eliza in the 1960s to Siri and Watson today, the idea of talking to computers in natural language has fascinated people. (And yes, there have been more than one conversation between Eliza and Siri – search for "chatbot Eliza Siri.") While natural language processing (NLP) is a complicated field, it is fairly easy to create a simple program to respond to English sentences.

            **Prerequisites**

            Before doing this lab, students should be able to:

            * locate websites using a web browser
            * run and edit Java programs that use classes
            * trace code
            * read APIs for both the standard Java libraries and local code
          student_description: |-
            From Eliza in the 1960s to Siri and Watson today, the idea of talking to computers in natural language has fascinated people. More and more, computer programs allow people to interact with them by typing English sentences. The field of computer science that addresses how computers can understand human language is called natural language processing (NLP).

            NLP is a field that attempts to have computers understand natural (i.e., human) language. There are many exciting breakthroughs in the field.

            For this lab, you will explore some of the basics of NLP. As you explore this, you will work with a variety of methods of the `String` class and practice using the `if` statement. You will trace a method to find words in user input.
        emma:
          lessons:
            lesson-1:
              name: practice
          lesson_groups: {}
          name: emma
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-consumer-review-lab:
          lessons:
            lesson-1:
              name: Reviews and Sentiment Value
            lesson-2:
              name: Sentiment Value and Star Ratings
            lesson-3:
              name: Autogenerated Review
            lesson-4:
              name: Create a Positive or Negative Review
            lesson-5:
              name: Open-Ended Activity
          lesson_groups: {}
          name: csa-consumer-review-lab
          title: AP CSA Consumer Review Lab
          description_audience: ''
          description_short: The Consumer Review lab explores how reviews for products and services are evaluated and sometimes manipulated. Students work with methods in the String class and practice using conditionals and iteration to design and implement algorithms to process text files containing reviews.
          description: |-
            The Consumer Review Lab provides students with the opportunity to work on a larger assignment involving multiple classes early in the course, before they necessarily know how to write their own classes. By focusing on calling methods and using the control structures of selection and iteration, students will have practice that directly relates to the **Methods and Control Structures** free-response question type that they will see on the end-of-year exam. Because students often struggle with methods in the `String` class, this lab specifically focuses on calling these methods and building strings in an interesting and engaging way.

            ###Real-World Connection

            We all use reviews on a regular basis, to help us determine which movie to see, which video game to play, or even which pair of headphones to buy. But how easy is it to fake a review? The truth is that it's incredibly simple, and fake reviews can have significant impacts on the products that are purchased or consumed, including movies that people watch and restaurants where they choose to eat. If consumers knew that the review they were reading and using to base a decision on came from a computer program and not a human, they might be less likely to believe it.

            What motivation do people have for creating these fake reviews or comments, and what should be done to prevent it, if anything? If technology can be used to create and post positive reviews for the company's own products or negative reviews of the competition, what are the ethical implications of this?

            Creating fake reviews has ethical implications, and it is important to emphasize that although students are going through the process to see one way in which they can be generated, this is in no way advocating this type of behavior. This is similar to "white hat" hackers needing to understand the same tools and processes of criminal hackers in order to do their job. Discuss with students the ethical concerns and how understanding this process is important to preventing unwanted behaviors online.
          student_description: ''
        csa-data-lab:
          lessons:
            lesson-1:
              name: Data, Data, Data!
            lesson-2:
              name: Designing and Implementing a Custom Class
            lesson-3:
              name: Putting It All Together
            lesson-4:
              name: Open-Ended Activity
          lesson_groups: {}
          name: csa-data-lab
          title: AP CSA Data Lab
          description_audience: ''
          description_short: The Data Lab explores data retrieval and analysis techniques. Students practice developing questions, identifying appropriate data sources, and then writing code to read and process data to answer their questions.
          description: |-
            Students are motivated if they feel connected to the material they are studying. One way to make computer science content relevant, meaningful, relatable, and exciting is to incorporate real-world data sets into hands-on programming assignments.

            Data are values. Values by themselves are not knowledge, knowledge is what you gain from studying data. This lab is designed to encourage students to derive knowledge about a topic of interest to them by examining a set of freely available data from the web. In order to gain knowledge from data in this lab, students will pose a question, search for a data set on that topic, and then process that data to determine the answer to their question.

            ###Real-World Connection

            Being able to access and process data is an important part of many industries. Whether it is determining the best allocation of resources or deciding what new product to create, analyzing data is a necessary component of those conversations. Luckily there are tools available to help read and process data, and this lab will introduce one such tool to students and ask them to utilize existing real-world data to answer a question of their own interest.
          student_description: Data are values. Values by themselves are not knowledge, knowledge is what you gain from studying data. This lab is designed to encourage you to derive knowledge about a topic of interest to you by examining a set of freely available data from the web. In order to gain knowledge from data in this lab, you will pose a question, search for a data set on that topic, and then process that data to determine the answer to your question.
        hello-world-space-2022:
          lessons: {}
          lesson_groups: {}
          name: hello-world-space-2022
          title: 'Hello World: Space'
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        hello-world-soccer-2022:
          lessons: {}
          lesson_groups: {}
          name: hello-world-soccer-2022
          title: 'Hello World: Soccer'
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csd1-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: 'Chapter 2: Computers and Problem Solving'
            lessonGroup-4:
              display_name: Alternative Lessons
            lessonGroup-5:
              display_name: Survey
          name: csd1-2023
          title: Unit 1 - Problem Solving and Computing ('23-'24)
          description_audience: ''
          description_short: Learn how humans work with computers to solve problems.
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter presents computers as machines that solve information problems. Students begin by building a common definition for a computer that focuses on functionality instead of specific hardware. They then explore the ways that computers approach problems. For their final project, students propose an app that could be used to solve a problem of their choosing.\n\n**Goals:**\n* Identify the defined characteristics of a computer and how it is used to solve information problems. \n* Use a structured problem solving process to design solutions that use computing technology. \n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering. \n\n**Big Questions:** \n* How do computers help people to solve problems?\n* How do people and computers approach problems differently?\n* What does a computer need from people in order to solve problems effectively?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
        csd2-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
          name: csd2-2023
          title: Unit 2 - Web Development ('23-'24)
          description_audience: ''
          description_short: " Learn to build your own web site in Web Lab."
          description: |-
            In Web Development, students are empowered to create and share content on their own web pages. They begin by thinking about the role of the web and how it can be used as a medium for creative expression. As students develop their pages and begin to see themselves as programmers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem solving as it relates to programming while they learn valuable skills such as debugging, using resources, and teamwork. At the conclusion of the unit, students will have created a personal website they can publish and share.

            ::: details [**Chapter 1 Overview**]
            **Description:** Students use computing as a form of self expression as they design and develop basic web pages.   Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page. They also explore the privacy and intellectual property implications of publishing their work online.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website as a form of personal expression.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * Why do people create websites?
            * How can text communicate content, structure, and style on a web page?
            * How do I safely and appropriately make use of the content published on the Internet?
            * What strategies can I use when coding to find and fix issues?
            :::

            ::: details [**Chapter 2 Overview**]
            **Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website that solves a problem.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * How can websites be used to address problems in the world?
            * What strategies can teams use to work better together?
            * How do I know what information can be trusted online?
            :::


            ::: details [**Implementation Guidance for Web Development**]
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)
            - You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit
            :::

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went.
          student_description: " In this unit, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
        csd4-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: User Centered Design'
            lessonGroup-3:
              display_name: 'Chapter 2: App Prototyping'
          name: csd4-2023
          title: Unit 4 - The Design Process ('23-'24)
          description_audience: ''
          description_short: Learn how to design a program that meets the needs of your users.
          description: "The Design Process unit transitions students from thinking about computer science as a tool to solve their own problems towards considering the broader social impacts of computing. Through a series of design challenges, students are asked to consider and understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which students have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test their solutions with real users to get feedback and drive further iteration.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter introduces the design process as a specific version of the problem solving process in which empathy for a user's needs is consistently integrated. Students learn strategies for identifying user needs and assessing how well different designs address them. In particular they learn how to develop a paper prototype, how to gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps.\n\n**Goals:** \n* See the design process as a form of problem solving that prioritizes the needs of a user. \n* Identify user needs and assess how well different designs address them. \n* Develop paper prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n\n**Big Questions:**\n* How do designers identify the needs of their user?\n* How can we ensure that a user's needs are met by our designs?\n* What processes will best allow us to efficiently create, test, and iterate upon our designs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter is focused on a long running group project that allows students to apply all they've learned about User-Centered Design to develop an app prototype. Working in teams, students identify a social issue that they care about and design and prototype an app to address that issue. This is an opportunity for students to explore other roles in software development, such as product management, marketing, design, and testing.\n\n\n**Goals:**\n* Develop digital prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n* Understand other roles in software development, such as product management, marketing, design, and testing, and how to use what they have learned about computer science as a tool for social impact.\n\n**Big Questions:**\n* How do teams effectively work together to develop software?\n* What roles beyond programming are necessary to design and develop software?\n* How do designers incorporate feedback into multiple iterations of a product?\n:::\n\n::: details [**Implementation Guidance for The Design Process**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
        csd5-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Representing Information'
            lessonGroup-3:
              display_name: 'Chapter 2: Solving Data Problems'
          name: csd5-2023
          title: Unit 5 - Data and Society ('23-'24)
          description_audience: ''
          description_short: Learn how people use computers to solve data problems.
          description: "The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter focuses on data representation and its role in solving information problems.  Students learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.  For the chapter project, students represent their perfect day in a binary punch card and trade with classmates to decipher.\n\n\n**Goals:**\n* Understand the role of data and data representation in solving information problems. \n* Explain the necessary components of any data representation scheme, as well as the particulars of binary and the common ways that various types of simple and complex data are represented in binary code. \n\n\n**Big Questions:**\n* Why is representation important in problem solving?\n* What features does a representation system need to be useful?\n* What is necessary to create usable binary representation systems?\n* How can we combine systems together to get more complex information?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students explore how data can be used to answer interesting questions and solve problems.  Using a modified version of the general Problem Solving Process, students look at how computers and humans use data differently and the pros and cons of automating problem solving.  After learning ways that computers use data in the real world, students choose their own problem and use data to address it.\n\n\n**Goals:**\n* Investigate and understand how humans and computers use data differently.\n* Design and implement a data-based solution to a given problem and determine how the different aspects of the problem solving process could be automated.\n\n\n\n**Big Questions:**\n* How does data help us to solve problems?\n* How do computers and humans use data differently?\n* What parts of the data problem solving process can be automated?\n* What kinds of problems do computers use data to solve in the real world?\n\n:::\n\n\n::: details [**Implementation Guidance for Data and Society**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
        csd3-2023:
          lessons:
            lesson-18:
              name: Mini-Project - Robot Face
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Images and Animations'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Games'
          name: csd3-2023
          title: Unit 3 - Interactive Animations and Games ('23-'24)
          description_audience: ''
          description_short: Learn to program animations, interactive art, and games in Game Lab.
          description: "In the Interactive Animations and Games unit, students create programmatic images, animations, interactive art, and games. Starting off with simple, primitive shapes and building up to more sophisticated sprite-based games, students become familiar with the programming concepts and the design process computer scientists use daily. They then learn how these simpler constructs can be combined to create more complex programs. In the final project, students develop a personalized, interactive program.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students build up toward programming interactive animations in the Game Lab environment.  They begin with simple shapes and sprite objects, then use loops to create flipbook style animations.  Next, they learn to use booleans and conditionals to respond to user input.  At the end of the chapter, students design and create an interactive animation that they can share with the world.\n\n**Goals:**\n* Create an interactive animation that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* View yourself as a computer programmer, and see programming as a fun and creative form of expression.\n\n\n**Big Questions:**\n* What is a computer program?\n* What are the core features of most programming languages?\n* How does programming enable creativity and individual expression?\n* What practices and strategies will help me as I write programs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter students combine the constructs that they learned in the first chapter to program more complex movement and collisions in their sprites.  As they create more complex programs, they begin to use functions to organize their code.  In the end, students use a design process to create an original game.\n\n**Goals:**\n* Create an interactive game that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* Work with others to break down programming projects using sprites and functions.\n\n**Big Questions:**\n* How do software developers manage complexity and scale?\n* How can programs be organized so that common problems only need to be solved once?\n* How can I build on previous solutions to create even more complex behavior?\n:::\n\n::: details [**Implementation Guidance for Interactive Animations and Games**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
        csd6-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Physical Prototypes'
            lessonGroup-4:
              display_name: Introduction to App Lab
            lessonGroup-5:
              display_name: Old Lessons
            lessonGroup-6:
              display_name: New Lessons
          name: csd6-2023
          title: "[Do Not Use] Creating Apps with Devices"
          description_audience: ''
          description_short: Learn to program with physical devices.
          description: |-
            This is an old, unlaunched script for the Creating Apps with Devices unit used in development. When we published, we instead split this into 2 scripts:

            `/s/csd6a-2023` for Circuit Playground
            `/s/csd6b-2023` for micro:bit
          student_description: |-
            This is an old, unlaunched script for the Creating Apps with Devices unit used in development. When we published, we instead split this into 2 scripts:

            `/s/csd6a-2023` for Circuit Playground
            `/s/csd6b-2023` for micro:bit
        csd7-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Understanding Machine Learning'
            lessonGroup-3:
              display_name: 'Chapter 2: Design a Machine Learning App'
            lessonGroup-4:
              display_name: Intro to App Lab
          name: csd7-2023
          title: Unit 7 - AI and Machine Learning ('23-'24)
          description_audience: ''
          description_short: Learn to about Artificial Intelligence and Machine Learning.
          description: "This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students learn the basics of machine learning and use a tool called AI Lab to create machine learning models that can be used in App Lab. The unit starts with an overview of machine learning and how computers can use patterns in data to make decisions and predictions. Then, students learn how to use AI Lab to train models from tabular data while exploring issues of bias. Lessons follow a repeating \"unplugged - AI Lab - App Lab\" pattern so students are continually exposed to the concepts and tools of machine learning. The chapter culminates in a project where students select from a set of real-world datasets to train a machine learning model and create an app.\n\n\n**Goals:**\n* Create a machine learning model in AI Lab to solve a problem, and use App Lab to create an app that uses their model. \n* Understand how machine learning models make decisions from data\n\n\n**Big Questions:**\n- How does machine learning find patterns in data to make decisions?\n- How can we avoid bias when training a machine learning model?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter prepares students to be machine learning scientists to create an app that addresses an issue in their community. Students follow along with a fictional group of students as they define an issue, develop a survey to collect data, analyze their data in AI Lab, create a model card, and create an app to solve their problem. Then, in the final project, students repeat these same steps with an issue they care about in their community.\n\n**Goals:**\n* Create machine learning models in AI Lab  from their own data and use App Lab to create an app that uses their model to solve problems in their community. \n\n\n**Big Questions:**\n- How can machine learning be used to solve problems in our community?\n\n:::\n\n\n::: details [**Implementation Guidance for the AI and Machine Learning Unit**]\n\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-aiml-2023). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop your own machine learning projects around real-world data. The unit culminates with designing your own machine learning app to solve a personally relevant problem.
        physcomp-temp:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Physical Prototypes'
            lessonGroup-4:
              display_name: Introduction to App Lab
          name: physcomp-temp
          title: Physical Computing [temp]
          description_audience: ''
          description_short: ''
          description: |-
            In the Physical Computing unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.

            **Implementation Guidance for Physical Computing**
            - This unit requires students to have access to Circuit Playground's - [click here](https://code.org/circuitplayground) for more information about using Circuit Playground's in your classroom
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1WGywQ25khB6-FB20x6wO9dGVO9_qJlWkuLVLREJS4Jo/preview) and [Differentiation Guide](https://docs.google.com/document/d/15Y6Mo3fMUtHq16SSskABgcYE-5xfk-Ewv0z_o4uaLdI/preview)

            **Professional Development:** If you are interested in teaching this course, we recommend completing the free [Physical Computing Self-Paced Professional Development Module](). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
        csc-bookcover:
          lessons:
            lesson-1:
              name: 'Book Cover '
          lesson_groups: {}
          name: csc-bookcover
          title: CSC Bookcover
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csc-landmarks-pilot:
          lessons:
            lesson-1:
              name: U.S. Landmarks
            lesson-3:
              name: Local Storytellers
            lesson-4:
              name: Local Landmarks - Unplugged
            lesson-5:
              name: Local Storytellers
          lesson_groups: {}
          name: csc-landmarks-pilot
          title: Mapping Landmarks (Fall 2022 Pilot)
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csc-playground:
          lessons:
            lesson-1:
              name: function machines playground
            lesson-2:
              name: Particles Lesson 1
            lesson-3:
              name: Particles Lesson 2
            lesson-4:
              name: Particles Lesson 3
            lesson-5:
              name: Particles Lesson 4
            lesson-6:
              name: Katie Testing
            lesson-7:
              name: Maze functions
          lesson_groups: {}
          name: csc-playground
          title: CSC Playground
          description_audience: ''
          description_short: ''
          description: 'A place to park CSC stuff '
          student_description: ''
        self-paced-pl-physical-computing1:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          name: self-paced-pl-physical-computing1
          title: Getting Started with Code.org
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching the unit.\n\n**Suggested time:** 80 minutes"
        self-paced-pl-physical-computing2:
          lessons:
            lesson-5:
              name: This lesson needs a name
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach Creating Apps for Devices
          name: self-paced-pl-physical-computing2
          title: Preparing to Teach Creating Apps for Devices
          description_audience: ''
          description_short: ''
          description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your Circuit Playground. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n* Consider the role of the teacher in a computer science classroom.\n\n**Suggested time:** 100 minutes"
          student_description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your Circuit Playground. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n\n**Suggested time:** 100 minutes\n"
        emmas-playground:
          lessons:
            lesson-1:
              name: Emma's Stuff
            lesson-2:
              name: NEW- Function Machines
            lesson-3:
              name: NEW- Function Machines - Lesson 2
            lesson-4:
              name: NEW- Function Machines - Lesson 3
            lesson-5:
              name: NEW- Function Machines - Lesson 4
            lesson-6:
              name: Ecosystems Test
            lesson-7:
              name: Matching Levels
            lesson-9:
              name: AI Draft Levels
          lesson_groups: {}
          name: emmas-playground
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        amys-playground:
          lessons:
            lesson-1:
              name: Bunch of Stuff
          lesson_groups: {}
          name: amys-playground
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csc-function-machines-pilot:
          lessons:
            lesson-1:
              name: What's That Sound?
            lesson-2:
              name: Where is it coming from?
            lesson-3:
              name: What Do They Want?
            lesson-4:
              name: The Secret Message
          lesson_groups: {}
          name: csc-function-machines-pilot
          title: Function Machines Pilot Module
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csp1-2023:
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csp_unit1_2020:
              display_name: 'Unit 1: Digital Information'
          title: Digital Information ('23-'24)
          description: "This unit explores the technical challenges and questions that arise from the need to represent digital information in computers. Learn how complex information like numbers, text, images, and sound are represented in bits, how compression works, and the broader social impacts of digitizing the world's information.\n\n*(Click the arrows below to expand)*\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####Establishing a Strong Classroom Culture\n This unit is designed to be hands-on, collaborative, and exploratory. A major focus of the unit is building a positive classroom culture in which students work together, explore problems, and communicate about their thinking. Most lessons either feature physical manipulatives or a digital widget, and the bulk of lesson time should be spent with students exploring these tools together to develop an understanding of the concepts they highlight. The course intentionally does not start with programming since, in many classrooms, some students have experience with programming and others do not. Choosing to begin with digital information and the internet lets you build community in the room while exploring a topic that is likely to be accessible to all students. The supportive and inclusive classroom environment built in this unit should help set a positive tone that can be carried through the school year.\n\n\n####Empowering \"Deciders\"\n An important goal of the course is not merely to teach students technical knowledge, but to put those skills to work in meaningful ways. This unit builds towards the unit project, which provides an opportunity for students to be \"deciders\" about the impacts of computing on modern life. Other units will emphasize empowering units as \"creators.\"\n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n\n&nbsp\n\nThe unit project asks students to consider and debate issues that arise in modern society due to the digitizing of information. Students will analyze an article that addresses the intersection of digitizing information and current events. They will evaluate what data is being digitized and evaluate the benefits and harms caused by making this information digital. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n\n\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and its associated project help build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* DAT-1: The way a computer represents data internally is different from the way the data is interpreted and displayed for the user. Programs are used to translate data into a representation more easily understood by people.\n* IOC-1: while computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 2.1 Binary Numbers\n* 2.2 Data Compression\n* 5.5 Legal and Ethical Concerns.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers. Learn how complex information like numbers, text, images, and sound are represented in text, how compression works, and the broader social impacts of digitizing the world's information.
          description_short: Explore the challenges and impacts of representing information about the world around you in bits.
          description_audience: ''
          lessons: {}
          name: csp1-2023
        csp2-2023:
          lesson_groups:
            csp_unit2_2020:
              display_name: 'Unit 2: The Internet'
          title: The Internet ('23-'24)
          description: "This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n####Inventing the Internet with the Internet Simulator\n \nThis unit features many different versions of the Internet Simulator, a digital widget that simulates how different features or \"layers\" of the Internet work. As students move from lesson to lesson, the version of the Internet Simulator they use will have slightly more functionality than the last. Lessons will present students with challenges that closely mimic those that the internet's original inventors needed to solve. Students will collaboratively design and test solutions to those problems to develop an intuitive understanding of how the internet works and why it was designed that way. By the end of the unit, students will have \"invented the internet\" themselves! \n\n####Continuing to Establish a Strong Classroom Culture\nMuch like the Digital Information unit that comes before it, this unit emphasizes collaborative problem solving and developing a supportive and inclusive classroom culture. \n:::\n\n::: details [**⭐️ Major Assessment and Projects**]\n\n&nbsp\nThe unit project asks students to design a policy position for an imaginary political candidate related to an \"Internet Dilemma.\" Students must analyze news stories about their topic to identify impacted groups, explain those groups' interests, explain technical background about the dilemma, and then recommend a policy solution that the candidate should advocate for. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n:::\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and its associated project help build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CSN-1: that computer systems and networks facilitate how data are transferred\n* IOC-1: and that while computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 4.1 The Internet\n* 4.2 Fault Tolerance\n* 5.2 Digital Divide\n\n\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went."
          student_description: This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.
          description_short: Build the internet from the ground up using the Internet Simulator.
          description_audience: ''
          lessons: {}
          name: csp2-2023
        csp3-2023:
          lesson_groups:
            csp_unit3_2020:
              display_name: 'Unit 3: Intro to App Design'
          title: Intro to App Design ('23-'24)
          description: "This unit is an introduction to programming and app design with a heavy focus on important skills like debugging, pair programming, and user testing. Learn how to design user interfaces and write event-driven programs in App Lab and then design a project that teaches your classmates about a topic of your choosing.\n\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n ####New Topics, Same Classroom Culture\nThis unit is students' first experience with programming. It is designed to maintain the collaborative and inclusive classroom environment developed in the previous two units. The collaborative project, fun, unplugged activities, and the focus on experimenting should help keep your whole class working together and trying out ideas. \n\n####Emphasizing Skills \nSince this is the first of many programming units, it emphasizes attitudes and skills that will serve your students well for the remainder of the year. The project that runs through this unit emphasizes that programming is a creative and collaborative endeavor that students can use to help others. Key practices like pair programming and debugging help normalize working with a partner, asking for help, and making mistakes. While students have a lot to learn about programming and App Lab, there is just as much emphasis on establishing these positive habits and mindsets. \n\n####Empowering \"Creators\"\nThis unit empowers students to be creators with a major emphasis on making personally meaningful apps. Students have a lot to learn about programming. Still, the goal is for students to come away from this unit, seeing programming as a powerful form of personal expression that allows them to draw on their innate talents and interests to help solve problems in their community.\n\n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n\n&nbsp\n\nThe unit project asks students to collaborate with a classmate to design an app that can teach others about a topic of shared interest. Students practice interviewing classmates to identify the project's goals, mockup designs, collaboratively program the app and run simple user tests. The app itself must include at least three screens and demonstrate what students have learned about user interface design and event-driven programming. Students submit their app, project guide, and written responses to reflection questions about how the app is designed and the development process used to make it. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n\n\n\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CRD-1: incorporating multiple perspectives through collaboration improves computing innovations as they are developed.\n* CRD-2: developers create and innovate using an iterative design process that is user-focused, that incorporates implementation/feedback cycles, and that leaves ample room for experimentation and risk-taking.\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that can be reused. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and with more confidence.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 1.1 Collaboration\n* 1.2 Program Function and Purpose\n* 1.3 Program Design and Development\n\nThe College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.\n\n* 3.a.i.\n* 3.a.ii.\n* 3.a.iii\n\n:::\n\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is an introduction to programming and app design with a heavy focus on important skills like debugging, pair programming, and user testing. Learn how to design user interfaces and write event-driven programs in App Lab and then design a project that teaches your classmates about a topic of your choosing.
          description_short: Design your first app and learn how programmers collaborate and interact with users to build the best possible solutions to problems.
          description_audience: ''
          lessons: {}
          name: csp3-2023
        csp4-2023:
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
          title: Variables, Conditionals, and Functions ('23-'24)
          description: "This unit explores how variables, conditionals, and functions allow for the design of increasingly complex apps. Learn how to program with these three new concepts through a sequence of collaborative activities. Then build your own decision maker app to share with friends and help them make a decision.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n#### Intro to EIPM\n\nThis unit is students' first experience with the Explore, Investigate, Practice, Make lesson sequence, or EIPM. This structured approach to teaching programming is covered in detail in the curriculum guide. We highly recommend watching the [accompanying video series](https://www.youtube.com/playlist?list=PLzdnOPI1iJNeqEl6MN7c2KyM3gdBSo8t3) to better understand what EIPM should look like in the classroom. When used effectively, it supports deep learning of content and helps maintain a collaborative classroom culture, even as you move into more complex programming concepts.\n\n####Scaffolding Towards Independent Projects \n\nA major goal of this course is to empower students to design and build projects independently. The Create PT in Unit 8 offers students enormous freedom to scope and build projects, and even this unit begins scaffolding towards that goal. Individual EIPM sequences of lessons gradually prepare students for scoped, independent Make projects. The unit project has a few requirements, but students are largely free to choose the design, topic, and implementation of their ideas. As you teach the unit, look for the opportunities to scaffold the skills and knowledge students will need to creatively and independently tackle the unit project.\n\n\n\n\n:::\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n\n&nbsp\n\nThe unit project asks students to design an app that makes a recommendation based on information from user input. Students are given a great deal of freedom to choose their topic, design their user interface, and decide how to actually program their app's behavior. Students submit their app, project guide, and written responses to reflection questions about how the app is designed and the development process they used to make it. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n\n\n:::\n\n\n::: details [**✅ AP Connections**]\n\n\n&nbsp\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CRD-2: Developers create and innovate using an iterative design process that is user-focused, that incorporates implementation/feedback cycles, and that leaves ample room for experimentation and risk-taking.\n* AAP-1: To find specific solutions to generalizable problems, programmers represent and organize data in multiple ways.\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that can be reused. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and with more confidence.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 1.4 Identifying and Correcting Errors\n* 3.1 Variables and Assignment\n* 3.3 Mathematical Expressions\n* 3.5 Boolean Expressions\n* 3.6 Conditionals\n* 3.7 Nested Conditionals\n* 3.15 Random Values\n\nThe College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.\n\n* 3.a.i.\n* 3.a.ii.\n* 3.a.iii\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores how variables, conditionals, and functions allow for the design of increasingly complex apps. Learn how to program with these three new concepts through a sequence of collaborative activities. Then build your own decision maker app to share with friends and help them make a decision.
          description_short: Learn how to build apps that store information, make decisions, and keep code organized.
          description_audience: ''
          lessons: {}
          name: csp4-2023
        csp5-2023:
          lesson_groups:
            csp_lists:
              display_name: Data
            csp_loops:
              display_name: Loops
            csp_traversals:
              display_name: Traversals
            csp_project:
              display_name: Project
            lessonGroup-5:
              display_name: Post-Course Survey
            lessonGroup-6:
              display_name: Pre-Unit Survey
          title: Data ('23-'24)
          description: "In this unit learn how data analysis helps turn raw data into useful information about the world. Learn how to use data visualization to find patterns inside of data sets and learn how this data analysis process is being used in contexts like open data or machine learning to help make decisions or learn more about our world. In the unit project, you'll analyze a dataset of your choosing and present your findings. \n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####The Data Analysis Process\nThis unit is built around a data analysis process that helps students break down how data is turned into new information about the world. Some lessons are designed around different steps of this process, like cleaning data or building visualizations. Other lessons focus on ways this process is applied in real-world contexts like citizen science or machine learning. The data analysis process helps provide a consistent reference point as students explore the importance of data analysis in computing. \n\n####Exploring Data with the Data Visualizer\nThe Data Visualizer is a tool built into App Lab that allows students to quickly create visualizations of the data they've added to their projects. The set of possible visualizations is intentionally limited to a few ways to change or modify the chart. This tool aims to encourage exploring the different kinds of questions that can be answered with data visualizations, with a greater emphasis on students' ability to create a variety of visualizations quickly. This exploration should also help students build more meaningful and powerful apps in future units when they start using these datasets in their programs.\n:::\n\n::: details [**⭐️ Major Assessment and Projects**]\n&nbsp\n\nStudents use the data visualizer to find and present a data story. Using what they've learned about the data analysis process, students either choose a dataset inside the data library or upload one of their own and create visualizations that find interesting patterns that may reveal new insights and knowledge. Students complete an activity guide describing their findings and the process they used in identifying them. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n:::\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs please see the \"Standards\" page for this unit.\n\n* DAT-2: Programs can be used to process data, which allows users to discover information and create new knowledge.\n* IOC-1: While computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences.\n\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 2.3 Extracting Information from Data\n* 2.4 Using Programs with Data\n* 5.3 Computing Bias\n* 5.4 Crowdsourcing\n\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: 'In this unit learn how data analysis helps turn raw data into useful information about the world. Learn how to use data visualization to find patterns inside of data sets and learn how this data analysis process is being used in contexts like open data or machine learning to help make decisions or learn more about our world. In the unit project, you''ll analyze a dataset of your choosing and present your findings. '
          description_short: Explore and visualize datasets from a wide variety of topics as you hunt for patterns and try to learn more about the world around you.
          description_audience: ''
          lessons:
            lesson-1:
              name: Lists, Loops, and Traversals Pre-Survey
            lesson-2:
              name: Reflection and Interest Inventory
          name: csp5-2023
        csp6-2023:
          lesson_groups:
            csp_unit6_2020:
              display_name: Lists
            lessonGroup-2:
              display_name: Post-Course Survey
            lessonGroup-3:
              display_name: Loops
            lessonGroup-4:
              display_name: Traversals
            lessonGroup-5:
              display_name: Project
            lessonGroup-6:
              display_name: Pre-Unit Interest Inventory
          title: Lists, Loops, and Traversals ('23-'24)
          description: "This unit introduces lists, loops, and traversals, and explores the way they can be used to build apps that store and process large amounts of information. Learn to program with the data library in App Lab and complete a 5-day hackathon project at the end of the unit where you can design a program about any topic of your choosing.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####Independent Creation and The Hackathon Project\nMuch like the project in Unit 4, the \"Hackathon\" project in this unit is designed as an opportunity for students to creatively and independently build something with their programming skills. While students are asked to include some technical requirements in their program to ensure they demonstrate mastery of new programming concepts, they have free rein to choose the goals, design, and implementation of their project. To avoid asking students to complete a major programming project right before the Create PT, this hackathon is the most \"Create-PT-like\" project of the course. It is the best chance for students to practice skills like budgeting time or scoping an open-ended project. In many classrooms, if you maintain the recommended pacing of the course, this project serves as an excellent end to the first semester.\n\n####Growing Comfort with EIPM\nBy this unit, students (and teachers!) should be developing greater comfort with the flow of EIPM lessons. Students may begin to anticipate that sequences build towards an independent Make lesson or look forward to stepping away from computers to Explore. A nice feature of EIPM is that you will find strategies and modifications to each lesson type that work best for your students. Keep an eye out for how you and your students are developing comfort with EIPM and note strategies that help meet your classroom's needs.\n\n####Programming with Real-world Data\nThe Data Library is a feature in App Lab designed to let students program with data from the real world. This tool aims to motivate students to build new kinds of data-powered apps that they find personally interesting. This tool also facilitates programming with lists of information since students will need to manipulate lists of data to incorporate the different data sources. Encourage students to use datasets they find personally relevant as they draw on their creative ideas for bringing data to life.\n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\nThe unit project asks students to spend five days as part of a \"Hackathon\" project that they have nearly complete independence to scope and design. Students must choose one dataset from the Data Library in AppLab to be a component of their project to demonstrate what they have learned about lists and list processing; otherwise, scoping the project is completely up to them. Students submit their app, project guide, and written responses to reflection questions about how the app is designed and the development process they used to make it. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CRD-2: Developers create and innovate using an iterative design process that is user-focused, incorporating implementation/feedback cycles, which leaves ample room for experimentation and risk-taking.\n* AAP-1: To find specific solutions to generalizable problems, programmers represent and organize data in multiple ways.\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that they can reuse. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and more confidently.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 3.2 Data Abstraction\n* 3.4 Strings\n* 3.8 Iteration\n* 3.10 Lists\n* 3.16 Simulations\n\nThe College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.\n\n* 3.b.i\n* 3.b.ii\n* 3.b.iii\n* 3.b.iv\n* 3.b.v\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went.\n\n"
          student_description: 'This unit introduces lists, loops, and traversals, and explores the way they can be used to build apps that store and process large amounts of information. Learn to program with the data library in App Lab and complete a 5-day hackathon project at the end of the unit where you can design a program about any topic of your choosing.

            '
          description_short: Learn how to build apps that use lists, loops, and traversals to store and process large amounts of information.
          description_audience: ''
          lessons: {}
          name: csp6-2023
        csp7-2023:
          lesson_groups:
            csp_parameters_return_values:
              display_name: Parameters and Return Values
            csp_libraries:
              display_name: Libraries
            lessonGroup-3:
              display_name: Post-Course Survey
          title: Parameters, Return, and Libraries ('23-'24)
          description: "This unit introduces parameters, return, and libraries. Learn how to use these concepts to build new kinds of apps as well as libraries of code that you can share with your classmates. End the unit by designing a library of functions around any topic of your choosing.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####Learning by Building Libraries\nIn the second EIPM sequence of this unit, students learn to use the Student-Create Libraries tool in App Lab. This tool allows them to build and share libraries of functions that they can use in many different projects. This tool serves many purposes besides simply teaching students about libraries. By having to write functions that other students find useful, they will need to think about common patterns or situations that they have seen in projects across the course. Students will also practice commenting their code so others can understand how it works, practice designing functions that use parameters and return.  \n\n####Final Preparation for the Create PT\nStudents learn very few new concepts in this unit; nevertheless, it can be challenging because students need to learn how to integrate the ideas of parameters and return with every other concept they have learned in this course. This unit presents a good opportunity to do a final review of every programming construct covered in the course as students prepare to demonstrate what they've learned on the Create PT.\n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n&nbsp\n\nThe unit project asks students to design a library of functions that they can share with classmates. Their library must contain at least two functions, and at least one of those functions must include a parameter, return, a loop, and an if-statement. This requirement ensures students practice skills they will use in the Create PT. Using a project guide, students choose a theme for their library, build it, test it, and exchange feedback with other students. Students submit their library code, project guide, and written responses to reflection questions about how the app is designed and the development process they used to make it. They will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CRD-2: Developers create and innovate using an iterative design process that is user-focused, that incorporates implementation/feedback cycles, and that leaves ample room for experimentation and risk-taking.\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that can be reused. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and with more confidence.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 3.12 Calling Procedures\n* 3.13 Developing Procedures\n* 3.14 Libraries\n\nThe College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.\n\n* 3.c.i\n* 3.c.ii\n* 3.c.iii\n* 3.c.iv\n* 3.d.i\n* 3.d.ii\n* 3.d.iii\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went.\n"
          student_description: This unit introduces parameters, return, and libraries. Learn how to use these concepts to build new kinds of apps as well as libraries of code that you can share with your classmates. End the unit by designing a library of functions around any topic of your choosing.
          description_short: Learn how to design clean and reusable code that you can share with a single classmate or the entire world.
          description_audience: ''
          lessons: {}
          name: csp7-2023
        csp8-2023:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Unit 8: Cybersecurity and Global Impacts'
            lessonGroup-3:
              display_name: Post-Course Survey
          title: Cybersecurity and Global Impacts ('23-'24)
          description: "In this unit learn how computing innovations have impacted our world in beneficial and harmful ways. Learn how data can pose a threat to our privacy and security and the ways that encryption and other techniques are used to protect it. Throughout the unit participate in a \"school of the future\" conference in which you and a team make a proposal for how best to improve school life with computing innovations.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####Learning Through Full-class Simulation\nThe simulation project that runs through this unit serves several important goals. It helps contextualize what students are learning by moving from abstract ideas of privacy or security to concrete potential innovations. Since the simulation is based on modernizing schools, students can consider the consequences of computing innovations in a familiar setting. By taking on an assigned role and interacting with a group of teammates who have done the same, students must consider a breadth of interests and goals beyond their own when it comes to innovating in schools. \n\n####Ending the Year as \"Deciders\"\nA major theme students engage with throughout this unit is the need to consider both sides of technological innovation. Computing technology has led to both benefits and harms to culture, economy, and society at large. Responding to important questions facing our world requires understanding technology and an ability to identify and interpret the impacts it causes. This unit is not designed to advocate for any particular point of view on the impact of technology. Still, it should empower students to adeptly see and weigh the consequences of the technology around them. While the Create PT may feel like the most significant project of this course, the Explore Curricular requirement and the questions faced in this unit are arguably more crucial. Many of the young people who take CS Principles may pursue studies or careers in which they are \"creators\" with technology, but all of them will need to be thoughtful \"deciders\" in a world profoundly shaped by computing. \n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n&nbsp\n\nStudents complete the Future School Convention simulation throughout this unit. Working in teams of roughly five people, students are assigned a role and a set of interests they'll need to investigate. They research real-world innovations that could improve schools and align with the interests of their character. Throughout the unit, they are given opportunities to refine their proposals as a team and debate the benefits and risks of different computing innovations. Eventually, their team submits an overall proposal for the Future School, and all students vote for the team and innovation they believe to be the best. Students will also complete an end-of-unit assessment aligned with the CS Principles framework objectives covered in this unit.\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs please see the \"Standards\" page for this unit.\n\n* IOC-1: While computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences.\n* IOC-2: The use of computing innovations may involve risks to your personal safety and identity.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 5.1 Beneficial and Harmful Effects\n* 5.6 Safe Computing\n\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=8) to let the Code.org curriculum team know how the unit went.\n"
          student_description: In this unit learn how computing innovations have impacted our world in beneficial and harmful ways. Learn how data can pose a threat to our privacy and security and the ways that encryption and other techniques are used to protect it. Throughout the unit participate in a "school of the future" conference in which you and a team make a proposal for how best to improve school life with computing innovations.
          description_short: 'Research and debate current events at the intersection of data, public policy, law, ethics, and societal impact. '
          description_audience: ''
          lessons: {}
          name: csp8-2023
        csp9-2023:
          lesson_groups:
            csp_unit9_2020:
              display_name: 'Unit 9: Create PT'
            lessonGroup-2:
              display_name: Post-Course Survey
            lessonGroup-3:
              display_name: Mock Exam
          title: Create PT Prep ('23-'24)
          description: In this unit prepare for, and do the AP Create Performance Task. Each lesson contains links to helpful documents and activities to help you understand the task and develop a plan for completing it.
          student_description: In this unit prepare for, and do the AP Create Performance Task. Each lesson contains links to helpful documents and activities to help you understand the task and develop a plan for completing it.
          description_short: Practice and complete the Create Performance Task (PT).
          description_audience: ''
          lessons:
            lesson-1:
              name: Create PT Written Response Mock Exam
          name: csp9-2023
        csp10-2023:
          lesson_groups:
            csp_unit10_2020:
              display_name: 'Unit 10: Algortihms'
            lessonGroup-2:
              display_name: Post-Course Survey
          title: Algorithms ('23-'24)
          description: "This unit is a quick exploration of how computer scientists design algorithms to solve problems and how they analyze the speed of different algorithms. Learn about the concept of algorithmic efficiency through a variety of hands-on activities and learn how it's being applied in modern computing.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####Just Enough Math\nThis unit includes some mathematical concepts which enrich students' understanding of how algorithms are analyzed, which might at first be a little intimidating to some students (and teachers!). The mathematical topics included in this unit are only those necessary to provide a solid foundation in algorithmic analysis to the depth described in the CS Principles framework. If you are a teacher with a strong mathematical background, check carefully that you do not needlessly add complexity to a unit that might already prove challenging for some students. All teachers should keep an eye out for the ways visuals, hands-on examples, and patterns in presentation style are used to ensure a consistent presentation of these mathematical topics.\n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n&nbsp\n\nThis unit does not conclude with a major project. Students will complete an end-of-unit assessment that is aligned with CS Principles framework objectives covered in this unit.\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-4: There exist problems that computers cannot solve, and even when a computer can solve a problem, it may not be able to do so in a reasonable amount of time.\n* CSN-2: Parallel and distributed computing leverage multiple computers to more quickly solve complex problems or process large data sets.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 3.9 Developing Algorithms\n* 3.11 Binary Search\n* 3.17 Algorithmic Efficiency\n* 3.18 Undecidable Problems\n* 4.3 Parallel and Distributed Computing\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=10) to let the Code.org curriculum team know how the unit went.\n\n"
          student_description: 'This unit is a quick exploration of how computer scientists design algorithms to solve problems and how they analyze the speed of different algorithms. Learn about the concept of algorithmic efficiency through a variety of hands-on activities and learn how it''s being applied in modern computing.

            '
          description_short: Design and analyze algorithms to understand how they work and why some are considered better than others.
          description_audience: ''
          lessons: {}
          name: csp10-2023
        csp-post-survey-2023:
          title: CS Principles Post-Course Survey
          description: This unit contains the CS Principles Post-Course Survey.
          student_description: This unit contains a survey about the CS Principles Course. Your teacher will tell you when it's time to take this survey.
          description_short: ''
          description_audience: ''
        self-paced-pl-csa-2023:
          lessons: {}
          lesson_groups: {}
        self-paced-pl-csa1-2023:
          title: 'Module 1: Welcome'
          description: |-
            This module is for anyone using these professional learning modules for CSA.

            **You will:**
            * Get an introduction to Code.org.
            * Learn how to engage in these professional learning modules.
            * Get an introduction to the AP Computer Science A course
            * Learn Code.org’s curricular approach to CSA

            **Estimated Time:** 1 hour
          student_description: |-
            This module is for anyone using these professional learning modules for CSA.

            **You will:**
            * Get an introduction to Code.org.
            * Learn how to engage in these professional learning modules.
            * Get an introduction to the AP Computer Science A course
            * Learn Code.org’s curricular approach to CSA

            **Estimated Time:** 1 hour
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csa1-2023
        self-paced-pl-csa2-2023:
          title: 'Module 2: Navigating Code.org'
          description: "This module is intended for teachers who are new to Code.org and the Code.org platform. \n\n**You will:**\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching the course.\n\n**Estimated Time:** 1 hour\n"
          student_description: |-
            This module is intended for teachers who are new to Code.org and the Code.org platform.

            **You will:**
            * Navigate the Code.org website and teacher tools.
            * Set up a classroom section.
            * Locate and use course lesson plans and teacher resources.
            * Learn how to access support while teaching the course.

            **Estimated Time:** 1 hour
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csa2-2023
        self-paced-pl-csa3-2023:
          title: 'Module 3: Support for text-based programming'
          description: |
            This module is for any teacher who is experienced in using variables, conditionals, loops and arrays in other programming languages, but is new to Java.

            **You will:**
            * Create a new file in the Java Lab IDE
            * Become familiar with the basics of Java syntax
            * Declare and initialize variables
            * Use variables in arithmetic operations
            * Print variables and text to the console
            * Write and read if, if-else, if-else-if-else statements
            * Read, write, and debug for loops in Java
            * Declare and  initialize a 1D array of primitive data types
            * Access and modify elements in arrays
            * Traverse arrays

            **Estimated Time:** 6 hours
          student_description: |
            This module is for any teacher who is experienced in using variables, conditionals, loops and arrays in other programming languages, but is new to Java.

            **You will:**
            * Create a new file in the Java Lab IDE
            * Become familiar with the basics of Java syntax
            * Declare and initialize variables
            * Use variables in arithmetic operations
            * Print variables and text to the console
            * Write and read if, if-else, if-else-if-else statements
            * Read, write, and debug for loops in Java
            * Declare and  initialize a 1D array of primitive data types
            * Access and modify elements in arrays
            * Traverse arrays

            **Estimated Time:** 6 hours
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csa3-2023
        csa-examples-22:
          lessons:
            lesson-1:
              name: Unit 1 Projects
            lesson-2:
              name: Unit 2 Projects
            lesson-3:
              name: Unit 3 Projects
            lesson-4:
              name: Unit 4 Projects
            lesson-5:
              name: Unit 5 Projects
            lesson-6:
              name: Unit 6 Projects
            lesson-7:
              name: Unit 7 Projects
            lesson-8:
              name: Unit 8 Projects
          lesson_groups: {}
          name: csa-examples-22
          title: CSA Unit Project Examples [2022-2023]
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        amy-playground:
          lessons:
            lesson-1:
              name: Particles
            lesson-3:
              name: Sprite Lab Building Demo
            lesson-4:
              name: ecosystems
          lesson_groups: {}
          name: amy-playground
          title: Amy's Place To Do Stuff
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        angelina-playground:
          lessons:
            lesson-1:
              name: States of Matter
            lesson-2:
              name: OG States of Matter
            lesson-3:
              name: CTF Flash Talk
            lesson-4:
              name: CSS Grid
            lesson-5:
              name: Assessments
            lesson-6:
              name: Lesson 1
          lesson_groups:
            lessonGroup-2:
              display_name: Cyber
            lessonGroup-3:
              display_name: CSD
            lessonGroup-4:
              display_name: Random
            lessonGroup-5:
              display_name: Coding w/AI
            lessonGroup-6:
              display_name: PL Stuff
          name: angelina-playground
          title: Angelina's Place To Do Stuff
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csc-pilot-fa2022-timecapsule:
          lessons: {}
          lesson_groups: {}
          name: csc-pilot-fa2022-timecapsule
          title: Time Capsules (Fall 2022 Pilot)
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csc-pilot-fa2022-ecosystem:
          lessons: {}
          lesson_groups: {}
          name: csc-pilot-fa2022-ecosystem
          title: Ecosystems (Fall 2022 Pilot)
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csp-playground:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Variables EIPM (Erik)
          name: csp-playground
          title: CSP Playground
          description_audience: Curriculum Writers
          description_short: For staging updates to lessons or levels between curriculum versions
          description: ''
          student_description: ''
        csc-pilot-fa2022-particles:
          lessons: {}
          lesson_groups: {}
          name: csc-pilot-fa2022-particles
          title: 'Particles '
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        devices-2022:
          lessons:
            lesson-11:
              name: Problem Solving Process with Programming
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
          name: devices-2022
          title: Creating Apps with Devices (Circuit Playground)
          description_audience: ''
          description_short: ''
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [Creating Apps with Devices - micro:bit unit](/s/microbit-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1WGywQ25khB6-FB20x6wO9dGVO9_qJlWkuLVLREJS4Jo/preview) and [Differentiation Guide](https://docs.google.com/document/d/15Y6Mo3fMUtHq16SSskABgcYE-5xfk-Ewv0z_o4uaLdI/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
        allthevalidation:
          lessons:
            lesson-1:
              name: Sprite Lab Validation
          lesson_groups: {}
          name: allthevalidation
          title: All The Validation
          description_audience: ''
          description_short: ''
          description: This is a place to create levels to document and unit test Sprite Lab validation
          student_description: ''
        vpl-csd5-ayw-pilot-2022:
          lessons:
            lesson-1:
              name: Workshop Opener
            lesson-2:
              name: Content Workshop
            lesson-3:
              name: Supporting Equity
            lesson-4:
              name: Closing
            lesson-5:
              name: Asynchronous Curriculum Investigation
          lesson_groups:
            lessonGroup-2:
              display_name: 'Part 1: Synchronous Session'
            lessonGroup-3:
              display_name: 'Part 2: Asynchronous Post-Work'
          name: vpl-csd5-ayw-pilot-2022
          title: CS Discoveries Virtual Module 5
          description_audience: ''
          description_short: ''
          description: |-
            **Participants will:**

            * Build confidence and skill in core computer science concepts.
            * Describe ways to improve access and diversity in CS at their schools.
            * Identify strategies to reduce stereotype threat in their CS classrooms.
          student_description: |-
            **You will:**

            * Build confidence and skill in core computer science concepts.
            * Describe ways to improve access and diversity in CS at your school.
            * Identify strategies to reduce stereotype threat in your CS classroom.
        vpl-csd6-ayw-pilot-2022:
          lessons:
            lesson-1:
              name: Workshop Opener
            lesson-2:
              name: Content Workshop
            lesson-3:
              name: Supporting Student Learning
            lesson-4:
              name: Closing
            lesson-5:
              name: Asynchronous Curriculum Investigation
          lesson_groups:
            lessonGroup-2:
              display_name: 'Part 1: Synchronous Session'
            lessonGroup-3:
              display_name: 'Part 2: Asynchronous Post-Work'
          name: vpl-csd6-ayw-pilot-2022
          title: CS Discoveries Virtual Module 6
          description_audience: ''
          description_short: ''
          description: |-
            **Participants will:**

            * Build confidence and skill in core computer science concepts.
            * Reflect on their role in supporting student learning.
            * Practice their responses to common classroom scenarios.
          student_description: |-
            **You will:**

            * Build confidence and skill in core computer science concepts.
            * Reflect on your role in supporting student learning.
            * Practice your responses to common classroom scenarios.
        self-paced-pl-csa4-2023:
          lessons:
            lesson-1:
              name: Creating and using objects
            lesson-2:
              name: Exploring the Painter class
          lesson_groups: {}
          name: self-paced-pl-csa4-2023
          title: 'Module 4: Getting to know the Painter class'
          description_audience: ''
          description_short: ''
          description: |-
            This module is for any teacher who is familiar with Java OR has done Module 3, but who want introduction to the student-facing tools Code.org's in CSA Curriculum.

            **You will:**
            * Use Object Oriented Programming concepts in Code.org’s Neighborhood
            * Instantiate an object
            * Call methods from the `Painter` class
            * Learn how to use UML diagrams



            **Estimated Time:** 2 hours
          student_description: |-
            This module is for any teacher who is:

            * Experienced in using variables, conditionals, loops and arrays in other programming languages
            * Has finished Module 3 in this set of Modules
            * Is new to Java
            * Want an introduction to the student-facing tools in Code.org's tools in CSA Curriculum.

            **You will:**
            * Use Object Oriented Programming concepts in Code.org’s Neighborhood
            * Instantiate an object
            * Call methods from the `Painter` class
            * Learn how to use UML diagrams


            **Estimated Time:** 2 hours
        katies-playground:
          lessons:
            lesson-1:
              name: FM Ideas
            lesson-3:
              name: Animal Adaptations
            lesson-4:
              name: Function Machines w Artist
            lesson-5:
              name: AI 3-5
            lesson-7:
              name: Hello Game Design
            lesson-8:
              name: Game Development
            lesson-9:
              name: Game Jam - Create
            lesson-10:
              name: Game Jam - Play
            lesson-11:
              name: Game Mechanics
            lesson-12:
              name: New Game Design Lesson 3
            lesson-13:
              name: Music Lab Testing
            lesson-14:
              name: Chatbots
          lesson_groups: {}
          name: katies-playground
          title: Katie's Place To Do Stuff
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        microbit-2022:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
          name: microbit-2022
          title: Creating Apps with Devices (Micro:bit)
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        microbit-temp:
          lessons:
            lesson-11:
              name: LED Screen
          lesson_groups:
            lessonGroup-2:
              display_name: Intro to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
          name: microbit-temp
          title: Micro:bit Temp
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csc-timecapsule-2023:
          lessons: {}
          lesson_groups: {}
          name: csc-timecapsule-2023
          title: Coding a Time Capsule
          description_audience: ''
          description_short: ''
          description: "##Suggested Pre-Work for this Module\n\n**Social Studies:** Read any of these [Multiple Perspectives Read Alouds](https://docs.google.com/document/d/1GU2wLxQ2xkoYGrjJU2mbngZEDxOX7bEWTlh4Ns1cnh8/template/preview) together as a class to enrich the discussion questions throughout the module, especially regarding the importance of having your voice in your own story, and what happens if certain things are included or left out. \n\n**ELA:** Read poetry together: Read a few poems together as a class and practice naming the mood of each poem. Encourage students to share their interpretation, even if it’s different from someone else’s. Make sure that all students are familiar with the structure of a poem before Lesson 2, in which students will write their own poems.\n\n**Computer Science:**  Students will be working with sprites and events in the module. We recommend beginning with [Hello World](https://studio.code.org/s/coursee-2023/lessons/4) (45 minutes) where students will gain a basic introduction to sprites and how to animate them with events. \n\n**New to teaching Computer Science?**\n\nGet started with our [self-paced Professional Learning](https://studio.code.org/s/self-paced-pl-csc-2023).\n"
          student_description: ''
        vpl-csd7-ayw-pilot-2022:
          lessons:
            lesson-2:
              name: Content Workshop
            lesson-1:
              name: Workshop Opener
            lesson-3:
              name: Planning for Next Year
            lesson-4:
              name: Unconference
            lesson-5:
              name: Closing
            lesson-6:
              name: Asynchronous Curriculum Investigation
          lesson_groups:
            lessonGroup-3:
              display_name: 'Part 1: Synchronous Session'
            lessonGroup-2:
              display_name: 'Part 2: Asynchronous Post-Work'
          name: vpl-csd7-ayw-pilot-2022
          title: CS Discoveries Virtual Module 7
          description_audience: ''
          description_short: ''
          description: |-
            **Participants will:**

            * Build confidence and skill in core computer science concepts.
            * Reflect on their previous year of teaching CS Discoveries by naming successes and challenges.
            * Determine which units they will teach and in what order for the following year of CS Discoveries.
            * Collaborate and share ideas with other teachers.
          student_description: |-
            **You will:**

            * Build confidence and skill in core computer science concepts.
            * Reflect on your previous year of teaching CS Discoveries by naming successes and challenges.
            * Determine which units you will teach and in what order for the following year of CS Discoveries.
            * Collaborate and share ideas with other teachers.
        vpl-csd8-ayw-pilot-2022:
          lessons:
            lesson-1:
              name: Workshop Opener
            lesson-2:
              name: Content Workshop
            lesson-3:
              name: Committing to Equitable Teaching Practices
            lesson-4:
              name: Connecting to the Community Going Forward
            lesson-5:
              name: Closing
            lesson-6:
              name: Asynchronous Curriculum Investigation
          lesson_groups:
            lessonGroup-2:
              display_name: 'Part 1: Synchronous Session'
            lessonGroup-3:
              display_name: 'Part 2: Asynchronous Post-Work'
          name: vpl-csd8-ayw-pilot-2022
          title: CS Discoveries Virtual Module 8
          description_audience: ''
          description_short: ''
          description: |-
            **Participants will:**

            * Build confidence and skill in core computer science concepts.
            * Describe the commitment they will continue to pursue in support of equity in CS, and the strategies they will use to support that commitment.
            * Make a plan to continuously develop new skills after this workshop.
          student_description: |-
            **You will:**

            * Build confidence and skill in core computer science concepts.
            * Describe the commitment you will continue to pursue in support of equity in CS, and the strategies you will use to support that commitment.
            * Make a plan to continuously develop new skills after this workshop.
        csc-mappinglandmarks-2023:
          lessons: {}
          lesson_groups: {}
          name: csc-mappinglandmarks-2023
          title: Coding Interactive Maps
          description_audience: ''
          description_short: ''
          description: "##Suggested Pre-Work for this Module\n \n**Social Studies:** Students will discuss and code several different types of maps. To build a base understanding together you might consider reading one of these books about maps: [Maps by Aleksandra and Daniel Mizielinski](https://oladaniel.com/maps), [The Once Upon a Time Map Book by BG Hennessy](https://bghennessy.com/f/the-once-upon-a-time-map-book), or [City Atlas: Travel the World with 30 City Maps by Georgia Cherry](https://www.youtube.com/watch?v=LRy3daJLhtg).\n\nAdditionally, it may be beneficial to spend some time **building interactive maps with hands on materials in your classroom**: fill a bucket with colored strips of felt to represent roads, rivers, houses and more. Let students build and play in an imaginary town. Or after a shared experience (ie recess or field trip) create a topographical map using play-dough or salt dough.\n\n\n**Computer Science:** In this module students will be working a lot with sprites including changing the location and size of them and initiating behaviors. [CSFundamentals Course F Lesson 3](https://studio.code.org/s/coursef-2023/lessons/3) is a great introduction to two concepts at the heart of this all: sprites and behaviors.\n\n**New to teaching Computer Science?**\n\nGet started with our [self-paced Professional Learning](https://studio.code.org/s/self-paced-pl-csc-2023).\n"
          student_description: ''
        blockchain-2023:
          lessons:
            lesson-1:
              name: Blockchain Overview
            lesson-2:
              name: Applied Blockchain & Bitcoin
            lesson-3:
              name: Beyond Currencies
            lesson-4:
              name: Value on the Blockchain
            lesson-5:
              name: Societal Impact
            lesson-6:
              name: How Blockchain Works (Video Series)
          lesson_groups: {}
          name: blockchain-2023
          title: How Blockchain Works
          description_audience: ''
          description_short: ''
          description: |-
            These lessons supplement the [How Blockchain Works](https://www.youtube.com/playlist?list=PLzdnOPI1iJNdzDlGJxd6B22G1bCDnPzkf) video series. Each lesson focused on a single video from the series, diving-deeper into the concepts introduced in the videos. Lessons focus on creating an **immersive experience** for students, where students engage in an activity or simulation and then reflect on the experience as a way to build understanding around Blockchain technology and empathy with its users. Some lessons focus more on the technology behind Blockchain, while other lessons focus on the economic and societal impacts of Blockchain technologies.

            ### Implementation Options

            Click one of the options below to expand and view more details.

            ::: details [<span style="font-size: 1.2em; font-weight: bold;">"I want to teach them all!"</spa>]
            Lessons 1-5 can be taught as a 5-day sequence, where each day focuses on an individual video from the video series and dives deeper into the concepts introduced. Classrooms that go this direction should hide Lesson 6, which does not fit in this sequence. [Click here to learn more about hiding lesson](https://support.code.org/hc/en-us/articles/115001479372-How-can-I-hide-certain-units-or-lessons-from-my-students-)
            :::

            ::: details [<span style="font-size: 1.2em; font-weight: bold;">"I want to teach a specific lesson or integrate into another class"</span>]
            Each lesson can stand on its own and be taught independently from the others. This is especially useful if you would like to integrate a lesson into another subject or an existing computer science, cybersecurity, or economics class. Classrooms that go this direction should hide all lessons except the one you want to teach. [Click here to learn more about hiding lesson](https://support.code.org/hc/en-us/articles/115001479372-How-can-I-hide-certain-units-or-lessons-from-my-students-)
            :::
            ::: details [<span style="font-size: 1.2em; font-weight: bold;">"I Only Have a Day"</span>]
            Lesson 6 is designed for classrooms that want to introduce blockchain to students, but only have a day to do so. This lesson provides a notetaker for students as the class watches the entire video sequence. Classrooms that go this direction should hide all lessons except for Lesson 6. [Click here to learn more about hiding lesson](https://support.code.org/hc/en-us/articles/115001479372-How-can-I-hide-certain-units-or-lessons-from-my-students-)
            :::
            <br />
            <br />
          student_description: Learn how Blockchain works by participating in different immersive experiences and watching the [How Blockchain Works](https://www.youtube.com/playlist?list=PLzdnOPI1iJNdzDlGJxd6B22G1bCDnPzkf) video series!
        self-paced-pl-csc-2023:
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching CS Connections
          title: 'Teaching CS Connections '
          description: "This professional learning module is designed to help you prepare to teach Code.org's CS Connections. \n\n* Get an overview of CS Connections.\n\n* Set up a plan to implement a CS Connections module.\n\n* Practice key concepts included in lessons.\n\n* Preview features and resources.\n\n* Consider strategies to create positive CS learning experiences.\n\n\n**Suggested Time:** 75 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's CS Connections. \n\nGet an overview of CS Connections.\n\nSet up a plan to implement a CS Connections module.\n\nPractice key concepts included in lessons.\n\n* Preview features and resources.\n\n\nConsider strategies to create positive CS learning experiences.\n\n\n**Suggested Time:** 75 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-csc-2023
        csc-ecosystems-2023:
          lessons:
            lesson-3:
              name: Code Your Own Ecosystem (2023)
          lesson_groups: {}
          name: csc-ecosystems-2023
          title: Simulating a Marine Ecosystem
          description_audience: ''
          description_short: ''
          description: "##Suggested Pre-Work for this Module\n \n**Science:** Students will simulate a marine life ecosystem in Lessons 1 and 2. To build familiarity with this ecosystem, we recommend this [Ocean Animals Video](https://www.youtube.com/watch?v=8adtdg0N2-g) (9:42 minutes). \n\nIn Lesson 2, students will code several sustainable fishing practices. These are a few readings to build some background knowledge and deepen connections to the real world: [Understanding Overfishing](https://www.seafoodwatch.org/seafood-basics/sustainable-solutions/avoid-overfishing) (Monterey Bay Aquarium article), or [Mw,kwa Talks to the Loon](https://books.google.com/books/about/Mw_kwa_Talks_to_the_Loon.html?id=ZtJfkFFPTzIC) (Children's book).\n\n**Computer Science:** In this module, students will learn new coding concepts that might be difficult for new-to-computer science students. If students are not familiar with Code.org’s Sprite Lab we recommend trying [Swimming Fish with Sprite Lab](https://studio.code.org/s/coursee-2022/lessons/3) (55 minutes) for a basic introduction to the tool. \n\nThis module also uses an advanced CS concept called conditional statements. Students learn this concept in a scaffolded way, but some students may benefit from first engaging in this introduction to conditionals unplugged activity: [Conditionals with Cards](https://studio.code.org/s/coursed-2022/lessons/12) (50 minutes).\n\n**New to teaching Computer Science?**\n\nGet started with our [self-paced Professional Learning](https://studio.code.org/s/self-paced-pl-csc-2023).\n\n"
          student_description: ''
        csc-adaptations-2023:
          lessons:
            lesson-2:
              name: Animal Behaviors for Survival
            lesson-3:
              name: Code Your Own Adaptation
          lesson_groups: {}
          name: csc-adaptations-2023
          title: Modeling Animal Adaptations
          description_audience: ''
          description_short: ''
          description: "##Suggested Pre-Work for this Module\n \n**Science:** Students will simulate several animal adaptations. To build familiarity with adaptations, we recommend this [Living Things Change Video](https://www.youtube.com/watch?v=xDSFlRunlrU&list=PLdG-lk1eEmZnq4ZO2CzERCv6jZkYIHCbR&index=4) (4:36 minutes). \n\n**Computer Science:** In this module students will be working a lot with sprites including changing the location and size of them and initiating behaviors. [CSF Making Sprites](https://studio.code.org/s/coursef-2023/lessons/3) is a great introduction to two concepts at the heart of this all: sprites and behaviors.\n\n**New to teaching Computer Science?**\n\nGet started with our [self-paced Professional Learning](https://studio.code.org/s/self-paced-pl-csc-2023).\n\n"
          student_description: ''
        drafting:
          lessons: {}
          lesson_groups: {}
          name: drafting
          title: CSP Draft Updates 2023-24
          description_audience: CSP Student Insights Group
          description_short: ''
          description: ''
          student_description: ''
        testing-digital-information-2023:
          lessons: {}
          lesson_groups: {}
        tess-testing-problem-solving-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Chapter 1
            lessonGroup-3:
              display_name: Chapter 2
            lessonGroup-4:
              display_name: Alternative Lessons
          name: tess-testing-problem-solving-2023
          title: Problem Solving
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        testing-focus-on-creativity1:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Chapter 1
          name: testing-focus-on-creativity1
          title: Problem Solving
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        testing-focus-on-creativity2:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-4:
              display_name: 'Chapter 2: Multi-page Websites'
          name: testing-focus-on-creativity2
          title: Web Development
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        poetry-2023:
          lessons: {}
          lesson_groups: {}
          name: poetry-2023
          title: Coding with Poetry
          description_audience: ''
          description_short: ''
          description: "##Suggested Pre-Work for this Module\n \n**English Language Arts:** To prepare for this module and create some shared understanding of poetry together we recommend starting by reading poetry together: Read a few poems together as a class and practice naming the mood of each poem. Encourage students to share their interpretation, even if it’s different from someone else’s. Make sure that all students are familiar with the structure of a poem before Lesson 2, in which students will write their own poems.\n\n**Computer Science:**  As a warm up to the tool students can add art and animation to a classic poem in this [Poem Art](https://studio.code.org/s/poem-art-2021/lessons/1) (55 minutes) Hour of Code activity!\n\nAdditionally, in this module students will use event blocks to program changes at important lines in the poem. To start building skills with events try [Build a Flappy Game](https://studio.code.org/s/coursec-2023/lessons/12) (60 minutes). \n\n**New to teaching Computer Science?**\n\nGet started with our [self-paced Professional Learning](https://studio.code.org/s/self-paced-pl-csc-2023).\n"
          student_description: ''
        poemmaker-2023:
          lessons: {}
          lesson_groups: {}
          name: poemmaker-2023
          title: Poem Maker
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        dlp-core-2023:
          lessons: {}
          lesson_groups: {}
          name: dlp-core-2023
          title: 2023 Deeper Learning Core Foundations
          description_audience: ''
          description_short: ''
          description: "#Welcome to the 2023 Ceeper Learning: Core Foundations course"
          student_description: ''
        csc-particles-2023:
          lessons: {}
          lesson_groups: {}
          name: csc-particles-2023
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csc-bookcovers-2023:
          lessons:
            lesson-4:
              name: Plan Your Interactive Book Cover
          lesson_groups: {}
          name: csc-bookcovers-2023
          title: Coding Book Covers
          description_audience: ''
          description_short: ''
          description: "##Suggested Pre-Work for this Module\n \n**English Language Arts:** Building some familiarity with and background knowledge on book covers, the elements they all share (title, author, illustrations, etc) and design choices will help students focus. Here are two hands on activities to try in your classroom: \n- **Book sort**: Have groups of students organize books into genre piles, based only on the book cover. Students make inferences based on the book cover about what genre a book may fall under.\n- **Cover comparison**: show students multiple covers for the same book. Engage in a discussion about what is different in each cover and evaluation which version is best.\n\n\n**Computer Science:** In this module, students will learn the basics of coding using code.org's Sprite Lab. These activities may be supportive to engage in before starting the module:\n- Introduce students to the idea of **events** with this unplugged activity: [The Big Event](https://studio.code.org/s/course1/lessons/15/levels/1) (15-minute activity). The teacher will press buttons on a paper remote and students will react depending on which button is pressed. \n- [Making Sprites](https://studio.code.org/s/coursef-2023/lessons/3) (50 minutes) is a great self-paced introduction to the basics of coding with sprites.\n\n**New to teaching Computer Science?**\n\nGet started with our [self-paced Professional Learning](https://studio.code.org/s/self-paced-pl-csc-2023).\n"
          student_description: ''
        pre-express-2023:
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
          title: Pre-reader Express (2023)
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          description_short: 'An introduction to computer science for pre-readers: combines the best of our kindergarten and first grade courses.'
          description_audience: 'Ages: 4-8'
          lessons: {}
          name: pre-express-2023
        express-2023:
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_sprites:
              display_name: Sprites
            lessonGroup-9:
              display_name: Events
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            csf_functions:
              display_name: Functions
            csf_variables:
              display_name: Variables
            csf_for_loops:
              display_name: For Loops
            end_of_course_project:
              display_name: End of Course Project
          title: Express Course (2023)
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          description_short: 'An introduction to computer science: combines the best of our elementary school curriculum for older students.'
          description_audience: 'Ages: 9-18'
          lessons: {}
          name: express-2023
        coursea-2023:
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
            lessonGroup-5:
              display_name: End of Course Project
          title: Course A (2023)
          description: 'Course A offers a computer science curriculum for beginning readers, including Kindergarten students. Students will learn to program using commands like loops and events. The lessons featured in this course also teach students to meaningfully collaborate with others, investigate different problem-solving techniques, persist in the face of challenging tasks, and learn about internet safety. '
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers.
          description_audience: 'Ages: 4-7'
          lessons: {}
          name: coursea-2023
        courseb-2023:
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_impacts:
              display_name: Impacts of Computing
            csf_events:
              display_name: Events
            lessonGroup-6:
              display_name: End of Course Project
          title: Course B (2023)
          description: We developed Course B with first graders in mind. While the concepts in Course B parallel those in Course A, students learn more sophisticated unplugged activities and work through a greater variety of puzzles. Students will learn the basics of programming, collaboration techniques, investigation and critical thinking skills, persistence in the face of difficulty, and internet safety. At the end of this course, students create games in the Play Lab programming environment.
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers. Similar to Course A, but with added concept depth.
          description_audience: 'Ages: 5-8'
          lessons: {}
          name: courseb-2023
        coursec-2023:
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
            csf_data:
              display_name: Data
            end_of_course_project:
              display_name: End of Course Project
          title: Course C (2023)
          description: We developed Course C for students in second grade. Students will create programs with sequencing, loops, and events. They will investigate problem-solving techniques and develop strategies for building positive communities both online and offline. By the end of the course, students will create interactive games that they can share.
          student_description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description_audience: 'Ages: 6-10'
          lessons: {}
          name: coursec-2023
        coursed-2023:
          lesson_groups:
            lessonGroup-6:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_events:
              display_name: Events
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            end_of_course_project:
              display_name: End of Course Project
          title: Course D (2023)
          description: 'We created course D for students in third grade.  The course begins with a review of the concepts found in earlier courses, including loops and events. Afterward, students will develop their understanding of algorithms, nested loops, while loops, conditionals, and more. '
          student_description: Learn about loops, conditionals, and events. Beyond coding, learn about digital citizenship.
          description_short: Learn about conditional statements. Create your own art, games, and even a dance party.
          description_audience: 'Ages: 7-11'
          lessons: {}
          name: coursed-2023
        coursee-2023:
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sprites:
              display_name: Sprites
            ramp_up:
              display_name: Nested Loops
            csf_functions:
              display_name: Functions
            csf_nested_loops:
              display_name: Conditionals
            lessonGroup-7:
              display_name: Impacts of Computing
            end_of_course_project:
              display_name: End of Course Project
          title: Course E (2023)
          description: We created Course E for students in fourth grade. The course begins with an introduction to the Sprite Lab programming tool. Students will learn to make fun, interactive projects that reinforce what they’ll learn about online safety. Following these lessons, students will engage in more complex coding. Students will learn about nested loops, functions, and conditionals. By the end of the course, students will combine these concepts to solve challenging puzzles. The course ends with an open-ended project where students create a game or drawing.
          student_description: Start coding with algorithms, events, loops, conditionals, and functions! By the end of this course, design and create a game or drawing that you can share with your friends and family.
          description_short: Learn the basics of sprites, nested loops, and functions.
          description_audience: 'Ages: 8-12'
          lessons: {}
          name: coursee-2023
        problem-solving-computing-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: 'Chapter 2: Computers and Problem Solving'
            lessonGroup-4:
              display_name: Alternative Lessons
          name: problem-solving-computing-2023
          title: Problem Solving and Computing ('23-'24)
          description_audience: ''
          description_short: Learn how humans work with computers to solve problems.
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter presents computers as machines that solve information problems. Students begin by building a common definition for a computer that focuses on functionality instead of specific hardware. They then explore the ways that computers approach problems. For their final project, students propose an app that could be used to solve a problem of their choosing.\n\n**Goals:\n* Identify the defined characteristics of a computer and how it is used to solve information problems. \n* Use a structured problem solving process to design solutions that use computing technology. \n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering. \n\n**Big Questions:** \n* How do computers help people to solve problems?\n* How do people and computers approach problems differently?\n* What does a computer need from people in order to solve problems effectively?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
        web-development-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
            lessonGroup-4:
              display_name: Survey
          name: web-development-2023
          title: Web Development ('23-'24)
          description_audience: ''
          description_short: " Learn to build your own web site in Web Lab."
          description: |-
            In Web Development, students are empowered to create and share content on their own web pages. They begin by thinking about the role of the web and how it can be used as a medium for creative expression. As students develop their pages and begin to see themselves as programmers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem solving as it relates to programming while they learn valuable skills such as debugging, using resources, and teamwork. At the conclusion of the unit, students will have created a personal website they can publish and share.

            ::: details [**Chapter 1 Overview**]
            **Description:** Students use computing as a form of self expression as they design and develop basic web pages.   Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page. They also explore the privacy and intellectual property implications of publishing their work online.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website as a form of personal expression.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * Why do people create websites?
            * How can text communicate content, structure, and style on a web page?
            * How do I safely and appropriately make use of the content published on the Internet?
            * What strategies can I use when coding to find and fix issues?
            :::

            ::: details [**Chapter 2 Overview**]
            **Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website that solves a problem.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * How can websites be used to address problems in the world?
            * What strategies can teams use to work better together?
            * How do I know what information can be trusted online?
            :::


            ::: details [**Implementation Guidance for Web Development**]
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)
            - You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit
            :::

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went.
          student_description: " In this unit, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
        interactive-games-animations-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Images and Animations'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Games'
            lessonGroup-4:
              display_name: Survey
          name: interactive-games-animations-2023
          title: Interactive Animations and Games ('23-'24)
          description_audience: ''
          description_short: Learn to program animations, interactive art, and games in Game Lab.
          description: "In the Interactive Animations and Games unit, students create programmatic images, animations, interactive art, and games. Starting off with simple, primitive shapes and building up to more sophisticated sprite-based games, students become familiar with the programming concepts and the design process computer scientists use daily. They then learn how these simpler constructs can be combined to create more complex programs. In the final project, students develop a personalized, interactive program.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students build up toward programming interactive animations in the Game Lab environment.  They begin with simple shapes and sprite objects, then use loops to create flipbook style animations.  Next, they learn to use booleans and conditionals to respond to user input.  At the end of the chapter, students design and create an interactive animation that they can share with the world.\n\n**Goals:**\n* Create an interactive animation that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* View yourself as a computer programmer, and see programming as a fun and creative form of expression.\n\n\n**Big Questions:**\n* What is a computer program?\n* What are the core features of most programming languages?\n* How does programming enable creativity and individual expression?\n* What practices and strategies will help me as I write programs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter students combine the constructs that they learned in the first chapter to program more complex movement and collisions in their sprites.  As they create more complex programs, they begin to use functions to organize their code.  In the end, students use a design process to create an original game.\n\n**Goals:**\n* Create an interactive game that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* Work with others to break down programming projects using sprites and functions.\n\n**Big Questions:**\n* How do software developers manage complexity and scale?\n* How can programs be organized so that common problems only need to be solved once?\n* How can I build on previous solutions to create even more complex behavior?\n:::\n\n::: details [**Implementation Guidance for Interactive Animations and Games**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
        design-process-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: User Centered Design'
            lessonGroup-3:
              display_name: 'Chapter 2: App Prototyping'
            lessonGroup-4:
              display_name: Survey
          name: design-process-2023
          title: The Design Process ('23-'24)
          description_audience: ''
          description_short: Learn how to design a program that meets the needs of your users.
          description: "The Design Process unit transitions students from thinking about computer science as a tool to solve their own problems towards considering the broader social impacts of computing. Through a series of design challenges, students are asked to consider and understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which students have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test their solutions with real users to get feedback and drive further iteration.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter introduces the design process as a specific version of the problem solving process in which empathy for a user's needs is consistently integrated. Students learn strategies for identifying user needs and assessing how well different designs address them. In particular they learn how to develop a paper prototype, how to gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps.\n\n**Goals:** \n* See the design process as a form of problem solving that prioritizes the needs of a user. \n* Identify user needs and assess how well different designs address them. \n* Develop paper prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n\n**Big Questions:**\n* How do designers identify the needs of their user?\n* How can we ensure that a user's needs are met by our designs?\n* What processes will best allow us to efficiently create, test, and iterate upon our designs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter is focused on a long running group project that allows students to apply all they've learned about User-Centered Design to develop an app prototype. Working in teams, students identify a social issue that they care about and design and prototype an app to address that issue. This is an opportunity for students to explore other roles in software development, such as product management, marketing, design, and testing.\n\n\n**Goals:**\n* Develop digital prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n* Understand other roles in software development, such as product management, marketing, design, and testing, and how to use what they have learned about computer science as a tool for social impact.\n\n**Big Questions:**\n* How do teams effectively work together to develop software?\n* What roles beyond programming are necessary to design and develop software?\n* How do designers incorporate feedback into multiple iterations of a product?\n:::\n\n::: details [**Implementation Guidance for The Design Process**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
        data-society-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Representing Information'
            lessonGroup-3:
              display_name: 'Chapter 2: Solving Data Problems'
            lessonGroup-4:
              display_name: Survey
          name: data-society-2023
          title: Data and Society ('23-'24)
          description_audience: ''
          description_short: Learn how people use computers to solve data problems.
          description: "The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter focuses on data representation and its role in solving information problems.  Students learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.  For the chapter project, students represent their perfect day in a binary punch card and trade with classmates to decipher.\n\n\n**Goals:**\n* Understand the role of data and data representation in solving information problems. \n* Explain the necessary components of any data representation scheme, as well as the particulars of binary and the common ways that various types of simple and complex data are represented in binary code. \n\n\n**Big Questions:**\n* Why is representation important in problem solving?\n* What features does a representation system need to be useful?\n* What is necessary to create usable binary representation systems?\n* How can we combine systems together to get more complex information?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students explore how data can be used to answer interesting questions and solve problems.  Using a modified version of the general Problem Solving Process, students look at how computers and humans use data differently and the pros and cons of automating problem solving.  After learning ways that computers use data in the real world, students choose their own problem and use data to address it.\n\n\n**Goals:**\n* Investigate and understand how humans and computers use data differently.\n* Design and implement a data-based solution to a given problem and determine how the different aspects of the problem solving process could be automated.\n\n\n\n**Big Questions:**\n* How does data help us to solve problems?\n* How do computers and humans use data differently?\n* What parts of the data problem solving process can be automated?\n* What kinds of problems do computers use data to solve in the real world?\n\n:::\n\n\n::: details [**Implementation Guidance for Data and Society**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
        aiml-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Intro to App Lab
            lessonGroup-3:
              display_name: Chapter 1
            lessonGroup-4:
              display_name: Chapter 2
            lessonGroup-5:
              display_name: Survey
          name: aiml-2023
          title: AI and Machine Learning ('23-'24)
          description_audience: ''
          description_short: Learn to about Artificial Intelligence and Machine Learning.
          description: "This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students learn the basics of machine learning and use a tool called AI Lab to create machine learning models that can be used in App Lab. The unit starts with an overview of machine learning and how computers can use patterns in data to make decisions and predictions. Then, students learn how to use AI Lab to train models from tabular data while exploring issues of bias. Lessons follow a repeating \"unplugged - AI Lab - App Lab\" pattern so students are continually exposed to the concepts and tools of machine learning. The chapter culminates in a project where students select from a set of real-world datasets to train a machine learning model and create an app.\n\n\n**Goals:**\n* Create a machine learning model in AI Lab to solve a problem, and use App Lab to create an app that uses their model. \n* Understand how machine learning models make decisions from data\n\n\n**Big Questions:**\n- How does machine learning find patterns in data to make decisions?\n- How can we avoid bias when training a machine learning model?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter prepares students to be machine learning scientists to create an app that addresses an issue in their community. Students follow along with a fictional group of students as they define an issue, develop a survey to collect data, analyze their data in AI Lab, create a model card, and create an app to solve their problem. Then, in the final project, students repeat these same steps with an issue they care about in their community.\n\n**Goals:**\n* Create machine learning models in AI Lab  from their own data and use App Lab to create an app that uses their model to solve problems in their community. \n\n\n**Big Questions:**\n- How can machine learning be used to solve problems in our community?\n\n:::\n\n\n::: details [**Implementation Guidance for the AI and Machine Learning Unit**]\n\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-aiml-2023). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: |-
            This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop your own machine learning projects around real-world data. The unit culminates with designing your own machine learning app to solve a personally relevant problem.

            **Looking to teach this unit?** [Click here to view the lesson plans for these lessons](/s/aiml-2023?viewAs=Instructor)
        focus-on-creativity1-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: Alternative Lessons
            lessonGroup-4:
              display_name: Survey
          name: focus-on-creativity1-2023
          title: Unit 1 - Problem Solving and Computing ('23-'24)
          description_audience: ''
          description_short: Learn how humans work with computers to solve problems.
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
        focus-on-creativity2-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
          name: focus-on-creativity2-2023
          title: Unit 2 - Web Development ('23-'24)
          description_audience: ''
          description_short: " Learn to build your own web site in Web Lab."
          description: |-
            In Web Development, students are empowered to create and share content on their own web pages. They begin by thinking about the role of the web and how it can be used as a medium for creative expression. As students develop their pages and begin to see themselves as programmers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem solving as it relates to programming while they learn valuable skills such as debugging, using resources, and teamwork. At the conclusion of the unit, students will have created a personal website they can publish and share.

            ::: details [**Chapter 1 Overview**]
            **Description:** Students use computing as a form of self expression as they design and develop basic web pages.   Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page. They also explore the privacy and intellectual property implications of publishing their work online.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website as a form of personal expression.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * Why do people create websites?
            * How can text communicate content, structure, and style on a web page?
            * How do I safely and appropriately make use of the content published on the Internet?
            * What strategies can I use when coding to find and fix issues?
            :::

            ::: details [**Chapter 2 Overview**]
            **Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website that solves a problem.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * How can websites be used to address problems in the world?
            * What strategies can teams use to work better together?
            * How do I know what information can be trusted online?
            :::


            ::: details [**Implementation Guidance for Web Development**]
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)
            - You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit
            :::

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went.
          student_description: " In this unit, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
        focus-on-creativity3-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Images and Animations'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Games'
          name: focus-on-creativity3-2023
          title: Unit 3 - Interactive Animations and Games ('23-'24)
          description_audience: ''
          description_short: Learn to program animations, interactive art, and games in Game Lab.
          description: "In the Interactive Animations and Games unit, students create programmatic images, animations, interactive art, and games. Starting off with simple, primitive shapes and building up to more sophisticated sprite-based games, students become familiar with the programming concepts and the design process computer scientists use daily. They then learn how these simpler constructs can be combined to create more complex programs. In the final project, students develop a personalized, interactive program.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students build up toward programming interactive animations in the Game Lab environment.  They begin with simple shapes and sprite objects, then use loops to create flipbook style animations.  Next, they learn to use booleans and conditionals to respond to user input.  At the end of the chapter, students design and create an interactive animation that they can share with the world.\n\n**Goals:**\n* Create an interactive animation that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* View yourself as a computer programmer, and see programming as a fun and creative form of expression.\n\n\n**Big Questions:**\n* What is a computer program?\n* What are the core features of most programming languages?\n* How does programming enable creativity and individual expression?\n* What practices and strategies will help me as I write programs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter students combine the constructs that they learned in the first chapter to program more complex movement and collisions in their sprites.  As they create more complex programs, they begin to use functions to organize their code.  In the end, students use a design process to create an original game.\n\n**Goals:**\n* Create an interactive game that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* Work with others to break down programming projects using sprites and functions.\n\n**Big Questions:**\n* How do software developers manage complexity and scale?\n* How can programs be organized so that common problems only need to be solved once?\n* How can I build on previous solutions to create even more complex behavior?\n:::\n\n::: details [**Implementation Guidance for Interactive Animations and Games**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
        csc-starquilts-2023:
          lessons: {}
          lesson_groups: {}
          name: csc-starquilts-2023
          title: Coding a Geometric Star Quilt
          description_audience: ''
          description_short: ''
          description: "##Suggested Pre-Work for this Module\n \n**Math:** Students will be working with shapes and angles in this module. To build familiarity, we recommend playing these active songs [Types of Angles song](https://www.youtube.com/watch?v=kGAGkysDunw&t=1s) (2:47 minutes) and [Angles & Lines](https://www.youtube.com/watch?v=an1tG3upvow) (3:06 minutes). \n\nFor a quick introduction to shapes and angles with the Artist tool, watch this [Turns and Angles video](https://www.youtube.com/watch?v=sPKXZBL_Yvs) (2 mins).\n\nThese are a few children's books to build some background knowledge and deepen connections to the real world:  \n- [Shota and the Star Quilt](https://www.amazon.com/Shota-Star-Quilt-Folk-Tales/dp/1840890231) Picture book about the tradition of quilting and how traditions can change over time\n- [Rainbow Weavers](https://www.amazon.com/Rainbow-Weaver-Tejedora-del-Arcoiris/dp/0892393742/ref=asc_df_0892393742/?tag=hyprod-20&linkCode=df0&hvadid=312089887152&hvpos=&hvnetw=g&hvrand=526653230527463008&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9033356&hvtargid=pla-522520885864&psc=1) This picture book is about weaving, not quilting, but it could deepen students' understanding of how indigenous traditions evolve.\n- [A Trapezoid is Not a Dinosaur](https://www.mathsthroughstories.org/a-trapezoid-is-not-a-dinosaur.html) by Suzanne Morris \n- [The Greedy Triangle](https://youngmathematicians.edc.org/picture_book/%EF%BB%BF%EF%BB%BFthe-greedy-triangle/) by Marilyn Burns\n- Any of these [Geometry Read Alouds](https://www.k-5mathteachingresources.com/geometry-read-aloud.html)\n\n**Computer Science:** In this module, students will use Code.org's Artist tool. If students are not yet familiar with it, we recommend trying [Intro to Artist lesson](https://studio.code.org/s/artist/lessons/1) (50 minutes) for a basic introduction to the tool. \n\n**New to teaching Computer Science?**\n\nGet started with our [self-paced Professional Learning](https://studio.code.org/s/self-paced-pl-csc-2023).\n\n"
          student_description: ''
        focus-on-creativity4-2023:
          lessons: {}
          lesson_groups: {}
        focus-on-creativity4a-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
          name: focus-on-creativity4a-2023
          title: Unit 4A - (Option A) Creating Apps with Devices - Circuit Playground ('23-'24)
          description_audience: ''
          description_short: Learn to program with physical devices.
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [(Option B) Creating Apps with Devices unit](/s/focus-on-creativity4b-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
        focus-on-hardware1-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: 'Chapter 2: Computers and Problem Solving'
            lessonGroup-4:
              display_name: Alternative Lessons
            lessonGroup-5:
              display_name: Survey
          name: focus-on-hardware1-2023
          title: Unit 1 - Problem Solving and Computing ('23-'24)
          description_audience: ''
          description_short: Learn how humans work with computers to solve problems.
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter presents computers as machines that solve information problems. Students begin by building a common definition for a computer that focuses on functionality instead of specific hardware. They then explore the ways that computers approach problems. For their final project, students propose an app that could be used to solve a problem of their choosing.\n\n**Goals:\n* Identify the defined characteristics of a computer and how it is used to solve information problems. \n* Use a structured problem solving process to design solutions that use computing technology. \n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering. \n\n**Big Questions:** \n* How do computers help people to solve problems?\n* How do people and computers approach problems differently?\n* What does a computer need from people in order to solve problems effectively?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went.\n"
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
        focus-on-hardware2-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Representing Information'
            lessonGroup-3:
              display_name: 'Chapter 2: Solving Data Problems'
          name: focus-on-hardware2-2023
          title: Unit 2 - Data and Society ('23-'24)
          description_audience: ''
          description_short: Learn how people use computers to solve data problems.
          description: "The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter focuses on data representation and its role in solving information problems.  Students learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.  For the chapter project, students represent their perfect day in a binary punch card and trade with classmates to decipher.\n\n\n**Goals:**\n* Understand the role of data and data representation in solving information problems. \n* Explain the necessary components of any data representation scheme, as well as the particulars of binary and the common ways that various types of simple and complex data are represented in binary code. \n\n\n**Big Questions:**\n* Why is representation important in problem solving?\n* What features does a representation system need to be useful?\n* What is necessary to create usable binary representation systems?\n* How can we combine systems together to get more complex information?\n\n:::\n\n\n::: details [**Implementation Guidance for Data and Society**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
        focus-on-hardware3-2023:
          lessons: {}
          lesson_groups: {}
        ocus-on-hardware3a-2023:
          lessons: {}
          lesson_groups: {}
        focus-on-hardware3a-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
          name: focus-on-hardware3a-2023
          title: Unit 3a - (Option A) Creating Apps with Devices - Circuit Playground ('23-'24)
          description_audience: ''
          description_short: Learn to program with physical devices.
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [(Option B) Creating Apps with Devices unit](/s/focus-on-hardware3b-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
        focus-on-data1-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: Alternative Lessons
            lessonGroup-4:
              display_name: Survey
          name: focus-on-data1-2023
          title: Problem Solving and Computing ('23-'24)
          description_audience: ''
          description_short: Learn how humans work with computers to solve problems.
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went.\n"
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
        focus-on-data2:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Representing Information'
          name: focus-on-data2
          title: Data and Society ('23-'24)
          description_audience: ''
          description_short: Learn how people use computers to solve data problems.
          description: "The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter focuses on data representation and its role in solving information problems.  Students learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.  For the chapter project, students represent their perfect day in a binary punch card and trade with classmates to decipher.\n\n\n**Goals:**\n* Understand the role of data and data representation in solving information problems. \n* Explain the necessary components of any data representation scheme, as well as the particulars of binary and the common ways that various types of simple and complex data are represented in binary code. \n\n\n**Big Questions:**\n* Why is representation important in problem solving?\n* What features does a representation system need to be useful?\n* What is necessary to create usable binary representation systems?\n* How can we combine systems together to get more complex information?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students explore how data can be used to answer interesting questions and solve problems.  Using a modified version of the general Problem Solving Process, students look at how computers and humans use data differently and the pros and cons of automating problem solving.  After learning ways that computers use data in the real world, students choose their own problem and use data to address it.\n\n\n**Goals:**\n* Investigate and understand how humans and computers use data differently.\n* Design and implement a data-based solution to a given problem and determine how the different aspects of the problem solving process could be automated.\n\n\n\n**Big Questions:**\n* How does data help us to solve problems?\n* How do computers and humans use data differently?\n* What parts of the data problem solving process can be automated?\n* What kinds of problems do computers use data to solve in the real world?\n\n:::\n\n\n::: details [**Implementation Guidance for Data and Society**]\n- You can view the full [Curriculum Guide](https://docs.google.com/document/d/1lTLydMBm2M5a5tq_35m-qj8Gat79WUYBWfpB3ikQyuY/view) and [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
        focus-on-data2-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Representing Information'
            lessonGroup-3:
              display_name: 'Chapter 2: Solving Data Problems'
          name: focus-on-data2-2023
          title: Data and Society ('23-'24)
          description_audience: ''
          description_short: Learn how people use computers to solve data problems.
          description: "The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter focuses on data representation and its role in solving information problems.  Students learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.  For the chapter project, students represent their perfect day in a binary punch card and trade with classmates to decipher.\n\n\n**Goals:**\n* Understand the role of data and data representation in solving information problems. \n* Explain the necessary components of any data representation scheme, as well as the particulars of binary and the common ways that various types of simple and complex data are represented in binary code. \n\n\n**Big Questions:**\n* Why is representation important in problem solving?\n* What features does a representation system need to be useful?\n* What is necessary to create usable binary representation systems?\n* How can we combine systems together to get more complex information?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students explore how data can be used to answer interesting questions and solve problems.  Using a modified version of the general Problem Solving Process, students look at how computers and humans use data differently and the pros and cons of automating problem solving.  After learning ways that computers use data in the real world, students choose their own problem and use data to address it.\n\n\n**Goals:**\n* Investigate and understand how humans and computers use data differently.\n* Design and implement a data-based solution to a given problem and determine how the different aspects of the problem solving process could be automated.\n\n\n\n**Big Questions:**\n* How does data help us to solve problems?\n* How do computers and humans use data differently?\n* What parts of the data problem solving process can be automated?\n* What kinds of problems do computers use data to solve in the real world?\n\n:::\n\n\n::: details [**Implementation Guidance for Data and Society**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
        focus-on-data3-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Intro to App Lab
            lessonGroup-3:
              display_name: Chapter 1
            lessonGroup-4:
              display_name: Chapter 2
          name: focus-on-data3-2023
          title: AI and Machine Learning ('23-'24)
          description_audience: ''
          description_short: Learn to about Artificial Intelligence and Machine Learning.
          description: "This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students learn the basics of machine learning and use a tool called AI Lab to create machine learning models that can be used in App Lab. The unit starts with an overview of machine learning and how computers can use patterns in data to make decisions and predictions. Then, students learn how to use AI Lab to train models from tabular data while exploring issues of bias. Lessons follow a repeating \"unplugged - AI Lab - App Lab\" pattern so students are continually exposed to the concepts and tools of machine learning. The chapter culminates in a project where students select from a set of real-world datasets to train a machine learning model and create an app.\n\n\n**Goals:**\n* Create a machine learning model in AI Lab to solve a problem, and use App Lab to create an app that uses their model. \n* Understand how machine learning models make decisions from data\n\n\n**Big Questions:**\n- How does machine learning find patterns in data to make decisions?\n- How can we avoid bias when training a machine learning model?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter prepares students to be machine learning scientists to create an app that addresses an issue in their community. Students follow along with a fictional group of students as they define an issue, develop a survey to collect data, analyze their data in AI Lab, create a model card, and create an app to solve their problem. Then, in the final project, students repeat these same steps with an issue they care about in their community.\n\n**Goals:**\n* Create machine learning models in AI Lab  from their own data and use App Lab to create an app that uses their model to solve problems in their community. \n\n\n**Big Questions:**\n- How can machine learning be used to solve problems in our community?\n\n:::\n\n\n::: details [**Implementation Guidance for the AI and Machine Learning Unit**]\n\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-aiml-2023). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop your own machine learning projects around real-world data. The unit culminates with designing your own machine learning app to solve a personally relevant problem.
        k5-onlinepd-2023:
          lesson_groups:
            Implementing and Teaching CS:
              display_name: 'Part I:  Teaching and Implementing Computer Science'
            k5_basic_concepts_1:
              display_name: 'Part II:  Concepts in Courses A - F'
            k5_next_steps_1:
              display_name: 'Part III:  Next Steps'
          title: Teaching Computer Science Fundamentals ('23-'24)
          description: "Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! \n"
          student_description: 'Welcome to Code.org’s free online educator course for CS Fundamentals! '
          description_short: 'Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! '
          description_audience: 'Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! '
          lessons: {}
          name: k5-onlinepd-2023
        focus-on-design-with-purpose1-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: Alternative Lessons
            lessonGroup-4:
              display_name: Survey
          name: focus-on-design-with-purpose1-2023
          title: Unit 1 - Problem Solving and Computing ('23-'24)
          description_audience: ''
          description_short: Learn how humans work with computers to solve problems.
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went.\n"
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
        self-paced-pl-k5-getting-started:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-k5-getting-started
          title: 'Getting Started with Code.org (K-5) '
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes"
        focus-on-design-with-purpose2-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
          name: focus-on-design-with-purpose2-2023
          title: Unit 2 - Web Development ('23-'24)
          description_audience: ''
          description_short: " Learn to build your own web site in Web Lab."
          description: |-
            In Web Development, students are empowered to create and share content on their own web pages. They begin by thinking about the role of the web and how it can be used as a medium for creative expression. As students develop their pages and begin to see themselves as programmers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem solving as it relates to programming while they learn valuable skills such as debugging, using resources, and teamwork. At the conclusion of the unit, students will have created a personal website they can publish and share.

            ::: details [**Chapter 1 Overview**]
            **Description:** Students use computing as a form of self expression as they design and develop basic web pages.   Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page. They also explore the privacy and intellectual property implications of publishing their work online.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website as a form of personal expression.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * Why do people create websites?
            * How can text communicate content, structure, and style on a web page?
            * How do I safely and appropriately make use of the content published on the Internet?
            * What strategies can I use when coding to find and fix issues?
            :::

            ::: details [**Chapter 2 Overview**]
            **Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website that solves a problem.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * How can websites be used to address problems in the world?
            * What strategies can teams use to work better together?
            * How do I know what information can be trusted online?
            :::


            ::: details [**Implementation Guidance for Web Development**]
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)
            - You can view the full [Curriculum Guide](https://docs.google.com/document/d/1lTLydMBm2M5a5tq_35m-qj8Gat79WUYBWfpB3ikQyuY/view) and [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit
            :::

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went.
          student_description: " In this unit, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
        focus-on-design-with-purpose3-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: User Centered Design'
            lessonGroup-3:
              display_name: 'Chapter 2: App Prototyping'
          name: focus-on-design-with-purpose3-2023
          title: Unit 3 - The Design Process ('23-'24)
          description_audience: ''
          description_short: Learn how to design a program that meets the needs of your users.
          description: "The Design Process unit transitions students from thinking about computer science as a tool to solve their own problems towards considering the broader social impacts of computing. Through a series of design challenges, students are asked to consider and understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which students have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test their solutions with real users to get feedback and drive further iteration.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter introduces the design process as a specific version of the problem solving process in which empathy for a user's needs is consistently integrated. Students learn strategies for identifying user needs and assessing how well different designs address them. In particular they learn how to develop a paper prototype, how to gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps.\n\n**Goals:** \n* See the design process as a form of problem solving that prioritizes the needs of a user. \n* Identify user needs and assess how well different designs address them. \n* Develop paper prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n\n**Big Questions:**\n* How do designers identify the needs of their user?\n* How can we ensure that a user's needs are met by our designs?\n* What processes will best allow us to efficiently create, test, and iterate upon our designs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter is focused on a long running group project that allows students to apply all they've learned about User-Centered Design to develop an app prototype. Working in teams, students identify a social issue that they care about and design and prototype an app to address that issue. This is an opportunity for students to explore other roles in software development, such as product management, marketing, design, and testing.\n\n\n**Goals:**\n* Develop digital prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n* Understand other roles in software development, such as product management, marketing, design, and testing, and how to use what they have learned about computer science as a tool for social impact.\n\n**Big Questions:**\n* How do teams effectively work together to develop software?\n* What roles beyond programming are necessary to design and develop software?\n* How do designers incorporate feedback into multiple iterations of a product?\n:::\n\n::: details [**Implementation Guidance for The Design Process**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
        focus-on-design-with-purpose4a-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
          name: focus-on-design-with-purpose4a-2023
          title: Unit 4A - (Option A) Creating Apps with Devices - Circuit Playground ('23-'24)
          description_audience: ''
          description_short: Learn to program with physical devices.
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [(Option B) Creating Apps with Devices unit](/s/focus-on-design-with-purpose4b-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
        self-paced-k5-pl-getting-started:
          lessons: {}
          lesson_groups: {}
          name: self-paced-k5-pl-getting-started
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        focus-on-coding1-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: Alternative Lessons
            lessonGroup-4:
              display_name: Survey
          name: focus-on-coding1-2023
          title: Unit 1 - Problem Solving and Computing ('23-'24)
          description_audience: ''
          description_short: Learn how humans work with computers to solve problems.
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
        focus-on-coding2-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
          name: focus-on-coding2-2023
          title: Unit 2 - Web Development ('23-'24)
          description_audience: ''
          description_short: " Learn to build your own web site in Web Lab."
          description: |-
            In Web Development, students are empowered to create and share content on their own web pages. They begin by thinking about the role of the web and how it can be used as a medium for creative expression. As students develop their pages and begin to see themselves as programmers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem solving as it relates to programming while they learn valuable skills such as debugging, using resources, and teamwork. At the conclusion of the unit, students will have created a personal website they can publish and share.

            ::: details [**Chapter 1 Overview**]
            **Description:** Students use computing as a form of self expression as they design and develop basic web pages.   Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page. They also explore the privacy and intellectual property implications of publishing their work online.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website as a form of personal expression.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * Why do people create websites?
            * How can text communicate content, structure, and style on a web page?
            * How do I safely and appropriately make use of the content published on the Internet?
            * What strategies can I use when coding to find and fix issues?
            :::

            ::: details [**Chapter 2 Overview**]
            **Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website that solves a problem.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * How can websites be used to address problems in the world?
            * What strategies can teams use to work better together?
            * How do I know what information can be trusted online?
            :::


            ::: details [**Implementation Guidance for Web Development**]
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)
            - You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit
            :::

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went.
          student_description: " In this unit, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
        focus-on-coding3-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Images and Animations'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Games'
          name: focus-on-coding3-2023
          title: Unit 3 - Interactive Animations and Games ('23-'24)
          description_audience: ''
          description_short: Learn to program animations, interactive art, and games in Game Lab.
          description: "In the Interactive Animations and Games unit, students create programmatic images, animations, interactive art, and games. Starting off with simple, primitive shapes and building up to more sophisticated sprite-based games, students become familiar with the programming concepts and the design process computer scientists use daily. They then learn how these simpler constructs can be combined to create more complex programs. In the final project, students develop a personalized, interactive program.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students build up toward programming interactive animations in the Game Lab environment.  They begin with simple shapes and sprite objects, then use loops to create flipbook style animations.  Next, they learn to use booleans and conditionals to respond to user input.  At the end of the chapter, students design and create an interactive animation that they can share with the world.\n\n**Goals:**\n* Create an interactive animation that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* View yourself as a computer programmer, and see programming as a fun and creative form of expression.\n\n\n**Big Questions:**\n* What is a computer program?\n* What are the core features of most programming languages?\n* How does programming enable creativity and individual expression?\n* What practices and strategies will help me as I write programs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter students combine the constructs that they learned in the first chapter to program more complex movement and collisions in their sprites.  As they create more complex programs, they begin to use functions to organize their code.  In the end, students use a design process to create an original game.\n\n**Goals:**\n* Create an interactive game that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* Work with others to break down programming projects using sprites and functions.\n\n**Big Questions:**\n* How do software developers manage complexity and scale?\n* How can programs be organized so that common problems only need to be solved once?\n* How can I build on previous solutions to create even more complex behavior?\n:::\n\n::: details [**Implementation Guidance for Interactive Animations and Games**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
        focus-on-coding4a-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
          name: focus-on-coding4a-2023
          title: Unit 4A - (Option A) Creating Apps with Devices - Circuit Playground ('23-'24)
          description_audience: ''
          description_short: Learn to program with physical devices.
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [(Option B) Creating Apps with Devices unit](/s/focus-on-coding4b-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
        focus-on-impact-in-society1-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: Alternative Lessons
            lessonGroup-4:
              display_name: Survey
          name: focus-on-impact-in-society1-2023
          title: Problem Solving and Computing ('23-'24)
          description_audience: ''
          description_short: Learn how humans work with computers to solve problems.
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went.\n"
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
        focus-on-impact-in-society2-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: User Centered Design'
            lessonGroup-3:
              display_name: 'Chapter 2: App Prototyping'
          name: focus-on-impact-in-society2-2023
          title: The Design Process ('23-'24)
          description_audience: ''
          description_short: Learn how to design a program that meets the needs of your users.
          description: "The Design Process unit transitions students from thinking about computer science as a tool to solve their own problems towards considering the broader social impacts of computing. Through a series of design challenges, students are asked to consider and understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which students have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test their solutions with real users to get feedback and drive further iteration.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter introduces the design process as a specific version of the problem solving process in which empathy for a user's needs is consistently integrated. Students learn strategies for identifying user needs and assessing how well different designs address them. In particular they learn how to develop a paper prototype, how to gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps.\n\n**Goals:** \n* See the design process as a form of problem solving that prioritizes the needs of a user. \n* Identify user needs and assess how well different designs address them. \n* Develop paper prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n\n**Big Questions:**\n* How do designers identify the needs of their user?\n* How can we ensure that a user's needs are met by our designs?\n* What processes will best allow us to efficiently create, test, and iterate upon our designs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter is focused on a long running group project that allows students to apply all they've learned about User-Centered Design to develop an app prototype. Working in teams, students identify a social issue that they care about and design and prototype an app to address that issue. This is an opportunity for students to explore other roles in software development, such as product management, marketing, design, and testing.\n\n\n**Goals:**\n* Develop digital prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n* Understand other roles in software development, such as product management, marketing, design, and testing, and how to use what they have learned about computer science as a tool for social impact.\n\n**Big Questions:**\n* How do teams effectively work together to develop software?\n* What roles beyond programming are necessary to design and develop software?\n* How do designers incorporate feedback into multiple iterations of a product?\n:::\n\n::: details [**Implementation Guidance for The Design Process**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
        focus-on-impact-in-society3-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Representing Information'
            lessonGroup-3:
              display_name: 'Chapter 1: Solving Data Problems'
          name: focus-on-impact-in-society3-2023
          title: Data and Society ('23-'24)
          description_audience: ''
          description_short: Learn how people use computers to solve data problems.
          description: |-
            The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.


            ::: details [**Chapter 1 Overview**]
            **Description:** Students explore how data can be used to answer interesting questions and solve problems.  Using a modified version of the general Problem Solving Process, students look at how computers and humans use data differently and the pros and cons of automating problem solving.  After learning ways that computers use data in the real world, students choose their own problem and use data to address it.


            **Goals:**
            * Investigate and understand how humans and computers use data differently.
            * Design and implement a data-based solution to a given problem and determine how the different aspects of the problem solving process could be automated.



            **Big Questions:**
            * How does data help us to solve problems?
            * How do computers and humans use data differently?
            * What parts of the data problem solving process can be automated?
            * What kinds of problems do computers use data to solve in the real world?

            :::


            ::: details [**Implementation Guidance for Data and Society**]
            - You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit
            :::

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went.
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
        focus-on-impact-in-society4-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Chapter 1
            lessonGroup-3:
              display_name: Intro to App Lab
            lessonGroup-4:
              display_name: Chapter 2
          name: focus-on-impact-in-society4-2023
          title: AI and Machine Learning ('23-'24)
          description_audience: ''
          description_short: Learn to about Artificial Intelligence and Machine Learning.
          description: "This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students learn the basics of machine learning and use a tool called AI Lab to create machine learning models that can be used in App Lab. The unit starts with an overview of machine learning and how computers can use patterns in data to make decisions and predictions. Then, students learn how to use AI Lab to train models from tabular data while exploring issues of bias. Lessons follow a repeating \"unplugged - AI Lab - App Lab\" pattern so students are continually exposed to the concepts and tools of machine learning. The chapter culminates in a project where students select from a set of real-world datasets to train a machine learning model and create an app.\n\n\n**Goals:**\n* Create a machine learning model in AI Lab to solve a problem, and use App Lab to create an app that uses their model. \n* Understand how machine learning models make decisions from data\n\n\n**Big Questions:**\n- How does machine learning find patterns in data to make decisions?\n- How can we avoid bias when training a machine learning model?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter prepares students to be machine learning scientists to create an app that addresses an issue in their community. Students follow along with a fictional group of students as they define an issue, develop a survey to collect data, analyze their data in AI Lab, create a model card, and create an app to solve their problem. Then, in the final project, students repeat these same steps with an issue they care about in their community.\n\n**Goals:**\n* Create machine learning models in AI Lab  from their own data and use App Lab to create an app that uses their model to solve problems in their community. \n\n\n**Big Questions:**\n- How can machine learning be used to solve problems in our community?\n\n:::\n\n\n::: details [**Implementation Guidance for the AI and Machine Learning Unit**]\n\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-aiml-2023). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop your own machine learning projects around real-world data. The unit culminates with designing your own machine learning app to solve a personally relevant problem.
        csd6a-2023:
          lesson_groups:
            lessonGroup-4:
              display_name: Introduction to App Lab
            lessonGroup-2:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Physical Prototypes'
          title: Unit 6A - (Option A) Creating Apps with Devices - Circuit Playground ('23-'24)
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [(Option B) Creating Apps with Devices unit](/s/csd6b-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          description_short: Learn to program with physical devices.
          description_audience: ''
          lessons: {}
          name: csd6a-2023
        csa9-2023:
          lessons:
            lesson-1:
              name: 'Sandbox: Console'
            lesson-2:
              name: 'Sandbox: The Neighborhood'
            lesson-3:
              name: 'Sandbox: The Theater'
          lesson_groups:
            lessonGroup-2:
              display_name: Review and Practice
            lessonGroup-3:
              display_name: Mock Exams
            lessonGroup-4:
              display_name: Sandboxes
          name: csa9-2023
          title: AP Exam Review and Practice
          description_audience: ''
          description_short: Students prepare for the AP CSA Exam by practicing strategies for the multiple-choice and free response questions.
          description: This unit prepares students for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. Students identify strengths and areas of improvement to create individualized study plans to focus their practice and self-assess their progress.
          student_description: This unit prepares you for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. You identify strengths and areas of improvement to create individualized study plans to focus you practice and self-assess your progress.
        microbit-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
            lessonGroup-5:
              display_name: Survey
          name: microbit-2023
          title: Creating Apps with Devices (micro:bit) ('23-'24)
          description_audience: ''
          description_short: ''
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/devices). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Inputs and Outputs Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Building Physical Prototypes Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n&nbsp;\n&nbsp;\n&nbsp;"
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
        vpl-csd-ci-1:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching Problem Solving and Computing
          name: vpl-csd-ci-1
          title: Preparing to Teach Problem Solving and Computing
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Problem Solving and Computing unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Problem Solving and Computing.\n* Practice key concepts included in the unit.\n* Explore end of chapter projects.\n\n**Suggested time:** 30 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Problem Solving and Computing unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Problem Solving and Computing.\n* Practice key concepts included in the unit.\n* Explore end of chapter projects.\n\n**Suggested time:** 30 minutes"
        vpl-csd-ci-2:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching Web Development
          name: vpl-csd-ci-2
          title: Preparing to Teach Web Development
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Web Development unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Web Development.\n* Practice key concepts included in the unit.\n* Engage with Web Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 90 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Web Development unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Web Development.\n* Practice key concepts included in the unit.\n* Engage with Web Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 90 minutes"
        vpl-csd-ci-3:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach Interactive Animations and Games
          name: vpl-csd-ci-3
          title: 'Preparing to Teach Interactive Animations and Games '
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Interactive Animations and Games unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Interactive Animations and Games.\n* Practice key concepts included in the unit.\n* Engage with Game Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 120 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Interactive Animations and Games unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Interactive Animations and Games.\n* Practice key concepts included in the unit.\n* Engage with Game Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 120 minutes"
        vpl-csd-ci-4:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach the Design Process
          name: vpl-csd-ci-4
          title: Preparing to Teach The Design Process
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Design Process unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to The Design Process.\n* Practice key concepts included in the unit.\n* Engage with App Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 90 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Design Process unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to The Design Process.\n* Practice key concepts included in the unit.\n* Engage with App Lab.\n* Explore end of chapter projects.\n\n**Suggested time:** 90 minutes"
        vpl-csd-ci-5:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching Data and Society
          name: vpl-csd-ci-5
          title: Preparing to Teach Data and Society
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Data and Society unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Data and Society.\n* Practice key concepts included in the unit.\n* Explore end of chapter projects.\n\n**Suggested time:** 60 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Data and Society unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Data and Society.\n* Practice key concepts included in the unit.\n* Explore end of chapter projects.\n\n**Suggested time:** 60 minutes"
        vpl-csd-ci-6:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach Creating Apps for Devices
          name: vpl-csd-ci-6
          title: Preparing to Teach Creating Apps for Devices (Option A - Circuit Playground)
          description_audience: ''
          description_short: ''
          description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your Circuit Playground. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n* Consider the role of the teacher in a computer science classroom.\n\n**Suggested time:** 75 minutes"
          student_description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your Circuit Playground. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n* Consider the role of the teacher in a computer science classroom.\n\n**Suggested time:** 75 minutes"
        vpl-csd-ci-7:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching AI and Machine Learning
          name: vpl-csd-ci-7
          title: Preparing to Teach AI and Machine Learning
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to AI and Machine Learning.\n* Practice key concepts included in the unit.\n* Engage with AI Lab and App Lab.\n* Explore end of chapter projects.\n* Make a plan for implementing the unit with your students.\n\n**Suggested time:** 120 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to AI and Machine Learning.\n* Practice key concepts included in the unit.\n* Engage with AI Lab and App Lab.\n* Explore end of chapter projects.\n* Make a plan for implementing the unit with your students.\n\n**Suggested time:** 120 minutes"
        devices-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
            lessonGroup-5:
              display_name: Survey
          name: devices-2023
          title: Creating Apps with Devices - Circuit Playground ('23-'24)
          description_audience: ''
          description_short: ''
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [Creating Apps with Devices - micro:bit unit](/s/microbit). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
        focus-on-creativity4b-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
          name: focus-on-creativity4b-2023
          title: Unit 4B - (Option B) Creating Apps with Devices (micro:bit)
          description_audience: ''
          description_short: ''
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/focus-on-creativity4a-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices (micro:bit) Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
        focus-on-hardware3b-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
          name: focus-on-hardware3b-2023
          title: Unit 3B - (Option B) Creating Apps with Devices (micro:bit)
          description_audience: ''
          description_short: ''
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/focus-on-hardware3a-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices (micro:bit) Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
        focus-on-design-with-purpose4b-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
          name: focus-on-design-with-purpose4b-2023
          title: Unit 4B - (Option B) Creating Apps with Devices (micro:bit) ('24-'25)
          description_audience: ''
          description_short: ''
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/focus-on-design-with-purpose4a-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices (micro:bit) Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
        ai-temp:
          lessons:
            lesson-5:
              name: "[Neural Networks Lesson]"
            lesson-6:
              name: "[Computer Vision Lesson]"
            lesson-7:
              name: "[Generative AI Lesson]"
            lesson-8:
              name: "[Generative Images Lesson (dall-e-esque)]"
          lesson_groups: {}
          name: ai-temp
          title: How AI Works
          description_audience: ''
          description_short: ''
          description: These lessons supplement the [How AI Works](https://www.youtube.com/playlist?list=PLzdnOPI1iJNeehd1RXhnVMBFi1WhWLx_Y) video series. Each lesson is paired with a single video from the series, diving-deeper into the concepts introduced in the videos. Lessons focus on creating an exciting first experience for students, where students engage in an activity or simulation and then reflect on the experience as a way to build understanding around AI and build empathy with those impacted by it. Some lessons focus more on the technology behind AI, while other lessons focus on the societal impacts and ethical considerations of AI.
          student_description: Learn how AI works by participating in different experiences and watching the [How AI Works](https://www.youtube.com/playlist?list=PLzdnOPI1iJNeehd1RXhnVMBFi1WhWLx_Y) video series!
        focus-on-coding4b-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
          name: focus-on-coding4b-2023
          title: Unit 4B - Creating Apps with Devices (micro:bit)
          description_audience: ''
          description_short: ''
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/focus-on-coding4a-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices (micro:bit) Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
        csd6b-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
          name: csd6b-2023
          title: Unit 6B - (Option B)  Creating Apps with Devices (micro:bit)
          description_audience: ''
          description_short: ''
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/csd6a-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices (micro:bit) Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
        vpl-csd-ci-6b:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach Creating Apps for Devices
          name: vpl-csd-ci-6b
          title: Preparing to Teach Creating Apps for Devices (Option B - micro:bit)
          description_audience: ''
          description_short: ''
          description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your micro:bit. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n* Consider the role of the teacher in a computer science classroom.\n\n**Suggested time:** 75 minutes"
          student_description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your micro:bit. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n* Consider the role of the teacher in a computer science classroom.\n\n**Suggested time:** 75 minutes"
        self-paced-pl-physical-computing1-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          name: self-paced-pl-physical-computing1-2023
          title: Getting Started with Code.org
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching the unit.\n\n**Suggested time:** 80 minutes"
        self-paced-pl-physical-computing2-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach Creating Apps for Devices with Circuit Playgrounds
          name: self-paced-pl-physical-computing2-2023
          title: Preparing to Teach Creating Apps for Devices
          description_audience: ''
          description_short: ''
          description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your Circuit Playground. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n* Consider the role of the teacher in a computer science classroom.\n\n**Suggested time:** 100 minutes"
          student_description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your Circuit Playground. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n\n**Suggested time:** 100 minutes\n"
        self-paced-pl-csd1-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Welcome
          name: self-paced-pl-csd1-2023
          title: 'Module 1: Welcome '
          description_audience: ''
          description_short: ''
          description: "This module is a short introduction to both Code.org and this professional learning course. \n\n**You will:**\n* Get an introduction to Code.org and CS Discoveries.\n* Learn how to engage in this professional learning course.\n\n**Suggested Time:** 10 minutes"
          student_description: "This module is a short introduction to both Code.org and this professional learning course. \n\n**You will:**\n* Get an introduction to Code.org and CS Discoveries.\n* Learn how to engage in this professional learning course.\n\n**Suggested Time:** 10 minutes"
        self-paced-pl-csd2-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Navigating Code.org
          name: self-paced-pl-csd2-2023
          title: 'Module 2: Navigating Code.org'
          description_audience: ''
          description_short: ''
          description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Discoveries. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes\n\n\n\n\n"
          student_description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Discoveries. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes"
        self-paced-pl-csd3-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Overview of CS Discoveries
          name: self-paced-pl-csd3-2023
          title: 'Module 3: Overview of CS Discoveries'
          description_audience: ''
          description_short: ''
          description: "This module will provide you with an overview of the CS Discoveries course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom. \n\n**You will:**\n\n* Gain a high-level understanding of the CS Discoveries curriculum.\n* Become familiar with the programming environments used within CS Discoveries.\n* Decide which units of CS Discoveries you will teach in your class.\n\n**Suggested time:** 60 minutes"
          student_description: "This module will provide you with an overview of the CS Discoveries course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom. \n\n**You will:**\n\n* Gain a high-level understanding of the CS Discoveries curriculum.\n* Become familiar with the programming environments used within CS Discoveries.\n* Decide which units of CS Discoveries you will teach in your class.\n\n**Suggested time:** 60 minutes"
        self-paced-pl-csd4-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching and learning CS Discoveries
          name: self-paced-pl-csd4-2023
          title: 'Module 4: Teaching and learning CS Discoveries'
          description_audience: ''
          description_short: ''
          description: "In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Discoveries course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Discoveries classroom and make a plan for how you will support student learning while teaching the course. \n\n**You will:**\n* Consider the role of the teacher in a CS Discoveries classroom. \n* Learn about authentic CS practices that students will develop throughout the CS Discoveries course.\n* Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion. \n\n**Suggested Time:** 50 minutes"
          student_description: "In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Discoveries course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Discoveries classroom and make a plan for how you will support student learning while teaching the course. \n\n**You will:**\n* Consider the role of the teacher in a CS Discoveries classroom. \n* Learn about authentic CS practices that students will develop throughout the CS Discoveries course.\n* Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion. \n\n**Suggested Time:** 50 minutes"
        self-paced-pl-csd5-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching Artificial Intelligence and Machine Learning
          name: self-paced-pl-csd5-2023
          title: "[Hidden - Do Not Use] Preparing to Teach AI and Machine Learning"
          description_audience: ''
          description_short: ''
          description: "**Note:** This unit is hidden within the CSD Self-Paced Course. The content of this unit has instead been moved to [https://studio.code.org/courses/self-paced-pl-aiml-2023](https://studio.code.org/courses/self-paced-pl-aiml-2023)\n\nThis professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit.  \n\n**In this professional learning module, you will:**\n* Get an introduction to artificial intelligence and machine learning. \n* Practice key concepts included in the unit.\n* Engage with AI Lab and App Lab.\n* Explore end of chapter projects. \n* Make a plan for implementing the unit with your students.\n\n**Suggested Time:** 120 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit.  \n\n**In this professional learning module, you will:**\n* Get an introduction to artificial intelligence and machine learning. \n* Practice key concepts included in the unit.\n* Engage with AI Lab and App Lab.\n* Explore end of chapter projects. \n* Make a plan for implementing the unit with your students.\n\n**Suggested Time:** 120 minutes"
        pl-csd-summer-day1:
          lessons:
            lesson-3:
              name: Introduction
            lesson-4:
              name: CS Discoveries Overview
            lesson-5:
              name: Navigating the Code.org Platform
            lesson-6:
              name: 'Unit 1: The Problem Solving Process in CS Dicoveries '
            lesson-7:
              name: Intro to Unit 2
            lesson-8:
              name: Pair Programming and Debugging
            lesson-9:
              name: 'Journaling and Dicussion '
            lesson-10:
              name: 'Day 1 Wrap Up '
            lesson-11:
              name: The Problem Solving Process in CSD
          lesson_groups:
            lessonGroup-2:
              display_name: Day 1
          name: pl-csd-summer-day1
          title: Day 1
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        pl-csd-summer-day2:
          lessons:
            lesson-3:
              name: Introduction to Day 2
            lesson-4:
              name: 'Resources and Assesssment '
            lesson-5:
              name: Unit 2 Connections
            lesson-6:
              name: 'Unit 3 Curiculum Investigation: Shapes and Variables'
            lesson-7:
              name: Preparing for TLOs
            lesson-8:
              name: Lesson Planning - Getting to Know Your Lesson
            lesson-9:
              name: Lesson Planning - Make a Plan
            lesson-10:
              name: Wrap Up
          lesson_groups:
            lessonGroup-2:
              display_name: Day 2
          name: pl-csd-summer-day2
          title: Day 2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        pl-csd-summer-day3:
          lessons:
            lesson-4:
              name: Introduction to Day 3
            lesson-5:
              name: Understanding Context
            lesson-6:
              name: Being a Lead Learner
            lesson-7:
              name: 'Unit 3 Curriculum Investigation: Sprites'
            lesson-8:
              name: Unit 3 Connections
            lesson-9:
              name: Classroom Culture
            lesson-10:
              name: 'Wrap Up '
            lesson-11:
              name: Day 3 Wrap Up
          lesson_groups:
            lessonGroup-2:
              display_name: Day 3
          name: pl-csd-summer-day3
          title: Day 3
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        pl-csd-summer-day4:
          lessons:
            lesson-4:
              name: Introduction to Day 4
            lesson-5:
              name: Bias and Responsibility
            lesson-6:
              name: Intro to Unit 5
            lesson-7:
              name: 'Intro to Unit 6 - Creating Apps for Devices '
            lesson-8:
              name: 'Intro to Unit 7 - AI & Machine Learning '
            lesson-9:
              name: 'Content Wrap Up '
            lesson-10:
              name: Differentiation
            lesson-11:
              name: Barriers, Opportunities, and Commitments
            lesson-12:
              name: Wrap Up
          lesson_groups:
            lessonGroup-2:
              display_name: Day 4
          name: pl-csd-summer-day4
          title: Day 4
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        pl-csd-summer-day5:
          lessons:
            lesson-1:
              name: Introduction to Day 5
            lesson-2:
              name: Preparing for the Year
            lesson-3:
              name: 'Assessment '
            lesson-4:
              name: Revisiting Topics from the Week
            lesson-5:
              name: 'Community '
            lesson-6:
              name: Previewing Academic Year Workshops
            lesson-7:
              name: Planning for the Year
            lesson-8:
              name: Closing Ceremonies
          lesson_groups:
            lessonGroup-2:
              display_name: 'Day 5 '
          name: pl-csd-summer-day5
          title: 'Day 5 '
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csd-summer-day1:
          lessons:
            lesson-1:
              name: Introduction
            lesson-2:
              name: CS Discoveries Overview
            lesson-3:
              name: Navigating the Code.org Platform
            lesson-4:
              name: Unit 1 - Problem Solving & Computing
            lesson-5:
              name: Intro to Async
            lesson-6:
              name: Asynchronous Work
            lesson-7:
              name: Async Debrief
            lesson-8:
              name: Intro to Unit 2
            lesson-9:
              name: 'Model Lesson 1: U2L2 Intro to HTML'
            lesson-10:
              name: 'Model Lesson 2: U2L6 Styling Text with CSS'
            lesson-11:
              name: Instructional Strategies
            lesson-12:
              name: Wrap Up
            lesson-13:
              name: Asynchronous Work
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csd-summer-day1
          title: Day 1
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csd-summer-day2:
          lessons:
            lesson-1:
              name: Intro to Day 2
            lesson-2:
              name: Unit 2 Connections
            lesson-3:
              name: 'Unit 3 Curriculum Investigation: Shapes & Variables'
            lesson-4:
              name: 'Model Lesson 3: U3L3 Drawing in Game Lab'
            lesson-5:
              name: Intro to Async
            lesson-6:
              name: Asynchronous Work
            lesson-7:
              name: Async Debrief
            lesson-8:
              name: 'Model Lesson 4: U3L5 Variables'
            lesson-9:
              name: 'Lesson Planning: Make a Plan'
            lesson-10:
              name: Wrap Up
            lesson-11:
              name: Asynchronous Work
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csd-summer-day2
          title: Day 2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csd-summer-day3:
          lessons:
            lesson-1:
              name: Intro to Day 3
            lesson-2:
              name: Being a Lead Learner
            lesson-3:
              name: 'Unit 3 Curriculum Investigation: Sprites'
            lesson-4:
              name: 'TLO 1: U3L6 Rnadom Numbers'
            lesson-5:
              name: Intro to Async
            lesson-6:
              name: Asynchronous Work
            lesson-7:
              name: Async Debrief
            lesson-8:
              name: 'TLO 2: U3L8 Sprites'
            lesson-9:
              name: Unit 3 Connections
            lesson-10:
              name: 'TLO 3: U4L3 User-Centered Design Define & Prepare'
            lesson-11:
              name: Classroom Culture
            lesson-12:
              name: Wrap Up
            lesson-13:
              name: Asynchronous Work
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csd-summer-day3
          title: Day 3
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csd-summer-day4:
          lessons:
            lesson-1:
              name: Intro to Day 4
            lesson-2:
              name: Intro to Unit 5
            lesson-3:
              name: 'TLO 4: U5L1 Representation Matters'
            lesson-4:
              name: Intro to Unit 6
            lesson-5:
              name: 'TLO 5: U6L2 Physical Designs'
            lesson-6:
              name: Intro to Async
            lesson-7:
              name: Asynchronous Work
            lesson-8:
              name: Async Debrief
            lesson-9:
              name: Intro to Unit 7
            lesson-10:
              name: 'TLO 6: U7L2 Introduction to Machine Learning'
            lesson-11:
              name: Barriers, Opportunities, and Commitments
            lesson-12:
              name: Differentiation
            lesson-13:
              name: Wrap Up
            lesson-14:
              name: Asynchronous Work
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csd-summer-day4
          title: Day 4
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csd-summer-day5:
          lessons:
            lesson-1:
              name: Intro to Day 5
            lesson-9:
              name: Preparing for the Year
            lesson-3:
              name: Assessment
            lesson-4:
              name: Revisiting Topics from the Week
            lesson-5:
              name: Previewing Academic Year Workshops
            lesson-6:
              name: Intro to Async
            lesson-7:
              name: Asynchronous Work
            lesson-8:
              name: Async Debrief
            lesson-2:
              name: Planning for the Year
            lesson-10:
              name: Closing Ceremonies
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
          name: virtual-pl-csd-summer-day5
          title: Day 5
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-microbit1:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          name: self-paced-pl-microbit1
          title: Getting Started with Code.org
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
        self-paced-pl-microbit2:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach Creating Apps for Devices with micro:bits
          name: self-paced-pl-microbit2
          title: Preparing to Teach Creating Apps for Devices with micro:bits
          description_audience: ''
          description_short: ''
          description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your micro:bit. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n* Consider the role of the teacher in a computer science classroom.\n\n**Suggested time:** 100 minutes"
          student_description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your micro:bit. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n* Consider the role of the teacher in a computer science classroom.\n\n**Suggested time:** 100 minutes"
        seesaw-adaptations:
          lessons: {}
          lesson_groups: {}
          name: seesaw-adaptations
          title: Seesaw - Animal Adaptations
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csp-bingo-2023:
          lessons:
            lesson-1:
              name: BINGO Review Game by Unit
          lesson_groups: {}
          name: csp-bingo-2023
          title: CSP Vocabulary BINGO
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csd-post-survey-2023:
          lessons: {}
          lesson_groups: {}
          name: csd-post-survey-2023
          title: Post-Course Survey
          description_audience: ''
          description_short: ''
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
        focus-on-data-post-survey-2023:
          lessons: {}
          lesson_groups: {}
          name: focus-on-data-post-survey-2023
          title: Post-Course Survey
          description_audience: ''
          description_short: ''
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
        focus-on-impact-in-society-post-survey-2023:
          lessons: {}
          lesson_groups: {}
          name: focus-on-impact-in-society-post-survey-2023
          title: Post-Course Survey
          description_audience: ''
          description_short: ''
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
        focus-on-coding-post-survey-2023:
          lessons: {}
          lesson_groups: {}
          name: focus-on-coding-post-survey-2023
          title: Post-Course Survey
          description_audience: ''
          description_short: ''
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
        focus-on-design-with-purpose-post-survey-2023:
          lessons: {}
          lesson_groups: {}
          name: focus-on-design-with-purpose-post-survey-2023
          title: Post-Course Survey
          description_audience: ''
          description_short: ''
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
        focus-on-hardware-post-survey-2023:
          lessons: {}
          lesson_groups: {}
          name: focus-on-hardware-post-survey-2023
          title: Post-Course Survey
          description_audience: ''
          description_short: ''
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
        focus-on-creativity-post-survey-2023:
          lessons: {}
          lesson_groups: {}
          name: focus-on-creativity-post-survey-2023
          title: Post-Course Survey
          description_audience: ''
          description_short: ''
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
        coursef-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Digital Citizenship
            lessonGroup-3:
              display_name: Sprites
            lessonGroup-4:
              display_name: Variables
            lessonGroup-5:
              display_name: Data and Simulations
            lessonGroup-6:
              display_name: End of Course Project
          name: coursef-2023
          title: Course F (2023)
          description_audience: 'Ages: 9-13'
          description_short: Learn all the concepts in Computer Science Fundamentals and create your own art, story or game.
          description: We created Course F for students in the fifth grade. The course begins by looking at how users make choices in the apps they use. Students then learn to make a variety of Sprite Lab apps that also offer choices for the user. In the later lessons in the course, students will learn about variables in a variety of contexts. Students are given greater autonomy and more choices throughout this course. By the end of the course, students will have created interactive projects to share with their friends and family.
          student_description: Learn to code with sprites and variables, and discuss societal impacts of computing and the internet. By the end of this course, design and create a project you can share with friends and family.
        ey-ecosystems:
          lessons: {}
          lesson_groups: {}
          name: ey-ecosystems
          title: EY Ecosystems (Preview)
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-csp1-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csp1-2023
          title: 'Module 1: Welcome'
          description_audience: ''
          description_short: ''
          description: "This module is a short introduction to both Code.org and professional learning modules. \n\n**You will:**\n* Get an introduction to Code.org and CS Principles.\n* Learn how to engage in professional learning modules.\n\n**Suggested Time:** 10 minutes"
          student_description: "This module is a short introduction to both Code.org and professional learning modules. \n\n**You will:**\n* Get an introduction to Code.org and CS Principles.\n* Learn how to engage in professional learning modules.\n\n**Suggested Time:** 10 minutes"
        self-paced-pl-csp2-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csp2-2023
          title: 'Module 2: Navigating Code.org'
          description_audience: ''
          description_short: ''
          description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Principles. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes"
          student_description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Principles. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes"
        self-paced-pl-csp3-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csp3-2023
          title: Overview of CS Principles
          description_audience: ''
          description_short: ''
          description: |-
            This module will provide you with an overview of the CS Principles course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom.

            **You will**:

            * Gain a high-level understanding of the CS Principles curriculum.
            * Learn more about the pedagogical approaches used to teach both non-programming and programming units.
            * Become familiar with the student learning tools used within CS Principles.
            * Explore the components of the AP Exam, as well as your responsibilities as a teacher if you plan to offer CS Principles as an AP course.
            * Build an implementation plan for the school year.

            **Suggested time**: 90 minutes
          student_description: |-
            This module will provide you with an overview of the CS Principles course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom.

            **You will**:

            * Gain a high-level understanding of the CS Principles curriculum.
            * Learn more about the pedagogical approaches used to teach both non-programming and programming units.
            * Become familiar with the student learning tools used within CS Principles.
            * Explore the components of the AP Exam, as well as your responsibilities as a teacher if you plan to offer CS Principles as an AP course.
            * Build an implementation plan for the school year.

            **Suggested time**: 90 minutes
        self-paced-pl-csp4-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csp4-2023
          title: Teaching and learning CS Principles
          description_audience: ''
          description_short: ''
          description: |-
            In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Principles course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Principles classroom and make a plan for how you will support student learning while teaching the course.

            **You will**:

            * Consider the role of the teacher in a CS Principles classroom.
            * Learn about authentic CS practices that students will develop throughout the CS Principles course.
            * Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion.
            * Learn about opportunities to connect with the broader CS community.

            **Suggested Time**: 70 minutes
          student_description: |-
            In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Principles course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Principles classroom and make a plan for how you will support student learning while teaching the course.

            **You will**:

            * Consider the role of the teacher in a CS Principles classroom.
            * Learn about authentic CS practices that students will develop throughout the CS Principles course.
            * Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion.
            * Learn about opportunities to connect with the broader CS community.

            **Suggested Time**: 70 minutes
        musiclab:
          lessons:
            lesson-1:
              name: Remix Projects
            lesson-2:
              name: SNAP - Rosa Linn
            lesson-3:
              name: Free Play
            lesson-4:
              name: Test Library
          lesson_groups: {}
          name: musiclab
          title: Music Lab Test Lessons
          description_audience: ''
          description_short: ''
          description: |-
            Hi there! This is a special unit that Code.org uses for testing Music Lab. None of the lessons or levels in this unit are meant to be used in classrooms!

            If you're not a code.org engineer but managed to discover this unit: congratulations! It's like you discovered a secret on our website! But if you're looking for more info about our curricula or tools, we recommend checking out https://code.org/educate/ instead.
          student_description: ''
        csa-software-engineering:
          lessons:
            lesson-1:
              name: Intro to GitHub
            lesson-2:
              name: Intro to Copilot
            lesson-3:
              name: Build with Copilot
            lesson-4:
              name: Intro to AI Models
            lesson-5:
              name: Training Your Model
            lesson-6:
              name: Using Your Model
            lesson-7:
              name: Software Engineering and Computer Vision Pre-Survey
            lesson-8:
              name: Software Engineering and Computer Vision Post-Survey
            lesson-9:
              name: Setup
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: GitHub and Copilot'
            lessonGroup-3:
              display_name: 'Chapter 2: Computer Vision'
            lessonGroup-4:
              display_name: Pre-Survey
            lessonGroup-5:
              display_name: Post-Survey
          name: csa-software-engineering
          title: Software Engineering & Computer Vision
          description_audience: ''
          description_short: ''
          description: This two-chapter post-AP CSA module offers high school students hands-on experience with professional software development tools, including GitHub and GitHub Copilot, and imparts them with the real-world skills to develop a computer vision program. Students will gain practical knowledge, learn industry-standard practices, and cultivate critical thinking through discussions and problem-solving centered around AI tools and models. These lessons aim not only to bolster their understanding of AI and its applications but also foster creativity and collaboration, equipping students with the set of skills and the beginning of a software development portfolio they can take with them beyond high school.
          student_description: This two-part module lets you explore pro-level tools like GitHub and GitHub Copilot and teaches you how to create your own computer vision program. You'll be solving real-world AI problems and tinkering with cutting-edge models, learning industry-standard practices along the way. This isn't just about understanding AI better - it's about sparking your creativity, improving your teamwork skills, and starting to build your own software development portfolio.
        csa-frq-practice:
          lessons:
            lesson-1:
              name: Frog Simultation
            lesson-2:
              name: Delimiters
            lesson-3:
              name: APCalendar
            lesson-4:
              name: StepTracker
            lesson-5:
              name: LightBoard
          lesson_groups:
            lessonGroup-2:
              display_name: Methods and Control Structures
            lessonGroup-3:
              display_name: Classes
            lessonGroup-4:
              display_name: Arrays / ArrayLists
            lessonGroup-5:
              display_name: 2D Arrays
          name: csa-frq-practice
          title: CSA FRQ Practice 2019
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        hoc-amazon-poc:
          lessons:
            lesson-1:
              name: Hour of Code Progression
            lesson-2:
              name: Hour of Career Exploration Progression
          lesson_groups: {}
          name: hoc-amazon-poc
          title: Hour of Code (PoC)
          description_audience: ''
          description_short: ''
          description: |-
            Proof-of-concept for HoC progression with Amazon Career Tours included.

            First "lesson" is the HoC progression ([like what we typically have here](https://levelbuilder-studio.code.org/s/hello-world-space-2022))

            Second "lesson" is the "post-roll" where students can continue into the "Hour of Career" if they want
          student_description: ''
        musiclab-2023:
          lessons:
            lesson-1:
              name: Music Lab
          lesson_groups: {}
          name: musiclab-2023
          title: Music Lab
          description_audience: ''
          description_short: Code your own version of a song to share or perform!
          description: Code your own version of a song to share or perform!
          student_description: Code your own version of a song to share or perform!
        csa-frq-practice-2019:
          lessons:
            lesson-1:
              name: FRQ 1
            lesson-2:
              name: FRQ 2
            lesson-3:
              name: FRQ 3
            lesson-4:
              name: FRQ 4
          lesson_groups:
            lessonGroup-2:
              display_name: Methods & Control Structures
            lessonGroup-3:
              display_name: Classes
            lessonGroup-4:
              display_name: Arrays / ArrayLists
            lessonGroup-5:
              display_name: 2D Arrays
          name: csa-frq-practice-2019
          title: CSA FRQ Practice 2019
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-frq-practice-2021:
          lessons:
            lesson-1:
              name: WordMatch
            lesson-2:
              name: SingleTable
            lesson-3:
              name: ClubMembers
            lesson-4:
              name: ArrayResizer
          lesson_groups:
            lessonGroup-2:
              display_name: Methods and Control Structures
            lessonGroup-3:
              display_name: Classes
            lessonGroup-4:
              display_name: Arrays / ArrayLists
            lessonGroup-5:
              display_name: 2D Arrays
          name: csa-frq-practice-2021
          title: CSA FRQ Practice 2021
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-frq-practice-2022:
          lessons:
            lesson-1:
              name: Game
            lesson-2:
              name: Textbook
            lesson-3:
              name: ReviewAnalysis
            lesson-4:
              name: Data
          lesson_groups:
            lessonGroup-2:
              display_name: Methods and Control Structures
            lessonGroup-3:
              display_name: Classes
            lessonGroup-4:
              display_name: Arrays / ArrayLists
            lessonGroup-5:
              display_name: 2D Arrays
          name: csa-frq-practice-2022
          title: CSA FRQ Practice 2022
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-frq-practice-2023:
          lessons:
            lesson-1:
              name: AppointmentBook
            lesson-2:
              name: Sign
            lesson-3:
              name: WeatherData
            lesson-4:
              name: BoxOfCandy
          lesson_groups:
            lessonGroup-2:
              display_name: Methods and Control Structures
            lessonGroup-3:
              display_name: Classes
            lessonGroup-4:
              display_name: Arrays / ArrayLists
            lessonGroup-5:
              display_name: 2D Arrays
          name: csa-frq-practice-2023
          title: CSA FRQ Practice 2023
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-frq-practice-pre2019:
          lessons:
            lesson-2:
              name: CSA-frq-2016-Crossword-PartA
            lesson-3:
              name: CSA-frq-2016-Crossword-PartB
            lesson-1:
              name: 2018 FRQ - FrogSimulation
          lesson_groups:
            lessonGroup-2:
              display_name: Methods and Control Structures
            lessonGroup-3:
              display_name: Classes
            lessonGroup-4:
              display_name: Arrays / ArrayLists
            lessonGroup-5:
              display_name: 2D Arrays
          name: csa-frq-practice-pre2019
          title: CSA FRQ Practice Pre-2019
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-aiml1:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          name: self-paced-pl-aiml1
          title: Getting Started with Code.org
          description_audience: ''
          description_short: ''
          description: |-
            **You will:**

            * Get an introduction to Code.org’s mission.
            * Learn how to navigate the Code.org website and teacher tools.
            * Set up a classroom section.
            * Locate and use course lesson plans and teacher resources.
            * Learn how to access support while teaching Code.org curricula.

            **Suggested time:** 80 minutes
          student_description: |-
            **You will:**

            * Get an introduction to Code.org’s mission.
            * Learn how to navigate the Code.org website and teacher tools.
            * Set up a classroom section.
            * Locate and use course lesson plans and teacher resources.
            * Learn how to access support while teaching Code.org curricula.

            **Suggested time:** 80 minutes
        self-paced-pl-aiml2:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: 'Teaching Artificial Intelligence and Machine Learning '
          name: self-paced-pl-aiml2
          title: 'Teaching AI and Machine Learning '
          description_audience: ''
          description_short: ''
          description: |2-

            **In this professional learning module, you will:**

            * Get an introduction to artificial intelligence and machine learning.
            * Practice key concepts included in the unit.
            * Engage with AI Lab and App Lab.
            * Explore end of chapter projects.
            * Make a plan for implementing the unit with your students.

            **Suggested Time:** 100 minutes
          student_description: |2-

            **In this professional learning module, you will:**

            * Get an introduction to artificial intelligence and machine learning.
            * Practice key concepts included in the unit.
            * Engage with AI Lab and App Lab.
            * Explore end of chapter projects.
            * Make a plan for implementing the unit with your students.

            **Suggested Time:** 100 minutes
        musiclab-pilot:
          lessons:
            lesson-1:
              name: Music Lab
          lesson_groups: {}
          name: musiclab-pilot
          title: Music Lab
          description_audience: ''
          description_short: Code your own version of a song to share or perform!
          description: Code your own version of a song to share or perform!
          student_description: Code your own version of a song to share or perform!
        tesspltest23:
          lessons:
            lesson-1:
              name: Testing styling text
          lesson_groups: {}
          name: tesspltest23
          title: 'Testing PL '
          description_audience: ''
          description_short: ''
          description: Testing pl bugs diagnose problems
          student_description: ''
        test-nv-coursea-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Digital Citizenship
            lessonGroup-3:
              display_name: Sequencing
            lessonGroup-4:
              display_name: Loops
            lessonGroup-5:
              display_name: Impacts of Computing
          name: test-nv-coursea-2023
          title: 'Nevada Course A '
          description_audience: 'Ages: 4-7'
          description_short: short overview goes here
          description: "Copy for overview goes here\n\nCourse A offers a computer science curriculum for beginning readers, including Kindergarten students. Students will learn to program using commands like loops and events. The lessons featured in this course also teach students to meaningfully collaborate with others, investigate different problem-solving techniques, persist in the face of challenging tasks, and learn about internet safety. "
          student_description: |+
            do we want student and teacher specific overviews/

            Course A offers a computer science curriculum for beginning readers, including Kindergarten students. Students will learn to program using commands like loops and events. The lessons featured in this course also teach students to meaningfully collaborate with others, investigate different problem-solving techniques, persist in the face of challenging tasks, and learn about internet safety.

        nevada-standards-aligned-kindergarten-2023:
          lessons:
            lesson-1:
              name: Data
          lesson_groups:
            lessonGroup-2:
              display_name: Digital Citizenship
            lessonGroup-3:
              display_name: Sequencing
            lessonGroup-4:
              display_name: Loops
            lessonGroup-5:
              display_name: Impacts of Computing
            lessonGroup-6:
              display_name: Data
          name: nevada-standards-aligned-kindergarten-2023
          title: 'Nevada Standards Aligned: Beta - CSF Course A'
          description_audience: 'Ages: 4-7'
          description_short: An introduction to computer science for pre-readers.
          description: 'Developed specifically for Nevada standards alignment. This course offers a computer science curriculum for beginning readers in kindergarten. Students will learn to program using commands with sequencing and loops. The lessons featured in this course also teach students to meaningfully collaborate with others, investigate different problem-solving techniques, persist in the face of challenging tasks, and learn about internet safety.

            '
          student_description: ''
        nevada-standards-aligned-first-grade-2023:
          lessons:
            lesson-1:
              name: Data
          lesson_groups:
            lessonGroup-2:
              display_name: Digital Citizenship
            lessonGroup-3:
              display_name: Sequencing
            lessonGroup-4:
              display_name: Loops
            lessonGroup-5:
              display_name: Impacts of Computing
            lessonGroup-6:
              display_name: Events
            lessonGroup-7:
              display_name: End of Course Project
            lessonGroup-8:
              display_name: Data
          name: nevada-standards-aligned-first-grade-2023
          title: 'Nevada Standards Aligned: Beta - CSF Course B'
          description_audience: 'Ages: 5-8'
          description_short: An introduction to computer science for pre-readers. Similar to Course A, but with added concept depth.
          description: Developed specifically for Nevada standards alignment.  This course for first graders moves students to learn more sophisticated unplugged activities and work through a greater variety of puzzles. Students will learn the basics of programming, collaboration techniques, investigation, critical thinking skills, persistence in the face of difficulty, and internet safety. At the end of this course, students create games in the Play Lab programming environment.
          student_description: ''
        nevada-standards-aligned-second-grade-2023:
          lessons:
            lesson-1:
              name: Computing Systems
          lesson_groups:
            lessonGroup-2:
              display_name: Digital Citizenship
            lessonGroup-3:
              display_name: Sequencing
            lessonGroup-4:
              display_name: Loops
            lessonGroup-5:
              display_name: Events
            lessonGroup-6:
              display_name: Data
            lessonGroup-7:
              display_name: End of Group Project
            lessonGroup-8:
              display_name: Computing Systems
          name: nevada-standards-aligned-second-grade-2023
          title: 'Nevada Standards Aligned: Beta - CSF Course C'
          description_audience: ''
          description_short: " Learn the basics of computer science and create your own art, stories, and games."
          description: Developed specifically for Nevada standards alignment.  In this course, second-grade students will create programs with sequencing, loops, and events. They will investigate problem-solving techniques and develop strategies for building positive communities both online and offline. By the end of the course, students will create interactive games that they can share.
          student_description: ''
        nevada-standards-aligned-third-grade-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Digital Citizenship
            lessonGroup-3:
              display_name: Sequencing
            lessonGroup-4:
              display_name: Impacts of Computing
            lessonGroup-5:
              display_name: Events and Variables
            lessonGroup-6:
              display_name: Loops
            lessonGroup-7:
              display_name: Data
            lessonGroup-8:
              display_name: End of Course Project
          name: nevada-standards-aligned-third-grade-2023
          title: 'Nevada Standards Aligned: Beta - CSF Course D'
          description_audience: 'Ages: 7-11'
          description_short: Learn about conditional statements. Create your own art, games, and even a dance party.
          description: Developed specifically for Nevada standards alignment.  In this course, students in third grade will increase their knowledge of some concepts found in earlier courses, including loops and events. Afterward, students will develop their understanding of algorithms, nested loops, and more.
          student_description: ''
        nevada-standards-aligned-fourth-grade-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Events and Sprites
            lessonGroup-3:
              display_name: Nested Loops
            lessonGroup-4:
              display_name: Functions
            lessonGroup-5:
              display_name: Data and Simulations
            lessonGroup-6:
              display_name: End of Course Project
          name: nevada-standards-aligned-fourth-grade-2023
          title: 'Nevada Standards Aligned: Beta - CSF Course E'
          description_audience: 'Ages: 8-12'
          description_short: Learn the basics of sprites, nested loops, and functions.
          description: Developed specifically for Nevada standards alignment.  Fourth graders begin this course with an introduction to the Sprite Lab programming tool. Following these lessons, students will engage in more complex coding. Students will learn about nested loops and functions. By the end of the course, students will combine these concepts to solve challenging puzzles. The course ends with an open-ended project where students create a game or drawing.
          student_description: ''
        nevada-standards-aligned-fifth-grade-2023-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Sprites
          name: nevada-standards-aligned-fifth-grade-2023-2023
          title: Nevada Standards Aligned Fifth Grade Course
          description_audience: 'Ages: 9-13'
          description_short: Learn all the concepts in Computer Science Fundamentals and create your own art, story or game.
          description: We created Course F for students in the fifth grade. The course begins by looking at how users make choices in the apps they use. Students then learn to make a variety of Sprite Lab apps that also offer choices for the user. In the later lessons in the course, students will learn about variables in a variety of contexts. Students are given greater autonomy and more choices throughout this course. By the end of the course, students will have created interactive projects to share with their friends and family.
          student_description: Learn to code with sprites and variables, and discuss societal impacts of computing and the internet. By the end of this course, design and create a project you can share with friends and family.
        nevada-standards-aligned-fifth-grade-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Sprites
            lessonGroup-3:
              display_name: Conditionals
            lessonGroup-4:
              display_name: Data and Simulations
            lessonGroup-5:
              display_name: Variables
            lessonGroup-6:
              display_name: Impacts of Computing
            lessonGroup-7:
              display_name: End of Course Project
          name: nevada-standards-aligned-fifth-grade-2023
          title: 'Nevada Standards Aligned: Beta - CSF Course F'
          description_audience: 'Ages: 9-13'
          description_short: Learn all the concepts in Computer Science Fundamentals and create your own art, story or game.
          description: Fifth graders begin this course by learning to make a variety of Sprite Lab apps that also offer choices for the user. In the later lessons in the course, students will learn about conditionals and variables in a variety of contexts. Students are given greater autonomy and more choices throughout this course. By the end of the course, students will have created interactive projects to share with their friends and family.
          student_description: ''
        vpl-csp-2023-m1:
          lessons: {}
          lesson_groups: {}
          name: vpl-csp-2023-m1
          title: Module 1
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csp-2023-m2:
          lessons: {}
          lesson_groups: {}
          name: vpl-csp-2023-m2
          title: Module 2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csp-2023-m3:
          lessons: {}
          lesson_groups: {}
          name: vpl-csp-2023-m3
          title: Module 3
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csp-2023-m4:
          lessons: {}
          lesson_groups: {}
          name: vpl-csp-2023-m4
          title: Module 4
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csp-2023-m5:
          lessons: {}
          lesson_groups: {}
          name: vpl-csp-2023-m5
          title: Module 5
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csp-2023-m6:
          lessons: {}
          lesson_groups: {}
          name: vpl-csp-2023-m6
          title: Module 6
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csp-2023-m7:
          lessons: {}
          lesson_groups: {}
          name: vpl-csp-2023-m7
          title: Module 7
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csp-2023-m8:
          lessons: {}
          lesson_groups: {}
          name: vpl-csp-2023-m8
          title: Module 8
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csa-2023-m1:
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2023-m1
          title: Module 1
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        how-ai-works-2023:
          lessons: {}
          lesson_groups: {}
          name: how-ai-works-2023
          title: How AI Works
          description_audience: ''
          description_short: ''
          description: |-
            These lessons supplement the [How AI Works](https://www.youtube.com/playlist?list=PLzdnOPI1iJNeehd1RXhnVMBFi1WhWLx_Y) video series. Each lesson is paired with a single video from the series, diving-deeper into the concepts introduced in the videos. Lessons focus on creating an exciting first experience for students, where students engage in an activity or simulation and then reflect on the experience as a way to build understanding around AI and build empathy with those impacted by it. Some lessons focus more on the technology behind AI, while other lessons focus on the societal impacts and ethical considerations of AI.

            **Supports for Teachers:** You can learn more about bringing AI lessons to your classroom through our [AI 101 for Teachers series](https://code.org/ai/pl/101). AI 101 for Teachers is a free, foundational online professional learning series for any teacher and educator interested in the groundbreaking world of artificial intelligence (AI) and its transformative potential in education.

            **Implementation Options:** Click one of the options below to expand and view more details.

            ::: details [<span style="font-size: 1em; font-weight: bold;">"I want to teach them all!"</span>]
            Lessons 1-7 can be taught as a 7-day sequence, where each day focuses on an individual video from the video series and dives deeper into the concepts introduced. Classrooms that go this direction should hide Lesson 8, which does not fit in this sequence. [Click here to learn more about hiding lesson](https://support.code.org/hc/en-us/articles/115001479372-How-can-I-hide-certain-units-or-lessons-from-my-students-)
            :::

            ::: details [<span style="font-size: 1em; font-weight: bold;">"I want to teach a specific lesson or integrate into another class"</span>]
            Each lesson can stand on its own and be taught independently from the others. This is especially useful if you would like to integrate a lesson into another subject or an existing computer science, artificial intelligence, or general education class. Classrooms that go this direction should hide all lessons except the one you want to teach. [Click here to learn more about hiding lesson](https://support.code.org/hc/en-us/articles/115001479372-How-can-I-hide-certain-units-or-lessons-from-my-students-)
            :::
            ::: details [<span style="font-size: 1em; font-weight: bold;">"I Only Have a Day"</span>]
            Lesson 8 is designed for classrooms that want to introduce AI to students, but only have a day to do so. This lesson provides a notetaker for students as the class watches the entire video sequence. Classrooms that go this direction should hide all lessons except for Lesson 8. [Click here to learn more about hiding lesson](https://support.code.org/hc/en-us/articles/115001479372-How-can-I-hide-certain-units-or-lessons-from-my-students-)
            :::
            <br />
            <br />
          student_description: |-
            Learn how AI works by participating in different experiences and watching the [How AI Works](https://www.youtube.com/playlist?list=PLzdnOPI1iJNeehd1RXhnVMBFi1WhWLx_Y) video series!

            **Looking to teach these lessons?** [Click here to view the lesson plans for these lessons](/s/how-ai-works-2023?viewAs=Instructor)
        vpl-csa-2023-m2:
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2023-m2
          title: Module 2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csa-2023-m3:
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2023-m3
          title: Module 3
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csa-2023-m4:
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2023-m4
          title: Module 4
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csa-2023-m5:
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2023-m5
          title: Module 5
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csa-2023-m6:
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2023-m6
          title: Module 6
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csa-2023-m7:
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2023-m7
          title: Module 7
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csa-2023-m8:
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2023-m8
          title: Module 8
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        pl-csd-2023-m1:
          lessons: {}
          lesson_groups: {}
          name: pl-csd-2023-m1
          title: 'Module 1 '
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd-2023-m1:
          lessons:
            lesson-2:
              name: CSD Module 1 Synchronous
            lesson-3:
              name: 'Synchronous Session 2: Model Lesson'
            lesson-4:
              name: 'Synchronous Session 3: Wrap Up'
          lesson_groups: {}
          name: vpl-csd-2023-m1
          title: Module 1
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd-2023-m2:
          lessons:
            lesson-2:
              name: CSD Module 2 Synchronous
            lesson-3:
              name: 'Synchronous Session 5: Review of the Curriculum Investigation'
            lesson-4:
              name: 'Synchronous Session 6: Assessment'
            lesson-5:
              name: 'Synchronous Session 7: Inclusion Scenarios'
            lesson-6:
              name: 'Synchronous Session 8: Wrap Up'
          lesson_groups: {}
          name: vpl-csd-2023-m2
          title: Module 2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd-2023-m3:
          lessons:
            lesson-2:
              name: CSD Module 3 Synchronous
            lesson-3:
              name: 'Synchronous Session 2: Model Lesson'
            lesson-4:
              name: 'Synchronous Session 3: Model Lesson Reflection'
            lesson-5:
              name: 'Synchronous Session 4: Equity and Data'
            lesson-6:
              name: 'Synchronous Session 5: Wrap Up'
          lesson_groups: {}
          name: vpl-csd-2023-m3
          title: Module 3
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd-2023-m4:
          lessons:
            lesson-2:
              name: CSD Module 4 Synchronous
            lesson-4:
              name: 'Synchronous Session 3: Model Lesson Reflection'
            lesson-5:
              name: 'Synchronous Session 4: Curriculum Investigation'
            lesson-6:
              name: 'Synchronous Session 5: Wrap Up'
          lesson_groups: {}
          name: vpl-csd-2023-m4
          title: Module 4
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd-2023-m5:
          lessons:
            lesson-2:
              name: CSD Module 5 Synchronous
            lesson-3:
              name: 'Synchronous Session 2: Apps and Tools'
            lesson-4:
              name: 'Synchronous Session 3: Lesson Investigation'
            lesson-5:
              name: 'Synchronous Session 4: Lesson Reflection'
            lesson-6:
              name: 'Synchronous Session 5: Wrap Up'
            lesson-7:
              name: 'Synchronous Session 3B: Lesson Investigation (micro:bit)'
          lesson_groups: {}
          name: vpl-csd-2023-m5
          title: Module 5
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd-2023-m6:
          lessons:
            lesson-2:
              name: CSD Module 6 Synchronous
            lesson-3:
              name: 'Synchronous Session 2: Conclusions and Connections'
            lesson-4:
              name: 'Synchronous Session 3: Differentiation'
            lesson-5:
              name: 'Synchronous Session 4: Supporting Equity'
            lesson-6:
              name: 'Synchronous Session 5: Wrap Up'
          lesson_groups: {}
          name: vpl-csd-2023-m6
          title: Module 6
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd-2023-m7:
          lessons:
            lesson-2:
              name: CSD Module 7 Synchronous
            lesson-3:
              name: 'Synchronous Session 2: U7L7 Modal Lesson'
            lesson-4:
              name: 'Synchronous Session 3: Lesson Reflection'
            lesson-5:
              name: 'Synchronous Session 4: Lesson Investigation'
            lesson-6:
              name: 'Synchronous Session 5: Wrap Up'
          lesson_groups: {}
          name: vpl-csd-2023-m7
          title: Module 7
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        vpl-csd-2023-m8:
          lessons:
            lesson-2:
              name: CSD Module 8 Synchronous
            lesson-3:
              name: 'Synchronous Session 2: Conclusions and Connections'
            lesson-4:
              name: 'Synchronous Session 3: Equity Journey'
            lesson-5:
              name: 'Synchronous Session 4: Wrap Up'
          lesson_groups: {}
          name: vpl-csd-2023-m8
          title: Module 8
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        ai-ethics-2023:
          lessons:
            lesson-1:
              name: Our AI Code of Ethics
            lesson-2:
              name: Societal Impact of Generative AI
          lesson_groups: {}
          name: ai-ethics-2023
          title: AI Ethics
          description_audience: ''
          description_short: ''
          description: These lessons introduce students to ethical considerations around artificial intelligence. Students research different topics and current events surrounding AI technologies, then are asked to reflect and take a stance on how they feel these technologies should be used in society.
          student_description: |-
            Learn about how artificial intelligence is impacting society, both the intentional solutions that can be beneficial to society and the unintended consequences that may be harmful to society.

            **Are you a teacher looking to teach these lesson?** [Click here to view this page with lesson plans available](https://studio.code.org/s/ai-ethics-2023?viewAs=Instructor).
        draft-hoc-dp:
          lessons: {}
          lesson_groups: {}
          name: draft-hoc-dp
          title: Dance Party (Pilot)
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        genai-temp:
          lessons:
            lesson-1:
              name: Temp Lesson for Ali
          lesson_groups: {}
          name: genai-temp
          title: Introduction to Generative AI
          description_audience: ''
          description_short: ''
          description: |2-
             This 7th-10th grade Generative AI unit introduces students to fundamental aspects of **text-based** generative AI and empowers them to be creators with AI, not just consumers. This unit covers:

            - **How Generative AI Works:** A fundamental introduction to the technology used to create generative AI tools, such as chatbots and text-based large language models.
            - **Designing with Generative AI:** Learn how to use generative AI as a tool to solve real-world problems or as an aide in personal creativity.
            - **Creating with Generative AI:** Learn how to create programs that interact with and leverage generative AI as a core piece of the program
            - **Societal Impact & Ethical Considerations:** Learn how generative AI is impacting society and some of the concerns that current AI researchers are wrestling with
          student_description: ''
        virtual-pl-csa-summer-2024:
          lessons: {}
          lesson_groups: {}
        virtual-pl-csp-summer-day1-2024:
          lessons: {}
          lesson_groups: {}
          name: virtual-pl-csp-summer-day1-2024
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csa-summer-2024-day1:
          lessons: {}
          lesson_groups: {}
          name: virtual-pl-csa-summer-2024-day1
          title: Day 1
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csp-summer-day2:
          lessons:
            lesson-1:
              name: 'TLO #1: U1L7 - Black and White Images'
            lesson-2:
              name: 'TLO #2: U1L9 - Lossless Compression'
            lesson-3:
              name: 'TLO #3: U1L10 - Lossy Compression'
            lesson-4:
              name: The Teacher's Role in Formative Assessment
            lesson-5:
              name: Introduction
            lesson-6:
              name: Welcome to the Course and Exam Description
            lesson-7:
              name: CED Scavenger Hunt Debrief
            lesson-8:
              name: Previously on… Unit 1 Lesson 8
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csp-summer-day2
          title: Day 2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csp-summer-day3:
          lessons:
            lesson-1:
              name: Understanding Ourselves and Our Position
            lesson-2:
              name: Asynchronous Part 1
            lesson-3:
              name: 'TLO #5: U2L3 - The Need for Addressing'
            lesson-4:
              name: Applying Our Knowledge of Identity and Bias
            lesson-5:
              name: 'TLO #6: U2L4 - Routers and Redundancy'
            lesson-6:
              name: Introduction to Module 3
            lesson-7:
              name: Unconscious Bias Debrief
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csp-summer-day3
          title: Day 3
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csp-summer-day4:
          lessons:
            lesson-1:
              name: 'TLO #7: U3L2 - Introduction to Design Mode'
            lesson-2:
              name: U3L3 — Developing Your Project Idea
            lesson-3:
              name: 'TLO #8: U3L5 - Intro to Programming'
            lesson-4:
              name: Applying Our Knowledge Debrief
            lesson-5:
              name: Recruiting and Retaining Students in CS Principles
            lesson-6:
              name: 'Lesson Exploration: U3L7 - Designing an App Part 2'
            lesson-7:
              name: Introduction to Module 4
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csp-summer-day4
          title: Day 4
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csp-summer-day5:
          lessons:
            lesson-1:
              name: Recruiting Students Recap
            lesson-2:
              name: Mapping our Equity Journey
            lesson-3:
              name: Connecting Values and Assessment in CSP
            lesson-4:
              name: Creating Your Assessment Approach for Units 1-3
            lesson-5:
              name: Planning Your Year
            lesson-6:
              name: Closing Ceremonies
            lesson-7:
              name: Introduction to Module 5
            lesson-8:
              name: AP Scavenger Hunt Debrief
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
          name: virtual-pl-csp-summer-day5
          title: Day 5
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csa-summer-day2:
          lessons:
            lesson-1:
              name: Async Debrief
            lesson-2:
              name: Asynchronous Part 1
            lesson-3:
              name: 'Model Lesson 4: U1L16 - SpiralPainter FRQ'
            lesson-4:
              name: Asynchronous Part 2
            lesson-5:
              name: 'Lesson Exploration: U1L8 - Inheritance'
            lesson-6:
              name: 'High-level Overview: Writing Methods'
            lesson-7:
              name: Identity as a Software Engineer
            lesson-8:
              name: 'Model Lesson 3: U1L10 - Programming Style and Feedback'
            lesson-9:
              name: Async Debrief
            lesson-10:
              name: Transition to Asyncronous
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csa-summer-day2
          title: Day 2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csa-summer-day3:
          lessons:
            lesson-1:
              name: Introduction
            lesson-2:
              name: Asynchronous Part 1
            lesson-3:
              name: Asynchronous Debrief
            lesson-4:
              name: Asynchronous Part 2
            lesson-5:
              name: Asynchronous Debrief
            lesson-6:
              name: 'Model Lesson 5: U2L1'
            lesson-7:
              name: 'Model Lesson 6: U2L2'
            lesson-8:
              name: 'Looking at Student Work '
            lesson-9:
              name: Introduction to Assessments
            lesson-10:
              name: Transisition to Asynchronous
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csa-summer-day3
          title: Day 3
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csa-summer-day4:
          lessons:
            lesson-1:
              name: Asynchronous Debrief
            lesson-2:
              name: Asynchronous Part 1
            lesson-3:
              name: Asynchronous Debrief
            lesson-4:
              name: Asynchronous Part 2
            lesson-5:
              name: Workshop Opener
            lesson-6:
              name: Lesson Investigation Jigsaw
            lesson-7:
              name: 'Model Lesson 7: U2L9 Mutator Methods '
            lesson-8:
              name: 'High-Level Overview: Structure of a Class'
            lesson-9:
              name: Practice with the Unit 2 Project
            lesson-10:
              name: Transition to Asynchronous
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csa-summer-day4
          title: Day 4
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csa-summer-day5:
          lessons:
            lesson-1:
              name: Workshop Opener
            lesson-2:
              name: Asynchronous Part 1
            lesson-3:
              name: Asyncronous Debrief
            lesson-4:
              name: Asynchronous Part 2
            lesson-6:
              name: Asynchronous Debrief
            lesson-5:
              name: Introduction to Unit 3
            lesson-7:
              name: Practice Using Arrays
            lesson-8:
              name: Completing the Audit and AP Central
            lesson-9:
              name: High-level Overview of the Year
            lesson-10:
              name: Transition to Asynchronous
            lesson-11:
              name: 'High-level Overview: Enhanced For Loops'
            lesson-12:
              name: 'Lead Learner: Planning Your Role in the Classroom'
            lesson-13:
              name: Closing Ceremonies
            lesson-14:
              name: 'High-level Overview: Enhanced For Loops'
            lesson-15:
              name: 'Lead Learner: Planning Your Role in the Classroom'
            lesson-16:
              name: Closing Ceremonies
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asychronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csa-summer-day5
          title: 'Day 5 '
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csa-summer-day1:
          lessons:
            lesson-1:
              name: Async Debrief
            lesson-2:
              name: Asynchronous Part 1
            lesson-3:
              name: 'Model Lesson 2: Methods and Parameters'
            lesson-4:
              name: Asynchronous Part 2
            lesson-7:
              name: Introduction
            lesson-5:
              name: Access and Diversity in CSA
            lesson-6:
              name: 'High-level Overview: Starting Unit 1'
            lesson-8:
              name: Workshop Opener
            lesson-9:
              name: 'Model Lesson 1: Instantiating Objects '
            lesson-10:
              name: Intro to Async
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
            lessonGroup-7:
              display_name: Introduction
          name: virtual-pl-csa-summer-day1
          title: Day 1
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        virtual-pl-csp-summer-day1:
          lessons:
            lesson-5:
              name: Introduction to Asynchronous Activities
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Synchronous Part 2
            lessonGroup-4:
              display_name: Asynchronous Part 1
            lessonGroup-5:
              display_name: Asynchronous Part 2
          name: virtual-pl-csp-summer-day1
          title: Day 1
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa-postap-se-and-computer-vision-2023:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: GitHub and Copilot'
            lessonGroup-3:
              display_name: 'Chapter 2: Computer Vision'
            lessonGroup-5:
              display_name: Post-Survey
          title: Software Engineering & Computer Vision
          description: This two-chapter post-AP CSA module offers high school students hands-on experience with professional software development tools, including GitHub and GitHub Copilot, and imparts them with the real-world skills to develop a computer vision program. Students will gain practical knowledge, learn industry-standard practices, and cultivate critical thinking through discussions and problem-solving centered around AI tools and models. These lessons aim not only to bolster their understanding of AI and its applications but also foster creativity and collaboration, equipping students with the set of skills and the beginning of a software development portfolio they can take with them beyond high school.
          student_description: This two-part module lets you explore pro-level tools like GitHub and GitHub Copilot and teaches you how to create your own computer vision program. You'll be solving real-world AI problems and tinkering with cutting-edge models, learning industry-standard practices along the way. This isn't just about understanding AI better - it's about sparking your creativity, improving your teamwork skills, and starting to build your own software development portfolio.
          description_short: ''
          description_audience: ''
          lessons: {}
          name: csa-postap-se-and-computer-vision-2023
        draft-hoc-dp-2:
          lessons:
            lesson-1:
              name: Hour of Code (Draft 2)
            lesson-2:
              name: hour of code lesson plan template
          lesson_groups: {}
          name: draft-hoc-dp-2
          title: Dance Party (October Pilot Drafts)
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-problem-solving-and-computing-1-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-problem-solving-and-computing-1-2023
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-problem-solving-and-computing-2-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-problem-solving-and-computing-2-2023
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        draft-hoc-dp-2-a:
          lessons: {}
          lesson_groups: {}
          name: draft-hoc-dp-2-a
          title: 'Dance Party (October Pilot - Version A) '
          description_audience: ''
          description_short: All songs
          description: All songs
          student_description: ''
        draft-hoc-dp-2-:
          lessons: {}
          lesson_groups: {}
          name: draft-hoc-dp-2-
          title: 'Dance Party (October Pilot - Version A) '
          description_audience: ''
          description_short: Scoped Songs
          description: Scoped Songs
          student_description: ''
        draft-hoc-dp-2-b:
          lessons: {}
          lesson_groups: {}
          name: draft-hoc-dp-2-b
          title: 'Dance Party (October Pilot - Version B) '
          description_audience: ''
          description_short: ''
          description: Scoped Songs
          student_description: ''
        hoc-dp-oct-beta:
          lessons: {}
          lesson_groups: {}
          name: hoc-dp-oct-beta
          title: 'Dance Party (Group A) Beta '
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        hoc-dp-oct-beta-b:
          lessons: {}
          lesson_groups: {}
          name: hoc-dp-oct-beta-b
          title: Dance Party (Group B) Beta
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-csd-unit1-1-2023:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          name: self-paced-pl-csd-unit1-1-2023
          title: Getting Started with Code.org
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
        self-paced-pl-csd-unit1-2-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit1-2-2023
          title: Preparing to Teach Problem Solving and Computing
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Problem Solving and Computing unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Problem Solving and Computing.\n* Learn the key problem solving frameworks utilized in the unit\n* Practice key concepts included in the unit.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 40 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Problem Solving and Computing unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Problem Solving and Computing.\n* Learn the key problem solving frameworks utilized in the unit\n* Practice key concepts included in the unit.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 40 minutes"
        dance-ai-2023:
          lessons:
            lesson-1:
              name: 'Dance Party: A.I. Edition'
          lesson_groups: {}
          name: dance-ai-2023
          title: 'Dance Party: AI Edition'
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-csd-unit2-1-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit2-1-2023
          title: Getting Started with Code.org
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
        self-paced-pl-csd-unit2-2-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit2-2-2023
          title: Preparing to Teach Web Development
          description_audience: ''
          description_short: ''
          description: |-
            This professional learning module is designed to help you prepare to teach Code.org's Web Development unit.

            **In this professional learning module, you will:**

            * Get an introduction to Web Development.
            * Practice key concepts included in the unit.
            * Engage with Web Lab.
            * Explore end-of-chapter projects.

            **Suggested time**: 120 minutes
          student_description: |-
            This professional learning module is designed to help you prepare to teach Code.org's Web Development unit.

            **In this professional learning module, you will:**

            * Get an introduction to Web Development.
            * Practice key concepts included in the unit.
            * Engage with Web Lab.
            * Explore end-of-chapter projects.

            **Suggested time**: 120 minutes
        self-paced-pl-csd-unit3-1-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit3-1-2023
          title: Getting Started with Code.org
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
        self-paced-pl-csd-unit3-2-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit3-2-2023
          title: Preparing to Teach Interactive Animations and Games
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Interactive Animations and Games unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Interactive Animations and Games.\n* Practice key concepts included in the unit.\n* Engage with Game Lab.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 120 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Interactive Animations and Games unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Interactive Animations and Games.\n* Practice key concepts included in the unit.\n* Engage with Game Lab.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 120 minutes"
        self-paced-pl-csd-unit4-1-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit4-1-2023
          title: Getting Started with Code.org
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
        self-paced-pl-csd-unit4-2-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit4-2-2023
          title: Preparing to Teach The Design Process
          description_audience: ''
          description_short: ''
          description: |-
            This professional learning module is designed to help you prepare to teach Code.org's Design Process unit.

            **In this professional learning module, you will:**

            * Get an introduction to The Design Process.
            * Practice key concepts included in the unit.
            * Engage with App Lab.
            * Explore end-of-chapter projects.

            **Suggested time:** 120 minutes
          student_description: |-
            This professional learning module is designed to help you prepare to teach Code.org's Design Process unit.

            **In this professional learning module, you will:**

            * Get an introduction to The Design Process.
            * Practice key concepts included in the unit.
            * Engage with App Lab.
            * Explore end-of-chapter projects.

            **Suggested time:** 120 minutes
        self-paced-pl-csd-unit5-1-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit5-1-2023
          title: Getting Started with Code.org
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
        self-paced-pl-csd-unit5-2-2023:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit5-2-2023
          title: Preparing to Teach Data and Society
          description_audience: ''
          description_short: ''
          description: "This professional learning module is designed to help you prepare to teach Code.org's Data and Society unit. \n\n**In this professional learning module, you will:**\n\n* Get an introduction to Data and Society.\n* Practice key concepts included in the unit.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 70 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Data and Society unit. \n\n**In this professional learning module, you will:**\n\n* Get an introduction to Data and Society.\n* Practice key concepts included in the unit.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 70 minutes"
        ai-tutor-test:
          lessons:
            lesson-1:
              name: AI Tutor Test
          lesson_groups: {}
          name: ai-tutor-test
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        web-dev-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
          title: Unit 2 - Web Development ('23-'24)
          description: |-
            In Web Development, students are empowered to create and share content on their own web pages. They begin by thinking about the role of the web and how it can be used as a medium for creative expression. As students develop their pages and begin to see themselves as programmers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem solving as it relates to programming while they learn valuable skills such as debugging, using resources, and teamwork. At the conclusion of the unit, students will have created a personal website they can publish and share.

            ::: details [**Chapter 1 Overview**]
            **Description:** Students use computing as a form of self expression as they design and develop basic web pages.   Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page. They also explore the privacy and intellectual property implications of publishing their work online.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website as a form of personal expression.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * Why do people create websites?
            * How can text communicate content, structure, and style on a web page?
            * How do I safely and appropriately make use of the content published on the Internet?
            * What strategies can I use when coding to find and fix issues?
            :::

            ::: details [**Chapter 2 Overview**]
            **Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website that solves a problem.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * How can websites be used to address problems in the world?
            * What strategies can teams use to work better together?
            * How do I know what information can be trusted online?
            :::


            ::: details [**Implementation Guidance for Web Development**]
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)
            - You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit
            :::

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went.
          student_description: " In this unit, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
          description_short: " Learn to build your own web site in Web Lab."
          description_audience: ''
        csd1-2024:
          lesson_groups:
            lessonGroup-5:
              display_name: Survey
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: 'Chapter 2: Computers and Problem Solving'
            lessonGroup-4:
              display_name: Alternative Lessons
          title: Unit 1 - Problem Solving and Computing ('24-'25)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter presents computers as machines that solve information problems. Students begin by building a common definition for a computer that focuses on functionality instead of specific hardware. They then explore the ways that computers approach problems. For their final project, students propose an app that could be used to solve a problem of their choosing.\n\n**Goals:**\n* Identify the defined characteristics of a computer and how it is used to solve information problems. \n* Use a structured problem solving process to design solutions that use computing technology. \n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering. \n\n**Big Questions:** \n* How do computers help people to solve problems?\n* How do people and computers approach problems differently?\n* What does a computer need from people in order to solve problems effectively?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
          description_short: Learn how humans work with computers to solve problems.
          description_audience: ''
          lessons: {}
          name: csd1-2024
        csd2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
          title: Unit 2 - Web Development ('24-'25)
          description: "In Web Development, students are put in the shoes of a web developer and empowered to design and create a web page to meet a user’s needs. As students develop the pages and begin to see themselves as web developers and designers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem-solving related to programming while learning valuable skills such as debugging, using resources, and teamwork. At the conclusion of chapter one, students will design and create a web page for a user. After chapter two, students will have worked with a team to create a multi-page website they can publish and share. \n\n::: details [**Chapter 1 Overview**]\n**Description:** Students work as web developers to design and develop web pages to meet users' needs. Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page and CSS to design and organize the content. They also explore the privacy and intellectual property implications of publishing web pages online.\n\n**Goals:**\n* Create digital artifacts that use multiple computer languages to control the structure and style of their content.\n* Create a web page to meet a user's needs.\n* Use different programming languages to solve different problems.\n* Examine their role and responsibilities as creators and consumers of digital media.\n\n**Big Questions:**\n* How do web developers create web pages for users?\n* How can text communicate a web page's content, structure, and style?\n* How do I safely and appropriately create content for the Internet?\n* What strategies can I use when coding to find and fix issues?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.\n\n**Goals:**\n* Create digital artifacts that use multiple computer languages to control the structure and style of their content.\n* Create a website that solves a problem.\n* Use different programming languages to solve different problems.\n* Examine their role and responsibilities as both creators and consumers of digital media.\n\n**Big Questions:**\n* How can websites be used to address problems in the world?\n* What strategies can teams use to work better together?\n* How do I know what information can be trusted online?\n:::\n\n\n::: details [**Implementation Guidance for Web Development**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll step into the shoes of a web developer and learn how to design and create web pages for a user. You’ll learn how to structure and style your user's pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
          description_short: " Learn to build your own web site in Web Lab."
          description_audience: ''
          lessons: {}
          name: csd2-2024
        csd3-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Images and Animations'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Games'
          title: Unit 3 - Interactive Animations and Games ('24-'25)
          description: "In the Interactive Animations and Games unit, students create programmatic images, animations, interactive art, and games. Starting off with simple, primitive shapes and building up to more sophisticated sprite-based games, students become familiar with the programming concepts and the design process computer scientists use daily. They then learn how these simpler constructs can be combined to create more complex programs. In the final project, students develop a personalized, interactive program.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students build up toward programming interactive animations in the Game Lab environment.  They begin with simple shapes and sprite objects, then use loops to create flipbook style animations.  Next, they learn to use booleans and conditionals to respond to user input.  At the end of the chapter, students design and create an interactive animation that they can share with the world.\n\n**Goals:**\n* Create an interactive animation that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* View yourself as a computer programmer, and see programming as a fun and creative form of expression.\n\n\n**Big Questions:**\n* What is a computer program?\n* What are the core features of most programming languages?\n* How does programming enable creativity and individual expression?\n* What practices and strategies will help me as I write programs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter students combine the constructs that they learned in the first chapter to program more complex movement and collisions in their sprites.  As they create more complex programs, they begin to use functions to organize their code.  In the end, students use a design process to create an original game.\n\n**Goals:**\n* Create an interactive game that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* Work with others to break down programming projects using sprites and functions.\n\n**Big Questions:**\n* How do software developers manage complexity and scale?\n* How can programs be organized so that common problems only need to be solved once?\n* How can I build on previous solutions to create even more complex behavior?\n:::\n\n::: details [**Implementation Guidance for Interactive Animations and Games**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          description_short: Learn to program animations, interactive art, and games in Game Lab.
          description_audience: ''
          lessons: {}
          name: csd3-2024
        csd4-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: User Centered Design'
            lessonGroup-3:
              display_name: 'Chapter 2: App Prototyping'
          title: Unit 4 - The Design Process ('24-'25)
          description: "The Design Process unit transitions students from thinking about computer science as a tool to solve their own problems towards considering the broader social impacts of computing. Through a series of design challenges, students are asked to consider and understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which students have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test their solutions with real users to get feedback and drive further iteration.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter introduces the design process as a specific version of the problem solving process in which empathy for a user's needs is consistently integrated. Students learn strategies for identifying user needs and assessing how well different designs address them. In particular they learn how to develop a paper prototype, how to gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps.\n\n**Goals:** \n* See the design process as a form of problem solving that prioritizes the needs of a user. \n* Identify user needs and assess how well different designs address them. \n* Develop paper prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n\n**Big Questions:**\n* How do designers identify the needs of their user?\n* How can we ensure that a user's needs are met by our designs?\n* What processes will best allow us to efficiently create, test, and iterate upon our designs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter is focused on a long running group project that allows students to apply all they've learned about User-Centered Design to develop an app prototype. Working in teams, students identify a social issue that they care about and design and prototype an app to address that issue. This is an opportunity for students to explore other roles in software development, such as product management, marketing, design, and testing.\n\n\n**Goals:**\n* Develop digital prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n* Understand other roles in software development, such as product management, marketing, design, and testing, and how to use what they have learned about computer science as a tool for social impact.\n\n**Big Questions:**\n* How do teams effectively work together to develop software?\n* What roles beyond programming are necessary to design and develop software?\n* How do designers incorporate feedback into multiple iterations of a product?\n:::\n\n::: details [**Implementation Guidance for The Design Process**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          description_short: Learn how to design a program that meets the needs of your users.
          description_audience: ''
          lessons: {}
          name: csd4-2024
        csd5-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Representing Information'
            lessonGroup-3:
              display_name: 'Chapter 2: Solving Data Problems'
          title: Unit 5 - Data and Society ('24-'25)
          description: "The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter focuses on data representation and its role in solving information problems.  Students learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.  For the chapter project, students represent their perfect day in a binary punch card and trade with classmates to decipher.\n\n\n**Goals:**\n* Understand the role of data and data representation in solving information problems. \n* Explain the necessary components of any data representation scheme, as well as the particulars of binary and the common ways that various types of simple and complex data are represented in binary code. \n\n\n**Big Questions:**\n* Why is representation important in problem solving?\n* What features does a representation system need to be useful?\n* What is necessary to create usable binary representation systems?\n* How can we combine systems together to get more complex information?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students explore how data can be used to answer interesting questions and solve problems.  Using a modified version of the general Problem Solving Process, students look at how computers and humans use data differently and the pros and cons of automating problem solving.  After learning ways that computers use data in the real world, students choose their own problem and use data to address it.\n\n\n**Goals:**\n* Investigate and understand how humans and computers use data differently.\n* Design and implement a data-based solution to a given problem and determine how the different aspects of the problem solving process could be automated.\n\n\n\n**Big Questions:**\n* How does data help us to solve problems?\n* How do computers and humans use data differently?\n* What parts of the data problem solving process can be automated?\n* What kinds of problems do computers use data to solve in the real world?\n\n:::\n\n\n::: details [**Implementation Guidance for Data and Society**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          description_short: Learn how people use computers to solve data problems.
          description_audience: ''
          lessons: {}
          name: csd5-2024
        csd6a-2024:
          lesson_groups:
            lessonGroup-4:
              display_name: Introduction to App Lab
            lessonGroup-2:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Physical Prototypes'
          title: Unit 6A - (Option A) Creating Apps with Devices - Circuit Playground ('24-'25)
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [(Option B) Creating Apps with Devices unit](/s/csd6b-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          description_short: Learn to program with physical devices.
          description_audience: ''
          lessons: {}
          name: csd6a-2024
        csd6b-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
          title: Unit 6B - (Option B)  Creating Apps with Devices (micro:bit) ('24-'25)
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/csd6a-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices (micro:bit) Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
          description_short: ''
          description_audience: ''
          lessons: {}
          name: csd6b-2024
        csd7-2024:
          lesson_groups:
            lessonGroup-4:
              display_name: Intro to App Lab
            lessonGroup-2:
              display_name: 'Chapter 1: Understanding Machine Learning'
            lessonGroup-3:
              display_name: 'Chapter 2: Design a Machine Learning App'
          title: Unit 7 - AI and Machine Learning ('24-'25)
          description: "This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students learn the basics of machine learning and use a tool called AI Lab to create machine learning models that can be used in App Lab. The unit starts with an overview of machine learning and how computers can use patterns in data to make decisions and predictions. Then, students learn how to use AI Lab to train models from tabular data while exploring issues of bias. Lessons follow a repeating \"unplugged - AI Lab - App Lab\" pattern so students are continually exposed to the concepts and tools of machine learning. The chapter culminates in a project where students select from a set of real-world datasets to train a machine learning model and create an app.\n\n\n**Goals:**\n* Create a machine learning model in AI Lab to solve a problem, and use App Lab to create an app that uses their model. \n* Understand how machine learning models make decisions from data\n\n\n**Big Questions:**\n- How does machine learning find patterns in data to make decisions?\n- How can we avoid bias when training a machine learning model?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter prepares students to be machine learning scientists to create an app that addresses an issue in their community. Students follow along with a fictional group of students as they define an issue, develop a survey to collect data, analyze their data in AI Lab, create a model card, and create an app to solve their problem. Then, in the final project, students repeat these same steps with an issue they care about in their community.\n\n**Goals:**\n* Create machine learning models in AI Lab  from their own data and use App Lab to create an app that uses their model to solve problems in their community. \n\n\n**Big Questions:**\n- How can machine learning be used to solve problems in our community?\n\n:::\n\n\n::: details [**Implementation Guidance for the AI and Machine Learning Unit**]\n\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-aiml-2023). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop your own machine learning projects around real-world data. The unit culminates with designing your own machine learning app to solve a personally relevant problem.
          description_short: Learn to about Artificial Intelligence and Machine Learning.
          description_audience: ''
          lessons: {}
          name: csd7-2024
        csd-post-survey-2024:
          title: Post-Course Survey
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: csd-post-survey-2024
        melissasandbox-2024-1:
          lessons:
            lesson-1:
              name: 'Part II: Algorithms and Sequencing'
            lesson-2:
              name: 'Intro to Computer Science: Overview'
          lesson_groups: {}
          name: melissasandbox-2024-1
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        coursec-maker-2024:
          lessons:
            lesson-3:
              name: Meet your micro:bit
            lesson-4:
              name: Emotion badge
            lesson-5:
              name: Meet your micro:bit
            lesson-6:
              name: Calming LEDs
            lesson-1:
              name: Meet your micro:bit
            lesson-2:
              name: Counter
            lesson-7:
              name: Cristina - Meet your micro:bit
            lesson-8:
              name: Cristina - Emotion badge with micro:bit
            lesson-10:
              name: Cristina - Calming LEDs with micro:bit
            lesson-9:
              name: Cristina - Counter with micro:bit
          lesson_groups:
            lessonGroup-2:
              display_name: Emotion Badge with micro:bit - Events
            lessonGroup-3:
              display_name: Calming LEDs with micro:bit - Sequencing and Loops
            lessonGroup-4:
              display_name: Counter with micro:bit - Data and Variables
          name: coursec-maker-2024
          title: Course C - Maker with micro:bit
          description_audience: ''
          description_short: Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit.
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nChoose between Beginner, Intermediate, and Stretch pathways. Not sure where to begin? Start at the Beginner pathway and work your way up. Each of the three pathways has two components. First, students will develop their coding knowledge in skill-building lessons from CS Fundamentals. Then, students will go to the micro:bit platform to code their physical computing projects. Check out the micro:bit Course C booklet <a href=\"https://code.org/maker/assets/CSF-Booklet-Course-C-Nov2023.pdf\" target=\"_blank\">here</a>.\n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/k5-maker-pilot-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n"
          student_description: ''
        coursef-maker-2024:
          lessons:
            lesson-3:
              name: Dance Party 2019 (need to clone)
            lesson-4:
              name: Meet your micro:bit
            lesson-5:
              name: Step counter
            lesson-1:
              name: Meet your micro:bit
            lesson-6:
              name: Micro:bit pet
            lesson-2:
              name: Meet your micro:bit
            lesson-7:
              name: Max-min thermometer
            lesson-8:
              name: Cristina - Step counter with micro:bit
            lesson-9:
              name: Cristina - Micro:bit pet with micro:bit
            lesson-10:
              name: Cristina - Max-min thermometer with micro:bit
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Events and Variables'
            lessonGroup-3:
              display_name: 'Intermediate: Conditionals, Events, and Sounds'
            lessonGroup-4:
              display_name: 'Stretch: Events, Conditionals, and Variables'
          name: coursef-maker-2024
          title: Course F - Maker with micro:bit
          description_audience: ''
          description_short: ''
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nChoose between Beginner, Intermediate, and Stretch pathways. Not sure where to begin? Start at the Beginner pathway and work your way up. Each of the three pathways has two components. First, students will develop their coding knowledge in skill-building lessons from CS Fundamentals. Then, students will go to the micro:bit platform to code their physical computing projects. Check out the micro:bit Course F booklet <a href=\"https://code.org/maker/assets/CSF-Booklet-Course-F-Nov2023.pdf\" target=\"_blank\">here</a>.\n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/k5-maker-pilot-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n"
          student_description: ''
        coursee-maker-2024:
          lessons:
            lesson-2:
              name: Dance Party 2019 (need to clone)
            lesson-4:
              name: Meet your micro:bit
            lesson-5:
              name: Sensory toy
            lesson-1:
              name: Meet your micro:bit
            lesson-6:
              name: Simple door alarm
            lesson-3:
              name: Meet your micro:bit
            lesson-7:
              name: Tilt alarm
            lesson-8:
              name: Cristina - Sensory toy with micro:bit
            lesson-9:
              name: Cristina - Simple door alarm with micro:bit
            lesson-10:
              name: Cristina - Tilt alarm with micro:bit
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Events and Designing for Accessibility'
            lessonGroup-3:
              display_name: 'Intermediate: Conditionals '
            lessonGroup-4:
              display_name: 'Stretch: Functions'
          name: coursee-maker-2024
          title: Course E - Maker with micro:bit
          description_audience: ''
          description_short: ''
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nChoose between Beginner, Intermediate, and Stretch pathways. Not sure where to begin? Start at the Beginner pathway and work your way up. Each of the three pathways has two components. First, students will develop their coding knowledge in skill-building lessons from CS Fundamentals. Then, students will go to the micro:bit platform to code their physical computing projects. Check out the micro:bit Course E booklet <a href=\"https://code.org/maker/assets/CSF-Booklet-Course-E-Nov2023.pdf\" target=\"_blank\">here</a>.\n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/k5-maker-pilot-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n"
          student_description: ''
        coursed-maker-2024:
          lessons:
            lesson-3:
              name: Meet your micro:bit
            lesson-4:
              name: Saving sea turtles
            lesson-5:
              name: Meet your micro:bit
            lesson-6:
              name: Rock, paper, scissors
            lesson-1:
              name: Meet your micro:bit
            lesson-2:
              name: Activity picker
            lesson-7:
              name: Cristina - Saving sea turtles with micro:bit
            lesson-8:
              name: Cristina - Rock, paper, scissors with micro:bit
            lesson-9:
              name: Cristina - Activity picker with micro:bit
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Conditionals'
            lessonGroup-3:
              display_name: 'Intermediate: Events and Conditionals '
            lessonGroup-4:
              display_name: 'Stretch: Conditionals and Text Inputs '
          name: coursed-maker-2024
          title: Course D - Maker with micro:bit
          description_audience: ''
          description_short: ''
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nChoose between Beginner, Intermediate, and Stretch pathways. Not sure where to begin? Start at the Beginner pathway and work your way up. Each of the three pathways has two components. First, students will develop their coding knowledge in skill-building lessons from CS Fundamentals. Then, students will go to the micro:bit platform to code their physical computing projects. Check out the micro:bit Course D booklet <a href=\"https://code.org/maker/assets/CSF-Booklet-Course-D-Nov2023.pdf\" target=\"_blank\">here</a>.\n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/k5-maker-pilot-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n"
          student_description: ''
        self-paced-pl-k5-2024:
          lessons:
            lesson-1:
              name: Lesson 1
          lesson_groups: {}
          name: self-paced-pl-k5-2024
          title: 'Part I '
          description_audience: ''
          description_short: ''
          description: |-
            **You will:**

            * Get an introduction to Code.org’s mission.
            * Learn how to navigate the Code.org website and teacher tools.
            * Set up a classroom section.
            * Locate and use course lesson plans and teacher resources.
            * Learn how to access support while teaching Code.org curricula.

            **Suggested time:** 80 minutes
          student_description: |-
            **You will:**

            * Get an introduction to Code.org’s mission.
            * Learn how to navigate the Code.org website and teacher tools.
            * Set up a classroom section.
            * Locate and use course lesson plans and teacher resources.
            * Learn how to access support while teaching Code.org curricula.

            **Suggested time:** 80 minutes
        self-paced-pl-k5-2024-2:
          lessons:
            lesson-1:
              name: Lesson 1
            lesson-2:
              name: Sprites and Set Up
            lesson-3:
              name: Events
            lesson-4:
              name: Behaviors
            lesson-5:
              name: Next Steps
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started
            lessonGroup-3:
              display_name: Creative Computer Science Concepts
            lessonGroup-4:
              display_name: Taking Next Steps
          name: self-paced-pl-k5-2024-2
          title: Creativity with Code
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Identify and explain fundamental CS concepts, including sprites, events and behaviors. \n* Demonstrate the application of event-based programming.\n* Create a program using sprites, events, and behaviors.\n\n**Suggested time:** 60 minutes\n"
          student_description: "**You will:**\n\n* Identify and explain fundamental CS concepts, including Sprites, evenets and behaviors. \n* Demonstrate the application of event-based programming.\n* Create a program using sprites, events, and behaviors.\n\n**Suggested time:** 60 minutes\n\n"
        self-paced-pl-k5-2024-1:
          lessons:
            lesson-1:
              name: Lesson 1
            lesson-2:
              name: 'Algorithms and Sequencing '
            lesson-3:
              name: Loops
            lesson-4:
              name: Conditionals
            lesson-5:
              name: Putting It All Together
            lesson-6:
              name: Next Steps
            lesson-7:
              name: Block-Based Coding
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started
            lessonGroup-3:
              display_name: Foundational Computer Science Concepts
            lessonGroup-4:
              display_name: Taking Next Steps
          name: self-paced-pl-k5-2024-1
          title: Introduction to Computer Science
          description_audience: 'Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science concepts! '
          description_short: ''
          description: |
            **You will:**

            * Identify and explain fundamental K-5 grade coding concepts.
            * Demonstrate the application of algorithms, sequences, loops, and conditionals.
            * Write code to solve puzzles using algorithms, sequences, loops, and conditionals




            **Suggested time:** 60 minutes
          student_description: |
            **You will:**

            * Identify and explain fundamental K-5 grade coding concepts.
            * Demonstrate the application of algorithms, sequences, loops, and conditionals.
            * Write code to solve puzzles using algorithms, sequences, loops, and conditionals




            **Suggested time:** 60 minutes
        music-intro-2024:
          lessons: {}
          lesson_groups: {}
          name: music-intro-2024
          title: Music Intro
          description_audience: ''
          description_short: An introduction to Music Lab.
          description: ''
          student_description: ''
        csp1-2024:
          lesson_groups:
            cspSurvey:
              display_name: Survey
            csp_unit1_2020:
              display_name: 'Unit 1: Digital Information'
          title: Digital Information ('24-'25)
          description: "This unit explores the technical challenges and questions that arise from the need to represent digital information in computers. Learn how complex information like numbers, text, images, and sound are represented in bits, how compression works, and the broader social impacts of digitizing the world's information.\n\n*(Click the arrows below to expand)*\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####Establishing a Strong Classroom Culture\n This unit is designed to be hands-on, collaborative, and exploratory. A major focus of the unit is building a positive classroom culture in which students work together, explore problems, and communicate about their thinking. Most lessons either feature physical manipulatives or a digital widget, and the bulk of lesson time should be spent with students exploring these tools together to develop an understanding of the concepts they highlight. The course intentionally does not start with programming since, in many classrooms, some students have experience with programming and others do not. Choosing to begin with digital information and the internet lets you build community in the room while exploring a topic that is likely to be accessible to all students. The supportive and inclusive classroom environment built in this unit should help set a positive tone that can be carried through the school year.\n\n\n####Empowering \"Deciders\"\n An important goal of the course is not merely to teach students technical knowledge, but to put those skills to work in meaningful ways. This unit builds towards the unit project, which provides an opportunity for students to be \"deciders\" about the impacts of computing on modern life. Other units will emphasize empowering units as \"creators.\"\n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n\n&nbsp\n\nThe unit project asks students to consider and debate issues that arise in modern society due to the digitizing of information. Students will analyze an article that addresses the intersection of digitizing information and current events. They will evaluate what data is being digitized and evaluate the benefits and harms caused by making this information digital. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n\n\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and its associated project help build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* DAT-1: The way a computer represents data internally is different from the way the data is interpreted and displayed for the user. Programs are used to translate data into a representation more easily understood by people.\n* IOC-1: while computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 2.1 Binary Numbers\n* 2.2 Data Compression\n* 5.5 Legal and Ethical Concerns.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the technical challenges and questions that arise from the need to represent digital information in computers. Learn how complex information like numbers, text, images, and sound are represented in text, how compression works, and the broader social impacts of digitizing the world's information.
          description_short: Explore the challenges and impacts of representing information about the world around you in bits.
          description_audience: ''
          lessons: {}
          name: csp1-2024
        csp2-2024:
          lesson_groups:
            csp_unit2_2020:
              display_name: 'Unit 2: The Internet'
          title: The Internet ('24-'25)
          description: "This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n####Inventing the Internet with the Internet Simulator\n \nThis unit features many different versions of the Internet Simulator, a digital widget that simulates how different features or \"layers\" of the Internet work. As students move from lesson to lesson, the version of the Internet Simulator they use will have slightly more functionality than the last. Lessons will present students with challenges that closely mimic those that the internet's original inventors needed to solve. Students will collaboratively design and test solutions to those problems to develop an intuitive understanding of how the internet works and why it was designed that way. By the end of the unit, students will have \"invented the internet\" themselves! \n\n####Continuing to Establish a Strong Classroom Culture\nMuch like the Digital Information unit that comes before it, this unit emphasizes collaborative problem solving and developing a supportive and inclusive classroom culture. \n:::\n\n::: details [**⭐️ Major Assessment and Projects**]\n\n&nbsp\nThe unit project asks students to design a policy position for an imaginary political candidate related to an \"Internet Dilemma.\" Students must analyze news stories about their topic to identify impacted groups, explain those groups' interests, explain technical background about the dilemma, and then recommend a policy solution that the candidate should advocate for. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n:::\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and its associated project help build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CSN-1: that computer systems and networks facilitate how data are transferred\n* IOC-1: and that while computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 4.1 The Internet\n* 4.2 Fault Tolerance\n* 5.2 Digital Divide\n\n\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went."
          student_description: This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.
          description_short: Build the internet from the ground up using the Internet Simulator.
          description_audience: ''
          lessons: {}
          name: csp2-2024
        csp3-2024:
          lesson_groups:
            csp_unit3_2020:
              display_name: 'Unit 3: Intro to App Design'
          title: Intro to App Design ('24-'25)
          description: "This unit is an introduction to programming and app design with a heavy focus on important skills like debugging, pair programming, and user testing. Learn how to design user interfaces and write event-driven programs in App Lab and then design a project that teaches your classmates about a topic of your choosing.\n\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n ####New Topics, Same Classroom Culture\nThis unit is students' first experience with programming. It is designed to maintain the collaborative and inclusive classroom environment developed in the previous two units. The collaborative project, fun, unplugged activities, and the focus on experimenting should help keep your whole class working together and trying out ideas. \n\n####Emphasizing Skills \nSince this is the first of many programming units, it emphasizes attitudes and skills that will serve your students well for the remainder of the year. The project that runs through this unit emphasizes that programming is a creative and collaborative endeavor that students can use to help others. Key practices like pair programming and debugging help normalize working with a partner, asking for help, and making mistakes. While students have a lot to learn about programming and App Lab, there is just as much emphasis on establishing these positive habits and mindsets. \n\n####Empowering \"Creators\"\nThis unit empowers students to be creators with a major emphasis on making personally meaningful apps. Students have a lot to learn about programming. Still, the goal is for students to come away from this unit, seeing programming as a powerful form of personal expression that allows them to draw on their innate talents and interests to help solve problems in their community.\n\n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n\n&nbsp\n\nThe unit project asks students to collaborate with a classmate to design an app that can teach others about a topic of shared interest. Students practice interviewing classmates to identify the project's goals, mockup designs, collaboratively program the app and run simple user tests. The app itself must include at least three screens and demonstrate what students have learned about user interface design and event-driven programming. Students submit their app, project guide, and written responses to reflection questions about how the app is designed and the development process used to make it. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n\n\n\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CRD-1: incorporating multiple perspectives through collaboration improves computing innovations as they are developed.\n* CRD-2: developers create and innovate using an iterative design process that is user-focused, that incorporates implementation/feedback cycles, and that leaves ample room for experimentation and risk-taking.\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that can be reused. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and with more confidence.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 1.1 Collaboration\n* 1.2 Program Function and Purpose\n* 1.3 Program Design and Development\n\nThe College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.\n\n* 3.a.i.\n* 3.a.ii.\n* 3.a.iii\n\n:::\n\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is an introduction to programming and app design with a heavy focus on important skills like debugging, pair programming, and user testing. Learn how to design user interfaces and write event-driven programs in App Lab and then design a project that teaches your classmates about a topic of your choosing.
          description_short: Design your first app and learn how programmers collaborate and interact with users to build the best possible solutions to problems.
          description_audience: ''
          lessons: {}
          name: csp3-2024
        csa1-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Survey
            lessonGroup-3:
              display_name: Content
            lessonGroup-4:
              display_name: Show What You Know
            lessonGroup-6:
              display_name: End of Unit Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-7:
              display_name: Sandboxes
          title: Object-Oriented Programming
          description: "This unit introduces students to object-oriented programming principles as they explore The Neighborhood and discover their identity as a software engineer. Students learn fundamental Java concepts as they navigate and paint in The Neighborhood with `Painter` objects and extend the `Painter` class to expand the capabilities of their programs. Students practice predicting the outcome of program code and developing algorithms using sequencing, selection, and iteration to navigate mazes and paint murals. Students also learn to document program code using comments to describe the behavior of specific code segments and conduct code reviews to receive feedback from their peers.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use inheritance to create subclasses that extend an existing class\n\n* Write methods with and without parameters to perform a specific task\n\n* Implement algorithms sequencing, selection, and iteration\n\n* Write clear and readable code using methods, control structures, and comments\n\n* Improve a program through iterative development based on feedback\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Practice</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n\nThe following practice on AP Classroom can be assigned during the Show What You Know week:\n\n* [**Code.org Unit 1 Practice Questions**](https://apclassroom.collegeboard.org/8/shared-quizzes/7f52bc9012bb41689aa782b0929750e6): This is an introductory quiz to help make sure students have logins and to start practicing with AP multiple-choice questions.\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit introduces you to object-oriented programming principles as you explore The Neighborhood and discover your identity as a software engineer. You learn fundamental Java concepts as you navigate and paint in The Neighborhood with `Painter` objects and extend the `Painter` class to expand the capabilities of your programs. You practice predicting the outcome of program code and developing algorithms using sequencing, selection, and iteration to navigate mazes and paint murals. You also learn to document program code using comments to describe the behavior of specific code segments and conduct code reviews to receive feedback from your peers.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use inheritance to create subclasses that extend an existing class\n\n* Write methods with and without parameters to perform a specific task\n\n* Implement algorithms sequencing, selection, and iteration\n\n* Write clear and readable code using methods, control structures, and comments\n\n* Improve a program through iterative development based on feedback\n    </div>\n</details>"
          description_short: Students learn fundamental Java concepts, discover their identity as software engineers, and use debugging strategies and code reviews to improve their programming skills.
          description_audience: ''
          lessons: {}
          name: csa1-2024
        csa2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Class Structure and Design
          description: "This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as students develop classes with attributes and behaviors and work with primitive and object data. Students learn to write no-argument constructors to assign default values and parameterized constructors to assign specific values to an object's instance variables. They explore how the `this` keyword can be used to reduce ambiguity and redundancies in their program and how the `super` keyword can be used to call a superclass constructor or method. Students also learn how to work with variables and write expressions using arithmetic and compound assignment operators and practice tracing code segments to determine the output. After working with instance variables and constructors, they write accessor and mutator methods to work with the values assigned to an object's instance variables and `toString()` methods to display information about an object to the console. Throughout this unit, students continue to develop software engineering skills as they learn to make design decisions and use inheritance to create class hierarchies.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Represent attributes of an object using instance variables\n\n* Write no-argument and parameterized constructors to set the state of an object\n\n* Use the `super` keyword to refer to the superclass in constructors and methods\n\n* Write expressions using arithmetic operators and compound assignment operators with variables and object data\n\n* Write accessor and mutator methods to obtain and modify object data\n\n* Write `toString()` methods and use escape sequences to display and format information about an object to the console\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Practice</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n\nThe following practice on AP Classroom can be assigned during the Show What You Know week:\n\n* [**Code.org Unit 2 Practice Questions**](https://apclassroom.collegeboard.org/8/shared-quizzes/909f3415385549948c51a4eefe719b64)\n\n* [**Code.org Unit 2 FRQ - AdditionalPattern Class**](https://apclassroom.collegeboard.org/8/shared-quizzes/b655752418db41568dd4a37965cc3771)\n\n* [**Code.org Unit 2 FRQ - Meal and DeluxeMeal Class**](https://apclassroom.collegeboard.org/8/shared-quizzes/8d06ed46d13b47959ae4b7fbc117683c)\n\n* [**Code.org Unit 2 FRQ - Pet Class**](https://apclassroom.collegeboard.org/8/shared-quizzes/16184d6f11da430098b56771193e0047)\n\nAdditionally, the following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 1\n\n* Personal Progress Check 5\n\n* Personal Progress Check 9\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as you develop classes with attributes and behaviors and work with primitive and object data. You learn to work with variables and user input as you develop and utilize classes and objects to represent desserts, customers, and food trucks for the Project Mercury Pastries Food Truck business. As you work with the `Dessert` class, you build on your knowledge of inheritance to design subclasses that represent specific types of desserts. While working with variables, you learn to create and evaluate expressions using assignment and relational operators and trace code segments to determine the result of output. Throughout this unit, you continue to develop software engineering skills as you learn to use UML diagrams to represent classes and the DRY principle to refactor program code.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Represent attributes of an object using instance variables\n\n* Write no-argument and parameterized constructors to set the state of an object\n\n* Use the `super` keyword to refer to the superclass in constructors and methods\n\n* Write expressions using arithmetic operators and compound assignment operators with variables and object data\n\n* Write accessor and mutator methods to obtain and modify object data\n\n* Write `toString()` methods and use escape sequences to display and format information about an object to the console\n    </div>\n</details>"
          description_short: Students develop an understanding of data encapsulation and object-oriented design decisions.
          description_audience: ''
          lessons: {}
          name: csa2-2024
        csa3-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Arrays and Algorithms
          description: "This unit introduces students to data structures to store primitive values and object references. Students use one-dimensional (1D) arrays to store multiple related values while expanding their knowledge of loops and conditionals to analyze and process data in a 1D array. Students learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, students develop and modify algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. While developing algorithms, students identify preconditions and postconditions and implement solutions to ensure that these conditions are satisfied. Students continue to develop software engineering skills as they learn to make design decisions and use 1D arrays to store and analyze data.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Declare and initialize one-dimensional (1D) arrays to store primitive values and objects using the `new` keyword and initializer lists\n\n* Traverse the elements in one-dimensional (1D) arrays using `for` loops, `while` loops, and enhanced `for` loops\n\n* Write algorithms to find and modify elements in one-dimensional (1D) arrays\n\n* Implement solutions to satisfy the preconditions and postconditions of an algorithm\n\n* Debug common errors that occur when traversing one-dimensional (1D) arrays\n\n* Use polymorphism to create and traverse one-dimensional (1D) arrays of a superclass type\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Practice</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n\nThe following practice on AP Classroom can be assigned during the Show What You Know week:\n\n* [**Code.org Unit 3 Practice Questions**](https://apclassroom.collegeboard.org/8/shared-quizzes/9d2248e553144177813c71acc422ed8a)\n\n* [**Code.org Unit 3 FRQ - Controlled Vocab**](https://apclassroom.collegeboard.org/8/shared-quizzes/c64ff60ab8ab4e189996e5cfbd78bec0)\n\n* [**Code.org Unit 3 FRQ FRQ - divBySum**](https://apclassroom.collegeboard.org/8/shared-quizzes/2ee3d035678a4a308ce38d834c6ff8d7)\n\nAdditionally, the following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 4\n\n* Personal Progress Check 6\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit introduces you to data structures to store primitive values and object references. You use one-dimensional (1D) arrays to store multiple related values while expanding your knowledge of loops and conditionals to analyze and process data in a 1D array. You learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, you develop and modify algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. While developing algorithms, you identify preconditions and postconditions and implement solutions to ensure that these conditions are satisfied. You continue to develop software engineering skills as you learn to make design decisions and use 1D arrays to store and analyze data.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Declare and initialize one-dimensional (1D) arrays to store primitive values and objects using the `new` keyword and initializer lists\n\n* Traverse the elements in one-dimensional (1D) arrays using `for` loops, `while` loops, and enhanced `for` loops\n\n* Write algorithms to find and modify elements in one-dimensional (1D) arrays\n\n* Implement solutions to satisfy the preconditions and postconditions of an algorithm\n\n* Debug common errors that occur when traversing one-dimensional (1D) arrays\n\n* Use polymorphism to create and traverse one-dimensional (1D) arrays of a superclass type\n    </div>\n</details>"
          description_short: Students use one-dimensional (1D) arrays to store lists of primitive values and object references.
          description_audience: ''
          lessons: {}
          name: csa3-2024
        csa4-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Conditions and Logic
          description: "This unit expands on the use of APIs, object-oriented programming concepts, and conditional statements to develop visuals and animations using The Theater. Students learn about the functionality of the `static` keyword and explore the methods in the `Math` class to perform calculations and incorporate randomness in program decisions and behaviors. While working with conditional statements and Boolean expressions, students realize the difference between using the `==` operator and the `equals()` method to compare objects for equality and discover the need for overriding the `equals()` method in their own classes. They deepen their understanding of conditional statements and logical operators as they learn to write nested conditional statements, use the AND ( `&&` ) and OR ( `||` ) operators, and write multi-selection statements to test multiple conditions. Using their knowledge of Boolean expressions and logical operators, they practice evaluating truth tables to compare two expressions for equivalence and applying De Morgan's Laws to simplify expressions.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use the `static` keyword to to create static variables and methods in a class\n\n* Call `Math` class methods and constants to perform calculations and generate random numbers\n\n* Use casting operators to assign a value of one type to another\n\n* Explain the difference between `==` and `equals()`\n\n* Write nested `if` statements to test a combination of conditions\n\n* Construct a conditional statement involving logical operators\n\n* Evaluate compound Boolean expressions for equivalence\n\n* Write multi-selection statements to test multiple conditions\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Practice</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n\nThe following practice on AP Classroom can be assigned during the Show What You Know week:\n\n* [**Code.org Unit 4 Practice Questions**](https://apclassroom.collegeboard.org/8/shared-quizzes/df29ae7fb915459084f518cfa3a206ff)\n\n* [**Code.org Unit 4 FRQ - AdditionalPattern Class**](https://apclassroom.collegeboard.org/8/shared-quizzes/25b154bed1be4dd18da1a7dd1bad48ae)\n\n* [**Code.org Unit 4 FRQ - Customer**](https://apclassroom.collegeboard.org/8/shared-quizzes/10d1bfa49e0349a9ba9cddd3577add24)\n\n* [**Code.org Unit 4 FRQ - printNums**](https://apclassroom.collegeboard.org/8/shared-quizzes/2510b049f93e47399c3a42ed86cc9919)\n\n* [**Code.org Unit 4 FRQ - Relationship**](https://apclassroom.collegeboard.org/8/shared-quizzes/4f5792544eac4699a2f0090bbae09efb)\n\n* [**Code.org Unit 4 FRQ - SpinnerGame**](https://apclassroom.collegeboard.org/8/shared-quizzes/03513b309a8e47acb01ec8b35ba62341)\n\nAdditionally, the following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 3\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>"
          student_description: "This unit expands on the use of APIs, object-oriented programming concepts, and conditional statements to develop visuals and animations using The Theater. You learn about the functionality of the `static` keyword and explore the methods in the `Math` class to perform calculations and incorporate randomness in program decisions and behaviors. While working with conditional statements and Boolean expressions, you realize the difference between using the `==` operator and the `equals()` method to compare objects for equality and discover the need for overriding the `equals()` method in their own classes. You deepen your understanding of conditional statements and logical operators as they learn to write nested conditional statements, use the AND ( `&&` ) and OR ( `||` ) operators, and write multi-selection statements to test multiple conditions. Using your knowledge of Boolean expressions and logical operators, you practice evaluating truth tables to compare two expressions for equivalence and applying De Morgan's Laws to simplify expressions.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use the `static` keyword to to create static variables and methods in a class\n\n* Call `Math` class methods and constants to perform calculations and generate random numbers\n\n* Use casting operators to assign a value of one type to another\n\n* Explain the difference between `==` and `equals()`\n\n* Write nested `if` statements to test a combination of conditions\n\n* Construct a conditional statement involving logical operators\n\n* Evaluate compound Boolean expressions for equivalence\n\n* Write multi-selection statements to test multiple conditions\n    </div>\n</details>"
          description_short: Students improve decision-making in their programs using relational and logical operators to evaluate primitive values and object references and use the Math class to perform calculations and generate random numbers.
          description_audience: ''
          lessons: {}
          name: csa4-2024
        csa5-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Two-Dimensional Arrays
          description: "This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. Students identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As students analyze problems involving 2D arrays, they revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. Students apply these concepts to manipulate pixels and in The Theater to create image filters in addition to working with primitive values and various object references. Additionally, students use the programming knowledge and skills they have acquired to consider the impacts of programs on society, economies, and culture.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Declare and initialize a two-dimensional (2D) array using the `new` keyword and an initializer list\n\n* Access and modify elements in a two-dimensional (2D) array using row and column indexes\n\n* Write nested loops to traverse a two-dimensional (2D) array in row-major and column-major order\n\n* Write nested enhanced `for` loops to traverse a two-dimensional (2D) array\n\n* Apply standard 1D array algorithms to a 2D array\n\n* Discuss the beneficial and harmful impacts of programs\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Practice</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n\nThe following practice on AP Classroom can be assigned during the Show What You Know week:\n\n* [**Code.org Unit 5 Practice Questions**](https://apclassroom.collegeboard.org/8/shared-quizzes/44685dde93b94157bf08f35ed0cc8c9e)\n\n* [**Code.org Unit 5 FRQ - ItemGrid**](https://apclassroom.collegeboard.org/8/shared-quizzes/1b129ea08bfe4e1e89178a544521ca1d)\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 8\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. You identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As you analyze problems involving 2D arrays, you revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. You apply these concepts to manipulate pixels using The Theater to create image filters in addition to working with primitive values and various object references. Additionally, you use the programming knowledge and skills you have acquired to consider the impacts of programs on society, economies, and culture.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Declare and initialize a two-dimensional (2D) array using the `new` keyword and an initializer list\n\n* Access and modify elements in a two-dimensional (2D) array using row and column indexes\n\n* Write nested loops to traverse a two-dimensional (2D) array in row-major and column-major order\n\n* Write nested enhanced `for` loops to traverse a two-dimensional (2D) array\n\n* Apply standard 1D array algorithms to a 2D array\n\n* Discuss the beneficial and harmful impacts of programs\n    </div>\n</details>"
          description_short: Students use two-dimensional (2D) arrays to expand storage and organization capabilities in their programs.
          description_audience: ''
          lessons: {}
          name: csa5-2024
        csa6-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: ArrayLists and String Methods
          description: "This unit continues to expand on data structures to introduce students to creating lists using the `ArrayList` class. In the process, students learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. Students differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. Students apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, students learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, students further develop software engineering skills by writing Javadoc comments to create API documentation for their programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use the `Integer` and `Double` class to represent primitive values as objects\n\n* Describe the structure and functionality of an `ArrayList`\n\n* Use methods in the `ArrayList` class to obtain the size of an `ArrayList`, add elements, retrieve elements, set values, and remove elements\n\n* Apply standard algorithms used with one-dimensional (1D) arrays to an `ArrayList`\n\n* Use methods in the `String` class to retrieve substrings and perform comparisons\n\n* Write standard algorithms to traverse a `String` object\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Practice</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n\nThe following practice on AP Classroom can be assigned during the Show What You Know week:\n\n* [**Code.org Unit 6 Practice Questions**](https://apclassroom.collegeboard.org/8/shared-quizzes/1b51ca0ca12141888cf36086cdf0fd8a)\n\n* [**Code.org Unit 6 FRQ - Palindrome**](https://apclassroom.collegeboard.org/8/shared-quizzes/8fa50bd025774510aa6686c3680729c0)\n\n* [**Code.org Unit 6 FRQ - RepairSchedule**](https://apclassroom.collegeboard.org/8/shared-quizzes/349cf5adc40d40abafd1986840399e5b)\n\n* [**Code.org Unit 6 FRQ - Thing**](https://apclassroom.collegeboard.org/8/shared-quizzes/2bf69cdff5dc4a49a11fac5f1ffa27c3)\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 2\n* Personal Progress Check 7\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit continues to expand on data structures to introduce you to creating lists using the `ArrayList` class. In the process, you learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. You differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. You apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, you learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, you further develop software engineering skills by writing Javadoc comments to create API documentation for your programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use the `Integer` and `Double` class to represent primitive values as objects\n\n* Describe the structure and functionality of an `ArrayList`\n\n* Use methods in the `ArrayList` class to obtain the size of an `ArrayList`, add elements, retrieve elements, set values, and remove elements\n\n* Apply standard algorithms used with one-dimensional (1D) arrays to an `ArrayList`\n\n* Use methods in the `String` class to retrieve substrings and perform comparisons\n\n* Write standard algorithms to traverse a `String` object\n    </div>\n</details>"
          description_short: Students use ArrayLists to store program data and work with methods in the String class to manipulate and evaluate String objects.
          description_audience: ''
          lessons: {}
          name: csa6-2024
        csa7-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: End of Unit Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Method Decomposition and Recursion
          description: "This unit allows students to practice software design and development using the skills they have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. Students use decomposition strategies and object-oriented principles to plan and implement their ideas while ensuring their projects meet specified requirements. In the process, students learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, students practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, students consider the need for maximizing system reliability as they explore bugs and issues in existing programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Differentiate between passing primitive values and object references as parameters\n\n* Write and call overloaded, `private`, and overridden methods\n\n* Explain the legal issues and intellectual property concerns of programs that create AI-generated images\n\n* Trace a recursive method to determine its result\n\n* Identify strategies to maximize system reliability\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Practice</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n\nThe following practice on AP Classroom can be assigned during the Show What You Know week:\n\n* [**Code.org Unit 7 FRQ - Combinatorics using Recursion**](https://apclassroom.collegeboard.org/8/shared-quizzes/468edd0cc85f4b7694f44682d3022606)\n\n* [**Code.org Unit 7 FRQ - Pet Class**](https://apclassroom.collegeboard.org/8/shared-quizzes/c7fc97731e9d40c19ddc2059891ca008)\n\n* [**Code.org Unit 7 FRQ - Relationship**](https://apclassroom.collegeboard.org/8/shared-quizzes/a1751e4a82b9427b95badbe09bdda0a1)\n\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit allows you to practice software design and development using the skills you have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. You use decomposition strategies and object-oriented principles to plan and implement your ideas while ensuring your project meet specified requirements. In the process, you learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, you practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, you consider the need for maximizing system reliability as you explore bugs and issues in existing programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Differentiate between passing primitive values and object references as parameters\n\n* Write and call overloaded, `private`, and overridden methods\n\n* Explain the legal issues and intellectual property concerns of programs that create AI-generated images\n\n* Trace a recursive method to determine its result\n\n* Identify strategies to maximize system reliability\n    </div>\n</details>"
          description_short: Students practice software design and development using the skills and programming constructs they have learned and explore recursion.
          description_audience: ''
          lessons: {}
          name: csa7-2024
        csa8-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Searching and Sorting
          description: "This unit expands on algorithms students have learned to introduce common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, students analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, students apply their programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, students consider the privacy and security of programs and users.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Explain the functionality of standard searching and sorting algorithms\n\n* Analyze the efficiency of searching and sorting algorithms using execution counts\n\n* Implement algorithms involving multiple 1D or 2D arrays or `ArrayList`s\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Practice</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n\nThe following practice on AP Classroom can be assigned during the Show What You Know week:\n\n* [**Code.org Unit 8 Practice Questions**](https://apclassroom.collegeboard.org/8/shared-quizzes/e8a9b53f79df4221b9fee4add4080009)\n\nAdditionally, the following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 10\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=8) to let the Code.org curriculum team know how the unit went."
          student_description: "In this unit, you expand on the algorithms you have learned to explore common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, you analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, you apply your programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, you consider the privacy and security of programs and users.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Explain the functionality of standard searching and sorting algorithms\n\n* Analyze the efficiency of searching and sorting algorithms using execution counts\n\n* Implement algorithms involving multiple 1D or 2D arrays or `ArrayList`s\n    </div>\n</details>"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: csa8-2024
        csa9-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Review and Practice
            lessonGroup-3:
              display_name: Mock Exams
            lessonGroup-4:
              display_name: Sandboxes
          title: AP Exam Review and Practice
          description: This unit prepares students for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. Students identify strengths and areas of improvement to create individualized study plans to focus their practice and self-assess their progress.
          student_description: This unit prepares you for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. You identify strengths and areas of improvement to create individualized study plans to focus you practice and self-assess your progress.
          description_short: Students prepare for the AP CSA Exam by practicing strategies for the multiple-choice and free response questions.
          description_audience: ''
          lessons: {}
          name: csa9-2024
        csa-postap-se-and-computer-vision-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: GitHub and Copilot'
            lessonGroup-3:
              display_name: 'Chapter 2: Computer Vision'
            lessonGroup-5:
              display_name: Post-Survey
          title: Software Engineering & Computer Vision
          description: This two-chapter post-AP CSA module offers high school students hands-on experience with professional software development tools, including GitHub and GitHub Copilot, and imparts them with the real-world skills to develop a computer vision program. Students will gain practical knowledge, learn industry-standard practices, and cultivate critical thinking through discussions and problem-solving centered around AI tools and models. These lessons aim not only to bolster their understanding of AI and its applications but also foster creativity and collaboration, equipping students with the set of skills and the beginning of a software development portfolio they can take with them beyond high school.
          student_description: This two-part module lets you explore pro-level tools like GitHub and GitHub Copilot and teaches you how to create your own computer vision program. You'll be solving real-world AI problems and tinkering with cutting-edge models, learning industry-standard practices along the way. This isn't just about understanding AI better - it's about sparking your creativity, improving your teamwork skills, and starting to build your own software development portfolio.
          description_short: ''
          description_audience: ''
          lessons: {}
          name: csa-postap-se-and-computer-vision-2024
        csp4-2024:
          lesson_groups:
            csp_variables:
              display_name: Variables
            csp_conditionals:
              display_name: Conditionals
            csp_functions:
              display_name: Functions
            csp_project:
              display_name: Project
            lessonGroup-5:
              display_name: Alternate Lessons
          title: Variables, Conditionals, and Functions ('24-'25)
          description: "This unit explores how variables, conditionals, and functions allow for the design of increasingly complex apps. Learn how to program with these three new concepts through a sequence of collaborative activities. Then build your own decision maker app to share with friends and help them make a decision.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n#### Intro to EIPM\n\nThis unit is students' first experience with the Explore, Investigate, Practice, Make lesson sequence, or EIPM. This structured approach to teaching programming is covered in detail in the curriculum guide. We highly recommend watching the [accompanying video series](https://www.youtube.com/playlist?list=PLzdnOPI1iJNeqEl6MN7c2KyM3gdBSo8t3) to better understand what EIPM should look like in the classroom. When used effectively, it supports deep learning of content and helps maintain a collaborative classroom culture, even as you move into more complex programming concepts.\n\n####Scaffolding Towards Independent Projects \n\nA major goal of this course is to empower students to design and build projects independently. The Create PT in Unit 8 offers students enormous freedom to scope and build projects, and even this unit begins scaffolding towards that goal. Individual EIPM sequences of lessons gradually prepare students for scoped, independent Make projects. The unit project has a few requirements, but students are largely free to choose the design, topic, and implementation of their ideas. As you teach the unit, look for the opportunities to scaffold the skills and knowledge students will need to creatively and independently tackle the unit project.\n\n\n\n\n:::\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n\n&nbsp\n\nThe unit project asks students to design an app that makes a recommendation based on information from user input. Students are given a great deal of freedom to choose their topic, design their user interface, and decide how to actually program their app's behavior. Students submit their app, project guide, and written responses to reflection questions about how the app is designed and the development process they used to make it. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n\n\n:::\n\n\n::: details [**✅ AP Connections**]\n\n\n&nbsp\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CRD-2: Developers create and innovate using an iterative design process that is user-focused, that incorporates implementation/feedback cycles, and that leaves ample room for experimentation and risk-taking.\n* AAP-1: To find specific solutions to generalizable problems, programmers represent and organize data in multiple ways.\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that can be reused. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and with more confidence.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 1.4 Identifying and Correcting Errors\n* 3.1 Variables and Assignment\n* 3.3 Mathematical Expressions\n* 3.5 Boolean Expressions\n* 3.6 Conditionals\n* 3.7 Nested Conditionals\n* 3.15 Random Values\n\nThe College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.\n\n* 3.a.i.\n* 3.a.ii.\n* 3.a.iii\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores how variables, conditionals, and functions allow for the design of increasingly complex apps. Learn how to program with these three new concepts through a sequence of collaborative activities. Then build your own decision maker app to share with friends and help them make a decision.
          description_short: Learn how to build apps that store information, make decisions, and keep code organized.
          description_audience: ''
          lessons:
            lesson-2:
              name: Conditonals New Practice
          name: csp4-2024
        csp5-2024:
          lesson_groups:
            csp_lists:
              display_name: Data
            lessonGroup-5:
              display_name: Post-Course Survey
          title: Data ('24-'25)
          description: "In this unit learn how data analysis helps turn raw data into useful information about the world. Learn how to use data visualization to find patterns inside of data sets and learn how this data analysis process is being used in contexts like open data or machine learning to help make decisions or learn more about our world. In the unit project, you'll analyze a dataset of your choosing and present your findings. \n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####The Data Analysis Process\nThis unit is built around a data analysis process that helps students break down how data is turned into new information about the world. Some lessons are designed around different steps of this process, like cleaning data or building visualizations. Other lessons focus on ways this process is applied in real-world contexts like citizen science or machine learning. The data analysis process helps provide a consistent reference point as students explore the importance of data analysis in computing. \n\n####Exploring Data with the Data Visualizer\nThe Data Visualizer is a tool built into App Lab that allows students to quickly create visualizations of the data they've added to their projects. The set of possible visualizations is intentionally limited to a few ways to change or modify the chart. This tool aims to encourage exploring the different kinds of questions that can be answered with data visualizations, with a greater emphasis on students' ability to create a variety of visualizations quickly. This exploration should also help students build more meaningful and powerful apps in future units when they start using these datasets in their programs.\n:::\n\n::: details [**⭐️ Major Assessment and Projects**]\n&nbsp\n\nStudents use the data visualizer to find and present a data story. Using what they've learned about the data analysis process, students either choose a dataset inside the data library or upload one of their own and create visualizations that find interesting patterns that may reveal new insights and knowledge. Students complete an activity guide describing their findings and the process they used in identifying them. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n:::\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs please see the \"Standards\" page for this unit.\n\n* DAT-2: Programs can be used to process data, which allows users to discover information and create new knowledge.\n* IOC-1: While computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences.\n\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 2.3 Extracting Information from Data\n* 2.4 Using Programs with Data\n* 5.3 Computing Bias\n* 5.4 Crowdsourcing\n\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: 'In this unit learn how data analysis helps turn raw data into useful information about the world. Learn how to use data visualization to find patterns inside of data sets and learn how this data analysis process is being used in contexts like open data or machine learning to help make decisions or learn more about our world. In the unit project, you''ll analyze a dataset of your choosing and present your findings. '
          description_short: Explore and visualize datasets from a wide variety of topics as you hunt for patterns and try to learn more about the world around you.
          description_audience: ''
          lessons: {}
          name: csp5-2024
        csp6-2024:
          lesson_groups:
            csp_unit6_2020:
              display_name: Lists
            lessonGroup-3:
              display_name: Loops
            lessonGroup-4:
              display_name: Traversals
            lessonGroup-5:
              display_name: Project
            lessonGroup-2:
              display_name: Post-Course Survey
            lessonGroup-6:
              display_name: Alternate Lessons
          title: Lists, Loops, and Traversals ('24-'25)
          description: "This unit introduces lists, loops, and traversals, and explores the way they can be used to build apps that store and process large amounts of information. Learn to program with the data library in App Lab and complete a 5-day hackathon project at the end of the unit where you can design a program about any topic of your choosing.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####Independent Creation and The Hackathon Project\nMuch like the project in Unit 4, the \"Hackathon\" project in this unit is designed as an opportunity for students to creatively and independently build something with their programming skills. While students are asked to include some technical requirements in their program to ensure they demonstrate mastery of new programming concepts, they have free rein to choose the goals, design, and implementation of their project. To avoid asking students to complete a major programming project right before the Create PT, this hackathon is the most \"Create-PT-like\" project of the course. It is the best chance for students to practice skills like budgeting time or scoping an open-ended project. In many classrooms, if you maintain the recommended pacing of the course, this project serves as an excellent end to the first semester.\n\n####Growing Comfort with EIPM\nBy this unit, students (and teachers!) should be developing greater comfort with the flow of EIPM lessons. Students may begin to anticipate that sequences build towards an independent Make lesson or look forward to stepping away from computers to Explore. A nice feature of EIPM is that you will find strategies and modifications to each lesson type that work best for your students. Keep an eye out for how you and your students are developing comfort with EIPM and note strategies that help meet your classroom's needs.\n\n####Programming with Real-world Data\nThe Data Library is a feature in App Lab designed to let students program with data from the real world. This tool aims to motivate students to build new kinds of data-powered apps that they find personally interesting. This tool also facilitates programming with lists of information since students will need to manipulate lists of data to incorporate the different data sources. Encourage students to use datasets they find personally relevant as they draw on their creative ideas for bringing data to life.\n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\nThe unit project asks students to spend five days as part of a \"Hackathon\" project that they have nearly complete independence to scope and design. Students must choose one dataset from the Data Library in AppLab to be a component of their project to demonstrate what they have learned about lists and list processing; otherwise, scoping the project is completely up to them. Students submit their app, project guide, and written responses to reflection questions about how the app is designed and the development process they used to make it. Students will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CRD-2: Developers create and innovate using an iterative design process that is user-focused, incorporating implementation/feedback cycles, which leaves ample room for experimentation and risk-taking.\n* AAP-1: To find specific solutions to generalizable problems, programmers represent and organize data in multiple ways.\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that they can reuse. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and more confidently.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 3.2 Data Abstraction\n* 3.4 Strings\n* 3.8 Iteration\n* 3.10 Lists\n* 3.16 Simulations\n\nThe College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.\n\n* 3.b.i\n* 3.b.ii\n* 3.b.iii\n* 3.b.iv\n* 3.b.v\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went.\n\n"
          student_description: 'This unit introduces lists, loops, and traversals, and explores the way they can be used to build apps that store and process large amounts of information. Learn to program with the data library in App Lab and complete a 5-day hackathon project at the end of the unit where you can design a program about any topic of your choosing.

            '
          description_short: Learn how to build apps that use lists, loops, and traversals to store and process large amounts of information.
          description_audience: ''
          lessons: {}
          name: csp6-2024
        csp7-2024:
          lesson_groups:
            csp_parameters_return_values:
              display_name: Parameters and Return Values
            csp_libraries:
              display_name: Libraries
            lessonGroup-3:
              display_name: Post-Course Survey
          title: Parameters, Return, and Libraries ('24-'25)
          description: "This unit introduces parameters, return, and libraries. Learn how to use these concepts to build new kinds of apps as well as libraries of code that you can share with your classmates. End the unit by designing a library of functions around any topic of your choosing.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####Learning by Building Libraries\nIn the second EIPM sequence of this unit, students learn to use the Student-Create Libraries tool in App Lab. This tool allows them to build and share libraries of functions that they can use in many different projects. This tool serves many purposes besides simply teaching students about libraries. By having to write functions that other students find useful, they will need to think about common patterns or situations that they have seen in projects across the course. Students will also practice commenting their code so others can understand how it works, practice designing functions that use parameters and return.  \n\n####Final Preparation for the Create PT\nStudents learn very few new concepts in this unit; nevertheless, it can be challenging because students need to learn how to integrate the ideas of parameters and return with every other concept they have learned in this course. This unit presents a good opportunity to do a final review of every programming construct covered in the course as students prepare to demonstrate what they've learned on the Create PT.\n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n&nbsp\n\nThe unit project asks students to design a library of functions that they can share with classmates. Their library must contain at least two functions, and at least one of those functions must include a parameter, return, a loop, and an if-statement. This requirement ensures students practice skills they will use in the Create PT. Using a project guide, students choose a theme for their library, build it, test it, and exchange feedback with other students. Students submit their library code, project guide, and written responses to reflection questions about how the app is designed and the development process they used to make it. They will also complete an end-of-unit assessment aligned with CS Principles framework objectives covered in this unit.\n\n\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* CRD-2: Developers create and innovate using an iterative design process that is user-focused, that incorporates implementation/feedback cycles, and that leaves ample room for experimentation and risk-taking.\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-3: Programmers break down problems into smaller and more manageable pieces. By creating procedures and leveraging parameters, programmers generalize processes that can be reused. Procedures allow programmers to draw upon existing code that has already been tested, allowing them to write programs more quickly and with more confidence.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 3.12 Calling Procedures\n* 3.13 Developing Procedures\n* 3.14 Libraries\n\nThe College Board has supplied formative Create PT questions to help prepare students to complete the Create Task. We recommend that students complete the following prompts with the unit project. More information can be found in Code.org CS Principles Topic Coverage.\n\n* 3.c.i\n* 3.c.ii\n* 3.c.iii\n* 3.c.iv\n* 3.d.i\n* 3.d.ii\n* 3.d.iii\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went.\n"
          student_description: This unit introduces parameters, return, and libraries. Learn how to use these concepts to build new kinds of apps as well as libraries of code that you can share with your classmates. End the unit by designing a library of functions around any topic of your choosing.
          description_short: Learn how to design clean and reusable code that you can share with a single classmate or the entire world.
          description_audience: ''
          lessons: {}
          name: csp7-2024
        csp8-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Unit 8: Cybersecurity and Global Impacts'
            lessonGroup-3:
              display_name: Post-Course Survey
          title: Cybersecurity and Global Impacts ('24-'25)
          description: "In this unit learn how computing innovations have impacted our world in beneficial and harmful ways. Learn how data can pose a threat to our privacy and security and the ways that encryption and other techniques are used to protect it. Throughout the unit participate in a \"school of the future\" conference in which you and a team make a proposal for how best to improve school life with computing innovations.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####Learning Through Full-class Simulation\nThe simulation project that runs through this unit serves several important goals. It helps contextualize what students are learning by moving from abstract ideas of privacy or security to concrete potential innovations. Since the simulation is based on modernizing schools, students can consider the consequences of computing innovations in a familiar setting. By taking on an assigned role and interacting with a group of teammates who have done the same, students must consider a breadth of interests and goals beyond their own when it comes to innovating in schools. \n\n####Ending the Year as \"Deciders\"\nA major theme students engage with throughout this unit is the need to consider both sides of technological innovation. Computing technology has led to both benefits and harms to culture, economy, and society at large. Responding to important questions facing our world requires understanding technology and an ability to identify and interpret the impacts it causes. This unit is not designed to advocate for any particular point of view on the impact of technology. Still, it should empower students to adeptly see and weigh the consequences of the technology around them. While the Create PT may feel like the most significant project of this course, the Explore Curricular requirement and the questions faced in this unit are arguably more crucial. Many of the young people who take CS Principles may pursue studies or careers in which they are \"creators\" with technology, but all of them will need to be thoughtful \"deciders\" in a world profoundly shaped by computing. \n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n&nbsp\n\nStudents complete the Future School Convention simulation throughout this unit. Working in teams of roughly five people, students are assigned a role and a set of interests they'll need to investigate. They research real-world innovations that could improve schools and align with the interests of their character. Throughout the unit, they are given opportunities to refine their proposals as a team and debate the benefits and risks of different computing innovations. Eventually, their team submits an overall proposal for the Future School, and all students vote for the team and innovation they believe to be the best. Students will also complete an end-of-unit assessment aligned with the CS Principles framework objectives covered in this unit.\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\nThis unit and unit project helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs please see the \"Standards\" page for this unit.\n\n* IOC-1: While computing innovations are typically designed to achieve a specific purpose, they may have unintended consequences.\n* IOC-2: The use of computing innovations may involve risks to your personal safety and identity.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 5.1 Beneficial and Harmful Effects\n* 5.6 Safe Computing\n\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=8) to let the Code.org curriculum team know how the unit went.\n"
          student_description: In this unit learn how computing innovations have impacted our world in beneficial and harmful ways. Learn how data can pose a threat to our privacy and security and the ways that encryption and other techniques are used to protect it. Throughout the unit participate in a "school of the future" conference in which you and a team make a proposal for how best to improve school life with computing innovations.
          description_short: 'Research and debate current events at the intersection of data, public policy, law, ethics, and societal impact. '
          description_audience: ''
          lessons: {}
          name: csp8-2024
        csp9-2024:
          lesson_groups:
            csp_unit9_2020:
              display_name: 'Unit 9: Create PT'
            lessonGroup-3:
              display_name: Mock Exam
            lessonGroup-2:
              display_name: Post-Course Survey
          title: Create PT Prep ('24-'25)
          description: In this unit prepare for, and do the AP Create Performance Task. Each lesson contains links to helpful documents and activities to help you understand the task and develop a plan for completing it.
          student_description: In this unit prepare for, and do the AP Create Performance Task. Each lesson contains links to helpful documents and activities to help you understand the task and develop a plan for completing it.
          description_short: Practice and complete the Create Performance Task (PT).
          description_audience: ''
          lessons: {}
          name: csp9-2024
        csp10-2024:
          lesson_groups:
            csp_unit10_2020:
              display_name: 'Unit 10: Algorithms'
            lessonGroup-2:
              display_name: Post-Course Survey
          title: Algorithms ('24-'25)
          description: "This unit is a quick exploration of how computer scientists design algorithms to solve problems and how they analyze the speed of different algorithms. Learn about the concept of algorithmic efficiency through a variety of hands-on activities and learn how it's being applied in modern computing.\n\n::: details [**\U0001F9D0 Unit Philosophy and Pedagogy**]\n\n####Just Enough Math\nThis unit includes some mathematical concepts which enrich students' understanding of how algorithms are analyzed, which might at first be a little intimidating to some students (and teachers!). The mathematical topics included in this unit are only those necessary to provide a solid foundation in algorithmic analysis to the depth described in the CS Principles framework. If you are a teacher with a strong mathematical background, check carefully that you do not needlessly add complexity to a unit that might already prove challenging for some students. All teachers should keep an eye out for the ways visuals, hands-on examples, and patterns in presentation style are used to ensure a consistent presentation of these mathematical topics.\n:::\n\n\n\n::: details [**⭐️ Major Assessment and Projects**]\n&nbsp\n\nThis unit does not conclude with a major project. Students will complete an end-of-unit assessment that is aligned with CS Principles framework objectives covered in this unit.\n:::\n\n\n::: details [**✅ AP Connections**]\n&nbsp\n\nThis unit helps build towards the enduring understandings listed below. For a detailed mapping of units to Learning Objectives and EKs, please see the \"Standards\" page for this unit.\n\n* AAP-2: The way statements are sequenced and combined in a program determines the computed result. Programs incorporate iteration and selection constructs to represent repetition and make decisions to handle varied input values.\n* AAP-4: There exist problems that computers cannot solve, and even when a computer can solve a problem, it may not be able to do so in a reasonable amount of time.\n* CSN-2: Parallel and distributed computing leverage multiple computers to more quickly solve complex problems or process large data sets.\n\nThis unit includes content from the following topics from the AP CS Principles Framework. For more detailed information on topic coverage in the course review [Code.org CSP Topic Coverage](https://docs.google.com/document/d/1l9VDL92DCIbTNhTiLGIr-enBOTM4wEDTTQOBlJ7bBhM/edit?usp=sharing).\n\n* 3.9 Developing Algorithms\n* 3.11 Binary Search\n* 3.17 Algorithmic Efficiency\n* 3.18 Undecidable Problems\n* 4.3 Parallel and Distributed Computing\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csp_unit_survey?survey_data%5Bunit_number%5D=10) to let the Code.org curriculum team know how the unit went.\n\n"
          student_description: 'This unit is a quick exploration of how computer scientists design algorithms to solve problems and how they analyze the speed of different algorithms. Learn about the concept of algorithmic efficiency through a variety of hands-on activities and learn how it''s being applied in modern computing.

            '
          description_short: Design and analyze algorithms to understand how they work and why some are considered better than others.
          description_audience: ''
          lessons: {}
          name: csp10-2024
        csp-post-survey-2024:
          title: CS Principles Post-Course Survey
          description: This unit contains the CS Principles Post-Course Survey.
          student_description: This unit contains a survey about the CS Principles Course. Your teacher will tell you when it's time to take this survey.
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: csp-post-survey-2024
        csa1-2025:
          lesson_groups:
            lessonGroup-2:
              display_name: Survey
            lessonGroup-3:
              display_name: Content
            lessonGroup-4:
              display_name: Show What You Know
            lessonGroup-6:
              display_name: End of Unit Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-7:
              display_name: Sandboxes
          title: Object-Oriented Programming
          description: "This unit introduces students to object-oriented programming principles as they explore The Neighborhood and discover their identity as a software engineer. Students learn fundamental Java concepts as they navigate and paint in The Neighborhood with `Painter` objects and extend the `Painter` class to expand the capabilities of their programs. Students practice predicting the outcome of program code and developing algorithms using sequencing, selection, and iteration to navigate mazes and paint murals. Students also learn to document program code using comments to describe the behavior of specific code segments and conduct code reviews to receive feedback from their peers.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use inheritance to create subclasses that extend an existing class\n\n* Write methods with and without parameters to perform a specific task\n\n* Implement algorithms sequencing, selection, and iteration\n\n* Write clear and readable code using methods, control structures, and comments\n\n* Improve a program through iterative development based on feedback\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit introduces you to object-oriented programming principles as you explore The Neighborhood and discover your identity as a software engineer. You learn fundamental Java concepts as you navigate and paint in The Neighborhood with `Painter` objects and extend the `Painter` class to expand the capabilities of your programs. You practice predicting the outcome of program code and developing algorithms using sequencing, selection, and iteration to navigate mazes and paint murals. You also learn to document program code using comments to describe the behavior of specific code segments and conduct code reviews to receive feedback from your peers.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use inheritance to create subclasses that extend an existing class\n\n* Write methods with and without parameters to perform a specific task\n\n* Implement algorithms sequencing, selection, and iteration\n\n* Write clear and readable code using methods, control structures, and comments\n\n* Improve a program through iterative development based on feedback\n    </div>\n</details>"
          description_short: Students learn fundamental Java concepts, discover their identity as software engineers, and use debugging strategies and code reviews to improve their programming skills.
          description_audience: ''
          lessons:
            lesson-2:
              name: Programming and Feedback
            lesson-3:
              name: Calling Class Methods
            lesson-4:
              name: Casting and Range of Variables
            lesson-5:
              name: Programming Style and Feedback
          name: csa1-2025
        csa2-2025:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Class Structure and Design
          description: "This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as students develop classes with attributes and behaviors and work with primitive and object data. Students learn to write no-argument constructors to assign default values and parameterized constructors to assign specific values to an object's instance variables. They explore how the `this` keyword can be used to reduce ambiguity and redundancies in their program and how the `super` keyword can be used to call a superclass constructor or method. Students also learn how to work with variables and write expressions using arithmetic and compound assignment operators and practice tracing code segments to determine the output. After working with instance variables and constructors, they write accessor and mutator methods to work with the values assigned to an object's instance variables and `toString()` methods to display information about an object to the console. Throughout this unit, students continue to develop software engineering skills as they learn to make design decisions and use inheritance to create class hierarchies.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Represent attributes of an object using instance variables\n\n* Write no-argument and parameterized constructors to set the state of an object\n\n* Use the `super` keyword to refer to the superclass in constructors and methods\n\n* Write expressions using arithmetic operators and compound assignment operators with variables and object data\n\n* Write accessor and mutator methods to obtain and modify object data\n\n* Write `toString()` methods and use escape sequences to display and format information about an object to the console\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 1\n\n* Personal Progress Check 5\n\n* Personal Progress Check 9\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went. "
          student_description: "This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as you develop classes with attributes and behaviors and work with primitive and object data. You learn to work with variables and user input as you develop and utilize classes and objects to represent desserts, customers, and food trucks for the Project Mercury Pastries Food Truck business. As you work with the `Dessert` class, you build on your knowledge of inheritance to design subclasses that represent specific types of desserts. While working with variables, you learn to create and evaluate expressions using assignment and relational operators and trace code segments to determine the result of output. Throughout this unit, you continue to develop software engineering skills as you learn to use UML diagrams to represent classes and the DRY principle to refactor program code.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Represent attributes of an object using instance variables\n\n* Write no-argument and parameterized constructors to set the state of an object\n\n* Use the `super` keyword to refer to the superclass in constructors and methods\n\n* Write expressions using arithmetic operators and compound assignment operators with variables and object data\n\n* Write accessor and mutator methods to obtain and modify object data\n\n* Write `toString()` methods and use escape sequences to display and format information about an object to the console\n    </div>\n</details>"
          description_short: Students develop an understanding of data encapsulation and object-oriented design decisions.
          description_audience: ''
          lessons:
            lesson-2:
              name: Implementing String Algorithms
            lesson-3:
              name: Nested Iteration
          name: csa2-2025
        csa3-2025:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Arrays and Algorithms
          description: "This unit introduces students to data structures to store primitive values and object references. Students use one-dimensional (1D) arrays to store multiple related values while expanding their knowledge of loops and conditionals to analyze and process data in a 1D array. Students learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, students develop and modify algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. While developing algorithms, students identify preconditions and postconditions and implement solutions to ensure that these conditions are satisfied. Students continue to develop software engineering skills as they learn to make design decisions and use 1D arrays to store and analyze data.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Declare and initialize one-dimensional (1D) arrays to store primitive values and objects using the `new` keyword and initializer lists\n\n* Traverse the elements in one-dimensional (1D) arrays using `for` loops, `while` loops, and enhanced `for` loops\n\n* Write algorithms to find and modify elements in one-dimensional (1D) arrays\n\n* Implement solutions to satisfy the preconditions and postconditions of an algorithm\n\n* Debug common errors that occur when traversing one-dimensional (1D) arrays\n\n* Use polymorphism to create and traverse one-dimensional (1D) arrays of a superclass type\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 4\n\n* Personal Progress Check 6\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit introduces you to data structures to store primitive values and object references. You use one-dimensional (1D) arrays to store multiple related values while expanding your knowledge of loops and conditionals to analyze and process data in a 1D array. You learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, you develop and modify algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. While developing algorithms, you identify preconditions and postconditions and implement solutions to ensure that these conditions are satisfied. You continue to develop software engineering skills as you learn to make design decisions and use 1D arrays to store and analyze data.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Declare and initialize one-dimensional (1D) arrays to store primitive values and objects using the `new` keyword and initializer lists\n\n* Traverse the elements in one-dimensional (1D) arrays using `for` loops, `while` loops, and enhanced `for` loops\n\n* Write algorithms to find and modify elements in one-dimensional (1D) arrays\n\n* Implement solutions to satisfy the preconditions and postconditions of an algorithm\n\n* Debug common errors that occur when traversing one-dimensional (1D) arrays\n\n* Use polymorphism to create and traverse one-dimensional (1D) arrays of a superclass type\n    </div>\n</details>"
          description_short: Students use one-dimensional (1D) arrays to store lists of primitive values and object references.
          description_audience: ''
          lessons: {}
          name: csa3-2025
        csa4-2025:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Conditions and Logic
          description: "This unit expands on the use of APIs, object-oriented programming concepts, and conditional statements to develop visuals and animations using The Theater. Students learn about the functionality of the `static` keyword and explore the methods in the `Math` class to perform calculations and incorporate randomness in program decisions and behaviors. While working with conditional statements and Boolean expressions, students realize the difference between using the `==` operator and the `equals()` method to compare objects for equality and discover the need for overriding the `equals()` method in their own classes. They deepen their understanding of conditional statements and logical operators as they learn to write nested conditional statements, use the AND ( `&&` ) and OR ( `||` ) operators, and write multi-selection statements to test multiple conditions. Using their knowledge of Boolean expressions and logical operators, they practice evaluating truth tables to compare two expressions for equivalence and applying De Morgan's Laws to simplify expressions.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use the `static` keyword to to create static variables and methods in a class\n\n* Call `Math` class methods and constants to perform calculations and generate random numbers\n\n* Use casting operators to assign a value of one type to another\n\n* Explain the difference between `==` and `equals()`\n\n* Write nested `if` statements to test a combination of conditions\n\n* Construct a conditional statement involving logical operators\n\n* Evaluate compound Boolean expressions for equivalence\n\n* Write multi-selection statements to test multiple conditions\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 3\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>"
          student_description: "This unit expands on the use of APIs, object-oriented programming concepts, and conditional statements to develop visuals and animations using The Theater. You learn about the functionality of the `static` keyword and explore the methods in the `Math` class to perform calculations and incorporate randomness in program decisions and behaviors. While working with conditional statements and Boolean expressions, you realize the difference between using the `==` operator and the `equals()` method to compare objects for equality and discover the need for overriding the `equals()` method in their own classes. You deepen your understanding of conditional statements and logical operators as they learn to write nested conditional statements, use the AND ( `&&` ) and OR ( `||` ) operators, and write multi-selection statements to test multiple conditions. Using your knowledge of Boolean expressions and logical operators, you practice evaluating truth tables to compare two expressions for equivalence and applying De Morgan's Laws to simplify expressions.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use the `static` keyword to to create static variables and methods in a class\n\n* Call `Math` class methods and constants to perform calculations and generate random numbers\n\n* Use casting operators to assign a value of one type to another\n\n* Explain the difference between `==` and `equals()`\n\n* Write nested `if` statements to test a combination of conditions\n\n* Construct a conditional statement involving logical operators\n\n* Evaluate compound Boolean expressions for equivalence\n\n* Write multi-selection statements to test multiple conditions\n    </div>\n</details>"
          description_short: Students improve decision-making in their programs using relational and logical operators to evaluate primitive values and object references and use the Math class to perform calculations and generate random numbers.
          description_audience: ''
          lessons: {}
          name: csa4-2025
        csa5-2025:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Two-Dimensional Arrays
          description: "This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. Students identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As students analyze problems involving 2D arrays, they revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. Students apply these concepts to manipulate pixels and in The Theater to create image filters in addition to working with primitive values and various object references. Additionally, students use the programming knowledge and skills they have acquired to consider the impacts of programs on society, economies, and culture.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Declare and initialize a two-dimensional (2D) array using the `new` keyword and an initializer list\n\n* Access and modify elements in a two-dimensional (2D) array using row and column indexes\n\n* Write nested loops to traverse a two-dimensional (2D) array in row-major and column-major order\n\n* Write nested enhanced `for` loops to traverse a two-dimensional (2D) array\n\n* Apply standard 1D array algorithms to a 2D array\n\n* Discuss the beneficial and harmful impacts of programs\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 8\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. You identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As you analyze problems involving 2D arrays, you revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. You apply these concepts to manipulate pixels using The Theater to create image filters in addition to working with primitive values and various object references. Additionally, you use the programming knowledge and skills you have acquired to consider the impacts of programs on society, economies, and culture.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Declare and initialize a two-dimensional (2D) array using the `new` keyword and an initializer list\n\n* Access and modify elements in a two-dimensional (2D) array using row and column indexes\n\n* Write nested loops to traverse a two-dimensional (2D) array in row-major and column-major order\n\n* Write nested enhanced `for` loops to traverse a two-dimensional (2D) array\n\n* Apply standard 1D array algorithms to a 2D array\n\n* Discuss the beneficial and harmful impacts of programs\n    </div>\n</details>"
          description_short: Students use two-dimensional (2D) arrays to expand storage and organization capabilities in their programs.
          description_audience: ''
          lessons: {}
          name: csa5-2025
        csa6-2025:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: ArrayLists and String Methods
          description: "This unit continues to expand on data structures to introduce students to creating lists using the `ArrayList` class. In the process, students learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. Students differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. Students apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, students learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, students further develop software engineering skills by writing Javadoc comments to create API documentation for their programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use the `Integer` and `Double` class to represent primitive values as objects\n\n* Describe the structure and functionality of an `ArrayList`\n\n* Use methods in the `ArrayList` class to obtain the size of an `ArrayList`, add elements, retrieve elements, set values, and remove elements\n\n* Apply standard algorithms used with one-dimensional (1D) arrays to an `ArrayList`\n\n* Use methods in the `String` class to retrieve substrings and perform comparisons\n\n* Write standard algorithms to traverse a `String` object\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 2\n* Personal Progress Check 7\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit continues to expand on data structures to introduce you to creating lists using the `ArrayList` class. In the process, you learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. You differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. You apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, you learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, you further develop software engineering skills by writing Javadoc comments to create API documentation for your programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use the `Integer` and `Double` class to represent primitive values as objects\n\n* Describe the structure and functionality of an `ArrayList`\n\n* Use methods in the `ArrayList` class to obtain the size of an `ArrayList`, add elements, retrieve elements, set values, and remove elements\n\n* Apply standard algorithms used with one-dimensional (1D) arrays to an `ArrayList`\n\n* Use methods in the `String` class to retrieve substrings and perform comparisons\n\n* Write standard algorithms to traverse a `String` object\n    </div>\n</details>"
          description_short: Students use ArrayLists to store program data and work with methods in the String class to manipulate and evaluate String objects.
          description_audience: ''
          lessons: {}
          name: csa6-2025
        csa7-2025:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: End of Unit Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Method Decomposition and Recursion
          description: "This unit allows students to practice software design and development using the skills they have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. Students use decomposition strategies and object-oriented principles to plan and implement their ideas while ensuring their projects meet specified requirements. In the process, students learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, students practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, students consider the need for maximizing system reliability as they explore bugs and issues in existing programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Differentiate between passing primitive values and object references as parameters\n\n* Write and call overloaded, `private`, and overridden methods\n\n* Explain the legal issues and intellectual property concerns of programs that create AI-generated images\n\n* Trace a recursive method to determine its result\n\n* Identify strategies to maximize system reliability\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit allows you to practice software design and development using the skills you have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. You use decomposition strategies and object-oriented principles to plan and implement your ideas while ensuring your project meet specified requirements. In the process, you learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, you practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, you consider the need for maximizing system reliability as you explore bugs and issues in existing programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Differentiate between passing primitive values and object references as parameters\n\n* Write and call overloaded, `private`, and overridden methods\n\n* Explain the legal issues and intellectual property concerns of programs that create AI-generated images\n\n* Trace a recursive method to determine its result\n\n* Identify strategies to maximize system reliability\n    </div>\n</details>"
          description_short: Students practice software design and development using the skills and programming constructs they have learned and explore recursion.
          description_audience: ''
          lessons: {}
          name: csa7-2025
        csa8-2025:
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          title: Searching and Sorting
          description: "This unit expands on algorithms students have learned to introduce common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, students analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, students apply their programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, students consider the privacy and security of programs and users.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Explain the functionality of standard searching and sorting algorithms\n\n* Analyze the efficiency of searching and sorting algorithms using execution counts\n\n* Implement algorithms involving multiple 1D or 2D arrays or `ArrayList`s\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 10\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=8) to let the Code.org curriculum team know how the unit went."
          student_description: "In this unit, you expand on the algorithms you have learned to explore common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, you analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, you apply your programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, you consider the privacy and security of programs and users.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Explain the functionality of standard searching and sorting algorithms\n\n* Analyze the efficiency of searching and sorting algorithms using execution counts\n\n* Implement algorithms involving multiple 1D or 2D arrays or `ArrayList`s\n    </div>\n</details>"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: csa8-2025
        csa9-2025:
          lesson_groups:
            lessonGroup-2:
              display_name: Review and Practice
            lessonGroup-3:
              display_name: Mock Exams
            lessonGroup-4:
              display_name: Sandboxes
          title: AP Exam Review and Practice
          description: This unit prepares students for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. Students identify strengths and areas of improvement to create individualized study plans to focus their practice and self-assess their progress.
          student_description: This unit prepares you for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. You identify strengths and areas of improvement to create individualized study plans to focus you practice and self-assess your progress.
          description_short: Students prepare for the AP CSA Exam by practicing strategies for the multiple-choice and free response questions.
          description_audience: ''
          lessons: {}
          name: csa9-2025
        csa-postap-se-and-computer-vision-2025:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: GitHub and Copilot'
            lessonGroup-3:
              display_name: 'Chapter 2: Computer Vision'
            lessonGroup-5:
              display_name: Post-Survey
          title: Software Engineering & Computer Vision
          description: This two-chapter post-AP CSA module offers high school students hands-on experience with professional software development tools, including GitHub and GitHub Copilot, and imparts them with the real-world skills to develop a computer vision program. Students will gain practical knowledge, learn industry-standard practices, and cultivate critical thinking through discussions and problem-solving centered around AI tools and models. These lessons aim not only to bolster their understanding of AI and its applications but also foster creativity and collaboration, equipping students with the set of skills and the beginning of a software development portfolio they can take with them beyond high school.
          student_description: This two-part module lets you explore pro-level tools like GitHub and GitHub Copilot and teaches you how to create your own computer vision program. You'll be solving real-world AI problems and tinkering with cutting-edge models, learning industry-standard practices along the way. This isn't just about understanding AI better - it's about sparking your creativity, improving your teamwork skills, and starting to build your own software development portfolio.
          description_short: ''
          description_audience: ''
        aryanna-sandbox:
          lessons:
            lesson-1:
              name: General Design Guidance
            lesson-2:
              name: Designing Visuals
            lesson-3:
              name: Designing Text
            lesson-4:
              name: Level Types
          lesson_groups: {}
          name: aryanna-sandbox
          title: Aryanna's Sandbox
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        coding-with-ai:
          lessons:
            lesson-1:
              name: Introduction to Coding with AI
            lesson-2:
              name: 'AI: Your Ideation Partner for Programming Prep'
            lesson-3:
              name: Navigating Algorithms with the Help of AI
            lesson-4:
              name: AI as Your Degugging Partner
            lesson-5:
              name: Beyond the Finished Code
          lesson_groups: {}
          name: coding-with-ai
          title: Coding with AI
          description_audience: ''
          description_short: This unit uses AI to simplify concepts, solve problems, generate code, and instill ethical AI practices for confident learners in a rapidly changing world.
          description: |-
            This unit empowers students to become confident, ethical coders. Students learn how to leverage generative AI tools to help explain code, tackle problems, and even generate code. More than just coding, this unit emphasizes ethical considerations and responsible use of AI, preparing students for the ever-evolving tech landscape.

            ## What do I need to teach this module?

            Take a look at the [Getting Started with Coding with AI](https://docs.google.com/document/d/1hLR7WS8KmFxrjoM2Tr28rgfa0IZQ8otksw8ujYkdW3Y/edit?usp=sharing) guide for information on implementation options, what you and your students will need for this module, and helpful information to learn more about chatbots and large language models.

            ## How can I prepare to teach this module?

            If you are interested in teaching this module, we recommend completing the free [**Coding with AI Self-Paced Professional Development Module**](https://studio.code.org/courses/self-paced-pl-coding-with-ai-2024). The module is designed to take 2-3 hours to complete. No previous computer science experience is required.
          student_description: |-
            In this unit, you'll learn how to use AI like help you:

            * **Crack coding puzzles:** AI explains complex stuff in ways that make sense, even for beginners.
            * **Solve problems:** Use AI tools to debug your code and tackle new challenges.
            * **Write code with a magic wand (almost!):** AI can even help you generate code, freeing you up to focus on the cool ideas.
            * **Be a responsible coder:** Learn about the impact of AI and how to use it ethically, making the tech world a better place.
        pl-team-design-guide:
          lessons:
            lesson-1:
              name: General Online Learning Design
            lesson-2:
              name: Designing Visuals
            lesson-3:
              name: Designing Text
            lesson-4:
              name: Level Types
          lesson_groups: {}
          name: pl-team-design-guide
          title: Professional Learning Design Guide
          description_audience: ''
          description_short: ''
          description: |-
            ## Welcome!

            ##### This guide is written and maintained by the Code.org Professional Learning team. It houses norms, best practices, and examples for creating a self-paced, asynchronous learning experience. **Please do not revise this script without permission from the team**, but please feel free to look at the code for individual levels for inspiration and guidance.

            <!-- Despite our guidance stating that body text should be H4 size, this overview text is H5 size to be visually consistent with the curriculum. -->
          student_description: |-
            ## Welcome!

            ##### This guide is written and maintained by the Code.org Professional Learning team. It houses norms, best practices, and examples for creating a self-paced, asynchronous learning experience. **Please do not revise this script without permission from the team**, but please feel free to look at the code for individual levels for inspiration and guidance.

            <!-- Despite our guidance stating that body text should be H4 size, this overview text is H5 size to be visually consistent with the curriculum. -->
        self-paced-pl-microbit-2024-1:
          lessons:
            lesson-1:
              name: Events
            lesson-2:
              name: Loops
            lesson-3:
              name: Data and Variables
            lesson-4:
              name: Conditionals
            lesson-5:
              name: Functions
            lesson-6:
              name: Overview
            lesson-7:
              name: Implementing with Code.org
          lesson_groups: {}
          name: self-paced-pl-microbit-2024-1
          title: Getting Started with Code.org [Optional]
          description_audience: ''
          description_short: ''
          description: "#### This module is a short introduction to using the Code.org platform.\n\n#### **You will:**\n* #### Get an introduction to Code.org \n* #### Learn to navigate the teacher features on the Code.org platform\n\n#### **Suggested Time:** 30 minutes"
          student_description: "#### This module is a short introduction to using the Code.org platform.\n\n#### **You will:**\n* #### Get an introduction to Code.org \n* #### Learn to navigate the teacher features on the Code.org platform\n\n#### **Suggested Time:** 30 minutes"
        self-paced-pl-microbit-2024-2:
          lessons:
            lesson-1:
              name: Overview
            lesson-2:
              name: Meet your micro:bit
            lesson-3:
              name: Next Steps
          lesson_groups: {}
          name: self-paced-pl-microbit-2024-2
          title: 'Physical Computing with micro:bit '
          description_audience: ''
          description_short: ''
          description: "#### This module will introduce you to the basics of physical computing with micro:bit. \n\n#### **You will:**\n- ####  Get acquainted with the micro:bit\n\n- #### Navigate the classroom feature in Microsoft MakeCode\n\n- #### Practice using the micro:bit\n\n- #### Learn best practices for teaching with micro:bit\n\n#### **Suggested time:** 90 minutes\n\n"
          student_description: "#### This module will introduce you to the basics of physical computing with micro:bit. \n\n#### **You will:**\n- ####  Get acquainted with the micro:bit\n\n- #### Navigate the classroom feature in Microsoft MakeCode\n\n- #### Practice using the micro:bit\n\n- #### Learn best practices for teaching with micro:bit\n\n#### **Suggested time:** 90 minutes\n"
        gen-ai-foundations-draft:
          lessons:
            lesson-1:
              name: Lesson 1
            lesson-2:
              name: Lesson 2
            lesson-3:
              name: Templates
            lesson-4:
              name: Lesson 4
            lesson-5:
              name: Lesson 5
          lesson_groups: {}
          name: gen-ai-foundations-draft
          title: "[Draft] Gen AI - Foundations of LLMs"
          description_audience: ''
          description_short: ''
          description: |-
            Placeholder script for drafting the Gen AI unit.

            Questions? Ask Dan or Sarah, or post in #generative-ai-unit
          student_description: ''
        gen-ai-customizing-draft:
          lessons: {}
          lesson_groups: {}
          name: gen-ai-customizing-draft
          title: "[Draft] Gen AI - Customizing LLMs"
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        coursec-maker-2024-pilot:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Events'
        music-intro-elementary-2024:
          lessons: {}
          lesson_groups: {}
          name: music-intro-elementary-2024
          title: 'Music Lab - Elementary '
          description_audience: 3rd grade +
          description_short: 'An introduction to Music Lab for elementary aged students. '
          description: 'Work in progress. '
          student_description: ''
        coursec-maker-pilot-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Events'
        coursed-maker-pilot-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Conditionals'
        melissa-test-1:
          title: CSF Levels
          description: "#### This module is a short introduction to both Code.org and this professional learning course. \n\n#### **You will:**\n* #### Get an introduction to Code.org and CS Fundamentals Maker with micro:bit.\n* #### add objective \n* #### Learn how to engage in this professional learning course.\n\n#### **Suggested Time:** ?? minutes"
          student_description: "#### This module is a short introduction to both Code.org and this professional learning course. \n\n#### **You will:**\n* #### Get an introduction to Code.org and CS Fundamentals Maker with micro:bit.\n* #### add objective \n* #### Learn how to engage in this professional learning course.\n\n#### **Suggested Time:** 10 minutes"
          description_short: ''
          description_audience: ''
          lessons:
            lesson-7:
              name: Course C
            lesson-8:
              name: Course D
            lesson-9:
              name: Course E
            lesson-10:
              name: Course F
          lesson_groups: {}
          name: melissa-test-1
        melissambcc:
          lessons: {}
          lesson_groups: {}
          name: melissambcc
          title: 2nd Grade
          description_audience: ''
          description_short: ''
          description: "#### This module covers the concepts and skills that are in the micro:bit beginner track.\n\n#### **You will:**\n* #### Code using events with Code.org.\n* #### Explore an unplugged coding lesson. \n\n\n#### **Suggested Time:** 30 minutes\n\n\n"
          student_description: |+
            #### This module covers the concepts and skills that are in the micro:bit beginner track.

            #### **You will:**
            * #### Code using events with Code.org.
            * #### Explore an unplugged coding lesson.


            #### **Suggested Time:** 30 minutes


        melissambcd:
          lessons: {}
          lesson_groups: {}
          name: melissambcd
          title: 3rd Grade
          description_audience: ''
          description_short: ''
          description: |+
            #### This module covers the concepts and skills that are in the first micro:bit  track.

            #### **You will:**
            * #### Code using events and conditionals with Code.org.


            #### **Suggested Time:** 40 minutes


          student_description: |+
            #### This module covers the concepts and skills that are in the micro:bit beginner track.

            #### **You will:**
            * #### Code using loops and conditionals with Code.org.


            #### **Suggested Time:** 40 minutes


        melissambcoursed:
          lessons: {}
          lesson_groups: {}
        melissambce:
          lessons: {}
          lesson_groups: {}
          name: melissambce
          title: 4th Grade
          description_audience: ''
          description_short: ''
          description: "#### This module covers the concepts and skills that are in the micro:bit beginner track.\n\n#### **You will:**\n* #### Code using events with Code.org.\n* #### Explore an unplugged coding lesson. \n\n\n#### **Suggested Time:** 30 minutes\n\n\n"
          student_description: "#### This module covers the concepts and skills that are in the micro:bit beginner track.\n\n#### **You will:**\n* #### Code using events with Code.org.\n* #### Explore an unplugged coding lesson. \n\n\n#### **Suggested Time:** 30 minutes\n\n\n"
        melissambcf:
          lessons: {}
          lesson_groups: {}
          name: melissambcf
          title: 5th Grade
          description_audience: ''
          description_short: ''
          description: "#### This module covers the concepts and skills that are in the micro:bit beginner track.\n\n#### **You will:**\n* #### Code using events with Code.org.\n* #### Explore an unplugged coding lesson. \n* #### Create and code with variables.\n\n\n#### **Suggested Time:** 40 minutes\n\n\n"
          student_description: "#### This module covers the concepts and skills that are in the micro:bit beginner track.\n\n#### **You will:**\n* #### Code using events with Code.org.\n* #### Explore an unplugged coding lesson. \n* #### Create and code with variables.\n\n\n#### **Suggested Time:** 40 minutes\n\n\n"
        coursed-maker-2024-pilot:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Conditionals'
        pilot-coursec-maker-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Events'
            lessonGroup-3:
              display_name: 'Intermediate: Sequencing and Loops'
            lessonGroup-4:
              display_name: 'Stretch: Data and Variables'
          title: Course C - Maker with micro:bit
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nChoose between Beginner, Intermediate, and Stretch pathways. Not sure where to begin? Start at the Beginner pathway and work your way up. Each of the three pathways has two components. First, students will develop their coding knowledge in skill-building lessons from CS Fundamentals. Then, students will go to the micro:bit platform to code their physical computing projects. Check out the micro:bit Course C booklet <a href=\"https://code.org/maker/assets/CSF-Booklet-Course-C-Nov2023.pdf\" target=\"_blank\">here</a>.\n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/k5-maker-pilot-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n\n**After teaching this course:**\n\nComplete the [Teacher Survey](https://docs.google.com/forms/d/e/1FAIpQLSdyteQu5k4LtIl4XythmgLDK4YZTtOOy7LVKV3efO7awzTwhw/viewform) to share your feedback with the Code.org team.\n"
          student_description: ''
          description_short: Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit.
          description_audience: ''
          lessons: {}
          name: pilot-coursec-maker-2024
        yaddayadda:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Events'
        self-paced-pl-microbit-2024-3:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-microbit-2024-3
          title: Course D
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-microbit-2024-4:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-microbit-2024-4
          title: Course D
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-microbit-2024-5:
          lessons: {}
          lesson_groups: {}
        self-paced-pl-microbit-2024-6:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-microbit-2024-6
          title: 'Physical Computing with micro:bit '
          description_audience: ''
          description_short: ''
          description: "#### This unit will introduce you to the basics of physical computing  so you are ready to begin teaching with micro:bit. \n\n#### **You will:**\n- ####  Get acquainted with the micro:bit\n\n- #### Navigate the classroom feature in Microsoft MakeCode\n\n- #### Practice using the micro:bit\n\n- #### Learn best practices for teaching with micro:bit\n\n#### **Suggested time:** 90 minutes"
          student_description: "#### This module will introduce you to the basics of physical computing with micro:bit. \n\n#### **You will:**\n- ####  Get acquainted with the micro:bit\n\n- #### Navigate the classroom feature in Microsoft MakeCode\n\n- #### Practice using the micro:bit\n\n- #### Learn best practices for teaching with micro:bit\n\n#### **Suggested time:** 90 minutes"
        pilot-coursee-maker-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Events and Designing for Accessibility'
            lessonGroup-3:
              display_name: 'Intermediate: Conditionals '
            lessonGroup-4:
              display_name: 'Stretch: Functions'
          title: Course E - Maker with micro:bit
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nChoose between Beginner, Intermediate, and Stretch pathways. Not sure where to begin? Start at the Beginner pathway and work your way up. Each of the three pathways has two components. First, students will develop their coding knowledge in skill-building lessons from CS Fundamentals. Then, students will go to the micro:bit platform to code their physical computing projects. Check out the micro:bit Course E booklet <a href=\"https://code.org/maker/assets/CSF-Booklet-Course-E-Nov2023.pdf\" target=\"_blank\">here</a>.\n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/k5-maker-pilot-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n\n**After teaching this course:**\n\nComplete the [Teacher Survey](https://docs.google.com/forms/d/e/1FAIpQLSdyteQu5k4LtIl4XythmgLDK4YZTtOOy7LVKV3efO7awzTwhw/viewform) to share your feedback with the Code.org team.\n"
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: pilot-coursee-maker-2024
        pilot-coursed-maker-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Conditionals'
            lessonGroup-3:
              display_name: 'Intermediate: Events and Conditionals '
            lessonGroup-4:
              display_name: 'Stretch: Conditionals and Text Inputs '
          title: Course D - Maker with micro:bit
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nChoose between Beginner, Intermediate, and Stretch pathways. Not sure where to begin? Start at the Beginner pathway and work your way up. Each of the three pathways has two components. First, students will develop their coding knowledge in skill-building lessons from CS Fundamentals. Then, students will go to the micro:bit platform to code their physical computing projects. Check out the micro:bit Course D booklet <a href=\"https://code.org/maker/assets/CSF-Booklet-Course-D-Nov2023.pdf\" target=\"_blank\">here</a>.\n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/k5-maker-pilot-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n\n**After teaching this course:**\n\nComplete the [Teacher Survey](https://docs.google.com/forms/d/e/1FAIpQLSdyteQu5k4LtIl4XythmgLDK4YZTtOOy7LVKV3efO7awzTwhw/viewform) to share your feedback with the Code.org team.\n"
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: pilot-coursed-maker-2024
        pilot-coursef-maker-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Beginner: Events and Variables'
            lessonGroup-3:
              display_name: 'Intermediate: Conditionals, Events, and Sounds'
            lessonGroup-4:
              display_name: 'Stretch: Events, Conditionals, and Variables'
          title: Course F - Maker with micro:bit
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nChoose between Beginner, Intermediate, and Stretch pathways. Not sure where to begin? Start at the Beginner pathway and work your way up. Each of the three pathways has two components. First, students will develop their coding knowledge in skill-building lessons from CS Fundamentals. Then, students will go to the micro:bit platform to code their physical computing projects. Check out the micro:bit Course F booklet <a href=\"https://code.org/maker/assets/CSF-Booklet-Course-F-Nov2023.pdf\" target=\"_blank\">here</a>.\n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/k5-maker-pilot-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n\n**After teaching this course:**\n\nComplete the [Teacher Survey](https://docs.google.com/forms/d/e/1FAIpQLSdyteQu5k4LtIl4XythmgLDK4YZTtOOy7LVKV3efO7awzTwhw/viewform) to share your feedback with the Code.org team."
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: pilot-coursef-maker-2024
        k5-maker-pilot-2024-1:
          lessons: {}
          lesson_groups: {}
          name: k5-maker-pilot-2024-1
          title: Intro to Maker K-5 Units
          description_audience: ''
          description_short: ''
          description: "#### This unit is a short overview for navigating this professional learning course with an optional additional lesson to get you started implementing Code.org in your class. \n#### **You will:**\n* #### Get an introduction to Code.org and CS Fundamentals Maker with micro:bit.\n* #### Learn how to engage in this professional learning course.\n\n#### **Suggested Time:** 30 minutes"
          student_description: "#### This module is a short overview for navigating this professional learning course with an optional additional lesson to get you started implementing Code.org in your class. \n#### **You will:**\n* #### Get an introduction to Code.org and CS Fundamentals Maker with micro:bit.\n* #### Learn how to engage in this professional learning course.\n\n#### **Suggested Time:** 30 minutes"
        k5-maker-pilot-2024-2:
          lessons: {}
          lesson_groups: {}
          name: k5-maker-pilot-2024-2
          title: Course C (2nd-3rd Grade)
          description_audience: ''
          description_short: ''
          description: "#### This unit covers the concepts and skills from the beginner pathway of **CS Fundamentals Course C.**\n#### Choose at least one course unit (C-F) to complete before proceeding to the Physical Computing with micro:bit unit.\n\n#### **You will:**\n* #### Code using events with Code.org.\n* #### Explore an unplugged coding lesson. \n\n\n#### **Suggested Time:** 30 minutes\n\n#### **Extra Step:** Because we are currently piloting this unit, you first need to enroll in the pilot in order to see the curriculum units. <strong><a href=\"http://studio.code.org/experiments/set_single_user_experiment/csf-maker-pilot\" target=\"blank\" rel=\"noopener noreferrer\">Click here to enroll in the pilot</a> </strong>\n"
          student_description: "#### This unit covers the concepts and skills from the beginner pathway of **CS Fundamentals Course C.**\n#### Choose at least one course unit (C-F) to complete before proceeding to the Physical Computing with micro:bit unit.\n\n#### **You will:**\n* #### Code using events with Code.org.\n* #### Explore an unplugged coding lesson. \n\n\n#### **Suggested Time:** 30 minutes\n\n#### **Extra Step:** Because we are currently piloting this unit, you first need to enroll in the pilot in order to see the curriculum units. <strong><a href=\"http://studio.code.org/experiments/set_single_user_experiment/csf-maker-pilot\" target=\"blank\" rel=\"noopener noreferrer\">Click here to enroll in the pilot</a> </strong>\n\n"
        k5-maker-pilot-2024-3:
          lessons: {}
          lesson_groups: {}
          name: k5-maker-pilot-2024-3
          title: Course D (3rd-4th Grade)
          description_audience: ''
          description_short: ''
          description: |
            #### This unit covers the concepts and skills from the beginner pathway of **CS Fundamentals Course D.**
            #### Choose at least one course unit (C-F) to complete before proceeding to the Physical Computing with micro:bit unit.

            #### **You will:**
            * #### Code using loops and conditionals with Code.org.


            #### **Suggested Time:** 40 minutes

            #### **Extra Step:** Because we are currently piloting this unit, you first need to enroll in the pilot in order to see the curriculum units. <strong><a href="http://studio.code.org/experiments/set_single_user_experiment/csf-maker-pilot" target="blank" rel="noopener noreferrer">Click here to enroll in the pilot</a> </strong>
          student_description: |
            #### This unit covers the concepts and skills from the beginner pathway of **CS Fundamentals Course D.**
            #### Choose at least one course unit (C-F) to complete before proceeding to the Physical Computing with micro:bit unit.

            #### **You will:**
            * #### Code using loops and conditionals with Code.org.


            #### **Suggested Time:** 40 minutes

            #### **Extra Step:** Because we are currently piloting this unit, you first need to enroll in the pilot in order to see the curriculum units. <strong><a href="http://studio.code.org/experiments/set_single_user_experiment/csf-maker-pilot" target="blank" rel="noopener noreferrer">Click here to enroll in the pilot</a> </strong>
        k5-maker-pilot-2024-4:
          lessons: {}
          lesson_groups: {}
          name: k5-maker-pilot-2024-4
          title: Course E (4th-5th) Grade
          description_audience: ''
          description_short: ''
          description: "#### This unit covers the concepts and skills from the beginner pathway of **CS Fundamentals Course E.**\n#### Choose at least one course unit (C-F) to complete before proceeding to the Physical Computing with micro:bit unit.\n\n#### **You will:**\n* #### Code using events with Code.org.\n* #### Explore an unplugged coding lesson. \n\n\n#### **Suggested Time:** 30 minutes\n\n#### **Extra Step:** Because we are currently piloting this unit, you first need to enroll in the pilot in order to see the curriculum units. <strong><a href=\"http://studio.code.org/experiments/set_single_user_experiment/csf-maker-pilot\" target=\"blank\" rel=\"noopener noreferrer\">Click here to enroll in the pilot</a> </strong>\n"
          student_description: "#### This unit covers the concepts and skills from the beginner pathway of **CS Fundamentals Course E.**\n#### Choose at least one course unit (C-F) to complete before proceeding to the Physical Computing with micro:bit unit.\n\n#### **You will:**\n* #### Code using events with Code.org.\n* #### Explore an unplugged coding lesson. \n\n\n#### **Suggested Time:** 30 minutes\n\n#### **Extra Step:** Because we are currently piloting this unit, you first need to enroll in the pilot in order to see the curriculum units. <strong><a href=\"http://studio.code.org/experiments/set_single_user_experiment/csf-maker-pilot\" target=\"blank\" rel=\"noopener noreferrer\">Click here to enroll in the pilot</a> </strong>\n"
        k5-maker-pilot-2024-5:
          lessons: {}
          lesson_groups: {}
          name: k5-maker-pilot-2024-5
          title: Course F (5th-6th Grade)
          description_audience: ''
          description_short: ''
          description: "#### This unit covers the concepts and skills from the beginner pathway of **CS Fundamentals Course F.**\n#### Choose at least one course unit (C-F) to complete before proceeding to the Physical Computing with micro:bit unit.\n\n#### **You will:**\n* #### Code using events with Code.org.\n* #### Explore an unplugged coding lesson. \n* #### Create and code with variables.\n\n\n#### **Suggested Time:** 40 minutes\n\n#### **Extra Step:** Because we are currently piloting this unit, you first need to enroll in the pilot in order to see the curriculum units. <strong><a href=\"http://studio.code.org/experiments/set_single_user_experiment/csf-maker-pilot\" target=\"blank\" rel=\"noopener noreferrer\">Click here to enroll in the pilot</a> </strong>\n"
          student_description: "#### This unit covers the concepts and skills from the beginner pathway of **CS Fundamentals Course F.**\n#### Choose at least one course unit (C-F) to complete before proceeding to the Physical Computing with micro:bit unit.\n\n#### **You will:**\n* #### Code using events with Code.org.\n* #### Explore an unplugged coding lesson. \n* #### Create and code with variables.\n\n\n#### **Suggested Time:** 40 minutes\n\n#### **Extra Step:** Because we are currently piloting this unit, you first need to enroll in the pilot in order to see the curriculum units. <strong><a href=\"http://studio.code.org/experiments/set_single_user_experiment/csf-maker-pilot\" target=\"blank\" rel=\"noopener noreferrer\">Click here to enroll in the pilot</a> </strong>\n"
        k5-maker-pilot-2024-6:
          lessons: {}
          lesson_groups: {}
        music-accessibility:
          lessons:
            lesson-1:
              name: Keyboard Navigation Testing
          lesson_groups: {}
          name: music-accessibility
          title: Music-accessibility
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        pilot-k5-ai:
          lessons:
            lesson-1:
              name: Sorting Data
            lesson-2:
              name: Training AI
            lesson-3:
              name: How AI Makes Decisions
            lesson-4:
              name: Create an AI Poster
          lesson_groups: {}
          name: pilot-k5-ai
          title: "[Pilot] Elementary AI Module "
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        lesson-plan-feedback-v1:
          lessons:
            lesson-1:
              name: Option A
            lesson-2:
              name: Option B
            lesson-3:
              name: Option C
            lesson-4:
              name: Option D
            lesson-5:
              name: Option E
            lesson-6:
              name: Option F
          lesson_groups: {}
          name: lesson-plan-feedback-v1
          title: Lesson Plan Feedback (V1)
          description_audience: ''
          description_short: ''
          description: |-
            ## How to navigate these lessons

            1) Start with Lesson A. This is the world we're in now.
            2) **Go to Lesson F - the last lesson in the progression!** This represents a world where lessons are entirely connected to slides at every step of the way with everything in the table itself.
            3) All the lessons in between are a "progression" from one world to the next, gradually introducing ways tables and slides could appear in lessons.

            **Ignore weird image sizing in tables**. This is a markdown thing and, if we go more in a slide-image direction, we can find a way to figure out image sizes so they'll all be the same even in separate tables.

            If you can't ignore the weird sizing, open up the developer console in a lesson and paste this into the javascript console:
            ```
            document.querySelectorAll('tr').forEach(row => { const cells = row.querySelectorAll('td, th'); if (cells.length > 0) cells[0].style.width = '25%'; if (cells.length > 1) cells[1].style.width = '75%'; });
            ```

            This will resize all of the tables to be the same size
          student_description: ''
        csd-web-dev-beta-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
          title: Web Development ('24-'25)
          description: |-
            In Web Development, students are put in the shoes of a web developer and empowered to design and create a web page to meet a user’s needs. As students develop the pages and begin to see themselves as web developers and designers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem-solving related to programming while learning valuable skills such as debugging, using resources, and teamwork. At the conclusion of chapter one, students will design and create a web page for a user. After chapter two, students will have worked with a team to create a multi-page website they can publish and share.

            ::: details [**Chapter 1 Overview**]
            **Description:** Students work as web developers to design and develop web pages to meet users' needs. Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page and CSS to design and organize the content. They also explore the privacy and intellectual property implications of publishing web pages online.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a web page to meet a user's needs.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as creators and consumers of digital media.

            **Big Questions:**
            * How do web developers create web pages for users?
            * How can text communicate a web page's content, structure, and style?
            * How do I safely and appropriately make use of the content published on the Internet?
            * What strategies can I use when coding to find and fix issues?
            :::

            ::: details [**Chapter 2 Overview**]
            **Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.

            **Goals:**
            * Create digital artifacts that use multiple computer languages to control the structure and style of their content.
            * Create a website that solves a problem.
            * Use different programming languages to solve different problems.
            * Examine their role and responsibilities as both creators and consumers of digital media.

            **Big Questions:**
            * How can websites be used to address problems in the world?
            * What strategies can teams use to work better together?
            * How do I know what information can be trusted online?
            :::


            ::: details [**Implementation Guidance for Web Development**]
            - Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)
            - You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit
            :::

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went.
          student_description: " In this unit, you’ll learn how to create and share the content on your own web pages. After deciding what content you want to share with the world, you’ll learn how to structure and style your pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
          description_short: " Learn to build your own website in Web Lab."
          description_audience: ''
          lessons: {}
          name: csd-web-dev-beta-2024
        fcs1-beta-2024:
          lessons: {}
          lesson_groups: {}
          name: fcs1-beta-2024
          title: Computer Systems and Devices
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        fcs2-beta-2024:
          lessons: {}
          lesson_groups: {}
          name: fcs2-beta-2024
          title: Unit 2 - Representing Information
          description_audience: ''
          description_short: ''
          description: In this unit, students learn about data representation and its role in solving information problems. They explore different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. Students learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.
          student_description: In this unit, you will learn about data representation and its role in solving information problems. You will explore different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. You will learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.
        fcs3-beta-2024:
          lessons: {}
          lesson_groups: {}
          name: fcs3-beta-2024
          title: Unit 3 - Artificial Intelligence and Machine Learning
          description_audience: ''
          description_short: ''
          description: This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.
          student_description: This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop your own machine learning projects around real-world data. The unit culminates with designing your own machine learning app to solve a personally relevant problem.
        fcs4-beta-2024:
          lessons: {}
          lesson_groups: {}
          name: fcs4-beta-2024
          title: Unit 4 - Networks and the Internet
          description_audience: ''
          description_short: ''
          description: This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.
          student_description: This unit reveals how the Internet was designed to connect billions of devices and people to one another. Learn how the different protocols of the Internet work and actually build them yourself using the Internet Simulator. Then consider the impacts the Internet has had, both good and bad, on modern life.
        fcs5-beta-2024:
          lessons: {}
          lesson_groups: {}
          name: fcs5-beta-2024
          title: Unit 5 - Cybersecurity and Global Impacts
          description_audience: ''
          description_short: ''
          description: In this unit, students learn how computing innovations have impacted the world in beneficial and harmful ways. Students explore how data can pose a threat to our privacy and security and the ways that encryption and other techniques are used to protect it. Throughout the unit, they participate in a "school of the future" conference in which they make a proposal for how best to improve school life with computing innovations.
          student_description: In this unit, you will learn how computing innovations have impacted our world in beneficial and harmful ways. You'll explore how data can pose a threat to our privacy and security and the ways that encryption and other techniques are used to protect it. Throughout the unit, you will participate in a "school of the future" conference in which you and a team make a proposal for how best to improve school life with computing innovations.
        fcs6-beta-2024:
          lessons: {}
          lesson_groups: {}
          name: fcs6-beta-2024
          title: Unit 6 - Introduction to Programming
          description_audience: ''
          description_short: ''
          description: This unit aims to develop students' understanding of fundamental programming concepts, enhance their problem-solving skills, and apply their knowledge to create dynamic and engaging digital scenes. By the end of the unit, students will be proficient in using functions, loops, parameters, and APIs in their programming projects.
          student_description: In this unit, you will dive into programming concepts that will help you become a more skilled and creative coder. You will learn how to write and use functions, work with loops, understand parameters, and use APIs. By the end of this unit, you will be able to create dynamic and interactive digital scenes using these advanced programming techniques.
        fcs1a-beta-2024:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
          name: fcs1a-beta-2024
          title: Unit 1B - (Option B) Computer Systems and Devices with Circuit Playground
          description_audience: ''
          description_short: ''
          description: |-
            In this unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product.

            ⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the "maker" mindset. You can also teach this content using **micro:bit** devices by assigning the [(Option A) Creating Apps with Devices unit](/s/fcs1b-beta-2024). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product.
        fcs1b-beta-2024:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
          name: fcs1b-beta-2024
          title: Unit 1A - (Option A) Computer Systems and Devices with micro:bit
          description_audience: ''
          description_short: ''
          description: |-
            In this unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product.

            ⚠️ This unit uses the **micro:bit** to introduce physical computing and the "maker" mindset. You can also teach this content using **circuit playground** devices by assigning the [(Option B) Creating Apps with Devices (Circuit Playground) unit](/s/fcs1a-beta-2024). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product.
        pilot-k5-game-design:
          lessons:
            lesson-1:
              name: Game Design
            lesson-2:
              name: Variables as Score
            lesson-3:
              name: Environment and Players
            lesson-4:
              name: 'Game Jam Day 1: Create'
            lesson-5:
              name: 'Game Jam Day 2: Play'
          lesson_groups: {}
          name: pilot-k5-game-design
          title: "[Pilot] Game Design"
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        gen-ai-humanities:
          lessons:
            lesson-1:
              name: Writing Process
            lesson-2:
              name: Research Process
          lesson_groups: {}
          name: gen-ai-humanities
          title: Generative AI for Humanities
          description_audience: ''
          description_short: Learn how to effectively and ethically use generative AI chatbots in the writing and research process in these standalone lessons.
          description: |-
            This unit consists of two standalone lessons -- one about writing with AI and one about researching with AI. You may teach one or both of them. Both are meant to be used in humanities classes, to help demystify ethical and effective use of chatbots in humanities subject areas. Both lessons encourage students to explore the uses of these rapidly growing technologies and reflect on when and where to use them. If you wish to teach one but not the other, [**click here to learn about hiding lessons**](https://support.code.org/hc/en-us/articles/115001479372-How-can-I-hide-certain-units-or-lessons-from-my-students)

            In the Writing Process lesson, students will:
            * Assess the ethical implications of using AI for writing assistance, considering issues such as originality, intellectual integrity, and the balance between human creativity and AI assistance
            * Craft effective prompts to interact with LLMs to generate useful and relevant responses for various writing tasks

            In the Research Process lesson, students will:
            * Evaluate the effectiveness and appropriateness of LLM-generated responses in different research scenarios
            * Use a search engine and an AI chatbot to research and verify information

            **Support for teachers**: You can learn more about bringing AI lessons to your classroom through our [**AI 101 for Teachers**](https://code.org/ai/pl/101) series. AI 101 for Teachers is a free, foundational online professional learning series for any teacher and educator interested in the groundbreaking world of artificial intelligence (AI) and its transformative potential in education.
          student_description: |-
            In the Writing Process lesson, you will:
            * Assess the ethical implications of using AI for writing assistance, considering issues such as originality, intellectual integrity, and the balance between human creativity and AI assistance
            * Craft effective prompts to interact with LLMs to generate useful and relevant responses for various writing tasks

            In the Research Process Lesson, you will:
            * Evaluate the effectiveness and appropriateness of LLM-generated responses in different research scenarios
            * Use a search engine and an AI chatbot to research and verify information
        self-paced-pl-csd1-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Welcome
          title: 'Module 1: Welcome '
          description: "This module is a short introduction to both Code.org and this professional learning course. \n\n**You will:**\n* Get an introduction to Code.org and CS Discoveries.\n* Learn how to engage in this professional learning course.\n\n**Suggested Time:** 10 minutes"
          student_description: "This module is a short introduction to both Code.org and this professional learning course. \n\n**You will:**\n* Get an introduction to Code.org and CS Discoveries.\n* Learn how to engage in this professional learning course.\n\n**Suggested Time:** 10 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-csd1-2024
        self-paced-pl-csd2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Navigating Code.org
          title: 'Module 2: Navigating Code.org'
          description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Discoveries. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 70 minutes\n\n\n\n\n"
          student_description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Discoveries. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 70 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-csd2-2024
        self-paced-pl-csd3-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Overview of CS Discoveries
          title: 'Module 3: Overview of CS Discoveries'
          description: "This module will provide you with an overview of the CS Discoveries course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom. \n\n**You will:**\n\n* Gain a high-level understanding of the CS Discoveries curriculum.\n* Become familiar with the programming environments used within CS Discoveries.\n* Decide which units of CS Discoveries you will teach in your class.\n\n**Suggested time:** 60 minutes"
          student_description: "This module will provide you with an overview of the CS Discoveries course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom. \n\n**You will:**\n\n* Gain a high-level understanding of the CS Discoveries curriculum.\n* Become familiar with the programming environments used within CS Discoveries.\n* Decide which units of CS Discoveries you will teach in your class.\n\n**Suggested time:** 60 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-csd3-2024
        self-paced-pl-csd4-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching and Learning CS Discoveries
          title: 'Module 4: Teaching and Learning CS Discoveries'
          description: "In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Discoveries course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Discoveries classroom and make a plan for how you will support student learning while teaching the course. \n\n**You will:**\n* Consider the role of the teacher in a CS Discoveries classroom. \n* Learn about authentic CS practices that students will develop throughout the CS Discoveries course.\n* Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion. \n\n**Suggested Time:** 50 minutes"
          student_description: "In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Discoveries course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Discoveries classroom and make a plan for how you will support student learning while teaching the course. \n\n**You will:**\n* Consider the role of the teacher in a CS Discoveries classroom. \n* Learn about authentic CS practices that students will develop throughout the CS Discoveries course.\n* Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion. \n\n**Suggested Time:** 50 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-csd4-2024
        self-paced-pl-csd5-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Teaching Artificial Intelligence and Machine Learning
          title: "[Hidden - Do Not Use] Preparing to Teach AI and Machine Learning"
          description: "**Note:** This unit is hidden within the CSD Self-Paced Course. The content of this unit has instead been moved to [https://studio.code.org/courses/self-paced-pl-aiml-2023](https://studio.code.org/courses/self-paced-pl-aiml-2023)\n\nThis professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit.  \n\n**In this professional learning module, you will:**\n* Get an introduction to artificial intelligence and machine learning. \n* Practice key concepts included in the unit.\n* Engage with AI Lab and App Lab.\n* Explore end of chapter projects. \n* Make a plan for implementing the unit with your students.\n\n**Suggested Time:** 120 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's AI and Machine Learning unit.  \n\n**In this professional learning module, you will:**\n* Get an introduction to artificial intelligence and machine learning. \n* Practice key concepts included in the unit.\n* Engage with AI Lab and App Lab.\n* Explore end of chapter projects. \n* Make a plan for implementing the unit with your students.\n\n**Suggested Time:** 120 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-csd5-2024
        self-paced-pl-csd-unit1-1-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          title: Getting Started with Code.org
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-csd-unit1-1-2024
        self-paced-pl-csd-unit1-2-2024:
          title: Preparing to Teach Problem Solving and Computing
          description: "This professional learning module is designed to help you prepare to teach Code.org's Problem Solving and Computing unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Problem Solving and Computing.\n* Learn the key problem solving frameworks utilized in the unit\n* Practice key concepts included in the unit.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 40 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Problem Solving and Computing unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Problem Solving and Computing.\n* Learn the key problem solving frameworks utilized in the unit\n* Practice key concepts included in the unit.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 40 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit1-2-2024
        self-paced-pl-csd-unit2-1-2024:
          title: Getting Started with Code.org
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit2-1-2024
        self-paced-pl-csd-unit2-2-2024:
          title: Preparing to Teach Web Development
          description: |-
            This professional learning module is designed to help you prepare to teach Code.org's Web Development unit.

            **In this professional learning module, you will:**

            * Get an introduction to Web Development.
            * Practice key concepts included in the unit.
            * Engage with Web Lab.
            * Explore end-of-chapter projects.

            **Suggested time**: 120 minutes
          student_description: |-
            This professional learning module is designed to help you prepare to teach Code.org's Web Development unit.

            **In this professional learning module, you will:**

            * Get an introduction to Web Development.
            * Practice key concepts included in the unit.
            * Engage with Web Lab.
            * Explore end-of-chapter projects.

            **Suggested time**: 120 minutes
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit2-2-2024
        self-paced-pl-csd-unit3-1-2024:
          title: Getting Started with Code.org
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit3-1-2024
        self-paced-pl-csd-unit3-2-2024:
          title: Preparing to Teach Interactive Animations and Games
          description: "This professional learning module is designed to help you prepare to teach Code.org's Interactive Animations and Games unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Interactive Animations and Games.\n* Practice key concepts included in the unit.\n* Engage with Game Lab.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 120 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Interactive Animations and Games unit. \n\n**In this professional learning module, you will:**\n* Get an introduction to Interactive Animations and Games.\n* Practice key concepts included in the unit.\n* Engage with Game Lab.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 120 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit3-2-2024
        self-paced-pl-csd-unit5-1-2024:
          title: Getting Started with Code.org
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit5-1-2024
        self-paced-pl-csd-unit5-2-2024:
          title: Preparing to Teach Data and Society
          description: "This professional learning module is designed to help you prepare to teach Code.org's Data and Society unit. \n\n**In this professional learning module, you will:**\n\n* Get an introduction to Data and Society.\n* Practice key concepts included in the unit.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 70 minutes"
          student_description: "This professional learning module is designed to help you prepare to teach Code.org's Data and Society unit. \n\n**In this professional learning module, you will:**\n\n* Get an introduction to Data and Society.\n* Practice key concepts included in the unit.\n* Explore end-of-chapter projects.\n\n**Suggested time:** 70 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit5-2-2024
        self-paced-pl-physical-computing1-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          title: Getting Started with Code.org
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching the unit.\n\n**Suggested time:** 80 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-physical-computing1-2024
        self-paced-pl-physical-computing2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach Creating Apps for Devices with Circuit Playgrounds
          title: Preparing to Teach Creating Apps for Devices (Circuit Playground)
          description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your Circuit Playground. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n* Consider the role of the teacher in a computer science classroom.\n\n**Suggested time:** 100 minutes"
          student_description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your Circuit Playground. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n\n**Suggested time:** 100 minutes\n"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-physical-computing2-2024
        vpl-csd-2024-m1:
          title: Module 1
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csd-2024-m2:
          title: Module 2
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csd-2024-m3:
          title: Module 3
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csd-2024-m4:
          title: Module 4
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csd-2024-m5:
          title: Module 5
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csd-2024-m6:
          title: Module 6
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csd-2024-m7:
          title: Module 7
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csd-2024-m8:
          title: Module 8
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csa-2024-m1:
          title: Module 1
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2024-m1
        vpl-csa-2024-m2:
          title: Module 2
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2024-m2
        vpl-csa-2024-m3:
          title: Module 3
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2024-m3
        vpl-csa-2024-m4:
          title: Module 4
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2024-m4
        vpl-csa-2024-m5:
          title: Module 5
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2024-m5
        vpl-csa-2024-m6:
          title: Module 6
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2024-m6
        vpl-csa-2024-m7:
          title: Module 7
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2024-m7
        vpl-csa-2024-m8:
          title: Module 8
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: vpl-csa-2024-m8
        self-paced-pl-csa1-2024:
          title: 'Module 1: Welcome'
          description: |-
            This module is for anyone using these professional learning modules for CSA.

            **You will:**
            * Get an introduction to Code.org.
            * Learn how to engage in these professional learning modules.
            * Get an introduction to the AP Computer Science A course
            * Learn Code.org’s curricular approach to CSA

            **Estimated Time:** 1 hour
          student_description: |-
            This module is for anyone using these professional learning modules for CSA.

            **You will:**
            * Get an introduction to Code.org.
            * Learn how to engage in these professional learning modules.
            * Get an introduction to the AP Computer Science A course
            * Learn Code.org’s curricular approach to CSA

            **Estimated Time:** 1 hour
          description_short: ''
          description_audience: ''
        self-paced-pl-csa2-2024:
          title: 'Module 2: Navigating Code.org'
          description: "This module is intended for teachers who are new to Code.org and the Code.org platform. \n\n**You will:**\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching the course.\n\n**Estimated Time:** 1 hour\n"
          student_description: |-
            This module is intended for teachers who are new to Code.org and the Code.org platform.

            **You will:**
            * Navigate the Code.org website and teacher tools.
            * Set up a classroom section.
            * Locate and use course lesson plans and teacher resources.
            * Learn how to access support while teaching the course.

            **Estimated Time:** 1 hour
          description_short: ''
          description_audience: ''
        self-paced-pl-csa3-2024:
          title: 'Module 3: Support for text-based programming'
          description: |
            This module is for any teacher who is experienced in using variables, conditionals, loops and arrays in other programming languages, but is new to Java.

            **You will:**
            * Create a new file in the Java Lab IDE
            * Become familiar with the basics of Java syntax
            * Declare and initialize variables
            * Use variables in arithmetic operations
            * Print variables and text to the console
            * Write and read if, if-else, if-else-if-else statements
            * Read, write, and debug for loops in Java
            * Declare and  initialize a 1D array of primitive data types
            * Access and modify elements in arrays
            * Traverse arrays

            **Estimated Time:** 6 hours
          student_description: |
            This module is for any teacher who is experienced in using variables, conditionals, loops and arrays in other programming languages, but is new to Java.

            **You will:**
            * Create a new file in the Java Lab IDE
            * Become familiar with the basics of Java syntax
            * Declare and initialize variables
            * Use variables in arithmetic operations
            * Print variables and text to the console
            * Write and read if, if-else, if-else-if-else statements
            * Read, write, and debug for loops in Java
            * Declare and  initialize a 1D array of primitive data types
            * Access and modify elements in arrays
            * Traverse arrays

            **Estimated Time:** 6 hours
          description_short: ''
          description_audience: ''
        self-paced-pl-csa4-2024:
          title: 'Module 4: Getting to know the Painter class'
          description: |-
            This module is for any teacher who is familiar with Java OR has done Module 3, but who want introduction to the student-facing tools Code.org's in CSA Curriculum.

            **You will:**
            * Use Object Oriented Programming concepts in Code.org’s Neighborhood
            * Instantiate an object
            * Call methods from the `Painter` class
            * Learn how to use UML diagrams



            **Estimated Time:** 2 hours
          student_description: |-
            This module is for any teacher who is:

            * Experienced in using variables, conditionals, loops and arrays in other programming languages
            * Has finished Module 3 in this set of Modules
            * Is new to Java
            * Want an introduction to the student-facing tools in Code.org's tools in CSA Curriculum.

            **You will:**
            * Use Object Oriented Programming concepts in Code.org’s Neighborhood
            * Instantiate an object
            * Call methods from the `Painter` class
            * Learn how to use UML diagrams


            **Estimated Time:** 2 hours
          description_short: ''
          description_audience: ''
        vpl-csp-2024-m1:
          title: Module 1
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csp-2024-m2:
          title: Module 2
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csp-2024-m3:
          title: Module 3
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csp-2024-m4:
          title: Module 4
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csp-2024-m5:
          title: Module 5
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csp-2024-m6:
          title: Module 6
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csp-2024-m7:
          title: Module 7
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        vpl-csp-2024-m8:
          title: Module 8
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        self-paced-pl-csp1-2024:
          title: Welcome
          description: "This module is a short introduction to both Code.org and professional learning modules. \n\n**You will:**\n* Get an introduction to Code.org and CS Principles.\n* Learn how to engage in professional learning modules.\n\n**Suggested Time:** 10 minutes"
          student_description: "This module is a short introduction to both Code.org and professional learning modules. \n\n**You will:**\n* Get an introduction to Code.org and CS Principles.\n* Learn how to engage in professional learning modules.\n\n**Suggested Time:** 10 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csp1-2024
        self-paced-pl-csp2-2024:
          title: Navigating Code.org
          description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Principles. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes"
          student_description: "This module is designed to orient you to the tools you will use to support student learning while teaching CS Principles. \n\n**You will:**\n\n* Navigate the Code.org website and teacher tools.\n* Set up a classroom section\n* Locate and use course lesson plans and teacher resources. \n* Learn how to access support while teaching the course.\n\n**Suggested time:** 60 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csp2-2024
        self-paced-pl-csp3-2024:
          title: Overview of CS Principles
          description: |-
            This module will provide you with an overview of the CS Principles course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom.

            **You will**:

            * Gain a high-level understanding of the CS Principles curriculum.
            * Learn more about the pedagogical approaches used to teach both non-programming and programming units.
            * Become familiar with the student learning tools used within CS Principles.
            * Explore the components of the AP Exam, as well as your responsibilities as a teacher if you plan to offer CS Principles as an AP course.
            * Build an implementation plan for the school year.

            **Suggested time**: 90 minutes
          student_description: |-
            This module will provide you with an overview of the CS Principles course with an emphasis on concepts students will learn and tools students will use throughout the course. Engaging in this module will help you to make decisions about how to select the course content that you will implement in your classroom.

            **You will**:

            * Gain a high-level understanding of the CS Principles curriculum.
            * Learn more about the pedagogical approaches used to teach both non-programming and programming units.
            * Become familiar with the student learning tools used within CS Principles.
            * Explore the components of the AP Exam, as well as your responsibilities as a teacher if you plan to offer CS Principles as an AP course.
            * Build an implementation plan for the school year.

            **Suggested time**: 90 minutes
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csp3-2024
        self-paced-pl-csp4-2024:
          title: Teaching and learning CS Principles
          description: |-
            In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Principles course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Principles classroom and make a plan for how you will support student learning while teaching the course.

            **You will**:

            * Consider the role of the teacher in a CS Principles classroom.
            * Learn about authentic CS practices that students will develop throughout the CS Principles course.
            * Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion.
            * Learn about opportunities to connect with the broader CS community.

            **Suggested Time**: 70 minutes
          student_description: |-
            In this module, you will be introduced to authentic CS practices that students will engage with throughout the CS Principles course. These practices include debugging, using resources, and pair programming. You will also explore the role of the teacher within a CS Principles classroom and make a plan for how you will support student learning while teaching the course.

            **You will**:

            * Consider the role of the teacher in a CS Principles classroom.
            * Learn about authentic CS practices that students will develop throughout the CS Principles course.
            * Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion.
            * Learn about opportunities to connect with the broader CS community.

            **Suggested Time**: 70 minutes
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csp4-2024
        csf-sandbox:
          lessons:
            lesson-1:
              name: Welcome and Intro
            lesson-2:
              name: Course A
            lesson-3:
              name: Course B
            lesson-4:
              name: Course C
            lesson-5:
              name: Course D
            lesson-6:
              name: Course E
            lesson-7:
              name: Course F
            lesson-8:
              name: Next Steps
          lesson_groups: {}
          name: csf-sandbox
          title: CSF Sandbox
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        pl-csd-summer-2024-day1:
          lesson_groups:
            lessonGroup-2:
              display_name: Day 1
          title: Day 1
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: pl-csd-summer-2024-day1
        pl-csd-summer-2024-day2:
          lesson_groups:
            lessonGroup-2:
              display_name: Day 2
          title: Day 2
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: pl-csd-summer-2024-day2
        pl-csd-summer-2024-day3:
          lesson_groups:
            lessonGroup-2:
              display_name: Day 3
          title: Day 3
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: pl-csd-summer-2024-day3
        pl-csd-summer-2024-day4:
          lesson_groups:
            lessonGroup-2:
              display_name: Day 4
          title: Day 4
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: pl-csd-summer-2024-day4
        pl-csd-summer-2024-day5:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Day 5 '
          title: 'Day 5 '
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: pl-csd-summer-2024-day5
        virtual-pl-csd-summer-2024-day1:
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          title: Day 1
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: virtual-pl-csd-summer-2024-day1
        virtual-pl-csd-summer-2024-day2:
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          title: Day 2
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: virtual-pl-csd-summer-2024-day2
        virtual-pl-csd-summer-2024-day3:
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          title: Day 3
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: virtual-pl-csd-summer-2024-day3
        virtual-pl-csd-summer-2024-day4:
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
            lessonGroup-5:
              display_name: Asynchronous Part 2
          title: Day 4
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: virtual-pl-csd-summer-2024-day4
        virtual-pl-csd-summer-2024-day5:
          lesson_groups:
            lessonGroup-2:
              display_name: Synchronous Part 1
            lessonGroup-3:
              display_name: Asynchronous Part 1
            lessonGroup-4:
              display_name: Synchronous Part 2
          title: Day 5
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          name: virtual-pl-csd-summer-2024-day5
        self-paced-pl-microbit1-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          title: Getting Started with Code.org
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-microbit1-2024
        self-paced-pl-microbit2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Preparing to Teach Creating Apps for Devices with micro:bits
          title: Preparing to Teach Creating Apps for Devices (micro:bit)
          description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your micro:bit. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n* Consider the role of the teacher in a computer science classroom.\n\n**Suggested time:** 100 minutes"
          student_description: "**You will:**\n* Get an introduction to Creating Apps for Devices.\n* Set up your micro:bit. \n* Practice key concepts included in the unit.\n* Preview end of chapter projects.\n* Consider the role of the teacher in a computer science classroom.\n\n**Suggested time:** 100 minutes"
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-microbit2-2024
        self-paced-pl-aiml1-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          title: Getting Started with Code.org
          description: |-
            **You will:**

            * Get an introduction to Code.org’s mission.
            * Learn how to navigate the Code.org website and teacher tools.
            * Set up a classroom section.
            * Locate and use course lesson plans and teacher resources.
            * Learn how to access support while teaching Code.org curricula.

            **Suggested time:** 80 minutes
          student_description: |-
            **You will:**

            * Get an introduction to Code.org’s mission.
            * Learn how to navigate the Code.org website and teacher tools.
            * Set up a classroom section.
            * Locate and use course lesson plans and teacher resources.
            * Learn how to access support while teaching Code.org curricula.

            **Suggested time:** 80 minutes
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-aiml1-2024
        self-paced-pl-aiml2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Teaching Artificial Intelligence and Machine Learning '
          title: 'Teaching AI and Machine Learning '
          description: |2-

            **In this professional learning module, you will:**

            * Get an introduction to artificial intelligence and machine learning.
            * Practice key concepts included in the unit.
            * Engage with AI Lab and App Lab.
            * Explore end of chapter projects.
            * Make a plan for implementing the unit with your students.

            **Suggested Time:** 100 minutes
          student_description: |2-

            **In this professional learning module, you will:**

            * Get an introduction to artificial intelligence and machine learning.
            * Practice key concepts included in the unit.
            * Engage with AI Lab and App Lab.
            * Explore end of chapter projects.
            * Make a plan for implementing the unit with your students.

            **Suggested Time:** 100 minutes
          description_short: ''
          description_audience: ''
          lessons: {}
          name: self-paced-pl-aiml2-2024
        self-paced-pl-csd-unit4-1-2024:
          title: Getting Started with Code.org
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit4-1-2024
        self-paced-pl-csd-unit4-2-2024:
          title: Preparing to Teach The Design Process
          description: |-
            This professional learning module is designed to help you prepare to teach Code.org's Design Process unit.

            **In this professional learning module, you will:**

            * Get an introduction to The Design Process.
            * Practice key concepts included in the unit.
            * Engage with App Lab.
            * Explore end-of-chapter projects.

            **Suggested time:** 120 minutes
          student_description: |-
            This professional learning module is designed to help you prepare to teach Code.org's Design Process unit.

            **In this professional learning module, you will:**

            * Get an introduction to The Design Process.
            * Practice key concepts included in the unit.
            * Engage with App Lab.
            * Explore end-of-chapter projects.

            **Suggested time:** 120 minutes
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-csd-unit4-2-2024
        k5-onlinepd-2024:
          lesson_groups:
            Implementing and Teaching CS:
              display_name: 'Part I:  Teaching and Implementing Computer Science'
            k5_basic_concepts_1:
              display_name: 'Part II:  Concepts in Courses A - F'
            k5_next_steps_1:
              display_name: 'Part III:  Next Steps'
          title: Teaching Computer Science Fundamentals ('23-'24)
          description: "Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! \n"
          student_description: 'Welcome to Code.org’s free online educator course for CS Fundamentals! '
          description_short: 'Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! '
          description_audience: 'Welcome to Code.org’s free self-paced online educator course for getting started with Computer Science Fundamentals! '
        computer-vision-pilot:
          lessons:
            lesson-1:
              name: Introduction to Computer Vision
            lesson-2:
              name: Empathizing with Users
            lesson-3:
              name: Gathering User Data
            lesson-4:
              name: Data Visualizations
            lesson-5:
              name: User Stories and Problem Statements
            lesson-6:
              name: Pixels and QR Codes
            lesson-7:
              name: Edge Detection
            lesson-8:
              name: Datasets and Models
            lesson-9:
              name: Training Data and Bias
            lesson-10:
              name: Training a Model
            lesson-11:
              name: Impacts of Computer Vision
            lesson-12:
              name: Prototype Development, Part 1
            lesson-13:
              name: Prototype Development, Part 2
            lesson-14:
              name: User Feedback
            lesson-15:
              name: Implementing Feedback
          lesson_groups: {}
          name: computer-vision-pilot
          title: Computer Vision
          description_audience: ''
          description_short: ''
          description: This unit introduces students to the fundamentals, applications, and ethical implications of computer vision technologies. The unit starts with basic concepts and gradually builds up to complex topics, including data collection, model training, prototype development, and the integration of user feedback. Each lesson is designed to enhance students' understanding through hands-on activities and discussions culminating in the development of a prototype. The curriculum emphasizes critical thinking, problem-solving, and ethical considerations, equipping students with the skills to develop and evaluate technology that addresses real-world problems. Through iterative design and user-centered approaches, students not only learn the technical aspects of computer vision but also its impact on society, preparing them to be thoughtful innovators in a rapidly advancing technological landscape.
          student_description: In this unit, you'll dive into how computers interpret and understand visual information from the world around us. You'll start with the basics of how images are captured and processed and move on to more complex topics like training data, model development, and the ethical implications of artificial intelligence. Through a series of interactive lessons, hands-on activities, and project-based learning, you'll get to design your own computer vision app. Along the way, you'll learn not only about the technology itself but also how it can be used responsibly to make a positive impact in various fields like healthcare, automotive, and public safety.
        k5aisandbox-2024:
          lessons:
            lesson-1:
              name: Lesson 1
            lesson-2:
              name: What is AI
            lesson-4:
              name: AI and Machine Learning
            lesson-5:
              name: Code.org's AI Module
            lesson-3:
              name: Next Steps
          lesson_groups: {}
          name: k5aisandbox-2024
          title: K5 AI Sandbox
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        k5gamedesignsandbox-2024:
          lessons:
            lesson-4:
              name: Game Design
            lesson-5:
              name: Variables as Score
            lesson-6:
              name: Environment and Players
            lesson-7:
              name: Game Jam
            lesson-8:
              name: Next Steps
            lesson-9:
              name: Getting Started with Code.org (Optional)
          lesson_groups: {}
          name: k5gamedesignsandbox-2024
          title: K5 Game Design Sandbox
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        coursea-2024:
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
            lessonGroup-5:
              display_name: End of Course Project
          title: Course A (2024)
          description: "Course A offers a computer science curriculum for beginning readers, including Kindergarten students. Students will learn to program using commands like loops and events. The lessons featured in this course also teach students to meaningfully collaborate with others, investigate different problem-solving techniques, persist in the face of challenging tasks, and learn about internet safety. \n\n**New to teaching CS?**\n\nGet started with our [self-paced Professional Learning](https://studio.code.org/s/k5-onlinepd-2023)."
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers.
          description_audience: 'Ages: 4-7'
          lessons: {}
          name: coursea-2024
        courseb-2024:
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_impacts:
              display_name: Impacts of Computing
            csf_events:
              display_name: Events
            lessonGroup-6:
              display_name: End of Course Project
          title: Course B (2024)
          description: |-
            We developed Course B with first graders in mind. While the concepts in Course B parallel those in Course A, students learn more sophisticated unplugged activities and work through a greater variety of puzzles. Students will learn the basics of programming, collaboration techniques, investigation and critical thinking skills, persistence in the face of difficulty, and internet safety. At the end of this course, students create games in the Play Lab programming environment.

            **New to teaching CS?**

            Get started with our [self-paced Professional Learning](https://studio.code.org/s/k5-onlinepd-2023).
          student_description: Learn the basics of computer science and internet safety. At the end of the course, create your very own game or story you can share.
          description_short: An introduction to computer science for pre-readers. Similar to Course A, but with added concept depth.
          description_audience: 'Ages: 5-8'
          lessons: {}
          name: courseb-2024
        coursec-2024:
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
            csf_data:
              display_name: Data
            end_of_course_project:
              display_name: End of Course Project
          title: Course C (2024)
          description: |-
            We developed Course C for students in second grade. Students will create programs with sequencing, loops, and events. They will investigate problem-solving techniques and develop strategies for building positive communities both online and offline. By the end of the course, students will create interactive games that they can share.

            **New to teaching CS?**

            Get started with our [self-paced Professional Learning](https://studio.code.org/s/k5-onlinepd-2023).
          student_description: Create programs with sequencing, loops, and events. Translate your initials into binary, investigate different problem-solving techniques, and learn how to respond to cyberbullying. At the end of the course, create your very own game or story you can share!
          description_short: Learn the basics of computer science and create your own art, stories, and games.
          description_audience: 'Ages: 6-10'
          lessons:
            lesson-3:
              name: Pattern Block Data
          name: coursec-2024
        coursed-2024:
          lesson_groups:
            lessonGroup-6:
              display_name: Digital Citizenship
            csf_sequencing:
              display_name: Sequencing
            csf_events:
              display_name: Events
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            end_of_course_project:
              display_name: End of Course Project
            lessonGroup-7:
              display_name: Computing Systems
          title: Course D (2024)
          description: "We created course D for students in third grade.  The course begins with a review of the concepts found in earlier courses, including loops and events. Afterward, students will develop their understanding of algorithms, nested loops, while loops, conditionals, and more. \n\n**New to teaching CS?**\n\nGet started with our [self-paced Professional Learning](https://studio.code.org/s/k5-onlinepd-2023)."
          student_description: Learn about loops, conditionals, and events. Beyond coding, learn about digital citizenship.
          description_short: Learn about conditional statements. Create your own art, games, and even a dance party.
          description_audience: 'Ages: 7-11'
          lessons:
            lesson-1:
              name: Hardware and Software Skills
          name: coursed-2024
        coursee-2024:
          lesson_groups:
            csf_digcit:
              display_name: Digital Citizenship
            csf_sprites:
              display_name: Sprites
            ramp_up:
              display_name: Variables & Data Analysis
            csf_functions:
              display_name: Functions
            csf_nested_loops:
              display_name: Conditionals
            lessonGroup-7:
              display_name: Impacts of Computing
            end_of_course_project:
              display_name: End of Course Project
          title: Course E (2024)
          description: |-
            We created Course E for students in fourth grade. The course begins with an introduction to the Sprite Lab programming tool. Students will learn to make fun, interactive projects that reinforce what they’ll learn about online safety. Following these lessons, students will engage in more complex coding. Students will learn about nested loops, functions, and conditionals. By the end of the course, students will combine these concepts to solve challenging puzzles. The course ends with an open-ended project where students create a game or drawing.

            **New to teaching CS?**

            Get started with our [self-paced Professional Learning](https://studio.code.org/s/k5-onlinepd-2023).
          student_description: Start coding with algorithms, events, loops, conditionals, and functions! By the end of this course, design and create a game or drawing that you can share with your friends and family.
          description_short: Learn the basics of sprites, nested loops, and functions.
          description_audience: 'Ages: 8-12'
          lessons: {}
          name: coursee-2024
        coursef-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Digital Citizenship
            lessonGroup-3:
              display_name: Sprites
            lessonGroup-4:
              display_name: Variables
            lessonGroup-5:
              display_name: Data and Simulations
            lessonGroup-6:
              display_name: End of Course Project
          title: Course F (2024)
          description: |-
            We created Course F for students in the fifth grade. The course begins by looking at how users make choices in the apps they use. Students then learn to make a variety of Sprite Lab apps that also offer choices for the user. In the later lessons in the course, students will learn about variables in a variety of contexts. Students are given greater autonomy and more choices throughout this course. By the end of the course, students will have created interactive projects to share with their friends and family.

            **New to teaching CS?**

            Get started with our [self-paced Professional Learning](https://studio.code.org/s/k5-onlinepd-2023).
          student_description: Learn to code with sprites and variables, and discuss societal impacts of computing and the internet. By the end of this course, design and create a project you can share with friends and family.
          description_short: Learn all the concepts in Computer Science Fundamentals and create your own art, story or game.
          description_audience: 'Ages: 9-13'
          lessons: {}
          name: coursef-2024
        express-2024:
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_sprites:
              display_name: Sprites
            lessonGroup-9:
              display_name: End of Course Project
            csf_loops:
              display_name: Loops
            csf_conditionals:
              display_name: Conditionals
            csf_functions:
              display_name: Functions
            csf_variables:
              display_name: Variables
            csf_for_loops:
              display_name: For Loops
            end_of_course_project:
              display_name: End of Course Project
            lessonGroup-2:
              display_name: Sprites
            lessonGroup-3:
              display_name: Events
            lessonGroup-4:
              display_name: Loops
            lessonGroup-5:
              display_name: Conditionals
            lessonGroup-6:
              display_name: Functions
            lessonGroup-7:
              display_name: Variables
            lessonGroup-8:
              display_name: For Loops
          title: Express Course (2024)
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          description_short: 'An introduction to computer science: combines the best of our elementary school curriculum for older students.'
          description_audience: 'Ages: 9-18'
          lessons: {}
          name: express-2024
        pre-express-2024:
          lesson_groups:
            csf_sequencing:
              display_name: Sequencing
            csf_loops:
              display_name: Loops
            csf_events:
              display_name: Events
            lessonGroup-2:
              display_name: Sequencing
            lessonGroup-3:
              display_name: Loops
            lessonGroup-4:
              display_name: Events
          title: Pre-reader Express (2024)
          description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          student_description: Learn computer science by trying the lessons below at your own pace! Learn to create computer programs, develop problem-solving skills, and work through fun challenges! Make games and creative projects to share with friends, family, and teachers.
          description_short: 'An introduction to computer science for pre-readers: combines the best of our kindergarten and first grade courses.'
          description_audience: 'Ages: 4-8'
          lessons:
            lesson-1:
              name: Sequencing
          name: pre-express-2024
        gen-ai-foudations-pilot-v1:
          lessons:
            lesson-1:
              name: Introduction to Generative AI
            lesson-2:
              name: Input & Training Data
            lesson-3:
              name: Bias in the Machine
            lesson-4:
              name: Understanding Embeddings
            lesson-5:
              name: 'Embeddings: How They''re Created'
            lesson-6:
              name: Understanding Neural Networks
            lesson-7:
              name: 'Neural Networks: How They''re Trained'
            lesson-8:
              name: Attention Is All You Need
            lesson-9:
              name: Outputs & Probabilities
            lesson-10:
              name: Hallucinations and Fabrications
            lesson-11:
              name: 'Project: Demystifying Generative AI'
          lesson_groups: {}
          name: gen-ai-foudations-pilot-v1
          title: 'Generative AI: Foundations'
          description_audience: ''
          description_short: ''
          description: |-
            ##Unit Overview

            This unit aims to build a foundational understanding of text-based generative AI models, focusing on core concepts over technical skills. Students will demystify generative AI models by exploring their internal structures through the familiar lens of input, storage, process, and output. They will gain insights into how these models represent language, the impact of training data on model performance, and the potential for bias. Using this knowledge they will be presented with scenarios throughout the unit where they can help educate individuals who feel powerless or lack agency in how AI is impacting their lives, or respond to individuals who have only read the hype headlines and offer feedback or criticism based on their knowledge of how these AI systems work.
          student_description: ''
        self-paced-pl-ai-101-mod1:
          lessons:
            lesson-1:
              name: Opening
            lesson-2:
              name: Impact of AI
            lesson-3:
              name: AI in Education
            lesson-4:
              name: AI Literacy
            lesson-5:
              name: Wrap Up
          lesson_groups:
            lessonGroup-2:
              display_name: Introducing AI for Educators
            lessonGroup-3:
              display_name: Impact of AI
            lessonGroup-4:
              display_name: AI in Education
            lessonGroup-5:
              display_name: AI Literacy
            lessonGroup-6:
              display_name: Wrap Up
          name: self-paced-pl-ai-101-mod1
          title: Introducing AI for Educators
          description_audience: ''
          description_short: ''
          description: "This module is designed to introduce you to AI and its impact on your role as an educator. \n\n**You will:**\n\n* Begin to realize the benefits and address the risks of AI in an educational setting.\n* Describe AI Literacy and explain the benefits of AI literacy for both educators and students.\n\n**Suggested time:** 60 minutes"
          student_description: "This module is designed to introduce you to AI and its impact on your role as an educator. \n\n**You will:**\n\n* Begin to realize the benefits and address the risks of AI in an educational setting.\n* Describe AI Literacy and explain the benefits of AI literacy for both educators and students.\n\n**Suggested time:** 60 minutes"
        self-paced-pl-ai-101-mod2:
          lessons:
            lesson-1:
              name: Opening
            lesson-2:
              name: Introduction to AI
            lesson-3:
              name: Large Language Models
            lesson-4:
              name: Applications of AI
            lesson-5:
              name: Wrap Up
          lesson_groups: {}
          name: self-paced-pl-ai-101-mod2
          title: Understanding AI
          description_audience: ''
          description_short: ''
          description: |-
            This module is designed to build your foundational understanding of AI.

            **You will:**

            * Define artificial intelligence and explain its fundamental concepts.
            * Identify common applications of AI in various fields, illustrating its broad impact and potential.

            **Suggested time:** 60 minutes
          student_description: |-
            This module is designed to build your foundational understanding of AI.

            **You will:**

            * Define artificial intelligence and explain its fundamental concepts.
            * Identify common applications of AI in various fields, illustrating its broad impact and potential.

            **Suggested time:** 60 minutes
        self-paced-pl-ai-101-mod3:
          lessons:
            lesson-1:
              name: Opening
            lesson-2:
              name: Guiding AI Use
            lesson-3:
              name: Using LLMs as an Educator
            lesson-4:
              name: Other AI Tools
            lesson-5:
              name: Wrap Up
          lesson_groups: {}
          name: self-paced-pl-ai-101-mod3
          title: Transforming Teaching with AI
          description_audience: ''
          description_short: ''
          description: |-
            This module is designed to help you learn how to use AI to support your role as an educator.

            **You will:**

            * Learn guiding principles when using AI in an educational context.
            * Practice how to effectively use AI tools to support various educational tasks.
            * Assess the suitability of different AI tools and platforms for their specific teaching contexts.

            **Suggested time:** 60 minutes
          student_description: |-
            This module is designed to help you learn how to use AI to support your role as an educator.

            **You will:**

            * Learn guiding principles when using AI in an educational context.
            * Practice how to effectively use AI tools to support various educational tasks.
            * Assess the suitability of different AI tools and platforms for their specific teaching contexts.

            **Suggested time:** 60 minutes
        self-paced-pl-ai-101-mod4:
          lessons:
            lesson-1:
              name: Opening
            lesson-2:
              name: Teaching with AI
            lesson-3:
              name: Universal Design for Learning
            lesson-4:
              name: Teaching about AI
            lesson-5:
              name: Wrap Up
          lesson_groups: {}
          name: self-paced-pl-ai-101-mod4
          title: Bringing AI to the Classroom
          description_audience: ''
          description_short: ''
          description: |-
            This module is designed to help you learn how to bring AI to the students in your classroom.

            **You will:**

            * Critically evaluate AI tools and resources for their applicability and effectiveness in the classroom.
            * Reflect on AI implementation strategies through the lens of Universal Design for Learning and Culturally Responsive Teaching.
            * Explore how you could introduce and integrate AI technologies into your own classroom settings, taking into consideration your specific educational contexts and student needs.
            * Learn about the resources available to teach about AI in your classroom.

            **Suggested time:** 60 minutes
          student_description: |-
            This module is designed to help you learn how to bring AI to the students in your classroom.

            **You will:**

            * Critically evaluate AI tools and resources for their applicability and effectiveness in the classroom.
            * Reflect on AI implementation strategies through the lens of Universal Design for Learning and Culturally Responsive Teaching.
            * Explore how you could introduce and integrate AI technologies into your own classroom settings, taking into consideration your specific educational contexts and student needs.
            * Learn about the resources available to teach about AI in your classroom.

            **Suggested time:** 60 minutes
        self-paced-pl-ai-101-mod5:
          lessons:
            lesson-1:
              name: Opening
            lesson-2:
              name: Misinformation and AI Fiction
            lesson-3:
              name: Algorithmic Bias
            lesson-4:
              name: Data Privacy
            lesson-5:
              name: Wrap Up
          lesson_groups: {}
          name: self-paced-pl-ai-101-mod5
          title: Ensuring a Responsible Approach to AI
          description_audience: ''
          description_short: ''
          description: |-
            This module is designed to help you learn how to ensure that you and your students are using AI responsibly.

            **You will:**
            * Recognize and discuss the ethical considerations and potential biases in AI, especially as they relate to education.
            * Develop and implement responsible AI practices in your teaching, ensuring student safety and data privacy.
            * Revisit the benefits and address the risks of AI in an educational setting.


            **Suggested time:** 60 minutes
          student_description: |-
            This module is designed to help you learn how to ensure that you and your students are using AI responsibly.

            **You will:**
            * Recognize and discuss the ethical considerations and potential biases in AI, especially as they relate to education.
            * Develop and implement responsible AI practices in your teaching, ensuring student safety and data privacy.
            * Revisit the benefits and address the risks of AI in an educational setting.


            **Suggested time:** 60 minutes
        sandbox-coding-with-ai:
          lessons:
            lesson-1:
              name: 'Introduction to Coding with AI '
            lesson-2:
              name: 'Lesson Exploration '
            lesson-3:
              name: Teaching Resources
          lesson_groups: {}
          name: sandbox-coding-with-ai
          title: 'Coding with AI '
          description_audience: ''
          description_short: ''
          description: "\n## Welcome\nWelcome to Code.org's free self-paced online learning for educators to get started teaching with Code.org! After completing this professional learning experience, **you'll be ready to get started teaching Code.org’s Creating AI and Machine Learning unit** with your students.\n\n### Find the learning that works for you\n* **Go at your own pace:** This self-paced learning experience is designed to give you control over your own learning. Suggested times are given for each lesson.  However, we encourage you to **engage with the content at your own pace.**\n\n* **Pick your content:** The content is organized in the suggested progression for teachers new to both Code.org and the Coding with AI unit. However, you can **engage with the content in the order that best meets your needs.** If you are already familiar with the Code.org platform, you might choose to skip Getting Started with Code.org and move straight to Coding with AI Unit. "
          student_description: "## Welcome\nWelcome to Code.org's free self-paced online learning for educators to get started teaching with Code.org! After completing this professional learning experience, **you'll be ready to get started teaching Code.org’s Creating AI and Machine Learning unit** with your students.\n\n### Find the learning that works for you\n* **Go at your own pace:** This self-paced learning experience is designed to give you control over your own learning. Suggested times are given for each lesson.  However, we encourage you to **engage with the content at your own pace.**\n\n* **Pick your content:** The content is organized in the suggested progression for teachers new to both Code.org and the Ai and Machine Learning unit. However, you can **engage with the content in the order that best meets your needs.** If you are already familiar with the Code.org platform, you might choose to skip Getting Started with Code.org and move straight to Preparing to AI an Machine Learning. "
        music-onboard:
          lessons: {}
          lesson_groups: {}
          name: music-onboard
          title: Music Lab Intro
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        musiclab-pdx-test:
          lessons: {}
          lesson_groups: {}
          name: musiclab-pdx-test
          title: 'PDX Playtest for Music Lab '
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        baruch-pilot-v1:
          lessons:
            lesson-1:
              name: Lesson 1
          lesson_groups: {}
          name: baruch-pilot-v1
          title: Baruch Gen AI Pilot
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        grade2-maker-2024:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Emotion Badge with micro:bit - Events
            lessonGroup-3:
              display_name: Calming LEDs with micro:bit - Sequencing and Loops
            lessonGroup-4:
              display_name: Counter with micro:bit - Data and Variables
          name: grade2-maker-2024
          title: Grade 2 - Maker with micro:bit
          description_audience: ''
          description_short: ''
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nNot sure where to begin? Start with the first micro:bit project pathway and work your way through all three pathways, ordered by increasing difficulty. Each of the three pathways has two components. First, students will develop their coding knowledge by completing skill-building lessons from Code.org's CS Fundamentals course. Then, students will go to the micro:bit platform to code their physical computing projects. \n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/microbitmakermodule-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n"
          student_description: ''
        grade3-maker-2024:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Rock, Paper, Scissors with micro:bit - Conditionals and Events
            lessonGroup-3:
              display_name: Activity picker with micro:bit - Conditionals and Text Inputs
            lessonGroup-4:
              display_name: Saving sea turtles with micro:bit - Conditionals
          name: grade3-maker-2024
          title: Grade 3 - Maker with micro:bit
          description_audience: ''
          description_short: ''
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nNot sure where to begin? Start with the first micro:bit project pathway and work your way through all three pathways, ordered by increasing difficulty. Each of the three pathways has two components. First, students will develop their coding knowledge by completing skill-building lessons from Code.org’s CS Fundamentals course. Then, students will go to the micro:bit platform to code their physical computing projects.\n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/microbitmakermodule-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n"
          student_description: ''
        grade4-maker-2024:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Simple Door Alarm Coding with micro:bit - Conditionals
            lessonGroup-3:
              display_name: Tilt alarm with micro:bit - Functions
            lessonGroup-4:
              display_name: Sensory Toy with micro:bit - Events and Designing for Accessibility
          name: grade4-maker-2024
          title: Grade 4 - Maker with micro:bit
          description_audience: ''
          description_short: ''
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nNot sure where to begin? Start with the first micro:bit project pathway and work your way through all three pathways, ordered by increasing difficulty. Each of the three pathways has two components. First, students will develop their coding knowledge by completing skill-building lessons from Code.org’s CS Fundamentals course. Then, students will go to the micro:bit platform to code their physical computing projects.\n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/microbitmakermodule-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n"
          student_description: ''
        grade5-maker-2024:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: micro:bit pet - Conditionals, Events, and Sounds
            lessonGroup-3:
              display_name: Max-min thermometer with micro:bit - Events, Conditionals, and Variables
            lessonGroup-4:
              display_name: Step Counter with micro:bit - Events and Variables
          name: grade5-maker-2024
          title: Grade 5 - Maker with micro:bit
          description_audience: ''
          description_short: ''
          description: "Bring hands-on technology learning to Computer Science with our Maker course, designed around the micro:bit physical computing device. This course bridges the gap between digital and physical worlds, enabling students to transfer their computer programs into real-world applications with the micro:bit. Students will learn fundamental coding principles such as sequencing, loops, conditional logic, and event handling, and they will gain practical experience in how hardware and software can work together.\n\nNot sure where to begin? Start with the first micro:bit project pathway and work your way through all three pathways, ordered by increasing difficulty. Each of the three pathways has two components. First, students will develop their coding knowledge by completing skill-building lessons from Code.org’s CS Fundamentals course. Then, students will go to the micro:bit platform to code their physical computing projects.\n\n**New to micro:bit?** \n\nGet started with our [self-paced Professional Learning](https://studio.code.org/courses/microbitmakermodule-2024). \n\nThis self-paced course covers the following topics: \n- How to use the Code.org curriculum \n- How to setup a classroom on Code.org \n- How to use micro:bits \n- How to use the “Meet your micro:bit” project\n- How to setup a classroom on micro:bit\n- How to assess student learning \n"
          student_description: ''
        k5-ai-data-2024:
          lessons:
            lesson-1:
              name: lesson test
            lesson-5:
              name: Share Your Voice
          lesson_groups: {}
          name: k5-ai-data-2024
          title: How AI Makes Decisions
          description_audience: ''
          description_short: ''
          description: |-
            Dive into the exciting world of artificial intelligence with Code.org’s innovative module, “How AI Makes Decisions,” tailored for upper elementary school students! This module is named to highlight its focus on unraveling the processes that AI systems use to analyze training data and make decisions. In these five lessons, AI concepts are broken down into engaging, age-appropriate lessons that focus on the critical role of data. Students will use Code.org’s AI tools for fun, educational AI experiences while gaining insight into how AI works behind the scenes. Each lesson provides several opportunities for class discussions about AI, bias, and the impact of AI tools on daily life.

            **New to teaching AI?**

            Get started with our [self-paced Professional Learning](https://studio.code.org/courses/elementaryai-2024).
          student_description: ''
        music-tutorial-2024:
          lessons:
            lesson-1:
              name: 'Music Lab Intro Tutorial '
          lesson_groups: {}
          name: music-tutorial-2024
          title: Music Lab Tutorial
          description_audience: ''
          description_short: In this engaging lesson, students use Music Lab to develop coding skills, compose songs, and connect technology with creativity.
          description: In this engaging and interactive lesson, students will dive into the world of music creation through coding. Using Music Lab, a block-based integrated development environment (IDE), learners will discover the power of programming to make their own unique sounds, compose songs, and perform live music. By the end of this lesson, students will not only have developed foundational coding skills but also an appreciation for the interdisciplinary connection between music and technology. All the skills they learn in this tutorial will set them up for success when they get to the [Music Lab project](https://studio.code.org/projects/music/new), which is an open space for students to create any song they'd like!
          student_description: In this engaging lesson, students use Music Lab to develop coding skills, compose songs, and connect technology with creativity.
        sandbox-pl-cv:
          lessons:
            lesson-1:
              name: Introduction to Computer Vision
            lesson-2:
              name: Lesson Exploration
            lesson-3:
              name: Teaching Resources
          lesson_groups: {}
          name: sandbox-pl-cv
          title: ''
          description_audience: ''
          description_short: ''
          description: "## Welcome! \n##### This professional learning module is designed to help you prepare to teach Code.org’s Computer Vision unit.\n\n##### The Computer Vision unit is designed as a standalone unit for 6-12 students that can be integrated seamlessly into any existing curriculum, offering teachers the flexibility to introduce it according to their schedule and educational needs. \n\n### Find the learning that works for you\n* **Go at your own pace:** This self-paced learning experience is designed to give you control over your own learning. Suggested times are given for each lesson.  However, we encourage you to **engage with the content at your own pace.**\n\n* **Pick your content:** The content is organized in the suggested progression for teachers new to both Code.org and the Computer Vision unit. However, you can **engage with the content in the order that best meets your needs.** If you are already familiar with the Code.org platform, you might choose to skip Getting Started with Code.org and move straight to Computer Vision Unit. \n\n\n"
          student_description: "Welcome! This professional learning module is designed to help you prepare to teach Code.org’s Computer Vision unit.\n\nThe Computer Vision unit is designed as a standalone unit for 6-12 students that can be integrated seamlessly into any existing curriculum, offering teachers the flexibility to introduce it according to their schedule and educational needs. \n\nIn this module, you will: \nGet an introduction to Teaching Computer Vision\nDefine and identify different uses of computer vision\nUtilize the design process to solve problems\nExplore Computer Vision lessons\n"
        gen-ai-customizing-pilot-v1:
          lessons:
            lesson-1:
              name: Foundations in a Day
            lesson-2:
              name: Interacting with Language Models
            lesson-3:
              name: System Prompting - Exploration
            lesson-4:
              name: System Prompting - Practice
            lesson-5:
              name: System Prompting - Synthesis
            lesson-6:
              name: Retrieval - Exploration
            lesson-7:
              name: Retrieval - Practice
            lesson-8:
              name: Retrieval - Synthesis
            lesson-9:
              name: Fine Tuning - Exploration
            lesson-10:
              name: Model Cards
            lesson-11:
              name: Chatbots in Society
            lesson-12:
              name: 'Project: Make your own Chatbot'
            lesson-13:
              name: Model Cards - Practice
          lesson_groups:
            lessonGroup-2:
              display_name: Foundations of Generative AI
            lessonGroup-3:
              display_name: Customizing Language Models
          name: gen-ai-customizing-pilot-v1
          title: Customizing Language Models
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        elem-game-design-2024:
          lessons: {}
          lesson_groups: {}
          name: elem-game-design-2024
          title: Elementary Game Design
          description_audience: ''
          description_short: ''
          description: |2-

            The Game Design module provides an exciting introduction to creating and codng games using Sprite Lab, a block-based programming environment.  In the first lesson, students will learn the basics of creating and animating sprites and making them interactive. The second lesson introduces variables, teaching students how to use them for tracking and modifying game elements like scores. The third lesson dives into game mechanics, focusing on player movement, obstacles, and win/lose conditions. The fourth lesson is a Game Jam where students collaboratively design and code a game based on a randomly generated theme. The final lesson emphasizes user feedback and data-driven improvements, enabling students to refine their games and enhance the player experience.

            **New to teaching Game Design?**

            Get started with our [self-paced Professional Learning](https://studio.code.org/courses/3-5gamedesign-2024).
          student_description: ''
        gettingstarted-k5:
          lessons:
            lesson-1:
              name: test
            lesson-2:
              name: t
          lesson_groups: {}
          name: gettingstarted-k5
          title: 'Getting Started with Code.org '
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
        data-science-playground:
          lessons:
            lesson-1:
              name: Performance Tasks
            lesson-2:
              name: 'Lesson 2: Making Sense of Data'
            lesson-3:
              name: Crafting Effective Questions From Data
            lesson-4:
              name: Cleaning Data
            lesson-5:
              name: Python Lab Playground
          lesson_groups: {}
          name: data-science-playground
          title: Data Science Playground!
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        for-screenshots-only:
          lessons:
            lesson-1:
              name: Lesson 1
            lesson-2:
              name: Lesson 2
            lesson-3:
              name: Lesson 3
          lesson_groups: {}
          name: for-screenshots-only
          title: Customizing Generative AI
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        problem-solving-computing-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: 'Chapter 2: Computers and Problem Solving'
            lessonGroup-4:
              display_name: Alternative Lessons
          title: Problem Solving and Computing ('24-'25)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter presents computers as machines that solve information problems. Students begin by building a common definition for a computer that focuses on functionality instead of specific hardware. They then explore the ways that computers approach problems. For their final project, students propose an app that could be used to solve a problem of their choosing.\n\n**Goals:\n* Identify the defined characteristics of a computer and how it is used to solve information problems. \n* Use a structured problem solving process to design solutions that use computing technology. \n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering. \n\n**Big Questions:** \n* How do computers help people to solve problems?\n* How do people and computers approach problems differently?\n* What does a computer need from people in order to solve problems effectively?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
          description_short: Learn how humans work with computers to solve problems.
          description_audience: ''
          lessons: {}
          name: problem-solving-computing-2024
        web-development-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
          title: Web Development ('24-'25)
          description: "In Web Development, students are put in the shoes of a web developer and empowered to design and create a web page to meet a user’s needs. As students develop the pages and begin to see themselves as web developers and designers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem-solving related to programming while learning valuable skills such as debugging, using resources, and teamwork. At the conclusion of chapter one, students will design and create a web page for a user. After chapter two, students will have worked with a team to create a multi-page website they can publish and share. \n\n::: details [**Chapter 1 Overview**]\n**Description:** Students work as web developers to design and develop web pages to meet users' needs. Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page and CSS to design and organize the content. They also explore the privacy and intellectual property implications of publishing web pages online.\n\n**Goals:**\n* Create digital artifacts that use multiple computer languages to control the structure and style of their content.\n* Create a web page to meet a user's needs.\n* Use different programming languages to solve different problems.\n* Examine their role and responsibilities as creators and consumers of digital media.\n\n**Big Questions:**\n* How do web developers create web pages for users?\n* How can text communicate a web page's content, structure, and style?\n* How do I safely and appropriately create content for the Internet?\n* What strategies can I use when coding to find and fix issues?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.\n\n**Goals:**\n* Create digital artifacts that use multiple computer languages to control the structure and style of their content.\n* Create a website that solves a problem.\n* Use different programming languages to solve different problems.\n* Examine their role and responsibilities as both creators and consumers of digital media.\n\n**Big Questions:**\n* How can websites be used to address problems in the world?\n* What strategies can teams use to work better together?\n* How do I know what information can be trusted online?\n:::\n\n\n::: details [**Implementation Guidance for Web Development**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll step into the shoes of a web developer and learn how to design and create web pages for a user. You’ll learn how to structure and style your user's pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
          description_short: " Learn to build your own web site in Web Lab."
          description_audience: ''
          lessons: {}
          name: web-development-2024
        interactive-games-animations-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Images and Animations'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Games'
            lessonGroup-4:
              display_name: Survey
          title: Interactive Animations and Games ('24-'25)
          description: "In the Interactive Animations and Games unit, students create programmatic images, animations, interactive art, and games. Starting off with simple, primitive shapes and building up to more sophisticated sprite-based games, students become familiar with the programming concepts and the design process computer scientists use daily. They then learn how these simpler constructs can be combined to create more complex programs. In the final project, students develop a personalized, interactive program.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students build up toward programming interactive animations in the Game Lab environment.  They begin with simple shapes and sprite objects, then use loops to create flipbook style animations.  Next, they learn to use booleans and conditionals to respond to user input.  At the end of the chapter, students design and create an interactive animation that they can share with the world.\n\n**Goals:**\n* Create an interactive animation that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* View yourself as a computer programmer, and see programming as a fun and creative form of expression.\n\n\n**Big Questions:**\n* What is a computer program?\n* What are the core features of most programming languages?\n* How does programming enable creativity and individual expression?\n* What practices and strategies will help me as I write programs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter students combine the constructs that they learned in the first chapter to program more complex movement and collisions in their sprites.  As they create more complex programs, they begin to use functions to organize their code.  In the end, students use a design process to create an original game.\n\n**Goals:**\n* Create an interactive game that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* Work with others to break down programming projects using sprites and functions.\n\n**Big Questions:**\n* How do software developers manage complexity and scale?\n* How can programs be organized so that common problems only need to be solved once?\n* How can I build on previous solutions to create even more complex behavior?\n:::\n\n::: details [**Implementation Guidance for Interactive Animations and Games**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          description_short: Learn to program animations, interactive art, and games in Game Lab.
          description_audience: ''
          lessons: {}
          name: interactive-games-animations-2024
        design-process-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: User Centered Design'
            lessonGroup-3:
              display_name: 'Chapter 2: App Prototyping'
            lessonGroup-4:
              display_name: Survey
          title: The Design Process ('24-'25)
          description: "The Design Process unit transitions students from thinking about computer science as a tool to solve their own problems towards considering the broader social impacts of computing. Through a series of design challenges, students are asked to consider and understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which students have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test their solutions with real users to get feedback and drive further iteration.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter introduces the design process as a specific version of the problem solving process in which empathy for a user's needs is consistently integrated. Students learn strategies for identifying user needs and assessing how well different designs address them. In particular they learn how to develop a paper prototype, how to gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps.\n\n**Goals:** \n* See the design process as a form of problem solving that prioritizes the needs of a user. \n* Identify user needs and assess how well different designs address them. \n* Develop paper prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n\n**Big Questions:**\n* How do designers identify the needs of their user?\n* How can we ensure that a user's needs are met by our designs?\n* What processes will best allow us to efficiently create, test, and iterate upon our designs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter is focused on a long running group project that allows students to apply all they've learned about User-Centered Design to develop an app prototype. Working in teams, students identify a social issue that they care about and design and prototype an app to address that issue. This is an opportunity for students to explore other roles in software development, such as product management, marketing, design, and testing.\n\n\n**Goals:**\n* Develop digital prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n* Understand other roles in software development, such as product management, marketing, design, and testing, and how to use what they have learned about computer science as a tool for social impact.\n\n**Big Questions:**\n* How do teams effectively work together to develop software?\n* What roles beyond programming are necessary to design and develop software?\n* How do designers incorporate feedback into multiple iterations of a product?\n:::\n\n::: details [**Implementation Guidance for The Design Process**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          description_short: Learn how to design a program that meets the needs of your users.
          description_audience: ''
          lessons: {}
          name: design-process-2024
        data-society-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Representing Information'
            lessonGroup-3:
              display_name: 'Chapter 2: Solving Data Problems'
            lessonGroup-4:
              display_name: Survey
          title: Data and Society ('24-'25)
          description: "The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter focuses on data representation and its role in solving information problems.  Students learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.  For the chapter project, students represent their perfect day in a binary punch card and trade with classmates to decipher.\n\n\n**Goals:**\n* Understand the role of data and data representation in solving information problems. \n* Explain the necessary components of any data representation scheme, as well as the particulars of binary and the common ways that various types of simple and complex data are represented in binary code. \n\n\n**Big Questions:**\n* Why is representation important in problem solving?\n* What features does a representation system need to be useful?\n* What is necessary to create usable binary representation systems?\n* How can we combine systems together to get more complex information?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students explore how data can be used to answer interesting questions and solve problems.  Using a modified version of the general Problem Solving Process, students look at how computers and humans use data differently and the pros and cons of automating problem solving.  After learning ways that computers use data in the real world, students choose their own problem and use data to address it.\n\n\n**Goals:**\n* Investigate and understand how humans and computers use data differently.\n* Design and implement a data-based solution to a given problem and determine how the different aspects of the problem solving process could be automated.\n\n\n\n**Big Questions:**\n* How does data help us to solve problems?\n* How do computers and humans use data differently?\n* What parts of the data problem solving process can be automated?\n* What kinds of problems do computers use data to solve in the real world?\n\n:::\n\n\n::: details [**Implementation Guidance for Data and Society**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          description_short: Learn how people use computers to solve data problems.
          description_audience: ''
          lessons: {}
          name: data-society-2024
        devices-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
            lessonGroup-5:
              display_name: Survey
          title: Creating Apps with Devices - Circuit Playground ('24-'25)
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [Creating Apps with Devices - micro:bit unit](/s/microbit). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          description_short: ''
          description_audience: ''
          lessons: {}
          name: devices-2024
        microbit-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
            lessonGroup-5:
              display_name: Survey
          title: Creating Apps with Devices (micro:bit) ('24-'25)
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/devices). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Inputs and Outputs Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Building Physical Prototypes Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n&nbsp;\n&nbsp;\n&nbsp;"
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
          description_short: ''
          description_audience: ''
          lessons: {}
          name: microbit-2024
        aiml-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Intro to App Lab
            lessonGroup-3:
              display_name: Chapter 1
            lessonGroup-4:
              display_name: Chapter 2
            lessonGroup-5:
              display_name: Survey
          title: AI and Machine Learning ('24-'25)
          description: "This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students learn the basics of machine learning and use a tool called AI Lab to create machine learning models that can be used in App Lab. The unit starts with an overview of machine learning and how computers can use patterns in data to make decisions and predictions. Then, students learn how to use AI Lab to train models from tabular data while exploring issues of bias. Lessons follow a repeating \"unplugged - AI Lab - App Lab\" pattern so students are continually exposed to the concepts and tools of machine learning. The chapter culminates in a project where students select from a set of real-world datasets to train a machine learning model and create an app.\n\n\n**Goals:**\n* Create a machine learning model in AI Lab to solve a problem, and use App Lab to create an app that uses their model. \n* Understand how machine learning models make decisions from data\n\n\n**Big Questions:**\n- How does machine learning find patterns in data to make decisions?\n- How can we avoid bias when training a machine learning model?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter prepares students to be machine learning scientists to create an app that addresses an issue in their community. Students follow along with a fictional group of students as they define an issue, develop a survey to collect data, analyze their data in AI Lab, create a model card, and create an app to solve their problem. Then, in the final project, students repeat these same steps with an issue they care about in their community.\n\n**Goals:**\n* Create machine learning models in AI Lab  from their own data and use App Lab to create an app that uses their model to solve problems in their community. \n\n\n**Big Questions:**\n- How can machine learning be used to solve problems in our community?\n\n:::\n\n\n::: details [**Implementation Guidance for the AI and Machine Learning Unit**]\n\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-aiml-2024). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: |-
            This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop your own machine learning projects around real-world data. The unit culminates with designing your own machine learning app to solve a personally relevant problem.

            **Looking to teach this unit?** [Click here to view the lesson plans for these lessons](/s/aiml-2023?viewAs=Instructor)
          description_short: Learn to about Artificial Intelligence and Machine Learning.
          description_audience: ''
          lessons: {}
          name: aiml-2024
        fcs1c-beta-2024:
          lesson_groups:
            lessonGroup-5:
              display_name: Survey
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: 'Chapter 2: Computers and Problem Solving'
            lessonGroup-4:
              display_name: Alternative Lessons
          title: Unit 1C - (Option C) Problem Solving and Computing
          description: |-
            This unit is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. Students practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, they learn how computers input, output, store, and process information to help humans solve problems. The unit concludes with a project in which they design an application that helps solve a problem of their choosing.

            ⚠️ This unit is a non-device alternative to Options A and B. If you are unable to obtain micro:bits or Circuit Playgrounds, you can use this unit to introduce the same concepts.
          student_description: 'This unit is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems. The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
          description_short: ''
          description_audience: ''
          lessons: {}
          name: fcs1c-beta-2024
        data-science-2024-pilot:
          lessons:
            lesson-13:
              name: Chapter 1 Pre-Assessment
            lesson-1:
              name: Introduction to Data Science
            lesson-2:
              name: Data Organization and Storage
            lesson-3:
              name: Ethical Data Collection
            lesson-4:
              name: Data Rights
            lesson-5:
              name: Formulating Questions for Data Analysis
            lesson-6:
              name: Data Storytelling
            lesson-7:
              name: Data Interpretation
            lesson-8:
              name: Data Cleaning and Analysis Techniques
            lesson-9:
              name: Introduction to Data Visualization
            lesson-10:
              name: Data Visualizations and Filtering
            lesson-11:
              name: Project
            lesson-12:
              name: Assessment Day
            lesson-14:
              name: Chapter 2 Pre-Assessment
            lesson-15:
              name: Project Kickoff
            lesson-16:
              name: Introduction to Python
            lesson-17:
              name: Introduction to Pandas
            lesson-18:
              name: Getting to Know Your Data
            lesson-19:
              name: Accessing and Grouping Values
            lesson-20:
              name: Cleaning Data
            lesson-21:
              name: Introduction to Matplotlib
            lesson-22:
              name: More Visualization Types
            lesson-23:
              name: Exploratory Data Analysis
            lesson-24:
              name: Querying Your Data
            lesson-25:
              name: Project
            lesson-26:
              name: Assessment Day
          lesson_groups:
            lessonGroup-2:
              display_name: Chapter 1
            lessonGroup-3:
              display_name: Chapter 2
          name: data-science-2024-pilot
          title: Data Science
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        focus-on-coding1-2024:
          lesson_groups:
            lessonGroup-4:
              display_name: Survey
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: Alternative Lessons
          title: Unit 1 - Problem Solving and Computing ('24-'25)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
          description_short: Learn how humans work with computers to solve problems.
          description_audience: ''
          lessons: {}
          name: focus-on-coding1-2024
        focus-on-coding2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
          title: Unit 2 - Web Development ('24-'25)
          description: "In Web Development, students are put in the shoes of a web developer and empowered to design and create a web page to meet a user’s needs. As students develop the pages and begin to see themselves as web developers and designers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem-solving related to programming while learning valuable skills such as debugging, using resources, and teamwork. At the conclusion of chapter one, students will design and create a web page for a user. After chapter two, students will have worked with a team to create a multi-page website they can publish and share. \n\n::: details [**Chapter 1 Overview**]\n**Description:** Students work as web developers to design and develop web pages to meet users' needs. Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page and CSS to design and organize the content. They also explore the privacy and intellectual property implications of publishing web pages online.\n\n**Goals:**\n* Create digital artifacts that use multiple computer languages to control the structure and style of their content.\n* Create a web page to meet a user's needs.\n* Use different programming languages to solve different problems.\n* Examine their role and responsibilities as creators and consumers of digital media.\n\n**Big Questions:**\n* How do web developers create web pages for users?\n* How can text communicate a web page's content, structure, and style?\n* How do I safely and appropriately create content for the Internet?\n* What strategies can I use when coding to find and fix issues?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.\n\n**Goals:**\n* Create digital artifacts that use multiple computer languages to control the structure and style of their content.\n* Create a website that solves a problem.\n* Use different programming languages to solve different problems.\n* Examine their role and responsibilities as both creators and consumers of digital media.\n\n**Big Questions:**\n* How can websites be used to address problems in the world?\n* What strategies can teams use to work better together?\n* How do I know what information can be trusted online?\n:::\n\n\n::: details [**Implementation Guidance for Web Development**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll step into the shoes of a web developer and learn how to design and create web pages for a user. You’ll learn how to structure and style your user's pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
          description_short: " Learn to build your own web site in Web Lab."
          description_audience: ''
          lessons: {}
          name: focus-on-coding2-2024
        focus-on-coding3-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Images and Animations'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Games'
          title: Unit 3 - Interactive Animations and Games ('24-'25)
          description: "In the Interactive Animations and Games unit, students create programmatic images, animations, interactive art, and games. Starting off with simple, primitive shapes and building up to more sophisticated sprite-based games, students become familiar with the programming concepts and the design process computer scientists use daily. They then learn how these simpler constructs can be combined to create more complex programs. In the final project, students develop a personalized, interactive program.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students build up toward programming interactive animations in the Game Lab environment.  They begin with simple shapes and sprite objects, then use loops to create flipbook style animations.  Next, they learn to use booleans and conditionals to respond to user input.  At the end of the chapter, students design and create an interactive animation that they can share with the world.\n\n**Goals:**\n* Create an interactive animation that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* View yourself as a computer programmer, and see programming as a fun and creative form of expression.\n\n\n**Big Questions:**\n* What is a computer program?\n* What are the core features of most programming languages?\n* How does programming enable creativity and individual expression?\n* What practices and strategies will help me as I write programs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter students combine the constructs that they learned in the first chapter to program more complex movement and collisions in their sprites.  As they create more complex programs, they begin to use functions to organize their code.  In the end, students use a design process to create an original game.\n\n**Goals:**\n* Create an interactive game that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* Work with others to break down programming projects using sprites and functions.\n\n**Big Questions:**\n* How do software developers manage complexity and scale?\n* How can programs be organized so that common problems only need to be solved once?\n* How can I build on previous solutions to create even more complex behavior?\n:::\n\n::: details [**Implementation Guidance for Interactive Animations and Games**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          description_short: Learn to program animations, interactive art, and games in Game Lab.
          description_audience: ''
          lessons: {}
          name: focus-on-coding3-2024
        focus-on-coding4a-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
          title: Unit 4A - (Option A) Creating Apps with Devices - Circuit Playground ('24-'25)
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [(Option B) Creating Apps with Devices unit](/s/focus-on-coding4b-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          description_short: Learn to program with physical devices.
          description_audience: ''
          lessons: {}
          name: focus-on-coding4a-2024
        focus-on-coding4b-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
          title: 'Unit 4B - Creating Apps with Devices (micro:bit) '
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/focus-on-coding4a-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices (micro:bit) Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
          description_short: ''
          description_audience: ''
          lessons: {}
          name: focus-on-coding4b-2024
        focus-on-coding-post-survey-2024:
          title: Post-Course Survey
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: focus-on-coding-post-survey-2024
        focus-on-creativity1-2024:
          lesson_groups:
            lessonGroup-4:
              display_name: Survey
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: Alternative Lessons
          title: Unit 1 - Problem Solving and Computing ('24-'25)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
          description_short: Learn how humans work with computers to solve problems.
          description_audience: ''
          lessons: {}
          name: focus-on-creativity1-2024
        focus-on-creativity2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
          title: Unit 2 - Web Development ('24-'25)
          description: "In Web Development, students are put in the shoes of a web developer and empowered to design and create a web page to meet a user’s needs. As students develop the pages and begin to see themselves as web developers and designers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem-solving related to programming while learning valuable skills such as debugging, using resources, and teamwork. At the conclusion of chapter one, students will design and create a web page for a user. After chapter two, students will have worked with a team to create a multi-page website they can publish and share. \n\n::: details [**Chapter 1 Overview**]\n**Description:** Students work as web developers to design and develop web pages to meet users' needs. Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page and CSS to design and organize the content. They also explore the privacy and intellectual property implications of publishing web pages online.\n\n**Goals:**\n* Create digital artifacts that use multiple computer languages to control the structure and style of their content.\n* Create a web page to meet a user's needs.\n* Use different programming languages to solve different problems.\n* Examine their role and responsibilities as creators and consumers of digital media.\n\n**Big Questions:**\n* How do web developers create web pages for users?\n* How can text communicate a web page's content, structure, and style?\n* How do I safely and appropriately create content for the Internet?\n* What strategies can I use when coding to find and fix issues?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.\n\n**Goals:**\n* Create digital artifacts that use multiple computer languages to control the structure and style of their content.\n* Create a website that solves a problem.\n* Use different programming languages to solve different problems.\n* Examine their role and responsibilities as both creators and consumers of digital media.\n\n**Big Questions:**\n* How can websites be used to address problems in the world?\n* What strategies can teams use to work better together?\n* How do I know what information can be trusted online?\n:::\n\n\n::: details [**Implementation Guidance for Web Development**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll step into the shoes of a web developer and learn how to design and create web pages for a user. You’ll learn how to structure and style your user's pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
          description_short: " Learn to build your own web site in Web Lab."
          description_audience: ''
          lessons: {}
          name: focus-on-creativity2-2024
        focus-on-creativity3-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Images and Animations'
            lessonGroup-3:
              display_name: 'Chapter 2: Building Games'
          title: Unit 3 - Interactive Animations and Games ('24-'25)
          description: "In the Interactive Animations and Games unit, students create programmatic images, animations, interactive art, and games. Starting off with simple, primitive shapes and building up to more sophisticated sprite-based games, students become familiar with the programming concepts and the design process computer scientists use daily. They then learn how these simpler constructs can be combined to create more complex programs. In the final project, students develop a personalized, interactive program.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students build up toward programming interactive animations in the Game Lab environment.  They begin with simple shapes and sprite objects, then use loops to create flipbook style animations.  Next, they learn to use booleans and conditionals to respond to user input.  At the end of the chapter, students design and create an interactive animation that they can share with the world.\n\n**Goals:**\n* Create an interactive animation that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* View yourself as a computer programmer, and see programming as a fun and creative form of expression.\n\n\n**Big Questions:**\n* What is a computer program?\n* What are the core features of most programming languages?\n* How does programming enable creativity and individual expression?\n* What practices and strategies will help me as I write programs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter students combine the constructs that they learned in the first chapter to program more complex movement and collisions in their sprites.  As they create more complex programs, they begin to use functions to organize their code.  In the end, students use a design process to create an original game.\n\n**Goals:**\n* Create an interactive game that includes basic programming concepts such as control structures, variables, user input, and randomness. \n* Give and respond constructively to peer feedback, and work with their teammates to complete a project. \n* Work with others to break down programming projects using sprites and functions.\n\n**Big Questions:**\n* How do software developers manage complexity and scale?\n* How can programs be organized so that common problems only need to be solved once?\n* How can I build on previous solutions to create even more complex behavior?\n:::\n\n::: details [**Implementation Guidance for Interactive Animations and Games**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll build on your coding experience as you program animations, interactive art, and games in Game Lab. The unit starts off with simple shapes and builds up to more sophisticated sprite-based games, using the same programming concepts and the design process computer scientists use daily. In the final project, you’ll develop a personalized, interactive program."
          description_short: Learn to program animations, interactive art, and games in Game Lab.
          description_audience: ''
          lessons: {}
          name: focus-on-creativity3-2024
        focus-on-creativity4a-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
          title: Unit 4A - (Option A) Creating Apps with Devices - Circuit Playground ('24-'25)
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [(Option B) Creating Apps with Devices unit](/s/focus-on-creativity4b-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          description_short: Learn to program with physical devices.
          description_audience: ''
          lessons: {}
          name: focus-on-creativity4a-2024
        focus-on-creativity4b-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
          title: Unit 4B - (Option B) Creating Apps with Devices (micro:bit)
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/focus-on-creativity4a-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices (micro:bit) Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
          description_short: ''
          description_audience: ''
          lessons: {}
          name: focus-on-creativity4b-2024
        focus-on-creativity-post-survey-2024:
          title: Post-Course Survey
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: focus-on-creativity-post-survey-2024
        focus-on-hardware1-2024:
          lesson_groups:
            lessonGroup-5:
              display_name: Survey
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: 'Chapter 2: Computers and Problem Solving'
            lessonGroup-4:
              display_name: Alternative Lessons
          title: Unit 1 - Problem Solving and Computing ('24-'25)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter presents computers as machines that solve information problems. Students begin by building a common definition for a computer that focuses on functionality instead of specific hardware. They then explore the ways that computers approach problems. For their final project, students propose an app that could be used to solve a problem of their choosing.\n\n**Goals:\n* Identify the defined characteristics of a computer and how it is used to solve information problems. \n* Use a structured problem solving process to design solutions that use computing technology. \n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering. \n\n**Big Questions:** \n* How do computers help people to solve problems?\n* How do people and computers approach problems differently?\n* What does a computer need from people in order to solve problems effectively?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went.\n"
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
          description_short: Learn how humans work with computers to solve problems.
          description_audience: ''
          lessons: {}
          name: focus-on-hardware1-2024
        focus-on-hardware2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Representing Information'
          title: Unit 2 - Data and Society ('24-'25)
          description: "The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter focuses on data representation and its role in solving information problems.  Students learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.  For the chapter project, students represent their perfect day in a binary punch card and trade with classmates to decipher.\n\n\n**Goals:**\n* Understand the role of data and data representation in solving information problems. \n* Explain the necessary components of any data representation scheme, as well as the particulars of binary and the common ways that various types of simple and complex data are represented in binary code. \n\n\n**Big Questions:**\n* Why is representation important in problem solving?\n* What features does a representation system need to be useful?\n* What is necessary to create usable binary representation systems?\n* How can we combine systems together to get more complex information?\n\n:::\n\n\n::: details [**Implementation Guidance for Data and Society**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          description_short: Learn how people use computers to solve data problems.
          description_audience: ''
          lessons: {}
          name: focus-on-hardware2-2024
        focus-on-hardware3a-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
          title: Unit 3a - (Option A) Creating Apps with Devices - Circuit Playground ('24-'25)
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [(Option B) Creating Apps with Devices unit](/s/focus-on-hardware3b-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          description_short: Learn to program with physical devices.
          description_audience: ''
          lessons: {}
          name: focus-on-hardware3a-2024
        focus-on-hardware3b-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
          title: Unit 3B - (Option B) Creating Apps with Devices (micro:bit)  ('24-'25)
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/focus-on-hardware3a-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices (micro:bit) Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
          description_short: ''
          description_audience: ''
          lessons: {}
          name: focus-on-hardware3b-2024
        focus-on-hardware-post-survey-2024:
          title: Post-Course Survey
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: focus-on-hardware-post-survey-2024
        focus-on-design-with-purpose1-2024:
          lesson_groups:
            lessonGroup-4:
              display_name: Survey
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: Alternative Lessons
          title: Unit 1 - Problem Solving and Computing ('24-'25)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went.\n"
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
          description_short: Learn how humans work with computers to solve problems.
          description_audience: ''
          lessons: {}
          name: focus-on-design-with-purpose1-2024
        focus-on-design-with-purpose2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Creating Webpages'
            lessonGroup-3:
              display_name: 'Chapter 2: Multi-page Websites'
          title: Unit 2 - Web Development ('24-'25)
          description: "In Web Development, students are put in the shoes of a web developer and empowered to design and create a web page to meet a user’s needs. As students develop the pages and begin to see themselves as web developers and designers, they are encouraged to think critically about the impact of sharing information online and how to be more critical consumers of content. They are also introduced to problem-solving related to programming while learning valuable skills such as debugging, using resources, and teamwork. At the conclusion of chapter one, students will design and create a web page for a user. After chapter two, students will have worked with a team to create a multi-page website they can publish and share. \n\n::: details [**Chapter 1 Overview**]\n**Description:** Students work as web developers to design and develop web pages to meet users' needs. Focusing on the tags, keywords, and syntax used to communicate instructions to the computer, students use HTML to structure the content of a web page and CSS to design and organize the content. They also explore the privacy and intellectual property implications of publishing web pages online.\n\n**Goals:**\n* Create digital artifacts that use multiple computer languages to control the structure and style of their content.\n* Create a web page to meet a user's needs.\n* Use different programming languages to solve different problems.\n* Examine their role and responsibilities as creators and consumers of digital media.\n\n**Big Questions:**\n* How do web developers create web pages for users?\n* How can text communicate a web page's content, structure, and style?\n* How do I safely and appropriately create content for the Internet?\n* What strategies can I use when coding to find and fix issues?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students expand their ideas of websites beyond personal expression and begin to see them as a way to solve problems.  Students build on their collaborative skills and work in teams to create multi-page websites that solve a problem.\n\n**Goals:**\n* Create digital artifacts that use multiple computer languages to control the structure and style of their content.\n* Create a website that solves a problem.\n* Use different programming languages to solve different problems.\n* Examine their role and responsibilities as both creators and consumers of digital media.\n\n**Big Questions:**\n* How can websites be used to address problems in the world?\n* What strategies can teams use to work better together?\n* How do I know what information can be trusted online?\n:::\n\n\n::: details [**Implementation Guidance for Web Development**]\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went."
          student_description: " In this unit, you’ll step into the shoes of a web developer and learn how to design and create web pages for a user. You’ll learn how to structure and style your user's pages using HTML and CSS. You’ll also practice valuable programming skills such as debugging, using resources, and teamwork.  "
          description_short: " Learn to build your own web site in Web Lab."
          description_audience: ''
          lessons: {}
          name: focus-on-design-with-purpose2-2024
        focus-on-design-with-purpose3-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: User Centered Design'
            lessonGroup-3:
              display_name: 'Chapter 2: App Prototyping'
          title: Unit 3 - The Design Process ('24-'25)
          description: "The Design Process unit transitions students from thinking about computer science as a tool to solve their own problems towards considering the broader social impacts of computing. Through a series of design challenges, students are asked to consider and understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which students have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test their solutions with real users to get feedback and drive further iteration.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter introduces the design process as a specific version of the problem solving process in which empathy for a user's needs is consistently integrated. Students learn strategies for identifying user needs and assessing how well different designs address them. In particular they learn how to develop a paper prototype, how to gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps.\n\n**Goals:** \n* See the design process as a form of problem solving that prioritizes the needs of a user. \n* Identify user needs and assess how well different designs address them. \n* Develop paper prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n\n**Big Questions:**\n* How do designers identify the needs of their user?\n* How can we ensure that a user's needs are met by our designs?\n* What processes will best allow us to efficiently create, test, and iterate upon our designs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter is focused on a long running group project that allows students to apply all they've learned about User-Centered Design to develop an app prototype. Working in teams, students identify a social issue that they care about and design and prototype an app to address that issue. This is an opportunity for students to explore other roles in software development, such as product management, marketing, design, and testing.\n\n\n**Goals:**\n* Develop digital prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n* Understand other roles in software development, such as product management, marketing, design, and testing, and how to use what they have learned about computer science as a tool for social impact.\n\n**Big Questions:**\n* How do teams effectively work together to develop software?\n* What roles beyond programming are necessary to design and develop software?\n* How do designers incorporate feedback into multiple iterations of a product?\n:::\n\n::: details [**Implementation Guidance for The Design Process**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          description_short: Learn how to design a program that meets the needs of your users.
          description_audience: ''
          lessons: {}
          name: focus-on-design-with-purpose3-2024
        focus-on-design-with-purpose4a-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: 'Chapter 1: Inputs and Outputs'
            lessonGroup-4:
              display_name: 'Chapter 2: Building Physical Prototypes'
          title: Unit 4A - (Option A) Creating Apps with Devices - Circuit Playground ('24-'25)
          description: "In the Creating Apps for Devices unit, students explore the role of physical devices in computing. Using App Lab and Adafruit’s Circuit Playground, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **Circuit Playground** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **micro:bit** devices by assigning the [(Option B) Creating Apps with Devices unit](/s/focus-on-design-with-purpose4b-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the circuit playground and an app screen. On their circuit playground, students learn to control inputs like buttons or toggle switches and outputs like the buzzer or LED. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to Circuit Playground's - [click here](https://code.org/maker/circuitplayground) for more information about using Circuit Playground's in your classroom\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-physical-computing). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and Adafruit’s Circuit Playground, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the Circuit Playground as the basis for an innovation of your own design.
          description_short: Learn to program with physical devices.
          description_audience: ''
          lessons: {}
          name: focus-on-design-with-purpose4a-2024
        focus-on-design-with-purpose4b-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Introduction to App Lab
            lessonGroup-3:
              display_name: Inputs and Outputs
            lessonGroup-4:
              display_name: Building Physical Prototypes
          title: Unit 4B - (Option B) Creating Apps with Devices (micro:bit) ('24-'25)
          description: "In the Creating Apps with Devices unit, students explore the role of physical devices in computing. Using App Lab and BBC micro:bit, students develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. Then, students explore how physical devices can be used to react to the world around them using a “maker” mindset to create prototypes with everyday materials.\n\n⚠️ This unit uses the **micro:bit** to introduce physical computing and the \"maker\" mindset. You can also teach this content using **circuit playground** devices by assigning the [Creating Apps with Devices (Circuit Playground) unit](/s/focus-on-design-with-purpose4a-2023). Both units teach the same content and are equivalent - you do not need to buy both sets of devices or teach both units.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This unit emphasizes the interactions between inputs and outputs on the micro:bit and an app screen. On their micro:bit, students learn to control inputs like buttons and outputs like the LED Screen. Students also interact with inputs and outputs in App Lab, such as buttons and text inputs and dropdowns. By the end of the chapter, students will be able to create an app that controls a device, similar to many \"smart\" hardware they may experience in their day-to-day lives.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates physical inputs and outputs with digital apps. \n* Create app prototypes that use a physical device to control a digital app.\n\n\n**Big Questions:**\n- What inputs and outputs are available on a physical device?\n- What inputs and outputs are available on an app?\n- How can we create apps that use a physical device to control a digital app?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** In this chapter, students focus on how their physical device can interact with the outside world. They learn how to use sensors and the accelerometer to react to the physical environment. They learn to attach external LEDs and buttons that extend the types of devices they can make. Throughout the unit, students use physical materials like paper or cardboard to extend the functionality of their devices. By the end of the unit, students will have created an interactive art project and developed a prototype for a physical device that solves a problem.\n\n\n**Goals:**\n* Design and build a physical computing device that integrates sensors with digital apps. \n* Create app prototypes that use a physical device to solve real-world problems.\n* Use physical computing to solve problems in fun and innovative ways.\n\n\n**Big Questions:**\n- How can a physical device use sensors to react to a physical environment?\n- How can simple hardware be used to develop innovative new products?\n\n:::\n\n\n::: details [**Implementation Guidance for Creating Apps with Devices**]\n- This unit requires students to have access to micro:bit devices - [click here for more information about using micro:bit's in your classroom](https://code.org/maker/microbit)\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/preview) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/preview)\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Creating Apps for Devices (micro:bit) Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-microbit). The module is designed to take 2 hours to complete. No previous experience with coding or devices is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: This unit explores the role of hardware platforms in computing and how different sensors can provide more effective input and output than the traditional keyboard, mouse, and monitor. Using App Lab and BBC micro:bit, you’ll develop programs that utilize the same hardware inputs and outputs that you see in the smart devices, looking at how a simple rough prototype can lead to a finished product. The unit concludes with a design challenge to use the micro:bit as the basis for an innovation of your own design.
          description_short: ''
          description_audience: ''
          lessons: {}
          name: focus-on-design-with-purpose4b-2024
        focus-on-design-with-purpose-post-survey-2024:
          title: Post-Course Survey
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: focus-on-design-with-purpose-post-survey-2024
        focus-on-impact-in-society1-2024:
          lesson_groups:
            lessonGroup-4:
              display_name: Survey
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: Alternative Lessons
          title: Problem Solving and Computing ('24-'25)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went.\n"
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
          description_short: Learn how humans work with computers to solve problems.
          description_audience: ''
          lessons: {}
          name: focus-on-impact-in-society1-2024
        focus-on-impact-in-society2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: User Centered Design'
            lessonGroup-3:
              display_name: 'Chapter 2: App Prototyping'
          title: The Design Process ('24-'25)
          description: "The Design Process unit transitions students from thinking about computer science as a tool to solve their own problems towards considering the broader social impacts of computing. Through a series of design challenges, students are asked to consider and understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which students have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test their solutions with real users to get feedback and drive further iteration.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter introduces the design process as a specific version of the problem solving process in which empathy for a user's needs is consistently integrated. Students learn strategies for identifying user needs and assessing how well different designs address them. In particular they learn how to develop a paper prototype, how to gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps.\n\n**Goals:** \n* See the design process as a form of problem solving that prioritizes the needs of a user. \n* Identify user needs and assess how well different designs address them. \n* Develop paper prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n\n**Big Questions:**\n* How do designers identify the needs of their user?\n* How can we ensure that a user's needs are met by our designs?\n* What processes will best allow us to efficiently create, test, and iterate upon our designs?\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter is focused on a long running group project that allows students to apply all they've learned about User-Centered Design to develop an app prototype. Working in teams, students identify a social issue that they care about and design and prototype an app to address that issue. This is an opportunity for students to explore other roles in software development, such as product management, marketing, design, and testing.\n\n\n**Goals:**\n* Develop digital prototypes, gather and respond to feedback about a prototype, and consider ways different user interfaces do or do not affect the usability of their apps. \n* Understand other roles in software development, such as product management, marketing, design, and testing, and how to use what they have learned about computer science as a tool for social impact.\n\n**Big Questions:**\n* How do teams effectively work together to develop software?\n* What roles beyond programming are necessary to design and develop software?\n* How do designers incorporate feedback into multiple iterations of a product?\n:::\n\n::: details [**Implementation Guidance for The Design Process**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=4) to let the Code.org curriculum team know how the unit went."
          student_description: This unit introduces the broader social impacts of computing. Through a series of design challenges, you will learn how to better understand the needs of others while developing a solution to a problem. The second half of the unit consists of an iterative team project, during which teams have the opportunity to identify a need that they care about, prototype solutions both on paper and in App Lab, and test solutions with real users to get feedback and drive further iteration.
          description_short: Learn how to design a program that meets the needs of your users.
          description_audience: ''
          lessons: {}
          name: focus-on-impact-in-society2-2024
        focus-on-impact-in-society3-2024:
          lesson_groups:
            lessonGroup-3:
              display_name: 'Chapter 1: Solving Data Problems'
          title: Data and Society ('24-'25)
          description: |-
            The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.


            ::: details [**Chapter 1 Overview**]
            **Description:** Students explore how data can be used to answer interesting questions and solve problems.  Using a modified version of the general Problem Solving Process, students look at how computers and humans use data differently and the pros and cons of automating problem solving.  After learning ways that computers use data in the real world, students choose their own problem and use data to address it.


            **Goals:**
            * Investigate and understand how humans and computers use data differently.
            * Design and implement a data-based solution to a given problem and determine how the different aspects of the problem solving process could be automated.



            **Big Questions:**
            * How does data help us to solve problems?
            * How do computers and humans use data differently?
            * What parts of the data problem solving process can be automated?
            * What kinds of problems do computers use data to solve in the real world?

            :::


            ::: details [**Implementation Guidance for Data and Society**]
            - You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit
            :::

            ## Finished Teaching This Unit?
            Answer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went.
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          description_short: Learn how people use computers to solve data problems.
          description_audience: ''
          lessons: {}
          name: focus-on-impact-in-society3-2024
        focus-on-impact-in-society4-2024:
          lesson_groups:
            lessonGroup-3:
              display_name: Intro to App Lab
            lessonGroup-2:
              display_name: Chapter 1
            lessonGroup-4:
              display_name: Chapter 2
          title: AI and Machine Learning ('24-'25)
          description: "This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students learn the basics of machine learning and use a tool called AI Lab to create machine learning models that can be used in App Lab. The unit starts with an overview of machine learning and how computers can use patterns in data to make decisions and predictions. Then, students learn how to use AI Lab to train models from tabular data while exploring issues of bias. Lessons follow a repeating \"unplugged - AI Lab - App Lab\" pattern so students are continually exposed to the concepts and tools of machine learning. The chapter culminates in a project where students select from a set of real-world datasets to train a machine learning model and create an app.\n\n\n**Goals:**\n* Create a machine learning model in AI Lab to solve a problem, and use App Lab to create an app that uses their model. \n* Understand how machine learning models make decisions from data\n\n\n**Big Questions:**\n- How does machine learning find patterns in data to make decisions?\n- How can we avoid bias when training a machine learning model?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter prepares students to be machine learning scientists to create an app that addresses an issue in their community. Students follow along with a fictional group of students as they define an issue, develop a survey to collect data, analyze their data in AI Lab, create a model card, and create an app to solve their problem. Then, in the final project, students repeat these same steps with an issue they care about in their community.\n\n**Goals:**\n* Create machine learning models in AI Lab  from their own data and use App Lab to create an app that uses their model to solve problems in their community. \n\n\n**Big Questions:**\n- How can machine learning be used to solve problems in our community?\n\n:::\n\n\n::: details [**Implementation Guidance for the AI and Machine Learning Unit**]\n\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-aiml-2023). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop your own machine learning projects around real-world data. The unit culminates with designing your own machine learning app to solve a personally relevant problem.
          description_short: Learn to about Artificial Intelligence and Machine Learning.
          description_audience: ''
          lessons: {}
          name: focus-on-impact-in-society4-2024
        focus-on-impact-in-society-post-survey-2024:
          title: Post-Course Survey
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: focus-on-impact-in-society-post-survey-2024
        focus-on-data1-2024:
          lesson_groups:
            lessonGroup-4:
              display_name: Survey
            lessonGroup-2:
              display_name: 'Chapter 1: The Problem Solving Process'
            lessonGroup-3:
              display_name: Alternative Lessons
          title: Problem Solving and Computing ('24-'25)
          description: "Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing. \n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter guides students to develop and adopt a more formal structured problem solving process by reflecting on problems they have problems they have encountered, both in the classroom and everyday life. By working through a diverse set of problems, such as logic puzzles, engineering challenges, and planning a trip, students learn to identify different classes of problems, decompose large problems, and develop their personal problem solving skills.\n\n**Goals:**\n* Learn how to use a structured problem solving process and apply it to address various problems.\n* Create a collaborative classroom environment where students view computer science as relevant, fun, and empowering.\n\n\n**Big Questions:** \n* What strategies and processes can I use to become a more effective problem solver?\n:::\n\n::: details [**Implementation Guidance for Problem Solving and Computing**]\n- The first chapter of this unit should be completed before any other unit in CS Discoveries\n- Alternate lessons are provided for some lessons in this unit, depending on your classroom context\n- Additional resources are available within the Teacher Resources dropdown of the unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [Problem Solving and Computing Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-csd-unit1-2023). The module is designed to take 2 hours to complete. No previous experience with coding is required.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went.\n"
          student_description: 'Problem Solving and Computing is a highly interactive and collaborative introduction to the field of computer science, as framed within the broader pursuit of solving problems. You’ll practice using a problem solving process to address a series of puzzles, challenges, and real world scenarios. Next, you’ll learn how computers input, output, store, and process information to help humans solve problems.  The unit concludes with a project in which you design an application that helps solve a problem of your choosing.

            '
          description_short: Learn how humans work with computers to solve problems.
          description_audience: ''
          lessons: {}
          name: focus-on-data1-2024
        focus-on-data2-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: 'Chapter 1: Representing Information'
            lessonGroup-3:
              display_name: 'Chapter 2: Solving Data Problems'
          title: Data and Society ('24-'25)
          description: "The Data and Society unit is about the importance of using data to solve problems and it highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter, students learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. In the final project, students gather their own data and use it to develop an automated solution to a problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** This chapter focuses on data representation and its role in solving information problems.  Students learn what a representation system needs to be useful, and how computers are able to represent different types of information using binary systems.  For the chapter project, students represent their perfect day in a binary punch card and trade with classmates to decipher.\n\n\n**Goals:**\n* Understand the role of data and data representation in solving information problems. \n* Explain the necessary components of any data representation scheme, as well as the particulars of binary and the common ways that various types of simple and complex data are represented in binary code. \n\n\n**Big Questions:**\n* Why is representation important in problem solving?\n* What features does a representation system need to be useful?\n* What is necessary to create usable binary representation systems?\n* How can we combine systems together to get more complex information?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** Students explore how data can be used to answer interesting questions and solve problems.  Using a modified version of the general Problem Solving Process, students look at how computers and humans use data differently and the pros and cons of automating problem solving.  After learning ways that computers use data in the real world, students choose their own problem and use data to address it.\n\n\n**Goals:**\n* Investigate and understand how humans and computers use data differently.\n* Design and implement a data-based solution to a given problem and determine how the different aspects of the problem solving process could be automated.\n\n\n\n**Big Questions:**\n* How does data help us to solve problems?\n* How do computers and humans use data differently?\n* What parts of the data problem solving process can be automated?\n* What kinds of problems do computers use data to solve in the real world?\n\n:::\n\n\n::: details [**Implementation Guidance for Data and Society**]\n- You can view the [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is about the importance of data in solving problems and highlights how computers can help in this process. The first chapter explores different systems used to represent information in a computer and the challenges and tradeoffs posed by using them. In the second chapter you’ll learn how collections of data are used to solve problems, and how computers help to automate the steps of this process. The chapter concludes by considering how the data problem solving process can be applied to an area of your choosing.
          description_short: Learn how people use computers to solve data problems.
          description_audience: ''
          lessons: {}
          name: focus-on-data2-2024
        focus-on-data3-2024:
          lesson_groups:
            lessonGroup-2:
              display_name: Intro to App Lab
            lessonGroup-3:
              display_name: Chapter 1
            lessonGroup-4:
              display_name: Chapter 2
          title: AI and Machine Learning ('24-'25)
          description: "This unit is a hands-on introduction to developing a machine learning model with tabular data. Students explore how computers learn from data to make decisions, then develop machine learning projects around real-world data. The unit culminates in designing a machine learning app to solve a personally relevant problem.\n\n::: details [**Chapter 1 Overview**]\n**Description:** Students learn the basics of machine learning and use a tool called AI Lab to create machine learning models that can be used in App Lab. The unit starts with an overview of machine learning and how computers can use patterns in data to make decisions and predictions. Then, students learn how to use AI Lab to train models from tabular data while exploring issues of bias. Lessons follow a repeating \"unplugged - AI Lab - App Lab\" pattern so students are continually exposed to the concepts and tools of machine learning. The chapter culminates in a project where students select from a set of real-world datasets to train a machine learning model and create an app.\n\n\n**Goals:**\n* Create a machine learning model in AI Lab to solve a problem, and use App Lab to create an app that uses their model. \n* Understand how machine learning models make decisions from data\n\n\n**Big Questions:**\n- How does machine learning find patterns in data to make decisions?\n- How can we avoid bias when training a machine learning model?\n\n:::\n\n::: details [**Chapter 2 Overview**]\n**Description:** This chapter prepares students to be machine learning scientists to create an app that addresses an issue in their community. Students follow along with a fictional group of students as they define an issue, develop a survey to collect data, analyze their data in AI Lab, create a model card, and create an app to solve their problem. Then, in the final project, students repeat these same steps with an issue they care about in their community.\n\n**Goals:**\n* Create machine learning models in AI Lab  from their own data and use App Lab to create an app that uses their model to solve problems in their community. \n\n\n**Big Questions:**\n- How can machine learning be used to solve problems in our community?\n\n:::\n\n\n::: details [**Implementation Guidance for the AI and Machine Learning Unit**]\n\n- Guidance for how to support students in programming levels and differentiate tasks are available in the [Programming Levels Guide](https://docs.google.com/document/d/1LlbzDHvq_DXggzeGg_sBcNov9pZX7h9NqardkGW4ELw/view) and [Differentiation Guide](https://docs.google.com/document/d/10u5N7zCf52IZiSf4drQplEz3d3zS1iqWpegbBMDm0RQ/view)\n- You can view the full [Implementation Guide](https://docs.google.com/document/d/1sM_1Oxb7TGp5gSfuMjs0X0_Tko9tm8QJ4N6L26NI_iE/view) for more information about this unit\n:::\n\n::: details [**Professional Development**]\nIf you are interested in teaching this course, we recommend completing the free [AI/ML Self-Paced Professional Development Module](https://studio.code.org/courses/self-paced-pl-aiml-2023). The module is designed to take 2 hours to complete. No previous experience with coding or AI is assumed.\n:::\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_csd_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: This unit is a hands-on introduction to developing a machine learning model with tabular data. You will explore how computers learn from data to make decisions, then develop your own machine learning projects around real-world data. The unit culminates with designing your own machine learning app to solve a personally relevant problem.
          description_short: Learn to about Artificial Intelligence and Machine Learning.
          description_audience: ''
          lessons: {}
          name: focus-on-data3-2024
        focus-on-data-post-survey-2024:
          title: Post-Course Survey
          description: This unit contains the Post-Course Survey. This unit can be assigned after students complete their final unit in this course.
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: focus-on-data-post-survey-2024
        sandbox-csf-a:
          lessons:
            lesson-1:
              name: Learn to Drag and Drop
            lesson-4:
              name: Digital Citizenship
            lesson-5:
              name: Unplugged Lessons
          lesson_groups: {}
          name: sandbox-csf-a
          title: 'SANDBOX CSF Course A '
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        sandbox-csf-intro:
          lessons: {}
          lesson_groups: {}
          name: sandbox-csf-intro
          title: SANDBOX CSF Intro
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        sandbox-csf-b:
          lessons: {}
          lesson_groups: {}
          name: sandbox-csf-b
          title: SANDBOX CSF Course B
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        sandbox-csf-c:
          lessons: {}
          lesson_groups: {}
          name: sandbox-csf-c
          title: SANDBOX CSF Course C
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        sandboc-csf-d:
          lessons: {}
          lesson_groups: {}
        sandbox-csf-d:
          lessons: {}
          lesson_groups: {}
          name: sandbox-csf-d
          title: SANDBOX CSF Course D
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        sandbox-csf-e:
          lessons: {}
          lesson_groups: {}
          name: sandbox-csf-e
          title: SANDBOX CSF Course E
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        sandbox-csf-f:
          lessons: {}
          lesson_groups: {}
          name: sandbox-csf-f
          title: SANDBOX CSF Course F
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-foundations-unit1:
          lessons: {}
          lesson_groups: {}
          name: self-paced-foundations-unit1
          title: Foundations of CS Unit 1
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-foundations-unit2:
          lessons: {}
          lesson_groups: {}
          name: self-paced-foundations-unit2
          title: Foundations of CS Unit 2
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-foundations-unit3:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-foundations-unit3
          title: 'Curriculum Overview: Unit 3 - Artificial Intelligence (AI) and Machine Learning'
          description_audience: ''
          description_short: ''
          description: |-
            ##### This section contains a curriculum overview of the Artificial Intelligence (AI) and Machine Learning unit.

            ##### **You will:**

            * ##### Get an introduction to artificial intelligence and machine learning.
            * ##### Practice key concepts included in the unit.
            * ##### Engage with AI Lab and App Lab.

            ##### **Suggested time:** 70 minutes
          student_description: |-
            ##### This section contains a curriculum overview of the Artificial Intelligence (AI) and Machine Learning unit.

            ##### **You will:**

            * ##### Get an introduction to artificial intelligence and machine learning.
            * ##### Practice key concepts included in the unit.
            * ##### Engage with AI Lab and App Lab.

            ##### **Suggested time:** 70 minutes
        self-paced-pl-foundations-unit4:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-foundations-unit4
          title: 'Curriculum Overview: Unit 1A - (Option A) Computer Systems and Devices with micro:bit'
          description_audience: ''
          description_short: ''
          description: |-
            ##### This section contains a curriculum overview of the Computer Systems and Devices unit, focusing on the BBC micro:bit.

            ##### **You will:**

            * ##### Get an introduction to Computer Systems and Devices
            * ##### Set up your micro:bit
            * ##### Practice key concepts included in the unit.
            * ##### Preview the end-of-unit project.

            ##### **Suggested time:** 55 minutes
          student_description: |-
            ##### This section contains a curriculum overview of the Computer Systems and Devices unit, focusing on the BBC micro:bit.

            ##### **You will:**

            * ##### Get an introduction to Computer Systems and Devices
            * ##### Set up your micro:bit
            * ##### Practice key concepts included in the unit.
            * ##### Preview the end-of-unit project.

            ##### **Suggested time:** 55 minutes
        self-paced-pl-foundations-unit5:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-foundations-unit5
          title: Cybersecurity and Global Impacts
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-foundations-unit6:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-foundations-unit6
          title: Intro to Programming with Turtle
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-foundations-unit1:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-foundations-unit1
          title: 'Curriculum Overview: Unit 1B - (Option B) Computer Systems and Devices with Circuit Playground'
          description_audience: ''
          description_short: ''
          description: |-
            ##### This section contains a curriculum overview of the Computer Systems and Devices unit, focusing on Adafruit's Circuit Playground.

            ##### **You will:**

            * ##### Get an introduction to Computer Systems and Devices
            * ##### Set up your Circuit Playground.
            * ##### Practice key concepts included in the unit.
            * ##### Preview the end-of-unit project.

            ##### **Suggested time:** 55 minutes
          student_description: |-
            ##### This section contains a curriculum overview of the Computer Systems and Devices unit, focusing on Adafruit's Circuit Playground.

            ##### **You will:**

            * ##### Get an introduction to Computer Systems and Devices
            * ##### Set up your Circuit Playground.
            * ##### Practice key concepts included in the unit.
            * ##### Preview the end-of-unit project.

            ##### **Suggested time:** 55 minutes
        self-paced-pl-foundations-unit2:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-foundations-unit2
          title: 'Curriculum Overview: Unit 2 - Representing Information'
          description_audience: ''
          description_short: ''
          description: |-
            ##### This section contains a curriculum overview of the Representing Information unit.

            ##### **You will:**

            * ##### Get an introduction to Representing Information.
            * ##### Practice key concepts included in the unit.

            ##### **Suggested time:** 40 minutes
          student_description: |-
            ##### This section contains a curriculum overview of the Representing Information unit.

            ##### **You will:**

            * ##### Get an introduction to Representing Information.
            * ##### Practice key concepts included in the unit.

            ##### **Suggested time:** 40 minutes
        gen-ai-customizing-pilot-v2:
          lessons:
            lesson-11:
              name: Issue Statements
            lesson-12:
              name: User Feedback
            lesson-13:
              name: 'Project: Solving Community Problems with Chatbots'
          lesson_groups: {}
          name: gen-ai-customizing-pilot-v2
          title: Customizing Language Models
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-computer-vision:
          lessons:
            lesson-1:
              name: Introduction to Computer Vision
          lesson_groups: {}
          name: self-paced-pl-computer-vision
          title: self-paced-pl-computer-vision
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-coding-with-ai:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-coding-with-ai
          title: self-paced-pl-coding-with-ai
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        computer-vision:
          title: Computer Vision
          description: |-
            This unit introduces students to the fundamentals, applications, and ethical implications of computer vision technologies. The unit starts with basic concepts and gradually builds up to complex topics, including data collection, model training, prototype development, and the integration of user feedback. Each lesson is designed to enhance students' understanding through hands-on activities and discussions culminating in the development of a prototype. The curriculum emphasizes critical thinking, problem-solving, and ethical considerations, equipping students with the skills to develop and evaluate technology that addresses real-world problems. Through iterative design and user-centered approaches, students not only learn the technical aspects of computer vision but also its impact on society, preparing them to be thoughtful innovators in a rapidly advancing technological landscape.

            ## What do I need to teach this module?

            Take a look at the [**Getting Started with Computer Vision**](https://docs.google.com/document/d/1G5NztlmSlZ3pAN09mnze1eGzuLXQVvVjoqzTHqeEgk0/edit?usp=sharing) for information about what you and your students will need for this module.

            ## How can I prepare to teach this module?

            If you are interested in teaching this module, we recommend completing the free [**Computer Vision Self-Paced Professional Development Module**](http://studio.code.org/courses/self-paced-pl-computer-vision-2024). The module is designed to take 2-3 hours to complete. No previous computer science experience is required.
          student_description: In this unit, you'll dive into how computers interpret and understand visual information from the world around us. You'll start with the basics of how images are captured and processed and move on to more complex topics like training data, model development, and the ethical implications of artificial intelligence. Through a series of interactive lessons, hands-on activities, and project-based learning, you'll get to design your own computer vision app. Along the way, you'll learn not only about the technology itself but also how it can be used responsibly to make a positive impact in various fields like healthcare, automotive, and public safety.
          description_short: ''
          description_audience: ''
          lessons:
            lesson-1:
              name: Pre-Module Survey
            lesson-2:
              name: Mid-Module Survey
            lesson-3:
              name: Post-Module Survey
          lesson_groups:
            lessonGroup-3:
              display_name: Getting Started
            lessonGroup-2:
              display_name: Content
            lessonGroup-4:
              display_name: Mid-Module Survey
            lessonGroup-5:
              display_name: Content, Part 2
            lessonGroup-6:
              display_name: Wrapping Up
          name: computer-vision
        gen-ai-standalone:
          lessons:
            lesson-1:
              name: Explore Chatbots and Large Language Models
          lesson_groups: {}
          name: gen-ai-standalone
          title: Generative AI Goes to Congress
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-computer-vision-2024:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-computer-vision-2024
          title: Preparing to Teach Computer Vision
          description_audience: ''
          description_short: ''
          description: "#### **You will:** \n* #### Get an introduction to Teaching Computer Vision\n* #### Define and identify different uses of computer vision\n* #### Utilize the design process to solve problems\n* #### Explore Computer Vision lessons\n\n#### **Suggested Time:** 90 minutes"
          student_description: ''
        self-paced-pl-coding-with-ai-2024:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-coding-with-ai-2024
          title: Preparing to Teach Coding with AI
          description_audience: ''
          description_short: ''
          description: "#### **You will:**\n* #### Get an introduction to Coding with AI\n* #### Learn about different Large Language Models\n* #### Practice using AI to help with the coding process\n* ####Explore Coding with AI lessons\n\n#### **Suggested Time:** 120 minutes \n"
          student_description: "**You will: **\n* Get an introduction to Coding with AI\n* Learn about different Large Language Models\n* Practice using AI to help with the coding process\n* Explore Coding with AI lessons\n\n**Suggested Time:** 120 minutes "
        self-paced-pl-coding-w-ai-2024:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-coding-w-ai-2024
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-getting-started-cv-2024:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-getting-started-cv-2024
          title: Getting Started with Code.org [Optional]
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes"
        self-paced-pl-getting-started-coding-w-ai-2024:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-getting-started-coding-w-ai-2024
          title: Getting Started with Code.org [Optional]
          description_audience: ''
          description_short: ''
          description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes"
          student_description: "**You will:**\n\n* Get an introduction to Code.org’s mission. \n* Learn how to navigate the Code.org website and teacher tools.\n* Set up a classroom section.\n* Locate and use course lesson plans and teacher resources.\n* Learn how to access support while teaching Code.org curricula.\n\n**Suggested time:** 80 minutes"
        data-science-sample:
          lessons:
            lesson-1:
              name: Data Science
          lesson_groups: {}
          name: data-science-sample
          title: Data Science Sample
          description_audience: ''
          description_short: Sample progression for data science
          description: ''
          student_description: ''
        sandbox-welcome-to-maker:
          lessons:
            lesson-1:
              name: Welcome to Maker with micro:bit
          lesson_groups: {}
          name: sandbox-welcome-to-maker
          title: Introduction to Teaching Maker with micro:bit
          description_audience: ''
          description_short: ''
          description: "#### This lesson gives an overview of this professional learning module.\n\n#### You will: \n- #### get an introduction to the Maker with micro:bit course\n- ####plan your path for this professional learning module\n\n####**Suggested Time:**  10 minutes"
          student_description: "#### This lesson gives an overview of this professional learning module.\n\n#### You will: \n- #### get an introduction to the Maker with micro:bit course\n- ####plan your path for this professional learning module\n\n####**Suggested Time:**  10 minutes"
        pl-maker-shallowcopy:
          lessons: {}
          lesson_groups: {}
        maker-shallow:
          lessons:
            lesson-1:
              name: DanceParty
          lesson_groups: {}
          name: maker-shallow
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        gen-ai-staging:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Foundations of Gen AI
            lessonGroup-3:
              display_name: Customizing Language Models
            lessonGroup-4:
              display_name: User-Centered Design
            lessonGroup-5:
              display_name: Flexible Implementation Lessons
          name: gen-ai-staging
          title: ''
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-pl-foundations-intro:
          lessons:
            lesson-1:
              name: Introduction
            lesson-2:
              name: Using this Professional Learning Course
          lesson_groups: {}
          name: self-paced-pl-foundations-intro
          title: Introduction to Teaching Foundations of Computer Science
          description_audience: ''
          description_short: ''
          description: "##### ⭐️ **Start here!** This module is a short introduction to this professional learning course.\n\n##### **You will:** \n\n* ##### Get an introduction to Code.org and Foundations of Computer Science.\n* ##### Learn about the content you'll teach in Foundations of Computer Science.\n* ##### Learn how to engage in this professional learning course.\n\n##### **Suggested Time:** 5 minutes"
          student_description: "##### ⭐️ **Start here!** This module is a short introduction to this professional learning course.\n\n##### **You will:** \n\n* ##### Get an introduction to Code.org and Foundations of Computer Science.\n* ##### Learn about the content you'll teach in Foundations of Computer Science.\n* ##### Learn how to engage in this professional learning course.\n\n##### **Suggested Time:** 5 minutes"
        self-paced-pl-foundations-getting-started:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-foundations-getting-started
          title: Getting Started
          description_audience: ''
          description_short: ''
          description: |-
            ##### This professional learning module will give you an overview of the Code.org platform and its teacher- and student-facing features.

            ##### **You will:**

            * ##### Get an introduction to Code.org’s mission.
            * ##### Learn how to navigate the Code.org website and teacher tools.
            * ##### Set up a classroom section.
            * ##### Locate and use course lesson plans and teacher resources.
            * ##### Learn how to access support while teaching Code.org curricula.

            ##### **Suggested time:** 80 minutes
          student_description: ''
        self-paced-pl-foundations-teaching-cs:
          lessons: {}
          lesson_groups: {}
          name: self-paced-pl-foundations-teaching-cs
          title: Teaching Computer Science
          description_audience: ''
          description_short: ''
          description: |-
            ##### In this module, you will be introduced to authentic computer science practices that students will engage with. You will also explore the role of the teacher within a computer science classroom and make a plan for how you will support student learning while teaching Foundations of Computer Science.

            ##### **You will**:

            * ##### Consider the role of the teacher in a computer science classroom.
            * #####  Learn about authentic computer science practices that students will develop.
            * ##### Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion.

            ##### **Suggested Time**: 25 minutes
          student_description: |-
            ##### In this module, you will be introduced to authentic computer science practices that students will engage with. You will also explore the role of the teacher within a computer science classroom and make a plan for how you will support student learning while teaching Foundations of Computer Science.

            ##### **You will**:

            * ##### Consider the role of the teacher in a computer science classroom.
            * #####  Learn about authentic computer science practices that students will develop.
            * ##### Make a plan for how you will support student learning through differentiation, ongoing assessment, and promoting a culture of inclusion.

            ##### **Suggested Time**: 25 minutes
        k5plgamedesign:
          lessons: {}
          lesson_groups: {}
          name: k5plgamedesign
          title: Game Design
          description_audience: ''
          description_short: ''
          description: "#### **You will:**\n\n* ####  Learn the basic elements of game design.\n* #### Use variables to keep score.\n* ####  Code environment and player sprites. \n* #### Learn how to host a game jam in your classroom. \n* #### Learn how to access Code.org curricula.\n\n**Suggested time:** 80 minutes\n"
          student_description: "#### **You will:**\n\n* #### Learn the basic elements of game design.\n* #### Use variables to keep score.\n* #### Code environment and player sprites. \n* #### Learn how to host a game jam in your classroom. \n* ####  Learn how to access Code.org curricula.\n\n#### **Suggested time:** 80 minutes\n"
        k5gettingstarted:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          name: k5gettingstarted
          title: Getting Started [Optional]
          description_audience: ''
          description_short: ''
          description: "#### **You will:**\n\n* ####  Get an introduction to Code.org’s mission. \n* ####  Learn how to navigate the Code.org website and teacher tools.\n* ####  Set up a classroom section.\n* ####  Locate and use course lesson plans and teacher resources.\n* ####  Learn how to access support while teaching Code.org curricula.\n\n#### **Suggested time:** 80 minutes\n"
          student_description: "#### **You will:**\n\n#### * Get an introduction to Code.org’s mission. \n#### * Learn how to navigate the Code.org website and teacher tools.\n#### * Set up a classroom section.\n#### * Locate and use course lesson plans and teacher resources.\n#### * Learn how to access support while teaching Code.org curricula.\n\n#### **Suggested time:** 80 minutes\n"
        k5howaimakesdecisions:
          lessons: {}
          lesson_groups: {}
          name: k5howaimakesdecisions
          title: How AI Makes Decisions
          description_audience: ''
          description_short: ''
          description: " #### **You will:**\n\n* #### Learn what AI is and how it is used. \n*  ####Learn how AI makes decisions using machine learning and data. \n*  ####Learn how AI makes predictions.\n* #### Practice training AI using Code.org's AI Bot.\n*  ####Learn how AI can be used as a tool in school. \n*  ####Get ideas for sharing students' voices \n\n\n**Suggested time:** 80 minutes\n"
          student_description: "**You will:**\n\n* Learn what AI is and how it is used. \n* Learn how AI makes decisions using machine learning and data. \n* Learn how AI makes predictions.\n* Practice training AI using Code.org's AI Bot.\n* Learn how AI can be used as a tool in school. \n* Get ideas for sharing students' voices \n\n\n**Suggested time:** 80 minutes\n"
        k5maker:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          name: k5maker
          title: 2nd Grade
          description_audience: ''
          description_short: ''
          description: |
            #### This module covers the concepts and skills that are in the first micro:bit  track.

            #### **You will:**
            * #### Code using events and conditionals with Code.org.


            #### **Suggested Time:** 55 minutes
          student_description: |
            #### This module covers the concepts and skills that are in the first micro:bit  track.

            #### **You will:**
            * #### Code using events and conditionals with Code.org.


            #### **Suggested Time:** 55 minutes
        k5microbitmaker:
          lessons: {}
          lesson_groups: {}
          name: k5microbitmaker
          title: 3rd Grade
          description_audience: ''
          description_short: ''
          description: |+
            #### This module covers the concepts and skills that are in the first micro:bit  track.

            #### **You will:**
            * #### Code using events and conditionals with Code.org.


            #### **Suggested Time:** 55 minutes


          student_description: |+
            #### This module covers the concepts and skills that are in the first micro:bit  track.

            #### **You will:**
            * #### Code using events and conditionals with Code.org.


            #### **Suggested Time:** 55 minutes


        k5maker4thgrade:
          lessons: {}
          lesson_groups: {}
          name: k5maker4thgrade
          title: 4th Grade
          description_audience: ''
          description_short: ''
          description: "#### This module covers the concepts and skills that are in the first micro:bit track.\n\n#### **You will:**\n* #### Explore an unplugged coding lesson. \n* #### Code using events with Code.org.\n\n\n\n#### **Suggested Time:** 60 minutes\n\n\n"
          student_description: "#### This module covers the concepts and skills that are in the micro:bit beginner track.\n\n#### **You will:**\n* #### Explore an unplugged coding lesson. \n* #### Code using events with Code.org.\n\n\n\n#### **Suggested Time:** 60 minutes\n\n\n"
        k5maker5thgrade:
          lessons: {}
          lesson_groups: {}
          name: k5maker5thgrade
          title: 5th Grade
          description_audience: ''
          description_short: ''
          description: "#### This module covers the concepts and skills that are in the first micro:bit track.\n\n#### **You will:**\n* #### Explore an unplugged coding lesson. \n* #### Code using events with Code.org.\n\n* #### Create and code with variables.\n\n\n#### **Suggested Time:** 70 minutes\n\n\n"
          student_description: "#### This module covers the concepts and skills that are in the first micro:bit track.\n\n#### **You will:**\n* #### Explore an unplugged coding lesson. \n* #### Code using events with Code.org.\n\n* #### Create and code with variables.\n\n\n#### **Suggested Time:** 70 minutes\n\n\n"
        intro-to-data-science:
          lessons: {}
          lesson_groups: {}
          name: intro-to-data-science
          title: Introduction to Data Science
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        intro-to-data-science-2024:
          lessons:
            lesson-13:
              name: Pre-Assessment
            lesson-1:
              name: Introduction to Data Science
            lesson-2:
              name: Making Sense of Data
            lesson-3:
              name: Ethical Data Collection
            lesson-4:
              name: Data Rights
            lesson-5:
              name: Effective Data Questions
            lesson-6:
              name: Data Storytelling
            lesson-7:
              name: Introduction to Data Visualization
            lesson-8:
              name: Data Cleaning and Analysis Techniques
            lesson-9:
              name: Data Interpretation
            lesson-10:
              name: More Visualization Techniques
            lesson-11:
              name: Crafting Stories with Data Project
            lesson-12:
              name: Assessment Day
          lesson_groups:
            lessonGroup-4:
              display_name: Getting Started
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
          name: intro-to-data-science-2024
          title: Introduction to Data Science
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        data-science-with-python-2024:
          lessons: {}
          lesson_groups: {}
          name: data-science-with-python-2024
          title: Data Science with Python
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        tess-getting-started:
          lessons: {}
          lesson_groups: {}
          name: tess-getting-started
          title: Getting Started with Code.org [Optional]
          description_audience: ''
          description_short: ''
          description: "#### This module is a short introduction to using the Code.org platform.\n\n#### **You will:**\n* #### Get an introduction to Code.org \n* #### Learn to navigate the teacher features on the Code.org platform\n\n#### **Suggested Time:** 30 minutes"
          student_description: "#### This module is a short introduction to using the Code.org platform.\n\n#### **You will:**\n* #### Get an introduction to Code.org \n* #### Learn to navigate the teacher features on the Code.org platform\n\n#### **Suggested Time:** 30 minutes"
        getting-started-with-code:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          name: getting-started-with-code
          title: Getting Started [Optional]
          description_audience: ''
          description_short: ''
          description: "#### **You will:**\n\n* ####  Get an introduction to Code.org’s mission. \n* ####  Learn how to navigate the Code.org website and teacher tools.\n* ####  Set up a classroom section.\n* ####  Locate and use course lesson plans and teacher resources.\n* ####  Learn how to access support while teaching Code.org curricula.\n\n#### **Suggested time:** 80 minutes\n"
          student_description: "#### **You will:**\n\n#### * Get an introduction to Code.org’s mission. \n#### * Learn how to navigate the Code.org website and teacher tools.\n#### * Set up a classroom section.\n#### * Locate and use course lesson plans and teacher resources.\n#### * Learn how to access support while teaching Code.org curricula.\n\n#### **Suggested time:** 80 minutes\n"
        getting-started-with-code-maker:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          name: getting-started-with-code-maker
          title: Getting Started [Optional]
          description_audience: ''
          description_short: ''
          description: "#### **You will:**\n\n* ####  Get an introduction to Code.org’s mission. \n* ####  Learn how to navigate the Code.org website and teacher tools.\n* ####  Set up a classroom section.\n* ####  Locate and use course lesson plans and teacher resources.\n* ####  Learn how to access support while teaching Code.org curricula.\n\n#### **Suggested time:** 80 minutes\n"
          student_description: "#### **You will:**\n\n#### * Get an introduction to Code.org’s mission. \n#### * Learn how to navigate the Code.org website and teacher tools.\n#### * Set up a classroom section.\n#### * Locate and use course lesson plans and teacher resources.\n#### * Learn how to access support while teaching Code.org curricula.\n\n#### **Suggested time:** 80 minutes\n"
        getting-started-with-code-game-design:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Getting Started with Code.org
          name: getting-started-with-code-game-design
          title: Getting Started [Optional]
          description_audience: ''
          description_short: ''
          description: "#### **You will:**\n\n* ####  Get an introduction to Code.org’s mission. \n* ####  Learn how to navigate the Code.org website and teacher tools.\n* ####  Set up a classroom section.\n* ####  Locate and use course lesson plans and teacher resources.\n* ####  Learn how to access support while teaching Code.org curricula.\n\n#### **Suggested time:** 80 minutes\n"
          student_description: "#### **You will:**\n\n#### * Get an introduction to Code.org’s mission. \n#### * Learn how to navigate the Code.org website and teacher tools.\n#### * Set up a classroom section.\n#### * Locate and use course lesson plans and teacher resources.\n#### * Learn how to access support while teaching Code.org curricula.\n\n#### **Suggested time:** 80 minutes\n"
        k5-unplugged:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Sequencing
            lessonGroup-3:
              display_name: Loops
            lessonGroup-4:
              display_name: Events
            lessonGroup-5:
              display_name: Impacts of Computing
            lessonGroup-6:
              display_name: Data
            lessonGroup-7:
              display_name: Computer Systems
            lessonGroup-8:
              display_name: Conditionals
            lessonGroup-9:
              display_name: Functions
            lessonGroup-10:
              display_name: Variables
          name: k5-unplugged
          title: Unplugged Activities for K-5
          description_audience: ''
          description_short: ''
          description: |-
            #####We've compiled a list of all of our unplugged lessons for you to use in your classroom. Now you can teach the fundamentals of computer science, whether you have computers in your classroom or not!

            <img src="https://images.code.org/8f9ecd6897039d861bccd67cd60a16c4-image-1721339529551.jpg" width=450px style="float:right; margin-left:30px">

            #####We refer to lessons in which students are not working on a computer as “unplugged.” Students will often work with pencil and paper or physical manipulatives. These are intentionally placed kinesthetic opportunities that help students digest complicated concepts in ways that relate to their own lives.

            #####Unplugged lessons are particularly useful for building and maintaining a collaborative classroom environment, and they are useful touchstone experiences you can refer to when introducing more abstract concepts. Each of these activities can either be used alone or with other computer science lessons on related concepts.

            <br>
            <br>
            <br>
            <br>
            <br>
          student_description: ''
        csa1-alt-2025:
          lessons:
            lesson-6:
              name: User Input
          lesson_groups:
            lessonGroup-2:
              display_name: Content
          name: csa1-alt-2025
          title: Using Objects and Methods
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa2-alt-2025:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Content
          name: csa2-alt-2025
          title: Selection and Iteration
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa3-alt-2025:
          lessons:
            lesson-3:
              name: Program Design
            lesson-5:
              name: AI-Generated Code
            lesson-9:
              name: No-Argument Constructors
            lesson-11:
              name: Parameterized Constructors
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: AI-Generated Code
          name: csa3-alt-2025
          title: Class Creation
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        csa4-alt-2025:
          lessons:
            lesson-1:
              name: Ethical and Social Issues Around Data Collection
            lesson-2:
              name: Data Sets
            lesson-9:
              name: Text Files
            lesson-19:
              name: Enhanced For Loops (2D)
          lesson_groups:
            lessonGroup-2:
              display_name: Content
          name: csa4-alt-2025
          title: Data Collections
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        hello-world-food-one:
          title: 'Hello World: Food'
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
        sandbox-csf-course-a:
          lessons: {}
          lesson_groups: {}
        hello-world-transformers-one-2024:
          title: 'Hello World: Transformers One'
          description: ''
          student_description: ''
          description_short: ''
          description_audience: ''
          lessons: {}
          lesson_groups: {}
          name: hello-world-transformers-one-2024
        csa1-pilot-2025:
          lessons:
            lesson-8:
              name: AI-Generated Code
          lesson_groups:
            lessonGroup-2:
              display_name: Survey
            lessonGroup-3:
              display_name: Content
            lessonGroup-4:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-6:
              display_name: Alternate Lessons
            lessonGroup-7:
              display_name: Sandboxes
          name: csa1-pilot-2025
          title: Object-Oriented Programming
          description_audience: ''
          description_short: Students learn fundamental Java concepts, discover their identity as software engineers, and use debugging strategies and code reviews to improve their programming skills.
          description: "This unit introduces students to object-oriented programming principles as they explore The Neighborhood and discover their identity as a software engineer. Students learn fundamental Java concepts as they navigate and paint in The Neighborhood with `Painter` objects and extend the `Painter` class to expand the capabilities of their programs. Students practice predicting the outcome of program code and developing algorithms using sequencing, selection, and iteration to navigate mazes and paint murals. Students also learn to document program code using comments to describe the behavior of specific code segments and conduct code reviews to receive feedback from their peers.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use inheritance to create subclasses that extend an existing class\n\n* Write methods with and without parameters to perform a specific task\n\n* Implement algorithms sequencing, selection, and iteration\n\n* Write clear and readable code using methods, control structures, and comments\n\n* Improve a program through iterative development based on feedback\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=1) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit introduces you to object-oriented programming principles as you explore The Neighborhood and discover your identity as a software engineer. You learn fundamental Java concepts as you navigate and paint in The Neighborhood with `Painter` objects and extend the `Painter` class to expand the capabilities of your programs. You practice predicting the outcome of program code and developing algorithms using sequencing, selection, and iteration to navigate mazes and paint murals. You also learn to document program code using comments to describe the behavior of specific code segments and conduct code reviews to receive feedback from your peers.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use inheritance to create subclasses that extend an existing class\n\n* Write methods with and without parameters to perform a specific task\n\n* Implement algorithms sequencing, selection, and iteration\n\n* Write clear and readable code using methods, control structures, and comments\n\n* Improve a program through iterative development based on feedback\n    </div>\n</details>"
        csa2-pilot-2025:
          lessons:
            lesson-3:
              name: Program Design
            lesson-5:
              name: User Input
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: End of Unit Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          name: csa2-pilot-2025
          title: Class Structure and Design
          description_audience: ''
          description_short: Students develop an understanding of data encapsulation and object-oriented design decisions.
          description: "This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as students develop classes with attributes and behaviors and work with primitive and object data. Students learn to write no-argument constructors to assign default values and parameterized constructors to assign specific values to an object's instance variables. They explore how the `this` keyword can be used to reduce ambiguity and redundancies in their program and how the `super` keyword can be used to call a superclass constructor or method. Students also learn how to work with variables and write expressions using arithmetic and compound assignment operators and practice tracing code segments to determine the output. After working with instance variables and constructors, they write accessor and mutator methods to work with the values assigned to an object's instance variables and `toString()` methods to display information about an object to the console. Throughout this unit, students continue to develop software engineering skills as they learn to make design decisions and use inheritance to create class hierarchies.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Represent attributes of an object using instance variables\n\n* Write no-argument and parameterized constructors to set the state of an object\n\n* Use the `super` keyword to refer to the superclass in constructors and methods\n\n* Write expressions using arithmetic operators and compound assignment operators with variables and object data\n\n* Write accessor and mutator methods to obtain and modify object data\n\n* Write `toString()` methods and use escape sequences to display and format information about an object to the console\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 1\n\n* Personal Progress Check 5\n\n* Personal Progress Check 9\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=2) to let the Code.org curriculum team know how the unit went. "
          student_description: "This unit expands on the object-oriented programming principles introduced in Unit 1 to explore design principles as you develop classes with attributes and behaviors and work with primitive and object data. You learn to work with variables and user input as you develop and utilize classes and objects to represent desserts, customers, and food trucks for the Project Mercury Pastries Food Truck business. As you work with the `Dessert` class, you build on your knowledge of inheritance to design subclasses that represent specific types of desserts. While working with variables, you learn to create and evaluate expressions using assignment and relational operators and trace code segments to determine the result of output. Throughout this unit, you continue to develop software engineering skills as you learn to use UML diagrams to represent classes and the DRY principle to refactor program code.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Represent attributes of an object using instance variables\n\n* Write no-argument and parameterized constructors to set the state of an object\n\n* Use the `super` keyword to refer to the superclass in constructors and methods\n\n* Write expressions using arithmetic operators and compound assignment operators with variables and object data\n\n* Write accessor and mutator methods to obtain and modify object data\n\n* Write `toString()` methods and use escape sequences to display and format information about an object to the console\n    </div>\n</details>"
        csa3-pilot-2025:
          lessons:
            lesson-1:
              name: Data Sets
            lesson-6:
              name: Text Files
            lesson-8:
              name: Ethical and Social Issues Around Data Collection
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: End of Unit Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          name: csa3-pilot-2025
          title: Arrays and Algorithms
          description_audience: ''
          description_short: Students use one-dimensional (1D) arrays to store lists of primitive values and object references.
          description: "This unit introduces students to data structures to store primitive values and object references. Students use one-dimensional (1D) arrays to store multiple related values while expanding their knowledge of loops and conditionals to analyze and process data in a 1D array. Students learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, students develop and modify algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. While developing algorithms, students identify preconditions and postconditions and implement solutions to ensure that these conditions are satisfied. Students continue to develop software engineering skills as they learn to make design decisions and use 1D arrays to store and analyze data.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Declare and initialize one-dimensional (1D) arrays to store primitive values and objects using the `new` keyword and initializer lists\n\n* Traverse the elements in one-dimensional (1D) arrays using `for` loops, `while` loops, and enhanced `for` loops\n\n* Write algorithms to find and modify elements in one-dimensional (1D) arrays\n\n* Implement solutions to satisfy the preconditions and postconditions of an algorithm\n\n* Debug common errors that occur when traversing one-dimensional (1D) arrays\n\n* Use polymorphism to create and traverse one-dimensional (1D) arrays of a superclass type\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 4\n\n* Personal Progress Check 6\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=3) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit introduces you to data structures to store primitive values and object references. You use one-dimensional (1D) arrays to store multiple related values while expanding your knowledge of loops and conditionals to analyze and process data in a 1D array. You learn to use `for` loops to traverse arrays and discover that an algorithm involving loops can be implemented with either a `for` loop or a `while` loop. Throughout the unit, you develop and modify algorithms to find and manipulate elements in a 1D array while also discovering the concept of polymorphism when traversing arrays of objects. While developing algorithms, you identify preconditions and postconditions and implement solutions to ensure that these conditions are satisfied. You continue to develop software engineering skills as you learn to make design decisions and use 1D arrays to store and analyze data.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Declare and initialize one-dimensional (1D) arrays to store primitive values and objects using the `new` keyword and initializer lists\n\n* Traverse the elements in one-dimensional (1D) arrays using `for` loops, `while` loops, and enhanced `for` loops\n\n* Write algorithms to find and modify elements in one-dimensional (1D) arrays\n\n* Implement solutions to satisfy the preconditions and postconditions of an algorithm\n\n* Debug common errors that occur when traversing one-dimensional (1D) arrays\n\n* Use polymorphism to create and traverse one-dimensional (1D) arrays of a superclass type\n    </div>\n</details>"
        csa4-pilot-2025:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: End of Unit Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          name: csa4-pilot-2025
          title: Conditions and Logic
          description_audience: ''
          description_short: Students improve decision-making in their programs using relational and logical operators to evaluate primitive values and object references and use the Math class to perform calculations and generate random numbers.
          description: "This unit expands on the use of APIs, object-oriented programming concepts, and conditional statements to develop visuals and animations using The Theater. Students learn about the functionality of the `static` keyword and explore the methods in the `Math` class to perform calculations and incorporate randomness in program decisions and behaviors. While working with conditional statements and Boolean expressions, students realize the difference between using the `==` operator and the `equals()` method to compare objects for equality and discover the need for overriding the `equals()` method in their own classes. They deepen their understanding of conditional statements and logical operators as they learn to write nested conditional statements, use the AND ( `&&` ) and OR ( `||` ) operators, and write multi-selection statements to test multiple conditions. Using their knowledge of Boolean expressions and logical operators, they practice evaluating truth tables to compare two expressions for equivalence and applying De Morgan's Laws to simplify expressions.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use the `static` keyword to to create static variables and methods in a class\n\n* Call `Math` class methods and constants to perform calculations and generate random numbers\n\n* Use casting operators to assign a value of one type to another\n\n* Explain the difference between `==` and `equals()`\n\n* Write nested `if` statements to test a combination of conditions\n\n* Construct a conditional statement involving logical operators\n\n* Evaluate compound Boolean expressions for equivalence\n\n* Write multi-selection statements to test multiple conditions\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 3\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>"
          student_description: "This unit expands on the use of APIs, object-oriented programming concepts, and conditional statements to develop visuals and animations using The Theater. You learn about the functionality of the `static` keyword and explore the methods in the `Math` class to perform calculations and incorporate randomness in program decisions and behaviors. While working with conditional statements and Boolean expressions, you realize the difference between using the `==` operator and the `equals()` method to compare objects for equality and discover the need for overriding the `equals()` method in their own classes. You deepen your understanding of conditional statements and logical operators as they learn to write nested conditional statements, use the AND ( `&&` ) and OR ( `||` ) operators, and write multi-selection statements to test multiple conditions. Using your knowledge of Boolean expressions and logical operators, you practice evaluating truth tables to compare two expressions for equivalence and applying De Morgan's Laws to simplify expressions.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use the `static` keyword to to create static variables and methods in a class\n\n* Call `Math` class methods and constants to perform calculations and generate random numbers\n\n* Use casting operators to assign a value of one type to another\n\n* Explain the difference between `==` and `equals()`\n\n* Write nested `if` statements to test a combination of conditions\n\n* Construct a conditional statement involving logical operators\n\n* Evaluate compound Boolean expressions for equivalence\n\n* Write multi-selection statements to test multiple conditions\n    </div>\n</details>"
        csa5-pilot-2025:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-6:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-3:
              display_name: Sandboxes
          name: csa5-pilot-2025
          title: Two-Dimensional Arrays
          description_audience: ''
          description_short: Students use two-dimensional (2D) arrays to expand storage and organization capabilities in their programs.
          description: "This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. Students identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As students analyze problems involving 2D arrays, they revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. Students apply these concepts to manipulate pixels and in The Theater to create image filters in addition to working with primitive values and various object references. Additionally, students use the programming knowledge and skills they have acquired to consider the impacts of programs on society, economies, and culture.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Declare and initialize a two-dimensional (2D) array using the `new` keyword and an initializer list\n\n* Access and modify elements in a two-dimensional (2D) array using row and column indexes\n\n* Write nested loops to traverse a two-dimensional (2D) array in row-major and column-major order\n\n* Write nested enhanced `for` loops to traverse a two-dimensional (2D) array\n\n* Apply standard 1D array algorithms to a 2D array\n\n* Discuss the beneficial and harmful impacts of programs\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 8\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=5) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit expands on data structures introduced in Unit 3 to create tables of data using two-dimensional (2D) arrays. You identify similarities and differences between 1D and 2D arrays when creating, accessing, and traversing 2D arrays and apply standard algorithms to find and manipulate elements. As you analyze problems involving 2D arrays, you revisit these standard algorithms to determine what code needs to be added or modified and to interact with completed program code. You apply these concepts to manipulate pixels using The Theater to create image filters in addition to working with primitive values and various object references. Additionally, you use the programming knowledge and skills you have acquired to consider the impacts of programs on society, economies, and culture.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Declare and initialize a two-dimensional (2D) array using the `new` keyword and an initializer list\n\n* Access and modify elements in a two-dimensional (2D) array using row and column indexes\n\n* Write nested loops to traverse a two-dimensional (2D) array in row-major and column-major order\n\n* Write nested enhanced `for` loops to traverse a two-dimensional (2D) array\n\n* Apply standard 1D array algorithms to a 2D array\n\n* Discuss the beneficial and harmful impacts of programs\n    </div>\n</details>"
        csa6-pilot-2025:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-6:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-3:
              display_name: Sandboxes
          name: csa6-pilot-2025
          title: ArrayLists and String Methods
          description_audience: ''
          description_short: Students use ArrayLists to store program data and work with methods in the String class to manipulate and evaluate String objects.
          description: "This unit continues to expand on data structures to introduce students to creating lists using the `ArrayList` class. In the process, students learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. Students differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. Students apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, students learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, students further develop software engineering skills by writing Javadoc comments to create API documentation for their programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Use the `Integer` and `Double` class to represent primitive values as objects\n\n* Describe the structure and functionality of an `ArrayList`\n\n* Use methods in the `ArrayList` class to obtain the size of an `ArrayList`, add elements, retrieve elements, set values, and remove elements\n\n* Apply standard algorithms used with one-dimensional (1D) arrays to an `ArrayList`\n\n* Use methods in the `String` class to retrieve substrings and perform comparisons\n\n* Write standard algorithms to traverse a `String` object\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 2\n* Personal Progress Check 7\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=6) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit continues to expand on data structures to introduce you to creating lists using the `ArrayList` class. In the process, you learn about the `Integer` and `Double` classes and use their methods to parse data from text files and explore the limits of integer values. You differentiate between when to use each type of data structure while learning about the structure and functionality of an `ArrayList`. You apply standard algorithms to find and manipulate data in an `ArrayList` of numerical and object data. Throughout the unit, you learn to use the `String` class to analyze and process text obtained from a user and from file input while learning about basic natural language processing techniques and applications. Additionally, you further develop software engineering skills by writing Javadoc comments to create API documentation for your programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Use the `Integer` and `Double` class to represent primitive values as objects\n\n* Describe the structure and functionality of an `ArrayList`\n\n* Use methods in the `ArrayList` class to obtain the size of an `ArrayList`, add elements, retrieve elements, set values, and remove elements\n\n* Apply standard algorithms used with one-dimensional (1D) arrays to an `ArrayList`\n\n* Use methods in the `String` class to retrieve substrings and perform comparisons\n\n* Write standard algorithms to traverse a `String` object\n    </div>\n</details>"
        csa7-pilot-2025:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-6:
              display_name: Show What You Know
            lessonGroup-5:
              display_name: End of Unit Survey
            lessonGroup-4:
              display_name: Alternate Lessons
            lessonGroup-3:
              display_name: Sandboxes
          name: csa7-pilot-2025
          title: Method Decomposition and Recursion
          description_audience: ''
          description_short: Students practice software design and development using the skills and programming constructs they have learned and explore recursion.
          description: "This unit allows students to practice software design and development using the skills they have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. Students use decomposition strategies and object-oriented principles to plan and implement their ideas while ensuring their projects meet specified requirements. In the process, students learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, students practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, students consider the need for maximizing system reliability as they explore bugs and issues in existing programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Differentiate between passing primitive values and object references as parameters\n\n* Write and call overloaded, `private`, and overridden methods\n\n* Explain the legal issues and intellectual property concerns of programs that create AI-generated images\n\n* Trace a recursive method to determine its result\n\n* Identify strategies to maximize system reliability\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=7) to let the Code.org curriculum team know how the unit went."
          student_description: "This unit allows you to practice software design and development using the skills you have learned throughout the curriculum while planning and developing a creative coding project to convey a personal interest or story using The Theater. You use decomposition strategies and object-oriented principles to plan and implement your ideas while ensuring your project meet specified requirements. In the process, you learn to write `private`, overloaded, and overridden methods and use the `super` keyword in a subclass method to call a superclass method while exploring the functionality of methods and their parameters. Throughout the unit, you practice tracing and writing recursive methods and comparing these methods to iterative solutions. With the knowledge and skills acquired throughout the year, you consider the need for maximizing system reliability as you explore bugs and issues in existing programs.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Differentiate between passing primitive values and object references as parameters\n\n* Write and call overloaded, `private`, and overridden methods\n\n* Explain the legal issues and intellectual property concerns of programs that create AI-generated images\n\n* Trace a recursive method to determine its result\n\n* Identify strategies to maximize system reliability\n    </div>\n</details>"
        csa8-pilot-2025:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Content
            lessonGroup-3:
              display_name: Show What You Know
            lessonGroup-4:
              display_name: Survey
            lessonGroup-5:
              display_name: Alternate Lessons
            lessonGroup-6:
              display_name: Sandboxes
          name: csa8-pilot-2025
          title: Searching and Sorting
          description_audience: ''
          description_short: ''
          description: "This unit expands on algorithms students have learned to introduce common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, students analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, students apply their programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, students consider the privacy and security of programs and users.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, students will be able to . . .</em></strong></p>\n\n* Explain the functionality of standard searching and sorting algorithms\n\n* Analyze the efficiency of searching and sorting algorithms using execution counts\n\n* Implement algorithms involving multiple 1D or 2D arrays or `ArrayList`s\n    </div>\n</details>\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">✅ AP Classroom Personal Progress Checks</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p>To assign questions from the AP Classroom Question Bank that align with this unit, create a custom quiz in AP Classroom by searching the Question Bank for the Essential Knowledge statements on the unit's <a href=\"https://studio.code.org/s/csa2-2023/standards\" target=\"_blank\"><strong>Standards</strong></a> page. You can find instructions and video demonstrations to do this on <a href=\"https://apcentral.collegeboard.org/instructional-resources/ap-classroom\" target=\"_blank\"><strong>AP Central</strong></a>.</p>\n\nThe following Personal Progress Checks in AP Classroom can be assigned during the Show What You Know week:\n\n* Personal Progress Check 10\n\n<p><em><strong>Note:</strong> Some Learning Objectives and Essential Knowledge statements in the suggested Personal Progress Checks are covered in later units.</em></p>\n    </div>\n</details>\n\n## Finished Teaching This Unit?\nAnswer this [**short survey**](https://studio.code.org/form/teacher_end_of_unit_survey?survey_data%5Bunit_number%5D=8) to let the Code.org curriculum team know how the unit went."
          student_description: "In this unit, you expand on the algorithms you have learned to explore common approaches to searching and sorting 1D and 2D arrays and `ArrayList`s. In the process, you analyze and compare the efficiencies of these algorithms using statement execution counts and further develop problem-solving skills to decompose complex problems. Throughout the unit, you apply your programming and software engineering skills to plan and develop a creative coding project using the console that incorporates object-oriented design, data structures, and algorithmic thinking. With the knowledge and skills acquired throughout the year, you consider the privacy and security of programs and users.\n\n<details style=\"padding: 10px; margin-bottom: 10px;\">\n    <summary style=\"font-size: 1.2em; font-weight: bold;\">\U0001F3AF Unit Objectives</summary>\n    <div style=\"margin-top: 20px; margin-left: 20px; margin-right: 20px;\">\n        <p><strong><em>By the end of this unit, you will be able to . . .</em></strong></p>\n\n* Explain the functionality of standard searching and sorting algorithms\n\n* Analyze the efficiency of searching and sorting algorithms using execution counts\n\n* Implement algorithms involving multiple 1D or 2D arrays or `ArrayList`s\n    </div>\n</details>"
        csa9-pilot-2025:
          lessons: {}
          lesson_groups:
            lessonGroup-2:
              display_name: Review and Practice
            lessonGroup-3:
              display_name: Mock Exams
            lessonGroup-4:
              display_name: Sandboxes
          name: csa9-pilot-2025
          title: AP Exam Review and Practice
          description_audience: ''
          description_short: Students prepare for the AP CSA Exam by practicing strategies for the multiple-choice and free response questions.
          description: This unit prepares students for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. Students identify strengths and areas of improvement to create individualized study plans to focus their practice and self-assess their progress.
          student_description: This unit prepares you for the AP CSA Exam by reviewing key concepts, practicing multiple-choice and free response questions, and strengthening test-taking strategies. You identify strengths and areas of improvement to create individualized study plans to focus you practice and self-assess your progress.
        sandbox-debugging:
          lessons:
            lesson-1:
              name: What is Debugging?
          lesson_groups: {}
          name: sandbox-debugging
          title: Debugging Sandbox
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        exploring-gen-ai-1:
          lessons: {}
          lesson_groups: {}
          name: exploring-gen-ai-1
          title: Foundations of Generative AI
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        exploring-gen-ai-2:
          lessons: {}
          lesson_groups: {}
          name: exploring-gen-ai-2
          title: Customizing Large Language Models
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        self-paced-gen-ai-2024:
          lessons:
            lesson-1:
              name: Introduction to Generative AI
            lesson-2:
              name: Lesson Exploration, Foundations of Gen AI
            lesson-3:
              name: Lesson Exploration, Customizing Large Language Models
            lesson-4:
              name: Lesson Exploration, User Centered Design
            lesson-5:
              name: Teaching Resources
          lesson_groups: {}
          name: self-paced-gen-ai-2024
          title: Generative AI Self-Paced Professional Learning
          description_audience: ''
          description_short: ''
          description: "## Welcome! \n##### This professional learning module is designed to help you prepare to teach Code.org’s Generative AI unit.\n\n##### The Generative AI unit is designed as standalone coursework for 6-12 students that can be integrated seamlessly into any existing curriculum, offering teachers the flexibility to introduce it according to their schedule and educational needs. \n\n### Find the learning that works for you\n* **Go at your own pace:** This self-paced learning experience is designed to give you control over your own learning. Suggested times are given for each lesson.  However, we encourage you to **engage with the content at your own pace.**\n\n* **Pick your content:** The content is organized in the suggested progression for teachers new to both Code.org and the Generative AI unit. However, you can **engage with the content in the order that best meets your needs.** If you are already familiar with the Code.org platform, you might choose to skip Getting Started with Code.org and move straight to Computer Vision Unit. "
          student_description: ''
        music-ai-2024:
          lessons:
            lesson-1:
              name: 'Music Lab: A.I. Edition for Hour of Code'
          lesson_groups: {}
          name: music-ai-2024
          title: 'Music Lab: AI Edition'
          description_audience: 'Hour of Code students and teachers '
          description_short: 'Learn the basics of Music Lab and use AI to help you create new beats and tunes! '
          description: ''
          student_description: ''
        csd-ayw1-debugging:
          lessons:
            lesson-1:
              name: Debugging Challenges
          lesson_groups: {}
          name: csd-ayw1-debugging
          title: 'CSD Academic Year Workshop #1 - Debugging'
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
        sandbox-teaching-data-science:
          lessons:
            lesson-1:
              name: Introduction to Teaching Data Science
            lesson-2:
              name: Introduction to Data Science [Chapter 1]
            lesson-3:
              name: Python and Data Science [Chapter 2]
            lesson-4:
              name: Teaching Resources for Data Science
          lesson_groups: {}
          name: sandbox-teaching-data-science
          title: Teaching Data Science
          description_audience: ''
          description_short: ''
          description: ''
          student_description: ''
