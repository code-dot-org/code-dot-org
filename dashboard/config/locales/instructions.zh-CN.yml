"zh-CN":
  data:
    instructions:
      2-3 Artist 1 new_instruction: 您好，我是一个艺术家。你写的代码可以让我画任何的东西。 用几个程序模块来让我画一些灰色线条吧。
        (每一行是100个像素长)
      2-3 Artist 11_instruction: |
        为停止标志画一个八边形的边，边长为100像素。\r
        \r
      2-3 Artist 12_instruction: |-
        画一个圆圈来完成这个眼球！\r
        \r
        如果每次都是转1度，你需要重复次才能完成这个圈？180 、360 、还是500次呢？
      2-3 Artist 2 new_instruction: '这所房子有一堵墙只完成了一半。每一边长都是 100，但是完成了一半的墙只有 50。请完成该墙。 '
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. "
      2-3 Artist 3.4_instruction: |-
        “跳”模块会移动艺术家但不画线。通过使用“向前跳”块和“向前移动”块来画出虚线。
        每行是50像素长。
      2-3 Artist 3_instruction: 这顶帽子的高度是 100 像素。请你画一顶高度为 70 像素的帽子。
      2-3 Artist 3new_instruction: |-
        红色的帽子高度是 100 像素。请绘制一顶高度矮70个像素的黑色帽子。\r
        （注意：每顶帽子的宽度是50像素。）
      2-3 Artist 4_instruction: 帮我为小猫盖好房子
      2-3 Artist 5_instruction: 将这段代码用“重复次数”模块来代替，画出同样的房子只需要3块模块。
      2-3 Artist 6_instruction: 这个房子需要一个屋顶！提示：所有三面都具有相同的长度。
      2-3 Artist 7_instruction: '画完学校窗户的最后一部分，这样班级里的每个人都可以看到外面了。每个正方形窗户的边长都是25像素。 '
      2-3 Artist 8_instruction: 把矩形分成两个相等的正方形来为每只动物提供一个房间。长方形的宽是200像素，高是100像素。有很多方法都可以解决这个难题，所以找出一些乐趣吧！
      2-3 Artist 9 NEW_instruction: 完成这只风筝
      2-3 Artist 9 REPLACEMENT_instruction: 绘制完这些楼梯 ！
      2-3 Artist 9_instruction: 完成这只风筝
      2-3 Artist Assessment 1_instruction: 评估： 完成绘制最后一个齿。宽度为25像素并且高度为25像素。
      2-3 Artist Debugging 1_instruction: 这顶帽子应该只有50像素宽。 你能改好它吗？
      2-3 Artist Debugging 10_instruction: |-
        我的游戏控制器方向键太窄了。\r
        \r
        你能让它增加 10 像素吗？ \r
        \r
        试试先运行代码看看哪里有问题。
      2-3 Artist Debugging 11_instruction: |-
        我的雪花在崩塌！\r
        \r
        你能找到哪里错了吗？
      2-3 Artist Debugging 12_instruction: 我希望添加一片海浪到场景里。能帮我吗？
      2-3 Artist Debugging 2_instruction: |-
        这只猫的三条胡须的代码是错误的。
        \r
        \r
        修改代码来画出一样长的胡须。
      2-3 Artist Debugging 3_instruction: |-
        我的船有个洞!\r
        \r
        你可以帮我修好它吗?
      2-3 Artist Debugging 4_instruction: |-
        我们想要画的图是什么？
        用适当的线条和角度连接这些点。
      2-3 Artist Debugging 5_instruction: |-
        画腿和脚的程序是错误的。\r
        \r
        你能改对它吗？
      2-3 Artist Debugging 6_instruction: |-
        好像我坐的椅子少了一条腿！\r
        \r
        编辑代码来画出最后一条腿。
      2-3 Artist Debugging 7_instruction: |-
        代码里面的这个“C”看起来像是画反了！\r
        \r
        你能把它再改成“C”吗？
      2-3 Artist Debugging 8_instruction: |-
        我的老师说应该有始有终！\r
        \r
        帮我完成我的风车。你能找出哪里错了吗？
      2-3 Artist Debugging 9_instruction: |-
        有东西断了！\r
        \r
        茎的代码错了。你能让小画家画出正确的茎吗？
      2-3 Artist Debugging Assessment 1_instruction: |-
        评估：为什么每条边75像素太短了？\r
        \r
        代码哪里错了？
      2-3 Artist Free Play_instruction: 自己玩吧！想画什么就画什么。
      2-3 Artist Functions 1 a_instruction: |-
        “我，僵尸艺术家。我，爱画画 ！”\r
        \r
        请帮它画副方形眼镜。\r
        \r
        正方形的宽度是100像素，而眼镜间的桥比它短25像素。
      2-3 Artist Functions 1_instruction: |-
        “我，僵尸艺术家。我，爱画画 ！”\r
        \r
        请帮它画副方形眼镜。\r
        \r
        正方形的宽度是100像素，而眼镜间的桥比它短25像素。
      2-3 Artist Functions 10_instruction: 自由发挥：这里有两个函数，一个是绘制一个大齿轮，另一个是画一个小齿轮。用它们来绘制一个机器的内部结构！
      2-3 Artist Functions 11 a_instruction: |-
        We've renamed the `draw a square`
        function to `draw a hexagon`, but it's still giving us squares! Can you modify
        the `draw a hexagon` function to draw a hexagon with 50 pixel sides? \r
        \r
        Draw
        the image using the new function!
      2-3 Artist Functions 11.5 a_instruction: |-
        这里同样是"画一个六边形"的功能。\r
        \r
        如果在循环中每次转 60 度，一共转6次，会发生什么呢？
      2-3 Artist Functions 11.5_instruction: |-
        这里同样是"画一个六边形"的功能。\r
        \r
        如果在循环中每次转 60 度，一共转6次，会发生什么呢？
      2-3 Artist Functions 11_instruction: |-
        我们将`draw a square`（画一个正方形）的函数改成了`draw a hexagon`（画一个六边形），但它实际上还是只能画正方形！你能把`draw a hexagon`（画一个六边形）函数改成能画边长50像素的六边形吗？\r
        \r
        用新函数来画这个图形吧！
      2-3 Artist Functions 12 Mike_instruction: |-
        函数对于多次画一个复杂的事物非常有帮助。\r
        \r
        你能用“画一朵花”函数来填满整个花盆吗？\r
        提示：每株花应该相隔100像素。
      2-3 Artist Functions 12 a_instruction: |-
        函数对于多次画一个复杂的事物非常有帮助。\r
        \r
        你能用“画一朵花”函数来填满整个花盆吗？\r
        提示：每株花应该相隔100像素。
      2-3 Artist Functions 12_instruction: |-
        函数对于多次画一个复杂的事物非常有帮助。\r
        \r
        你能用“画一朵花”函数来填满整个花盆吗？\r
        提示：每株花应该相隔100像素。
      2-3 Artist Functions 13_instruction: 我们提供了4个函数。你可以随意把它们放在一个或者多个循环中来画图，然后分享给你的朋友们。点击“运行”来看示例。
      2-3 Artist Functions 2 a_instruction: "Use the small green `draw a square`\nblock
        to call this new function and create the glasses. "
      2-3 Artist Functions 2_instruction: |-
        函数能让你定义新的模块。\r
        \r
        我们将画正方形的模块挪到了一个叫做“画一个正方形”的函数里。这次，用“画一个正方形”函数来画个眼镜吗。
        \r
        \r
        正方形间隔75像素。
      2-3 Artist Functions 3 a_instruction: |-
        Edit the "draw a square" function
        to draw glasses with frames that are 115px on each side. \r
        \r
        The squares
        are now 45 pixels apart.
      2-3 Artist Functions 3_instruction: |-
        编辑这个函数来画一个边长115像素的正方形，从而能够画出一个更大的眼镜。\r
        \r
        正方形的间隔为45个像素。
      2-3 Artist Functions 4 a_instruction: |-
        Now, put the function inside of a loop
        and add an extra turn to draw these three squares.
      2-3 Artist Functions 4_instruction: 现在，将函数放到循环里来画这三个正方形。
      2-3 Artist Functions 7_instruction: '用“画一个房子"的函数来画两个参数不同的房子。（提示: 第一个房子是100像素的）。'
      2-3 Artist Functions 9_instruction: 自由发挥：这里有个雪花函数。试试用它创造出冬季的景色！这是一个自由关卡，不需要解决问题。随便玩吧！
      2-3 Artist Loops 1_instruction: 可以做出一个边长100像素的六边形吗？记住，这代表每次只能转60度。
      2-3 Artist Loops 10_instruction: 如果让最后一步提早一半，将会发生什么？
      2-3 Artist Loops 11_instruction: 现在，让我们用另一个循环把整个作品都包围起来！ 别忘了在外层循环的最后增加一个角度。
      2-3 Artist Loops 2_instruction: |-
        Now use a repeat block to make the cell a
        shell.
      2-3 Artist Loops 4_instruction: 如果我们用循环来一次次重复这个形状的话，会发生什么呢？
      2-3 Artist Loops 5_instruction: 现在，让我们对这个循环做个小小的改动，然后看看图象有什么不同。
      2-3 Artist Loops 6_instruction: 在循环里再添加一个移动和另一个转弯，然后看看你的设计有什么变化。
      2-3 Artist Loops 7_instruction: 我们可以用循环来制作所有的多边形。可以在六边形里面创建一个平行四边形吗？
      2-3 Artist Loops 8_instruction: 将两个元素放到一个循环里。
      2-3 Artist Loops 9_instruction: 我们要循环同样的元素了，但是现在我们需要给它们之间加一些距离。\r用和以前一样的代码，但是在外面的循环结束时往前走一步。
      2-3 Artist Loops New 1_instruction: 让我们来画一个机器人的头！你可以创建一个100像素边的正方形。
      2-3 Artist Loops New 10_instruction: 现在，让我们把这一堆V用循环连在一起。
      2-3 Artist Loops New 11_instruction: 重构刚刚那一关的代码，但是这次，加一个左转30度到循环里。现在，重复24次，而不是8次。
      2-3 Artist Loops New 12_instruction: '画一个边长100像素的菱形。

'
      2-3 Artist Loops New 13_instruction: |-
        现在，我们从一些（灰色的）代码开始来画一个菱形。\r
        \r
        循环灰色的代码来创造一个有趣的图形！
      2-3 Artist Loops New 14_instruction: 改一改画菱形的代码，看看能画出什么别的形状。试试改变转向的度数和循环的次数。
      2-3 Artist Loops New 15_instruction: 现在，随便画你喜欢的东西吧！
      2-3 Artist Loops New 2_instruction: |-
        这是一个以前解决过的问题，但是这次，我们只用一个“向前移动”和一个“转向”模块。\r
        \r
        你能用一个“重复”模块来解决这个问题吗？
      2-3 Artist Loops New 9_instruction: 画一个简单的V（两边都是50像素）来完成这个箭头。
      2-3 Artist Match Hex Pic_instruction: 比赛： 帮助完成六角形。
      2-3 Artist Match Rho Pic_instruction: 比赛： 补全缺少的代码。
      2-3 Artist Match Sq Pic_instruction: 比赛： 完成缺少的代码
      2-3 Artist Match Tri pic_instruction: 匹配： 填写缺少的代码。
      2-3 Artist Nested Loops 1_instruction: 将整个代码块放到一个“重复”模块中来画出这个形状。
      2-3 Artist Nested Loops 10_instruction: 让这段代码循环12次来完成这个图案。
      2-3 Artist Nested Loops 11_instruction: 让这段代码循环4次可以完成该图案，在每个圆圈后要旋转 90 度哦。
      2-3 Artist Nested Loops 12_instruction: 让这段代码循环12次就可完成这个弯曲的图案。
      2-3 Artist Nested Loops 2_instruction: |-
        现在，循环这个三角形6次。\r
        \r
        在画完每个三角形后，需要转60度。
      2-3 Artist Nested Loops 3_instruction: |-
        你需要循环这个三角形12次来画出图形。\r
        \r
        将圆周（360度）除以要画形状的数量（12）来算算每次画完后应该转多少度。
      2-3 Artist Nested Loops 4_instruction: |-
        将菱形循环12次来画出一朵花!\r
        \r
        提示：我们会用和画12个三角形一样的角度来画12个菱形。\r
        \r
        画出每个形状后应该转多少度？
      2-3 Artist Nested Loops 5_instruction: |-
        用嵌套循环来填满建筑物的窗户。\r
        \r
        这些窗户长20像素，相隔20像素。
      2-3 Artist Nested Loops 6_instruction: |-
        这只恐龙的尾巴上有8个尖刺。\r
        每根刺有30像素长。将三角形循环8次，但确保画出每个三角形之后向前跳！
      2-3 Artist Nested Loops 7_instruction: |-
        循环这个三角形10次来画出太阳。\r
        \r
        画出每个三角形后，需要移动并转向。\r
        \r
        你可以用圆圈的度数（360）除以三角形的数量，来算算每次需要转多少度。
      2-3 Artist Nested Loops 8_instruction: |-
        现在我们加一些草到图画中。
        \r
        \r
        每一簇草相隔50像素。
      2-3 Artist Nested Loops 9_instruction: |-
        再加上一朵花，这幅图就完成了。\r
        \r
        将菱形循环12次来画出这朵花。
      2-3 Artist Nested Loops Free Play_instruction: 自由发挥，用嵌套循环画一些很酷的东西
      2-3 Bee Conditionals 1_instruction: 嗨！我是一只蜜蜂。帮我从这朵花获得花蜜。
      2-3 Bee Conditionals 10_instruction: '紫色的话也许有一个花蜜，或者一个都没有。小心不要从没有蜜的花里面采蜜。\r

'
      2-3 Bee Conditionals 11_instruction: "我想知道那里有什么！\\r\n\\r\n帮我飞到院子里，只从有花蜜的花里收集花蜜。 "
      2-3 Bee Conditionals 12_instruction: 帮我用尽可能少的模块找到所有的花蜜！
      2-3 Bee Conditionals 13_instruction: |-
        这里有好多！\r
        \r
        用你学到的知识来收集所有的花蜜，并制作蜂蜜。
      2-3 Bee Conditionals 14_instruction: |-
        让我们把东西都放到一起！\r
        \r
        用你学到的知识只从有花蜜的花里收集，用的模块越少越好。别忘了最后制作蜂蜜。
      2-3 Bee Conditionals 15_instruction: |-
        这个像阶梯一样的图形看起来很熟悉。\r
        \r
        你能用尽量少的模块从花里收集一些花蜜吗？
      2-3 Bee Conditionals 2_instruction: |-
        我是一只饥饿的蜜蜂！\r
        帮我用最少的模块从花朵中采集花蜜。
      2-3 Bee Conditionals 3_instruction: "查看所有的花蜜！\\r\n\\r\n帮我用尽可能少的模块来收集花蜜并酿成蜂蜜。
        \ "
      2-3 Bee Conditionals 4_instruction: 帮我从所有花中采集花蜜并酿造成蜂蜜。
      2-3 Bee Conditionals 5_instruction: |-
        小心不要从没有花蜜的紫花里收集花蜜。\r
        你必须先用“如果”模块来检查是否花蜜等于1。
      2-3 Bee Conditionals 6_instruction: 用“如果”模块来检查是否花里面有花蜜。
      2-3 Bee Conditionals 7_instruction: 从每一朵花中采集花蜜（如果有的话）。
      2-3 Bee Conditionals 8_instruction: 这块地里有红色和紫色的花。你能看到红色的花里有多少花蜜，但不知道紫色的有多少。收集所有的花蜜。
      2-3 Bee Conditionals 9_instruction: 采集每一朵花的花蜜。
      2-3 Bee Conditionals Assessment 1_instruction: 评估：收集所有的花蜜。小心，不要采集没有花蜜的紫花。
      2-3 Bee Debugging 1_instruction: 这些模块真的让我很困扰。改正错误，从而能够采集所有花蜜。
      2-3 Bee Debugging 10_instruction: |-
        这些模块真的让我很困扰。\r
        改正错误，从而能够采集所有花蜜，并酿成蜂蜜。
      2-3 Bee Debugging 2_instruction: |-
        你能找到问题吗？\r
        改正错误，从而能够采集所有花蜜。
      2-3 Bee Debugging 3_instruction: |-
        哎呀，被蛰了！\r
        \r
        改正错误，从而能够采集所有花蜜。
      2-3 Bee Debugging 4_instruction: 这些模块真的让我很困扰。改正错误，从而能够采集所有花蜜，并酿成蜂蜜。
      2-3 Bee Debugging 5_instruction: |-
        那朵花看起来很好吃！\r
        \r
        改正错误，从而能够采集所有花蜜。你可以用“运行”和“下一步”了。
      2-3 Bee Debugging 6_instruction: |-
        真是一个甜蜜的挑战！\r
        \r
        改正错误，从而能够采集所有花蜜。
      2-3 Bee Debugging 7_instruction: 改正错误，从而能够采集所有花蜜，并酿成蜂蜜。
      2-3 Bee Debugging 8_instruction: |-
        这么多美丽的花！\r
        \r
        改正错误，从而能够采集所有花蜜。
      2-3 Bee Debugging 9_instruction: |-
        有点耐心！\r
        \r
        你需要修复这个程序的一些问题，，从而能够采集所有花蜜，并酿成蜂蜜。
      2-3 Bee Debugging Assessment 1_instruction: |-
        评估：现在是时候看看你学会了什么了！\r
        \r
        改正错误，从而能够采集所有花蜜，并酿成蜂蜜。
      2-3 Bee Functions 1_instruction: 函数能执行多个模块来完成一个任务。使用“采2份花蜜”方程来采集花蜜。
      2-3 Bee Functions 10_instruction: |-
        每次你运行关卡的时候，紫色花朵内的花蜜都会在 1 和 0 中变动。 \r
        \r
        创建一个函数，使小蜜蜂只从有花蜜的紫色花收集花蜜。
      2-3 Bee Functions 2_instruction: |-
        函数是由多个模块组合起来完成同一个任务。\r
        \r
        用“get 5”函数来一次得到5个花蜜。
      2-3 Bee Functions 3_instruction: 采集每一朵花的花蜜。
      2-3 Bee Functions 4_instruction: |-
        “移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r
        \r
        用这个函数收集所有的花蜜。
      2-3 Bee Functions 5_instruction: 现在花里有更多的花蜜了。编辑这个函数，以使它每次能收集4个花蜜，然后用它收集到所有的花蜜。
      2-3 Bee Functions 6_instruction: 现在用同样的函数来从三朵花里收集花蜜。
      2-3 Bee Functions 7_instruction: 现在，花更远了。编辑给定的函数，用它收集所有的花蜜。
      2-3 Bee Functions 8_instruction: 创建函数来获取花蜜，向前移动，并酿造蜂蜜。用函数来收集花蜜，并在蜂窝那里酿造花蜜。
      2-3 Bee Functions 9_instruction: 创造您自己的函数。这个函数可以向下走，采集花蜜，酿造蜂蜜，然后返回起点。
      2-3 Bee Functions Assessment 1_instruction: 评估：用给定的函数从每朵花上收集花蜜。
      2-3 Bee Functions Assessment 2_instruction: 评估：创建一个函数来转向、往前移动、并酿造三个蜂蜜，然后让蜜蜂返回出发的位置并向后转。
      2-3 Bee Loops 1_instruction: |-
        这些花看上去很好吃！\r
        \r
        用尽可能少的模块，从每朵花里收集蜂蜜。
      2-3 Bee Loops 10_instruction: 可以把“当”循环放到另外两个循环里来收集所有的花蜜吗？
      2-3 Bee Loops 11_instruction: 在这块地里，用当循环来收集所有的花蜜。
      2-3 Bee Loops 12_instruction: 在这块地里，用当循环来收集所有的花蜜。
      2-3 Bee Loops 13_instruction: 评估：用尽可能少的模块来收集所有的花蜜。
      2-3 Bee Loops 1A_instruction: '你好，我是蜜蜂。可以帮我从这些花里收集花蜜吗？ '
      2-3 Bee Loops 2_instruction: 用尽可能少的模块来收集花蜜，并酿造蜂蜜。
      2-3 Bee Loops 2A_instruction: 这次，用循环来收集所有花蜜。
      2-3 Bee Loops 3_instruction: 用最少的模块来收集花蜜，并在蜂窝那里酿造蜂蜜。
      2-3 Bee Loops 3A_instruction: 用一个“重复”循环来收集所有花蜜。
      2-3 Bee Loops 3B_instruction: 现在，用“重复”模块来收集花蜜，并酿造蜂蜜。
      2-3 Bee Loops 4_instruction: |-
        忙碌的蜜蜂！\r
        \r
        帮助蜜蜂用尽可能少的模块来收集花蜜并酿蜂蜜。
      2-3 Bee Loops 4A_instruction: |-
        这个谜题中的循环应该进行多少次？\r
        \r
        循环是你的朋友！用一些循环来减少模块，并完成这道谜题。
      2-3 Bee Loops 5_instruction: |-
        这条路的形状和其它的不一样。\r
        \r
        你能用尽量少的模块来收集所有花蜜吗？
      2-3 Bee Loops 6_instruction: 你能为蜜蜂找到最快的路，收集所有花蜜并酿造蜂蜜吗？
      2-3 Bee Loops 7_instruction: 多美的花园啊！帮助蜜蜂访问每一朵。你能找到只用7个模块就实现的方法吗？
      2-3 Bee Loops 8_instruction: |-
        在每次你游玩这个谜题时紫色花里的花蜜数量都是不一样的。\r
        \r
        使用“当有花蜜时”循环来收集所有花蜜。\r
        \r
        循环在条件为真时会不停的运行，在这里条件为“花蜜数量大于0”。
      2-3 Bee Loops 9_instruction: "“当循环”就像在循环里面有个“如果”语句一样。添加一个当循环到代码里来完成同样的任务。"
      2-3 Bee Loops Assessment 1_instruction: 评估 - 用当循环来收集所有花蜜。
      2-3 Maze 1_instruction: '可以帮我抓住这只顽皮的猪吗？在“当运行时”模块下放几个“向前移动”的模块，然后点击“运行”。 '
      2-3 Maze 10_instruction: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze 11_instruction: 带我去那朵花， 我饿了！你需要用模块重复几次？
      2-3 Maze 12 (copy 1)_instruction: 可以用两个模块就完成上一个问题吗？（提示：用重复数次模块来创建一个循环）
      2-3 Maze 12 (copy 2)_instruction: 可以用两个模块就完成上一个问题吗？（提示：用重复数次模块来创建一个循环）
      2-3 Maze 12 (old)_instruction: 这次用重复模块来帮我到达那只猪！
      2-3 Maze 12 - One Move Block_instruction: |-
        走到猪的位置！
        这次你能只用一个“向前移动”模块。另外，看看其他的模块有用吗？
      2-3 Maze 12_instruction: 你能通过创建一个只有`向前移动`的`重复`循环来到达猪那里吗？
      2-3 Maze 13 (old)_instruction: 现在，用“重复直到”模块帮我到达那只猪旁边！
      2-3 Maze 13_instruction: 帮我到达猪那里！这次只能用一个“向前移动”模块。
      2-3 Maze 14 (old)_instruction: 用“重复直到”模块帮我到达那只猪！
      2-3 Maze 14_instruction: 带我到向日葵那里！（我需要的“重复次数”模块呢？）
      2-3 Maze 15 (old)_instruction: 帮我用”重复直到“模块到达那头猪！
      2-3 Maze 15_instruction: 在这道题里，两个“重复”循环能够让你用最少数量的模块来到达猪那里！
      2-3 Maze 16 (old)_instruction: 帮我用”重复直到“模块到达那头猪！
      2-3 Maze 16 before_instruction: 你能找到最快的路来帮我到那只猪那里吗？
      2-3 Maze 16_instruction: 在循环里放置一个以上的模块！你能循环这个序列，让僵尸走到向日葵那里吗？
      2-3 Maze 2_instruction: 这只猪弄乱了我的羽毛！帮我抓住他！
      2-3 Maze 3_instruction: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      2-3 Maze 4_instruction: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze 5_instruction: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze 6_instruction: 保持冷静，帮我找到那只坏猪。不然我要被它气死了！
      2-3 Maze 7_instruction: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze 8_instruction: 帮我到达那只猪。
      2-3 Maze 9_instruction: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze Loops 1_instruction: 能用5个同样的模块来帮我到达猪那里吗？
      2-3 Maze Loops 17_instruction: 用你学会的知识让我到达向日葵那里！
      2-3 Maze Loops 18_instruction: |-
        用最少的模块帮我到达向日葵！\r
        \r
        试着在一个“重复”循环里添加另一个，这样来减少所需要模块的数量。
      2-3 Maze Loops 19_instruction: |-
        让我们到达下一级！\r
        用循环来使用尽可能少的模块，帮我到达向日葵！
      2-3 Maze Loops 20_instruction: 用尽可能少的模块来帮我到达向日葵！
      2-3 Maze Loops 21_instruction: 用尽可能少的模块来帮我到达向日葵！
      2-3 Maze Loops Assessment 1_instruction: '评估：只用5个模块帮我到达向日葵！ '
      2-3 Maze sq1_instruction: 这只猪把我的羽毛弄乱了。帮我抓住他！
      2-3 Maze sq10_instruction: 帮我送到那头猪那里！什么模块被重复执行了？
      2-3 Maze sq10v2_instruction: 帮我送到那头猪那里！什么模块被重复执行了？
      2-3 Maze sq2_instruction: 顺着路把我带到傻猪那里。记得躲开TNT炸药，不然我的羽毛就没了。
      2-3 Maze sq3_instruction: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze sq4_instruction: 保持冷静，帮我找到那只坏猪。不然我要被它气死了！
      2-3 Maze sq5_instruction: 帮我抓住那只猪！你需要重复模块多少次？
      2-3 Maze sq6_instruction: 你能用两个模块就完成上一个问题吗？（提示：用重复数次模块来创建一个循环）
      2-3 Maze sq7_instruction: 只用3个模块，就把我送到绿色的入侵者那里。
      2-3 Maze sq8_instruction: 帮我到达那只猪！（我需要的“重复次数”模块在哪里？）
      2-3 Maze sq9_instruction: 通过用循环来使用更少的模块到达那只猪。
      2-3 maze sq11_instruction: 帮我到达猪那里！哪些模块被重复执行了？
      2-3 maze sq12_instruction: 你能用“重复次数”模块循环来替代以前的答案吗？
      2-3 maze sq13_instruction: 亲爱的人。我，僵尸。必须...... 到向日葵。用"重复直到"块创建一个循环。
      2-3 maze sq14_instruction: 你能只用4个模块就帮我到达向日葵吗？
      2-3 maze sq15_instruction: 你能只用5个模块就到达向日葵吗？
      2-3 maze sq16_instruction: 这一关差不多，但是有一点不同。你能只用5个模块吗？
      2-3_instruction: 紫色的花可能有或没有花蜜。小心不要从没有花蜜的紫色中采集花蜜。
      2-3level1_instruction: 帮助这只鸟往前走来抓住淘气的猪。
      20hr_farmer_stage9_1_instruction: |-
        Hi, I'm a farmer. I need your help to flatten
        the field on my farm so it's ready for planting. Move me to the pile of dirt
        and use the "remove" block to remove it.
      20hr_farmer_stage9_10_instruction: |-
        I'm working late, so it's dark out, and
        I can't tell how large the piles are. Now I don't have all the options I
        used to have on the while block. Move me along the field, and if there is
        a pile, remove it
      20hr_farmer_stage9_11_instruction: |-
        It's still dark outside. Move me along
        the field. If there is a pile, remove it, and if there is a hole, fill it
        in. Hint: use the dropdown menu of options on the "if" block.
      20hr_farmer_stage9_2_instruction: |-
        Next, move me to the hole and fill it with
        TWO shovelfuls of dirt, using the "fill" block.
      20hr_farmer_stage9_3_instruction: |-
        Move me to the pile of dirt and tell me
        how many shovelfuls to remove using as few blocks as possible.
      20hr_farmer_stage9_4_instruction: |-
        Can you help me remove all four piles of
        dirt? Hint: use a repeat block if you can.
      20hr_farmer_stage9_5_instruction: |-
        Help me fill in all these holes with 5 shovelfuls
        of dirt. Hint: you can put a "repeat" block inside the "while" block.
      20hr_farmer_stage9_6_instruction: |-
        Remove all the piles of dirt, using as few
        blocks as possible. The new options in the dropdown menu on the "while"
        block tell me if I'm standing on a pile or a hole.
      20hr_farmer_stage9_7_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs. Can you write a program that fills
        it until the ground is even?
      20hr_farmer_stage9_8_instruction: |-
        Help me fill in the hole at the end of the
        field, using as few blocks as possible.
      20hr_farmer_stage9_9_instruction: |-
        Make me remove all these piles of dirt.
        Try to use as few blocks as possible. Hint: try using a "while" block.
      20hr_maze_stage2_1_instruction: |-
        Can you help me to catch the naughty pig?
        Stack a couple of "move forward" blocks together and press "Run" to help
        me get there.
      20hr_maze_stage2_10_instruction: |-
        Ok, try the new "repeat until" block -
        it will repeat until I reach the annoying pig.
      20hr_maze_stage2_11_instruction: |-
        Ok, one last time for practice - can you
        solve this one using only 4 blocks?
      20hr_maze_stage2_12_instruction: |-
        Dear person. Me zombie. Me hungry. Must...
        get... to sunflower... Can you get me there with only 5 blocks?
      20hr_maze_stage2_13_instruction: |-
        Ok, this is similar, but slightly different.
        Can you do it in only 5 blocks?
      20hr_maze_stage2_14_instruction: |-
        Use the new "if" block to let me decide
        when to turn. Hint: you only need one more block, but learn how we set it
        up so you can do it on your own next time.
      20hr_maze_stage2_15_instruction: |-
        Ok, this is just like the last puzzle, but
        you need to remember how you used the "if" block and the "repeat" block
        together.
      20hr_maze_stage2_16_instruction: |-
        Me want sunflower! Use an "if" block to
        get me there with the fewest number of blocks.
      20hr_maze_stage2_17_instruction: |-
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the chompers!
      20hr_maze_stage2_18_instruction: |-
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the sunflower try to use
        this new block.
      20hr_maze_stage2_19_instruction: 让我们来再练习一次使用“如果/否则”块，你能第一次就成功么？
      20hr_maze_stage2_2_instruction: |-
        This pig is ruffling my feathers. Help me
        to find him!
      20hr_maze_stage2_20_instruction: |-
        Can you add just 3 blocks to help me solve
        a more complex maze? If you do it right, I can walk any curvy path no matter
        the length.
      20hr_maze_stage2_3_instruction: |-
        Trace the path and lead me to the silly pig.
        Avoid TNT or the feathers will fly!
      20hr_maze_stage2_4_instruction: |-
        Guide me to the green evilness! (Watch out
        for TNT)
      20hr_maze_stage2_5_instruction: |-
        Keep calm and help me to find the bad pig.
        Otherwise I might get angry!
      20hr_maze_stage2_6_instruction: |-
        There's a way I can get to the silly pig
        using only 2 blocks. Can you figure it out?
      20hr_maze_stage2_7_instruction: |-
        Try to get me to the green intruder using
        only three blocks.
      20hr_maze_stage2_8_instruction: |-
        Help me banish this bad piggy using the fewest
        number of blocks. Try using more than one "repeat times" block.
      20hr_maze_stage2_9_instruction: |-
        When a block is grey, that means you can't
        delete it. Solve this puzzle using the "repeat" block that repeats 3 times.
        Try putting these 3 blocks inside the grey "repeat" block: move, move, turn.
      4-5 Artist 1_instruction: 帮我完成画我的箱子。(每一行是300像素长)
      4-5 Artist 10_instruction: 点击“运行”来试试代码。然后，重复它足够多的次数来完成这幅画。每次的颜色都会不一样。
      4-5 Artist 11_instruction: 完成这些绿线。它们有300像素长，相隔15像素。
      4-5 Artist 2_instruction: 你能用“重复”模块来完成这个正方形吗？
      4-5 Artist 3.5_instruction: 试着了解这段代码会发生什么（或者点击"运行"来试试）。然后，重复它来完成这幅图！
      4-5 Artist 3_instruction: 这个长方形的花床周长是600。长边是200。用最少的模块来画出这个长方形。
      4-5 Artist 4_instruction: 一个圆有多少度？循环这些模块来创造一个彩色的圆圈。
      4-5 Artist 5_instruction: 在“???”里应该放什么，才能让僵尸用循环来完成这幅画呢？
      4-5 Artist 6_instruction: 等边三角形每个角的度数都是60。每条边是200像素。完成这幅画。
      4-5 Artist 7_instruction: 直角三角形的各个角分别是30、60、90度。斜边（弦）的长度是200像素。完成这幅画。
      4-5 Artist 8_instruction: |-
        足球场中线与边线是垂直的。\r
        这个场地的周长是800像素，长是240像素。它有多高？\r
        \r
        画出球场的边线和中线。
      4-5 Artist 9_instruction: 画出这幅图的另一半，使得这个图变得对称。这些是等边三角形，边长是50像素。
      4-5 Artist Assessment 1_instruction: 评估：用循环来画等边三角形。每条边是300像素。
      4-5 Artist For Loops 1_instruction: 把数字1到10放到宽度的模块中，然后运行代码。
      4-5 Artist For Loops 11_instruction: 完成for循环模块，使得它可以按照0，20，40，60，80... 200来数数。
      4-5 Artist For Loops 12_instruction: '如果将“从”和“到”的数字反过来会发生什么？完成计数循环模块，使得它能按照200，180，160，140，120...0数数。 '
      4-5 Artist For Loops 13_instruction: 这份代码没有使用计数循环，所以用了非常多的模块！用一个计数循环模块来完成这个螺旋。提示：最后一条线的长度是250像素。
      4-5 Artist For Loops 14_instruction: 有人开始写代码后，认识到应该有更快的办法！用一个“计数循环"模块来替代其它模块，并完成这个三角形螺旋。（提示：最后一行的长度是300像素）
      4-5 Artist For Loops 15_instruction: 有人开始写代码后，认识到应该有更快的办法！用一个“计数循环"模块来替代其它模块，并完成这个六边形螺旋。（提示：最后一行的长度是200像素）
      4-5 Artist For Loops 2_instruction: 这是一个“计数循环”模块。“计数循环”模块能够将里面的代码重复给定的次数，而不是每次输入1,2,3...
        10。把数字10放入"计数循环"循环的"至"区段内。
      4-5 Artist For Loops 3_instruction: 我们怎么从1计数到50？编辑”计数循环“模块。
      4-5 Artist For Loops 4_instruction: 完成”计数循环“模块，从而能够从1数到10，并且每次数1.
      4-5 Artist For Loops 6_instruction: 试试画大小为50，60，70，80，和90的正方形。你可以使用五次"画一个正方形"的函数。
      4-5 Artist For Loops 7_instruction: 绘制的相同的方块，但使用"计数"的块来更改大小。将"计数器"模块放到"画一个正方形"函数里。提示：它在变量类别中。
      4-5 Artist For Loops 8_instruction: 你能将模块放入“计数循环”模块，并且从10增加到200，每次增加10吗？你能在循环类别中找到“计数循环”模块。
      4-5 Artist For Loops 9_instruction: 这些圆圈的大小是5和10，15，20，25，30，35。用一个“计数循环”模块来画出这些圆圈。
      4-5 Artist Free Draw 1_instruction: 自由发挥！想画什么就画什么。
      4-5 Artist Functions 1_instruction: 用重复循环来画这个三角形。
      4-5 Artist Functions 10a_instruction: 将代码放到“画一个雪花”的函数中，并且将50替换为参数“大小”。这个函数已经被调用了，并且参数是100像素。
      4-5 Artist Functions 10b_instruction: '用“画一个雪花”函数来创建不同大小的雪花。提示: 第一个雪花是25像素长，随后每个雪花的长度都是前一个的两倍。'
      4-5 Artist Functions 11_instruction: 这个“画一个六边形”的函数用了“画一个三角形”的函数。完成花六边形的函数。（提示：一个六边形有6条边，每条是100像素长）
      4-5 Artist Functions 12_instruction: 完成“画波浪”的函数。每个波浪由一个高峰和一个低谷组成。提示：画5个蓝色的波浪。
      4-5 Artist Functions 13 Free play_instruction: 这里有一些函数能画出行星、恒星、火箭和机器人。想画什么就画什么吧，然后分享给你的朋友。
      4-5 Artist Functions 14 Free play_instruction: 这里提供了几个函数。将它们放到循环里来画画吧，然后分享给你的朋友。点击“运行”看看示例。
      4-5 Artist Functions 15 Assessment_instruction: 评估：用“画一个正方形”函数来创建正方形。这些正方形长度为50，100，150像素。
      4-5 Artist Functions 2a_instruction: 现在将这些模块放到一个叫做“画一个小三角形”的新函数里，然后调用它。
      4-5 Artist Functions 2b_instruction: 现在，用提供的模块创建一个函数叫做“画一个小三角形”。
      4-5 Artist Functions 3_instruction: '现在，创建“画一个中等的三角形”和“画一个大三角形”函数。“画一个小三角形”的函数已经有了。这些三角形的边长分别为50（小的），100（中等的），150（大的）。 '
      4-5 Artist Functions 4_instruction: 新的“画一个三角形”的函数有一个参数，它能做以前的三个函数的事情。用这个新的函数画出同样的三角形。
      4-5 Artist Functions 5_instruction: 你能将“画一个三角形”函数改成“画一个正方形”，从而改变画出的图形吗？
      4-5 Artist Functions 6_instruction: 用“画一个正方形”和“画一个三角形”函数来画一个房子。（提示：正方形的边长是200像素）
      4-5 Artist Functions 6b_instruction: 用“画一个正方形”和“画一个三角形”函数，以及其它模块来创建“画一个房子”的函数，然后调用它。
      4-5 Artist Functions 7_instruction: 用“画一个房子”的函数来画一个100像素和一个50像素的房子。这两个房子相隔50像素。
      4-5 Artist Functions 8_instruction: 这个“花一朵花”的函数有一个能调整茎的高度的参数。将它设置为200，然后看看会发生什么。
      4-5 Artist Functions 9_instruction: 画出这三朵花。第一朵花的高度是100像素，接下来的每朵花都比前一朵高50像素。每朵花之间相隔100像素。
      4-5 Artist Patterns 1_instruction: |-
        用循环来画出正方形。\r
        \r
        每条边是20像素长。
      4-5 Artist Patterns 10_instruction: |
        这个代码画了两行六边形 - 循环整个代码4次来画一个蜂窝。\r
        \r
        你需要在最外层的的循环里往回跳120像素，确保小艺术家不会画到屏幕外面去。\r
      4-5 Artist Patterns 11_instruction: '需要重复多少次才能画出一个半圆？ '
      4-5 Artist Patterns 12_instruction: |-
        如果你创建一个和这个很像的循环，但是往左转，而不是往右转，会怎样呢？\r
        \r
        你能重复它来画出波浪吗？
      4-5 Artist Patterns 13_instruction: |-
        现在，让我们把所有东西重复4次来画出这个画框。小心转角 -- 你不能只转90度！\r
        \r
        如果转60次3度，就会创建出一个半圆，什么样的代码能创建出1/4圆的转角？
      4-5 Artist Patterns 2_instruction: 如果将你的正方形循环放到另一个循环中，我们称之为嵌套循环。在外面的循环里需要加上什么代码，才能让15个正方形一个挨一个的排成一条线？
      4-5 Artist Patterns 3_instruction: 现在，让我们加深难度！我们已经将所有模块嵌套到另一个循环里了，但是你需要让小艺术家回来画下一行。哪些代码模块能放在最外层循环的下面来画出整个网格？
      4-5 Artist Patterns 4_instruction: 菱形的边长是50像素，角度是120度和60度。用循环来画出它。
      4-5 Artist Patterns 5.5_instruction: 需要重复多少次这个模块才能画出网格中所有的菱形？
      4-5 Artist Patterns 5_instruction: |
        让我们重复这个来画出一行6个菱形。\r
        \r
        \r
        注意：我们需要改动菱形的代码来重复3次，而不是两次。想想为什么要这么改呢？
      4-5 Artist Patterns 6_instruction: 需要重复多少次这个模块才能画出网格中所有的菱形？
      4-5 Artist Patterns 7_instruction: 让我们来修改上一关的代码来适应更复杂的这一关。注意这些菱形的重叠方式，尝试将第一个“向后跳跃”的距离从100变到50(一半的距离)-那么现在小艺术家在第二个“向后跳跃”的时候应该跳多远。
      4-5 Artist Patterns 8_instruction: 用一个循环来画出这个边长为40像素，角度为60的六边形。
      4-5 Artist Patterns 9.5_instruction: 让我们循环此代码来画两行六边形。请注意第二行是如何被移动到右边的。
      4-5 Artist Patterns 9_instruction: |-
        现在，重复三次代码来画出整行。\r
        \r
        每个六边形从最左到最右的宽度是80像素。
      4-5 Artist Patterns Free Play_instruction: 自由发挥 - 试着亲手画一个自己的图案！
      4-5 Bee Conditionals - FC Test_instruction: 蜜蜂现在只想要花蜜。不是所有的目标都是花，所以检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。
      4-5 Bee Conditionals 1 (copy 1)_instruction: |-
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: 云朵挡住了我的视线！检查一下云下面是否有花，然后只从有花的地方收集花蜜。小心，它是能变化的！
      4-5 Bee Conditionals 2 (copy 1)_instruction: |-
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: |-
        更多的云！\r
        \r
        检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。\r
        \r
        记住：
        不是所有云下面都是一样的东西！
      4-5 Bee Conditionals 3_instruction: 现在，我只想酿蜂蜜。有些云下面有蜂蜜。确保检查了每一朵云！
      4-5 Bee Conditionals 4 (copy 1)_instruction: |-
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: 有时云下面是花，有时云下面是蜂蜜！用“如果/否则”模块来收集花里的花蜜，否则酿蜂蜜（因为它是蜂巢）。
      4-5 Bee Conditionals 5_instruction: |-
        在云底下要么是花，要么是蜂巢！\r
        \r
        如果是花，用“如果/否则”模块来收集花蜜。\r
        否则酿蜂蜜（因为它是蜂巢）。
      4-5 Bee Conditionals 6 (copy 1)_instruction: |-
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: |-
        我不确定这朵花有多少花蜜， 但我知道它可能有1个，两个或3个花蜜。\r
        \r
        将一个“如果/否则”模块和另一个“如果/否则”模块混合在一起，成为了一个“如果，否则如果，否则”模块，来采集花里的所有花蜜。\r
        \r
        记住，每次你运行谜题时，花蜜的数量都会变化的！
      4-5 Bee Conditionals 7_instruction: |-
        这些花里可能有一个，两个或三个花蜜。
        \r
        \r
        完成“检查紫色花朵”的函数，然后用它来从所有花里收集花蜜。
      4-5 Bee Conditionals 8_instruction: |-
        完成“检查花朵，酿造蜂蜜”的函数。\r
        \r
        你的函数应该检查紫色的花是否有3个，2个或1个花蜜，然后收集所有的花蜜。\r
        然后，往前移动并酿造蜂蜜。
      4-5 Bee Conditionals Assessment 1_instruction: |
        评估：这朵云要么藏着一朵有一个花蜜的花，或者有一个蜂蜜的蜂蜜罐。
        \r
        \r
        完成这个“采集花蜜或酿造蜂蜜”的函数，然后调用它来采集所有花蜜，并且酿蜂蜜。\r
      4-5 Bee Debugging 1_instruction: |-
        这些模块真的让我很苦恼。\r
        \r
        你能修好它们吗？
      4-5 Bee Debugging 10_instruction: 找到错误，并修好它们。
      4-5 Bee Debugging 11_instruction: 这里的计数对吗？
      4-5 Bee Debugging 2_instruction: 帮助蜜蜂得到花蜜，并酿造蜂蜜。
      4-5 Bee Debugging 3_instruction: 找到错误，并修好它们。
      4-5 Bee Debugging 4_instruction: 这些模块不能正常工作。怎样才是正确的？
      4-5 Bee Debugging 5_instruction: 哪里有些不对...
      4-5 Bee Debugging 6_instruction: |-
        紫色花的花蜜数量在每次运行谜题的时候都是不一样的。\r
        \r
        修好这些模块来收集到所有花里的花蜜。
      4-5 Bee Debugging 7_instruction: 这个函数少了什么...
      4-5 Bee Debugging 8_instruction: 这个函数是正确的，但是它没有被正确使用。
      4-5 Bee Debugging 9_instruction: 为什么蜜蜂不能制作出足够的蜂蜜？
      4-5 Bee Debugging Assessment 1_instruction: '评估: 修复代码。'
      4-5 Bee Nested Loops 1_instruction: 用循环来收集所有的花蜜。
      4-5 Bee Nested Loops 2_instruction: '从每朵花里收集所有的花蜜。用嵌套循环。 '
      4-5 Bee Nested Loops 3_instruction: 将初始的代码放到另一个循环里来收集所有的花蜜。
      4-5 Bee Nested Loops 4_instruction: "从所有的花里收集花蜜，然后在每个蜂窝那里酿花蜜。\\r\n\\r\n用嵌套循环。 "
      4-5 Bee Nested Loops 5_instruction: 创建一个嵌套循环来收集所有花蜜。
      4-5 Bee Nested Loops 6_instruction: 采集所有的花蜜。
      4-5 Bee Nested Loops 7_instruction: 将循环放到另一个循环里来创建一个嵌套循环，然后从所有花里收集所有的花蜜。
      4-5 Bee Nested Loops 8_instruction: '用嵌套的“当循环”来从那些花里收集所有的花蜜。将里面的重复次数模块换成一个当循环模块。 '
      4-5 Bee Nested Loops 9_instruction: 在一个重复中嵌套一个当循环来从那些花里收集所有的花蜜。
      4-5 Bee Nested Loops Assessment 1_instruction: 评估 - 收集所有花蜜，然后用循环来酿造蜂蜜。
      4-5 Bee Nested Loops Rows_instruction: 用嵌套循环从每行的所有花里收集花蜜。
      4-5 Maze 1 (copy 1)_instruction: 亲爱的人. 我僵尸. 必须... 得到... 那朵向日葵。
      4-5 Maze 1_instruction: 亲爱的人. 我僵尸. 必须... 得到... 那朵向日葵。
      4-5 Maze 10_instruction: 你能只用4个模块就帮我到达向日葵吗？
      4-5 Maze 11_instruction: 你能只用6个模块就到达向日葵吗？
      4-5 Maze 12_instruction: 好，现在有一点不一样。你能只用6个模块就成功吗？
      4-5 Maze 13_instruction: 帮我到达那只猪。
      4-5 Maze 14_instruction: 帮我到达那只猪！用“重复直到”模块。
      4-5 Maze 2 (copy 1)_instruction: 让僵尸到向日葵那里，但要躲开食人花！
      4-5 Maze 2_instruction: 让僵尸到向日葵那里，但要躲开食人花！
      4-5 Maze 3 (copy 1)_instruction: 必须... 得到... 那朵花。
      4-5 Maze 3_instruction: 必须... 得到... 那朵花。
      4-5 Maze 4 (copy 1)_instruction: 试试通过用”重复“模块来使用更少的模块...
      4-5 Maze 4_instruction: 使用"重复"的块来迅速解决这一关......
      4-5 Maze 5 (copy 1)_instruction: 你能用最少的模块来通过这关吗？
      4-5 Maze 5_instruction: 你能用最少的模块来通过这关吗？
      4-5 Maze 6 (copy 1)_instruction: 你能用最少的模块来通过这关吗？
      4-5 Maze 6_instruction: 你能用最少的模块来让我达到向日葵吗？
      4-5 Maze 7_instruction: 让僵尸快速的到达向日葵！你能用少于等于11个模块来解决这道题吗？
      4-5 Maze 8_instruction: |-
        用尽可能少的模块让僵尸到达向日葵。\r
        （躲开食人花！）
      4-5 Maze 9_instruction: |-
        现在，我们用一个新的，叫做`重复直到`的模块。\r
        \r
        这个模块保持循环命令，直到僵尸到达向日葵那里。\r
        \r
        用新的`重复直到`模块来用尽可能少的模块来解决这道题。
      4-5 Maze Assessment 1_instruction: 评估：用尽可能少的模块到达向日葵。
      4-5 Maze Conditionals 1_instruction: 用`重复直到`模块让僵尸到达向日葵。
      4-5 Maze Conditionals 10_instruction: |-
        能不能加三个块来帮僵尸走出这个复杂的迷宫？\r
        \r
        如果你做对了，那它就可以通过任何长度的弯曲路径了！
      4-5 Maze Conditionals 2_instruction: 用`重复直到`模块让僵尸到达向日葵。
      4-5 Maze Conditionals 3_instruction: '用新的"如果"模块让我来决定什么时候转弯。\r

'
      4-5 Maze Conditionals 4_instruction: 好啦，这是最后一个关卡了，但你需要记住如何一起使用"如果"模块和"重复"模块。
      4-5 Maze Conditionals 5_instruction: |-
        “我，想要向日葵” ！\r
        \r
        使用"如果"模块，让僵尸用最少的模块到达向日葵那里。
      4-5 Maze Conditionals 6_instruction: |-
        “吃掉向日葵 ！”\r
        \r
        使用"如果"模块，让僵尸用最少的模块到达向日葵那里。
      4-5 Maze Conditionals 7_instruction: 这个关卡的解决方案不是非常不同，但是要小心食人花！
      4-5 Maze Conditionals 8_instruction: |-
        “如果/否则”否则模块会检查一个条件，然后根据结果执行相应的部分。\r
        \r
        用这个新的模块让我到达向日葵那里。
      4-5 Maze Conditionals 9_instruction: |-
        让我们来再练习一次使用“如果/否则”块！
        \r
        \r
        用你的手指头比划一下，看看你能否试一次就成功。
      4-5 Maze Conditionals Assessment 1_instruction: 评估：用一个“重复直到”和一个“如果/否则”模块，并用尽量少的模块来帮我到达向日葵。
      4-5 Nested Loops 1_instruction: 完成代码来画出这些三角形。第一个三角形已经帮你画好了。提示：三个三角形一共旋转了360度。
      4-5 Nested Loops 10_instruction: 通过循环已有的模块来画出旗帜上最后一行星星。这些星星都是30像素宽，而且它们之间距离50像素。
      4-5 Nested Loops 11_instruction: 你能用嵌套循环画出人行道上的十个正方形吗？每个正方形是30像素。
      4-5 Nested Loops 12_instruction: 你能用嵌套循环画出36个三角形吗？
      4-5 Nested Loops 2_instruction: '现在，把这个循环放到另一个循环里，来画出10个三角形。这就叫做嵌套循环。  '
      4-5 Nested Loops 3_instruction: |-
        通过将开始的代码嵌套到另一个循环中来画一个太阳。\r
        \r
        如果要画出这个很酷的中空设计，你需要在转弯前往前跳三角形长度那么多。
      4-5 Nested Loops 5_instruction: 循环给定的代码来创建一个风车。
      4-5 Nested Loops 6_instruction: 你可以通过循环三角形代码来画一个六边形吗?
      4-5 Nested Loops 7_instruction: |-
        循环这个图形10次。\r
        \r
        你的循环里每次需要转多少度呢？
      4-5 Nested Loops 8_instruction: "循环这个图形6次。\\r\n\\r\n你的循环里每次需要转多少度呢？ "
      4-5 Nested Loops 9_instruction: 画出鳄鱼嘴里的牙齿！
      4-5 Nested Loops Assessment 1_instruction: 评估：用嵌套循环来完成这幅画。
      4-5 While Loops 1_instruction: 将我移到坑旁边，并且使用“填满”模块来用两铲土填满它。
      4-5 While Loops 2_instruction: 将我移到土堆那里，然后用“移除”模块来移除五铲土。
      4-5 While Loops 3_instruction: |-
        用尽可能少的模块来完成这一关！\r
        \r
        将我移到土堆那里，并将所有土移除。然后将我移动坑旁边，然后完全填满它。
      4-5 While Loops 4_instruction: "哇，瞧瞧这里！\\r\n\\r\n我不知道要多少铲土才能填满它。\\r\n你能写一个程序用“填充”模块，直到它和地面一样平吗？
        \ "
      4-5 While Loops 5_instruction: 哇，现在有两个很深的坑！你能写一个程序填充它们，直到和地面一样平吗？
      4-5 While Loops 6_instruction: 哇，现在这里有一大堆土！你能写个程序来移除土，直到它和地面一样平吗？
      4-5 While Loops 7_instruction: 哇，这里有三堆土！你能写一个程序，将它们一铲铲移除，直到地面平整吗？
      4-5 While Loops 8_instruction: " 这里有一个很深的坑，和一个很大的土堆。需要移动多少土才能将地面弄平整呢？"
      4-5 While Loops Assessment 1_instruction: 这里有好多坑和土堆。帮我填满或移除它们来让地面平整。
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      Alien Defender_instruction: 项目创意：在游戏实验室里设计一个防守游戏。
      Alien Defender_2018_instruction: 项目创意：在游戏实验室里制作一个塔防游戏！
      AllTheThings Applab - Turtle move with button_instruction: |-
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      'AllTheThings: Pixelation - Lesson 14 - Make the Letter A_instruction': 制作一个3x5的字母A。部件的设定尺寸是错误的。你的第一个任务是将第二个字节设置为5的8位二进制码：00000101。然后开始输入像素数据。
      'AllTheThings: Pixelation - Lesson 15 - Color Shades 4x4_instruction': 我们已经帮你创建了视频中曼蒂的4x4图像。你的任务是将12位字节的颜色填充到4x4像素网格中。要求如下：第1行
        - 红色系。第2行 - 绿色系。第3行 - 蓝色系。第4行 - 灰色系。
      'AllTheThings: Pixelation - Lesson 15 - Complete 3-bit color_instruction': 这是曼蒂创建的4x2的图像，但缺失了最后两个方块。请找出是哪两种颜色并编码完成该图形。
      App Lab test_instruction: 测试
      AppLab_test02_instruction: |-
        One sentence summary of the activity. Click to
        view full instructions.
      Applab AllTheThings ResourcesTab AllResources_instruction: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      Applab AllTheThings ResourcesTab MapReference_instruction: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      Applab AllTheThings ResourcesTab ReferenceLinks_instruction: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      Applab allthethings onRecordEvent_instruction: |-
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      Artist - Nested Loops 1_instruction: |-
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |-
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |-
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |-
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  "
      Artist - Nested Loops 3_instruction: |
        Create a sun by nesting the starter code
        in another loop. This is called a nested loop.\r
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |-
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |-
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |-
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: 用嵌套循环来完成这幅画。
      Artist Inspiration_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\\r\n\n\\r\nWant
        to know how our inspiration pattern was made? "
      Auto Open Function Editor_instruction: '你能用一个函数里调用其它函数！用你的“形状”函数作为基础，创建三个房子图形，第一个是50像素宽，而每个都比前一个大20像素。用一个计数循环可能会方便一些。 '
      Bee Recommended Blocks test_instruction: 紫色的话可能有一个花蜜，也可能一个都没有，但是你不知道有没有！小心不要从没有花蜜的紫花里收集花蜜。用“如果”模块来检查是否花蜜等于1。
      Bergeron Robot Maze1_instruction: |
        Can you help me catch the naughty pig? Stack
        a couple of `move forward` blocks below the `when run` block and press "Run".
      Big Game Animation 1 (copy 1)_instruction: |-
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |-
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |-
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |-
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |-
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |-
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |-
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |-
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |-
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |-
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |-
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |-
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |-
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |-
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |-
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |-
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |-
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |-
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |-
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |-
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |-
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |-
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |-
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |-
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |-
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |-
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |-
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |-
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |-
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |-
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |-
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |-
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: 这只蜜蜂有好多工作要做！你注意到有什么模式能让代码更简单吗?
      Busy Bee_instruction: 这只蜜蜂有好多工作要做！你注意到有什么模式能让代码更简单吗?
      C3-Farmer While Loops 1_instruction: |-
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |-
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |-
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |-
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |-
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |-
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2-
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |-
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      CSD Hackathon Pt 1_instruction: "(Click to see full instructions)"
      CSD Hackathon Pt 2_instruction: "（点击以查看完整的说明）"
      CSD Hackathon Week 1_instruction: "（点击以查看完整的说明）"
      CSD Hackathon Week 2_instruction: "（点击以查看完整的说明）"
      CSD U3 Background Discuss_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Background Experiment_instruction: |-
        这里有一个看起来与你之前写的非常类似的但实际上却完全不同的程序。
        你可能需要停下来并与同学们讨论一下再继续。
      CSD U3 Boolean Modify_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Boolean Modify_2018_instruction: 修改代码，以便使所有的console.log命令打印“真”
      CSD U3 Boolean Predict_instruction: |-
        What do you think this code will do when
        it is run? Predict what each console.log() command will print, then run the
        program to check your predictions.
      CSD U3 Boolean Predict_2018_instruction: 你认为这个代码在执行时会做什么？预测一下每个console.log()
        （控制台.日志）命令会打印什么，然后运行程序来检查一下你的预测。
      CSD U3 Draw Loop Discuss_instruction: |-
        这里有一个看起来与你之前写的非常类似的但实际上却完全不同的程序。
        你可能需要停下来并与同学们讨论一下再继续。
      CSD U3 Draw Loop Experiment_instruction: |-
        Try using some of the other shape
        functions you've learned in the draw loop. What happens when you use randomNumber()
        to generate some of the inputs?You'll want to stop and discuss with the class
        before moving on.
      CSD U3 Expressions calculator_instruction: |-
        Add the numbers 1 through 10. Multiply
        the numbers 1 through 10. Check your answers with a neighbor.
      CSD U3 Frame Rate_instruction: Slow down Gamelab Gary's animation with frameRate()
      CSD U3 Keypress Boolean-2018_instruction: 修改代码，以便使所有的console.log命令打印“真”
      CSD U3 Keypress Boolean_instruction: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 Keypress Boolean_2018_instruction: 修改代码，以便使所有的console.log命令打印“真”
      CSD U3 Keypress Watchers_instruction: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 Keypress Watchers_2018_instruction: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 L5 Freeplay_instruction: 试着调整petalSize的值几次，绘制的图形因此有何变化呢？
      CSD U3 L5 Freeplay_2018_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Mouse Input Bee 2_instruction: Do this
      CSD U3 Mouse Input Bee 2_2018_instruction: Do this
      CSD U3 Random Animation_instruction: |-
        Use randomNumber() to animate Gary's
        mouth.
      CSD U3 Random Choice_instruction: |-
        Use the randomNumber() block to generate
        either 0 or 1
      CSD U3 Random Color_instruction: |-
        Could you use randomNumber() to pick random
        colors as well? Try setting one or more of the channels in the rgb block with
        a random number. What should the maximum value be?
      CSD U3 Random Intro_instruction: |-
        What do you think this code will do when
        it is run? Make a prediction, then run this code 5 - 10 times, recording the
        output each time. Share your results with your neighbor.
      CSD U3 Random Min Max_instruction: |-
        Using console.log() write a program that
        randomly returns a number in a range you define.
      CSD U3 Random Width Height_instruction: |-
        Pick a shape block and use calls to
        randomNumber() in place of one or more of the parameters. Maker sure you run
        it a few times so you can see the effect of randomization.
      CSD U3 Simple Drawing - Animation 2_instruction: |-
        Use randomNumber() on the
        x position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Animation_instruction: |-
        Use randomNumber() on the x
        position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Background_instruction: |-
        Put all of your code into
        a draw() loop and then add set the background to blue with the background()
        block.
      CSD U3 Simple Drawing - Personal Animation_instruction: 做这个
      CSD U3 Sprites intro sprites_instruction: 做这个
      CSD U3 Sprites intro sprites_2018_instruction: Do This
      CSD U3 Variable Arithmetic pt2_instruction: |-
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variable Arithmetic_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variable Incrementation pt2_instruction: |-
        Predict: What two numbers
        will be displayed in the console?
      CSD U3 Variable Incrementation_instruction: |-
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variables CHALLENGE gamelab gary_instruction: |-
        Use variables to animate
        Game Lab Gary
      CSD U3 Variables Initialize_instruction: |-
        Predict: What will get displayed
        in the console?
      CSD U3 Variables Intro_instruction: |
        Create your own variable, give it a value,
        and display that value in the console.
      CSD U3 Variables Random_instruction: |-
        Predict: What will get displayed in the
        console?
      CSD U3 Variables Reassign pt2_instruction: |-
        Create and assign a new variable
        in a single line.
      CSD U3 Variables Reassign_instruction: |-
        Predict: What will get displayed in
        the console?
      CSD U3 Variables Square Random Loop_instruction: |-
        Test your predictions from
        the last level.
      CSD U3 Variables Square Random_instruction: 改变变量“size”（尺寸）的初始值来画一个更大的正方形。
      CSD U3 Variables Square_instruction: 改变变量“size”（尺寸）的初始值来画一个更大的正方形。
      CSD U3 Variables TEMPLATE square_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables change circle size_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables change circle size_2018_instruction: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables create and assign_instruction: |-
        Create and assign size in
        a single line of code.
      CSD U3 Variables draw loop newVars_instruction: |-
        Extend this project to create
        your own random art visualization with variables.
      CSD U3 Variables draw loop rgb_instruction: |-
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables draw loop xy_instruction: |-
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables eyeBrows_instruction: |-
        Predict what will happen when you move
        the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables make a big square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables make a square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables multiple assignments_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2-2018_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2_2018_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Variables random assignment_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random draw loop_instruction: |-
        Predict what will happen when
        you move the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables random drawing exemplar_instruction: |-
        Check out this example
        randomized drawing.
      CSD U3 Variables random with assignment_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random with assignment_2018_instruction: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables use value rect_instruction: |-
        Predict: What will get displayed
        in the console?
      CSD U3 Variables write_instruction: |-
        Use the write block to display the value
        of size
      CSD U3 Variables2 expressions in commands_instruction: |-
        Use expressions inside
        a drawing command
      CSD U3 Variables2 expressions in variables_instruction: |-
        Assign the value of
        each expression to a variable and console.log that variable.
      CSD U3 Variables2 expressions_instruction: |-
        Use console.log to display the
        results of each expression. Then create your own.
      CSD U4 - Events Template_instruction: |-
        Add a large red button to your screen
        using Design Mode. (Click for full instructions.)
      CSD U5 black white images pixelation 2_instruction: 绘制一个笑脸(点击此处看图)
      CSD U5 black white images pixelation 3_instruction: 调整宽度和高度滑杆找到图案(点击此处查看更多)
      CSD U5 black white images pixelation 4_instruction: 给笑脸添加眉毛(点击此处查看图像)
      CSD U5 black white images pixelation 5_instruction: 绘制任何你喜欢的图案
      CSD U5 black white images pixelation_instruction: 通过键入0和1来完成图形X
      CSD U6 params modify clouds_instruction: |-
        # 云\r
        \r
        当你吹声音传感器的时候, 这个程序会让云朵移动。但它还没完成。\r
        \r
        # 这样做\r
        * 创建一个新函数`moveCloud(name)`（移动云朵 名称），它将移动任何云朵。\r
        * （提示: 代码几乎和`moveCloud0`函数相同）\r
        * 在事件模块内调用新的`moveCloud(name)`函数, 每个云朵名称一次。\r
        * （提示: 这类似于 `loopCloud(name)` 函数被多次调用的方式。）
      CSD U6 params modify clouds_2018_instruction: |-
        # 云\r
        \r
        当你吹声音传感器的时候, 这个程序会让云朵移动。但它还没完成。\r
        \r
        # 这样做\r
        * 创建一个新函数`moveCloud(name)`（移动云朵 名称），它将移动任何云朵。\r
        * （提示: 代码几乎和`moveCloud0`函数相同）\r
        * 在事件模块内调用新的`moveCloud(name)`函数, 每个云朵名称一次。\r
        * （提示: 这类似于 `loopCloud(name)` 函数被多次调用的方式。）
      CSD U6 params modify planes_instruction: |-
        # 多飞机控制器\r
        \r
        此程序使用主板加速度计和屏幕上的复选框来移动三架飞机。现在只有红色的飞机起作用。
        \r
        \r
        # 这样做\r
        * 创建一个新的`movePlane(name)`函数，它可以移动任何飞机。\r
        * 在事件模块内调用`movePlane(name)`函数, 这样它只在选中复选框时移动。\r
        \r
        _挑战：现在飞机的移动速度太快了。 你能想出如何更改代码, 使它们移动得慢一些吗？_
      CSD U6 params modify planes_2018_instruction: |-
        # 多飞机控制器\r
        \r
        此程序使用主板加速度计和屏幕上的复选框来移动三架飞机。现在只有红色的飞机起作用。
        \r
        \r
        # 这样做\r
        * 创建一个新的`movePlane(name)`函数，它可以移动任何飞机。\r
        * 在事件模块内调用`movePlane(name)`函数, 这样它只在选中复选框时移动。\r
        \r
        _挑战：现在飞机的移动速度太快了。 你能想出如何更改代码, 使它们移动得慢一些吗？_
      CSDU4 - AppLab - 1_instruction: |-
        Read the documentation for penColor() and
        penWidth() before using them to draw the blue square.
      CSDU4 - AppLab - 2_instruction: |-
        Write a program that acts as a simple calculator.
        (click to see full instructions)
      CSDU4 - AppLab - 3_instruction: |-
        Use console to check the ending value of num.
        (Click to see full instructions)
      CSDU4 - AppLab - 4_instruction: |2-
         Use the Debug Commands to make a list of
        all the values rolled before a 6. (Click to see full instructions)
      CSDU4 - Design Mode - 1_instruction: |-
        Add a button that moves the turtle when
        clicked.  (Click to see full instructions)
      CSDU4 - Design Mode - 10_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSDU4 - Design Mode - 11_instruction: |-
        Experiment with different event types
        and select the one that you think is best. (Click to see full instructions)
      CSDU4 - Design Mode - 12_instruction: |-
        Use the textLabel command to replace
        the button in your program with a text label. (Click to see full instructions)
      CSDU4 - Design Mode - 16_instruction: |-
        Add an event handler for the button
        using the "Insert and show" link in the Design Mode Events tab. (Click to
        see full instructions).
      CSDU4 - Design Mode - 17_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      CSDU4 - Design Mode - 18_instruction: |-
        Fix the layout of the bullseye game.
        (Click to see full instructions)
      CSDU4 - Design Mode - 2_instruction: |-
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      CSDU4 - Design Mode - 24_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      CSDU4 - Design Mode - 25_instruction: |-
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      CSDU4 - Design Mode - 26_instruction: |-
        Save the age and name of the user in
        variables (Click to see full instructions)
      CSDU4 - Design Mode - 27_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      CSDU4 - Design Mode - 28_instruction: |-
        Write a greeting to the user when they
        hit 'enter' in the text input, using the 'change' event. (Click to see
        full instructions)
      CSDU4 - Design Mode - 29_instruction: |-
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      CSDU4 - Design Mode - 30_instruction: |-
        Show different die images for the random
        number generated. (Click to see full instructions)
      CSDU4 - Design Mode - 31_instruction: |-
        Set up an event handler to respond to
        keypress events, and display event.key in the console. Hit keys on the keyboard
        to see what happens. (Click to see full instructions)
      CSDU4 - Design Mode - 32_instruction: |-
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      CSDU4 - Design Mode - 33_instruction: |-
        Change the code so the sound will only
        play when the up arrow is pressed. (Click to see full instructions)
      CSDU4 - Design Mode - 4_instruction: |-
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      CSDU4 - Design Mode - 5_instruction: |-
        Debug the program by verifying your IDs
        are being referenced properly. (Click to see full instructions)
      CSDU4 - Design Mode - 6_instruction: |-
        Debug the program by properly ordering
        your button commands and event handlers. (Click to see full instructions)
      CSDU4 - Design Mode - 7_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSDU4 - Design Mode - 8_instruction: |-
        Move the button to the middle of the
        screen. (Click to see full instructions)
      CSDU4 nameAgeTemplate_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      CSDU6 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 - Arrays - indexPractice_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      CSDU6 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the
        last item in the array to the console. (Click to see full instructions)
      CSDU6 - for loop - color buttons with for_instruction: 将数组的内容按照数字顺序写到屏幕上。（点击查看完整说明）
      CSDU6 - for loop - color buttons_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 - for loop - why for_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays rainbow_instruction: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSDU6 arrays random_instruction: 编写一个程序, 在数组中显示随机选择的颜色。(点击查看完整说明)
      CSDU6 arrays select icons_instruction: 编写一个程序, 在数组中显示随机选择的颜色。(点击查看完整说明)
      CSDU6 arrays select rainbow_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays select rainbow_2018_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays select random_instruction: 编写一个程序, 在数组中显示随机选择的颜色。(点击查看完整说明)
      CSDU6 arrays select random_2018_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select variable_instruction: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSDU6 arrays select variable_2018_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays variable_instruction: 编写一个程序, 在数组中显示随机选择的颜色。(点击查看完整说明)
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |-
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) "
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions) "
      CSP student contact info_instruction: 请输入您的电子邮箱地址。
      CSPU5 Add Screens to Chaser Game_instruction: |-
        Recreate the game from the "Chaser
        Game" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)
      CSPU5 Add a 2nd Screen_instruction: |-
        Make a 2 screen app with a black screen
        and a white screen. (Click to see detailed instructions)
      CSPU5 Add full screen image to bg of chaser game_instruction: |-
        Recreate the
        game from the "Chaser Game" with a Welcome Screen and Game Over Screen.
        (Click to see full instructions.)
      CSPU5 Add game over screen_instruction: |-
        Recreate the game from the "Chaser
        Game" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)
      CSPU5 Add onEvent from Design Mode_instruction: |-
        Add an event handler for the
        button using the "Insert and show" link in the Design Mode Events tab. (Click
        to see full instructions).
      CSPU5 Add welcome screen to chaser game_instruction: |-
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      CSPU5 Adding Screens Template_instruction: |-
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      CSPU5 Debugging Overlapping Objects and Screen Events_instruction: |-
        Recreate
        the "Chaser Game" from the last lesson using Design Mode. (Click to see
        full instructions.)
      CSPU5 First Time Console.log_instruction: |-
        Add a 3 console.log messages and
        test them out. (Click to see full instructions.)
      CSPU5 Layering and Deleting in Design Mode_instruction: |-
        Fix the layout of
        the bullseye game. (Click to see full instructions)
      CSPU5 Project - Multi Screen App_instruction: |-
        Create your multi-screen app.
        (Click to see full instructions.)
      CSPU5 Use Console.log to update IDs_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      CSPU5 Use setScreen for first time_instruction: |-
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      CSPU5_AddImageToChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_AddImage_andMakeChaserGame_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_AddLabelToChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_Debugging predict unexpected behavior - two onEvents to one ID_instruction: |-
        Predict
        what will happen. Once you've made a prediction, run the code to see what
        happens. (Click to see full instructions)
      CSPU5_FinalizeChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_Project - Multi Screen App_instruction: |-
        Create your multi-screen app.
        (Click to see full instructions.)
      CSPU5_U3 - Arrays - Demo App_instruction: |-
        Use the "My Favorite Things" app.
        How might this app be making use of an array? (Click to see full instructions)
      CSPU5_U3 - Arrays - appendItem_instruction: |-
        Create an array of odd numbers
        1-11 by using appendItem. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment_instruction: |-
        Use indexes to change the values
        in this array from 1 to 0. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment2_instruction: |-
        Calculate the sum of three values
        stored in an array. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment3_instruction: |-
        Increase the value of each value
        in the randomly generated array by 1. (Click to see full instructions)
      CSPU5_U3 - Arrays - createFirstArray_instruction: |-
        Create an array of the even
        numbers from 0 to 10 and display its contents with console.log. (Click to
        see full instructions)
      CSPU5_U3 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that
        displays a randomly chosen color from the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings Counting Variable_instruction: |-
        Create a global
        variable for the current index and use it to display the first item in the
        array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings Next_instruction: |-
        Write code that allows the
        user to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings Prev_instruction: |-
        Write code that allows the
        user to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings addItem_instruction: |-
        Write code that allows
        a user to add their own favorite things to the list. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings bounds_instruction: |-
        Add if statements to your
        event handlers that prevent the global index from going out of bounds. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings createArray_instruction: |-
        Create an array of
        words describing your favorite things. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings firstOutput_instruction: |-
        Use setText to display
        the first item in the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings giveIDs_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings keepPlaying_instruction: |-
        Make any other improvements
        you want! (Click to see full instructions)
      CSPU5_U3 - Arrays - indexPractice_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSPU5_U3 - Arrays - insertingItems_instruction: |-
        Insert items into an array
        to form a complete sentence. (Click to see full instructions)
      CSPU5_U3 - Arrays - insertionErrors_instruction: |-
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      CSPU5_U3 - Arrays - introIndex_instruction: |-
        Display the first and last element
        in the array. Display the number 5 from the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      CSPU5_U3 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the
        last item in the array to the console. (Click to see full instructions)
      CSPU5_U3 - Arrays - remove_instruction: |-
        Remove items from an array to form
        a complete sentence. (Click to see full instructions)
      CSPU5_U3 - Arrays - stringsInArrays_instruction: |-
        Write a sentence word by
        word by adding strings to an array. (Click to see full instructions)
      CSPU5_U3 - Canvas - 200dots_instruction: |-
        Add a loop to your program that draws
        200 dots on your canvas. (Click to see full instructions)
      CSPU5_U3 - Canvas - One Dot sprayPaint_instruction: |-
        Write code that redraws
        your image using a dot whose x and y locations use offsetX and offsetY with
        a small random value added. (Click to see full instructions)
      CSPU5_U3 - Canvas - appendToArray_instruction: |-
        Create an array to store each
        event parameter. Append each event parameter to this array within your event
        handler. (Click to see full instructions)
      CSPU5_U3 - Canvas - changeToMouseMove_instruction: |-
        Change your program so
        that dots are drawn at the location of the mouse as the user moves the mouse
        on the canvas. (Click to see full instructions)
      CSPU5_U3 - Canvas - clickToAdd_instruction: |-
        Change your program so that dots
        are added to the canvas when the user clicks on it. (Click to see full instructions)
      CSPU5_U3 - Canvas - delete_instruction: |-
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - draw at click point_instruction: |-
        Change your program so
        that dots are drawn at the location of the mouse click. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - freePlay_instruction: |-
        Extend the functionality of one
        of the effects, or create an entirely new one of your own. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - introCanvas_instruction: |-
        Add a canvas to your app and
        set it to be the active canvas. Then add a large dot to your canvas. (Click
        to see full instructions)
      CSPU5_U3 - Canvas - movementFunction fix Orig_instruction: |-
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      CSPU5_U3 - Canvas - movementFunction_instruction: |-
        Write a function that takes
        the movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      CSPU5_U3 - Canvas - redrawOriginal_instruction: |-
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      CSPU5_U3 - Canvas - redrawRandom_instruction: |-
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      CSPU5_U3 - Canvas - redrawRandom2_instruction: |-
        Write a function that processes
        your array, redrawing every dot with a random size. (Click to see full instructions)
      CSPU5_U3 - Canvas - shiftKey_instruction: |-
        Add an if statement to your event
        handler so dots are only drawn when the shift key is pressed. (Click to see
        full instructions)
      CSPU5_U3 - Canvas - sketch_instruction: |-
        Write code that redraws your image
        using a sketch effect. (Click to see full instructions)
      CSPU5_U3 - Canvas - sprayPaint_instruction: |-
        Update the spray paint code so
        that it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      CSPU5_U3 - Canvas - transparentDots_instruction: |-
        Change the colors of your
        dots so they have a fully transparent stroke and partially transparent fill.
        (Click to see full instructions)
      CSPU5_U3 - Canvas - usingOffsetXY_instruction: |-
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      CSPU5_U3 - Conditional Basics - 6_instruction: |-
        Add a setText after the if
        statement to "Nope. Guess again." (Click to see full instructions)
      CSPU5_U3 - Conditionals - Combine AND OR Simple_instruction: |-
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      CSPU5_U3 - Conditionals - Combine AND OR and NOT_instruction: |-
        Write an if
        statement that uses AND and OR to display "Time to go to school!" if it's
        not the weekend and the user is under 18. (Click to see full instructions.)
      CSPU5_U3 - Conditionals - Simple AND_instruction: |-
        Write an if statement that
        uses AND to display "You are a teenager." if the user enters an age between
        13 and 19. (Click to see full instructions)
      CSPU5_U3 - Conditionals - Simple OR_instruction: |-
        Write an if statement that
        uses OR to display "It's the weekend!" if the user enters a weekend day
        at the prompt. (Click to see full instructions)
      CSPU5_U3 - Design Mode - Console Log_instruction: |-
        Update the ID names and
        `console.log` messages to match the correct button. (Click to see full instructions.)
      CSPU5_U3 - Design Mode - Layers and Delete_instruction: |-
        Fix the layout of
        the bullseye game. (Click to see full instructions)
      CSPU5_U3 - Design Mode - Multi Screens 2_instruction: |-
        Make a 2 screen app
        which can switch back and forth between a black screen and a white screen
        using buttons. (Click to see detailed instructions.)
      CSPU5_U3 - Design Mode - Multi Screens_instruction: |-
        Make a 2 screen app with
        a black screen and a white screen. (Click to see detailed instructions)
      CSPU5_U3 - Design Mode - WTF Console Log_instruction: |-
        Add a 3 console.log
        messages and test them out. (Click to see full instructions.)
      CSPU5_U3 - Design Mode -Recreate Beyond Buttons_instruction: |-
        Recreate the
        game from the "Chaser Game" with a Welcome Screen and Game Over Screen.
        (Click to see full instructions.)
      CSPU5_U3 - Design Mode 1_instruction: |-
        Add a large red button to your screen
        using Design Mode. (Click for full instructions.)
      CSPU5_U3 - Dice - Dropdown and Score_instruction: |-
        Add guess and score to the
        Dice Game (Click to see full instructions)
      CSPU5_U3 - Dice - Dropdown with Strings_instruction: |-
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      CSPU5_U3 - Dice - If_instruction: |-
        Show different die images for the random
        number generated. (Click to see full instructions)
      CSPU5_U3 - Dice - Nested_instruction: |-
        Use nested if statements to make the
        scoring different for the different game levels. (Click to see full instructions)
      CSPU5_U3 - High Low - Debug_instruction: |-
        Debug the order of the conditionals
        so that it will actually tell the user when their guess is close. (Click to
        see full instructions)
      CSPU5_U3 - High Low - Dropdown_instruction: |-
        Add a dropdown for their guess
        instead of promptNum (Click to see full instructions)
      CSPU5_U3 - High Low - Else if_instruction: |-
        Add an else-if statement in order
        to tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      CSPU5_U3 - High Low - Else_instruction: |
        Add an else statement so that the
        program will tell the user when they are right and when they are wrong. (Click
        to see full instructions)\r
      CSPU5_U3 - High Low - If_instruction: |-
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      CSPU5_U3 - Keys - Add Image URLs_instruction: |-
        Add image URLs to your array.
        Replace the text area with an image and setText with setImageURL. Then test
        your app! (Click to see full instructions)
      CSPU5_U3 - Keys - Buttons and Keys_instruction: |-
        Have the program respond the
        same way for both clicking images on the screen and hitting the up and down
        keys on the keyboard. (Click to see full instructions)
      CSPU5_U3 - Keys - Demo App_instruction: |-
        Play with the image scroller. Press
        the left and right arrows to progress through the images.
      CSPU5_U3 - Keys - Final Image Scroller_instruction: |-
        Update the image scroller
        to respond to buttons and key presses. (Click to see full instructions)
      CSPU5_U3 - Keys - Functions_instruction: |-
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      CSPU5_U3 - Keys - Key Up and Down_instruction: |-
        Try out the keyup and keydown
        events to see how they are different from keypress. (Click to see full instructions)
      CSPU5_U3 - Keys - Multiple Keys_instruction: |-
        Play a different sound when the
        down arrow is pressed. (Click to see full instructions)
      CSPU5_U3 - Loops -  Complex Condition_instruction: |-
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      CSPU5_U3 - Loops - 1_instruction: |-
        Change the condition for the while loop
        to check if the variable num is less than 90. (Click to see full instructions)
      CSPU5_U3 - Loops - 10_instruction: |-
        Write a program that simulates the rolling
        of two dice. Roll the dice repeatedly until the sum of the dice is either
        7 or 11.
      CSPU5_U3 - Loops - 11_instruction: |-
        Fix the condition so that it keeps rolling
        the die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      CSPU5_U3 - Loops - 12_instruction: |-
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      CSPU5_U3 - Loops - 14_instruction: |-
        Change the loop condition to prevent the
        infinite loop and stop counting once the count is past 30. (Click to see full
        instructions)
      CSPU5_U3 - Loops - 15_instruction: |-
        Count the number of times the sum of the
        dice is 12. (Click to see full instructions)
      CSPU5_U3 - Loops - 2_instruction: |-
        Try creating an infinite loop using !=,
        > and <. (Click to see full instructions)
      CSPU5_U3 - Loops - 3_instruction: |-
        Change the if statement to a while loop
        so the program will run until it rolls a 6. (Click to see full instructions)
      CSPU5_U3 - Loops - 4_instruction: 使用调试命令创建包含6之前所有数字的一个列表。(点击查看详细说明)
      CSPU5_U3 - Loops - 5_instruction: |-
        Add code inside the while loop which will
        update the variable num so that the condition will eventually become false.
        (Click to see full instructions)
      CSPU5_U3 - Loops - 6_instruction: |-
        Fix the problem so the loop will run at
        least once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      CSPU5_U3 - Loops - 7_instruction: |-
        Without adding any lines of code, reorder
        the code so that it prints all the values of num. (Click to see full instructions)
      CSPU5_U3 - Loops - 8_instruction: |-
        Debug which number is not getting printed
        and add a write statement to display that value. (Click to see full instructions)
      CSPU5_U3 - Loops - 9_instruction: |2-
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      CSPU5_U3 - Loops - Minus Minus_instruction: |-
        Change the code to count down
        from 10 to 1. (Click to see full instructions)
      CSPU5_U3 - Loops - Plus Plus_instruction: |-
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      CSPU5_U3 - Loops - Typing in Console_instruction: |-
        Use console to check the
        ending value of num. (Click to see full instructions)
      CSPU5_U3 - Loops - minus = operator_instruction: |-
        Update the code to use the
        -= operator to count from 30 down to 0 by 3's. (Click to see full instructions)
      CSPU5_U3 - Loops - plus and minus = operator_instruction: |-
        Update the code
        to use the += operator. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Add 5_instruction: |-
        Add 5 to all the values in
        an array (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Counting Times_instruction: |-
        Count the number
        of times 5 appears in an array. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Divid by 2_instruction: |-
        Divide every value in
        the array by 2. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Find Min_instruction: |-
        Complete the findMinVal
        function to find and display the smallest value in an array  (Click to see
        full instructions)
      CSPU5_U3 - Loops And Arrays - General Search Param_instruction: |-
        Add a second
        parameter to the search function for the value to search for.  (Click to see
        full instructions)
      CSPU5_U3 - Loops And Arrays - Intro For Loop_instruction: |-
        Add a for loop with
        a console.log inside and test out the 3 pieces of the for loop. (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Linear Search_instruction: |-
        Visit every element
        in the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Loop Array If_instruction: |-
        Use an if statement
        to only display the values in the array that are greater than 5. (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |-
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Make it a Function_instruction: |-
        Move the code
        that searches the list for a 5 into a function called "search". (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Print Array_instruction: |-
        Use a for loop to print
        out all the values in an array. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Printing Single True_instruction: |-
        Process the
        array and display a single "true" if the array contains a 5 or a single
        "false" if it does not.  (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Search with Boolean Var_instruction: |-
        Make a
        boolean variable to use as a flag to keep track of whether there is a 5 in
        the array. (Click to see full instructions)
      CSPU5_U3 - Movie Bot - Multiple If Sequences_instruction: |-
        Add another set
        of if, else if, and else statements inside the question if statement to check
        for keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      CSPU5_U3 - Movie Bot - Nested Motivation_instruction: |-
        Add a separate set of
        if statements to check for a "?" in the input. (Click to see full instructions)
      CSPU5_U3 - Movie Bot - When Multiple If Statements_instruction: |-
        Add an if
        and else-if statement that checks for please and thank you. (Click to see
        full instructions)
      CSPU5_U3 - Movie Bot - toLowerCase_instruction: |-
        Use the toLowerCase command
        to change all user input into lowercase letters after they enter it. (Click
        to see full instructions)
      CSPU5_U3 - Practice Create Performance Task_instruction: |-
        Design and implement
        your practice Create Performance Task. (Click to see full instructions)
      CSPU5_U3 - Return Values - constrainTurtle_instruction: |-
        Use constrain in this
        simple app to keep the turtle from driving off the screen.  (Click to see
        full instructions)
      CSPU5_U3 - Return Values - debuggingConstrain_instruction: |-
        Correct the error
        in constrain so that it returns the appropriate value.  (Click to see full
        instructions)
      CSPU5_U3 - Return Values - debuggingMaxVal_instruction: |-
        Correct the error
        in maxVal so that it correctly reports the maximum value.  (Click to see full
        instructions)
      CSPU5_U3 - Return Values - useMinVal_instruction: |-
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      CSPU5_U3 - Return Values - wrapTurtle_instruction: |-
        Write wrap in this simple
        app to let the turtle "wrap" to the other side of the screen when it goes
        off.  (Click to see full instructions)
      CSPU5_U3 - Return Values - writeMaxVal_instruction: |-
        Write the function maxVal
        and then use it within the console.log statement to calculate the maximum
        of two values.  (Click to see full instructions)
      CSPU5_U3 - Simulation - 1_instruction: |-
        Use a while loop to "flip a coin 10
        times" and write the values to the screen. (Click to see full instructions)
      CSPU5_U3 - Simulation - 2.1_instruction: |-
        Change your looping condition so
        the simulation runs until there are 5 heads flipped. (Click to see full instructions)
      CSPU5_U3 - Simulation - 2.5_instruction: |-
        Run your simulation to get the full
        10,000 heads! How long did it take? (Click to see full instructions)
      CSPU5_U3 - Simulation - 2_instruction: |-
        Keep track of how many heads (1's)
        your program generates and print the results to the screen. (Click to see
        full instructions)
      CSPU5_U3 - Simulation - 3_instruction: |
        Add functionality that counts how many
        heads in a row are flipped. (Click to see full instructions)\r
      CSPU5_U3 - Simulation - 4_instruction: |-
        Update your while loop's condition
        so the the coin flips until there are three heads in a row. (Click to see
        full instructions)
      CSPU5_U3 - Simulation - 5_instruction: |-
        Change your while loop to run until
        you get a streak of 12 heads. How many flips did it take? (Click to see full
        instructions)
      CSPU5_U3 - Simulation - 6_instruction: |-
        Keep adding to your simulation. What
        do you want to explore next? (Click to see full instructions)
      CSPU5_U3 - User Input - Save getText To Variable_instruction: |-
        Save the age
        and name of the user in variables (Click to see full instructions)
      CSPU5_U3 - Variables - Set to Expression with Other Variables_instruction: |-
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      CSPU5_U3 - Variables - Set to Expression_instruction: |-
        Test out the new expressions.
        (Click to see full instructions)
      CSPU5_U3 Digital Assistant Design_instruction: |-
        Pick a topic for your Digital
        Assistant and create the basic layout with a text input and text area. (Click
        to show full instructions)
      CSPU5_U3 Digital Assistant Set Text_instruction: |-
        Have your digital assistant
        repeat back what the user types and include a canned response. (Click to see
        full instructions)
      CSPU5_U3 Digital Assistant Target_instruction: |-
        Try out a demo of the Digital
        Assistant!
      CSPU5_U3 full clicker demo_instruction: Clicker game - Try it out!
      CSPU5_U3- Variables - Create And Assign_instruction: |-
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      CSPU5_U3- Variables - Text Mode_instruction: |-
        1. Switch to text mode and type
        instructions; 2. drag blocks out into text mode; 3. experiment with code completion
      CSPU5_U3-Design Mode-ID and Event Handler_instruction: |-
        Add an event handler
        for the button using the "Insert and show" link in the Design Mode Events
        tab. (Click to see full instructions).
      CSPU5_U3-Design Mode-Image_instruction: |-
        Recreate the "Chaser Game" from
        the last lesson using Design Mode. (Click to see full instructions.)
      CSPU5_U313 Two Buttons with Ids_instruction: |-
        Predict what will happen. Once
        you've made a prediction, run the code to see what happens. (Click to see
        full instructions)
      CSPU5_U313 drag Two Buttons_instruction: |-
        Run a program with two buttons that
        have the same id to see the warning message in the console. Change the ids
        to make the program run without getting a warning message.
      CSPU5_U3L13 - Debug Id Problem_instruction: |-
        Improve the button by choosing
        a descriptive and meaningful ID. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 1_instruction: |-
        Debug the program by verifying your
        IDs are being referenced properly. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 2_instruction: |-
        Debug the program by properly ordering
        your button commands and event handlers. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 3_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSPU5_U3L13 - Debugging IDs case sensitive_instruction: |-
        Debug the program
        by verifying your IDs are being referenced properly. (Click to see full instructions)
      CSPU5_U3L13 - Project_instruction: |-
        Create your multi-screen app. (Click to
        see full instructions.)
      CSPU5_U3L13 - Turtle Driver Project_instruction: |-
        Create a "turtle driver"
        that includes buttons to move the turtle forward and turn it left and right.
        (Click to see full instructions)
      CSPU5_U3L13 - Turtle move with button_instruction: |-
        Add a button that moves
        the turtle when clicked.  (Click to see full instructions)
      CSPU5_U3L13 eventsDetails_instruction: |-
        Add an event handler to the button
        to move the turtle forward. (Click to see full instructions)
      CSPU5_U3L14 - Assigning Random Value_instruction: |-
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      CSPU5_U3L14 - Mini Calculator embed_instruction: |-
        You will be prompted for
        two numbers, one right after the other.  See what happens.  Enter different
        numbers until you get the idea.
      CSPU5_U3L14 - User Input Division calculator_instruction: |-
        Write a program
        that acts as a simple calculator. (click to see full instructions)
      CSPU5_U3L14 - Variable ReAssignment pt2_instruction: |-
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      CSPU5_U3L14 - concatenate simple_instruction: |-
        Modify the write statement on
        line 3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      CSPU5_U3L14 - moving memory challenge1_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge2_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge3_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge4_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge5_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge6_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L15 - Add reset button to UpDown app_instruction: |-
        Add code so that
        clicking the start over button will reset the game and send you back to the
        main screen. (Click to see full instructions)
      CSPU5_U3L15 - DEMO up down count practice app_instruction: |-
        Try out the demo
        app (Click to see full instructions)
      CSPU5_U3L15 - Debug forget to update var on reset in UpDown app_instruction: |-
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      CSPU5_U3L15 - Debug if never triggers in UpDown app_instruction: |-
        Run the app
        and use the up and down arrows to try to hit the gameOverScreen. You can't!
        Find and fix the issue in the code. (Click to see full instructions)
      CSPU5_U3L15 - Debugging Simple If-statements =v==_instruction: |-
        Run the app,
        and click the up button. Then restart and run it again, and click the down
        button. Find and fix the issue in the code. (Click to see full instructions)
      CSPU5_U3L15 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      CSPU5_U3L15 - add code to make count down work_instruction: |-
        Write code to
        make the down arrow work as expected. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug forget to set text_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug logic error wrong update_instruction: |-
        Find
        the bug in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug var not created globally_instruction: |-
        Find
        the bug in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - global var example count up_instruction: |-
        Look at the code for
        this app and see how the code works to update the count variable when the
        up arrow is clicked. (Click to see full instructions).
      CSPU5_U3L15 - mini clicker update score_instruction: |-
        Add code to update the
        score when the apple is clicked. (Click to see full instructions)
      CSPU5_U3L15 - practice with setText_instruction: |-
        Use setText to complete the
        click event handler for the down arrow. (Click to see full instructions)
      CSPU5_U3L15 - variable scoping problem debugging_instruction: |-
        See if you can
        figure out why the code is no longer working. (Click to see full instructions)
      CSPU5_U3L15 click add lives_instruction: |-
        Add lives to the clicker game that
        decrement by 1 when the background image is clicked (Click to see full instructions)
      CSPU5_U3L15 full clicker app_instruction: |-
        Complete your clicker game! (Click
        to see full instructions)
      CSPU5_U3L16 - challenge say hi app_instruction: |-
        Write a greeting to the user
        when they hit 'enter' in the text input, using the 'change' event. (Click
        to see full instructions)
      CSPU5_U3L16 - chaserApp_instruction: |-
        Create your own "Chaser Game." (Click
        to see full instructions)
      CSPU5_U3L16 - chooseImages_instruction: |-
        Replace the image in your application
        with one of your own. (Click to see full instructions)
      CSPU5_U3L16 - doubleQuotes_instruction: |-
        Save a string inside a variable and
        log it to the console. (Click to see full instructions)
      CSPU5_U3L16 - intro getText_instruction: |-
        Add an event handler to the Submit
        button so that when the button is clicked it will display the name entered
        in the text box to the console.  Use getText to get the value out of the text
        box. (Click to see full instructions)
      CSPU5_U3L16 - introSetPosition_instruction: |-
        Move the buttons to the bottom
        of the screen. (Click to see full instructions)
      CSPU5_U3L16 - introStrings_instruction: |-
        Save a string inside a variable and
        log it to the console. (Click to see full instructions)
      CSPU5_U3L16 - newEventTypes_instruction: |-
        Experiment with different event types
        and select the one that you think is best. (Click to see full instructions)
      CSPU5_U3L16 - outputWithTextArea_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      CSPU5_U3L16 - setPosition to fixed location_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_U3L16 - setPosition to move button_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_U3L16 - singleSetPosition_instruction: |-
        Move the button to the middle
        of the screen. (Click to see full instructions)
      CSPU5_U3L16 - text labels_instruction: |-
        Use the textLabel command to replace
        the button in your program with a text label. (Click to see full instructions)
      CSPU5_U3L16 - textInput getText write_instruction: |-
        Add an Text Input box for
        the name and age. (Click to see full instructions)
      CSPU5_U3L16 - toUpper_instruction: |-
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      CSPU5_U3L16 - use images_instruction: |-
        Use the image command to replace the
        text label in your program with an image. (Click to see full instructions)
      CSPU5_U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text\nwhen
        the Play Again button is clicked (Click to see full instructions) "
      CSPU5_U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      CSPU5_U3L16 Mad Lib Student Setup_instruction: |-
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      CSPU5_U3L16 Mad Lib getText_instruction: "Before setting the text area with\nyour
        Mad Libs outline, get the user's text and incorporate their responses.\n(Click
        to see full instructions) "
      CSPU5_U3L16 Mad Lib setText_instruction: "When the Next button is clicked,\nset
        the text area to have the main outline of your How-to Mad Libs (without\nthe
        user's input). (Click to see full instructions) "
      CSPU5_U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase\nstring
        functions to the user's text. (Click to see full instructions) "
      CSPU5_U3L18 comparison operators_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_U3L19 - fix the var name syntax error v2_instruction: |-
        Fix the error
        and get it to print the value of both variables (Click to see full instructions)
      CSPU5_U3L19 - test reassignment of two vars_instruction: |-
        Predict the value
        of a and b. Add console.log statements to find out the actual value of a and
        b. (Click for full instructions)
      CSPU5_U3L19 - three basic ops of variables_instruction: |-
        Add another variable
        called "lives" and set the value to 3. Print the value of the variable to
        the console. (Click to see full instructions)
      CSPU5_U3L19 - variable reassignment challenge pt2_instruction: |-
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      CSPU5_U3L19 - write var and string with same name v2_instruction: |-
        Fix the
        code so that the values of both variables print to the console. (Click to
        see full instructions)
      CSPU5_U3L23 Chatbot Conditionals 1_instruction: |-
        Add if, else if, and else
        statements to detect the movie genres Comedy, Romance, Action, and Horror.
        (Click to see full instructions)
      CSPU5_U3L24 Chatbot Basic Conditionals_instruction: |-
        Check out the project
        description for instructions. (Click to see full instructions.)
      CSPU5_U3L24 Nested Conditionals 1_instruction: |-
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      CSPU5_U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. "
      CSPU5_U3L24 introIncludes_instruction: |-
        Practice using the includes command.
        (Click to see full instructions)
      CSPU5_U3L25 - drag out key event_instruction: |-
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      CSPU5_U3L25 - play sound when up key_instruction: |-
        Change the code so the sound
        will only play when the up arrow is pressed. (Click to see full instructions)
      CSPU5_U3L26 AND operator_instruction: |-
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      CSPU5_U3L26 OR operator_instruction: |-
        Update the if statement to use an OR
        to check for a "?" as well as who, what, where, when, why, how in the user
        input. (Click to see full instructions)
      CSPU5_addDescriptiveIDsToTurtleDriver_instruction: |-
        Improve the button by choosing
        a descriptive and meaningful ID. (Click to see full instructions)
      CSPU5_basic if - DIY secret number_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_basic if - check driving age_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_basic if - voting examle_instruction: |-
        Use console.log to print out the
        different boolean expressions below to see what information they return. (Click
        to see full instructions)
      CSPU5_basic if-else - driving age_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_clickerGame_v1_template_instruction: |-
        Create your own "Chaser App".
        (Click to see full instructions)
      CSPU5_moveTurtleOnButtonClick_instruction: |-
        Add an event handler to the button
        to move the turtle forward. (Click to see full instructions)
      CSPU5_playWithEventTypes_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSPU5_setPosition to fixed location_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_turtleDriver_add2ndButton_instruction: |-
        Debug the program by verifying
        your IDs are being referenced properly. (Click to see full instructions)
      Calc Circles of Eval .1_instruction: |-
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |-
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |-
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |-
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |-
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |-
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |-
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |-
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |-
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: 完成评估模块来匹配此声明。
      Calc Circles of Eval 6_instruction: |-
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: 完成评估模块来匹配此声明。
      Calc Circles of Eval 8_instruction: 完成评估模块来匹配此声明。
      Calc Circles of Eval 9_instruction: 完成评估模块来匹配此声明。
      Calc Circles of Eval Free Play_instruction: |-
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |-
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |-
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |-
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |-
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |-
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |-
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |-
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: |-
        Your school is holding a bake sale, and
        you need to track the cost of making each cookie, the money paid, and the
        total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        \r
        Write
        the function cost, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.\r
        \r
        Test your function by
        calculating the cost of 42 cookies
      Calc Design Recipe 3_instruction: |-
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).\r
        \r
        Test your function
        by calculating the sales for 135 cookies
      Calc Design Recipe 4_instruction: |-
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.\r
        \r
        Test your function by calculating the total
        profit for 15 cookies.
      Calc Free Play_instruction: |-
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: |
        In the last puzzle you wrote a contract
        for the function "rocket-height" that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |-
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |-
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |-
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |-
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |-
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |-
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |-
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |-
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |-
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |-
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Choose Your Own Adventure_instruction: 你可以在游戏实验室做任何你想做的事! 下面是一个在游戏实验室中选择自己的冒险故事的例子。
      Choose Your Own Adventure_2018_instruction: 你可以在游戏实验室做任何你想做的事! 下面是一个在游戏实验室中选择自己的冒险故事的例子。
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. "
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. "
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |-
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |-
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |-
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |-
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |-
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |-
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |-
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. "
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. "
      Code Studio Puzzle Challenge 2 - Artist_instruction: |-
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |-
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |-
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |-
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |-
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |-
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |-
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |-
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |-
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. "
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. "
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. "
      Code Studio Puzzle Challenge Bee Screencast_instruction: |-
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |-
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |-
        Draw a line by using
        a variable "length" set to 180.
      Collector Demo_instruction: |-
        Look at all this loot! Help me get as many coins
        as I can so I can improve my farm. I can only use 9 blocks though!
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? "
      Course 2 Bee Loops 13_instruction: |-
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |-
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |-
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |-
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |-
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: 你能用5个模块来帮我到达猪那里吗？
      Course 4 2_instruction: 蜜蜂想在只想要花蜜。记住，不是所有目标都是花，所以检查一下，只从花上采集花蜜。
      Course 4 Artist 1_instruction: '帮我画个箱子。（每条边都是200像素长） '
      Course 4 Artist 10_instruction: |-
        点击这里再看一遍提示！\r
        \r
        这里是这个有趣的图形的代码。当你重复多次，在每次转动之间会发生什么？这样会让图形转动最多420度。这也表示当小艺术家画完后，就和刚开始时面朝不一样的方向了。新的方向正好是向右转了60度。
      Course 4 Artist 11_instruction: 挑战来了！多试验，多试错，不要指望第一次就能完全正确。想看看更多的提示？点击这里！
      Course 4 Artist 12_instruction: |-
        想要再看一眼灵感图形或者提示？点击这里！\r
        \r
        要不然，就设计自己的图形吧！
      Course 4 Artist 13_instruction: 还想玩？这里是一块空的画布，想画什么就画什么吧！
      Course 4 Artist 2_instruction: 你能循环这段代码来画出灰色的正方形吗？（边长是300像素）
      Course 4 Artist 20_instruction: 还想玩？这是空白的画布。想画什么就画什么吧！
      Course 4 Artist 3_instruction: 试试运行这个代码会发生什么（或者点击“运行”来测试代码）。然后，重复足够多的次数来完成这幅画。
      Course 4 Artist 4_instruction: 一个圆有多少都？将这个数字填到重复模块中来创造一个彩色的圆。
      Course 4 Artist 5_instruction: 画出另一半图形，让它对称。这是等边三角形，每条边是50像素。提示：你可能需要多运行几次代码来看看需要加上什么模块。
      Course 4 Artist 6_instruction: 完成代码来画出这些等边三角形。
      Course 4 Artist 7_instruction: '现在，把这个循环放到另一个循环里，来画出10个三角形。这就叫做嵌套循环。提示：10个三角形完成了360度的旋转。  '
      Course 4 Artist 8_instruction: 通过循环整个模块多次来画出太阳。
      Course 4 Artist 8a_instruction: 还记得这个形状吗？现在从零开始画吧！
      Course 4 Artist 9_instruction: '循环这个设计10次，并且确保在每个图形之间要转动一下。\r

'
      Course 4 Artist Binary 1_instruction: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\r
        \r
        运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。
      Course 4 Artist Binary 1a_instruction: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\r
        \r
        运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。
      Course 4 Artist Binary 2_instruction: 哪个二进制字符串能让你循环8次来画出这个图像？
      Course 4 Artist Binary 3_instruction: 你能通过循环一个三位的二进制字符串（0和1）来画出这个图形吗？
      Course 4 Artist Binary 4_instruction: 每个二进制字符串表达这个图形中的一行。你能重新排列他们，从而能够画出一张笑脸，而不是皱眉的脸吗？
      Course 4 Artist Binary 5_instruction: 哪个6位的二进制字符串重复11次后能够画出这个图形?
      Course 4 Artist Binary 6_instruction: 能让你重复并画出这个图形的最短的二进制字符串是什么?
      Course 4 Artist Binary 7_instruction: 完成这幅画。
      Course 4 Artist Binary Free Play 2_instruction: 自由发挥：这是一张空白的画布。尽情画吧！
      Course 4 Artist Binary Free Play 2a_instruction: |-
        这是更高分辨率的画布 - 16像素乘以16像素！\r
        \r
        看看你用二进制位能创造出什么？
      Course 4 Artist Binary Free Play 2b_instruction: 单击此处查看提示。
      Course 4 Artist Binary Free Play_instruction: '自由发挥: 用二进制画你喜欢的！'
      Course 4 Artist Binary pre1_instruction: 用下面的模块来让小画家在第一行画出二进制字符串“01010101”。
      Course 4 Artist Binary ryan_instruction: |-
        二进制是只用两个选择来表达信息的方法。这里，我们会使用选项“关”（通过数字0来表达）和“开”（通过数字1来表达）。\r
        \r
        我们给你提供了一个“像素”的网格，你能穿过并将某些正方形像素设置为“开”。你能让小画家在第一行画出二进制字符串“01010101”吗？
      Course 4 Artist For  Functions 10_instruction: 让我们再提高一点。你能用“画一个正方形线条”的函数来画一个星星吗？祝你好运！
      Course 4 Artist For  Functions 11_instruction: 让我们再提高一点。你能用“画一个正方形线条”的函数来画一个星星吗？祝你好运！
      Course 4 Artist For Loops 1_instruction: 用一个重复模块来画一个边长50像素的三角形。
      Course 4 Artist For Loops 10_instruction: 自由发挥时间！用你学会的模块画任何你想画的东西。
      Course 4 Artist For Loops 11_instruction: '还记得在前一阶段中，我们用变量来控制形状中边的数量吗？现在，我们要用“计数器”变量来做同样的事情了。这个图形从一个三角形开始，并且每次加一条边直到画出一个十边形。每条边应该是100像素长。 '
      Course 4 Artist For Loops 11a_instruction: |-
        让我们总结一下吧！用你的“计数循环”和“计数器”的知识，来创造出每个形状都比上一个多两条边的画。确保每条边的长度都是这个多边形边的数量的10倍。\r
        \r
        这里有非常少的一些代码。
      Course 4 Artist For Loops 12_instruction: '看起来不错，现在我想画的每个图形都和上一个挨着。这次每条边都是20像素。每次画好一个图形后，用跳跃模块来往前跳40像素。 '
      Course 4 Artist For Loops 13_instruction: 嗯，这些形状每次都变会大一点！准备好用变量来解决这个问题了吗？因为边越来越多，我们应该怎样用计数器变量来让这些边越来越短？别用设置好的变量往前移动，试试移动
        (100 / 计数器）个像素。
      Course 4 Artist For Loops 14_instruction: 如果每次都多转或少转一些角度，那么你可以创造出来一个有规律的效果。试着重用上一关的一些代码，但是转89度来创造螺旋的正方形出来。
      Course 4 Artist For Loops 15_instruction: 自由发挥：试着用“计数循环”来画自己的画。我们也为你加了一些有用的变量。
      Course 4 Artist For Loops 2_instruction: 这里已经有代码来用计数循环画三角形了，它会从50增加到100，每次增加10。注意：在点击“运行”前，先看看代码。这样你才知道以后的关卡如何通过。
      Course 4 Artist For Loops 3_instruction: '用上一关做为参考来完成这关。最小的三角形的边长是20像素，最大的是200像素，每个三角形的边比上一个大20像素。

'
      Course 4 Artist For Loops 4_instruction: '你会怎样修改学会的代码来画这些正方形？它们从15像素长开始，最大的是300像素长，并且每个正方形的边长比上一个大15像素。 '
      Course 4 Artist For Loops 5_instruction: '上一关完成的很好！让我们再次用“计数器”变量模块画出这个很酷的图。 '
      Course 4 Artist For Loops 6_instruction: 自由发挥！试着用计数循环自己设计出一个不断增长的模式。
      Course 4 Artist For Loops 6a_instruction: 将上一关的代码做三个小小的改动来画出这个！
      Course 4 Artist For Loops 7_instruction: 如果你保持计数循环中的移动和转向模块不动，但删除掉算法中的重复3次，会发生什么?
        在这个螺旋三角形中，每条边都比上一条长20像素。
      Course 4 Artist For Loops 8_instruction: |-
        只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？\r
        \r
        提示：你需要移除某项！
      Course 4 Artist For Loops 8a_instruction: 只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？
      Course 4 Artist For Loops 9_instruction: 你能创造一个螺旋吗？从1增加到75像素，每次增加1像素。
      Course 4 Artist For Loops Challenge_instruction: 挑战：你能想出怎样用所有你学到的知识，来创建出这个所有边长都是40像素的多边形吗？
      Course 4 Artist For Loops Challenge_a_instruction: |-
        你能想出怎样用所有你学到的知识来创建出这幅图象吗？\r
        \r
        需要提示？点击这里。
      Course 4 Artist For Loops inspire_instruction: |-
        自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。\r
        \r
        需要提示？点击这里。
      Course 4 Artist Functions 1_instruction: 你能用循环画出一个100像素长的正方形吗？
      Course 4 Artist Functions 10_instruction: 需要添加哪个模块才能在正方形上画出一个三角形？
      Course 4 Artist Functions 11_instruction: 检查一下这个画立方体的代码 - 你能将它挪到一个叫做“画立方体”的函数里吗？
      Course 4 Artist Functions 12.1_instruction: 让我们创造一个叫做“画八边形”的函数，它能画出一个每条边都是20像素长的八边形。
      Course 4 Artist Functions 12_instruction: 循环正方形函数来画出一条线。
      Course 4 Artist Functions 13.1_instruction: |-
        现在，让我们创建一个叫做“跳到右上角”的函数，它能让小艺术家移动到刚刚画的八边形的右上角。这样我们就能完成整个图形了。\r
        \r
        提示：如果向移动到右上角，试试跳正好八边形的3/8。
      Course 4 Artist Functions 13_instruction: 来看看新的“用正方形画线”的函数吧。可以仔细看看这个函数的内部是如何实现的。如果你准备好进入下一关了，就点击“运行”。
      Course 4 Artist Functions 14.1_instruction: 现在，让我们创建一个叫做“跳到右上角”的函数，它能让小艺术家移动到刚刚画的八边形的右上角。
      Course 4 Artist Functions 14_instruction: 做得很好！让我们用新的“用正方形画线”函数来画一个正方形。记住每个正方形的长度是40像素。
      Course 4 Artist Functions 15_instruction: 让我们提高一点难度，你能通过“用正方形画线”函数来画一个星形吗？祝你好运！提示：每次需要转144度。
      Course 4 Artist Functions 2_instruction: 你能画三个正方形，每个之间相隔20像素吗？提示：每个正方形的边长是100像素。
      Course 4 Artist Functions 3_instruction: '你能通过“画正方形”函数，来画出这个图形吗？提示：每个正方形相隔120像素。\r

'
      Course 4 Artist Functions 4_instruction: 准备好创建你自己的函数模块了吗？点击工具箱上的“函数”模块，将它命名为“画一个三角形”，然后像你以前写好的代码一样用行动和循环创建一个三角形。然后点击右上角的保存和关闭按钮。提示：创建一个100像素长的三角形。祝你好运！
      Course 4 Artist Functions 5 OLD_instruction: 让我们试试用两个函数来画个房子——怎样才能将画房子的代码修改正确？
      Course 4 Artist Functions 5_instruction: '你能通过“画正方形”函数，来画出这个图形吗？提示：每个正方形相隔120像素。\r

'
      Course 4 Artist Functions 6_instruction: 需要添加哪个模块才能在正方形上画出一个三角形？
      Course 4 Artist Functions 7_instruction: 你能用正方形函数来划出一条线吗？每个正方形的边是40像素。
      Course 4 Artist Functions 8_instruction: '你已经懂得怎样使用函数模块了吗？让我们改一下代码，来让它的边长是200像素。提示：点击“画一个正方形”函数的“编辑”来改变其长度。记得点击右上角的“保存并关闭”。 '
      Course 4 Artist Functions 9_instruction: 你已经有了大部分创建函数的代码了。不过这里看起来少了什么。你能完成这个函数模块吗？
      Course 4 Artist Functions Inspiration_instruction: 点击这里来再看一下提示。
      Course 4 Artist Functions challenge_instruction: 点击这里来再看一下提示。
      Course 4 Artist Functions inspire_instruction: 点击这里，再看一次激发灵感的图像。
      Course 4 Artist Inspire_instruction: |-
        想再看一次启发人的设计或者提示吗？点击这里！\r
        \r
        除此之外，你也可以设计自己的图形！
      Course 4 Artist Params 1_instruction: 让我们编辑一个能画正方形的函数，边长为50像素。
      Course 4 Artist Params 10_instruction: '你能用一个函数里调用其它函数！用你的“形状”函数作为基础，创建三个房子图形，第一个是50像素宽，而每个都比前一个大20像素。用一个计数循环可能会方便一些。 '
      Course 4 Artist Params 11_instruction: |-
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: 用你的“玩具风车”函数来画出每个图形。每个图形的边长是50像素。
      Course 4 Artist Params 13_instruction: 自由发挥：这里除了你写的函数，还有更多的函数让你发挥。画些令人惊叹的东西吧！
      Course 4 Artist Params 2_instruction: |-
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: '哇，你能用新函数来画出每个三角形吗？第一个是25像素长，第二个是50像素，第三个是75像素。 '
      Course 4 Artist Params 4_instruction: 你能添加一个叫做“正方形”的函数吗？它像三角形函数一样，有一个长度参数。这次画三个正方形，各有25，50和75像素长，并相隔100像素。
      Course 4 Artist Params 5_instruction: '用这两个新函数来画图。使用有计数器参数的循环会更容易。

'
      Course 4 Artist Params 6_instruction: '让我们编辑“画一个图形”的函数。它已经有了一个长度参数。现在，让我们编辑这个函数加一个“边数”的参数。这个图形每条边需要转的角度是360度除以边的数量。提示：每个三角形的边长为100像素，六边形边长是25像素，正方形是50像素。 '
      Course 4 Artist Params 7_instruction: '你能通过填写“???”的内容来画出这些图形吗？正方形和三角形的边长是100像素，而六边形是75像素。 '
      Course 4 Artist Params 8_instruction: '你能想出怎么画这个图形吗？提示：创建一个能画6条边的函数，并取名为“六边形”函数。

'
      Course 4 Artist Params 9_instruction: 还记得当我们用计数循环，但删除了里面的一个循环了吗？让我们做点有意思的，用有“边数”和“长度”参数的“画一个形状”的函数。你能重新创建这些形状吗？这些正方形计数应该是5/100/5，三角形的计数应该是10/100/10，六边形是2/100/2。
      Course 4 Artist Var 9_instruction: 这里是一个画三角形的算法，将他改成用“边数”变量。将数字3用“边数”变量替换掉。提示：记得用“设置边数为”模块。
      Course 4 Artist Vars 1_instruction: |-
        让我们画一个等边三角形。\r
        \r
        它的每条边都正好一样是100像素。
      Course 4 Artist Vars 10_instruction: 这里有个算法能在一个小一点的三角形外面再画一个三角形。你能将它改成用“边数”变量来画出每个三角形吗？浏览一下代码，每次看到数字3，就将它换成“边数”变量。记得使用“设置边数”模块。
      Course 4 Artist Vars 11_instruction: 这里有一些更复杂的代码，它也使用了一些上一关的概念 —— 你需要将“边数”变量设置成什么来画出这里的正方形？
      Course 4 Artist Vars 12_instruction: 让我们将“边数”变量设置为5. 我们会加更多的边到这个算法中，边数越大，就越能明白整个模式！注意，这里有另一个叫做长度的变量。我们能在任何“向前移动”模块中使用它，并且将长度变量设置为75。
      Course 4 Artist Vars 13_instruction: |-
        当一个图形有很多条边时，为了让它能显示在屏幕中，要让每条边都短一些。
        \r
        让我们重新创建这个算法来得到这个神奇的图形。为了不手动输入“长度”变量，让我们将“边数”变量放到一个“数学”模块中，来确保每个图形都能显示完整。每个多边形的边长都是300像素。\r
        需要提示吗？点击这里。
      Course 4 Artist Vars 14_instruction: |-
        自由发挥！现在你的算法嵌套到了又一个循环中。试着改变这两个变量的值来画出很酷的图形。\r
        \r
        如果想看到更好的效果，试试使用颜色模块！在循环里面使用随机颜色，看看效果如何。
      Course 4 Artist Vars 2_instruction: 改进“向前移动150像素”，让移动模块使用一个叫做“长度”的变量。你能将长度设置为150来重新画这个三角形吗？
      Course 4 Artist Vars 3_instruction: '这是个画正方形的循环，但是少了些什么。你能修好它，让它用长度变量并想想每条边应该是多长？ '
      Course 4 Artist Vars 4_instruction: 现在，我们来画一个高度是宽度两倍的长方形。这里有一个叫做“宽度”的变量需要设置为100。你能用“数学”模块来完成代码吗？
      Course 4 Artist Vars 5_instruction: 用“边数”变量来控制循环运行多少次。
      Course 4 Artist Vars 6_instruction: 这些代码能画任何规则的多边形。这里有个叫做“边数”的变量设置为4。不管边数是多少，你都能用“边数”变量与数学模块一起来转正确的度数吗？
      Course 4 Artist Vars 7_instruction: |-
        用你在上一关中学到的来用边数变量创建这个六边形。\r
        \r
        看看如何就改一个值来画出一个三角形、正方形、五边形或者八边形？
      Course 4 Artist Vars 8_instruction: 自由发挥：尝试改变这个图形的边数。你能改变算法，不管边数是多少，都让这个图形的大小基本不变吗？提示：如果你用长度除以边数，这样当边数变多的时候，每条边长会变短。
      Course 4 Artist Vars 9_instruction: 修改这个算法，让它能用边数变量，而不是一个固定的数字来画出这个三角形。别忘了用“设置边数为”模块。
      Course 4 Bee 1_instruction: |-
        蜜蜂不知道云下面有什么！\r
        \r
        用“如果”模块来检查云下面是否有花。\r
        \r
        仅在有花时，采集一次花蜜。
      Course 4 Bee 2_instruction: 用“如果/否则”模块来检查每个目标，看看是花还是蜂窝。如果是花，就收集花蜜，否则就酿蜂蜜！
      Course 4 Bee 3_instruction: 未知目标有可能是花或者是蜂窝。这次，用“如果/否则”模块，如果是花就收集花蜜，否则酿蜂蜜（因为它是蜂窝）。
      Course 4 Bee 4_instruction: 紫色的花可能有1个，2个或3个花蜜。这里有一个“如果/否则”模块和另一个“如果/否则”模块混合在一起，成为了一个“如果，否则如果，否则”模块。写出解答来采集未知数量的花蜜。
      Course 4 Bee 5_instruction: 紫色的花可能有1个，两个或3个花蜜。添加一个“如果/否则”模块来创建“如果，否则如果，否则”模块。写出解答来采集未知数量的花蜜。
      Course 4 Bee 6_instruction: 紫色的花可能有1个，两个或3个花蜜。创建一个““如果，否则如果，否则”模块，来采集未知数量的花蜜。
      Course 4 Bee 7_instruction: 用你学到的知识来采集所有的花蜜。紫色的花可能有紫色的花可能有1个，2个或3个花蜜。
      Course 4 Bee For Loops 1_instruction: 用循环从每朵花里采集花蜜。
      Course 4 Bee For Loops 10_instruction: 如果循环的数字是递减的，每次循环就会从计数器变量中减去增量的值。如果要收集9，然后6，3个花蜜，增量的值需要设置为多少？
      Course 4 Bee For Loops 11_instruction: 这个循环出了什么问题呢？看看您是否可以修复它，使蜜蜂采集到所有花蜜。
      Course 4 Bee For Loops 2_instruction: 这里有种新的循环，叫做“计数”循环。它的特点是循环会从1数到5，每次加1，然后每次都会运行循环里的内容。帮助蜜蜂得到花蜜。
      Course 4 Bee For Loops 3_instruction: 你能通过用计数循环从1加到3，每次加1来解决这一关。现在让我们开始采集花蜜吧！
      Course 4 Bee For Loops 4_instruction: 从这些花中采集所有花蜜。我想知道是否有更简单的方法做到这一点...
      Course 4 Bee For Loops 5_instruction: '啊哈，这个计数循环让这一关简单多了！通过计数循环里的“计数器”变量来运行同样多次数“采花蜜”模块。好多循环！所有你需要的模块都有了，想想它是怎样工作的，然后点击循环再看看结果。 '
      Course 4 Bee For Loops 6_instruction: 你也能用计数循环递减。试着通过从5到1，每次减1来递减计数收集花蜜。
      Course 4 Bee For Loops 7_instruction: 用计数循环中的计数变量来控制水平移动多远。
      Course 4 Bee For Loops 8_instruction: 你能用循环变量来控制移动并收集花蜜吗？
      Course 4 Bee For Loops 9_instruction: 计数循环里的最后一个数字叫做“增量”，每次循环时，计数器变量都要改变“增量”这么多。试着用增量2来收集花蜜。
      Course 4 Bee Loops 5 NEW_instruction: 这里有3朵花。你能找到模式，并用更少的模块重复3次来收集花蜜吗？
      Course 4 Bee Loops 5a NEW_instruction: 现在，通过循环来用最少的模块帮助蜜蜂在蜂窝的路上收集所有的花蜜。当到达蜂窝时，别忘了酿蜂蜜！
      Course 4 Bee Params 1_instruction: 写一个序列“收集3个花蜜”来转向、移动、收集花蜜，然后返回原始位置。
      Course 4 Bee Params 2_instruction: 修改“收集3个花蜜”函数，来让我向右转，而不是向左转来到达花。
      Course 4 Bee Params 3 (copy 1)_instruction: 现在，两边都有花了！也许你可以用一个参数，让同一个函数对两边的花都可以使用。我已经加了一个叫做“方向”的参数到函数上。如果这个“方向”参数等于0，就会向左转，如果它等于1，就会向右转。
      Course 4 Bee Params 3_instruction: '现在，两边都有花了！这里有两个叫做“左”和“右”的变量，并且给“收集3个花蜜”的函数增加了“方向”参数。编辑“收集3个花蜜”的函数，当变量“左”或者“右”传递进函数时，让蜜蜂往正确的转向。  '
      Course 4 Bee Params 4 (copy 1)_instruction: 试着用新函数来收集花蜜。记住，0等于“左”，1等于“右”。
      Course 4 Bee Params 4 - Two WhenRun_instruction: 试着用新函数来收集所有花蜜。记住使用变量左和右。
      Course 4 Bee Params 4 backup_instruction: 如果你能用一个函数来收集所有花蜜，是否会更好？试着给你的“花蜜”函数加一个新参数来控制收集的花蜜数量。你可能也想重新命名这个函数！
      Course 4 Bee Params 4_instruction: 试着用新函数来收集所有花蜜。记住使用变量左和右。
      Course 4 Bee Params 5_instruction: 让我们从头开始，你能创建一个含有方向参数的“拿5罐花蜜”的新函数吗？
      Course 4 Bee Params 6 (copy 1)_instruction: 试着用新函数来收集所有花蜜。
      Course 4 Bee Params 6_instruction: 如果你能用一个函数来收集所有花蜜，是否会更好？试着给你的“花蜜单元”函数加一个新参数来控制收集的花蜜数量。你也许也想重新命名这个函数！
      Course 4 Bee Params 7 (copy 1)_instruction: 试着用新函数来收集所有花蜜。
      Course 4 Bee Params 7_instruction: 试着用新函数来收集所有花蜜。
      Course 4 Bee Params 8 Clone 2_instruction: 噢，现在还有蜂蜜也需要处理！怎样修改函数才能让它能收集花蜜或者酿蜂蜜？
      Course 4 Bee Params 8 Clone_instruction: 噢，现在还有蜂蜜也需要处理！怎样修改函数才能让它能收集花蜜或者酿蜂蜜？
      Course 4 Bee Params 8 clone 3_instruction: 噢，现在还有蜂蜜也需要处理！怎样修改函数才能让它能收集花蜜或者酿蜂蜜？
      Course 4 Bee Params 8 new_instruction: 噢，现在还有蜂蜜也需要处理！怎样修改函数才能让它能收集花蜜或者酿蜂蜜？
      Course 4 Bee Params 8_instruction: 挑战：现在还有蜂蜜也需要处理！重写你的函数来一起使用蜂蜜数量和花蜜数量。怎样用这些数字来决定你应该做什么？
      Course 4 Bee Params Ex_instruction: 试着用新函数来收集所有花蜜。
      Course 4 Binary 1_instruction: 这里的函数使用了一个由 1 和 0组成的二进制字符串，来指导农夫从左到右，从上到下移动。当数字是0时，会让正方形打开。运行代码来看看农夫是怎样通过二进制字符串来画图的。
      Course 4 Binary 2_instruction: 什么二进制字符串在循环8次后能画出这个图？提示：数字1会填满一个坑。
      Course 4 Binary 3_instruction: 你能通过循环一个二进制字符串来画出这个模式吗？
      Course 4 Binary 5 (copy 1)_instruction: 哪个二进制字符串重复10次后能画出这个图形？
      Course 4 Binary 5_instruction: 哪个二进制字符串重复10次后能画出这个图形？
      Course 4 Binary 6 (copy 1)_instruction: 哪个二进制字符串重复10次后能画出这个图形？
      Course 4 Binary 6_instruction: 哪个二进制字符串重复10次后能画出这个图形？
      Course 4 Binary 7_instruction: 哪个二进制字符串重复10次后能画出这个图形？
      Course 4 Binary 8_instruction: 你能通过重复一个5位的二进制字符串来完成这个图的大部分 —— 然后还需要一个4位的数字来完成右下角。
      Course 4 EC 1a_instruction: 没有规则。没有线索。只有挑战！
      Course 4 EC 1b_instruction: 没有规则。没有线索。只有挑战！
      Course 4 EC 2a_instruction: 没有规则。没有线索。只有挑战！
      Course 4 EC 2b_instruction: 没有规则。没有线索。只有挑战！
      Course 4 EC 2c_instruction: 没有规则。没有线索。只有挑战！
      Course 4 EC 2d_instruction: 没有规则。没有线索。只有挑战！
      Course 4 EC 3_instruction: '用你在前一关学会的来画这个图！注意：如果合并了参数，代码会变得更简单。 '
      Course 4 EC 3a_instruction: "* * 极限挑战: * * 没有规则。没有线索。只有挑战！"
      Course 4 Maze 1_instruction: 帮愤怒的小鸟到那只猪那里！
      Course 4 Maze 2_instruction: 躲开TNT！
      Course 4 Maze 3_instruction: '编写程序帮愤怒的小鸟到那只猪那里！ '
      Course 4 Maze 4_instruction: 试试使用“重复”模块来用更少的模块通过这一关。
      Course 4 Maze 5_instruction: 你能用最少的模块来通过这关吗？
      Course 4 Maze 6_instruction: 你能用最少的模块来通过这关吗？
      Course 4 Play Lab For Loops 2_instruction: 这次，让我们数数从1到100的奇数。
      Course 4 Play Lab Params 1_instruction: 这里有个叫做“跳”的函数，它能让你的演员跳100像素。运行程序，用方向箭头来移动小狗，用“跳”函数来收集所有的旗帜。
      Course 4 Play Lab Params 10_instruction: "我们已为你添加了上一关的函数。\\r\n\\r\n用“如果”模块来编写你的游戏，当play_score(玩家分数)
        大于某个值时，调用level_up(升级) 函数。\\r\n\\r\n例如：“play_score” > 6\\r\n\\r\n玩游戏，并且达到第3级来到达下一关。 "
      Course 4 Play Lab Params 2_instruction: |
        现在，我们明白了有些旗帜太高了，跳不上去！让我们一起使用“上”和“下”方向键，来让我们能跳不同的高度。\r
        \r
        我们需要添加一个叫做“高度”的参数到“跳”的函数中。上方向键让小狗跳200像素，而下方向键让它只跳100像素。
      Course 4 Play Lab Params 3_instruction: '我们已经给“跳”函数添加了另一个参数，因此它可以用在别的演员上了。每个演员都有一个编号，编号从1开始。编辑“跳”函数来使用“演员”参数，使它能够让正确的演员跳起来。 '
      Course 4 Play Lab Params 4_instruction: |-
        这里有个函数叫做“巡逻”。\r
        \r
        编辑它来让猫向上移动400像素，再向下移动400像素。
      Course 4 Play Lab Params 5_instruction: 编辑“巡逻”函数来添加一个“演员”参数，由此调用它时，能让屏幕上每个演员都动起来。记住，演员对应到数字1和2，3上。
      Course 4 Play Lab Params 6_instruction: 添加另一个叫做“速度”的参数到“巡逻”函数里。试着在“设置速度”模块中使用新的“速度”参数，来帮助企鹅在别的小动物之前得到所有旗帜。
      Course 4 Play Lab Params 7_instruction: |-
        来点好玩的！看看这里的代码，是否你能明白每个模块都做了什么。\r
        \r
        看完以后，用方向键来让小狗收集到所有旗帜。\r
        注意：你不必改动代码。
      Course 4 Play Lab Params 8_instruction: 在小狗碰到任何一个演员时，用“当演员碰到”模块来把小狗送回左上角。
      Course 4 Play Lab Params 9_instruction: "这是一个早先的游戏，但是大部分代码都隐藏了。这里有个新函数叫做“score_points”（得分）。\\r\n\\r\n编辑这个函数，使得“points”（分数）参数能加到“player_score”（玩家分数）变量上。\n\\r\n\\r\n“player_score”（玩家分数）变量会在每次小狗的馅饼碰到小猫时增加，在小猫的三明治碰到小狗时减少。\\r\n\\r\n注意：当你完成后，点击“运行”来玩玩。当小狗得到6分时，就可以进入下一关。 "
      Course 4 Play Lab Vars 1_instruction: 这次你不需要写任何代码，点击“运行”来玩游戏吧！在这个游戏里，你会扮演小狗，要比小猫收集到更多的旗帜。用下方向键来控制小狗。当你玩完以后，点击“完成”。
      Course 4 Play Lab Vars 2_instruction: 上次关卡的比赛不太公平！改变“dog_speed”（小狗速度）变量来让你能比小猫收集到更多的旗帜。最先收集到10个旗帜的就算赢！
      Course 4 Play Lab Vars 3_instruction: 用左右方向键来移动，上方向键跳跃。看看你能否收集到所有的旗帜。
      Course 4 Play Lab Vars 4_instruction: 现在，我们用一个叫做“高度”的变量来控制小狗能跳多高。修改“高度”变量，让小狗能跳足够高，得到所有旗帜。
      Course 4 Play Lab Vars 5_instruction: '让我们编写一个游戏！首先我们需要一个分数。重新构造代码来做出像上一关的分数，并且设置为10分。 '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: 酷，现在我们已经有了分数变量了，但我们怎么能让它有用呢？如果每次用火球击中敌人就加分如何？使用"当演员2碰到任何东西"事件，这样当火球碰到小猫时，就会触发分数的更新。你可以通过设置分数=分数+1来增加分数。到达10分（一次得一分！）就能通过这关。
      Course 4 Play Lab Vars 6_instruction: |-
        用右方向键来发射馅饼。\r
        \r
        在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用"points = points + 1"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。
      Course 4 Play Lab Vars 7_instruction: 很好，让确保这个游戏不是太简单。任何时候，小狗（演员1）被小猫（演员2）扔出的三明治击中时，就丢失1分。让我们从10分开始，这样就不会太难了。让你的分数从10减到0来通过这一关。
      Course 4 Play Lab Vars 8 (copy 1)_instruction: 好吧，这个游戏的最后一件事 —— 让我们调整它能让玩家赢或者输。用一个无限循环来检查分数的值，如果分数大于20，让敌人消失。如果分数小于0，让玩家消失。当游戏和你想的一样时，点击“完成”。
      Course 4 Play Lab Vars 8_instruction: 让我们改一下游戏，能让小狗赢或者输。用一个无限循环来检查分数的值，如果分数大于20，让敌人（小猫）消失。如果分数小于0，让玩家（小狗）消失。当游戏和你想的一样时，点击“完成”。
      Course 4 Play Lab Vars 9_instruction: |-
        自由游戏时间！这是除了使用过的所有变量，还有一些别的变量。\r
        \r
        注意：现在工具箱里有很多模块需要组织在一起！我们将这些模块放到了合适的分类中。花一些时间来看看每种类型都有哪些模块吧。当你看完后，可以用重复、变量和事件做出一个故事或者游戏。\r
        \r
        提示：往下滚动鼠标来查看工作区的所有命令。
      Course 4 Play Lab Vars_instruction: 好吧，这个游戏的最后一件事 —— 让我们调整它能让玩家赢或者输。用一个无限循环来检查分数的值，如果分数大于20，让敌人消失。如果分数小于0，让玩家消失。
      Course 4 Play Labs For Loops 1_instruction: 让小狗说出从1到100的所有数字。用一个计数循环和一个计数器模块来让小狗在每次循环时说出计数器变量。
      Course 4 Play Labs For Loops 2_instruction: 这一次，帮助奥利弗猫数一数从1到101的奇数。
      Course 4 Play Labs For Loops 3_instruction: 如果我们数大一点的数，也能在相同次数内完成它。试着让小狗从10数到1000，每次增加10。
      Course 4 Play Labs For Loops 4_instruction: 改变每次增加的值会有帮助，但我们一直是线性计数（每次改变的数量都和上次一样）。如果我想用指数计数呢？不用改变计数循环的设置，你能按照1，4，9，16，25...
        计数吗（按照平方计数）？
      Course 4 Play Labs For Loops 4a_instruction: |-
        现在，让我们将一些第7关中的变量和“计数器”变量混合起来制造一些神奇的变化。\r
        \r
        在这一关中，小狗通过“increment”（增加）来从0到1000计数。在代码最开始处，将“increment”设置为10，看看会发生什么。
      Course 4 Play Labs For Loops 5_instruction: 在上一关中，我们按照每个数的平方计数了。试试将“counter
        ^ 2”（计数器的2次方）改为“counter ^ 3”（计数器的3次方）来按照每个数的立方来计数。（1，8，27，64，125，216，343...）
      Course 4 Play Labs For Loops 5a_instruction: |-
        In this puzzle, Dog will be your
        time keeper.\r
        \r
        Dog will count from 0 to 30 by "increment".  The "increment"
        variable will begin with a value of 1.\r
        \r
        Can you make it so that each
        time you click Dog, the increment increases by 2?  Click the forward arrow
        to run the for loop.\r
        \r
        Run the loop a couple of times, clicking Dog before
        each one.
      Course 4 Play Labs For Loops 6_instruction: 你也许知道质数是指的一个数只能被它自己自己和1整除。用“is_prime”（是否质数）函数来只说出1到100的质数。
      Course 4 Play Labs For Loops 6a_instruction: |-
        小狗一直按照计数循环中的增量来按时计数。但这次，我们要将巫师混合进来。你能改变代码，在巫师被点击的时候，让“increment”（增量）每次增加2吗？\r
        \r
        小心！巫师移动得很快！
      Course 4 Play Labs For Loops 7_instruction: 你用用计数循环帮我说出序列1，4，7，10，13，16，19，22，25吗？
      Course 4 Play Labs For Loops 7a_instruction: |-
        现在我们有所进展了！开始计数后，在小狗数到30前，我们需要点击多少次巫师？\r
        \r
        添加模块到巫师上，让每次它被点击时，“clicked”（被点击）变量增加1。现在你可以忽略“increment”（增量）变量了。\r
        \r
        小狗会在你点击运行后开始数数。
      Course 4 Play Labs For Loops 8_instruction: |-
        现在帮助演员们按照计数来移动。\r
        \r
        小狗每次按照增加2（counter + 2）来移动和计数。小猫每次按照乘以2（counter * 2）来移动和计数。企鹅按照指数2（counter ^ 2）来移动和计数。谁会第一个到达旗帜？
      Course 4 Play Labs For Loops 8a_instruction: |-
        要完成这个游戏，需要拿回“increment”（增量）变量！让我们将它设置到游戏级别上。\r
        \r
        1) 记录巫师被点击的次数。\r
        2) 如果巫师在小狗数到30前，巫师被点击了至少10次，就将“increment”（增量）增加1，并重新开始。\r
        3) 如果巫师没有被点击10次，游戏就结束。
      Course 4 Playlab For Loop Freeplay_instruction: 自由发挥：使用到目前为止你已经学会的一切制作一个游戏，包括“计数”循环。
      Course 4 Playlab For Loops 4b_instruction: 你能尝试修改他们其中一个循环的**增量**，使他们能同时到达终点吗？
      Course 4 Playlab For Loops 5b_instruction: 调整计数循坏的间隔，以便这两个角色到达完全相同的位置。
      Course 4 Playlab For Loops 6b_instruction: "请尝试修改计数循环来编一个好玩的游戏吧！\\r\n按“运行”后，快速点击独角兽来得分。你能超过我的成绩（24分）吗？ "
      Course 4 SCF 1_instruction: 用提供的函数来画四行六边形。要注意是怎样让偶数行转移到右边的？
      Course 4 SCF 1a_instruction: 你能想出怎么用最少的模块收集到所有花蜜吗？
      Course 4 SCF 1b_instruction: 你能想出怎么用最少的模块收集到所有花蜜吗？
      Course 4 SCF 2_instruction: '用你在前一关学会的来画这个图！注意：如果合并了参数，代码会变得更简单。 '
      Course 4 SCF 3 Fail 1_instruction: 你能想出怎样...
      Course 4 SCF 3 Fail 2_instruction: 你能想出怎样...
      Course 4 SCF 3_instruction: '用你在前一关学会的来画这个图！注意：如果合并了参数，代码会变得更简单。 '
      Course 4 SCFL 1_instruction: 用最少的模块来通过这一关。
      Course 4 SCFL 1a_instruction: 你能用最少的模块让斯奎塔到达他的橡子吗？
      Course 4 SCFL 1b_instruction: 你能用最少的模块让斯奎塔到达他的橡子吗？
      Course 4 SCFL 2_instruction: 用最少的模块来通过这一关。
      Course 4 SCFL 3_instruction: 你能想出怎么重画这个图形吗？
      Course 4 SCFL 4_instruction: 你能想出怎么重画这个图形吗？
      Course 4 SCFL 5_instruction: 你能想出怎么重画这个图形吗？
      Course 4 SCFL 6_instruction: 你能想出怎样用循环来重画这个图形吗？
      Course 4 SCFL 7_instruction: 小艺术家想画出一些波浪！你能想出怎么重画这个图形吗？
      Course 4 SCFP 1_instruction: 创建一个函数，能够让小艺术家往前或者往后跳x像素，而且也能让他往上或者往下跳y个像素。（使用正数和负数）
      Course 4 SCV 1_instruction: 点击这里再看一遍介绍。
      Course 4 SCV 2_instruction: 点击这里再看一遍介绍。
      Course 4 SCV 3_instruction: |-
        现在是捉人游戏！捉住小猫得2分。捉住企鹅得3分。得到10分就赢了！\r
        但是小心，当小猫和企鹅互相碰到时，他们就会把分数要回去。\r
        \r
        添加所需的模块能让这个游戏按照解说的运行。怎样让小狗能用方向键往所有方向移动？怎样在小狗捉住小猫或者企鹅时加分？怎样在小猫和企鹅碰到时扣分？
      Course 4 SCV 4_instruction: 用最少的模块来通过这一关。
      Course 4 SCV 5_instruction: 用最少的模块来通过这一关。
      Course 4 SCV 6_instruction: 点击这里再看一遍介绍。
      Course 4 SCVP 1_instruction: 创建一个函数，能够让小艺术家往前或者往后跳x像素，而且也能让他往上或者往下跳y个像素。（使用正数和负数）
      Course 4 Variables Assessment_instruction: 你能用一个“边数”变量来画出这幅图吗？每条边应该是50像素长。
      Course1BeePuzzle12_instruction: 获得3个花蜜，然后酿两个蜂蜜。
      Course1MazeAssessment1_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig
      Course1MazeAssessment2_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig.
      CourseF_PlayLab_vars1_instruction: '玩这个游戏不需要写任何代码, 只要点击 "运行"! '
      CourseF_PlayLab_vars10_instruction: |-
        自由发挥时间! 下面是我们在这个阶段所玩过的所有变量, 以及一些你可能需要的额外变量。\r
        \r
        注意到我们的工具箱中现在有这么多的模块, 它们需要整理! 在这里, 我们把每一块放到一个合适的类别中。花些时间去探索所有可用的东西。完成浏览后, 使用重复，变量和事件来制作游戏或故事。 \r
        \r
        提示: 向下滚动来查看工作区中的所有指令。
      CourseF_PlayLab_vars2_instruction: 最后关卡中的比赛不是很公平! 更改`dog_speed`（狗_速度）变量以确保你可以收集比猫更多的旗子。第一个收集到10面旗子的赢！
      CourseF_PlayLab_vars3_instruction: 用左右方向键来移动，上方向键跳跃。看看你能否收集到所有的旗帜。
      CourseF_PlayLab_vars4_instruction: 现在，我们用一个叫做“高度”的变量来控制小狗能跳多高。修改“高度”变量，让小狗能跳足够高，得到所有旗帜。
      CourseF_PlayLab_vars5_instruction: '让我们编写一个游戏！首先我们需要一个分数。重新构造代码来做出像上一关的分数，并且设置为10分。 '
      CourseF_PlayLab_vars6_instruction: |-
        用右方向键来发射馅饼。\r
        \r
        在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用"points = points + 1"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。
      CourseF_PlayLab_vars7_instruction: |-
        用右方向键来发射馅饼。\r
        \r
        在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用"points = points + 1"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。
      CourseF_PlayLab_vars8_instruction: |-
        用右方向键来发射馅饼。\r
        \r
        在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用"points = points + 1"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。
      CourseF_PlayLab_vars9_instruction: 很好, 现在让我们来确保这个游戏不是太容易。任何时间狗 (演员 1) 被从猫（演员2）的三明治击中,
        将失去一分。从10分开始那样就不难了。让你的分数从10下降到 0来通过此关卡。
      Crack Random Substitution_instruction: 说明
      Crack a Caesar Cipher_instruction: 说明
      D_Frozen_nested3_instruction: 让我们旋转那个形状的线吧!
      D_Frozen_nested4_instruction: 是时候把这些形状分层了!
      D_Frozen_nested5_instruction: 玩一玩雪花功能!
      D_Frozen_nested6_instruction: 画一个阶梯楼梯模式, 使用75和105度之间的角度来转弯。
      D_Frozen_nested7_instruction: 现在, 转180度左右, 再次绘制楼梯图案!
      D_Frozen_nested8_instruction: 在一个圆圈内旋转该形状大约5或6次。
      D_Frozen_nested9_instruction: |-
        试着改动一下你所创造的东西。画任何你喜欢的东西! \r
        - 如果你在台阶上使用两个不同的角度, 会发生什么？\r
        - 如果你把你的钻石图案变长或变短, 会发生什么？\r
        - 如果把两片雪花叠起来是什么样的？
      ECSPD Binary Odometer_instruction: |-
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |-
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |-
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |-
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |-
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |-
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |-
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |-
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |-
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |-
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |-
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |-
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |-
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |-
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |-
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |-
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: |-
        Write a function called food-critic, which takes
        in the name of a food and produces a String that says how you feel about that
        food. For example, (food-critic “pizza”) might evaluate to “delicious”, but
        (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two
        foods to review, but you can you write more if you like!  Don’t forget to
        add an “else” clause!\r
        One example - and part of the definition -  has already
        been done for you!
      Eval Cond 7_instruction: |
        Free Play: Write a function called green-shape, which
        takes in the name of a shape and produces a solid green shape. Your function
        should work with at least “circle”, “star” and “rectangle”, but you can add
        other shapes if you like. You can choose the size of each shape. Don’t forget
        to add an “else” clause!\r
        One example - and part of the definition -  has
        already been done for you!\r
      Eval Cond 8_instruction: |
        Free Play: Suppose you want to own a car at 21, or
        have your own business by 30. Write a function called life-goals, which takes
        in an age and produces a string that describes your life goals by then. Don’t
        forget to add an “else” clause!\r
      Eval Contracts 1_instruction: |-
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |-
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |-
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |-
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |-
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |-
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |-
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |-
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |-
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |-
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |-
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. "
      Eval Define Funcs 1_instruction: |-
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |-
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |-
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |-
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |-
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |-
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |-
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |-
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |-
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |-
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |-
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |-
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |-
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |-
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |-
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |-
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |-
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 自由发挥： 用代码来创造艺术吧！
      Eval Strings Images .1_instruction: 到目前为止我们仅处理单一类型的数据，就是数字。 另一种数据类型是字符串，它可以是字母、
        数字或其他用引号引起来的字符的任意组合。运行字符串"你好, 世界！"，看看会发生什么。
      Eval Strings Images .2_instruction: |-
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |-
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |-
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |-
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |-
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |-
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |-
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |-
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |-
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |-
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |-
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Farmer for TTS testing_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      Finalize Your Chaser Game v.1_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      Find the Wizard_instruction: 随便创造一个东西。这是一个猜数游戏的例子！
      Find the Wizard_2018_instruction: 创建任何想象的东西。这是一个猜数游戏的例子 ！
      Food Fight!_instruction: "We've added one last function for you. \\r\n\\r\nUse\nan
        \"if\" statement to program your game to call the \"level_up\" function\nonly
        when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it to level 3\nto move
        to the next puzzle. "
      Food Fight_instruction: |-
        You can make whatever you want in play lab! This is
        an example of a game you can make in play lab.
      FoodFight_instruction: 这是一个游戏的例子。你可以在剧本实验室创造它。
      FoodFight_2018_instruction: 这是一个可以在游戏实验室里玩的游戏的示例。
      Frequency Analysis_instruction: Test
      Function intro Ryan_instruction: 使用"建造桥梁"功能两次，制造一条通往红石火把的路径。
      GLJ Drag and fall_instruction: 柯基犬是个好孩子！作为特殊的款待，拖出这个胡萝卜给它。
      GLJ Dragity_instruction: 柯基犬是个好孩子！作为特殊的款待，拖出这个胡萝卜给它。
      GLJ Flappy2_instruction: 点击来拍翅膀 - 别碰到地面！
      GLJr_Behavior_1_instruction: 在你的工作表上，写下当你点击"运行"时，你认为小狗会做什么。
      GLJr_Behavior_2_instruction: 现在，你有了些新模块！试一试，看看它们有什么用。在你的工作表上，写下你试过哪些，以及它们能做什么。
      GLJr_Behavior_5_instruction: 现在，我们有了两个精灵！用行为来让小狗紧张，并让小猫漫步。
      GLJr_Behavior_6_instruction: 让我们试试更多的行为 - 让小狗向上跑，小猫向右跑。
      GLJr_Forever_1_instruction: 在你的工作表上，写下当你点击"运行"时，你认为小狗会做什么。
      GLJr_Forever_2_instruction: 现在，你有了些新模块！试一试，看看它们有什么用。在你的工作表上，写下你试过哪些，以及它们能做什么。
      GLJr_Forever_5_instruction: 现在，我们有了两个精灵！用循环来让小狗紧张，并让小猫漫步。
      'Game Lab Workshop: Random_instruction': |-
        Pick a shape block and use calls
        to randomNumber() in place of one or more of the parameters. Maker sure you
        run it a few times so you can see the effect of randomization.
      Geometric Pattern_instruction: |-
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      Geometric Sun_instruction: 项目创意：使用例如形状的几何概念来创建图案。这需要坚持和计划！
      Geometric Sun_2018_instruction: |-
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      Get To The Goal_instruction: 随便创造一个东西。这是一个猜数游戏的例子！
      'Grade 4 Example PlayLab Project #1_instruction': |-
        Take a look at this project.  Do
        you see how it was made?
      'Grade 4 Example PlayLab Project #2_instruction': 仔细瞧瞧这个项目，你知道它是怎么做出来的了吗？
      Guess The Number 2_instruction: 创建任何想象的东西。这是一个猜数游戏的例子 ！
      Guess The Number_instruction: 创建任何想象的东西。这是一个猜数游戏的例子 ！
      Guess The Number_2018_instruction: 创建任何想象的东西。这是一个猜数游戏的例子 ！
      Harvester Test_instruction: |-
        It's harvest time! But I forgot what crop I planted
        at which tile. Please help me harvest all my crops, no matter how they were
        originally planted!
      Harvesting_instruction: |-
        Uh oh, I lost my map and can't remember what I planted.
        Every sprout could grow up to be corn, beans, or pumpkins. Can you write some
        code to pick all the crops, no matter what they are?
      Infinity_catch_instruction: 你能用方向键让爱莎（演员2）追上安娜吗？
      Infinity_finale_instruction: 创建并分享你想的任何东西！
      Infinity_move_collide_instruction: 阿宽是演员1。让他向右走到大白那里，当他们碰到一起时播放声音。
      Infinity_move_directions_instruction: 大白是演员2。添加移动模块，然后用方向键移动大白。让他到达另外两个演员那里。
      Infinity_move_right_instruction: 阿宽是演员1。让他移动到大白那里。
      Infinity_repeat_instruction: 用“一直重复”模块让安娜不停上下移动400像素。
      Infinity_say_instruction: 使用“说”模块让安娜说“你好”。
      Infinity_shoot_instruction: 大白是“演员2”。让大白向阿宽扔一枚火箭。
      Infinity_shoot_directions_instruction: 阿宽是“演员3”。让阿宽向这4个演员都扔一枚火箭。每次扔火箭之间等1秒。
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: 接触更多的雪花！
      Infinity_touch_four_instruction: 让安娜上、下、左、右移动来碰到这4朵雪花。
      Infinity_touch_score_instruction: 当安娜碰到一片雪花时，就得一分。然后点击“运行”后控制她碰一下每片雪花。
      Inspirational Artwork_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\\r\n\n\\r\nWant
        to know how our inspiration pattern was made? "
      InspirationalArtwork_instruction: 如果你喜欢这张图片，试着做一个和它差不多的吧。当然，你也可以做成你自己喜欢的样子。
      InspirationalArtwork_2018_instruction: 如果这张照片启发了你，试着做一些类似的东西。否则。也可以创建你自己的东西。
      'Internet Simulator: Broadcast Mode_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: Broadcast_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: Broadcast_2018_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: DNS Mode_instruction': |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: DNS_instruction': |-
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: DNS_2018_instruction': |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: Packets_instruction': |-
        Develop a Protocol for Reliably
        Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain only 8 characters\r
        -
        Packets may drop with small probability\r
        - Packets may not arrive in order
      'Internet Simulator: Packets_2018_instruction': |-
        Develop a Protocol for Reliably
        Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain only 8 characters\r
        -
        Packets may drop with small probability\r
        - Packets may not arrive in order
      'Internet Simulator: Routers_instruction': |-
        Send messages with your classmates
        (Click to see full instructions)
      'Internet Simulator: Routers_2018_instruction': |-
        Send messages with your classmates
        (Click to see full instructions)
      'Internet Simulator: Sending Binary Messages 1_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Binary Messages_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Binary Messages_2018_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Numbers_instruction': |-
        With your partner, develop
        a protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Numbers_2018_instruction': |-
        With your partner,
        develop a protocol or set of rules for communicating a drawing using only
        bits. See the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Text_instruction': |-
        Work with a partner or in
        a small team to develop a protocol that allows you to send formatted text.
        See the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Text_2018_instruction': |-
        Work with a partner or
        in a small team to develop a protocol that allows you to send formatted text.
        See the worksheet handed out by your teacher for more detailed instructions!
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: 往上画一条短线，然后往右画一条长线。
      K-1 Artist Loops 1_instruction: 向东移动4次来画出这条线。
      K-1 Artist Loops 2_instruction: 现在，用循环来画出同样的线。
      K-1 Artist Loops 3_instruction: 你能循环这些模块画出6条线吗？
      K-1 Artist Loops 4_instruction: 你能用循环帮我们画出城堡顶吗？
      K-1 Artist Loops 5_instruction: 将哪些模块重复4次能画出这些楼梯？
      K-1 Artist Loops 6_instruction: 这个需要两个循环：一个用来画向上的楼梯，另一个用来画向下的楼梯。
      K-1 Artist Loops 7_instruction: 循环可以帮助你完成这个图形。
      K-1 Artist Loops 8_instruction: 这个楼梯比较长。
      K-1 Artist Loops 9_instruction: 用什么方法来画这些楼梯最容易？
      K-1 Artist Loops Free Play_instruction: 自由发挥，画一些有趣的东西！
      K-1 Artist1 1_instruction: 用一行来画这个人的脚。
      K-1 Artist1 10_instruction: 用“画”和“跳”来画出到宝藏X的虚线。
      K-1 Artist1 2_instruction: 用两行来画出小猫的胡须。
      K-1 Artist1 3_instruction: 画两条向东和两条向北的线来完成这个房子！
      K-1 Artist1 4_instruction: 画出上下左右的线来完成这个城堡！
      K-1 Artist1 5.5_instruction: 用短线完成城堡的第三个塔。
      K-1 Artist1 5_instruction: 用两条线画这个花的茎。
      K-1 Artist1 6_instruction: 用“跳”模块来完成这幅画！
      K-1 Artist1 7_instruction: 用跳模块来移动，但不画线。跳起来，然后画一条线。
      K-1 Artist1 8_instruction: 用跳和画一起来画出虚线。
      K-1 Artist1 9_instruction: 用跳和画来画出虚线。
      K-1 Artist1 Assessment 1_instruction: 画出短的和长的线！
      K-1 Artist1 Assessment 2_instruction: 画出短的虚线！
      K-1 Artist2 1_instruction: 在三角形下方画一个正方形。
      K-1 Artist2 2_instruction: 跳到房子旁边并画出一个正方形。
      K-1 Artist2 3_instruction: 在正方形上画出另一个正方形。
      K-1 Artist2 4_instruction: 画一个长方形来完成这座桥。
      K-1 Artist2 5_instruction: 画一个长方形来完成这个桥的支柱。
      K-1 Artist2 6_instruction: 画两个正方形来形成一个长方形！
      K-1 Artist2 Assessment1_instruction: 评估：在正方形旁边再画一个正方形。
      K-1 Artist2 Free Draw_instruction: 随便画些什么！
      K-1 Artist2_7_instruction: 画一个矩形来给梳妆台最上面装上一个抽屉！
      K-1 Bee 1_instruction: 将我移动到花那里，采花蜜，然后移动到蜂窝那里酿蜂蜜。
      K-1 Bee 10_instruction: 获得4个花蜜，然后酿两个蜂蜜。
      K-1 Bee 11.5_instruction: 获得4个花蜜，然后酿4个蜂蜜！
      K-1 Bee 11_instruction: 获得3个花蜜，然后酿1个蜂蜜。
      K-1 Bee 12_instruction: 获得3个花蜜，然后酿2个蜂蜜。
      K-1 Bee 13_instruction: 获得3个花蜜，然后酿1个蜂蜜。
      K-1 Bee 14_instruction: 帮我到花蜜那里，捡起它。然后帮我到蜂窝那里，酿蜂蜜。
      K-1 Bee 15_instruction: 采两个花蜜来酿两个蜂蜜！
      K-1 Bee 2_instruction: 将我移动到花那里，采花蜜，然后移动到蜂窝那里酿蜂蜜。
      K-1 Bee 3_instruction: 将我移动到花那里，采花蜜，然后移动到蜂窝那里酿蜂蜜。
      K-1 Bee 4_instruction: 采两个花蜜，然后酿两个蜂蜜！
      K-1 Bee 5_instruction: 采3个花蜜，然后酿3个蜂蜜！
      K-1 Bee 6_instruction: 采两个花蜜，然后酿两个蜂蜜！
      K-1 Bee 7_instruction: 获得3个花蜜，然后酿2个蜂蜜。
      K-1 Bee 8_instruction: 采两个花蜜，然后酿两个蜂蜜！
      K-1 Bee 9_instruction: 采两个花蜜，然后酿两个蜂蜜！
      K-1 Bee Assessment 1_instruction: 采花蜜来酿蜂蜜！
      K-1 Bee Assessment 2_instruction: 采花蜜来酿蜂蜜！
      K-1 Bee Loops 1_instruction: 采花蜜来酿蜂蜜！
      K-1 Bee Loops 10_instruction: 采集所有的花蜜，然后酿蜂蜜。
      K-1 Bee Loops 11_instruction: 得到所有的花蜜，并且酿蜂蜜！
      K-1 Bee Loops 12_instruction: 得到所有的花蜜，然后酿蜂蜜。
      K-1 Bee Loops 2_instruction: 用重复循环来移动，然后采花蜜，酿蜂蜜。
      K-1 Bee Loops 3_instruction: 用三个重复循环来采花蜜，酿蜂蜜！
      K-1 Bee Loops 4_instruction: 用重复循环来采花蜜，酿蜂蜜，并且移动。
      K-1 Bee Loops 5_instruction: 用重复循环来采花蜜，酿蜂蜜！
      K-1 Bee Loops 6_instruction: 用重复循环来采花蜜，酿蜂蜜，并且移动！
      K-1 Bee Loops 7_instruction: 采花蜜，酿蜂蜜！
      K-1 Bee Loops 8_instruction: 采花蜜，酿蜂蜜！
      K-1 Bee Loops 9_instruction: 采集所有的花蜜，然后酿蜂蜜。
      K-1 Bee Loops Assessment 1_instruction: 采集花蜜来酿蜂蜜，并且用循环来移动！
      K-1 Bee Loops Assessment 2_instruction: 用循环采集花蜜，酿蜂蜜！
      K-1 Bee Puzzle 12_instruction: 获得3个花蜜，然后酿两个蜂蜜。
      K-1 Building a Foundation Assessment_instruction: 修建一个三层的金字塔。这里没有其它方向，所以用这些模块，直到画出它！
      K-1 Maze 10_instruction: '绕过炸药，让我到达那只猪！ '
      K-1 Maze 11_instruction: 沿着道路，带我到那只猪那里。躲开炸药，否则我的羽毛会被炸飞！提示：它在我的南边。
      K-1 Maze 2_instruction: 把我移到东边到达那只猪！
      K-1 Maze 3_instruction: 把我移到南边到达那只猪！
      K-1 Maze 4_instruction: 把我移到北边到达那只猪！
      K-1 Maze 5_instruction: 把我移到东边到达那只猪！
      K-1 Maze 6_instruction: 向一个方向移动，然后往另一个方向移动来帮我到达猪那里！
      K-1 Maze 7_instruction: 向一个方向移动，然后往另一个方向移动来帮我到达猪那里！
      K-1 Maze 8_instruction: 向一个方向移动，然后往另一个方向移动来帮我到达猪那里！
      K-1 Maze 9_instruction: 向一个方向移动，然后往另一个方向移动来帮我到达猪那里！
      K-1 Maze Assessment 1_instruction: 评估——帮我到达那只猪！
      K-1 Maze Assessment 12_instruction: 评估级别
      K-1 Maze Assessment 13_instruction: 评估级别
      K-1 Maze Assessment 2_instruction: 评估——帮我到达那只猪！
      K-1 Maze Loops 1_instruction: 帮我到达那只猪。
      K-1 Maze Loops 10_instruction: 帮我到达那只猪！用“重复”循环会更简单。
      K-1 Maze Loops 11_instruction: |-
        帮我到达那只猪！\r
        “重复”循环会让它更简单。
      K-1 Maze Loops 12_instruction: 帮我到达那只猪！“重复”循环会让它更简单。
      K-1 Maze Loops 2_instruction: 用重复模块让我到达那只猪！
      K-1 Maze Loops 3_instruction: 帮我到达那只猪！一定要用重复循环。
      K-1 Maze Loops 4_instruction: 帮我到达那只猪。
      K-1 Maze Loops 5_instruction: 帮我到达那只猪！一定要用重复循环。
      K-1 Maze Loops 6_instruction: 帮我到达那只猪！一定要用重复循环。
      K-1 Maze Loops 7_instruction: 帮我到达那只猪！一定要用重复循环。
      K-1 Maze Loops 8_instruction: 用重复循环来帮我到达那只猪。
      K-1 Maze Loops 9_instruction: 帮我到达那只猪。
      K-1 Maze Loops Assessment 1_instruction: 看看我们学会的！用重复循环帮我到达那只猪！
      K-1 Maze Loops Assessment 2_instruction: 用重复循环来帮我到达那只猪。
      K-1 Maze Multi 14_instruction: 评估级别
      K-1 Maze Multi 15_instruction: 评估级别
      K-1 Maze Sequence Assessment 1_instruction: |-
        让我们看看你学会了什么！\r
        往一个方向移动，然后往另一个方向移动帮我到达那只猪！
      K-1 Maze Sequence Assessment 2_instruction: 往一个方向移动，然后往另一个方向移动帮我到达那只猪。
      K-1 Maze debug Assessment 1_instruction: 评估——通过重新排列并添加模块来调试这一关，让我到达那只猪！
      K-1 artist 1 level 10_instruction: 用“跳”和“画”模块来画虚线。
      K-1 artist 1 level 9_instruction: 用三行画出它。
      K-1 maze debug 1_instruction: 修改代码来让我到达那只猪！
      K-1 maze debug 10_instruction: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      K-1 maze debug 11_instruction: |-
        这是一个测试！\r
        通过重新排列并改变模块来调试这一关，让我到达那只猪。
      K-1 maze debug 2_instruction: 想想这里缺了什么，然后添加模块让我到达那只猪！
      K-1 maze debug 3_instruction: 有些东西不是太正确。移除某些模块来帮我到达那只猪！
      K-1 maze debug 4_instruction: 通过运行这些模块来修复它们！我想我的方向可能错了。
      K-1 maze debug 5_instruction: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      K-1 maze debug 6_instruction: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      K-1 maze debug 7_instruction: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      K-1 maze debug 8_instruction: 通过重新排列并添加模块来调试这一关，让我到达那只猪！
      K-1 maze debug 9_instruction: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      K2.0 sequence 1_instruction: 修改代码来让我到达那只猪！
      K2.0 sequence 10_instruction: |-
        Challenge: Move me around the TNT to get to
        the pig.
      K2.0 sequence 12_instruction: 'Let''s get that pig! '
      K2.0 sequence 2_instruction: 修改代码来让我到达那只猪！
      K2.0 sequence 3_instruction: |-
        Something is not quite right. REMOVE a block
        to get me to the pig!
      K2.0 sequence 4_instruction: |-
        Time for a shorter puzzle!  Move one way, then
        another to get me to the pig.
      K2.0 sequence 4a_instruction: Try this puzzle again from the start!
      K2.0 sequence 5_instruction: 向一个方向移动，然后往另一个方向移动来帮我到达猪那里！
      K2.0 sequence 6_instruction: 想想这里缺了什么，然后添加模块让我到达那只猪！
      K2.0 sequence 7_instruction: |
        Debug this level by changing a block to get me
        to the pig!
      K2.0 sequence 8_instruction: |-
        Debug this level by adding blocks to get me to
        the pig!
      K2.0 sequence 9_instruction: '绕过炸药，让我到达那只猪！ '
      K2.0 sequence FP_instruction: |-
        Now figure out how to get the pig any way you
        can!
      K2.0 sequence pre_instruction: 使用这些模块看你能不能让我到达猪那里！
      KIKI GLJ Test Response_instruction: '认真看看下面的代码。你觉得当点击"运行"时，飞机会做什么？\r

'
      KTest1_instruction: Can you make me move South once more to get to the pig?
      KTest2_instruction: |-
        Trace the path and lead me to the silly pig. Avoid TNT
        or the feathers will fly!
      Kiki_StarWars_Test_3_instruction: 文本
      Kiki_StarWars_Test_4_instruction: 文本
      Kiki_StarWars_Test_5_instruction: 文本
      Kiki_StarWars_Test_5_Example_instruction: 文本
      LaurelDebugging4Video1_instruction: 任意移动月桂树以获取尽量多的金币！
      Limited Quantity of Blocks Test_instruction: |-
        Get me to the pig by adding only
        one block
      Luigi's Pizza 1_instruction: |-
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |-
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |-
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |-
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |-
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |-
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MC Agent Freeplay_instruction: "**自由游戏时间：** 是时候自行探索了！"
      MC HOC 2016 Level 10_instruction: 现在，是制作您自己的 我的世界 的时候了！生成生物，让它们做你要它们做的事。祝您玩得愉快！
      MC HOC 2016 Level 2-2_instruction: 鸡一动不动。在`当生成时`栏中放置`移动`和`转向`方格，让它动起来。
      MC HOC 2016 Level 3_instruction: 好极了，鸡动起来了！不过她又停了。在游戏中，鸡永远走来走去。使用`永远执行`循环，让这些鸡一直走动。
      MC HOC 2016 Level 4_instruction: 现在鸡都朝同一个方向走动，显得很奇怪。游戏可利用随机移动，让事物看起来真实。让鸡`随机转向`。
      MC HOC 2016 Level 5_instruction: 这些牛迷路了！在`永远执行`循环中使用`向目标移动一步`方块，带它们找到草。
      MC HOC 2016 Level 6_instruction: 现在你来做出僵尸。使用`生成`方块，在夜晚降临时做出 3 只僵尸。让它们朝您移动。坚持存活到天明。
      MC HOC 2016 Level 8_instruction: 您去羊那里的路被一面石头墙挡住了。很走运，这儿有一只爬行者。爬行者会在您碰过它们之后爆炸。让爬行者炸掉墙壁，你才能到达羊身边！
      MC HOC 2016 New Drop_instruction: 在 我的世界 中，羊会掉落羊毛。在`当使用时`方块中放置`掉落`方块，然后走过去，让羊掉落物品。
      MC HOC 2016 New Spawn_instruction: 在游戏中，生成表示添加一些事物到世界里。在`当运行时`下方放置`生成`方块，在游戏开始时生成事物。
      MC HOC 2016 New Walk_instruction: 我们来探索世界吧！用方向箭移动，按空格键或轻按游戏板使用物品。用门进入房屋。
      MC HOC 2016 SCORE LEVEL_instruction: 有的游戏会让你保留分数。跟这些铁傀儡玩捉迷藏，用`增加 1 分`方块，让您在标记它们时给自己得一分。达到五分就算赢！
      MC HOC 2016 Village Test_instruction: 哦不好！僵尸将您困在里面了！编码让铁傀儡追踪并攻击僵尸！
      MC_2017_Ryan_02_instruction: 使用循环，让特工到达压力板，帮助玩家出去。
      MC_HOC_2017 Agent Test_instruction: 单击"运行"将玩家移动到房子里的橙色方块上。
      MC_HOC_2017_01_instruction: 单击"运行"将玩家移动到房子里的橙色方块上。
      MC_HOC_2017_01_Cole_instruction: 在路上收集工具。使用方向键左右移动，取到屋里的宝箱。
      MC_HOC_2017_01_Kiki_instruction: 单击"运行"将玩家移动到房子里的橙色方块上。
      MC_HOC_2017_01_RETRY_instruction: '使代理人抵达压力板，然后按"运行"并使用方向键将玩家移出房屋以收集箱子。 '
      MC_HOC_2017_02_instruction: 让特工到达压力板。
      MC_HOC_2017_02_Cole_instruction: '移动特工到压力板, 使{currentPlayerName} 可以到达地图。 '
      MC_HOC_2017_02_Kiki_instruction: 让特工到达压力板，并将玩家移动到橙色方块上。
      MC_HOC_2017_02_Will_instruction: 让特工到达压力板。
      MC_HOC_2017_03_Cole_instruction: '编码让特工可以打开大门 '
      MC_HOC_2017_03_Kiki_instruction: 让特工到达压力板。
      MC_HOC_2017_04_instruction: 改动上一个关卡的循环，帮助特工找到过河的路。
      MC_HOC_2017_04POINT5_Cole_instruction: 让特工到达压力板。
      MC_HOC_2017_04POINT5_RYAN_instruction: 让特工到达压力板。
      MC_HOC_2017_04_Cole_instruction: 让特工到达压力板。
      MC_HOC_2017_04_Kiki_instruction: 让特工到达压力板。
      MC_HOC_2017_05_instruction: 利用函数让特工到达压力板。
      MC_HOC_2017_05_Cole_instruction: 让玩家到铲子那里。
      MC_HOC_2017_05_Josh_instruction: 让玩家到铲子那里。
      MC_HOC_2017_05_Kiki_instruction: 让玩家到橙色方块上。
      MC_HOC_2017_06_Cole_instruction: 完成代码，帮助特工造一座过河的桥。
      MC_HOC_2017_06_Josh_instruction: 完成代码，帮助特工造一座过河的桥。
      MC_HOC_2017_06_Kiki_instruction: 完成代码，帮助特工造一座过河的桥。
      MC_HOC_2017_07_Cole_instruction: 摧毁冰块，让{currentPlayerName} 到达矿车。
      MC_HOC_2017_07_Kiki_instruction: 使用函数清除前往橙色方块的路径。
      MC_HOC_2017_07a_Kiki_instruction: 清除前往橙色方块的路径。
      MC_HOC_2017_08_Cole_instruction: 更改给出的函数，给这个群落帮忙。
      MC_HOC_2017_08_Kiki_instruction: 为这个关卡更改函数。
      MC_HOC_2017_08_RY_instruction: 使用函数找到一条穿过岩浆的路。
      MC_HOC_2017_08_Will_instruction: 使用函数找到一条穿过岩浆的路。
      MC_HOC_2017_09_Cole_instruction: 给特工编程，让他清理玩家的路径。
      MC_HOC_2017_09_Kiki_instruction: 编程让特工可以清理角色的路径，并到达压力板
      MC_HOC_2017_10_Cole_instruction: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_10_Cole_old_instruction: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_10_Kiki_instruction: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_10_RETRY_instruction: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_10_RYAN_instruction: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_10_RYAN2_instruction: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_13_Cole_instruction: "**自由游戏时间：** 是时候自行探索了！"
      MC_HOC_2017_4.5v2_instruction: 让特工到达压力板。
      MC_HOC_2017_Ali_instruction: 使用这些功能找到一种越过岩浆的办法。
      MC_HOC_2017_FP10x10_instruction: "**自由游戏时间：** 您能挑战自我并收集完当前关卡的所有钻石吗？ "
      MC_HOC_2017_FP10x10_RE_instruction: "**自由游戏时间：** 您能挑战自我并收集完当前关卡的所有钻石吗？ "
      MC_HOC_2017_FP20x20_instruction: "**自由游戏时间：** 是时候自行探索了！"
      MC_HOC_2017_Ryan_03_instruction: 现在，使用循环来帮助代理人，以在水中放置方块的方式在河流上建造一座桥梁。
      MC_HOC_2017_Ryan_05_instruction: 摧毁这些仙人掌，以便让玩家抵达目标。
      MC_HOC_Kiki_02_instruction: 使代理人抵达压力板。
      MSM Big Game Empty_instruction: |-
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |-
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |-
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |-
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |-
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |-
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |-
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |-
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |-
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |-
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |-
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |-
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |-
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |-
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |-
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      Middle School Hackathon Pt 1_instruction: "(Click to see full instructions)"
      Middle School Hackathon Pt 2_instruction: "(Click to see full instructions)"
      Mike Pair Programming_instruction: Here are the instructions
      Mike Test Bee Conditionals 1_instruction: |-
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      Mike Test Bee Conditionals 2_instruction: |-
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      MikeAssessment1_instruction: Now do it right!
      MikeStar_instruction: Draw this.
      MikeStarHard_instruction: Draw this.
      MikeStarNested_instruction: Draw this.
      MikeTest1_instruction: Who knows what you should do?!?!
      MikeTest2_instruction: Draw something!
      MikeTest3_instruction: Build Something
      NEW Course 4 Artist Functions 1_instruction: 你能用重复循环，来画一个边长100像素的正方形吗？
      NEW Course 4 Artist Functions 10.1_instruction: 用前一关的函数来画这个图形。
      NEW Course 4 Artist Functions 10_instruction: 点击编辑来填写函数定义中的模块，从而画出一个边长40像素的正方形。
      NEW Course 4 Artist Functions 11_instruction: 现在，我们想创建一个叫做`draw a line of squares`（用正方形画一条线）的新函数，它能在一行画出6个正方形。你能通过已经有的`draw
        a square 20`（画一个边长20像素的正方形）函数来构造它吗？
      NEW Course 4 Artist Functions 12_instruction: 用上一关中的`draw a line of squares`（用正方形画一条线）函数来画这个图形。
      NEW Course 4 Artist Functions 13_instruction: '你能通过`draw a line of squares`（用正方形画一条线）函数来画一个星形吗？  '
      NEW Course 4 Artist Functions 14_instruction: '自由游戏时间！ '
      NEW Course 4 Artist Functions 2_instruction: 你能画三个正方形，每个之间相隔20像素吗？提示：每个正方形的边长是100像素。
      NEW Course 4 Artist Functions 3_instruction: |-
        这是一种新的模块。叫做“函数”。点击“编辑”来添加代码，让它能画边长为100的正方形。\r
        \r
        当你编辑完成函数后，点击“关闭”来返回你的程序。
      NEW Course 4 Artist Functions 4_instruction: 用`draw a square`（画一个正方形）函数来画这个图形。
      NEW Course 4 Artist Functions 5_instruction: "“画一个正方形”的函数是怎样知道要运行什么命令的呢？点击“画一个正方形”的函数的“编辑”按钮。这些在函数编辑器里定义的模块就是“画一个正方形”所需要的。当你看完后，点击“保存并关闭”，然后点击“运行”。"
      NEW Course 4 Artist Functions 6_instruction: '你能用“画正方形”函数来画出这个图形吗？提示：每个正方形相隔20像素。\r

'
      NEW Course 4 Artist Functions 7_instruction: '你已经懂得怎样使用函数模块了吗？让我们改一下代码，来让它的边长是200像素。点击“画一个正方形”函数的“编辑”来改变其长度。记得点击右上角的“保存并关闭”。 '
      NEW Course 4 Artist Functions 8_instruction: 我们已为你创建了一个叫做"画一个三角形"的新函数。 你可以编辑这个函数来画一个边长
        100 像素的三角形吗?
      NEW Course 4 Artist Functions 9_instruction: 你能只添加一个模块来解决这个问题吗？
      NEW Course 4 Artist Functions inspire_instruction: 点击这里，再看一次激发灵感的图像。
      NEW Course 4 Artist Params 1_instruction: 让我们定义这个函数来画一个边长50像素的正方形。点击“编辑”来开始。
      NEW Course 4 Artist Params 10_instruction: '创建一个有“长度”参数的“画一个六边形”的函数。六边形的边长都是100像素。 '
      NEW Course 4 Artist Params 11_instruction: 你能想出怎样画这个图形吗？编辑这个函数来使用“边数”参数。
      NEW Course 4 Artist Params 12_instruction: 你能完成这个图形吗？所有形状的边长都是100像素。
      NEW Course 4 Artist Params 12a_instruction: 这个图形和上一个类似。你能用“计数循环”和你的函数一起来完成它吗？
      NEW Course 4 Artist Params 13_instruction: |-
        让我们编辑这个“画一个多边形”函数。它已经有一个“边数”参数了。现在，再加一个“长度”参数。\r
        每个图形的周长是200像素。你还记得当多边形有不同数量的边时，如何让它们一样长的等式吗？
      NEW Course 4 Artist Params 14_instruction: 编辑“画一个螺旋边缘”来使用“长度”和“边数”参数，然后重新画这些图形。
      NEW Course 4 Artist Params 15_instruction: 自由发挥：这里除了你写的函数，还有更多的函数让你发挥。画些令人惊叹的东西吧！用不同的笔宽度来看看你能画出什么不一样的图形！
      NEW Course 4 Artist Params 2_instruction: 从头开始创建一个 "绘制三角形" 函数, 使三角形具有50像素边。
      NEW Course 4 Artist Params 3_instruction: '现在让我们用函数来在一行里画5个三角形。每个三角形之间相隔30像素。\r

'
      NEW Course 4 Artist Params 4_instruction: 你注意到这些函数模块有什么不同吗？点击“运行”来看看会发生什么。
      NEW Course 4 Artist Params 5_instruction: '将“长度”参数的输入模块中的“???”。这个五边形的边长是100像素。 '
      NEW Course 4 Artist Params 6_instruction: 将长度参数中的“???”换成正确的数字。正方形和三角形的边长是100像素，而六边形的边长是75像素。
      NEW Course 4 Artist Params 7_instruction: 你能完成这幅画吗？提示：每个三角形的边长比前一个多25像素。第一个三角形的边长是25像素。
      NEW Course 4 Artist Params 8_instruction: 这个三角形的代码被破坏了。你能修好这个函数，让它能画边长25，50，75像素的三角形吗？
      NEW Course 4 Artist Params 9_instruction: 点击“编辑”来填写这个“画一个正方形”函数的定义，并且加一个参数。它应该像三角形一样有一个长度参数。这次，画三个正方形，边长分别为25，50，75像素，每个相隔100像素。
      NEW Course 4 Artist Params inspire_instruction: '自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 '
      NEW Course 4 Artist Vars 1.5_instruction: '看一眼代码，你能想出“设置长度”模块和“长度”模块是怎样一起工作的吗？点击“运行”来看看它怎么起作用的。 '
      NEW Course 4 Artist Vars 12_instruction: 现在，重新创造上一关的算法，然后创造一个边长为150像素的五边形。
      NEW Course 4 Artist Vars 2.5_instruction: '看一眼代码，你能想出“设置长度”模块和“长度”模块是怎样一起工作的吗？点击“运行”来看看它怎么起作用的。 '
      NEW Course 4 Artist Vars 2_instruction: '拖拽一个数字模块到“设置长度”模块和“重复”模块中来画一个边长50像素的三角形。

'
      NEW Course 4 Artist Vars 4 5_instruction: 上一关棒极了，让我们这次用60像素的六边形再来一次。
      NEW Course 4 Artist Vars 4_instruction: |-
        让我们再试一次！\r
        \r
        你能通过设置长度变量为60，来画出这个六边形？
      NEW Course 4 Artist Vars 6_instruction: |-
        通过将长度变量放到正确的地方，并设置正确的值来画出这个边长为100像素的五边形。\r
        \r
        看看怎么能只设置长度一次，而将它用到所有正确的地方？
      NEW Course 4 Bee For Loops 1_instruction: 用循环从每朵花里采集花蜜。
      NEW Course 4 Bee For Loops 10_instruction: 用计数循环中的计数变量来控制水平移动多远。
      NEW Course 4 Bee For Loops 10a_instruction: 准备好挑战了吗？用你学会的关于循环的知识来解决这个问题。记住：你可能需要尝试很多次才能找到正确的解法。
      NEW Course 4 Bee For Loops 11_instruction: 你能用循环变量来控制移动并收集花蜜吗？
      NEW Course 4 Bee For Loops 2_instruction: 添加需要的代码来让蜜蜂收集到所有的花蜜。看看这一关需要多少代码！（我们会在下一关中学到一个更简单的办法。）
      NEW Course 4 Bee For Loops 3_instruction: '啊，“计数循环”让这个简单多了！你需要的代码都已经写好了，看一下是怎么放到一起的，然后点击“运行”看看它是怎么工作的。 '
      NEW Course 4 Bee For Loops 4 4_instruction: 现在我们需要往前移动“计数器”这么多次，然后收集“计数器”这么多次花蜜。你能用两个重复循环来解决这个挑战吗？
      NEW Course 4 Bee For Loops 4_instruction: '将计数循环中的??? 换成蜜蜂能收集的最大数量的花蜜。 '
      NEW Course 4 Bee For Loops 5 5_instruction: 你找到计数循环的窍门了吗？让我们帮助蜜蜂收集到剩下的花蜜。
      NEW Course 4 Bee For Loops 5_instruction: 你也能用计数循环递减。试着通过从5到1，每次减1来递减计数收集花蜜。
      NEW Course 4 Bee For Loops 6_instruction: 循环里的最后一个数字叫做“增量”。每次循环执行时，计数器变量都会改变“增量”这么多。试着用增量2来收集所有花蜜。
      NEW Course 4 Bee For Loops 7_instruction: |-
        现在让我们将“计数器”变量和一个数学模块一起使用！怎样通过用“计数器”变量来使用最少的模块来游览花园呢？这次需要什么来收集3，6，9，12，15个花蜜呢？秘密就是“计数器”变量！\r
        \r
        记住：如果你的循环是递增计数的，增量就会每次加到计数器变量上。
      NEW Course 4 Bee For Loops 8_instruction: 你已经明白了！应该递增多少才能收集到3, 6, 9, 12, 15个花蜜？
      NEW Course 4 Bee For Loops 9_instruction: 如果循环的数字是递减的，每次循环就会从计数器变量中减去增量的值。如果要收集15，然后12，9，6，3个花蜜，增量的值需要设置为多少？
      NEW Course 4 Bee For Loops 95_instruction: 看一下刚刚创建的“计数循环”的每个部分。能想出哪个部分需要加倍来解决这个问题呢？为什么这样就能工作呢？
      NEW Course 4 Play Lab Params 11_instruction: '自由游戏时间！可以使用工具箱里的所有模块，玩的开心！ '
      NEW Course 4 Play Lab Params 5 5_instruction: 让我们再试一次，但是帮助会更少。这次让演员巡逻需要改动什么？
      NEW Course 4 Play Lab Vars 4 5_instruction: 你认为这段代码会做什么呢？点击“运行”来看看会发生什么。
      NEW Course 4 Play Labs For Loops 7a_instruction: 用已经学会的，能在每次企鹅计数时，让恐龙往前走一步吗？
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: '自由游戏时间！可以使用工具箱里的所有模块，玩的开心！ '
      NEW Course 4 Play Labs For Loops 8a_instruction: '挑战：怎样才能使用“计数循环”来让每个演员都旋转，说他们的演员编号，然后从屏幕上消失？ '
      NetSim Standalone Automatic DNS_instruction: |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |-
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |-
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |-
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |-
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? "
      NetSim_AddressingMessages_instruction: |-
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |-
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |-
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |-
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |-
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |-
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendNumbers_instruction: |-
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_SendingABTest_instruction: |-
        This is Sarah's test of making a netsim
        level
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |-
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |-
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |-
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: 画些令人惊奇的东西吧！你的代码已经保存为一个项目了，你在任何时候都可以返回。
      New Basketball Project_instruction: 创建您自己的篮球游戏。您可以更改所有规则。完成后, 单击 "完成" ，让朋友在手机上试用您的游戏。
      New Bounce Project_instruction: 创建您自己的弹跳游戏。你可以改变所有的视觉效果和规则。完成后, 单击 "完成"，让朋友在手机上试用您的游戏。
      New Course 4 Artist Functions Level 4_instruction: 用“画一个正方形”函数来画这个图形。
      New Gumball Project_instruction: 创建并分享你想的任何东西！
      New Ice Age Project_instruction: 创建并分享你想的任何东西！
      New Infinity Project_instruction: 创建并分享你想的任何东西！
      New Minecraft Hero Project_instruction: "**自由游戏时间：** 是时候自行探索了！"
      New Sports Project_instruction: 创建你自己的游戏！这里一切由你做主：你可以改变所有的规则，混合搭配运动，发挥您的创造力！当你完成后，点击“完成”来让你的朋友在他们的手机上尝试你的游戏。
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Let’s begin by exploring a simple
        videogame, and then figuring out how it works. You can use the arrow keys
        to move the ninja left, right and jump - try to catch the unicorn and avoid
        the dragon!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |-
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |-
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 JoL 1_instruction: |-
        Program the artist to design a face for your
        jack-o-lantern!
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: |-
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 pumpkin 1_instruction: |-
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |-
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: 碰上爬行者可不妙。小心绕过爬行者，安全到达自己的家才是上策。
      Overworld Avoid Monsters_2018_instruction: 碰到苦力怕是个坏主意。小心避过苦力怕安全到家。
      Overworld Chop Tree - allthethings_instruction: 木材是非常重要的资源。很多东西都是由它制成的。走到树边,
        用 "摧毁模块" 指令把它砍下来。
      Overworld Chop Tree_instruction: 木头是非常重要的资源，很多东西都要用到它。走到树边，使用“摧毁方块”命令，即可将树砍倒。
      Overworld Chop Tree_2018_instruction: 木材是非常重要的资源。很多东西都是由它制成的。走到树边, 用 "摧毁模块"
        指令把它砍下来。
      Overworld Chop Trees_instruction: 我们必须在太阳下山之前，建造一座房子。房子需要用到大量木头。将这所有 3 棵树砍倒吧。
      Overworld Chop Trees_2018_instruction: 我们需要在太阳下山之前建一所房子。房子需要很多木头。砍掉所有的3棵树。
      Overworld Free Play 20x20_instruction: 恭喜！你完成了我们所有谜题！现在，快用你至今为止学会的知识，采矿、建造和创造一些独特的东西吧。
      Overworld Free Play 20x20_2018_instruction: 恭喜！你完成了我们所有谜题！现在，快用你至今为止学会的知识，采矿、建造和创造一些独特的东西吧。
      Overworld House Frame Chosen_instruction: 使用你喜欢的材料建立房子的其它部分。“重复”命令将派上用场。
      Overworld House Frame Chosen_2018_instruction: 用你喜欢的任何材料建造房子的其余部分。"重复" 指令将会派上用场。
      Overworld Move to Sheep_instruction: 添加第二个`向前移动`命令，到达羊的位置。
      Overworld Move to Sheep_2018_instruction: 添加第二个 `向前移动` 模块达到绵羊的位置。
      Overworld Place Wall_instruction: 每座房子都是由砌墙开始的。在重复循环里面放入 "放下" 和 "向前移动" 命令，建造房子的第一部分。
      Overworld Place Wall_2018_instruction: 每栋房子都是从墙开始的。在重复循环中放置 "放置"和 "向前移动" 指令来建造房子的第一部分。
      Overworld Plant Crops_instruction: 提前规划非常好。在水的两边种植作物，这样以后就不用挨饿了。
      Overworld Plant Crops_2018_instruction: 提前计划很好。在水的两边种庄稼, 这样你以后就不会挨饿了。
      Overworld Powered Minecart_instruction: 干得漂亮！你收集了大量资源，建起了一个体面的家。现在从地图边缘铺设一条轨道，通向你的房门口吧。
      Overworld Powered Minecart_2018_instruction: 干得好! 你收集了大量的资源, 建造了一个合适的家。现在把铁轨从地图的边缘铺放到你家门口。
      Overworld Shear Sheep_instruction: 剪羊毛时间到了！用 "剪" 命令从两只羊身上收集羊毛。
      Overworld Shear Sheep_2018_instruction: 剪羊毛的时候到了！用 "剪" 指令从两只绵羊身上收集羊毛。
      PDAlg 13-16 Sam Extension Puzzle_instruction: |-
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |-
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 Rocket Height Puzzle_instruction: |-
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg 8-12 ex dr 1_instruction: |-
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |-
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg Big Game History_instruction: |-
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |-
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |-
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |-
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |-
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |-
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |-
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |-
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. "
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. "
      PDK5 Functions 1_instruction: |-
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: 函数能让你定义新的模块！我们将画正方形的模块挪到了一个叫做“画一个正方形”的函数里。你能用“画一个正方形”函数来画个眼镜吗？正方形间隔75像素。
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" "
      PDK5 Loops 3_instruction: |-
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      PS - test - pixelation_instruction: 通过键入0和1来完成图形X
      PS FR test 7-25_instruction: 'Here are your instructions for this free response.  '
      PS Log test - Define and use turnAround_instruction: |-
        Define a function called
        turnAround. Call the function and then move the turtle forward. (Click to
        see full instructions)
      PS copy 2-3 Bee Conditionals 5_instruction: |-
        Be careful not to collect nectar
        from a purple flower if it doesn't have any. \r
        You must first check if
        the nectar is equal to 1 using the `if nectar` block.
      PS predictive Applab level test_instruction: 'Here are some instructions. '
      Pattern Bee 1_instruction: |-
        What a strange field of goodies! I wonder if there's
        a pattern here...
      Pixelation - AllTheThings 4_instruction: 这个像素级别演示了 "hide_encoding_controls"
        选项的使用。 请注意, 该级别以十六进制显示图像数据, 并且不允许您将其更改回二进制。
      Pixelation - AllTheThings 5_instruction: 此像素级别演示如何使用 "隐藏滑块" 选项。 请注意, "宽度" 和
        "高度" 滑块不可用, 并且 "宽度" 和 "高度" 栏不可编辑。
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |-
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |-
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |-
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |-
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |-
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |-
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |-
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |-
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |-
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |-
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |-
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |-
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |-
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |-
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Pizza on a Plate_instruction: |-
        Project Idea: Create a picture of something
        familiar from the real world. This requires persistence and planning!
      Planning Farmer_instruction: |-
        What a strange field of goodies! I wonder if
        there's a pattern here...
      Planter Test_instruction: Help me plant my fields!
      Play Lab Rocket 1_instruction: |-
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |-
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |-
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |-
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |-
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |-
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |-
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |-
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva copy U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      Poorva-test_instruction: |-
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Practice Create Performance Task_instruction: |-
        Design and implement your practice
        Create Performance Task. (Click to see full instructions)
      Project - Final Image Scroller_instruction: 更新图像滚动条以响应按钮和按键。(点击查看完整说明)
      Project - Finish your canvas app_instruction: 扩展其中一个效果的功能, 或创建一个全新的。(点击查看完整说明)
      Project - Make Your Own Clicker Game_instruction: 完成你的遥控器游戏 ！（点击查看完整的说明）
      Project - Your Own Multi Screen App_instruction: |-
        Create your multi-screen
        app. (Click to see full instructions.)
      Prompt Test_instruction: |-
        Build whatever you want. This is an example of a
        number-guessing game!
      Quantum Bee - Ryan_instruction: 这些云正在打搅我！在这些云里，一部分有花，而另一部分没有花。我需要从这些有花的云里采集到蜂蜜。
      Quantum Bee_instruction: 紫色的花里可能会有一个花蜜，但也可能没有花蜜，而且你不知道哪些花有花蜜！请注意不要从没有花蜜的紫花里收集花蜜。你可以用“如果”模块来检查（花朵里的）花蜜是否等于1。
      Robot Doodle_instruction: '项目理念: 创建一个真实世界中熟悉的事物的图片。这需要坚持和规划!'
      Robot Doodle_2018_instruction: |-
        Project Idea: Create a picture of something
        familiar from the real world. This requires persistence and planning!
      Robot Drawing_instruction: '项目理念: 创建一个真实世界中熟悉的事物的图片。这需要坚持和规划!'
      Robot_instruction: '项目理念: 创建一个真实世界中熟悉的事物的图片。这需要坚持和规划!'
      Rocket Height Course A_instruction: |-
        Follow the Design Recipe to create a function
        rocket-height.
      Ryan - 4-5 Bee Conditionals 2_instruction: 蜜蜂现在只想要花蜜。不是所有的目标都是花，所以检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。
      Ryan - Bee Conditionals_instruction: 蜜蜂现在只想要花蜜。不是所有的目标都是花，所以检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。
      Ryan Doily Step 1_instruction: |-
        现在我们要分步骤来画一个小桌垫。
        首先，画一个正方形。
      Ryan Doily Step 2_instruction: |-
        现在你要把它重复旋转20次！
        那么每次转多少度，迭代20次以后能得到360度呢？
      Ryan Doily Step 3_instruction: |-
        现在你要把它重复旋转20次！
        那么每次转多少度，迭代20次以后能得到360度呢？
      Ryan Test Locked Blocks_instruction: 这里有个函数叫做“巡逻”。编辑它来让猫向上移动400像素，再向下移动400像素。
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      RyanTest3_instruction: 这个级别已打开了形状转换功能! 刷新来查看不同的变量。
      SG Add Subgoals practice_instruction: 尽量用简练的代码在乌龟的右前方绘制一个3x3 的网格。乌龟应该处在原来的位置,
        保持原来的朝向。(点击查看完整说明)
      SG U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      SG U3L03 - draw step_instruction: |-
        Write the drawStep function. (Click to see
        full instructions)
      SG U3L03 Define and use turnAround_instruction: |-
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      SG U3L03 Draw a T using turnAround_instruction: 使用提供的turnAround() 来画一个加号。 (点击查看完整说明)
      SG U3L03 Three Steps_instruction: 定义一个名为 drawSide () 的函数，来画三步，并移动乌龟来为下一篇做准备
        (单击查看完整说明)
      SG U3L03 define turnRight and draw a rectangle_instruction: |-
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      SG U3L03 draw diamond_instruction: 创建一个名为 drawDiamond () 的函数, 它利用您以前的工作来绘制完整的菱形。(点击查看完整说明)
      SG U3L04 - 3 by 3 with functions_instruction: |-
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      SG U3L04 - snowflake_instruction: |-
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      SG U3L06 - moveForwardwithParams_instruction: 使用单个命令将乌龟移到屏幕边缘。(点击查看完整说明)
      SG U3L06 Challenge 1 triangle_instruction: 使用乌龟命令模块的参数化版本，以100 像素为边长来创建一个三角形。(点击查看完整说明)
      SG U3L06 Challenge 2 purple square_instruction: 请阅读 penColor () 和 penWidth ()
        的文档, 然后再使用它们绘制蓝色正方形。
      SG U3L06 Challenge 3 fill pink_instruction: 用你喜欢的颜色填充屏幕的背景。(点击查看完整说明)
      SG U3L06 Challenge 4 bullseye_instruction: |-
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      SG U3L06 Challenge 5 overlapping circles_instruction: '创建这个图像时，只使用了dot() 和 penColor
        () 。但是, 我们如何让这些圆圈变成透明的？ 如果你还没有得到提示: 请参照文档!'
      SG U3L06 Challenge 6 squiggles_instruction: '阅读 "arcLeft" 和 "arcRight" 命令的文档,
        然后按所示画出曲线。

'
      SG U3L06 Challenge 7 smiley face_instruction: 使用 turnTo () 和 moveTo () 来帮助绘制笑脸。(点击查看完整说明)
      SG U3L06 Challenge 8 make your own_instruction: |-
        Create a drawing of your own.
        (Click to see full instructions)
      SG U3L07 - Free Play Loops and Random_instruction: 自由游戏! 使用你从循环和随机中学到的东西, 来制作你自己的小场景。祝您玩得愉快。
      SG U3L07 - allSeaGrass_instruction: 通过写循环drawAllSeagrass来添加50片海草到图像里。(点击查看完整说明)
      SG U3L07 - bubbles_instruction: |-
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      SG U3L07 - createTriangleParam_instruction: 定义一个参数的函数, 来匹配使用函数并完成图像。(点击查看完整说明)
      SG U3L07 - fish_instruction: |-
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      SG U3L07 - introSquare_instruction: 使用循环功能绘制正方形。然后添加另一个循环来绘制多个方块, 每一个方块旋转相同的角度。(点击查看完整说明)
      SG U3L07 - loopsWithRandom_instruction: 增加循环的数字，来用白色填满屏幕。(点击查看完整说明)
      SG U3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      SG U3L07 - randomSquare_instruction: 使用循环绘制图形。(点击查看完整说明)
      SG U3L07 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      SG U3L07 - seaStar_instruction: |-
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      SG U3L07 - sunBeams_instruction: 通过在 drawAllSunbeams 函数中添加循环，来添加100束阳光到图片里。(点击查看完整说明)
      SG U3L07 - topDownDesign_instruction: 当你对这个程序的结构感到满意时, 继续下一个练习。(点击查看完整说明)
      SG U3L07 More Subgoals_instruction: |-
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      SG U3L08 - createTwoParamTriangle_instruction: |-
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      SG U3L08 - digitalScene_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      SG U3L08 - drawSquareWithParam_instruction: |-
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      SG U3L08 - fish_instruction: 添加一个参数到 drawFish, 来更改所画的鱼的大小。(点击查看完整说明)
      SG U3L08 - freePlay_instruction: 通过增加对新函数的参数调用来不断增加您的图像。（单击以查看完整的说明）
      SG U3L08 - individualCode_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      SG U3L08 - introUnderTheSea - recovery_instruction: 在图片里再添加一条鱼, 海星, 以及海草。看一看,
        但不要改变创建它们的函数。(点击查看完整说明)
      SG U3L08 - introUnderTheSea_instruction: 在图像中再添加一条鱼, 海星, 和一条海草。看一看，但不要改变创建它们的函数。(点击查看完整说明)
      SG U3L08 - multiParamFish_instruction: |-
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      SG U3L08 - paramsToStarfish_instruction: |-
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      SG U3L08 - randomInput_instruction: 使用 randomNumber() 模块来测试您设计的随机输入的函数。(点击查看完整说明)
      SG U3L08 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      SG U3L08 - squareTwoParams_instruction: 调用 drawSquare () 画两个正方形。(点击查看完整说明)
      SG U3L08 comments_instruction: 使用 randomNumber () 块来测试您设计的随机输入的函数。(点击查看完整说明)
      SG U3L08 how to add comments_instruction: 使用 randomNumber () 块来测试您设计的随机输入的函数。(点击查看完整说明)
      SG U3L2 Using Simple Commands part 1_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      SG U3L2 Using Simple Commands_instruction: 在龟的起始位置上方和左侧绘制一个1x1 的正方形。单击以查看完整说明。
      SG U3L2_Add-subgoals_instruction: |-
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L2_Turtle3by3Grid_instruction: 尽量用简练的代码在乌龟的右前方绘制一个3x3 的网格。乌龟应该处在原来的位置,
        保持原来的朝向。(点击查看完整说明)
      SG U3L2_TurtleSquare_right_instruction: 在起始位置的右前方绘制一个正方形。(单击以显示完整说明)
      SGU3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      Sam the Butterfly 1 (copy 1)_instruction: |-
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |-
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |-
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |-
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |-
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |-
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |-
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |-
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |-
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      SpecialFrozenLevel_instruction: 你已经正式成为艺术大师！创建一个冬季仙境。
      Standalone_Artist_1_instruction: 欢迎小艺术家！首先，一起用“右转“块和”向前移“块来画一个简单的正方形。正方形每边的长度是100像素。
      Standalone_Artist_2_instruction: 用 120 度和 60 度的角度，再加上150像素的边来画个菱形。
      Standalone_Artist_3_instruction: 能够用100 像素的边和60的角度来绘制一个六边形吗？
      Standalone_Artist_4_instruction: 现在你已获得一个新的块——循环。它可以重复执行一连串的指令。如果你循环这些命令6次，看看会发生什么？
      Standalone_Artist_5.5_instruction: 注意：如何将画菱形的代码转换成“循环”块来精简代码。你可以通过循环整个事件12次来画一朵花。提示：在每个画菱形的循环结束后，你需要转30度，这样你就不会总是在一个地方画菱形了。
      Standalone_Artist_5_instruction: 你需要循环多少次菱形才能化成这朵花呢？
      Standalone_Artist_6_instruction: |-
        通过循环画六边形6次来创建一个图形。每次你需要转动多少度呢？
        提示：用一个圆周的度数除以循环的次数。
      Standalone_Artist_7_instruction: 函数是另一种帮助避免重复工作的编程工具。这个函数会画一朵花，因此你可以在任何想画一朵花的时候使用它。用这个和新的“跳”模块来画这些花。提示：花之间相隔150像素。
      Standalone_Artist_8_instruction: 这里有一个叫做“画一个形状”的函数，我们用它来画一个六边形。运行这个代码来看看它做了什么，然后试试用这个函数看看发生什么。你能用它找到一个能画出正方形，三角形，或者八边形的模式吗？
      Standalone_Artist_9_instruction: 现在制作任何你想要的图片吧！你设置可以从一个空函数开始，来做到你想的事！
      Standalone_Artist_v2_instruction: 欢迎小艺术家！首先，一起用“右转“块和”向前移“块来画一个简单的正方形。正方形每边的长度是100像素。
      StepIntro_instruction: Here's how to use the "Step" button.
      Test Play Lab_instruction: This is a test play lab level.
      Test embedded Blockly in instructions_instruction: |-
        作为一个模块元素，我们需要包括一个用XML表达的，有效的模块或模块组。\r
        \r
        <xml>\r
          <block
        type="draw_move_by_constant">\r
            <title name="DIR">moveForward</title>\r
            <title
        name="VALUE">100</title>\r
          </block>\r
        </xml>\r
        \r
        我们也支持内嵌的模块化XML，例如： <xml><block type="draw_move_by_constant"><title
        name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>。
        不同点在于输入格式上，这个是一整段包括了所有内容，而前一个例子每段只包括了它自己。输出的不同也是类似的。
      Test embedded K1 Blockly in instructions_instruction: 用三个`向西移动`模块和一个`采摘玉米`模块来通过这关。
      Test of comment block_instruction: 拖拽出你想用的子目标模块。
      Testing Quantum Farmer_instruction: "Wow, look at that! \\r\n\\r\nI don't know\nhow
        many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat
        keeps using the `fill` block until the ground is even?  "
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.\r
        \r
      The Vigenere Cipher Widget_instruction: 说明
      The Vigenere Cipher_instruction: 说明
      Total Artist Clone Me_instruction: |-
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |-
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |-
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |-
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  "
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |-
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 Vigenere_instruction: Test
      U2 frequency caesar_instruction: 说明
      U2 frequency random sub_instruction: 说明
      U2 vigenere cipher_instruction: 说明
      U2L04 - NetSim Routers with Addresses_instruction: |-
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |-
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |-
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |-
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |-
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - Demo App_instruction: |-
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - appendItem_instruction: |-
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |-
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |-
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |-
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |-
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |-
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings Next_instruction: |-
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |-
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |-
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |-
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings createArray_instruction: |-
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |-
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |-
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings template_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |-
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |-
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |-
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |-
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |-
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |-
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |-
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |-
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |-
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |-
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |-
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |-
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |-
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |-
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |-
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |-
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |-
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |-
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |-
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |-
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |-
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |-
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |-
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |-
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |-
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND OR Simple_instruction: |-
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |-
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND and OR_instruction: |-
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Simple AND_instruction: |-
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |-
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Conditionals - intoOr_instruction: |-
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |-
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |-
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |-
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |-
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |-
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |-
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |-
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |-
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |-
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |-
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |-
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |-
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |-
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |-
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |-
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |-
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |-
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |-
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |-
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |-
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |-
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |-
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |-
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |-
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |-
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |-
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |-
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |-
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |-
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |-
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |-
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |-
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |-
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |-
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |-
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |-
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |-
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2-
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |-
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |-
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |-
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |-
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2-
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2-
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |-
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |-
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |-
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |-
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |-
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |-
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |-
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |-
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |-
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |-
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |-
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |-
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |-
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |-
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |-
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |-
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |-
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |-
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |-
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |-
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |-
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |-
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |-
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |-
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |-
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |-
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |-
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |-
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |-
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |-
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |-
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Practice Create Performance Task_instruction: |-
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |-
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |-
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |-
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |-
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |-
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |-
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |-
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |-
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |-
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |-
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |-
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simple Drawing - Comments_instruction: Do this
      U3 - Simple Drawing - Ellipse and No Fill_instruction: Do this
      U3 - Simple Drawing - Fill_instruction: Do This
      U3 - Simple Drawing - No Fill_instruction: Do this
      U3 - Simple Drawing - Order of Blocks_instruction: Do this
      U3 - Simple Drawing - Oval_instruction: Do This
      U3 - Simple Drawing - Personal Drawing_instruction: DO This
      U3 - Simple Drawing - Rectangle Width and Height_instruction: Do This
      U3 - Simple Drawing - Rectangle_instruction: Do This
      U3 - Simple Drawing - Road Ellipse_instruction: Do This
      U3 - Simple Drawing - Road Rects and Color_instruction: Do This
      U3 - Simple Drawing - Simple Shape Drawing_instruction: Do This
      U3 - Simple Drawing - Stroke and Stroke Weight_instruction: Do this
      U3 - Simple Drawing - X and Y values_instruction: Do This
      U3 - Simple Drawing - regular polygon_instruction: Do this
      U3 - Simple Drawing - text_instruction: Do This
      U3 - Simulation - 1_instruction: |-
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |-
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |-
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |-
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |-
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |-
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |-
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |-
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |-
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - Sprites - Intro Sprites_instruction: Do This
      U3 - Sprites and Mod - Create  and Draw Sprite_instruction: Do This
      U3 - Sprites and Mod - Mouse Width and Height_instruction: Do this
      U3 - Sprites and Mod - Mouse X and Y_instruction: Do this
      U3 - Sprites and Mod - Rand Around Mouse_instruction: Do this
      U3 - Sprites and Mod - Rand Shape Color_instruction: Do This
      U3 - Sprites and Mod - Shape Color_instruction: Do This
      U3 - Sprites and Mod - Wrap Many Squares_instruction: Do This
      U3 - Sprites and Mod - X and Y Prop_instruction: Do This
      U3 - Sprites and Mod - two sprites_instruction: Do This
      U3 - User Input - Save getText To Variable_instruction: |-
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |-
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |-
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |-
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |-
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |-
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |-
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |-
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |-
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |-
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |-
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |-
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |-
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |-
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |-
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |-
        Test out the new expressions.
        (Click to see full instructions)
      U3 - images - bee free play_instruction: Do this
      U3 Digital Assistant Design_instruction: |-
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |-
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |-
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |-
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 Variables consolelog_instruction: |-
        Use the write block to display the value
        of size
      U3 Variables flower example_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables gray square_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables make a square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      U3 Variables misconceptions try it_instruction: |-
        Test out your predictions
        from the previous level.
      U3 Variables randomize your square_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      U3 Variables write_instruction: |-
        Use the write block to display the value of
        size
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |-
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |-
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |-
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |-
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |-
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |-
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |-
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 Two Buttons with Ids_instruction: |-
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U313 drag Two Buttons_instruction: |-
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |-
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |-
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 Creating Procedures 1_instruction: |-
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |-
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |-
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 Three Steps_instruction: |-
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |-
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 define turnRight and draw a rectangle_instruction: |-
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 draw diamond_instruction: |-
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |-
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |-
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |-
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |-
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |-
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |-
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |-
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |-
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |-
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |-
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |-
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |-
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. "
      U3L06 Challenge 7 smiley face_instruction: |-
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |-
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |-
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. "
      U3L07 - allSeaGrass_instruction: |-
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |-
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |-
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |-
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |-
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - introSquare_instruction: |-
        Use a loop to draw a square. Then add another
        loop to draw many squares each one rotated some amount. (Click to see full
        instructions)
      U3L07 - loopsWithRandom_instruction: |-
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |-
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |-
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - sunBeams_instruction: |-
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |-
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |-
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, seagrass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - createTwoParamTriangle_instruction: |-
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |-
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |-
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |-
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |-
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - fish_instruction: |-
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |-
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea with comments_instruction: 在图片里再添加一条鱼, 海星, 以及海草。看一看,
        但不要改变创建它们的函数。(点击查看完整说明)
      U3L08 - introUnderTheSea_instruction: |-
        Add an extra fish, starfish, and piece
        of seagrass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |-
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |-
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |-
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |-
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |-
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |-
        Add an extra fish, starfish, and piece of seagrass
        to the image. Look at, but don't change, the functions that create them.
        (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |-
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 how to add comments_instruction: 使用 randomNumber() 模块来测试您设计的随机输入的函数。(点击查看完整说明)
      U3L1 - Simulation - Template_instruction: |-
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |-
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id Problem_instruction: |-
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debug Id plus logic problem_instruction: |-
        The last problem was an example
        of syntax error.  App Lab did not understand which object it should be listening
        to for a "click" event so it showed an error message in the console to let
        you know.  Another kind of error is a logical error - the program is valid,
        but it's not doing what you want it to do.\r
        \r
        This program has 2 errors.
        A (tricky) syntax error and logical error.  Find them, fix them, and make
        the program work as expected.
      U3L13 - Debugging 1_instruction: |-
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |-
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |-
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |-
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |-
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |-
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |-
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |-
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - Mini Calculator embed_instruction: |-
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - Unfortunate Events Free Play_instruction: |-
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |-
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |-
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L14 - concatenate simple_instruction: |-
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - moving memory challenge1_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |-
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |-
        Try out the demo app
        (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |-
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |-
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |-
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - add code to make count down work_instruction: |-
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - clicker update score_instruction: |-
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |-
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - global var example count up_instruction: |-
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |-
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |-
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - variable scoping problem debugging_instruction: |-
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |-
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |-
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |-
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |-
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |-
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |-
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |-
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |-
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |-
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer. "
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. "
      U3L16 - intro getText_instruction: |-
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |-
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |-
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |-
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |-
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |-
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |-
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |-
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |-
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |-
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |-
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |-
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |-
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) "
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib Student Setup_instruction: |-
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) "
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) "
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) "
      U3L17 - getAndSetKeyValue_instruction: |-
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |-
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |-
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |-
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |-
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |-
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |-
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |-
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |-
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |-
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - DEMO up down count practice app_instruction: |-
        Try out the demo app
        (Click to see full instructions)
      U3L19 - Debugging with consoleLog_instruction: |-
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |-
        Investigate the new elements of the
        'chaser-game'
      U3L19 - do concatenate string with var_instruction: |
        We've given you a piece
        of code from the previous screen.  Try changing the value assigned to foo
        to see the string change. \r
        Do this: \r
        1. Try changing the value assigned
        to foo to see the string change. \r
        2. By only modifying the lines of code
        that were given to you, try to get the output to say: “The value of foo is:
        9.  And isn’t that fine.” \r
      U3L19 - fix the var name syntax error v2_instruction: |-
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |-
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |-
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |-
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - test reassignment of two vars_instruction: |-
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |-
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |-
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |-
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |-
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |-
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |-
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |-
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |-
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |-
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |-
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |-
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |-
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |-
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |-
        Add newline characters "\n" to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |-
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |-
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |-
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |-
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |-
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |-
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |-
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |-
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |-
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |-
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |-
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |-
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |-
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |-
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Nested Conditionals 1_instruction: |-
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. "
      U3L24 Nested Conditionals Bugs 2_instruction: |-
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |-
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |-
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L24 introIncludes_instruction: |-
        Practice using the includes command. (Click
        to see full instructions)
      U3L25 - drag out key event_instruction: |-
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |-
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |-
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |-
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |-
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |-
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |-
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |-
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |-
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |-
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |-
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |-
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |-
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" "
      U3L26 OR operator_instruction: |-
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |-
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |-
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - Add Row By Hand_instruction: |-
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - Export Data_instruction: |-
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |-
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |-
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |-
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |-
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |-
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |-
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |-
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |-
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |-
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |-
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - CreateRecord - 1_instruction: |-
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |-
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |-
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |-
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |-
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |-
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - Edit Data Table by Hand_instruction: |-
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |-
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |-
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |-
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |-
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |-
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |-
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |-
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |-
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |-
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |-
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |-
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |-
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |-
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |-
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |-
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |-
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |-
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |-
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |-
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |-
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |-
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |-
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: |
        Add a console.log command inside the callback
        function. (Click to see full instructions)\r
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |-
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |-
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |-
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |-
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |-
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4 - add createRecord to contacts App_instruction: |-
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - debug column names are case sensitive_instruction: |-
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |-
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |-
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |-
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |-
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - fix contacts by hand in data table_instruction: |-
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |-
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 Model App_instruction: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      U4 Model Design 1_instruction: |-
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U4 vigenere cipher 2_instruction: 说明
      U4L02 - Objects - Template1_instruction: 模板
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions) "
      U4L02 - Objects - eventParameter_instruction: |-
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |-
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |-
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. "
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. "
      U4L06 Data Storage 7_instruction: |-
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |-
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U5 if-else-if movie example_instruction: |-
        Add an else-if statement in order
        to tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U6 - Final Project - Project Level_instruction: |-
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |-
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |-
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |-
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |-
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |-
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |-
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: 岩浆会藏在这样一些方块下面，在向前移动之前，必须先覆盖上。"如果" 命令在这儿用起来很方便。在正确的位置添加
        "向前移动" 命令，开采这些方块。
      Underground Avoiding Lava_2018_instruction: 熔岩隐藏在这些模块的下面, 你需要在前进之前把它掩盖起来。"如果"指令将在这里派上用场。在正确的位置添加
        "向前移动"指令来挖掘这些模块。
      Underground If Statements_instruction: 现在，事情变得棘手了。开采 3 块红石，但不能掉入岩浆中。使用 "如果"
        命令，就能将圆石放在你发现的任何岩浆上。
      Underground If Statements_2018_instruction: 现在事情变得越来越棘手了。挖掘3块红石, 但不要落入熔岩。使用
        "如果" 指令将圆石放置在任何未掩盖的熔岩上。
      Underground Iron_instruction: 走入熔化的岩浆可不是个好主意。放下圆石造一座桥，然后开采至少两个铁矿方块吧。
      Underground Iron_2018_instruction: 走进熔岩是个坏主意。放置圆石来创建一座桥梁, 然后挖掘至少两个铁模块。
      Underground Mining Coal_instruction: 你可以在地底下找到最宝贵的资源，但下面很暗。请至少放上 2 根火把，并开采至少
        2 块煤炭。
      Underground Mining Coal_2018_instruction: 你可以在地底下找到最宝贵的资源，但下面很暗。请至少放上 2 根火把，并开采至少
        2 块煤炭。
      Unicorn Tag_instruction: |-
        Take a look at this project.  Do you see how it was
        made?
      Valentine_artist2_01_instruction: 编辑程序让艺术家为可爱的小虫画一些草。
      Valentine_artist_01_instruction: '帮助艺术家完成大羊驼的心。 '
      Valentine_playlab_01_instruction: '编辑程序让Kiki（演员1）在左右箭头被按下的时候向左和向右移动。当Kiki被点击时,
        她应该把心投向她的朋友们。 '
      Vigenere_instruction: Test
      WhileAdventure_instruction: |-
        Our adventurer wants to collect coins. Can you
        help her grab as many as she can using only one remove 1 block?
      'Widget: Black and White Pixelation_instruction': |-
        Now make your own image!
        We've started you off with a 10x10 canvas but you can make it whatever size
        you want. Happy pixeling!
      'Widget: Color Pixelation_instruction': |-
        Requirements: The icon must be 16x16
        pixels. You must use the Pixelation Widget to encode the bits of color information.
        The image must be encoded with at least 12 bits per pixel.
      'Widget: Text Compression_instruction': |-
        Look for patterns (repeated words
        or phrases) in the text. Enter the patterns you see into the dictionary on
        the right. As you type entries into the dictionary, the symbol for the entry
        is inserted into the text in place of the pattern.
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
      aE1_instruction: "You chose to make a square napkin! \\r\n\\r\nTo finish, draw\na
        square with 20 pixel sides. "
      aE2_instruction: |-
        If you place your square loop inside another loop, we call
        that a nested loop. What do you need to add as an outer loop to make sure
        all 14 napkins line up next to each other?
      aE3_instruction: |-
        We've got to have a tablecloth!  \r
        \r
        Take your row of
        14 napkins and sew 14 of those together with another **outer loop** to make
        a cover for our table.
      aE3alternate_instruction: Alternate
      aE3alternateB_instruction: 交替
      aE4_instruction: 交替
      aE5_instruction: Example of puzzle using highest difficulty level shape.
      aE6_instruction: "How many times do you need to loop this to draw half  of\na
        circle? "
      aE7_instruction: |-
        If you create another loop like this one, but turn left instead
        of right, what happens? \r
        \r
        Can you repeat all of that to draw this wave?
      aE8_instruction: |-
        Now let's loop that whole thing four times to create this
        picture frame. Watch out for the corners - you can't just turn 90 degrees!
        \r
        \r
        If looping a 3 degree turn 60 times makes a half circle, which of
        these blocks of code will make an additional quarter circle for the corners?
      aEfreeplay_instruction: Free Play!
      allHallows2017_instruction: 通过绘制一个正方形320像素的边, 在蜡笔框中框住 Code.org 员工!
      allthethings data blocks test_instruction: |-
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |-
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings level dataTables_instruction: |-
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings_U3 - Simple Drawing - Rectangle Width and Height_instruction: |-
        Do
        This
      allthethings_moviebot_instruction: |-
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). "
      allthethings_template_backed2_instruction: |-
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      allthethings_ttscsp_instruction: |-
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      artistDebugVideo1_instruction: 使用 "重复" 循环在水中添加波浪。
      artistFunctionsVideo1_instruction: 按照说明来做出你自己的函数
      artistLoopsK1_instruction: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      artistLoopsK2_instruction: |-
        Now, use a `repeat` loop to draw this line five
        times!
      artistLoopsK2gradek_artist_loops3_instruction: |-
        Now, use a `repeat` loop to
        draw this line five times!
      artistLoopsK3_instruction: |-
        Draw a line eight steps long. This will become
        the land for our kingdom!
      artistLoopsK4_instruction: |-
        Now we need a castle with a draw bridge.  Fix the
        code so that the bridge lays straight instead of falling down.
      artistLoopsK5_instruction: |-
        Now we need to fix the top of the castle. Can you
        loop the code three times?
      artistLoopsK6_instruction: "Someone is stuck in the tower!  Fix the stairs\nto
        set them free. "
      artistLoopsK7_instruction: "This tower is lovely, what is downstairs? Build\nanother
        staircase to find out! "
      artistLoopsK8_instruction: |-
        Wow! There's a garden over there!  Help fix these
        stairs so I can get to it.
      artistLoopsK9_instruction: |-
        **Challenge:**  Lovely! Let's take a walk around
        the garden.
      artistLoopsKA_instruction: |-
        These stones are in the wrong place.  Help me move
        them so I don't fall in!
      artistLoopsKB_instruction: "Look!  It's a theater.  Help me set up the chairs\nso
        we can all see the stage. "
      artistLoopsKFP_instruction: |-
        Picture time!  Use what you have learned to draw
        a picture of what you think the Artist saw on stage.
      asteroids_instruction: 柯基犬是个好孩子！作为特殊的款待，拖出这个胡萝卜给它。
      beeDebugVideo1_instruction: 用一个“重复”循环来收集所有花蜜。
      behavior bash mary_instruction: Clone this level and make your own blocks!
      behaviors clone me 2_instruction: Clone this level and make your own blocks!
      behaviors clone me Ram_instruction: Clone this level and make your own blocks!
      behaviors clone me joshl_instruction: Clone this level and make your own blocks!
      behaviors clone me nk_instruction: Clone this level and make your own blocks!
      behaviors clone me tanya_instruction: Clone this level and make your own blocks!
      behaviors clone me_instruction: Clone this level and make your own blocks!
      behaviors pet test 123 copy_instruction: |-
        当黛西获得了一个胡萝卜，她会很兴奋。
        用**"当碰到"**事件和"添加行为"模块来让黛西在得到胡萝卜时做一些有趣的事情。
      behaviors pet test 123_instruction: |-
        当黛西获得了一个胡萝卜，她会很兴奋。
        用**"当碰到"**事件和"添加行为"模块来让黛西在得到胡萝卜时做一些有趣的事情。
      behaviors pet test 2_instruction: |-
        当黛西获得了一个胡萝卜，她会很兴奋。
        用**"当碰到"**事件和"添加行为"模块来让黛西在得到胡萝卜时做一些有趣的事情。
      behaviors pet test 3_instruction: "**是时候做你自己的虚拟宠物了！**\n你能为自己的宠物改变任何代码。这是一些主意：\\r\n*
        你能在点击宠物时，让它开始一个新行为吗？\\r\n*\n你能在将吸尘器拖动到宠物那里时，让它跑掉吗？\\r\n* 你能给宠物增加别的动物朋友吗？ "
      behaviors pet test_instruction: |-
        上次你练习了如何用"行为"来让精灵永远做一些事情。这次，我们会用行为来制作一个虚拟宠物。 \r
        \r
        这条狗的名字叫黛西。黛西非常喜欢胡萝卜电信。将"拖动并放下"行为加到胡萝卜上，这样你能将胡萝卜移动到黛西那里。
      behaviors_caley_instruction: Clone this level and make your own blocks!
      ben's first level_instruction: Clone this level and make your own blocks!
      birdsDebugVideo1_instruction: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      bounce_1_instruction: 在“当按左方向键时”模块下面添加模块，然后按“运行”。使用左方向键来移动挡板来到达终点目标。
      bounce_10_instruction: 现在有一个目标在顶部。将"得分"和"对手得分"模块附加到到“当进球得分”和"当球未命中球拍"块来制作游戏。看看在对手获得两分前，你可以获得多少分。
      bounce_10_2018_instruction: 现在有一个目标在顶部。将"得分"和"对手得分"模块附加到到“当进球得分”和"当球未命中球拍"块来制作游戏。看看在对手获得两分前，你可以获得多少分。
      bounce_10_basketball_instruction: 现在，目标在顶部！将"得分"和"对手得分"模块附加到到“当进球得分”和"当球未命中手"块来制作游戏。看看在对手获得两分前，你可以获得多少分。
      bounce_10_sports_instruction: 现在，目标在顶部！将"得分"和"对手得分"模块附加到到“当进球得分”和"当球未命中手"模块来制作游戏。看看在对手获得两分前，你可以获得多少分。
      bounce_11_instruction: 现在，你可以在"运行时"模块下附加模块了. 你必须在多个地方附加新的"启动新球"模块. 此外，试着改变场景或球拍和球的速度，看看在你对手得两分之前你能得多少分.
      bounce_11_2018_instruction: 现在，你可以在"运行时"模块下附加模块了. 你必须在多个地方附加新的"启动新球"模块. 此外，试着改变场景或球拍和球的速度，看看在你对手得两分之前你能得多少分.
      bounce_11_basketball_instruction: 现在，你可以在"运行时"模块下附加模块了. 你必须在多个地方附加新的"扔新球"模块.
        此外，试着改变场景或手和球的速度，看看在你对手得两分之前你能得多少分.
      bounce_11_sports_instruction: 现在，你可以在"运行时"模块下附加模块了. 你必须在多个地方附加新的"扔新球"模块. 此外，试着改变场景或手和球的速度，看看在你对手得两分之前你能得多少分.
      bounce_12_instruction: 创建您自己的弹跳游戏。您可以更改所有的视觉效果和规则。单击完成，让朋友在手机上试试你的游戏。
      bounce_12_2018_instruction: 创建您自己的弹跳游戏。您可以更改所有的视觉效果和规则。单击完成，让朋友在手机上试试你的游戏。
      bounce_12_basketball_instruction: 创建您自己的篮球游戏。您可以更改所有规则。单击完成，让朋友在手机上试试你的游戏。
      bounce_12_sports_instruction: 创建你自己的游戏！这里一切由你做主：你可以改变所有的规则，混合搭配运动，创造！当你完成后，点击“完成”来让你的朋友在他们的手机上尝试你的游戏。
      bounce_1_2018_instruction: 在“当按左方向键时”模块下面添加模块，然后按“运行”。使用左方向键来移动挡板来到达终点目标。
      bounce_1_basketball_instruction: 在“当按左方向键时”模块下面添加模块，然后按“运行”。使用左方向键移动手来到达终点目标。
      bounce_1_sports_instruction: 到旗帜那儿！将一个模块附加到“当按左方向键时”模块，并点按“运行”以将玩家移动到旗帜那里。
      bounce_2_instruction: 在"当按左方向键时"块和“当按右方向键时”块下面添加块，然后按"运行程序"。移动球拍到达两边的目标。
      bounce_2_2018_instruction: 在"当按左方向键时"块和“当按右方向键时”块下面添加块，然后按"运行程序"。移动球拍到达两边的目标。
      bounce_2_basketball_instruction: 在"当按左方向键时"块和“当按右方向键时”块下面添加块，然后按"运行"。移动手到达两边的目标。
      bounce_2_sports_instruction: 现在有两个旗帜了！将一个模块附加到“当按左方向键时”模块和“当按右方向键时”模块来让你的玩家向两个方向移动。
      bounce_3_instruction: 现在，尝试类似的做法用"当按上方向键时"块，来移动球拍到顶部目标。
      bounce_3_2018_instruction: 现在，尝试类似的做法用"当按上方向键时"块，来移动球拍到顶部目标。
      bounce_4_instruction: 这次你需要添加四个块。移动到所有四个球拍完成目标，以完成这个关卡。
      bounce_4_2018_instruction: 这次你需要添加四个块。移动到所有四个球拍完成目标，以完成这个关卡。
      bounce_5_instruction: 我们要将球发向球拍。将一个模块附加到"当球击中桨"模块以确保球能到达目标。
      bounce_5_2018_instruction: 我们要将球发向球拍。将一个模块附加到"当球击中桨"模块以确保球能到达目标。
      bounce_5_basketball_instruction: 我们要将球发向手。将一个模块附加到"当球击中手"模块以确保球能到达旗帜。
      bounce_5_sports_instruction: 冰球将至上而下地飞到玩家！将一个模块附加到“当球击中玩家”模块后来击中旗帜。
      bounce_6_instruction: 现在完成的目标是在顶上。您需要将模块附加到这两个"当球击中"模块中以通过这关。
      bounce_6_2018_instruction: 现在完成的目标是在顶上。您需要将模块附加到这两个"当球击中"模块中以通过这关。
      bounce_6_basketball_instruction: 现在旗帜是在顶上。您需要将模块附加到这两个"当球击中"模块中以通过这关。
      bounce_6_sports_instruction: 现在旗帜是在顶上。您需要将模块附加到这两个"当球击中"模块中以通过这关。
      bounce_7_instruction: 将模块附加到每个"当"模块。弹起球，直到它击中目标。
      bounce_7_2018_instruction: 将模块附加到每个"当"模块。弹起球，直到它击中目标。
      bounce_7_basketball_instruction: 将模块附加到每个"当"模块。弹起球，直到它击中旗帜。
      bounce_7_sports_instruction: 将模块附加到每个"当"模块。弹起球，直到它击中旗帜。
      brendan behaviors clone_instruction: Clone this level and make your own blocks!
      brendan hackathon level_instruction: |-
        these are the instructions for my level.  you
        should do this level and have a good time.
      clone me mary_instruction: Clone this level and make your own blocks!
      collector example_instruction: 将这些模块正确的排列起来，收集所有的黄金来过关。
      collectorDebugVideo2_instruction: 将这些模块正确的排列起来，收集所有的黄金来过关。
      collectorSkinVideo1_instruction: 收集所有四个土堆以通过这个关卡。
      collectorSkinVideo2_instruction: 收集一堆黄金以通过这个关卡。
      comment_intro_maze_2018_instruction: 用新的`注释`模块来给自己一个快速提醒。
      conditionals_forvideo_harvester_instruction: 收集所有的玉米和莴苣，然后捡起南瓜。
      conditionals_forvideo_playlab_instruction: Score as many points as you can!
      course1_artist_loops_challenge1_instruction: |-
        您可以使用循环来在一行中画多条线. \r
        \r
        你能画一所房子吗？让它看起来就像你喜欢的样子! 尝试寻找重复的模式!
      course1_artist_loops_challenge2_instruction: 让我们玩游戏吧! 尽可能多地画 X。你可以做到一排放3 个吗？
      course1_artist_loops_challenge3_instruction: '"你能帮我做两个鸟舍吗？"'
      course1_artist_loops_challenge4_instruction: '"是时候掷骰子了! 你能帮我画这些吗？"'
      course1_collector_loops_challenge1_instruction: '"你能帮我找出一些错误吗？我知道我想的路, 但我不确定要走多少步。"'
      course1_collector_loops_challenge2_instruction: '这一次您只能每个箭头使用一次。去拿所有的宝藏吧! '
      course1_collector_loops_challenge3_instruction: '这一次您只能每个箭头使用一次。去拿所有的宝藏吧! '
      course1_collector_loops_challenge4_instruction: 让我们去拿宝藏吧! 帮助我越过每一行, 然后回来开始下一行。你能找到规律吗？
      course1_maze_debugging_challenge1_instruction: 调试本关卡。去掉多余的模块并添加缺少的块。把鸟给猪!
      course1_maze_debugging_challenge2_instruction: 调试本关卡。这些模块是正确的, 但他们的顺序错了!
      course1_maze_seq_challenge1_instruction: '"沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！"'
      course1_maze_seq_challenge2_instruction: 在每个方向上最多只能移动四次。在你用完所有模块之前, 你能找到一条路吗？
      course1_playlab_events_challenge1_instruction: '"我的朋友躲在哪里？你能写代码, 以显示我的其他朋友吗？"'
      course1_playlab_events_challenge2_instruction: '"让我们开狂欢晚会吧! 在你点击或碰他们的时候，让他们做点事情。"'
      course2_artist_nestedLoops_challenge1_instruction: 你能想出怎么制作出这样的照片吗？
      course2_artist_nestedLoops_challenge2_instruction: 你能想出怎么制作出这样的照片吗？
      course2_artist_prog_challenge1_instruction: |-
        为每一个动物绘制房间。
        有许多不同的方法来解决这个关卡。所以让我们有一些乐趣。最短的解决方案是6块, 但是你可以按你的想法尽可能多地使用!
      course2_artist_prog_challenge2_instruction: "* 帮我在这条路上涂上黄线!*"
      course2_bee_conditionals_challenge1_instruction: 收集所有的花蜜或制作蜂蜜。
      course2_bee_conditionals_challenge2_instruction: 收集所有的花蜜或制作蜂蜜。
      course2_collector_loops_challenge2_instruction: 得到所有的宝藏!
      course2_collector_prog_challenge1_instruction: 仔细看! 你能收集所有 *10* 块宝藏吗？
      course2_collector_prog_challenge2_instruction: 有20件宝藏要找。收集至少一半完成这一挑战!
      course2_harvester_loops_challenge1_instruction: 收集所有的玉米。
      course2_harvester_loops_challenge2_instruction: 收集所有的莴苣。避开树木和田野!
      course2_maze_loops_challenge1_instruction: '现在, 斯奎特想尝试使用循环来找到他的橡子! '
      course2_maze_programming_challenge1_instruction: '*"猪藏起来了! 你能帮我找到一条路吗？"*'
      course2_maze_programming_challenge2_instruction: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      course2_maze_seq_challenge1_instruction: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      course2_maze_seq_challenge2_instruction: 在每个方向上最多只能移动四次。在你用完所有模块之前, 你能找到一条路吗？
      course2_playlab_stage17_1_instruction: 你能尝试让乔治（演员1）说“嗨！”吗？
      course2_playlab_stage17_10_instruction: |-
        添加模块到“当运行时”事件中来改变背景和企鹅的速度\r
        \r
        玩一玩，让企鹅按箭头移动，直到得分。
      course2_playlab_stage17_11_instruction: 创建你自己的故事。当你完成后，单击完成，让朋友在他们手机上试试你的故事.
      course2_playlab_stage17_2_instruction: 你可以让乔治（演员1）说些什么，接着让奥丽芙（演员2）说些什么吗？
      course2_playlab_stage17_3_instruction: 你可以写一个程序来将乔治（演员1）移动到奥丽芙猫那里吗？
      course2_playlab_stage17_4_instruction: 你能否写一个程序，将乔治（演员以）移动到奥丽芙猫的位置，并在乔治到达时，让奥丽芙对他说“你好”？
      course2_playlab_stage17_5_instruction: 你能否写一个程序，让章鱼被点击时说“你好”吗？
      course2_playlab_stage17_6_instruction: 现在，写一个程序，用上/下/左/右按键使企鹅到达所有目标！
      course2_playlab_stage17_7_instruction: 利用"一直重复"块，你就可以重复不断地执行代码。您可以再连接一些块来使恐龙迪诺（演员2）反复向上向下移动吗？
      course2_playlab_stage17_8_instruction: |-
        你能否让企鹅撞到恐龙时，让它说"哎哟!" 同时播放一个“命中”的声音？\r
        \r
        完成后玩一下，用箭头移动企鹅来试试。
      course2_playlab_stage17_9_instruction: 添加一个模块，在企鹅碰到奥克塔维亚（演员3）时得1分？\r然​​后试玩一下，用箭头移动企鹅直到得分！
      course3_artist_concept_challenge1_instruction: 随意的反复试试。不指望你第一次就能得到完美的图像。  想看更多的提示吗？
        点击这里!
      course3_artist_functions_challenge1_instruction: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它!
        尝试此代码, 看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      course3_artist_functions_challenge2_instruction: 试试此代码, 看看它是如何工作的, 然后试着自己编程!
      course3_bee_debugging_challenge1_instruction: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂酿造所有的蜂蜜吗？
      course3_bee_functions_challenge1_instruction: 你得自己独立接受这个挑战。这可能比看起来更难!
      course3_bee_functions_challenge2_instruction: 你得自己独立面对这个挑战。
      course3_bee_functions_challenge3_instruction: 创建一个新的函数, 当前方有路的时候，收集所有的花蜜和蜂蜜。用它来完成关卡!
      course3_bee_functions_challenge4_instruction: 用你所学的来解决这个关卡。
      course3_collector_debugging_challenge2_instruction: 您是嵌套循环的专家吗？使用你所学到的收集所有的宝藏!
      course3_farmer_condLoops_challenge1_instruction: 在南瓜处向右转。收集所有的一切来过这关。每个隐藏的作物只有一个玉米或莴苣。
      course3_farmer_condLoops_challenge2_instruction: 收集一切作物来通过这关。
      course3_farmer_until_challenge2_instruction: 使用 如果 或 否则 模块来跟着曲线路径前进。在每个转角, 在循环中使用
        "移走一个" 的命令来清除土堆。
      course3_maze_debugging_challenge1_instruction: '*"我只是绕圈子走吗？"*'
      course3_maze_debugging_challenge2_instruction: '*"如果我转得太频繁, 我可能会头晕! 帮助我只通过四个`转向`命令来拿到橡子。"*'
      course3_maze_until_challenge1_instruction: 没有提示，只有挑战。把僵尸带到向日葵那里。
      course3_playLab_challenge1_instruction: 当你得到足够的分数或者当你的积分不足时, 应该要有些后果。添加一些代码到
        ' 赢得游戏' 和 ' 输去游戏 ' 函数, 让游戏按应有的方式进行下去。\r 点击想法提示!
      course3_playlab_challenge2_instruction: 你能想出这个 "算命先生" 应用程序是如何工作的吗？单击 "更多" 以查看您的挑战。
      course3_playlab_stage16_1_instruction: 你可以让这个狗说"你好世界"吗？
      course3_playlab_stage16_2_instruction: 你可以让狗说些什么，接着让猫说些什么吗？
      course3_playlab_stage16_3_instruction: 你可以写一个程序来将这只狗移动到猫那里吗？
      course3_playlab_stage16_4_instruction: 你可以写一个程序来将这只狗移动到那只猫处, 当狗到达时, 让猫对他说“你好”?
      course3_playlab_stage16_5_instruction: 你能添加一个模块，让章鱼变得快乐吗？
      course3_playlab_stage16_6_instruction: 创建你自己的故事。当你完成后，单击完成，让朋友在他们手机上试试你的故事.
      course3_playlab_stage17_1_instruction: 你能否写一个程序，让章鱼被点击时说“你好”吗？
      course3_playlab_stage17_2_instruction: 你能否写一个程序，用上/下/左/右按键使企鹅到达所有目标？
      course3_playlab_stage17_3_instruction: '"一直重复"模块允许你永远重复执行一段代码。你能再连接一些块来使这只恐龙反复向上向下移动吗？'
      course3_playlab_stage17_4_instruction: 你能否编程让企鹅撞到恐龙时，让它说"哎哟!" 同时播放一个“命中”的声音？然后试玩一下，用箭头移动企鹅来使这种情况发生。
      course3_playlab_stage17_5_instruction: 你能添加一个模块，在企鹅碰到章鱼时得1分吗？然​​后试玩一下，用箭头移动企鹅直到得分。
      course3_playlab_stage17_6_instruction: 你能否通过添加模块来改变背景和企鹅的速度，然后将它按箭头移动而最终得分？
      course3_playlab_stage17_7_instruction: 创建你自己的故事。当你完成后，单击完成，让朋友在他们手机上试试你的故事.
      course4_artist_binary_challenge1_instruction: 在这个谜题中，您只能使用每个二进制值 (0 或 1) 一次。请尝试使用嵌套循环来完成此绘图。
      course4_artist_binary_challenge2_instruction: 你是否有足够的毅力让这个标志回到正常状态？
      course4_artist_concept_challenge2_instruction: 使用下面的代码创建五个风车的设计。
      course4_artist_functions_challenge2_instruction: 试试此代码, 看看它是如何工作的, 然后试着自己编程!
      course4_artist_fwp_challenge1_instruction: 请尝试运行此程序, 并做些改动看看什么变化。你能弄清楚它是如何工作的吗？(或删除它,
        用完全不同的东西来取代它)
      course4_artist_variables_challenge1_instruction: 现在你已经学到了做这个模样需要的所有东西! 这个关卡本来就很困难。
        你能坚持下去直到你找到解决办法吗？
      course4_artist_variables_challenge2_instruction: 现在你已经学到了做这个模样需要的所有东西! 这个关卡本来就很困难。
        你能坚持下去直到你找到解决办法吗？
      course4_bee_for_challenge1_instruction: 用这个循环来收集所有的花蜜。有几个动作, 你需要重复 ' 计数器 ' 次。
      course4_bee_fwp_challenge1_instruction: 在函数中使用一个`计数循环`来收集所有的玉米。通过使用`length`（长度）参数，同样的`计数循环`可以数到不同的最大值。
      course4_bee_fwp_challenge2_instruction: 在函数中使用一个`计数循环`来收集所有的蔬菜。通过使用`length`（长度）参数，使这个`计数循环`数到不同的最大值。通过在函数外部再加一个`计数循环`，来让你的程序写得更短。
      course4_collector_nested_loops_challenge2_instruction: 帮助收藏家只使用你工具箱里的块来拿到至少两堆宝藏。这里可能收集到所有4堆。
      course4_harvester_nested_loops_challenge1_instruction: '"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"'
      course4_playlab_variables_challenge1_instruction: 使用这些模块使演员分享一个敲门问答的笑话。改变设置和警句来讲你自己的笑话!
      course4_playlab_variables_challenge3_instruction: 你能想出这个 "算命先生" 应用程序是如何工作的吗？单击
        "更多" 以查看您的挑战。
      courseA_artist_loops1_instruction: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      courseA_artist_loops10_instruction: 帮我放下石头, 免得我掉下去!
      courseA_artist_loops10_2018_instruction: 帮我放下石头, 免得我掉下去!
      courseA_artist_loops11_instruction: 帮助我建楼梯, 让我可以看着船驶离。
      courseA_artist_loops11_2018_instruction: 帮助我建楼梯, 让我可以看着船驶离。
      courseA_artist_loops12_instruction: 艺术家在远处看到了一些有趣的东西。 画出你认为他看到的东西
      courseA_artist_loops12_2018_instruction: 艺术家在远处看到了一些有趣的东西。 画出你认为他看到的东西。
      courseA_artist_loops1_2018_instruction: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      courseA_artist_loops2_instruction: 帮助艺术家两次向前来画这条线。
      courseA_artist_loops2_2018_instruction: 帮助艺术家两次向前来画这条线。
      courseA_artist_loops3_instruction: 往前画一条线五次。
      courseA_artist_loops3_2018_instruction: 往前画一条线五次。
      courseA_artist_loops4_instruction: 现在, 使用 `重复`循环来绘制这条线五次!
      courseA_artist_loops4_2018_instruction: 现在, 使用 `重复`循环来绘制这条线五次!
      courseA_artist_loops5_instruction: 画一条七步长的线。这将成为我们的地平线。
      courseA_artist_loops5_2018_instruction: 画一条七步长的线。这将成为我们的地平线。
      courseA_artist_loops6_instruction: 让我们在后面放一座漂亮的小山。
      courseA_artist_loops6_2018_instruction: Let's put a nice hill in the back.
      courseA_artist_loops7_instruction: 使用`重复`循环添加波浪到水中。
      courseA_artist_loops7_2018_instruction: 使用 "重复" 循环在水中添加波浪。
      courseA_artist_loops7_forVideo_instruction: 使用 "重复" 循环在水中添加波浪。
      courseA_artist_loops8_instruction: 我们需要一个梯子到船上去。
      courseA_artist_loops8_2018_instruction: We need a ladder up to the boat.
      courseA_artist_loops9_instruction: '挑战: 修楼梯。'
      courseA_artist_loops9_2018_instruction: '挑战: 修楼梯。'
      courseA_artist_loops_challenge1_instruction: 你能画房子吗？让它看起来和你喜欢的一样!
      courseA_artist_loops_challenge1_2018_instruction: 你能画房子吗？让它看起来和你喜欢的一样!
      courseA_artist_loops_challenge2_instruction: '"你能帮我做两个鸟舍吗？"'
      courseA_artist_loops_challenge2a_instruction: '*"帮我把这三个帐篷搭建起来!"*'
      courseA_artist_loops_challenge2a_2018_instruction: '*"帮我把这三个帐篷搭建起来!"*'
      courseA_artist_loops_challenge3_instruction: 让我们玩游戏吧! 尽可能多地画 X。你可以做到一排放3 个吗？
      courseA_bee_seq1_instruction: 摆弄这些模块来帮助蜜蜂获得*一个*花蜜。
      courseA_bee_seq10_instruction: 自己试试吧！采集所有花蜜。
      courseA_bee_seq11_instruction: 获得所有花蜜。
      courseA_bee_seq12_instruction: 摆弄这些模块来帮助蜜蜂获得*一个*花蜜。
      courseA_bee_seq13_instruction: 用三个`向西移动`模块和一个`采花蜜`模块。
      courseA_bee_seq14_instruction: 用三个`向西移动`模块和一个`采花蜜`模块。
      courseA_bee_seq2_instruction: 帮助蜜蜂采花蜜！
      courseA_bee_seq3_instruction: 找到缺陷，并修复它！
      courseA_bee_seq4_instruction: 自己试一试！
      courseA_bee_seq5_instruction: 自己试一试！
      courseA_bee_seq6_instruction: 现在，蜜蜂需要从两朵花里采花蜜！
      courseA_bee_seq7_instruction: 添加两个模块来完成这个关卡！
      courseA_bee_seq8_instruction: 确保从每朵花里采花蜜！
      courseA_bee_seq9_instruction: 确保从每朵花里采花蜜！
      courseA_collector_loops1_instruction: 四处移动罗瑞尔, 得到尽可能多的宝藏!
      courseA_collector_loops10_instruction: 帮助罗瑞尔沿着这条道路得到所有的宝藏。
      courseA_collector_loops10_2018_instruction: 帮助罗瑞尔沿着这条道路得到所有的宝藏。
      courseA_collector_loops11_instruction: 帮助罗瑞尔从这个洞穴得到所有的宝藏。
      courseA_collector_loops11_2018_instruction: 帮助罗瑞尔从这个洞穴得到所有的宝藏。
      courseA_collector_loops12_instruction: '*"发现宝藏了! 得到尽可能多的财富!"*'
      courseA_collector_loops12_2018_instruction: '*"发现宝藏了! 得到尽可能多的财富!"*'
      courseA_collector_loops1_2018_instruction: 四处移动罗瑞尔, 得到尽可能多的宝藏!
      courseA_collector_loops2_instruction: 收集所有三个土堆来通关。
      courseA_collector_loops2_2018_instruction: 收集所有三个土堆来通关。
      courseA_collector_loops4_instruction: 修复罗瑞尔的路径得到所有这些宝藏。
      courseA_collector_loops4_2018_instruction: 修复罗瑞尔的路径得到所有这些宝藏。
      courseA_collector_loops5_instruction: 用你学到的东西来获取所有的宝藏。
      courseA_collector_loops5_2018_instruction: 用你学到的东西来获取所有的宝藏。
      courseA_collector_loops6_instruction: 在此代码中添加块以获取所有的宝藏。
      courseA_collector_loops6_2018_instruction: 在此代码中添加块以获取所有的宝藏。
      courseA_collector_loops7_instruction: 你应该添加什么到这个代码来获得所有的宝藏？
      courseA_collector_loops7_2018_instruction: 你应该添加什么到这个代码来获得所有的宝藏？
      courseA_collector_loops8_instruction: 编写代码来获取所有这些宝藏。
      courseA_collector_loops8_2018_instruction: 编写代码来获取所有这些宝藏。
      courseA_collector_loops9_instruction: "** 挑战: ** 宝藏在楼梯最上面! 编写代码来帮助罗瑞尔得到所有宝藏。"
      courseA_collector_loops9_2018_instruction: "** 挑战: ** 宝藏在楼梯最上面! 编写代码来帮助罗瑞尔得到所有宝藏。"
      courseA_collector_loops_challenge1_instruction: '*"你能帮我找出一些错误吗？"*'
      courseA_collector_loops_challenge1_2018_instruction: '*"你能帮我找出一些错误吗？"*'
      courseA_collector_loops_challenge2_instruction: '得到所有的宝藏! '
      courseA_collector_loops_challenge2kp_instruction: 收集至少 **3** 件的宝藏通过这个关。
      courseA_collector_loops_challenge2kp_2018_instruction: 收集至少 **3** 件的宝藏通过这个关。
      courseA_collector_preLoops1_instruction: |-
        这是冒险家罗瑞尔!\r
        \r
        按 "运行", 看到她走到宝藏, 并拿到它。
      courseA_collector_preLoops2_instruction: "太好了! 现在你可以自己添加代码了! \\r \n\\r \n把\"获取宝藏\"
        块拉倒程序的底部, 然后单击 \"运行\"。"
      courseA_collector_preLoops3_instruction: 将两个 "向东" 块和一个 "获取宝藏" 块放到程序的底部, 然后单击
        "运行"。
      courseA_collector_preLoops4_instruction: 你能想出解决这个关卡的办法吗？
      courseA_collector_preLoops5_instruction: 得到这两块宝石的中的1块来过关。
      courseA_collector_preLoops6_instruction: 得到这两件宝物来过关。
      courseA_collector_preLoops7_instruction: 收集所有三个土堆来通关。
      courseA_forVideoTest_artist_instruction: 使用 "重复" 循环在水中添加波浪。
      courseA_harvester_forVideo_instruction: 你能只用**一个**移动模块捡起所有玉米吗？
      courseA_harvester_loops1_instruction: 帮助收割者采摘所有的玉米！
      courseA_harvester_loops10_instruction: 帮助收割者捡起所有5束玉米！
      courseA_harvester_loops11_instruction: '试试自己做一个！ '
      courseA_harvester_loops2_instruction: 确保采摘了所有的玉米！
      courseA_harvester_loops3_instruction: 你能只用**一个**移动模块捡起所有玉米吗？
      courseA_harvester_loops4_instruction: 你能帮助收割者找到她代码里的缺陷吗?
      courseA_harvester_loops5_instruction: 自己试试！你能采摘最后的玉米吗？
      courseA_harvester_loops5a_instruction: 看看所有的玉米！你能自己采摘它们吗？
      courseA_harvester_loops5b_instruction: 你能改变代码来让收割者采摘所有玉米吗？
      courseA_harvester_loops6_instruction: 你要用**一个**`向南移动`模块和**一个**`向西移动`模块。
      courseA_harvester_loops7_instruction: '自己试试吧！ '
      courseA_harvester_loops8_instruction: 这是同一关，但现在你需要重复**三次**！
      courseA_harvester_loops9_instruction: 你能想出如何收集所有玉米吗？
      courseA_harvester_seq1_instruction: 摆弄这些模块来帮助收割者收获这个玉米。
      courseA_harvester_seq10_instruction: 确保采摘了所有的玉米！
      courseA_harvester_seq11_instruction: 自己试试吧！采摘所有玉米。
      courseA_harvester_seq12_instruction: 捡起所有玉米。
      courseA_harvester_seq13_instruction: 摆弄这些模块来帮助收割者收获**一个**玉米。
      courseA_harvester_seq2_instruction: 用三个`向西移动`模块和一个`采摘玉米`模块来通过这关。
      courseA_harvester_seq3_instruction: 用三个`向西移动`模块和一个`采摘玉米`模块。
      courseA_harvester_seq4_instruction: 添加一个模块来帮助收割者采摘玉米。
      courseA_harvester_seq5_instruction: 找到缺陷，并修复它！
      courseA_harvester_seq6_instruction: 自己试一试！
      courseA_harvester_seq7_instruction: 自己试一试！
      courseA_harvester_seq8_instruction: 现在农夫需要采摘玉米两次！
      courseA_harvester_seq9_instruction: 添加两个模块来完成这个关卡！
      courseA_maze_ramp2_2018_instruction: 将所有模块接到一起来完成你的代码，然后点击"运行"。
      courseA_maze_ramp2a_2018_instruction: 将所有模块接到一起来完成你的代码，然后点击"运行"。
      courseA_maze_ramp3_2018_instruction: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseA_maze_ramp3a_2018_instruction: 在其它模块下面添加一个`向北`模块来完成代码，然后点击"运行"。
      courseA_maze_ramp4_2018_instruction: 躲开TNT炸药，否则羽毛会被炸飞！
      courseA_maze_ramp4a_2018_instruction: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseA_maze_ramp5_2018_instruction: 躲开TNT炸药！
      courseA_maze_ramp5a_2018_instruction: 帮小鸟到达那只猪！
      courseA_maze_seq1_instruction: 帮小鸟到达那只坏猪！
      courseA_maze_seq10_instruction: '挑战: 绕开TNT炸药, 把鸟撞到猪身上。 '
      courseA_maze_seq10_2018_instruction: '挑战: 绕开TNT炸药, 让鸟到达猪那里！ '
      courseA_maze_seq11_instruction: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseA_maze_seq11_2018_instruction: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseA_maze_seq12_instruction: '去找那头猪! '
      courseA_maze_seq12_2018_instruction: '去找那头猪! '
      courseA_maze_seq13_instruction: 用各种方法把那头猪抓来!
      courseA_maze_seq13_2018_instruction: 用各种方法把那头猪抓来!
      courseA_maze_seq1_2018_instruction: 帮小鸟到达那只坏猪！
      courseA_maze_seq2_instruction: 修改代码来让我到达那只猪！
      courseA_maze_seq2_2018_instruction: 修改代码来让我到达那只猪！
      courseA_maze_seq3_instruction: 修复代码, 让鸟到猪那!
      courseA_maze_seq3_2018_instruction: 修复代码, 让鸟到猪那!
      courseA_maze_seq4_instruction: 移除一个模块, 让鸟到猪那!
      courseA_maze_seq4_2018_instruction: 移除一个模块, 让鸟到猪那!
      courseA_maze_seq4a_instruction: 用尽可能少的块模块把鸟带到猪那里。
      courseA_maze_seq5_instruction: 从头开始尝试这一个。
      courseA_maze_seq5_2018_instruction: 尝试一下。
      courseA_maze_seq5a_2018_instruction: 你能在代码最后加上什么来让小鸟到达猪那里？
      courseA_maze_seq6_instruction: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseA_maze_seq6_2018_instruction: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseA_maze_seq7_instruction: 想想这里缺了什么，然后添加模块让鸟到达那只猪那！
      courseA_maze_seq7_2018_instruction: 想想这里缺了什么，然后添加模块让鸟到达那只猪那！
      courseA_maze_seq8_instruction: 通过这关, 把鸟送到猪那!
      courseA_maze_seq8_2018_instruction: 通过这关, 把鸟送到猪那!
      courseA_maze_seq9_instruction: 通过添加块来排除这关错误, 让鸟到达猪那里!
      courseA_maze_seq9_2018_instruction: 通过添加块来调试这关，让鸟到达猪那里!
      courseA_maze_seq_challenge1_instruction: 这里出了点问题。帮助修复代码, 让鸟到达猪那里!
      courseA_maze_seq_challenge1_2018_instruction: 这里出了点问题。帮助修复代码, 让鸟到达猪那里!
      courseA_maze_seq_challenge2_instruction: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseA_maze_seq_challenge2_2018_instruction: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseA_playLab_events1_instruction: 这是一个游戏实验室关卡。 把模块移到工作区看会发生什么!
      courseA_playLab_events1_2018_instruction: 这是一个游戏实验室关卡。 把模块移到工作区看会发生什么!
      courseA_playLab_events2_instruction: 乔治狗想说“大家好”。你可以帮它吗？
      courseA_playLab_events2_2018_instruction: |-
        Jorge the Dog wants to say "Hi
        there."  Can you help him?
      courseA_playLab_events3_instruction: 将 "向左移动" 块连接到工作区中的 "当点击向左时"的事件块。
      courseA_playLab_events3_2018_instruction: 将`向左移动`模块连接到工作区中的`当点击向左时`的事件模块下。
      courseA_playLab_events4_instruction: 现在，在`右`按钮被点击时，让乔治向右移动。
      courseA_playLab_events4_2018_instruction: 现在，在`右`按钮被点击时，让乔治向右移动。
      courseA_playLab_events5_instruction: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      courseA_playLab_events5_2018_instruction: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      courseA_playLab_events6_instruction: 当乔治被点击的时候，改变背景和播放随机声音来添加一些乐趣。
      courseA_playLab_events6_2018_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      courseA_playLab_events7_instruction: 添加任何你想要的到此游戏中。你能否让恐龙在乔治碰上它时消失？
      courseA_playLab_events7_2018_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      courseA_playlab_events_challenge1_instruction: 你能写代码, 以显示我的其他朋友吗？提示能够一步一步的帮助你完成这个项目。
      courseA_playlab_events_challenge1_2018_instruction: 你能写代码, 以显示我的其他朋友吗？提示能够一步一步的帮助你完成这个项目。
      courseA_playlab_events_challenge2_instruction: 当你点击它们时，让每个人做点什么。
      courseA_playlab_events_challenge2_2018_instruction: 当你点击它们时，让每个人做点什么。
      courseA_playlab_events_challengeClone_instruction: 我的朋友躲在哪里？你能写代码, 以显示我的其他朋友吗？
      courseA_toMakeLoopsVideo_Collector_instruction: 循环能让里面的代码不断的重复执行!
      courseA_video_events_instruction: 需要更好的游戏实验室/事件组合
      courseA_video_events_2018_instruction: Need a better playlab/events combo
      courseB_Scrat_ramp1_2018_instruction: 在这一关中，将所有模块拼到一起，并点击"运行"！
      courseB_Scrat_ramp2_2018_instruction: 将所有模块接到一起来完成你的代码，然后点击"运行"。
      courseB_Scrat_ramp3a_2018_instruction: 在其它模块下面添加一个`向北`模块来完成代码，然后点击"运行"。
      courseB_Scrat_ramp4a_2018_instruction: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseB_Scrat_ramp5a_2018_instruction: 帮小鸟到达那只猪！
      courseB_artist_loops1_instruction: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      courseB_artist_loops10_instruction: 用你已经学到的画一副你想让艺术家回到家里看到的画。
      courseB_artist_loops10_2018_instruction: 用你已经学到的画一副你想让艺术家回到家里看到的画。
      courseB_artist_loops1_2018_instruction: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      courseB_artist_loops2_instruction: 艺术家试图画一条线 ** 6 ** 次, 但还没画好。 你能帮忙吗？
      courseB_artist_loops2_2018_instruction: 艺术家试图画一条线 ** 6 ** 次, 但还没画好。 你能帮忙吗？
      courseB_artist_loops3_instruction: 帮助艺术家画一条线7次, 来做花园墙。
      courseB_artist_loops3_2018_instruction: 帮助艺术家画一条线7次, 来做花园墙。
      courseB_artist_loops4_instruction: '现在我们要准备好种植用的土壤。在代码中寻找缺陷并帮助艺术家准备好地面。 '
      courseB_artist_loops4_2018_instruction: '现在我们要准备好种植用的土壤。在代码中寻找缺陷并帮助艺术家准备好地面。

'
      courseB_artist_loops5_instruction: 该去修楼梯了! 重复这个图案 ** 5** 次, 这样艺术家就可以到达灌木丛的顶端。
      courseB_artist_loops5_2018_instruction: 该去修楼梯了! 重复这个图案 ** 5** 次, 这样艺术家就可以到达灌木丛的顶端。
      courseB_artist_loops6_instruction: 爬上藤蔓, 看看它延到哪里？
      courseB_artist_loops6_2018_instruction: 爬上藤蔓, 看看它延到哪里？
      courseB_artist_loops7_instruction: "** 挑战: ** 这是一个隐蔽的花园! 让我们四处走动一下。"
      courseB_artist_loops7_2018_instruction: "** 挑战: ** 这是一个隐蔽的花园! 让我们四处走动一下。"
      courseB_artist_loops8_instruction: 该回家了。你可以只用一个模块就能修好这个梯子让艺术家下来吗？
      courseB_artist_loops8_2018_instruction: 该回家了。你可以只用一个模块就能修好这个梯子让艺术家下来吗？
      courseB_artist_loops9_instruction: 让我们走捷径回家，越过池塘。你能帮助艺术家待在石头上吗？
      courseB_artist_loops9_2018_instruction: 让我们走捷径回家，越过池塘。你能帮助艺术家待在石头上吗？
      courseB_artist_loops_challenge1_instruction: '"是时候掷骰子了! 你能帮我画这些吗？"'
      courseB_artist_loops_challenge1_2018_instruction: '"是时候掷骰子了! 你能帮我画这些吗？"'
      courseB_artist_loops_challenge2_instruction: |-
        让我们玩游戏吧! 尽可能多地画 X。
        你可以做到一排放3 个吗？
      courseB_artist_loops_challenge2_2018_instruction: |-
        让我们玩游戏吧! 尽可能多地画 X。
        你可以做到一排放3 个吗？
      courseB_collector_loops1_instruction: 这是冒险家罗瑞尔! 你能把她带到附近去找宝藏吗？
      courseB_collector_loops10_instruction: 帮助罗瑞尔从这个洞穴得到所有的宝藏。
      courseB_collector_loops10_2018_instruction: 帮助罗瑞尔从这个洞穴得到所有的宝藏。
      courseB_collector_loops11_instruction: 发现宝藏了! 得到尽可能多的财富!
      courseB_collector_loops11_2018_instruction: 发现宝藏了! 得到尽可能多的财富!
      courseB_collector_loops1_2018_instruction: 这是冒险家罗瑞尔! 你能把她带到附近去找宝藏吗？
      courseB_collector_loops2_instruction: 收集所有四个土堆来通关。
      courseB_collector_loops2_2018_instruction: 收集所有四个土堆来通关。
      courseB_collector_loops3_instruction: 罗瑞尔怎么能只用一个 "向东" 模块来得到五堆财宝呢？
      courseB_collector_loops3_2018_instruction: 罗瑞尔怎么能只用一个 "向东" 模块来得到五堆财宝呢？
      courseB_collector_loops3_predict1_instruction: 罗瑞尔怎么能只用一个 "E-->"模块收集所有五堆金子呢？
      courseB_collector_loops4_instruction: 修复罗瑞尔的路径，得到所有的宝藏!
      courseB_collector_loops4_2018_instruction: 修复罗瑞尔的路径得到所有这些宝藏！
      courseB_collector_loops5_instruction: '添加代码到最后的关卡，得到所有的宝藏。 '
      courseB_collector_loops5_2018_instruction: '添加代码到最后的关卡，得到所有的宝藏。 '
      courseB_collector_loops6_instruction: 写出代码, 帮助罗瑞尔得到所有的宝藏!
      courseB_collector_loops6_2018_instruction: 写出代码, 帮助罗瑞尔得到所有的宝藏!
      courseB_collector_loops7_instruction: 编写代码来获取所有这些宝藏。
      courseB_collector_loops7_2018_instruction: 编写代码来获取所有这些宝藏。
      courseB_collector_loops8_instruction: "** 挑战: ** 宝藏在楼梯最底下! 编写代码来帮助罗瑞尔得到所有宝藏。"
      courseB_collector_loops8_2018_instruction: "** 挑战: ** 宝藏在楼梯最底下! 编写代码来帮助罗瑞尔得到所有宝藏。"
      courseB_collector_loops9_instruction: '"帮我从这个深谷里得到宝藏"*'
      courseB_collector_loops9_2018_instruction: '"帮我从这个深谷里得到宝藏"*'
      courseB_collector_loops_challenge1_instruction: '这次你的模块有限。得到所有的宝藏! '
      courseB_collector_loops_challenge1_2018_instruction: '这次你的模块有限。得到所有的宝藏! '
      courseB_collector_loops_challenge2_instruction: 让我们去拿宝藏吧! 帮助我越过每一行, 然后回来开始下一行。你能找到规律吗？
      courseB_collector_loops_challenge2a_instruction: 帮助罗瑞尔获得至少**5**份财宝来通过这关。
      courseB_collector_loops_challenge2a_2018_instruction: 帮助罗瑞尔获得至少**5**份财宝来通过这关。
      courseB_collector_loops_challenge`_instruction: '这一次您只能每个箭头使用一次。去拿所有的宝藏吧! '
      courseB_collector_prog1_instruction: 这是冒险家罗瑞尔! 你能把她带到附近去找黄金吗？
      courseB_collector_prog2_instruction: 4堆金子！收集所有4堆。
      courseB_collector_prog3_instruction: 罗瑞尔怎样才能只用`E -->`模块来收集所有5堆金子？
      courseB_iceage_loops1_instruction: 帮助斯奎特穿过冰去拿到橡子！
      courseB_iceage_loops10_instruction: 帮助斯奎特走过去拿到橡子！
      courseB_iceage_loops11_instruction: 帮助斯奎特得到橡子！
      courseB_iceage_loops12_instruction: 用各种方法来拿到橡子！
      courseB_iceage_loops2_instruction: 用两个不同的移动模块来获得橡子！
      courseB_iceage_loops3_instruction: 你能只用一个`W`模块来得到橡子吗？
      courseB_iceage_loops4_instruction: 再增加一个模块来让斯奎特走到橡子那里！
      courseB_iceage_loops5_instruction: 你能再增加一个循环来获得橡子吗？
      courseB_iceage_loops6_instruction: 你能增加一个循环到达橡子吗？
      courseB_iceage_loops7_instruction: '斯奎特真的想要那个橡子！ '
      courseB_iceage_loops8_instruction: '你能修好这段代码吗？ '
      courseB_iceage_loops9_instruction: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseB_maze_seq1_instruction: |-
        玩一玩这些模块, 看看他们能让小鸟做什么吧! \r
        \r
        把鸟送到猪那里来完成这关。
      courseB_maze_seq10_instruction: 修复缺陷，让鸟到猪那。
      courseB_maze_seq10_2018_instruction: 修复缺陷，来帮助斯奎特到达橡子。
      courseB_maze_seq11_instruction: 都靠你了！让小鸟到达猪那里。
      courseB_maze_seq11_2018_instruction: 都靠你了！让斯奎特得到橡子。
      courseB_maze_seq12_instruction: 现在不管用什么办法，抓到那头猪!
      courseB_maze_seq12_2018_instruction: 现在不管用什么办法，抓到那头猪!
      courseB_maze_seq1_2018_instruction: |-
        玩一玩这些模块, 看看他们能让斯奎特做什么吧! \r
        \r
        把斯奎特送到橡子那里来完成这关。
      courseB_maze_seq2_instruction: "\"有错误! 修复代码把我带到猪那里。*"
      courseB_maze_seq2_2018_instruction: 有错误! 修复代码把斯奎特带到橡子那里！
      courseB_maze_seq4_instruction: 添加两个模块, 让鸟到猪那。
      courseB_maze_seq4_2018_instruction: 添加**两个**移动模块, 让斯奎特到达橡子那里。
      courseB_maze_seq5_instruction: 现在从开始试试这一关！
      courseB_maze_seq5_2018_instruction: 这一关有点棘手！
      courseB_maze_seq6_instruction: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseB_maze_seq6_2018_instruction: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseB_maze_seq7_instruction: 想想这里缺了什么，然后添加模块让鸟到达那只猪那！
      courseB_maze_seq7_2018_instruction: 想想这里缺了什么，然后添加模块让鸟到达那只猪那！
      courseB_maze_seq8_instruction: 该你了！ 你要怎么做才能把鸟送到猪那里？
      courseB_maze_seq8_2018_instruction: 该你了！ 你要怎么做才能把斯奎特送到橡子那里？
      courseB_maze_seq9_instruction: '挑战: 绕开TNT炸药, 让鸟到达猪那里。'
      courseB_maze_seq9_2018_instruction: '挑战: 绕开破冰，让斯奎特到达橡子那里。'
      courseB_maze_seq9_challenge1_instruction: 那只猪现在藏在哪里？
      courseB_maze_seqCold_instruction: 挑战：通过添加模块来调试这关, 让鸟到达猪那里!
      courseB_maze_seqOld_instruction: '绕过 TNT炸药, 让鸟到达猪那里! '
      courseB_maze_seq_challenge1_instruction: 在你用完所有模块之前, 你能找到一条路吗？
      courseB_maze_seq_challenge1_2018_instruction: 在你用完所有模块之前, 你能找到一条路吗？
      courseB_maze_seq_challenge2_instruction: 调试本关卡。这些模块是正确的, 但他们的顺序错了!
      courseB_maze_seq_challenge2_2018_instruction: 调试本关卡。这些模块是正确的, 但他们的顺序错了!
      courseB_playLab_events1_instruction: 看看你是否明白每个方块是做什么的。
      courseB_playLab_events1_2018_instruction: 看看你是否明白每个方块是做什么的。
      courseB_playlab_events2_instruction: 当你点击"运行"时，让黛西龙说点什么。
      courseB_playlab_events2_2018_instruction: 当你点击"运行"时，让黛西龙说点什么。
      courseB_playlab_events3_instruction: 使用事件在你点击她的时候，让黛西龙切换到随机的心情。
      courseB_playlab_events3_2018_instruction: 使用事件在你点击她的时候，让黛西龙切换到随机的心情。
      courseB_playlab_events4_instruction: 骑士时间到了！添加一个事件, 当左箭头被点击的时候让骑士移向龙。
      courseB_playlab_events4_2018_instruction: 骑士时间到了！添加一个事件, 当左箭头被点击的时候让骑士移向龙。
      courseB_playlab_events5_instruction: 现在添加一个事件，当你按下右箭头时，让骑士跑离龙。
      courseB_playlab_events5_2018_instruction: 现在添加一个事件，当你按下右箭头时，让骑士跑离龙。
      courseB_playlab_events6_instruction: |-
        帮助骑士得到所有的旗子!\r
        \r
        要做到这些，需要添加事件来帮助骑士向上、向下、向左和向右移动。
      courseB_playlab_events6_2018_instruction: |-
        帮助骑士得到所有的旗子!\r
        \r
        要做到这些，需要添加事件来帮助骑士向上、向下、向左和向右移动。
      courseB_playlab_events7_instruction: 让这个游戏有趣，设置骑士在去往旗子的路上碰到龙的时候消失！当他们碰撞时播放声音使感觉更真实。
      courseB_playlab_events7_2018_instruction: 让这个游戏有趣，设置骑士在去往旗子的路上碰到龙的时候消失！当他们碰撞时播放声音使感觉更真实。
      courseB_playlab_events8_instruction: 运用你的想象力。你能做些什么让这个游戏更有趣？
      courseB_playlab_eventsFP_instruction: 运用你的想象力。你能做些什么让这个游戏更有趣？
      courseB_playlab_eventsFP_2018_instruction: 运用你的想象力。你能做些什么让这个游戏更有趣？
      courseB_playlab_eventsToolbox_instruction: 在骑士碰到龙的时候，播放声音并让骑士消失！
      courseB_playlab_events_challenge1_instruction: '当你按下时, 让动物们往下移动。 '
      courseB_playlab_events_challenge1_2018_instruction: '当你按下时, 让动物们往下移动。 '
      courseB_playlab_events_challenge2_instruction: 当点击动物时，让它们消失。
      courseB_playlab_events_challenge2_2018_instruction: 当点击动物时，让它们消失。
      courseB_playlab_events_challenge2_embed_instruction: 这是你完成的游戏!
      courseB_playlab_events_challenge2_template_instruction: 点击来使动物们消失！你也可以添加声音和得分点,
        创建一个有趣的动物标签游戏!
      courseB_playlab_events_challenge2_template_2018_instruction: 点击来使动物们消失！你也可以添加声音和得分点,
        创建一个有趣的动物标签游戏!
      courseB_scrat_forVideo_instruction: 拿到橡子！
      courseB_starWars_prog1_instruction: "\"去收集废金属, BB-8!”"
      courseB_starWars_prog10_instruction: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog10_2018_instruction: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog11_instruction: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog11_2018_instruction: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog1_2018_instruction: "\"去收集废金属, BB-8!”"
      courseB_starWars_prog2_instruction: 把所有的金属都收集起来。
      courseB_starWars_prog2_2018_instruction: 把所有的金属都收集起来。
      courseB_starWars_prog3_instruction: 得到所有的废金属
      courseB_starWars_prog3_2018_instruction: 得到所有的废金属
      courseB_starWars_prog4_instruction: 得到所有的废金属
      courseB_starWars_prog4_2018_instruction: 得到所有的废金属
      courseB_starWars_prog5_instruction: 获取废旧金属
      courseB_starWars_prog5_2018_instruction: 获取废旧金属
      courseB_starWars_prog6_instruction: 得到所有的废金属
      courseB_starWars_prog6_2018_instruction: 得到所有的废金属
      courseB_starWars_prog7_instruction: 去拿!
      courseB_starWars_prog7_2018_instruction: 去拿!
      courseB_starWars_prog8_instruction: "** 挑战: ** 帮助 BB-8 收集发光的废旧金属"
      courseB_starWars_prog8_2018_instruction: "** 挑战: ** 帮助 BB-8 收集发光的废旧金属"
      courseB_starWars_prog9_instruction: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog9_2018_instruction: 帮助 BB-8 收集发光的废旧金属
      courseC_PlayLab_events1_instruction: 让乔治狗 (演员 1) 说 "大家好。“
      courseC_PlayLab_events1_2018_instruction: 让乔治狗 (演员 1) 说 "大家好。“
      courseC_PlayLab_events2_instruction: 你能让乔治狗 (演员 1) 说点什么, 然后让奥丽芙 (演员 2) 接着说些什么吗？
      courseC_PlayLab_events2_2018_instruction: 你能让乔治狗 (演员 1) 说点什么, 然后让奥丽芙 (演员 2)
        接着说些什么吗？
      courseC_PlayLab_events3_instruction: 你可以写一个程序来将乔治（演员1）移动到奥丽芙猫那里吗？
      courseC_PlayLab_events3_2018_instruction: 你可以写一个程序来将乔治（演员1）移动到奥丽芙猫那里吗？
      courseC_PlayLab_events4_instruction: 你能写一个程序让乔治 (演员 1) 移到奥丽芙猫那里, 并在乔治到的时候让奥丽芙说
        "你好"？
      courseC_PlayLab_events4_2018_instruction: 你能写一个程序让乔治 (演员 1) 移到奥丽芙猫那里, 并在乔治到的时候让奥丽芙说
        "你好"？
      courseC_PlayLab_events5_instruction: 你能写一个程序让章鱼奥克塔维亚在被点击的时候说 "有什么新鲜事吗？"？
      courseC_PlayLab_events5_2018_instruction: 你能写一个程序让章鱼奥克塔维亚在被点击的时候说 "有什么新鲜事吗？"？
      courseC_PlayLab_events6_instruction: 现在，写一个程序让企鹅四处移动，使用上/下/左/右键命中所有目标！
      courseC_PlayLab_events6_2018_instruction: 现在，写一个程序让企鹅四处移动，使用上/下/左/右键命中所有目标！
      courseC_PlayLab_events7_instruction: "`一直重复` 模块允许你一次又一次一直运行代码。使用这个模块让恐龙迪诺 (演员
        2) 一直上下移动400像素。"
      courseC_PlayLab_events7_2018_instruction: "`一直重复` 模块允许你一次又一次一直运行代码。使用这个模块让恐龙迪诺
        (演员 2) 一直上下移动400像素。"
      courseC_PlayLab_events8_instruction: |-
        你能让企鹅 (演员 1) 在碰到恐龙时播放 "命中" 的声音并说 "哎呀!”吗？\r
        当你完成的时候，玩游戏来试试。
      courseC_PlayLab_events8_2018_instruction: |-
        你能让企鹅 (演员 1) 在碰到恐龙时播放 "命中" 的声音并说 "哎呀!”吗？\r
        当你完成的时候，玩游戏来试试。
      courseC_PlayLab_events9_instruction: |-
        你可以添加一个模块让企鹅（演员1）在碰到章鱼奥克塔维亚（演员3）的时候得一分吗？\r
        玩此游戏，用箭头移动企鹅直到得分！
      courseC_PlayLab_events9_2018_instruction: |-
        你可以添加一个模块让企鹅（演员1）在碰到章鱼奥克塔维亚（演员3）的时候得一分吗？\r
        玩此游戏，用箭头移动企鹅直到得分！
      courseC_PlayLab_eventsA_instruction: |-
        添加模块到`当运行时`事件来更改背景场面以及企鹅的速度。\r
        \r
        玩此游戏，用箭头移动企鹅直到得分。
      courseC_PlayLab_eventsA_2018_instruction: |-
        添加模块到`当运行时`事件来更改背景场面以及企鹅的速度。\r
        \r
        玩此游戏，用箭头移动企鹅直到得分。
      courseC_PlayLab_eventsFP_instruction: 创造你自己的故事。完成后, 单击 "完成" 以与朋友共享。在提示中有故事的想法。
      courseC_PlayLab_eventsFP_2018_instruction: 创造你自己的故事。完成后, 单击 "完成" 以与朋友共享。在提示中有故事的想法。
      courseC_PlayLab_events_challenge1_instruction: |-
        用一块新模块，让企鹅在碰到恐龙和得分的时候能自动回到原点。\r
        玩这个游戏，并用箭头移动企鹅，直到你得到足够的分数。
      courseC_PlayLab_events_challenge1_2018_instruction: |-
        用一块新模块，让企鹅在碰到恐龙和得分的时候能自动回到原点。\r
        玩这个游戏，并用箭头移动企鹅，直到你得到足够的分数。
      courseC_PlayLab_events_challenge1_xy_blocks_instruction: |-
        这里是一个有点复杂的新模块。用来让企鹅在遇到恐龙和得分的时候回到原点。这将使你的游戏更具挑战性和有趣! \r
        \r
        玩游戏和用箭头移动企鹅, 直到你得分足够的分数。
      courseC_artist_loop1_instruction: 让我们添加一些活泼的东西!
      courseC_artist_loop1_2018_instruction: 让我们添加一些活泼的东西!
      courseC_artist_loops1_instruction: "\"僵尸。 画图!\"\\r\n\\r\n僵尸想画一条线，从它这里到花园向日葵的线。
        你能帮他吗？ \\r \n* (花园在250像素以外) *  "
      courseC_artist_loops1a_instruction: '把艺术家带到游戏区的中心, 然后用贴纸画一只鸟。 '
      courseC_artist_loops1a_2018_instruction: '把艺术家带到游戏区的中心, 然后用贴纸画一只鸟。 '
      courseC_artist_loops2_instruction: 现在, 僵尸知道他的路线, 帮助他沿路挖洞种植更多的花朵!
      courseC_artist_loops2a_instruction: 现在, 用一个循环旋转你的鸟大约12次, 每次转30度。
      courseC_artist_loops2a_2018_instruction: 现在, 用一个循环旋转你的鸟大约12次, 每次转30度。
      courseC_artist_loops3_instruction: 非常好！ 现在, 花朵已经发芽, 帮助僵尸每隔50像素安置一个朋友来保护花朵, 直到他们长大。
      courseC_artist_loops3a_instruction: 现在添加一只蝙蝠!
      courseC_artist_loops3a_2018_instruction: 现在添加一只蝙蝠!
      courseC_artist_loops4_instruction: 僵尸发现了一个空农场! 你能帮他把沿着边缘每100 像素贴上动物贴来让农场变热闹/活跃起来吗？
      courseC_artist_loops4a_instruction: 尝试向前跳跃75像素。
      courseC_artist_loops4a_2018_instruction: 尝试向前跳跃75像素。
      courseC_artist_loops5_instruction: |
        很好! 现在是时候做一个围栏, 以防止动物跑出去。  \r
        \r
      courseC_artist_loops5a_instruction: 尝试新的贴纸!
      courseC_artist_loops5a_2018_instruction: 尝试新的贴纸!
      courseC_artist_loops5b_instruction: 尝试添加线条!
      courseC_artist_loops5b_2018_instruction: 尝试添加线条!
      courseC_artist_loops6_instruction: |
        僵尸应该放在花园里什么？ \r
        \r
        \r
      courseC_artist_loops6a_instruction: 添加另一个标签!
      courseC_artist_loops6a_2018_instruction: 添加另一个标签!
      courseC_artist_loops7a_instruction: 操练循环和角度。
      courseC_artist_loops7a_2018_instruction: 操练循环和角度。
      courseC_artist_loops8a_instruction: 现在尝试自己练习!
      courseC_artist_loops8a_2018_instruction: 现在尝试自己练习!
      courseC_artist_loopsPre1a_instruction: 是时候把那条线转过来了!
      courseC_artist_loopsPre1a_2018_instruction: 是时候把那条线转过来了!
      courseC_artist_loopsPrePre1a_instruction: '把艺术家带到游戏区的中心, 然后画一条线。 '
      courseC_artist_loopsPrePre1a_2018_instruction: '把艺术家带到游戏区的中心, 然后画一条线。 '
      courseC_artist_loopsTemplate_instruction: 非常好！ 现在, 花朵已经发芽, 帮助僵尸每隔50像素安置一个朋友来保护花朵,
        直到他们长大。
      courseC_artist_loopsTemplateA_instruction: '把艺术家带到游戏区的中心, 然后用贴纸画一只鸟。 '
      courseC_artist_loopsTemplateA_2018_instruction: '把艺术家带到游戏区的中心, 然后用贴纸画一只鸟。 '
      courseC_artist_prog1_instruction: 试试工具箱里的模块看他们能做什么！
      courseC_artist_prog1_2018_instruction: 试试工具箱里的模块看他们能做什么！
      courseC_artist_prog2_instruction: 将模块拖到屏幕上，让艺术家在图中灰色线上画线。(每行100像素长)
      courseC_artist_prog2_2018_instruction: 将模块拖到屏幕上，让艺术家在图中灰色线上画线。(每行100像素长)
      courseC_artist_prog3_instruction: 内部的正方形每条边是100像素，所有的角都是90度。
      courseC_artist_prog3_2018_instruction: 内部的正方形每条边是100像素，所有的角都是90度。
      courseC_artist_prog4_instruction: 完成斯黛拉的火箭, 这样她就可以追逐她的宠物。
      courseC_artist_prog4_2018_instruction: 完成斯黛拉的火箭, 这样她就可以追逐她的宠物。
      courseC_artist_prog5_instruction: 这个房子需要一个屋顶！提示：所有三面都具有相同的长度。
      courseC_artist_prog5_2018_instruction: |-
        沿外部绘制一个矩形来完成此捉人游戏。\r
        （长边200像素，短边100像素）
      courseC_artist_prog6_instruction: 绘制200像素边的菱形。
      courseC_artist_prog6_2018_instruction: 绘制200像素边的菱形。
      courseC_artist_prog7_instruction: "** 挑战: ** 这个捉人游戏很特别! 你能想出如何画边框吗？"
      courseC_artist_prog7_2018_instruction: "** 挑战: ** 这个捉人游戏很特别! 你能想出如何画边框吗？"
      courseC_artist_prog8_instruction: |-
        再来一个捉人游戏。这是一个派的三角形。\r
        （每边为150像素）
      courseC_artist_prog8_2018_instruction: |-
        再来一个捉人游戏。这是一个派的三角形。\r
        （每边为150像素）
      courseC_artist_prog_challenge1-doghouse_instruction: 让我们为乔治建个狗屋吧!
      courseC_artist_prog_challenge1_instruction: '为每一个动物绘制房间。

'
      courseC_artist_prog_challenge1_2018_instruction: '为每种动物绘制房间。 '
      courseC_artist_prog_challenge2_instruction: "* 帮我在这条路上涂上黄线!*"
      courseC_artist_prog_challenge2a_instruction: "* 帮我在这条路上涂上黄线!*"
      courseC_artist_prog_challenge2a_2018_instruction: '*"帮我在这条路上画黄线!"*'
      courseC_collector_loops_challenge2_instruction: 得到至少**5**个宝藏!
      courseC_collector_loops_challenge2_2018_instruction: 得到至少**5**个宝藏!
      courseC_collector_prog1_instruction: 试试这些模块，看看你能不能帮助罗瑞尔收集一些宝藏。
      courseC_collector_prog1_2018_instruction: 试试这些模块，看看你能不能帮助罗瑞尔收集一些宝藏。
      courseC_collector_prog2_instruction: 把罗瑞尔移到宝藏上, 然后用 "收藏" 来捡起来。
      courseC_collector_prog2_2018_instruction: 把罗瑞尔移到宝藏上, 然后用 "收藏" 来捡起来。
      courseC_collector_prog3_instruction: 排列这些模块收集宝藏并通过此关卡。
      courseC_collector_prog3_2018_instruction: 排列这些模块收集宝藏并通过此关卡。
      courseC_collector_prog4_instruction: 排列这些模块来收集所有的宝藏并通过此关卡。
      courseC_collector_prog4_2018_instruction: 排列这些模块来收集所有的宝藏并通过此关卡。
      courseC_collector_prog5_instruction: 这些模块的顺序不对。你能修好它们吗？
      courseC_collector_prog5_2018_instruction: 这些模块的顺序不对。你能修好它们吗？
      courseC_collector_prog6_instruction: 重新排列模块来收集所有的宝藏。
      courseC_collector_prog6_2018_instruction: 重新排列模块来收集所有的宝藏。
      courseC_collector_prog7_instruction: 使用工具箱中的模块来收集所有的宝藏。
      courseC_collector_prog7_2018_instruction: 使用工具箱中的模块来收集所有的宝藏。
      courseC_collector_prog8_instruction: '*"继续保持良好的工作! 帮我收集所有的宝藏。“*'
      courseC_collector_prog8_2018_instruction: '*"继续保持良好的工作! 帮我收集所有的宝藏。“*'
      courseC_collector_prog9_instruction: '*"让我们得到所有的宝藏!*'
      courseC_collector_prog9_2018_instruction: '*"让我们得到所有的宝藏!*'
      courseC_collector_progA_instruction: 帮助罗瑞尔收集所有的宝藏。
      courseC_collector_progB_instruction: 收集尽可能多的硬币来完成此关!
      courseC_collector_prog_challenge1_instruction: 仔细看! 你能收集所有 **10** 块宝藏吗？
      courseC_collector_prog_challenge1_2018_instruction: 仔细看! 你能收集所有 **10** 块宝藏吗？
      courseC_collector_prog_challenge2_instruction: 收集至少**10**个宝藏完成这一挑战!
      courseC_collector_prog_challenge2_2018_instruction: 收集至少**10**个宝藏完成这一挑战!
      courseC_flappy_embed_events_instruction: 这里有一个游戏的例子, 你要自己来创造! 通过一两次游戏来想想自己要做什么。
      courseC_flappy_events1_instruction: 将 "拍打正常数量" 块附加到 "单击时" 情景, 然后按 "运行"。单击或点击播放空间,
        将像素鸟移动到目的地。
      courseC_flappy_events10_instruction: '创建自己的像素鸟游戏! '
      courseC_flappy_events10_2018_instruction: '创建自己的像素鸟游戏! '
      courseC_flappy_events1_2018_instruction: 将 "拍打正常数量" 块附加到 "单击时" 情景, 然后按 "运行"。单击或点击播放空间,
        将像素鸟移动到目的地。
      courseC_flappy_events2_instruction: 在按下 "运行" 按钮时, 尝试添加一个设置速度级别的模块。 玩游戏并飞到目的地来继续。
      courseC_flappy_events2_2018_instruction: 在按下 "运行" 按钮时, 尝试添加一个设置速度级别的模块。 玩游戏并飞到目的地来继续。
      courseC_flappy_events3_instruction: 附加 ' 结束游戏 ' 块到 ' 当击中地面 ' 时的下面。  玩游戏, 把小鸟撞向地面来继续。
      courseC_flappy_events3_2018_instruction: 附加 ' 结束游戏 ' 块到 ' 当击中地面 ' 时的下面。  玩游戏,
        把小鸟撞向地面来继续。
      courseC_flappy_events4_instruction: 附加一个块到 ' 当击中障碍 ' 情况中, 以便在像素鸟撞到第一条管道的时候，游戏结束时。
      courseC_flappy_events4_2018_instruction: 附加一个块到 ' 当击中障碍 ' 事件中，以便在像素鸟撞到第一条管道时，游戏结束。
      courseC_flappy_events5_instruction: 在 "通过障碍" 情况时添加一个块, 然后等像素鸟飞过第一组管道的时候，按 "运行"
        得一分。
      courseC_flappy_events5_2018_instruction: 在 "通过障碍" 情况时添加一个块, 然后等像素鸟飞过第一组管道的时候，按
        "运行" 得一分。
      courseC_flappy_events6_instruction: 看你是否可以在每次你点击的时候，让像素鸟拍打更大或更小的距离，来得分。
      courseC_flappy_events6_2018_instruction: 看你是否可以在每次你点击的时候，让像素鸟拍打更大或更小的距离，来得分。
      courseC_flappy_events7_instruction: 接下来, 尝试通过将一个模块附加到 "运行时" 事件来更改场景。
      courseC_flappy_events7_2018_instruction: 接下来, 尝试通过将一个模块附加到 "运行时" 事件来更改场景。
      courseC_flappy_events8_instruction: 当其他事件发生时, 尝试设置一个 **随机** 场景.....比如，当通过一个障碍物时。
      courseC_flappy_events8_2018_instruction: 当其他事件发生时, 尝试设置一个 **随机** 场景.....比如，当通过一个障碍物时。
      courseC_flappy_events9_instruction: 把事情混合起来, 在像素鸟击倒障碍物的时候不是让游戏停止，试着把分数归零。
      courseC_flappy_events9_2018_instruction: 把事情混合起来, 在像素鸟击倒障碍物的时候不是让游戏停止，试着把分数归零。
      courseC_harvester_loops1_instruction: 使用循环来捡起所有的南瓜。
      courseC_harvester_loops10_instruction: 收集所有的玉米和南瓜。
      courseC_harvester_loops10_2018_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops11_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops11_2018_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops1_2018_instruction: 使用循环来捡起所有的南瓜。
      courseC_harvester_loops2_instruction: 你能用两个不同的循环来朝着南瓜移动，并收集它们吗？
      courseC_harvester_loops2_2018_instruction: 你能用两个不同的循环来朝着南瓜移动，并收集它们吗？
      courseC_harvester_loops3_instruction: 收集所有南瓜。
      courseC_harvester_loops3_2018_instruction: 收集所有南瓜。
      courseC_harvester_loops4_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops4_2018_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops5_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops5_2018_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops6_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops6_2018_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops7_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops7_2018_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops8_instruction: "**挑战：**收集所有玉米和南瓜。"
      courseC_harvester_loops8_2018_instruction: "**挑战：**收集所有玉米和南瓜。"
      courseC_harvester_loops9_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops9_2018_instruction: 收集所有玉米和南瓜。
      courseC_harvester_loops_challenge1_instruction: 收集所有的玉米。
      courseC_harvester_loops_challenge1a_instruction: 收集所有的玉米。
      courseC_harvester_loops_challenge1a_2018_instruction: 收集所有的玉米。
      courseC_harvester_loops_challenge2_instruction: 收集所有的莴苣。避开树木和田野!
      courseC_harvester_loops_challenge2_2018_instruction: 收集所有的莴苣。避开树木和田野!
      courseC_harvester_loops_forVid_instruction: 收集所有玉米，莴苣和南瓜。
      courseC_maze_debugging1_instruction: 修好代码，来帮助斯奎特到达橡子。
      courseC_maze_debugging10_instruction: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      courseC_maze_debugging1_2018_instruction: 修好代码，来帮助斯奎特到达橡子。
      courseC_maze_debugging2_instruction: 用你的调试技能来帮助斯奎特到达橡子。
      courseC_maze_debugging2_2018_instruction: 用你的调试技能来帮助斯奎特到达橡子。
      courseC_maze_debugging3_instruction: 移除模块来帮助斯奎特到达橡子！
      courseC_maze_debugging3_2018_instruction: 移除模块来帮助斯奎特到达橡子！
      courseC_maze_debugging4_instruction: 某些人的方向搞混了！你能帮忙吗？
      courseC_maze_debugging4_2018_instruction: 某些人的方向搞混了！你能帮忙吗？
      courseC_maze_debugging5_instruction: 通过重新排列和改动模块来调试这一关。
      courseC_maze_debugging5_2018_instruction: 通过重新排列和改动模块来调试这一关。
      courseC_maze_debugging6_instruction: 找出什么地方错了，并让斯奎特到达橡子。
      courseC_maze_debugging6_2018_instruction: 找出什么地方错了，并让斯奎特到达橡子。
      courseC_maze_debugging7_instruction: "** 挑战: ** 通过重新排列，添加和删除模块来调试这关。"
      courseC_maze_debugging7_2018_instruction: "** 挑战: ** 通过重新排列，添加和删除模块来调试这关。"
      courseC_maze_debugging8_instruction: 调试这一关，让斯奎特到达橡子。
      courseC_maze_debugging9_instruction: 调试这一关，让斯奎特到达橡子。
      courseC_maze_debugging9_2018_instruction: 调试这一关，让斯奎特到达橡子。
      courseC_maze_debugging_challenge1_instruction: 帮助斯奎特决定往哪条路转，才能得到橡子。
      courseC_maze_debugging_challenge1_2018_instruction: 帮助斯奎特决定往哪条路转，才能得到橡子。
      courseC_maze_debugging_challenge2_instruction: 帮助斯奎特只用4次`转向`命令来获得橡子。
      courseC_maze_debugging_challenge2_2018_instruction: 帮助斯奎特只用4次`转向`命令来获得橡子。
      courseC_maze_loops1_instruction: 你能把鸟带到猪那里吗？
      courseC_maze_loops10_instruction: 你做得很好! 继续!
      courseC_maze_loops11_instruction: 快要成功了！这次，选择你喜欢的路！
      courseC_maze_loops2_instruction: 你能通过创建一个只有`向前移动`的`重复`循环来让小鸟到达猪那里吗？
      courseC_maze_loops3_instruction: 通过创建一个循环来通过此关卡！
      courseC_maze_loops4_instruction: 在这一关中，两个`重复`循环会用最少的模块帮你将小鸟带到猪那里！
      courseC_maze_loops5_instruction: '*"让我用最快的方法到达猪那里！"*'
      courseC_maze_loops6_instruction: 循环里能放多于一个模块！你能循环这个序列吗？
      courseC_maze_loops7_instruction: 用你在其它关学到的知识！
      courseC_maze_loops8_instruction: 挑战：将从前几关的主意组合起来，完成这一关。
      courseC_maze_loops9_instruction: 你做得很好! 继续!
      courseC_maze_loops_challenge1_instruction: '现在, 斯奎特想尝试使用循环来找到他的橡子! '
      courseC_maze_loops_challenge1a_instruction: '现在, 斯奎特想尝试使用循环来找到他的橡子! '
      courseC_maze_loops_challenge1a_2018_instruction: '现在, 斯奎特想尝试使用循环来找到他的橡子! '
      courseC_maze_loops_challenge2_instruction: 让我们使用循环来寻找宝藏! 通过找出此代码错误来帮助收集者得到所有的宝藏!
      courseC_maze_programming1_instruction: 对于这个关卡，把所有的块都拖在一起，并点击"运行"来看看！
      courseC_maze_programming1_2018_instruction: 对于这个关卡，把所有的模块都拖到一起，并点击"运行"来看看！
      courseC_maze_programming2_instruction: 从工具箱中拖出另一个`向前移动`模块来完成代码。
      courseC_maze_programming2_2018_instruction: 从工具箱中拖出另一个`向前移动`模块来完成代码。
      courseC_maze_programming3_instruction: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseC_maze_programming3_2018_instruction: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseC_maze_programming4_instruction: 躲开TNT炸药，否则羽毛会被炸飞！
      courseC_maze_programming4_2018_instruction: 躲开TNT炸药，否则羽毛会被炸飞！
      courseC_maze_programming5_instruction: 躲开TNT炸药！
      courseC_maze_programming5_2018_instruction: 躲开TNT炸药！
      courseC_maze_programming6_instruction: "\"保持冷静，帮我找到那只坏猪。否则我会很生气的！“"
      courseC_maze_programming6_2018_instruction: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseC_maze_programming7_instruction: "**挑战：**这个代码有很多雪线。你需要移除一些模块，然后再加上另一些。"
      courseC_maze_programming7_2018_instruction: "**挑战：**这个代码有很多雪线。你需要移除一些模块，然后再加上另一些。"
      courseC_maze_programming8_instruction: '*"保持冷静，帮我找到那只坏猪。"*'
      courseC_maze_programming8_2018_instruction: '*"保持冷静，帮我找到那只坏猪。"*'
      courseC_maze_programming8_predict1_instruction: '*"保持冷静，帮我找到那只坏猪。"*'
      courseC_maze_programming8_predict1_2018_instruction: '*"保持冷静，帮我找到那只坏猪。"*'
      courseC_maze_programming9_instruction: '*"现在，用任何方法让我偷偷到达猪那里！"*'
      courseC_maze_programming9_2018_instruction: '*"现在，用任何方法让我偷偷到达猪那里！"*'
      courseC_maze_programming_challenge1_instruction: '猪藏起来了，目标是找到它。 '
      courseC_maze_programming_challenge1_2018_instruction: '猪藏起来了，目标是找到它。 '
      courseC_maze_programming_challenge2_instruction: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      courseC_maze_programming_challenge2_2018_instruction: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      courseC_playLab_embedded_instruction: "这里有一个游戏给你玩! 要赢的话, 用你的方向键让企鹅遇到章鱼. \n\\r\n一旦你完成了,
        你将学会如何做这个游戏!"
      courseC_puppy_loops10_instruction: 你做得很好! 继续!
      courseC_puppy_loops11_instruction: 快要成功了！这次，选择你喜欢的路！
      courseC_puppy_loops8_instruction: 挑战：将从前几关的主意组合起来，完成这一关。
      courseC_puppy_loops8courseC_maze_loops8_instruction: 挑战：将从前几关的主意组合起来，完成这一关。
      courseC_puppy_loops9_instruction: 你做得很好! 继续!
      courseC_starWars_loops1_instruction: BB-8 会在他移动的路上捡起任何金属废料。用同一个模块5次, 让 BB-8
        捡起场地中所有的废旧金属。
      courseC_starWars_loops10_instruction: 你做得很好! 继续!
      courseC_starWars_loops10_2018_instruction: 你做得很好! 继续!
      courseC_starWars_loops10_predict2_instruction: 你做得很好! 继续!
      courseC_starWars_loops10_predict2_2018_instruction: 你做得很好! 继续!
      courseC_starWars_loops11_instruction: 快要成功了！这次，选择你喜欢的路！
      courseC_starWars_loops11_2018_instruction: 快要成功了！这次，选择你喜欢的路！
      courseC_starWars_loops1_2018_instruction: BB-8 会在他通过的地方捡起任何金属废料。用同一个模块5次, 让
        BB-8 捡起场地中所有的废旧金属。
      courseC_starWars_loops1_predict1_instruction: BB-8 会在他通过的地方捡起任何金属废料。用同一个模块5次,
        让 BB-8 捡起场地中所有的废旧金属。
      courseC_starWars_loops1_predict1_2018_instruction: BB-8 会在他通过的地方捡起任何金属废料。用同一个模块5次,
        让 BB-8 捡起场地中所有的废旧金属。
      courseC_starWars_loops2_instruction: 要获取所有的废金属, 请尝试创建一个在 "重复"模块内只有一个模块的循环。
      courseC_starWars_loops2_2018_instruction: 要获取所有的废金属, 请尝试创建一个在 "重复"模块内只有一个模块的循环。
      courseC_starWars_loops4_instruction: 在这个关卡中, 两个 ' 重复 ' 循环将帮助您用最少的模块获得 BB-8 的所有金属废料。
      courseC_starWars_loops4_2018_instruction: 在这个关卡中, 两个`重复`循环将帮你用最少的模块获得 BB-8 的所有金属废料。
      courseC_starWars_loops5_instruction: 让 BB-8 尽快拿起所有的废金属!
      courseC_starWars_loops5_2018_instruction: 让 BB-8 尽快拿起所有的废金属!
      courseC_starWars_loops6_instruction: 循环里能放多于一个模块！你能循环这个序列吗？
      courseC_starWars_loops6_2018_instruction: 循环里能放多于一个模块！你能循环这个序列吗？
      courseC_starWars_loops7_instruction: 你能试着只用一个循环就能得到所有的废金属吗？尝试先把所有代码写出来出来, 然后找到重复的代码放入循环中。
      courseC_starWars_loops7_2018_instruction: 你能试着只用一个循环就能得到所有的废金属吗？尝试先把所有代码写出来出来,
        然后找到重复的代码放入循环中。
      courseC_starWars_loops9_instruction: 用你所学的东西来捡起所有的废铁!
      courseC_starWars_loops9_2018_instruction: 用你所学的东西来捡起所有的废铁!
      courseD_Frozen_nested1_instruction: '绘制一个小形状, 介于 ** 20 和50 **像素宽之间。 它可以是任何你喜欢的形状。  '
      courseD_Frozen_nested2_instruction: 现在用你选的形状在一行里连续画两或三个!
      courseD_Frozen_nested3_instruction: 让我们旋转那个形状的线吧!
      courseD_Frozen_nested4_instruction: 是时候把这些形状分层了!
      courseD_Frozen_nested5_instruction: 玩一玩雪花功能!
      courseD_Frozen_nested6_instruction: 画一个阶梯楼梯模式, 使用75和105度之间的角度来转弯。
      courseD_Frozen_nested7_instruction: 现在, 转180度左右, 再次绘制楼梯图案!
      courseD_Frozen_nested8_instruction: 在一个圆圈内旋转该形状大约5或6次。
      courseD_Frozen_nested9_instruction: |-
        试着改动一下你所创造的东西。画任何你喜欢的东西! \r
        - 如果你在台阶上使用两个不同的角度, 会发生什么？\r
        - 如果你把你的钻石图案变长或变短, 会发生什么？\r
        - 如果把两片雪花叠起来是什么样的？
      courseD_artist_1_2018_instruction: '画一个**30**像素边长的小正方形。\r

'
      courseD_artist_2_2018_instruction: '现在，向右转**60**度，然后画一条**150**像素长的直线，并跳回到区域中心。\r

'
      courseD_artist_3_2018_instruction: '将所有代码嵌入到另一个`重复`循环中，并运行**6**次。 '
      courseD_artist_4_2018_instruction: 在线的末尾增加一个小形状！
      courseD_artist_5_2018_instruction: 玩一玩雪花功能!
      courseD_artist_6_2018_instruction: 画一个阶梯楼梯模式, 使用75和105度之间的角度来转弯。
      courseD_artist_7_2018_instruction: 现在，转180度，再次绘制楼梯图案!
      courseD_artist_8_2018_instruction: 在一个圆圈内旋转该形状大约5或6次。
      courseD_artist_9_2018_instruction: |-
        试着改动一下你所创造的东西。画任何你喜欢的东西! \r
        - 如果你在台阶上使用两个不同的角度, 会发生什么？\r
        - 如果你把你的钻石图案变长或变短, 会发生什么？\r
        - 如果把两片雪花叠起来是什么样的？
      courseD_artist_binary1_instruction: 用下面的模块来让小画家在第一行画出二进制字符串“01010101”。
      courseD_artist_binary1_2018_instruction: 用下面的模块来让小画家在第一行画出二进制字符串“01010101”。
      courseD_artist_binary2_instruction: 运行代码来看看小艺术家如何用二进制画出这幅图案。
      courseD_artist_binary2_2018_instruction: 运行代码来看看小艺术家如何用二进制画出这幅图案。
      courseD_artist_binary3_instruction: 哪个二进制字符串能让你循环8次来画出这个图像？
      courseD_artist_binary3_2018_instruction: 哪个二进制字符串能让你循环8次来画出这个图像？
      courseD_artist_binary4_instruction: 你能通过循环3个二进制位（0和1）来画出这个图形吗？
      courseD_artist_binary4_2018_instruction: 你能通过循环一个三位的二进制字符串（0和1）来画出这个图形吗？
      courseD_artist_binary5_instruction: |-
        下面的每个二进制字符串表达了这个图片的一行。\r
        \r
        你能重新排列它们，用笑脸代替皱眉吗？
      courseD_artist_binary5_2018_instruction: |-
        下面的每个二进制字符串表达了这个图片的一行。\r
        \r
        你能重新排列它们，用笑脸代替皱眉吗？
      courseD_artist_binary6_instruction: 哪个6位的二进制字符串重复11次后能够画出这个图形?
      courseD_artist_binary6_2018_instruction: 哪个6位的二进制字符串重复11次后能够画出这个图形?
      courseD_artist_binary7_instruction: 能让你重复并画出这个图形的最短的二进制字符串是什么?
      courseD_artist_binary7_2018_instruction: 能让你重复并画出这个图形的最短的二进制字符串是什么?
      courseD_artist_binary8_instruction: 完成代码来创建此图。
      courseD_artist_binary8_2018_instruction: 完成代码来创建此图。
      courseD_artist_binary8_predict1_instruction: 完成代码来创建此图。
      courseD_artist_binary8_predict1_2018_instruction: 完成代码来创建此图。
      courseD_artist_binaryFP_instruction: |-
        这是更高分辨率的画布 - 16像素乘以16像素！\r
        \r
        看看你用二进制位能创造出什么？
      courseD_artist_binaryFP8_instruction: "**自由发挥：**用二进制画出任何你想的！ "
      courseD_artist_binaryFP_2018_instruction: |-
        这是更高分辨率的画布 - 16像素乘以16像素！\r
        \r
        看看你用二进制位能创造出什么？
      courseD_artist_binary_challenge0_instruction: 请尝试使用嵌套循环来完成此图。
      courseD_artist_binary_challenge1_instruction: 在这个谜题中，您只能使用每个二进制值 (0 或 1) 一次。请尝试使用嵌套循环来完成此绘图。
      courseD_artist_binary_challenge1_2018_instruction: 在这个谜题中，您只能使用每个二进制值 (0 或 1)
        一次。请尝试使用嵌套循环来完成此绘图。
      courseD_artist_binary_challenge2_instruction: 你是否有足够的毅力让这个标志回到正常状态？
      courseD_artist_binary_challenge2_2018_instruction: 你是否有足够的毅力让这个标志回到正常状态？
      courseD_artist_binary_challenge3_instruction: 你是否有足够的毅力让这个标志回到正常状态？
      courseD_artist_embed_frozen_instruction: 按下运行键来看看雪花设计!
      courseD_artist_embed_frozen2_instruction: 按下运行键来看看雪花设计!
      courseD_artist_functions10_instruction: 这次，用8个（25像素边长的）六边形的线。
      courseD_artist_functions2_instruction: '这一次, 使用`draw a square`（画一个正方形）函数来创建眼镜。
        \r

'
      courseD_artist_functions3_instruction: 你能通过添加一个重复模块来完成这幅画。
      courseD_artist_functions4_instruction: 现在你能画一个星星了，试试画4个星星！
      courseD_artist_functions5_instruction: 只画3个星星来完成这关。
      courseD_artist_functions6_instruction: 通过画一个正方形来制作这个窗口，然后在画另一个前转90度，等等。
      courseD_artist_functions7_instruction: 创建`画一个窗口`，然后调用它5次来通过这一关。小心门！
      courseD_artist_functions8_instruction: 挑战：创建你能想到的尽可能多的函数来画出这个50像素的正方形的图案。
      courseD_artist_functions9_instruction: 只用提供的模块来画出这个图。
      courseD_artist_nestedLoops1_instruction: |-
        画一个三角形来开始这个阶段。\r
        （每条边是100像素长，你需要在每个外角转120度。）
      courseD_artist_nestedLoops10_instruction: 从以前的代码里活动的正方形，但这次只需要7个，并将它们排成一行。
      courseD_artist_nestedLoops10_2018_instruction: 从以前的代码里活动的正方形，但这次只需要7个，并将它们排成一行。
      courseD_artist_nestedLoops1_2018_instruction: |-
        画一个三角形来开始这个阶段。\r
        （每条边是100像素长，你需要在每个外角转120度。）
      courseD_artist_nestedLoops1a_instruction: '现在循环6次三角形。 '
      courseD_artist_nestedLoops1a_2018_instruction: '现在循环6次三角形。

'
      courseD_artist_nestedLoops2_instruction: 这次，用尽可能少的模块完成这关。
      courseD_artist_nestedLoops2_2018_instruction: 这次，用尽可能少的模块完成这关。
      courseD_artist_nestedLoops3_instruction: |-
        用你的新技能来快速的画出这个建筑物的最后一行窗户。\r
        \r
        窗户是20像素的正方形，每个之间相隔20像素。
      courseD_artist_nestedLoops3_2018_instruction: |-
        用你的新技能来快速的画出这个建筑物的最后一行窗户。\r
        \r
        窗户是20像素的正方形，每个之间相隔20像素。
      courseD_artist_nestedLoops4_instruction: 太好了！用这些圆圈做同样的事情。
      courseD_artist_nestedLoops4_2018_instruction: 太好了！用这些圆圈做同样的事情。
      courseD_artist_nestedLoops5_instruction: 如果在圆圈之间你也转90度，会如何？
      courseD_artist_nestedLoops5_2018_instruction: 如果在圆圈之间你也转90度，会如何？
      courseD_artist_nestedLoops6_instruction: 在已有的代码里编辑模块来创建这幅图。
      courseD_artist_nestedLoops7_instruction: 用你学到的知识来创建这幅图。
      courseD_artist_nestedLoops7_2018_instruction: 用你学到的知识来创建这幅图。
      courseD_artist_nestedLoops8_instruction: 用你在前几关学到的，从头创建这幅图。
      courseD_artist_nestedLoops8_2018_instruction: 用你在前几关学到的，从头创建这幅图。
      courseD_artist_nestedLoops9_instruction: "**挑战：**你能想出如何创建这样的图吗？"
      courseD_artist_nestedLoops9_2018_instruction: "** 挑战: ** 你能想出如何制作这样的照片吗？"
      courseD_artist_nestedLoops9_predict1_instruction: "** 挑战: ** 你能想出如何制作这样的照片吗？"
      courseD_artist_nestedLoops9_predict1_2018_instruction: "** 挑战: ** 你能想出如何制作这样的照片吗？"
      courseD_artist_nestedLoopsFP_instruction: 现在到你了。用你学到的技能，创造一些自己喜欢的东西吧！
      courseD_artist_nestedLoopsFP_2018_instruction: 现在到你了。用你学到的技能，创造一些自己喜欢的东西吧！
      courseD_artist_nestedLoopsPre1_instruction: 创建一个三角形来开始这个阶段。
      courseD_artist_nestedLoops_challenge1_instruction: 你能想出怎么制作出这样的照片吗？
      courseD_artist_nestedLoops_challenge1_2018_instruction: 你能想出怎么制作出这样的照片吗？
      courseD_artist_nestedLoops_challenge2_instruction: 你能想出怎么制作出这样的照片吗？
      courseD_artist_nestedLoops_challenge2_2018_instruction: 修复代码来制作这张图！
      courseD_artist_project1_instruction: '绘制一个小形状, 介于 ** 20 和50 **像素宽之间。 它可以是任何你喜欢的形状。  '
      courseD_artist_project1_2018_instruction: '绘制一个小形状, 介于 **20到50** 像素宽。 它可以是你喜欢的任何形状。  '
      courseD_artist_project1a_instruction: 画一个阶梯楼梯模式, 使用75和105度之间的角度来转弯。
      courseD_artist_project1a_2018_instruction: 使用75到105度之间的转弯来绘制阶梯图案。
      courseD_artist_project2_instruction: 现在用你选的形状在一行里连续画两或三个!
      courseD_artist_project2_2018_instruction: 现在用你选的形状连续画两或三个！
      courseD_artist_project2a_instruction: 现在, 转180度左右, 再次绘制楼梯图案!
      courseD_artist_project2a_2018_instruction: 现在, 转180度左右, 再次绘制楼梯图案!
      courseD_artist_project3_instruction: 让我们旋转那个形状的线吧!
      courseD_artist_project3_2018_instruction: 让我们旋转那个形状的线吧!
      courseD_artist_project3a_instruction: 在一个圆圈内旋转该形状大约5或6次。
      courseD_artist_project3a_2018_instruction: 在一个圆圈内旋转该形状大约5或6次。
      courseD_artist_project4_instruction: 是时候把这些形状分层了!
      courseD_artist_project4_2018_instruction: 是时候把这些形状分层了!
      courseD_artist_project4a_instruction: |-
        试着改动一下你所创造的东西。画任何你喜欢的东西! \r
        - 如果你在台阶上使用两个不同的角度, 会发生什么？\r
        - 如果你把你的钻石图案变长或变短, 会发生什么？\r
        - 如果把两片雪花叠起来是什么样的？
      courseD_artist_project4a_2018_instruction: |-
        试着改动一下你所创造的东西。画任何你喜欢的东西! \r
        - 如果你在台阶上使用两个不同的角度, 会发生什么？\r
        - 如果你把你的钻石图案变长或变短, 会发生什么？\r
        - 如果把两片雪花叠起来是什么样的？
      courseD_artist_project5_instruction: 玩一玩雪花功能!
      courseD_artist_project5_2018_instruction: 玩一玩雪花功能!
      courseD_artist_project_embedded_instruction: 这是你即将要做的!
      courseD_artist_ramp11_instruction: 现在用艺术家做一个正方形!
      courseD_artist_ramp12_instruction: 用你学过的东西在正方形里面画这个三角形。
      courseD_bee_conditionals1_instruction: 查看这朵云下面有没有一朵花。如果有花，就采花蜜。
      courseD_bee_conditionals10_instruction: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals10_2018_instruction: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals1_predict1_instruction: 看看云下是否有朵花。如果有一朵花, 就采集花蜜。
      courseD_bee_conditionals1_predict1_2018_instruction: 看看云下是否有朵花。如果有一朵花, 就采集花蜜。
      courseD_bee_conditionals2_instruction: '在采集花蜜前，检查每朵云下面是不是藏着一朵花。  '
      courseD_bee_conditionals2_2018_instruction: '在采集花蜜前，检查每朵云下面是不是有花。  '
      courseD_bee_conditionals2_test_instruction: '在采集花蜜前，检查每朵云下面是不是有花。  '
      courseD_bee_conditionals3_instruction: |-
        帮助蜜蜂采集所有的花蜜。
        \r
        \r
        只能从花中采到花蜜，但可以查看任何地方看那里是不是有朵花。
      courseD_bee_conditionals3_2018_instruction: |-
        Help the bee collect all of the
        nectar. \r
        \r
        You can only collect nectar from flowers, but you can check
        any space to see if there is a flower.
      courseD_bee_conditionals4_instruction: 使用尽可能少的模块来收集所有的花蜜。
      courseD_bee_conditionals4_2018_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      courseD_bee_conditionals5_instruction: 使用尽可能少的模块来收集所有的花蜜。
      courseD_bee_conditionals5_2018_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      courseD_bee_conditionals6_instruction: 有些云下面可能有蜂窝。 一定要检查是否有蜂窝藏在每朵云后面!
      courseD_bee_conditionals6_2018_instruction: |-
        Some of these clouds might have
        honeycombs under them.  Be sure to check if a honeycomb is hiding behind each
        cloud!
      courseD_bee_conditionals7_instruction: 使用`如果/否则`模块收集花朵的花蜜, 并在蜂窝里酿蜂蜜。
      courseD_bee_conditionals7_2018_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_predict2_instruction: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseD_bee_conditionals7_predict2_2018_instruction: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseD_bee_conditionals8_instruction: |-
        如果有花，收集花蜜。\r
        否则, 酿蜂蜜（因为那里有蜂窝）。
      courseD_bee_conditionals8_2018_instruction: |-
        如果有花，收集花蜜。\r
        否则, 酿蜂蜜（因为那里有蜂窝）。
      courseD_bee_conditionals9_instruction: 收集所有的花蜜或酿蜂蜜。
      courseD_bee_conditionals9_2018_instruction: 收集所有的花蜜或制作蜂蜜。
      courseD_bee_conditionals_challenge1_instruction: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals_challenge1_2018_instruction: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals_challenge2_instruction: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals_challenge2_2018_instruction: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals_challenge3_instruction: 收集所有的花蜜或制作蜂蜜。
      courseD_bee_debugging1_instruction: 修复错误来收集所有的花蜜。
      courseD_bee_debugging2_instruction: 修复错误来收集所有的花蜜。
      courseD_bee_debugging3_instruction: 修复错误来收集所有的花蜜并酿蜂蜜。
      courseD_bee_debugging4_instruction: 修复错误来酿蜂蜜。
      courseD_bee_debugging5_instruction: '挑战: 所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。'
      courseD_bee_debugging6_instruction: '挑战: 修复错误来收集所有的花蜜并酿蜂蜜。'
      courseD_bee_debugging9_instruction: 帮助蜜蜂修复代码, 获得所有的花蜜。
      courseD_bee_debugging_challenge1_instruction: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_bee_debugging_challenge1_2018_instruction: 看蜜蜂如何得到花蜜。你能用同一种模式来帮助蜜蜂酿造所有的蜂蜜吗？
      courseD_bee_debugging_challenge1a_instruction: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_bee_debugging_challenge2_instruction: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_bee_nestedLoops1_instruction: 帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops1_2018_instruction: |-
        Help the bee collect all of the
        nectar.
      courseD_bee_nestedLoops1a_instruction: 帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops1a_2018_instruction: |-
        Help the bee collect all of the
        nectar.
      courseD_bee_nestedLoops2_instruction: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_2018_instruction: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_predict1_instruction: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_predict1_2018_instruction: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops3_instruction: 收集每朵花的花蜜。
      courseD_bee_nestedLoops5_instruction: '收集每朵花的花蜜, 并在蜂巢里酿蜂蜜。 '
      courseD_bee_nestedLoops6_instruction: 酿花蜜。
      courseD_bee_nestedLoops6_2018_instruction: 只使用已有的模块把僵尸带到向日葵那里。
      courseD_bee_nestedLoops7_instruction: '挑战: 找出如何只使用现有模块得到所有的花蜜。'
      courseD_bee_nestedLoops7_2018_instruction: '挑战: 找出如何只用现有的模块得到所有的花蜜。'
      courseD_bee_nestedLoops8_instruction: '收集每朵花的花蜜, 并在蜂巢里酿蜂蜜。 '
      courseD_bee_nestedLoops8_2018_instruction: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops9_instruction: 酿蜂蜜。
      courseD_bee_nestedLoops9_2018_instruction: 酿蜂蜜。
      courseD_bee_nestedLoops9_predict2_instruction: 酿蜂蜜。
      courseD_bee_nestedLoops9_predict2_2018_instruction: 酿蜂蜜。
      courseD_bee_nested_loops_challenge1_instruction: |-
        让我们寻找宝藏
        - 使用循环！帮助收集器只使用工具箱中的模块来得到至少两堆宝藏。
      courseD_bee_nested_loops_challenge2_instruction: |-
        让我们寻找宝藏
        - 使用循环！帮助收集器只使用工具箱中的模块来得到至少两堆宝藏。
      courseD_bounce_embed_endgame_instruction: 使用左右箭头移动乒乓球拍。看看你的对手两次得分之前你能得到多少分!
      courseD_bounce_embedded_instruction: 在此处编写说明
      courseD_bounce_events1_instruction: 将一个模块附加到 "当按左键" 块中, 然后按 "运行" 将播放机移动到旗帜上。
      courseD_bounce_events10_instruction: 顶部有一个目标。添加 "得分点" 和 "得分对手点" 方块到"当球在球门" 和
        "当球错过桨" 方块，来做一个游戏。看看你能在对手得分两次之前得分多少分。
      courseD_bounce_events10s_instruction: '把 "得分点" 块加到“当球击中”的事件上。将 '' 对手得分点 '' 模块加到“球错过球拍”的事件上。这样来创建这个游戏。 '
      courseD_bounce_events10s_2018_instruction: '把 "得分点" 块加到“当球击中”的事件上。将 '' 对手得分点
        '' 模块加到“球错过球拍”的事件上。这样来创建这个游戏。 '
      courseD_bounce_events11_instruction: 现在可以将块附加到 "运行时" 块。你必须在一个以上的地方附加新的 "发射新球"
        块。此外, 尝试改变桨和球的场景或速度, 来看看你可以在你对手得到两倍的分数前得多少点。
      courseD_bounce_events11s_instruction: '在所有需要新球的游戏里面加上"扔出新球" 模块。 '
      courseD_bounce_events11s_2018_instruction: '在所有需要新球的游戏里面加上"扔出新球" 模块。 '
      courseD_bounce_events12_instruction: 创建自己的弹跳游戏。你可以改变所有的视觉效果和规则。完成后, 单击 "完成"
        ，让朋友在手机上试用您的游戏。
      courseD_bounce_events12s_instruction: 让这个游戏成为你自己的。你可以改变所有的视觉效果和规则。完成后, 单击 "完成",
        让朋友在手机上试用您的游戏。
      courseD_bounce_events12s_2018_instruction: 让这个游戏成为你自己的。你可以改变所有的视觉效果和规则。完成后,
        单击 "完成", 让朋友在手机上试用您的游戏。
      courseD_bounce_events1s_instruction: 将一个模块加到 "当按下左键时"模块下，并按 "运行" 将播放机移动到网上。
      courseD_bounce_events1s_2018_instruction: 将一个模块加到 "当按下左键时"模块下，并按 "运行" 将播放机移动到网上。
      courseD_bounce_events2_instruction: 将块附加到 "当按右键时" 和 "当按左键时"模块块。移动桨, 以达到两个完成目标。
      courseD_bounce_events2s_instruction: 现在, 在 "当向右时" 中附加一个方块, 这样手就可以够到两个篮子。
      courseD_bounce_events2s_2018_instruction: 现在, 在 `当向右时`中附加一个模块, 这样手就可以够到两个篮子。
      courseD_bounce_events3_instruction: 现在，尝试类似的做法用"当按上键时"块，来移动球拍到顶部目标。
      courseD_bounce_events3s_instruction: 现在，尝试类似的做法用"当按上键时"块，来移动球拍到顶部目标。
      courseD_bounce_events4_instruction: 这次你需要添加四个模块。移动球拍到所有四个目标来通关。
      courseD_bounce_events4s_instruction: 这次你需要添加四个模块。移动球拍到所有四个目标来通关。
      courseD_bounce_events5_instruction: 我们要向球拍发一个球。将一个模块附加到"当球击中球拍时"模块以确保球能到达目标。
      courseD_bounce_events5s_instruction: 将一个方块连接到 ' 当球击中手 ' 情景, 以确保球到达篮框。
      courseD_bounce_events5s_2018_instruction: 将一个方块连接到 ' 当球击中手 ' 情景, 以确保球到达篮框。
      courseD_bounce_events6_instruction: 现在完成的目标在最上面。您需要将模块附加到这两个"当球击中"模块中得以通过这关。
      courseD_bounce_events6s_instruction: 添加代码, 使球弹跳时, 可以击中墙壁, 这样你才可以通关。
      courseD_bounce_events6s_2018_instruction: 添加代码, 使球弹跳时, 可以击中墙壁, 这样你才可以通关。
      courseD_bounce_events7_instruction: 将模块附加到每个"当.... 时"中模块。弹起球，直到它击中目标。
      courseD_bounce_events7s_instruction: 加入声音模块，当你击中篮筐时, 网会发出沙沙声。当球没碰到你的手时, 哨子会响。弹起球,
        直到它击中完成目标。
      courseD_bounce_events7s_2018_instruction: 加入声音模块，当你击中篮筐时, 网会发出沙沙声。当球没碰到你的手时,
        哨子会响。弹起球, 直到它击中完成目标。
      courseD_collector_debugging1_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging1_2018_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging1a_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging1a_2018_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging2_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging2_2018_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging2a_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging2a_2018_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging3_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging3_2018_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging3a_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging3a_2018_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging4_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging4_2018_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging4a_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging4a_2018_instruction: 修复错误来收集所有的宝藏。
      courseD_collector_debugging5_instruction: 你需要的所有命令都已经在这里... 现在, 使用你的排错能力来找出如何解决这个难题。
      courseD_collector_debugging5_2018_instruction: 所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。
      courseD_collector_debugging5a_instruction: 你需要的所有命令都已经在这里... 现在, 使用你的排错能力来找出如何解决这个难题。
      courseD_collector_debugging5a_2018_instruction: 所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。
      courseD_collector_debugging6_instruction: '挑战: 使用您的排错技巧来修复错误并收集所有的宝藏。'
      courseD_collector_debugging6_2018_instruction: '挑战: 使用调试技巧来修复错误并收集所有的宝藏。'
      courseD_collector_debugging6a_instruction: '挑战: 使用工作区的代码得到至少 ** 6 ** 块宝藏!'
      courseD_collector_debugging6a_2018_instruction: '挑战: 使用工作区的代码得到至少 ** 6 ** 块宝藏!'
      courseD_collector_debugging7_instruction: '挑战: 所有你需要的命令已经在这里了... 现在, 使用您的排错技巧来找出如何解决这个难题。'
      courseD_collector_debugging_challenge2_instruction: 您是嵌套循环的专家吗？使用你所学到的收集所有的宝藏!
      courseD_collector_debugging_challenge2_2018_instruction: 您是嵌套循环的专家吗？使用你所学到的收集所有的宝藏!
      courseD_collector_nested_loops_challenge2_instruction: 帮助收藏家只使用你工具箱里的块来拿到至少两堆宝藏。这里可能收集到所有4堆。
      courseD_collector_nested_loops_challenge2_2018_instruction: 帮助收藏家只使用你工具箱里的块来拿到至少两堆宝藏。这里可能收集到所有4堆。
      courseD_collector_nested_loops_challenge2a_instruction: 帮助收藏家只使用你工具箱里的块来拿到至少两堆宝藏。这里可能收集到所有4堆。
      courseD_collector_ramp10_instruction: 帮助罗瑞尔收集所有的宝藏。
      courseD_collector_ramp8_instruction: 帮助罗瑞尔收集所有的宝藏。
      courseD_collector_ramp9_instruction: 帮助罗瑞尔收集所有的宝藏。
      courseD_collector_until_challenge1_instruction: 您是嵌套循环的专家吗？使用你所学到的收集所有的宝藏!
      courseD_debugging_1_instruction: 修复错误来收集所有的花蜜。
      courseD_debugging_2_instruction: 修复错误来收集所有的花蜜。
      courseD_debugging_3_instruction: 改正错误，从而能够采集所有花蜜，并酿成蜂蜜。
      courseD_debugging_4_instruction: 修复错误来酿蜂蜜。
      courseD_debugging_5_instruction: 挑战：所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。
      courseD_debugging_6_instruction: '挑战: 修复错误来收集所有的花蜜并酿蜂蜜。'
      courseD_farmer_condLoops1_instruction: 用条件来确保只有某处有玉米时，才捡起它。
      courseD_farmer_condLoops1_2018_instruction: 用条件来确保只有某处有玉米时，才捡起它。
      courseD_farmer_condLoops2_instruction: 帮助收割者从田里收集玉米和莴苣。
      courseD_farmer_condLoops2_2018_instruction: 帮助收割者从田里收集玉米和莴苣。
      courseD_farmer_condLoops3_instruction: '*"玉米、莴苣和南瓜！帮我全收集起来。"*'
      courseD_farmer_condLoops3_2018_instruction: '*"玉米、莴苣和南瓜！帮我全收集起来。"*'
      courseD_farmer_condLoops4_instruction: 在移动到下一捆之前，帮收割者先收集所有的莴苣。
      courseD_farmer_condLoops4_2018_instruction: 在移动到下一捆之前，帮收割者先收集所有的莴苣。
      courseD_farmer_condLoops4a_instruction: 在移动到下一捆之前，帮农夫先收集所有的莴苣。
      courseD_farmer_condLoops5_instruction: 收集所有的玉米和莴苣，然后最后去拿南瓜。
      courseD_farmer_condLoops5_2018_instruction: 收集所有的玉米和莴苣，然后最后去拿南瓜。
      courseD_farmer_condLoops6_instruction: 你能找出如何捡起所有的南瓜吗？确保沿着路收集所有的玉米！
      courseD_farmer_condLoops6_2018_instruction: 你能找出如何捡起所有的南瓜吗？确保沿着路收集所有的玉米！
      courseD_farmer_condLoops7_instruction: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops7_2018_instruction: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops8_instruction: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops8_2018_instruction: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_instruction: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_2018_instruction: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_predict1_instruction: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_predict1_2018_instruction: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops_challenge1_instruction: 收集所有的一切来过这关。每个隐藏的作物只有一个玉米或莴苣。
      courseD_farmer_condLoops_challenge1_2018_instruction: 收集所有的一切来过这关。每个隐藏的作物只有一个玉米或莴苣。
      courseD_farmer_condLoops_challenge2_instruction: 收集一切作物来通过这关。
      courseD_farmer_condLoops_challenge2_2018_instruction: 收集一切作物来通过这关。
      courseD_farmer_condLoops_challenge2_clone_instruction: 收集一切作物来通过这关。
      courseD_farmer_conditionals1_instruction: 向土堆移动，并用`移除`模块来移除它。
      courseD_farmer_conditionals10_instruction: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_conditionals2_instruction: 向土堆移动，并用`填满`模块来用6铲土填平它。
      courseD_farmer_conditionals3_instruction: 用尽可能少的模块来通过这关。
      courseD_farmer_conditionals4_instruction: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_conditionals5_instruction: '帮我移除所有的土。

'
      courseD_farmer_conditionals6_instruction: 使用`当`循环能够很容易的填满所有的洞。
      courseD_farmer_conditionals7_instruction: 填满每条路尽头的洞。
      courseD_farmer_conditionals8_instruction: '挑战：用尽可能少的模块来填满这些洞。 '
      courseD_farmer_conditionals9_instruction: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_until_challenge2_instruction: 使用 如果 或 否则 模块来跟着曲线路径前进。在每个转角, 在循环中使用
        "移走一个" 的命令来清除土堆。
      courseD_farmer_until_challenge2_2018_instruction: 使用 如果 或 否则 模块来跟着曲线路径前进。在每个转角,
        在循环中使用 "移走一个" 的命令来清除土堆。
      courseD_farmer_while1_instruction: 向土堆移动，并用`移除`模块来移除它。
      courseD_farmer_while10_instruction: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while10_2018_instruction: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while10_predict2_instruction: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while10_predict2_2018_instruction: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while1_2018_instruction: 向土堆移动，并用`移除`模块来移除它。
      courseD_farmer_while2_instruction: 向土堆移动，并用`填满`模块来用6铲土填平它。
      courseD_farmer_while2_2018_instruction: 向土堆移动，并用`填满`模块来用6铲土填平它。
      courseD_farmer_while3_instruction: 用尽可能少的模块来通过这关。
      courseD_farmer_while3_2018_instruction: 用尽可能少的模块来通过这关。
      courseD_farmer_while4_instruction: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_while4_2018_instruction: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_while4_predict1_instruction: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_while4_predict1_2018_instruction: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_while5_instruction: '帮我移除所有的土。 '
      courseD_farmer_while5_2018_instruction: '帮我移除所有的土。 '
      courseD_farmer_while6_instruction: 使用`当`循环能够很容易的填满所有的洞。
      courseD_farmer_while6_2018_instruction: 使用`当`循环能够很容易的填满所有的洞。
      courseD_farmer_while7_instruction: 填满每条路尽头的洞。
      courseD_farmer_while7_2018_instruction: 填满每条路尽头的洞。
      courseD_farmer_while8_instruction: '挑战：用尽可能少的模块来填满这些洞。 '
      courseD_farmer_while8_2018_instruction: '挑战：用尽可能少的模块来填满这些洞。 '
      courseD_farmer_while9_instruction: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while9_2018_instruction: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while_challenge1_instruction: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge1_2018_instruction: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge2_instruction: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge2_2018_instruction: 填补所有的洞, 并移走所有的土堆。
      courseD_harvester_nested_loops_challenge1-broken_instruction: '"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"'
      courseD_harvester_nested_loops_challenge1_instruction: '"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"'
      courseD_harvester_nested_loops_challenge1_2018_instruction: '"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"'
      courseD_iceage_loops1_instruction: 帮助斯奎特穿过冰去拿到橡子！
      courseD_iceage_loops10_instruction: 帮助斯奎特走过去拿到橡子！
      courseD_iceage_loops11_instruction: 帮助斯奎特得到橡子！
      courseD_iceage_loops12_instruction: 用各种方法来拿到橡子！
      courseD_iceage_loops2_instruction: 使用一个`向左转`模块来到达橡子！
      courseD_iceage_loops3_instruction: 你能只用一个`向前移动`模块来得到橡子吗？
      courseD_iceage_loops4_instruction: 再增加一个模块来让斯奎特走到橡子那里！
      courseD_iceage_loops6_instruction: 你能增加一个循环到达橡子吗？
      courseD_iceage_loops7_instruction: '斯奎特真的想要那个橡子！ '
      courseD_iceage_loops8_instruction: '你能修好这段代码吗？ '
      courseD_iceage_loops9_instruction: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseD_maze_loops_challenge1_instruction: 让我们来寻找宝藏 - 用循环！只用工具箱里的模块来帮助收藏家至少拿到两堆宝藏。
      courseD_maze_nestedLoops3_instruction: 用尽可能少的模块让僵尸到达向日葵。
      courseD_maze_nestedLoops3_2018_instruction: 用尽可能少的模块让僵尸到达向日葵。
      courseD_maze_nestedLoops4_instruction: '用尽可能少的模块让僵尸到达向日葵！  '
      courseD_maze_nestedLoops4_2018_instruction: '用尽可能少的模块让僵尸到达向日葵！  '
      courseD_maze_nestedLoops5_instruction: 用尽可能少的模块让僵尸到达向日葵！
      courseD_maze_nestedLoops5_2018_instruction: 用尽可能少的模块让僵尸到达向日葵！
      courseD_maze_nestedLoops6_instruction: 只使用已有的模块把僵尸带到向日葵那里。
      courseD_maze_nestedLoops6_2018_instruction: 只使用已有的模块把僵尸带到向日葵那里。
      courseD_maze_ramp1_instruction: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_maze_ramp1_2018_instruction: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_maze_ramp2_instruction: 将额外的 "向前移动" 块拖出工具箱, 然后将所有块附加到 "运行时" 以完成代码。
      courseD_maze_ramp2_2018_instruction: 将另一个`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_maze_ramp3_instruction: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseD_maze_ramp3_2018_instruction: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseD_maze_ramp4_instruction: 躲开TNT炸药，否则羽毛会被炸飞！
      courseD_maze_ramp4_2018_instruction: 躲开TNT炸药，否则羽毛会被炸飞！
      courseD_maze_ramp5_instruction: 躲开TNT炸药！
      courseD_maze_ramp5_2018_instruction: 躲开TNT炸药！
      courseD_maze_ramp5a_instruction: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_ramp5a_2018_instruction: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_ramp5b_instruction: 导航这个迷宫帮助鸟找到猪!
      courseD_maze_ramp5b_2018_instruction: 在这个迷宫中领航，帮助小鸟找到猪！
      courseD_maze_ramp5c_instruction: 帮小鸟到达猪那里。
      courseD_maze_ramp5c_2018_instruction: 帮小鸟到达猪那里。
      courseD_maze_ramp5d_instruction: 帮小鸟到达那只猪。
      courseD_maze_ramp5d_2018_instruction: 帮小鸟到达那只猪。
      courseD_maze_ramp6_instruction: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseD_maze_ramp6a_instruction: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseD_maze_ramp7_instruction: 帮小鸟到达那只猪！
      courseD_maze_until1_instruction: 帮愤怒的小鸟到达那只猪。
      courseD_maze_until10_instruction: 帮助僵尸到达向日葵。
      courseD_maze_until10_2018_instruction: 帮助僵尸到达向日葵。
      courseD_maze_until10_predict2_instruction: 帮助僵尸到达向日葵。
      courseD_maze_until10_predict2_2018_instruction: 帮助僵尸到达向日葵。
      courseD_maze_until1_2018_instruction: 帮愤怒的小鸟到达那只猪。
      courseD_maze_until2_instruction: 现在，用`重复直到`循环来做同样的事情，而不用指定需要多少次向前移动和转向。
      courseD_maze_until3_instruction: 帮小鸟到达那只猪。
      courseD_maze_until3_2018_instruction: 帮小鸟到达那只猪。
      courseD_maze_until4_instruction: 你能只使用已有的模块把僵尸带到向日葵那里吗？
      courseD_maze_until4_2018_instruction: 你能只使用已有的模块把僵尸带到向日葵那里吗？
      courseD_maze_until5_instruction: 用`如果`模块来帮助僵尸决定何时转弯，然后让僵尸到达向日葵那里。
      courseD_maze_until5_2018_instruction: 用`如果`模块来帮助僵尸决定何时转弯，然后让僵尸到达向日葵那里。
      courseD_maze_until6_instruction: 帮助僵尸到达向日葵。
      courseD_maze_until6_2018_instruction: 帮助僵尸到达向日葵。
      courseD_maze_until7_instruction: 帮助僵尸到达向日葵。
      courseD_maze_until7_2018_instruction: 帮助僵尸到达向日葵。
      courseD_maze_until8_instruction: 帮助僵尸到达向日葵。
      courseD_maze_until8_2018_instruction: 帮助僵尸到达向日葵。
      courseD_maze_until9_instruction: "**挑战：** 躲开食人花，让僵尸到达向日葵那里。"
      courseD_maze_until9_2018_instruction: "**挑战：** 躲开食人花，让僵尸到达向日葵那里。"
      courseD_maze_until_challenge_instruction: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_maze_until_challenge1-delete-this-copy_instruction: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_maze_until_challenge1_instruction: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_maze_until_challenge1_2018_instruction: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_maze_until_challenge2_instruction: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_pixelation_instruction: 用二进制来编码任何你喜欢的图形。二进制语言只用'0'和'1'来代表。
      courseD_playLab_cond1_instruction: 让海盗得到旗帜来通过这关。
      courseD_playLab_cond1_2018_instruction: 让海盗得到旗帜来通过这关。
      courseD_playLab_cond2_instruction: '每次海盗到龙那里的时候得一分。 '
      courseD_playLab_cond2_2018_instruction: '每次海盗到龙那里的时候得一分。 '
      courseD_playLab_cond3_instruction: '让龙的情绪每秒随机改变一次。  '
      courseD_playLab_cond3_2018_instruction: '让龙的情绪每秒随机改变一次。  '
      courseD_playLab_cond3a_instruction: 当Pegleg到达龙那里时, 如果龙是快乐的，得到2分, 否则1分。
      courseD_playLab_cond3a_2018_instruction: 当Pegleg到达龙那里时, 如果龙是快乐的，得到2分, 否则1分。
      courseD_playLab_cond3b_instruction: "1) 让龙在每一秒的随机情绪之间变化。 \\r \n2) 当 Pegleg 到达龙那里时,
        如果龙是快乐的，得到2分, 否则1分。"
      courseD_playLab_cond4_instruction: 添加一些代码，让忍者 (演员 3) 在游戏一开始就开始追逐海盗。 如果忍者抓住了海盗，游戏就以失败告终。
      courseD_playLab_cond4_2018_instruction: 添加一些代码，让忍者 (演员 3) 在游戏一开始就开始追逐海盗。 如果忍者抓住了海盗，游戏就以失败告终。
      courseD_playLab_cond5_instruction: 添加一个`一直重复`循环, 让它不断检查, 如果比分大于 5, 就以胜利结束此游戏。
      courseD_playLab_cond5_2018_instruction: 添加一个`一直重复`循环, 让它不断检查, 如果比分大于 5, 就以胜利结束此游戏。
      courseD_playLab_cond6_instruction: "1) 在设置忍者 (演员 3) 追逐海盗前，让他先慢下来。 \\r\n2) 如果海盗大于225像素时，设置忍者**逃离**海盗。否则,
        设置忍者 *追逐** 盗。  "
      courseD_playLab_cond6_2018_instruction: "1) 在设置忍者 (演员 3) 追逐海盗前，让他先慢下来。 \\r\n2)
        如果海盗大于225像素时，设置忍者**逃离**海盗。否则, 设置忍者 *追逐**海盗。  "
      courseD_playLab_cond6a_instruction: 如果海盗在安全区, 等一秒钟，如果他还停留在章鱼线之下，就扣除一分。
      courseD_playLab_cond6a_2018_instruction: 如果海盗在安全区, 等一秒钟，如果他还停留在章鱼线之下，就扣除一分。
      courseD_playLab_cond6cloneForTest_instruction: 正在测试
      courseD_playLab_condFP_instruction: 现在，创建你自己的游戏，给朋友们看看吧！
      courseD_playLab_condFP_2018_instruction: 现在，创建你自己的游戏，给朋友们看看吧！
      courseD_playLab_embedded_instruction: |-
        用箭头键移动海盗Pegleg。到达龙得分, 但要躲开忍者！站在章鱼线下面会使忍者停止追逐你, 但要当心! 你呆在那里的时间越长, 你失去的分数就越多。\r \r
        得到5分就能赢!
      courseD_scrat_ramp1_instruction: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_scrat_ramp1_2018_instruction: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_scrat_ramp2_instruction: 将额外的 "向前移动" 块拖出工具箱, 然后将所有块附加到 "运行时" 以完成代码。
      courseD_scrat_ramp2_2018_instruction: 将另一个`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_scrat_ramp3_instruction: 这儿有一个多余的模块将导致斯奎特崩溃。将其拖回工具箱扔掉。
      courseD_scrat_ramp3_2018_instruction: 这儿有一个多余的模块将导致斯奎特崩溃。将其拖回工具箱扔掉。
      courseD_scrat_ramp4_instruction: 绕开裂纹的冰来保持斯奎特的安全!
      courseD_scrat_ramp4_2018_instruction: 绕开裂纹的冰来保证斯奎特的安全！
      courseD_scrat_ramp5_instruction: 绕开破冰。
      courseD_scrat_ramp5_2018_instruction: 绕开破冰。
      courseD_scrat_ramp6_instruction: 使用循环帮助斯奎特得到橡子!
      courseD_scrat_ramp6_2018_instruction: 使用循环帮助斯奎特得到橡子!
      courseD_scrat_ramp7_instruction: 帮助斯奎特得到橡子！
      courseD_scrat_ramp7_2018_instruction: 帮助斯奎特得到橡子！
      courseD_scrat_ramp8_instruction: 用你学到的东西让斯奎特得到橡子!
      courseD_scrat_ramp8_2018_instruction: 用你学到的东西让斯奎特得到橡子!
      courseE_artist_concept1_instruction: '重新创建这幅图。 '
      courseE_artist_concept1_2018_instruction: '重新创建这幅图。 '
      courseE_artist_concept4_instruction: 重新创建这幅图。
      courseE_artist_concept4_2018_instruction: 重新创建这幅图。
      courseE_artist_concept_challenge1_instruction: '帮助小艺术家画出唯一的形状。 '
      courseE_artist_concept_challenge1_2018_instruction: '帮助小艺术家画出这副独特的图。 '
      courseE_artist_concept_challenge2_instruction: 使用下面的代码创建五个风车的设计。
      courseE_artist_concept_challenge2_2018_instruction: 使用下面的代码创建五个风车的设计。
      courseE_artist_embed_functions8_instruction: 仔细看这个关卡。要创建这样的设计，你看看需要什么样的函数。你很快就会自己动手做,
        所以如果你需要帮助就回到这里吧。
      courseE_artist_functions1_instruction: |-
        帮助僵尸艺术家画一个边长为100像素的眼镜。\r
        眼镜之间的桥梁长75像素。
      courseE_artist_functions10_instruction: 这次，用8个（25像素边长的）六边形的线。
      courseE_artist_functions10_2018_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseE_artist_functions1_2018_instruction: |-
        帮助僵尸艺术家画一个边长为100像素的眼镜。\r
        眼镜之间的桥梁长75像素。
      courseE_artist_functions2_instruction: '这一次, 使用`draw a square`（画一个正方形）函数来创建眼镜。 '
      courseE_artist_functions2_2018_instruction: '这一次, 使用`draw a square`（画一个正方形）函数来创建眼镜。 '
      courseE_artist_functions3_instruction: 可以通过添加重复模块来绘制此画。
      courseE_artist_functions3_2018_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseE_artist_functions4_instruction: 现在你能画一个星星了，试试画4个星星！
      courseE_artist_functions4_2018_instruction: |-
        Now that you can draw a star,
        try drawing four stars!
      courseE_artist_functions5_instruction: 只画3个星星来完成这关。
      courseE_artist_functions5_2018_instruction: |-
        Draw only those three stars to
        finish this puzzle.
      courseE_artist_functions6_instruction: 通过画一个正方形来制作这个窗口，然后在画另一个前转90度，等等。
      courseE_artist_functions6_2018_instruction: 画一个正方形来制作这个窗口，然后在画另一个前先转90度，以次类推。
      courseE_artist_functions7_instruction: 创建`画一个窗口`，然后调用它5次来通过这一关。小心门！
      courseE_artist_functions7_2018_instruction: 创建`画一个窗口`，然后调用它5次来通过这一关。小心门！
      courseE_artist_functions8_instruction: 挑战：创建你能想到的尽可能多的函数来画出这个50像素的正方形的图案。
      courseE_artist_functions8_2018_instruction: 挑战：创建你能想到的尽可能多的函数来画出这个50像素的正方形的图案。
      courseE_artist_functions9_instruction: 只用提供的模块来画出这个图。
      courseE_artist_functions9_2018_instruction: 只用提供的模块来画出这个图。
      courseE_artist_functions_challenge_instruction: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它!
        尝试此代码, 看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge1_instruction: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它!
        尝试此代码, 看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge1_2018_instruction: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它!
        尝试此代码, 看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge2_instruction: 试试此代码, 看看它是如何工作的, 然后试着自己编程!
      courseE_artist_functions_challenge2_2018_instruction: 试试此代码, 看看它是如何工作的, 然后试着自己编程!
      courseE_artist_ramp10_instruction: 现在, 将最后一个三角形的代码拖动到一个新的循环中, 将其旋转并制作一个雪花!
      courseE_artist_ramp11_instruction: 现在用艺术家做一个正方形!
      courseE_artist_ramp12_instruction: 用你学过的东西在正方形里面画这个三角形。
      courseE_artist_ramp8_instruction: 现在用艺术家做一个正方形!
      courseE_artist_ramp8_2_instruction: 现在用艺术家做一个正方形!
      courseE_artist_ramp8_2018_instruction: 现在用艺术家做一个正方形!
      courseE_artist_ramp8_2_2018_instruction: 现在用艺术家做一个正方形!
      courseE_artist_ramp9_instruction: 用你学过的画这个三角形。
      courseE_artist_ramp9_2_instruction: 用你学过的画这个三角形。
      courseE_artist_ramp9_2018_instruction: 用你学过的画这个三角形。
      courseE_artist_ramp9_2_2018_instruction: 用你学过的画这个三角形。
      courseE_bee_concept1_instruction: '从每朵花里收集所有的花蜜。用嵌套循环。 '
      courseE_bee_concept1_2018_instruction: 收集每朵花的花蜜。
      courseE_bee_concept2_instruction: '帮助蜜蜂酿制所有的蜂蜜。 '
      courseE_bee_concept2_2018_instruction: '帮助蜜蜂酿制所有的蜂蜜。

'
      courseE_bee_concept3_instruction: 使用尽可能少的模块来收集所有的花蜜。
      courseE_bee_concept3_2018_instruction: |-
        Collect all of the nectar using  as
        few blocks as possible.
      courseE_bee_concept4_instruction: 啊哦! 蜜蜂不确定它应该收集花蜜或还是酿制蜂蜜。你能帮它吗？
      courseE_bee_concept4_2018_instruction: 啊哦! 蜜蜂不确定它应该收集花蜜或还是酿制蜂蜜。你能帮它吗？
      courseE_bee_concept5_instruction: 你能帮助蜜蜂从花朵收集花蜜吗？
      courseE_bee_concept5_2018_instruction: 你能帮助蜜蜂从花朵收集花蜜吗？
      courseE_bee_functions1_instruction: 采集每一朵花的花蜜。
      courseE_bee_functions10_instruction: 通过创建一个函数, 帮助蜜蜂在回到主路径前得到所有的蜂蜜来解决这道关卡。
      courseE_bee_functions10_2018_instruction: 创建一个函数帮助蜜蜂在回到主路前得到所有的蜂蜜来过此关。
      courseE_bee_functions1_2018_instruction: 收集每朵花的花蜜。
      courseE_bee_functions2_instruction: 使用`收集2个花蜜`函数来收集每朵花的花蜜。
      courseE_bee_functions2_2018_instruction: 使用`收集2个花蜜`函数来收集每朵花的花蜜。
      courseE_bee_functions3_instruction: |-
        函数是由多个模块组合起来完成同一个任务。\r
        \r
        用“get 5”函数来一次得到5个花蜜。
      courseE_bee_functions3_2018_instruction: 构建`获取5个`函数, 以便在这个关卡中使用。
      courseE_bee_functions4_instruction: |-
        “移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r
        \r
        用这个函数收集所有的花蜜。
      courseE_bee_functions4_2018_instruction: |-
        “移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r
        \r
        用这个函数收集所有的花蜜。
      courseE_bee_functions5_instruction: 现在编写函数收集花的花蜜。
      courseE_bee_functions5_2018_instruction: 现在编写函数收集花的花蜜。
      courseE_bee_functions6_instruction: 创建一个函数, 并调用它来收集每朵花的花蜜, 并在每个蜂窝酿制蜂蜜。
      courseE_bee_functions6_2018_instruction: 创建一个函数, 并调用它来收集每朵花的花蜜, 并在每个蜂窝酿制蜂蜜。
      courseE_bee_functions6test_instruction: 创建一个函数, 并调用它来收集每朵花的花蜜, 并在每个蜂窝酿制蜂蜜。
      courseE_bee_functions7_instruction: 创建自己的函数，沿着路径往下走, 采集花蜜, 酿蜂蜜, 然后让蜜蜂返回到路径的顶端。收集所有的花蜜并酿制所有的蜂蜜!
      courseE_bee_functions7_2018_instruction: 创建自己的函数，沿着路径往下走, 采集花蜜, 酿蜂蜜, 然后让蜜蜂返回到路径的顶端。收集所有的花蜜并酿制所有的蜂蜜!
      courseE_bee_functions8_instruction: 创建一个函数, 收集每朵花的所有花蜜。
      courseE_bee_functions8_2018_instruction: 创建一个函数, 收集每朵花的所有花蜜。
      courseE_bee_functions9_instruction: 创建一个函数, 收集每朵花的所有花蜜。
      courseE_bee_functions9_2018_instruction: 创建一个函数, 收集每朵花的所有花蜜。
      courseE_bee_functions9b_instruction: 现在试试!
      courseE_bee_functions_challenge1_instruction: 你得自己独立接受这个挑战。这可能比看起来更难!
      courseE_bee_functions_challenge1_2018_instruction: 你得独立接受这个挑战。这可能比看起来更难!
      courseE_bee_functions_challenge2_instruction: 你得自己独立面对这个挑战。甜心！
      courseE_bee_functions_challenge2_2018_instruction: 你得独立接受这个挑战。酷毙了！
      courseE_bee_ramp14_instruction: 帮助蜜蜂沿着小路, 收集所有的蜂蜜和所有的花蜜。
      courseE_bee_ramp14_2018_instruction: |-
        Help the bee follow the path to gather
        all of the honey and all of the nectar.
      courseE_bee_ramp17_instruction: 用你所学的来解决这个关卡。
      courseE_collector_ramp10_instruction: 帮助罗瑞尔收集所有的宝藏。
      courseE_collector_ramp8_instruction: 帮助罗瑞尔收集所有的宝藏。
      courseE_collector_ramp9_instruction: 帮助罗瑞尔收集所有的宝藏。
      courseE_farmer_concept1_instruction: 你能写一个程序来填补这些洞直到地面平了吗？
      courseE_farmer_concept1_2018_instruction: 你能写一个程序来填补这些洞直到地面平了吗？
      courseE_farmer_concept2_instruction: 收集所有南瓜。
      courseE_farmer_concept2_2018_instruction: 收集所有南瓜。
      courseE_farmer_concept3_instruction: 填满每条路尽头的洞。
      courseE_farmer_concept3_2018_instruction: 填满每条路尽头的洞。
      courseE_farmer_concept4_instruction: 现在，让我们加深难度！我们已经将所有模块嵌套到另一个循环里了，但是你需要让小艺术家回来画下一行。哪些代码模块能放在最外层循环的下面来画出整个网格？
      courseE_farmer_functions1_instruction: 帮助收割者到达南瓜那里并采摘它。
      courseE_farmer_functions10_instruction: '没人知道这些芽会变成什么样子。 使用`如果`语句编写代码来检查和收割每一个庄稼。   '
      courseE_farmer_functions10b_instruction: 用新函数2 次来过关。
      courseE_farmer_functions10b_2018_instruction: 用新函数两次来过关。
      courseE_farmer_functions1_2018_instruction: 帮助收割者到达南瓜那里并采摘它。
      courseE_farmer_functions1a_instruction: 现在帮收割者采摘玉米，莴苣，**和** 南瓜。
      courseE_farmer_functions1a_2018_instruction: 现在帮收割者采摘玉米，莴苣，**和** 南瓜。
      courseE_farmer_functions2_instruction: |-
        现在, 每次运行该程序都会有不同数量的南瓜。\r
        \r
        使用 `当`模块只采集你需要的尽可能多的南瓜。
      courseE_farmer_functions2a_instruction: 在接下来的几个关卡中, 我们将检查大量的农作物方格。让我们把所有的东西都移到函数内使它更容易。
      courseE_farmer_functions2aALT_instruction: 在接下来的几个关卡中, 我们将检查大量的农作物方格。让我们把所有的东西都移到函数内使它更容易。
      courseE_farmer_functions2b_instruction: 帮助收割者采摘玉米和南瓜。
      courseE_farmer_functions2b_2018_instruction: 帮助收割者采摘玉米和南瓜。
      courseE_farmer_functions2ba_instruction: 帮助农民用 "玉米和南瓜" 的函数来采摘玉米和南瓜。
      courseE_farmer_functions2ba_2018_instruction: 帮助农民用`玉米和南瓜`函数来采摘玉米和南瓜。
      courseE_farmer_functions3_instruction: |-
        当去南瓜的路径是不同长度时会发生什么？ \r
        \r
        用尽可能少的模块来得到全部南瓜。
      courseE_farmer_functions3b_instruction: 现在帮农民采摘玉米，莴苣，**和** 南瓜。
      courseE_farmer_functions3c_instruction: 现在, 从代码中拉出模块并将它们放到 ** 函数定义 ** 中来填充函数。
      courseE_farmer_functions3c_2018_instruction: 现在, 从代码中拉出模块并将它们放到 ** 函数定义 ** 中来填充函数。
      courseE_farmer_functions4_instruction: |-
        很好！现在你有代码可以从任何大小的路径采摘南瓜。\r
        \r
        把代码拉进函数，这样可以让我们用不同的方法使用它...但首先让我们用它来再次过此关。
      courseE_farmer_functions4b_instruction: 用新函数来过关。
      courseE_farmer_functions4b_2018_instruction: 用新函数来过关。
      courseE_farmer_functions5_instruction: 你应该如何改动程序，来让这个函数能够用在每条路上？
      courseE_farmer_functions5a_instruction: 你应该如何改动程序，来让这个函数能够用在每条路上？
      courseE_farmer_functions5b_instruction: 这些庄稼都长成堆了。添加一些新的`当`循环到你的函数里，来确保能收集到所有的作物。
      courseE_farmer_functions5c_instruction: 你的函数能在这里派上用场。
      courseE_farmer_functions5c_2018_instruction: 你的函数能在这里派上用场。
      courseE_farmer_functions6_instruction: |-
        *"莴苣，试试一些新东西！"*\r
        \r
        这里有些代码来收集所有的莴苣。将它移动到一个函数里，一会儿再使用。
      courseE_farmer_functions6b_instruction: 捡起所有的作物。
      courseE_farmer_functions6c_instruction: 你需要添加什么样的程序来检查一个新芽是玉米还是莴苣？
      courseE_farmer_functions6c_2018_instruction: 你需要添加什么样的程序来检查一个新芽是玉米还是莴苣？
      courseE_farmer_functions7_instruction: 用你的函数来通过这一关。
      courseE_farmer_functions7b_instruction: 帮助收割者找到她的路，这些混乱的路径中左转右转能到达南瓜、玉米和莴苣。
      courseE_farmer_functions7b_2018_instruction: 帮助收割者找到她的路，这些混乱的路径中左转右转能到达南瓜、玉米和莴苣。
      courseE_farmer_functions8_instruction: "**挑战：** 用尽可能少的模块通过这关。"
      courseE_farmer_functions8b_instruction: "**挑战：** 用上一关中学到的方法收集所有的南瓜。 "
      courseE_farmer_functions8b_2018_instruction: "**挑战：** 用上一关中学到的方法收集所有的南瓜。 "
      courseE_farmer_functions9_instruction: 用条件来简化你的程序。
      courseE_farmer_functions9b_instruction: 你能找出解决这个关卡所需的规律吗？
      courseE_farmer_functions9b_2018_instruction: 你能找出解决这个关卡所需的规律吗？
      courseE_farmer_functions9b_clone_instruction: 你能找出解决这个关卡所需的规律吗？
      courseE_farmer_predict1_instruction: 摘下所有的莴苣(只在有莴苣的时候)。
      courseE_farmer_predict1_2018_instruction: |-
        Pick all of the lettuce (only while
        there is some to pick.)
      courseE_farmer_ramp11_instruction: 这个关卡也使用嵌套循环。 你知道是什么吗？
      courseE_farmer_ramp11a_instruction: 当有一堆土，移走它。
      courseE_farmer_ramp11a_2018_instruction: 当有一堆土，移走它。
      courseE_farmer_ramp11b_instruction: 当有一堆土，移走它。
      courseE_farmer_ramp11b_2018_instruction: 当有一堆土，移走它。
      courseE_farmer_ramp12_instruction: 现在使用嵌套循环来解决这个难题。
      courseE_farmer_ramp12_2018_instruction: 现在使用嵌套循环来解决这个难题。
      courseE_farmer_ramp12_forswap_instruction: 现在使用嵌套循环来解决这个难题。
      courseE_farmer_ramp12_forswap_2018_instruction: 现在，使用嵌套循环来通过这关。
      courseE_farmer_ramp12a_instruction: 帮助农民正确地行走在道路上, 收集所有的莴苣。
      courseE_farmer_ramp12a_2018_instruction: |-
        Help the farmer correctly travel
        the path to gather all of the lettuce.
      courseE_farmer_ramp12b_instruction: 当有莴苣的时候,，捡起莴苣！
      courseE_farmer_ramp12b_2018_instruction: 当有莴苣的时候,，捡起莴苣！
      courseE_farmer_ramp12c_instruction: 向前移动，直到到达莴苣, 然后用`当`循环来采摘。
      courseE_farmer_ramp12c_2018_instruction: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12d_instruction: 向前移动，直到到达莴苣, 然后用`当`循环来采摘。
      courseE_farmer_ramp12d_2018_instruction: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12e_instruction: 向前移动，直到到达莴苣, 然后用`当`循环来采摘。
      courseE_farmer_ramp12e_2018_instruction: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12f_instruction: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12f_2018_instruction: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12g_instruction: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12g_2018_instruction: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp13_instruction: 如果有玉米, 摘玉米, 在有莴苣的时候摘莴苣。
      courseE_farmer_ramp13_2018_instruction: |-
        Pick corn if there is corn, and pick
        lettuce while there is lettuce.
      courseE_farmer_ramp15_instruction: 仅使用可用的模块来解决此关卡。
      courseE_farmer_ramp15_2018_instruction: 仅使用可用的模块来解决此关卡。
      courseE_farmer_ramp16_instruction: "** 挑战: ** 用最少的块数解决这个关卡。"
      courseE_maze_predict1_instruction: 此代码包含一个新模块。如果你按下 "运行" 块, 你认为会发生什么？
      courseE_maze_predict1_2018_instruction: 此代码包含一个新模块。如果你按下 "运行" 块, 你认为会发生什么？
      courseE_maze_ramp1_instruction: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      courseE_maze_ramp13_instruction: 是时候解决最后一个关卡!
      courseE_maze_ramp1_2018_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      courseE_maze_ramp2_instruction: 将额外的 "向前移动" 块拖出工具箱, 然后将所有块附加到 "运行时" 以完成代码。
      courseE_maze_ramp2_2018_instruction: 将另一个`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseE_maze_ramp3_instruction: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseE_maze_ramp3_2018_instruction: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseE_maze_ramp4_instruction: 躲开TNT炸药，否则羽毛会被炸飞！
      courseE_maze_ramp4_2018_instruction: 躲开TNT炸药，否则羽毛会被炸飞！
      courseE_maze_ramp5_instruction: 躲开TNT炸药！
      courseE_maze_ramp5_2018_instruction: 躲开TNT炸药！
      courseE_maze_ramp6_instruction: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseE_maze_ramp6_2018_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      courseE_maze_ramp7_instruction: 使用你学会的，让小鸟飞到猪那里！
      courseE_maze_ramp7_2018_instruction: 使用你学会的，让小鸟飞到猪那里！
      courseE_maze_ramp_predict1_instruction: 此代码包含一个新模块。如果你按下 "运行" 块, 你认为会发生什么？
      courseE_multi_maze_ramp5_instruction: 躲开TNT炸药！
      courseE_playLab_challenge1_instruction: 当你得到足够的分数或者当你的积分不足时, 应该要有些后果。添加一些代码到
        ' 赢得游戏' 和 ' 输去游戏 ' 函数, 让游戏按应有的方式进行下去。\r 点击想法提示!
      courseE_playLab_challenge1_2018_instruction: |-
        当你有足够的分数，或者分数不够时，应该有一些后果。添加一些代码到`游戏胜利`和`游戏失败`函数中来确保游戏按照它y应该的方式进行。
        \r
        点击提示来获得一些主意！
      courseE_playLab_embedded_instruction: 这是一个你可以玩的例子游戏 。用你的方向键移动狗。当狗碰到一只猫时, 他得一分!
        得5分来赢得比赛!
      courseE_playLab_exampleProject2_instruction: 这是你用来选择卡片的代码 - 试试添加一些别的有趣的功能！
      courseE_playLab_scaffold1_instruction: 选择一个背景和地图，然后选择一个演员来作为你的游戏里的英雄。
      courseE_playLab_scaffold1_2018_instruction: 选择一个背景和地图，然后选择一个演员来作为你的游戏里的英雄。
      courseE_playLab_scaffold2_instruction: 用事件处理函数和行动来帮助你的英雄移动。
      courseE_playLab_scaffold2_2018_instruction: 用事件处理函数和行动来帮助你的英雄移动。
      courseE_playLab_scaffold3_instruction: 添加两个或更多的演员到你的游戏中，并让它们移动。
      courseE_playLab_scaffold3_2018_instruction: 添加两个或更多的演员到你的游戏中，并让它们移动。
      courseE_playLab_scaffold4_instruction: 找一些有趣的方法来改变游戏的分数。让分数不为零，然后再继续。
      courseE_playLab_scaffold4_2018_instruction: 找一些有趣的方法来改变游戏的分数。让分数不为零，然后再继续。
      courseE_playLab_scaffold5_instruction: 现在花点时间来确保游戏是按你所要的方式作业。包括赢或输游戏的方法, 然后继续玩,
        直到你遇到这些条件其中之一。
      courseE_playLab_scaffold5_2018_instruction: 现在，花一些时间来让游戏按照你想的方式运行。包括游戏失败或胜利的方法，然后玩游戏，直到某个条件达成。
      courseE_playLab_scaffold6_instruction: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      courseE_playLab_scaffold6_2018_instruction: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      courseE_playlab_challenge2_instruction: 你能想出这个 "算命先生" 应用程序是如何工作的吗？单击 "更多" 以查看您的挑战。
      courseE_playlab_variables_challenge2_instruction: 你能想出这个 "算命先生" 应用程序是如何工作的吗？单击
        "更多" 以查看您的挑战。
      courseE_video_createFunctions_instruction: 我们还没有创建函数的视频。这是一个占位符。。。
      courseE_video_createFunctions2_instruction: 我们还没有创建函数的视频。这是一个占位符。。。
      courseE_video_createFunctions2_2018_instruction: 我们还没有创建函数的视频。这是一个占位符。。。
      courseE_video_createFunctions_2018_instruction: 我们还没有创建函数的视频。这是一个占位符。。。
      courseF_IceAge_1_instruction: 通过把 "演员1说"模块拽出来并连接到 "当运行时" 事件的底部帮助 喜得 说 "你好!",
      courseF_IceAge_10_instruction: 使用 "演员 __ 抛出" 命令让 喜得 (演员 1) 把心扔向格瑞尼 (演员 2), 并设置格瑞尼的心情,
        让她在被击中时高兴。
      courseF_IceAge_11_instruction: '是时候创造你自己的游戏或故事了! '
      courseF_IceAge_2_instruction: 帮助曼尼和喜得使用的 ' 演员 _____ 说 ' 块两次互相打招呼, 。
      courseF_IceAge_3_instruction: 斯奎特 在找他的橡子! 你能帮他移动最后200像素吗？
      courseF_IceAge_4_instruction: 当迭戈发现曼尼时, 通过将一个方块连接到 "当演员触碰" 事件时播放声音。
      courseF_IceAge_5_instruction: 通过反复左右移动来帮助格瑞尼锻炼身体。
      courseF_IceAge_6_instruction: '你能帮喜得在你点击他的时候呼叫他的朋友们吗？ '
      courseF_IceAge_7_instruction: 写代码, 帮助 斯奎特 得到所有的橡子!
      courseF_IceAge_8_instruction: '你能完成这个程序, 当希德和奶奶相撞时，你可以同时 ** 播放一个声音 ** 和 ** 得分
        **吗？

'
      courseF_IceAge_9_instruction: 改变场景为一个冰冷的背景并设置 喜得的 (演员 1) 速度为快。
      courseF_IceAge_template_instruction: 写代码, 帮助 斯奎特 得到所有的橡子!
      courseF_artist_embed_for7_instruction: 请按 "运行" 以查看程序如何执行的! 这个用计数循环。
      courseF_artist_embed_variables9_instruction: 点击“运行”来看程序如何运行
      courseF_artist_for1_instruction: 试验`计数循环`，并试试`counter`（计数器）变量。
      courseF_artist_for10_instruction: 自由发挥：试试用`counter`（计数器）变量和其它画图元素来画出这样的神奇的图画。
      courseF_artist_for10_2018_instruction: |-
        Free Play: Try using the `counter`
        variable with other drawing elements to make magical images like this one.
      courseF_artist_for1_2018_instruction: 试验`计数循环`，并试试`counter`（计数器）变量。
      courseF_artist_for2_instruction: 创建这堆边长从50到100像素的三角形。
      courseF_artist_for2_2018_instruction: 创建这堆边长从50到100像素的三角形。
      courseF_artist_for3_instruction: '这些三角形的边长从20像素到200像素，并且每个三角形比上一个大20像素。 '
      courseF_artist_for3_2018_instruction: "These triangles go from 20 pixel sides\nto
        200 pixel sides, and each triangle is 20 pixels larger than the last. "
      courseF_artist_for4_instruction: '这些正方形从15像素长开始。最大的是300像素长，每个都比上一个大15像素。

'
      courseF_artist_for4_2018_instruction: '这些正方形从15像素长开始。最大的是300像素长，每个都比上一个大15像素。 '
      courseF_artist_for5_instruction: 只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？
      courseF_artist_for5_2018_instruction: 只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？
      courseF_artist_for6_instruction: 从上一关的代码开始重新创建，但需要转89度来让正方形产生一点螺旋。
      courseF_artist_for6_2018_instruction: 从上一关的代码开始重新创建，但需要转89度来让正方形产生一点螺旋。
      courseF_artist_for7_instruction: 将上一关的代码做三个小小的改动来画出这个！
      courseF_artist_for7_2018_instruction: |-
        Make three small changes to the code
        from the last level to get this!
      courseF_artist_for8_instruction: 将角度改小为72度来得到一个螺旋状的五边形。
      courseF_artist_for8_2018_instruction: |-
        Take the angle down to 72 degrees to
        get a spiraled pentagon.
      courseF_artist_for9_instruction: |-
        **灵感：** 用 Use the counter inside
        the `set alpha` block to get this faded center.`set alpha`（设置透明度）模块中的计数器来获得淡出的中心。
      courseF_artist_for9_2018_instruction: |-
        **灵感：** 用 Use the counter inside
        the `set alpha` block to get this faded center.`set alpha`（设置透明度）模块中的计数器来获得淡出的中心。
      courseF_artist_for_Template_instruction: 尝试使用上一关卡的一些代码, 但转向89度来创建这个扭曲的方形螺旋。
      courseF_artist_for_Template_2018_instruction: 尝试使用上一关卡的一些代码，但转向89度来创建这个扭曲的方形螺旋。
      courseF_artist_for_challenge1_instruction: 你能想出如何重新创建这幅画吗？
      courseF_artist_for_challenge1_2018_instruction: 你能想出如何重新创建这幅画吗？
      courseF_artist_for_challenge2_instruction: 你能想出如何用一个循环来重新创建这个绘图吗？
      courseF_artist_for_challenge2_2018_instruction: 你能想出如何使用一个简单的循环来重新创建这幅画吗？
      courseF_artist_fwp1_instruction: 编辑函数 "绘制正方形" 来查找缺陷。
      courseF_artist_fwp1_2018_instruction: 编辑函数`draw a square`（画一个正方形）来查找缺陷。
      courseF_artist_fwp2_instruction: 编辑函数以接收一个叫做 "长度" 的参数。
      courseF_artist_fwp2_2018_instruction: 编辑函数以接收一个叫做 "长度" 的参数。
      courseF_artist_fwp2_predict1_instruction: 编辑函数以接收一个叫做 "长度" 的参数。
      courseF_artist_fwp2_predict1_2018_instruction: |-
        Edit the function to accept
        a parameter called `length`.
      courseF_artist_fwp3_instruction: 创建一个名为 "绘制正方形" 的函数, 并使用它用参数来来描这四个盒子。
      courseF_artist_fwp3_2018_instruction: 创建一个名为 "绘制正方形" 的函数, 并使用它用参数来来描这四个盒子。
      courseF_artist_fwp4_instruction: 编辑此函数，为多边形的边数添加参数。
      courseF_artist_fwp4_2018_instruction: 编辑此函数，添加一个多边形边数的参数。
      courseF_artist_fwp5_instruction: '使用最后一个关卡中的函数来绘制这一系列形状。  '
      courseF_artist_fwp5_2018_instruction: '使用最后一个关卡中的函数来绘制这一系列形状。  '
      courseF_artist_fwp6_instruction: '挑战: 用 "长度" 和 "边" 参数来编辑"画一个螺旋边缘"函数, 然后重新创建这些形状。'
      courseF_artist_fwp6_2018_instruction: '挑战: 用`length`（长度）和`sides`（边长）参数来编辑`画一个螺旋边缘`函数,
        然后重新创建这些形状。'
      courseF_artist_fwp7_instruction: 完成' 画一个螺旋边缘 ' 的函数, 也需要求一个最小长度为中心的螺旋。
      courseF_artist_fwp7_2018_instruction: 完成`画一个螺旋边缘`的函数来要求螺旋的中心也需要一个最小长度。
      courseF_artist_fwp8_instruction: 你能想出如何使用刚才创建的函数来绘制这个图吗？
      courseF_artist_fwp8_2018_instruction: 你能想出如何使用刚才创建的函数来绘制这个图吗？
      courseF_artist_fwp9_instruction: '自由发挥: 画一些很棒的东西！ 调整笔的宽度来看看画出来的图像有什么不同！'
      courseF_artist_fwp9_2018_instruction: '自由发挥: 画一些很棒的东西！ 调整笔的宽度来看看画出来的图像有什么不同！'
      courseF_artist_fwp_challenge1_instruction: 你能弄清楚它是如何工作的吗？
      courseF_artist_fwp_challenge1_2018_instruction: 你能弄清楚这个程序是如何工作的吗？
      courseF_artist_fwp_challenge2_instruction: 用你在上一关卡中学到的东西来画这样的图像。
      courseF_artist_fwp_challenge2_2018_instruction: 用你在上一关卡中学到的东西来画这样的图像。
      courseF_artist_ramp10_instruction: 现在, 将最后一个三角形的代码拖动到一个新的循环中, 将其旋转并制作一个雪花!
      courseF_artist_ramp10_2018_instruction: 现在, 将最后一个三角形的代码拖动到一个新的循环中, 将其旋转并制作一个雪花!
      courseF_artist_ramp8_instruction: 现在用艺术家做一个正方形!
      courseF_artist_ramp8_2018_instruction: 现在用艺术家做一个正方形!
      courseF_artist_ramp9_instruction: 用你学过的画这个三角形。
      courseF_artist_ramp9_2018_instruction: 用你学过的画这个三角形。
      courseF_artist_variables1_instruction: 让我们画一个等边三角形, 每边长刚好是50个像素。
      courseF_artist_variables10_instruction: '这是最后一个关卡中的代码。请尝试以其他方式编辑该变量。  '
      courseF_artist_variables10_2018_instruction: '这是最后一个关卡中的代码。请尝试以其他方式编辑该变量。  '
      courseF_artist_variables2_instruction: '现在画出三个三角形, 让它们彼此挨着。   '
      courseF_artist_variables2_2018_instruction: '现在画出三个三角形, 让它们彼此挨着。   '
      courseF_artist_variables3_instruction: 将长度50移动到一个变量中，这样我们能在下面几关用到它。
      courseF_artist_variables3_2018_instruction: 将长度50移动到一个变量中，这样我们能在下面几关用到它。
      courseF_artist_variables4_instruction: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables4_2018_instruction: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables5_instruction: 在代码的末尾添加另一组循环来再增加三个三角形。这次，向前移动，并向上！
      courseF_artist_variables5_2018_instruction: 在代码的末尾添加另一组循环来再增加三个三角形。这次，向前移动，并向上！
      courseF_artist_variables6_instruction: '现在，让三角形是60像素宽，并跳60像素。  '
      courseF_artist_variables6_2018_instruction: '现在，让三角形是60像素宽，并跳60像素。  '
      courseF_artist_variables6a_instruction: 用80像素边长的正方形来制作这个图案，并且在每个之间，让小艺术家跳过80像素。
      courseF_artist_variables6a_2018_instruction: 用80像素边长的正方形来制作这个图案，并且在每个之间，让小艺术家跳过80像素。
      courseF_artist_variables7_instruction: '画一个150像素边长的三角形。

'
      courseF_artist_variables7_2018_instruction: '画一个150像素边长的三角形。 '
      courseF_artist_variables8_instruction: 用上一关的来重建这个三角形的代码，但这次用`设置长度为`模块，来在循环的末尾处重置`length`（长度）变量为`length`+10。
      courseF_artist_variables8_2018_instruction: 用上一关的来重建这个三角形的代码，但这次用`设置长度为`模块，来在循环的末尾处重置`length`（长度）变量为`length`+10。
      courseF_artist_variables9_instruction: 看看当你重复上一关的代码30次, 而不是3次会是什么结果! 你可以选择任何颜色的线条或图案。
      courseF_artist_variables9_2018_instruction: 看看当你重复最后一个关卡的代码30次, 而不是3次会是什么结果!
        你可以选择任何颜色的线条或图案，
      courseF_artist_variablesFP_instruction: "**自由发挥：** 用你学到的知识来创建自己的图画。 "
      courseF_artist_variablesFP_2018_instruction: "**自由发挥：** 用你学到的知识来创建自己的图画。 "
      courseF_artist_variables_10_instruction: '这是上一关的代码。试着用其它方式来编辑变量。  '
      courseF_artist_variables_2_instruction: |
        现在用另一个循环来画这相邻的三个三角形。\r
        你可以嵌套上一关的代码。\r
      courseF_artist_variables_5_instruction: 在代码的末尾添加另一组循环来再增加三个三角形。这次，向前移动，并向上！
      courseF_artist_variables_6_instruction: |-
        不好！我们实际上需要三角形是60像素宽，并且跳50像素。\r
        你不想使用一个变量吗？
      courseF_artist_variables_6a_instruction: 用80像素边长的正方形来制作这个图案，并且在每个之间，让小艺术家跳过80像素。
      courseF_artist_variables_9_instruction: |-
        看看当你重复上一关的代码30次, 而不是3次会是什么结果！\r
        \r
        你可以选择任何颜色的线条或图案。
      courseF_artist_variables_FP_instruction: |-
        **自由发挥：** 用你学会的知识来创建自己的图画。 \r
        \r
        怎样使用变量来创建正方形，五边形或六边形？
      courseF_artist_variables_challenge1_instruction: 你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      courseF_artist_variables_challenge1_2018_instruction: 你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      courseF_artist_variables_challenge1a_instruction: 现在你已经学到了做这个模样需要的所有东西! 这个关卡本来就很困难。
        你能坚持下去直到你找到解决办法吗？
      courseF_artist_variables_challenge2_instruction: 现在你已经学到了做这个模样需要的所有东西!
      courseF_artist_variables_challenge2_2018_instruction: 现在你已经学到了做这个图案需要的所有东西！
      courseF_artistembed_variables9_instruction: 看看当你重复最后一个关卡的代码30次, 而不是3次会是什么结果!
        你可以选择任何颜色的线条或图案，
      courseF_bee_conditionals10_instruction: 收集所有的花蜜并制作蜂蜜。
      courseF_bee_conditionals10_2018_instruction: 收集所有的花蜜并制作蜂蜜。
      courseF_bee_conditionals1_predict1_instruction: 看看云下是否有朵花。如果有一朵花, 就采集花蜜。
      courseF_bee_conditionals1_predict1_2018_instruction: 看看云下是否有朵花。如果有一朵花, 就采集花蜜。
      courseF_bee_conditionals2_instruction: '在采集花蜜前，检查每朵云下面是不是有花。  '
      courseF_bee_conditionals2_2018_instruction: '在采集花蜜前，检查每朵云下面是不是有花。  '
      courseF_bee_conditionals3_instruction: '帮助蜜蜂收集所有的花蜜。

'
      courseF_bee_conditionals3_2018_instruction: '帮助蜜蜂收集所有的花蜜。 '
      courseF_bee_conditionals4_instruction: 使用尽可能少的模块来收集所有的花蜜。
      courseF_bee_conditionals4_2018_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      courseF_bee_conditionals5_instruction: 使用尽可能少的模块来收集所有的花蜜。
      courseF_bee_conditionals5_2018_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      courseF_bee_conditionals7_predict2_instruction: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseF_bee_conditionals7_predict2_2018_instruction: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseF_bee_conditionals8_instruction: |-
        如果有花，收集花蜜。\r
        否则, 酿蜂蜜（因为那里有蜂窝）。
      courseF_bee_conditionals8_2018_instruction: |-
        如果有花，收集花蜜。\r
        否则, 酿蜂蜜（因为那里有蜂窝）。
      courseF_bee_for1_instruction: 用尽可能少的模块来从每朵花里收集花蜜。
      courseF_bee_for10_instruction: "**挑战：** 用你学会的关于`计数循环`循环的知识来试着解决这个问题。 "
      courseF_bee_for10_2018_instruction: "**Challenge:** Take what you've learned\nabout
        `for` loops and try to solve this problem. "
      courseF_bee_for11_instruction: 你应该增加多少来收集15，然后12，然后9，6，3个花蜜？
      courseF_bee_for11_2018_instruction: |-
        What should your increment be to collect
        15, then 12, then 9, 6, 3 nectar?
      courseF_bee_for1_2018_instruction: 用尽可能少的模块来从每朵花里收集花蜜。
      courseF_bee_for2_instruction: 写出代码来帮助蜜蜂收集所有的花蜜。
      courseF_bee_for2_2018_instruction: 写出代码来帮助蜜蜂收集所有的花蜜。
      courseF_bee_for3_instruction: 用`计数循环`循环和`counter`（计数器）变量来通过这关，看看你的代码能写多短。
      courseF_bee_for4_instruction: 帮助蜜蜂收集所有的花蜜。
      courseF_bee_for4_2018_instruction: Help the bee collect all of the nectar.
      courseF_bee_for5_instruction: 使用`counter`（计数器）变量两次来通过这关。
      courseF_bee_for5_2018_instruction: 使用`counter`（计数器）变量两次来通过这关。
      courseF_bee_for6_instruction: 通过从5到1每次减1，来收集花蜜。
      courseF_bee_for6_2018_instruction: 通过从5到1每次减1，来收集花蜜。
      courseF_bee_for7_instruction: 通过每次增加2来收集所有的花。
      courseF_bee_for7_2018_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      courseF_bee_for8_instruction: 你已经明白了！应该递增多少来收集3，6，9，12，15个花蜜？
      courseF_bee_for8_2018_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for9_instruction: 用`counter`（计数器）变量来用尽可能少的模块来走过这个花园。
      courseF_bee_for9_2018_instruction: |-
        Use the `counter` variable to navigate
        this garden with the fewest number of blocks possible.
      courseF_bee_for_challenge1_instruction: '用`计数循环`来收集所有的花蜜。 '
      courseF_bee_for_challenge1_2018_instruction: '用`计数循环`来收集所有的花蜜。 '
      courseF_bee_for_challenge2_instruction: 使用尽可能少的模块来解决这个关卡。
      courseF_bee_for_challenge2_2018_instruction: 使用尽可能少的模块来解决这个关卡。
      courseF_bee_for_challenge3_instruction: 使用尽可能少的模块来解决这个关卡。
      courseF_bee_functions2_instruction: 使用`只收集花蜜`函数来收集每朵花的花蜜。
      courseF_bee_functions2_2018_instruction: 使用`只收集花蜜`函数来收集每朵花的花蜜。
      courseF_bee_functions3_instruction: 点击 "编辑" 把代码放入`只酿蜂蜜`函数，然后用它来通过这个关卡。
      courseF_bee_functions3_2018_instruction: 点击 "编辑" 把代码放入`只酿蜂蜜`函数，然后用它来通过这个关卡。
      courseF_bee_functions3a_instruction: 如果蜜蜂在一朵花上, 写一个能得到花蜜的函数, 否则它会得到蜂蜜。 使用您的函数来解决这个关卡！
      courseF_bee_functions3a_2018_instruction: 写一个函数，如果蜜蜂在一朵花上就采花蜜，否则就酿蜂蜜。用函数来通过这关！
      courseF_bee_functions4_instruction: |-
        “移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r
        \r
        用这个函数收集所有的花蜜。
      courseF_bee_functions4_2018_instruction: |-
        “移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r
        \r
        用这个函数收集所有的花蜜。
      courseF_bee_functions5_instruction: 现在编写函数来采花蜜。
      courseF_bee_functions5a_instruction: 使用 "移动和检查" 函数来收集所有的花蜜。
      courseF_bee_functions5a_2018_instruction: 使用`移动和检查`函数来收集所有的花蜜。
      courseF_bee_functions6_instruction: 帮助蜜蜂通过在花那里左转和蜂窝那右转来穿过迷宫。
      courseF_bee_functions6_2018_instruction: 帮助蜜蜂通过在花那里左转，并在蜂窝那里右转来穿过迷宫。
      courseF_bee_functions7_instruction: 从最后一个关卡重建你的函数, 来解决这个迷宫。
      courseF_bee_functions7_2018_instruction: 从最后一个关卡重建你的函数, 来通过这个迷宫。
      courseF_bee_functions8a_instruction: 收集所有的花蜜或酿造所有的蜂蜜!
      courseF_bee_functions8a_2018_instruction: 收集所有的花蜜或酿造所有的蜂蜜!
      courseF_bee_functionsPre7_instruction: 现在尝试构建一个函数来解决这个迷宫。 这和上次有什么不同？
      courseF_bee_functionsPre7_2018_instruction: 现在尝试构建一个函数来通过这个迷宫。 这和上次有什么不同？
      courseF_bee_functions_challenge1_instruction: 创建一个新的函数, 当前方有路的时候，收集所有的花蜜和蜂蜜。
      courseF_bee_functions_challenge1_2018_instruction: 创建一个新的函数，当前方有路的时候，收集所有的花蜜和蜂蜜。
      courseF_bee_functions_challenge2_instruction: 用你所学的来解决这个关卡。
      courseF_bee_functions_challenge2_2018_instruction: 用你所学的来完成这个关卡！
      courseF_bee_functions_challenge2_recursion_instruction: 收集所有的花蜜或酿造所有的蜂蜜!
      courseF_bee_fwp2_instruction: 将此代码拉入一个函数, 然后调用该函数以检查此行是否有花蜜。
      courseF_bee_fwp2_2018_instruction: 将此代码拉入一个函数, 然后调用该函数以检查此行是否有花蜜。
      courseF_bee_fwp3_instruction: 让我们看看这个函数是否能使收集这三行花蜜变得更加容易。
      courseF_bee_fwp3_2018_instruction: 让我们看看这个函数是否能使收集这三行花蜜变得更加容易。
      courseF_bee_fwp4_instruction: 向函数中添加一个 "长度" 参数, 以便它在该行的长度不同时仍能正常工作。
      courseF_bee_fwp4_2018_instruction: 向函数中添加一个`length`（长度）参数, 以便它在该行的长度不同时仍能正常工作。
      courseF_bee_fwp5_instruction: 使用此函数收集花蜜。
      courseF_bee_fwp5_2018_instruction: 使用此函数收集花蜜。
      courseF_bee_fwp6_instruction: 为这个关卡建立一个简短而甜美的解决方案。
      courseF_bee_fwp6_2018_instruction: 为这个关卡建立一个简短而优美的解决方案。
      courseF_bee_fwp7_instruction: "** 挑战: ** 修改你的函数也来制作蜂蜜。"
      courseF_bee_fwp7_2018_instruction: "** 挑战: ** 修改你的函数也能酿蜂蜜。"
      courseF_bee_fwp8_instruction: 使用你的新函数来解决这个螺旋。
      courseF_bee_fwp8_2018_instruction: 使用你的新函数来解决这个螺旋。
      courseF_bee_fwp9_instruction: 使用你的新函数来通关。
      courseF_bee_fwp9_predict1_instruction: 用新函数来过关。
      courseF_bee_fwp9_predict1_2018_instruction: 用新函数来过关。
      courseF_bee_fwp_challenge1_instruction: 使用一个有`length`（长度）参数的函数，并在里面使用`计数循环`来收集所有玉米。
      courseF_bee_fwp_challenge1_2018_instruction: 使用一个有`length`（长度）参数的函数，并在里面使用`计数循环`来收集所有玉米。
      courseF_bee_fwp_challenge2_instruction: '使用一个有`length`（长度）参数的函数，并在里面使用`计数循环`来收集每一行的蔬菜。 '
      courseF_bee_fwp_challenge2_2018_instruction: '使用一个有`length`（长度）参数的函数，并在里面使用`计数循环`来收集每一行的蔬菜。 '
      courseF_farmer_ramp11_instruction: 这个关卡也使用嵌套循环。 你知道是什么吗？
      courseF_farmer_ramp11_2018_instruction: 这个关卡也使用嵌套循环。 你知道是什么吗？
      courseF_maze_predict1_instruction: 此代码包含一个新模块。如果你按下 "运行" 块, 你认为会发生什么？
      courseF_maze_ramp13_instruction: 是时候把它都放在一起，来玩一关新的愤怒的小鸟了！
      courseF_maze_ramp15_instruction: 使用你学会的，让小鸟飞到猪那里！
      courseF_maze_ramp4_instruction: 躲开TNT炸药，否则羽毛会被炸飞！
      courseF_maze_ramp4_2018_instruction: 躲开TNT炸药，否则羽毛会被炸飞！
      courseF_maze_ramp5_instruction: 躲开TNT炸药！
      courseF_maze_ramp5_2018_instruction: 躲开TNT炸药！
      courseF_maze_ramp6_instruction: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseF_maze_ramp6_2018_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      courseF_maze_ramp7_instruction: 使用你学会的，让小鸟飞到猪那里！
      courseF_playlab_embed_vars_instruction: 回答 Pegleg 海盗的问题。如果输入代号 "密码" 会发生什么情况？或者其他的代码名称呢？
      courseF_playlab_variables0_instruction: 这是一个海盗。近来，他非常难以理解！
      courseF_playlab_variables1_instruction: 这是一个海盗。近来，他非常难以理解！
      courseF_playlab_variables1a_instruction: 变量能够用来存放晚一些想用的文本。通过将这个文本赋值给`shout`（喊叫）变量，让足球运动员琪琪喊出："进球了！"
      courseF_playlab_variables1a_2018_instruction: 变量能够用来存放晚一些想用的文本。通过将这个文本赋值给`shout`（喊叫）变量，让足球运动员琪琪喊出："进球了！"
      courseF_playlab_variables2_instruction: '现在，通过只在两处改变这些变量的值，就能解码海盗的语言！\r

'
      courseF_playlab_variables2a_instruction: '现在，通过只在两处改变这些变量的值，就能解码海盗的语言！\r

'
      courseF_playlab_variables2b RYAN CLONE_instruction: 把变量“color”（颜色）放在“join”（加入）模块的空插槽中来把它放到这句话的中间。
      courseF_playlab_variables2b_instruction: 通过将变量`color`（颜色）插入`连接`模块的空位中，来把它插入句子的中间。
      courseF_playlab_variables2b_2018_instruction: 把变量“color”（颜色）放在“join”（加入）模块的空插槽中来把它放到这句话的中间。
      courseF_playlab_variables3_instruction: 这个`问`模块会自动的将用户的答案存放到你选择的变量中。
      courseF_playlab_variables3b_instruction: '帮助琪琪和布赖恩对话，使用变量`age`（年龄）来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables3bEdit_instruction: '帮助琪琪和布赖恩对话，使用变量`A1`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables3b_josh_instruction: '帮助琪琪和布赖恩对话，使用变量`age`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables3b_josh_2018_instruction: '帮助琪琪和布赖恩对话，使用变量`age`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables4_instruction: 你能在工具箱中找到正确的变量放到这个空位中吗？
      courseF_playlab_variables4b_instruction: 将变量放到正确的位置来创建这个对话。
      courseF_playlab_variables4b_2018_instruction: 将变量放到正确的位置来创建这个对话。
      courseF_playlab_variables5_instruction: 你能在工具箱中找到正确的变量放到这个空位中吗？
      courseF_playlab_variables5b_instruction: 将所有的变量放到正确的位置来让海盗的故事合乎情理。
      courseF_playlab_variables5c RYAN Copy_instruction: 让我们把`问`模块和一个`如果/否则`语句组合起来做一个游戏！
      courseF_playlab_variables5c_instruction: 让我们把`问`模块和一个`如果/否则`语句组合起来来做一些有趣的事情！
      courseF_playlab_variables5c_2018_instruction: 让我们把`问`模块和一个`如果/否则`语句组合起来来做一些有趣的事情！
      courseF_playlab_variables6b_instruction: 将变量连接起来，制作一个有多个对话泡泡的有趣的故事。
      courseF_playlab_variables6c_instruction: 在这一阶段的剩余部分，我们要建立一个由你来控制的游戏！
      courseF_playlab_variables6c_2018_instruction: 在这一阶段的剩余部分，我们要建立一个由你来控制的游戏！
      courseF_playlab_variables7b_instruction: 创建一些问题，并将答案编织在一起做成你自己的故事。
      courseF_playlab_variables7b_2018_instruction: 创建一些问题，并将答案编织在一起做成你自己的故事。
      courseF_playlab_variables7c_instruction: 通过让用户来猜颜色，来让这个游戏有点意思。
      courseF_playlab_variables7c_2018_instruction: 通过让用户来猜颜色，来让这个游戏做点什么。
      courseF_playlab_variables8b_instruction: 用你学会的知识，来创建一个演员之间的即兴表演。
      courseF_playlab_variables8c_instruction: 使用变量来使你的游戏更个性化。
      courseF_playlab_variables8c_2018_instruction: 使用变量来使你的游戏更个性化。
      courseF_playlab_variables_challenge1_instruction: '使用这些模块使演员分享一个敲门问答的笑话。 '
      courseF_playlab_variables_challenge1_2018_instruction: '使用这些模块使演员分享一个敲门问答的笑话。 '
      courseF_playlab_variables_challenge2_instruction: |-
        这个游戏将使用变量来保存得分。捉住小猫得2分。捉住企鹅得3分。
        当小猫和企鹅碰到时，分数就没了。正好得到10分时就赢了！
      courseF_playlab_variables_challenge2_2018_instruction: 这个游戏将使用变量来保存得分。捉住小猫得2分。捉住企鹅得3分。当小猫和企鹅碰到时，分数就没了。正好得到10分时就赢了！
      courseF_playlab_variables_challenge3_instruction: 你能想出这个 "算命先生" 应用程序是如何工作的吗？单击
        "更多" 以查看您的挑战。
      courseF_video_createFunctions_instruction: 我们还没有创建函数的视频。这是一个占位符。。。
      courseF_video_createFunctions_2018_instruction: 我们还没有创建函数的视频。这是一个占位符。。。
      course_playlab_variables1_instruction: |-
        This is Pirate Pegleg.  He's awfully
        hard to understand these days!
      course_playlab_variables2_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      course_playlab_variables3_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      coursea_maze_ramp1_2018_instruction: 在这一关中，将所有模块拼到一起，并点击"运行"！
      coursef_explore_CYOA_Witch_instruction: 你可以在游戏实验室做任何你想做的事! 下面是一个在游戏实验室中选择自己的冒险故事的例子。
      coursef_explore_playlab2_instruction: 你可以在剧本实验室做任何你想做的事! 下面是一个在剧本实验室中故事的例子。
      coursef_explore_playlab_cat_game_instruction: 你可以在剧本实验室做任何你想做的事! 下面是一个在剧本实验室里游戏的例子。
      coursef_maze_ramp3_instruction: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      coursef_maze_ramp3_2018_instruction: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      drawings!_instruction: |-
        Draw the equilateral triangle - all the sides are the
        same!
      eventsIntro_instruction: Need a better playlab/events combo
      flappy_1_instruction: 将一个模块附加到"单击时"模块上，然后按"运行"。单击或点击屏幕去移动Flappy到目标.
      flappy_11_instruction: 创建你自己的Flappy游戏。你可以改变所有的有视效果，所有的规则，甚至重力。当你完成后，单击完成，让朋友在他们手机上试试你的手机游戏。
      flappy_11_2018_instruction: 创建你自己的像素鸟游戏。你可以改变所有的有视效果，所有的规则，甚至重力。当你完成后，单击完成，让朋友在他们手机上试试你的手机游戏。
      flappy_1_2018_instruction: 将一个模块附加到"单击时"模块上，然后按"运行"。单击或点击屏幕去移动像素鸟到目标.
      flappy_2_instruction: 现在我们已经添加了一些地面。将一个块附加到"撞到地面时"块。当Flappy 撞地时，您的代码需要 ' 结束游戏
        '。
      flappy_2_2018_instruction: 现在我们已经添加了一些地面。将一个块附加到"撞到地面时"块。当像素鸟撞地时，您的代码需要 ' 结束游戏
        '。
      flappy_3_instruction: "“运行时”块允许你在游戏开始时运行你的代码. 尝试设置水平速度和扑向目标。"
      flappy_3_2018_instruction: "“运行时”块允许你在游戏开始时运行你的代码. 尝试设置水平速度和扑向目标。"
      flappy_4_instruction: Flappy将会穿越障碍，除非你编写代码使他碰撞上。将一个模块附加到"当击中一个障碍"块。当Flappy 撞上到第一组管道时，您的代码需要
        ' 结束游戏 '。
      flappy_4_2018_instruction: Flappy将会穿越障碍，除非你编写代码使他碰撞上。将一个模块附加到"当击中一个障碍"块。当Flappy
        撞上到第一组管道时，您的代码需要 ' 结束游戏 '。
      flappy_5_instruction: 让我们添加一个记分牌。当 Flappy 穿过障碍计分数。将添加到"当通过一个障碍"块，然后当 Flappy
        通过第一个管道后得分。
      flappy_5_2018_instruction: 让我们添加一个记分牌。当 Flappy 穿过障碍计分数。将添加到"当通过一个障碍"块，然后当像素鸟通过第一个管道后得分。
      flappy_6_instruction: 在使得 Flappy 飞得距离更小或更大之后，看看是否你仍然能得分。
      flappy_6_2018_instruction: 在使得像素鸟飞的距离更小或更大之后，看看是否你仍然能得分。
      flappy_7_instruction: 接下来, 请尝试将另一个块附加到"运行时"块来更改场景.
      flappy_7_2018_instruction: 接下来, 请尝试将另一个块附加到"运行时"块来更改场景.
      flappy_8_instruction: 不只是在游戏开始时，您可以随时设置的视觉效果。请尝试在其他事件发生时设置一个随机场景，例如，在通过障碍时。
      flappy_8_2018_instruction: 不只是在游戏开始时，您可以随时设置的视觉效果。请尝试在其他事件发生时设置一个随机场景，例如，在通过障碍时。
      flappy_9_instruction: 现在我们要把前面学的全部混在一起啦，当击中一个障碍物，请尝试把分数设置回0分，而不是将游戏结束。
      flappy_9_2018_instruction: 现在我们要把前面学的全部混在一起啦，当击中一个障碍物，请尝试把分数设置回0分，而不是将游戏结束。
      frozen circle function in circle_instruction: 现在让我们创建20个交叠的圆圈，在每个圆圈之间转18度。
      frozen circle function with parameter_instruction: 这里有一个“创建圆圈”的模块，可以画不同大小的圆圈。你可以用它来创建一个5像素的小圆圈和10像素的大圆圈吗?
      frozen circle function_instruction: 使用新的"创建一个圆"块来创建 10 个相互重叠的圆圈。画圈之间别忘了跳一下哦。
      frozen circle_instruction: 圆形是一种特殊的形状. 你可以想出什么数字能取代问号来画出圆形吗?
      frozen cross rotate dense_instruction: 让我们重复90次！ 360里有多少个90？提示：这是一个非常小的数目。
      frozen cross rotate_instruction: 现在请尝试将它重复10次。每行之间需要转动多少度呢？
      frozen cross_instruction: 将这些命令放到“重复”模块里来画一个加号。你注意到爱莎可以前后移动了吗？
      frozen diamond mini snowflake_instruction: 你知道每个雪花的形状都不同吗？让我们用另一个循环来重复平行四边形4次来创建一个新的雪花。在每个平行四边形之间转90度。
      frozen diamond snowflake_instruction: 现在，让我们用重复模块重复10次来创建一个新的雪花。每个平行四边形之间向右转36度。
      frozen diamond_instruction: 将这些模块放到一个重复模块里来创建一个平行四边形。它和长方形很像，但是角度不同。这个平行四边形的角是60度和120度，而正方形的所有角度都是90度。
      frozen freeplay_instruction: 你已经正式成为艺术大师！创建一个冬季仙境。
      frozen line_instruction: 你好！我是艾伦代尔的艾莎公主。请你帮我画一条直线。
      frozen perpendicular_instruction: 现在，看看我们能否画两条之间是90度的直线。你需要用到“转向”和“移动”模块。
      frozen snowflake branch_instruction: 试试用“创建雪花分支”模块来创建三个分支，来让它看起来像一片雪花。
      frozen snowflake full_instruction: 现在，让我们把它重复8次，变成一个漂亮的雪花！
      frozen snowflower_instruction: 错综复杂的雪花模式可以用非常简单的形状来创建。 你可以重复5个大小为5的圆圈和5个大小为10的圆圈来做成一个模式吗?
      frozen square iterative_instruction: 我们好像已经成功地绘制了正方形的一小半了。来，我们一起把4条线组合起来绘制一个完整的正方形。
      frozen square loop 3x_instruction: 让我们绘制三个正方形，每绘制一个正方形后，别忘了先转120度后再继续绘制下一个正方形。
      frozen square loop_instruction: 你好！我是艾伦代尔的安娜公主！我们一起应用“重复“块绘制一个正方形。这样一来，我们可以减少必须使用的代码块。你觉得“重复”块必须循环多少次（???）才能让里面的代码块绘制出一个正方形呢？
      frozen square snowflake_instruction: 你可以试试绘制一朵雪花。用“重复”块绘制10个正方形，而且记得在绘制成每个正方形移之后，先把它移转36度后才开始画下一个正方形。
      grade1_adventurer_loops1_instruction: Four piles of gold!  Collect all four.
      grade1_adventurer_loops10_instruction: |-
        Help me get all of the gold from this
        cave.
      grade1_adventurer_loops2_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `E -->` block?
      grade1_adventurer_loops3_instruction: |-
        Can you fix Laurel's path to get all
        of this gold?
      grade1_adventurer_loops4_instruction: "Add to the code from the last puzzle\nto
        get all of the gold. "
      grade1_adventurer_loops5_instruction: |-
        What should you add to this code to
        get all of the gold?
      grade1_adventurer_loops6_instruction: Write the code to get all of this gold.
      grade1_adventurer_loops7_challenge_instruction: |-
        **Challenge: ** The gold goes
        all the way down these stairs!  Write the code to help me get it all.
      grade1_adventurer_loops8_challenge_instruction: |-
        Challenge: Try this staircase
        now! It has an extra spike at the end you'll have to climb.
      grade1_adventurer_loops9_instruction: |-
        Help me get the gold from this deep
        valley.
      grade1_adventurer_loopsFP_instruction: |-
        Eureka!  Collect as much gold as you
        can!
      grade1_adventurer_loopsPre_instruction: |-
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      grade1_artist_loops1_instruction: |-
        The Artist is trying to draw a line six
        times, but can't get it right.  Can you help?
      grade1_artist_loops2_instruction: |-
        Help the artist draw a line 7 times to make
        a garden wall.
      grade1_artist_loops3_instruction: "Now we need to get the soil ready to plant.\nFind
        the bugs in the code and help the artist prepare the ground. "
      grade1_artist_loops4_instruction: |-
        Time to fix the stairs!  Repeat this pattern
        five times so the artist can reach the top of the bushes.
      grade1_artist_loops5_instruction: |-
        Behind the bushes there is a beautiful vine
        full of flowers.  Can you climb the vine and see where it goes?
      grade1_artist_loops6_instruction: |-
        **Challenge:**  It's a hidden garden! Let's
        walk around.
      grade1_artist_loops7_instruction: |-
        The flowers down here are so pretty.  Let's
        take a closer look.
      grade1_artist_loops7a_instruction: |-
        **Challenge:**  Lovely! Let's take a walk
        around the garden.
      grade1_artist_loops7b_instruction: |-
        Time to head home. Can you fix this ladder
        to help the artist get down?
      grade1_artist_loops8_instruction: |-
        Let's take the short way home, over the
        pond. Can you help the artist stay on the stones?
      grade1_artist_loops9_instruction: I still need a story for this puzzle
      grade1_artist_loopsFP_instruction: |-
        Use what you have learned to draw a picture
        of what you think the artist saw when he got home.
      grade1_maze_sequence1_instruction: 修改代码来让我到达那只猪！
      grade1_maze_sequence10_instruction: 移动我绕过炸药，来到达那只猪。
      grade1_maze_sequence2_instruction: 修改代码来让我到达那只猪！
      grade1_maze_sequence3_instruction: |
        Can you add 2 blocks to get the bird to
        the pig.
      grade1_maze_sequence4_instruction: Now try this puzzle from the start!
      grade1_maze_sequence5_instruction: |-
        Move one way, then another to get me to
        the pig!
      grade1_maze_sequence6_instruction: |-
        Figure out what is missing and then add
        blocks to get me to the pig!
      grade1_maze_sequence7_instruction: |-
        Your turn!  What do you need to do to get
        the bird to the pig?
      grade1_maze_sequence8_instruction: |-
        Debug this level by adding blocks to get
        me to the pig!
      grade1_maze_sequence9_instruction: 'Go around the TNT to get me to the pig!

'
      grade1_maze_sequenceA_instruction: 挑战：移动我绕过炸药，来到达那只猪。
      grade1_maze_sequenceB_instruction: Fix the bugs to get the bird to the pig.
      grade1_maze_sequenceC_instruction: It's all you!  Get the bird to the pig.
      grade1_maze_sequenceD_instruction: 'It''s a pig party!  Get those pigs! '
      grade1_playlab_events1_instruction: |-
        This game is called "Play Lab".  See
        if you can figure out what each block does.
      grade1_playlab_events1a_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      grade1_playlab_events2_instruction: |-
        This program makes Robin fly.  Can you
        get her to vanish when you click her?
      grade1_playlab_events2a_instruction: |-
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      grade1_playlab_events3_instruction: |
        This program makes Robin fly.  Can you
        make the robot jump when you press the up button?\r
      grade1_playlab_events3a_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade1_playlab_events4_instruction: |-
        Add a block to make Robin vanish when
        she collides with the robot.
      grade1_playlab_events4a_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade1_playlab_events5_instruction: |-
        Add a block to the 'when run' event
        that starts the dragon flying.
      grade1_playlab_events5a_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      grade1_playlab_events6_instruction: |-
        Add a block to the 'when actor 1 clicked'
        event that makes the dragon return to the middle of the screen.
      grade1_playlab_events7_instruction: |-
        Add a block so that when you push the
        left arrow button, the knight surges toward the dragon.
      grade1_playlab_events8_instruction: |-
        Add a block so that when the knight collides
        with the dragon, it plays a sound.
      grade1_playlab_events9 RYAN COPY_instruction: |-
        Now, have Robin wait a second,
        then come back after she vanishes.
      grade1_playlab_events9_instruction: |-
        Now, add a block to keep score each time
        the knight hits the dragon.
      grade1_playlab_eventsFP_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      grade1_sequence_pre_instruction: |-
        Play with these blocks to see what they make
        the bird do!
      grade1_video_frustrationRainbow_instruction: |-
        This video describes the rainbow
        of frustration and introduces persistence.
      grade2_CaringForNewPet_0_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      grade2_CaringForNewPet_1_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox to finish your code.
      grade2_CaringForNewPet_10_instruction: 帮我到达那只猪。
      grade2_CaringForNewPet_11_instruction: |-
        "Keep calm and help me find the bad
        pig."
      grade2_CaringForNewPet_2_instruction: |-
        "This pig is ruffling my feathers."\r
        \r
        There
        is one extra block that is going to cause the bird to crash. Throw it away
        by dragging it back to the toolbox.
      grade2_CaringForNewPet_2courseC_maze_programming3_instruction: 有一个额外的块将导致小鸟坠落。将其拖回工具箱中扔掉它。
      grade2_CaringForNewPet_3_instruction: |-
        "Trace the path and lead me to the
        silly pig. Avoid TNT or feathers will fly!"
      grade2_CaringForNewPet_3D_instruction: |-
        "Follow this path to get me to the
        pig!"
      grade2_CaringForNewPet_4_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      grade2_CaringForNewPet_5_instruction: 帮我到达那只猪。
      grade2_CaringForNewPet_6_instruction: |-
        Challenge: Guide me to the green evilness!
        (Watch out for TNT)
      grade2_CaringForNewPet_7D_instruction: |-
        Challenge: This code has a lot of bugs.
        You'll need to remove blocks and add blocks.
      grade2_MakeDogTag_1_instruction: |-
        Drag blocks onto the screen to have the artist
        draw over the grey lines in the picture. (Each line is 100 pixels long)
      grade2_MakeDogTag_10_instruction: 现在，随便画你喜欢的东西吧！
      grade2_MakeDogTag_2_instruction: |-
        This spaceship needs a window!\r
        \r
        Each
        side of the inner square is 100 pixels and all of the angles are 90 degrees.
      grade2_MakeDogTag_3_instruction: 帮我为小猫盖好房子
      grade2_MakeDogTag_4_instruction: 这个房子需要一个屋顶！提示：所有三面都具有相同的长度。
      grade2_MakeDogTag_5_instruction: |-
        "Now a tag for Belle!"\r
        \r
        Draw this
        diamond with 200 pixel sides.
      grade2_MakeDogTag_6_instruction: 自己玩吧！想画什么就画什么。
      grade2_MakeDogTag_7_instruction: |-
        One more tag.  This is a triangle for Pi.\r
        (Each
        side is 150 pixels)
      grade2_MakeDogTag_8_instruction: 现在，让我们把这一堆V用循环连在一起。
      grade2_MakeDogTag_9_instruction: |-
        Rebuild the code from the last puzzle, but
        this time, add a left turn of 30 degrees inside the loop. Now, repeat it 24
        times instead of 8.
      grade2_MakeDogTag_BFP_instruction: |-
        "Hi, I'm an artist. You can write code
        to make me draw almost anything."\r
        \r
        Play with the blocks in the toolbox
        to see what they do!
      grade2_MakeDogTag_FP_instruction: |-
        Freeplay: What shape will you make the tag
        for your pet?
      grade2_PuppyLoops_1_instruction: |-
        Can you get me to the pig using 5 of the
        same kind of blocks?
      grade2_PuppyLoops_10_instruction: |-
        我的老师说应该有始有终！\r
        \r
        帮我完成我的风车。你能找出哪里错了吗？
      grade2_PuppyLoops_2_instruction: |-
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_PuppyLoops_3_instruction: |-
        Get me to the pig! Solve this puzzle by creating
        a loop!
      grade2_PuppyLoops_4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_PuppyLoops_5_instruction: 你能找到最快的路来帮我到那只猪那里吗？
      grade2_PuppyLoops_6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence to get me to the pig?
      grade2_PuppyLoops_7_instruction: 用你学会的知识让我到达向日葵那里！
      grade2_PuppyLoops_8_instruction: |-
        这只猫的三条胡须的代码是错误的。
        \r
        \r
        修改代码来画出一样长的胡须。
      grade2_PuppyLoops_9_instruction: |-
        代码里面的这个“C”看起来像是画反了！\r
        \r
        你能把它再改成“C”吗？
      grade2_collector_10_instruction: 快要完成了！收集尽可能多的宝藏来完成这个阶段！
      grade2_collector_10_2018_instruction: 快要完成了！收集尽可能多的宝藏来完成这个阶段！
      grade2_collector_2_instruction: 把罗瑞尔移到宝藏上, 然后用`收集`来捡起来。
      grade2_collector_3_instruction: 将这些模块正确的排列起来，收集所有的黄金来过关。
      grade2_collector_4_instruction: 顺序问题！你需要的模块都在工作区了，但没有连接起来。将这些模块排好顺序来过关。
      grade2_collector_5_instruction: 这些模块的顺序不对。你能修好它们吗？
      grade2_collector_6_instruction: 重新排列模块来收集所有的宝藏。
      grade2_collector_7_instruction: 挑战关！用工具箱的模块来收集所有的宝藏。
      grade2_collector_8_instruction: '"继续保持良好的工作! 帮我收集所有的金币。"'
      grade2_collector_9_instruction: '*"让我们得到所有的金币！*'
      grade2_collector_9a_instruction: "** 挑战: ** 收集所有的硬币。"
      grade2_collector_A_instruction: 帮助罗瑞尔收集所有的宝藏。
      grade2_collector_A_2018_instruction: 帮助罗瑞尔收集所有的宝藏。
      grade2_collector_pre1_instruction: |-
        "嗨，我是罗瑞尔。今天，我到狗公园里寻宝！" \r
        \r
        试试这些模块来看看是否你能帮助罗瑞尔收集一些金子。
      grade2_maze_debuggingFP_instruction: |-
        "Now, help me sneak up on the pig any
        way you want to!"
      grade2_maze_debuggingPre_instruction: |-
        Play with these blocks to see what they
        make the bird do!
      grade2_maze_intro10_instruction: Solve this puzzle.
      grade2_maze_intro2_instruction: |-
        Welcome to Code Studio! Here you will learn
        to use blocks to build programs. Press `Run` to run a program now!
      grade2_maze_intro3_instruction: |-
        The `workspace` is where you will create all
        of your programs. Can you guess what this program does? Press the “Run” button
        to find out.
      grade2_maze_intro4_instruction: |-
        Drag a block from the toolbox into the workspace.
        Connect it to the other blocks.
      grade2_maze_intro6_instruction: "That’s it!  Now we’re ready to try to solve\na
        few puzzles. "
      grade2_maze_intro7_instruction: This time, try something a bit more challenging.
      grade2_maze_intro8_instruction: |-
        This is a challenge puzzle.  It is meant to
        be hard and will probably take you a couple of tries to solve.  If you don’t
        solve it after several tries, don’t worry!  It will be in the Play Zone at
        the end of the stage and you can try it again when you’ve had more practice.
      grade2_maze_intro9_instruction: Solve this puzzle.
      grade2_playlab_project_1_instruction: 现在，写一个程序，用上/下/左/右按键使企鹅到达所有目标！
      grade2_playlab_project_2_instruction: 利用"一直重复"块，你就可以重复不断地执行代码。您可以再连接一些块来使恐龙迪诺（演员2）反复向上向下移动吗？
      grade2_playlab_project_3_instruction: |-
        Can you have Waddles (actor 1) say "Ouch!"
        and play a "hit" sound if he runs into Chomp? \r
        \r
        When you're done,
        play the game to make that happen.
      grade2_playlab_project_4_instruction: 添加一个模块，在企鹅碰到奥克塔维亚（演员3）时得1分？\r然​​后试玩一下，用箭头移动企鹅直到得分！
      grade2_playlab_project_5_instruction: |-
        Add blocks to the `when run` event to
        change the background and the speed of Waddles.\r
        \r
        Play the game and move
        Waddles with the arrows until you score.
      grade2_playlab_project_6_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends.
      grade2_puppy_loops2_instruction: |-
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_puppy_loops3_instruction: |-
        "Get me to the pig!"\r
        \r
         Solve this
        puzzle by creating a loop!
      grade2_puppy_loops4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_puppy_loops5_instruction: 帮到到达那只猪。
      grade2_puppy_loops6_instruction: |-
        "This pig is ruffling my feathers!"\r
        \r
        Loops
        even work with more than one block inside!  Can you loop this sequence?
      grade2_puppy_loops7_instruction: |-
        "Get me to the pig!"\r
        \r
        Use what you
        learned in other puzzles!
      grade3_AboutMyRobot_1_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      grade3_AboutMyRobot_2_instruction: |-
        Edit the code so that when the second bird
        is clicked, your program plays a sound!
      grade3_AboutMyRobot_3_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade3_AboutMyRobot_4_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade3_AboutMyRobot_5_instruction: |-
        About My Robot Project! Write code so that
        clicking on each bird shows a new fact about your robot.
      grade3_AboutMyRobot_TeacherIDo_instruction: |-
        Run this puzzle and click on the
        robot to see what happens!
      grade3_ConditionalsElse_1_instruction: 云朵挡住了我的视线！检查一下云下面是否有花，然后只从有花的地方收集花蜜。小心，它是能变化的！
      grade3_ConditionalsElse_2_instruction: |-
        更多的云！\r
        \r
        检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。\r
        \r
        记住：
        不是所有云下面都是一样的东西！
      grade3_ConditionalsElse_3_instruction: |-
        Now I just want to make honey. Some
        of these clouds might have honeycombs under them. Be sure to check each cloud!
      grade3_ConditionalsElse_4_instruction: 有时云下面是花，有时云下面是蜂蜜！用“如果/否则”模块来收集花里的花蜜，否则酿蜂蜜（因为它是蜂巢）。
      grade3_ConditionalsElse_5_instruction: |-
        There will be either a flower or a
        honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block to collect
        nectar if there is a flower.\r
        Otherwise, make honey (because there is a
        honeycomb).
      grade3_ConditionalsElse_6_instruction: |-
        I am not sure how much nectar this
        flower has, but I know it has either 1, 2, or 3 nectar. \r
        \r
        Combine the
        conditional blocks (`if` and/or `if/else`) to only get as much nectar as the
        flower has. \r
        \r
        Remember, the amount of nectar can change each time you
        run the puzzle!
      grade3_ConditionalsElse_7_instruction: |-
        这些花里可能有一个，两个或三个花蜜。
        \r
        \r
        完成“检查紫色花朵”的函数，然后用它来从所有花里收集花蜜。
      grade3_ConditionalsElse_8_instruction: |-
        Write the function for `check flower
        make honey`. \r
        \r
        Your function should check if the purple flower has 3,
        2, or 1 nectar and get all of the nectar. \r
        Then, move forward and make
        honey.
      grade3_ConditionalsElse_9_instruction: |
        **Assessment:** This cloud is either
        hiding a flower with one nectar or a honeycomb that needs one honey.  \r
        \r
        Complete
        the `get nectar or make honey` function, then call it to collect the nectar
        or honey. \r
      grade3_ConditionalsElse_TeacherIDo_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade3_Conditionals_1 BAD_instruction: 用循环来收集所有的花蜜。
      grade3_Conditionals_1_instruction: |-
        我是一只饥饿的蜜蜂！\r
        帮我用最少的模块从花朵中采集花蜜。
      grade3_Conditionals_10 BAD_instruction: 用嵌套循环从每行的所有花里收集花蜜。
      grade3_Conditionals_10_instruction: |-
        这里有好多！\r
        \r
        用你学到的知识来收集所有的花蜜，并制作蜂蜜。
      grade3_Conditionals_11 BAD_instruction: 评估 - 用当循环来收集所有花蜜。
      grade3_Conditionals_11_instruction: |-
        让我们把东西都放到一起！\r
        \r
        用你学到的知识只从有花蜜的花里收集，用的模块越少越好。别忘了最后制作蜂蜜。
      grade3_Conditionals_12_instruction: |-
        这个像阶梯一样的图形看起来很熟悉。\r
        \r
        你能用尽量少的模块从花里收集一些花蜜吗？
      grade3_Conditionals_13_instruction: |-
        Assessment: Collect all of the nectar.
        Be careful not to try to collect nectar from a purple flower if it doesn't
        have any.
      grade3_Conditionals_2_instruction: "查看所有的花蜜！\\r\n\\r\n帮我用尽可能少的模块来收集花蜜并酿成蜂蜜。
        \ "
      grade3_Conditionals_3_instruction: |-
        Be careful not to collect nectar from a
        purple flower if it doesn't have any. \r
        You must first check if the nectar
        is equal to 1 using the `if nectar` block.
      grade3_Conditionals_4_instruction: 用“如果”模块来检查是否花里面有花蜜。
      grade3_Conditionals_5_instruction: 从每一朵花中采集花蜜（如果有的话）。
      grade3_Conditionals_6_instruction: 这块地里有红色和紫色的花。你能看到红色的花里有多少花蜜，但不知道紫色的有多少。收集所有的花蜜。
      grade3_Conditionals_7_instruction: 采集每一朵花的花蜜。
      grade3_Conditionals_8_instruction: "我想知道那里有什么！\\r\n\\r\n帮我飞到院子里，只从有花蜜的花里收集花蜜。 "
      grade3_Conditionals_9_instruction: |-
        Help me find all of the nectar using as
        few blocks as possible!
      grade3_Conditionals_TeacherIDo_instruction: |-
        Check this flower with an "if"
        block to see if there is any nectar available.
      grade3_Debugging_1_instruction: 这些模块真的让我很困扰。改正错误，从而能够采集所有花蜜。
      grade3_Debugging_5_instruction: |-
        That flower looks tasty! \r
        \r
        Fix the error(s)
        to collect all of the nectar.  You can now use both run and step.
      grade3_Debugging_6_instruction: |-
        真是一个甜蜜的挑战！\r
        \r
        改正错误，从而能够采集所有花蜜。
      grade3_Debugging_7_instruction: 改正错误，从而能够采集所有花蜜，并酿成蜂蜜。
      grade3_Debugging_9_instruction: |-
        有点耐心！\r
        \r
        你需要修复这个程序的一些问题，，从而能够采集所有花蜜，并酿成蜂蜜。
      grade3_Debugging_TeacherIDo_instruction: |-
        These blocks are really bugging me.
        Fix the error(s) to collect all of the nectar and make all of the honey.
      grade3_Loops_1_instruction: "Can you help me collect the nectar from these\nflowers? "
      grade3_Loops_10_instruction: |-
        忙碌的蜜蜂！\r
        \r
        帮助蜜蜂用尽可能少的模块来收集花蜜并酿蜂蜜。
      grade3_Loops_11_instruction: |-
        这条路的形状和其它的不一样。\r
        \r
        你能用尽量少的模块来收集所有花蜜吗？
      grade3_Loops_12_instruction: 你能为蜜蜂找到最快的路，收集所有花蜜并酿造蜂蜜吗？
      grade3_Loops_2_instruction: 这次，用循环来收集所有花蜜。
      grade3_Loops_3_instruction: 用一个“重复”循环来收集所有花蜜。
      grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all of the
        nectar and make all of the honey.
      grade3_Loops_5_instruction: 多美的花园啊！帮助蜜蜂访问每一朵。你能找到只用7个模块就实现的方法吗？
      grade3_Loops_6_instruction: |-
        这个谜题中的循环应该进行多少次？\r
        \r
        循环是你的朋友！用一些循环来减少模块，并完成这道谜题。
      grade3_Loops_7_instruction: |-
        这些花看上去很好吃！\r
        \r
        用尽可能少的模块，从每朵花里收集蜂蜜。
      grade3_Loops_8_instruction: 用尽可能少的模块来收集花蜜，并酿造蜂蜜。
      grade3_Loops_9_instruction: 用最少的模块来收集花蜜，并在蜂窝那里酿造蜂蜜。
      grade3_Loops_TeacherIDo_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      grade3_RunningFarm_1_instruction: |-
        Use conditionals to make sure that you pick
        all of the corn, but don't disturb the stalks where nothing is growing yet.
      grade3_RunningFarm_10_instruction: |-
        Collect all of the corn and lettuce, then
        pick the pumpkin.
      grade3_RunningFarm_11a_instruction: |-
        Collect all of the corn and lettuce, then
        pick the pumpkin.
      grade3_RunningFarm_2_instruction: |-
        Help the farmer collect both corn and lettuce
        from the field.
      grade3_RunningFarm_3_instruction: |-
        *"Corn, lettuce, AND pumpkins! Help me
        harvest them all."*
      grade3_RunningFarm_4_instruction: |-
        Help the farmer pick all of the lettuce
        in each cluster before moving on to the next bunch.
      grade3_RunningFarm_5_instruction: |-
        This field has clusters of corn, lettuce,
        and pumpkins all growing together.  Can you collect them all?
      grade3_RunningFarm_6_instruction: |-
        Can you figure out how to pick the pumpkin?  Make
        sure to collect all of the corn along the way!
      grade3_RunningFarm_7_instruction: |-
        **Challenge:** Collect all of the corn and
        lettuce, then pick the pumpkin.
      grade3_RunningFarm_8_instruction: |-
        Have wheat and potatoes planted randomly
        at various growth stages. Now we introduce multiple while loops (stacked)
        nested inside a loop. The two while loops in the solution represent different
        while loops (while there is potato and while there is wheat)
      grade3_RunningFarm_9_instruction: |-
        Add Weeds element. Weeds start out in random
        spots in the field and spread more and more rapidly as time goes on.. This
        puzzle is the culminating game-like puzzle. Students should have the event
        blocks (up, down, left, right, spacebar) available in the toolbox to use if
        they want. The entire field should be planted randomly with mostly wheat,
        potatoes, and a few weeds.
      grade3_RunningFarm_TeacherIDo_instruction: |-
        Teacher I Do: Show students how
        they can use loops and conditionals to plant and harvest 2 rows of crops.
      grade3_RunningFarm_TeacherIDo2_instruction: |-
        Teacher I Do: Show students how
        to use loops to harvest many crops.
      grade3_bee_Conditionals_new4_instruction: |-
        Now try checking all of these flowers
        with "if" blocks to see if there is any nectar available.
      grade3_bee_conditionals_new1a_instruction: |-
        Help the bee collect all of the
        nectar. \r
        \r
        You can only collect nectar from flowers, but you can check
        any space to see if there is a flower.
      grade3_bee_conditionals_new1b_instruction: |-
        帮助蜜蜂采集所有的花蜜。
        你只能从花中采到花蜜，但你可以查看任何地方以确定哪里有花。
      grade3_bee_conditionals_new2_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      grade3_bee_conditionals_new2a_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      grade3_bee_conditionals_new2b_instruction: |-
        Collect all of the nectar. You
        can only collect nectar from flowers, but you can check any space to see if
        there is a flower.
      grade3_bee_conditionals_new3a_instruction: |-
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade3_bee_conditionals_new3b_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      grade3_bee_conditionals_new3c_instruction: |-
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade3_bee_conditionals_quantum1_instruction: 看看这朵云下面有没有一朵花。如果有花，就采集花蜜。
      grade3_bee_conditionals_quantum2_instruction: '在采集花蜜前，检查每朵云下面是不是有花。\r

'
      grade3_bee_conditionals_quantum3_instruction: |-
        Some of these clouds might have
        honeycombs under them.  Be sure to check if a honeycomb is hiding behind each
        cloud!
      grade3_bee_conditionals_quantum4_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      grade3_bee_conditionals_quantum5_instruction: |-
        Use the `if/else` block to collect
        nectar if there is a flower.\r
        Otherwise, make honey (because there is a
        honeycomb).
      grade3_maze_Loop1_instruction: "Assessment:  Get me to the sunflower using\nonly
        5 blocks! "
      grade3_maze_loops1_instruction: Get the zombie to the sunflower.
      grade3_maze_loops2_instruction: "用最少的模块帮我到达向日葵！\\r\n\\r\n试着在一个“重复”循环里添加另一个，这样来减少所需要模块的数量。
        \ "
      grade3_maze_loops2a_instruction: |-
        Get the zombie to the sunflower using the
        fewest number of blocks possible.
      grade3_maze_loops3_instruction: |-
        让我们到达下一级！\r
        用循环来使用尽可能少的模块，帮我到达向日葵！
      grade3_maze_loops4_instruction: 用尽可能少的模块来帮我到达向日葵！
      grade3_maze_loops5_instruction: 用尽可能少的模块来帮我到达向日葵！
      grade3_maze_nestedLoops1_instruction: |-
        Can you get me to the pig using 5 of
        the same kind of blocks?
      grade3_maze_nestedLoops2_instruction: |-
        Can you get to the pig by creating a
        loop that uses only one `move forward` block inside of a `repeat`?
      grade3_maze_nestedLoops3_instruction: |-
        Get me to the pig! You can only use
        one move forward block this time
      grade3_maze_nestedLoops4_instruction: |-
        In this puzzle, two `repeat` loops will
        help you get to the pig with the fewest number of blocks!
      grade3_playLab_buildGame_1_instruction: |-
        There is a new block in this lesson,
        the `random integer` block. It is used to choose a random number. Write a
        program where the robot says a random number between 1 and 100!
      grade3_playLab_buildGame_2_instruction: |-
        We have already created a random integer,
        "j", which is either 1 or 0. Now, we need to use it to decide whether our
        card is red or black. Add a second if statement to the code under `when run`
        to complete this code.
      grade3_playLab_buildGame_3_instruction: |-
        There are 13 different card values
        in a deck of cards, so we'll need to have 13 options. Under the empty `when
        run` block, add a line that sets the placeholder "i" to a random integer
        between 1 and 13.
      grade3_playLab_buildGame_4_instruction: |-
        In a deck of cards, a card with value
        1 isn't actually called a "1", there's a special name. Write an if statement
        that checks if the random number is a 1, then tell the computer that the value
        of that card is "Ace".
      grade3_playLab_buildGame_5_instruction: |-
        We can just call the cards from 2
        to 10 by their numbers, so add an if statement that checks whether the number
        generated is within those numbers, then sets the card value to the number
        generated.
      grade3_playLab_buildGame_6_instruction: |-
        There are three more cards with special
        names in the deck. Add to your code so that a card number 11 is called a "Jack",
        a 12 is a "Queen" and a 13 is a "King"
      grade3_playLab_buildGame_7_instruction: |-
        You already know what color your card
        is, but what suit is it? Add code to the conditional statement "if card is
        Red" to choose hearts or diamonds.
      grade3_playLab_buildGame_8_instruction: |-
        Add the second part of the code to
        choose a suit, copying what you made for a Red card.
      grade3_playLab_buildGame_final_instruction: |-
        Final stage for playlab conditionals
        level (could hide entire function so that students just work with point scoring)
      grade3_playLab_buildGame_final2_instruction: |-
        Here's all of your code to choose
        a card - try adding some other fun features!
      grade3_robotFarmer_ConditionalsIntro4_instruction: |-
        Help the farmer remove
        this entire pile using a `while` loop.
      grade3_robotFarmer_ConditionalsIntro_1_instruction: |-
        *"Hi, I'm a farmer.
        I need your help to flatten the field on my farm so it's ready for planting!"*  \r
        \r
        Move
        to the pile of dirt and use the `remove` block to remove it.
      grade3_robotFarmer_ConditionalsIntro_10_instruction: |-
        I'm working late, so
        it's dark out, and I can't tell how large the piles are. Now I don't have
        all the options I used to have on the while block. Move me along the field,
        and if there is a pile, remove it
      grade3_robotFarmer_ConditionalsIntro_10a_instruction: "Flatten all of these\npiles
        using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_11_instruction: |-
        It's still dark outside.
        Move me along the field. If there is a pile, remove it, and if there is a
        hole, fill it in. Hint: use the dropdown menu of options on the "if" block.
      grade3_robotFarmer_ConditionalsIntro_11a_instruction: "Flatten all of these\npiles
        using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_2_instruction: |-
        Next, move to the hole
        and fill it with six shovelfuls of dirt, using the `fill` block.
      grade3_robotFarmer_ConditionalsIntro_3_instruction: |-
        *"Move to the pile of
        dirt and tell me how many shovelfuls to remove using as few blocks as possible."*
      grade3_robotFarmer_ConditionalsIntro_4_instruction: |-
        *"I don't know how much
        dirt is in this pile!"*\r
        \r
        Help the farmer remove this entire pile using
        a `while` loop.
      grade3_robotFarmer_ConditionalsIntro_5_instruction: "Help me remove all of\nthis
        dirt. "
      grade3_robotFarmer_ConditionalsIntro_6_instruction: |-
        Remove all the piles of
        dirt, using as few blocks as possible. The new options in the dropdown menu
        on the "while" block tell me if I'm standing on a pile or a hole.
      grade3_robotFarmer_ConditionalsIntro_7_instruction: |-
        Look at all of those holes!  Each
        one needs a different amount of dirt.   \r
        \r
        You can use the `while` loop
        to easily fill them all!
      grade3_robotFarmer_ConditionalsIntro_8_instruction: |-
        Fill in the hole at the
        end of each of these paths.
      grade3_robotFarmer_ConditionalsIntro_9_instruction: "**Challenge:** Fill all\nof
        these holes using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo1_instruction: |-
        Help me fill
        in all these holes with 5 shovelfuls of dirt. Hint: you can put a "repeat"
        block inside the "while" block.
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo2_instruction: |-
        I'm working
        late, so it's dark out, and I can't tell how large the piles are. Now I
        don't have all the options I used to have on the while block. Move me along
        the field, and if there is a pile, remove it
      grade4_arist_functions_star0_instruction: |-
        Have you drawn something like this
        star before? Practice making it one more time by adding a turn and a repeat
        block.
      grade4_arist_nested_loop_circles1_instruction: |-
        Assessment: Use a nested loop
        to complete the design.
      grade4_arist_nested_loop_flags1_instruction: |-
        Loop the given code to create
        a windmill.
      grade4_arist_nested_loop_polygons1_instruction: |-
        Loop this design 10 times.
        \r
        \r
        How much do you have to turn each time you loop?
      grade4_arist_nested_loop_polygons2_instruction: "Loop this shape 6 times. \\r\n\\r\nHow\nmuch
        do you have to turn each time you loop? "
      grade4_arist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_arist_nested_loop_triangles2_instruction: "Now nest this loop inside\nanother
        loop to draw 10 triangles.  This is called a \"nested\" loop.  "
      grade4_arist_nested_loop_triangles3_instruction: |-
        Can you draw a hexagon by
        looping the triangle code?
      grade4_arist_nested_loop_triangles4_instruction: |-
        Draw the teeth in the alligator's
        mouth!
      grade4_arist_nested_loop_triangles5_instruction: |-
        Create a sun by nesting the
        starter code in another loop.\r
        \r
        To get this cool design with a hollow
        center, you'll need to jump forward by the length of the triangle before
        turning.
      grade4_arist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_freeplay_instruction: |-
        You are on your own now! Try out any of
        the functions you used in this stage or try this new function that will automatically
        give your image a beautiful background color! This creation will be saved
        to your Projects dashboard so that you can easily edit it any time!
      grade4_artist_functions1_instruction: |-
        帮助僵尸艺术家画一个边长为100像素的眼镜。\r
        眼镜之间的桥梁长75像素。
      grade4_artist_functions2_instruction: |-
        Functions let you define new blocks!
        \r
        \r
        We've moved the blocks needed for drawing a square into a function
        called `draw a square`. This time, use the `draw a square` function to create
        the glasses. \r
        \r
        The squares are 75 pixels apart.
      grade4_artist_functions2a_instruction: |-
        Create this image using only the blocks
        provided.
      grade4_artist_functions3a_instruction: |-
        Create this image using only the blocks
        provided.
      grade4_artist_functions3b_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      grade4_artist_functionsChallenge0_instruction: |-
        **Challenge:** Create as many
        functions as you think you need to make this drawing of 50 pixel squares.
      grade4_artist_functions_challenge_instruction: |-
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_challenge2_instruction: |-
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_freeplay_instruction: |-
        You are on your own now! Try
        out any of the functions you used in this stage or try this new function that
        will automatically give your image a beautiful background color! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade4_artist_functions_stars0_instruction: |-
        You can make this drawing by adding
        a repeat block.
      grade4_artist_functions_stars1_instruction: |-
        Now that you can draw a star,
        try drawing four stars!
      grade4_artist_functions_stars2_instruction: |-
        Draw only those three stars to
        finish this puzzle.
      grade4_artist_functions_stars3_instruction: |-
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade4_artist_functions_windows0_instruction: |-
        Make this window by drawing
        a square, then turning 90 degrees before drawing another, and so on.
      grade4_artist_functions_windows1_instruction: |-
        If you can draw one window,
        you can draw three! Try using your choice of a nested loop or a function here.
        Don't forget the jump block!
      grade4_artist_functions_windows2_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!\r
        \r
        -
        The top windows are 50 pixels away from each other.  \r
        - The bottom windows
        are 100 pixels below the top set.
      grade4_artist_nestedLoops_challenge_instruction: |-
        Click here to see the full
        instructions again!\r
        \r
        Here is the code for an interesting shape.  What
        happens when you repeat it multiple times, turning between each iteration?   Notice
        that the turns in this shape add up to 420 degrees, which means that when
        your artist is done drawing, it will be facing a different direction than
        when you started.  That new direction is exactly 60 degrees to the right of
        where you began.
      grade4_artist_nestedLoops_challenge2_instruction: |-
        Now for a challenge!  Feel
        free to use trial and error. You are not expected to get the image perfect
        the first time.   Want to see more hints?  Click here!
      grade4_artist_nested_loop_circles1_instruction: |-
        Assessment: Use a nested loop
        to complete the design.
      grade4_artist_nested_loop_flags1_instruction: |-
        Loop the given code to create
        a windmill.
      grade4_artist_nested_loop_polygons1_instruction: |-
        Loop this design 10 times.
        \r
        \r
        How much do you have to turn each time you loop?
      grade4_artist_nested_loop_polygons2_instruction: "Hi, I'm the Artist! Let's\ncreate
        some drawings together! For starters, try repeating this shape 6 times.\n\\r\n\\r\nHow
        much do you have to turn each time you loop? "
      grade4_artist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_artist_nested_loop_triangles1_instruction: |-
        Complete the code to draw
        these triangles.  The first one is done for you.  Hint:  3 triangles in a
        360 degree rotation.
      grade4_artist_nested_loop_triangles2_instruction: |-
        Let's make a quick adjustment
        to get completely different image!  \r
        Hint: ? × 10 = 360
      grade4_artist_nested_loop_triangles3_instruction: |-
        Can you draw a hexagon by
        looping the triangle code?\r
        Hint: 6 × ? = 360
      grade4_artist_nested_loop_triangles4_instruction: |-
        Hi! I'm the Artist. Let's
        try some different types of drawings together. Can you help me draw the bottom
        teeth in the alligator's mouth?
      grade4_artist_nested_loop_triangles5_instruction: |-
        Create a sun by nesting
        the starter code in another loop.\r
        \r
        To get this cool design with a hollow
        center, you'll need to jump forward by the length of the triangle before
        turning.
      grade4_artist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade4_artist_parameters_triangles1_instruction: |-
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade4_artist_parameters_triangles2_instruction: 你注意到这些函数模块有什么不同吗？点击“运行”来看看会发生什么。
      grade4_artist_parameters_triangles2b_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles3_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles4_instruction: |-
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade4_artist_parameters_trianglesx_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_bee_conditionals_nested_loops_instruction: |-
        Collect all of the nectar.
        You can only collect nectar from flowers, but you can check any space to see
        if there is a flower.
      grade4_bee_conditionals_new1_instruction: |-
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      grade4_bee_conditionals_new1a_instruction: |-
        Help the bee make all of the honey.
        You can only make honey at a honeycomb, but you can check any space to see
        if there is a honeycomb.
      grade4_bee_conditionals_new2_instruction: |-
        Can you help the bee collect the
        nectar from the flowers? You can only collect nectar from flowers, but you
        can check any space to see if there is a flower.
      grade4_bee_conditionals_new2a_instruction: |-
        Make all of the honey. It's actually
        more efficient to check each space for a honey comb, even when you know some
        are empty.
      grade4_bee_conditionals_new3a_instruction: |-
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade4_bee_conditionals_new3b_instruction: |-
        Uh oh! The bee is not sure if he
        should collect nectar or make honey. Can you help him out?
      grade4_bee_conditionals_new3c_instruction: |-
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade4_bee_conditionals_quantum1_instruction: |-
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      grade4_bee_conditionals_quantum2_instruction: |-
        更多的云！\r
        \r
        检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。\r
        \r
        记住：
        不是所有云下面都是一样的东西！
      grade4_bee_conditionals_quantum3_instruction: |-
        Now I just want to make honey.
        Some of these clouds might have honeycombs under them. The way we've been
        going about things won't work here. Be sure to check if a honeycomb is hiding
        behind each cloud!
      grade4_bee_conditionals_quantum4_instruction: |-
        Sometimes this cloud covers
        a flower, and sometimes it covers a honeycomb! Use the if/else block to collect
        nectar if it is a flower, else to make honey (because it is a honeycomb).
      grade4_bee_conditionals_quantum5_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade4_bee_functions_instruction: |-
        Have we met before? I'm the farmer! Please
        help me remove this pile of dirt and fill this hole.
      grade4_bee_functions1_instruction: 采集每一朵花的花蜜。
      grade4_bee_functions10_instruction: |-
        Create a function to collect all of the
        nectar from each flower.
      grade4_bee_functions11_instruction: |-
        Solve this function by creating a function
        to turn, move forward and make all of the honey, then return the bee to where
        it started and turn back.
      grade4_bee_functions2_instruction: 函数能执行多个模块来完成一个任务。使用“采2份花蜜”方程来采集花蜜。
      grade4_bee_functions3_instruction: |-
        函数是由多个模块组合起来完成同一个任务。\r
        \r
        用“get 5”函数来一次得到5个花蜜。
      grade4_bee_functions4_instruction: |-
        “移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r
        \r
        用这个函数收集所有的花蜜。
      grade4_bee_functions5_instruction: This puzzle will be deleted!
      grade4_bee_functions6_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      grade4_bee_functions7_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      grade4_bee_functions8_instruction: |-
        Create your own function that goes down
        a path, gets nectar, makes honey, and then returns the bee to the top of the
        path. Then collect all the nectar and make all the honey!
      grade4_bee_functions9_instruction: |-
        Create a function that collects all of
        the nectar from each flower.
      grade4_bee_nestedLoops0_instruction: 用循环来收集所有的花蜜。
      grade4_bee_nestedLoops1_instruction: '从每朵花里收集所有的花蜜。用嵌套循环。 '
      grade4_bee_nestedLoops2_instruction: |-
        **Challenge:** Figure out how to get
        all of the nectar using only the blocks available.
      grade4_bee_nestedLoops2a_instruction: |-
        Collect all of the nectar using  as
        few blocks as possible.
      grade4_bee_nestedLoops3_instruction: 创建一个嵌套循环来收集所有花蜜。
      grade4_bee_nestedLoops4_instruction: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      grade4_bee_nestedLoops_assess_instruction: |-
        **Assessment:** Collect all of
        the nectar and make all of the honey using loops.\r
        \r
        Hint: There are several
        possible solutions!
      grade4_designProcess_vid_instruction: |-
        Prepare to build a project within some
        given parameters.
      grade4_farmer_functions1_instruction: |-
        *"Have we met before? I'm the farmer!"*\r
        \r
        Help
        the farmer get to the pumpkins and pick them.
      grade4_farmer_functions2_instruction: |-
        Take the code you just wrote it and
        use it to define a new function. Call the function twice to complete the puzzle.
      grade4_farmer_functions3_instruction: |-
        Try using a couple of repeat blocks
        within your function definition.
      grade4_farmer_functions4_instruction: |-
        Swap out your repeat loops for more
        versatile while loops.
      grade4_farmer_functions5_instruction: |-
        Things are going to start getting trickier,
        but don't give up! You can use the same while loops to check both spaces
        in each pass.
      grade4_farmer_functions6_instruction: |-
        The paths are a different length. You
        can use a different type of while loop to keep the pattern going as long as
        you need to.
      grade4_frozen_freeplay_instruction: 你已经正式成为艺术大师！创建一个冬季仙境。
      grade4_frozen_functions0_instruction: |-
        Can you figure out what number to replace
        the question marks with to draw a circle?
      grade4_frozen_functions1_instruction: |-
        Use the new “draw a circle” function
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions1a_instruction: |-
        Use the new “Create a circle” block
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions2_instruction: |-
        Now let's create 20 overlapping circles,
        turning 18 degrees between each circle.
      grade4_frozen_functions3_instruction: |-
        Here's a ”Create circle” block that
        can make circles of different sizes. Can you use this to create a small circle
        of size 5 and a larger circle of size 10?
      grade4_frozen_functions4_instruction: |-
        Intricate snow patterns can be created
        with very simple shapes. Can you make a pattern by repeating 5 circles of
        size 5 and 5 circles of size 10?
      grade4_frozen_nested_loop_diamonds1_instruction: |-
        Let’s use a repeat block
        to create a rhombus. Like a square, all sides are equal length, but the angles
        are different. This one has 60 degree and 120 degree angles instead of all
        90 degree angles.
      grade4_frozen_nested_loop_diamonds2_instruction: |-
        Did you know every snowflake
        is a different shape? Let's create a new snowflake by using another “Repeat"
        block to repeat a parallelogram 4 times, turning right by 90 degrees between
        each parallelogram.
      grade4_frozen_nested_loop_diamonds3_instruction: |-
        Now, let's create a new
        snowflake by using the repeat block to repeat a parallelogram 10 times, turning
        right by 36 degrees between each one.
      grade4_frozen_nested_loop_rectangle1_instruction: |-
        Hi, I’m Anna of Arendelle!
        Let’s use a repeat block to create a rectangle. This one is  200 pixels long
        and 100 pixels tall. All of the corners are 90 degree angles.
      grade4_frozen_square_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s make a
        square with the “Repeat” block, which uses fewer blocks. How many times (???)
        should the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop1_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s make
        a square with the “Repeat” block, which uses fewer blocks. How many times
        (???) should the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop2_instruction: |-
        Let's create three squares, turning
        after each square. Be sure to turn by 120 degrees before each new square.
      grade4_frozen_square_loop3_instruction: 你可以试试绘制一朵雪花。用“重复”块绘制10个正方形，而且记得在绘制成每个正方形移之后，先把它移转36度后才开始画下一个正方形。
      grade4_playLab_proj_example1_instruction: instructions
      grade4_playLab_proj_example1a_instruction: |-
        Take a look at this project.  Do
        you see how it was made?
      grade4_playLab_proj_example2a_instruction: |-
        Take a look at this project.  Do
        you see how it was made?
      grade4_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. "
      grade4_playlab_test_instruction: |-
        用右方向键来发射馅饼。\r
        \r
        在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用"points = points + 1"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。
      grade4_playlab_test2_instruction: |-
        Here's a function called `jump` that causes
        your main character to jump up 100 pixels. Run the program and use the jump
        function to collect all of the flags by moving the dog with the arrow keys.
      grade4_prompt_test_instruction: This is a test play lab level.
      grade4_review_artist1_instruction: |-
        Hi, I'm an artist. You can write code
        to make me draw almost anything. Use a few blocks to make me draw over the
        grey lines in the picture. (Each line is 100 pixels long)
      grade4_review_artist2_instruction: 这个房子需要一个屋顶！提示：所有三面都具有相同的长度。
      grade4_review_artist3_instruction: |-
        The jump block moves the artist without
        drawing. Draw the dashed line using both the `jump forward` and `move forward`
        blocks. Each line is 50 pixels long.
      grade4_review_bee1_instruction: |-
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      grade4_review_bee2_instruction: 用最少的模块来收集花蜜，并在蜂窝那里酿造蜂蜜。
      grade4_review_bee3_instruction: |-
        忙碌的蜜蜂！\r
        \r
        帮助蜜蜂用尽可能少的模块来收集花蜜并酿蜂蜜。
      grade4_scaffolded_project1_instruction: |-
        It is amazing how much you have learned!
        Let's put them together to make a game, step by step.
      grade4_scaffolded_project2_instruction: |
        Now let's get things moving! Use
        event handlers and actions to make your hero move.\r
        \r
        We've added these
        blocks to your tool box to help you.\r
      grade4_scaffolded_project3_instruction: |-
        Now that your game has a hero, it's
        time to start adding other actors and assigning them behaviors. \r
        \r
        Add
        two or more additional actors to your game and make them move. Do you want
        to have an actor patrol back and forth? Try using a these new blocks to bring
        these other components of your game to life!
      grade4_scaffolded_project4_instruction: |-
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project4a_instruction: |-
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project5_instruction: |-
        Now spend some time making sure the
        game works the way you want. Try including a way to win or lose your game.
      grade4_scaffolded_project6_instruction: |-
        You've finished! Now you can play
        your game or share it with your friends and classmates!
      grade5_artist_binary1_instruction: |-
        二进制是只用两个选择来表达信息的方法。这里，我们会使用选项“关”（通过数字0来表达）和“开”（通过数字1来表达）。\r
        \r
        我们给你提供了一个“像素”的网格，你能穿过并将某些正方形像素设置为“开”。你能让小画家在第一行画出二进制字符串“01010101”吗？
      grade5_artist_binary10_instruction: 单击此处查看提示。
      grade5_artist_binary11_instruction: |-
        Free Play: Here's a blank canvas for
        you to draw on.  Have fun!
      grade5_artist_binary2_instruction: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\r
        \r
        运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。
      grade5_artist_binary3_instruction: |-
        Which of these binary strings could you
        loop 8 times to draw this image?
      grade5_artist_binary4_instruction: |-
        Can you draw this pattern by looping just
        three binary digits (0s and 1s)?
      grade5_artist_binary5_instruction: |-
        Each binary string represents one row of
        this picture. Can you rearrange them so it draws a smiley face instead of
        a frowny face?
      grade5_artist_binary6_instruction: |-
        Which 6 digit binary string, repeated 11
        times, will draw this image?
      grade5_artist_binary7_instruction: 能让你重复并画出这个图形的最短的二进制字符串是什么?
      grade5_artist_binary8_instruction: 完成这幅画。
      grade5_artist_binary9_instruction: |-
        Here's a higher resolution canvas to draw
        on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start to get
        creative with the bits?
      grade5_artist_for_loops1_instruction: 用一个计数循环来画这个边长50的三角形。如果你从1数到3，每次增加1，这就像一个“重复”循环模块。
      grade5_artist_for_loops10_instruction: |-
        Can you figure out how to use all of
        the things you've learned to create this image?\r
        \r
        Need a hint? Click
        here.
      grade5_artist_for_loops1a_instruction: |-
        Try using a `for loop`to create this
        triangular design. Don't worry that the numbers are different than the last
        puzzle. As long as you turn by the right number of degrees, the artist will
        make the correct shape!
      grade5_artist_for_loops1b_instruction: |-
        Experiment with the `for` loop and
        play with the `counter` variable.
      grade5_artist_for_loops2_instruction: |-
        Use a `repeat` inside of a `for` loop
        to create this stack of triangles that goes from 50 pixels to 100 pixels.
      grade5_artist_for_loops3_instruction: "These triangles go from 20 pixel sides\nto
        200 pixel sides, and each triangle is 20 pixels larger than the last. "
      grade5_artist_for_loops4_instruction: "These squares start at 15 pixels long,\nthe
        largest is 300 pixels long, and each square is 15 pixels larger than the\nlast. "
      grade5_artist_for_loops5_instruction: |-
        Just one little change to the code from
        the last image can create this drawing. Can you figure out what that change
        is?\r
        \r
        Hint:  You need to remove something!
      grade5_artist_for_loops6_instruction: |-
        If you turn a little bit more or less
        than you normally would for a shape, it creates a neat effect. Try using some
        of the code from the last level, but turning 89 degrees to create this twisted
        square spiral.
      grade5_artist_for_loops7_instruction: |-
        Make three small changes to the code
        from the last level to get this!
      grade5_artist_for_loops7a_instruction: |-
        Take the angle down to 72 degrees to
        get a spiraled pentagon.
      grade5_artist_for_loops7b_instruction: |-
        Use the counter inside the `set alpha`
        block to get this faded center.\r
        (This hexagon pattern was made using a
        60 degree turn.)
      grade5_artist_for_loops8_instruction: "Remember back in a previous stage when\nwe
        used a variable to control the number of sides in a shape? We are going\nto
        do the same thing with the `counter` variable now. This pattern starts\nwith
        a triangle and adds one side at a time until it draws a decagon (10 sides).\nEach
        side should be 100 pixels long. "
      grade5_artist_for_loops9_instruction: |-
        Let's put it all together!  Using your
        knowledge of `for` loops and the `counter` variable, create this drawing where
        each shape has two more sides than the last.  Make sure that each side is
        10 times as long as the number of sides in the polygon.\r
        \r
        Very little
        of the code has been provided for you.
      grade5_artist_for_loopsfreeplay11_instruction: |-
        自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。\r
        \r
        需要提示？点击这里。
      grade5_artist_for_loopsfreeplay12_instruction: |-
        Free Play: Try using the `counter`
        variable with other drawing elements to make magical images like this one.
      grade5_artist_freeplay_instruction: |-
        Create your own project! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade5_artist_functionparameters10_instruction: '自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 '
      grade5_artist_functionparameters11_instruction: 自由发挥：这是除了你写的函数，还有更多的函数让你发挥。画些令人惊叹的东西吧！用不同的笔宽度来看看你能画出什么不一样的图形！
      grade5_artist_functionparameters7_instruction: |-
        This image is similar to the
        last. Can you use a `for` loop with your function to make this design?
      grade5_artist_functionparameters8_instruction: 这个三角形的边长是21像素，每条边比上一个长7像素。用“乘法”模块来只用一个函数来画出图形。记得在每个多边形间跳跃100像素。
      grade5_artist_functionparameters9_instruction: |-
        Challenge: Edit `draw a spiral
        edge` to use `length` and `sides` parameters, then recreate these shapes.
      grade5_artist_functionparameters9a_instruction: |-
        Finish off the `draw a spiral
        edge` function to also ask for a minimum length for the center of the spiral.
      grade5_artist_functionparameters9b_instruction: |-
        Can you figure out how to
        make this drawing using the function that you just created?
      grade5_artist_functionparameters_6_instruction: 你能完成这个图形吗？所有形状的边长都是100像素。
      grade5_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade5_artist_parameters_squares1a_instruction: |-
        This program looks okay from
        here, but something isn't working right. See if you can figure out how to
        edit the function 'draw a square' to find the bug.
      grade5_artist_parameters_squares2_instruction: |-
        Create a function called 'draw
        a square' and use it to outline these four boxes. Make sure to add a parameter
        for 'length'! Starting from the upper right, the box widths are 50, 100,
        150, and 200.
      grade5_artist_parameters_squares2a_instruction: |-
        Edit the function to accept
        a parameter called `length`.
      grade5_artist_parameters_stars1_instruction: |-
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade5_artist_parameters_triangles1_instruction: |-
        This program looks okay from
        here, but something isn't working right. See if you can figure out how to
        edit the function 'draw a square' to find the bug.
      grade5_artist_parameters_triangles1a_instruction: |-
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade5_artist_parameters_triangles1aa_instruction: |-
        Click "edit" to fill
        in the function definition of "draw a triangle" and add a parameter. It
        should take a length parameter, just like the triangle. This time, draw 3
        triangles: 25, 50 and 75 pixels in length, each 100 pixels apart.
      grade5_artist_parameters_triangles2_instruction: |-
        This drawing can be easily
        created using a new type of function that includes a parameter. The sides
        of each triangle are 25 pixels larger than the last.  The first triangle has
        25 pixel sides. Replace the '???' with the correct values to draw the picture.
      grade5_artist_parameters_triangles2a_instruction: 你注意到这些函数模块有什么不同吗？点击“运行”来看看会发生什么。
      grade5_artist_parameters_triangles3_instruction: |-
        The code for this triangle
        function is broken.\r
        \r
        Can you edit the function to fix it, and then make
        triangles of length 150, 75, 25?
      grade5_artist_parameters_triangles4_instruction: |-
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade5_artist_parameters_trianglesy_instruction: |-
        The code for this triangle
        function is broken.\r
        \r
        Can you edit the function to fix it, and then make
        triangles of length 150, 75, 25?
      grade5_artist_variables_freeplay10_instruction: |-
        Free Play: Experiment with
        the number of sides this shape has. Can you change the algorithm so that the
        overall size of the shape stays the same, no matter how many sides it has?
        Hint: If you divide your starting length by the number of sides, the length
        of each side will get shorter as the number of sides gets higher.
      grade5_artist_variables_freeplay14_instruction: |-
        Free Play: Check it out! Now
        your algorithm is nested within one more loop. Experiment with changing the
        values of your two variables to draw cool patterns.\r
        \r
        For even more effect,
        try playing with color!  Use random colors inside loops to see how it changes
        your design.
      grade5_artist_variables_freeplay15_instruction: |-
        Want a second peek at the
        inspiration design or the hints?  Click here!\r
        \r
        Otherwise, make a design
        all your own!
      grade5_artist_variables_freeplay16_instruction: |-
        Still playing?  Here is a
        blank canvas where you can create whatever you want!
      grade5_artist_variables_hexagons1_instruction: |-
        Let's try it again! \r
        \r
        Can
        you set the `length` variable to 60 to make this cool design with hexagons?
      grade5_artist_variables_letterT11_instruction: |-
        Here’s more complicated code
        using the same concepts from the last puzzle - what should you set the "sides"
        variable to in order to draw this picture made of squares?
      grade5_artist_variables_new1_instruction: |-
        Here is a program that will create
        an image. There are a few things that are wrong with it.
      grade5_artist_variables_octagons13_instruction: |-
        When a shape has lots of sides,
        each side needs to be shorter if you want the whole pattern to fit on the
        screen. \r
        Let's recreate the algorithm for this amazing pattern, but instead
        of manually setting the `length` variable, let's use a math block with the
        `sides` variable inside to make sure that each shape fits correctly. The perimeter
        of each polygon is 300 pixels.\r
        Need some hints?  Click here.
      grade5_artist_variables_pentagon8_instruction: |-
        Use what you learned in the
        last puzzle to create this hexagon using the "sides" variable.\r
        \r
        See
        how you could change just one value to draw a triangle,  square, pentagon,
        or octagon?
      grade5_artist_variables_pentagon9_instruction: |-
        Now, recreate the algorithm
        from the last level and create a pentagon with sides of length 150.
      grade5_artist_variables_pentagons1_instruction: |-
        Draw this pattern of pentagons
        with 100 pixel sides by setting the right value for `length` and dropping
        the `length` variable into all of the the correct places. \r
        \r
        See how
        you only have to set the value for `length` once, and the code uses the right
        value everywhere?
      grade5_artist_variables_pentagons12_instruction: |-
        Let's set the "sides"
        variable to 5. The more sides we add to this algorithm, the bigger this whole
        pattern gets! Notice that there is another variable called "length". We
        can now use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      grade5_artist_variables_rectangle6_instruction: |-
        Now I want to make a rectangle
        that is twice as tall as it is wide. We've got a variable called "width"
        that needs to be set to 100. Can you use the math blocks to complete the code?
      grade5_artist_variables_square7_instruction: |-
        Here’s some code that can draw
        any regular polygon. There’s a new variable called sides that is set to 4.
        Can you use the sides variable (along with the math block) to turn the right
        amount regardless of how many sides there are in the polygon?\r
        \r
        Click
        here to go back to the hint!
      grade5_artist_variables_triangles2_instruction: |-
        Instead of using "move forward
        by 150," the "move" block is now referencing a variable called "length."
        Can you set "length" to 150 to draw this new triangle?
      grade5_artist_variables_triangles3_instruction: "Drag a number block to both\nthe
        `set length` block and the `repeat _ times` block to draw a set of 50\npixel
        triangles. "
      grade5_bee_for_loops1_instruction: |-
        Use a loop to collect the nectar from each
        flower.
      grade5_bee_for_loops10_instruction: |-
        What should your increment be to collect
        15, then 12, then 9, 6, 3 nectar?
      grade5_bee_for_loops11_instruction: "**Challenge:** Take what you've learned\nabout
        `for` loops and try to solve this problem. "
      grade5_bee_for_loops2_instruction: |-
        Add the code necessary to make sure the
        bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      grade5_bee_for_loops3_instruction: |-
        Try this puzzle using the `for` loop with
        `counter` variable and see how much shorter your code becomes.
      grade5_bee_for_loops4_instruction: "Replace the ??? in the \"for loop\" with\nthe
        largest amount of nectar the bee has to collect. "
      grade5_bee_for_loops6_instruction: |-
        You can also use a "for loop" to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      grade5_bee_for_loops7_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      grade5_bee_for_loops8_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      grade5_bee_for_loops9_instruction: |-
        Use the `counter` variable to navigate
        this garden with the fewest number of blocks possible.
      grade5_bee_parameters_new8_instruction: |-
        That's a great function you've created!
        You are officially on your own now. Collect all the nectar. Make all the honey.
      grade5_bee_parameters_new9_instruction: |-
        Bonus Challenge! If you are feeling
        ambitious, try this puzzle. It is possible to collect all of the nectar and
        make all of the honey using only a For loop, a Repeat loop, a function call,
        and a turn. Try it all on your own, or view the hints to build it step-by-step.
        Great job with this stage!
      grade5_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      grade5_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. "
      grade5_playlab_parameters_points1_instruction: "Here's the same game but most\nof
        the code is hidden. We've added a new function called `score_points.`\\r\n\\r\nAdd\na
        new parameter called `points` to the `player_score` function. \\r\n\\r\nThe\n`score_points`
        function should be able to both add and remove points from\n`player_score`
        depending on which actor is hit.\\r\nChanging the score by 1\nwill add a point,
        while changing the score by -1 will subtract a point.\\r\n\\r\nWhen\nyou're
        done, click \"Run\" to play.  When Dog scores 6 points, you will move\non
        to the next puzzle. "
      grade5_playlab_variables1_instruction: |-
        This time you don't have to write
        any code, just hit "Run" to play the game! In this game, you're the dog
        who is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      grade5_playlab_variables10_instruction: 编辑“巡逻”函数来添加一个“演员”参数，由此调用它时，能让屏幕上每个演员都动起来。记住，演员对应到数字1和2，3上。
      grade5_playlab_variables11_instruction: 添加另一个叫做“速度”的参数到“巡逻”函数里。试着在“设置速度”模块中使用新的“速度”参数，来帮助企鹅在别的小动物之前得到所有旗帜。
      grade5_playlab_variables12_instruction: |-
        来点好玩的！看看这里的代码，是否你能明白每个模块都做了什么。\r
        \r
        看完以后，用方向键来让小狗收集到所有旗帜。\r
        注意：你不必改动代码。
      grade5_playlab_variables13_instruction: 在小狗碰到任何一个演员时，用“当演员碰到”模块来把小狗送回左上角。
      grade5_playlab_variables14_instruction: "It's free play time! Have fun with\nall
        the blocks in your tool box. "
      grade5_playlab_variables1ask_instruction: |-
        This time, when you press 'run',
        you will see a 'prompt' asking you for a number. This number will be stored
        in a variable used to set the dog's speed.\r
        \r
        \r
        Pay attention to how
        this program is written!
      grade5_playlab_variables2_instruction: 上次关卡的比赛不太公平！改变“dog_speed”（小狗速度）变量来让你能比小猫收集到更多的旗帜。最先收集到10个旗帜的就算赢！
      grade5_playlab_variables3_instruction: 用左右方向键来移动，上方向键跳跃。看看你能否收集到所有的旗帜。
      grade5_playlab_variables4_instruction: |-
        Now we're using a variable called
        "height" to control how high the dog can jump. Update the "height" variable
        so that the dog can jump high enough to reach all the flags.
      grade5_playlab_variables5_instruction: |-
        You've seen now how a variable can
        be used to set the height of an actor's jump. How else could  you use a variable?\r
        \r
        Let's
        build a game! First we'll need a score. Try setting the 'points' variable
        to give yourself 10 free points!
      grade5_playlab_variables6_instruction: |-
        用右方向键来发射馅饼。\r
        \r
        在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用"points = points + 1"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。
      grade5_playlab_variables6ask_instruction: |-
        This time, you need 100 points to
        win!  Don't worry though, you can choose how many points you earn each time
        you score a hit!\r
        Try adding the `ask` block and changing the number 1 out
        for the variable `value`.
      grade5_playlab_variables7_instruction: 很好，让确保这个游戏不是太简单。任何时候，小狗（演员1）被小猫（演员2）扔出的三明治击中时，就丢失1分。让我们从10分开始，这样就不会太难了。让你的分数从10减到0来通过这一关。
      grade5_playlab_variables71_instruction: "这是一个早先的游戏，但是大部分代码都隐藏了。这里有个新函数叫做“score_points”（得分）。\\r\n\\r\n编辑这个函数，使得“points”（分数）参数能加到“player_score”（玩家分数）变量上。\n\\r\n\\r\n“player_score”（玩家分数）变量会在每次小狗的馅饼碰到小猫时增加，在小猫的三明治碰到小狗时减少。\\r\n\\r\n注意：当你完成后，点击“运行”来玩玩。当小狗得到6分时，就可以进入下一关。 "
      grade5_playlab_variables81_instruction: "我们已为你添加了上一关的函数。\\r\n\\r\n用“如果”模块来编写你的游戏，当play_score(玩家分数)
        大于某个值时，调用level_up(升级) 函数。\\r\n\\r\n例如：“play_score” > 6\\r\n\\r\n玩游戏，并且达到第3级来到达下一关。 "
      grade5_playlab_variables9_instruction: |-
        这里有个函数叫做“巡逻”。\r
        \r
        编辑它来让猫向上移动400像素，再向下移动400像素。
      grade5_playlab_variables_freeplay_instruction: |-
        Free Play time! Here are all
        of the variables we've played with so far in this stage, as well as a few
        more in case you want them. \r
        \r
        Notice that there are now so many blocks
        in our toolbox that they need to be organized!  Here, we've put each piece
        into an appropriate category.  Take some time to explore everything that is
        available. When you're done browsing, make a game or story using repeats,
        variables, and events.  \r
        \r
        Hint: scroll down to see all the commands
        in the workspace.
      grade5_playlab_variables_jump1_instruction: |-
        This puzzle uses a hidden function
        that makes the dog jump when the 'up' arrow is pressed. The height of the
        jumps can be set at the start of the game using the 'jumpPower' variable.
        Try to touch all of the flags!
      grade5_prompt_test_instruction: |-
        Variables aren't always numbers. What if
        you wanted to store a word or text? Experiment with the new `ask` block.
      gradeK_sequence_4_instruction: Try this one yourself from the beginning.
      gradek_adventurer_loops1_instruction: |
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      gradek_adventurer_loops10_instruction: |-
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loops2_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `[E-->]` block?
      gradek_adventurer_loops3_instruction: |-
        Can you fix Laurel's path to get all
        of this gold?
      gradek_adventurer_loops4_instruction: |-
        Use what you learned to get all of the
        coins.
      gradek_adventurer_loops4a_instruction: |-
        Add to this code to collect all of
        the coins.
      gradek_adventurer_loops5_instruction: |-
        What should you add to this code to
        get all of the gold?
      gradek_adventurer_loops6_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_challenge_instruction: |-
        **Challenge:** The gold goes
        all the way up these stairs!  Write the code to help me get it all.
      gradek_adventurer_loops8_instruction: |-
        Help me get all of the gold from this
        deep valley.
      gradek_adventurer_loops9_instruction: |-
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loopsFP_instruction: |-
        Eureka!  Collect as much gold as you
        can!
      gradek_adventurer_loopsPre_instruction: |-
        This is Laurel the Adventurer.  Mover
        her around and get as much gold as you can!
      gradek_artist_loops1_instruction: 帮助艺术家两次向前来画这条线。
      gradek_artist_loops2_instruction: |-
        Our artist is trying to draw a line five
        times, but can't get it right.  Can you help?
      gradek_artist_loops3_instruction: |-
        Now, use a `repeat` loop to draw this line
        five times!
      gradek_artist_loops4_instruction: |-
        Draw a line seven steps long. This will
        become our horizon.
      gradek_artist_loops5_instruction: Let's put a nice hill in the back.
      gradek_artist_loops6_instruction: |-
        Use the `repeat` loop to add waves to the
        water.
      gradek_artist_loops7_instruction: We need a ladder up to the boat.
      gradek_artist_loops8_instruction: |-
        Challenge: The stairs down to the dock are
        broken.  Help me fix them.
      gradek_artist_loops9_instruction: |-
        Time to head back to land. Help me put down
        stones so I don't fall in!
      gradek_artist_loopsA_instruction: |-
        Help me build steps to watch the ship sail
        away.
      gradek_artist_loopsFP_instruction: |-
        The artist saw something funny in the distance.  Draw
        what you think he saw.
      gradek_artist_loopsPre_instruction: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      gradek_playlab_events1_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      gradek_playlab_events1a_instruction: |-
        Add a block so that when you click the
        "up" button, Olive the Cat walks up.
      gradek_playlab_events1c_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      gradek_playlab_events2_instruction: |-
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      gradek_playlab_events2a_instruction: |-
        Add a block so that when you click "down"
        Olive the Cat walks down.
      gradek_playlab_events2c_instruction: |-
        Help Jorge the Dog get moving by connecting
        the `move left` block to the `when left` event block that is already in the
        workspace.
      gradek_playlab_events3_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3a_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3b_instruction: |-
        Add a button so that Olive the Cat moves
        right when you click the "right" button.
      gradek_playlab_events3c_instruction: |-
        Now, get Jorge to move right when the
        `right` button is clicked.
      gradek_playlab_events4_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      gradek_playlab_events4a_instruction: |-
        Add a block so that Olive the Cat moves
        left when you click the "left" button.
      gradek_playlab_events4c_instruction: |-
        Add events to have Jorge move up and
        down when the `up` and `down` buttons are pressed.
      gradek_playlab_events5_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      gradek_playlab_events5a_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      gradek_playlab_events5c_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      gradek_playlab_eventsA_instruction: |-
        Now, have the cat change to a random size
        AND have it play a random sound when you click the center button.
      gradek_playlab_eventsFP_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      gradek_playlab_eventsPre_instruction: |-
        This is a Play Lab level.  Move blocks
        to the workspace and see what happens!
      group test_instruction: Make a game
      harvester_Kahoot_instruction: 现在帮农民采摘玉米，莴苣，**和** 南瓜。
      harvey_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      harvey_snowflake_artist1_instruction: 让你的雪花准备好可以进行3d 打印!
      harvey_snowflake_artist2_instruction: 让你的雪花准备好可以进行3d 打印!
      harvey_tictactoe_instruction: 让我们玩游戏吧! 尽可能多地画 X。你能一排放3个吗？
      iceAgeLoopsforVideo_instruction: 你能只用一个`向前移动`模块来得到橡子吗？
      iceage_click_hello_instruction: '你能帮喜得在你点击他的时候呼叫他的朋友们吗？ '
      iceage_click_hello_2018_instruction: '你能帮助喜得，在点击他的时候呼叫他的朋友们吗？ '
      iceage_free_play_instruction: '是时候创造你自己的游戏或故事了! '
      iceage_free_play_2018_instruction: '是时候创造你自己的游戏或故事了！

'
      iceage_free_playcourseF_IceAge_11_instruction: '是时候来创作你自己的游戏或者故事了！ '
      iceage_hello1_instruction: 通过拖拽“说”模块出来，并连接“当运行时”事件的底部来帮助喜得说“Hello！”
      iceage_hello1_2018_instruction: 通过拖拽`说`模块出来，并连接`当运行时`事件下来帮助喜得说“你好！”
      iceage_hello2_instruction: 使用`演员___ 说`模块两次来帮助曼尼和喜得相互打招呼。
      iceage_hello2_2018_instruction: 帮助曼尼和喜得使用的 ' 演员 _____ 说 ' 块两次互相打招呼, 。
      iceage_move_events_instruction: 写代码, 帮助 斯奎特 得到所有的橡子!
      iceage_move_events_2018_instruction: 写代码, 帮助 斯奎特 得到所有的橡子!
      iceage_move_to_actor_instruction: 当迭戈发现曼尼时, 通过将一个方块连接到 "当演员触碰" 事件时播放声音。
      iceage_move_to_actor_2018_instruction: 当迭戈发现曼尼时, 通过将一个方块连接到`当演员触碰`事件下来播放声音。
      iceage_move_to_flag_instruction: 斯奎特 在找他的橡子! 你能帮他移动最后200像素吗？
      iceage_move_to_flag_2018_instruction: 斯奎特在找他的橡子！你能帮他移动最后200像素吗？
      iceage_repeat_instruction: 重复左右移动来帮助格瑞尼做锻炼。
      iceage_repeat_2018_instruction: 通过反复左右移动来帮助格瑞尼锻炼身体。
      iceage_sound_and_points_instruction: '你可以完成这个程序，使它在喜得和格瑞尼相撞的时候同时**发出声音**并**得一分**吗？ '
      iceage_sound_and_points_2018_instruction: '你可以完成这个程序，使它在喜得和格瑞尼相撞的时候同时**发出声音**并**得一分**吗？ '
      iceage_throw_hearts_instruction: 使用`演员__ 扔`的命令使喜得(演员1) 向格瑞尼(演员2) 扔红心，并且当格瑞尼被红心砸中的时候，设定她的心情为开心。
      iceage_throw_hearts_2018_instruction: 使用 "演员 __ 抛出" 命令让 喜得 (演员 1) 把心扔向格瑞尼 (演员
        2), 并设置格瑞尼的心情, 让她在被击中时高兴。
      iceage_warn_ice_age_instruction: 把场景切换到一个冰雪的背景，并且设定喜得 (演员1) 的速度为快速。
      iceage_warn_ice_age_2018_instruction: 把场景切换到一个冰雪的背景，并且设定喜得 (演员1) 的速度为快速。
      jessie-test_instruction: Lots of instructions
      k-1 maze 1_instruction: 你能将我移到西边到达那只猪吗？
      k1stickerfreeplay_instruction: |-
        The artist saw something funny in the distance.  Draw
        what you think he saw.
      kikiTesta_instruction: |-
        Our adventurer wants to collect coins.  But she can
        only use 4 blocks to get them.\r
        \r
        Can you help her grab as many as she
        can using just 4 blocks?
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      level 'grade3_Loops_10_instruction: |-
        Such a busy bee!\r
        \r
        Help bee collect
        all of the nectar and make all of the honey with the fewest blocks possible.
      level 'grade3_Loops_11_instruction: |-
        The shape of this path is different than
        the others. \r
        \r
        Can you collect all of the nectar using as few blocks
        as possible?
      level 'grade3_Loops_12_instruction: |-
        Can you find the quickest way for the
        bee to collect all of the nectar and make all of the honey?
      level 'grade3_Loops_2_instruction: |-
        This time, use a loop to gather all of
        the nectar.
      level 'grade3_Loops_3_instruction: |-
        Use a `repeat` loop to collect all of the
        nectar.
      level 'grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      level 'grade3_Loops_5_instruction: |-
        What a beautiful field of flowers!   Help
        the bee visit each one.  Can you find a way to do it with fewer than 7 blocks?
      level 'grade3_Loops_6_instruction: |-
        How many times can loops help you in this
        puzzle?  \r
        \r
        Loops are your friend! Use a few of them to complete this
        puzzle with the fewest blocks possible.
      level 'grade3_Loops_7_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      level 'grade3_Loops_8_instruction: |-
        Collect all the nectar and make all of
        the honey using the fewest blocks possible.
      level 'grade3_Loops_9_instruction: |-
        Collect nectar from each flower and make
        honey at each honeycomb using the fewest blocks possible.
      level grade3_Loops_2_instruction: |-
        This time, use a loop to gather all of the
        nectar.
      loop pet test_instruction: |-
        上次你练习了如何用"一直重复"来让精灵永远做一些事情。这次，我们会用它来制作一个虚拟宠物。 \r
        \r
        这条狗的名字叫黛西。黛西非常喜欢胡萝卜点心。用"拖动并放下"模块将胡萝卜移动到黛西那里。
      loops_forvideo_angrybirds_ab_instruction: 用循环让鸟到猪那里！
      loops_forvideo_angrybirds_cf_instruction: 用循环让鸟到猪那里！
      loops_forvideo_bee_cf_instruction: 用循环帮助蜜蜂从所有花朵里采花蜜！
      loops_forvideo_collector_ab_instruction: 用循环帮助收集者拿到所有的宝石！
      loops_forvideo_collector_cf_instruction: 用循环帮助罗瑞尔收集宝石！
      loops_forvideo_harvester_ab_instruction: 用循环帮助收割者采摘玉米！
      loops_forvideo_harvester_cf_instruction: 用循环帮助收割者采摘所有作物！
      loops_forvideo_iceage_ab_instruction: 用循环帮助斯奎特得到橡子！
      loops_forvideo_iceage_cf_instruction: 用循环帮助斯奎特得到橡子！
      love_spring_1_instruction: |-
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |-
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      marina_gameLab_play_instruction: Clone this level and make your own blocks!
      mike3bit_instruction: |-
        We start you with the 4x2 image Maddie was creating,
        but we've left out the last few pixels. Finish off the image by figuring
        out which colors are missing and encoding them.
      mike3bitbird_instruction: |-
        Here's an example of an image made with 3-bit color.
        Try changing it to understand how it works. If you want to reset the image,
        press "Start Over".
      mike3bitfreeplay_instruction: |-
        Make something awesome and share it with your
        classmates! You can copy and paste the value of a pixel to use it repeatedly.
      mike3bitmario_instruction: |-
        A careless binary coder typed in ONE extra 0 or
        1 somewhere within this image's data. The extra bit that is causing Mario
        to glitch out! \r
        \r
        Delete the extra bit to restore Mario back to normal!
      pet game 1_instruction: 用"制作一个新精灵"模块来制作自己的宠物！
      pet game 2_instruction: 你的宠物需要练习！用"增加行为"模块来让它们移动。
      pet game 3_instruction: 宠物喜爱玩具！用另一个"制作精灵"模块来给你的宠物一个玩具，然后用"向前移动"行为来让宠物跑向它们的新玩具。
      pet game 4_instruction: |-
        当你的宠物到达它们的玩具时，它们会跟高兴！
        用"当碰到时"模块来检测是否宠物到达了玩具。\r
        \r
        当发生时，用"移除行为"模块来让它们停止走动，并用"增加行为"模块来让他们来个舞会！
      pet game 5_instruction: 你能为宠物增加大量的行为来交互！摆弄一下"设置精灵"模块，自己试试吧！
      pet game 6_instruction: 让宠物学会跟随命令很重要。用"当点击时"模块来教宠物只在你点击了它们后才开始闲逛。
      pet game 7_instruction: 宠物还需要学会停止！用"当点击时"模块来在你点击了它们后，让它们停止闲逛。
      pet game 8_instruction: 你的宠物现在有两个玩具了！用"当点击时"模块来让它们移动到你点击的玩具上。
      pet game 9_instruction: 你的宠物已经很棒了，它们需要款待。用"增加行为"模块来制作一个可以拖动的骨头，然后将它拖动到宠物那里。
      playEventsK1_instruction: |-
        This game is called "Play Lab".  See if you can
        figure out what each block does.
      playEventsK2_instruction: |-
        Jorge wants to say "Hi there."\r
        \r
        Can you
        help?
      playEventsK3_instruction: |-
        Jorge wants to be scratched behind the ears!  Can
        you make it so that when you click Jorge he is happy?
      playEventsK4_instruction: |-
        Can you make it so that Jorge the dog chases Robin
        the bird when you click the up arrow?
      playEventsK5_instruction: |-
        Now add code so that Robin flies away when you click
        the forward arrow.
      playEventsK6_instruction: |-
        Have Robin talk back to Jorge when you click on
        her.
      playEventsK7_instruction: What else can you do in this fun scene?
      playLabDebugVideo1_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      ramp_artist_loops1_instruction: 向前移动60像素, 来完成这个关卡。
      ramp_artist_loops1_2018_instruction: 向前移动60像素, 来完成这个关卡。
      ramp_artist_loops2_instruction: 向前移动五次, 画这条彩色线。
      ramp_artist_loops2_2018_instruction: 向前移动五次, 画这条彩色线。
      ramp_artist_loops3_instruction: 使用 "重复" 循环绘制五色虚线。
      ramp_artist_loops3_2018_instruction: 使用 "重复" 循环绘制五色虚线。
      ramp_artist_loops4_instruction: 当您在循环的最后添加了右转72度后, 会发生什么？
      ramp_artist_loops4_2018_instruction: 当您在循环的最后添加了右转72度后, 会发生什么？
      ramp_artist_loops5_instruction: 使用循环来绘制这个楼梯。
      ramp_artist_loops5_2018_instruction: 使用循环来绘制这个楼梯。
      ramp_artist_loops6_instruction: 编辑您的循环来绘制此楼梯。
      ramp_artist_loops6_2018_instruction: 编辑您的循环来绘制此楼梯。
      ramp_artist_loops7_instruction: 寻找规律，使用循环使此代码更短！
      ramp_artist_loops7_2018_instruction: 寻找规律，使用循环使此代码更短！
      ramp_artist_loops8_instruction: 寻找规律，使用循环使此代码更短。
      ramp_artist_loops8_2018_instruction: 寻找规律，使用循环使此代码更短。
      ramp_artist_loops8_clone_instruction: 寻找规律，使用循环使此代码更短。
      ramp_artist_loops9_instruction: 通过绘制正方形来解决这个关卡。
      ramp_artist_loops9_2018_instruction: 通过绘制正方形来解决这个关卡。
      sample1_instruction: |-
        Our adventurer wants to collect coins.  But she can only
        use 4 blocks to get them.\r
        \r
        Can you help her grab as many as she can
        using just 4 blocks?
      sample10_instruction: Now you can use loops to draw whatever you like!
      sample10a_instruction: |-
        You have helped the adventurer and her bee!  As a reward,
        please stay and play around in my magical village. \r
        \r
        You should have
        everything you need to create a game of your own.
      sample2_instruction: |-
        Use what you've learned to help bee gather all of this
        honey using only the blocks that you have here.
      sample2a_instruction: |-
        Use what you've learned to help bee gather all of this
        honey using only 4 blocks.
      sample3_instruction: |-
        Now you can help bee make all of the honey using just
        the blocks in the toolbox.
      sample3assessment_instruction: |-
        Can you figure out how to gather all of this
        nectar in just one try?
      sample4_instruction: |-
        Our adventurer has found a stash of coins in this cave.\r
        \r
        Can
        you help her grab as many as she can using just 7 blocks?
      sample5_instruction: Help bee make all of the honey.
      sample6_instruction: 'Challenge: Help bee make all of the honey.'
      sample7assessment_instruction: |-
        Can you help bee make all of the honey in just
        one try?
      sample8_instruction: |-
        Look at this trove of coins! How many can you get the
        adventurer to grab?
      sample9_instruction: 'Use loops to help the artist connect all of the dots.

'
      sample9a_instruction: |-
        The wizard has found his potions!  Use everything you
        have learned to help him collect them.
      scrat 16 (copy 1)_instruction: |-
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: 橡子！橡子！橡子！使用“如果”的代码块让我到哪里，最好用最少的代码块。
      scrat 17 (copy 1)_instruction: |-
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: 好吧，我们再做一遍吧-这个与上一个差不多，但是小心墙壁！
      scrat 18 (copy 1)_instruction: |-
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: 这个“如果-否则”代码块检查这个条件是否成立，然后做一件事或另一件事。如果想让我得到橡子的活，你需要尝试使用这个“如果-否则”代码块。
      scrat 19 (copy 1)_instruction: |-
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: 最后一个“如果-否则”模块的练习，你能第一次就做正确吗？
      scrat 20_instruction: 你可以只添加3个代码块就帮我解决一个更复杂的迷宫吗？如果你做对了，我能走任何长度的曲线了。快一点！冰在融化！
      skratDebugVideo1_instruction: 让斯奎特到橡子那里。
      subgoal U3 L4 introducing subgoal labels_instruction: 介绍东方龟并移动龟。
      subgoal U3L2 Using Simple Commands_instruction: 在上方和乌龟起始位置的左侧画一个 1 x 1 的正方形。点击查看完整的说明。
      subgoalU3L2_TurtleSquare_right_instruction: 在正面和起始位置的右侧画一个正方形的。(单击此处可显示完整的说明)
      template test_instruction: what up
      testArtistForTestK_instruction: |-
        The Artist is trying to draw a line five times,
        but can't get it right.  Can you help?
      test_sarah_instruction: hi
      u3-old-drawing-view_instruction: DO This
      valentine_artist_03_instruction: 现在尝试自己练习!
      weird_playLab_instruction: |-
        About My Robot Project! Write code so that clicking
        on each bird shows a new fact about your robot.
